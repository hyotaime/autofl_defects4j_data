[
    {
        "class_name": "org.apache.commons.lang.StringUtilsSubstringTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsSubstringTest.java",
        "signature": "org.apache.commons.lang.StringUtilsSubstringTest.StringUtilsSubstringTest(java.lang.String)",
        "snippet": "    public StringUtilsSubstringTest(String name) {\n        super(name);\n    }",
        "begin_line": 39,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsSubstringTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsSubstringTest.java",
        "signature": "org.apache.commons.lang.StringUtilsSubstringTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsSubstringTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsSubstringTest.java",
        "signature": "org.apache.commons.lang.StringUtilsSubstringTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(StringUtilsSubstringTest.class);\n        suite.setName(\"StringUtilsSubstring Tests\");\n        return suite;\n    }",
        "begin_line": 47,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 72)",
            "(line 49,col 9)-(line 49,col 52)",
            "(line 50,col 9)-(line 50,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsSubstringTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsSubstringTest.java",
        "signature": "org.apache.commons.lang.StringUtilsSubstringTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        super.setUp();\n    }",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsSubstringTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsSubstringTest.java",
        "signature": "org.apache.commons.lang.StringUtilsSubstringTest.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        super.tearDown();\n    }",
        "begin_line": 57,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 58,col 9)-(line 58,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsSubstringTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsSubstringTest.java",
        "signature": "org.apache.commons.lang.StringUtilsSubstringTest.testSubstring_StringInt()",
        "snippet": "    public void testSubstring_StringInt() {\n        assertEquals(null, StringUtils.substring(null, 0));\n        assertEquals(\"\", StringUtils.substring(\"\", 0));\n        assertEquals(\"\", StringUtils.substring(\"\", 2));\n        \n        assertEquals(\"\", StringUtils.substring(SENTENCE, 80));\n        assertEquals(BAZ, StringUtils.substring(SENTENCE, 8));\n        assertEquals(BAZ, StringUtils.substring(SENTENCE, -3));\n        assertEquals(SENTENCE, StringUtils.substring(SENTENCE, 0));\n        assertEquals(\"abc\", StringUtils.substring(\"abc\", -4));\n        assertEquals(\"abc\", StringUtils.substring(\"abc\", -3));\n        assertEquals(\"bc\", StringUtils.substring(\"abc\", -2));\n        assertEquals(\"c\", StringUtils.substring(\"abc\", -1));\n        assertEquals(\"abc\", StringUtils.substring(\"abc\", 0));\n        assertEquals(\"bc\", StringUtils.substring(\"abc\", 1));\n        assertEquals(\"c\", StringUtils.substring(\"abc\", 2));\n        assertEquals(\"\", StringUtils.substring(\"abc\", 3));\n        assertEquals(\"\", StringUtils.substring(\"abc\", 4));\n    }",
        "begin_line": 64,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 59)",
            "(line 66,col 9)-(line 66,col 55)",
            "(line 67,col 9)-(line 67,col 55)",
            "(line 69,col 9)-(line 69,col 62)",
            "(line 70,col 9)-(line 70,col 62)",
            "(line 71,col 9)-(line 71,col 63)",
            "(line 72,col 9)-(line 72,col 67)",
            "(line 73,col 9)-(line 73,col 62)",
            "(line 74,col 9)-(line 74,col 62)",
            "(line 75,col 9)-(line 75,col 61)",
            "(line 76,col 9)-(line 76,col 60)",
            "(line 77,col 9)-(line 77,col 61)",
            "(line 78,col 9)-(line 78,col 60)",
            "(line 79,col 9)-(line 79,col 59)",
            "(line 80,col 9)-(line 80,col 58)",
            "(line 81,col 9)-(line 81,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsSubstringTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsSubstringTest.java",
        "signature": "org.apache.commons.lang.StringUtilsSubstringTest.testSubstring_StringIntInt()",
        "snippet": "    public void testSubstring_StringIntInt() {\n        assertEquals(null, StringUtils.substring(null, 0, 0));\n        assertEquals(null, StringUtils.substring(null, 1, 2));\n        assertEquals(\"\", StringUtils.substring(\"\", 0, 0));\n        assertEquals(\"\", StringUtils.substring(\"\", 1, 2));\n        assertEquals(\"\", StringUtils.substring(\"\", -2, -1));\n        \n        assertEquals(\"\", StringUtils.substring(SENTENCE, 8, 6));\n        assertEquals(FOO, StringUtils.substring(SENTENCE, 0, 3));\n        assertEquals(\"o\", StringUtils.substring(SENTENCE, -9, 3));\n        assertEquals(FOO, StringUtils.substring(SENTENCE, 0, -8));\n        assertEquals(\"o\", StringUtils.substring(SENTENCE, -9, -8));\n        assertEquals(SENTENCE, StringUtils.substring(SENTENCE, 0, 80));\n        assertEquals(\"\", StringUtils.substring(SENTENCE, 2, 2));\n        assertEquals(\"b\",StringUtils.substring(\"abc\", -2, -1));\n    }",
        "begin_line": 84,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 62)",
            "(line 86,col 9)-(line 86,col 62)",
            "(line 87,col 9)-(line 87,col 58)",
            "(line 88,col 9)-(line 88,col 58)",
            "(line 89,col 9)-(line 89,col 60)",
            "(line 91,col 9)-(line 91,col 64)",
            "(line 92,col 9)-(line 92,col 65)",
            "(line 93,col 9)-(line 93,col 66)",
            "(line 94,col 9)-(line 94,col 66)",
            "(line 95,col 9)-(line 95,col 67)",
            "(line 96,col 9)-(line 96,col 71)",
            "(line 97,col 9)-(line 97,col 64)",
            "(line 98,col 9)-(line 98,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsSubstringTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsSubstringTest.java",
        "signature": "org.apache.commons.lang.StringUtilsSubstringTest.testLeft_String()",
        "snippet": "    public void testLeft_String() {\n        assertSame(null, StringUtils.left(null, -1));\n        assertSame(null, StringUtils.left(null, 0));\n        assertSame(null, StringUtils.left(null, 2));\n        \n        assertEquals(\"\", StringUtils.left(\"\", -1));\n        assertEquals(\"\", StringUtils.left(\"\", 0));\n        assertEquals(\"\", StringUtils.left(\"\", 2));\n        \n        assertEquals(\"\", StringUtils.left(FOOBAR, -1));\n        assertEquals(\"\", StringUtils.left(FOOBAR, 0));\n        assertEquals(FOO, StringUtils.left(FOOBAR, 3));\n        assertSame(FOOBAR, StringUtils.left(FOOBAR, 80));\n    }",
        "begin_line": 101,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 53)",
            "(line 103,col 9)-(line 103,col 52)",
            "(line 104,col 9)-(line 104,col 52)",
            "(line 106,col 9)-(line 106,col 51)",
            "(line 107,col 9)-(line 107,col 50)",
            "(line 108,col 9)-(line 108,col 50)",
            "(line 110,col 9)-(line 110,col 55)",
            "(line 111,col 9)-(line 111,col 54)",
            "(line 112,col 9)-(line 112,col 55)",
            "(line 113,col 9)-(line 113,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsSubstringTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsSubstringTest.java",
        "signature": "org.apache.commons.lang.StringUtilsSubstringTest.testRight_String()",
        "snippet": "    public void testRight_String() {\n        assertSame(null, StringUtils.right(null, -1));\n        assertSame(null, StringUtils.right(null, 0));\n        assertSame(null, StringUtils.right(null, 2));\n        \n        assertEquals(\"\", StringUtils.right(\"\", -1));\n        assertEquals(\"\", StringUtils.right(\"\", 0));\n        assertEquals(\"\", StringUtils.right(\"\", 2));\n        \n        assertEquals(\"\", StringUtils.right(FOOBAR, -1));\n        assertEquals(\"\", StringUtils.right(FOOBAR, 0));\n        assertEquals(BAR, StringUtils.right(FOOBAR, 3));\n        assertSame(FOOBAR, StringUtils.right(FOOBAR, 80));\n    }",
        "begin_line": 116,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 117,col 9)-(line 117,col 54)",
            "(line 118,col 9)-(line 118,col 53)",
            "(line 119,col 9)-(line 119,col 53)",
            "(line 121,col 9)-(line 121,col 52)",
            "(line 122,col 9)-(line 122,col 51)",
            "(line 123,col 9)-(line 123,col 51)",
            "(line 125,col 9)-(line 125,col 56)",
            "(line 126,col 9)-(line 126,col 55)",
            "(line 127,col 9)-(line 127,col 56)",
            "(line 128,col 9)-(line 128,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsSubstringTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsSubstringTest.java",
        "signature": "org.apache.commons.lang.StringUtilsSubstringTest.testMid_String()",
        "snippet": "    public void testMid_String() {\n        assertSame(null, StringUtils.mid(null, -1, 0));\n        assertSame(null, StringUtils.mid(null, 0, -1));\n        assertSame(null, StringUtils.mid(null, 3, 0));\n        assertSame(null, StringUtils.mid(null, 3, 2));\n        \n        assertEquals(\"\", StringUtils.mid(\"\", 0, -1));\n        assertEquals(\"\", StringUtils.mid(\"\", 0, 0));\n        assertEquals(\"\", StringUtils.mid(\"\", 0, 2));\n        \n        assertEquals(\"\", StringUtils.mid(FOOBAR, 3, -1));\n        assertEquals(\"\", StringUtils.mid(FOOBAR, 3, 0));\n        assertEquals(\"b\", StringUtils.mid(FOOBAR, 3, 1));\n        assertEquals(FOO, StringUtils.mid(FOOBAR, 0, 3));\n        assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 3));\n        assertEquals(FOOBAR, StringUtils.mid(FOOBAR, 0, 80));\n        assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 80));\n        assertEquals(\"\", StringUtils.mid(FOOBAR, 9, 3));\n        assertEquals(FOO, StringUtils.mid(FOOBAR, -1, 3));\n    }",
        "begin_line": 131,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 132,col 9)-(line 132,col 55)",
            "(line 133,col 9)-(line 133,col 55)",
            "(line 134,col 9)-(line 134,col 54)",
            "(line 135,col 9)-(line 135,col 54)",
            "(line 137,col 9)-(line 137,col 53)",
            "(line 138,col 9)-(line 138,col 52)",
            "(line 139,col 9)-(line 139,col 52)",
            "(line 141,col 9)-(line 141,col 57)",
            "(line 142,col 9)-(line 142,col 56)",
            "(line 143,col 9)-(line 143,col 57)",
            "(line 144,col 9)-(line 144,col 57)",
            "(line 145,col 9)-(line 145,col 57)",
            "(line 146,col 9)-(line 146,col 61)",
            "(line 147,col 9)-(line 147,col 58)",
            "(line 148,col 9)-(line 148,col 56)",
            "(line 149,col 9)-(line 149,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsSubstringTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsSubstringTest.java",
        "signature": "org.apache.commons.lang.StringUtilsSubstringTest.testSubstringBefore_StringString()",
        "snippet": "    public void testSubstringBefore_StringString() {\n        assertEquals(\"foo\", StringUtils.substringBefore(\"fooXXbarXXbaz\", \"XX\"));\n\n        assertEquals(null, StringUtils.substringBefore(null, null));\n        assertEquals(null, StringUtils.substringBefore(null, \"\"));\n        assertEquals(null, StringUtils.substringBefore(null, \"XX\"));\n        assertEquals(\"\", StringUtils.substringBefore(\"\", null));\n        assertEquals(\"\", StringUtils.substringBefore(\"\", \"\"));\n        assertEquals(\"\", StringUtils.substringBefore(\"\", \"XX\"));\n        \n        assertEquals(\"foo\", StringUtils.substringBefore(\"foo\", null));\n        assertEquals(\"foo\", StringUtils.substringBefore(\"foo\", \"b\"));\n        assertEquals(\"f\", StringUtils.substringBefore(\"foot\", \"o\"));\n        assertEquals(\"\", StringUtils.substringBefore(\"abc\", \"a\"));\n        assertEquals(\"a\", StringUtils.substringBefore(\"abcba\", \"b\"));\n        assertEquals(\"ab\", StringUtils.substringBefore(\"abc\", \"c\"));\n        assertEquals(\"\", StringUtils.substringBefore(\"abc\", \"\"));\n    }",
        "begin_line": 153,
        "end_line": 170,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 80)",
            "(line 156,col 9)-(line 156,col 68)",
            "(line 157,col 9)-(line 157,col 66)",
            "(line 158,col 9)-(line 158,col 68)",
            "(line 159,col 9)-(line 159,col 64)",
            "(line 160,col 9)-(line 160,col 62)",
            "(line 161,col 9)-(line 161,col 64)",
            "(line 163,col 9)-(line 163,col 70)",
            "(line 164,col 9)-(line 164,col 69)",
            "(line 165,col 9)-(line 165,col 68)",
            "(line 166,col 9)-(line 166,col 66)",
            "(line 167,col 9)-(line 167,col 69)",
            "(line 168,col 9)-(line 168,col 68)",
            "(line 169,col 9)-(line 169,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsSubstringTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsSubstringTest.java",
        "signature": "org.apache.commons.lang.StringUtilsSubstringTest.testSubstringAfter_StringString()",
        "snippet": "    public void testSubstringAfter_StringString() {\n        assertEquals(\"barXXbaz\", StringUtils.substringAfter(\"fooXXbarXXbaz\", \"XX\"));\n        \n        assertEquals(null, StringUtils.substringAfter(null, null));\n        assertEquals(null, StringUtils.substringAfter(null, \"\"));\n        assertEquals(null, StringUtils.substringAfter(null, \"XX\"));\n        assertEquals(\"\", StringUtils.substringAfter(\"\", null));\n        assertEquals(\"\", StringUtils.substringAfter(\"\", \"\"));\n        assertEquals(\"\", StringUtils.substringAfter(\"\", \"XX\"));\n        \n        assertEquals(\"\", StringUtils.substringAfter(\"foo\", null));\n        assertEquals(\"ot\", StringUtils.substringAfter(\"foot\", \"o\"));\n        assertEquals(\"bc\", StringUtils.substringAfter(\"abc\", \"a\"));\n        assertEquals(\"cba\", StringUtils.substringAfter(\"abcba\", \"b\"));\n        assertEquals(\"\", StringUtils.substringAfter(\"abc\", \"c\"));\n        assertEquals(\"abc\", StringUtils.substringAfter(\"abc\", \"\"));\n        assertEquals(\"\", StringUtils.substringAfter(\"abc\", \"d\"));\n    }",
        "begin_line": 172,
        "end_line": 189,
        "comment": "",
        "child_ranges": [
            "(line 173,col 9)-(line 173,col 84)",
            "(line 175,col 9)-(line 175,col 67)",
            "(line 176,col 9)-(line 176,col 65)",
            "(line 177,col 9)-(line 177,col 67)",
            "(line 178,col 9)-(line 178,col 63)",
            "(line 179,col 9)-(line 179,col 61)",
            "(line 180,col 9)-(line 180,col 63)",
            "(line 182,col 9)-(line 182,col 66)",
            "(line 183,col 9)-(line 183,col 68)",
            "(line 184,col 9)-(line 184,col 67)",
            "(line 185,col 9)-(line 185,col 70)",
            "(line 186,col 9)-(line 186,col 65)",
            "(line 187,col 9)-(line 187,col 67)",
            "(line 188,col 9)-(line 188,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsSubstringTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsSubstringTest.java",
        "signature": "org.apache.commons.lang.StringUtilsSubstringTest.testSubstringBeforeLast_StringString()",
        "snippet": "    public void testSubstringBeforeLast_StringString() {\n        assertEquals(\"fooXXbar\", StringUtils.substringBeforeLast(\"fooXXbarXXbaz\", \"XX\"));\n\n        assertEquals(null, StringUtils.substringBeforeLast(null, null));\n        assertEquals(null, StringUtils.substringBeforeLast(null, \"\"));\n        assertEquals(null, StringUtils.substringBeforeLast(null, \"XX\"));\n        assertEquals(\"\", StringUtils.substringBeforeLast(\"\", null));\n        assertEquals(\"\", StringUtils.substringBeforeLast(\"\", \"\"));\n        assertEquals(\"\", StringUtils.substringBeforeLast(\"\", \"XX\"));\n\n        assertEquals(\"foo\", StringUtils.substringBeforeLast(\"foo\", null));\n        assertEquals(\"foo\", StringUtils.substringBeforeLast(\"foo\", \"b\"));\n        assertEquals(\"fo\", StringUtils.substringBeforeLast(\"foo\", \"o\"));\n        assertEquals(\"abc\\r\\n\", StringUtils.substringBeforeLast(\"abc\\r\\n\", \"d\"));\n        assertEquals(\"abc\", StringUtils.substringBeforeLast(\"abcdabc\", \"d\"));\n        assertEquals(\"abcdabc\", StringUtils.substringBeforeLast(\"abcdabcd\", \"d\"));\n        assertEquals(\"a\", StringUtils.substringBeforeLast(\"abc\", \"b\"));\n        assertEquals(\"abc \", StringUtils.substringBeforeLast(\"abc \\n\", \"\\n\"));\n        assertEquals(\"a\", StringUtils.substringBeforeLast(\"a\", null));\n        assertEquals(\"a\", StringUtils.substringBeforeLast(\"a\", \"\"));\n        assertEquals(\"\", StringUtils.substringBeforeLast(\"a\", \"a\"));\n    }",
        "begin_line": 191,
        "end_line": 212,
        "comment": "",
        "child_ranges": [
            "(line 192,col 9)-(line 192,col 89)",
            "(line 194,col 9)-(line 194,col 72)",
            "(line 195,col 9)-(line 195,col 70)",
            "(line 196,col 9)-(line 196,col 72)",
            "(line 197,col 9)-(line 197,col 68)",
            "(line 198,col 9)-(line 198,col 66)",
            "(line 199,col 9)-(line 199,col 68)",
            "(line 201,col 9)-(line 201,col 74)",
            "(line 202,col 9)-(line 202,col 73)",
            "(line 203,col 9)-(line 203,col 72)",
            "(line 204,col 9)-(line 204,col 81)",
            "(line 205,col 9)-(line 205,col 77)",
            "(line 206,col 9)-(line 206,col 82)",
            "(line 207,col 9)-(line 207,col 71)",
            "(line 208,col 9)-(line 208,col 78)",
            "(line 209,col 9)-(line 209,col 70)",
            "(line 210,col 9)-(line 210,col 68)",
            "(line 211,col 9)-(line 211,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsSubstringTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsSubstringTest.java",
        "signature": "org.apache.commons.lang.StringUtilsSubstringTest.testSubstringAfterLast_StringString()",
        "snippet": "    public void testSubstringAfterLast_StringString() {\n        assertEquals(\"baz\", StringUtils.substringAfterLast(\"fooXXbarXXbaz\", \"XX\"));\n\n        assertEquals(null, StringUtils.substringAfterLast(null, null));\n        assertEquals(null, StringUtils.substringAfterLast(null, \"\"));\n        assertEquals(null, StringUtils.substringAfterLast(null, \"XX\"));\n        assertEquals(\"\", StringUtils.substringAfterLast(\"\", null));\n        assertEquals(\"\", StringUtils.substringAfterLast(\"\", \"\"));\n        assertEquals(\"\", StringUtils.substringAfterLast(\"\", \"a\"));\n\n        assertEquals(\"\", StringUtils.substringAfterLast(\"foo\", null));\n        assertEquals(\"\", StringUtils.substringAfterLast(\"foo\", \"b\"));\n        assertEquals(\"t\", StringUtils.substringAfterLast(\"foot\", \"o\"));\n        assertEquals(\"bc\", StringUtils.substringAfterLast(\"abc\", \"a\"));\n        assertEquals(\"a\", StringUtils.substringAfterLast(\"abcba\", \"b\"));\n        assertEquals(\"\", StringUtils.substringAfterLast(\"abc\", \"c\"));\n        assertEquals(\"\", StringUtils.substringAfterLast(\"\", \"d\"));\n        assertEquals(\"\", StringUtils.substringAfterLast(\"abc\", \"\"));\n    }        ",
        "begin_line": 214,
        "end_line": 232,
        "comment": "",
        "child_ranges": [
            "(line 215,col 9)-(line 215,col 83)",
            "(line 217,col 9)-(line 217,col 71)",
            "(line 218,col 9)-(line 218,col 69)",
            "(line 219,col 9)-(line 219,col 71)",
            "(line 220,col 9)-(line 220,col 67)",
            "(line 221,col 9)-(line 221,col 65)",
            "(line 222,col 9)-(line 222,col 66)",
            "(line 224,col 9)-(line 224,col 70)",
            "(line 225,col 9)-(line 225,col 69)",
            "(line 226,col 9)-(line 226,col 71)",
            "(line 227,col 9)-(line 227,col 71)",
            "(line 228,col 9)-(line 228,col 72)",
            "(line 229,col 9)-(line 229,col 69)",
            "(line 230,col 9)-(line 230,col 66)",
            "(line 231,col 9)-(line 231,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsSubstringTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsSubstringTest.java",
        "signature": "org.apache.commons.lang.StringUtilsSubstringTest.testSubstringBetween_StringString()",
        "snippet": "    public void testSubstringBetween_StringString() {\n        assertEquals(null, StringUtils.substringBetween(null, \"tag\"));\n        assertEquals(\"\", StringUtils.substringBetween(\"\", \"\"));\n        assertEquals(null, StringUtils.substringBetween(\"\", \"abc\"));\n        assertEquals(\"\", StringUtils.substringBetween(\"    \", \" \"));\n        assertEquals(null, StringUtils.substringBetween(\"abc\", null));\n        assertEquals(\"\", StringUtils.substringBetween(\"abc\", \"\"));\n        assertEquals(null, StringUtils.substringBetween(\"abc\", \"a\"));\n        assertEquals(\"bc\", StringUtils.substringBetween(\"abca\", \"a\"));\n        assertEquals(\"bc\", StringUtils.substringBetween(\"abcabca\", \"a\"));\n        assertEquals(\"bar\", StringUtils.substringBetween(\"\\nbar\\n\", \"\\n\"));\n    }",
        "begin_line": 235,
        "end_line": 246,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 236,col 9)-(line 236,col 70)",
            "(line 237,col 9)-(line 237,col 63)",
            "(line 238,col 9)-(line 238,col 68)",
            "(line 239,col 9)-(line 239,col 68)",
            "(line 240,col 9)-(line 240,col 70)",
            "(line 241,col 9)-(line 241,col 66)",
            "(line 242,col 9)-(line 242,col 69)",
            "(line 243,col 9)-(line 243,col 70)",
            "(line 244,col 9)-(line 244,col 73)",
            "(line 245,col 9)-(line 245,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsSubstringTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsSubstringTest.java",
        "signature": "org.apache.commons.lang.StringUtilsSubstringTest.testSubstringBetween_StringStringString()",
        "snippet": "    public void testSubstringBetween_StringStringString() {\n        assertEquals(null, StringUtils.substringBetween(null, \"\", \"\"));\n        assertEquals(\"\", StringUtils.substringBetween(\"\", \"\", \"\"));\n        assertEquals(\"\", StringUtils.substringBetween(\"foo\", \"\", \"\"));\n        assertEquals(null, StringUtils.substringBetween(\"foo\", \"\", \"]\"));\n        assertEquals(null, StringUtils.substringBetween(\"foo\", \"[\", \"]\"));\n        assertEquals(\"\", StringUtils.substringBetween(\"    \", \" \", \"  \"));\n        assertEquals(\"bar\", StringUtils.substringBetween(\"<foo>bar</foo>\", \"<foo>\", \"</foo>\") );\n    }",
        "begin_line": 248,
        "end_line": 256,
        "comment": "",
        "child_ranges": [
            "(line 249,col 9)-(line 249,col 71)",
            "(line 250,col 9)-(line 250,col 67)",
            "(line 251,col 9)-(line 251,col 70)",
            "(line 252,col 9)-(line 252,col 73)",
            "(line 253,col 9)-(line 253,col 74)",
            "(line 254,col 9)-(line 254,col 74)",
            "(line 255,col 9)-(line 255,col 96)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsSubstringTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsSubstringTest.java",
        "signature": "org.apache.commons.lang.StringUtilsSubstringTest.testSubstringsBetween_StringStringString()",
        "snippet": "    public void testSubstringsBetween_StringStringString() {\n\n        String[] results = StringUtils.substringsBetween(\"[one], [two], [three]\", \"[\", \"]\");\n        assertEquals(3, results.length);\n        assertEquals(\"one\", results[0]);\n        assertEquals(\"two\", results[1]);\n        assertEquals(\"three\", results[2]);\n\n        results = StringUtils.substringsBetween(\"[one], [two], three\", \"[\", \"]\");\n        assertEquals(2, results.length);\n        assertEquals(\"one\", results[0]);\n        assertEquals(\"two\", results[1]);\n\n        results = StringUtils.substringsBetween(\"[one], [two], three]\", \"[\", \"]\");\n        assertEquals(2, results.length);\n        assertEquals(\"one\", results[0]);\n        assertEquals(\"two\", results[1]);\n\n        results = StringUtils.substringsBetween(\"[one], two], three]\", \"[\", \"]\");\n        assertEquals(1, results.length);\n        assertEquals(\"one\", results[0]);\n\n        results = StringUtils.substringsBetween(\"one], two], [three]\", \"[\", \"]\");\n        assertEquals(1, results.length);\n        assertEquals(\"three\", results[0]);\n\n        // 'ab hello ba' will match, but 'ab non ba' won't\n        // this is because the 'a' is shared between the two and can't be matched twice\n        results = StringUtils.substringsBetween(\"aabhellobabnonba\", \"ab\", \"ba\");\n        assertEquals(1, results.length);\n        assertEquals(\"hello\", results[0]);\n\n        results = StringUtils.substringsBetween(\"one, two, three\", \"[\", \"]\");\n        assertNull(results);\n\n        results = StringUtils.substringsBetween(\"[one, two, three\", \"[\", \"]\");\n        assertNull(results);\n\n        results = StringUtils.substringsBetween(\"one, two, three]\", \"[\", \"]\");\n        assertNull(results);\n\n        results = StringUtils.substringsBetween(\"[one], [two], [three]\", \"[\", null);\n        assertNull(results);\n\n        results = StringUtils.substringsBetween(\"[one], [two], [three]\", null, \"]\");\n        assertNull(results);\n\n        results = StringUtils.substringsBetween(\"[one], [two], [three]\", \"\", \"\");\n        assertNull(results);\n\n        results = StringUtils.substringsBetween(null, \"[\", \"]\");\n        assertNull(results);\n\n        results = StringUtils.substringsBetween(\"\", \"[\", \"]\");\n        assertEquals(0, results.length);\n    }",
        "begin_line": 261,
        "end_line": 316,
        "comment": "\n     * Tests the substringsBetween method that returns an String Array of substrings.\n     ",
        "child_ranges": [
            "(line 263,col 9)-(line 263,col 92)",
            "(line 264,col 9)-(line 264,col 40)",
            "(line 265,col 9)-(line 265,col 40)",
            "(line 266,col 9)-(line 266,col 40)",
            "(line 267,col 9)-(line 267,col 42)",
            "(line 269,col 9)-(line 269,col 81)",
            "(line 270,col 9)-(line 270,col 40)",
            "(line 271,col 9)-(line 271,col 40)",
            "(line 272,col 9)-(line 272,col 40)",
            "(line 274,col 9)-(line 274,col 82)",
            "(line 275,col 9)-(line 275,col 40)",
            "(line 276,col 9)-(line 276,col 40)",
            "(line 277,col 9)-(line 277,col 40)",
            "(line 279,col 9)-(line 279,col 81)",
            "(line 280,col 9)-(line 280,col 40)",
            "(line 281,col 9)-(line 281,col 40)",
            "(line 283,col 9)-(line 283,col 81)",
            "(line 284,col 9)-(line 284,col 40)",
            "(line 285,col 9)-(line 285,col 42)",
            "(line 289,col 9)-(line 289,col 80)",
            "(line 290,col 9)-(line 290,col 40)",
            "(line 291,col 9)-(line 291,col 42)",
            "(line 293,col 9)-(line 293,col 77)",
            "(line 294,col 9)-(line 294,col 28)",
            "(line 296,col 9)-(line 296,col 78)",
            "(line 297,col 9)-(line 297,col 28)",
            "(line 299,col 9)-(line 299,col 78)",
            "(line 300,col 9)-(line 300,col 28)",
            "(line 302,col 9)-(line 302,col 84)",
            "(line 303,col 9)-(line 303,col 28)",
            "(line 305,col 9)-(line 305,col 84)",
            "(line 306,col 9)-(line 306,col 28)",
            "(line 308,col 9)-(line 308,col 81)",
            "(line 309,col 9)-(line 309,col 28)",
            "(line 311,col 9)-(line 311,col 64)",
            "(line 312,col 9)-(line 312,col 28)",
            "(line 314,col 9)-(line 314,col 62)",
            "(line 315,col 9)-(line 315,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsSubstringTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsSubstringTest.java",
        "signature": "org.apache.commons.lang.StringUtilsSubstringTest.testCountMatches_String()",
        "snippet": "    public void testCountMatches_String() {\n        assertEquals(0, StringUtils.countMatches(null, null));\n        assertEquals(0, StringUtils.countMatches(\"blah\", null));\n        assertEquals(0, StringUtils.countMatches(null, \"DD\"));\n\n        assertEquals(0, StringUtils.countMatches(\"x\", \"\"));\n        assertEquals(0, StringUtils.countMatches(\"\", \"\"));\n\n        assertEquals(3, \n             StringUtils.countMatches(\"one long someone sentence of one\", \"one\"));\n        assertEquals(0, \n             StringUtils.countMatches(\"one long someone sentence of one\", \"two\"));\n        assertEquals(4, \n             StringUtils.countMatches(\"oooooooooooo\", \"ooo\"));\n    }",
        "begin_line": 319,
        "end_line": 333,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 320,col 9)-(line 320,col 62)",
            "(line 321,col 9)-(line 321,col 64)",
            "(line 322,col 9)-(line 322,col 62)",
            "(line 324,col 9)-(line 324,col 59)",
            "(line 325,col 9)-(line 325,col 58)",
            "(line 327,col 9)-(line 328,col 82)",
            "(line 329,col 9)-(line 330,col 82)",
            "(line 331,col 9)-(line 332,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsSubstringTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsSubstringTest.java",
        "signature": "org.apache.commons.lang.StringUtilsSubstringTest.testDeprecatedGetNestedString_StringString()",
        "snippet": "    public void testDeprecatedGetNestedString_StringString() {\n        assertEquals(null, StringUtils.getNestedString(null, \"tag\"));\n        assertEquals(\"\", StringUtils.getNestedString(\"\", \"\"));\n        assertEquals(null, StringUtils.getNestedString(\"\", \"abc\"));\n        assertEquals(\"\", StringUtils.getNestedString(\"    \", \" \"));\n        assertEquals(null, StringUtils.getNestedString(\"abc\", null));\n        assertEquals(\"\", StringUtils.getNestedString(\"abc\", \"\"));\n        assertEquals(null, StringUtils.getNestedString(\"abc\", \"a\"));\n        assertEquals(\"bc\", StringUtils.getNestedString(\"abca\", \"a\"));\n        assertEquals(\"bc\", StringUtils.getNestedString(\"abcabca\", \"a\"));\n        assertEquals(\"bar\", StringUtils.getNestedString(\"\\nbar\\n\", \"\\n\"));\n    }",
        "begin_line": 335,
        "end_line": 346,
        "comment": "",
        "child_ranges": [
            "(line 336,col 9)-(line 336,col 69)",
            "(line 337,col 9)-(line 337,col 62)",
            "(line 338,col 9)-(line 338,col 67)",
            "(line 339,col 9)-(line 339,col 67)",
            "(line 340,col 9)-(line 340,col 69)",
            "(line 341,col 9)-(line 341,col 65)",
            "(line 342,col 9)-(line 342,col 68)",
            "(line 343,col 9)-(line 343,col 69)",
            "(line 344,col 9)-(line 344,col 72)",
            "(line 345,col 9)-(line 345,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsSubstringTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsSubstringTest.java",
        "signature": "org.apache.commons.lang.StringUtilsSubstringTest.testDeprecatedGetNestedString_StringStringString()",
        "snippet": "    public void testDeprecatedGetNestedString_StringStringString() {\n        assertEquals(null, StringUtils.getNestedString(null, \"\", \"\"));\n        assertEquals(\"\", StringUtils.getNestedString(\"\", \"\", \"\"));\n        assertEquals(\"\", StringUtils.getNestedString(\"    \", \" \", \"  \"));\n        assertEquals(\"bar\", StringUtils.getNestedString(\"<foo>bar</foo>\", \"<foo>\", \"</foo>\") );\n    }",
        "begin_line": 348,
        "end_line": 353,
        "comment": "",
        "child_ranges": [
            "(line 349,col 9)-(line 349,col 70)",
            "(line 350,col 9)-(line 350,col 66)",
            "(line 351,col 9)-(line 351,col 73)",
            "(line 352,col 9)-(line 352,col 95)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LangTestSuite",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LangTestSuite.java",
        "signature": "org.apache.commons.lang.LangTestSuite.LangTestSuite(java.lang.String)",
        "snippet": "    public LangTestSuite(String name) {\n        super(name);\n    }",
        "begin_line": 37,
        "end_line": 39,
        "comment": "\n     * Construct a new instance.\n     ",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LangTestSuite",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LangTestSuite.java",
        "signature": "org.apache.commons.lang.LangTestSuite.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 44,
        "end_line": 46,
        "comment": "\n     * Command-line interface.\n     ",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LangTestSuite",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LangTestSuite.java",
        "signature": "org.apache.commons.lang.LangTestSuite.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite();\n        suite.setName(\"Commons-Lang Tests\");\n        suite.addTest(ArrayUtilsTest.suite());\n        suite.addTest(ArrayUtilsAddTest.suite());\n        suite.addTest(ArrayUtilsRemoveTest.suite());\n        suite.addTest(BitFieldTest.suite());\n        suite.addTest(BooleanUtilsTest.suite());\n        suite.addTest(CharEncodingTest.suite());\n        suite.addTest(CharRangeTest.suite());\n        suite.addTest(CharSetTest.suite());\n        suite.addTest(CharSetUtilsTest.suite());\n        suite.addTest(CharUtilsTest.suite());\n        suite.addTest(ClassUtilsTest.suite());\n        suite.addTest(EntitiesTest.suite());\n        suite.addTest(IllegalClassExceptionTest.suite());\n        suite.addTest(IncompleteArgumentExceptionTest.suite());\n        suite.addTest(IntHashMapTest.suite());\n        suite.addTest(LocaleUtilsTest.suite());\n        suite.addTest(NotImplementedExceptionTest.suite());\n        suite.addTest(NullArgumentExceptionTest.suite());\n        suite.addTest(NumberRangeTest.suite());\n        suite.addTest(NumberUtilsTest.suite());\n        suite.addTest(ObjectUtilsTest.suite());\n        suite.addTest(RandomStringUtilsTest.suite());\n        suite.addTest(SerializationUtilsTest.suite());\n        suite.addTest(StringUtilsTest.suite());\n        suite.addTest(StringUtilsTrimEmptyTest.suite());\n        suite.addTest(StringUtilsSubstringTest.suite());\n        suite.addTest(StringUtilsEqualsIndexOfTest.suite());\n        suite.addTest(StringUtilsIsTest.suite());\n        suite.addTest(StringUtilsStartsEndsWithTest.suite());\n        suite.addTest(StringEscapeUtilsTest.suite());\n        suite.addTest(SystemUtilsTest.suite());\n        suite.addTest(UnhandledExceptionTest.suite());\n        suite.addTest(ValidateTest.suite());\n        suite.addTest(WordUtilsTest.suite());\n        return suite;\n    }",
        "begin_line": 51,
        "end_line": 89,
        "comment": "\n     * Get the suite of tests\n     ",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 42)",
            "(line 53,col 9)-(line 53,col 44)",
            "(line 54,col 9)-(line 54,col 46)",
            "(line 55,col 9)-(line 55,col 49)",
            "(line 56,col 9)-(line 56,col 52)",
            "(line 57,col 9)-(line 57,col 44)",
            "(line 58,col 9)-(line 58,col 48)",
            "(line 59,col 9)-(line 59,col 48)",
            "(line 60,col 9)-(line 60,col 45)",
            "(line 61,col 9)-(line 61,col 43)",
            "(line 62,col 9)-(line 62,col 48)",
            "(line 63,col 9)-(line 63,col 45)",
            "(line 64,col 9)-(line 64,col 46)",
            "(line 65,col 9)-(line 65,col 44)",
            "(line 66,col 9)-(line 66,col 57)",
            "(line 67,col 9)-(line 67,col 63)",
            "(line 68,col 9)-(line 68,col 46)",
            "(line 69,col 9)-(line 69,col 47)",
            "(line 70,col 9)-(line 70,col 59)",
            "(line 71,col 9)-(line 71,col 57)",
            "(line 72,col 9)-(line 72,col 47)",
            "(line 73,col 9)-(line 73,col 47)",
            "(line 74,col 9)-(line 74,col 47)",
            "(line 75,col 9)-(line 75,col 53)",
            "(line 76,col 9)-(line 76,col 54)",
            "(line 77,col 9)-(line 77,col 47)",
            "(line 78,col 9)-(line 78,col 56)",
            "(line 79,col 9)-(line 79,col 56)",
            "(line 80,col 9)-(line 80,col 60)",
            "(line 81,col 9)-(line 81,col 49)",
            "(line 82,col 9)-(line 82,col 61)",
            "(line 83,col 9)-(line 83,col 53)",
            "(line 84,col 9)-(line 84,col 47)",
            "(line 85,col 9)-(line 85,col 54)",
            "(line 86,col 9)-(line 86,col 44)",
            "(line 87,col 9)-(line 87,col 45)",
            "(line 88,col 9)-(line 88,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NullArgumentExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NullArgumentExceptionTest.java",
        "signature": "org.apache.commons.lang.NullArgumentExceptionTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 34,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NullArgumentExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NullArgumentExceptionTest.java",
        "signature": "org.apache.commons.lang.NullArgumentExceptionTest.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(NullArgumentExceptionTest.class);\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NullArgumentExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NullArgumentExceptionTest.java",
        "signature": "org.apache.commons.lang.NullArgumentExceptionTest.NullArgumentExceptionTest(java.lang.String)",
        "snippet": "    public NullArgumentExceptionTest(String testName) {\n        super(testName);\n    }",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NullArgumentExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NullArgumentExceptionTest.java",
        "signature": "org.apache.commons.lang.NullArgumentExceptionTest.testConstructor_nullInput()",
        "snippet": "    public void testConstructor_nullInput() {\n        new NullArgumentException(null);\n    }",
        "begin_line": 48,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NullArgumentExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NullArgumentExceptionTest.java",
        "signature": "org.apache.commons.lang.NullArgumentExceptionTest.testGetMessage_nullConstructorInput()",
        "snippet": "    public void testGetMessage_nullConstructorInput() {\n        final Throwable t = new NullArgumentException(null);\n        assertEquals(\"Argument must not be null.\", t.getMessage());\n    }",
        "begin_line": 54,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 60)",
            "(line 56,col 9)-(line 56,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NullArgumentExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NullArgumentExceptionTest.java",
        "signature": "org.apache.commons.lang.NullArgumentExceptionTest.testGetMessage_validConstructorInput()",
        "snippet": "    public void testGetMessage_validConstructorInput() {\n        final String argName = \"name\";\n        final Throwable t = new NullArgumentException(argName);\n        assertEquals(argName + \" must not be null.\", t.getMessage());\n    }",
        "begin_line": 59,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 38)",
            "(line 61,col 9)-(line 61,col 63)",
            "(line 62,col 9)-(line 62,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ObjectUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ObjectUtilsTest.java",
        "signature": "org.apache.commons.lang.ObjectUtilsTest.ObjectUtilsTest(java.lang.String)",
        "snippet": "    public ObjectUtilsTest(String name) {\n        super(name);\n    }",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ObjectUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ObjectUtilsTest.java",
        "signature": "org.apache.commons.lang.ObjectUtilsTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 45,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ObjectUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ObjectUtilsTest.java",
        "signature": "org.apache.commons.lang.ObjectUtilsTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(ObjectUtilsTest.class);\n        suite.setName(\"ObjectUtils Tests\");\n        return suite;\n    }",
        "begin_line": 49,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 63)",
            "(line 51,col 9)-(line 51,col 43)",
            "(line 52,col 9)-(line 52,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ObjectUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ObjectUtilsTest.java",
        "signature": "org.apache.commons.lang.ObjectUtilsTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        super.setUp();\n    }",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ObjectUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ObjectUtilsTest.java",
        "signature": "org.apache.commons.lang.ObjectUtilsTest.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        super.tearDown();\n    }",
        "begin_line": 59,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ObjectUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ObjectUtilsTest.java",
        "signature": "org.apache.commons.lang.ObjectUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new ObjectUtils());\n        Constructor[] cons = ObjectUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(ObjectUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(ObjectUtils.class.getModifiers()));\n    }",
        "begin_line": 64,
        "end_line": 71,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 41)",
            "(line 66,col 9)-(line 66,col 73)",
            "(line 67,col 9)-(line 67,col 37)",
            "(line 68,col 9)-(line 68,col 70)",
            "(line 69,col 9)-(line 69,col 80)",
            "(line 70,col 9)-(line 70,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ObjectUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ObjectUtilsTest.java",
        "signature": "org.apache.commons.lang.ObjectUtilsTest.testIsNull()",
        "snippet": "    public void testIsNull() {\n        Object o = FOO;\n        Object dflt = BAR;\n        assertSame(\"dflt was not returned when o was null\", dflt, ObjectUtils.defaultIfNull(null, dflt));\n        assertSame(\"dflt was returned when o was not null\", o, ObjectUtils.defaultIfNull(o, dflt));\n    }",
        "begin_line": 74,
        "end_line": 79,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 23)",
            "(line 76,col 9)-(line 76,col 26)",
            "(line 77,col 9)-(line 77,col 105)",
            "(line 78,col 9)-(line 78,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ObjectUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ObjectUtilsTest.java",
        "signature": "org.apache.commons.lang.ObjectUtilsTest.testEquals()",
        "snippet": "    public void testEquals() {\n        assertTrue(\"ObjectUtils.equals(null, null) returned false\", ObjectUtils.equals(null, null));\n        assertTrue(\"ObjectUtils.equals(\\\"foo\\\", null) returned true\", !ObjectUtils.equals(FOO, null));\n        assertTrue(\"ObjectUtils.equals(null, \\\"bar\\\") returned true\", !ObjectUtils.equals(null, BAR));\n        assertTrue(\"ObjectUtils.equals(\\\"foo\\\", \\\"bar\\\") returned true\", !ObjectUtils.equals(FOO, BAR));\n        assertTrue(\"ObjectUtils.equals(\\\"foo\\\", \\\"foo\\\") returned false\", ObjectUtils.equals(FOO, FOO));\n    }",
        "begin_line": 81,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 100)",
            "(line 83,col 9)-(line 83,col 102)",
            "(line 84,col 9)-(line 84,col 102)",
            "(line 85,col 9)-(line 85,col 104)",
            "(line 86,col 9)-(line 86,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ObjectUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ObjectUtilsTest.java",
        "signature": "org.apache.commons.lang.ObjectUtilsTest.testHashCode()",
        "snippet": "    public void testHashCode() {\n        assertEquals(0, ObjectUtils.hashCode(null));\n        assertEquals(\"a\".hashCode(), ObjectUtils.hashCode(\"a\"));\n    }",
        "begin_line": 89,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 52)",
            "(line 91,col 9)-(line 91,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ObjectUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ObjectUtilsTest.java",
        "signature": "org.apache.commons.lang.ObjectUtilsTest.testIdentityToString()",
        "snippet": "    public void testIdentityToString() {\n        assertEquals(null, ObjectUtils.identityToString(null));\n        assertEquals(\n            \"java.lang.String@\" + Integer.toHexString(System.identityHashCode(FOO)),\n            ObjectUtils.identityToString(FOO));\n        Integer i = new Integer(90);\n        String expected = \"java.lang.Integer@\" + Integer.toHexString(System.identityHashCode(i));\n        assertEquals(expected, ObjectUtils.identityToString(i));\n        StringBuffer buffer = new StringBuffer();\n        ObjectUtils.identityToString(buffer, i);\n        assertEquals(expected, buffer.toString());\n\n        try {\n            ObjectUtils.identityToString(null, \"tmp\");\n            fail(\"NullPointerException expected\");\n        } catch(NullPointerException npe) {\n        }\n        try {\n            ObjectUtils.identityToString(new StringBuffer(), null);\n            fail(\"NullPointerException expected\");\n        } catch(NullPointerException npe) {\n        }\n    }",
        "begin_line": 135,
        "end_line": 157,
        "comment": "",
        "child_ranges": [
            "(line 136,col 9)-(line 136,col 63)",
            "(line 137,col 9)-(line 139,col 47)",
            "(line 140,col 9)-(line 140,col 36)",
            "(line 141,col 9)-(line 141,col 97)",
            "(line 142,col 9)-(line 142,col 64)",
            "(line 143,col 9)-(line 143,col 49)",
            "(line 144,col 9)-(line 144,col 48)",
            "(line 145,col 9)-(line 145,col 50)",
            "(line 147,col 9)-(line 151,col 9)",
            "(line 152,col 9)-(line 156,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ObjectUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ObjectUtilsTest.java",
        "signature": "org.apache.commons.lang.ObjectUtilsTest.testAppendIdentityToString()",
        "snippet": "    public void testAppendIdentityToString() {\n        assertEquals(null, ObjectUtils.appendIdentityToString(null, null));\n        assertEquals(null, ObjectUtils.appendIdentityToString(new StringBuffer(), null));\n        assertEquals(\n            \"java.lang.String@\" + Integer.toHexString(System.identityHashCode(FOO)),\n            ObjectUtils.appendIdentityToString(null, FOO).toString());\n        assertEquals(\n            \"java.lang.String@\" + Integer.toHexString(System.identityHashCode(FOO)),\n            ObjectUtils.appendIdentityToString(new StringBuffer(), FOO).toString());\n        Integer val = new Integer(90);\n        assertEquals(\n            \"java.lang.Integer@\" + Integer.toHexString(System.identityHashCode(val)),\n            ObjectUtils.appendIdentityToString(null, val).toString());\n        assertEquals(\n            \"java.lang.Integer@\" + Integer.toHexString(System.identityHashCode(val)),\n            ObjectUtils.appendIdentityToString(new StringBuffer(), val).toString());\n    }",
        "begin_line": 159,
        "end_line": 175,
        "comment": "",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 75)",
            "(line 161,col 9)-(line 161,col 89)",
            "(line 162,col 9)-(line 164,col 70)",
            "(line 165,col 9)-(line 167,col 84)",
            "(line 168,col 9)-(line 168,col 38)",
            "(line 169,col 9)-(line 171,col 70)",
            "(line 172,col 9)-(line 174,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ObjectUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ObjectUtilsTest.java",
        "signature": "org.apache.commons.lang.ObjectUtilsTest.testToString_Object()",
        "snippet": "    public void testToString_Object() {\n        assertEquals(\"\", ObjectUtils.toString((Object) null) );\n        assertEquals(Boolean.TRUE.toString(), ObjectUtils.toString(Boolean.TRUE) );\n    }",
        "begin_line": 177,
        "end_line": 180,
        "comment": "",
        "child_ranges": [
            "(line 178,col 9)-(line 178,col 63)",
            "(line 179,col 9)-(line 179,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ObjectUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ObjectUtilsTest.java",
        "signature": "org.apache.commons.lang.ObjectUtilsTest.testToString_ObjectString()",
        "snippet": "    public void testToString_ObjectString() {\n        assertEquals(BAR, ObjectUtils.toString((Object) null, BAR) );\n        assertEquals(Boolean.TRUE.toString(), ObjectUtils.toString(Boolean.TRUE, BAR) );\n    }",
        "begin_line": 182,
        "end_line": 185,
        "comment": "",
        "child_ranges": [
            "(line 183,col 9)-(line 183,col 69)",
            "(line 184,col 9)-(line 184,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ObjectUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ObjectUtilsTest.java",
        "signature": "org.apache.commons.lang.ObjectUtilsTest.testNull()",
        "snippet": "    public void testNull() {\n        assertTrue(ObjectUtils.NULL != null);\n        assertTrue(ObjectUtils.NULL instanceof ObjectUtils.Null);\n        assertSame(ObjectUtils.NULL, SerializationUtils.clone(ObjectUtils.NULL));\n    }",
        "begin_line": 187,
        "end_line": 191,
        "comment": "",
        "child_ranges": [
            "(line 188,col 9)-(line 188,col 45)",
            "(line 189,col 9)-(line 189,col 65)",
            "(line 190,col 9)-(line 190,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ObjectUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ObjectUtilsTest.java",
        "signature": "org.apache.commons.lang.ObjectUtilsTest.testMax()",
        "snippet": "    public void testMax() {\n        Calendar calendar = Calendar.getInstance();\n        Comparable nonNullComparable1 = calendar.getTime();\n        Comparable nonNullComparable2 = calendar.getTime();\n        \n        calendar.set( Calendar.YEAR, calendar.get( Calendar.YEAR ) -1 );\n        Comparable minComparable = calendar.getTime();\n        \n        assertNotSame( nonNullComparable1, nonNullComparable2 );\n        \n        assertSame( nonNullComparable1, ObjectUtils.max( null, nonNullComparable1 ) );\n        assertSame( nonNullComparable1, ObjectUtils.max( nonNullComparable1, null ) );\n        assertSame( nonNullComparable1, ObjectUtils.max( nonNullComparable1, nonNullComparable2 ) );\n        assertSame( nonNullComparable1, ObjectUtils.max( nonNullComparable1, minComparable ) );\n        assertSame( nonNullComparable1, ObjectUtils.max( minComparable, nonNullComparable1 ) );\n    }",
        "begin_line": 195,
        "end_line": 210,
        "comment": "",
        "child_ranges": [
            "(line 196,col 9)-(line 196,col 51)",
            "(line 197,col 9)-(line 197,col 59)",
            "(line 198,col 9)-(line 198,col 59)",
            "(line 200,col 9)-(line 200,col 72)",
            "(line 201,col 9)-(line 201,col 54)",
            "(line 203,col 9)-(line 203,col 64)",
            "(line 205,col 9)-(line 205,col 86)",
            "(line 206,col 9)-(line 206,col 86)",
            "(line 207,col 9)-(line 207,col 100)",
            "(line 208,col 9)-(line 208,col 95)",
            "(line 209,col 9)-(line 209,col 95)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ObjectUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ObjectUtilsTest.java",
        "signature": "org.apache.commons.lang.ObjectUtilsTest.testMin()",
        "snippet": "    public void testMin() {\n        Calendar calendar = Calendar.getInstance();\n        Comparable nonNullComparable1 = calendar.getTime();\n        Comparable nonNullComparable2 = calendar.getTime();\n        \n        calendar.set( Calendar.YEAR, calendar.get( Calendar.YEAR ) -1 );\n        Comparable minComparable = calendar.getTime();\n        \n        assertNotSame( nonNullComparable1, nonNullComparable2 );\n        \n        assertSame( nonNullComparable1, ObjectUtils.min( null, nonNullComparable1 ) );\n        assertSame( nonNullComparable1, ObjectUtils.min( nonNullComparable1, null ) );\n        assertSame( nonNullComparable1, ObjectUtils.min( nonNullComparable1, nonNullComparable2 ) );\n        assertSame( minComparable, ObjectUtils.min( nonNullComparable1, minComparable ) );\n        assertSame( minComparable, ObjectUtils.min( minComparable, nonNullComparable1 ) );\n    }",
        "begin_line": 212,
        "end_line": 227,
        "comment": "",
        "child_ranges": [
            "(line 213,col 9)-(line 213,col 51)",
            "(line 214,col 9)-(line 214,col 59)",
            "(line 215,col 9)-(line 215,col 59)",
            "(line 217,col 9)-(line 217,col 72)",
            "(line 218,col 9)-(line 218,col 54)",
            "(line 220,col 9)-(line 220,col 64)",
            "(line 222,col 9)-(line 222,col 86)",
            "(line 223,col 9)-(line 223,col 86)",
            "(line 224,col 9)-(line 224,col 100)",
            "(line 225,col 9)-(line 225,col 90)",
            "(line 226,col 9)-(line 226,col 90)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsRemoveTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsRemoveTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsRemoveTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 34,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsRemoveTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsRemoveTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsRemoveTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(ArrayUtilsRemoveTest.class);\n        suite.setName(\"ArrayUtils remove Tests\");\n        return suite;\n    }",
        "begin_line": 38,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 68)",
            "(line 40,col 9)-(line 40,col 49)",
            "(line 41,col 9)-(line 41,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsRemoveTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsRemoveTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsRemoveTest.testRemoveObjectArray()",
        "snippet": "    public void testRemoveObjectArray() {\n        Object[] array;\n        array = ArrayUtils.remove(new Object[] {\"a\"}, 0);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array));\n        assertEquals(Object.class, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new Object[] {\"a\", \"b\"}, 0);\n        assertTrue(Arrays.equals(new Object[] {\"b\"}, array));\n        assertEquals(Object.class, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new Object[] {\"a\", \"b\"}, 1);\n        assertTrue(Arrays.equals(new Object[] {\"a\"}, array));\n        assertEquals(Object.class, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new Object[] {\"a\", \"b\", \"c\"}, 1);\n        assertTrue(Arrays.equals(new Object[] {\"a\", \"c\"}, array));\n        assertEquals(Object.class, array.getClass().getComponentType());\n        try {\n            ArrayUtils.remove(new Object[] {\"a\", \"b\"}, -1);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n        try {\n            ArrayUtils.remove(new Object[] {\"a\", \"b\"}, 2);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n        try {\n            ArrayUtils.remove((Object[]) null, 0);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n    }",
        "begin_line": 44,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 23)",
            "(line 46,col 9)-(line 46,col 57)",
            "(line 47,col 9)-(line 47,col 72)",
            "(line 48,col 9)-(line 48,col 72)",
            "(line 49,col 9)-(line 49,col 62)",
            "(line 50,col 9)-(line 50,col 61)",
            "(line 51,col 9)-(line 51,col 72)",
            "(line 52,col 9)-(line 52,col 62)",
            "(line 53,col 9)-(line 53,col 61)",
            "(line 54,col 9)-(line 54,col 72)",
            "(line 55,col 9)-(line 55,col 67)",
            "(line 56,col 9)-(line 56,col 66)",
            "(line 57,col 9)-(line 57,col 72)",
            "(line 58,col 9)-(line 61,col 48)",
            "(line 62,col 9)-(line 65,col 48)",
            "(line 66,col 9)-(line 69,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsRemoveTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsRemoveTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsRemoveTest.testRemoveBooleanArray()",
        "snippet": "    public void testRemoveBooleanArray() {\n        boolean[] array;\n        array = ArrayUtils.remove(new boolean[] {true}, 0);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array));\n        assertEquals(Boolean.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new boolean[] {true, false}, 0);\n        assertTrue(Arrays.equals(new boolean[] {false}, array));\n        assertEquals(Boolean.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new boolean[] {true, false}, 1);\n        assertTrue(Arrays.equals(new boolean[] {true}, array));\n        assertEquals(Boolean.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new boolean[] {true, false, true}, 1);\n        assertTrue(Arrays.equals(new boolean[] {true, true}, array));\n        assertEquals(Boolean.TYPE, array.getClass().getComponentType());\n        try {\n            ArrayUtils.remove(new boolean[] {true, false}, -1);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n        try {\n            ArrayUtils.remove(new boolean[] {true, false}, 2);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n        try {\n            ArrayUtils.remove((boolean[]) null, 0);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n    }",
        "begin_line": 72,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 24)",
            "(line 74,col 9)-(line 74,col 59)",
            "(line 75,col 9)-(line 75,col 73)",
            "(line 76,col 9)-(line 76,col 72)",
            "(line 77,col 9)-(line 77,col 66)",
            "(line 78,col 9)-(line 78,col 64)",
            "(line 79,col 9)-(line 79,col 72)",
            "(line 80,col 9)-(line 80,col 66)",
            "(line 81,col 9)-(line 81,col 63)",
            "(line 82,col 9)-(line 82,col 72)",
            "(line 83,col 9)-(line 83,col 72)",
            "(line 84,col 9)-(line 84,col 69)",
            "(line 85,col 9)-(line 85,col 72)",
            "(line 86,col 9)-(line 89,col 48)",
            "(line 90,col 9)-(line 93,col 48)",
            "(line 94,col 9)-(line 97,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsRemoveTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsRemoveTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsRemoveTest.testRemoveByteArray()",
        "snippet": "    public void testRemoveByteArray() {\n        byte[] array;\n        array = ArrayUtils.remove(new byte[] {1}, 0);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array));\n        assertEquals(Byte.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new byte[] {1, 2}, 0);\n        assertTrue(Arrays.equals(new byte[] {2}, array));\n        assertEquals(Byte.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new byte[] {1, 2}, 1);\n        assertTrue(Arrays.equals(new byte[] {1}, array));\n        assertEquals(Byte.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new byte[] {1, 2, 1}, 1);\n        assertTrue(Arrays.equals(new byte[] {1, 1}, array));\n        assertEquals(Byte.TYPE, array.getClass().getComponentType());\n        try {\n            ArrayUtils.remove(new byte[] {1, 2}, -1);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n        try {\n            ArrayUtils.remove(new byte[] {1, 2}, 2);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n        try {\n            ArrayUtils.remove((byte[]) null, 0);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n    }",
        "begin_line": 100,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 21)",
            "(line 102,col 9)-(line 102,col 53)",
            "(line 103,col 9)-(line 103,col 70)",
            "(line 104,col 9)-(line 104,col 69)",
            "(line 105,col 9)-(line 105,col 56)",
            "(line 106,col 9)-(line 106,col 57)",
            "(line 107,col 9)-(line 107,col 69)",
            "(line 108,col 9)-(line 108,col 56)",
            "(line 109,col 9)-(line 109,col 57)",
            "(line 110,col 9)-(line 110,col 69)",
            "(line 111,col 9)-(line 111,col 59)",
            "(line 112,col 9)-(line 112,col 60)",
            "(line 113,col 9)-(line 113,col 69)",
            "(line 114,col 9)-(line 117,col 48)",
            "(line 118,col 9)-(line 121,col 48)",
            "(line 122,col 9)-(line 125,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsRemoveTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsRemoveTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsRemoveTest.testRemoveCharArray()",
        "snippet": "    public void testRemoveCharArray() {\n        char[] array;\n        array = ArrayUtils.remove(new char[] {'a'}, 0);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array));\n        assertEquals(Character.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new char[] {'a', 'b'}, 0);\n        assertTrue(Arrays.equals(new char[] {'b'}, array));\n        assertEquals(Character.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new char[] {'a', 'b'}, 1);\n        assertTrue(Arrays.equals(new char[] {'a'}, array));\n        assertEquals(Character.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new char[] {'a', 'b', 'c'}, 1);\n        assertTrue(Arrays.equals(new char[] {'a', 'c'}, array));\n        assertEquals(Character.TYPE, array.getClass().getComponentType());\n        try {\n            ArrayUtils.remove(new char[] {'a', 'b'}, -1);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n        try {\n            ArrayUtils.remove(new char[] {'a', 'b'}, 2);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n        try {\n            ArrayUtils.remove((char[]) null, 0);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n    }",
        "begin_line": 128,
        "end_line": 154,
        "comment": "",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 21)",
            "(line 130,col 9)-(line 130,col 55)",
            "(line 131,col 9)-(line 131,col 70)",
            "(line 132,col 9)-(line 132,col 74)",
            "(line 133,col 9)-(line 133,col 60)",
            "(line 134,col 9)-(line 134,col 59)",
            "(line 135,col 9)-(line 135,col 74)",
            "(line 136,col 9)-(line 136,col 60)",
            "(line 137,col 9)-(line 137,col 59)",
            "(line 138,col 9)-(line 138,col 74)",
            "(line 139,col 9)-(line 139,col 65)",
            "(line 140,col 9)-(line 140,col 64)",
            "(line 141,col 9)-(line 141,col 74)",
            "(line 142,col 9)-(line 145,col 48)",
            "(line 146,col 9)-(line 149,col 48)",
            "(line 150,col 9)-(line 153,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsRemoveTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsRemoveTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsRemoveTest.testRemoveDoubleArray()",
        "snippet": "    public void testRemoveDoubleArray() {\n        double[] array;\n        array = ArrayUtils.remove(new double[] {1}, 0);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array));\n        assertEquals(Double.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new double[] {1, 2}, 0);\n        assertTrue(Arrays.equals(new double[] {2}, array));\n        assertEquals(Double.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new double[] {1, 2}, 1);\n        assertTrue(Arrays.equals(new double[] {1}, array));\n        assertEquals(Double.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new double[] {1, 2, 1}, 1);\n        assertTrue(Arrays.equals(new double[] {1, 1}, array));\n        assertEquals(Double.TYPE, array.getClass().getComponentType());\n        try {\n            ArrayUtils.remove(new double[] {1, 2}, -1);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n        try {\n            ArrayUtils.remove(new double[] {1, 2}, 2);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n        try {\n            ArrayUtils.remove((double[]) null, 0);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n    }",
        "begin_line": 156,
        "end_line": 182,
        "comment": "",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 23)",
            "(line 158,col 9)-(line 158,col 55)",
            "(line 159,col 9)-(line 159,col 72)",
            "(line 160,col 9)-(line 160,col 71)",
            "(line 161,col 9)-(line 161,col 58)",
            "(line 162,col 9)-(line 162,col 59)",
            "(line 163,col 9)-(line 163,col 71)",
            "(line 164,col 9)-(line 164,col 58)",
            "(line 165,col 9)-(line 165,col 59)",
            "(line 166,col 9)-(line 166,col 71)",
            "(line 167,col 9)-(line 167,col 61)",
            "(line 168,col 9)-(line 168,col 62)",
            "(line 169,col 9)-(line 169,col 71)",
            "(line 170,col 9)-(line 173,col 48)",
            "(line 174,col 9)-(line 177,col 48)",
            "(line 178,col 9)-(line 181,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsRemoveTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsRemoveTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsRemoveTest.testRemoveFloatArray()",
        "snippet": "    public void testRemoveFloatArray() {\n        float[] array;\n        array = ArrayUtils.remove(new float[] {1}, 0);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array));\n        assertEquals(Float.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new float[] {1, 2}, 0);\n        assertTrue(Arrays.equals(new float[] {2}, array));\n        assertEquals(Float.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new float[] {1, 2}, 1);\n        assertTrue(Arrays.equals(new float[] {1}, array));\n        assertEquals(Float.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new float[] {1, 2, 1}, 1);\n        assertTrue(Arrays.equals(new float[] {1, 1}, array));\n        assertEquals(Float.TYPE, array.getClass().getComponentType());\n        try {\n            ArrayUtils.remove(new float[] {1, 2}, -1);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n        try {\n            ArrayUtils.remove(new float[] {1, 2}, 2);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n        try {\n            ArrayUtils.remove((float[]) null, 0);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n    }",
        "begin_line": 184,
        "end_line": 210,
        "comment": "",
        "child_ranges": [
            "(line 185,col 9)-(line 185,col 22)",
            "(line 186,col 9)-(line 186,col 54)",
            "(line 187,col 9)-(line 187,col 71)",
            "(line 188,col 9)-(line 188,col 70)",
            "(line 189,col 9)-(line 189,col 57)",
            "(line 190,col 9)-(line 190,col 58)",
            "(line 191,col 9)-(line 191,col 70)",
            "(line 192,col 9)-(line 192,col 57)",
            "(line 193,col 9)-(line 193,col 58)",
            "(line 194,col 9)-(line 194,col 70)",
            "(line 195,col 9)-(line 195,col 60)",
            "(line 196,col 9)-(line 196,col 61)",
            "(line 197,col 9)-(line 197,col 70)",
            "(line 198,col 9)-(line 201,col 48)",
            "(line 202,col 9)-(line 205,col 48)",
            "(line 206,col 9)-(line 209,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsRemoveTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsRemoveTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsRemoveTest.testRemoveIntArray()",
        "snippet": "    public void testRemoveIntArray() {\n        int[] array;\n        array = ArrayUtils.remove(new int[] {1}, 0);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array));\n        assertEquals(Integer.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new int[] {1, 2}, 0);\n        assertTrue(Arrays.equals(new int[] {2}, array));\n        assertEquals(Integer.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new int[] {1, 2}, 1);\n        assertTrue(Arrays.equals(new int[] {1}, array));\n        assertEquals(Integer.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new int[] {1, 2, 1}, 1);\n        assertTrue(Arrays.equals(new int[] {1, 1}, array));\n        assertEquals(Integer.TYPE, array.getClass().getComponentType());\n        try {\n            ArrayUtils.remove(new int[] {1, 2}, -1);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n        try {\n            ArrayUtils.remove(new int[] {1, 2}, 2);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n        try {\n            ArrayUtils.remove((int[]) null, 0);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n    }",
        "begin_line": 212,
        "end_line": 238,
        "comment": "",
        "child_ranges": [
            "(line 213,col 9)-(line 213,col 20)",
            "(line 214,col 9)-(line 214,col 52)",
            "(line 215,col 9)-(line 215,col 69)",
            "(line 216,col 9)-(line 216,col 72)",
            "(line 217,col 9)-(line 217,col 55)",
            "(line 218,col 9)-(line 218,col 56)",
            "(line 219,col 9)-(line 219,col 72)",
            "(line 220,col 9)-(line 220,col 55)",
            "(line 221,col 9)-(line 221,col 56)",
            "(line 222,col 9)-(line 222,col 72)",
            "(line 223,col 9)-(line 223,col 58)",
            "(line 224,col 9)-(line 224,col 59)",
            "(line 225,col 9)-(line 225,col 72)",
            "(line 226,col 9)-(line 229,col 48)",
            "(line 230,col 9)-(line 233,col 48)",
            "(line 234,col 9)-(line 237,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsRemoveTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsRemoveTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsRemoveTest.testRemoveLongArray()",
        "snippet": "    public void testRemoveLongArray() {\n        long[] array;\n        array = ArrayUtils.remove(new long[] {1}, 0);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array));\n        assertEquals(Long.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new long[] {1, 2}, 0);\n        assertTrue(Arrays.equals(new long[] {2}, array));\n        assertEquals(Long.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new long[] {1, 2}, 1);\n        assertTrue(Arrays.equals(new long[] {1}, array));\n        assertEquals(Long.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new long[] {1, 2, 1}, 1);\n        assertTrue(Arrays.equals(new long[] {1, 1}, array));\n        assertEquals(Long.TYPE, array.getClass().getComponentType());\n        try {\n            ArrayUtils.remove(new long[] {1, 2}, -1);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n        try {\n            ArrayUtils.remove(new long[] {1, 2}, 2);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n        try {\n            ArrayUtils.remove((long[]) null, 0);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n    }",
        "begin_line": 240,
        "end_line": 266,
        "comment": "",
        "child_ranges": [
            "(line 241,col 9)-(line 241,col 21)",
            "(line 242,col 9)-(line 242,col 53)",
            "(line 243,col 9)-(line 243,col 70)",
            "(line 244,col 9)-(line 244,col 69)",
            "(line 245,col 9)-(line 245,col 56)",
            "(line 246,col 9)-(line 246,col 57)",
            "(line 247,col 9)-(line 247,col 69)",
            "(line 248,col 9)-(line 248,col 56)",
            "(line 249,col 9)-(line 249,col 57)",
            "(line 250,col 9)-(line 250,col 69)",
            "(line 251,col 9)-(line 251,col 59)",
            "(line 252,col 9)-(line 252,col 60)",
            "(line 253,col 9)-(line 253,col 69)",
            "(line 254,col 9)-(line 257,col 48)",
            "(line 258,col 9)-(line 261,col 48)",
            "(line 262,col 9)-(line 265,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsRemoveTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsRemoveTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsRemoveTest.testRemoveShortArray()",
        "snippet": "    public void testRemoveShortArray() {\n        short[] array;\n        array = ArrayUtils.remove(new short[] {1}, 0);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array));\n        assertEquals(Short.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new short[] {1, 2}, 0);\n        assertTrue(Arrays.equals(new short[] {2}, array));\n        assertEquals(Short.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new short[] {1, 2}, 1);\n        assertTrue(Arrays.equals(new short[] {1}, array));\n        assertEquals(Short.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new short[] {1, 2, 1}, 1);\n        assertTrue(Arrays.equals(new short[] {1, 1}, array));\n        assertEquals(Short.TYPE, array.getClass().getComponentType());\n        try {\n            ArrayUtils.remove(new short[] {1, 2}, -1);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n        try {\n            ArrayUtils.remove(new short[] {1, 2}, 2);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n        try {\n            ArrayUtils.remove((short[]) null, 0);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n    }",
        "begin_line": 268,
        "end_line": 294,
        "comment": "",
        "child_ranges": [
            "(line 269,col 9)-(line 269,col 22)",
            "(line 270,col 9)-(line 270,col 54)",
            "(line 271,col 9)-(line 271,col 71)",
            "(line 272,col 9)-(line 272,col 70)",
            "(line 273,col 9)-(line 273,col 57)",
            "(line 274,col 9)-(line 274,col 58)",
            "(line 275,col 9)-(line 275,col 70)",
            "(line 276,col 9)-(line 276,col 57)",
            "(line 277,col 9)-(line 277,col 58)",
            "(line 278,col 9)-(line 278,col 70)",
            "(line 279,col 9)-(line 279,col 60)",
            "(line 280,col 9)-(line 280,col 61)",
            "(line 281,col 9)-(line 281,col 70)",
            "(line 282,col 9)-(line 285,col 48)",
            "(line 286,col 9)-(line 289,col 48)",
            "(line 290,col 9)-(line 293,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsRemoveTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsRemoveTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsRemoveTest.testRemoveElementObjectArray()",
        "snippet": "    public void testRemoveElementObjectArray() {\n        Object[] array;\n        array = ArrayUtils.removeElement((Object[]) null, \"a\");\n        assertNull(array);\n        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_OBJECT_ARRAY, \"a\");\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array));\n        assertEquals(Object.class, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new Object[] {\"a\"}, \"a\");\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array));\n        assertEquals(Object.class, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new Object[] {\"a\", \"b\"}, \"a\");\n        assertTrue(Arrays.equals(new Object[] {\"b\"}, array));\n        assertEquals(Object.class, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new Object[] {\"a\", \"b\", \"a\"}, \"a\");\n        assertTrue(Arrays.equals(new Object[] {\"b\", \"a\"}, array));\n        assertEquals(Object.class, array.getClass().getComponentType());\n    }",
        "begin_line": 296,
        "end_line": 312,
        "comment": "",
        "child_ranges": [
            "(line 297,col 9)-(line 297,col 23)",
            "(line 298,col 9)-(line 298,col 63)",
            "(line 299,col 9)-(line 299,col 26)",
            "(line 300,col 9)-(line 300,col 77)",
            "(line 301,col 9)-(line 301,col 72)",
            "(line 302,col 9)-(line 302,col 72)",
            "(line 303,col 9)-(line 303,col 66)",
            "(line 304,col 9)-(line 304,col 72)",
            "(line 305,col 9)-(line 305,col 72)",
            "(line 306,col 9)-(line 306,col 71)",
            "(line 307,col 9)-(line 307,col 61)",
            "(line 308,col 9)-(line 308,col 72)",
            "(line 309,col 9)-(line 309,col 76)",
            "(line 310,col 9)-(line 310,col 66)",
            "(line 311,col 9)-(line 311,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsRemoveTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsRemoveTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsRemoveTest.testRemoveElementBooleanArray()",
        "snippet": "    public void testRemoveElementBooleanArray() {\n        boolean[] array;\n        array = ArrayUtils.removeElement((boolean[]) null, true);\n        assertNull(array);\n        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_BOOLEAN_ARRAY, true);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array));\n        assertEquals(Boolean.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new boolean[] {true}, true);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array));\n        assertEquals(Boolean.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new boolean[] {true, false}, true);\n        assertTrue(Arrays.equals(new boolean[] {false}, array));\n        assertEquals(Boolean.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new boolean[] {true, false, true}, true);\n        assertTrue(Arrays.equals(new boolean[] {false, true}, array));\n        assertEquals(Boolean.TYPE, array.getClass().getComponentType());\n    }",
        "begin_line": 314,
        "end_line": 330,
        "comment": "",
        "child_ranges": [
            "(line 315,col 9)-(line 315,col 24)",
            "(line 316,col 9)-(line 316,col 65)",
            "(line 317,col 9)-(line 317,col 26)",
            "(line 318,col 9)-(line 318,col 79)",
            "(line 319,col 9)-(line 319,col 73)",
            "(line 320,col 9)-(line 320,col 72)",
            "(line 321,col 9)-(line 321,col 69)",
            "(line 322,col 9)-(line 322,col 73)",
            "(line 323,col 9)-(line 323,col 72)",
            "(line 324,col 9)-(line 324,col 76)",
            "(line 325,col 9)-(line 325,col 64)",
            "(line 326,col 9)-(line 326,col 72)",
            "(line 327,col 9)-(line 327,col 82)",
            "(line 328,col 9)-(line 328,col 70)",
            "(line 329,col 9)-(line 329,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsRemoveTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsRemoveTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsRemoveTest.testRemoveElementByteArray()",
        "snippet": "    public void testRemoveElementByteArray() {\n        byte[] array;\n        array = ArrayUtils.removeElement((byte[]) null, (byte) 1);\n        assertNull(array);\n        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array));\n        assertEquals(Byte.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new byte[] {1}, (byte) 1);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array));\n        assertEquals(Byte.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new byte[] {1, 2}, (byte) 1);\n        assertTrue(Arrays.equals(new byte[] {2}, array));\n        assertEquals(Byte.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new byte[] {1, 2, 1}, (byte) 1);\n        assertTrue(Arrays.equals(new byte[] {2, 1}, array));\n        assertEquals(Byte.TYPE, array.getClass().getComponentType());\n    }",
        "begin_line": 332,
        "end_line": 348,
        "comment": "",
        "child_ranges": [
            "(line 333,col 9)-(line 333,col 21)",
            "(line 334,col 9)-(line 334,col 66)",
            "(line 335,col 9)-(line 335,col 26)",
            "(line 336,col 9)-(line 336,col 80)",
            "(line 337,col 9)-(line 337,col 70)",
            "(line 338,col 9)-(line 338,col 69)",
            "(line 339,col 9)-(line 339,col 67)",
            "(line 340,col 9)-(line 340,col 70)",
            "(line 341,col 9)-(line 341,col 69)",
            "(line 342,col 9)-(line 342,col 70)",
            "(line 343,col 9)-(line 343,col 57)",
            "(line 344,col 9)-(line 344,col 69)",
            "(line 345,col 9)-(line 345,col 73)",
            "(line 346,col 9)-(line 346,col 60)",
            "(line 347,col 9)-(line 347,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsRemoveTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsRemoveTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsRemoveTest.testRemoveElementCharArray()",
        "snippet": "    public void testRemoveElementCharArray() {\n        char[] array;\n        array = ArrayUtils.removeElement((char[]) null, 'a');\n        assertNull(array);\n        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_CHAR_ARRAY, 'a');\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array));\n        assertEquals(Character.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new char[] {'a'}, 'a');\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array));\n        assertEquals(Character.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new char[] {'a', 'b'}, 'a');\n        assertTrue(Arrays.equals(new char[] {'b'}, array));\n        assertEquals(Character.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new char[] {'a', 'b', 'a'}, 'a');\n        assertTrue(Arrays.equals(new char[] {'b', 'a'}, array));\n        assertEquals(Character.TYPE, array.getClass().getComponentType());\n    }",
        "begin_line": 350,
        "end_line": 366,
        "comment": "",
        "child_ranges": [
            "(line 351,col 9)-(line 351,col 21)",
            "(line 352,col 9)-(line 352,col 61)",
            "(line 353,col 9)-(line 353,col 26)",
            "(line 354,col 9)-(line 354,col 75)",
            "(line 355,col 9)-(line 355,col 70)",
            "(line 356,col 9)-(line 356,col 74)",
            "(line 357,col 9)-(line 357,col 64)",
            "(line 358,col 9)-(line 358,col 70)",
            "(line 359,col 9)-(line 359,col 74)",
            "(line 360,col 9)-(line 360,col 69)",
            "(line 361,col 9)-(line 361,col 59)",
            "(line 362,col 9)-(line 362,col 74)",
            "(line 363,col 9)-(line 363,col 74)",
            "(line 364,col 9)-(line 364,col 64)",
            "(line 365,col 9)-(line 365,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsRemoveTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsRemoveTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsRemoveTest.testRemoveElementDoubleArray()",
        "snippet": "    public void testRemoveElementDoubleArray() {\n        double[] array;\n        array = ArrayUtils.removeElement((double[]) null, (double) 1);\n        assertNull(array);\n        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array));\n        assertEquals(Double.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new double[] {1}, (double) 1);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array));\n        assertEquals(Double.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new double[] {1, 2}, (double) 1);\n        assertTrue(Arrays.equals(new double[] {2}, array));\n        assertEquals(Double.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new double[] {1, 2, 1}, (double) 1);\n        assertTrue(Arrays.equals(new double[] {2, 1}, array));\n        assertEquals(Double.TYPE, array.getClass().getComponentType());\n    }",
        "begin_line": 368,
        "end_line": 384,
        "comment": "",
        "child_ranges": [
            "(line 369,col 9)-(line 369,col 23)",
            "(line 370,col 9)-(line 370,col 70)",
            "(line 371,col 9)-(line 371,col 26)",
            "(line 372,col 9)-(line 372,col 84)",
            "(line 373,col 9)-(line 373,col 72)",
            "(line 374,col 9)-(line 374,col 71)",
            "(line 375,col 9)-(line 375,col 71)",
            "(line 376,col 9)-(line 376,col 72)",
            "(line 377,col 9)-(line 377,col 71)",
            "(line 378,col 9)-(line 378,col 74)",
            "(line 379,col 9)-(line 379,col 59)",
            "(line 380,col 9)-(line 380,col 71)",
            "(line 381,col 9)-(line 381,col 77)",
            "(line 382,col 9)-(line 382,col 62)",
            "(line 383,col 9)-(line 383,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsRemoveTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsRemoveTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsRemoveTest.testRemoveElementFloatArray()",
        "snippet": "    public void testRemoveElementFloatArray() {\n        float[] array;\n        array = ArrayUtils.removeElement((float[]) null, (float) 1);\n        assertNull(array);\n        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_FLOAT_ARRAY, (float) 1);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array));\n        assertEquals(Float.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new float[] {1}, (float) 1);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array));\n        assertEquals(Float.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new float[] {1, 2}, (float) 1);\n        assertTrue(Arrays.equals(new float[] {2}, array));\n        assertEquals(Float.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new float[] {1, 2, 1}, (float) 1);\n        assertTrue(Arrays.equals(new float[] {2, 1}, array));\n        assertEquals(Float.TYPE, array.getClass().getComponentType());\n    }",
        "begin_line": 386,
        "end_line": 402,
        "comment": "",
        "child_ranges": [
            "(line 387,col 9)-(line 387,col 22)",
            "(line 388,col 9)-(line 388,col 68)",
            "(line 389,col 9)-(line 389,col 26)",
            "(line 390,col 9)-(line 390,col 82)",
            "(line 391,col 9)-(line 391,col 71)",
            "(line 392,col 9)-(line 392,col 70)",
            "(line 393,col 9)-(line 393,col 69)",
            "(line 394,col 9)-(line 394,col 71)",
            "(line 395,col 9)-(line 395,col 70)",
            "(line 396,col 9)-(line 396,col 72)",
            "(line 397,col 9)-(line 397,col 58)",
            "(line 398,col 9)-(line 398,col 70)",
            "(line 399,col 9)-(line 399,col 75)",
            "(line 400,col 9)-(line 400,col 61)",
            "(line 401,col 9)-(line 401,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsRemoveTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsRemoveTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsRemoveTest.testRemoveElementIntArray()",
        "snippet": "    public void testRemoveElementIntArray() {\n        int[] array;\n        array = ArrayUtils.removeElement((int[]) null, 1);\n        assertNull(array);\n        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_INT_ARRAY, 1);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array));\n        assertEquals(Integer.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new int[] {1}, 1);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array));\n        assertEquals(Integer.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new int[] {1, 2}, 1);\n        assertTrue(Arrays.equals(new int[] {2}, array));\n        assertEquals(Integer.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new int[] {1, 2, 1}, 1);\n        assertTrue(Arrays.equals(new int[] {2, 1}, array));\n        assertEquals(Integer.TYPE, array.getClass().getComponentType());\n    }",
        "begin_line": 404,
        "end_line": 420,
        "comment": "",
        "child_ranges": [
            "(line 405,col 9)-(line 405,col 20)",
            "(line 406,col 9)-(line 406,col 58)",
            "(line 407,col 9)-(line 407,col 26)",
            "(line 408,col 9)-(line 408,col 72)",
            "(line 409,col 9)-(line 409,col 69)",
            "(line 410,col 9)-(line 410,col 72)",
            "(line 411,col 9)-(line 411,col 59)",
            "(line 412,col 9)-(line 412,col 69)",
            "(line 413,col 9)-(line 413,col 72)",
            "(line 414,col 9)-(line 414,col 62)",
            "(line 415,col 9)-(line 415,col 56)",
            "(line 416,col 9)-(line 416,col 72)",
            "(line 417,col 9)-(line 417,col 65)",
            "(line 418,col 9)-(line 418,col 59)",
            "(line 419,col 9)-(line 419,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsRemoveTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsRemoveTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsRemoveTest.testRemoveElementLongArray()",
        "snippet": "    public void testRemoveElementLongArray() {\n        long[] array;\n        array = ArrayUtils.removeElement((long[]) null, (long) 1);\n        assertNull(array);\n        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array));\n        assertEquals(Long.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new long[] {1}, (long) 1);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array));\n        assertEquals(Long.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new long[] {1, 2}, (long) 1);\n        assertTrue(Arrays.equals(new long[] {2}, array));\n        assertEquals(Long.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new long[] {1, 2, 1}, (long) 1);\n        assertTrue(Arrays.equals(new long[] {2, 1}, array));\n        assertEquals(Long.TYPE, array.getClass().getComponentType());\n    }",
        "begin_line": 422,
        "end_line": 438,
        "comment": "",
        "child_ranges": [
            "(line 423,col 9)-(line 423,col 21)",
            "(line 424,col 9)-(line 424,col 66)",
            "(line 425,col 9)-(line 425,col 26)",
            "(line 426,col 9)-(line 426,col 80)",
            "(line 427,col 9)-(line 427,col 70)",
            "(line 428,col 9)-(line 428,col 69)",
            "(line 429,col 9)-(line 429,col 67)",
            "(line 430,col 9)-(line 430,col 70)",
            "(line 431,col 9)-(line 431,col 69)",
            "(line 432,col 9)-(line 432,col 70)",
            "(line 433,col 9)-(line 433,col 57)",
            "(line 434,col 9)-(line 434,col 69)",
            "(line 435,col 9)-(line 435,col 73)",
            "(line 436,col 9)-(line 436,col 60)",
            "(line 437,col 9)-(line 437,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsRemoveTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsRemoveTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsRemoveTest.testRemoveElementShortArray()",
        "snippet": "    public void testRemoveElementShortArray() {\n        short[] array;\n        array = ArrayUtils.removeElement((short[]) null, (short) 1);\n        assertNull(array);\n        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array));\n        assertEquals(Short.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new short[] {1}, (short) 1);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array));\n        assertEquals(Short.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new short[] {1, 2}, (short) 1);\n        assertTrue(Arrays.equals(new short[] {2}, array));\n        assertEquals(Short.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new short[] {1, 2, 1}, (short) 1);\n        assertTrue(Arrays.equals(new short[] {2, 1}, array));\n        assertEquals(Short.TYPE, array.getClass().getComponentType());\n    }",
        "begin_line": 440,
        "end_line": 456,
        "comment": "",
        "child_ranges": [
            "(line 441,col 9)-(line 441,col 22)",
            "(line 442,col 9)-(line 442,col 68)",
            "(line 443,col 9)-(line 443,col 26)",
            "(line 444,col 9)-(line 444,col 82)",
            "(line 445,col 9)-(line 445,col 71)",
            "(line 446,col 9)-(line 446,col 70)",
            "(line 447,col 9)-(line 447,col 69)",
            "(line 448,col 9)-(line 448,col 71)",
            "(line 449,col 9)-(line 449,col 70)",
            "(line 450,col 9)-(line 450,col 72)",
            "(line 451,col 9)-(line 451,col 58)",
            "(line 452,col 9)-(line 452,col 70)",
            "(line 453,col 9)-(line 453,col 75)",
            "(line 454,col 9)-(line 454,col 61)",
            "(line 455,col 9)-(line 455,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.ClassUtilsTest(java.lang.String)",
        "snippet": "    public ClassUtilsTest(String name) {\n        super(name);\n    }",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(ClassUtilsTest.class);\n        suite.setName(\"ClassUtils Tests\");\n        return suite;\n    }",
        "begin_line": 54,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 62)",
            "(line 56,col 9)-(line 56,col 42)",
            "(line 57,col 9)-(line 57,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        super.setUp();\n    }",
        "begin_line": 60,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        super.tearDown();\n    }",
        "begin_line": 64,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new ClassUtils());\n        Constructor[] cons = ClassUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(ClassUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(ClassUtils.class.getModifiers()));\n    }",
        "begin_line": 72,
        "end_line": 79,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 40)",
            "(line 74,col 9)-(line 74,col 72)",
            "(line 75,col 9)-(line 75,col 37)",
            "(line 76,col 9)-(line 76,col 70)",
            "(line 77,col 9)-(line 77,col 79)",
            "(line 78,col 9)-(line 78,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.test_getShortClassName_Object()",
        "snippet": "    public void test_getShortClassName_Object() {\n        assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(new ClassUtils(), \"<null>\"));\n        assertEquals(\"ClassUtilsTest.Inner\", ClassUtils.getShortClassName(new Inner(), \"<null>\"));\n        assertEquals(\"String\", ClassUtils.getShortClassName(\"hello\", \"<null>\"));\n        assertEquals(\"<null>\", ClassUtils.getShortClassName(null, \"<null>\"));\n    }",
        "begin_line": 82,
        "end_line": 87,
        "comment": " -------------------------------------------------------------------------",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 93)",
            "(line 84,col 9)-(line 84,col 98)",
            "(line 85,col 9)-(line 85,col 80)",
            "(line 86,col 9)-(line 86,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.test_getShortClassName_Class()",
        "snippet": "    public void test_getShortClassName_Class() {\n        assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));\n        assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));\n        assertEquals(\"\", ClassUtils.getShortClassName((Class) null));\n    }",
        "begin_line": 89,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 83)",
            "(line 91,col 9)-(line 91,col 81)",
            "(line 92,col 9)-(line 92,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.test_getShortClassName_String()",
        "snippet": "    public void test_getShortClassName_String() {\n        assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class.getName()));\n        assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class.getName()));\n        assertEquals(\"\", ClassUtils.getShortClassName((String) null));\n        assertEquals(\"\", ClassUtils.getShortClassName(\"\"));\n    }",
        "begin_line": 95,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 93)",
            "(line 97,col 9)-(line 97,col 91)",
            "(line 98,col 9)-(line 98,col 70)",
            "(line 99,col 9)-(line 99,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.test_getPackageName_Object()",
        "snippet": "    public void test_getPackageName_Object() {\n        assertEquals(\"org.apache.commons.lang\", ClassUtils.getPackageName(new ClassUtils(), \"<null>\"));\n        assertEquals(\"org.apache.commons.lang\", ClassUtils.getPackageName(new Inner(), \"<null>\"));\n        assertEquals(\"<null>\", ClassUtils.getPackageName(null, \"<null>\"));\n    }",
        "begin_line": 103,
        "end_line": 107,
        "comment": " -------------------------------------------------------------------------",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 103)",
            "(line 105,col 9)-(line 105,col 98)",
            "(line 106,col 9)-(line 106,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.test_getPackageName_Class()",
        "snippet": "    public void test_getPackageName_Class() {\n        assertEquals(\"java.lang\", ClassUtils.getPackageName(String.class));\n        assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class));\n        assertEquals(\"\", ClassUtils.getPackageName((Class)null));\n    }",
        "begin_line": 109,
        "end_line": 113,
        "comment": "",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 75)",
            "(line 111,col 9)-(line 111,col 78)",
            "(line 112,col 9)-(line 112,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.test_getPackageName_String()",
        "snippet": "    public void test_getPackageName_String() {\n        assertEquals(\"org.apache.commons.lang\", ClassUtils.getPackageName(ClassUtils.class.getName()));\n        assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class.getName()));\n        assertEquals(\"\", ClassUtils.getPackageName((String)null));\n        assertEquals(\"\", ClassUtils.getPackageName(\"\"));\n    }",
        "begin_line": 115,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 116,col 9)-(line 116,col 103)",
            "(line 117,col 9)-(line 117,col 88)",
            "(line 118,col 9)-(line 118,col 66)",
            "(line 119,col 9)-(line 119,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.test_getAllSuperclasses_Class()",
        "snippet": "    public void test_getAllSuperclasses_Class() {\n        List list = ClassUtils.getAllSuperclasses(CY.class);\n        assertEquals(2, list.size());\n        assertEquals(CX.class, list.get(0));\n        assertEquals(Object.class, list.get(1));\n        \n        assertEquals(null, ClassUtils.getAllSuperclasses(null));\n    }",
        "begin_line": 123,
        "end_line": 130,
        "comment": " -------------------------------------------------------------------------",
        "child_ranges": [
            "(line 124,col 9)-(line 124,col 60)",
            "(line 125,col 9)-(line 125,col 37)",
            "(line 126,col 9)-(line 126,col 44)",
            "(line 127,col 9)-(line 127,col 48)",
            "(line 129,col 9)-(line 129,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.test_getAllInterfaces_Class()",
        "snippet": "    public void test_getAllInterfaces_Class() {\n        List list = ClassUtils.getAllInterfaces(CY.class);\n        assertEquals(6, list.size());\n        assertEquals(IB.class, list.get(0));\n        assertEquals(IC.class, list.get(1));\n        assertEquals(ID.class, list.get(2));\n        assertEquals(IE.class, list.get(3));\n        assertEquals(IF.class, list.get(4));\n        assertEquals(IA.class, list.get(5));\n        \n        assertEquals(null, ClassUtils.getAllInterfaces(null));\n    }",
        "begin_line": 132,
        "end_line": 143,
        "comment": "",
        "child_ranges": [
            "(line 133,col 9)-(line 133,col 58)",
            "(line 134,col 9)-(line 134,col 37)",
            "(line 135,col 9)-(line 135,col 44)",
            "(line 136,col 9)-(line 136,col 44)",
            "(line 137,col 9)-(line 137,col 44)",
            "(line 138,col 9)-(line 138,col 44)",
            "(line 139,col 9)-(line 139,col 44)",
            "(line 140,col 9)-(line 140,col 44)",
            "(line 142,col 9)-(line 142,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.test_convertClassNamesToClasses_List()",
        "snippet": "    public void test_convertClassNamesToClasses_List() {\n        List list = new ArrayList();\n        List result = ClassUtils.convertClassNamesToClasses(list);\n        assertEquals(0, result.size());\n        \n        list.add(\"java.lang.String\");\n        list.add(\"java.lang.xxx\");\n        list.add(\"java.lang.Object\");\n        result = ClassUtils.convertClassNamesToClasses(list);\n        assertEquals(3, result.size());\n        assertEquals(String.class, result.get(0));\n        assertEquals(null, result.get(1));\n        assertEquals(Object.class, result.get(2));\n\n        list.add(new Object());\n        try {\n            ClassUtils.convertClassNamesToClasses(list);\n            fail();\n        } catch (ClassCastException ex) {}\n        assertEquals(null, ClassUtils.convertClassNamesToClasses(null));\n    }",
        "begin_line": 163,
        "end_line": 183,
        "comment": " -------------------------------------------------------------------------",
        "child_ranges": [
            "(line 164,col 9)-(line 164,col 36)",
            "(line 165,col 9)-(line 165,col 66)",
            "(line 166,col 9)-(line 166,col 39)",
            "(line 168,col 9)-(line 168,col 37)",
            "(line 169,col 9)-(line 169,col 34)",
            "(line 170,col 9)-(line 170,col 37)",
            "(line 171,col 9)-(line 171,col 61)",
            "(line 172,col 9)-(line 172,col 39)",
            "(line 173,col 9)-(line 173,col 50)",
            "(line 174,col 9)-(line 174,col 42)",
            "(line 175,col 9)-(line 175,col 50)",
            "(line 177,col 9)-(line 177,col 31)",
            "(line 178,col 9)-(line 181,col 42)",
            "(line 182,col 9)-(line 182,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.test_convertClassesToClassNames_List()",
        "snippet": "    public void test_convertClassesToClassNames_List() {\n        List list = new ArrayList();\n        List result = ClassUtils.convertClassesToClassNames(list);\n        assertEquals(0, result.size());\n        \n        list.add(String.class);\n        list.add(null);\n        list.add(Object.class);\n        result = ClassUtils.convertClassesToClassNames(list);\n        assertEquals(3, result.size());\n        assertEquals(\"java.lang.String\", result.get(0));\n        assertEquals(null, result.get(1));\n        assertEquals(\"java.lang.Object\", result.get(2));\n\n        list.add(new Object());\n        try {\n            ClassUtils.convertClassesToClassNames(list);\n            fail();\n        } catch (ClassCastException ex) {}\n        assertEquals(null, ClassUtils.convertClassesToClassNames(null));\n    }",
        "begin_line": 185,
        "end_line": 205,
        "comment": "",
        "child_ranges": [
            "(line 186,col 9)-(line 186,col 36)",
            "(line 187,col 9)-(line 187,col 66)",
            "(line 188,col 9)-(line 188,col 39)",
            "(line 190,col 9)-(line 190,col 31)",
            "(line 191,col 9)-(line 191,col 23)",
            "(line 192,col 9)-(line 192,col 31)",
            "(line 193,col 9)-(line 193,col 61)",
            "(line 194,col 9)-(line 194,col 39)",
            "(line 195,col 9)-(line 195,col 56)",
            "(line 196,col 9)-(line 196,col 42)",
            "(line 197,col 9)-(line 197,col 56)",
            "(line 199,col 9)-(line 199,col 31)",
            "(line 200,col 9)-(line 203,col 42)",
            "(line 204,col 9)-(line 204,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.test_isInnerClass_Class()",
        "snippet": "    public void test_isInnerClass_Class() {\n        assertEquals(true, ClassUtils.isInnerClass(Inner.class));\n        assertEquals(true, ClassUtils.isInnerClass(Map.Entry.class));\n        assertEquals(true, ClassUtils.isInnerClass(new Cloneable() {\n        }.getClass()));\n        assertEquals(false, ClassUtils.isInnerClass(this.getClass()));\n        assertEquals(false, ClassUtils.isInnerClass(String.class));\n        assertEquals(false, ClassUtils.isInnerClass(null));\n    }",
        "begin_line": 208,
        "end_line": 216,
        "comment": " -------------------------------------------------------------------------",
        "child_ranges": [
            "(line 209,col 9)-(line 209,col 65)",
            "(line 210,col 9)-(line 210,col 69)",
            "(line 211,col 9)-(line 212,col 23)",
            "(line 213,col 9)-(line 213,col 70)",
            "(line 214,col 9)-(line 214,col 67)",
            "(line 215,col 9)-(line 215,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.test_isAssignable_ClassArray_ClassArray()",
        "snippet": "    public void test_isAssignable_ClassArray_ClassArray() throws Exception {\n        Class[] array2 = new Class[] {Object.class, Object.class};\n        Class[] array1 = new Class[] {Object.class};\n        Class[] array1s = new Class[] {String.class};\n        Class[] array0 = new Class[] {};\n\n        assertEquals(false, ClassUtils.isAssignable(array1, array2));\n        assertEquals(false, ClassUtils.isAssignable(null, array2));\n        assertEquals(true, ClassUtils.isAssignable(null, array0));\n        assertEquals(true, ClassUtils.isAssignable(array0, array0));\n        assertEquals(true, ClassUtils.isAssignable(array0, null));\n        assertEquals(true, ClassUtils.isAssignable((Class[]) null, (Class[]) null));\n        \n        assertEquals(false, ClassUtils.isAssignable(array1, array1s));\n        assertEquals(true, ClassUtils.isAssignable(array1s, array1s));\n        assertEquals(true, ClassUtils.isAssignable(array1s, array1));\n    }",
        "begin_line": 219,
        "end_line": 235,
        "comment": " -------------------------------------------------------------------------",
        "child_ranges": [
            "(line 220,col 9)-(line 220,col 66)",
            "(line 221,col 9)-(line 221,col 52)",
            "(line 222,col 9)-(line 222,col 53)",
            "(line 223,col 9)-(line 223,col 40)",
            "(line 225,col 9)-(line 225,col 69)",
            "(line 226,col 9)-(line 226,col 67)",
            "(line 227,col 9)-(line 227,col 66)",
            "(line 228,col 9)-(line 228,col 68)",
            "(line 229,col 9)-(line 229,col 66)",
            "(line 230,col 9)-(line 230,col 84)",
            "(line 232,col 9)-(line 232,col 70)",
            "(line 233,col 9)-(line 233,col 70)",
            "(line 234,col 9)-(line 234,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.test_isAssignable()",
        "snippet": "    public void test_isAssignable() throws Exception {\n        assertEquals(false, ClassUtils.isAssignable((Class) null, null));\n        assertEquals(false, ClassUtils.isAssignable(String.class, null));\n        \n        assertEquals(true, ClassUtils.isAssignable(null, Object.class));\n        assertEquals(true, ClassUtils.isAssignable(null, Integer.class));\n        assertEquals(false, ClassUtils.isAssignable(null, Integer.TYPE));\n        assertEquals(true, ClassUtils.isAssignable(String.class, Object.class));\n        assertEquals(true, ClassUtils.isAssignable(String.class, String.class));\n        assertEquals(false, ClassUtils.isAssignable(Object.class, String.class));\n        assertEquals(false, ClassUtils.isAssignable(Integer.TYPE, Integer.class));\n        assertEquals(false, ClassUtils.isAssignable(Integer.class, Integer.TYPE));\n        assertEquals(true, ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE));\n        assertEquals(true, ClassUtils.isAssignable(Integer.class, Integer.class));\n    }",
        "begin_line": 237,
        "end_line": 251,
        "comment": "",
        "child_ranges": [
            "(line 238,col 9)-(line 238,col 73)",
            "(line 239,col 9)-(line 239,col 73)",
            "(line 241,col 9)-(line 241,col 72)",
            "(line 242,col 9)-(line 242,col 73)",
            "(line 243,col 9)-(line 243,col 73)",
            "(line 244,col 9)-(line 244,col 80)",
            "(line 245,col 9)-(line 245,col 80)",
            "(line 246,col 9)-(line 246,col 81)",
            "(line 247,col 9)-(line 247,col 82)",
            "(line 248,col 9)-(line 248,col 82)",
            "(line 249,col 9)-(line 249,col 80)",
            "(line 250,col 9)-(line 250,col 82)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.test_isAssignable_Widening()",
        "snippet": "    public void test_isAssignable_Widening() throws Exception {\n        // test byte conversions\n        assertEquals(\"byte -> char\", false, ClassUtils.isAssignable(Byte.TYPE, Character.TYPE));\n        assertEquals(\"byte -> byte\", true, ClassUtils.isAssignable(Byte.TYPE, Byte.TYPE));\n        assertEquals(\"byte -> short\", true, ClassUtils.isAssignable(Byte.TYPE, Short.TYPE));\n        assertEquals(\"byte -> int\", true, ClassUtils.isAssignable(Byte.TYPE, Integer.TYPE));\n        assertEquals(\"byte -> long\", true, ClassUtils.isAssignable(Byte.TYPE, Long.TYPE));\n        assertEquals(\"byte -> float\", true, ClassUtils.isAssignable(Byte.TYPE, Float.TYPE));\n        assertEquals(\"byte -> double\", true, ClassUtils.isAssignable(Byte.TYPE, Double.TYPE));\n        assertEquals(\"byte -> boolean\", false, ClassUtils.isAssignable(Byte.TYPE, Boolean.TYPE));\n        \n        // test short conversions\n        assertEquals(\"short -> char\", false, ClassUtils.isAssignable(Short.TYPE, Character.TYPE));\n        assertEquals(\"short -> byte\", false, ClassUtils.isAssignable(Short.TYPE, Byte.TYPE));\n        assertEquals(\"short -> short\", true, ClassUtils.isAssignable(Short.TYPE, Short.TYPE));\n        assertEquals(\"short -> int\", true, ClassUtils.isAssignable(Short.TYPE, Integer.TYPE));\n        assertEquals(\"short -> long\", true, ClassUtils.isAssignable(Short.TYPE, Long.TYPE));\n        assertEquals(\"short -> float\", true, ClassUtils.isAssignable(Short.TYPE, Float.TYPE));\n        assertEquals(\"short -> double\", true, ClassUtils.isAssignable(Short.TYPE, Double.TYPE));\n        assertEquals(\"short -> boolean\", false, ClassUtils.isAssignable(Short.TYPE, Boolean.TYPE));\n        \n        // test char conversions\n        assertEquals(\"char -> char\", true, ClassUtils.isAssignable(Character.TYPE, Character.TYPE));\n        assertEquals(\"char -> byte\", false, ClassUtils.isAssignable(Character.TYPE, Byte.TYPE));\n        assertEquals(\"char -> short\", false, ClassUtils.isAssignable(Character.TYPE, Short.TYPE));\n        assertEquals(\"char -> int\", true, ClassUtils.isAssignable(Character.TYPE, Integer.TYPE));\n        assertEquals(\"char -> long\", true, ClassUtils.isAssignable(Character.TYPE, Long.TYPE));\n        assertEquals(\"char -> float\", true, ClassUtils.isAssignable(Character.TYPE, Float.TYPE));\n        assertEquals(\"char -> double\", true, ClassUtils.isAssignable(Character.TYPE, Double.TYPE));\n        assertEquals(\"char -> boolean\", false, ClassUtils.isAssignable(Character.TYPE, Boolean.TYPE));\n        \n        // test int conversions\n        assertEquals(\"int -> char\", false, ClassUtils.isAssignable(Integer.TYPE, Character.TYPE));\n        assertEquals(\"int -> byte\", false, ClassUtils.isAssignable(Integer.TYPE, Byte.TYPE));\n        assertEquals(\"int -> short\", false, ClassUtils.isAssignable(Integer.TYPE, Short.TYPE));\n        assertEquals(\"int -> int\", true, ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE));\n        assertEquals(\"int -> long\", true, ClassUtils.isAssignable(Integer.TYPE, Long.TYPE));\n        assertEquals(\"int -> float\", true, ClassUtils.isAssignable(Integer.TYPE, Float.TYPE));\n        assertEquals(\"int -> double\", true, ClassUtils.isAssignable(Integer.TYPE, Double.TYPE));\n        assertEquals(\"int -> boolean\", false, ClassUtils.isAssignable(Integer.TYPE, Boolean.TYPE));\n \n        // test long conversions\n        assertEquals(\"long -> char\", false, ClassUtils.isAssignable(Long.TYPE, Character.TYPE));\n        assertEquals(\"long -> byte\", false, ClassUtils.isAssignable(Long.TYPE, Byte.TYPE));\n        assertEquals(\"long -> short\", false, ClassUtils.isAssignable(Long.TYPE, Short.TYPE));\n        assertEquals(\"long -> int\", false, ClassUtils.isAssignable(Long.TYPE, Integer.TYPE));\n        assertEquals(\"long -> long\", true, ClassUtils.isAssignable(Long.TYPE, Long.TYPE));\n        assertEquals(\"long -> float\", true, ClassUtils.isAssignable(Long.TYPE, Float.TYPE));\n        assertEquals(\"long -> double\", true, ClassUtils.isAssignable(Long.TYPE, Double.TYPE));\n        assertEquals(\"long -> boolean\", false, ClassUtils.isAssignable(Long.TYPE, Boolean.TYPE));\n \n        // test float conversions\n        assertEquals(\"float -> char\", false, ClassUtils.isAssignable(Float.TYPE, Character.TYPE));\n        assertEquals(\"float -> byte\", false, ClassUtils.isAssignable(Float.TYPE, Byte.TYPE));\n        assertEquals(\"float -> short\", false, ClassUtils.isAssignable(Float.TYPE, Short.TYPE));\n        assertEquals(\"float -> int\", false, ClassUtils.isAssignable(Float.TYPE, Integer.TYPE));\n        assertEquals(\"float -> long\", false, ClassUtils.isAssignable(Float.TYPE, Long.TYPE));\n        assertEquals(\"float -> float\", true, ClassUtils.isAssignable(Float.TYPE, Float.TYPE));\n        assertEquals(\"float -> double\", true, ClassUtils.isAssignable(Float.TYPE, Double.TYPE));\n        assertEquals(\"float -> boolean\", false, ClassUtils.isAssignable(Float.TYPE, Boolean.TYPE));\n        \n        // test float conversions\n        assertEquals(\"double -> char\", false, ClassUtils.isAssignable(Double.TYPE, Character.TYPE));\n        assertEquals(\"double -> byte\", false, ClassUtils.isAssignable(Double.TYPE, Byte.TYPE));\n        assertEquals(\"double -> short\", false, ClassUtils.isAssignable(Double.TYPE, Short.TYPE));\n        assertEquals(\"double -> int\", false, ClassUtils.isAssignable(Double.TYPE, Integer.TYPE));\n        assertEquals(\"double -> long\", false, ClassUtils.isAssignable(Double.TYPE, Long.TYPE));\n        assertEquals(\"double -> float\", false, ClassUtils.isAssignable(Double.TYPE, Float.TYPE));\n        assertEquals(\"double -> double\", true, ClassUtils.isAssignable(Double.TYPE, Double.TYPE));\n        assertEquals(\"double -> boolean\", false, ClassUtils.isAssignable(Double.TYPE, Boolean.TYPE));\n        \n        // test float conversions\n        assertEquals(\"boolean -> char\", false, ClassUtils.isAssignable(Boolean.TYPE, Character.TYPE));\n        assertEquals(\"boolean -> byte\", false, ClassUtils.isAssignable(Boolean.TYPE, Byte.TYPE));\n        assertEquals(\"boolean -> short\", false, ClassUtils.isAssignable(Boolean.TYPE, Short.TYPE));\n        assertEquals(\"boolean -> int\", false, ClassUtils.isAssignable(Boolean.TYPE, Integer.TYPE));\n        assertEquals(\"boolean -> long\", false, ClassUtils.isAssignable(Boolean.TYPE, Long.TYPE));\n        assertEquals(\"boolean -> float\", false, ClassUtils.isAssignable(Boolean.TYPE, Float.TYPE));\n        assertEquals(\"boolean -> double\", false, ClassUtils.isAssignable(Boolean.TYPE, Double.TYPE));\n        assertEquals(\"boolean -> boolean\", true, ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE));\n    }",
        "begin_line": 253,
        "end_line": 333,
        "comment": "",
        "child_ranges": [
            "(line 255,col 9)-(line 255,col 96)",
            "(line 256,col 9)-(line 256,col 90)",
            "(line 257,col 9)-(line 257,col 92)",
            "(line 258,col 9)-(line 258,col 92)",
            "(line 259,col 9)-(line 259,col 90)",
            "(line 260,col 9)-(line 260,col 92)",
            "(line 261,col 9)-(line 261,col 94)",
            "(line 262,col 9)-(line 262,col 97)",
            "(line 265,col 9)-(line 265,col 98)",
            "(line 266,col 9)-(line 266,col 93)",
            "(line 267,col 9)-(line 267,col 94)",
            "(line 268,col 9)-(line 268,col 94)",
            "(line 269,col 9)-(line 269,col 92)",
            "(line 270,col 9)-(line 270,col 94)",
            "(line 271,col 9)-(line 271,col 96)",
            "(line 272,col 9)-(line 272,col 99)",
            "(line 275,col 9)-(line 275,col 100)",
            "(line 276,col 9)-(line 276,col 96)",
            "(line 277,col 9)-(line 277,col 98)",
            "(line 278,col 9)-(line 278,col 97)",
            "(line 279,col 9)-(line 279,col 95)",
            "(line 280,col 9)-(line 280,col 97)",
            "(line 281,col 9)-(line 281,col 99)",
            "(line 282,col 9)-(line 282,col 102)",
            "(line 285,col 9)-(line 285,col 98)",
            "(line 286,col 9)-(line 286,col 93)",
            "(line 287,col 9)-(line 287,col 95)",
            "(line 288,col 9)-(line 288,col 94)",
            "(line 289,col 9)-(line 289,col 92)",
            "(line 290,col 9)-(line 290,col 94)",
            "(line 291,col 9)-(line 291,col 96)",
            "(line 292,col 9)-(line 292,col 99)",
            "(line 295,col 9)-(line 295,col 96)",
            "(line 296,col 9)-(line 296,col 91)",
            "(line 297,col 9)-(line 297,col 93)",
            "(line 298,col 9)-(line 298,col 93)",
            "(line 299,col 9)-(line 299,col 90)",
            "(line 300,col 9)-(line 300,col 92)",
            "(line 301,col 9)-(line 301,col 94)",
            "(line 302,col 9)-(line 302,col 97)",
            "(line 305,col 9)-(line 305,col 98)",
            "(line 306,col 9)-(line 306,col 93)",
            "(line 307,col 9)-(line 307,col 95)",
            "(line 308,col 9)-(line 308,col 95)",
            "(line 309,col 9)-(line 309,col 93)",
            "(line 310,col 9)-(line 310,col 94)",
            "(line 311,col 9)-(line 311,col 96)",
            "(line 312,col 9)-(line 312,col 99)",
            "(line 315,col 9)-(line 315,col 100)",
            "(line 316,col 9)-(line 316,col 95)",
            "(line 317,col 9)-(line 317,col 97)",
            "(line 318,col 9)-(line 318,col 97)",
            "(line 319,col 9)-(line 319,col 95)",
            "(line 320,col 9)-(line 320,col 97)",
            "(line 321,col 9)-(line 321,col 98)",
            "(line 322,col 9)-(line 322,col 101)",
            "(line 325,col 9)-(line 325,col 102)",
            "(line 326,col 9)-(line 326,col 97)",
            "(line 327,col 9)-(line 327,col 99)",
            "(line 328,col 9)-(line 328,col 99)",
            "(line 329,col 9)-(line 329,col 97)",
            "(line 330,col 9)-(line 330,col 99)",
            "(line 331,col 9)-(line 331,col 101)",
            "(line 332,col 9)-(line 332,col 102)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.testPrimitiveToWrapper()",
        "snippet": "    public void testPrimitiveToWrapper() {\n       \n        // test primitive classes\n        assertEquals(\"boolean -> Boolean.class\", \n            Boolean.class, ClassUtils.primitiveToWrapper(Boolean.TYPE));   \n        assertEquals(\"byte -> Byte.class\",\n            Byte.class, ClassUtils.primitiveToWrapper(Byte.TYPE));\n        assertEquals(\"char -> Character.class\",\n            Character.class, ClassUtils.primitiveToWrapper(Character.TYPE));\n        assertEquals(\"short -> Short.class\",\n            Short.class, ClassUtils.primitiveToWrapper(Short.TYPE));\n        assertEquals(\"int -> Integer.class\",\n            Integer.class, ClassUtils.primitiveToWrapper(Integer.TYPE));\n        assertEquals(\"long -> Long.class\",\n            Long.class, ClassUtils.primitiveToWrapper(Long.TYPE));\n        assertEquals(\"double -> Double.class\",\n            Double.class, ClassUtils.primitiveToWrapper(Double.TYPE));\n        assertEquals(\"float -> Float.class\",\n            Float.class, ClassUtils.primitiveToWrapper(Float.TYPE));\n        \n        // test a few other classes\n        assertEquals(\"String.class -> String.class\",\n            String.class, ClassUtils.primitiveToWrapper(String.class));\n        assertEquals(\"ClassUtils.class -> ClassUtils.class\",\n            org.apache.commons.lang.ClassUtils.class, \n            ClassUtils.primitiveToWrapper(org.apache.commons.lang.ClassUtils.class));\n        assertEquals(\"Void.TYPE -> Void.TYPE\",\n            Void.TYPE, ClassUtils.primitiveToWrapper(Void.TYPE));\n            \n        // test null     \n        assertNull(\"null -> null\",\n            ClassUtils.primitiveToWrapper(null));\n    }",
        "begin_line": 335,
        "end_line": 367,
        "comment": "",
        "child_ranges": [
            "(line 338,col 9)-(line 339,col 72)",
            "(line 340,col 9)-(line 341,col 66)",
            "(line 342,col 9)-(line 343,col 76)",
            "(line 344,col 9)-(line 345,col 68)",
            "(line 346,col 9)-(line 347,col 72)",
            "(line 348,col 9)-(line 349,col 66)",
            "(line 350,col 9)-(line 351,col 70)",
            "(line 352,col 9)-(line 353,col 68)",
            "(line 356,col 9)-(line 357,col 71)",
            "(line 358,col 9)-(line 360,col 85)",
            "(line 361,col 9)-(line 362,col 65)",
            "(line 365,col 9)-(line 366,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.testPrimitivesToWrappers()",
        "snippet": "    public void testPrimitivesToWrappers() {\n        // test null\n        assertNull(\"null -> null\",\n            ClassUtils.primitivesToWrappers(null));\n        // test empty array\n        assertEquals(\"empty -> empty\",\n                ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.primitivesToWrappers(ArrayUtils.EMPTY_CLASS_ARRAY));\n\n        // test an array of various classes\n        final Class[] primitives = new Class[] {\n                Boolean.TYPE, Byte.TYPE, Character.TYPE, Short.TYPE, \n                Integer.TYPE, Long.TYPE, Double.TYPE, Float.TYPE,\n                String.class, ClassUtils.class\n        };\n        Class[] wrappers= ClassUtils.primitivesToWrappers(primitives);\n        \n        for (int i=0; i < primitives.length; i++) {\n            // test each returned wrapper\n            Class primitive = primitives[i];\n            Class expectedWrapper = ClassUtils.primitiveToWrapper(primitive);\n            \n            assertEquals(primitive + \" -> \" + expectedWrapper, expectedWrapper, wrappers[i]);\n        }\n\n        // test an array of no primitive classes\n        final Class[] noPrimitives = new Class[] {\n                String.class, ClassUtils.class, Void.TYPE\n        };\n        // This used to return the exact same array, but no longer does.\n        assertNotSame(\"unmodified\", noPrimitives, ClassUtils.primitivesToWrappers(noPrimitives));\n    }",
        "begin_line": 369,
        "end_line": 399,
        "comment": "",
        "child_ranges": [
            "(line 371,col 9)-(line 372,col 51)",
            "(line 374,col 9)-(line 375,col 109)",
            "(line 378,col 9)-(line 382,col 10)",
            "(line 383,col 9)-(line 383,col 70)",
            "(line 385,col 9)-(line 391,col 9)",
            "(line 394,col 9)-(line 396,col 10)",
            "(line 398,col 9)-(line 398,col 97)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.testWrapperToPrimitive()",
        "snippet": "    public void testWrapperToPrimitive() {\n        // an array with classes to convert\n        final Class[] primitives = {\n                Boolean.TYPE, Byte.TYPE, Character.TYPE, Short.TYPE,\n                Integer.TYPE, Long.TYPE, Float.TYPE, Double.TYPE\n        };\n        for (int i = 0; i < primitives.length; i++) {\n            Class wrapperCls = ClassUtils.primitiveToWrapper(primitives[i]);\n            assertFalse(\"Still primitive\", wrapperCls.isPrimitive());\n            assertEquals(wrapperCls + \" -> \" + primitives[i], primitives[i],\n                    ClassUtils.wrapperToPrimitive(wrapperCls));\n        }\n    }",
        "begin_line": 401,
        "end_line": 413,
        "comment": "",
        "child_ranges": [
            "(line 403,col 9)-(line 406,col 10)",
            "(line 407,col 9)-(line 412,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.testWrapperToPrimitiveNoWrapper()",
        "snippet": "    public void testWrapperToPrimitiveNoWrapper() {\n        assertNull(\"Wrong result for non wrapper class\", ClassUtils.wrapperToPrimitive(String.class));\n    }",
        "begin_line": 415,
        "end_line": 417,
        "comment": "",
        "child_ranges": [
            "(line 416,col 9)-(line 416,col 102)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.testWrapperToPrimitiveNull()",
        "snippet": "    public void testWrapperToPrimitiveNull() {\n        assertNull(\"Wrong result for null class\", ClassUtils.wrapperToPrimitive(null));\n    }",
        "begin_line": 419,
        "end_line": 421,
        "comment": "",
        "child_ranges": [
            "(line 420,col 9)-(line 420,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.testWrappersToPrimitives()",
        "snippet": "    public void testWrappersToPrimitives() {\n        // an array with classes to test\n        final Class[] classes = {\n                Boolean.class, Byte.class, Character.class, Short.class,\n                Integer.class, Long.class, Float.class, Double.class,\n                String.class, ClassUtils.class, null\n        };\n\n        Class[] primitives = ClassUtils.wrappersToPrimitives(classes);\n        // now test the result\n        assertEquals(\"Wrong length of result array\", classes.length, primitives.length);\n        for (int i = 0; i < classes.length; i++) {\n            Class expectedPrimitive = ClassUtils.wrapperToPrimitive(classes[i]);\n            assertEquals(classes[i] + \" -> \" + expectedPrimitive, expectedPrimitive,\n                    primitives[i]);\n        }\n    }",
        "begin_line": 423,
        "end_line": 439,
        "comment": "",
        "child_ranges": [
            "(line 425,col 9)-(line 429,col 10)",
            "(line 431,col 9)-(line 431,col 70)",
            "(line 433,col 9)-(line 433,col 88)",
            "(line 434,col 9)-(line 438,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.testWrappersToPrimitivesNull()",
        "snippet": "    public void testWrappersToPrimitivesNull() {\n        assertNull(\"Wrong result for null input\", ClassUtils.wrappersToPrimitives(null));\n    }",
        "begin_line": 441,
        "end_line": 443,
        "comment": "",
        "child_ranges": [
            "(line 442,col 9)-(line 442,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.testWrappersToPrimitivesEmpty()",
        "snippet": "    public void testWrappersToPrimitivesEmpty() {\n        Class[] empty = new Class[0];\n        assertEquals(\"Wrong result for empty input\", empty, ClassUtils.wrappersToPrimitives(empty));\n    }",
        "begin_line": 445,
        "end_line": 448,
        "comment": "",
        "child_ranges": [
            "(line 446,col 9)-(line 446,col 37)",
            "(line 447,col 9)-(line 447,col 100)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.testGetClassClassNotFound()",
        "snippet": "    public void testGetClassClassNotFound() throws Exception {\n        assertGetClassThrowsClassNotFound( \"bool\" );\n        assertGetClassThrowsClassNotFound( \"bool[]\" );\n        assertGetClassThrowsClassNotFound( \"integer[]\" );\n    }",
        "begin_line": 450,
        "end_line": 454,
        "comment": "",
        "child_ranges": [
            "(line 451,col 9)-(line 451,col 52)",
            "(line 452,col 9)-(line 452,col 54)",
            "(line 453,col 9)-(line 453,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.testGetClassInvalidArguments()",
        "snippet": "    public void testGetClassInvalidArguments() throws Exception {\n        assertGetClassThrowsIllegalArgument( null );\n        assertGetClassThrowsClassNotFound( \"[][][]\" );\n        assertGetClassThrowsClassNotFound( \"[[]\" );\n        assertGetClassThrowsClassNotFound( \"[\" );\n        assertGetClassThrowsClassNotFound( \"java.lang.String][\" );\n        assertGetClassThrowsClassNotFound( \".hello.world\" );\n        assertGetClassThrowsClassNotFound( \"hello..world\" );\n    }",
        "begin_line": 456,
        "end_line": 464,
        "comment": "",
        "child_ranges": [
            "(line 457,col 9)-(line 457,col 52)",
            "(line 458,col 9)-(line 458,col 54)",
            "(line 459,col 9)-(line 459,col 51)",
            "(line 460,col 9)-(line 460,col 49)",
            "(line 461,col 9)-(line 461,col 66)",
            "(line 462,col 9)-(line 462,col 60)",
            "(line 463,col 9)-(line 463,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.testWithInterleavingWhitespace()",
        "snippet": "    public void testWithInterleavingWhitespace() throws ClassNotFoundException {\n        assertEquals( int[].class, ClassUtils.getClass( \" int [ ] \" ) );\n        assertEquals( long[].class, ClassUtils.getClass( \"\\rlong\\t[\\n]\\r\" ) );\n        assertEquals( short[].class, ClassUtils.getClass( \"\\tshort                \\t\\t[]\" ) );\n        assertEquals( byte[].class, ClassUtils.getClass( \"byte[\\t\\t\\n\\r]   \" ) );\n    }",
        "begin_line": 466,
        "end_line": 471,
        "comment": "",
        "child_ranges": [
            "(line 467,col 9)-(line 467,col 72)",
            "(line 468,col 9)-(line 468,col 78)",
            "(line 469,col 9)-(line 469,col 94)",
            "(line 470,col 9)-(line 470,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.testGetClassByNormalNameArrays()",
        "snippet": "    public void testGetClassByNormalNameArrays() throws ClassNotFoundException {\n        assertEquals( int[].class, ClassUtils.getClass( \"int[]\" ) );\n        assertEquals( long[].class, ClassUtils.getClass( \"long[]\" ) );\n        assertEquals( short[].class, ClassUtils.getClass( \"short[]\" ) );\n        assertEquals( byte[].class, ClassUtils.getClass( \"byte[]\" ) );\n        assertEquals( char[].class, ClassUtils.getClass( \"char[]\" ) );\n        assertEquals( float[].class, ClassUtils.getClass( \"float[]\" ) );\n        assertEquals( double[].class, ClassUtils.getClass( \"double[]\" ) );\n        assertEquals( boolean[].class, ClassUtils.getClass( \"boolean[]\" ) );\n        assertEquals( String[].class, ClassUtils.getClass( \"java.lang.String[]\" ) );\n    }",
        "begin_line": 473,
        "end_line": 483,
        "comment": "",
        "child_ranges": [
            "(line 474,col 9)-(line 474,col 68)",
            "(line 475,col 9)-(line 475,col 70)",
            "(line 476,col 9)-(line 476,col 72)",
            "(line 477,col 9)-(line 477,col 70)",
            "(line 478,col 9)-(line 478,col 70)",
            "(line 479,col 9)-(line 479,col 72)",
            "(line 480,col 9)-(line 480,col 74)",
            "(line 481,col 9)-(line 481,col 76)",
            "(line 482,col 9)-(line 482,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.testGetClassByNormalNameArrays2D()",
        "snippet": "    public void testGetClassByNormalNameArrays2D() throws ClassNotFoundException {\n        assertEquals( int[][].class, ClassUtils.getClass( \"int[][]\" ) );\n        assertEquals( long[][].class, ClassUtils.getClass( \"long[][]\" ) );\n        assertEquals( short[][].class, ClassUtils.getClass( \"short[][]\" ) );\n        assertEquals( byte[][].class, ClassUtils.getClass( \"byte[][]\" ) );\n        assertEquals( char[][].class, ClassUtils.getClass( \"char[][]\" ) );\n        assertEquals( float[][].class, ClassUtils.getClass( \"float[][]\" ) );\n        assertEquals( double[][].class, ClassUtils.getClass( \"double[][]\" ) );\n        assertEquals( boolean[][].class, ClassUtils.getClass( \"boolean[][]\" ) );\n        assertEquals( String[][].class, ClassUtils.getClass( \"java.lang.String[][]\" ) );\n    }",
        "begin_line": 485,
        "end_line": 495,
        "comment": "",
        "child_ranges": [
            "(line 486,col 9)-(line 486,col 72)",
            "(line 487,col 9)-(line 487,col 74)",
            "(line 488,col 9)-(line 488,col 76)",
            "(line 489,col 9)-(line 489,col 74)",
            "(line 490,col 9)-(line 490,col 74)",
            "(line 491,col 9)-(line 491,col 76)",
            "(line 492,col 9)-(line 492,col 78)",
            "(line 493,col 9)-(line 493,col 80)",
            "(line 494,col 9)-(line 494,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.testGetClassWithArrayClasses2D()",
        "snippet": "    public void testGetClassWithArrayClasses2D() throws Exception {\n        assertGetClassReturnsClass( String[][].class );\n        assertGetClassReturnsClass( int[][].class );\n        assertGetClassReturnsClass( long[][].class );\n        assertGetClassReturnsClass( short[][].class );\n        assertGetClassReturnsClass( byte[][].class );\n        assertGetClassReturnsClass( char[][].class );\n        assertGetClassReturnsClass( float[][].class );\n        assertGetClassReturnsClass( double[][].class );\n        assertGetClassReturnsClass( boolean[][].class );\n    }",
        "begin_line": 497,
        "end_line": 507,
        "comment": "",
        "child_ranges": [
            "(line 498,col 9)-(line 498,col 55)",
            "(line 499,col 9)-(line 499,col 52)",
            "(line 500,col 9)-(line 500,col 53)",
            "(line 501,col 9)-(line 501,col 54)",
            "(line 502,col 9)-(line 502,col 53)",
            "(line 503,col 9)-(line 503,col 53)",
            "(line 504,col 9)-(line 504,col 54)",
            "(line 505,col 9)-(line 505,col 55)",
            "(line 506,col 9)-(line 506,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.testGetClassWithArrayClasses()",
        "snippet": "    public void testGetClassWithArrayClasses() throws Exception {\n        assertGetClassReturnsClass( String[].class );\n        assertGetClassReturnsClass( int[].class );\n        assertGetClassReturnsClass( long[].class );\n        assertGetClassReturnsClass( short[].class );\n        assertGetClassReturnsClass( byte[].class );\n        assertGetClassReturnsClass( char[].class );\n        assertGetClassReturnsClass( float[].class );\n        assertGetClassReturnsClass( double[].class );\n        assertGetClassReturnsClass( boolean[].class );\n    }",
        "begin_line": 509,
        "end_line": 519,
        "comment": "",
        "child_ranges": [
            "(line 510,col 9)-(line 510,col 53)",
            "(line 511,col 9)-(line 511,col 50)",
            "(line 512,col 9)-(line 512,col 51)",
            "(line 513,col 9)-(line 513,col 52)",
            "(line 514,col 9)-(line 514,col 51)",
            "(line 515,col 9)-(line 515,col 51)",
            "(line 516,col 9)-(line 516,col 52)",
            "(line 517,col 9)-(line 517,col 53)",
            "(line 518,col 9)-(line 518,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.testGetClassRawPrimitives()",
        "snippet": "    public void testGetClassRawPrimitives() throws ClassNotFoundException {\n        assertEquals( int.class, ClassUtils.getClass( \"int\" ) );\n        assertEquals( long.class, ClassUtils.getClass( \"long\" ) );\n        assertEquals( short.class, ClassUtils.getClass( \"short\" ) );\n        assertEquals( byte.class, ClassUtils.getClass( \"byte\" ) );\n        assertEquals( char.class, ClassUtils.getClass( \"char\" ) );\n        assertEquals( float.class, ClassUtils.getClass( \"float\" ) );\n        assertEquals( double.class, ClassUtils.getClass( \"double\" ) );\n        assertEquals( boolean.class, ClassUtils.getClass( \"boolean\" ) );\n    }",
        "begin_line": 521,
        "end_line": 530,
        "comment": "",
        "child_ranges": [
            "(line 522,col 9)-(line 522,col 64)",
            "(line 523,col 9)-(line 523,col 66)",
            "(line 524,col 9)-(line 524,col 68)",
            "(line 525,col 9)-(line 525,col 66)",
            "(line 526,col 9)-(line 526,col 66)",
            "(line 527,col 9)-(line 527,col 68)",
            "(line 528,col 9)-(line 528,col 70)",
            "(line 529,col 9)-(line 529,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.assertGetClassReturnsClass(java.lang.Class)",
        "snippet": "    private void assertGetClassReturnsClass( Class c ) throws Exception {\n        assertEquals( c, ClassUtils.getClass( c.getName() ) );\n    }",
        "begin_line": 532,
        "end_line": 534,
        "comment": "",
        "child_ranges": [
            "(line 533,col 9)-(line 533,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.assertGetClassThrowsException(java.lang.String, java.lang.Class)",
        "snippet": "    private void assertGetClassThrowsException( String className, Class exceptionType ) throws Exception {\n        try {\n            ClassUtils.getClass( className );\n            fail( \"ClassUtils.getClass() should fail with an exception of type \" + exceptionType.getName() + \" when given class name \\\"\" + className + \"\\\".\" );\n        }\n        catch( Exception e ) {\n            assertTrue( exceptionType.isAssignableFrom( e.getClass() ) );\n        }\n    }",
        "begin_line": 536,
        "end_line": 544,
        "comment": "",
        "child_ranges": [
            "(line 537,col 9)-(line 543,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.assertGetClassThrowsIllegalArgument(java.lang.String)",
        "snippet": "    private void assertGetClassThrowsIllegalArgument( String className ) throws Exception {\n        assertGetClassThrowsException( className, IllegalArgumentException.class );\n    }",
        "begin_line": 546,
        "end_line": 548,
        "comment": "",
        "child_ranges": [
            "(line 547,col 9)-(line 547,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.assertGetClassThrowsClassNotFound(java.lang.String)",
        "snippet": "    private void assertGetClassThrowsClassNotFound( String className ) throws Exception {\n        assertGetClassThrowsException( className, ClassNotFoundException.class );\n    }",
        "begin_line": 550,
        "end_line": 552,
        "comment": "",
        "child_ranges": [
            "(line 551,col 9)-(line 551,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.testShowJavaBug()",
        "snippet": "    public void testShowJavaBug() throws Exception {\n        // Tests with Collections$UnmodifiableSet\n        Set set = Collections.unmodifiableSet(new HashSet());\n        Method isEmptyMethod = set.getClass().getMethod(\"isEmpty\",  new Class[0]);\n        try {\n            isEmptyMethod.invoke(set, new Object[0]);\n            fail(\"Failed to throw IllegalAccessException as expected\");\n        } catch(IllegalAccessException iae) {\n            // expected\n        }\n    }",
        "begin_line": 556,
        "end_line": 566,
        "comment": " We may have to delete this if a JDK fixes the bug.",
        "child_ranges": [
            "(line 558,col 9)-(line 558,col 61)",
            "(line 559,col 9)-(line 559,col 82)",
            "(line 560,col 9)-(line 565,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.testGetPublicMethod()",
        "snippet": "    public void testGetPublicMethod() throws Exception {\n        // Tests with Collections$UnmodifiableSet\n        Set set = Collections.unmodifiableSet(new HashSet());\n        Method isEmptyMethod = ClassUtils.getPublicMethod(set.getClass(), \"isEmpty\",  new Class[0]);\n            assertTrue(Modifier.isPublic(isEmptyMethod.getDeclaringClass().getModifiers()));\n \n        try {\n            isEmptyMethod.invoke(set, new Object[0]);\n        } catch(java.lang.IllegalAccessException iae) {\n            fail(\"Should not have thrown IllegalAccessException\");\n        }\n               \n        // Tests with a public Class\n        Method toStringMethod = ClassUtils.getPublicMethod(Object.class, \"toString\",  new Class[0]);\n            assertEquals(Object.class.getMethod(\"toString\", new Class[0]), toStringMethod);\n    }",
        "begin_line": 568,
        "end_line": 583,
        "comment": "",
        "child_ranges": [
            "(line 570,col 9)-(line 570,col 61)",
            "(line 571,col 9)-(line 571,col 100)",
            "(line 572,col 13)-(line 572,col 92)",
            "(line 574,col 9)-(line 578,col 9)",
            "(line 581,col 9)-(line 581,col 100)",
            "(line 582,col 13)-(line 582,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.testToClass_object()",
        "snippet": "    public void testToClass_object() {\n        assertEquals(null, ClassUtils.toClass(null));\n\n        assertSame(\n            ArrayUtils.EMPTY_CLASS_ARRAY,\n            ClassUtils.toClass(new Class[0]));\n\n        Object[] array = new Object[3];\n        array[0] = new String(\"Test\");\n        array[1] = new Integer(1);\n        array[2] = new Double(99);\n\n        Class[] results = ClassUtils.toClass(array);\n        assertEquals(\"String\", ClassUtils.getShortClassName(results[0]));\n        assertEquals(\"Integer\", ClassUtils.getShortClassName(results[1]));\n        assertEquals(\"Double\", ClassUtils.getShortClassName(results[2]));\n    }",
        "begin_line": 585,
        "end_line": 601,
        "comment": "",
        "child_ranges": [
            "(line 586,col 9)-(line 586,col 53)",
            "(line 588,col 9)-(line 590,col 46)",
            "(line 592,col 9)-(line 592,col 39)",
            "(line 593,col 9)-(line 593,col 38)",
            "(line 594,col 9)-(line 594,col 34)",
            "(line 595,col 9)-(line 595,col 34)",
            "(line 597,col 9)-(line 597,col 52)",
            "(line 598,col 9)-(line 598,col 73)",
            "(line 599,col 9)-(line 599,col 74)",
            "(line 600,col 9)-(line 600,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.test_getShortCanonicalName_Object()",
        "snippet": "    public void test_getShortCanonicalName_Object() {\n        assertEquals(\"<null>\", ClassUtils.getShortCanonicalName(null, \"<null>\"));\n        assertEquals(\"ClassUtils\", ClassUtils.getShortCanonicalName(new ClassUtils(), \"<null>\"));\n        assertEquals(\"ClassUtils[]\", ClassUtils.getShortCanonicalName(new ClassUtils[0], \"<null>\"));\n        assertEquals(\"ClassUtils[][]\", ClassUtils.getShortCanonicalName(new ClassUtils[0][0], \"<null>\"));\n        assertEquals(\"int[]\", ClassUtils.getShortCanonicalName(new int[0], \"<null>\"));\n        assertEquals(\"int[][]\", ClassUtils.getShortCanonicalName(new int[0][0], \"<null>\"));\n    }",
        "begin_line": 603,
        "end_line": 610,
        "comment": "",
        "child_ranges": [
            "(line 604,col 9)-(line 604,col 81)",
            "(line 605,col 9)-(line 605,col 97)",
            "(line 606,col 9)-(line 606,col 100)",
            "(line 607,col 9)-(line 607,col 105)",
            "(line 608,col 9)-(line 608,col 86)",
            "(line 609,col 9)-(line 609,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.test_getShortCanonicalName_Class()",
        "snippet": "    public void test_getShortCanonicalName_Class() {\n        assertEquals(\"ClassUtils\", ClassUtils.getShortCanonicalName(ClassUtils.class));\n        assertEquals(\"ClassUtils[]\", ClassUtils.getShortCanonicalName(ClassUtils[].class));\n        assertEquals(\"ClassUtils[][]\", ClassUtils.getShortCanonicalName(ClassUtils[][].class));\n        assertEquals(\"int[]\", ClassUtils.getShortCanonicalName(int[].class));\n        assertEquals(\"int[][]\", ClassUtils.getShortCanonicalName(int[][].class));\n    }",
        "begin_line": 612,
        "end_line": 618,
        "comment": "",
        "child_ranges": [
            "(line 613,col 9)-(line 613,col 87)",
            "(line 614,col 9)-(line 614,col 91)",
            "(line 615,col 9)-(line 615,col 95)",
            "(line 616,col 9)-(line 616,col 77)",
            "(line 617,col 9)-(line 617,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.test_getShortCanonicalName_String()",
        "snippet": "    public void test_getShortCanonicalName_String() {\n        assertEquals(\"ClassUtils\", ClassUtils.getShortCanonicalName(\"org.apache.commons.lang.ClassUtils\"));\n        assertEquals(\"ClassUtils[]\", ClassUtils.getShortCanonicalName(\"[Lorg.apache.commons.lang.ClassUtils;\"));\n        assertEquals(\"ClassUtils[][]\", ClassUtils.getShortCanonicalName(\"[[Lorg.apache.commons.lang.ClassUtils;\"));\n        assertEquals(\"ClassUtils[]\", ClassUtils.getShortCanonicalName(\"org.apache.commons.lang.ClassUtils[]\"));\n        assertEquals(\"ClassUtils[][]\", ClassUtils.getShortCanonicalName(\"org.apache.commons.lang.ClassUtils[][]\"));\n        assertEquals(\"int[]\", ClassUtils.getShortCanonicalName(\"[I\"));\n        assertEquals(\"int[][]\", ClassUtils.getShortCanonicalName(\"[[I\"));\n        assertEquals(\"int[]\", ClassUtils.getShortCanonicalName(\"int[]\"));\n        assertEquals(\"int[][]\", ClassUtils.getShortCanonicalName(\"int[][]\"));\n    }",
        "begin_line": 620,
        "end_line": 630,
        "comment": "",
        "child_ranges": [
            "(line 621,col 9)-(line 621,col 107)",
            "(line 622,col 9)-(line 622,col 112)",
            "(line 623,col 9)-(line 623,col 115)",
            "(line 624,col 9)-(line 624,col 111)",
            "(line 625,col 9)-(line 625,col 115)",
            "(line 626,col 9)-(line 626,col 70)",
            "(line 627,col 9)-(line 627,col 73)",
            "(line 628,col 9)-(line 628,col 73)",
            "(line 629,col 9)-(line 629,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.test_getPackageCanonicalName_Object()",
        "snippet": "    public void test_getPackageCanonicalName_Object() {\n        assertEquals(\"<null>\", ClassUtils.getPackageCanonicalName(null, \"<null>\"));\n        assertEquals(\"org.apache.commons.lang\", ClassUtils.getPackageCanonicalName(new ClassUtils(), \"<null>\"));\n        assertEquals(\"org.apache.commons.lang\", ClassUtils.getPackageCanonicalName(new ClassUtils[0], \"<null>\"));\n        assertEquals(\"org.apache.commons.lang\", ClassUtils.getPackageCanonicalName(new ClassUtils[0][0], \"<null>\"));\n        assertEquals(\"\", ClassUtils.getPackageCanonicalName(new int[0], \"<null>\"));\n        assertEquals(\"\", ClassUtils.getPackageCanonicalName(new int[0][0], \"<null>\"));\n    }",
        "begin_line": 632,
        "end_line": 639,
        "comment": "",
        "child_ranges": [
            "(line 633,col 9)-(line 633,col 83)",
            "(line 634,col 9)-(line 634,col 112)",
            "(line 635,col 9)-(line 635,col 113)",
            "(line 636,col 9)-(line 636,col 116)",
            "(line 637,col 9)-(line 637,col 83)",
            "(line 638,col 9)-(line 638,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.test_getPackageCanonicalName_Class()",
        "snippet": "    public void test_getPackageCanonicalName_Class() {\n        assertEquals(\"org.apache.commons.lang\", ClassUtils.getPackageCanonicalName(ClassUtils.class));\n        assertEquals(\"org.apache.commons.lang\", ClassUtils.getPackageCanonicalName(ClassUtils[].class));\n        assertEquals(\"org.apache.commons.lang\", ClassUtils.getPackageCanonicalName(ClassUtils[][].class));\n        assertEquals(\"\", ClassUtils.getPackageCanonicalName(int[].class));\n        assertEquals(\"\", ClassUtils.getPackageCanonicalName(int[][].class));\n    }",
        "begin_line": 641,
        "end_line": 647,
        "comment": "",
        "child_ranges": [
            "(line 642,col 9)-(line 642,col 102)",
            "(line 643,col 9)-(line 643,col 104)",
            "(line 644,col 9)-(line 644,col 106)",
            "(line 645,col 9)-(line 645,col 74)",
            "(line 646,col 9)-(line 646,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassUtilsTest.test_getPackageCanonicalName_String()",
        "snippet": "    public void test_getPackageCanonicalName_String() {\n        assertEquals(\"org.apache.commons.lang\", \n            ClassUtils.getPackageCanonicalName(\"org.apache.commons.lang.ClassUtils\"));\n        assertEquals(\"org.apache.commons.lang\", \n            ClassUtils.getPackageCanonicalName(\"[Lorg.apache.commons.lang.ClassUtils;\"));\n        assertEquals(\"org.apache.commons.lang\", \n            ClassUtils.getPackageCanonicalName(\"[[Lorg.apache.commons.lang.ClassUtils;\"));\n        assertEquals(\"org.apache.commons.lang\", \n            ClassUtils.getPackageCanonicalName(\"org.apache.commons.lang.ClassUtils[]\"));\n        assertEquals(\"org.apache.commons.lang\", \n            ClassUtils.getPackageCanonicalName(\"org.apache.commons.lang.ClassUtils[][]\"));\n        assertEquals(\"\", ClassUtils.getPackageCanonicalName(\"[I\"));\n        assertEquals(\"\", ClassUtils.getPackageCanonicalName(\"[[I\"));\n        assertEquals(\"\", ClassUtils.getPackageCanonicalName(\"int[]\"));\n        assertEquals(\"\", ClassUtils.getPackageCanonicalName(\"int[][]\"));\n    }",
        "begin_line": 649,
        "end_line": 664,
        "comment": "",
        "child_ranges": [
            "(line 650,col 9)-(line 651,col 86)",
            "(line 652,col 9)-(line 653,col 89)",
            "(line 654,col 9)-(line 655,col 90)",
            "(line 656,col 9)-(line 657,col 88)",
            "(line 658,col 9)-(line 659,col 90)",
            "(line 660,col 9)-(line 660,col 67)",
            "(line 661,col 9)-(line 661,col 68)",
            "(line 662,col 9)-(line 662,col 70)",
            "(line 663,col 9)-(line 663,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesPerformanceTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesPerformanceTest.java",
        "signature": "org.apache.commons.lang.EntitiesPerformanceTest.EntitiesPerformanceTest(java.lang.String)",
        "snippet": "    public EntitiesPerformanceTest(String name) {\n        super(name);\n    }",
        "begin_line": 37,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesPerformanceTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesPerformanceTest.java",
        "signature": "org.apache.commons.lang.EntitiesPerformanceTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesPerformanceTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesPerformanceTest.java",
        "signature": "org.apache.commons.lang.EntitiesPerformanceTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(EntitiesPerformanceTest.class);\n        return suite;\n    }",
        "begin_line": 45,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 71)",
            "(line 47,col 9)-(line 47,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesPerformanceTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesPerformanceTest.java",
        "signature": "org.apache.commons.lang.EntitiesPerformanceTest.setUp()",
        "snippet": "    public void setUp() {\n        if (stringWithUnicode == null) {\n            StringBuffer buf = new StringBuffer(STRING_LENGTH);\n            for (int i = 0; i < STRING_LENGTH / 5; ++i) {\n                buf.append(\"xxxx\");\n                char ch = isovalue(i);\n                buf.append(ch);\n            }\n            stringWithUnicode = buf.toString();\n            stringWithEntities = Entities.HTML40.unescape(stringWithUnicode);\n        }\n    }",
        "begin_line": 50,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 60,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesPerformanceTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesPerformanceTest.java",
        "signature": "org.apache.commons.lang.EntitiesPerformanceTest.html40value(int)",
        "snippet": "    private char html40value(int i) {\n        String entityValue = Entities.HTML40_ARRAY[i % Entities.HTML40_ARRAY.length][1];\n        char ch = (char) Integer.parseInt(entityValue);\n        return ch;\n    }",
        "begin_line": 63,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 88)",
            "(line 65,col 9)-(line 65,col 55)",
            "(line 66,col 9)-(line 66,col 18)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesPerformanceTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesPerformanceTest.java",
        "signature": "org.apache.commons.lang.EntitiesPerformanceTest.isovalue(int)",
        "snippet": "    private char isovalue(int i) {\n        String entityValue = Entities.ISO8859_1_ARRAY[i % Entities.ISO8859_1_ARRAY.length][1];\n        char ch = (char) Integer.parseInt(entityValue);\n        return ch;\n    }",
        "begin_line": 69,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 94)",
            "(line 71,col 9)-(line 71,col 55)",
            "(line 72,col 9)-(line 72,col 18)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesPerformanceTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesPerformanceTest.java",
        "signature": "org.apache.commons.lang.EntitiesPerformanceTest.testBuildHash()",
        "snippet": "    public void testBuildHash() throws Exception {\n        for (int i = 0; i < COUNT; ++i) {\n            hashEntities = build(new Entities.HashEntityMap());\n        }\n    }",
        "begin_line": 75,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 78,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesPerformanceTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesPerformanceTest.java",
        "signature": "org.apache.commons.lang.EntitiesPerformanceTest.testBuildTree()",
        "snippet": "    public void testBuildTree() throws Exception {\n        for (int i = 0; i < COUNT; ++i) {\n            treeEntities = build(new Entities.TreeEntityMap());\n        }\n    }",
        "begin_line": 82,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 83,col 9)-(line 85,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesPerformanceTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesPerformanceTest.java",
        "signature": "org.apache.commons.lang.EntitiesPerformanceTest.testBuildArray()",
        "snippet": "    public void testBuildArray() throws Exception {\n        for (int i = 0; i < COUNT; ++i) {\n            arrayEntities = build(new Entities.ArrayEntityMap());\n        }\n    }",
        "begin_line": 88,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 89,col 9)-(line 91,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesPerformanceTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesPerformanceTest.java",
        "signature": "org.apache.commons.lang.EntitiesPerformanceTest.testBuildBinary()",
        "snippet": "    public void testBuildBinary() throws Exception {\n        for (int i = 0; i < COUNT; ++i) {\n            binaryEntities = build(new Entities.BinaryEntityMap());\n        }\n    }",
        "begin_line": 94,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 97,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesPerformanceTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesPerformanceTest.java",
        "signature": "org.apache.commons.lang.EntitiesPerformanceTest.testBuildPrimitive()",
        "snippet": "    public void testBuildPrimitive() throws Exception {\n        for (int i = 0; i < COUNT; ++i) {\n            buildPrimitive();\n        }\n    }",
        "begin_line": 100,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 103,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesPerformanceTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesPerformanceTest.java",
        "signature": "org.apache.commons.lang.EntitiesPerformanceTest.buildPrimitive()",
        "snippet": "    private void buildPrimitive()\n    {\n        primitiveEntities = build(new Entities.PrimitiveEntityMap());\n    }",
        "begin_line": 106,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesPerformanceTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesPerformanceTest.java",
        "signature": "org.apache.commons.lang.EntitiesPerformanceTest.testBuildLookup()",
        "snippet": "    public void testBuildLookup() throws Exception {\n        for (int i = 0; i < COUNT; ++i) {\n            buildLookup();\n        }\n    }",
        "begin_line": 111,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 112,col 9)-(line 114,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesPerformanceTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesPerformanceTest.java",
        "signature": "org.apache.commons.lang.EntitiesPerformanceTest.buildLookup()",
        "snippet": "    private void buildLookup()\n    {\n        lookupEntities = build(new Entities.LookupEntityMap());\n    }",
        "begin_line": 117,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesPerformanceTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesPerformanceTest.java",
        "signature": "org.apache.commons.lang.EntitiesPerformanceTest.build(org.apache.commons.lang.Entities.EntityMap)",
        "snippet": "    private Entities build(Entities.EntityMap intMap) {\n        Entities entities;\n        entities = new Entities();\n        entities.map = intMap;\n        Entities.fillWithHtml40Entities(entities);\n        return entities;\n    }",
        "begin_line": 122,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 123,col 9)-(line 123,col 26)",
            "(line 124,col 9)-(line 124,col 34)",
            "(line 125,col 9)-(line 125,col 30)",
            "(line 126,col 9)-(line 126,col 50)",
            "(line 127,col 9)-(line 127,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesPerformanceTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesPerformanceTest.java",
        "signature": "org.apache.commons.lang.EntitiesPerformanceTest.testLookupHash()",
        "snippet": "    public void testLookupHash() throws Exception {\n        lookup(hashEntities);\n    }",
        "begin_line": 130,
        "end_line": 132,
        "comment": "",
        "child_ranges": [
            "(line 131,col 9)-(line 131,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesPerformanceTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesPerformanceTest.java",
        "signature": "org.apache.commons.lang.EntitiesPerformanceTest.testLookupTree()",
        "snippet": "    public void testLookupTree() throws Exception {\n        lookup(treeEntities);\n    }",
        "begin_line": 134,
        "end_line": 136,
        "comment": "",
        "child_ranges": [
            "(line 135,col 9)-(line 135,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesPerformanceTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesPerformanceTest.java",
        "signature": "org.apache.commons.lang.EntitiesPerformanceTest.testLookupArray()",
        "snippet": "    public void testLookupArray() throws Exception {\n        lookup(arrayEntities);\n    }",
        "begin_line": 138,
        "end_line": 140,
        "comment": "",
        "child_ranges": [
            "(line 139,col 9)-(line 139,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesPerformanceTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesPerformanceTest.java",
        "signature": "org.apache.commons.lang.EntitiesPerformanceTest.testLookupBinary()",
        "snippet": "    public void testLookupBinary() {}",
        "begin_line": 142,
        "end_line": 142,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesPerformanceTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesPerformanceTest.java",
        "signature": "org.apache.commons.lang.EntitiesPerformanceTest.testLookupPrimitive()",
        "snippet": "    public void testLookupPrimitive() throws Exception {\n        if (primitiveEntities == null) buildPrimitive();\n        lookup(primitiveEntities);\n    }",
        "begin_line": 148,
        "end_line": 151,
        "comment": "",
        "child_ranges": [
            "(line 149,col 9)-(line 149,col 56)",
            "(line 150,col 9)-(line 150,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesPerformanceTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesPerformanceTest.java",
        "signature": "org.apache.commons.lang.EntitiesPerformanceTest.testLookupLookup()",
        "snippet": "    public void testLookupLookup() throws Exception {\n        if (lookupEntities == null) buildLookup();\n        lookup(lookupEntities);\n    }",
        "begin_line": 153,
        "end_line": 156,
        "comment": "",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 50)",
            "(line 155,col 9)-(line 155,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesPerformanceTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesPerformanceTest.java",
        "signature": "org.apache.commons.lang.EntitiesPerformanceTest.testEscapeHash()",
        "snippet": "    public void testEscapeHash() {}",
        "begin_line": 158,
        "end_line": 158,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesPerformanceTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesPerformanceTest.java",
        "signature": "org.apache.commons.lang.EntitiesPerformanceTest.testEscapeTree()",
        "snippet": "    public void testEscapeTree() {}",
        "begin_line": 164,
        "end_line": 164,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesPerformanceTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesPerformanceTest.java",
        "signature": "org.apache.commons.lang.EntitiesPerformanceTest.testEscapeArray()",
        "snippet": "    public void testEscapeArray() throws Exception {\n        escapeIt(arrayEntities);\n    }",
        "begin_line": 170,
        "end_line": 172,
        "comment": "",
        "child_ranges": [
            "(line 171,col 9)-(line 171,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesPerformanceTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesPerformanceTest.java",
        "signature": "org.apache.commons.lang.EntitiesPerformanceTest.testEscapeBinary()",
        "snippet": "    public void testEscapeBinary() {}",
        "begin_line": 174,
        "end_line": 174,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesPerformanceTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesPerformanceTest.java",
        "signature": "org.apache.commons.lang.EntitiesPerformanceTest.testEscapePrimitive()",
        "snippet": "    public void testEscapePrimitive() {}",
        "begin_line": 180,
        "end_line": 180,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesPerformanceTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesPerformanceTest.java",
        "signature": "org.apache.commons.lang.EntitiesPerformanceTest.testEscapeLookup()",
        "snippet": "    public void testEscapeLookup() {}",
        "begin_line": 186,
        "end_line": 186,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesPerformanceTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesPerformanceTest.java",
        "signature": "org.apache.commons.lang.EntitiesPerformanceTest.testUnescapeHash()",
        "snippet": "    public void testUnescapeHash() {}",
        "begin_line": 192,
        "end_line": 192,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesPerformanceTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesPerformanceTest.java",
        "signature": "org.apache.commons.lang.EntitiesPerformanceTest.testUnescapeTree()",
        "snippet": "    public void testUnescapeTree() {}",
        "begin_line": 198,
        "end_line": 198,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesPerformanceTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesPerformanceTest.java",
        "signature": "org.apache.commons.lang.EntitiesPerformanceTest.testUnescapeArray()",
        "snippet": "    public void testUnescapeArray() throws Exception {\n        unescapeIt(arrayEntities);\n    }",
        "begin_line": 204,
        "end_line": 206,
        "comment": "",
        "child_ranges": [
            "(line 205,col 9)-(line 205,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesPerformanceTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesPerformanceTest.java",
        "signature": "org.apache.commons.lang.EntitiesPerformanceTest.testUnescapeBinary()",
        "snippet": "    public void testUnescapeBinary() {}",
        "begin_line": 208,
        "end_line": 208,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesPerformanceTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesPerformanceTest.java",
        "signature": "org.apache.commons.lang.EntitiesPerformanceTest.lookup(org.apache.commons.lang.Entities)",
        "snippet": "    private void lookup(Entities entities) {\n        for (int i = 0; i < COUNT * 1000; ++i) {\n            entities.entityName(isovalue(i));\n        }\n    }",
        "begin_line": 214,
        "end_line": 218,
        "comment": "",
        "child_ranges": [
            "(line 215,col 9)-(line 217,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesPerformanceTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesPerformanceTest.java",
        "signature": "org.apache.commons.lang.EntitiesPerformanceTest.escapeIt(org.apache.commons.lang.Entities)",
        "snippet": "    private void escapeIt(Entities entities) {\n        for (int i = 0; i < COUNT; ++i) {\n            String escaped = entities.escape(stringWithUnicode);\n            assertEquals(\"xxxx&nbsp;\", escaped.substring(0, 10));\n        }\n    }",
        "begin_line": 220,
        "end_line": 225,
        "comment": "",
        "child_ranges": [
            "(line 221,col 9)-(line 224,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesPerformanceTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesPerformanceTest.java",
        "signature": "org.apache.commons.lang.EntitiesPerformanceTest.unescapeIt(org.apache.commons.lang.Entities)",
        "snippet": "    private void unescapeIt(Entities entities) {\n        for (int i = 0; i < COUNT; ++i) {\n            String unescaped = entities.unescape(stringWithEntities);\n            assertEquals(\"xxxx\\u00A0\", unescaped.substring(0, 5));\n        }\n    }",
        "begin_line": 227,
        "end_line": 232,
        "comment": "",
        "child_ranges": [
            "(line 228,col 9)-(line 231,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsAddTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 34,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsAddTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(ArrayUtilsAddTest.class);\n        suite.setName(\"ArrayUtils add Tests\");\n        return suite;\n    }",
        "begin_line": 38,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 65)",
            "(line 40,col 9)-(line 40,col 46)",
            "(line 41,col 9)-(line 41,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsAddTest.testAddObjectArrayBoolean()",
        "snippet": "    public void testAddObjectArrayBoolean() {\n        boolean[] newArray;\n        newArray = ArrayUtils.add((boolean[])null, false);\n        assertTrue(Arrays.equals(new boolean[]{false}, newArray));\n        assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add((boolean[])null, true);\n        assertTrue(Arrays.equals(new boolean[]{true}, newArray));\n        assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());\n        boolean[] array1 = new boolean[]{true, false, true};\n        newArray = ArrayUtils.add(array1, false);\n        assertTrue(Arrays.equals(new boolean[]{true, false, true, false}, newArray));\n        assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());\n    }",
        "begin_line": 44,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 27)",
            "(line 46,col 9)-(line 46,col 58)",
            "(line 47,col 9)-(line 47,col 66)",
            "(line 48,col 9)-(line 48,col 75)",
            "(line 49,col 9)-(line 49,col 57)",
            "(line 50,col 9)-(line 50,col 65)",
            "(line 51,col 9)-(line 51,col 75)",
            "(line 52,col 9)-(line 52,col 60)",
            "(line 53,col 9)-(line 53,col 49)",
            "(line 54,col 9)-(line 54,col 85)",
            "(line 55,col 9)-(line 55,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsAddTest.testAddObjectArrayByte()",
        "snippet": "    public void testAddObjectArrayByte() {\n        byte[] newArray;\n        newArray = ArrayUtils.add((byte[])null, (byte)0);\n        assertTrue(Arrays.equals(new byte[]{0}, newArray));\n        assertEquals(Byte.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add((byte[])null, (byte)1);\n        assertTrue(Arrays.equals(new byte[]{1}, newArray));\n        assertEquals(Byte.TYPE, newArray.getClass().getComponentType());\n        byte[] array1 = new byte[]{1, 2, 3};\n        newArray = ArrayUtils.add(array1, (byte)0);\n        assertTrue(Arrays.equals(new byte[]{1, 2, 3, 0}, newArray));\n        assertEquals(Byte.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add(array1, (byte)4);\n        assertTrue(Arrays.equals(new byte[]{1, 2, 3, 4}, newArray));\n        assertEquals(Byte.TYPE, newArray.getClass().getComponentType());        \n    }",
        "begin_line": 58,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 24)",
            "(line 60,col 9)-(line 60,col 57)",
            "(line 61,col 9)-(line 61,col 59)",
            "(line 62,col 9)-(line 62,col 72)",
            "(line 63,col 9)-(line 63,col 57)",
            "(line 64,col 9)-(line 64,col 59)",
            "(line 65,col 9)-(line 65,col 72)",
            "(line 66,col 9)-(line 66,col 44)",
            "(line 67,col 9)-(line 67,col 51)",
            "(line 68,col 9)-(line 68,col 68)",
            "(line 69,col 9)-(line 69,col 72)",
            "(line 70,col 9)-(line 70,col 51)",
            "(line 71,col 9)-(line 71,col 68)",
            "(line 72,col 9)-(line 72,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsAddTest.testAddObjectArrayChar()",
        "snippet": "    public void testAddObjectArrayChar() {\n        char[] newArray;\n        newArray = ArrayUtils.add((char[])null, (char)0);\n        assertTrue(Arrays.equals(new char[]{0}, newArray));\n        assertEquals(Character.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add((char[])null, (char)1);\n        assertTrue(Arrays.equals(new char[]{1}, newArray));\n        assertEquals(Character.TYPE, newArray.getClass().getComponentType());\n        char[] array1 = new char[]{1, 2, 3};\n        newArray = ArrayUtils.add(array1, (char)0);\n        assertTrue(Arrays.equals(new char[]{1, 2, 3, 0}, newArray));\n        assertEquals(Character.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add(array1, (char)4);\n        assertTrue(Arrays.equals(new char[]{1, 2, 3, 4}, newArray));\n        assertEquals(Character.TYPE, newArray.getClass().getComponentType());        \n    }",
        "begin_line": 75,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 24)",
            "(line 77,col 9)-(line 77,col 57)",
            "(line 78,col 9)-(line 78,col 59)",
            "(line 79,col 9)-(line 79,col 77)",
            "(line 80,col 9)-(line 80,col 57)",
            "(line 81,col 9)-(line 81,col 59)",
            "(line 82,col 9)-(line 82,col 77)",
            "(line 83,col 9)-(line 83,col 44)",
            "(line 84,col 9)-(line 84,col 51)",
            "(line 85,col 9)-(line 85,col 68)",
            "(line 86,col 9)-(line 86,col 77)",
            "(line 87,col 9)-(line 87,col 51)",
            "(line 88,col 9)-(line 88,col 68)",
            "(line 89,col 9)-(line 89,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsAddTest.testAddObjectArrayDouble()",
        "snippet": "    public void testAddObjectArrayDouble() {\n        double[] newArray;\n        newArray = ArrayUtils.add((double[])null, 0);\n        assertTrue(Arrays.equals(new double[]{0}, newArray));\n        assertEquals(Double.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add((double[])null, 1);\n        assertTrue(Arrays.equals(new double[]{1}, newArray));\n        assertEquals(Double.TYPE, newArray.getClass().getComponentType());\n        double[] array1 = new double[]{1, 2, 3};\n        newArray = ArrayUtils.add(array1, 0);\n        assertTrue(Arrays.equals(new double[]{1, 2, 3, 0}, newArray));\n        assertEquals(Double.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add(array1, 4);\n        assertTrue(Arrays.equals(new double[]{1, 2, 3, 4}, newArray));\n        assertEquals(Double.TYPE, newArray.getClass().getComponentType());        \n    }",
        "begin_line": 92,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 26)",
            "(line 94,col 9)-(line 94,col 53)",
            "(line 95,col 9)-(line 95,col 61)",
            "(line 96,col 9)-(line 96,col 74)",
            "(line 97,col 9)-(line 97,col 53)",
            "(line 98,col 9)-(line 98,col 61)",
            "(line 99,col 9)-(line 99,col 74)",
            "(line 100,col 9)-(line 100,col 48)",
            "(line 101,col 9)-(line 101,col 45)",
            "(line 102,col 9)-(line 102,col 70)",
            "(line 103,col 9)-(line 103,col 74)",
            "(line 104,col 9)-(line 104,col 45)",
            "(line 105,col 9)-(line 105,col 70)",
            "(line 106,col 9)-(line 106,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsAddTest.testAddObjectArrayFloat()",
        "snippet": "    public void testAddObjectArrayFloat() {\n        float[] newArray;\n        newArray = ArrayUtils.add((float[])null, 0);\n        assertTrue(Arrays.equals(new float[]{0}, newArray));\n        assertEquals(Float.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add((float[])null, 1);\n        assertTrue(Arrays.equals(new float[]{1}, newArray));\n        assertEquals(Float.TYPE, newArray.getClass().getComponentType());\n        float[] array1 = new float[]{1, 2, 3};\n        newArray = ArrayUtils.add(array1, 0);\n        assertTrue(Arrays.equals(new float[]{1, 2, 3, 0}, newArray));\n        assertEquals(Float.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add(array1, 4);\n        assertTrue(Arrays.equals(new float[]{1, 2, 3, 4}, newArray));\n        assertEquals(Float.TYPE, newArray.getClass().getComponentType());        \n    }",
        "begin_line": 109,
        "end_line": 124,
        "comment": "",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 25)",
            "(line 111,col 9)-(line 111,col 52)",
            "(line 112,col 9)-(line 112,col 60)",
            "(line 113,col 9)-(line 113,col 73)",
            "(line 114,col 9)-(line 114,col 52)",
            "(line 115,col 9)-(line 115,col 60)",
            "(line 116,col 9)-(line 116,col 73)",
            "(line 117,col 9)-(line 117,col 46)",
            "(line 118,col 9)-(line 118,col 45)",
            "(line 119,col 9)-(line 119,col 69)",
            "(line 120,col 9)-(line 120,col 73)",
            "(line 121,col 9)-(line 121,col 45)",
            "(line 122,col 9)-(line 122,col 69)",
            "(line 123,col 9)-(line 123,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsAddTest.testAddObjectArrayInt()",
        "snippet": "    public void testAddObjectArrayInt() {\n        int[] newArray;\n        newArray = ArrayUtils.add((int[])null, 0);\n        assertTrue(Arrays.equals(new int[]{0}, newArray));\n        assertEquals(Integer.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add((int[])null, 1);\n        assertTrue(Arrays.equals(new int[]{1}, newArray));\n        assertEquals(Integer.TYPE, newArray.getClass().getComponentType());\n        int[] array1 = new int[]{1, 2, 3};\n        newArray = ArrayUtils.add(array1, 0);\n        assertTrue(Arrays.equals(new int[]{1, 2, 3, 0}, newArray));\n        assertEquals(Integer.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add(array1, 4);\n        assertTrue(Arrays.equals(new int[]{1, 2, 3, 4}, newArray));\n        assertEquals(Integer.TYPE, newArray.getClass().getComponentType());        \n    }",
        "begin_line": 126,
        "end_line": 141,
        "comment": "",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 23)",
            "(line 128,col 9)-(line 128,col 50)",
            "(line 129,col 9)-(line 129,col 58)",
            "(line 130,col 9)-(line 130,col 75)",
            "(line 131,col 9)-(line 131,col 50)",
            "(line 132,col 9)-(line 132,col 58)",
            "(line 133,col 9)-(line 133,col 75)",
            "(line 134,col 9)-(line 134,col 42)",
            "(line 135,col 9)-(line 135,col 45)",
            "(line 136,col 9)-(line 136,col 67)",
            "(line 137,col 9)-(line 137,col 75)",
            "(line 138,col 9)-(line 138,col 45)",
            "(line 139,col 9)-(line 139,col 67)",
            "(line 140,col 9)-(line 140,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsAddTest.testAddObjectArrayLong()",
        "snippet": "    public void testAddObjectArrayLong() {\n        long[] newArray;\n        newArray = ArrayUtils.add((long[])null, 0);\n        assertTrue(Arrays.equals(new long[]{0}, newArray));\n        assertEquals(Long.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add((long[])null, 1);\n        assertTrue(Arrays.equals(new long[]{1}, newArray));\n        assertEquals(Long.TYPE, newArray.getClass().getComponentType());\n        long[] array1 = new long[]{1, 2, 3};\n        newArray = ArrayUtils.add(array1, 0);\n        assertTrue(Arrays.equals(new long[]{1, 2, 3, 0}, newArray));\n        assertEquals(Long.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add(array1, 4);\n        assertTrue(Arrays.equals(new long[]{1, 2, 3, 4}, newArray));\n        assertEquals(Long.TYPE, newArray.getClass().getComponentType());        \n    }",
        "begin_line": 143,
        "end_line": 158,
        "comment": "",
        "child_ranges": [
            "(line 144,col 9)-(line 144,col 24)",
            "(line 145,col 9)-(line 145,col 51)",
            "(line 146,col 9)-(line 146,col 59)",
            "(line 147,col 9)-(line 147,col 72)",
            "(line 148,col 9)-(line 148,col 51)",
            "(line 149,col 9)-(line 149,col 59)",
            "(line 150,col 9)-(line 150,col 72)",
            "(line 151,col 9)-(line 151,col 44)",
            "(line 152,col 9)-(line 152,col 45)",
            "(line 153,col 9)-(line 153,col 68)",
            "(line 154,col 9)-(line 154,col 72)",
            "(line 155,col 9)-(line 155,col 45)",
            "(line 156,col 9)-(line 156,col 68)",
            "(line 157,col 9)-(line 157,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsAddTest.testAddObjectArrayShort()",
        "snippet": "    public void testAddObjectArrayShort() {\n        short[] newArray;\n        newArray = ArrayUtils.add((short[])null, (short)0);\n        assertTrue(Arrays.equals(new short[]{0}, newArray));\n        assertEquals(Short.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add((short[])null, (short)1);\n        assertTrue(Arrays.equals(new short[]{1}, newArray));\n        assertEquals(Short.TYPE, newArray.getClass().getComponentType());\n        short[] array1 = new short[]{1, 2, 3};\n        newArray = ArrayUtils.add(array1, (short)0);\n        assertTrue(Arrays.equals(new short[]{1, 2, 3, 0}, newArray));\n        assertEquals(Short.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add(array1, (short)4);\n        assertTrue(Arrays.equals(new short[]{1, 2, 3, 4}, newArray));\n        assertEquals(Short.TYPE, newArray.getClass().getComponentType());        \n    }",
        "begin_line": 160,
        "end_line": 175,
        "comment": "",
        "child_ranges": [
            "(line 161,col 9)-(line 161,col 25)",
            "(line 162,col 9)-(line 162,col 59)",
            "(line 163,col 9)-(line 163,col 60)",
            "(line 164,col 9)-(line 164,col 73)",
            "(line 165,col 9)-(line 165,col 59)",
            "(line 166,col 9)-(line 166,col 60)",
            "(line 167,col 9)-(line 167,col 73)",
            "(line 168,col 9)-(line 168,col 46)",
            "(line 169,col 9)-(line 169,col 52)",
            "(line 170,col 9)-(line 170,col 69)",
            "(line 171,col 9)-(line 171,col 73)",
            "(line 172,col 9)-(line 172,col 52)",
            "(line 173,col 9)-(line 173,col 69)",
            "(line 174,col 9)-(line 174,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsAddTest.testAddObjectArrayObject()",
        "snippet": "    public void testAddObjectArrayObject() {\n        Object[] newArray;\n        newArray = ArrayUtils.add((Object[])null, null);\n        assertTrue(Arrays.equals((new Object[]{null}), newArray));\n        assertEquals(Object.class, newArray.getClass().getComponentType());\n        \n        newArray = ArrayUtils.add((Object[])null, \"a\");\n        assertTrue(Arrays.equals((new String[]{\"a\"}), newArray));\n        assertTrue(Arrays.equals((new Object[]{\"a\"}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n        \n        String[] stringArray1 = new String[]{\"a\", \"b\", \"c\"};\n        newArray = ArrayUtils.add(stringArray1, null);\n        assertTrue(Arrays.equals((new String[]{\"a\", \"b\", \"c\", null}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n        \n        newArray = ArrayUtils.add(stringArray1, \"d\");\n        assertTrue(Arrays.equals((new String[]{\"a\", \"b\", \"c\", \"d\"}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n        \n        Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n        newArray = ArrayUtils.add(numberArray1, new Float(3));\n        assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n        assertEquals(Number.class, newArray.getClass().getComponentType());\n        \n        numberArray1 = null;\n        newArray = ArrayUtils.add(numberArray1, new Float(3));\n        assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n        assertEquals(Float.class, newArray.getClass().getComponentType());\n        \n        numberArray1 = null;\n        newArray = ArrayUtils.add(numberArray1, null);\n        assertTrue(Arrays.equals((new Object[]{null}), newArray));\n        assertEquals(Object.class, newArray.getClass().getComponentType());\n    }",
        "begin_line": 177,
        "end_line": 211,
        "comment": "",
        "child_ranges": [
            "(line 178,col 9)-(line 178,col 26)",
            "(line 179,col 9)-(line 179,col 56)",
            "(line 180,col 9)-(line 180,col 66)",
            "(line 181,col 9)-(line 181,col 75)",
            "(line 183,col 9)-(line 183,col 55)",
            "(line 184,col 9)-(line 184,col 65)",
            "(line 185,col 9)-(line 185,col 65)",
            "(line 186,col 9)-(line 186,col 75)",
            "(line 188,col 9)-(line 188,col 60)",
            "(line 189,col 9)-(line 189,col 54)",
            "(line 190,col 9)-(line 190,col 81)",
            "(line 191,col 9)-(line 191,col 75)",
            "(line 193,col 9)-(line 193,col 53)",
            "(line 194,col 9)-(line 194,col 80)",
            "(line 195,col 9)-(line 195,col 75)",
            "(line 197,col 9)-(line 197,col 76)",
            "(line 198,col 9)-(line 198,col 62)",
            "(line 199,col 9)-(line 199,col 105)",
            "(line 200,col 9)-(line 200,col 75)",
            "(line 202,col 9)-(line 202,col 28)",
            "(line 203,col 9)-(line 203,col 62)",
            "(line 204,col 9)-(line 204,col 73)",
            "(line 205,col 9)-(line 205,col 74)",
            "(line 207,col 9)-(line 207,col 28)",
            "(line 208,col 9)-(line 208,col 54)",
            "(line 209,col 9)-(line 209,col 66)",
            "(line 210,col 9)-(line 210,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsAddTest.testAddObjectArrayToObjectArray()",
        "snippet": "    public void testAddObjectArrayToObjectArray() {\n        assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null));\n        Object[] newArray;\n        String[] stringArray1 = new String[]{\"a\", \"b\", \"c\"};\n        String[] stringArray2 = new String[]{\"1\", \"2\", \"3\"};\n        newArray = ArrayUtils.addAll(stringArray1, null);\n        assertNotSame(stringArray1, newArray);\n        assertTrue(Arrays.equals(stringArray1, newArray));\n        assertTrue(Arrays.equals((new String[]{\"a\", \"b\", \"c\"}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.addAll(null, stringArray2);\n        assertNotSame(stringArray2, newArray);\n        assertTrue(Arrays.equals(stringArray2, newArray));\n        assertTrue(Arrays.equals((new String[]{\"1\", \"2\", \"3\"}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.addAll(stringArray1, stringArray2);\n        assertTrue(Arrays.equals((new String[]{\"a\", \"b\", \"c\", \"1\", \"2\", \"3\"}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, null);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray));\n        assertTrue(Arrays.equals((new String[]{}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray));\n        assertTrue(Arrays.equals((new String[]{}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray));\n        assertTrue(Arrays.equals((new String[]{}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n        String[] stringArrayNull = new String []{null};\n        newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull);        \n        assertTrue(Arrays.equals((new String[]{null, null}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n\n        // boolean\n        assertTrue( Arrays.equals( new boolean[] { true, false, false, true }, \n            ArrayUtils.addAll( new boolean[] { true, false }, new boolean[] { false, true } ) ) );\n\n        assertTrue( Arrays.equals( new boolean[] { false, true }, \n            ArrayUtils.addAll( null, new boolean[] { false, true } ) ) );\n\n        assertTrue( Arrays.equals( new boolean[] { true, false }, \n            ArrayUtils.addAll( new boolean[] { true, false }, null ) ) );\n\n        // char\n        assertTrue( Arrays.equals( new char[] { 'a', 'b', 'c', 'd' }, \n            ArrayUtils.addAll( new char[] { 'a', 'b' }, new char[] { 'c', 'd' } ) ) );\n\n        assertTrue( Arrays.equals( new char[] { 'c', 'd' }, \n            ArrayUtils.addAll( null, new char[] { 'c', 'd' } ) ) );\n\n        assertTrue( Arrays.equals( new char[] { 'a', 'b' }, \n            ArrayUtils.addAll( new char[] { 'a', 'b' }, null ) ) );\n\n        // byte\n        assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, \n            ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 } ) ) );\n\n        assertTrue( Arrays.equals( new byte[] { (byte) 2, (byte) 3 }, \n            ArrayUtils.addAll( null, new byte[] { (byte) 2, (byte) 3 } ) ) );\n\n        assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1 }, \n            ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, null ) ) );\n\n        // short\n        assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, \n            ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 } ) ) );\n\n        assertTrue( Arrays.equals( new short[] { (short) 30, (short) 40 }, \n            ArrayUtils.addAll( null, new short[] { (short) 30, (short) 40 } ) ) );\n\n        assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20 }, \n            ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, null ) ) );\n\n        // int\n        assertTrue( Arrays.equals( new int[] { 1, 1000, -1000, -1 }, \n            ArrayUtils.addAll( new int[] { 1, 1000 }, new int[] { -1000, -1 } ) ) );\n\n        assertTrue( Arrays.equals( new int[] { -1000, -1 }, \n            ArrayUtils.addAll( null, new int[] { -1000, -1 } ) ) );\n\n        assertTrue( Arrays.equals( new int[] { 1, 1000 }, \n            ArrayUtils.addAll( new int[] { 1, 1000 }, null ) ) );\n\n        // long\n        assertTrue( Arrays.equals( new long[] { 1L, -1L, 1000L, -1000L }, \n            ArrayUtils.addAll( new long[] { 1L, -1L }, new long[] { 1000L, -1000L } ) ) );\n\n        assertTrue( Arrays.equals( new long[] { 1000L, -1000L }, \n            ArrayUtils.addAll( null, new long[] { 1000L, -1000L } ) ) );\n        \n        assertTrue( Arrays.equals( new long[] { 1L, -1L }, \n            ArrayUtils.addAll( new long[] { 1L, -1L }, null ) ) );\n\n        // float\n        assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, \n            ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f } ) ) );\n\n        assertTrue( Arrays.equals( new float[] { 1.6f, 0.01f }, \n            ArrayUtils.addAll( null, new float[] { 1.6f, 0.01f } ) ) );\n\n        assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f }, \n            ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, null ) ) );\n\n        // double\n        assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI, 0, 9.99 }, \n            ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 } ) ) );\n\n        assertTrue( Arrays.equals( new double[] { 0, 9.99 }, \n            ArrayUtils.addAll( null, new double[] { 0, 9.99 } ) ) );\n\n        assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI }, \n            ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, null ) ) );\n\n    }    ",
        "begin_line": 213,
        "end_line": 328,
        "comment": "",
        "child_ranges": [
            "(line 214,col 9)-(line 214,col 72)",
            "(line 215,col 9)-(line 215,col 26)",
            "(line 216,col 9)-(line 216,col 60)",
            "(line 217,col 9)-(line 217,col 60)",
            "(line 218,col 9)-(line 218,col 57)",
            "(line 219,col 9)-(line 219,col 46)",
            "(line 220,col 9)-(line 220,col 58)",
            "(line 221,col 9)-(line 221,col 75)",
            "(line 222,col 9)-(line 222,col 75)",
            "(line 223,col 9)-(line 223,col 57)",
            "(line 224,col 9)-(line 224,col 46)",
            "(line 225,col 9)-(line 225,col 58)",
            "(line 226,col 9)-(line 226,col 75)",
            "(line 227,col 9)-(line 227,col 75)",
            "(line 228,col 9)-(line 228,col 65)",
            "(line 229,col 9)-(line 229,col 90)",
            "(line 230,col 9)-(line 230,col 75)",
            "(line 231,col 9)-(line 231,col 74)",
            "(line 232,col 9)-(line 232,col 75)",
            "(line 233,col 9)-(line 233,col 62)",
            "(line 234,col 9)-(line 234,col 75)",
            "(line 235,col 9)-(line 235,col 74)",
            "(line 236,col 9)-(line 236,col 75)",
            "(line 237,col 9)-(line 237,col 62)",
            "(line 238,col 9)-(line 238,col 75)",
            "(line 239,col 9)-(line 239,col 99)",
            "(line 240,col 9)-(line 240,col 75)",
            "(line 241,col 9)-(line 241,col 62)",
            "(line 242,col 9)-(line 242,col 75)",
            "(line 243,col 9)-(line 243,col 55)",
            "(line 244,col 9)-(line 244,col 71)",
            "(line 245,col 9)-(line 245,col 72)",
            "(line 246,col 9)-(line 246,col 75)",
            "(line 249,col 9)-(line 250,col 98)",
            "(line 252,col 9)-(line 253,col 73)",
            "(line 255,col 9)-(line 256,col 73)",
            "(line 259,col 9)-(line 260,col 86)",
            "(line 262,col 9)-(line 263,col 67)",
            "(line 265,col 9)-(line 266,col 67)",
            "(line 269,col 9)-(line 270,col 106)",
            "(line 272,col 9)-(line 273,col 77)",
            "(line 275,col 9)-(line 276,col 77)",
            "(line 279,col 9)-(line 280,col 116)",
            "(line 282,col 9)-(line 283,col 82)",
            "(line 285,col 9)-(line 286,col 82)",
            "(line 289,col 9)-(line 290,col 84)",
            "(line 292,col 9)-(line 293,col 67)",
            "(line 295,col 9)-(line 296,col 65)",
            "(line 299,col 9)-(line 300,col 90)",
            "(line 302,col 9)-(line 303,col 72)",
            "(line 305,col 9)-(line 306,col 66)",
            "(line 309,col 9)-(line 310,col 95)",
            "(line 312,col 9)-(line 313,col 71)",
            "(line 315,col 9)-(line 316,col 72)",
            "(line 319,col 9)-(line 320,col 98)",
            "(line 322,col 9)-(line 323,col 68)",
            "(line 325,col 9)-(line 326,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsAddTest.testAddObjectAtIndex()",
        "snippet": "    public void testAddObjectAtIndex() {\n        Object[] newArray;\n        newArray = ArrayUtils.add((Object[])null, 0, null);\n        assertTrue(Arrays.equals((new Object[]{null}), newArray));\n        assertEquals(Object.class, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add((Object[])null, 0, \"a\");\n        assertTrue(Arrays.equals((new String[]{\"a\"}), newArray));\n        assertTrue(Arrays.equals((new Object[]{\"a\"}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n        String[] stringArray1 = new String[]{\"a\", \"b\", \"c\"};\n        newArray = ArrayUtils.add(stringArray1, 0, null);\n        assertTrue(Arrays.equals((new String[]{null, \"a\", \"b\", \"c\"}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add(stringArray1, 1, null);\n        assertTrue(Arrays.equals((new String[]{\"a\", null, \"b\", \"c\"}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add(stringArray1, 3, null);\n        assertTrue(Arrays.equals((new String[]{\"a\", \"b\", \"c\", null}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add(stringArray1, 3, \"d\");\n        assertTrue(Arrays.equals((new String[]{\"a\", \"b\", \"c\", \"d\"}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());        \n        assertEquals(String.class, newArray.getClass().getComponentType());\n\n        Object[] o = new Object[] {\"1\", \"2\", \"4\"};\n        Object[] result = ArrayUtils.add(o, 2, \"3\");\n        Object[] result2 = ArrayUtils.add(o, 3, \"5\");\n        \n        assertNotNull(result);\n        assertEquals(4, result.length);\n        assertEquals(\"1\", result[0]);\n        assertEquals(\"2\", result[1]);\n        assertEquals(\"3\", result[2]);\n        assertEquals(\"4\", result[3]);\n        assertNotNull(result2);\n        assertEquals(4, result2.length);\n        assertEquals(\"1\", result2[0]);\n        assertEquals(\"2\", result2[1]);\n        assertEquals(\"4\", result2[2]);\n        assertEquals(\"5\", result2[3]);\n\n        // boolean tests\n        boolean[] booleanArray = ArrayUtils.add( null, 0, true );\n        assertTrue( Arrays.equals( new boolean[] { true }, booleanArray ) );\n        try {\n            booleanArray = ArrayUtils.add( null, -1, true );\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 0\", e.getMessage());\n        }\n        booleanArray = ArrayUtils.add( new boolean[] { true }, 0, false);\n        assertTrue( Arrays.equals( new boolean[] { false, true }, booleanArray ) );\n        booleanArray = ArrayUtils.add( new boolean[] { false }, 1, true);\n        assertTrue( Arrays.equals( new boolean[] { false, true }, booleanArray ) );\n        booleanArray = ArrayUtils.add( new boolean[] { true, false }, 1, true);\n        assertTrue( Arrays.equals( new boolean[] { true, true, false }, booleanArray ) );\n        try {\n            booleanArray = ArrayUtils.add( new boolean[] { true, false }, 4, true);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: 4, Length: 2\", e.getMessage());\n        }\n        try {\n            booleanArray = ArrayUtils.add( new boolean[] { true, false }, -1, true);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 2\", e.getMessage());\n        }\n\n        // char tests\n        char[] charArray = ArrayUtils.add( (char[]) null, 0, 'a' );\n        assertTrue( Arrays.equals( new char[] { 'a' }, charArray ) );\n        try {\n            charArray = ArrayUtils.add( (char[]) null, -1, 'a' );\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 0\", e.getMessage());\n        }\n        charArray = ArrayUtils.add( new char[] { 'a' }, 0, 'b');\n        assertTrue( Arrays.equals( new char[] { 'b', 'a' }, charArray ) );\n        charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 0, 'c');\n        assertTrue( Arrays.equals( new char[] { 'c', 'a', 'b' }, charArray ) );\n        charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 1, 'k');\n        assertTrue( Arrays.equals( new char[] { 'a', 'k', 'b' }, charArray ) );\n        charArray = ArrayUtils.add( new char[] { 'a', 'b', 'c' }, 1, 't');\n        assertTrue( Arrays.equals( new char[] { 'a', 't', 'b', 'c' }, charArray ) );\n        try {\n            charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 4, 'c');\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: 4, Length: 2\", e.getMessage());\n        }\n        try {\n            charArray = ArrayUtils.add( new char[] { 'a', 'b' }, -1, 'c');\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 2\", e.getMessage());\n        }\n\n        // short tests\n        short[] shortArray = ArrayUtils.add( new short[] { 1 }, 0, (short) 2);\n        assertTrue( Arrays.equals( new short[] { 2, 1 }, shortArray ) );\n        try {\n            shortArray = ArrayUtils.add( (short[]) null, -1, (short) 2);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 0\", e.getMessage());\n        }\n        shortArray = ArrayUtils.add( new short[] { 2, 6 }, 2, (short) 10);\n        assertTrue( Arrays.equals( new short[] { 2, 6, 10 }, shortArray ) );\n        shortArray = ArrayUtils.add( new short[] { 2, 6 }, 0, (short) -4);\n        assertTrue( Arrays.equals( new short[] { -4, 2, 6 }, shortArray ) );\n        shortArray = ArrayUtils.add( new short[] { 2, 6, 3 }, 2, (short) 1);\n        assertTrue( Arrays.equals( new short[] { 2, 6, 1, 3 }, shortArray ) );\n        try {\n            shortArray = ArrayUtils.add( new short[] { 2, 6 }, 4, (short) 10);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: 4, Length: 2\", e.getMessage());\n        }\n        try {\n            shortArray = ArrayUtils.add( new short[] { 2, 6 }, -1, (short) 10);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 2\", e.getMessage());\n        }\n\n        // byte tests\n        byte[] byteArray = ArrayUtils.add( new byte[] { 1 }, 0, (byte) 2);\n        assertTrue( Arrays.equals( new byte[] { 2, 1 }, byteArray ) );\n        try {\n            byteArray = ArrayUtils.add( (byte[]) null, -1, (byte) 2);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 0\", e.getMessage());\n        }\n        byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 2, (byte) 3);\n        assertTrue( Arrays.equals( new byte[] { 2, 6, 3 }, byteArray ) );\n        byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 0, (byte) 1);\n        assertTrue( Arrays.equals( new byte[] { 1, 2, 6 }, byteArray ) );\n        byteArray = ArrayUtils.add( new byte[] { 2, 6, 3 }, 2, (byte) 1);\n        assertTrue( Arrays.equals( new byte[] { 2, 6, 1, 3 }, byteArray ) );\n        try {\n            byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 4, (byte) 3);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: 4, Length: 2\", e.getMessage());\n        }\n        try {\n            byteArray = ArrayUtils.add( new byte[] { 2, 6 }, -1, (byte) 3);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 2\", e.getMessage());\n        }\n\n        // int tests\n        int[] intArray = ArrayUtils.add( new int[] { 1 }, 0, 2);\n        assertTrue( Arrays.equals( new int[] { 2, 1 }, intArray ) );\n        try {\n            intArray = ArrayUtils.add( (int[]) null, -1, 2);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 0\", e.getMessage());\n        }\n        intArray = ArrayUtils.add( new int[] { 2, 6 }, 2, 10);\n        assertTrue( Arrays.equals( new int[] { 2, 6, 10 }, intArray ) );\n        intArray = ArrayUtils.add( new int[] { 2, 6 }, 0, -4);\n        assertTrue( Arrays.equals( new int[] { -4, 2, 6 }, intArray ) );\n        intArray = ArrayUtils.add( new int[] { 2, 6, 3 }, 2, 1);\n        assertTrue( Arrays.equals( new int[] { 2, 6, 1, 3 }, intArray ) );\n        try {\n            intArray = ArrayUtils.add( new int[] { 2, 6 }, 4, 10);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: 4, Length: 2\", e.getMessage());\n        }\n        try {\n            intArray = ArrayUtils.add( new int[] { 2, 6 }, -1, 10);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 2\", e.getMessage());\n        }\n\n        // long tests\n        long[] longArray = ArrayUtils.add( new long[] { 1L }, 0, 2L);\n        assertTrue( Arrays.equals( new long[] { 2L, 1L }, longArray ) );\n        try {\n            longArray = ArrayUtils.add( (long[]) null, -1, 2L);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 0\", e.getMessage());\n        }\n        longArray = ArrayUtils.add( new long[] { 2L, 6L }, 2, 10L);\n        assertTrue( Arrays.equals( new long[] { 2L, 6L, 10L }, longArray ) );\n        longArray = ArrayUtils.add( new long[] { 2L, 6L }, 0, -4L);\n        assertTrue( Arrays.equals( new long[] { -4L, 2L, 6L }, longArray ) );\n        longArray = ArrayUtils.add( new long[] { 2L, 6L, 3L }, 2, 1L);\n        assertTrue( Arrays.equals( new long[] { 2L, 6L, 1L, 3L }, longArray ) );\n        try {\n            longArray = ArrayUtils.add( new long[] { 2L, 6L }, 4, 10L);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: 4, Length: 2\", e.getMessage());\n        }\n        try {\n            longArray = ArrayUtils.add( new long[] { 2L, 6L }, -1, 10L);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 2\", e.getMessage());\n        }\n\n        // float tests\n        float[] floatArray = ArrayUtils.add( new float[] { 1.1f }, 0, 2.2f);\n        assertTrue( Arrays.equals( new float[] { 2.2f, 1.1f }, floatArray ) );\n        try {\n            floatArray = ArrayUtils.add( (float[]) null, -1, 2.2f);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 0\", e.getMessage());\n        }\n        floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, 2, 10.5f);\n        assertTrue( Arrays.equals( new float[] { 2.3f, 6.4f, 10.5f }, floatArray ) );\n        floatArray = ArrayUtils.add( new float[] { 2.6f, 6.7f }, 0, -4.8f);\n        assertTrue( Arrays.equals( new float[] { -4.8f, 2.6f, 6.7f }, floatArray ) );\n        floatArray = ArrayUtils.add( new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f);\n        assertTrue( Arrays.equals( new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray ) );\n        try {\n            floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, 4, 10.5f);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: 4, Length: 2\", e.getMessage());\n        }\n        try {\n            floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, -1, 10.5f);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 2\", e.getMessage());\n        }\n\n        // double tests\n        double[] doubleArray = ArrayUtils.add( new double[] { 1.1 }, 0, 2.2);\n        assertTrue( Arrays.equals( new double[] { 2.2, 1.1 }, doubleArray ) );\n        try {\n          doubleArray = ArrayUtils.add( (double[]) null, -1, 2.2);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 0\", e.getMessage());\n        }\n        doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, 2, 10.5);\n        assertTrue( Arrays.equals( new double[] { 2.3, 6.4, 10.5 }, doubleArray ) );\n        doubleArray = ArrayUtils.add( new double[] { 2.6, 6.7 }, 0, -4.8);\n        assertTrue( Arrays.equals( new double[] { -4.8, 2.6, 6.7 }, doubleArray ) );\n        doubleArray = ArrayUtils.add( new double[] { 2.9, 6.0, 0.3 }, 2, 1.0);\n        assertTrue( Arrays.equals( new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray ) );\n        try {\n            doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, 4, 10.5);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: 4, Length: 2\", e.getMessage());\n        }\n        try {\n            doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, -1, 10.5);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 2\", e.getMessage());\n        }\n    }",
        "begin_line": 330,
        "end_line": 572,
        "comment": "",
        "child_ranges": [
            "(line 331,col 9)-(line 331,col 26)",
            "(line 332,col 9)-(line 332,col 59)",
            "(line 333,col 9)-(line 333,col 66)",
            "(line 334,col 9)-(line 334,col 75)",
            "(line 335,col 9)-(line 335,col 58)",
            "(line 336,col 9)-(line 336,col 65)",
            "(line 337,col 9)-(line 337,col 65)",
            "(line 338,col 9)-(line 338,col 75)",
            "(line 339,col 9)-(line 339,col 60)",
            "(line 340,col 9)-(line 340,col 57)",
            "(line 341,col 9)-(line 341,col 81)",
            "(line 342,col 9)-(line 342,col 75)",
            "(line 343,col 9)-(line 343,col 57)",
            "(line 344,col 9)-(line 344,col 81)",
            "(line 345,col 9)-(line 345,col 75)",
            "(line 346,col 9)-(line 346,col 57)",
            "(line 347,col 9)-(line 347,col 81)",
            "(line 348,col 9)-(line 348,col 75)",
            "(line 349,col 9)-(line 349,col 56)",
            "(line 350,col 9)-(line 350,col 80)",
            "(line 351,col 9)-(line 351,col 75)",
            "(line 352,col 9)-(line 352,col 75)",
            "(line 354,col 9)-(line 354,col 50)",
            "(line 355,col 9)-(line 355,col 52)",
            "(line 356,col 9)-(line 356,col 53)",
            "(line 358,col 9)-(line 358,col 30)",
            "(line 359,col 9)-(line 359,col 39)",
            "(line 360,col 9)-(line 360,col 37)",
            "(line 361,col 9)-(line 361,col 37)",
            "(line 362,col 9)-(line 362,col 37)",
            "(line 363,col 9)-(line 363,col 37)",
            "(line 364,col 9)-(line 364,col 31)",
            "(line 365,col 9)-(line 365,col 40)",
            "(line 366,col 9)-(line 366,col 38)",
            "(line 367,col 9)-(line 367,col 38)",
            "(line 368,col 9)-(line 368,col 38)",
            "(line 369,col 9)-(line 369,col 38)",
            "(line 372,col 9)-(line 372,col 65)",
            "(line 373,col 9)-(line 373,col 76)",
            "(line 374,col 9)-(line 378,col 9)",
            "(line 379,col 9)-(line 379,col 73)",
            "(line 380,col 9)-(line 380,col 83)",
            "(line 381,col 9)-(line 381,col 73)",
            "(line 382,col 9)-(line 382,col 83)",
            "(line 383,col 9)-(line 383,col 79)",
            "(line 384,col 9)-(line 384,col 89)",
            "(line 385,col 9)-(line 389,col 9)",
            "(line 390,col 9)-(line 394,col 9)",
            "(line 397,col 9)-(line 397,col 67)",
            "(line 398,col 9)-(line 398,col 69)",
            "(line 399,col 9)-(line 403,col 9)",
            "(line 404,col 9)-(line 404,col 64)",
            "(line 405,col 9)-(line 405,col 74)",
            "(line 406,col 9)-(line 406,col 69)",
            "(line 407,col 9)-(line 407,col 79)",
            "(line 408,col 9)-(line 408,col 69)",
            "(line 409,col 9)-(line 409,col 79)",
            "(line 410,col 9)-(line 410,col 74)",
            "(line 411,col 9)-(line 411,col 84)",
            "(line 412,col 9)-(line 416,col 9)",
            "(line 417,col 9)-(line 421,col 9)",
            "(line 424,col 9)-(line 424,col 78)",
            "(line 425,col 9)-(line 425,col 72)",
            "(line 426,col 9)-(line 430,col 9)",
            "(line 431,col 9)-(line 431,col 74)",
            "(line 432,col 9)-(line 432,col 76)",
            "(line 433,col 9)-(line 433,col 74)",
            "(line 434,col 9)-(line 434,col 76)",
            "(line 435,col 9)-(line 435,col 76)",
            "(line 436,col 9)-(line 436,col 78)",
            "(line 437,col 9)-(line 441,col 9)",
            "(line 442,col 9)-(line 446,col 9)",
            "(line 449,col 9)-(line 449,col 74)",
            "(line 450,col 9)-(line 450,col 70)",
            "(line 451,col 9)-(line 455,col 9)",
            "(line 456,col 9)-(line 456,col 70)",
            "(line 457,col 9)-(line 457,col 73)",
            "(line 458,col 9)-(line 458,col 70)",
            "(line 459,col 9)-(line 459,col 73)",
            "(line 460,col 9)-(line 460,col 73)",
            "(line 461,col 9)-(line 461,col 76)",
            "(line 462,col 9)-(line 466,col 9)",
            "(line 467,col 9)-(line 471,col 9)",
            "(line 474,col 9)-(line 474,col 64)",
            "(line 475,col 9)-(line 475,col 68)",
            "(line 476,col 9)-(line 480,col 9)",
            "(line 481,col 9)-(line 481,col 62)",
            "(line 482,col 9)-(line 482,col 72)",
            "(line 483,col 9)-(line 483,col 62)",
            "(line 484,col 9)-(line 484,col 72)",
            "(line 485,col 9)-(line 485,col 64)",
            "(line 486,col 9)-(line 486,col 74)",
            "(line 487,col 9)-(line 491,col 9)",
            "(line 492,col 9)-(line 496,col 9)",
            "(line 499,col 9)-(line 499,col 69)",
            "(line 500,col 9)-(line 500,col 72)",
            "(line 501,col 9)-(line 505,col 9)",
            "(line 506,col 9)-(line 506,col 67)",
            "(line 507,col 9)-(line 507,col 77)",
            "(line 508,col 9)-(line 508,col 67)",
            "(line 509,col 9)-(line 509,col 77)",
            "(line 510,col 9)-(line 510,col 70)",
            "(line 511,col 9)-(line 511,col 80)",
            "(line 512,col 9)-(line 516,col 9)",
            "(line 517,col 9)-(line 521,col 9)",
            "(line 524,col 9)-(line 524,col 76)",
            "(line 525,col 9)-(line 525,col 78)",
            "(line 526,col 9)-(line 530,col 9)",
            "(line 531,col 9)-(line 531,col 75)",
            "(line 532,col 9)-(line 532,col 85)",
            "(line 533,col 9)-(line 533,col 75)",
            "(line 534,col 9)-(line 534,col 85)",
            "(line 535,col 9)-(line 535,col 80)",
            "(line 536,col 9)-(line 536,col 90)",
            "(line 537,col 9)-(line 541,col 9)",
            "(line 542,col 9)-(line 546,col 9)",
            "(line 549,col 9)-(line 549,col 77)",
            "(line 550,col 9)-(line 550,col 78)",
            "(line 551,col 9)-(line 555,col 9)",
            "(line 556,col 9)-(line 556,col 74)",
            "(line 557,col 9)-(line 557,col 84)",
            "(line 558,col 9)-(line 558,col 74)",
            "(line 559,col 9)-(line 559,col 84)",
            "(line 560,col 9)-(line 560,col 78)",
            "(line 561,col 9)-(line 561,col 88)",
            "(line 562,col 9)-(line 566,col 9)",
            "(line 567,col 9)-(line 571,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang.SystemUtilsTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang.SystemUtilsTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(SystemUtilsTest.class);\n        suite.setName(\"SystemUtils Tests\");\n        return suite;\n    }",
        "begin_line": 47,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 63)",
            "(line 49,col 9)-(line 49,col 43)",
            "(line 50,col 9)-(line 50,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang.SystemUtilsTest.SystemUtilsTest(java.lang.String)",
        "snippet": "    public SystemUtilsTest(String name) {\n        super(name);\n    }",
        "begin_line": 64,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang.SystemUtilsTest.getJavaVersionAsFloat()",
        "snippet": "    private float getJavaVersionAsFloat() {\n        if (JAVA_VERSION_TRIMMED == null) {\n            return 0f;\n        }\n        String str = JAVA_VERSION_TRIMMED.substring(0, 3);\n        if (JAVA_VERSION_TRIMMED.length() >= 5) {\n            str = str + JAVA_VERSION_TRIMMED.substring(4, 5);\n        }\n        try {\n            return Float.parseFloat(str);\n        } catch (Exception ex) {\n            return 0;\n        }\n    }",
        "begin_line": 82,
        "end_line": 95,
        "comment": "\n     * <p>Gets the Java version number as a <code>float</code>.</p>\n     *\n     * <p>Example return values:</p>\n     * <ul>\n     *  <li><code>1.2f</code> for JDK 1.2\n     *  <li><code>1.31f</code> for JDK 1.3.1\n     * </ul>\n     * \n     * <p>Patch releases are not reported.\n     * Zero is returned if {@link #JAVA_VERSION_TRIMMED} is <code>null</code>.</p>\n     * \n     * @return the version, for example 1.31f for JDK 1.3.1\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 85,col 9)",
            "(line 86,col 9)-(line 86,col 58)",
            "(line 87,col 9)-(line 89,col 9)",
            "(line 90,col 9)-(line 94,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang.SystemUtilsTest.getJavaVersionAsInt()",
        "snippet": "    private int getJavaVersionAsInt() {\n        if (JAVA_VERSION == null) {\n            return 0;\n        }\n        String str = JAVA_VERSION_TRIMMED.substring(0, 1);\n        str = str + JAVA_VERSION_TRIMMED.substring(2, 3);\n        if (JAVA_VERSION_TRIMMED.length() >= 5) {\n            str = str + JAVA_VERSION_TRIMMED.substring(4, 5);\n        } else {\n            str = str + \"0\";\n        }\n        try {\n            return Integer.parseInt(str);\n        } catch (Exception ex) {\n            return 0;\n        }\n    }",
        "begin_line": 111,
        "end_line": 127,
        "comment": "\n     * <p>Gets the Java version number as an <code>int</code>.</p>\n     *\n     * <p>Example return values:</p>\n     * <ul>\n     *  <li><code>120</code> for JDK 1.2\n     *  <li><code>131</code> for JDK 1.3.1\n     * </ul>\n     * \n     * <p>Patch releases are not reported.\n     * Zero is returned if {@link #JAVA_VERSION_TRIMMED} is <code>null</code>.</p>\n     * \n     * @return the version, for example 131 for JDK 1.3.1\n     ",
        "child_ranges": [
            "(line 112,col 9)-(line 114,col 9)",
            "(line 115,col 9)-(line 115,col 58)",
            "(line 116,col 9)-(line 116,col 57)",
            "(line 117,col 9)-(line 121,col 9)",
            "(line 122,col 9)-(line 126,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang.SystemUtilsTest.getJavaVersionTrimmed()",
        "snippet": "    private String getJavaVersionTrimmed() {\n        if (JAVA_VERSION != null) {\n            for (int i = 0; i < JAVA_VERSION.length(); i++) {\n                char ch = JAVA_VERSION.charAt(i);\n                if (ch >= '0' && ch <= '9') {\n                    return JAVA_VERSION.substring(i);\n                }\n            }\n        }\n        return null;\n    }",
        "begin_line": 134,
        "end_line": 144,
        "comment": "\n     * Trims the text of the java version to start with numbers.\n     * \n     * @return the trimmed java version\n     ",
        "child_ranges": [
            "(line 135,col 9)-(line 142,col 9)",
            "(line 143,col 9)-(line 143,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang.SystemUtilsTest.getJavaVersionMatches(java.lang.String)",
        "snippet": "    private boolean getJavaVersionMatches(String versionPrefix) {\n        if (JAVA_VERSION_TRIMMED == null) {\n            return false;\n        }\n        return JAVA_VERSION_TRIMMED.startsWith(versionPrefix);\n    }",
        "begin_line": 153,
        "end_line": 158,
        "comment": "\n     * Decides if the java version matches.\n     * \n     * @param versionPrefix\n     *                  the prefix for the java version\n     * @return true if matches, or false if not or can't determine\n     ",
        "child_ranges": [
            "(line 154,col 9)-(line 156,col 9)",
            "(line 157,col 9)-(line 157,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang.SystemUtilsTest.getOSMatches(java.lang.String)",
        "snippet": "    private boolean getOSMatches(String osNamePrefix) {\n        if (OS_NAME == null) {\n            return false;\n        }\n        return OS_NAME.startsWith(osNamePrefix);\n    }",
        "begin_line": 167,
        "end_line": 172,
        "comment": "\n     * Decides if the operating system matches.\n     * \n     * @param osNamePrefix\n     *                  the prefix for the os name\n     * @return true if matches, or false if not or can't determine\n     ",
        "child_ranges": [
            "(line 168,col 9)-(line 170,col 9)",
            "(line 171,col 9)-(line 171,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang.SystemUtilsTest.getOSMatches(java.lang.String, java.lang.String)",
        "snippet": "    private boolean getOSMatches(String osNamePrefix, String osVersionPrefix) {\n        if (OS_NAME == null || OS_VERSION == null) {\n            return false;\n        }\n        return OS_NAME.startsWith(osNamePrefix) && OS_VERSION.startsWith(osVersionPrefix);\n    }",
        "begin_line": 183,
        "end_line": 188,
        "comment": "\n     * Decides if the operating system matches.\n     * \n     * @param osNamePrefix\n     *                  the prefix for the os name\n     * @param osVersionPrefix\n     *                  the prefix for the version\n     * @return true if matches, or false if not or can't determine\n     ",
        "child_ranges": [
            "(line 184,col 9)-(line 186,col 9)",
            "(line 187,col 9)-(line 187,col 90)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang.SystemUtilsTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        super.setUp();\n    }",
        "begin_line": 190,
        "end_line": 192,
        "comment": "",
        "child_ranges": [
            "(line 191,col 9)-(line 191,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang.SystemUtilsTest.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        super.tearDown();\n    }",
        "begin_line": 194,
        "end_line": 196,
        "comment": "",
        "child_ranges": [
            "(line 195,col 9)-(line 195,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang.SystemUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new SystemUtils());\n        Constructor[] cons = SystemUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(SystemUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(SystemUtils.class.getModifiers()));\n    }",
        "begin_line": 199,
        "end_line": 206,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 200,col 9)-(line 200,col 41)",
            "(line 201,col 9)-(line 201,col 73)",
            "(line 202,col 9)-(line 202,col 37)",
            "(line 203,col 9)-(line 203,col 70)",
            "(line 204,col 9)-(line 204,col 80)",
            "(line 205,col 9)-(line 205,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang.SystemUtilsTest.testGetJavaHome()",
        "snippet": "    public void testGetJavaHome() {\n        File dir = SystemUtils.getJavaHome();\n        Assert.assertNotNull(dir);\n        Assert.assertTrue(dir.exists());\n    }",
        "begin_line": 211,
        "end_line": 215,
        "comment": "\n     * Assums no security manager exists.\n     ",
        "child_ranges": [
            "(line 212,col 9)-(line 212,col 45)",
            "(line 213,col 9)-(line 213,col 34)",
            "(line 214,col 9)-(line 214,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang.SystemUtilsTest.testGetJavaIoTmpDir()",
        "snippet": "    public void testGetJavaIoTmpDir() {\n        File dir = SystemUtils.getJavaIoTmpDir();\n        Assert.assertNotNull(dir);\n        Assert.assertTrue(dir.exists());\n    }",
        "begin_line": 220,
        "end_line": 224,
        "comment": "\n     * Assums no security manager exists.\n     ",
        "child_ranges": [
            "(line 221,col 9)-(line 221,col 49)",
            "(line 222,col 9)-(line 222,col 34)",
            "(line 223,col 9)-(line 223,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang.SystemUtilsTest.testGetUserDir()",
        "snippet": "    public void testGetUserDir() {\n        File dir = SystemUtils.getUserDir();\n        Assert.assertNotNull(dir);\n        Assert.assertTrue(dir.exists());\n    }",
        "begin_line": 229,
        "end_line": 233,
        "comment": "\n     * Assums no security manager exists.\n     ",
        "child_ranges": [
            "(line 230,col 9)-(line 230,col 44)",
            "(line 231,col 9)-(line 231,col 34)",
            "(line 232,col 9)-(line 232,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang.SystemUtilsTest.testGetUserHome()",
        "snippet": "    public void testGetUserHome() {\n        File dir = SystemUtils.getUserHome();\n        Assert.assertNotNull(dir);\n        Assert.assertTrue(dir.exists());\n    }",
        "begin_line": 238,
        "end_line": 242,
        "comment": "\n     * Assums no security manager exists.\n     ",
        "child_ranges": [
            "(line 239,col 9)-(line 239,col 45)",
            "(line 240,col 9)-(line 240,col 34)",
            "(line 241,col 9)-(line 241,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang.SystemUtilsTest.testIS_JAVA()",
        "snippet": "    public void testIS_JAVA() {\n        String javaVersion = System.getProperty(\"java.version\");\n        if (javaVersion == null) {\n            assertEquals(false, SystemUtils.IS_JAVA_1_1);\n            assertEquals(false, SystemUtils.IS_JAVA_1_2);\n            assertEquals(false, SystemUtils.IS_JAVA_1_3);\n            assertEquals(false, SystemUtils.IS_JAVA_1_4);\n            assertEquals(false, SystemUtils.IS_JAVA_1_5);\n            assertEquals(false, SystemUtils.IS_JAVA_1_6);\n        } else if (javaVersion.startsWith(\"1.1\")) {\n            assertEquals(true, SystemUtils.IS_JAVA_1_1);\n            assertEquals(false, SystemUtils.IS_JAVA_1_2);\n            assertEquals(false, SystemUtils.IS_JAVA_1_3);\n            assertEquals(false, SystemUtils.IS_JAVA_1_4);\n            assertEquals(false, SystemUtils.IS_JAVA_1_5);\n            assertEquals(false, SystemUtils.IS_JAVA_1_6);\n        } else if (javaVersion.startsWith(\"1.2\")) {\n            assertEquals(false, SystemUtils.IS_JAVA_1_1);\n            assertEquals(true, SystemUtils.IS_JAVA_1_2);\n            assertEquals(false, SystemUtils.IS_JAVA_1_3);\n            assertEquals(false, SystemUtils.IS_JAVA_1_4);\n            assertEquals(false, SystemUtils.IS_JAVA_1_5);\n            assertEquals(false, SystemUtils.IS_JAVA_1_6);\n        } else if (javaVersion.startsWith(\"1.3\")) {\n            assertEquals(false, SystemUtils.IS_JAVA_1_1);\n            assertEquals(false, SystemUtils.IS_JAVA_1_2);\n            assertEquals(true, SystemUtils.IS_JAVA_1_3);\n            assertEquals(false, SystemUtils.IS_JAVA_1_4);\n            assertEquals(false, SystemUtils.IS_JAVA_1_5);\n            assertEquals(false, SystemUtils.IS_JAVA_1_6);\n        } else if (javaVersion.startsWith(\"1.4\")) {\n            assertEquals(false, SystemUtils.IS_JAVA_1_1);\n            assertEquals(false, SystemUtils.IS_JAVA_1_2);\n            assertEquals(false, SystemUtils.IS_JAVA_1_3);\n            assertEquals(true, SystemUtils.IS_JAVA_1_4);\n            assertEquals(false, SystemUtils.IS_JAVA_1_5);\n            assertEquals(false, SystemUtils.IS_JAVA_1_6);\n        } else if (javaVersion.startsWith(\"1.5\")) {\n            assertEquals(false, SystemUtils.IS_JAVA_1_1);\n            assertEquals(false, SystemUtils.IS_JAVA_1_2);\n            assertEquals(false, SystemUtils.IS_JAVA_1_3);\n            assertEquals(false, SystemUtils.IS_JAVA_1_4);\n            assertEquals(true, SystemUtils.IS_JAVA_1_5);\n            assertEquals(false, SystemUtils.IS_JAVA_1_6);\n        } else if (javaVersion.startsWith(\"1.6\")) {\n            assertEquals(false, SystemUtils.IS_JAVA_1_1);\n            assertEquals(false, SystemUtils.IS_JAVA_1_2);\n            assertEquals(false, SystemUtils.IS_JAVA_1_3);\n            assertEquals(false, SystemUtils.IS_JAVA_1_4);\n            assertEquals(false, SystemUtils.IS_JAVA_1_5);\n            assertEquals(true, SystemUtils.IS_JAVA_1_6);\n        } else {\n            System.out.println(\"Can't test IS_JAVA value\");\n        }\n    }",
        "begin_line": 244,
        "end_line": 298,
        "comment": "",
        "child_ranges": [
            "(line 245,col 9)-(line 245,col 64)",
            "(line 246,col 9)-(line 297,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang.SystemUtilsTest.testIS_OS()",
        "snippet": "    public void testIS_OS() {\n        String osName = System.getProperty(\"os.name\");\n        if (osName == null) {\n            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n            assertEquals(false, SystemUtils.IS_OS_UNIX);\n            assertEquals(false, SystemUtils.IS_OS_SOLARIS);\n            assertEquals(false, SystemUtils.IS_OS_LINUX);\n            assertEquals(false, SystemUtils.IS_OS_MAC_OSX);\n        } else if (osName.startsWith(\"Windows\")) {\n            assertEquals(false, SystemUtils.IS_OS_UNIX);\n            assertEquals(true, SystemUtils.IS_OS_WINDOWS);\n        } else if (osName.startsWith(\"Solaris\")) {\n            assertEquals(true, SystemUtils.IS_OS_SOLARIS);\n            assertEquals(true, SystemUtils.IS_OS_UNIX);\n            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n        } else if (osName.toLowerCase().startsWith(\"linux\")) {\n            assertEquals(true, SystemUtils.IS_OS_LINUX);\n            assertEquals(true, SystemUtils.IS_OS_UNIX);\n            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n        } else if (osName.startsWith(\"Mac OS X\")) {\n            assertEquals(true, SystemUtils.IS_OS_MAC_OSX);\n            assertEquals(true, SystemUtils.IS_OS_UNIX);\n            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n        } else if (osName.startsWith(\"OS/2\")) {\n            assertEquals(true, SystemUtils.IS_OS_OS2);\n            assertEquals(false, SystemUtils.IS_OS_UNIX);\n            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n        } else if (osName.startsWith(\"SunOS\")) {\n            assertEquals(true, SystemUtils.IS_OS_SUN_OS);\n            assertEquals(true, SystemUtils.IS_OS_UNIX);\n            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n        } else {\n            System.out.println(\"Can't test IS_OS value\");\n        }\n    }",
        "begin_line": 300,
        "end_line": 334,
        "comment": "",
        "child_ranges": [
            "(line 301,col 9)-(line 301,col 54)",
            "(line 302,col 9)-(line 333,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang.SystemUtilsTest.testDeprecatedJavaVersion()",
        "snippet": "    public void testDeprecatedJavaVersion() {\n        assertEquals(SystemUtils.JAVA_VERSION_FLOAT, SystemUtils.getJavaVersion(), 0f);\n    }",
        "begin_line": 337,
        "end_line": 339,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 338,col 9)-(line 338,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang.SystemUtilsTest.testJavaVersionAsFloat()",
        "snippet": "    public void testJavaVersionAsFloat() {\n        JAVA_VERSION = null;\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(0f, getJavaVersionAsFloat(), 0.000001f);\n        JAVA_VERSION = \"1.1\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(1.1f, getJavaVersionAsFloat(), 0.000001f);\n        JAVA_VERSION = \"1.2\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(1.2f, getJavaVersionAsFloat(), 0.000001f);\n        JAVA_VERSION = \"1.3.0\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(1.3f, getJavaVersionAsFloat(), 0.000001f);\n        JAVA_VERSION = \"1.3.1\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(1.31f, getJavaVersionAsFloat(), 0.000001f);\n        JAVA_VERSION = \"1.4.0\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(1.4f, getJavaVersionAsFloat(), 0.000001f);\n        JAVA_VERSION = \"1.4.1\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(1.41f, getJavaVersionAsFloat(), 0.000001f);\n        JAVA_VERSION = \"1.5.0\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(1.5f, getJavaVersionAsFloat(), 0.000001f);\n        JAVA_VERSION = \"1.6.0\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(1.6f, getJavaVersionAsFloat(), 0.000001f);\n        JAVA_VERSION = \"JavaVM-1.3.1\";  //HP-UX\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(1.31f, getJavaVersionAsFloat(), 0.000001f);\n        JAVA_VERSION = \"XXX-1.3.x\";  //error\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(0.0f, getJavaVersionAsFloat(), 0.000001f);\n    }",
        "begin_line": 341,
        "end_line": 375,
        "comment": "",
        "child_ranges": [
            "(line 342,col 9)-(line 342,col 28)",
            "(line 343,col 9)-(line 343,col 55)",
            "(line 344,col 9)-(line 344,col 61)",
            "(line 345,col 9)-(line 345,col 29)",
            "(line 346,col 9)-(line 346,col 55)",
            "(line 347,col 9)-(line 347,col 63)",
            "(line 348,col 9)-(line 348,col 29)",
            "(line 349,col 9)-(line 349,col 55)",
            "(line 350,col 9)-(line 350,col 63)",
            "(line 351,col 9)-(line 351,col 31)",
            "(line 352,col 9)-(line 352,col 55)",
            "(line 353,col 9)-(line 353,col 63)",
            "(line 354,col 9)-(line 354,col 31)",
            "(line 355,col 9)-(line 355,col 55)",
            "(line 356,col 9)-(line 356,col 64)",
            "(line 357,col 9)-(line 357,col 31)",
            "(line 358,col 9)-(line 358,col 55)",
            "(line 359,col 9)-(line 359,col 63)",
            "(line 360,col 9)-(line 360,col 31)",
            "(line 361,col 9)-(line 361,col 55)",
            "(line 362,col 9)-(line 362,col 64)",
            "(line 363,col 9)-(line 363,col 31)",
            "(line 364,col 9)-(line 364,col 55)",
            "(line 365,col 9)-(line 365,col 63)",
            "(line 366,col 9)-(line 366,col 31)",
            "(line 367,col 9)-(line 367,col 55)",
            "(line 368,col 9)-(line 368,col 63)",
            "(line 369,col 9)-(line 369,col 38)",
            "(line 370,col 9)-(line 370,col 55)",
            "(line 371,col 9)-(line 371,col 64)",
            "(line 372,col 9)-(line 372,col 35)",
            "(line 373,col 9)-(line 373,col 55)",
            "(line 374,col 9)-(line 374,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang.SystemUtilsTest.testJavaVersionAsInt()",
        "snippet": "    public void testJavaVersionAsInt() {\n        JAVA_VERSION = null;\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(0, getJavaVersionAsInt());\n        JAVA_VERSION = \"1.1\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(110, getJavaVersionAsInt());\n        JAVA_VERSION = \"1.2\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(120, getJavaVersionAsInt());\n        JAVA_VERSION = \"1.3.0\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(130, getJavaVersionAsInt());\n        JAVA_VERSION = \"1.3.1\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(131, getJavaVersionAsInt());\n        JAVA_VERSION = \"1.4.0\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(140, getJavaVersionAsInt());\n        JAVA_VERSION = \"1.4.1\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(141, getJavaVersionAsInt());\n        JAVA_VERSION = \"1.5.0\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(150, getJavaVersionAsInt());\n        JAVA_VERSION = \"1.6.0\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(160, getJavaVersionAsInt());\n        JAVA_VERSION = \"JavaVM-1.3.1\";  //HP-UX\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(131, getJavaVersionAsInt());\n        JAVA_VERSION = \"XXX-1.3.x\";  //error\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(0, getJavaVersionAsInt());\n    }",
        "begin_line": 377,
        "end_line": 411,
        "comment": "",
        "child_ranges": [
            "(line 378,col 9)-(line 378,col 28)",
            "(line 379,col 9)-(line 379,col 55)",
            "(line 380,col 9)-(line 380,col 47)",
            "(line 381,col 9)-(line 381,col 29)",
            "(line 382,col 9)-(line 382,col 55)",
            "(line 383,col 9)-(line 383,col 49)",
            "(line 384,col 9)-(line 384,col 29)",
            "(line 385,col 9)-(line 385,col 55)",
            "(line 386,col 9)-(line 386,col 49)",
            "(line 387,col 9)-(line 387,col 31)",
            "(line 388,col 9)-(line 388,col 55)",
            "(line 389,col 9)-(line 389,col 49)",
            "(line 390,col 9)-(line 390,col 31)",
            "(line 391,col 9)-(line 391,col 55)",
            "(line 392,col 9)-(line 392,col 49)",
            "(line 393,col 9)-(line 393,col 31)",
            "(line 394,col 9)-(line 394,col 55)",
            "(line 395,col 9)-(line 395,col 49)",
            "(line 396,col 9)-(line 396,col 31)",
            "(line 397,col 9)-(line 397,col 55)",
            "(line 398,col 9)-(line 398,col 49)",
            "(line 399,col 9)-(line 399,col 31)",
            "(line 400,col 9)-(line 400,col 55)",
            "(line 401,col 9)-(line 401,col 49)",
            "(line 402,col 9)-(line 402,col 31)",
            "(line 403,col 9)-(line 403,col 55)",
            "(line 404,col 9)-(line 404,col 49)",
            "(line 405,col 9)-(line 405,col 38)",
            "(line 406,col 9)-(line 406,col 55)",
            "(line 407,col 9)-(line 407,col 49)",
            "(line 408,col 9)-(line 408,col 35)",
            "(line 409,col 9)-(line 409,col 55)",
            "(line 410,col 9)-(line 410,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang.SystemUtilsTest.testJavaVersionAtLeastFloat()",
        "snippet": "    public void testJavaVersionAtLeastFloat() {\n        float version = SystemUtils.JAVA_VERSION_FLOAT;\n        assertEquals(true, SystemUtils.isJavaVersionAtLeast(version));\n        version -= 0.1f;\n        assertEquals(true, SystemUtils.isJavaVersionAtLeast(version));\n        version += 0.2f;\n        assertEquals(false, SystemUtils.isJavaVersionAtLeast(version));\n    }",
        "begin_line": 413,
        "end_line": 420,
        "comment": "",
        "child_ranges": [
            "(line 414,col 9)-(line 414,col 55)",
            "(line 415,col 9)-(line 415,col 70)",
            "(line 416,col 9)-(line 416,col 24)",
            "(line 417,col 9)-(line 417,col 70)",
            "(line 418,col 9)-(line 418,col 24)",
            "(line 419,col 9)-(line 419,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang.SystemUtilsTest.testJavaVersionAtLeastInt()",
        "snippet": "    public void testJavaVersionAtLeastInt() {\n        int version = SystemUtils.JAVA_VERSION_INT;\n        assertEquals(true, SystemUtils.isJavaVersionAtLeast(version));\n        version -= 10;\n        assertEquals(true, SystemUtils.isJavaVersionAtLeast(version));\n        version += 20;\n        assertEquals(false, SystemUtils.isJavaVersionAtLeast(version));\n    }",
        "begin_line": 422,
        "end_line": 429,
        "comment": "",
        "child_ranges": [
            "(line 423,col 9)-(line 423,col 51)",
            "(line 424,col 9)-(line 424,col 70)",
            "(line 425,col 9)-(line 425,col 22)",
            "(line 426,col 9)-(line 426,col 70)",
            "(line 427,col 9)-(line 427,col 22)",
            "(line 428,col 9)-(line 428,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang.SystemUtilsTest.testJavaVersionMatches()",
        "snippet": "    public void testJavaVersionMatches() {\n        JAVA_VERSION = null;\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n        JAVA_VERSION = \"1.1\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(true, getJavaVersionMatches(\"1.1\"));\n        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n        JAVA_VERSION = \"1.2\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n        assertEquals(true, getJavaVersionMatches(\"1.2\"));\n        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n        JAVA_VERSION = \"1.3.0\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n        assertEquals(true, getJavaVersionMatches(\"1.3\"));\n        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n        JAVA_VERSION = \"1.3.1\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n        assertEquals(true, getJavaVersionMatches(\"1.3\"));\n        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n        JAVA_VERSION = \"1.4.0\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n        assertEquals(true, getJavaVersionMatches(\"1.4\"));\n        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n        JAVA_VERSION = \"1.4.1\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n        assertEquals(true, getJavaVersionMatches(\"1.4\"));\n        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n        JAVA_VERSION = \"1.5.0\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n        assertEquals(true, getJavaVersionMatches(\"1.5\"));\n        JAVA_VERSION = \"1.6.0\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n    }",
        "begin_line": 432,
        "end_line": 496,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 433,col 9)-(line 433,col 28)",
            "(line 434,col 9)-(line 434,col 55)",
            "(line 435,col 9)-(line 435,col 58)",
            "(line 436,col 9)-(line 436,col 58)",
            "(line 437,col 9)-(line 437,col 58)",
            "(line 438,col 9)-(line 438,col 58)",
            "(line 439,col 9)-(line 439,col 58)",
            "(line 440,col 9)-(line 440,col 29)",
            "(line 441,col 9)-(line 441,col 55)",
            "(line 442,col 9)-(line 442,col 57)",
            "(line 443,col 9)-(line 443,col 58)",
            "(line 444,col 9)-(line 444,col 58)",
            "(line 445,col 9)-(line 445,col 58)",
            "(line 446,col 9)-(line 446,col 58)",
            "(line 447,col 9)-(line 447,col 29)",
            "(line 448,col 9)-(line 448,col 55)",
            "(line 449,col 9)-(line 449,col 58)",
            "(line 450,col 9)-(line 450,col 57)",
            "(line 451,col 9)-(line 451,col 58)",
            "(line 452,col 9)-(line 452,col 58)",
            "(line 453,col 9)-(line 453,col 58)",
            "(line 454,col 9)-(line 454,col 31)",
            "(line 455,col 9)-(line 455,col 55)",
            "(line 456,col 9)-(line 456,col 58)",
            "(line 457,col 9)-(line 457,col 58)",
            "(line 458,col 9)-(line 458,col 57)",
            "(line 459,col 9)-(line 459,col 58)",
            "(line 460,col 9)-(line 460,col 58)",
            "(line 461,col 9)-(line 461,col 31)",
            "(line 462,col 9)-(line 462,col 55)",
            "(line 463,col 9)-(line 463,col 58)",
            "(line 464,col 9)-(line 464,col 58)",
            "(line 465,col 9)-(line 465,col 57)",
            "(line 466,col 9)-(line 466,col 58)",
            "(line 467,col 9)-(line 467,col 58)",
            "(line 468,col 9)-(line 468,col 31)",
            "(line 469,col 9)-(line 469,col 55)",
            "(line 470,col 9)-(line 470,col 58)",
            "(line 471,col 9)-(line 471,col 58)",
            "(line 472,col 9)-(line 472,col 58)",
            "(line 473,col 9)-(line 473,col 57)",
            "(line 474,col 9)-(line 474,col 58)",
            "(line 475,col 9)-(line 475,col 31)",
            "(line 476,col 9)-(line 476,col 55)",
            "(line 477,col 9)-(line 477,col 58)",
            "(line 478,col 9)-(line 478,col 58)",
            "(line 479,col 9)-(line 479,col 58)",
            "(line 480,col 9)-(line 480,col 57)",
            "(line 481,col 9)-(line 481,col 58)",
            "(line 482,col 9)-(line 482,col 31)",
            "(line 483,col 9)-(line 483,col 55)",
            "(line 484,col 9)-(line 484,col 58)",
            "(line 485,col 9)-(line 485,col 58)",
            "(line 486,col 9)-(line 486,col 58)",
            "(line 487,col 9)-(line 487,col 58)",
            "(line 488,col 9)-(line 488,col 57)",
            "(line 489,col 9)-(line 489,col 31)",
            "(line 490,col 9)-(line 490,col 55)",
            "(line 491,col 9)-(line 491,col 58)",
            "(line 492,col 9)-(line 492,col 58)",
            "(line 493,col 9)-(line 493,col 58)",
            "(line 494,col 9)-(line 494,col 58)",
            "(line 495,col 9)-(line 495,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang.SystemUtilsTest.testOSMatches()",
        "snippet": "    public void testOSMatches() {\n        OS_NAME = null;\n        assertEquals(false, getOSMatches(\"Windows\"));\n        OS_NAME = \"Windows 95\";\n        assertEquals(true, getOSMatches(\"Windows\"));\n        OS_NAME = \"Windows NT\";\n        assertEquals(true, getOSMatches(\"Windows\"));\n        OS_NAME = \"OS/2\";\n        assertEquals(false, getOSMatches(\"Windows\"));\n    }",
        "begin_line": 498,
        "end_line": 507,
        "comment": "",
        "child_ranges": [
            "(line 499,col 9)-(line 499,col 23)",
            "(line 500,col 9)-(line 500,col 53)",
            "(line 501,col 9)-(line 501,col 31)",
            "(line 502,col 9)-(line 502,col 52)",
            "(line 503,col 9)-(line 503,col 31)",
            "(line 504,col 9)-(line 504,col 52)",
            "(line 505,col 9)-(line 505,col 25)",
            "(line 506,col 9)-(line 506,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang.SystemUtilsTest.testOSMatches2()",
        "snippet": "    public void testOSMatches2() {\n        OS_NAME = null;\n        OS_VERSION = null;\n        assertEquals(false, getOSMatches(\"Windows 9\", \"4.1\"));\n        OS_NAME = \"Windows 95\";\n        OS_VERSION = \"4.0\";\n        assertEquals(false, getOSMatches(\"Windows 9\", \"4.1\"));\n        OS_NAME = \"Windows 95\";\n        OS_VERSION = \"4.1\";\n        assertEquals(true, getOSMatches(\"Windows 9\", \"4.1\"));\n        OS_NAME = \"Windows 98\";\n        OS_VERSION = \"4.1\";\n        assertEquals(true, getOSMatches(\"Windows 9\", \"4.1\"));\n        OS_NAME = \"Windows NT\";\n        OS_VERSION = \"4.0\";\n        assertEquals(false, getOSMatches(\"Windows 9\", \"4.1\"));\n        OS_NAME = \"OS/2\";\n        OS_VERSION = \"4.0\";\n        assertEquals(false, getOSMatches(\"Windows 9\", \"4.1\"));\n    }",
        "begin_line": 509,
        "end_line": 528,
        "comment": "",
        "child_ranges": [
            "(line 510,col 9)-(line 510,col 23)",
            "(line 511,col 9)-(line 511,col 26)",
            "(line 512,col 9)-(line 512,col 62)",
            "(line 513,col 9)-(line 513,col 31)",
            "(line 514,col 9)-(line 514,col 27)",
            "(line 515,col 9)-(line 515,col 62)",
            "(line 516,col 9)-(line 516,col 31)",
            "(line 517,col 9)-(line 517,col 27)",
            "(line 518,col 9)-(line 518,col 61)",
            "(line 519,col 9)-(line 519,col 31)",
            "(line 520,col 9)-(line 520,col 27)",
            "(line 521,col 9)-(line 521,col 61)",
            "(line 522,col 9)-(line 522,col 31)",
            "(line 523,col 9)-(line 523,col 27)",
            "(line 524,col 9)-(line 524,col 62)",
            "(line 525,col 9)-(line 525,col 25)",
            "(line 526,col 9)-(line 526,col 27)",
            "(line 527,col 9)-(line 527,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang.SystemUtilsTest.testJavaAwtHeadless()",
        "snippet": "    public void testJavaAwtHeadless() {\n        boolean atLeastJava14 = SystemUtils.isJavaVersionAtLeast(140);\n        String expectedStringValue = System.getProperty(\"java.awt.headless\");\n        String expectedStringValueWithDefault = System.getProperty(\"java.awt.headless\", \"false\");\n        assertNotNull(expectedStringValueWithDefault);\n        if (atLeastJava14) {\n            boolean expectedValue = Boolean.valueOf(expectedStringValue).booleanValue();\n            if (expectedStringValue != null) {\n                assertEquals(expectedStringValue, SystemUtils.JAVA_AWT_HEADLESS);\n            }\n            assertEquals(expectedValue, SystemUtils.isJavaAwtHeadless());\n        } else {\n            assertNull(expectedStringValue);\n            assertNull(SystemUtils.JAVA_AWT_HEADLESS);\n            assertEquals(expectedStringValueWithDefault, \"\" + SystemUtils.isJavaAwtHeadless());\n        }\n        assertEquals(expectedStringValueWithDefault, \"\" + SystemUtils.isJavaAwtHeadless());\n    }",
        "begin_line": 530,
        "end_line": 547,
        "comment": "",
        "child_ranges": [
            "(line 531,col 9)-(line 531,col 70)",
            "(line 532,col 9)-(line 532,col 77)",
            "(line 533,col 9)-(line 533,col 97)",
            "(line 534,col 9)-(line 534,col 54)",
            "(line 535,col 9)-(line 545,col 9)",
            "(line 546,col 9)-(line 546,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.IncompleteArgumentExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/IncompleteArgumentExceptionTest.java",
        "signature": "org.apache.commons.lang.IncompleteArgumentExceptionTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 33,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.IncompleteArgumentExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/IncompleteArgumentExceptionTest.java",
        "signature": "org.apache.commons.lang.IncompleteArgumentExceptionTest.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(IncompleteArgumentExceptionTest.class);\n    }",
        "begin_line": 37,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.IncompleteArgumentExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/IncompleteArgumentExceptionTest.java",
        "signature": "org.apache.commons.lang.IncompleteArgumentExceptionTest.IncompleteArgumentExceptionTest(java.lang.String)",
        "snippet": "    public IncompleteArgumentExceptionTest(String testName) {\n        super(testName);\n    }",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.IncompleteArgumentExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/IncompleteArgumentExceptionTest.java",
        "signature": "org.apache.commons.lang.IncompleteArgumentExceptionTest.test1arg_nullInput()",
        "snippet": "    public void test1arg_nullInput() {\n        final Throwable t = new IncompleteArgumentException(null);\n        assertEquals(\"null is incomplete.\", t.getMessage());\n    }",
        "begin_line": 47,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 66)",
            "(line 49,col 9)-(line 49,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.IncompleteArgumentExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/IncompleteArgumentExceptionTest.java",
        "signature": "org.apache.commons.lang.IncompleteArgumentExceptionTest.test1arg_validInput()",
        "snippet": "    public void test1arg_validInput() {\n        final String name = \"argument\";\n        final Throwable t = new IncompleteArgumentException(name);\n        assertEquals(name + \" is incomplete.\", t.getMessage());\n    }",
        "begin_line": 52,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 39)",
            "(line 54,col 9)-(line 54,col 66)",
            "(line 55,col 9)-(line 55,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.IncompleteArgumentExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/IncompleteArgumentExceptionTest.java",
        "signature": "org.apache.commons.lang.IncompleteArgumentExceptionTest.test2arg_allNullInput()",
        "snippet": "    public void test2arg_allNullInput() {\n        final Throwable t = new IncompleteArgumentException(null, null);\n        assertEquals(\n            \"null is missing the following items: null\",\n            t.getMessage());\n    }",
        "begin_line": 58,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 72)",
            "(line 60,col 9)-(line 62,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.IncompleteArgumentExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/IncompleteArgumentExceptionTest.java",
        "signature": "org.apache.commons.lang.IncompleteArgumentExceptionTest.test2arg_nullString()",
        "snippet": "    public void test2arg_nullString() {\n        final Throwable t =\n            new IncompleteArgumentException(\n                null,\n                new String[] { \"one\", \"two\" });\n        assertEquals(\n            \"null is missing the following items: [one, two]\",\n            t.getMessage());\n    }",
        "begin_line": 65,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 69,col 47)",
            "(line 70,col 9)-(line 72,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.IncompleteArgumentExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/IncompleteArgumentExceptionTest.java",
        "signature": "org.apache.commons.lang.IncompleteArgumentExceptionTest.test2arg_nullArray()",
        "snippet": "    public void test2arg_nullArray() {\n        final String name = \"one\";\n        final Throwable t = new IncompleteArgumentException(name, null);\n        assertEquals(\n            name + \" is missing the following items: null\",\n            t.getMessage());\n    }",
        "begin_line": 75,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 34)",
            "(line 77,col 9)-(line 77,col 72)",
            "(line 78,col 9)-(line 80,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.IncompleteArgumentExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/IncompleteArgumentExceptionTest.java",
        "signature": "org.apache.commons.lang.IncompleteArgumentExceptionTest.test2arg_validInput()",
        "snippet": "    public void test2arg_validInput() {\n        final String name = \"input\";\n        final Throwable t =\n            new IncompleteArgumentException(\n                name,\n                new String[] { \"one\", \"two\" });\n        assertEquals(\n            name + \" is missing the following items: [one, two]\",\n            t.getMessage());\n    }",
        "begin_line": 83,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 36)",
            "(line 85,col 9)-(line 88,col 47)",
            "(line 89,col 9)-(line 91,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharEncodingTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharEncodingTest.java",
        "signature": "org.apache.commons.lang.CharEncodingTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 34,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharEncodingTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharEncodingTest.java",
        "signature": "org.apache.commons.lang.CharEncodingTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(CharEncodingTest.class);\n        suite.setName(\"CharEncoding Tests\");\n        return suite;\n    }",
        "begin_line": 38,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 64)",
            "(line 40,col 9)-(line 40,col 44)",
            "(line 41,col 9)-(line 41,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharEncodingTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharEncodingTest.java",
        "signature": "org.apache.commons.lang.CharEncodingTest.assertSupportedEncoding(java.lang.String)",
        "snippet": "    private void assertSupportedEncoding(String name) {\n        assertTrue(\"Encoding should be supported: \" + name, CharEncoding.isSupported(name));\n    }",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharEncodingTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharEncodingTest.java",
        "signature": "org.apache.commons.lang.CharEncodingTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        new CharEncoding();\n    }",
        "begin_line": 51,
        "end_line": 53,
        "comment": "\n     * The class can be instantiated.\n     ",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharEncodingTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharEncodingTest.java",
        "signature": "org.apache.commons.lang.CharEncodingTest.testMustBeSupportedJava1_3_1()",
        "snippet": "    public void testMustBeSupportedJava1_3_1() {\n        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {\n            this.assertSupportedEncoding(CharEncoding.ISO_8859_1);\n            this.assertSupportedEncoding(CharEncoding.US_ASCII);\n            this.assertSupportedEncoding(CharEncoding.UTF_16);\n            this.assertSupportedEncoding(CharEncoding.UTF_16BE);\n            this.assertSupportedEncoding(CharEncoding.UTF_16LE);\n            this.assertSupportedEncoding(CharEncoding.UTF_8);\n        } else {\n            this.warn(\"Java 1.3 tests not run since the current version is \" + SystemUtils.JAVA_VERSION);\n        }\n    }",
        "begin_line": 55,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 65,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharEncodingTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharEncodingTest.java",
        "signature": "org.apache.commons.lang.CharEncodingTest.testNotSupported()",
        "snippet": "    public void testNotSupported() {\n        assertFalse(CharEncoding.isSupported(null));\n        assertFalse(CharEncoding.isSupported(\"\"));\n        assertFalse(CharEncoding.isSupported(\" \"));\n        assertFalse(CharEncoding.isSupported(\"\\t\\r\\n\"));\n        assertFalse(CharEncoding.isSupported(\"DOESNOTEXIST\"));\n        assertFalse(CharEncoding.isSupported(\"this is not a valid encoding name\"));\n    }",
        "begin_line": 68,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 52)",
            "(line 70,col 9)-(line 70,col 50)",
            "(line 71,col 9)-(line 71,col 51)",
            "(line 72,col 9)-(line 72,col 56)",
            "(line 73,col 9)-(line 73,col 62)",
            "(line 74,col 9)-(line 74,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharEncodingTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharEncodingTest.java",
        "signature": "org.apache.commons.lang.CharEncodingTest.testWorksOnJava1_1_8()",
        "snippet": "    public void testWorksOnJava1_1_8() {\n        //\n        // In this test, I simply deleted the encodings from the 1.3.1 list.\n        // The Javadoc do not specify which encodings are required.\n        //\n        if (SystemUtils.isJavaVersionAtLeast(1.1f)) {\n            this.assertSupportedEncoding(CharEncoding.ISO_8859_1);\n            this.assertSupportedEncoding(CharEncoding.US_ASCII);\n            this.assertSupportedEncoding(CharEncoding.UTF_8);\n        } else {\n            this.warn(\"Java 1.1 tests not run since the current version is \" + SystemUtils.JAVA_VERSION);\n        }\n    }",
        "begin_line": 77,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 82,col 9)-(line 88,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharEncodingTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharEncodingTest.java",
        "signature": "org.apache.commons.lang.CharEncodingTest.testWorksOnJava1_2_2()",
        "snippet": "    public void testWorksOnJava1_2_2() {\n        //\n        // In this test, I simply deleted the encodings from the 1.3.1 list.\n        // The Javadoc do not specify which encodings are required.\n        //\n        if (SystemUtils.isJavaVersionAtLeast(1.2f)) {\n            this.assertSupportedEncoding(CharEncoding.ISO_8859_1);\n            this.assertSupportedEncoding(CharEncoding.US_ASCII);\n            this.assertSupportedEncoding(CharEncoding.UTF_8);\n        } else {\n            this.warn(\"Java 1.2 tests not run since the current version is \" + SystemUtils.JAVA_VERSION);\n        }\n    }",
        "begin_line": 91,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 96,col 9)-(line 102,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharEncodingTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharEncodingTest.java",
        "signature": "org.apache.commons.lang.CharEncodingTest.warn(java.lang.String)",
        "snippet": "    void warn(String msg) {\n        System.err.println(msg);\n    }",
        "begin_line": 105,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.AllLangTestSuite",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/AllLangTestSuite.java",
        "signature": "org.apache.commons.lang.AllLangTestSuite.AllLangTestSuite(java.lang.String)",
        "snippet": "    public AllLangTestSuite(String name) {\n        super(name);\n    }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "\n     * Construct a new instance.\n     ",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.AllLangTestSuite",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/AllLangTestSuite.java",
        "signature": "org.apache.commons.lang.AllLangTestSuite.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 50,
        "end_line": 52,
        "comment": "\n     * Command-line interface.\n     ",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.AllLangTestSuite",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/AllLangTestSuite.java",
        "signature": "org.apache.commons.lang.AllLangTestSuite.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite();\n        suite.setName(\"Commons-Lang (all) Tests\");\n        suite.addTest(LangTestSuite.suite());\n        suite.addTest(BuilderTestSuite.suite());\n        suite.addTest(EnumTestSuite.suite());\n        suite.addTest(org.apache.commons.lang.enum.EnumTestSuite.suite());\n        suite.addTest(ExceptionTestSuite.suite());\n        suite.addTest(MathTestSuite.suite());\n        suite.addTest(MutableTestSuite.suite());\n        suite.addTest(TextTestSuite.suite());\n        suite.addTest(TimeTestSuite.suite());\n        return suite;\n    }",
        "begin_line": 57,
        "end_line": 70,
        "comment": "\n     * Get the suite of tests\n     ",
        "child_ranges": [
            "(line 58,col 9)-(line 58,col 42)",
            "(line 59,col 9)-(line 59,col 50)",
            "(line 60,col 9)-(line 60,col 45)",
            "(line 61,col 9)-(line 61,col 48)",
            "(line 62,col 9)-(line 62,col 45)",
            "(line 64,col 9)-(line 64,col 50)",
            "(line 65,col 9)-(line 65,col 45)",
            "(line 66,col 9)-(line 66,col 48)",
            "(line 67,col 9)-(line 67,col 45)",
            "(line 68,col 9)-(line 68,col 45)",
            "(line 69,col 9)-(line 69,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberRangeTest.java",
        "signature": "org.apache.commons.lang.NumberRangeTest.NumberRangeTest(java.lang.String)",
        "snippet": "    public NumberRangeTest(String name) {\n        super(name);\n    }",
        "begin_line": 45,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberRangeTest.java",
        "signature": "org.apache.commons.lang.NumberRangeTest.setUp()",
        "snippet": "    public void setUp() {\n        five       = new Integer(5);\n        nine      = new Double(9.0);\n        ten        = new Integer(10);\n        fifteen    = new Integer(15);\n        twenty     = new Integer(20);\n        twentyFive = new Integer(25);\n\n        tenToTwenty = new NumberRange(ten, twenty);\n        fifteenToTwentyFive = new NumberRange( fifteen, twentyFive);\n        fiveToNine = new NumberRange( five, nine );\n    }",
        "begin_line": 49,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 36)",
            "(line 51,col 9)-(line 51,col 36)",
            "(line 52,col 9)-(line 52,col 37)",
            "(line 53,col 9)-(line 53,col 37)",
            "(line 54,col 9)-(line 54,col 37)",
            "(line 55,col 9)-(line 55,col 37)",
            "(line 57,col 9)-(line 57,col 51)",
            "(line 58,col 9)-(line 58,col 68)",
            "(line 59,col 9)-(line 59,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberRangeTest.java",
        "signature": "org.apache.commons.lang.NumberRangeTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(NumberRangeTest.class);\n        suite.setName(\"NumberRange Tests\");\n        return suite;\n    }",
        "begin_line": 63,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 63)",
            "(line 65,col 9)-(line 65,col 43)",
            "(line 66,col 9)-(line 66,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberRangeTest.java",
        "signature": "org.apache.commons.lang.NumberRangeTest.testMaxMin()",
        "snippet": "    public void testMaxMin() {\n        boolean expected = true;\n        boolean result = tenToTwenty.getMaximum().equals(twenty);\n        assertEquals(expected, result);\n\n        expected = true;\n        result = tenToTwenty.getMinimum().equals(ten);\n        assertEquals(expected, result);\n    }",
        "begin_line": 69,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 32)",
            "(line 71,col 9)-(line 71,col 65)",
            "(line 72,col 9)-(line 72,col 39)",
            "(line 74,col 9)-(line 74,col 24)",
            "(line 75,col 9)-(line 75,col 54)",
            "(line 76,col 9)-(line 76,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberRangeTest.java",
        "signature": "org.apache.commons.lang.NumberRangeTest.testEquals()",
        "snippet": "    public void testEquals() {\n        boolean expected = false;\n        boolean result = tenToTwenty.equals(new NumberRange(five, ten));\n        assertEquals(expected, result);\n\n        expected = true;\n        result = tenToTwenty.equals(new NumberRange(ten, twenty));\n        assertEquals(expected, result);\n\n        expected = false;\n        result = tenToTwenty.equals(new NumberRange(ten, fifteen));\n        assertEquals(expected, result);\n\n        expected = false;\n        result = tenToTwenty.equals(new NumberRange(fifteen, twenty));\n        assertEquals(expected, result);\n    }",
        "begin_line": 79,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 33)",
            "(line 81,col 9)-(line 81,col 72)",
            "(line 82,col 9)-(line 82,col 39)",
            "(line 84,col 9)-(line 84,col 24)",
            "(line 85,col 9)-(line 85,col 66)",
            "(line 86,col 9)-(line 86,col 39)",
            "(line 88,col 9)-(line 88,col 25)",
            "(line 89,col 9)-(line 89,col 67)",
            "(line 90,col 9)-(line 90,col 39)",
            "(line 92,col 9)-(line 92,col 25)",
            "(line 93,col 9)-(line 93,col 70)",
            "(line 94,col 9)-(line 94,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberRangeTest.java",
        "signature": "org.apache.commons.lang.NumberRangeTest.testEqualsWithOtherObject()",
        "snippet": "    public void testEqualsWithOtherObject() {\n        assertEquals( \"A NumberRange should not equals a String object\", false, fiveToNine.equals(\"TEST\"));\n    }",
        "begin_line": 97,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 107)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberRangeTest.java",
        "signature": "org.apache.commons.lang.NumberRangeTest.testEqualsWithSameReference()",
        "snippet": "    public void testEqualsWithSameReference() {\n        assertEquals( \"A NumberRange should equal itself\", true, fiveToNine.equals(fiveToNine));\n    }",
        "begin_line": 101,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 96)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberRangeTest.java",
        "signature": "org.apache.commons.lang.NumberRangeTest.testEqualsNull()",
        "snippet": "    public void testEqualsNull() {\n        assertEquals( \"A NumberRange should not equal null\", false, fiveToNine.equals(null));\n    }",
        "begin_line": 105,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 93)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberRangeTest.java",
        "signature": "org.apache.commons.lang.NumberRangeTest.testHashCode()",
        "snippet": "    public void testHashCode() {\n        NumberRange nr = new NumberRange( new Integer(5), new Double(9.0));\n        assertEquals( \"The hashCode of 5-9 should equals the hashcode of another NumberRange of the same min/max\",\n                                fiveToNine.hashCode(), nr.hashCode());\n        assertTrue( \"The hashCode of 10-20 should not equal the hashCode of 5-9\", \n                            fiveToNine.hashCode() != tenToTwenty.hashCode());                        \n    }",
        "begin_line": 109,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 75)",
            "(line 111,col 9)-(line 112,col 70)",
            "(line 113,col 9)-(line 114,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberRangeTest.java",
        "signature": "org.apache.commons.lang.NumberRangeTest.testIncludesNumber()",
        "snippet": "    public void testIncludesNumber() {\n        boolean expected = false;\n        boolean result = tenToTwenty.includesNumber(five);\n        assertEquals(expected, result);\n\n        expected = true;\n        result = tenToTwenty.includesNumber(ten);\n        assertEquals(expected, result);\n\n        expected = true;\n        result = tenToTwenty.includesNumber(fifteen);\n        assertEquals(expected, result);\n\n        expected = true;\n        result = tenToTwenty.includesNumber(twenty);\n        assertEquals(expected, result);\n\n        expected = false;\n        result = tenToTwenty.includesNumber(twentyFive);\n        assertEquals(expected, result);\n    }",
        "begin_line": 117,
        "end_line": 137,
        "comment": "",
        "child_ranges": [
            "(line 118,col 9)-(line 118,col 33)",
            "(line 119,col 9)-(line 119,col 58)",
            "(line 120,col 9)-(line 120,col 39)",
            "(line 122,col 9)-(line 122,col 24)",
            "(line 123,col 9)-(line 123,col 49)",
            "(line 124,col 9)-(line 124,col 39)",
            "(line 126,col 9)-(line 126,col 24)",
            "(line 127,col 9)-(line 127,col 53)",
            "(line 128,col 9)-(line 128,col 39)",
            "(line 130,col 9)-(line 130,col 24)",
            "(line 131,col 9)-(line 131,col 52)",
            "(line 132,col 9)-(line 132,col 39)",
            "(line 134,col 9)-(line 134,col 25)",
            "(line 135,col 9)-(line 135,col 56)",
            "(line 136,col 9)-(line 136,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberRangeTest.java",
        "signature": "org.apache.commons.lang.NumberRangeTest.testIncludesNumberNull()",
        "snippet": "    public void testIncludesNumberNull() {\n        boolean result = tenToTwenty.includesNumber(null);\n        assertEquals(\"Includes number should return false for null values\", false, result);\n    }",
        "begin_line": 139,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 140,col 9)-(line 140,col 58)",
            "(line 141,col 9)-(line 141,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberRangeTest.java",
        "signature": "org.apache.commons.lang.NumberRangeTest.testIncludesRange()",
        "snippet": "    public void testIncludesRange() {\n        boolean expected = false;\n        boolean result = tenToTwenty.includesRange(new NumberRange(five, ten));\n        assertEquals(expected, result);\n\n        expected = false;\n        result = tenToTwenty.includesRange(new NumberRange(five, fifteen));\n        assertEquals(expected, result);\n\n        expected = true;\n        result = tenToTwenty.includesRange(new NumberRange(ten, fifteen));\n        assertEquals(expected, result);\n\n        expected = true;\n        result = tenToTwenty.includesRange(new NumberRange(ten, twenty));\n        assertEquals(expected, result);\n\n        expected = true;\n        result = tenToTwenty.includesRange(new NumberRange(fifteen, twenty));\n        assertEquals(expected, result);\n\n        expected = false;\n        result = \n            tenToTwenty.includesRange(new NumberRange(fifteen, twentyFive));\n        assertEquals(expected, result);\n\n        expected = false;\n        result = \n            tenToTwenty.includesRange(new NumberRange(twenty, twentyFive));\n        assertEquals(expected, result);\n    }",
        "begin_line": 144,
        "end_line": 174,
        "comment": "",
        "child_ranges": [
            "(line 145,col 9)-(line 145,col 33)",
            "(line 146,col 9)-(line 146,col 79)",
            "(line 147,col 9)-(line 147,col 39)",
            "(line 149,col 9)-(line 149,col 25)",
            "(line 150,col 9)-(line 150,col 75)",
            "(line 151,col 9)-(line 151,col 39)",
            "(line 153,col 9)-(line 153,col 24)",
            "(line 154,col 9)-(line 154,col 74)",
            "(line 155,col 9)-(line 155,col 39)",
            "(line 157,col 9)-(line 157,col 24)",
            "(line 158,col 9)-(line 158,col 73)",
            "(line 159,col 9)-(line 159,col 39)",
            "(line 161,col 9)-(line 161,col 24)",
            "(line 162,col 9)-(line 162,col 77)",
            "(line 163,col 9)-(line 163,col 39)",
            "(line 165,col 9)-(line 165,col 25)",
            "(line 166,col 9)-(line 167,col 76)",
            "(line 168,col 9)-(line 168,col 39)",
            "(line 170,col 9)-(line 170,col 25)",
            "(line 171,col 9)-(line 172,col 75)",
            "(line 173,col 9)-(line 173,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberRangeTest.java",
        "signature": "org.apache.commons.lang.NumberRangeTest.testIncludesRangeNull()",
        "snippet": "    public void testIncludesRangeNull() {\n        boolean result = tenToTwenty.includesRange(null);\n        assertEquals(\"Includes range should return false for null values\", false, result);\n    }",
        "begin_line": 176,
        "end_line": 179,
        "comment": "",
        "child_ranges": [
            "(line 177,col 9)-(line 177,col 57)",
            "(line 178,col 9)-(line 178,col 90)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberRangeTest.java",
        "signature": "org.apache.commons.lang.NumberRangeTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        NumberRange nr = new NumberRange( new Double(2.0));\n        assertEquals(\"Unexpected min on NumberRange\", 2.0, nr.getMinimum().doubleValue(), Double.MIN_VALUE);\n        assertEquals(\"Unexpected max on NumberRange\", 2.0, nr.getMaximum().doubleValue(), Double.MIN_VALUE);\n    }",
        "begin_line": 181,
        "end_line": 185,
        "comment": "",
        "child_ranges": [
            "(line 182,col 9)-(line 182,col 59)",
            "(line 183,col 9)-(line 183,col 108)",
            "(line 184,col 9)-(line 184,col 108)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberRangeTest.java",
        "signature": "org.apache.commons.lang.NumberRangeTest.testConstructorNullParameters()",
        "snippet": "    public void testConstructorNullParameters() {\n        try {\n            NumberRange nr = new NumberRange(null);\n            fail(\"NumberRange(null) did not throw an exception.\");\n        } catch (Exception e) {\n            assertTrue(    \"NumberRange(null)\", e instanceof NullPointerException);\n        }\n\n        try {\n            NumberRange nr = new NumberRange(five, null);\n            fail(\"NumberRange(five, null) did not throw an exception.\");\n        } catch (Exception e) {\n            assertTrue(\"NumberRange(five, null)\", e instanceof NullPointerException);\n        }\n\n        try {\n            NumberRange nr = new NumberRange(null, five);\n            fail(\"NumberRange(null, five) did not throw an exception.\");\n        } catch (Exception e) {\n            assertTrue(\"NumberRange(null, five)\", e instanceof NullPointerException);\n        }\n    }",
        "begin_line": 187,
        "end_line": 208,
        "comment": "",
        "child_ranges": [
            "(line 188,col 9)-(line 193,col 9)",
            "(line 195,col 9)-(line 200,col 9)",
            "(line 202,col 9)-(line 207,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberRangeTest.java",
        "signature": "org.apache.commons.lang.NumberRangeTest.testConstructorWithMaxLessThanMin()",
        "snippet": "    public void testConstructorWithMaxLessThanMin() {\n        NumberRange nr = new NumberRange( new Double(2.0), new Double(1.0));\n        assertEquals(\"Unexpected min on NumberRange\", 2.0, nr.getMinimum().doubleValue(), Double.MIN_VALUE);\n        assertEquals(\"Unexpected max on NumberRange\", 2.0, nr.getMaximum().doubleValue(), Double.MIN_VALUE);\n    }",
        "begin_line": 210,
        "end_line": 214,
        "comment": "",
        "child_ranges": [
            "(line 211,col 9)-(line 211,col 76)",
            "(line 212,col 9)-(line 212,col 108)",
            "(line 213,col 9)-(line 213,col 108)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberRangeTest.java",
        "signature": "org.apache.commons.lang.NumberRangeTest.testOverlap()",
        "snippet": "    public void testOverlap() {\n        assertEquals( \"5-9 should not overlap 10-20\", false, fiveToNine.overlaps( tenToTwenty ));\n        assertEquals( \"10-20 should overlap 15-25\", true, tenToTwenty.overlaps( fifteenToTwentyFive ));\n    }",
        "begin_line": 216,
        "end_line": 219,
        "comment": "",
        "child_ranges": [
            "(line 217,col 9)-(line 217,col 97)",
            "(line 218,col 9)-(line 218,col 103)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberRangeTest.java",
        "signature": "org.apache.commons.lang.NumberRangeTest.testOverlapNull()",
        "snippet": "    public void testOverlapNull() {\n        assertEquals( \"5-9 should not overlap null\", false, fiveToNine.overlaps( null ));\n    }",
        "begin_line": 221,
        "end_line": 223,
        "comment": "",
        "child_ranges": [
            "(line 222,col 9)-(line 222,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberRangeTest.java",
        "signature": "org.apache.commons.lang.NumberRangeTest.testToString()",
        "snippet": "    public void testToString() {\n        String expected = \"10-20\";\n        String result = tenToTwenty.toString();\n        assertEquals(expected, result);\n    }",
        "begin_line": 225,
        "end_line": 229,
        "comment": "",
        "child_ranges": [
            "(line 226,col 9)-(line 226,col 34)",
            "(line 227,col 9)-(line 227,col 47)",
            "(line 228,col 9)-(line 228,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberRangeTest.java",
        "signature": "org.apache.commons.lang.NumberRangeTest.testToStringWithNegatives()",
        "snippet": "    public void testToStringWithNegatives() {\n        String expected = \"(-20)-(-10)\";\n        NumberRange nr = new NumberRange( new Integer(-20), new Integer(-10));\n        String result = nr.toString();\n        assertEquals(expected, result);\n\n        expected = \"(-20)-10\";\n        nr = new NumberRange( new Integer(-20), new Integer(10));\n        result = nr.toString();\n        assertEquals(expected, result);\n    }",
        "begin_line": 231,
        "end_line": 241,
        "comment": "",
        "child_ranges": [
            "(line 232,col 9)-(line 232,col 40)",
            "(line 233,col 9)-(line 233,col 78)",
            "(line 234,col 9)-(line 234,col 38)",
            "(line 235,col 9)-(line 235,col 39)",
            "(line 237,col 9)-(line 237,col 30)",
            "(line 238,col 9)-(line 238,col 65)",
            "(line 239,col 9)-(line 239,col 31)",
            "(line 240,col 9)-(line 240,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NotImplementedExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NotImplementedExceptionTest.java",
        "signature": "org.apache.commons.lang.NotImplementedExceptionTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NotImplementedExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NotImplementedExceptionTest.java",
        "signature": "org.apache.commons.lang.NotImplementedExceptionTest.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(NotImplementedExceptionTest.class);\n    }",
        "begin_line": 45,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NotImplementedExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NotImplementedExceptionTest.java",
        "signature": "org.apache.commons.lang.NotImplementedExceptionTest.NotImplementedExceptionTest(java.lang.String)",
        "snippet": "    public NotImplementedExceptionTest(String testName) {\n        super(testName);\n    }",
        "begin_line": 49,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NotImplementedExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NotImplementedExceptionTest.java",
        "signature": "org.apache.commons.lang.NotImplementedExceptionTest.testConstructor_()",
        "snippet": "    public void testConstructor_() {\n        NotImplementedException ex = new NotImplementedException();\n        assertEquals(\"Code is not implemented\", ex.getMessage());\n        assertEquals(null, ex.getCause());\n        assertEquals(\"Code is not implemented\", ex.getMessage());\n    }",
        "begin_line": 54,
        "end_line": 59,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 67)",
            "(line 56,col 9)-(line 56,col 65)",
            "(line 57,col 9)-(line 57,col 42)",
            "(line 58,col 9)-(line 58,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NotImplementedExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NotImplementedExceptionTest.java",
        "signature": "org.apache.commons.lang.NotImplementedExceptionTest.testConstructor_String1()",
        "snippet": "    public void testConstructor_String1() {\n        NotImplementedException ex = new NotImplementedException((String) null);\n        assertEquals(\"Code is not implemented\", ex.getMessage());\n        assertEquals(null, ex.getCause());\n        assertEquals(\"Code is not implemented\", ex.getMessage());\n    }        ",
        "begin_line": 61,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 80)",
            "(line 63,col 9)-(line 63,col 65)",
            "(line 64,col 9)-(line 64,col 42)",
            "(line 65,col 9)-(line 65,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NotImplementedExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NotImplementedExceptionTest.java",
        "signature": "org.apache.commons.lang.NotImplementedExceptionTest.testConstructor_String2()",
        "snippet": "    public void testConstructor_String2() {\n        NotImplementedException ex = new NotImplementedException(\"msg\");\n        assertEquals(\"msg\", ex.getMessage());\n        assertEquals(null, ex.getCause());\n        assertEquals(\"msg\", ex.getMessage());\n    }",
        "begin_line": 67,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 72)",
            "(line 69,col 9)-(line 69,col 45)",
            "(line 70,col 9)-(line 70,col 42)",
            "(line 71,col 9)-(line 71,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NotImplementedExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NotImplementedExceptionTest.java",
        "signature": "org.apache.commons.lang.NotImplementedExceptionTest.testConstructor_Throwable1()",
        "snippet": "    public void testConstructor_Throwable1() {\n        NotImplementedException ex = new NotImplementedException((Throwable) null);\n        assertEquals(\"Code is not implemented\", ex.getMessage());\n        assertEquals(null, ex.getCause());\n        assertEquals(\"Code is not implemented\", ex.getMessage());\n    }        ",
        "begin_line": 74,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 83)",
            "(line 76,col 9)-(line 76,col 65)",
            "(line 77,col 9)-(line 77,col 42)",
            "(line 78,col 9)-(line 78,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NotImplementedExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NotImplementedExceptionTest.java",
        "signature": "org.apache.commons.lang.NotImplementedExceptionTest.testConstructor_Throwable2()",
        "snippet": "    public void testConstructor_Throwable2() {\n        Exception npe = new NullPointerException();\n        NotImplementedException ex = new NotImplementedException(npe);\n        assertEquals(\"Code is not implemented\", ex.getMessage());\n        assertSame(npe, ex.getCause());\n        assertEquals(\"Code is not implemented\", ex.getMessage());\n    }",
        "begin_line": 80,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 51)",
            "(line 82,col 9)-(line 82,col 70)",
            "(line 83,col 9)-(line 83,col 65)",
            "(line 84,col 9)-(line 84,col 39)",
            "(line 85,col 9)-(line 85,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NotImplementedExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NotImplementedExceptionTest.java",
        "signature": "org.apache.commons.lang.NotImplementedExceptionTest.testConstructor_StringThrowable1()",
        "snippet": "    public void testConstructor_StringThrowable1() {\n        NotImplementedException ex = new NotImplementedException((String) null, (Throwable) null);\n        assertEquals(\"Code is not implemented\", ex.getMessage());\n        assertEquals(null, ex.getCause());\n        assertEquals(\"Code is not implemented\", ex.getMessage());\n    }",
        "begin_line": 88,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 98)",
            "(line 90,col 9)-(line 90,col 65)",
            "(line 91,col 9)-(line 91,col 42)",
            "(line 92,col 9)-(line 92,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NotImplementedExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NotImplementedExceptionTest.java",
        "signature": "org.apache.commons.lang.NotImplementedExceptionTest.testConstructor_StringThrowable2()",
        "snippet": "    public void testConstructor_StringThrowable2() {\n        Exception npe = new NullPointerException();\n        NotImplementedException ex = new NotImplementedException(\"msg\", npe);\n        assertEquals(\"msg\", ex.getMessage());\n        assertSame(npe, ex.getCause());\n        assertEquals(\"msg\", ex.getMessage());\n    }",
        "begin_line": 94,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 51)",
            "(line 96,col 9)-(line 96,col 77)",
            "(line 97,col 9)-(line 97,col 45)",
            "(line 98,col 9)-(line 98,col 39)",
            "(line 99,col 9)-(line 99,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NotImplementedExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NotImplementedExceptionTest.java",
        "signature": "org.apache.commons.lang.NotImplementedExceptionTest.testConstructor_Class1()",
        "snippet": "    public void testConstructor_Class1() {\n        NotImplementedException ex = new NotImplementedException((Class) null);\n        assertEquals(\"Code is not implemented\", ex.getMessage());\n        assertEquals(null, ex.getCause());\n        assertEquals(\"Code is not implemented\", ex.getMessage());\n    }",
        "begin_line": 102,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 79)",
            "(line 104,col 9)-(line 104,col 65)",
            "(line 105,col 9)-(line 105,col 42)",
            "(line 106,col 9)-(line 106,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NotImplementedExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NotImplementedExceptionTest.java",
        "signature": "org.apache.commons.lang.NotImplementedExceptionTest.testConstructor_Class2()",
        "snippet": "    public void testConstructor_Class2() {\n        NotImplementedException ex = new NotImplementedException(String.class);\n        assertEquals(\"Code is not implemented in class java.lang.String\", ex.getMessage());\n        assertEquals(null, ex.getCause());\n        assertEquals(\"Code is not implemented in class java.lang.String\", ex.getMessage());\n    }",
        "begin_line": 108,
        "end_line": 113,
        "comment": "",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 79)",
            "(line 110,col 9)-(line 110,col 91)",
            "(line 111,col 9)-(line 111,col 42)",
            "(line 112,col 9)-(line 112,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NotImplementedExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NotImplementedExceptionTest.java",
        "signature": "org.apache.commons.lang.NotImplementedExceptionTest.testGetMessage_Indexed()",
        "snippet": "    public void testGetMessage_Indexed() throws Exception {\n        if (SystemUtils.isJavaVersionAtLeast(1.4f)) {\n            Exception ex1 = new Exception(\"nested 2\");\n            Constructor con = Exception.class.getConstructor(new Class[] {String.class, Throwable.class});\n            Exception ex2 = (Exception) con.newInstance(new Object[] {\"nested 1\", ex1});\n            NotImplementedException ex = new NotImplementedException(ex2);\n            assertEquals(\"Code is not implemented\", ex.getMessage());\n            assertEquals(\"Code is not implemented\", ex.getMessage(0));\n            assertEquals(\"nested 1\", ex.getMessage(1));\n            assertEquals(\"nested 2\", ex.getMessage(2));\n            \n            String[] messages = ex.getMessages();\n            assertEquals(3, messages.length);\n            assertEquals(\"Code is not implemented\", messages[0]);\n            assertEquals(\"nested 1\", messages[1]);\n            assertEquals(\"nested 2\", messages[2]);\n        }\n    }",
        "begin_line": 115,
        "end_line": 132,
        "comment": "",
        "child_ranges": [
            "(line 116,col 9)-(line 131,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NotImplementedExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NotImplementedExceptionTest.java",
        "signature": "org.apache.commons.lang.NotImplementedExceptionTest.testGetThrowable()",
        "snippet": "    public void testGetThrowable() {\n        NotImplementedException ex = new NotImplementedException(new NestableException(\"nested 1\", new NestableException(\"nested 2\")));\n        \n        assertEquals(3, ex.getThrowableCount());\n        \n        assertEquals(NotImplementedException.class, ex.getThrowable(0).getClass());\n        assertEquals(\"Code is not implemented\", ex.getThrowable(0).getMessage());\n        assertEquals(NestableException.class, ex.getThrowable(1).getClass());\n        assertEquals(\"nested 1\", ex.getThrowable(1).getMessage());\n        assertEquals(NestableException.class, ex.getThrowable(2).getClass());\n        assertEquals(\"nested 2\", ex.getThrowable(2).getMessage());\n        \n        assertEquals(3, ex.getThrowables().length);\n        assertEquals(NotImplementedException.class, ex.getThrowables()[0].getClass());\n        assertEquals(\"Code is not implemented\", ex.getThrowables()[0].getMessage());\n        assertEquals(NestableException.class, ex.getThrowables()[1].getClass());\n        assertEquals(\"nested 1\", ex.getThrowables()[1].getMessage());\n        assertEquals(NestableException.class, ex.getThrowables()[2].getClass());\n        assertEquals(\"nested 2\", ex.getThrowables()[2].getMessage());\n    }",
        "begin_line": 134,
        "end_line": 153,
        "comment": "",
        "child_ranges": [
            "(line 135,col 9)-(line 135,col 135)",
            "(line 137,col 9)-(line 137,col 48)",
            "(line 139,col 9)-(line 139,col 83)",
            "(line 140,col 9)-(line 140,col 81)",
            "(line 141,col 9)-(line 141,col 77)",
            "(line 142,col 9)-(line 142,col 66)",
            "(line 143,col 9)-(line 143,col 77)",
            "(line 144,col 9)-(line 144,col 66)",
            "(line 146,col 9)-(line 146,col 51)",
            "(line 147,col 9)-(line 147,col 86)",
            "(line 148,col 9)-(line 148,col 84)",
            "(line 149,col 9)-(line 149,col 80)",
            "(line 150,col 9)-(line 150,col 69)",
            "(line 151,col 9)-(line 151,col 80)",
            "(line 152,col 9)-(line 152,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NotImplementedExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NotImplementedExceptionTest.java",
        "signature": "org.apache.commons.lang.NotImplementedExceptionTest.testIndexOfThrowable()",
        "snippet": "    public void testIndexOfThrowable() {\n        NotImplementedException ex = new NotImplementedException(new NestableException(\"nested 1\", new NestableException(\"nested 2\")));\n        assertEquals(0, ex.indexOfThrowable(NotImplementedException.class));\n        assertEquals(1, ex.indexOfThrowable(NestableException.class));\n    }",
        "begin_line": 155,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 156,col 9)-(line 156,col 135)",
            "(line 157,col 9)-(line 157,col 76)",
            "(line 158,col 9)-(line 158,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NotImplementedExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NotImplementedExceptionTest.java",
        "signature": "org.apache.commons.lang.NotImplementedExceptionTest.testIndexOfThrowable_Index()",
        "snippet": "    public void testIndexOfThrowable_Index() {\n        NotImplementedException ex = new NotImplementedException(new NestableException(\"nested 1\", new NestableException(\"nested 2\")));\n        assertEquals(1, ex.indexOfThrowable(NestableException.class, 1));\n    }",
        "begin_line": 161,
        "end_line": 164,
        "comment": "",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 135)",
            "(line 163,col 9)-(line 163,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NotImplementedExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NotImplementedExceptionTest.java",
        "signature": "org.apache.commons.lang.NotImplementedExceptionTest.testPrintStackTrace()",
        "snippet": "    public void testPrintStackTrace() {\n        NotImplementedException ex = new NotImplementedException(new NestableException(\"nested 1\", new NestableException(\"nested 2\")));\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        PrintStream ps = new PrintStream(baos);\n        PrintStream errStream = System.err;\n        System.setErr(ps);\n        ex.printStackTrace();\n        System.setErr(errStream);\n        assertTrue(baos.toString().length() > 0);\n    }",
        "begin_line": 166,
        "end_line": 175,
        "comment": "",
        "child_ranges": [
            "(line 167,col 9)-(line 167,col 135)",
            "(line 168,col 9)-(line 168,col 65)",
            "(line 169,col 9)-(line 169,col 47)",
            "(line 170,col 9)-(line 170,col 43)",
            "(line 171,col 9)-(line 171,col 26)",
            "(line 172,col 9)-(line 172,col 29)",
            "(line 173,col 9)-(line 173,col 33)",
            "(line 174,col 9)-(line 174,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NotImplementedExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NotImplementedExceptionTest.java",
        "signature": "org.apache.commons.lang.NotImplementedExceptionTest.testPrintStackTrace_Stream()",
        "snippet": "    public void testPrintStackTrace_Stream() {\n        NotImplementedException ex = new NotImplementedException(new NestableException(\"nested 1\", new NestableException(\"nested 2\")));\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        PrintStream ps = new PrintStream(baos);\n        ex.printStackTrace(ps);\n        assertTrue(baos.toString().length() > 0);\n    }",
        "begin_line": 177,
        "end_line": 183,
        "comment": "",
        "child_ranges": [
            "(line 178,col 9)-(line 178,col 135)",
            "(line 179,col 9)-(line 179,col 65)",
            "(line 180,col 9)-(line 180,col 47)",
            "(line 181,col 9)-(line 181,col 31)",
            "(line 182,col 9)-(line 182,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NotImplementedExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NotImplementedExceptionTest.java",
        "signature": "org.apache.commons.lang.NotImplementedExceptionTest.testPrintStackTrace_Writer()",
        "snippet": "    public void testPrintStackTrace_Writer() {\n        NotImplementedException ex = new NotImplementedException(new NestableException(\"nested 1\", new NestableException(\"nested 2\")));\n        StringWriter stringWriter = new StringWriter();\n        PrintWriter writer = new PrintWriter(stringWriter);\n        ex.printStackTrace(writer);\n        assertTrue(stringWriter.toString().length() > 0);\n    }",
        "begin_line": 185,
        "end_line": 191,
        "comment": "",
        "child_ranges": [
            "(line 186,col 9)-(line 186,col 135)",
            "(line 187,col 9)-(line 187,col 55)",
            "(line 188,col 9)-(line 188,col 59)",
            "(line 189,col 9)-(line 189,col 35)",
            "(line 190,col 9)-(line 190,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NotImplementedExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NotImplementedExceptionTest.java",
        "signature": "org.apache.commons.lang.NotImplementedExceptionTest.testPrintPartialStackTrace_Writer()",
        "snippet": "    public void testPrintPartialStackTrace_Writer() {\n      NotImplementedException ex = new NotImplementedException(new NestableException(\"nested 1\", new NestableException(\"nested 2\")));\n      StringWriter stringWriter = new StringWriter();\n      PrintWriter writer = new PrintWriter(stringWriter);\n      ex.printPartialStackTrace(writer);\n      assertTrue(stringWriter.toString().length() > 0);\n  }",
        "begin_line": 193,
        "end_line": 199,
        "comment": "",
        "child_ranges": [
            "(line 194,col 7)-(line 194,col 133)",
            "(line 195,col 7)-(line 195,col 53)",
            "(line 196,col 7)-(line 196,col 57)",
            "(line 197,col 7)-(line 197,col 40)",
            "(line 198,col 7)-(line 198,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang.SerializationUtilsTest.SerializationUtilsTest(java.lang.String)",
        "snippet": "    public SerializationUtilsTest(String name) {\n        super(name);\n    }",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang.SerializationUtilsTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 56,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang.SerializationUtilsTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(SerializationUtilsTest.class);\n        suite.setName(\"SerializationUtils Tests\");\n        return suite;\n    }",
        "begin_line": 60,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 70)",
            "(line 62,col 9)-(line 62,col 50)",
            "(line 63,col 9)-(line 63,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang.SerializationUtilsTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        super.setUp();\n\n        iString = \"foo\";\n        iInteger = new Integer(7);\n        iMap = new HashMap();\n        iMap.put(\"FOO\", iString);\n        iMap.put(\"BAR\", iInteger);\n    }",
        "begin_line": 66,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 22)",
            "(line 69,col 9)-(line 69,col 24)",
            "(line 70,col 9)-(line 70,col 34)",
            "(line 71,col 9)-(line 71,col 29)",
            "(line 72,col 9)-(line 72,col 33)",
            "(line 73,col 9)-(line 73,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang.SerializationUtilsTest.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        super.tearDown();\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang.SerializationUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new SerializationUtils());\n        Constructor[] cons = SerializationUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(SerializationUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(SerializationUtils.class.getModifiers()));\n    }",
        "begin_line": 81,
        "end_line": 88,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 48)",
            "(line 83,col 9)-(line 83,col 80)",
            "(line 84,col 9)-(line 84,col 37)",
            "(line 85,col 9)-(line 85,col 70)",
            "(line 86,col 9)-(line 86,col 87)",
            "(line 87,col 9)-(line 87,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang.SerializationUtilsTest.testException()",
        "snippet": "    public void testException() {\n        SerializationException serEx;\n        Exception ex = new Exception();\n        \n        serEx = new SerializationException();\n        assertSame(null, serEx.getMessage());\n        assertSame(null, serEx.getCause());\n        \n        serEx = new SerializationException(\"Message\");\n        assertSame(\"Message\", serEx.getMessage());\n        assertSame(null, serEx.getCause());\n        \n        serEx = new SerializationException(ex);\n        assertEquals(\"java.lang.Exception\", serEx.getMessage());\n        assertSame(ex, serEx.getCause());\n        \n        serEx = new SerializationException(\"Message\", ex);\n        assertSame(\"Message\", serEx.getMessage());\n        assertSame(ex, serEx.getCause());\n    }",
        "begin_line": 90,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 37)",
            "(line 92,col 9)-(line 92,col 39)",
            "(line 94,col 9)-(line 94,col 45)",
            "(line 95,col 9)-(line 95,col 45)",
            "(line 96,col 9)-(line 96,col 43)",
            "(line 98,col 9)-(line 98,col 54)",
            "(line 99,col 9)-(line 99,col 50)",
            "(line 100,col 9)-(line 100,col 43)",
            "(line 102,col 9)-(line 102,col 47)",
            "(line 103,col 9)-(line 103,col 64)",
            "(line 104,col 9)-(line 104,col 41)",
            "(line 106,col 9)-(line 106,col 58)",
            "(line 107,col 9)-(line 107,col 50)",
            "(line 108,col 9)-(line 108,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang.SerializationUtilsTest.testSerializeStream()",
        "snippet": "    public void testSerializeStream() throws Exception {\n        ByteArrayOutputStream streamTest = new ByteArrayOutputStream();\n        SerializationUtils.serialize(iMap, streamTest);\n\n        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(streamReal);\n        oos.writeObject(iMap);\n        oos.flush();\n        oos.close();\n\n        byte[] testBytes = streamTest.toByteArray();\n        byte[] realBytes = streamReal.toByteArray();\n        assertEquals(testBytes.length, realBytes.length);\n        for (int i = 0; i < realBytes.length; i++) {\n            assertEquals(realBytes[i], testBytes[i]);\n        }\n    }",
        "begin_line": 112,
        "end_line": 128,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 71)",
            "(line 114,col 9)-(line 114,col 55)",
            "(line 116,col 9)-(line 116,col 71)",
            "(line 117,col 9)-(line 117,col 68)",
            "(line 118,col 9)-(line 118,col 30)",
            "(line 119,col 9)-(line 119,col 20)",
            "(line 120,col 9)-(line 120,col 20)",
            "(line 122,col 9)-(line 122,col 52)",
            "(line 123,col 9)-(line 123,col 52)",
            "(line 124,col 9)-(line 124,col 57)",
            "(line 125,col 9)-(line 127,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang.SerializationUtilsTest.testSerializeStreamUnserializable()",
        "snippet": "    public void testSerializeStreamUnserializable() throws Exception {\n        ByteArrayOutputStream streamTest = new ByteArrayOutputStream();\n        try {\n            iMap.put(new Object(), new Object());\n            SerializationUtils.serialize(iMap, streamTest);\n        } catch (SerializationException ex) {\n            return;\n        }\n        fail();\n    }",
        "begin_line": 130,
        "end_line": 139,
        "comment": "",
        "child_ranges": [
            "(line 131,col 9)-(line 131,col 71)",
            "(line 132,col 9)-(line 137,col 9)",
            "(line 138,col 9)-(line 138,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang.SerializationUtilsTest.testSerializeStreamNullObj()",
        "snippet": "    public void testSerializeStreamNullObj() throws Exception {\n        ByteArrayOutputStream streamTest = new ByteArrayOutputStream();\n        SerializationUtils.serialize(null, streamTest);\n\n        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(streamReal);\n        oos.writeObject(null);\n        oos.flush();\n        oos.close();\n\n        byte[] testBytes = streamTest.toByteArray();\n        byte[] realBytes = streamReal.toByteArray();\n        assertEquals(testBytes.length, realBytes.length);\n        for (int i = 0; i < realBytes.length; i++) {\n            assertEquals(realBytes[i], testBytes[i]);\n        }\n    }",
        "begin_line": 141,
        "end_line": 157,
        "comment": "",
        "child_ranges": [
            "(line 142,col 9)-(line 142,col 71)",
            "(line 143,col 9)-(line 143,col 55)",
            "(line 145,col 9)-(line 145,col 71)",
            "(line 146,col 9)-(line 146,col 68)",
            "(line 147,col 9)-(line 147,col 30)",
            "(line 148,col 9)-(line 148,col 20)",
            "(line 149,col 9)-(line 149,col 20)",
            "(line 151,col 9)-(line 151,col 52)",
            "(line 152,col 9)-(line 152,col 52)",
            "(line 153,col 9)-(line 153,col 57)",
            "(line 154,col 9)-(line 156,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang.SerializationUtilsTest.testSerializeStreamObjNull()",
        "snippet": "    public void testSerializeStreamObjNull() throws Exception {\n        ByteArrayOutputStream streamTest = new ByteArrayOutputStream();\n        try {\n            SerializationUtils.serialize(iMap, null);\n        } catch (IllegalArgumentException ex) {\n            return;\n        }\n        fail();\n    }",
        "begin_line": 159,
        "end_line": 167,
        "comment": "",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 71)",
            "(line 161,col 9)-(line 165,col 9)",
            "(line 166,col 9)-(line 166,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang.SerializationUtilsTest.testSerializeStreamNullNull()",
        "snippet": "    public void testSerializeStreamNullNull() throws Exception {\n        ByteArrayOutputStream streamTest = new ByteArrayOutputStream();\n        try {\n            SerializationUtils.serialize(null, null);\n        } catch (IllegalArgumentException ex) {\n            return;\n        }\n        fail();\n    }",
        "begin_line": 169,
        "end_line": 177,
        "comment": "",
        "child_ranges": [
            "(line 170,col 9)-(line 170,col 71)",
            "(line 171,col 9)-(line 175,col 9)",
            "(line 176,col 9)-(line 176,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang.SerializationUtilsTest.testSerializeIOException()",
        "snippet": "    public void testSerializeIOException() throws Exception {\n        // forces an IOException when the ObjectOutputStream is created, to test not closing the stream\n        // in the finally block\n        OutputStream streamTest = new OutputStream() {\n            public void write(int arg0) throws IOException {\n                throw new IOException(SERIALIZE_IO_EXCEPTION_MESSAGE);\n            }\n        };\n        try {\n            SerializationUtils.serialize(iMap, streamTest);\n        }\n        catch(SerializationException e) {\n            assertEquals(\"java.io.IOException: \" + SERIALIZE_IO_EXCEPTION_MESSAGE, e.getMessage());\n        }\n    }",
        "begin_line": 179,
        "end_line": 193,
        "comment": "",
        "child_ranges": [
            "(line 182,col 9)-(line 186,col 10)",
            "(line 187,col 9)-(line 192,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang.SerializationUtilsTest.Anonymous-844ea6d9-9b73-41cb-bea4-6755814ac28f.write(int)",
        "snippet": "            public void write(int arg0) throws IOException {\n                throw new IOException(SERIALIZE_IO_EXCEPTION_MESSAGE);\n            }",
        "begin_line": 183,
        "end_line": 185,
        "comment": "",
        "child_ranges": [
            "(line 184,col 17)-(line 184,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang.SerializationUtilsTest.testDeserializeStream()",
        "snippet": "    public void testDeserializeStream() throws Exception {\n        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(streamReal);\n        oos.writeObject(iMap);\n        oos.flush();\n        oos.close();\n\n        ByteArrayInputStream inTest = new ByteArrayInputStream(streamReal.toByteArray());\n        Object test = SerializationUtils.deserialize(inTest);\n        assertNotNull(test);\n        assertTrue(test instanceof HashMap);\n        assertTrue(test != iMap);\n        HashMap testMap = (HashMap) test;\n        assertEquals(iString, testMap.get(\"FOO\"));\n        assertTrue(iString != testMap.get(\"FOO\"));\n        assertEquals(iInteger, testMap.get(\"BAR\"));\n        assertTrue(iInteger != testMap.get(\"BAR\"));\n        assertEquals(iMap, testMap);\n    }",
        "begin_line": 197,
        "end_line": 215,
        "comment": "",
        "child_ranges": [
            "(line 198,col 9)-(line 198,col 71)",
            "(line 199,col 9)-(line 199,col 68)",
            "(line 200,col 9)-(line 200,col 30)",
            "(line 201,col 9)-(line 201,col 20)",
            "(line 202,col 9)-(line 202,col 20)",
            "(line 204,col 9)-(line 204,col 89)",
            "(line 205,col 9)-(line 205,col 61)",
            "(line 206,col 9)-(line 206,col 28)",
            "(line 207,col 9)-(line 207,col 44)",
            "(line 208,col 9)-(line 208,col 33)",
            "(line 209,col 9)-(line 209,col 41)",
            "(line 210,col 9)-(line 210,col 50)",
            "(line 211,col 9)-(line 211,col 50)",
            "(line 212,col 9)-(line 212,col 51)",
            "(line 213,col 9)-(line 213,col 51)",
            "(line 214,col 9)-(line 214,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang.SerializationUtilsTest.testDeserializeStreamOfNull()",
        "snippet": "    public void testDeserializeStreamOfNull() throws Exception {\n        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(streamReal);\n        oos.writeObject(null);\n        oos.flush();\n        oos.close();\n\n        ByteArrayInputStream inTest = new ByteArrayInputStream(streamReal.toByteArray());\n        Object test = SerializationUtils.deserialize(inTest);\n        assertNull(test);\n    }",
        "begin_line": 217,
        "end_line": 227,
        "comment": "",
        "child_ranges": [
            "(line 218,col 9)-(line 218,col 71)",
            "(line 219,col 9)-(line 219,col 68)",
            "(line 220,col 9)-(line 220,col 30)",
            "(line 221,col 9)-(line 221,col 20)",
            "(line 222,col 9)-(line 222,col 20)",
            "(line 224,col 9)-(line 224,col 89)",
            "(line 225,col 9)-(line 225,col 61)",
            "(line 226,col 9)-(line 226,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang.SerializationUtilsTest.testDeserializeStreamNull()",
        "snippet": "    public void testDeserializeStreamNull() throws Exception {\n        try {\n            SerializationUtils.deserialize((InputStream) null);\n        } catch (IllegalArgumentException ex) {\n            return;\n        }\n        fail();\n    }",
        "begin_line": 229,
        "end_line": 236,
        "comment": "",
        "child_ranges": [
            "(line 230,col 9)-(line 234,col 9)",
            "(line 235,col 9)-(line 235,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang.SerializationUtilsTest.testDeserializeStreamBadStream()",
        "snippet": "    public void testDeserializeStreamBadStream() throws Exception {\n        try {\n            SerializationUtils.deserialize(new ByteArrayInputStream(new byte[0]));\n        } catch (SerializationException ex) {\n            return;\n        }\n        fail();\n    }",
        "begin_line": 238,
        "end_line": 245,
        "comment": "",
        "child_ranges": [
            "(line 239,col 9)-(line 243,col 9)",
            "(line 244,col 9)-(line 244,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang.SerializationUtilsTest.testDeserializeStreamClassNotFound()",
        "snippet": "    public void testDeserializeStreamClassNotFound() throws Exception {\n        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(streamReal);\n        oos.writeObject(new ClassNotFoundSerializationTest());\n        oos.flush();\n        oos.close();\n\n        ByteArrayInputStream inTest = new ByteArrayInputStream(streamReal.toByteArray());\n        try {\n            Object test = SerializationUtils.deserialize(inTest);\n        } catch(SerializationException se) {\n            assertEquals(\"java.lang.ClassNotFoundException: \" + CLASS_NOT_FOUND_MESSAGE, se.getMessage());\n        }\n    }",
        "begin_line": 247,
        "end_line": 260,
        "comment": "",
        "child_ranges": [
            "(line 248,col 9)-(line 248,col 71)",
            "(line 249,col 9)-(line 249,col 68)",
            "(line 250,col 9)-(line 250,col 62)",
            "(line 251,col 9)-(line 251,col 20)",
            "(line 252,col 9)-(line 252,col 20)",
            "(line 254,col 9)-(line 254,col 89)",
            "(line 255,col 9)-(line 259,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang.SerializationUtilsTest.testSerializeBytes()",
        "snippet": "    public void testSerializeBytes() throws Exception {\n        byte[] testBytes = SerializationUtils.serialize(iMap);\n\n        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(streamReal);\n        oos.writeObject(iMap);\n        oos.flush();\n        oos.close();\n\n        byte[] realBytes = streamReal.toByteArray();\n        assertEquals(testBytes.length, realBytes.length);\n        for (int i = 0; i < realBytes.length; i++) {\n            assertEquals(realBytes[i], testBytes[i]);\n        }\n    }",
        "begin_line": 264,
        "end_line": 278,
        "comment": "",
        "child_ranges": [
            "(line 265,col 9)-(line 265,col 62)",
            "(line 267,col 9)-(line 267,col 71)",
            "(line 268,col 9)-(line 268,col 68)",
            "(line 269,col 9)-(line 269,col 30)",
            "(line 270,col 9)-(line 270,col 20)",
            "(line 271,col 9)-(line 271,col 20)",
            "(line 273,col 9)-(line 273,col 52)",
            "(line 274,col 9)-(line 274,col 57)",
            "(line 275,col 9)-(line 277,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang.SerializationUtilsTest.testSerializeBytesUnserializable()",
        "snippet": "    public void testSerializeBytesUnserializable() throws Exception {\n        try {\n            iMap.put(new Object(), new Object());\n            SerializationUtils.serialize(iMap);\n        } catch (SerializationException ex) {\n            return;\n        }\n        fail();\n    }",
        "begin_line": 280,
        "end_line": 288,
        "comment": "",
        "child_ranges": [
            "(line 281,col 9)-(line 286,col 9)",
            "(line 287,col 9)-(line 287,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang.SerializationUtilsTest.testSerializeBytesNull()",
        "snippet": "    public void testSerializeBytesNull() throws Exception {\n        byte[] testBytes = SerializationUtils.serialize(null);\n\n        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(streamReal);\n        oos.writeObject(null);\n        oos.flush();\n        oos.close();\n\n        byte[] realBytes = streamReal.toByteArray();\n        assertEquals(testBytes.length, realBytes.length);\n        for (int i = 0; i < realBytes.length; i++) {\n            assertEquals(realBytes[i], testBytes[i]);\n        }\n    }",
        "begin_line": 290,
        "end_line": 304,
        "comment": "",
        "child_ranges": [
            "(line 291,col 9)-(line 291,col 62)",
            "(line 293,col 9)-(line 293,col 71)",
            "(line 294,col 9)-(line 294,col 68)",
            "(line 295,col 9)-(line 295,col 30)",
            "(line 296,col 9)-(line 296,col 20)",
            "(line 297,col 9)-(line 297,col 20)",
            "(line 299,col 9)-(line 299,col 52)",
            "(line 300,col 9)-(line 300,col 57)",
            "(line 301,col 9)-(line 303,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang.SerializationUtilsTest.testDeserializeBytes()",
        "snippet": "    public void testDeserializeBytes() throws Exception {\n        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(streamReal);\n        oos.writeObject(iMap);\n        oos.flush();\n        oos.close();\n\n        Object test = SerializationUtils.deserialize(streamReal.toByteArray());\n        assertNotNull(test);\n        assertTrue(test instanceof HashMap);\n        assertTrue(test != iMap);\n        HashMap testMap = (HashMap) test;\n        assertEquals(iString, testMap.get(\"FOO\"));\n        assertTrue(iString != testMap.get(\"FOO\"));\n        assertEquals(iInteger, testMap.get(\"BAR\"));\n        assertTrue(iInteger != testMap.get(\"BAR\"));\n        assertEquals(iMap, testMap);\n    }",
        "begin_line": 308,
        "end_line": 325,
        "comment": "",
        "child_ranges": [
            "(line 309,col 9)-(line 309,col 71)",
            "(line 310,col 9)-(line 310,col 68)",
            "(line 311,col 9)-(line 311,col 30)",
            "(line 312,col 9)-(line 312,col 20)",
            "(line 313,col 9)-(line 313,col 20)",
            "(line 315,col 9)-(line 315,col 79)",
            "(line 316,col 9)-(line 316,col 28)",
            "(line 317,col 9)-(line 317,col 44)",
            "(line 318,col 9)-(line 318,col 33)",
            "(line 319,col 9)-(line 319,col 41)",
            "(line 320,col 9)-(line 320,col 50)",
            "(line 321,col 9)-(line 321,col 50)",
            "(line 322,col 9)-(line 322,col 51)",
            "(line 323,col 9)-(line 323,col 51)",
            "(line 324,col 9)-(line 324,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang.SerializationUtilsTest.testDeserializeBytesOfNull()",
        "snippet": "    public void testDeserializeBytesOfNull() throws Exception {\n        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(streamReal);\n        oos.writeObject(null);\n        oos.flush();\n        oos.close();\n\n        Object test = SerializationUtils.deserialize(streamReal.toByteArray());\n        assertNull(test);\n    }",
        "begin_line": 327,
        "end_line": 336,
        "comment": "",
        "child_ranges": [
            "(line 328,col 9)-(line 328,col 71)",
            "(line 329,col 9)-(line 329,col 68)",
            "(line 330,col 9)-(line 330,col 30)",
            "(line 331,col 9)-(line 331,col 20)",
            "(line 332,col 9)-(line 332,col 20)",
            "(line 334,col 9)-(line 334,col 79)",
            "(line 335,col 9)-(line 335,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang.SerializationUtilsTest.testDeserializeBytesNull()",
        "snippet": "    public void testDeserializeBytesNull() throws Exception {\n        try {\n            SerializationUtils.deserialize((byte[]) null);\n        } catch (IllegalArgumentException ex) {\n            return;\n        }\n        fail();\n    }",
        "begin_line": 338,
        "end_line": 345,
        "comment": "",
        "child_ranges": [
            "(line 339,col 9)-(line 343,col 9)",
            "(line 344,col 9)-(line 344,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang.SerializationUtilsTest.testDeserializeBytesBadStream()",
        "snippet": "    public void testDeserializeBytesBadStream() throws Exception {\n        try {\n            SerializationUtils.deserialize(new byte[0]);\n        } catch (SerializationException ex) {\n            return;\n        }\n        fail();\n    }",
        "begin_line": 347,
        "end_line": 354,
        "comment": "",
        "child_ranges": [
            "(line 348,col 9)-(line 352,col 9)",
            "(line 353,col 9)-(line 353,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang.SerializationUtilsTest.testClone()",
        "snippet": "    public void testClone() throws Exception {\n        Object test = SerializationUtils.clone(iMap);\n        assertNotNull(test);\n        assertTrue(test instanceof HashMap);\n        assertTrue(test != iMap);\n        HashMap testMap = (HashMap) test;\n        assertEquals(iString, testMap.get(\"FOO\"));\n        assertTrue(iString != testMap.get(\"FOO\"));\n        assertEquals(iInteger, testMap.get(\"BAR\"));\n        assertTrue(iInteger != testMap.get(\"BAR\"));\n        assertEquals(iMap, testMap);\n    }",
        "begin_line": 358,
        "end_line": 369,
        "comment": "",
        "child_ranges": [
            "(line 359,col 9)-(line 359,col 53)",
            "(line 360,col 9)-(line 360,col 28)",
            "(line 361,col 9)-(line 361,col 44)",
            "(line 362,col 9)-(line 362,col 33)",
            "(line 363,col 9)-(line 363,col 41)",
            "(line 364,col 9)-(line 364,col 50)",
            "(line 365,col 9)-(line 365,col 50)",
            "(line 366,col 9)-(line 366,col 51)",
            "(line 367,col 9)-(line 367,col 51)",
            "(line 368,col 9)-(line 368,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang.SerializationUtilsTest.testCloneNull()",
        "snippet": "    public void testCloneNull() throws Exception {\n        Object test = SerializationUtils.clone(null);\n        assertNull(test);\n    }",
        "begin_line": 371,
        "end_line": 374,
        "comment": "",
        "child_ranges": [
            "(line 372,col 9)-(line 372,col 53)",
            "(line 373,col 9)-(line 373,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang.SerializationUtilsTest.testCloneUnserializable()",
        "snippet": "    public void testCloneUnserializable() throws Exception {\n        try {\n            iMap.put(new Object(), new Object());\n            SerializationUtils.clone(iMap);\n        } catch (SerializationException ex) {\n            return;\n        }\n        fail();\n    }",
        "begin_line": 376,
        "end_line": 384,
        "comment": "",
        "child_ranges": [
            "(line 377,col 9)-(line 382,col 9)",
            "(line 383,col 9)-(line 383,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang.ClassNotFoundSerializationTest.readObject(java.io.ObjectInputStream)",
        "snippet": "    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException    {\n        throw new ClassNotFoundException(SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE);\n    }",
        "begin_line": 391,
        "end_line": 393,
        "comment": "",
        "child_ranges": [
            "(line 392,col 9)-(line 392,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharRangeTest.java",
        "signature": "org.apache.commons.lang.CharRangeTest.CharRangeTest(java.lang.String)",
        "snippet": "    public CharRangeTest(String name) {\n        super(name);\n    }",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharRangeTest.java",
        "signature": "org.apache.commons.lang.CharRangeTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharRangeTest.java",
        "signature": "org.apache.commons.lang.CharRangeTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(CharRangeTest.class);\n        suite.setName(\"CharRange Tests\");\n        return suite;\n    }",
        "begin_line": 44,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 61)",
            "(line 46,col 9)-(line 46,col 41)",
            "(line 47,col 9)-(line 47,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharRangeTest.java",
        "signature": "org.apache.commons.lang.CharRangeTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        super.setUp();\n    }",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharRangeTest.java",
        "signature": "org.apache.commons.lang.CharRangeTest.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        super.tearDown();\n    }",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharRangeTest.java",
        "signature": "org.apache.commons.lang.CharRangeTest.testClass()",
        "snippet": "    public void testClass() {\n        assertEquals(true, Modifier.isPublic(CharRange.class.getModifiers()));\n        assertEquals(true, Modifier.isFinal(CharRange.class.getModifiers()));\n    }",
        "begin_line": 59,
        "end_line": 62,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 78)",
            "(line 61,col 9)-(line 61,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharRangeTest.java",
        "signature": "org.apache.commons.lang.CharRangeTest.testConstructorAccessors_Char()",
        "snippet": "    public void testConstructorAccessors_Char() {\n        CharRange rangea = new CharRange('a');\n        assertEquals('a', rangea.getStart());\n        assertEquals('a', rangea.getEnd());\n        assertEquals(false, rangea.isNegated());\n        assertEquals(\"a\", rangea.toString());\n    }",
        "begin_line": 65,
        "end_line": 71,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 46)",
            "(line 67,col 9)-(line 67,col 45)",
            "(line 68,col 9)-(line 68,col 43)",
            "(line 69,col 9)-(line 69,col 48)",
            "(line 70,col 9)-(line 70,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharRangeTest.java",
        "signature": "org.apache.commons.lang.CharRangeTest.testConstructorAccessors_CharBoolean_Normal()",
        "snippet": "    public void testConstructorAccessors_CharBoolean_Normal() {\n        CharRange rangea = new CharRange('a');\n        assertEquals('a', rangea.getStart());\n        assertEquals('a', rangea.getEnd());\n        assertEquals(false, rangea.isNegated());\n        assertEquals(\"a\", rangea.toString());\n    }",
        "begin_line": 73,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 46)",
            "(line 75,col 9)-(line 75,col 45)",
            "(line 76,col 9)-(line 76,col 43)",
            "(line 77,col 9)-(line 77,col 48)",
            "(line 78,col 9)-(line 78,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharRangeTest.java",
        "signature": "org.apache.commons.lang.CharRangeTest.testConstructorAccessors_CharBoolean_Negated()",
        "snippet": "    public void testConstructorAccessors_CharBoolean_Negated() {\n        CharRange rangea = new CharRange('a', true);\n        assertEquals('a', rangea.getStart());\n        assertEquals('a', rangea.getEnd());\n        assertEquals(true, rangea.isNegated());\n        assertEquals(\"^a\", rangea.toString());\n    }",
        "begin_line": 81,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 52)",
            "(line 83,col 9)-(line 83,col 45)",
            "(line 84,col 9)-(line 84,col 43)",
            "(line 85,col 9)-(line 85,col 47)",
            "(line 86,col 9)-(line 86,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharRangeTest.java",
        "signature": "org.apache.commons.lang.CharRangeTest.testConstructorAccessors_CharChar_Same()",
        "snippet": "    public void testConstructorAccessors_CharChar_Same() {\n        CharRange rangea = new CharRange('a', 'a');\n        assertEquals('a', rangea.getStart());\n        assertEquals('a', rangea.getEnd());\n        assertEquals(false, rangea.isNegated());\n        assertEquals(\"a\", rangea.toString());\n    }",
        "begin_line": 89,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 51)",
            "(line 91,col 9)-(line 91,col 45)",
            "(line 92,col 9)-(line 92,col 43)",
            "(line 93,col 9)-(line 93,col 48)",
            "(line 94,col 9)-(line 94,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharRangeTest.java",
        "signature": "org.apache.commons.lang.CharRangeTest.testConstructorAccessors_CharChar_Normal()",
        "snippet": "    public void testConstructorAccessors_CharChar_Normal() {\n        CharRange rangea = new CharRange('a', 'e');\n        assertEquals('a', rangea.getStart());\n        assertEquals('e', rangea.getEnd());\n        assertEquals(false, rangea.isNegated());\n        assertEquals(\"a-e\", rangea.toString());\n    }",
        "begin_line": 97,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 51)",
            "(line 99,col 9)-(line 99,col 45)",
            "(line 100,col 9)-(line 100,col 43)",
            "(line 101,col 9)-(line 101,col 48)",
            "(line 102,col 9)-(line 102,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharRangeTest.java",
        "signature": "org.apache.commons.lang.CharRangeTest.testConstructorAccessors_CharChar_Reversed()",
        "snippet": "    public void testConstructorAccessors_CharChar_Reversed() {\n        CharRange rangea = new CharRange('e', 'a');\n        assertEquals('a', rangea.getStart());\n        assertEquals('e', rangea.getEnd());\n        assertEquals(false, rangea.isNegated());\n        assertEquals(\"a-e\", rangea.toString());\n    }",
        "begin_line": 105,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 51)",
            "(line 107,col 9)-(line 107,col 45)",
            "(line 108,col 9)-(line 108,col 43)",
            "(line 109,col 9)-(line 109,col 48)",
            "(line 110,col 9)-(line 110,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharRangeTest.java",
        "signature": "org.apache.commons.lang.CharRangeTest.testConstructorAccessors_CharCharBoolean_Same()",
        "snippet": "    public void testConstructorAccessors_CharCharBoolean_Same() {\n        CharRange rangea = new CharRange('a', 'a', false);\n        assertEquals('a', rangea.getStart());\n        assertEquals('a', rangea.getEnd());\n        assertEquals(false, rangea.isNegated());\n        assertEquals(\"a\", rangea.toString());\n    }",
        "begin_line": 113,
        "end_line": 119,
        "comment": "",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 58)",
            "(line 115,col 9)-(line 115,col 45)",
            "(line 116,col 9)-(line 116,col 43)",
            "(line 117,col 9)-(line 117,col 48)",
            "(line 118,col 9)-(line 118,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharRangeTest.java",
        "signature": "org.apache.commons.lang.CharRangeTest.testConstructorAccessors_CharCharBoolean_Normal()",
        "snippet": "    public void testConstructorAccessors_CharCharBoolean_Normal() {\n        CharRange rangea = new CharRange('a', 'e', false);\n        assertEquals('a', rangea.getStart());\n        assertEquals('e', rangea.getEnd());\n        assertEquals(false, rangea.isNegated());\n        assertEquals(\"a-e\", rangea.toString());\n    }",
        "begin_line": 121,
        "end_line": 127,
        "comment": "",
        "child_ranges": [
            "(line 122,col 9)-(line 122,col 58)",
            "(line 123,col 9)-(line 123,col 45)",
            "(line 124,col 9)-(line 124,col 43)",
            "(line 125,col 9)-(line 125,col 48)",
            "(line 126,col 9)-(line 126,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharRangeTest.java",
        "signature": "org.apache.commons.lang.CharRangeTest.testConstructorAccessors_CharCharBoolean_Reversed()",
        "snippet": "    public void testConstructorAccessors_CharCharBoolean_Reversed() {\n        CharRange rangea = new CharRange('e', 'a', false);\n        assertEquals('a', rangea.getStart());\n        assertEquals('e', rangea.getEnd());\n        assertEquals(false, rangea.isNegated());\n        assertEquals(\"a-e\", rangea.toString());\n    }",
        "begin_line": 129,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 130,col 9)-(line 130,col 58)",
            "(line 131,col 9)-(line 131,col 45)",
            "(line 132,col 9)-(line 132,col 43)",
            "(line 133,col 9)-(line 133,col 48)",
            "(line 134,col 9)-(line 134,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharRangeTest.java",
        "signature": "org.apache.commons.lang.CharRangeTest.testConstructorAccessors_CharCharBoolean_SameNegated()",
        "snippet": "    public void testConstructorAccessors_CharCharBoolean_SameNegated() {\n        CharRange rangea = new CharRange('a', 'a', true);\n        assertEquals('a', rangea.getStart());\n        assertEquals('a', rangea.getEnd());\n        assertEquals(true, rangea.isNegated());\n        assertEquals(\"^a\", rangea.toString());\n    }",
        "begin_line": 137,
        "end_line": 143,
        "comment": "",
        "child_ranges": [
            "(line 138,col 9)-(line 138,col 57)",
            "(line 139,col 9)-(line 139,col 45)",
            "(line 140,col 9)-(line 140,col 43)",
            "(line 141,col 9)-(line 141,col 47)",
            "(line 142,col 9)-(line 142,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharRangeTest.java",
        "signature": "org.apache.commons.lang.CharRangeTest.testConstructorAccessors_CharCharBoolean_NormalNegated()",
        "snippet": "    public void testConstructorAccessors_CharCharBoolean_NormalNegated() {\n        CharRange rangea = new CharRange('a', 'e', true);\n        assertEquals('a', rangea.getStart());\n        assertEquals('e', rangea.getEnd());\n        assertEquals(true, rangea.isNegated());\n        assertEquals(\"^a-e\", rangea.toString());\n    }",
        "begin_line": 145,
        "end_line": 151,
        "comment": "",
        "child_ranges": [
            "(line 146,col 9)-(line 146,col 57)",
            "(line 147,col 9)-(line 147,col 45)",
            "(line 148,col 9)-(line 148,col 43)",
            "(line 149,col 9)-(line 149,col 47)",
            "(line 150,col 9)-(line 150,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharRangeTest.java",
        "signature": "org.apache.commons.lang.CharRangeTest.testConstructorAccessors_CharCharBoolean_ReversedNegated()",
        "snippet": "    public void testConstructorAccessors_CharCharBoolean_ReversedNegated() {\n        CharRange rangea = new CharRange('e', 'a', true);\n        assertEquals('a', rangea.getStart());\n        assertEquals('e', rangea.getEnd());\n        assertEquals(true, rangea.isNegated());\n        assertEquals(\"^a-e\", rangea.toString());\n    }",
        "begin_line": 153,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 57)",
            "(line 155,col 9)-(line 155,col 45)",
            "(line 156,col 9)-(line 156,col 43)",
            "(line 157,col 9)-(line 157,col 47)",
            "(line 158,col 9)-(line 158,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharRangeTest.java",
        "signature": "org.apache.commons.lang.CharRangeTest.testEquals_Object()",
        "snippet": "    public void testEquals_Object() {\n        CharRange rangea = new CharRange('a');\n        CharRange rangeae = new CharRange('a', 'e');\n        CharRange rangenotbf = new CharRange('b', 'f', false);\n        \n        assertEquals(false, rangea.equals(null));\n        \n        assertEquals(true, rangea.equals(rangea));\n        assertEquals(true, rangea.equals(new CharRange('a')));\n        assertEquals(true, rangeae.equals(rangeae));\n        assertEquals(true, rangeae.equals(new CharRange('a', 'e')));\n        assertEquals(true, rangenotbf.equals(rangenotbf));\n        assertEquals(true, rangenotbf.equals(new CharRange('b', 'f', false)));\n        \n        assertEquals(false, rangea.equals(rangeae));\n        assertEquals(false, rangea.equals(rangenotbf));\n        assertEquals(false, rangeae.equals(rangea));\n        assertEquals(false, rangeae.equals(rangenotbf));\n        assertEquals(false, rangenotbf.equals(rangea));\n        assertEquals(false, rangenotbf.equals(rangeae));\n    }",
        "begin_line": 162,
        "end_line": 182,
        "comment": "-----------------------------------------------------------------------    ",
        "child_ranges": [
            "(line 163,col 9)-(line 163,col 46)",
            "(line 164,col 9)-(line 164,col 52)",
            "(line 165,col 9)-(line 165,col 62)",
            "(line 167,col 9)-(line 167,col 49)",
            "(line 169,col 9)-(line 169,col 50)",
            "(line 170,col 9)-(line 170,col 62)",
            "(line 171,col 9)-(line 171,col 52)",
            "(line 172,col 9)-(line 172,col 68)",
            "(line 173,col 9)-(line 173,col 58)",
            "(line 174,col 9)-(line 174,col 78)",
            "(line 176,col 9)-(line 176,col 52)",
            "(line 177,col 9)-(line 177,col 55)",
            "(line 178,col 9)-(line 178,col 52)",
            "(line 179,col 9)-(line 179,col 56)",
            "(line 180,col 9)-(line 180,col 55)",
            "(line 181,col 9)-(line 181,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharRangeTest.java",
        "signature": "org.apache.commons.lang.CharRangeTest.testHashCode()",
        "snippet": "    public void testHashCode() {\n        CharRange rangea = new CharRange('a');\n        CharRange rangeae = new CharRange('a', 'e');\n        CharRange rangenotbf = new CharRange('b', 'f', false);\n        \n        assertEquals(true, rangea.hashCode() == rangea.hashCode());\n        assertEquals(true, rangea.hashCode() == new CharRange('a').hashCode());\n        assertEquals(true, rangeae.hashCode() == rangeae.hashCode());\n        assertEquals(true, rangeae.hashCode() == new CharRange('a', 'e').hashCode());\n        assertEquals(true, rangenotbf.hashCode() == rangenotbf.hashCode());\n        assertEquals(true, rangenotbf.hashCode() == new CharRange('b', 'f', false).hashCode());\n        \n        assertEquals(false, rangea.hashCode() == rangeae.hashCode());\n        assertEquals(false, rangea.hashCode() == rangenotbf.hashCode());\n        assertEquals(false, rangeae.hashCode() == rangea.hashCode());\n        assertEquals(false, rangeae.hashCode() == rangenotbf.hashCode());\n        assertEquals(false, rangenotbf.hashCode() == rangea.hashCode());\n        assertEquals(false, rangenotbf.hashCode() == rangeae.hashCode());\n    }",
        "begin_line": 184,
        "end_line": 202,
        "comment": "",
        "child_ranges": [
            "(line 185,col 9)-(line 185,col 46)",
            "(line 186,col 9)-(line 186,col 52)",
            "(line 187,col 9)-(line 187,col 62)",
            "(line 189,col 9)-(line 189,col 67)",
            "(line 190,col 9)-(line 190,col 79)",
            "(line 191,col 9)-(line 191,col 69)",
            "(line 192,col 9)-(line 192,col 85)",
            "(line 193,col 9)-(line 193,col 75)",
            "(line 194,col 9)-(line 194,col 95)",
            "(line 196,col 9)-(line 196,col 69)",
            "(line 197,col 9)-(line 197,col 72)",
            "(line 198,col 9)-(line 198,col 69)",
            "(line 199,col 9)-(line 199,col 73)",
            "(line 200,col 9)-(line 200,col 72)",
            "(line 201,col 9)-(line 201,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharRangeTest.java",
        "signature": "org.apache.commons.lang.CharRangeTest.testContains_Char()",
        "snippet": "    public void testContains_Char() {\n        CharRange range = new CharRange('c');\n        assertEquals(false, range.contains('b'));\n        assertEquals(true, range.contains('c'));\n        assertEquals(false, range.contains('d'));\n        assertEquals(false, range.contains('e'));\n        \n        range = new CharRange('c', 'd');\n        assertEquals(false, range.contains('b'));\n        assertEquals(true, range.contains('c'));\n        assertEquals(true, range.contains('d'));\n        assertEquals(false, range.contains('e'));\n        \n        range = new CharRange('d', 'c');\n        assertEquals(false, range.contains('b'));\n        assertEquals(true, range.contains('c'));\n        assertEquals(true, range.contains('d'));\n        assertEquals(false, range.contains('e'));\n        \n        range = new CharRange('c', 'd', false);\n        assertEquals(false, range.contains('b'));\n        assertEquals(true, range.contains('c'));\n        assertEquals(true, range.contains('d'));\n        assertEquals(false, range.contains('e'));\n        \n        range = new CharRange('c', 'd', true);\n        assertEquals(true, range.contains('b'));\n        assertEquals(false, range.contains('c'));\n        assertEquals(false, range.contains('d'));\n        assertEquals(true, range.contains('e'));\n        assertEquals(true, range.contains((char) 0));\n        assertEquals(true, range.contains(Character.MAX_VALUE));\n    }",
        "begin_line": 205,
        "end_line": 237,
        "comment": "-----------------------------------------------------------------------    ",
        "child_ranges": [
            "(line 206,col 9)-(line 206,col 45)",
            "(line 207,col 9)-(line 207,col 49)",
            "(line 208,col 9)-(line 208,col 48)",
            "(line 209,col 9)-(line 209,col 49)",
            "(line 210,col 9)-(line 210,col 49)",
            "(line 212,col 9)-(line 212,col 40)",
            "(line 213,col 9)-(line 213,col 49)",
            "(line 214,col 9)-(line 214,col 48)",
            "(line 215,col 9)-(line 215,col 48)",
            "(line 216,col 9)-(line 216,col 49)",
            "(line 218,col 9)-(line 218,col 40)",
            "(line 219,col 9)-(line 219,col 49)",
            "(line 220,col 9)-(line 220,col 48)",
            "(line 221,col 9)-(line 221,col 48)",
            "(line 222,col 9)-(line 222,col 49)",
            "(line 224,col 9)-(line 224,col 47)",
            "(line 225,col 9)-(line 225,col 49)",
            "(line 226,col 9)-(line 226,col 48)",
            "(line 227,col 9)-(line 227,col 48)",
            "(line 228,col 9)-(line 228,col 49)",
            "(line 230,col 9)-(line 230,col 46)",
            "(line 231,col 9)-(line 231,col 48)",
            "(line 232,col 9)-(line 232,col 49)",
            "(line 233,col 9)-(line 233,col 49)",
            "(line 234,col 9)-(line 234,col 48)",
            "(line 235,col 9)-(line 235,col 53)",
            "(line 236,col 9)-(line 236,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharRangeTest.java",
        "signature": "org.apache.commons.lang.CharRangeTest.testContains_Charrange()",
        "snippet": "    public void testContains_Charrange() {\n        CharRange a = new CharRange('a');\n        CharRange b = new CharRange('b');\n        CharRange c = new CharRange('c');\n        CharRange c2 = new CharRange('c');\n        CharRange d = new CharRange('d');\n        CharRange e = new CharRange('e');\n        CharRange cd = new CharRange('c', 'd');\n        CharRange bd = new CharRange('b', 'd');\n        CharRange bc = new CharRange('b', 'c');\n        CharRange ab = new CharRange('a', 'b');\n        CharRange de = new CharRange('d', 'e');\n        CharRange ef = new CharRange('e', 'f');\n        CharRange ae = new CharRange('a', 'e');\n        \n        // normal/normal\n        assertEquals(false, c.contains(b));\n        assertEquals(true, c.contains(c));\n        assertEquals(true, c.contains(c2));\n        assertEquals(false, c.contains(d));\n        \n        assertEquals(false, c.contains(cd));\n        assertEquals(false, c.contains(bd));\n        assertEquals(false, c.contains(bc));\n        assertEquals(false, c.contains(ab));\n        assertEquals(false, c.contains(de));\n        \n        assertEquals(true, cd.contains(c));\n        assertEquals(true, bd.contains(c));\n        assertEquals(true, bc.contains(c));\n        assertEquals(false, ab.contains(c));\n        assertEquals(false, de.contains(c));\n\n        assertEquals(true, ae.contains(b));\n        assertEquals(true, ae.contains(ab));\n        assertEquals(true, ae.contains(bc));\n        assertEquals(true, ae.contains(cd));\n        assertEquals(true, ae.contains(de));\n        \n        CharRange notb = new CharRange('b', 'b', true);\n        CharRange notc = new CharRange('c', 'c', true);\n        CharRange notd = new CharRange('d', 'd', true);\n        CharRange notab = new CharRange('a', 'b', true);\n        CharRange notbc = new CharRange('b', 'c', true);\n        CharRange notbd = new CharRange('b', 'd', true);\n        CharRange notcd = new CharRange('c', 'd', true);\n        CharRange notde = new CharRange('d', 'e', true);\n        CharRange notae = new CharRange('a', 'e', true);\n        CharRange all = new CharRange((char) 0, Character.MAX_VALUE);\n        CharRange allbutfirst = new CharRange((char) 1, Character.MAX_VALUE);\n        \n        // normal/negated\n        assertEquals(false, c.contains(notc));\n        assertEquals(false, c.contains(notbd));\n        assertEquals(true, all.contains(notc));\n        assertEquals(true, all.contains(notbd));\n        assertEquals(false, allbutfirst.contains(notc));\n        assertEquals(false, allbutfirst.contains(notbd));\n        \n        // negated/normal\n        assertEquals(true, notc.contains(a));\n        assertEquals(true, notc.contains(b));\n        assertEquals(false, notc.contains(c));\n        assertEquals(true, notc.contains(d));\n        assertEquals(true, notc.contains(e));\n        \n        assertEquals(true, notc.contains(ab));\n        assertEquals(false, notc.contains(bc));\n        assertEquals(false, notc.contains(bd));\n        assertEquals(false, notc.contains(cd));\n        assertEquals(true, notc.contains(de));\n        assertEquals(false, notc.contains(ae));\n        assertEquals(false, notc.contains(all));\n        assertEquals(false, notc.contains(allbutfirst));\n        \n        assertEquals(true, notbd.contains(a));\n        assertEquals(false, notbd.contains(b));\n        assertEquals(false, notbd.contains(c));\n        assertEquals(false, notbd.contains(d));\n        assertEquals(true, notbd.contains(e));\n        \n        assertEquals(true, notcd.contains(ab));\n        assertEquals(false, notcd.contains(bc));\n        assertEquals(false, notcd.contains(bd));\n        assertEquals(false, notcd.contains(cd));\n        assertEquals(false, notcd.contains(de));\n        assertEquals(false, notcd.contains(ae));\n        assertEquals(true, notcd.contains(ef));\n        assertEquals(false, notcd.contains(all));\n        assertEquals(false, notcd.contains(allbutfirst));\n        \n        // negated/negated\n        assertEquals(false, notc.contains(notb));\n        assertEquals(true, notc.contains(notc));\n        assertEquals(false, notc.contains(notd));\n        \n        assertEquals(false, notc.contains(notab));\n        assertEquals(true, notc.contains(notbc));\n        assertEquals(true, notc.contains(notbd));\n        assertEquals(true, notc.contains(notcd));\n        assertEquals(false, notc.contains(notde));\n        \n        assertEquals(false, notbd.contains(notb));\n        assertEquals(false, notbd.contains(notc));\n        assertEquals(false, notbd.contains(notd));\n        \n        assertEquals(false, notbd.contains(notab));\n        assertEquals(false, notbd.contains(notbc));\n        assertEquals(true, notbd.contains(notbd));\n        assertEquals(false, notbd.contains(notcd));\n        assertEquals(false, notbd.contains(notde));\n        assertEquals(true, notbd.contains(notae));\n    }",
        "begin_line": 240,
        "end_line": 352,
        "comment": "-----------------------------------------------------------------------    ",
        "child_ranges": [
            "(line 241,col 9)-(line 241,col 41)",
            "(line 242,col 9)-(line 242,col 41)",
            "(line 243,col 9)-(line 243,col 41)",
            "(line 244,col 9)-(line 244,col 42)",
            "(line 245,col 9)-(line 245,col 41)",
            "(line 246,col 9)-(line 246,col 41)",
            "(line 247,col 9)-(line 247,col 47)",
            "(line 248,col 9)-(line 248,col 47)",
            "(line 249,col 9)-(line 249,col 47)",
            "(line 250,col 9)-(line 250,col 47)",
            "(line 251,col 9)-(line 251,col 47)",
            "(line 252,col 9)-(line 252,col 47)",
            "(line 253,col 9)-(line 253,col 47)",
            "(line 256,col 9)-(line 256,col 43)",
            "(line 257,col 9)-(line 257,col 42)",
            "(line 258,col 9)-(line 258,col 43)",
            "(line 259,col 9)-(line 259,col 43)",
            "(line 261,col 9)-(line 261,col 44)",
            "(line 262,col 9)-(line 262,col 44)",
            "(line 263,col 9)-(line 263,col 44)",
            "(line 264,col 9)-(line 264,col 44)",
            "(line 265,col 9)-(line 265,col 44)",
            "(line 267,col 9)-(line 267,col 43)",
            "(line 268,col 9)-(line 268,col 43)",
            "(line 269,col 9)-(line 269,col 43)",
            "(line 270,col 9)-(line 270,col 44)",
            "(line 271,col 9)-(line 271,col 44)",
            "(line 273,col 9)-(line 273,col 43)",
            "(line 274,col 9)-(line 274,col 44)",
            "(line 275,col 9)-(line 275,col 44)",
            "(line 276,col 9)-(line 276,col 44)",
            "(line 277,col 9)-(line 277,col 44)",
            "(line 279,col 9)-(line 279,col 55)",
            "(line 280,col 9)-(line 280,col 55)",
            "(line 281,col 9)-(line 281,col 55)",
            "(line 282,col 9)-(line 282,col 56)",
            "(line 283,col 9)-(line 283,col 56)",
            "(line 284,col 9)-(line 284,col 56)",
            "(line 285,col 9)-(line 285,col 56)",
            "(line 286,col 9)-(line 286,col 56)",
            "(line 287,col 9)-(line 287,col 56)",
            "(line 288,col 9)-(line 288,col 69)",
            "(line 289,col 9)-(line 289,col 77)",
            "(line 292,col 9)-(line 292,col 46)",
            "(line 293,col 9)-(line 293,col 47)",
            "(line 294,col 9)-(line 294,col 47)",
            "(line 295,col 9)-(line 295,col 48)",
            "(line 296,col 9)-(line 296,col 56)",
            "(line 297,col 9)-(line 297,col 57)",
            "(line 300,col 9)-(line 300,col 45)",
            "(line 301,col 9)-(line 301,col 45)",
            "(line 302,col 9)-(line 302,col 46)",
            "(line 303,col 9)-(line 303,col 45)",
            "(line 304,col 9)-(line 304,col 45)",
            "(line 306,col 9)-(line 306,col 46)",
            "(line 307,col 9)-(line 307,col 47)",
            "(line 308,col 9)-(line 308,col 47)",
            "(line 309,col 9)-(line 309,col 47)",
            "(line 310,col 9)-(line 310,col 46)",
            "(line 311,col 9)-(line 311,col 47)",
            "(line 312,col 9)-(line 312,col 48)",
            "(line 313,col 9)-(line 313,col 56)",
            "(line 315,col 9)-(line 315,col 46)",
            "(line 316,col 9)-(line 316,col 47)",
            "(line 317,col 9)-(line 317,col 47)",
            "(line 318,col 9)-(line 318,col 47)",
            "(line 319,col 9)-(line 319,col 46)",
            "(line 321,col 9)-(line 321,col 47)",
            "(line 322,col 9)-(line 322,col 48)",
            "(line 323,col 9)-(line 323,col 48)",
            "(line 324,col 9)-(line 324,col 48)",
            "(line 325,col 9)-(line 325,col 48)",
            "(line 326,col 9)-(line 326,col 48)",
            "(line 327,col 9)-(line 327,col 47)",
            "(line 328,col 9)-(line 328,col 49)",
            "(line 329,col 9)-(line 329,col 57)",
            "(line 332,col 9)-(line 332,col 49)",
            "(line 333,col 9)-(line 333,col 48)",
            "(line 334,col 9)-(line 334,col 49)",
            "(line 336,col 9)-(line 336,col 50)",
            "(line 337,col 9)-(line 337,col 49)",
            "(line 338,col 9)-(line 338,col 49)",
            "(line 339,col 9)-(line 339,col 49)",
            "(line 340,col 9)-(line 340,col 50)",
            "(line 342,col 9)-(line 342,col 50)",
            "(line 343,col 9)-(line 343,col 50)",
            "(line 344,col 9)-(line 344,col 50)",
            "(line 346,col 9)-(line 346,col 51)",
            "(line 347,col 9)-(line 347,col 51)",
            "(line 348,col 9)-(line 348,col 50)",
            "(line 349,col 9)-(line 349,col 51)",
            "(line 350,col 9)-(line 350,col 51)",
            "(line 351,col 9)-(line 351,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharRangeTest.java",
        "signature": "org.apache.commons.lang.CharRangeTest.testContainsNullArg()",
        "snippet": "    public void testContainsNullArg() {\n        CharRange range = new CharRange('a');\n        try {\n            boolean contains = range.contains(null);\n        } catch(IllegalArgumentException e) {\n            assertEquals(\"The Range must not be null\", e.getMessage());\n        }\n    }",
        "begin_line": 354,
        "end_line": 361,
        "comment": "",
        "child_ranges": [
            "(line 355,col 9)-(line 355,col 45)",
            "(line 356,col 9)-(line 360,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharRangeTest.java",
        "signature": "org.apache.commons.lang.CharRangeTest.testSerialization()",
        "snippet": "    public void testSerialization() {\n        CharRange range = new CharRange('a');\n        assertEquals(range, SerializationUtils.clone(range)); \n        range = new CharRange('a', 'e');\n        assertEquals(range, SerializationUtils.clone(range)); \n        range = new CharRange('a', 'e', true);\n        assertEquals(range, SerializationUtils.clone(range)); \n    }",
        "begin_line": 364,
        "end_line": 371,
        "comment": "-----------------------------------------------------------------------    ",
        "child_ranges": [
            "(line 365,col 9)-(line 365,col 45)",
            "(line 366,col 9)-(line 366,col 61)",
            "(line 367,col 9)-(line 367,col 40)",
            "(line 368,col 9)-(line 368,col 61)",
            "(line 369,col 9)-(line 369,col 46)",
            "(line 370,col 9)-(line 370,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharUtilsTest.java",
        "signature": "org.apache.commons.lang.CharUtilsTest.CharUtilsTest(java.lang.String)",
        "snippet": "    public CharUtilsTest(String name) {\n        super(name);\n    }",
        "begin_line": 39,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharUtilsTest.java",
        "signature": "org.apache.commons.lang.CharUtilsTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharUtilsTest.java",
        "signature": "org.apache.commons.lang.CharUtilsTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(CharUtilsTest.class);\n        suite.setName(\"CharUtils Tests\");\n        return suite;\n    }",
        "begin_line": 47,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 61)",
            "(line 49,col 9)-(line 49,col 41)",
            "(line 50,col 9)-(line 50,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharUtilsTest.java",
        "signature": "org.apache.commons.lang.CharUtilsTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        super.setUp();\n    }",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharUtilsTest.java",
        "signature": "org.apache.commons.lang.CharUtilsTest.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        super.tearDown();\n    }",
        "begin_line": 57,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 58,col 9)-(line 58,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharUtilsTest.java",
        "signature": "org.apache.commons.lang.CharUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new CharUtils());\n        Constructor[] cons = CharUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(BooleanUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(BooleanUtils.class.getModifiers()));\n    }",
        "begin_line": 62,
        "end_line": 69,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 39)",
            "(line 64,col 9)-(line 64,col 71)",
            "(line 65,col 9)-(line 65,col 37)",
            "(line 66,col 9)-(line 66,col 70)",
            "(line 67,col 9)-(line 67,col 81)",
            "(line 68,col 9)-(line 68,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharUtilsTest.java",
        "signature": "org.apache.commons.lang.CharUtilsTest.testToCharacterObject_char()",
        "snippet": "    public void testToCharacterObject_char() {\n        assertEquals(new Character('a'), CharUtils.toCharacterObject('a'));\n        assertSame(CharUtils.toCharacterObject('a'), CharUtils.toCharacterObject('a'));\n       \n        for (int i = 0; i < 128; i++) {\n            Character ch = CharUtils.toCharacterObject((char) i);\n            Character ch2 = CharUtils.toCharacterObject((char) i);\n            assertSame(ch, ch2);\n            assertEquals(i, ch.charValue());\n        }\n        for (int i = 128; i < 196; i++) {\n            Character ch = CharUtils.toCharacterObject((char) i);\n            Character ch2 = CharUtils.toCharacterObject((char) i);\n            assertEquals(ch, ch2);\n            assertTrue(ch != ch2);\n            assertEquals(i, ch.charValue());\n            assertEquals(i, ch2.charValue());\n        }\n    }",
        "begin_line": 72,
        "end_line": 90,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 75)",
            "(line 74,col 9)-(line 74,col 87)",
            "(line 76,col 9)-(line 81,col 9)",
            "(line 82,col 9)-(line 89,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharUtilsTest.java",
        "signature": "org.apache.commons.lang.CharUtilsTest.testToCharacterObject_String()",
        "snippet": "    public void testToCharacterObject_String() {\n        assertEquals(null, CharUtils.toCharacterObject(null));\n        assertEquals(null, CharUtils.toCharacterObject(\"\"));\n        assertEquals(new Character('a'), CharUtils.toCharacterObject(\"a\"));\n        assertEquals(new Character('a'), CharUtils.toCharacterObject(\"abc\"));\n        assertSame(CharUtils.toCharacterObject(\"a\"), CharUtils.toCharacterObject(\"a\"));\n        assertSame(CharUtils.toCharacterObject(\"a\"), CharUtils.toCharacterObject('a'));\n    }",
        "begin_line": 92,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 62)",
            "(line 94,col 9)-(line 94,col 60)",
            "(line 95,col 9)-(line 95,col 75)",
            "(line 96,col 9)-(line 96,col 77)",
            "(line 97,col 9)-(line 97,col 87)",
            "(line 98,col 9)-(line 98,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharUtilsTest.java",
        "signature": "org.apache.commons.lang.CharUtilsTest.testToChar_Character()",
        "snippet": "    public void testToChar_Character() {\n        assertEquals('A', CharUtils.toChar(CHARACTER_A));\n        assertEquals('B', CharUtils.toChar(CHARACTER_B));\n        try {\n            CharUtils.toChar((Character) null);\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 102,
        "end_line": 108,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 57)",
            "(line 104,col 9)-(line 104,col 57)",
            "(line 105,col 9)-(line 107,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharUtilsTest.java",
        "signature": "org.apache.commons.lang.CharUtilsTest.testToChar_Character_char()",
        "snippet": "    public void testToChar_Character_char() {\n        assertEquals('A', CharUtils.toChar(CHARACTER_A, 'X'));\n        assertEquals('B', CharUtils.toChar(CHARACTER_B, 'X'));\n        assertEquals('X', CharUtils.toChar((Character) null, 'X'));\n    }",
        "begin_line": 110,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 62)",
            "(line 112,col 9)-(line 112,col 62)",
            "(line 113,col 9)-(line 113,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharUtilsTest.java",
        "signature": "org.apache.commons.lang.CharUtilsTest.testToChar_String()",
        "snippet": "    public void testToChar_String() {\n        assertEquals('A', CharUtils.toChar(\"A\"));\n        assertEquals('B', CharUtils.toChar(\"BA\"));\n        try {\n            CharUtils.toChar((String) null);\n        } catch (IllegalArgumentException ex) {}\n        try {\n            CharUtils.toChar(\"\");\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 117,
        "end_line": 126,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 118,col 9)-(line 118,col 49)",
            "(line 119,col 9)-(line 119,col 50)",
            "(line 120,col 9)-(line 122,col 48)",
            "(line 123,col 9)-(line 125,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharUtilsTest.java",
        "signature": "org.apache.commons.lang.CharUtilsTest.testToChar_String_char()",
        "snippet": "    public void testToChar_String_char() {\n        assertEquals('A', CharUtils.toChar(\"A\", 'X'));\n        assertEquals('B', CharUtils.toChar(\"BA\", 'X'));\n        assertEquals('X', CharUtils.toChar(\"\", 'X'));\n        assertEquals('X', CharUtils.toChar((String) null, 'X'));\n    }",
        "begin_line": 128,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 54)",
            "(line 130,col 9)-(line 130,col 55)",
            "(line 131,col 9)-(line 131,col 53)",
            "(line 132,col 9)-(line 132,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharUtilsTest.java",
        "signature": "org.apache.commons.lang.CharUtilsTest.testToIntValue_char()",
        "snippet": "    public void testToIntValue_char() {\n        assertEquals(0, CharUtils.toIntValue('0'));\n        assertEquals(1, CharUtils.toIntValue('1'));\n        assertEquals(2, CharUtils.toIntValue('2'));\n        assertEquals(3, CharUtils.toIntValue('3'));\n        assertEquals(4, CharUtils.toIntValue('4'));\n        assertEquals(5, CharUtils.toIntValue('5'));\n        assertEquals(6, CharUtils.toIntValue('6'));\n        assertEquals(7, CharUtils.toIntValue('7'));\n        assertEquals(8, CharUtils.toIntValue('8'));\n        assertEquals(9, CharUtils.toIntValue('9'));\n        try {\n            CharUtils.toIntValue('a');\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 136,
        "end_line": 150,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 51)",
            "(line 138,col 9)-(line 138,col 51)",
            "(line 139,col 9)-(line 139,col 51)",
            "(line 140,col 9)-(line 140,col 51)",
            "(line 141,col 9)-(line 141,col 51)",
            "(line 142,col 9)-(line 142,col 51)",
            "(line 143,col 9)-(line 143,col 51)",
            "(line 144,col 9)-(line 144,col 51)",
            "(line 145,col 9)-(line 145,col 51)",
            "(line 146,col 9)-(line 146,col 51)",
            "(line 147,col 9)-(line 149,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharUtilsTest.java",
        "signature": "org.apache.commons.lang.CharUtilsTest.testToIntValue_char_int()",
        "snippet": "    public void testToIntValue_char_int() {\n        assertEquals(0, CharUtils.toIntValue('0', -1));\n        assertEquals(3, CharUtils.toIntValue('3', -1));\n        assertEquals(-1, CharUtils.toIntValue('a', -1));\n    }",
        "begin_line": 152,
        "end_line": 156,
        "comment": "",
        "child_ranges": [
            "(line 153,col 9)-(line 153,col 55)",
            "(line 154,col 9)-(line 154,col 55)",
            "(line 155,col 9)-(line 155,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharUtilsTest.java",
        "signature": "org.apache.commons.lang.CharUtilsTest.testToIntValue_Character()",
        "snippet": "    public void testToIntValue_Character() {\n        assertEquals(0, CharUtils.toIntValue(new Character('0')));\n        assertEquals(3, CharUtils.toIntValue(new Character('3')));\n        try {\n            CharUtils.toIntValue(null);\n        } catch (IllegalArgumentException ex) {}\n        try {\n            CharUtils.toIntValue(CHARACTER_A);\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 159,
        "end_line": 168,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 66)",
            "(line 161,col 9)-(line 161,col 66)",
            "(line 162,col 9)-(line 164,col 48)",
            "(line 165,col 9)-(line 167,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharUtilsTest.java",
        "signature": "org.apache.commons.lang.CharUtilsTest.testToIntValue_Character_int()",
        "snippet": "    public void testToIntValue_Character_int() {\n        assertEquals(0, CharUtils.toIntValue(new Character('0'), -1));\n        assertEquals(3, CharUtils.toIntValue(new Character('3'), -1));\n        assertEquals(-1, CharUtils.toIntValue(new Character('A'), -1));\n        assertEquals(-1, CharUtils.toIntValue(null, -1));\n    }",
        "begin_line": 170,
        "end_line": 175,
        "comment": "",
        "child_ranges": [
            "(line 171,col 9)-(line 171,col 70)",
            "(line 172,col 9)-(line 172,col 70)",
            "(line 173,col 9)-(line 173,col 71)",
            "(line 174,col 9)-(line 174,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharUtilsTest.java",
        "signature": "org.apache.commons.lang.CharUtilsTest.testToString_char()",
        "snippet": "    public void testToString_char() {\n        assertEquals(\"a\", CharUtils.toString('a'));\n        assertSame(CharUtils.toString('a'), CharUtils.toString('a'));\n       \n        for (int i = 0; i < 128; i++) {\n            String str = CharUtils.toString((char) i);\n            String str2 = CharUtils.toString((char) i);\n            assertSame(str, str2);\n            assertEquals(1, str.length());\n            assertEquals(i, str.charAt(0));\n        }\n        for (int i = 128; i < 196; i++) {\n            String str = CharUtils.toString((char) i);\n            String str2 = CharUtils.toString((char) i);\n            assertEquals(str, str2);\n            assertTrue(str != str2);\n            assertEquals(1, str.length());\n            assertEquals(i, str.charAt(0));\n            assertEquals(1, str2.length());\n            assertEquals(i, str2.charAt(0));\n        }\n    }",
        "begin_line": 178,
        "end_line": 199,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 179,col 9)-(line 179,col 51)",
            "(line 180,col 9)-(line 180,col 69)",
            "(line 182,col 9)-(line 188,col 9)",
            "(line 189,col 9)-(line 198,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharUtilsTest.java",
        "signature": "org.apache.commons.lang.CharUtilsTest.testToString_Character()",
        "snippet": "    public void testToString_Character() {\n        assertEquals(null, CharUtils.toString(null));\n        assertEquals(\"A\", CharUtils.toString(CHARACTER_A));\n        assertSame(CharUtils.toString(CHARACTER_A), CharUtils.toString(CHARACTER_A));\n    }",
        "begin_line": 201,
        "end_line": 205,
        "comment": "",
        "child_ranges": [
            "(line 202,col 9)-(line 202,col 53)",
            "(line 203,col 9)-(line 203,col 59)",
            "(line 204,col 9)-(line 204,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharUtilsTest.java",
        "signature": "org.apache.commons.lang.CharUtilsTest.testToUnicodeEscaped_char()",
        "snippet": "    public void testToUnicodeEscaped_char() {\n        assertEquals(\"\\\\u0041\", CharUtils.unicodeEscaped('A'));\n       \n        for (int i = 0; i < 196; i++) {\n            String str = CharUtils.unicodeEscaped((char) i);\n            assertEquals(6, str.length());\n            int val = Integer.parseInt(str.substring(2), 16);\n            assertEquals(i, val);\n        }\n        assertEquals(\"\\\\u0999\", CharUtils.unicodeEscaped((char) 0x999));\n        assertEquals(\"\\\\u1001\", CharUtils.unicodeEscaped((char) 0x1001));\n    }",
        "begin_line": 208,
        "end_line": 219,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 209,col 9)-(line 209,col 63)",
            "(line 211,col 9)-(line 216,col 9)",
            "(line 217,col 9)-(line 217,col 72)",
            "(line 218,col 9)-(line 218,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharUtilsTest.java",
        "signature": "org.apache.commons.lang.CharUtilsTest.testToUnicodeEscaped_Character()",
        "snippet": "    public void testToUnicodeEscaped_Character() {\n        assertEquals(null, CharUtils.unicodeEscaped(null));\n        assertEquals(\"\\\\u0041\", CharUtils.unicodeEscaped(CHARACTER_A));\n    }",
        "begin_line": 221,
        "end_line": 224,
        "comment": "",
        "child_ranges": [
            "(line 222,col 9)-(line 222,col 59)",
            "(line 223,col 9)-(line 223,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharUtilsTest.java",
        "signature": "org.apache.commons.lang.CharUtilsTest.testIsAscii_char()",
        "snippet": "    public void testIsAscii_char() {\n        assertEquals(true, CharUtils.isAscii('a'));\n        assertEquals(true, CharUtils.isAscii('A'));\n        assertEquals(true, CharUtils.isAscii('3'));\n        assertEquals(true, CharUtils.isAscii('-'));\n        assertEquals(true, CharUtils.isAscii('\\n'));\n        assertEquals(false, CharUtils.isAscii(CHAR_COPY));\n       \n        for (int i = 0; i < 128; i++) {\n            if (i < 128) {\n                assertEquals(true, CharUtils.isAscii((char) i));\n            } else {\n                assertEquals(false, CharUtils.isAscii((char) i));\n            }\n        }\n    }",
        "begin_line": 227,
        "end_line": 242,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 228,col 9)-(line 228,col 51)",
            "(line 229,col 9)-(line 229,col 51)",
            "(line 230,col 9)-(line 230,col 51)",
            "(line 231,col 9)-(line 231,col 51)",
            "(line 232,col 9)-(line 232,col 52)",
            "(line 233,col 9)-(line 233,col 58)",
            "(line 235,col 9)-(line 241,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharUtilsTest.java",
        "signature": "org.apache.commons.lang.CharUtilsTest.testIsAsciiPrintable_char()",
        "snippet": "    public void testIsAsciiPrintable_char() {\n        assertEquals(true, CharUtils.isAsciiPrintable('a'));\n        assertEquals(true, CharUtils.isAsciiPrintable('A'));\n        assertEquals(true, CharUtils.isAsciiPrintable('3'));\n        assertEquals(true, CharUtils.isAsciiPrintable('-'));\n        assertEquals(false, CharUtils.isAsciiPrintable('\\n'));\n        assertEquals(false, CharUtils.isAscii(CHAR_COPY));\n       \n        for (int i = 0; i < 196; i++) {\n            if (i >= 32 && i <= 126) {\n                assertEquals(true, CharUtils.isAsciiPrintable((char) i));\n            } else {\n                assertEquals(false, CharUtils.isAsciiPrintable((char) i));\n            }\n        }\n    }",
        "begin_line": 245,
        "end_line": 260,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 246,col 9)-(line 246,col 60)",
            "(line 247,col 9)-(line 247,col 60)",
            "(line 248,col 9)-(line 248,col 60)",
            "(line 249,col 9)-(line 249,col 60)",
            "(line 250,col 9)-(line 250,col 62)",
            "(line 251,col 9)-(line 251,col 58)",
            "(line 253,col 9)-(line 259,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharUtilsTest.java",
        "signature": "org.apache.commons.lang.CharUtilsTest.testIsAsciiControl_char()",
        "snippet": "    public void testIsAsciiControl_char() {\n        assertEquals(false, CharUtils.isAsciiControl('a'));\n        assertEquals(false, CharUtils.isAsciiControl('A'));\n        assertEquals(false, CharUtils.isAsciiControl('3'));\n        assertEquals(false, CharUtils.isAsciiControl('-'));\n        assertEquals(true, CharUtils.isAsciiControl('\\n'));\n        assertEquals(false, CharUtils.isAsciiControl(CHAR_COPY));\n       \n        for (int i = 0; i < 196; i++) {\n            if (i < 32 || i == 127) {\n                assertEquals(true, CharUtils.isAsciiControl((char) i));\n            } else {\n                assertEquals(false, CharUtils.isAsciiControl((char) i));\n            }\n        }\n    }",
        "begin_line": 263,
        "end_line": 278,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 264,col 9)-(line 264,col 59)",
            "(line 265,col 9)-(line 265,col 59)",
            "(line 266,col 9)-(line 266,col 59)",
            "(line 267,col 9)-(line 267,col 59)",
            "(line 268,col 9)-(line 268,col 59)",
            "(line 269,col 9)-(line 269,col 65)",
            "(line 271,col 9)-(line 277,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharUtilsTest.java",
        "signature": "org.apache.commons.lang.CharUtilsTest.testIsAsciiAlpha_char()",
        "snippet": "    public void testIsAsciiAlpha_char() {\n        assertEquals(true, CharUtils.isAsciiAlpha('a'));\n        assertEquals(true, CharUtils.isAsciiAlpha('A'));\n        assertEquals(false, CharUtils.isAsciiAlpha('3'));\n        assertEquals(false, CharUtils.isAsciiAlpha('-'));\n        assertEquals(false, CharUtils.isAsciiAlpha('\\n'));\n        assertEquals(false, CharUtils.isAsciiAlpha(CHAR_COPY));\n       \n        for (int i = 0; i < 196; i++) {\n            if ((i >= 'A' && i <= 'Z') || (i >= 'a' && i <= 'z')) {\n                assertEquals(true, CharUtils.isAsciiAlpha((char) i));\n            } else {\n                assertEquals(false, CharUtils.isAsciiAlpha((char) i));\n            }\n        }\n    }",
        "begin_line": 281,
        "end_line": 296,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 282,col 9)-(line 282,col 56)",
            "(line 283,col 9)-(line 283,col 56)",
            "(line 284,col 9)-(line 284,col 57)",
            "(line 285,col 9)-(line 285,col 57)",
            "(line 286,col 9)-(line 286,col 58)",
            "(line 287,col 9)-(line 287,col 63)",
            "(line 289,col 9)-(line 295,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharUtilsTest.java",
        "signature": "org.apache.commons.lang.CharUtilsTest.testIsAsciiAlphaUpper_char()",
        "snippet": "    public void testIsAsciiAlphaUpper_char() {\n        assertEquals(false, CharUtils.isAsciiAlphaUpper('a'));\n        assertEquals(true, CharUtils.isAsciiAlphaUpper('A'));\n        assertEquals(false, CharUtils.isAsciiAlphaUpper('3'));\n        assertEquals(false, CharUtils.isAsciiAlphaUpper('-'));\n        assertEquals(false, CharUtils.isAsciiAlphaUpper('\\n'));\n        assertEquals(false, CharUtils.isAsciiAlphaUpper(CHAR_COPY));\n       \n        for (int i = 0; i < 196; i++) {\n            if (i >= 'A' && i <= 'Z') {\n                assertEquals(true, CharUtils.isAsciiAlphaUpper((char) i));\n            } else {\n                assertEquals(false, CharUtils.isAsciiAlphaUpper((char) i));\n            }\n        }\n    }",
        "begin_line": 299,
        "end_line": 314,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 300,col 9)-(line 300,col 62)",
            "(line 301,col 9)-(line 301,col 61)",
            "(line 302,col 9)-(line 302,col 62)",
            "(line 303,col 9)-(line 303,col 62)",
            "(line 304,col 9)-(line 304,col 63)",
            "(line 305,col 9)-(line 305,col 68)",
            "(line 307,col 9)-(line 313,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharUtilsTest.java",
        "signature": "org.apache.commons.lang.CharUtilsTest.testIsAsciiAlphaLower_char()",
        "snippet": "    public void testIsAsciiAlphaLower_char() {\n        assertEquals(true, CharUtils.isAsciiAlphaLower('a'));\n        assertEquals(false, CharUtils.isAsciiAlphaLower('A'));\n        assertEquals(false, CharUtils.isAsciiAlphaLower('3'));\n        assertEquals(false, CharUtils.isAsciiAlphaLower('-'));\n        assertEquals(false, CharUtils.isAsciiAlphaLower('\\n'));\n        assertEquals(false, CharUtils.isAsciiAlphaLower(CHAR_COPY));\n       \n        for (int i = 0; i < 196; i++) {\n            if (i >= 'a' && i <= 'z') {\n                assertEquals(true, CharUtils.isAsciiAlphaLower((char) i));\n            } else {\n                assertEquals(false, CharUtils.isAsciiAlphaLower((char) i));\n            }\n        }\n    }",
        "begin_line": 317,
        "end_line": 332,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 318,col 9)-(line 318,col 61)",
            "(line 319,col 9)-(line 319,col 62)",
            "(line 320,col 9)-(line 320,col 62)",
            "(line 321,col 9)-(line 321,col 62)",
            "(line 322,col 9)-(line 322,col 63)",
            "(line 323,col 9)-(line 323,col 68)",
            "(line 325,col 9)-(line 331,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharUtilsTest.java",
        "signature": "org.apache.commons.lang.CharUtilsTest.testIsAsciiNumeric_char()",
        "snippet": "    public void testIsAsciiNumeric_char() {\n        assertEquals(false, CharUtils.isAsciiNumeric('a'));\n        assertEquals(false, CharUtils.isAsciiNumeric('A'));\n        assertEquals(true, CharUtils.isAsciiNumeric('3'));\n        assertEquals(false, CharUtils.isAsciiNumeric('-'));\n        assertEquals(false, CharUtils.isAsciiNumeric('\\n'));\n        assertEquals(false, CharUtils.isAsciiNumeric(CHAR_COPY));\n       \n        for (int i = 0; i < 196; i++) {\n            if (i >= '0' && i <= '9') {\n                assertEquals(true, CharUtils.isAsciiNumeric((char) i));\n            } else {\n                assertEquals(false, CharUtils.isAsciiNumeric((char) i));\n            }\n        }\n    }",
        "begin_line": 335,
        "end_line": 350,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 336,col 9)-(line 336,col 59)",
            "(line 337,col 9)-(line 337,col 59)",
            "(line 338,col 9)-(line 338,col 58)",
            "(line 339,col 9)-(line 339,col 59)",
            "(line 340,col 9)-(line 340,col 60)",
            "(line 341,col 9)-(line 341,col 65)",
            "(line 343,col 9)-(line 349,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharUtilsTest.java",
        "signature": "org.apache.commons.lang.CharUtilsTest.testIsAsciiAlphanumeric_char()",
        "snippet": "    public void testIsAsciiAlphanumeric_char() {\n        assertEquals(true, CharUtils.isAsciiAlphanumeric('a'));\n        assertEquals(true, CharUtils.isAsciiAlphanumeric('A'));\n        assertEquals(true, CharUtils.isAsciiAlphanumeric('3'));\n        assertEquals(false, CharUtils.isAsciiAlphanumeric('-'));\n        assertEquals(false, CharUtils.isAsciiAlphanumeric('\\n'));\n        assertEquals(false, CharUtils.isAsciiAlphanumeric(CHAR_COPY));\n       \n        for (int i = 0; i < 196; i++) {\n            if ((i >= 'A' && i <= 'Z') || (i >= 'a' && i <= 'z') || (i >= '0' && i <= '9')) {\n                assertEquals(true, CharUtils.isAsciiAlphanumeric((char) i));\n            } else {\n                assertEquals(false, CharUtils.isAsciiAlphanumeric((char) i));\n            }\n        }\n    }",
        "begin_line": 353,
        "end_line": 368,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 354,col 9)-(line 354,col 63)",
            "(line 355,col 9)-(line 355,col 63)",
            "(line 356,col 9)-(line 356,col 63)",
            "(line 357,col 9)-(line 357,col 64)",
            "(line 358,col 9)-(line 358,col 65)",
            "(line 359,col 9)-(line 359,col 70)",
            "(line 361,col 9)-(line 367,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharSetTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharSetTest.java",
        "signature": "org.apache.commons.lang.CharSetTest.CharSetTest(java.lang.String)",
        "snippet": "    public CharSetTest(String name) {\n        super(name);\n    }",
        "begin_line": 37,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharSetTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharSetTest.java",
        "signature": "org.apache.commons.lang.CharSetTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharSetTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharSetTest.java",
        "signature": "org.apache.commons.lang.CharSetTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(CharSetTest.class);\n        suite.setName(\"CharSet Tests\");\n        return suite;\n    }",
        "begin_line": 45,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 59)",
            "(line 47,col 9)-(line 47,col 39)",
            "(line 48,col 9)-(line 48,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharSetTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharSetTest.java",
        "signature": "org.apache.commons.lang.CharSetTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        super.setUp();\n    }",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharSetTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharSetTest.java",
        "signature": "org.apache.commons.lang.CharSetTest.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        super.tearDown();\n    }",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharSetTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharSetTest.java",
        "signature": "org.apache.commons.lang.CharSetTest.testClass()",
        "snippet": "    public void testClass() {\n        assertEquals(true, Modifier.isPublic(CharSet.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(CharSet.class.getModifiers()));\n    }",
        "begin_line": 60,
        "end_line": 63,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 76)",
            "(line 62,col 9)-(line 62,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharSetTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharSetTest.java",
        "signature": "org.apache.commons.lang.CharSetTest.testGetInstance()",
        "snippet": "    public void testGetInstance() {\n        assertSame(CharSet.EMPTY, CharSet.getInstance( (String) null));\n        assertSame(CharSet.EMPTY, CharSet.getInstance(\"\"));\n        assertSame(CharSet.ASCII_ALPHA, CharSet.getInstance(\"a-zA-Z\"));\n        assertSame(CharSet.ASCII_ALPHA, CharSet.getInstance(\"A-Za-z\"));\n        assertSame(CharSet.ASCII_ALPHA_LOWER, CharSet.getInstance(\"a-z\"));\n        assertSame(CharSet.ASCII_ALPHA_UPPER, CharSet.getInstance(\"A-Z\"));\n        assertSame(CharSet.ASCII_NUMERIC, CharSet.getInstance(\"0-9\"));\n    }",
        "begin_line": 66,
        "end_line": 74,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 71)",
            "(line 68,col 9)-(line 68,col 59)",
            "(line 69,col 9)-(line 69,col 71)",
            "(line 70,col 9)-(line 70,col 71)",
            "(line 71,col 9)-(line 71,col 74)",
            "(line 72,col 9)-(line 72,col 74)",
            "(line 73,col 9)-(line 73,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharSetTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharSetTest.java",
        "signature": "org.apache.commons.lang.CharSetTest.testGetInstance_Stringarray()",
        "snippet": "    public void testGetInstance_Stringarray() {\n        assertEquals(null, CharSet.getInstance((String[]) null));\n        assertEquals(\"[]\", CharSet.getInstance(new String[0]).toString());\n        assertEquals(\"[]\", CharSet.getInstance(new String[] {null}).toString());\n        assertEquals(\"[a-e]\", CharSet.getInstance(new String[] {\"a-e\"}).toString());\n    }",
        "begin_line": 77,
        "end_line": 82,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 65)",
            "(line 79,col 9)-(line 79,col 74)",
            "(line 80,col 9)-(line 80,col 80)",
            "(line 81,col 9)-(line 81,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharSetTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharSetTest.java",
        "signature": "org.apache.commons.lang.CharSetTest.testConstructor_String_simple()",
        "snippet": "    public void testConstructor_String_simple() {\n        CharSet set;\n        CharRange[] array;\n        \n        set = CharSet.getInstance((String) null);\n        array = set.getCharRanges();\n        assertEquals(\"[]\", set.toString());\n        assertEquals(0, array.length);\n        \n        set = CharSet.getInstance(\"\");\n        array = set.getCharRanges();\n        assertEquals(\"[]\", set.toString());\n        assertEquals(0, array.length);\n        \n        set = CharSet.getInstance(\"a\");\n        array = set.getCharRanges();\n        assertEquals(\"[a]\", set.toString());\n        assertEquals(1, array.length);\n        assertEquals(\"a\", array[0].toString());\n        \n        set = CharSet.getInstance(\"^a\");\n        array = set.getCharRanges();\n        assertEquals(\"[^a]\", set.toString());\n        assertEquals(1, array.length);\n        assertEquals(\"^a\", array[0].toString());\n        \n        set = CharSet.getInstance(\"a-e\");\n        array = set.getCharRanges();\n        assertEquals(\"[a-e]\", set.toString());\n        assertEquals(1, array.length);\n        assertEquals(\"a-e\", array[0].toString());\n        \n        set = CharSet.getInstance(\"^a-e\");\n        array = set.getCharRanges();\n        assertEquals(\"[^a-e]\", set.toString());\n        assertEquals(1, array.length);\n        assertEquals(\"^a-e\", array[0].toString());\n    }",
        "begin_line": 85,
        "end_line": 122,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 20)",
            "(line 87,col 9)-(line 87,col 26)",
            "(line 89,col 9)-(line 89,col 49)",
            "(line 90,col 9)-(line 90,col 36)",
            "(line 91,col 9)-(line 91,col 43)",
            "(line 92,col 9)-(line 92,col 38)",
            "(line 94,col 9)-(line 94,col 38)",
            "(line 95,col 9)-(line 95,col 36)",
            "(line 96,col 9)-(line 96,col 43)",
            "(line 97,col 9)-(line 97,col 38)",
            "(line 99,col 9)-(line 99,col 39)",
            "(line 100,col 9)-(line 100,col 36)",
            "(line 101,col 9)-(line 101,col 44)",
            "(line 102,col 9)-(line 102,col 38)",
            "(line 103,col 9)-(line 103,col 47)",
            "(line 105,col 9)-(line 105,col 40)",
            "(line 106,col 9)-(line 106,col 36)",
            "(line 107,col 9)-(line 107,col 45)",
            "(line 108,col 9)-(line 108,col 38)",
            "(line 109,col 9)-(line 109,col 48)",
            "(line 111,col 9)-(line 111,col 41)",
            "(line 112,col 9)-(line 112,col 36)",
            "(line 113,col 9)-(line 113,col 46)",
            "(line 114,col 9)-(line 114,col 38)",
            "(line 115,col 9)-(line 115,col 49)",
            "(line 117,col 9)-(line 117,col 42)",
            "(line 118,col 9)-(line 118,col 36)",
            "(line 119,col 9)-(line 119,col 47)",
            "(line 120,col 9)-(line 120,col 38)",
            "(line 121,col 9)-(line 121,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharSetTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharSetTest.java",
        "signature": "org.apache.commons.lang.CharSetTest.testConstructor_String_combo()",
        "snippet": "    public void testConstructor_String_combo() {\n        CharSet set;\n        CharRange[] array;\n        \n        set = CharSet.getInstance(\"abc\");\n        array = set.getCharRanges();\n        assertEquals(3, array.length);\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('a')));\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('b')));\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('c')));\n        \n        set = CharSet.getInstance(\"a-ce-f\");\n        array = set.getCharRanges();\n        assertEquals(2, array.length);\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'c')));\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('e', 'f')));\n        \n        set = CharSet.getInstance(\"ae-f\");\n        array = set.getCharRanges();\n        assertEquals(2, array.length);\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('a')));\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('e', 'f')));\n        \n        set = CharSet.getInstance(\"e-fa\");\n        array = set.getCharRanges();\n        assertEquals(2, array.length);\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('a')));\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('e', 'f')));\n        \n        set = CharSet.getInstance(\"ae-fm-pz\");\n        array = set.getCharRanges();\n        assertEquals(4, array.length);\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('a')));\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('e', 'f')));\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('m', 'p')));\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('z')));\n    }",
        "begin_line": 124,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 20)",
            "(line 126,col 9)-(line 126,col 26)",
            "(line 128,col 9)-(line 128,col 41)",
            "(line 129,col 9)-(line 129,col 36)",
            "(line 130,col 9)-(line 130,col 38)",
            "(line 131,col 9)-(line 131,col 75)",
            "(line 132,col 9)-(line 132,col 75)",
            "(line 133,col 9)-(line 133,col 75)",
            "(line 135,col 9)-(line 135,col 44)",
            "(line 136,col 9)-(line 136,col 36)",
            "(line 137,col 9)-(line 137,col 38)",
            "(line 138,col 9)-(line 138,col 80)",
            "(line 139,col 9)-(line 139,col 80)",
            "(line 141,col 9)-(line 141,col 42)",
            "(line 142,col 9)-(line 142,col 36)",
            "(line 143,col 9)-(line 143,col 38)",
            "(line 144,col 9)-(line 144,col 75)",
            "(line 145,col 9)-(line 145,col 80)",
            "(line 147,col 9)-(line 147,col 42)",
            "(line 148,col 9)-(line 148,col 36)",
            "(line 149,col 9)-(line 149,col 38)",
            "(line 150,col 9)-(line 150,col 75)",
            "(line 151,col 9)-(line 151,col 80)",
            "(line 153,col 9)-(line 153,col 46)",
            "(line 154,col 9)-(line 154,col 36)",
            "(line 155,col 9)-(line 155,col 38)",
            "(line 156,col 9)-(line 156,col 75)",
            "(line 157,col 9)-(line 157,col 80)",
            "(line 158,col 9)-(line 158,col 80)",
            "(line 159,col 9)-(line 159,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharSetTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharSetTest.java",
        "signature": "org.apache.commons.lang.CharSetTest.testConstructor_String_comboNegated()",
        "snippet": "    public void testConstructor_String_comboNegated() {\n        CharSet set;\n        CharRange[] array;\n        \n        set = CharSet.getInstance(\"^abc\");\n        array = set.getCharRanges();\n        assertEquals(3, array.length);\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'a', true)));\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('b')));\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('c')));\n        \n        set = CharSet.getInstance(\"b^ac\");\n        array = set.getCharRanges();\n        assertEquals(3, array.length);\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('b')));\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'a', true)));\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('c')));\n        \n        set = CharSet.getInstance(\"db^ac\");\n        array = set.getCharRanges();\n        assertEquals(4, array.length);\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('d')));\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('b')));\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'a', true)));\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('c')));\n        \n        set = CharSet.getInstance(\"^b^a\");\n        array = set.getCharRanges();\n        assertEquals(2, array.length);\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('b', 'b', true)));\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'a', true)));\n        \n        set = CharSet.getInstance(\"b^a-c^z\");\n        array = set.getCharRanges();\n        assertEquals(3, array.length);\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'c', true)));\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('z', 'z', true)));\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('b')));\n    }",
        "begin_line": 162,
        "end_line": 200,
        "comment": "",
        "child_ranges": [
            "(line 163,col 9)-(line 163,col 20)",
            "(line 164,col 9)-(line 164,col 26)",
            "(line 166,col 9)-(line 166,col 42)",
            "(line 167,col 9)-(line 167,col 36)",
            "(line 168,col 9)-(line 168,col 38)",
            "(line 169,col 9)-(line 169,col 86)",
            "(line 170,col 9)-(line 170,col 75)",
            "(line 171,col 9)-(line 171,col 75)",
            "(line 173,col 9)-(line 173,col 42)",
            "(line 174,col 9)-(line 174,col 36)",
            "(line 175,col 9)-(line 175,col 38)",
            "(line 176,col 9)-(line 176,col 75)",
            "(line 177,col 9)-(line 177,col 86)",
            "(line 178,col 9)-(line 178,col 75)",
            "(line 180,col 9)-(line 180,col 43)",
            "(line 181,col 9)-(line 181,col 36)",
            "(line 182,col 9)-(line 182,col 38)",
            "(line 183,col 9)-(line 183,col 75)",
            "(line 184,col 9)-(line 184,col 75)",
            "(line 185,col 9)-(line 185,col 86)",
            "(line 186,col 9)-(line 186,col 75)",
            "(line 188,col 9)-(line 188,col 42)",
            "(line 189,col 9)-(line 189,col 36)",
            "(line 190,col 9)-(line 190,col 38)",
            "(line 191,col 9)-(line 191,col 86)",
            "(line 192,col 9)-(line 192,col 86)",
            "(line 194,col 9)-(line 194,col 45)",
            "(line 195,col 9)-(line 195,col 36)",
            "(line 196,col 9)-(line 196,col 38)",
            "(line 197,col 9)-(line 197,col 86)",
            "(line 198,col 9)-(line 198,col 86)",
            "(line 199,col 9)-(line 199,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharSetTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharSetTest.java",
        "signature": "org.apache.commons.lang.CharSetTest.testConstructor_String_oddDash()",
        "snippet": "    public void testConstructor_String_oddDash() {\n        CharSet set;\n        CharRange[] array;\n        \n        set = CharSet.getInstance(\"-\");\n        array = set.getCharRanges();\n        assertEquals(1, array.length);\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('-')));\n        \n        set = CharSet.getInstance(\"--\");\n        array = set.getCharRanges();\n        assertEquals(1, array.length);\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('-')));\n        \n        set = CharSet.getInstance(\"---\");\n        array = set.getCharRanges();\n        assertEquals(1, array.length);\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('-')));\n        \n        set = CharSet.getInstance(\"----\");\n        array = set.getCharRanges();\n        assertEquals(1, array.length);\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('-')));\n        \n        set = CharSet.getInstance(\"-a\");\n        array = set.getCharRanges();\n        assertEquals(2, array.length);\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('-')));\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('a')));\n        \n        set = CharSet.getInstance(\"a-\");\n        array = set.getCharRanges();\n        assertEquals(2, array.length);\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('a')));\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('-')));\n        \n        set = CharSet.getInstance(\"a--\");\n        array = set.getCharRanges();\n        assertEquals(1, array.length);\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', '-')));\n        \n        set = CharSet.getInstance(\"--a\");\n        array = set.getCharRanges();\n        assertEquals(1, array.length);\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('-', 'a')));\n    }",
        "begin_line": 202,
        "end_line": 247,
        "comment": "",
        "child_ranges": [
            "(line 203,col 9)-(line 203,col 20)",
            "(line 204,col 9)-(line 204,col 26)",
            "(line 206,col 9)-(line 206,col 39)",
            "(line 207,col 9)-(line 207,col 36)",
            "(line 208,col 9)-(line 208,col 38)",
            "(line 209,col 9)-(line 209,col 75)",
            "(line 211,col 9)-(line 211,col 40)",
            "(line 212,col 9)-(line 212,col 36)",
            "(line 213,col 9)-(line 213,col 38)",
            "(line 214,col 9)-(line 214,col 75)",
            "(line 216,col 9)-(line 216,col 41)",
            "(line 217,col 9)-(line 217,col 36)",
            "(line 218,col 9)-(line 218,col 38)",
            "(line 219,col 9)-(line 219,col 75)",
            "(line 221,col 9)-(line 221,col 42)",
            "(line 222,col 9)-(line 222,col 36)",
            "(line 223,col 9)-(line 223,col 38)",
            "(line 224,col 9)-(line 224,col 75)",
            "(line 226,col 9)-(line 226,col 40)",
            "(line 227,col 9)-(line 227,col 36)",
            "(line 228,col 9)-(line 228,col 38)",
            "(line 229,col 9)-(line 229,col 75)",
            "(line 230,col 9)-(line 230,col 75)",
            "(line 232,col 9)-(line 232,col 40)",
            "(line 233,col 9)-(line 233,col 36)",
            "(line 234,col 9)-(line 234,col 38)",
            "(line 235,col 9)-(line 235,col 75)",
            "(line 236,col 9)-(line 236,col 75)",
            "(line 238,col 9)-(line 238,col 41)",
            "(line 239,col 9)-(line 239,col 36)",
            "(line 240,col 9)-(line 240,col 38)",
            "(line 241,col 9)-(line 241,col 80)",
            "(line 243,col 9)-(line 243,col 41)",
            "(line 244,col 9)-(line 244,col 36)",
            "(line 245,col 9)-(line 245,col 38)",
            "(line 246,col 9)-(line 246,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharSetTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharSetTest.java",
        "signature": "org.apache.commons.lang.CharSetTest.testConstructor_String_oddNegate()",
        "snippet": "    public void testConstructor_String_oddNegate() {\n        CharSet set;\n        CharRange[] array;\n        set = CharSet.getInstance(\"^\");\n        array = set.getCharRanges();\n        assertEquals(1, array.length);\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('^'))); // \"^\"\n        \n        set = CharSet.getInstance(\"^^\");\n        array = set.getCharRanges();\n        assertEquals(1, array.length);\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^', true))); // \"^^\"\n        \n        set = CharSet.getInstance(\"^^^\");\n        array = set.getCharRanges();\n        assertEquals(2, array.length);\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^', true))); // \"^^\"\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^'))); // \"^\"\n        \n        set = CharSet.getInstance(\"^^^^\");\n        array = set.getCharRanges();\n        assertEquals(1, array.length);\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^', true))); // \"^^\" x2\n        \n        set = CharSet.getInstance(\"a^\");\n        array = set.getCharRanges();\n        assertEquals(2, array.length);\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('a'))); // \"a\"\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('^'))); // \"^\"\n        \n        set = CharSet.getInstance(\"^a-\");\n        array = set.getCharRanges();\n        assertEquals(2, array.length);\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'a', true))); // \"^a\"\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('-'))); // \"-\"\n        \n        set = CharSet.getInstance(\"^^-c\");\n        array = set.getCharRanges();\n        assertEquals(1, array.length);\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('^', 'c', true))); // \"^^-c\"\n        \n        set = CharSet.getInstance(\"^c-^\");\n        array = set.getCharRanges();\n        assertEquals(1, array.length);\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('c', '^', true))); // \"^c-^\"\n        \n        set = CharSet.getInstance(\"^c-^d\");\n        array = set.getCharRanges();\n        assertEquals(2, array.length);\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('c', '^', true))); // \"^c-^\"\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('d'))); // \"d\"\n        \n        set = CharSet.getInstance(\"^^-\");\n        array = set.getCharRanges();\n        assertEquals(2, array.length);\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^', true))); // \"^^\"\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('-'))); // \"-\"\n    }",
        "begin_line": 249,
        "end_line": 306,
        "comment": "",
        "child_ranges": [
            "(line 250,col 9)-(line 250,col 20)",
            "(line 251,col 9)-(line 251,col 26)",
            "(line 252,col 9)-(line 252,col 39)",
            "(line 253,col 9)-(line 253,col 36)",
            "(line 254,col 9)-(line 254,col 38)",
            "(line 255,col 9)-(line 255,col 75)",
            "(line 257,col 9)-(line 257,col 40)",
            "(line 258,col 9)-(line 258,col 36)",
            "(line 259,col 9)-(line 259,col 38)",
            "(line 260,col 9)-(line 260,col 86)",
            "(line 262,col 9)-(line 262,col 41)",
            "(line 263,col 9)-(line 263,col 36)",
            "(line 264,col 9)-(line 264,col 38)",
            "(line 265,col 9)-(line 265,col 86)",
            "(line 266,col 9)-(line 266,col 80)",
            "(line 268,col 9)-(line 268,col 42)",
            "(line 269,col 9)-(line 269,col 36)",
            "(line 270,col 9)-(line 270,col 38)",
            "(line 271,col 9)-(line 271,col 86)",
            "(line 273,col 9)-(line 273,col 40)",
            "(line 274,col 9)-(line 274,col 36)",
            "(line 275,col 9)-(line 275,col 38)",
            "(line 276,col 9)-(line 276,col 75)",
            "(line 277,col 9)-(line 277,col 75)",
            "(line 279,col 9)-(line 279,col 41)",
            "(line 280,col 9)-(line 280,col 36)",
            "(line 281,col 9)-(line 281,col 38)",
            "(line 282,col 9)-(line 282,col 86)",
            "(line 283,col 9)-(line 283,col 75)",
            "(line 285,col 9)-(line 285,col 42)",
            "(line 286,col 9)-(line 286,col 36)",
            "(line 287,col 9)-(line 287,col 38)",
            "(line 288,col 9)-(line 288,col 86)",
            "(line 290,col 9)-(line 290,col 42)",
            "(line 291,col 9)-(line 291,col 36)",
            "(line 292,col 9)-(line 292,col 38)",
            "(line 293,col 9)-(line 293,col 86)",
            "(line 295,col 9)-(line 295,col 43)",
            "(line 296,col 9)-(line 296,col 36)",
            "(line 297,col 9)-(line 297,col 38)",
            "(line 298,col 9)-(line 298,col 86)",
            "(line 299,col 9)-(line 299,col 75)",
            "(line 301,col 9)-(line 301,col 41)",
            "(line 302,col 9)-(line 302,col 36)",
            "(line 303,col 9)-(line 303,col 38)",
            "(line 304,col 9)-(line 304,col 86)",
            "(line 305,col 9)-(line 305,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharSetTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharSetTest.java",
        "signature": "org.apache.commons.lang.CharSetTest.testConstructor_String_oddCombinations()",
        "snippet": "    public void testConstructor_String_oddCombinations() {\n        CharSet set;\n        CharRange[] array = null;\n        \n        set = CharSet.getInstance(\"a-^c\");\n        array = set.getCharRanges();\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', '^'))); // \"a-^\"\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('c'))); // \"c\"\n        assertEquals(false, set.contains('b'));\n        assertEquals(true, set.contains('^'));  \n        assertEquals(true, set.contains('_')); // between ^ and a\n        assertEquals(true, set.contains('c'));  \n        \n        set = CharSet.getInstance(\"^a-^c\");\n        array = set.getCharRanges();\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', '^', true))); // \"^a-^\"\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('c'))); // \"c\"\n        assertEquals(true, set.contains('b'));\n        assertEquals(false, set.contains('^'));  \n        assertEquals(false, set.contains('_')); // between ^ and a\n        \n        set = CharSet.getInstance(\"a- ^-- \"); //contains everything\n        array = set.getCharRanges();\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', ' '))); // \"a- \"\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('-', ' ', true))); // \"^-- \"\n        assertEquals(true, set.contains('#'));\n        assertEquals(true, set.contains('^'));\n        assertEquals(true, set.contains('a'));\n        assertEquals(true, set.contains('*'));\n        assertEquals(true, set.contains('A'));\n        \n        set = CharSet.getInstance(\"^-b\");\n        array = set.getCharRanges();\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('^','b'))); // \"^-b\"\n        assertEquals(true, set.contains('b'));\n        assertEquals(true, set.contains('_')); // between ^ and a\n        assertEquals(false, set.contains('A'));\n        assertEquals(true, set.contains('^')); \n        \n        set = CharSet.getInstance(\"b-^\");\n        array = set.getCharRanges();\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('^','b'))); // \"b-^\"\n        assertEquals(true, set.contains('b'));\n        assertEquals(true, set.contains('^'));\n        assertEquals(true, set.contains('a')); // between ^ and b\n        assertEquals(false, set.contains('c')); \n    }",
        "begin_line": 308,
        "end_line": 354,
        "comment": "",
        "child_ranges": [
            "(line 309,col 9)-(line 309,col 20)",
            "(line 310,col 9)-(line 310,col 33)",
            "(line 312,col 9)-(line 312,col 42)",
            "(line 313,col 9)-(line 313,col 36)",
            "(line 314,col 9)-(line 314,col 80)",
            "(line 315,col 9)-(line 315,col 75)",
            "(line 316,col 9)-(line 316,col 47)",
            "(line 317,col 9)-(line 317,col 46)",
            "(line 318,col 9)-(line 318,col 46)",
            "(line 319,col 9)-(line 319,col 46)",
            "(line 321,col 9)-(line 321,col 43)",
            "(line 322,col 9)-(line 322,col 36)",
            "(line 323,col 9)-(line 323,col 86)",
            "(line 324,col 9)-(line 324,col 75)",
            "(line 325,col 9)-(line 325,col 46)",
            "(line 326,col 9)-(line 326,col 47)",
            "(line 327,col 9)-(line 327,col 47)",
            "(line 329,col 9)-(line 329,col 45)",
            "(line 330,col 9)-(line 330,col 36)",
            "(line 331,col 9)-(line 331,col 80)",
            "(line 332,col 9)-(line 332,col 86)",
            "(line 333,col 9)-(line 333,col 46)",
            "(line 334,col 9)-(line 334,col 46)",
            "(line 335,col 9)-(line 335,col 46)",
            "(line 336,col 9)-(line 336,col 46)",
            "(line 337,col 9)-(line 337,col 46)",
            "(line 339,col 9)-(line 339,col 41)",
            "(line 340,col 9)-(line 340,col 36)",
            "(line 341,col 9)-(line 341,col 79)",
            "(line 342,col 9)-(line 342,col 46)",
            "(line 343,col 9)-(line 343,col 46)",
            "(line 344,col 9)-(line 344,col 47)",
            "(line 345,col 9)-(line 345,col 46)",
            "(line 347,col 9)-(line 347,col 41)",
            "(line 348,col 9)-(line 348,col 36)",
            "(line 349,col 9)-(line 349,col 79)",
            "(line 350,col 9)-(line 350,col 46)",
            "(line 351,col 9)-(line 351,col 46)",
            "(line 352,col 9)-(line 352,col 46)",
            "(line 353,col 9)-(line 353,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharSetTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharSetTest.java",
        "signature": "org.apache.commons.lang.CharSetTest.testEquals_Object()",
        "snippet": "    public void testEquals_Object() {\n        CharSet abc = CharSet.getInstance(\"abc\");\n        CharSet abc2 = CharSet.getInstance(\"abc\");\n        CharSet atoc = CharSet.getInstance(\"a-c\");\n        CharSet atoc2 = CharSet.getInstance(\"a-c\");\n        CharSet notatoc = CharSet.getInstance(\"^a-c\");\n        CharSet notatoc2 = CharSet.getInstance(\"^a-c\");\n        \n        assertEquals(false, abc.equals(null));\n        \n        assertEquals(true, abc.equals(abc));\n        assertEquals(true, abc.equals(abc2));\n        assertEquals(false, abc.equals(atoc));\n        assertEquals(false, abc.equals(notatoc));\n        \n        assertEquals(false, atoc.equals(abc));\n        assertEquals(true, atoc.equals(atoc));\n        assertEquals(true, atoc.equals(atoc2));\n        assertEquals(false, atoc.equals(notatoc));\n        \n        assertEquals(false, notatoc.equals(abc));\n        assertEquals(false, notatoc.equals(atoc));\n        assertEquals(true, notatoc.equals(notatoc));\n        assertEquals(true, notatoc.equals(notatoc2));\n    }",
        "begin_line": 357,
        "end_line": 381,
        "comment": "-----------------------------------------------------------------------    ",
        "child_ranges": [
            "(line 358,col 9)-(line 358,col 49)",
            "(line 359,col 9)-(line 359,col 50)",
            "(line 360,col 9)-(line 360,col 50)",
            "(line 361,col 9)-(line 361,col 51)",
            "(line 362,col 9)-(line 362,col 54)",
            "(line 363,col 9)-(line 363,col 55)",
            "(line 365,col 9)-(line 365,col 46)",
            "(line 367,col 9)-(line 367,col 44)",
            "(line 368,col 9)-(line 368,col 45)",
            "(line 369,col 9)-(line 369,col 46)",
            "(line 370,col 9)-(line 370,col 49)",
            "(line 372,col 9)-(line 372,col 46)",
            "(line 373,col 9)-(line 373,col 46)",
            "(line 374,col 9)-(line 374,col 47)",
            "(line 375,col 9)-(line 375,col 50)",
            "(line 377,col 9)-(line 377,col 49)",
            "(line 378,col 9)-(line 378,col 50)",
            "(line 379,col 9)-(line 379,col 52)",
            "(line 380,col 9)-(line 380,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharSetTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharSetTest.java",
        "signature": "org.apache.commons.lang.CharSetTest.testHashCode()",
        "snippet": "    public void testHashCode() {\n        CharSet abc = CharSet.getInstance(\"abc\");\n        CharSet abc2 = CharSet.getInstance(\"abc\");\n        CharSet atoc = CharSet.getInstance(\"a-c\");\n        CharSet atoc2 = CharSet.getInstance(\"a-c\");\n        CharSet notatoc = CharSet.getInstance(\"^a-c\");\n        CharSet notatoc2 = CharSet.getInstance(\"^a-c\");\n        \n        assertEquals(abc.hashCode(), abc.hashCode());\n        assertEquals(abc.hashCode(), abc2.hashCode());\n        assertEquals(atoc.hashCode(), atoc.hashCode());\n        assertEquals(atoc.hashCode(), atoc2.hashCode());\n        assertEquals(notatoc.hashCode(), notatoc.hashCode());\n        assertEquals(notatoc.hashCode(), notatoc2.hashCode());\n    }",
        "begin_line": 383,
        "end_line": 397,
        "comment": "",
        "child_ranges": [
            "(line 384,col 9)-(line 384,col 49)",
            "(line 385,col 9)-(line 385,col 50)",
            "(line 386,col 9)-(line 386,col 50)",
            "(line 387,col 9)-(line 387,col 51)",
            "(line 388,col 9)-(line 388,col 54)",
            "(line 389,col 9)-(line 389,col 55)",
            "(line 391,col 9)-(line 391,col 53)",
            "(line 392,col 9)-(line 392,col 54)",
            "(line 393,col 9)-(line 393,col 55)",
            "(line 394,col 9)-(line 394,col 56)",
            "(line 395,col 9)-(line 395,col 61)",
            "(line 396,col 9)-(line 396,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharSetTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharSetTest.java",
        "signature": "org.apache.commons.lang.CharSetTest.testContains_Char()",
        "snippet": "    public void testContains_Char() {\n        CharSet btod = CharSet.getInstance(\"b-d\");\n        CharSet dtob = CharSet.getInstance(\"d-b\");\n        CharSet bcd = CharSet.getInstance(\"bcd\");\n        CharSet bd = CharSet.getInstance(\"bd\");\n        CharSet notbtod = CharSet.getInstance(\"^b-d\");\n        \n        assertEquals(false, btod.contains('a'));\n        assertEquals(true, btod.contains('b'));\n        assertEquals(true, btod.contains('c'));\n        assertEquals(true, btod.contains('d'));\n        assertEquals(false, btod.contains('e'));\n        \n        assertEquals(false, bcd.contains('a'));\n        assertEquals(true, bcd.contains('b'));\n        assertEquals(true, bcd.contains('c'));\n        assertEquals(true, bcd.contains('d'));\n        assertEquals(false, bcd.contains('e'));\n        \n        assertEquals(false, bd.contains('a'));\n        assertEquals(true, bd.contains('b'));\n        assertEquals(false, bd.contains('c'));\n        assertEquals(true, bd.contains('d'));\n        assertEquals(false, bd.contains('e'));\n        \n        assertEquals(true, notbtod.contains('a'));\n        assertEquals(false, notbtod.contains('b'));\n        assertEquals(false, notbtod.contains('c'));\n        assertEquals(false, notbtod.contains('d'));\n        assertEquals(true, notbtod.contains('e'));\n        \n        assertEquals(false, dtob.contains('a'));\n        assertEquals(true, dtob.contains('b'));\n        assertEquals(true, dtob.contains('c'));\n        assertEquals(true, dtob.contains('d'));\n        assertEquals(false, dtob.contains('e'));\n      \n        CharRange[] array = dtob.getCharRanges();\n        assertEquals(\"[b-d]\", dtob.toString());\n        assertEquals(1, array.length);\n    }",
        "begin_line": 400,
        "end_line": 440,
        "comment": "-----------------------------------------------------------------------    ",
        "child_ranges": [
            "(line 401,col 9)-(line 401,col 50)",
            "(line 402,col 9)-(line 402,col 50)",
            "(line 403,col 9)-(line 403,col 49)",
            "(line 404,col 9)-(line 404,col 47)",
            "(line 405,col 9)-(line 405,col 54)",
            "(line 407,col 9)-(line 407,col 48)",
            "(line 408,col 9)-(line 408,col 47)",
            "(line 409,col 9)-(line 409,col 47)",
            "(line 410,col 9)-(line 410,col 47)",
            "(line 411,col 9)-(line 411,col 48)",
            "(line 413,col 9)-(line 413,col 47)",
            "(line 414,col 9)-(line 414,col 46)",
            "(line 415,col 9)-(line 415,col 46)",
            "(line 416,col 9)-(line 416,col 46)",
            "(line 417,col 9)-(line 417,col 47)",
            "(line 419,col 9)-(line 419,col 46)",
            "(line 420,col 9)-(line 420,col 45)",
            "(line 421,col 9)-(line 421,col 46)",
            "(line 422,col 9)-(line 422,col 45)",
            "(line 423,col 9)-(line 423,col 46)",
            "(line 425,col 9)-(line 425,col 50)",
            "(line 426,col 9)-(line 426,col 51)",
            "(line 427,col 9)-(line 427,col 51)",
            "(line 428,col 9)-(line 428,col 51)",
            "(line 429,col 9)-(line 429,col 50)",
            "(line 431,col 9)-(line 431,col 48)",
            "(line 432,col 9)-(line 432,col 47)",
            "(line 433,col 9)-(line 433,col 47)",
            "(line 434,col 9)-(line 434,col 47)",
            "(line 435,col 9)-(line 435,col 48)",
            "(line 437,col 9)-(line 437,col 49)",
            "(line 438,col 9)-(line 438,col 47)",
            "(line 439,col 9)-(line 439,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharSetTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharSetTest.java",
        "signature": "org.apache.commons.lang.CharSetTest.testSerialization()",
        "snippet": "    public void testSerialization() {\n        CharSet set = CharSet.getInstance(\"a\");\n        assertEquals(set, SerializationUtils.clone(set)); \n        set = CharSet.getInstance(\"a-e\");\n        assertEquals(set, SerializationUtils.clone(set)); \n        set = CharSet.getInstance(\"be-f^a-z\");\n        assertEquals(set, SerializationUtils.clone(set)); \n    }",
        "begin_line": 443,
        "end_line": 450,
        "comment": "-----------------------------------------------------------------------    ",
        "child_ranges": [
            "(line 444,col 9)-(line 444,col 47)",
            "(line 445,col 9)-(line 445,col 57)",
            "(line 446,col 9)-(line 446,col 41)",
            "(line 447,col 9)-(line 447,col 57)",
            "(line 448,col 9)-(line 448,col 46)",
            "(line 449,col 9)-(line 449,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharSetTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharSetTest.java",
        "signature": "org.apache.commons.lang.CharSetTest.testStatics()",
        "snippet": "    public void testStatics() {\n        CharRange[] array;\n        \n        array = CharSet.EMPTY.getCharRanges();\n        assertEquals(0, array.length);\n        \n        array = CharSet.ASCII_ALPHA.getCharRanges();\n        assertEquals(2, array.length);\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'z')));\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('A', 'Z')));\n        \n        array = CharSet.ASCII_ALPHA_LOWER.getCharRanges();\n        assertEquals(1, array.length);\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'z')));\n        \n        array = CharSet.ASCII_ALPHA_UPPER.getCharRanges();\n        assertEquals(1, array.length);\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('A', 'Z')));\n        \n        array = CharSet.ASCII_NUMERIC.getCharRanges();\n        assertEquals(1, array.length);\n        assertEquals(true, ArrayUtils.contains(array, new CharRange('0', '9')));\n    }",
        "begin_line": 453,
        "end_line": 475,
        "comment": "-----------------------------------------------------------------------    ",
        "child_ranges": [
            "(line 454,col 9)-(line 454,col 26)",
            "(line 456,col 9)-(line 456,col 46)",
            "(line 457,col 9)-(line 457,col 38)",
            "(line 459,col 9)-(line 459,col 52)",
            "(line 460,col 9)-(line 460,col 38)",
            "(line 461,col 9)-(line 461,col 80)",
            "(line 462,col 9)-(line 462,col 80)",
            "(line 464,col 9)-(line 464,col 58)",
            "(line 465,col 9)-(line 465,col 38)",
            "(line 466,col 9)-(line 466,col 80)",
            "(line 468,col 9)-(line 468,col 58)",
            "(line 469,col 9)-(line 469,col 38)",
            "(line 470,col 9)-(line 470,col 80)",
            "(line 472,col 9)-(line 472,col 54)",
            "(line 473,col 9)-(line 473,col 38)",
            "(line 474,col 9)-(line 474,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.ArrayUtilsTest(java.lang.String)",
        "snippet": "    public ArrayUtilsTest(String name) {\n        super(name);\n    }",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(ArrayUtilsTest.class);\n        suite.setName(\"ArrayUtils Tests\");\n        return suite;\n    }",
        "begin_line": 54,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 62)",
            "(line 56,col 9)-(line 56,col 42)",
            "(line 57,col 9)-(line 57,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        super.setUp();\n    }",
        "begin_line": 60,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        super.tearDown();\n    }",
        "begin_line": 64,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new ArrayUtils());\n        Constructor[] cons = ArrayUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(ArrayUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(ArrayUtils.class.getModifiers()));\n    }",
        "begin_line": 69,
        "end_line": 76,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 40)",
            "(line 71,col 9)-(line 71,col 72)",
            "(line 72,col 9)-(line 72,col 37)",
            "(line 73,col 9)-(line 73,col 70)",
            "(line 74,col 9)-(line 74,col 79)",
            "(line 75,col 9)-(line 75,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testToString()",
        "snippet": "    public void testToString() {\n        assertEquals(\"{}\", ArrayUtils.toString(null));\n        assertEquals(\"{}\", ArrayUtils.toString(new Object[0]));\n        assertEquals(\"{}\", ArrayUtils.toString(new String[0]));\n        assertEquals(\"{<null>}\", ArrayUtils.toString(new String[] {null}));\n        assertEquals(\"{pink,blue}\", ArrayUtils.toString(new String[] {\"pink\",\"blue\"}));\n        \n        assertEquals(\"<empty>\", ArrayUtils.toString(null, \"<empty>\"));\n        assertEquals(\"{}\", ArrayUtils.toString(new Object[0], \"<empty>\"));\n        assertEquals(\"{}\", ArrayUtils.toString(new String[0], \"<empty>\"));\n        assertEquals(\"{<null>}\", ArrayUtils.toString(new String[] {null}, \"<empty>\"));\n        assertEquals(\"{pink,blue}\", ArrayUtils.toString(new String[] {\"pink\",\"blue\"}, \"<empty>\"));\n    }",
        "begin_line": 79,
        "end_line": 91,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 54)",
            "(line 81,col 9)-(line 81,col 63)",
            "(line 82,col 9)-(line 82,col 63)",
            "(line 83,col 9)-(line 83,col 75)",
            "(line 84,col 9)-(line 84,col 87)",
            "(line 86,col 9)-(line 86,col 70)",
            "(line 87,col 9)-(line 87,col 74)",
            "(line 88,col 9)-(line 88,col 74)",
            "(line 89,col 9)-(line 89,col 86)",
            "(line 90,col 9)-(line 90,col 98)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testHashCode()",
        "snippet": "    public void testHashCode() {\n        long[][] array1 = new long[][] {{2,5}, {4,5}};\n        long[][] array2 = new long[][] {{2,5}, {4,6}};\n        assertEquals(true, ArrayUtils.hashCode(array1) == ArrayUtils.hashCode(array1));\n        assertEquals(false, ArrayUtils.hashCode(array1) == ArrayUtils.hashCode(array2));\n        \n        Object[] array3 = new Object[] {new String(new char[] {'A', 'B'})};\n        Object[] array4 = new Object[] {\"AB\"};\n        assertEquals(true, ArrayUtils.hashCode(array3) == ArrayUtils.hashCode(array3));\n        assertEquals(true, ArrayUtils.hashCode(array3) == ArrayUtils.hashCode(array4));\n    }",
        "begin_line": 94,
        "end_line": 104,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 54)",
            "(line 96,col 9)-(line 96,col 54)",
            "(line 97,col 9)-(line 97,col 87)",
            "(line 98,col 9)-(line 98,col 88)",
            "(line 100,col 9)-(line 100,col 75)",
            "(line 101,col 9)-(line 101,col 46)",
            "(line 102,col 9)-(line 102,col 87)",
            "(line 103,col 9)-(line 103,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.assertIsEquals(java.lang.Object, java.lang.Object, java.lang.Object)",
        "snippet": "    private void assertIsEquals(Object array1, Object array2, Object array3) {\n        assertEquals(true, ArrayUtils.isEquals(array1, array1));\n        assertEquals(true, ArrayUtils.isEquals(array2, array2));\n        assertEquals(true, ArrayUtils.isEquals(array3, array3));\n        assertEquals(false, ArrayUtils.isEquals(array1, array2));\n        assertEquals(false, ArrayUtils.isEquals(array2, array1));\n        assertEquals(false, ArrayUtils.isEquals(array1, array3));\n        assertEquals(false, ArrayUtils.isEquals(array3, array1));\n        assertEquals(false, ArrayUtils.isEquals(array1, array2));\n        assertEquals(false, ArrayUtils.isEquals(array2, array1));\n    }",
        "begin_line": 107,
        "end_line": 117,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 64)",
            "(line 109,col 9)-(line 109,col 64)",
            "(line 110,col 9)-(line 110,col 64)",
            "(line 111,col 9)-(line 111,col 65)",
            "(line 112,col 9)-(line 112,col 65)",
            "(line 113,col 9)-(line 113,col 65)",
            "(line 114,col 9)-(line 114,col 65)",
            "(line 115,col 9)-(line 115,col 65)",
            "(line 116,col 9)-(line 116,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testIsEquals()",
        "snippet": "    public void testIsEquals() {\n        long[][] larray1 = new long[][]{{2, 5}, {4, 5}};\n        long[][] larray2 = new long[][]{{2, 5}, {4, 6}};\n        long[] larray3 = new long[]{2, 5};\n        this.assertIsEquals(larray1, larray2, larray3);\n\n        int[][] iarray1 = new int[][]{{2, 5}, {4, 5}};\n        int[][] iarray2 = new int[][]{{2, 5}, {4, 6}};\n        int[] iarray3 = new int[]{2, 5};\n        this.assertIsEquals(iarray1, iarray2, iarray3);\n\n        short[][] sarray1 = new short[][]{{2, 5}, {4, 5}};\n        short[][] sarray2 = new short[][]{{2, 5}, {4, 6}};\n        short[] sarray3 = new short[]{2, 5};\n        this.assertIsEquals(sarray1, sarray2, sarray3);\n\n        float[][] farray1 = new float[][]{{2, 5}, {4, 5}};\n        float[][] farray2 = new float[][]{{2, 5}, {4, 6}};\n        float[] farray3 = new float[]{2, 5};\n        this.assertIsEquals(farray1, farray2, farray3);\n\n        double[][] darray1 = new double[][]{{2, 5}, {4, 5}};\n        double[][] darray2 = new double[][]{{2, 5}, {4, 6}};\n        double[] darray3 = new double[]{2, 5};\n        this.assertIsEquals(darray1, darray2, darray3);\n\n        byte[][] byteArray1 = new byte[][]{{2, 5}, {4, 5}};\n        byte[][] byteArray2 = new byte[][]{{2, 5}, {4, 6}};\n        byte[] byteArray3 = new byte[]{2, 5};\n        this.assertIsEquals(byteArray1, byteArray2, byteArray3);\n\n        char[][] charArray1 = new char[][]{{2, 5}, {4, 5}};\n        char[][] charArray2 = new char[][]{{2, 5}, {4, 6}};\n        char[] charArray3 = new char[]{2, 5};\n        this.assertIsEquals(charArray1, charArray2, charArray3);\n\n        boolean[][] barray1 = new boolean[][]{{true, false}, {true, true}};\n        boolean[][] barray2 = new boolean[][]{{true, false}, {true, false}};\n        boolean[] barray3 = new boolean[]{false, true};\n        this.assertIsEquals(barray1, barray2, barray3);\n\n        Object[] array3 = new Object[]{new String(new char[]{'A', 'B'})};\n        Object[] array4 = new Object[]{\"AB\"};\n        assertEquals(true, ArrayUtils.isEquals(array3, array3));\n        assertEquals(true, ArrayUtils.isEquals(array3, array4));\n\n        assertEquals(true, ArrayUtils.isEquals(null, null));\n        assertEquals(false, ArrayUtils.isEquals(null, array4));\n    }",
        "begin_line": 119,
        "end_line": 167,
        "comment": "",
        "child_ranges": [
            "(line 120,col 9)-(line 120,col 56)",
            "(line 121,col 9)-(line 121,col 56)",
            "(line 122,col 9)-(line 122,col 42)",
            "(line 123,col 9)-(line 123,col 55)",
            "(line 125,col 9)-(line 125,col 54)",
            "(line 126,col 9)-(line 126,col 54)",
            "(line 127,col 9)-(line 127,col 40)",
            "(line 128,col 9)-(line 128,col 55)",
            "(line 130,col 9)-(line 130,col 58)",
            "(line 131,col 9)-(line 131,col 58)",
            "(line 132,col 9)-(line 132,col 44)",
            "(line 133,col 9)-(line 133,col 55)",
            "(line 135,col 9)-(line 135,col 58)",
            "(line 136,col 9)-(line 136,col 58)",
            "(line 137,col 9)-(line 137,col 44)",
            "(line 138,col 9)-(line 138,col 55)",
            "(line 140,col 9)-(line 140,col 60)",
            "(line 141,col 9)-(line 141,col 60)",
            "(line 142,col 9)-(line 142,col 46)",
            "(line 143,col 9)-(line 143,col 55)",
            "(line 145,col 9)-(line 145,col 59)",
            "(line 146,col 9)-(line 146,col 59)",
            "(line 147,col 9)-(line 147,col 45)",
            "(line 148,col 9)-(line 148,col 64)",
            "(line 150,col 9)-(line 150,col 59)",
            "(line 151,col 9)-(line 151,col 59)",
            "(line 152,col 9)-(line 152,col 45)",
            "(line 153,col 9)-(line 153,col 64)",
            "(line 155,col 9)-(line 155,col 75)",
            "(line 156,col 9)-(line 156,col 76)",
            "(line 157,col 9)-(line 157,col 55)",
            "(line 158,col 9)-(line 158,col 55)",
            "(line 160,col 9)-(line 160,col 73)",
            "(line 161,col 9)-(line 161,col 45)",
            "(line 162,col 9)-(line 162,col 64)",
            "(line 163,col 9)-(line 163,col 64)",
            "(line 165,col 9)-(line 165,col 60)",
            "(line 166,col 9)-(line 166,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testToMap()",
        "snippet": "    public void testToMap() {\n        Map map = ArrayUtils.toMap(new String[][] {{\"foo\", \"bar\"}, {\"hello\", \"world\"}});\n        \n        assertEquals(\"bar\", map.get(\"foo\"));\n        assertEquals(\"world\", map.get(\"hello\"));\n        \n        assertEquals(null, ArrayUtils.toMap(null));\n        try {\n            ArrayUtils.toMap(new String[][] {{\"foo\", \"bar\"}, {\"short\"}});\n            fail(\"exception expected\");\n        } catch (IllegalArgumentException ex) {}\n        try {\n            ArrayUtils.toMap(new Object[] {new Object[] {\"foo\", \"bar\"}, \"illegal type\"});\n            fail(\"exception expected\");\n        } catch (IllegalArgumentException ex) {}\n        try {\n            ArrayUtils.toMap(new Object[] {new Object[] {\"foo\", \"bar\"}, null});\n            fail(\"exception expected\");\n        } catch (IllegalArgumentException ex) {}\n        \n        map = ArrayUtils.toMap(new Object[] {new Map.Entry() {\n            public Object getKey() {\n                return \"foo\";\n            }\n            public Object getValue() {\n                return \"bar\";\n            }\n            public Object setValue(Object value) {\n                throw new UnsupportedOperationException();\n            }\n            public boolean equals(Object o) {\n                throw new UnsupportedOperationException();\n            }\n            public int hashCode() {\n                throw new UnsupportedOperationException();\n            }\n        }});\n        assertEquals(\"bar\", map.get(\"foo\"));\n    }",
        "begin_line": 170,
        "end_line": 208,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 171,col 9)-(line 171,col 88)",
            "(line 173,col 9)-(line 173,col 44)",
            "(line 174,col 9)-(line 174,col 48)",
            "(line 176,col 9)-(line 176,col 51)",
            "(line 177,col 9)-(line 180,col 48)",
            "(line 181,col 9)-(line 184,col 48)",
            "(line 185,col 9)-(line 188,col 48)",
            "(line 190,col 9)-(line 206,col 12)",
            "(line 207,col 9)-(line 207,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.Anonymous-9d7ad4b8-f6ef-4bea-b98b-abc791a35257.getKey()",
        "snippet": "            public Object getKey() {\n                return \"foo\";\n            }",
        "begin_line": 191,
        "end_line": 193,
        "comment": "",
        "child_ranges": [
            "(line 192,col 17)-(line 192,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.Anonymous-a8bb9042-af6a-494c-8323-ce389ca2cb54.getValue()",
        "snippet": "            public Object getValue() {\n                return \"bar\";\n            }",
        "begin_line": 194,
        "end_line": 196,
        "comment": "",
        "child_ranges": [
            "(line 195,col 17)-(line 195,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.Anonymous-6f6d935e-e518-4924-8763-f1f85292e6cc.setValue(java.lang.Object)",
        "snippet": "            public Object setValue(Object value) {\n                throw new UnsupportedOperationException();\n            }",
        "begin_line": 197,
        "end_line": 199,
        "comment": "",
        "child_ranges": [
            "(line 198,col 17)-(line 198,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.Anonymous-dd24ff27-38ca-492d-b018-3c72340b1ed3.equals(java.lang.Object)",
        "snippet": "            public boolean equals(Object o) {\n                throw new UnsupportedOperationException();\n            }",
        "begin_line": 200,
        "end_line": 202,
        "comment": "",
        "child_ranges": [
            "(line 201,col 17)-(line 201,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.Anonymous-516242b8-82cc-48a4-a511-ca352ae1e166.hashCode()",
        "snippet": "            public int hashCode() {\n                throw new UnsupportedOperationException();\n            }",
        "begin_line": 203,
        "end_line": 205,
        "comment": "",
        "child_ranges": [
            "(line 204,col 17)-(line 204,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testClone()",
        "snippet": "    public void testClone() {\n        assertEquals(null, ArrayUtils.clone((Object[]) null));\n        Object[] original1 = new Object[0];\n        Object[] cloned1 = ArrayUtils.clone(original1);\n        assertTrue(Arrays.equals(original1, cloned1));\n        assertTrue(original1 != cloned1);\n        \n        StringBuffer buf = new StringBuffer(\"pick\");\n        original1 = new Object[] {buf, \"a\", new String[] {\"stick\"}};\n        cloned1 = ArrayUtils.clone(original1);\n        assertTrue(Arrays.equals(original1, cloned1));\n        assertTrue(original1 != cloned1);\n        assertSame(original1[0], cloned1[0]);\n        assertSame(original1[1], cloned1[1]);\n        assertSame(original1[2], cloned1[2]);\n    }",
        "begin_line": 211,
        "end_line": 226,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 212,col 9)-(line 212,col 62)",
            "(line 213,col 9)-(line 213,col 43)",
            "(line 214,col 9)-(line 214,col 55)",
            "(line 215,col 9)-(line 215,col 54)",
            "(line 216,col 9)-(line 216,col 41)",
            "(line 218,col 9)-(line 218,col 52)",
            "(line 219,col 9)-(line 219,col 68)",
            "(line 220,col 9)-(line 220,col 46)",
            "(line 221,col 9)-(line 221,col 54)",
            "(line 222,col 9)-(line 222,col 41)",
            "(line 223,col 9)-(line 223,col 45)",
            "(line 224,col 9)-(line 224,col 45)",
            "(line 225,col 9)-(line 225,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testCloneBoolean()",
        "snippet": "    public void testCloneBoolean() {\n        assertEquals(null, ArrayUtils.clone((boolean[]) null));\n        boolean[] original = new boolean[] {true, false};\n        boolean[] cloned = ArrayUtils.clone(original);\n        assertTrue(Arrays.equals(original, cloned));\n        assertTrue(original != cloned);\n    }",
        "begin_line": 228,
        "end_line": 234,
        "comment": "",
        "child_ranges": [
            "(line 229,col 9)-(line 229,col 63)",
            "(line 230,col 9)-(line 230,col 57)",
            "(line 231,col 9)-(line 231,col 54)",
            "(line 232,col 9)-(line 232,col 52)",
            "(line 233,col 9)-(line 233,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testCloneLong()",
        "snippet": "    public void testCloneLong() {\n        assertEquals(null, ArrayUtils.clone((long[]) null));\n        long[] original = new long[] {0L, 1L};\n        long[] cloned = ArrayUtils.clone(original);\n        assertTrue(Arrays.equals(original, cloned));\n        assertTrue(original != cloned);\n    }",
        "begin_line": 236,
        "end_line": 242,
        "comment": "",
        "child_ranges": [
            "(line 237,col 9)-(line 237,col 60)",
            "(line 238,col 9)-(line 238,col 46)",
            "(line 239,col 9)-(line 239,col 51)",
            "(line 240,col 9)-(line 240,col 52)",
            "(line 241,col 9)-(line 241,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testCloneInt()",
        "snippet": "    public void testCloneInt() {\n        assertEquals(null, ArrayUtils.clone((int[]) null));\n        int[] original = new int[] {5, 8};\n        int[] cloned = ArrayUtils.clone(original);\n        assertTrue(Arrays.equals(original, cloned));\n        assertTrue(original != cloned);\n    }",
        "begin_line": 244,
        "end_line": 250,
        "comment": "",
        "child_ranges": [
            "(line 245,col 9)-(line 245,col 59)",
            "(line 246,col 9)-(line 246,col 42)",
            "(line 247,col 9)-(line 247,col 50)",
            "(line 248,col 9)-(line 248,col 52)",
            "(line 249,col 9)-(line 249,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testCloneShort()",
        "snippet": "    public void testCloneShort() {\n        assertEquals(null, ArrayUtils.clone((short[]) null));\n        short[] original = new short[] {1, 4};\n        short[] cloned = ArrayUtils.clone(original);\n        assertTrue(Arrays.equals(original, cloned));\n        assertTrue(original != cloned);\n    }",
        "begin_line": 252,
        "end_line": 258,
        "comment": "",
        "child_ranges": [
            "(line 253,col 9)-(line 253,col 61)",
            "(line 254,col 9)-(line 254,col 46)",
            "(line 255,col 9)-(line 255,col 52)",
            "(line 256,col 9)-(line 256,col 52)",
            "(line 257,col 9)-(line 257,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testCloneChar()",
        "snippet": "    public void testCloneChar() {\n        assertEquals(null, ArrayUtils.clone((char[]) null));\n        char[] original = new char[] {'a', '4'};\n        char[] cloned = ArrayUtils.clone(original);\n        assertTrue(Arrays.equals(original, cloned));\n        assertTrue(original != cloned);\n    }",
        "begin_line": 260,
        "end_line": 266,
        "comment": "",
        "child_ranges": [
            "(line 261,col 9)-(line 261,col 60)",
            "(line 262,col 9)-(line 262,col 48)",
            "(line 263,col 9)-(line 263,col 51)",
            "(line 264,col 9)-(line 264,col 52)",
            "(line 265,col 9)-(line 265,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testCloneByte()",
        "snippet": "    public void testCloneByte() {\n        assertEquals(null, ArrayUtils.clone((byte[]) null));\n        byte[] original = new byte[] {1, 6};\n        byte[] cloned = ArrayUtils.clone(original);\n        assertTrue(Arrays.equals(original, cloned));\n        assertTrue(original != cloned);\n    }",
        "begin_line": 268,
        "end_line": 274,
        "comment": "",
        "child_ranges": [
            "(line 269,col 9)-(line 269,col 60)",
            "(line 270,col 9)-(line 270,col 44)",
            "(line 271,col 9)-(line 271,col 51)",
            "(line 272,col 9)-(line 272,col 52)",
            "(line 273,col 9)-(line 273,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testCloneDouble()",
        "snippet": "    public void testCloneDouble() {\n        assertEquals(null, ArrayUtils.clone((double[]) null));\n        double[] original = new double[] {2.4d, 5.7d};\n        double[] cloned = ArrayUtils.clone(original);\n        assertTrue(Arrays.equals(original, cloned));\n        assertTrue(original != cloned);\n    }",
        "begin_line": 276,
        "end_line": 282,
        "comment": "",
        "child_ranges": [
            "(line 277,col 9)-(line 277,col 62)",
            "(line 278,col 9)-(line 278,col 54)",
            "(line 279,col 9)-(line 279,col 53)",
            "(line 280,col 9)-(line 280,col 52)",
            "(line 281,col 9)-(line 281,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testCloneFloat()",
        "snippet": "    public void testCloneFloat() {\n        assertEquals(null, ArrayUtils.clone((float[]) null));\n        float[] original = new float[] {2.6f, 6.4f};\n        float[] cloned = ArrayUtils.clone(original);\n        assertTrue(Arrays.equals(original, cloned));\n        assertTrue(original != cloned);\n    }",
        "begin_line": 284,
        "end_line": 290,
        "comment": "",
        "child_ranges": [
            "(line 285,col 9)-(line 285,col 61)",
            "(line 286,col 9)-(line 286,col 52)",
            "(line 287,col 9)-(line 287,col 52)",
            "(line 288,col 9)-(line 288,col 52)",
            "(line 289,col 9)-(line 289,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testSubarrayObject()",
        "snippet": "    public void testSubarrayObject() {\n        Object[] nullArray = null;\n        Object[] objectArray = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"};\n\n        assertEquals(\"0 start, mid end\", \"abcd\",\n            StringUtils.join(ArrayUtils.subarray(objectArray, 0, 4)));\n        assertEquals(\"0 start, length end\", \"abcdef\",\n            StringUtils.join(ArrayUtils.subarray(objectArray, 0, objectArray.length)));\n        assertEquals(\"mid start, mid end\", \"bcd\",\n            StringUtils.join(ArrayUtils.subarray(objectArray, 1, 4)));\n        assertEquals(\"mid start, length end\", \"bcdef\",\n            StringUtils.join(ArrayUtils.subarray(objectArray, 1, objectArray.length)));\n\n        assertNull(\"null input\", ArrayUtils.subarray(nullArray, 0, 3));\n        assertEquals(\"empty array\", \"\",\n            StringUtils.join(ArrayUtils.subarray(ArrayUtils.EMPTY_OBJECT_ARRAY, 1, 2)));\n        assertEquals(\"start > end\", \"\",\n            StringUtils.join(ArrayUtils.subarray(objectArray, 4, 2)));\n        assertEquals(\"start == end\", \"\",\n            StringUtils.join(ArrayUtils.subarray(objectArray, 3, 3)));\n        assertEquals(\"start undershoot, normal end\", \"abcd\",\n            StringUtils.join(ArrayUtils.subarray(objectArray, -2, 4)));\n        assertEquals(\"start overshoot, any end\", \"\",\n            StringUtils.join(ArrayUtils.subarray(objectArray, 33, 4)));\n        assertEquals(\"normal start, end overshoot\", \"cdef\",\n            StringUtils.join(ArrayUtils.subarray(objectArray, 2, 33)));\n        assertEquals(\"start undershoot, end overshoot\", \"abcdef\",\n            StringUtils.join(ArrayUtils.subarray(objectArray, -2, 12)));\n            \n        // array type tests\n        Date[] dateArray = { new java.sql.Date(new Date().getTime()),\n            new Date(), new Date(), new Date(), new Date() };\n\n        assertSame(\"Object type\", Object.class,\n            ArrayUtils.subarray(objectArray, 2, 4).getClass().getComponentType());\n        assertSame(\"java.util.Date type\", java.util.Date.class,\n            ArrayUtils.subarray(dateArray, 1, 4).getClass().getComponentType());\n        assertNotSame(\"java.sql.Date type\", java.sql.Date.class,\n            ArrayUtils.subarray(dateArray, 1, 4).getClass().getComponentType());\n        try {\n            Object dummy = (java.sql.Date[])ArrayUtils.subarray(dateArray, 1,3);\n            fail(\"Invalid downcast\");\n        } catch (ClassCastException e) {}\n    }",
        "begin_line": 294,
        "end_line": 337,
        "comment": "",
        "child_ranges": [
            "(line 295,col 9)-(line 295,col 34)",
            "(line 296,col 9)-(line 296,col 63)",
            "(line 298,col 9)-(line 299,col 70)",
            "(line 300,col 9)-(line 301,col 87)",
            "(line 302,col 9)-(line 303,col 70)",
            "(line 304,col 9)-(line 305,col 87)",
            "(line 307,col 9)-(line 307,col 71)",
            "(line 308,col 9)-(line 309,col 88)",
            "(line 310,col 9)-(line 311,col 70)",
            "(line 312,col 9)-(line 313,col 70)",
            "(line 314,col 9)-(line 315,col 71)",
            "(line 316,col 9)-(line 317,col 71)",
            "(line 318,col 9)-(line 319,col 71)",
            "(line 320,col 9)-(line 321,col 72)",
            "(line 324,col 9)-(line 325,col 61)",
            "(line 327,col 9)-(line 328,col 82)",
            "(line 329,col 9)-(line 330,col 80)",
            "(line 331,col 9)-(line 332,col 80)",
            "(line 333,col 9)-(line 336,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testSubarrayLong()",
        "snippet": "    public void testSubarrayLong() {\n        long[] nullArray = null;\n        long[] array = { 999910, 999911, 999912, 999913, 999914, 999915 };\n        long[] leftSubarray     = { 999910, 999911, 999912, 999913 };\n        long[] midSubarray      = { 999911, 999912, 999913, 999914 };\n        long[] rightSubarray    = { 999912, 999913, 999914, 999915 };\n\n        assertTrue(\"0 start, mid end\",\n            ArrayUtils.isEquals(leftSubarray,\n                ArrayUtils.subarray(array, 0, 4)));\n\n        assertTrue(\"0 start, length end\",\n            ArrayUtils.isEquals(array,\n                ArrayUtils.subarray(array, 0, array.length)));\n\n        assertTrue(\"mid start, mid end\",\n            ArrayUtils.isEquals(midSubarray,\n                ArrayUtils.subarray(array, 1, 5)));\n\n        assertTrue(\"mid start, length end\",\n            ArrayUtils.isEquals(rightSubarray,\n                ArrayUtils.subarray(array, 2, array.length)));\n\n\n        assertNull(\"null input\", ArrayUtils.subarray(nullArray, 0, 3));\n\n        assertEquals(\"empty array\", ArrayUtils.EMPTY_LONG_ARRAY,\n            ArrayUtils.subarray(ArrayUtils.EMPTY_LONG_ARRAY, 1, 2));\n\n        assertEquals(\"start > end\", ArrayUtils.EMPTY_LONG_ARRAY,\n            ArrayUtils.subarray(array, 4, 2));\n\n        assertEquals(\"start == end\", ArrayUtils.EMPTY_LONG_ARRAY,\n            ArrayUtils.subarray(array, 3, 3));\n\n        assertTrue(\"start undershoot, normal end\",\n            ArrayUtils.isEquals(leftSubarray,\n                ArrayUtils.subarray(array, -2, 4)));\n\n        assertEquals(\"start overshoot, any end\",\n            ArrayUtils.EMPTY_LONG_ARRAY,\n                ArrayUtils.subarray(array, 33, 4));\n\n        assertTrue(\"normal start, end overshoot\",\n            ArrayUtils.isEquals(rightSubarray,\n                ArrayUtils.subarray(array, 2, 33)));\n\n        assertTrue(\"start undershoot, end overshoot\",\n            ArrayUtils.isEquals(array,\n                ArrayUtils.subarray(array, -2, 12)));\n\n        // empty-return tests\n\n        assertSame(\"empty array, object test\",\n            ArrayUtils.EMPTY_LONG_ARRAY,\n                ArrayUtils.subarray(ArrayUtils.EMPTY_LONG_ARRAY, 1, 2));\n\n        assertSame(\"start > end, object test\",\n            ArrayUtils.EMPTY_LONG_ARRAY,\n                ArrayUtils.subarray(array, 4, 1));\n\n        assertSame(\"start == end, object test\",\n            ArrayUtils.EMPTY_LONG_ARRAY,\n                ArrayUtils.subarray(array, 3, 3));\n\n        assertSame(\"start overshoot, any end, object test\",\n            ArrayUtils.EMPTY_LONG_ARRAY,\n                ArrayUtils.subarray(array, 8733, 4));\n\n        // array type tests\n\n        assertSame(\"long type\", long.class,\n            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());\n\n    }",
        "begin_line": 339,
        "end_line": 413,
        "comment": "",
        "child_ranges": [
            "(line 340,col 9)-(line 340,col 32)",
            "(line 341,col 9)-(line 341,col 74)",
            "(line 342,col 9)-(line 342,col 69)",
            "(line 343,col 9)-(line 343,col 69)",
            "(line 344,col 9)-(line 344,col 69)",
            "(line 346,col 9)-(line 348,col 51)",
            "(line 350,col 9)-(line 352,col 62)",
            "(line 354,col 9)-(line 356,col 51)",
            "(line 358,col 9)-(line 360,col 62)",
            "(line 363,col 9)-(line 363,col 71)",
            "(line 365,col 9)-(line 366,col 68)",
            "(line 368,col 9)-(line 369,col 46)",
            "(line 371,col 9)-(line 372,col 46)",
            "(line 374,col 9)-(line 376,col 52)",
            "(line 378,col 9)-(line 380,col 51)",
            "(line 382,col 9)-(line 384,col 52)",
            "(line 386,col 9)-(line 388,col 53)",
            "(line 392,col 9)-(line 394,col 72)",
            "(line 396,col 9)-(line 398,col 50)",
            "(line 400,col 9)-(line 402,col 50)",
            "(line 404,col 9)-(line 406,col 53)",
            "(line 410,col 9)-(line 411,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testSubarrayInt()",
        "snippet": "    public void testSubarrayInt() {\n        int[] nullArray = null;\n        int[] array = { 10, 11, 12, 13, 14, 15 };\n        int[] leftSubarray  = { 10, 11, 12, 13 };\n        int[] midSubarray   = { 11, 12, 13, 14 };\n        int[] rightSubarray = { 12, 13, 14, 15 };\n\n\n        assertTrue(\"0 start, mid end\",\n            ArrayUtils.isEquals(leftSubarray,\n                ArrayUtils.subarray(array, 0, 4)));\n\n        assertTrue(\"0 start, length end\",\n            ArrayUtils.isEquals(array,\n                ArrayUtils.subarray(array, 0, array.length)));\n\n        assertTrue(\"mid start, mid end\",\n            ArrayUtils.isEquals(midSubarray,\n                ArrayUtils.subarray(array, 1, 5)));\n\n        assertTrue(\"mid start, length end\",\n            ArrayUtils.isEquals(rightSubarray,\n                ArrayUtils.subarray(array, 2, array.length)));\n\n\n        assertNull(\"null input\", ArrayUtils.subarray(nullArray, 0, 3));\n\n        assertEquals(\"empty array\", ArrayUtils.EMPTY_INT_ARRAY,\n            ArrayUtils.subarray(ArrayUtils.EMPTY_INT_ARRAY, 1, 2));\n\n        assertEquals(\"start > end\", ArrayUtils.EMPTY_INT_ARRAY,\n            ArrayUtils.subarray(array, 4, 2));\n\n        assertEquals(\"start == end\", ArrayUtils.EMPTY_INT_ARRAY,\n            ArrayUtils.subarray(array, 3, 3));\n\n        assertTrue(\"start undershoot, normal end\",\n            ArrayUtils.isEquals(leftSubarray,\n                ArrayUtils.subarray(array, -2, 4)));\n\n        assertEquals(\"start overshoot, any end\",\n            ArrayUtils.EMPTY_INT_ARRAY,\n                ArrayUtils.subarray(array, 33, 4));\n\n        assertTrue(\"normal start, end overshoot\",\n            ArrayUtils.isEquals(rightSubarray,\n                ArrayUtils.subarray(array, 2, 33)));\n\n        assertTrue(\"start undershoot, end overshoot\",\n            ArrayUtils.isEquals(array,\n                ArrayUtils.subarray(array, -2, 12)));\n\n        // empty-return tests\n\n        assertSame(\"empty array, object test\",\n            ArrayUtils.EMPTY_INT_ARRAY,\n                ArrayUtils.subarray(ArrayUtils.EMPTY_INT_ARRAY, 1, 2));\n\n        assertSame(\"start > end, object test\",\n            ArrayUtils.EMPTY_INT_ARRAY,\n                ArrayUtils.subarray(array, 4, 1));\n\n        assertSame(\"start == end, object test\",\n            ArrayUtils.EMPTY_INT_ARRAY,\n                ArrayUtils.subarray(array, 3, 3));\n\n        assertSame(\"start overshoot, any end, object test\",\n            ArrayUtils.EMPTY_INT_ARRAY,\n                ArrayUtils.subarray(array, 8733, 4));\n\n        // array type tests\n\n        assertSame(\"int type\", int.class,\n            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());\n\n    }",
        "begin_line": 415,
        "end_line": 490,
        "comment": "",
        "child_ranges": [
            "(line 416,col 9)-(line 416,col 31)",
            "(line 417,col 9)-(line 417,col 49)",
            "(line 418,col 9)-(line 418,col 49)",
            "(line 419,col 9)-(line 419,col 49)",
            "(line 420,col 9)-(line 420,col 49)",
            "(line 423,col 9)-(line 425,col 51)",
            "(line 427,col 9)-(line 429,col 62)",
            "(line 431,col 9)-(line 433,col 51)",
            "(line 435,col 9)-(line 437,col 62)",
            "(line 440,col 9)-(line 440,col 71)",
            "(line 442,col 9)-(line 443,col 67)",
            "(line 445,col 9)-(line 446,col 46)",
            "(line 448,col 9)-(line 449,col 46)",
            "(line 451,col 9)-(line 453,col 52)",
            "(line 455,col 9)-(line 457,col 51)",
            "(line 459,col 9)-(line 461,col 52)",
            "(line 463,col 9)-(line 465,col 53)",
            "(line 469,col 9)-(line 471,col 71)",
            "(line 473,col 9)-(line 475,col 50)",
            "(line 477,col 9)-(line 479,col 50)",
            "(line 481,col 9)-(line 483,col 53)",
            "(line 487,col 9)-(line 488,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testSubarrayShort()",
        "snippet": "    public void testSubarrayShort() {\n        short[] nullArray = null;\n        short[] array = { 10, 11, 12, 13, 14, 15 };\n        short[] leftSubarray    = { 10, 11, 12, 13 };\n        short[] midSubarray     = { 11, 12, 13, 14 };\n        short[] rightSubarray   = { 12, 13, 14, 15 };\n\n\n        assertTrue(\"0 start, mid end\",\n            ArrayUtils.isEquals(leftSubarray,\n                ArrayUtils.subarray(array, 0, 4)));\n\n        assertTrue(\"0 start, length end\",\n            ArrayUtils.isEquals(array,\n                ArrayUtils.subarray(array, 0, array.length)));\n\n        assertTrue(\"mid start, mid end\",\n            ArrayUtils.isEquals(midSubarray,\n                ArrayUtils.subarray(array, 1, 5)));\n\n        assertTrue(\"mid start, length end\",\n            ArrayUtils.isEquals(rightSubarray,\n                ArrayUtils.subarray(array, 2, array.length)));\n\n\n        assertNull(\"null input\", ArrayUtils.subarray(nullArray, 0, 3));\n\n        assertEquals(\"empty array\", ArrayUtils.EMPTY_SHORT_ARRAY,\n            ArrayUtils.subarray(ArrayUtils.EMPTY_SHORT_ARRAY, 1, 2));\n\n        assertEquals(\"start > end\", ArrayUtils.EMPTY_SHORT_ARRAY,\n            ArrayUtils.subarray(array, 4, 2));\n\n        assertEquals(\"start == end\", ArrayUtils.EMPTY_SHORT_ARRAY,\n            ArrayUtils.subarray(array, 3, 3));\n\n        assertTrue(\"start undershoot, normal end\",\n            ArrayUtils.isEquals(leftSubarray,\n                ArrayUtils.subarray(array, -2, 4)));\n\n        assertEquals(\"start overshoot, any end\",\n            ArrayUtils.EMPTY_SHORT_ARRAY,\n                ArrayUtils.subarray(array, 33, 4));\n\n        assertTrue(\"normal start, end overshoot\",\n            ArrayUtils.isEquals(rightSubarray,\n                ArrayUtils.subarray(array, 2, 33)));\n\n        assertTrue(\"start undershoot, end overshoot\",\n            ArrayUtils.isEquals(array,\n                ArrayUtils.subarray(array, -2, 12)));\n\n        // empty-return tests\n\n        assertSame(\"empty array, object test\",\n            ArrayUtils.EMPTY_SHORT_ARRAY,\n                ArrayUtils.subarray(ArrayUtils.EMPTY_SHORT_ARRAY, 1, 2));\n\n        assertSame(\"start > end, object test\",\n            ArrayUtils.EMPTY_SHORT_ARRAY,\n                ArrayUtils.subarray(array, 4, 1));\n\n        assertSame(\"start == end, object test\",\n            ArrayUtils.EMPTY_SHORT_ARRAY,\n                ArrayUtils.subarray(array, 3, 3));\n\n        assertSame(\"start overshoot, any end, object test\",\n            ArrayUtils.EMPTY_SHORT_ARRAY,\n                ArrayUtils.subarray(array, 8733, 4));\n\n        // array type tests\n\n        assertSame(\"short type\", short.class,\n            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());\n\n    }",
        "begin_line": 492,
        "end_line": 567,
        "comment": "",
        "child_ranges": [
            "(line 493,col 9)-(line 493,col 33)",
            "(line 494,col 9)-(line 494,col 51)",
            "(line 495,col 9)-(line 495,col 53)",
            "(line 496,col 9)-(line 496,col 53)",
            "(line 497,col 9)-(line 497,col 53)",
            "(line 500,col 9)-(line 502,col 51)",
            "(line 504,col 9)-(line 506,col 62)",
            "(line 508,col 9)-(line 510,col 51)",
            "(line 512,col 9)-(line 514,col 62)",
            "(line 517,col 9)-(line 517,col 71)",
            "(line 519,col 9)-(line 520,col 69)",
            "(line 522,col 9)-(line 523,col 46)",
            "(line 525,col 9)-(line 526,col 46)",
            "(line 528,col 9)-(line 530,col 52)",
            "(line 532,col 9)-(line 534,col 51)",
            "(line 536,col 9)-(line 538,col 52)",
            "(line 540,col 9)-(line 542,col 53)",
            "(line 546,col 9)-(line 548,col 73)",
            "(line 550,col 9)-(line 552,col 50)",
            "(line 554,col 9)-(line 556,col 50)",
            "(line 558,col 9)-(line 560,col 53)",
            "(line 564,col 9)-(line 565,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testSubarrChar()",
        "snippet": "    public void testSubarrChar() {\n        char[] nullArray = null;\n        char[] array = { 'a', 'b', 'c', 'd', 'e', 'f' };\n        char[] leftSubarray     = { 'a', 'b', 'c', 'd', };\n        char[] midSubarray      = { 'b', 'c', 'd', 'e', };\n        char[] rightSubarray    = { 'c', 'd', 'e', 'f', };\n\n\n        assertTrue(\"0 start, mid end\",\n            ArrayUtils.isEquals(leftSubarray,\n                ArrayUtils.subarray(array, 0, 4)));\n\n        assertTrue(\"0 start, length end\",\n            ArrayUtils.isEquals(array,\n                ArrayUtils.subarray(array, 0, array.length)));\n\n        assertTrue(\"mid start, mid end\",\n            ArrayUtils.isEquals(midSubarray,\n                ArrayUtils.subarray(array, 1, 5)));\n\n        assertTrue(\"mid start, length end\",\n            ArrayUtils.isEquals(rightSubarray,\n                ArrayUtils.subarray(array, 2, array.length)));\n\n\n        assertNull(\"null input\", ArrayUtils.subarray(nullArray, 0, 3));\n\n        assertEquals(\"empty array\", ArrayUtils.EMPTY_CHAR_ARRAY,\n            ArrayUtils.subarray(ArrayUtils.EMPTY_CHAR_ARRAY, 1, 2));\n\n        assertEquals(\"start > end\", ArrayUtils.EMPTY_CHAR_ARRAY,\n            ArrayUtils.subarray(array, 4, 2));\n\n        assertEquals(\"start == end\", ArrayUtils.EMPTY_CHAR_ARRAY,\n            ArrayUtils.subarray(array, 3, 3));\n\n        assertTrue(\"start undershoot, normal end\",\n            ArrayUtils.isEquals(leftSubarray,\n                ArrayUtils.subarray(array, -2, 4)));\n\n        assertEquals(\"start overshoot, any end\",\n            ArrayUtils.EMPTY_CHAR_ARRAY,\n                ArrayUtils.subarray(array, 33, 4));\n\n        assertTrue(\"normal start, end overshoot\",\n            ArrayUtils.isEquals(rightSubarray,\n                ArrayUtils.subarray(array, 2, 33)));\n\n        assertTrue(\"start undershoot, end overshoot\",\n            ArrayUtils.isEquals(array,\n                ArrayUtils.subarray(array, -2, 12)));\n\n        // empty-return tests\n\n        assertSame(\"empty array, object test\",\n            ArrayUtils.EMPTY_CHAR_ARRAY,\n                ArrayUtils.subarray(ArrayUtils.EMPTY_CHAR_ARRAY, 1, 2));\n\n        assertSame(\"start > end, object test\",\n            ArrayUtils.EMPTY_CHAR_ARRAY,\n                ArrayUtils.subarray(array, 4, 1));\n\n        assertSame(\"start == end, object test\",\n            ArrayUtils.EMPTY_CHAR_ARRAY,\n                ArrayUtils.subarray(array, 3, 3));\n\n        assertSame(\"start overshoot, any end, object test\",\n            ArrayUtils.EMPTY_CHAR_ARRAY,\n                ArrayUtils.subarray(array, 8733, 4));\n\n        // array type tests\n\n        assertSame(\"char type\", char.class,\n            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());\n\n    }",
        "begin_line": 569,
        "end_line": 644,
        "comment": "",
        "child_ranges": [
            "(line 570,col 9)-(line 570,col 32)",
            "(line 571,col 9)-(line 571,col 56)",
            "(line 572,col 9)-(line 572,col 58)",
            "(line 573,col 9)-(line 573,col 58)",
            "(line 574,col 9)-(line 574,col 58)",
            "(line 577,col 9)-(line 579,col 51)",
            "(line 581,col 9)-(line 583,col 62)",
            "(line 585,col 9)-(line 587,col 51)",
            "(line 589,col 9)-(line 591,col 62)",
            "(line 594,col 9)-(line 594,col 71)",
            "(line 596,col 9)-(line 597,col 68)",
            "(line 599,col 9)-(line 600,col 46)",
            "(line 602,col 9)-(line 603,col 46)",
            "(line 605,col 9)-(line 607,col 52)",
            "(line 609,col 9)-(line 611,col 51)",
            "(line 613,col 9)-(line 615,col 52)",
            "(line 617,col 9)-(line 619,col 53)",
            "(line 623,col 9)-(line 625,col 72)",
            "(line 627,col 9)-(line 629,col 50)",
            "(line 631,col 9)-(line 633,col 50)",
            "(line 635,col 9)-(line 637,col 53)",
            "(line 641,col 9)-(line 642,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testSubarrayByte()",
        "snippet": "    public void testSubarrayByte() {\n        byte[] nullArray = null;\n        byte[] array = { 10, 11, 12, 13, 14, 15 };\n        byte[] leftSubarray     = { 10, 11, 12, 13 };\n        byte[] midSubarray      = { 11, 12, 13, 14 };\n        byte[] rightSubarray = { 12, 13, 14, 15 };\n\n\n        assertTrue(\"0 start, mid end\",\n            ArrayUtils.isEquals(leftSubarray,\n                ArrayUtils.subarray(array, 0, 4)));\n\n        assertTrue(\"0 start, length end\",\n            ArrayUtils.isEquals(array,\n                ArrayUtils.subarray(array, 0, array.length)));\n\n        assertTrue(\"mid start, mid end\",\n            ArrayUtils.isEquals(midSubarray,\n                ArrayUtils.subarray(array, 1, 5)));\n\n        assertTrue(\"mid start, length end\",\n            ArrayUtils.isEquals(rightSubarray,\n                ArrayUtils.subarray(array, 2, array.length)));\n\n\n        assertNull(\"null input\", ArrayUtils.subarray(nullArray, 0, 3));\n\n        assertEquals(\"empty array\", ArrayUtils.EMPTY_BYTE_ARRAY,\n            ArrayUtils.subarray(ArrayUtils.EMPTY_BYTE_ARRAY, 1, 2));\n\n        assertEquals(\"start > end\", ArrayUtils.EMPTY_BYTE_ARRAY,\n            ArrayUtils.subarray(array, 4, 2));\n\n        assertEquals(\"start == end\", ArrayUtils.EMPTY_BYTE_ARRAY,\n            ArrayUtils.subarray(array, 3, 3));\n\n        assertTrue(\"start undershoot, normal end\",\n            ArrayUtils.isEquals(leftSubarray,\n                ArrayUtils.subarray(array, -2, 4)));\n\n        assertEquals(\"start overshoot, any end\",\n            ArrayUtils.EMPTY_BYTE_ARRAY,\n                ArrayUtils.subarray(array, 33, 4));\n\n        assertTrue(\"normal start, end overshoot\",\n            ArrayUtils.isEquals(rightSubarray,\n                ArrayUtils.subarray(array, 2, 33)));\n\n        assertTrue(\"start undershoot, end overshoot\",\n            ArrayUtils.isEquals(array,\n                ArrayUtils.subarray(array, -2, 12)));\n\n        // empty-return tests\n\n        assertSame(\"empty array, object test\",\n            ArrayUtils.EMPTY_BYTE_ARRAY,\n                ArrayUtils.subarray(ArrayUtils.EMPTY_BYTE_ARRAY, 1, 2));\n\n        assertSame(\"start > end, object test\",\n            ArrayUtils.EMPTY_BYTE_ARRAY,\n                ArrayUtils.subarray(array, 4, 1));\n\n        assertSame(\"start == end, object test\",\n            ArrayUtils.EMPTY_BYTE_ARRAY,\n                ArrayUtils.subarray(array, 3, 3));\n\n        assertSame(\"start overshoot, any end, object test\",\n            ArrayUtils.EMPTY_BYTE_ARRAY,\n                ArrayUtils.subarray(array, 8733, 4));\n\n        // array type tests\n\n        assertSame(\"byte type\", byte.class,\n            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());\n\n    }",
        "begin_line": 646,
        "end_line": 721,
        "comment": "",
        "child_ranges": [
            "(line 647,col 9)-(line 647,col 32)",
            "(line 648,col 9)-(line 648,col 50)",
            "(line 649,col 9)-(line 649,col 53)",
            "(line 650,col 9)-(line 650,col 53)",
            "(line 651,col 9)-(line 651,col 50)",
            "(line 654,col 9)-(line 656,col 51)",
            "(line 658,col 9)-(line 660,col 62)",
            "(line 662,col 9)-(line 664,col 51)",
            "(line 666,col 9)-(line 668,col 62)",
            "(line 671,col 9)-(line 671,col 71)",
            "(line 673,col 9)-(line 674,col 68)",
            "(line 676,col 9)-(line 677,col 46)",
            "(line 679,col 9)-(line 680,col 46)",
            "(line 682,col 9)-(line 684,col 52)",
            "(line 686,col 9)-(line 688,col 51)",
            "(line 690,col 9)-(line 692,col 52)",
            "(line 694,col 9)-(line 696,col 53)",
            "(line 700,col 9)-(line 702,col 72)",
            "(line 704,col 9)-(line 706,col 50)",
            "(line 708,col 9)-(line 710,col 50)",
            "(line 712,col 9)-(line 714,col 53)",
            "(line 718,col 9)-(line 719,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testSubarrayDouble()",
        "snippet": "    public void testSubarrayDouble() {\n        double[] nullArray = null;\n        double[] array = { 10.123, 11.234, 12.345, 13.456, 14.567, 15.678 };\n        double[] leftSubarray   = { 10.123, 11.234, 12.345, 13.456, };\n        double[] midSubarray    = { 11.234, 12.345, 13.456, 14.567, };\n        double[] rightSubarray  = { 12.345, 13.456, 14.567, 15.678 };\n\n\n        assertTrue(\"0 start, mid end\",\n            ArrayUtils.isEquals(leftSubarray,\n                ArrayUtils.subarray(array, 0, 4)));\n\n        assertTrue(\"0 start, length end\",\n            ArrayUtils.isEquals(array,\n                ArrayUtils.subarray(array, 0, array.length)));\n\n        assertTrue(\"mid start, mid end\",\n            ArrayUtils.isEquals(midSubarray,\n                ArrayUtils.subarray(array, 1, 5)));\n\n        assertTrue(\"mid start, length end\",\n            ArrayUtils.isEquals(rightSubarray,\n                ArrayUtils.subarray(array, 2, array.length)));\n\n\n        assertNull(\"null input\", ArrayUtils.subarray(nullArray, 0, 3));\n\n        assertEquals(\"empty array\", ArrayUtils.EMPTY_DOUBLE_ARRAY,\n            ArrayUtils.subarray(ArrayUtils.EMPTY_DOUBLE_ARRAY, 1, 2));\n\n        assertEquals(\"start > end\", ArrayUtils.EMPTY_DOUBLE_ARRAY,\n            ArrayUtils.subarray(array, 4, 2));\n\n        assertEquals(\"start == end\", ArrayUtils.EMPTY_DOUBLE_ARRAY,\n            ArrayUtils.subarray(array, 3, 3));\n\n        assertTrue(\"start undershoot, normal end\",\n            ArrayUtils.isEquals(leftSubarray,\n                ArrayUtils.subarray(array, -2, 4)));\n\n        assertEquals(\"start overshoot, any end\",\n            ArrayUtils.EMPTY_DOUBLE_ARRAY,\n                ArrayUtils.subarray(array, 33, 4));\n\n        assertTrue(\"normal start, end overshoot\",\n            ArrayUtils.isEquals(rightSubarray,\n                ArrayUtils.subarray(array, 2, 33)));\n\n        assertTrue(\"start undershoot, end overshoot\",\n            ArrayUtils.isEquals(array,\n                ArrayUtils.subarray(array, -2, 12)));\n\n        // empty-return tests\n\n        assertSame(\"empty array, object test\",\n            ArrayUtils.EMPTY_DOUBLE_ARRAY,\n                ArrayUtils.subarray(ArrayUtils.EMPTY_DOUBLE_ARRAY, 1, 2));\n\n        assertSame(\"start > end, object test\",\n            ArrayUtils.EMPTY_DOUBLE_ARRAY,\n                ArrayUtils.subarray(array, 4, 1));\n\n        assertSame(\"start == end, object test\",\n            ArrayUtils.EMPTY_DOUBLE_ARRAY,\n                ArrayUtils.subarray(array, 3, 3));\n\n        assertSame(\"start overshoot, any end, object test\",\n            ArrayUtils.EMPTY_DOUBLE_ARRAY,\n                ArrayUtils.subarray(array, 8733, 4));\n\n        // array type tests\n\n        assertSame(\"double type\", double.class,\n            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());\n\n    }",
        "begin_line": 723,
        "end_line": 798,
        "comment": "",
        "child_ranges": [
            "(line 724,col 9)-(line 724,col 34)",
            "(line 725,col 9)-(line 725,col 76)",
            "(line 726,col 9)-(line 726,col 70)",
            "(line 727,col 9)-(line 727,col 70)",
            "(line 728,col 9)-(line 728,col 69)",
            "(line 731,col 9)-(line 733,col 51)",
            "(line 735,col 9)-(line 737,col 62)",
            "(line 739,col 9)-(line 741,col 51)",
            "(line 743,col 9)-(line 745,col 62)",
            "(line 748,col 9)-(line 748,col 71)",
            "(line 750,col 9)-(line 751,col 70)",
            "(line 753,col 9)-(line 754,col 46)",
            "(line 756,col 9)-(line 757,col 46)",
            "(line 759,col 9)-(line 761,col 52)",
            "(line 763,col 9)-(line 765,col 51)",
            "(line 767,col 9)-(line 769,col 52)",
            "(line 771,col 9)-(line 773,col 53)",
            "(line 777,col 9)-(line 779,col 74)",
            "(line 781,col 9)-(line 783,col 50)",
            "(line 785,col 9)-(line 787,col 50)",
            "(line 789,col 9)-(line 791,col 53)",
            "(line 795,col 9)-(line 796,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testSubarrayFloat()",
        "snippet": "    public void testSubarrayFloat() {\n        float[] nullArray = null;\n        float[] array = { 10, 11, 12, 13, 14, 15 };\n        float[] leftSubarray    = { 10, 11, 12, 13 };\n        float[] midSubarray     = { 11, 12, 13, 14 };\n        float[] rightSubarray   = { 12, 13, 14, 15 };\n\n\n        assertTrue(\"0 start, mid end\",\n            ArrayUtils.isEquals(leftSubarray,\n                ArrayUtils.subarray(array, 0, 4)));\n\n        assertTrue(\"0 start, length end\",\n            ArrayUtils.isEquals(array,\n                ArrayUtils.subarray(array, 0, array.length)));\n\n        assertTrue(\"mid start, mid end\",\n            ArrayUtils.isEquals(midSubarray,\n                ArrayUtils.subarray(array, 1, 5)));\n\n        assertTrue(\"mid start, length end\",\n            ArrayUtils.isEquals(rightSubarray,\n                ArrayUtils.subarray(array, 2, array.length)));\n\n\n        assertNull(\"null input\", ArrayUtils.subarray(nullArray, 0, 3));\n\n        assertEquals(\"empty array\", ArrayUtils.EMPTY_FLOAT_ARRAY,\n            ArrayUtils.subarray(ArrayUtils.EMPTY_FLOAT_ARRAY, 1, 2));\n\n        assertEquals(\"start > end\", ArrayUtils.EMPTY_FLOAT_ARRAY,\n            ArrayUtils.subarray(array, 4, 2));\n\n        assertEquals(\"start == end\", ArrayUtils.EMPTY_FLOAT_ARRAY,\n            ArrayUtils.subarray(array, 3, 3));\n\n        assertTrue(\"start undershoot, normal end\",\n            ArrayUtils.isEquals(leftSubarray,\n                ArrayUtils.subarray(array, -2, 4)));\n\n        assertEquals(\"start overshoot, any end\",\n            ArrayUtils.EMPTY_FLOAT_ARRAY,\n                ArrayUtils.subarray(array, 33, 4));\n\n        assertTrue(\"normal start, end overshoot\",\n            ArrayUtils.isEquals(rightSubarray,\n                ArrayUtils.subarray(array, 2, 33)));\n\n        assertTrue(\"start undershoot, end overshoot\",\n            ArrayUtils.isEquals(array,\n                ArrayUtils.subarray(array, -2, 12)));\n\n        // empty-return tests\n\n        assertSame(\"empty array, object test\",\n            ArrayUtils.EMPTY_FLOAT_ARRAY,\n                ArrayUtils.subarray(ArrayUtils.EMPTY_FLOAT_ARRAY, 1, 2));\n\n        assertSame(\"start > end, object test\",\n            ArrayUtils.EMPTY_FLOAT_ARRAY,\n                ArrayUtils.subarray(array, 4, 1));\n\n        assertSame(\"start == end, object test\",\n            ArrayUtils.EMPTY_FLOAT_ARRAY,\n                ArrayUtils.subarray(array, 3, 3));\n\n        assertSame(\"start overshoot, any end, object test\",\n            ArrayUtils.EMPTY_FLOAT_ARRAY,\n                ArrayUtils.subarray(array, 8733, 4));\n\n        // array type tests\n\n        assertSame(\"float type\", float.class,\n            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());\n\n    }",
        "begin_line": 800,
        "end_line": 875,
        "comment": "",
        "child_ranges": [
            "(line 801,col 9)-(line 801,col 33)",
            "(line 802,col 9)-(line 802,col 51)",
            "(line 803,col 9)-(line 803,col 53)",
            "(line 804,col 9)-(line 804,col 53)",
            "(line 805,col 9)-(line 805,col 53)",
            "(line 808,col 9)-(line 810,col 51)",
            "(line 812,col 9)-(line 814,col 62)",
            "(line 816,col 9)-(line 818,col 51)",
            "(line 820,col 9)-(line 822,col 62)",
            "(line 825,col 9)-(line 825,col 71)",
            "(line 827,col 9)-(line 828,col 69)",
            "(line 830,col 9)-(line 831,col 46)",
            "(line 833,col 9)-(line 834,col 46)",
            "(line 836,col 9)-(line 838,col 52)",
            "(line 840,col 9)-(line 842,col 51)",
            "(line 844,col 9)-(line 846,col 52)",
            "(line 848,col 9)-(line 850,col 53)",
            "(line 854,col 9)-(line 856,col 73)",
            "(line 858,col 9)-(line 860,col 50)",
            "(line 862,col 9)-(line 864,col 50)",
            "(line 866,col 9)-(line 868,col 53)",
            "(line 872,col 9)-(line 873,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testSubarrayBoolean()",
        "snippet": "    public void testSubarrayBoolean() {\n        boolean[] nullArray = null;\n        boolean[] array = { true, true, false, true, false, true };\n        boolean[] leftSubarray  = { true, true, false, true  };\n        boolean[] midSubarray   = { true, false, true, false };\n        boolean[] rightSubarray = { false, true, false, true };\n\n\n        assertTrue(\"0 start, mid end\",\n            ArrayUtils.isEquals(leftSubarray,\n                ArrayUtils.subarray(array, 0, 4)));\n\n        assertTrue(\"0 start, length end\",\n            ArrayUtils.isEquals(array,\n                ArrayUtils.subarray(array, 0, array.length)));\n\n        assertTrue(\"mid start, mid end\",\n            ArrayUtils.isEquals(midSubarray,\n                ArrayUtils.subarray(array, 1, 5)));\n\n        assertTrue(\"mid start, length end\",\n            ArrayUtils.isEquals(rightSubarray,\n                ArrayUtils.subarray(array, 2, array.length)));\n\n\n        assertNull(\"null input\", ArrayUtils.subarray(nullArray, 0, 3));\n\n        assertEquals(\"empty array\", ArrayUtils.EMPTY_BOOLEAN_ARRAY,\n            ArrayUtils.subarray(ArrayUtils.EMPTY_BOOLEAN_ARRAY, 1, 2));\n\n        assertEquals(\"start > end\", ArrayUtils.EMPTY_BOOLEAN_ARRAY,\n            ArrayUtils.subarray(array, 4, 2));\n\n        assertEquals(\"start == end\", ArrayUtils.EMPTY_BOOLEAN_ARRAY,\n            ArrayUtils.subarray(array, 3, 3));\n\n        assertTrue(\"start undershoot, normal end\",\n            ArrayUtils.isEquals(leftSubarray,\n                ArrayUtils.subarray(array, -2, 4)));\n\n        assertEquals(\"start overshoot, any end\",\n            ArrayUtils.EMPTY_BOOLEAN_ARRAY,\n                ArrayUtils.subarray(array, 33, 4));\n\n        assertTrue(\"normal start, end overshoot\",\n            ArrayUtils.isEquals(rightSubarray,\n                ArrayUtils.subarray(array, 2, 33)));\n\n        assertTrue(\"start undershoot, end overshoot\",\n            ArrayUtils.isEquals(array,\n                ArrayUtils.subarray(array, -2, 12)));\n\n        // empty-return tests\n\n        assertSame(\"empty array, object test\",\n            ArrayUtils.EMPTY_BOOLEAN_ARRAY,\n                ArrayUtils.subarray(ArrayUtils.EMPTY_BOOLEAN_ARRAY, 1, 2));\n\n        assertSame(\"start > end, object test\",\n            ArrayUtils.EMPTY_BOOLEAN_ARRAY,\n                ArrayUtils.subarray(array, 4, 1));\n\n        assertSame(\"start == end, object test\",\n            ArrayUtils.EMPTY_BOOLEAN_ARRAY,\n                ArrayUtils.subarray(array, 3, 3));\n\n        assertSame(\"start overshoot, any end, object test\",\n            ArrayUtils.EMPTY_BOOLEAN_ARRAY,\n                ArrayUtils.subarray(array, 8733, 4));\n\n        // array type tests\n\n        assertSame(\"boolean type\", boolean.class,\n            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());\n\n    }",
        "begin_line": 877,
        "end_line": 952,
        "comment": "",
        "child_ranges": [
            "(line 878,col 9)-(line 878,col 35)",
            "(line 879,col 9)-(line 879,col 67)",
            "(line 880,col 9)-(line 880,col 63)",
            "(line 881,col 9)-(line 881,col 63)",
            "(line 882,col 9)-(line 882,col 63)",
            "(line 885,col 9)-(line 887,col 51)",
            "(line 889,col 9)-(line 891,col 62)",
            "(line 893,col 9)-(line 895,col 51)",
            "(line 897,col 9)-(line 899,col 62)",
            "(line 902,col 9)-(line 902,col 71)",
            "(line 904,col 9)-(line 905,col 71)",
            "(line 907,col 9)-(line 908,col 46)",
            "(line 910,col 9)-(line 911,col 46)",
            "(line 913,col 9)-(line 915,col 52)",
            "(line 917,col 9)-(line 919,col 51)",
            "(line 921,col 9)-(line 923,col 52)",
            "(line 925,col 9)-(line 927,col 53)",
            "(line 931,col 9)-(line 933,col 75)",
            "(line 935,col 9)-(line 937,col 50)",
            "(line 939,col 9)-(line 941,col 50)",
            "(line 943,col 9)-(line 945,col 53)",
            "(line 949,col 9)-(line 950,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testSameLength()",
        "snippet": "    public void testSameLength() {\n        Object[] nullArray = null;\n        Object[] emptyArray = new Object[0];\n        Object[] oneArray = new Object[] {\"pick\"};\n        Object[] twoArray = new Object[] {\"pick\", \"stick\"};\n        \n        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n        \n        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n        \n        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n        \n        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n    }",
        "begin_line": 955,
        "end_line": 980,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 956,col 9)-(line 956,col 34)",
            "(line 957,col 9)-(line 957,col 44)",
            "(line 958,col 9)-(line 958,col 50)",
            "(line 959,col 9)-(line 959,col 59)",
            "(line 961,col 9)-(line 961,col 74)",
            "(line 962,col 9)-(line 962,col 75)",
            "(line 963,col 9)-(line 963,col 74)",
            "(line 964,col 9)-(line 964,col 74)",
            "(line 966,col 9)-(line 966,col 75)",
            "(line 967,col 9)-(line 967,col 76)",
            "(line 968,col 9)-(line 968,col 75)",
            "(line 969,col 9)-(line 969,col 75)",
            "(line 971,col 9)-(line 971,col 74)",
            "(line 972,col 9)-(line 972,col 75)",
            "(line 973,col 9)-(line 973,col 72)",
            "(line 974,col 9)-(line 974,col 73)",
            "(line 976,col 9)-(line 976,col 74)",
            "(line 977,col 9)-(line 977,col 75)",
            "(line 978,col 9)-(line 978,col 73)",
            "(line 979,col 9)-(line 979,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testSameLengthBoolean()",
        "snippet": "    public void testSameLengthBoolean() {\n        boolean[] nullArray = null;\n        boolean[] emptyArray = new boolean[0];\n        boolean[] oneArray = new boolean[] {true};\n        boolean[] twoArray = new boolean[] {true, false};\n        \n        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n        \n        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n        \n        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n        \n        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n    }",
        "begin_line": 982,
        "end_line": 1007,
        "comment": "",
        "child_ranges": [
            "(line 983,col 9)-(line 983,col 35)",
            "(line 984,col 9)-(line 984,col 46)",
            "(line 985,col 9)-(line 985,col 50)",
            "(line 986,col 9)-(line 986,col 57)",
            "(line 988,col 9)-(line 988,col 74)",
            "(line 989,col 9)-(line 989,col 75)",
            "(line 990,col 9)-(line 990,col 74)",
            "(line 991,col 9)-(line 991,col 74)",
            "(line 993,col 9)-(line 993,col 75)",
            "(line 994,col 9)-(line 994,col 76)",
            "(line 995,col 9)-(line 995,col 75)",
            "(line 996,col 9)-(line 996,col 75)",
            "(line 998,col 9)-(line 998,col 74)",
            "(line 999,col 9)-(line 999,col 75)",
            "(line 1000,col 9)-(line 1000,col 72)",
            "(line 1001,col 9)-(line 1001,col 73)",
            "(line 1003,col 9)-(line 1003,col 74)",
            "(line 1004,col 9)-(line 1004,col 75)",
            "(line 1005,col 9)-(line 1005,col 73)",
            "(line 1006,col 9)-(line 1006,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testSameLengthLong()",
        "snippet": "    public void testSameLengthLong() {\n        long[] nullArray = null;\n        long[] emptyArray = new long[0];\n        long[] oneArray = new long[] {0L};\n        long[] twoArray = new long[] {0L, 76L};\n        \n        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n        \n        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n        \n        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n        \n        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n    }",
        "begin_line": 1009,
        "end_line": 1034,
        "comment": "",
        "child_ranges": [
            "(line 1010,col 9)-(line 1010,col 32)",
            "(line 1011,col 9)-(line 1011,col 40)",
            "(line 1012,col 9)-(line 1012,col 42)",
            "(line 1013,col 9)-(line 1013,col 47)",
            "(line 1015,col 9)-(line 1015,col 74)",
            "(line 1016,col 9)-(line 1016,col 75)",
            "(line 1017,col 9)-(line 1017,col 74)",
            "(line 1018,col 9)-(line 1018,col 74)",
            "(line 1020,col 9)-(line 1020,col 75)",
            "(line 1021,col 9)-(line 1021,col 76)",
            "(line 1022,col 9)-(line 1022,col 75)",
            "(line 1023,col 9)-(line 1023,col 75)",
            "(line 1025,col 9)-(line 1025,col 74)",
            "(line 1026,col 9)-(line 1026,col 75)",
            "(line 1027,col 9)-(line 1027,col 72)",
            "(line 1028,col 9)-(line 1028,col 73)",
            "(line 1030,col 9)-(line 1030,col 74)",
            "(line 1031,col 9)-(line 1031,col 75)",
            "(line 1032,col 9)-(line 1032,col 73)",
            "(line 1033,col 9)-(line 1033,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testSameLengthInt()",
        "snippet": "    public void testSameLengthInt() {\n        int[] nullArray = null;\n        int[] emptyArray = new int[0];\n        int[] oneArray = new int[] {4};\n        int[] twoArray = new int[] {5, 7};\n        \n        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n        \n        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n        \n        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n        \n        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n    }",
        "begin_line": 1036,
        "end_line": 1061,
        "comment": "",
        "child_ranges": [
            "(line 1037,col 9)-(line 1037,col 31)",
            "(line 1038,col 9)-(line 1038,col 38)",
            "(line 1039,col 9)-(line 1039,col 39)",
            "(line 1040,col 9)-(line 1040,col 42)",
            "(line 1042,col 9)-(line 1042,col 74)",
            "(line 1043,col 9)-(line 1043,col 75)",
            "(line 1044,col 9)-(line 1044,col 74)",
            "(line 1045,col 9)-(line 1045,col 74)",
            "(line 1047,col 9)-(line 1047,col 75)",
            "(line 1048,col 9)-(line 1048,col 76)",
            "(line 1049,col 9)-(line 1049,col 75)",
            "(line 1050,col 9)-(line 1050,col 75)",
            "(line 1052,col 9)-(line 1052,col 74)",
            "(line 1053,col 9)-(line 1053,col 75)",
            "(line 1054,col 9)-(line 1054,col 72)",
            "(line 1055,col 9)-(line 1055,col 73)",
            "(line 1057,col 9)-(line 1057,col 74)",
            "(line 1058,col 9)-(line 1058,col 75)",
            "(line 1059,col 9)-(line 1059,col 73)",
            "(line 1060,col 9)-(line 1060,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testSameLengthShort()",
        "snippet": "    public void testSameLengthShort() {\n        short[] nullArray = null;\n        short[] emptyArray = new short[0];\n        short[] oneArray = new short[] {4};\n        short[] twoArray = new short[] {6, 8};\n        \n        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n        \n        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n        \n        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n        \n        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n    }",
        "begin_line": 1063,
        "end_line": 1088,
        "comment": "",
        "child_ranges": [
            "(line 1064,col 9)-(line 1064,col 33)",
            "(line 1065,col 9)-(line 1065,col 42)",
            "(line 1066,col 9)-(line 1066,col 43)",
            "(line 1067,col 9)-(line 1067,col 46)",
            "(line 1069,col 9)-(line 1069,col 74)",
            "(line 1070,col 9)-(line 1070,col 75)",
            "(line 1071,col 9)-(line 1071,col 74)",
            "(line 1072,col 9)-(line 1072,col 74)",
            "(line 1074,col 9)-(line 1074,col 75)",
            "(line 1075,col 9)-(line 1075,col 76)",
            "(line 1076,col 9)-(line 1076,col 75)",
            "(line 1077,col 9)-(line 1077,col 75)",
            "(line 1079,col 9)-(line 1079,col 74)",
            "(line 1080,col 9)-(line 1080,col 75)",
            "(line 1081,col 9)-(line 1081,col 72)",
            "(line 1082,col 9)-(line 1082,col 73)",
            "(line 1084,col 9)-(line 1084,col 74)",
            "(line 1085,col 9)-(line 1085,col 75)",
            "(line 1086,col 9)-(line 1086,col 73)",
            "(line 1087,col 9)-(line 1087,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testSameLengthChar()",
        "snippet": "    public void testSameLengthChar() {\n        char[] nullArray = null;\n        char[] emptyArray = new char[0];\n        char[] oneArray = new char[] {'f'};\n        char[] twoArray = new char[] {'d', 't'};\n        \n        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n        \n        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n        \n        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n        \n        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n    }",
        "begin_line": 1090,
        "end_line": 1115,
        "comment": "",
        "child_ranges": [
            "(line 1091,col 9)-(line 1091,col 32)",
            "(line 1092,col 9)-(line 1092,col 40)",
            "(line 1093,col 9)-(line 1093,col 43)",
            "(line 1094,col 9)-(line 1094,col 48)",
            "(line 1096,col 9)-(line 1096,col 74)",
            "(line 1097,col 9)-(line 1097,col 75)",
            "(line 1098,col 9)-(line 1098,col 74)",
            "(line 1099,col 9)-(line 1099,col 74)",
            "(line 1101,col 9)-(line 1101,col 75)",
            "(line 1102,col 9)-(line 1102,col 76)",
            "(line 1103,col 9)-(line 1103,col 75)",
            "(line 1104,col 9)-(line 1104,col 75)",
            "(line 1106,col 9)-(line 1106,col 74)",
            "(line 1107,col 9)-(line 1107,col 75)",
            "(line 1108,col 9)-(line 1108,col 72)",
            "(line 1109,col 9)-(line 1109,col 73)",
            "(line 1111,col 9)-(line 1111,col 74)",
            "(line 1112,col 9)-(line 1112,col 75)",
            "(line 1113,col 9)-(line 1113,col 73)",
            "(line 1114,col 9)-(line 1114,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testSameLengthByte()",
        "snippet": "    public void testSameLengthByte() {\n        byte[] nullArray = null;\n        byte[] emptyArray = new byte[0];\n        byte[] oneArray = new byte[] {3};\n        byte[] twoArray = new byte[] {4, 6};\n        \n        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n        \n        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n        \n        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n        \n        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n    }",
        "begin_line": 1117,
        "end_line": 1142,
        "comment": "",
        "child_ranges": [
            "(line 1118,col 9)-(line 1118,col 32)",
            "(line 1119,col 9)-(line 1119,col 40)",
            "(line 1120,col 9)-(line 1120,col 41)",
            "(line 1121,col 9)-(line 1121,col 44)",
            "(line 1123,col 9)-(line 1123,col 74)",
            "(line 1124,col 9)-(line 1124,col 75)",
            "(line 1125,col 9)-(line 1125,col 74)",
            "(line 1126,col 9)-(line 1126,col 74)",
            "(line 1128,col 9)-(line 1128,col 75)",
            "(line 1129,col 9)-(line 1129,col 76)",
            "(line 1130,col 9)-(line 1130,col 75)",
            "(line 1131,col 9)-(line 1131,col 75)",
            "(line 1133,col 9)-(line 1133,col 74)",
            "(line 1134,col 9)-(line 1134,col 75)",
            "(line 1135,col 9)-(line 1135,col 72)",
            "(line 1136,col 9)-(line 1136,col 73)",
            "(line 1138,col 9)-(line 1138,col 74)",
            "(line 1139,col 9)-(line 1139,col 75)",
            "(line 1140,col 9)-(line 1140,col 73)",
            "(line 1141,col 9)-(line 1141,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testSameLengthDouble()",
        "snippet": "    public void testSameLengthDouble() {\n        double[] nullArray = null;\n        double[] emptyArray = new double[0];\n        double[] oneArray = new double[] {1.3d};\n        double[] twoArray = new double[] {4.5d, 6.3d};\n        \n        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n        \n        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n        \n        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n        \n        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n    }",
        "begin_line": 1144,
        "end_line": 1169,
        "comment": "",
        "child_ranges": [
            "(line 1145,col 9)-(line 1145,col 34)",
            "(line 1146,col 9)-(line 1146,col 44)",
            "(line 1147,col 9)-(line 1147,col 48)",
            "(line 1148,col 9)-(line 1148,col 54)",
            "(line 1150,col 9)-(line 1150,col 74)",
            "(line 1151,col 9)-(line 1151,col 75)",
            "(line 1152,col 9)-(line 1152,col 74)",
            "(line 1153,col 9)-(line 1153,col 74)",
            "(line 1155,col 9)-(line 1155,col 75)",
            "(line 1156,col 9)-(line 1156,col 76)",
            "(line 1157,col 9)-(line 1157,col 75)",
            "(line 1158,col 9)-(line 1158,col 75)",
            "(line 1160,col 9)-(line 1160,col 74)",
            "(line 1161,col 9)-(line 1161,col 75)",
            "(line 1162,col 9)-(line 1162,col 72)",
            "(line 1163,col 9)-(line 1163,col 73)",
            "(line 1165,col 9)-(line 1165,col 74)",
            "(line 1166,col 9)-(line 1166,col 75)",
            "(line 1167,col 9)-(line 1167,col 73)",
            "(line 1168,col 9)-(line 1168,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testSameLengthFloat()",
        "snippet": "    public void testSameLengthFloat() {\n        float[] nullArray = null;\n        float[] emptyArray = new float[0];\n        float[] oneArray = new float[] {2.5f};\n        float[] twoArray = new float[] {6.4f, 5.8f};\n        \n        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n        \n        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n        \n        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n        \n        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n    }",
        "begin_line": 1171,
        "end_line": 1196,
        "comment": "",
        "child_ranges": [
            "(line 1172,col 9)-(line 1172,col 33)",
            "(line 1173,col 9)-(line 1173,col 42)",
            "(line 1174,col 9)-(line 1174,col 46)",
            "(line 1175,col 9)-(line 1175,col 52)",
            "(line 1177,col 9)-(line 1177,col 74)",
            "(line 1178,col 9)-(line 1178,col 75)",
            "(line 1179,col 9)-(line 1179,col 74)",
            "(line 1180,col 9)-(line 1180,col 74)",
            "(line 1182,col 9)-(line 1182,col 75)",
            "(line 1183,col 9)-(line 1183,col 76)",
            "(line 1184,col 9)-(line 1184,col 75)",
            "(line 1185,col 9)-(line 1185,col 75)",
            "(line 1187,col 9)-(line 1187,col 74)",
            "(line 1188,col 9)-(line 1188,col 75)",
            "(line 1189,col 9)-(line 1189,col 72)",
            "(line 1190,col 9)-(line 1190,col 73)",
            "(line 1192,col 9)-(line 1192,col 74)",
            "(line 1193,col 9)-(line 1193,col 75)",
            "(line 1194,col 9)-(line 1194,col 73)",
            "(line 1195,col 9)-(line 1195,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testSameType()",
        "snippet": "    public void testSameType() {\n        try {\n            ArrayUtils.isSameType(null, null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            ArrayUtils.isSameType(null, new Object[0]);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            ArrayUtils.isSameType(new Object[0], null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        \n        assertEquals(true, ArrayUtils.isSameType(new Object[0], new Object[0]));\n        assertEquals(false, ArrayUtils.isSameType(new String[0], new Object[0]));\n        assertEquals(true, ArrayUtils.isSameType(new String[0][0], new String[0][0]));\n        assertEquals(false, ArrayUtils.isSameType(new String[0], new String[0][0]));\n        assertEquals(false, ArrayUtils.isSameType(new String[0][0], new String[0]));\n    }",
        "begin_line": 1199,
        "end_line": 1218,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1200,col 9)-(line 1203,col 48)",
            "(line 1204,col 9)-(line 1207,col 48)",
            "(line 1208,col 9)-(line 1211,col 48)",
            "(line 1213,col 9)-(line 1213,col 80)",
            "(line 1214,col 9)-(line 1214,col 81)",
            "(line 1215,col 9)-(line 1215,col 86)",
            "(line 1216,col 9)-(line 1216,col 84)",
            "(line 1217,col 9)-(line 1217,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testReverse()",
        "snippet": "    public void testReverse() {\n        StringBuffer str1 = new StringBuffer(\"pick\");\n        String str2 = \"a\";\n        String[] str3 = new String[] {\"stick\"};\n        String str4 = \"up\";\n        \n        Object[] array = new Object[] {str1, str2, str3};\n        ArrayUtils.reverse(array);\n        assertEquals(array[0], str3);\n        assertEquals(array[1], str2);\n        assertEquals(array[2], str1);\n        \n        array = new Object[] {str1, str2, str3, str4};\n        ArrayUtils.reverse(array);\n        assertEquals(array[0], str4);\n        assertEquals(array[1], str3);\n        assertEquals(array[2], str2);\n        assertEquals(array[3], str1);\n\n        array = null;\n        ArrayUtils.reverse(array);\n        assertEquals(null, array);\n    }",
        "begin_line": 1221,
        "end_line": 1243,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1222,col 9)-(line 1222,col 53)",
            "(line 1223,col 9)-(line 1223,col 26)",
            "(line 1224,col 9)-(line 1224,col 47)",
            "(line 1225,col 9)-(line 1225,col 27)",
            "(line 1227,col 9)-(line 1227,col 57)",
            "(line 1228,col 9)-(line 1228,col 34)",
            "(line 1229,col 9)-(line 1229,col 37)",
            "(line 1230,col 9)-(line 1230,col 37)",
            "(line 1231,col 9)-(line 1231,col 37)",
            "(line 1233,col 9)-(line 1233,col 54)",
            "(line 1234,col 9)-(line 1234,col 34)",
            "(line 1235,col 9)-(line 1235,col 37)",
            "(line 1236,col 9)-(line 1236,col 37)",
            "(line 1237,col 9)-(line 1237,col 37)",
            "(line 1238,col 9)-(line 1238,col 37)",
            "(line 1240,col 9)-(line 1240,col 21)",
            "(line 1241,col 9)-(line 1241,col 34)",
            "(line 1242,col 9)-(line 1242,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testReverseLong()",
        "snippet": "    public void testReverseLong() {\n        long[] array = new long[] {1L, 2L, 3L};\n        ArrayUtils.reverse(array);\n        assertEquals(array[0], 3L);\n        assertEquals(array[1], 2L);\n        assertEquals(array[2], 1L);\n\n        array = null;\n        ArrayUtils.reverse(array);\n        assertEquals(null, array);\n    }",
        "begin_line": 1245,
        "end_line": 1255,
        "comment": "",
        "child_ranges": [
            "(line 1246,col 9)-(line 1246,col 47)",
            "(line 1247,col 9)-(line 1247,col 34)",
            "(line 1248,col 9)-(line 1248,col 35)",
            "(line 1249,col 9)-(line 1249,col 35)",
            "(line 1250,col 9)-(line 1250,col 35)",
            "(line 1252,col 9)-(line 1252,col 21)",
            "(line 1253,col 9)-(line 1253,col 34)",
            "(line 1254,col 9)-(line 1254,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testReverseInt()",
        "snippet": "    public void testReverseInt() {\n        int[] array = new int[] {1, 2, 3};\n        ArrayUtils.reverse(array);\n        assertEquals(array[0], 3);\n        assertEquals(array[1], 2);\n        assertEquals(array[2], 1);\n\n        array = null;\n        ArrayUtils.reverse(array);\n        assertEquals(null, array);\n    }",
        "begin_line": 1257,
        "end_line": 1267,
        "comment": "",
        "child_ranges": [
            "(line 1258,col 9)-(line 1258,col 42)",
            "(line 1259,col 9)-(line 1259,col 34)",
            "(line 1260,col 9)-(line 1260,col 34)",
            "(line 1261,col 9)-(line 1261,col 34)",
            "(line 1262,col 9)-(line 1262,col 34)",
            "(line 1264,col 9)-(line 1264,col 21)",
            "(line 1265,col 9)-(line 1265,col 34)",
            "(line 1266,col 9)-(line 1266,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testReverseShort()",
        "snippet": "    public void testReverseShort() {\n        short[] array = new short[] {1, 2, 3};\n        ArrayUtils.reverse(array);\n        assertEquals(array[0], 3);\n        assertEquals(array[1], 2);\n        assertEquals(array[2], 1);\n\n        array = null;\n        ArrayUtils.reverse(array);\n        assertEquals(null, array);\n    }",
        "begin_line": 1269,
        "end_line": 1279,
        "comment": "",
        "child_ranges": [
            "(line 1270,col 9)-(line 1270,col 46)",
            "(line 1271,col 9)-(line 1271,col 34)",
            "(line 1272,col 9)-(line 1272,col 34)",
            "(line 1273,col 9)-(line 1273,col 34)",
            "(line 1274,col 9)-(line 1274,col 34)",
            "(line 1276,col 9)-(line 1276,col 21)",
            "(line 1277,col 9)-(line 1277,col 34)",
            "(line 1278,col 9)-(line 1278,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testReverseChar()",
        "snippet": "    public void testReverseChar() {\n        char[] array = new char[] {'a', 'f', 'C'};\n        ArrayUtils.reverse(array);\n        assertEquals(array[0], 'C');\n        assertEquals(array[1], 'f');\n        assertEquals(array[2], 'a');\n\n        array = null;\n        ArrayUtils.reverse(array);\n        assertEquals(null, array);\n    }",
        "begin_line": 1281,
        "end_line": 1291,
        "comment": "",
        "child_ranges": [
            "(line 1282,col 9)-(line 1282,col 50)",
            "(line 1283,col 9)-(line 1283,col 34)",
            "(line 1284,col 9)-(line 1284,col 36)",
            "(line 1285,col 9)-(line 1285,col 36)",
            "(line 1286,col 9)-(line 1286,col 36)",
            "(line 1288,col 9)-(line 1288,col 21)",
            "(line 1289,col 9)-(line 1289,col 34)",
            "(line 1290,col 9)-(line 1290,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testReverseByte()",
        "snippet": "    public void testReverseByte() {\n        byte[] array = new byte[] {2, 3, 4};\n        ArrayUtils.reverse(array);\n        assertEquals(array[0], 4);\n        assertEquals(array[1], 3);\n        assertEquals(array[2], 2);\n\n        array = null;\n        ArrayUtils.reverse(array);\n        assertEquals(null, array);\n    }",
        "begin_line": 1293,
        "end_line": 1303,
        "comment": "",
        "child_ranges": [
            "(line 1294,col 9)-(line 1294,col 44)",
            "(line 1295,col 9)-(line 1295,col 34)",
            "(line 1296,col 9)-(line 1296,col 34)",
            "(line 1297,col 9)-(line 1297,col 34)",
            "(line 1298,col 9)-(line 1298,col 34)",
            "(line 1300,col 9)-(line 1300,col 21)",
            "(line 1301,col 9)-(line 1301,col 34)",
            "(line 1302,col 9)-(line 1302,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testReverseDouble()",
        "snippet": "    public void testReverseDouble() {\n        double[] array = new double[] {0.3d, 0.4d, 0.5d};\n        ArrayUtils.reverse(array);\n        assertEquals(array[0], 0.5d, 0.0d);\n        assertEquals(array[1], 0.4d, 0.0d);\n        assertEquals(array[2], 0.3d, 0.0d);\n\n        array = null;\n        ArrayUtils.reverse(array);\n        assertEquals(null, array);\n    }",
        "begin_line": 1305,
        "end_line": 1315,
        "comment": "",
        "child_ranges": [
            "(line 1306,col 9)-(line 1306,col 57)",
            "(line 1307,col 9)-(line 1307,col 34)",
            "(line 1308,col 9)-(line 1308,col 43)",
            "(line 1309,col 9)-(line 1309,col 43)",
            "(line 1310,col 9)-(line 1310,col 43)",
            "(line 1312,col 9)-(line 1312,col 21)",
            "(line 1313,col 9)-(line 1313,col 34)",
            "(line 1314,col 9)-(line 1314,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testReverseFloat()",
        "snippet": "    public void testReverseFloat() {\n        float[] array = new float[] {0.3f, 0.4f, 0.5f};\n        ArrayUtils.reverse(array);\n        assertEquals(array[0], 0.5f, 0.0f);\n        assertEquals(array[1], 0.4f, 0.0f);\n        assertEquals(array[2], 0.3f, 0.0f);\n\n        array = null;\n        ArrayUtils.reverse(array);\n        assertEquals(null, array);\n    }",
        "begin_line": 1317,
        "end_line": 1327,
        "comment": "",
        "child_ranges": [
            "(line 1318,col 9)-(line 1318,col 55)",
            "(line 1319,col 9)-(line 1319,col 34)",
            "(line 1320,col 9)-(line 1320,col 43)",
            "(line 1321,col 9)-(line 1321,col 43)",
            "(line 1322,col 9)-(line 1322,col 43)",
            "(line 1324,col 9)-(line 1324,col 21)",
            "(line 1325,col 9)-(line 1325,col 34)",
            "(line 1326,col 9)-(line 1326,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testReverseBoolean()",
        "snippet": "    public void testReverseBoolean() {\n        boolean[] array = new boolean[] {false, false, true};\n        ArrayUtils.reverse(array);\n        assertEquals(array[0], true);\n        assertEquals(array[1], false);\n        assertEquals(array[2], false);\n\n        array = null;\n        ArrayUtils.reverse(array);\n        assertEquals(null, array);\n    }",
        "begin_line": 1329,
        "end_line": 1339,
        "comment": "",
        "child_ranges": [
            "(line 1330,col 9)-(line 1330,col 61)",
            "(line 1331,col 9)-(line 1331,col 34)",
            "(line 1332,col 9)-(line 1332,col 37)",
            "(line 1333,col 9)-(line 1333,col 38)",
            "(line 1334,col 9)-(line 1334,col 38)",
            "(line 1336,col 9)-(line 1336,col 21)",
            "(line 1337,col 9)-(line 1337,col 34)",
            "(line 1338,col 9)-(line 1338,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testIndexOf()",
        "snippet": "    public void testIndexOf() {\n        Object[] array = new Object[] { \"0\", \"1\", \"2\", \"3\", null, \"0\" };\n        assertEquals(-1, ArrayUtils.indexOf(null, null));\n        assertEquals(-1, ArrayUtils.indexOf(null, \"0\"));\n        assertEquals(-1, ArrayUtils.indexOf(new Object[0], \"0\"));\n        assertEquals(0, ArrayUtils.indexOf(array, \"0\"));\n        assertEquals(1, ArrayUtils.indexOf(array, \"1\"));\n        assertEquals(2, ArrayUtils.indexOf(array, \"2\"));\n        assertEquals(3, ArrayUtils.indexOf(array, \"3\"));\n        assertEquals(4, ArrayUtils.indexOf(array, null));\n        assertEquals(-1, ArrayUtils.indexOf(array, \"notInArray\"));\n    }",
        "begin_line": 1342,
        "end_line": 1353,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1343,col 9)-(line 1343,col 72)",
            "(line 1344,col 9)-(line 1344,col 57)",
            "(line 1345,col 9)-(line 1345,col 56)",
            "(line 1346,col 9)-(line 1346,col 65)",
            "(line 1347,col 9)-(line 1347,col 56)",
            "(line 1348,col 9)-(line 1348,col 56)",
            "(line 1349,col 9)-(line 1349,col 56)",
            "(line 1350,col 9)-(line 1350,col 56)",
            "(line 1351,col 9)-(line 1351,col 57)",
            "(line 1352,col 9)-(line 1352,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testIndexOfWithStartIndex()",
        "snippet": "    public void testIndexOfWithStartIndex() {\n        Object[] array = new Object[] { \"0\", \"1\", \"2\", \"3\", null, \"0\" };\n        assertEquals(-1, ArrayUtils.indexOf(null, null, 2));\n        assertEquals(-1, ArrayUtils.indexOf(new Object[0], \"0\", 0));\n        assertEquals(-1, ArrayUtils.indexOf(null, \"0\", 2));\n        assertEquals(5, ArrayUtils.indexOf(array, \"0\", 2));\n        assertEquals(-1, ArrayUtils.indexOf(array, \"1\", 2));\n        assertEquals(2, ArrayUtils.indexOf(array, \"2\", 2));\n        assertEquals(3, ArrayUtils.indexOf(array, \"3\", 2));\n        assertEquals(4, ArrayUtils.indexOf(array, null, 2));\n        assertEquals(-1, ArrayUtils.indexOf(array, \"notInArray\", 2));\n        \n        assertEquals(4, ArrayUtils.indexOf(array, null, -1));\n        assertEquals(-1, ArrayUtils.indexOf(array, null, 8));\n        assertEquals(-1, ArrayUtils.indexOf(array, \"0\", 8));\n    }",
        "begin_line": 1355,
        "end_line": 1370,
        "comment": "",
        "child_ranges": [
            "(line 1356,col 9)-(line 1356,col 72)",
            "(line 1357,col 9)-(line 1357,col 60)",
            "(line 1358,col 9)-(line 1358,col 68)",
            "(line 1359,col 9)-(line 1359,col 59)",
            "(line 1360,col 9)-(line 1360,col 59)",
            "(line 1361,col 9)-(line 1361,col 60)",
            "(line 1362,col 9)-(line 1362,col 59)",
            "(line 1363,col 9)-(line 1363,col 59)",
            "(line 1364,col 9)-(line 1364,col 60)",
            "(line 1365,col 9)-(line 1365,col 69)",
            "(line 1367,col 9)-(line 1367,col 61)",
            "(line 1368,col 9)-(line 1368,col 61)",
            "(line 1369,col 9)-(line 1369,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testLastIndexOf()",
        "snippet": "    public void testLastIndexOf() {\n        Object[] array = new Object[] { \"0\", \"1\", \"2\", \"3\", null, \"0\" };\n        assertEquals(-1, ArrayUtils.lastIndexOf(null, null));\n        assertEquals(-1, ArrayUtils.lastIndexOf(null, \"0\"));\n        assertEquals(5, ArrayUtils.lastIndexOf(array, \"0\"));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, \"1\"));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, \"2\"));\n        assertEquals(3, ArrayUtils.lastIndexOf(array, \"3\"));\n        assertEquals(4, ArrayUtils.lastIndexOf(array, null));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, \"notInArray\"));\n    }",
        "begin_line": 1372,
        "end_line": 1382,
        "comment": "",
        "child_ranges": [
            "(line 1373,col 9)-(line 1373,col 72)",
            "(line 1374,col 9)-(line 1374,col 61)",
            "(line 1375,col 9)-(line 1375,col 60)",
            "(line 1376,col 9)-(line 1376,col 60)",
            "(line 1377,col 9)-(line 1377,col 60)",
            "(line 1378,col 9)-(line 1378,col 60)",
            "(line 1379,col 9)-(line 1379,col 60)",
            "(line 1380,col 9)-(line 1380,col 61)",
            "(line 1381,col 9)-(line 1381,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testLastIndexOfWithStartIndex()",
        "snippet": "    public void testLastIndexOfWithStartIndex() {\n        Object[] array = new Object[] { \"0\", \"1\", \"2\", \"3\", null, \"0\" };\n        assertEquals(-1, ArrayUtils.lastIndexOf(null, null, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(null, \"0\", 2));\n        assertEquals(0, ArrayUtils.lastIndexOf(array, \"0\", 2));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, \"1\", 2));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, \"2\", 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, \"3\", 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, \"3\", -1));\n        assertEquals(4, ArrayUtils.lastIndexOf(array, null, 5));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, null, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, \"notInArray\", 5));\n        \n        assertEquals(-1, ArrayUtils.lastIndexOf(array, null, -1));\n        assertEquals(5, ArrayUtils.lastIndexOf(array, \"0\", 88));\n    }",
        "begin_line": 1384,
        "end_line": 1399,
        "comment": "",
        "child_ranges": [
            "(line 1385,col 9)-(line 1385,col 72)",
            "(line 1386,col 9)-(line 1386,col 64)",
            "(line 1387,col 9)-(line 1387,col 63)",
            "(line 1388,col 9)-(line 1388,col 63)",
            "(line 1389,col 9)-(line 1389,col 63)",
            "(line 1390,col 9)-(line 1390,col 63)",
            "(line 1391,col 9)-(line 1391,col 64)",
            "(line 1392,col 9)-(line 1392,col 65)",
            "(line 1393,col 9)-(line 1393,col 64)",
            "(line 1394,col 9)-(line 1394,col 65)",
            "(line 1395,col 9)-(line 1395,col 73)",
            "(line 1397,col 9)-(line 1397,col 66)",
            "(line 1398,col 9)-(line 1398,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testContains()",
        "snippet": "    public void testContains() {\n        Object[] array = new Object[] { \"0\", \"1\", \"2\", \"3\", null, \"0\" };\n        assertEquals(false, ArrayUtils.contains(null, null));\n        assertEquals(false, ArrayUtils.contains(null, \"1\"));\n        assertEquals(true, ArrayUtils.contains(array, \"0\"));\n        assertEquals(true, ArrayUtils.contains(array, \"1\"));\n        assertEquals(true, ArrayUtils.contains(array, \"2\"));\n        assertEquals(true, ArrayUtils.contains(array, \"3\"));\n        assertEquals(true, ArrayUtils.contains(array, null));\n        assertEquals(false, ArrayUtils.contains(array, \"notInArray\"));\n    }",
        "begin_line": 1401,
        "end_line": 1411,
        "comment": "",
        "child_ranges": [
            "(line 1402,col 9)-(line 1402,col 72)",
            "(line 1403,col 9)-(line 1403,col 61)",
            "(line 1404,col 9)-(line 1404,col 60)",
            "(line 1405,col 9)-(line 1405,col 60)",
            "(line 1406,col 9)-(line 1406,col 60)",
            "(line 1407,col 9)-(line 1407,col 60)",
            "(line 1408,col 9)-(line 1408,col 60)",
            "(line 1409,col 9)-(line 1409,col 61)",
            "(line 1410,col 9)-(line 1410,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testIndexOfLong()",
        "snippet": "    public void testIndexOfLong() {\n        long[] array = null;\n        assertEquals(-1, ArrayUtils.indexOf(array, 0));\n        array = new long[] { 0, 1, 2, 3, 0 };\n        assertEquals(0, ArrayUtils.indexOf(array, 0));\n        assertEquals(1, ArrayUtils.indexOf(array, 1));\n        assertEquals(2, ArrayUtils.indexOf(array, 2));\n        assertEquals(3, ArrayUtils.indexOf(array, 3));\n        assertEquals(-1, ArrayUtils.indexOf(array, 99));\n    }",
        "begin_line": 1414,
        "end_line": 1423,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1415,col 9)-(line 1415,col 28)",
            "(line 1416,col 9)-(line 1416,col 55)",
            "(line 1417,col 9)-(line 1417,col 45)",
            "(line 1418,col 9)-(line 1418,col 54)",
            "(line 1419,col 9)-(line 1419,col 54)",
            "(line 1420,col 9)-(line 1420,col 54)",
            "(line 1421,col 9)-(line 1421,col 54)",
            "(line 1422,col 9)-(line 1422,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testIndexOfLongWithStartIndex()",
        "snippet": "    public void testIndexOfLongWithStartIndex() {\n        long[] array = null;\n        assertEquals(-1, ArrayUtils.indexOf(array, 0, 2));\n        array = new long[] { 0, 1, 2, 3, 0 };\n        assertEquals(4, ArrayUtils.indexOf(array, 0, 2));\n        assertEquals(-1, ArrayUtils.indexOf(array, 1, 2));\n        assertEquals(2, ArrayUtils.indexOf(array, 2, 2));\n        assertEquals(3, ArrayUtils.indexOf(array, 3, 2));\n        assertEquals(3, ArrayUtils.indexOf(array, 3, -1));\n        assertEquals(-1, ArrayUtils.indexOf(array, 99, 0));\n        assertEquals(-1, ArrayUtils.indexOf(array, 0, 6));\n    }",
        "begin_line": 1425,
        "end_line": 1436,
        "comment": "",
        "child_ranges": [
            "(line 1426,col 9)-(line 1426,col 28)",
            "(line 1427,col 9)-(line 1427,col 58)",
            "(line 1428,col 9)-(line 1428,col 45)",
            "(line 1429,col 9)-(line 1429,col 57)",
            "(line 1430,col 9)-(line 1430,col 58)",
            "(line 1431,col 9)-(line 1431,col 57)",
            "(line 1432,col 9)-(line 1432,col 57)",
            "(line 1433,col 9)-(line 1433,col 58)",
            "(line 1434,col 9)-(line 1434,col 59)",
            "(line 1435,col 9)-(line 1435,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testLastIndexOfLong()",
        "snippet": "    public void testLastIndexOfLong() {\n        long[] array = null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 0));\n        array = new long[] { 0, 1, 2, 3, 0 };\n        assertEquals(4, ArrayUtils.lastIndexOf(array, 0));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, 1));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, 2));\n        assertEquals(3, ArrayUtils.lastIndexOf(array, 3));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 99));\n    }",
        "begin_line": 1438,
        "end_line": 1447,
        "comment": "",
        "child_ranges": [
            "(line 1439,col 9)-(line 1439,col 28)",
            "(line 1440,col 9)-(line 1440,col 59)",
            "(line 1441,col 9)-(line 1441,col 45)",
            "(line 1442,col 9)-(line 1442,col 58)",
            "(line 1443,col 9)-(line 1443,col 58)",
            "(line 1444,col 9)-(line 1444,col 58)",
            "(line 1445,col 9)-(line 1445,col 58)",
            "(line 1446,col 9)-(line 1446,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testLastIndexOfLongWithStartIndex()",
        "snippet": "    public void testLastIndexOfLongWithStartIndex() {\n        long[] array = null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2));\n        array = new long[] { 0, 1, 2, 3, 0 };\n        assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 99, 4));\n        assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88));\n    }",
        "begin_line": 1449,
        "end_line": 1460,
        "comment": "",
        "child_ranges": [
            "(line 1450,col 9)-(line 1450,col 28)",
            "(line 1451,col 9)-(line 1451,col 62)",
            "(line 1452,col 9)-(line 1452,col 45)",
            "(line 1453,col 9)-(line 1453,col 61)",
            "(line 1454,col 9)-(line 1454,col 61)",
            "(line 1455,col 9)-(line 1455,col 61)",
            "(line 1456,col 9)-(line 1456,col 62)",
            "(line 1457,col 9)-(line 1457,col 63)",
            "(line 1458,col 9)-(line 1458,col 63)",
            "(line 1459,col 9)-(line 1459,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testContainsLong()",
        "snippet": "    public void testContainsLong() {\n        long[] array = null;\n        assertEquals(false, ArrayUtils.contains(array, 1));\n        array = new long[] { 0, 1, 2, 3, 0 };\n        assertEquals(true, ArrayUtils.contains(array, 0));\n        assertEquals(true, ArrayUtils.contains(array, 1));\n        assertEquals(true, ArrayUtils.contains(array, 2));\n        assertEquals(true, ArrayUtils.contains(array, 3));\n        assertEquals(false, ArrayUtils.contains(array, 99));\n    }",
        "begin_line": 1462,
        "end_line": 1471,
        "comment": "",
        "child_ranges": [
            "(line 1463,col 9)-(line 1463,col 28)",
            "(line 1464,col 9)-(line 1464,col 59)",
            "(line 1465,col 9)-(line 1465,col 45)",
            "(line 1466,col 9)-(line 1466,col 58)",
            "(line 1467,col 9)-(line 1467,col 58)",
            "(line 1468,col 9)-(line 1468,col 58)",
            "(line 1469,col 9)-(line 1469,col 58)",
            "(line 1470,col 9)-(line 1470,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testIndexOfInt()",
        "snippet": "    public void testIndexOfInt() {\n        int[] array = null;\n        assertEquals(-1, ArrayUtils.indexOf(array, 0));\n        array = new int[] { 0, 1, 2, 3, 0 };\n        assertEquals(0, ArrayUtils.indexOf(array, 0));\n        assertEquals(1, ArrayUtils.indexOf(array, 1));\n        assertEquals(2, ArrayUtils.indexOf(array, 2));\n        assertEquals(3, ArrayUtils.indexOf(array, 3));\n        assertEquals(-1, ArrayUtils.indexOf(array, 99));\n    }",
        "begin_line": 1474,
        "end_line": 1483,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1475,col 9)-(line 1475,col 27)",
            "(line 1476,col 9)-(line 1476,col 55)",
            "(line 1477,col 9)-(line 1477,col 44)",
            "(line 1478,col 9)-(line 1478,col 54)",
            "(line 1479,col 9)-(line 1479,col 54)",
            "(line 1480,col 9)-(line 1480,col 54)",
            "(line 1481,col 9)-(line 1481,col 54)",
            "(line 1482,col 9)-(line 1482,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testIndexOfIntWithStartIndex()",
        "snippet": "    public void testIndexOfIntWithStartIndex() {\n        int[] array = null;\n        assertEquals(-1, ArrayUtils.indexOf(array, 0, 2));\n        array = new int[] { 0, 1, 2, 3, 0 };\n        assertEquals(4, ArrayUtils.indexOf(array, 0, 2));\n        assertEquals(-1, ArrayUtils.indexOf(array, 1, 2));\n        assertEquals(2, ArrayUtils.indexOf(array, 2, 2));\n        assertEquals(3, ArrayUtils.indexOf(array, 3, 2));\n        assertEquals(3, ArrayUtils.indexOf(array, 3, -1));\n        assertEquals(-1, ArrayUtils.indexOf(array, 99, 0));\n        assertEquals(-1, ArrayUtils.indexOf(array, 0, 6));\n    }",
        "begin_line": 1485,
        "end_line": 1496,
        "comment": "",
        "child_ranges": [
            "(line 1486,col 9)-(line 1486,col 27)",
            "(line 1487,col 9)-(line 1487,col 58)",
            "(line 1488,col 9)-(line 1488,col 44)",
            "(line 1489,col 9)-(line 1489,col 57)",
            "(line 1490,col 9)-(line 1490,col 58)",
            "(line 1491,col 9)-(line 1491,col 57)",
            "(line 1492,col 9)-(line 1492,col 57)",
            "(line 1493,col 9)-(line 1493,col 58)",
            "(line 1494,col 9)-(line 1494,col 59)",
            "(line 1495,col 9)-(line 1495,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testLastIndexOfInt()",
        "snippet": "    public void testLastIndexOfInt() {\n        int[] array = null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 0));\n        array = new int[] { 0, 1, 2, 3, 0 };\n        assertEquals(4, ArrayUtils.lastIndexOf(array, 0));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, 1));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, 2));\n        assertEquals(3, ArrayUtils.lastIndexOf(array, 3));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 99));\n    }",
        "begin_line": 1498,
        "end_line": 1507,
        "comment": "",
        "child_ranges": [
            "(line 1499,col 9)-(line 1499,col 27)",
            "(line 1500,col 9)-(line 1500,col 59)",
            "(line 1501,col 9)-(line 1501,col 44)",
            "(line 1502,col 9)-(line 1502,col 58)",
            "(line 1503,col 9)-(line 1503,col 58)",
            "(line 1504,col 9)-(line 1504,col 58)",
            "(line 1505,col 9)-(line 1505,col 58)",
            "(line 1506,col 9)-(line 1506,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testLastIndexOfIntWithStartIndex()",
        "snippet": "    public void testLastIndexOfIntWithStartIndex() {\n        int[] array = null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2));\n        array = new int[] { 0, 1, 2, 3, 0 };\n        assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 99));\n        assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88));\n    }",
        "begin_line": 1509,
        "end_line": 1520,
        "comment": "",
        "child_ranges": [
            "(line 1510,col 9)-(line 1510,col 27)",
            "(line 1511,col 9)-(line 1511,col 62)",
            "(line 1512,col 9)-(line 1512,col 44)",
            "(line 1513,col 9)-(line 1513,col 61)",
            "(line 1514,col 9)-(line 1514,col 61)",
            "(line 1515,col 9)-(line 1515,col 61)",
            "(line 1516,col 9)-(line 1516,col 62)",
            "(line 1517,col 9)-(line 1517,col 63)",
            "(line 1518,col 9)-(line 1518,col 60)",
            "(line 1519,col 9)-(line 1519,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testContainsInt()",
        "snippet": "    public void testContainsInt() {\n        int[] array = null;\n        assertEquals(false, ArrayUtils.contains(array, 1));\n        array = new int[] { 0, 1, 2, 3, 0 };\n        assertEquals(true, ArrayUtils.contains(array, 0));\n        assertEquals(true, ArrayUtils.contains(array, 1));\n        assertEquals(true, ArrayUtils.contains(array, 2));\n        assertEquals(true, ArrayUtils.contains(array, 3));\n        assertEquals(false, ArrayUtils.contains(array, 99));\n    }",
        "begin_line": 1522,
        "end_line": 1531,
        "comment": "",
        "child_ranges": [
            "(line 1523,col 9)-(line 1523,col 27)",
            "(line 1524,col 9)-(line 1524,col 59)",
            "(line 1525,col 9)-(line 1525,col 44)",
            "(line 1526,col 9)-(line 1526,col 58)",
            "(line 1527,col 9)-(line 1527,col 58)",
            "(line 1528,col 9)-(line 1528,col 58)",
            "(line 1529,col 9)-(line 1529,col 58)",
            "(line 1530,col 9)-(line 1530,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testIndexOfShort()",
        "snippet": "    public void testIndexOfShort() {\n        short[] array = null;\n        assertEquals(-1, ArrayUtils.indexOf(array, (short) 0));\n        array = new short[] { 0, 1, 2, 3, 0 };\n        assertEquals(0, ArrayUtils.indexOf(array, (short) 0));\n        assertEquals(1, ArrayUtils.indexOf(array, (short) 1));\n        assertEquals(2, ArrayUtils.indexOf(array, (short) 2));\n        assertEquals(3, ArrayUtils.indexOf(array, (short) 3));\n        assertEquals(-1, ArrayUtils.indexOf(array, (short) 99));\n    }",
        "begin_line": 1534,
        "end_line": 1543,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1535,col 9)-(line 1535,col 29)",
            "(line 1536,col 9)-(line 1536,col 63)",
            "(line 1537,col 9)-(line 1537,col 46)",
            "(line 1538,col 9)-(line 1538,col 62)",
            "(line 1539,col 9)-(line 1539,col 62)",
            "(line 1540,col 9)-(line 1540,col 62)",
            "(line 1541,col 9)-(line 1541,col 62)",
            "(line 1542,col 9)-(line 1542,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testIndexOfShortWithStartIndex()",
        "snippet": "    public void testIndexOfShortWithStartIndex() {\n        short[] array = null;\n        assertEquals(-1, ArrayUtils.indexOf(array, (short) 0, 2));\n        array = new short[] { 0, 1, 2, 3, 0 };\n        assertEquals(4, ArrayUtils.indexOf(array, (short) 0, 2));\n        assertEquals(-1, ArrayUtils.indexOf(array, (short) 1, 2));\n        assertEquals(2, ArrayUtils.indexOf(array, (short) 2, 2));\n        assertEquals(3, ArrayUtils.indexOf(array, (short) 3, 2));\n        assertEquals(3, ArrayUtils.indexOf(array, (short) 3, -1));\n        assertEquals(-1, ArrayUtils.indexOf(array, (short) 99, 0));\n        assertEquals(-1, ArrayUtils.indexOf(array, (short) 0, 6));\n    }",
        "begin_line": 1545,
        "end_line": 1556,
        "comment": "",
        "child_ranges": [
            "(line 1546,col 9)-(line 1546,col 29)",
            "(line 1547,col 9)-(line 1547,col 66)",
            "(line 1548,col 9)-(line 1548,col 46)",
            "(line 1549,col 9)-(line 1549,col 65)",
            "(line 1550,col 9)-(line 1550,col 66)",
            "(line 1551,col 9)-(line 1551,col 65)",
            "(line 1552,col 9)-(line 1552,col 65)",
            "(line 1553,col 9)-(line 1553,col 66)",
            "(line 1554,col 9)-(line 1554,col 67)",
            "(line 1555,col 9)-(line 1555,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testLastIndexOfShort()",
        "snippet": "    public void testLastIndexOfShort() {\n        short[] array = null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0));\n        array = new short[] { 0, 1, 2, 3, 0 };\n        assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2));\n        assertEquals(3, ArrayUtils.lastIndexOf(array, (short) 3));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99));\n    }",
        "begin_line": 1558,
        "end_line": 1567,
        "comment": "",
        "child_ranges": [
            "(line 1559,col 9)-(line 1559,col 29)",
            "(line 1560,col 9)-(line 1560,col 67)",
            "(line 1561,col 9)-(line 1561,col 46)",
            "(line 1562,col 9)-(line 1562,col 66)",
            "(line 1563,col 9)-(line 1563,col 66)",
            "(line 1564,col 9)-(line 1564,col 66)",
            "(line 1565,col 9)-(line 1565,col 66)",
            "(line 1566,col 9)-(line 1566,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testLastIndexOfShortWithStartIndex()",
        "snippet": "    public void testLastIndexOfShortWithStartIndex() {\n        short[] array = null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0, 2));\n        array = new short[] { 0, 1, 2, 3, 0 };\n        assertEquals(0, ArrayUtils.lastIndexOf(array, (short) 0, 2));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1, 2));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, -1));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99));\n        assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0, 88));\n    }",
        "begin_line": 1569,
        "end_line": 1580,
        "comment": "",
        "child_ranges": [
            "(line 1570,col 9)-(line 1570,col 29)",
            "(line 1571,col 9)-(line 1571,col 70)",
            "(line 1572,col 9)-(line 1572,col 46)",
            "(line 1573,col 9)-(line 1573,col 69)",
            "(line 1574,col 9)-(line 1574,col 69)",
            "(line 1575,col 9)-(line 1575,col 69)",
            "(line 1576,col 9)-(line 1576,col 70)",
            "(line 1577,col 9)-(line 1577,col 71)",
            "(line 1578,col 9)-(line 1578,col 68)",
            "(line 1579,col 9)-(line 1579,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testContainsShort()",
        "snippet": "    public void testContainsShort() {\n        short[] array = null;\n        assertEquals(false, ArrayUtils.contains(array, (short) 1));\n        array = new short[] { 0, 1, 2, 3, 0 };\n        assertEquals(true, ArrayUtils.contains(array, (short) 0));\n        assertEquals(true, ArrayUtils.contains(array, (short) 1));\n        assertEquals(true, ArrayUtils.contains(array, (short) 2));\n        assertEquals(true, ArrayUtils.contains(array, (short) 3));\n        assertEquals(false, ArrayUtils.contains(array, (short) 99));\n    }",
        "begin_line": 1582,
        "end_line": 1591,
        "comment": "",
        "child_ranges": [
            "(line 1583,col 9)-(line 1583,col 29)",
            "(line 1584,col 9)-(line 1584,col 67)",
            "(line 1585,col 9)-(line 1585,col 46)",
            "(line 1586,col 9)-(line 1586,col 66)",
            "(line 1587,col 9)-(line 1587,col 66)",
            "(line 1588,col 9)-(line 1588,col 66)",
            "(line 1589,col 9)-(line 1589,col 66)",
            "(line 1590,col 9)-(line 1590,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testIndexOfChar()",
        "snippet": "    public void testIndexOfChar() {\n        char[] array = null;\n        assertEquals(-1, ArrayUtils.indexOf(array, 'a'));\n        array = new char[] { 'a', 'b', 'c', 'd', 'a' };\n        assertEquals(0, ArrayUtils.indexOf(array, 'a'));\n        assertEquals(1, ArrayUtils.indexOf(array, 'b'));\n        assertEquals(2, ArrayUtils.indexOf(array, 'c'));\n        assertEquals(3, ArrayUtils.indexOf(array, 'd'));\n        assertEquals(-1, ArrayUtils.indexOf(array, 'e'));\n    }",
        "begin_line": 1594,
        "end_line": 1603,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1595,col 9)-(line 1595,col 28)",
            "(line 1596,col 9)-(line 1596,col 57)",
            "(line 1597,col 9)-(line 1597,col 55)",
            "(line 1598,col 9)-(line 1598,col 56)",
            "(line 1599,col 9)-(line 1599,col 56)",
            "(line 1600,col 9)-(line 1600,col 56)",
            "(line 1601,col 9)-(line 1601,col 56)",
            "(line 1602,col 9)-(line 1602,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testIndexOfCharWithStartIndex()",
        "snippet": "    public void testIndexOfCharWithStartIndex() {\n        char[] array = null;\n        assertEquals(-1, ArrayUtils.indexOf(array, 'a', 2));\n        array = new char[] { 'a', 'b', 'c', 'd', 'a' };\n        assertEquals(4, ArrayUtils.indexOf(array, 'a', 2));\n        assertEquals(-1, ArrayUtils.indexOf(array, 'b', 2));\n        assertEquals(2, ArrayUtils.indexOf(array, 'c', 2));\n        assertEquals(3, ArrayUtils.indexOf(array, 'd', 2));\n        assertEquals(3, ArrayUtils.indexOf(array, 'd', -1));\n        assertEquals(-1, ArrayUtils.indexOf(array, 'e', 0));\n        assertEquals(-1, ArrayUtils.indexOf(array, 'a', 6));\n    }",
        "begin_line": 1605,
        "end_line": 1616,
        "comment": "",
        "child_ranges": [
            "(line 1606,col 9)-(line 1606,col 28)",
            "(line 1607,col 9)-(line 1607,col 60)",
            "(line 1608,col 9)-(line 1608,col 55)",
            "(line 1609,col 9)-(line 1609,col 59)",
            "(line 1610,col 9)-(line 1610,col 60)",
            "(line 1611,col 9)-(line 1611,col 59)",
            "(line 1612,col 9)-(line 1612,col 59)",
            "(line 1613,col 9)-(line 1613,col 60)",
            "(line 1614,col 9)-(line 1614,col 60)",
            "(line 1615,col 9)-(line 1615,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testLastIndexOfChar()",
        "snippet": "    public void testLastIndexOfChar() {\n        char[] array = null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 'a'));\n        array = new char[] { 'a', 'b', 'c', 'd', 'a' };\n        assertEquals(4, ArrayUtils.lastIndexOf(array, 'a'));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, 'b'));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, 'c'));\n        assertEquals(3, ArrayUtils.lastIndexOf(array, 'd'));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 'e'));\n    }",
        "begin_line": 1618,
        "end_line": 1627,
        "comment": "",
        "child_ranges": [
            "(line 1619,col 9)-(line 1619,col 28)",
            "(line 1620,col 9)-(line 1620,col 61)",
            "(line 1621,col 9)-(line 1621,col 55)",
            "(line 1622,col 9)-(line 1622,col 60)",
            "(line 1623,col 9)-(line 1623,col 60)",
            "(line 1624,col 9)-(line 1624,col 60)",
            "(line 1625,col 9)-(line 1625,col 60)",
            "(line 1626,col 9)-(line 1626,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testLastIndexOfCharWithStartIndex()",
        "snippet": "    public void testLastIndexOfCharWithStartIndex() {\n        char[] array = null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 'a', 2));\n        array = new char[] { 'a', 'b', 'c', 'd', 'a' };\n        assertEquals(0, ArrayUtils.lastIndexOf(array, 'a', 2));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, 'b', 2));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, 'c', 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 'd', 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 'd', -1));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 'e'));\n        assertEquals(4, ArrayUtils.lastIndexOf(array, 'a', 88));\n    }",
        "begin_line": 1629,
        "end_line": 1640,
        "comment": "",
        "child_ranges": [
            "(line 1630,col 9)-(line 1630,col 28)",
            "(line 1631,col 9)-(line 1631,col 64)",
            "(line 1632,col 9)-(line 1632,col 55)",
            "(line 1633,col 9)-(line 1633,col 63)",
            "(line 1634,col 9)-(line 1634,col 63)",
            "(line 1635,col 9)-(line 1635,col 63)",
            "(line 1636,col 9)-(line 1636,col 64)",
            "(line 1637,col 9)-(line 1637,col 65)",
            "(line 1638,col 9)-(line 1638,col 61)",
            "(line 1639,col 9)-(line 1639,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testContainsChar()",
        "snippet": "    public void testContainsChar() {\n        char[] array = null;\n        assertEquals(false, ArrayUtils.contains(array, 'b'));\n        array = new char[] { 'a', 'b', 'c', 'd', 'a' };\n        assertEquals(true, ArrayUtils.contains(array, 'a'));\n        assertEquals(true, ArrayUtils.contains(array, 'b'));\n        assertEquals(true, ArrayUtils.contains(array, 'c'));\n        assertEquals(true, ArrayUtils.contains(array, 'd'));\n        assertEquals(false, ArrayUtils.contains(array, 'e'));\n    }",
        "begin_line": 1642,
        "end_line": 1651,
        "comment": "",
        "child_ranges": [
            "(line 1643,col 9)-(line 1643,col 28)",
            "(line 1644,col 9)-(line 1644,col 61)",
            "(line 1645,col 9)-(line 1645,col 55)",
            "(line 1646,col 9)-(line 1646,col 60)",
            "(line 1647,col 9)-(line 1647,col 60)",
            "(line 1648,col 9)-(line 1648,col 60)",
            "(line 1649,col 9)-(line 1649,col 60)",
            "(line 1650,col 9)-(line 1650,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testIndexOfByte()",
        "snippet": "    public void testIndexOfByte() {\n        byte[] array = null;\n        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0));\n        array = new byte[] { 0, 1, 2, 3, 0 };\n        assertEquals(0, ArrayUtils.indexOf(array, (byte) 0));\n        assertEquals(1, ArrayUtils.indexOf(array, (byte) 1));\n        assertEquals(2, ArrayUtils.indexOf(array, (byte) 2));\n        assertEquals(3, ArrayUtils.indexOf(array, (byte) 3));\n        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 99));\n    }",
        "begin_line": 1654,
        "end_line": 1663,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1655,col 9)-(line 1655,col 28)",
            "(line 1656,col 9)-(line 1656,col 62)",
            "(line 1657,col 9)-(line 1657,col 45)",
            "(line 1658,col 9)-(line 1658,col 61)",
            "(line 1659,col 9)-(line 1659,col 61)",
            "(line 1660,col 9)-(line 1660,col 61)",
            "(line 1661,col 9)-(line 1661,col 61)",
            "(line 1662,col 9)-(line 1662,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testIndexOfByteWithStartIndex()",
        "snippet": "    public void testIndexOfByteWithStartIndex() {\n        byte[] array = null;\n        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0, 2));\n        array = new byte[] { 0, 1, 2, 3, 0 };\n        assertEquals(4, ArrayUtils.indexOf(array, (byte) 0, 2));\n        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 1, 2));\n        assertEquals(2, ArrayUtils.indexOf(array, (byte) 2, 2));\n        assertEquals(3, ArrayUtils.indexOf(array, (byte) 3, 2));\n        assertEquals(3, ArrayUtils.indexOf(array, (byte) 3, -1));\n        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 99, 0));\n        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0, 6));\n    }",
        "begin_line": 1665,
        "end_line": 1676,
        "comment": "",
        "child_ranges": [
            "(line 1666,col 9)-(line 1666,col 28)",
            "(line 1667,col 9)-(line 1667,col 65)",
            "(line 1668,col 9)-(line 1668,col 45)",
            "(line 1669,col 9)-(line 1669,col 64)",
            "(line 1670,col 9)-(line 1670,col 65)",
            "(line 1671,col 9)-(line 1671,col 64)",
            "(line 1672,col 9)-(line 1672,col 64)",
            "(line 1673,col 9)-(line 1673,col 65)",
            "(line 1674,col 9)-(line 1674,col 66)",
            "(line 1675,col 9)-(line 1675,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testLastIndexOfByte()",
        "snippet": "    public void testLastIndexOfByte() {\n        byte[] array = null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0));\n        array = new byte[] { 0, 1, 2, 3, 0 };\n        assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2));\n        assertEquals(3, ArrayUtils.lastIndexOf(array, (byte) 3));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99));\n    }",
        "begin_line": 1678,
        "end_line": 1687,
        "comment": "",
        "child_ranges": [
            "(line 1679,col 9)-(line 1679,col 28)",
            "(line 1680,col 9)-(line 1680,col 66)",
            "(line 1681,col 9)-(line 1681,col 45)",
            "(line 1682,col 9)-(line 1682,col 65)",
            "(line 1683,col 9)-(line 1683,col 65)",
            "(line 1684,col 9)-(line 1684,col 65)",
            "(line 1685,col 9)-(line 1685,col 65)",
            "(line 1686,col 9)-(line 1686,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testLastIndexOfByteWithStartIndex()",
        "snippet": "    public void testLastIndexOfByteWithStartIndex() {\n        byte[] array = null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0, 2));\n        array = new byte[] { 0, 1, 2, 3, 0 };\n        assertEquals(0, ArrayUtils.lastIndexOf(array, (byte) 0, 2));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1, 2));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, -1));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99));\n        assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0, 88));\n    }",
        "begin_line": 1689,
        "end_line": 1700,
        "comment": "",
        "child_ranges": [
            "(line 1690,col 9)-(line 1690,col 28)",
            "(line 1691,col 9)-(line 1691,col 69)",
            "(line 1692,col 9)-(line 1692,col 45)",
            "(line 1693,col 9)-(line 1693,col 68)",
            "(line 1694,col 9)-(line 1694,col 68)",
            "(line 1695,col 9)-(line 1695,col 68)",
            "(line 1696,col 9)-(line 1696,col 69)",
            "(line 1697,col 9)-(line 1697,col 70)",
            "(line 1698,col 9)-(line 1698,col 67)",
            "(line 1699,col 9)-(line 1699,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testContainsByte()",
        "snippet": "    public void testContainsByte() {\n        byte[] array = null;\n        assertEquals(false, ArrayUtils.contains(array, (byte) 1));\n        array = new byte[] { 0, 1, 2, 3, 0 };\n        assertEquals(true, ArrayUtils.contains(array, (byte) 0));\n        assertEquals(true, ArrayUtils.contains(array, (byte) 1));\n        assertEquals(true, ArrayUtils.contains(array, (byte) 2));\n        assertEquals(true, ArrayUtils.contains(array, (byte) 3));\n        assertEquals(false, ArrayUtils.contains(array, (byte) 99));\n    }",
        "begin_line": 1702,
        "end_line": 1711,
        "comment": "",
        "child_ranges": [
            "(line 1703,col 9)-(line 1703,col 28)",
            "(line 1704,col 9)-(line 1704,col 66)",
            "(line 1705,col 9)-(line 1705,col 45)",
            "(line 1706,col 9)-(line 1706,col 65)",
            "(line 1707,col 9)-(line 1707,col 65)",
            "(line 1708,col 9)-(line 1708,col 65)",
            "(line 1709,col 9)-(line 1709,col 65)",
            "(line 1710,col 9)-(line 1710,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testIndexOfDouble()",
        "snippet": "    public void testIndexOfDouble() {\n        double[] array = null;\n        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0));\n        array = new double[0];\n        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0));\n        array = new double[] { 0, 1, 2, 3, 0 };\n        assertEquals(0, ArrayUtils.indexOf(array, (double) 0));\n        assertEquals(1, ArrayUtils.indexOf(array, (double) 1));\n        assertEquals(2, ArrayUtils.indexOf(array, (double) 2));\n        assertEquals(3, ArrayUtils.indexOf(array, (double) 3));\n        assertEquals(3, ArrayUtils.indexOf(array, (double) 3, -1));\n        assertEquals(-1, ArrayUtils.indexOf(array, (double) 99));\n    }",
        "begin_line": 1714,
        "end_line": 1726,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1715,col 9)-(line 1715,col 30)",
            "(line 1716,col 9)-(line 1716,col 64)",
            "(line 1717,col 9)-(line 1717,col 30)",
            "(line 1718,col 9)-(line 1718,col 64)",
            "(line 1719,col 9)-(line 1719,col 47)",
            "(line 1720,col 9)-(line 1720,col 63)",
            "(line 1721,col 9)-(line 1721,col 63)",
            "(line 1722,col 9)-(line 1722,col 63)",
            "(line 1723,col 9)-(line 1723,col 63)",
            "(line 1724,col 9)-(line 1724,col 67)",
            "(line 1725,col 9)-(line 1725,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testIndexOfDoubleTolerance()",
        "snippet": "    public void testIndexOfDoubleTolerance() {\n        double[] array = null;\n        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0));\n        array = new double[0];\n        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0));\n        array = new double[] { 0, 1, 2, 3, 0 };\n        assertEquals(0, ArrayUtils.indexOf(array, (double) 0, (double) 0.3));\n        assertEquals(2, ArrayUtils.indexOf(array, (double) 2.2, (double) 0.35));\n        assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, (double) 2.0));\n        assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, (double) 0.0001));\n    }",
        "begin_line": 1728,
        "end_line": 1738,
        "comment": "",
        "child_ranges": [
            "(line 1729,col 9)-(line 1729,col 30)",
            "(line 1730,col 9)-(line 1730,col 76)",
            "(line 1731,col 9)-(line 1731,col 30)",
            "(line 1732,col 9)-(line 1732,col 76)",
            "(line 1733,col 9)-(line 1733,col 47)",
            "(line 1734,col 9)-(line 1734,col 77)",
            "(line 1735,col 9)-(line 1735,col 80)",
            "(line 1736,col 9)-(line 1736,col 80)",
            "(line 1737,col 9)-(line 1737,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testIndexOfDoubleWithStartIndex()",
        "snippet": "    public void testIndexOfDoubleWithStartIndex() {\n        double[] array = null;\n        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2));\n        array = new double[0];\n        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2));\n        array = new double[] { 0, 1, 2, 3, 0 };\n        assertEquals(4, ArrayUtils.indexOf(array, (double) 0, 2));\n        assertEquals(-1, ArrayUtils.indexOf(array, (double) 1, 2));\n        assertEquals(2, ArrayUtils.indexOf(array, (double) 2, 2));\n        assertEquals(3, ArrayUtils.indexOf(array, (double) 3, 2));\n        assertEquals(-1, ArrayUtils.indexOf(array, (double) 99, 0));\n        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 6));\n    }",
        "begin_line": 1740,
        "end_line": 1752,
        "comment": "",
        "child_ranges": [
            "(line 1741,col 9)-(line 1741,col 30)",
            "(line 1742,col 9)-(line 1742,col 67)",
            "(line 1743,col 9)-(line 1743,col 30)",
            "(line 1744,col 9)-(line 1744,col 67)",
            "(line 1745,col 9)-(line 1745,col 47)",
            "(line 1746,col 9)-(line 1746,col 66)",
            "(line 1747,col 9)-(line 1747,col 67)",
            "(line 1748,col 9)-(line 1748,col 66)",
            "(line 1749,col 9)-(line 1749,col 66)",
            "(line 1750,col 9)-(line 1750,col 68)",
            "(line 1751,col 9)-(line 1751,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testIndexOfDoubleWithStartIndexTolerance()",
        "snippet": "    public void testIndexOfDoubleWithStartIndexTolerance() {\n        double[] array = null;\n        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0));\n        array = new double[0];\n        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0));\n        array = new double[] { 0, 1, 2, 3, 0 };\n        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 99, (double) 0.3));\n        assertEquals(0, ArrayUtils.indexOf(array, (double) 0, 0, (double) 0.3));\n        assertEquals(4, ArrayUtils.indexOf(array, (double) 0, 3, (double) 0.3));\n        assertEquals(2, ArrayUtils.indexOf(array, (double) 2.2, 0, (double) 0.35));\n        assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, 0, (double) 2.0));\n        assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, 0, (double) 0.0001));\n        assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, -1, (double) 2.0));\n        assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, -300, (double) 0.0001));\n    }",
        "begin_line": 1754,
        "end_line": 1768,
        "comment": "",
        "child_ranges": [
            "(line 1755,col 9)-(line 1755,col 30)",
            "(line 1756,col 9)-(line 1756,col 79)",
            "(line 1757,col 9)-(line 1757,col 30)",
            "(line 1758,col 9)-(line 1758,col 79)",
            "(line 1759,col 9)-(line 1759,col 47)",
            "(line 1760,col 9)-(line 1760,col 82)",
            "(line 1761,col 9)-(line 1761,col 80)",
            "(line 1762,col 9)-(line 1762,col 80)",
            "(line 1763,col 9)-(line 1763,col 83)",
            "(line 1764,col 9)-(line 1764,col 83)",
            "(line 1765,col 9)-(line 1765,col 92)",
            "(line 1766,col 9)-(line 1766,col 84)",
            "(line 1767,col 9)-(line 1767,col 95)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testLastIndexOfDouble()",
        "snippet": "    public void testLastIndexOfDouble() {\n        double[] array = null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0));\n        array = new double[0];\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0));\n        array = new double[] { 0, 1, 2, 3, 0 };\n        assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2));\n        assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 3));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 99));\n    }",
        "begin_line": 1770,
        "end_line": 1781,
        "comment": "",
        "child_ranges": [
            "(line 1771,col 9)-(line 1771,col 30)",
            "(line 1772,col 9)-(line 1772,col 68)",
            "(line 1773,col 9)-(line 1773,col 30)",
            "(line 1774,col 9)-(line 1774,col 68)",
            "(line 1775,col 9)-(line 1775,col 47)",
            "(line 1776,col 9)-(line 1776,col 67)",
            "(line 1777,col 9)-(line 1777,col 67)",
            "(line 1778,col 9)-(line 1778,col 67)",
            "(line 1779,col 9)-(line 1779,col 67)",
            "(line 1780,col 9)-(line 1780,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testLastIndexOfDoubleTolerance()",
        "snippet": "    public void testLastIndexOfDoubleTolerance() {\n        double[] array = null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0));\n        array = new double[0];\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0));\n        array = new double[] { 0, 1, 2, 3, 0 };\n        assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0.3));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2.2, (double) 0.35));\n        assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 4.15, (double) 2.0));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1.00001324, (double) 0.0001));\n    }",
        "begin_line": 1783,
        "end_line": 1793,
        "comment": "",
        "child_ranges": [
            "(line 1784,col 9)-(line 1784,col 30)",
            "(line 1785,col 9)-(line 1785,col 80)",
            "(line 1786,col 9)-(line 1786,col 30)",
            "(line 1787,col 9)-(line 1787,col 80)",
            "(line 1788,col 9)-(line 1788,col 47)",
            "(line 1789,col 9)-(line 1789,col 81)",
            "(line 1790,col 9)-(line 1790,col 84)",
            "(line 1791,col 9)-(line 1791,col 84)",
            "(line 1792,col 9)-(line 1792,col 93)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testLastIndexOfDoubleWithStartIndex()",
        "snippet": "    public void testLastIndexOfDoubleWithStartIndex() {\n        double[] array = null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2));\n        array = new double[0];\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2));\n        array = new double[] { 0, 1, 2, 3, 0 };\n        assertEquals(0, ArrayUtils.lastIndexOf(array, (double) 0, 2));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1, 2));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 3, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 3, -1));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 99));\n        assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 88));\n    }",
        "begin_line": 1795,
        "end_line": 1808,
        "comment": "",
        "child_ranges": [
            "(line 1796,col 9)-(line 1796,col 30)",
            "(line 1797,col 9)-(line 1797,col 71)",
            "(line 1798,col 9)-(line 1798,col 30)",
            "(line 1799,col 9)-(line 1799,col 71)",
            "(line 1800,col 9)-(line 1800,col 47)",
            "(line 1801,col 9)-(line 1801,col 70)",
            "(line 1802,col 9)-(line 1802,col 70)",
            "(line 1803,col 9)-(line 1803,col 70)",
            "(line 1804,col 9)-(line 1804,col 71)",
            "(line 1805,col 9)-(line 1805,col 72)",
            "(line 1806,col 9)-(line 1806,col 69)",
            "(line 1807,col 9)-(line 1807,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testLastIndexOfDoubleWithStartIndexTolerance()",
        "snippet": "    public void testLastIndexOfDoubleWithStartIndexTolerance() {\n        double[] array = null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0));\n        array = new double[0];\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0));\n        array = new double[] { (double) 3 };\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 1, 0, (double) 0));\n        array = new double[] { 0, 1, 2, 3, 0 };\n        assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 99, (double) 0.3));\n        assertEquals(0, ArrayUtils.lastIndexOf(array, (double) 0, 3, (double) 0.3));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2.2, 3, (double) 0.35));\n        assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 4.15, array.length, (double) 2.0));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1.00001324, array.length, (double) 0.0001));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 4.15, -200, (double) 2.0));\n    }",
        "begin_line": 1810,
        "end_line": 1824,
        "comment": "",
        "child_ranges": [
            "(line 1811,col 9)-(line 1811,col 30)",
            "(line 1812,col 9)-(line 1812,col 83)",
            "(line 1813,col 9)-(line 1813,col 30)",
            "(line 1814,col 9)-(line 1814,col 83)",
            "(line 1815,col 9)-(line 1815,col 44)",
            "(line 1816,col 9)-(line 1816,col 83)",
            "(line 1817,col 9)-(line 1817,col 47)",
            "(line 1818,col 9)-(line 1818,col 85)",
            "(line 1819,col 9)-(line 1819,col 84)",
            "(line 1820,col 9)-(line 1820,col 87)",
            "(line 1821,col 9)-(line 1821,col 98)",
            "(line 1822,col 9)-(line 1822,col 107)",
            "(line 1823,col 9)-(line 1823,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testContainsDouble()",
        "snippet": "    public void testContainsDouble() {\n        double[] array = null;\n        assertEquals(false, ArrayUtils.contains(array, (double) 1));\n        array = new double[] { 0, 1, 2, 3, 0 };\n        assertEquals(true, ArrayUtils.contains(array, (double) 0));\n        assertEquals(true, ArrayUtils.contains(array, (double) 1));\n        assertEquals(true, ArrayUtils.contains(array, (double) 2));\n        assertEquals(true, ArrayUtils.contains(array, (double) 3));\n        assertEquals(false, ArrayUtils.contains(array, (double) 99));\n    }",
        "begin_line": 1826,
        "end_line": 1835,
        "comment": "",
        "child_ranges": [
            "(line 1827,col 9)-(line 1827,col 30)",
            "(line 1828,col 9)-(line 1828,col 68)",
            "(line 1829,col 9)-(line 1829,col 47)",
            "(line 1830,col 9)-(line 1830,col 67)",
            "(line 1831,col 9)-(line 1831,col 67)",
            "(line 1832,col 9)-(line 1832,col 67)",
            "(line 1833,col 9)-(line 1833,col 67)",
            "(line 1834,col 9)-(line 1834,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testContainsDoubleTolerance()",
        "snippet": "    public void testContainsDoubleTolerance() {\n        double[] array = null;\n        assertEquals(false, ArrayUtils.contains(array, (double) 1, (double) 0));\n        array = new double[] { 0, 1, 2, 3, 0 };\n        assertEquals(false, ArrayUtils.contains(array, (double) 4.0, (double) 0.33));\n        assertEquals(false, ArrayUtils.contains(array, (double) 2.5, (double) 0.49));\n        assertEquals(true, ArrayUtils.contains(array, (double) 2.5, (double) 0.50));\n        assertEquals(true, ArrayUtils.contains(array, (double) 2.5, (double) 0.51));\n    }",
        "begin_line": 1837,
        "end_line": 1845,
        "comment": "",
        "child_ranges": [
            "(line 1838,col 9)-(line 1838,col 30)",
            "(line 1839,col 9)-(line 1839,col 80)",
            "(line 1840,col 9)-(line 1840,col 47)",
            "(line 1841,col 9)-(line 1841,col 85)",
            "(line 1842,col 9)-(line 1842,col 85)",
            "(line 1843,col 9)-(line 1843,col 84)",
            "(line 1844,col 9)-(line 1844,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testIndexOfFloat()",
        "snippet": "    public void testIndexOfFloat() {\n        float[] array = null;\n        assertEquals(-1, ArrayUtils.indexOf(array, (float) 0));\n        array = new float[0];\n        assertEquals(-1, ArrayUtils.indexOf(array, (float) 0));\n        array = new float[] { 0, 1, 2, 3, 0 };\n        assertEquals(0, ArrayUtils.indexOf(array, (float) 0));\n        assertEquals(1, ArrayUtils.indexOf(array, (float) 1));\n        assertEquals(2, ArrayUtils.indexOf(array, (float) 2));\n        assertEquals(3, ArrayUtils.indexOf(array, (float) 3));\n        assertEquals(-1, ArrayUtils.indexOf(array, (float) 99));\n    }",
        "begin_line": 1848,
        "end_line": 1859,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1849,col 9)-(line 1849,col 29)",
            "(line 1850,col 9)-(line 1850,col 63)",
            "(line 1851,col 9)-(line 1851,col 29)",
            "(line 1852,col 9)-(line 1852,col 63)",
            "(line 1853,col 9)-(line 1853,col 46)",
            "(line 1854,col 9)-(line 1854,col 62)",
            "(line 1855,col 9)-(line 1855,col 62)",
            "(line 1856,col 9)-(line 1856,col 62)",
            "(line 1857,col 9)-(line 1857,col 62)",
            "(line 1858,col 9)-(line 1858,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testIndexOfFloatWithStartIndex()",
        "snippet": "    public void testIndexOfFloatWithStartIndex() {\n        float[] array = null;\n        assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 2));\n        array = new float[0];\n        assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 2));\n        array = new float[] { 0, 1, 2, 3, 0 };\n        assertEquals(4, ArrayUtils.indexOf(array, (float) 0, 2));\n        assertEquals(-1, ArrayUtils.indexOf(array, (float) 1, 2));\n        assertEquals(2, ArrayUtils.indexOf(array, (float) 2, 2));\n        assertEquals(3, ArrayUtils.indexOf(array, (float) 3, 2));\n        assertEquals(3, ArrayUtils.indexOf(array, (float) 3, -1));\n        assertEquals(-1, ArrayUtils.indexOf(array, (float) 99, 0));\n        assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 6));\n    }",
        "begin_line": 1861,
        "end_line": 1874,
        "comment": "",
        "child_ranges": [
            "(line 1862,col 9)-(line 1862,col 29)",
            "(line 1863,col 9)-(line 1863,col 66)",
            "(line 1864,col 9)-(line 1864,col 29)",
            "(line 1865,col 9)-(line 1865,col 66)",
            "(line 1866,col 9)-(line 1866,col 46)",
            "(line 1867,col 9)-(line 1867,col 65)",
            "(line 1868,col 9)-(line 1868,col 66)",
            "(line 1869,col 9)-(line 1869,col 65)",
            "(line 1870,col 9)-(line 1870,col 65)",
            "(line 1871,col 9)-(line 1871,col 66)",
            "(line 1872,col 9)-(line 1872,col 67)",
            "(line 1873,col 9)-(line 1873,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testLastIndexOfFloat()",
        "snippet": "    public void testLastIndexOfFloat() {\n        float[] array = null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0));\n        array = new float[0];\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0));\n        array = new float[] { 0, 1, 2, 3, 0 };\n        assertEquals(4, ArrayUtils.lastIndexOf(array, (float) 0));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, (float) 1));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, (float) 2));\n        assertEquals(3, ArrayUtils.lastIndexOf(array, (float) 3));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 99));\n    }",
        "begin_line": 1876,
        "end_line": 1887,
        "comment": "",
        "child_ranges": [
            "(line 1877,col 9)-(line 1877,col 29)",
            "(line 1878,col 9)-(line 1878,col 67)",
            "(line 1879,col 9)-(line 1879,col 29)",
            "(line 1880,col 9)-(line 1880,col 67)",
            "(line 1881,col 9)-(line 1881,col 46)",
            "(line 1882,col 9)-(line 1882,col 66)",
            "(line 1883,col 9)-(line 1883,col 66)",
            "(line 1884,col 9)-(line 1884,col 66)",
            "(line 1885,col 9)-(line 1885,col 66)",
            "(line 1886,col 9)-(line 1886,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testLastIndexOfFloatWithStartIndex()",
        "snippet": "    public void testLastIndexOfFloatWithStartIndex() {\n        float[] array = null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0, 2));\n        array = new float[0];\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0, 2));\n        array = new float[] { 0, 1, 2, 3, 0 };\n        assertEquals(0, ArrayUtils.lastIndexOf(array, (float) 0, 2));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, (float) 1, 2));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, (float) 2, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 3, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 3, -1));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 99));\n        assertEquals(4, ArrayUtils.lastIndexOf(array, (float) 0, 88));\n    }",
        "begin_line": 1889,
        "end_line": 1902,
        "comment": "",
        "child_ranges": [
            "(line 1890,col 9)-(line 1890,col 29)",
            "(line 1891,col 9)-(line 1891,col 70)",
            "(line 1892,col 9)-(line 1892,col 29)",
            "(line 1893,col 9)-(line 1893,col 70)",
            "(line 1894,col 9)-(line 1894,col 46)",
            "(line 1895,col 9)-(line 1895,col 69)",
            "(line 1896,col 9)-(line 1896,col 69)",
            "(line 1897,col 9)-(line 1897,col 69)",
            "(line 1898,col 9)-(line 1898,col 70)",
            "(line 1899,col 9)-(line 1899,col 71)",
            "(line 1900,col 9)-(line 1900,col 68)",
            "(line 1901,col 9)-(line 1901,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testContainsFloat()",
        "snippet": "    public void testContainsFloat() {\n        float[] array = null;\n        assertEquals(false, ArrayUtils.contains(array, (float) 1));\n        array = new float[] { 0, 1, 2, 3, 0 };\n        assertEquals(true, ArrayUtils.contains(array, (float) 0));\n        assertEquals(true, ArrayUtils.contains(array, (float) 1));\n        assertEquals(true, ArrayUtils.contains(array, (float) 2));\n        assertEquals(true, ArrayUtils.contains(array, (float) 3));\n        assertEquals(false, ArrayUtils.contains(array, (float) 99));\n    }",
        "begin_line": 1904,
        "end_line": 1913,
        "comment": "",
        "child_ranges": [
            "(line 1905,col 9)-(line 1905,col 29)",
            "(line 1906,col 9)-(line 1906,col 67)",
            "(line 1907,col 9)-(line 1907,col 46)",
            "(line 1908,col 9)-(line 1908,col 66)",
            "(line 1909,col 9)-(line 1909,col 66)",
            "(line 1910,col 9)-(line 1910,col 66)",
            "(line 1911,col 9)-(line 1911,col 66)",
            "(line 1912,col 9)-(line 1912,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testIndexOfBoolean()",
        "snippet": "    public void testIndexOfBoolean() {\n        boolean[] array = null;\n        assertEquals(-1, ArrayUtils.indexOf(array, true));\n        array = new boolean[0];\n        assertEquals(-1, ArrayUtils.indexOf(array, true));\n        array = new boolean[] { true, false, true };\n        assertEquals(0, ArrayUtils.indexOf(array, true));\n        assertEquals(1, ArrayUtils.indexOf(array, false));\n        array = new boolean[] { true, true };\n        assertEquals(-1, ArrayUtils.indexOf(array, false));\n    }",
        "begin_line": 1916,
        "end_line": 1926,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1917,col 9)-(line 1917,col 31)",
            "(line 1918,col 9)-(line 1918,col 58)",
            "(line 1919,col 9)-(line 1919,col 31)",
            "(line 1920,col 9)-(line 1920,col 58)",
            "(line 1921,col 9)-(line 1921,col 52)",
            "(line 1922,col 9)-(line 1922,col 57)",
            "(line 1923,col 9)-(line 1923,col 58)",
            "(line 1924,col 9)-(line 1924,col 45)",
            "(line 1925,col 9)-(line 1925,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testIndexOfBooleanWithStartIndex()",
        "snippet": "    public void testIndexOfBooleanWithStartIndex() {\n        boolean[] array = null;\n        assertEquals(-1, ArrayUtils.indexOf(array, true, 2));\n        array = new boolean[0];\n        assertEquals(-1, ArrayUtils.indexOf(array, true, 2));\n        array = new boolean[] { true, false, true };\n        assertEquals(2, ArrayUtils.indexOf(array, true, 1));\n        assertEquals(-1, ArrayUtils.indexOf(array, false, 2));\n        assertEquals(1, ArrayUtils.indexOf(array, false, 0));\n        assertEquals(1, ArrayUtils.indexOf(array, false, -1));\n        array = new boolean[] { true, true };\n        assertEquals(-1, ArrayUtils.indexOf(array, false, 0));\n        assertEquals(-1, ArrayUtils.indexOf(array, false, -1));\n    }",
        "begin_line": 1928,
        "end_line": 1941,
        "comment": "",
        "child_ranges": [
            "(line 1929,col 9)-(line 1929,col 31)",
            "(line 1930,col 9)-(line 1930,col 61)",
            "(line 1931,col 9)-(line 1931,col 31)",
            "(line 1932,col 9)-(line 1932,col 61)",
            "(line 1933,col 9)-(line 1933,col 52)",
            "(line 1934,col 9)-(line 1934,col 60)",
            "(line 1935,col 9)-(line 1935,col 62)",
            "(line 1936,col 9)-(line 1936,col 61)",
            "(line 1937,col 9)-(line 1937,col 62)",
            "(line 1938,col 9)-(line 1938,col 45)",
            "(line 1939,col 9)-(line 1939,col 62)",
            "(line 1940,col 9)-(line 1940,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testLastIndexOfBoolean()",
        "snippet": "    public void testLastIndexOfBoolean() {\n        boolean[] array = null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, true));\n        array = new boolean[0];\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, true));\n        array = new boolean[] { true, false, true };\n        assertEquals(2, ArrayUtils.lastIndexOf(array, true));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, false));\n        array = new boolean[] { true, true };\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, false));\n    }",
        "begin_line": 1943,
        "end_line": 1953,
        "comment": "",
        "child_ranges": [
            "(line 1944,col 9)-(line 1944,col 31)",
            "(line 1945,col 9)-(line 1945,col 62)",
            "(line 1946,col 9)-(line 1946,col 31)",
            "(line 1947,col 9)-(line 1947,col 62)",
            "(line 1948,col 9)-(line 1948,col 52)",
            "(line 1949,col 9)-(line 1949,col 61)",
            "(line 1950,col 9)-(line 1950,col 62)",
            "(line 1951,col 9)-(line 1951,col 45)",
            "(line 1952,col 9)-(line 1952,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testLastIndexOfBooleanWithStartIndex()",
        "snippet": "    public void testLastIndexOfBooleanWithStartIndex() {\n        boolean[] array = null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, true, 2));\n        array = new boolean[0];\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, true, 2));\n        array = new boolean[] { true, false, true };\n        assertEquals(2, ArrayUtils.lastIndexOf(array, true, 2));\n        assertEquals(0, ArrayUtils.lastIndexOf(array, true, 1));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, false, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, true, -1));\n        array = new boolean[] { true, true };\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, false, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, true, -1));\n    }",
        "begin_line": 1955,
        "end_line": 1968,
        "comment": "",
        "child_ranges": [
            "(line 1956,col 9)-(line 1956,col 31)",
            "(line 1957,col 9)-(line 1957,col 65)",
            "(line 1958,col 9)-(line 1958,col 31)",
            "(line 1959,col 9)-(line 1959,col 65)",
            "(line 1960,col 9)-(line 1960,col 52)",
            "(line 1961,col 9)-(line 1961,col 64)",
            "(line 1962,col 9)-(line 1962,col 64)",
            "(line 1963,col 9)-(line 1963,col 65)",
            "(line 1964,col 9)-(line 1964,col 66)",
            "(line 1965,col 9)-(line 1965,col 45)",
            "(line 1966,col 9)-(line 1966,col 66)",
            "(line 1967,col 9)-(line 1967,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testContainsBoolean()",
        "snippet": "    public void testContainsBoolean() {\n        boolean[] array = null;\n        assertEquals(false, ArrayUtils.contains(array, true));\n        array = new boolean[] { true, false, true };\n        assertEquals(true, ArrayUtils.contains(array, true));\n        assertEquals(true, ArrayUtils.contains(array, false));\n        array = new boolean[] { true, true };\n        assertEquals(true, ArrayUtils.contains(array, true));\n        assertEquals(false, ArrayUtils.contains(array, false));\n    }",
        "begin_line": 1970,
        "end_line": 1979,
        "comment": "",
        "child_ranges": [
            "(line 1971,col 9)-(line 1971,col 31)",
            "(line 1972,col 9)-(line 1972,col 62)",
            "(line 1973,col 9)-(line 1973,col 52)",
            "(line 1974,col 9)-(line 1974,col 61)",
            "(line 1975,col 9)-(line 1975,col 62)",
            "(line 1976,col 9)-(line 1976,col 45)",
            "(line 1977,col 9)-(line 1977,col 61)",
            "(line 1978,col 9)-(line 1978,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testToPrimitive_boolean()",
        "snippet": "    public void testToPrimitive_boolean() {\n        final Boolean[] b = null;\n        assertEquals(null, ArrayUtils.toPrimitive(b));\n        assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.toPrimitive(new Boolean[0]));\n        assertTrue(Arrays.equals(\n            new boolean[] {true, false, true},\n            ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, Boolean.FALSE, Boolean.TRUE}))\n        );\n\n        try {\n            ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, null});\n            fail();\n        } catch (NullPointerException ex) {}\n    }",
        "begin_line": 1983,
        "end_line": 1996,
        "comment": "  -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1984,col 9)-(line 1984,col 33)",
            "(line 1985,col 9)-(line 1985,col 54)",
            "(line 1986,col 9)-(line 1986,col 91)",
            "(line 1987,col 9)-(line 1990,col 10)",
            "(line 1992,col 9)-(line 1995,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testToPrimitive_boolean_boolean()",
        "snippet": "    public void testToPrimitive_boolean_boolean() {\n        assertEquals(null, ArrayUtils.toPrimitive(null, false));\n        assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.toPrimitive(new Boolean[0], false));\n        assertTrue(Arrays.equals(\n            new boolean[] {true, false, true},\n            ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, Boolean.FALSE, Boolean.TRUE}, false))\n        );\n        assertTrue(Arrays.equals(\n            new boolean[] {true, false, false},\n            ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, null, Boolean.FALSE}, false))\n        );\n        assertTrue(Arrays.equals(\n            new boolean[] {true, true, false},\n            ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, null, Boolean.FALSE}, true))\n        );\n    }",
        "begin_line": 1998,
        "end_line": 2013,
        "comment": "",
        "child_ranges": [
            "(line 1999,col 9)-(line 1999,col 64)",
            "(line 2000,col 9)-(line 2000,col 98)",
            "(line 2001,col 9)-(line 2004,col 10)",
            "(line 2005,col 9)-(line 2008,col 10)",
            "(line 2009,col 9)-(line 2012,col 10)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testToObject_boolean()",
        "snippet": "    public void testToObject_boolean() {\n        final boolean[] b = null;\n        assertEquals(null, ArrayUtils.toObject(b));\n        assertSame(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, ArrayUtils.toObject(new boolean[0]));\n        assertTrue(Arrays.equals(\n            new Boolean[] {Boolean.TRUE, Boolean.FALSE, Boolean.TRUE},\n            ArrayUtils.toObject(new boolean[] {true, false, true}))\n        );\n    }",
        "begin_line": 2015,
        "end_line": 2023,
        "comment": "",
        "child_ranges": [
            "(line 2016,col 9)-(line 2016,col 33)",
            "(line 2017,col 9)-(line 2017,col 51)",
            "(line 2018,col 9)-(line 2018,col 95)",
            "(line 2019,col 9)-(line 2022,col 10)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testToPrimitive_char()",
        "snippet": "    public void testToPrimitive_char() {\n        final Character[] b = null;\n        assertEquals(null, ArrayUtils.toPrimitive(b));\n        \n        assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.toPrimitive(new Character[0]));\n        \n        assertTrue(Arrays.equals(\n            new char[] {Character.MIN_VALUE, Character.MAX_VALUE, '0'},\n            ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n                new Character(Character.MAX_VALUE), new Character('0')}))\n        );\n\n        try {\n            ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n            fail();\n        } catch (NullPointerException ex) {}\n    }",
        "begin_line": 2027,
        "end_line": 2043,
        "comment": "  -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 2028,col 9)-(line 2028,col 35)",
            "(line 2029,col 9)-(line 2029,col 54)",
            "(line 2031,col 9)-(line 2031,col 90)",
            "(line 2033,col 9)-(line 2037,col 10)",
            "(line 2039,col 9)-(line 2042,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testToPrimitive_char_char()",
        "snippet": "    public void testToPrimitive_char_char() {\n        final Character[] b = null;\n        assertEquals(null, ArrayUtils.toPrimitive(b, Character.MIN_VALUE));\n        \n        assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, \n            ArrayUtils.toPrimitive(new Character[0], (char)0));\n        \n        assertTrue(Arrays.equals(\n            new char[] {Character.MIN_VALUE, Character.MAX_VALUE, '0'},\n            ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n                new Character(Character.MAX_VALUE), new Character('0')}, \n                Character.MIN_VALUE))\n        );\n        \n        assertTrue(Arrays.equals(\n            new char[] {Character.MIN_VALUE, Character.MAX_VALUE, '0'},\n            ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n                new Character('0')}, Character.MAX_VALUE))\n        );\n    }",
        "begin_line": 2045,
        "end_line": 2064,
        "comment": "",
        "child_ranges": [
            "(line 2046,col 9)-(line 2046,col 35)",
            "(line 2047,col 9)-(line 2047,col 75)",
            "(line 2049,col 9)-(line 2050,col 63)",
            "(line 2052,col 9)-(line 2057,col 10)",
            "(line 2059,col 9)-(line 2063,col 10)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testToObject_char()",
        "snippet": "    public void testToObject_char() {\n        final char[] b = null;\n        assertEquals(null, ArrayUtils.toObject(b));\n        \n        assertSame(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, \n            ArrayUtils.toObject(new char[0]));\n        \n        assertTrue(Arrays.equals(\n            new Character[] {new Character(Character.MIN_VALUE), \n                new Character(Character.MAX_VALUE), new Character('0')},\n                ArrayUtils.toObject(new char[] {Character.MIN_VALUE, Character.MAX_VALUE, \n                '0'} ))\n        );\n    }",
        "begin_line": 2066,
        "end_line": 2079,
        "comment": "",
        "child_ranges": [
            "(line 2067,col 9)-(line 2067,col 30)",
            "(line 2068,col 9)-(line 2068,col 51)",
            "(line 2070,col 9)-(line 2071,col 46)",
            "(line 2073,col 9)-(line 2078,col 10)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testToPrimitive_byte()",
        "snippet": "    public void testToPrimitive_byte() {\n        final Byte[] b = null;\n        assertEquals(null, ArrayUtils.toPrimitive(b));\n        \n        assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.toPrimitive(new Byte[0]));\n        \n        assertTrue(Arrays.equals(\n            new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999},\n            ArrayUtils.toPrimitive(new Byte[] {new Byte(Byte.MIN_VALUE), \n                new Byte(Byte.MAX_VALUE), new Byte((byte)9999999)}))\n        );\n\n        try {\n            ArrayUtils.toPrimitive(new Byte[] {new Byte(Byte.MIN_VALUE), null});\n            fail();\n        } catch (NullPointerException ex) {}\n    }",
        "begin_line": 2083,
        "end_line": 2099,
        "comment": "  -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 2084,col 9)-(line 2084,col 30)",
            "(line 2085,col 9)-(line 2085,col 54)",
            "(line 2087,col 9)-(line 2087,col 85)",
            "(line 2089,col 9)-(line 2093,col 10)",
            "(line 2095,col 9)-(line 2098,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testToPrimitive_byte_byte()",
        "snippet": "    public void testToPrimitive_byte_byte() {\n        final Byte[] b = null;\n        assertEquals(null, ArrayUtils.toPrimitive(b, Byte.MIN_VALUE));\n        \n        assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, \n            ArrayUtils.toPrimitive(new Byte[0], (byte)1));\n        \n        assertTrue(Arrays.equals(\n            new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999},\n            ArrayUtils.toPrimitive(new Byte[] {new Byte(Byte.MIN_VALUE), \n                new Byte(Byte.MAX_VALUE), new Byte((byte)9999999)}, \n                Byte.MIN_VALUE))\n        );\n        \n        assertTrue(Arrays.equals(\n            new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999},\n            ArrayUtils.toPrimitive(new Byte[] {new Byte(Byte.MIN_VALUE), null, \n                new Byte((byte)9999999)}, Byte.MAX_VALUE))\n        );\n    }",
        "begin_line": 2101,
        "end_line": 2120,
        "comment": "",
        "child_ranges": [
            "(line 2102,col 9)-(line 2102,col 30)",
            "(line 2103,col 9)-(line 2103,col 70)",
            "(line 2105,col 9)-(line 2106,col 58)",
            "(line 2108,col 9)-(line 2113,col 10)",
            "(line 2115,col 9)-(line 2119,col 10)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testToObject_byte()",
        "snippet": "    public void testToObject_byte() {\n        final byte[] b = null;\n        assertEquals(null, ArrayUtils.toObject(b));\n        \n        assertSame(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, \n            ArrayUtils.toObject(new byte[0]));\n        \n        assertTrue(Arrays.equals(\n            new Byte[] {new Byte(Byte.MIN_VALUE), \n                new Byte(Byte.MAX_VALUE), new Byte((byte)9999999)},\n                ArrayUtils.toObject(new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, \n                (byte)9999999}))\n        );\n    }",
        "begin_line": 2122,
        "end_line": 2135,
        "comment": "",
        "child_ranges": [
            "(line 2123,col 9)-(line 2123,col 30)",
            "(line 2124,col 9)-(line 2124,col 51)",
            "(line 2126,col 9)-(line 2127,col 46)",
            "(line 2129,col 9)-(line 2134,col 10)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testToPrimitive_short()",
        "snippet": "    public void testToPrimitive_short() {\n        final Short[] b = null;\n        assertEquals(null, ArrayUtils.toPrimitive(b));\n        \n        assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.toPrimitive(new Short[0]));\n        \n        assertTrue(Arrays.equals(\n            new short[] {Short.MIN_VALUE, Short.MAX_VALUE, (short)9999999},\n            ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n                new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n        );\n\n        try {\n            ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n            fail();\n        } catch (NullPointerException ex) {}\n    }",
        "begin_line": 2139,
        "end_line": 2155,
        "comment": "  -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 2140,col 9)-(line 2140,col 31)",
            "(line 2141,col 9)-(line 2141,col 54)",
            "(line 2143,col 9)-(line 2143,col 87)",
            "(line 2145,col 9)-(line 2149,col 10)",
            "(line 2151,col 9)-(line 2154,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testToPrimitive_short_short()",
        "snippet": "    public void testToPrimitive_short_short() {\n        final Short[] s = null;\n        assertEquals(null, ArrayUtils.toPrimitive(s, Short.MIN_VALUE));\n        \n        assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.toPrimitive(new Short[0], \n        Short.MIN_VALUE));\n        \n        assertTrue(Arrays.equals(\n            new short[] {Short.MIN_VALUE, Short.MAX_VALUE, (short)9999999},\n            ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n                new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n        );\n        \n        assertTrue(Arrays.equals(\n            new short[] {Short.MIN_VALUE, Short.MAX_VALUE, (short)9999999},\n            ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n                new Short((short)9999999)}, Short.MAX_VALUE))\n        );\n    }",
        "begin_line": 2157,
        "end_line": 2175,
        "comment": "",
        "child_ranges": [
            "(line 2158,col 9)-(line 2158,col 31)",
            "(line 2159,col 9)-(line 2159,col 71)",
            "(line 2161,col 9)-(line 2162,col 26)",
            "(line 2164,col 9)-(line 2168,col 10)",
            "(line 2170,col 9)-(line 2174,col 10)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testToObject_short()",
        "snippet": "    public void testToObject_short() {\n        final short[] b = null;\n        assertEquals(null, ArrayUtils.toObject(b));\n        \n        assertSame(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY, \n        ArrayUtils.toObject(new short[0]));\n        \n        assertTrue(Arrays.equals(\n            new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n                new Short((short)9999999)},\n            ArrayUtils.toObject(new short[] {Short.MIN_VALUE, Short.MAX_VALUE, \n                (short)9999999}))\n        );\n    }",
        "begin_line": 2177,
        "end_line": 2190,
        "comment": "",
        "child_ranges": [
            "(line 2178,col 9)-(line 2178,col 31)",
            "(line 2179,col 9)-(line 2179,col 51)",
            "(line 2181,col 9)-(line 2182,col 43)",
            "(line 2184,col 9)-(line 2189,col 10)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testToPrimitive_int()",
        "snippet": "     public void testToPrimitive_int() {\n         final Integer[] b = null;\n         assertEquals(null, ArrayUtils.toPrimitive(b));\n         assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.toPrimitive(new Integer[0]));\n         assertTrue(Arrays.equals(\n             new int[] {Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999},\n             ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n                 new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n         );\n\n         try {\n             ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n             fail();\n         } catch (NullPointerException ex) {}\n     }",
        "begin_line": 2194,
        "end_line": 2208,
        "comment": "  -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 2195,col 10)-(line 2195,col 34)",
            "(line 2196,col 10)-(line 2196,col 55)",
            "(line 2197,col 10)-(line 2197,col 88)",
            "(line 2198,col 10)-(line 2202,col 11)",
            "(line 2204,col 10)-(line 2207,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testToPrimitive_int_int()",
        "snippet": "     public void testToPrimitive_int_int() {\n         final Long[] l = null;\n         assertEquals(null, ArrayUtils.toPrimitive(l, Integer.MIN_VALUE));\n         assertSame(ArrayUtils.EMPTY_INT_ARRAY, \n         ArrayUtils.toPrimitive(new Integer[0], 1));\n         assertTrue(Arrays.equals(\n             new int[] {Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999},\n             ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n                 new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n         assertTrue(Arrays.equals(\n             new int[] {Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999},\n             ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n                 null, new Integer(9999999)}, Integer.MAX_VALUE))\n         );\n     }",
        "begin_line": 2210,
        "end_line": 2224,
        "comment": "",
        "child_ranges": [
            "(line 2211,col 10)-(line 2211,col 31)",
            "(line 2212,col 10)-(line 2212,col 74)",
            "(line 2213,col 10)-(line 2214,col 52)",
            "(line 2215,col 10)-(line 2218,col 76)",
            "(line 2219,col 10)-(line 2223,col 11)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testToPrimitive_intNull()",
        "snippet": "    public void testToPrimitive_intNull() {\n        Integer[] iArray = null;\n        assertEquals(null, ArrayUtils.toPrimitive(iArray, Integer.MIN_VALUE));\n    }",
        "begin_line": 2226,
        "end_line": 2229,
        "comment": "",
        "child_ranges": [
            "(line 2227,col 9)-(line 2227,col 32)",
            "(line 2228,col 9)-(line 2228,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testToObject_int()",
        "snippet": "    public void testToObject_int() {\n        final int[] b = null;\n        assertEquals(null, ArrayUtils.toObject(b));\n    \n        assertSame(\n            ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY,\n            ArrayUtils.toObject(new int[0]));\n    \n        assertTrue(\n            Arrays.equals(\n                new Integer[] {\n                    new Integer(Integer.MIN_VALUE),\n                    new Integer(Integer.MAX_VALUE),\n                    new Integer(9999999)},\n            ArrayUtils.toObject(\n                new int[] { Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999 })));\n    }",
        "begin_line": 2231,
        "end_line": 2247,
        "comment": "",
        "child_ranges": [
            "(line 2232,col 9)-(line 2232,col 29)",
            "(line 2233,col 9)-(line 2233,col 51)",
            "(line 2235,col 9)-(line 2237,col 45)",
            "(line 2239,col 9)-(line 2246,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testToPrimitive_long()",
        "snippet": "     public void testToPrimitive_long() {\n         final Long[] b = null;\n         assertEquals(null, ArrayUtils.toPrimitive(b));\n         \n         assertSame(ArrayUtils.EMPTY_LONG_ARRAY, \n            ArrayUtils.toPrimitive(new Long[0]));\n         \n         assertTrue(Arrays.equals(\n             new long[] {Long.MIN_VALUE, Long.MAX_VALUE, 9999999},\n             ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n                 new Long(Long.MAX_VALUE), new Long(9999999)}))\n         );\n\n         try {\n             ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n             fail();\n         } catch (NullPointerException ex) {}\n     }",
        "begin_line": 2251,
        "end_line": 2268,
        "comment": "  -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 2252,col 10)-(line 2252,col 31)",
            "(line 2253,col 10)-(line 2253,col 55)",
            "(line 2255,col 10)-(line 2256,col 49)",
            "(line 2258,col 10)-(line 2262,col 11)",
            "(line 2264,col 10)-(line 2267,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testToPrimitive_long_long()",
        "snippet": "     public void testToPrimitive_long_long() {\n         final Long[] l = null;\n         assertEquals(null, ArrayUtils.toPrimitive(l, Long.MIN_VALUE));\n         \n         assertSame(ArrayUtils.EMPTY_LONG_ARRAY, \n         ArrayUtils.toPrimitive(new Long[0], 1));\n         \n         assertTrue(Arrays.equals(\n             new long[] {Long.MIN_VALUE, Long.MAX_VALUE, 9999999},\n             ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n                 new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n         \n         assertTrue(Arrays.equals(\n             new long[] {Long.MIN_VALUE, Long.MAX_VALUE, 9999999},\n             ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n                 null, new Long(9999999)}, Long.MAX_VALUE))\n         );\n     }",
        "begin_line": 2270,
        "end_line": 2287,
        "comment": "",
        "child_ranges": [
            "(line 2271,col 10)-(line 2271,col 31)",
            "(line 2272,col 10)-(line 2272,col 71)",
            "(line 2274,col 10)-(line 2275,col 49)",
            "(line 2277,col 10)-(line 2280,col 67)",
            "(line 2282,col 10)-(line 2286,col 11)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testToObject_long()",
        "snippet": "    public void testToObject_long() {\n        final long[] b = null;\n        assertEquals(null, ArrayUtils.toObject(b));\n    \n        assertSame(\n            ArrayUtils.EMPTY_LONG_OBJECT_ARRAY,\n            ArrayUtils.toObject(new long[0]));\n    \n        assertTrue(\n            Arrays.equals(\n                new Long[] {\n                    new Long(Long.MIN_VALUE),\n                    new Long(Long.MAX_VALUE),\n                    new Long(9999999)},\n            ArrayUtils.toObject(\n                new long[] { Long.MIN_VALUE, Long.MAX_VALUE, 9999999 })));\n    }",
        "begin_line": 2289,
        "end_line": 2305,
        "comment": "",
        "child_ranges": [
            "(line 2290,col 9)-(line 2290,col 30)",
            "(line 2291,col 9)-(line 2291,col 51)",
            "(line 2293,col 9)-(line 2295,col 46)",
            "(line 2297,col 9)-(line 2304,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testToPrimitive_float()",
        "snippet": "     public void testToPrimitive_float() {\n         final Float[] b = null;\n         assertEquals(null, ArrayUtils.toPrimitive(b));\n         \n         assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY, \n            ArrayUtils.toPrimitive(new Float[0]));\n         \n         assertTrue(Arrays.equals(\n             new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999},\n             ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n                 new Float(Float.MAX_VALUE), new Float(9999999)}))\n         );\n\n         try {\n             ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n             fail();\n         } catch (NullPointerException ex) {}\n     }",
        "begin_line": 2309,
        "end_line": 2326,
        "comment": "  -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 2310,col 10)-(line 2310,col 32)",
            "(line 2311,col 10)-(line 2311,col 55)",
            "(line 2313,col 10)-(line 2314,col 50)",
            "(line 2316,col 10)-(line 2320,col 11)",
            "(line 2322,col 10)-(line 2325,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testToPrimitive_float_float()",
        "snippet": "     public void testToPrimitive_float_float() {\n         final Float[] l = null;\n         assertEquals(null, ArrayUtils.toPrimitive(l, Float.MIN_VALUE));\n         \n         assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY, \n         ArrayUtils.toPrimitive(new Float[0], 1));\n         \n         assertTrue(Arrays.equals(\n             new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999},\n             ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n                 new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n         \n         assertTrue(Arrays.equals(\n             new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999},\n             ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n                 null, new Float(9999999)}, Float.MAX_VALUE))\n         );\n     }",
        "begin_line": 2328,
        "end_line": 2345,
        "comment": "",
        "child_ranges": [
            "(line 2329,col 10)-(line 2329,col 32)",
            "(line 2330,col 10)-(line 2330,col 72)",
            "(line 2332,col 10)-(line 2333,col 50)",
            "(line 2335,col 10)-(line 2338,col 70)",
            "(line 2340,col 10)-(line 2344,col 11)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testToObject_float()",
        "snippet": "    public void testToObject_float() {\n        final float[] b = null;\n        assertEquals(null, ArrayUtils.toObject(b));\n    \n        assertSame(\n            ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY,\n            ArrayUtils.toObject(new float[0]));\n    \n        assertTrue(\n            Arrays.equals(\n                new Float[] {\n                    new Float(Float.MIN_VALUE),\n                    new Float(Float.MAX_VALUE),\n                    new Float(9999999)},\n            ArrayUtils.toObject(\n                new float[] { Float.MIN_VALUE, Float.MAX_VALUE, 9999999 })));\n    }",
        "begin_line": 2347,
        "end_line": 2363,
        "comment": "",
        "child_ranges": [
            "(line 2348,col 9)-(line 2348,col 31)",
            "(line 2349,col 9)-(line 2349,col 51)",
            "(line 2351,col 9)-(line 2353,col 47)",
            "(line 2355,col 9)-(line 2362,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testToPrimitive_double()",
        "snippet": "     public void testToPrimitive_double() {\n         final Double[] b = null;\n         assertEquals(null, ArrayUtils.toPrimitive(b));\n         \n         assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY, \n            ArrayUtils.toPrimitive(new Double[0]));\n         \n         assertTrue(Arrays.equals(\n             new double[] {Double.MIN_VALUE, Double.MAX_VALUE, 9999999},\n             ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n                 new Double(Double.MAX_VALUE), new Double(9999999)}))\n         );\n\n         try {\n             ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n             fail();\n         } catch (NullPointerException ex) {}\n     }",
        "begin_line": 2367,
        "end_line": 2384,
        "comment": "  -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 2368,col 10)-(line 2368,col 33)",
            "(line 2369,col 10)-(line 2369,col 55)",
            "(line 2371,col 10)-(line 2372,col 51)",
            "(line 2374,col 10)-(line 2378,col 11)",
            "(line 2380,col 10)-(line 2383,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testToPrimitive_double_double()",
        "snippet": "     public void testToPrimitive_double_double() {\n         final Double[] l = null;\n         assertEquals(null, ArrayUtils.toPrimitive(l, Double.MIN_VALUE));\n         \n         assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY, \n         ArrayUtils.toPrimitive(new Double[0], 1));\n         \n         assertTrue(Arrays.equals(\n             new double[] {Double.MIN_VALUE, Double.MAX_VALUE, 9999999},\n             ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n                 new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n         \n         assertTrue(Arrays.equals(\n             new double[] {Double.MIN_VALUE, Double.MAX_VALUE, 9999999},\n             ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n                 null, new Double(9999999)}, Double.MAX_VALUE))\n         );\n     }",
        "begin_line": 2386,
        "end_line": 2403,
        "comment": "",
        "child_ranges": [
            "(line 2387,col 10)-(line 2387,col 33)",
            "(line 2388,col 10)-(line 2388,col 73)",
            "(line 2390,col 10)-(line 2391,col 51)",
            "(line 2393,col 10)-(line 2396,col 73)",
            "(line 2398,col 10)-(line 2402,col 11)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testToObject_double()",
        "snippet": "    public void testToObject_double() {\n        final double[] b = null;\n        assertEquals(null, ArrayUtils.toObject(b));\n    \n        assertSame(\n            ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY,\n            ArrayUtils.toObject(new double[0]));\n    \n        assertTrue(\n            Arrays.equals(\n                new Double[] {\n                    new Double(Double.MIN_VALUE),\n                    new Double(Double.MAX_VALUE),\n                    new Double(9999999)},\n            ArrayUtils.toObject(\n                new double[] { Double.MIN_VALUE, Double.MAX_VALUE, 9999999 })));\n    }",
        "begin_line": 2405,
        "end_line": 2421,
        "comment": "",
        "child_ranges": [
            "(line 2406,col 9)-(line 2406,col 32)",
            "(line 2407,col 9)-(line 2407,col 51)",
            "(line 2409,col 9)-(line 2411,col 48)",
            "(line 2413,col 9)-(line 2420,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testIsEmptyObject()",
        "snippet": "    public void testIsEmptyObject() {\n        Object[] emptyArray = new Object[] {};\n        Object[] notEmptyArray = new Object[] { new String(\"Value\") };\n        assertEquals(true, ArrayUtils.isEmpty((Object[])null));\n        assertEquals(true, ArrayUtils.isEmpty(emptyArray));\n        assertEquals(false, ArrayUtils.isEmpty(notEmptyArray));\n    }",
        "begin_line": 2427,
        "end_line": 2433,
        "comment": "\n     * Test for {@link ArrayUtils#isEmpty(java.lang.Object[])}.\n     ",
        "child_ranges": [
            "(line 2428,col 9)-(line 2428,col 46)",
            "(line 2429,col 9)-(line 2429,col 70)",
            "(line 2430,col 9)-(line 2430,col 63)",
            "(line 2431,col 9)-(line 2431,col 59)",
            "(line 2432,col 9)-(line 2432,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testIsEmptyPrimitives()",
        "snippet": "    public void testIsEmptyPrimitives() {\n        long[] emptyLongArray = new long[] {};\n        long[] notEmptyLongArray = new long[] { 1L };\n        assertEquals(true, ArrayUtils.isEmpty((long[])null));\n        assertEquals(true, ArrayUtils.isEmpty(emptyLongArray));\n        assertEquals(false, ArrayUtils.isEmpty(notEmptyLongArray));\n\n        int[] emptyIntArray = new int[] {};\n        int[] notEmptyIntArray = new int[] { 1 };\n        assertEquals(true, ArrayUtils.isEmpty((int[])null));\n        assertEquals(true, ArrayUtils.isEmpty(emptyIntArray));\n        assertEquals(false, ArrayUtils.isEmpty(notEmptyIntArray));\n\n        short[] emptyShortArray = new short[] {};\n        short[] notEmptyShortArray = new short[] { 1 };\n        assertEquals(true, ArrayUtils.isEmpty((short[])null));\n        assertEquals(true, ArrayUtils.isEmpty(emptyShortArray));\n        assertEquals(false, ArrayUtils.isEmpty(notEmptyShortArray));\n\n        char[] emptyCharArray = new char[] {};\n        char[] notEmptyCharArray = new char[] { 1 };\n        assertEquals(true, ArrayUtils.isEmpty((char[])null));\n        assertEquals(true, ArrayUtils.isEmpty(emptyCharArray));\n        assertEquals(false, ArrayUtils.isEmpty(notEmptyCharArray));\n\n        byte[] emptyByteArray = new byte[] {};\n        byte[] notEmptyByteArray = new byte[] { 1 };\n        assertEquals(true, ArrayUtils.isEmpty((byte[])null));\n        assertEquals(true, ArrayUtils.isEmpty(emptyByteArray));\n        assertEquals(false, ArrayUtils.isEmpty(notEmptyByteArray));\n\n        double[] emptyDoubleArray = new double[] {};\n        double[] notEmptyDoubleArray = new double[] { 1.0 };\n        assertEquals(true, ArrayUtils.isEmpty((double[])null));\n        assertEquals(true, ArrayUtils.isEmpty(emptyDoubleArray));\n        assertEquals(false, ArrayUtils.isEmpty(notEmptyDoubleArray));\n\n        float[] emptyFloatArray = new float[] {};\n        float[] notEmptyFloatArray = new float[] { 1.0F };\n        assertEquals(true, ArrayUtils.isEmpty((float[])null));\n        assertEquals(true, ArrayUtils.isEmpty(emptyFloatArray));\n        assertEquals(false, ArrayUtils.isEmpty(notEmptyFloatArray));\n\n        boolean[] emptyBooleanArray = new boolean[] {};\n        boolean[] notEmptyBooleanArray = new boolean[] { true };\n        assertEquals(true, ArrayUtils.isEmpty((boolean[])null));\n        assertEquals(true, ArrayUtils.isEmpty(emptyBooleanArray));\n        assertEquals(false, ArrayUtils.isEmpty(notEmptyBooleanArray));\n    }",
        "begin_line": 2445,
        "end_line": 2493,
        "comment": "\n     * Tests for {@link ArrayUtils#isEmpty(long[])},\n     * {@link ArrayUtils#isEmpty(int[])},\n     * {@link ArrayUtils#isEmpty(short[])},\n     * {@link ArrayUtils#isEmpty(char[])},\n     * {@link ArrayUtils#isEmpty(byte[])},\n     * {@link ArrayUtils#isEmpty(double[])},\n     * {@link ArrayUtils#isEmpty(float[])} and\n     * {@link ArrayUtils#isEmpty(boolean[])}.\n     ",
        "child_ranges": [
            "(line 2446,col 9)-(line 2446,col 46)",
            "(line 2447,col 9)-(line 2447,col 53)",
            "(line 2448,col 9)-(line 2448,col 61)",
            "(line 2449,col 9)-(line 2449,col 63)",
            "(line 2450,col 9)-(line 2450,col 67)",
            "(line 2452,col 9)-(line 2452,col 43)",
            "(line 2453,col 9)-(line 2453,col 49)",
            "(line 2454,col 9)-(line 2454,col 60)",
            "(line 2455,col 9)-(line 2455,col 62)",
            "(line 2456,col 9)-(line 2456,col 66)",
            "(line 2458,col 9)-(line 2458,col 49)",
            "(line 2459,col 9)-(line 2459,col 55)",
            "(line 2460,col 9)-(line 2460,col 62)",
            "(line 2461,col 9)-(line 2461,col 64)",
            "(line 2462,col 9)-(line 2462,col 68)",
            "(line 2464,col 9)-(line 2464,col 46)",
            "(line 2465,col 9)-(line 2465,col 52)",
            "(line 2466,col 9)-(line 2466,col 61)",
            "(line 2467,col 9)-(line 2467,col 63)",
            "(line 2468,col 9)-(line 2468,col 67)",
            "(line 2470,col 9)-(line 2470,col 46)",
            "(line 2471,col 9)-(line 2471,col 52)",
            "(line 2472,col 9)-(line 2472,col 61)",
            "(line 2473,col 9)-(line 2473,col 63)",
            "(line 2474,col 9)-(line 2474,col 67)",
            "(line 2476,col 9)-(line 2476,col 52)",
            "(line 2477,col 9)-(line 2477,col 60)",
            "(line 2478,col 9)-(line 2478,col 63)",
            "(line 2479,col 9)-(line 2479,col 65)",
            "(line 2480,col 9)-(line 2480,col 69)",
            "(line 2482,col 9)-(line 2482,col 49)",
            "(line 2483,col 9)-(line 2483,col 58)",
            "(line 2484,col 9)-(line 2484,col 62)",
            "(line 2485,col 9)-(line 2485,col 64)",
            "(line 2486,col 9)-(line 2486,col 68)",
            "(line 2488,col 9)-(line 2488,col 55)",
            "(line 2489,col 9)-(line 2489,col 64)",
            "(line 2490,col 9)-(line 2490,col 64)",
            "(line 2491,col 9)-(line 2491,col 66)",
            "(line 2492,col 9)-(line 2492,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang.ArrayUtilsTest.testGetLength()",
        "snippet": "    public void testGetLength() {\n        assertEquals(0, ArrayUtils.getLength(null));\n        \n        Object[] emptyObjectArray = new Object[0];\n        Object[] notEmptyObjectArray = new Object[] {\"aValue\"};\n        assertEquals(0, ArrayUtils.getLength((Object[]) null));\n        assertEquals(0, ArrayUtils.getLength(emptyObjectArray));\n        assertEquals(1, ArrayUtils.getLength(notEmptyObjectArray));\n \n        int[] emptyIntArray = new int[] {};\n        int[] notEmptyIntArray = new int[] { 1 };\n        assertEquals(0, ArrayUtils.getLength((int[]) null));\n        assertEquals(0, ArrayUtils.getLength(emptyIntArray));\n        assertEquals(1, ArrayUtils.getLength(notEmptyIntArray));\n\n        short[] emptyShortArray = new short[] {};\n        short[] notEmptyShortArray = new short[] { 1 };\n        assertEquals(0, ArrayUtils.getLength((short[]) null));\n        assertEquals(0, ArrayUtils.getLength(emptyShortArray));\n        assertEquals(1, ArrayUtils.getLength(notEmptyShortArray));\n\n        char[] emptyCharArray = new char[] {};\n        char[] notEmptyCharArray = new char[] { 1 };\n        assertEquals(0, ArrayUtils.getLength((char[]) null));\n        assertEquals(0, ArrayUtils.getLength(emptyCharArray));\n        assertEquals(1, ArrayUtils.getLength(notEmptyCharArray));\n\n        byte[] emptyByteArray = new byte[] {};\n        byte[] notEmptyByteArray = new byte[] { 1 };\n        assertEquals(0, ArrayUtils.getLength((byte[]) null));\n        assertEquals(0, ArrayUtils.getLength(emptyByteArray));\n        assertEquals(1, ArrayUtils.getLength(notEmptyByteArray));\n\n        double[] emptyDoubleArray = new double[] {};\n        double[] notEmptyDoubleArray = new double[] { 1.0 };\n        assertEquals(0, ArrayUtils.getLength((double[]) null));\n        assertEquals(0, ArrayUtils.getLength(emptyDoubleArray));\n        assertEquals(1, ArrayUtils.getLength(notEmptyDoubleArray));\n\n        float[] emptyFloatArray = new float[] {};\n        float[] notEmptyFloatArray = new float[] { 1.0F };\n        assertEquals(0, ArrayUtils.getLength((float[]) null));\n        assertEquals(0, ArrayUtils.getLength(emptyFloatArray));\n        assertEquals(1, ArrayUtils.getLength(notEmptyFloatArray));\n\n        boolean[] emptyBooleanArray = new boolean[] {};\n        boolean[] notEmptyBooleanArray = new boolean[] { true };\n        assertEquals(0, ArrayUtils.getLength((boolean[]) null));\n        assertEquals(0, ArrayUtils.getLength(emptyBooleanArray));\n        assertEquals(1, ArrayUtils.getLength(notEmptyBooleanArray));\n        \n        try {\n            ArrayUtils.getLength(\"notAnArray\");\n            fail(\"IllegalArgumentException should have been thrown\");\n        } catch (IllegalArgumentException e) {}\n    }",
        "begin_line": 2496,
        "end_line": 2551,
        "comment": " ------------------------------------------------------------------------",
        "child_ranges": [
            "(line 2497,col 9)-(line 2497,col 52)",
            "(line 2499,col 9)-(line 2499,col 50)",
            "(line 2500,col 9)-(line 2500,col 63)",
            "(line 2501,col 9)-(line 2501,col 63)",
            "(line 2502,col 9)-(line 2502,col 64)",
            "(line 2503,col 9)-(line 2503,col 67)",
            "(line 2505,col 9)-(line 2505,col 43)",
            "(line 2506,col 9)-(line 2506,col 49)",
            "(line 2507,col 9)-(line 2507,col 60)",
            "(line 2508,col 9)-(line 2508,col 61)",
            "(line 2509,col 9)-(line 2509,col 64)",
            "(line 2511,col 9)-(line 2511,col 49)",
            "(line 2512,col 9)-(line 2512,col 55)",
            "(line 2513,col 9)-(line 2513,col 62)",
            "(line 2514,col 9)-(line 2514,col 63)",
            "(line 2515,col 9)-(line 2515,col 66)",
            "(line 2517,col 9)-(line 2517,col 46)",
            "(line 2518,col 9)-(line 2518,col 52)",
            "(line 2519,col 9)-(line 2519,col 61)",
            "(line 2520,col 9)-(line 2520,col 62)",
            "(line 2521,col 9)-(line 2521,col 65)",
            "(line 2523,col 9)-(line 2523,col 46)",
            "(line 2524,col 9)-(line 2524,col 52)",
            "(line 2525,col 9)-(line 2525,col 61)",
            "(line 2526,col 9)-(line 2526,col 62)",
            "(line 2527,col 9)-(line 2527,col 65)",
            "(line 2529,col 9)-(line 2529,col 52)",
            "(line 2530,col 9)-(line 2530,col 60)",
            "(line 2531,col 9)-(line 2531,col 63)",
            "(line 2532,col 9)-(line 2532,col 64)",
            "(line 2533,col 9)-(line 2533,col 67)",
            "(line 2535,col 9)-(line 2535,col 49)",
            "(line 2536,col 9)-(line 2536,col 58)",
            "(line 2537,col 9)-(line 2537,col 62)",
            "(line 2538,col 9)-(line 2538,col 63)",
            "(line 2539,col 9)-(line 2539,col 66)",
            "(line 2541,col 9)-(line 2541,col 55)",
            "(line 2542,col 9)-(line 2542,col 64)",
            "(line 2543,col 9)-(line 2543,col 64)",
            "(line 2544,col 9)-(line 2544,col 65)",
            "(line 2545,col 9)-(line 2545,col 68)",
            "(line 2547,col 9)-(line 2550,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharSetUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharSetUtilsTest.java",
        "signature": "org.apache.commons.lang.CharSetUtilsTest.CharSetUtilsTest(java.lang.String)",
        "snippet": "    public CharSetUtilsTest(String name) {\n        super(name);\n    }",
        "begin_line": 37,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharSetUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharSetUtilsTest.java",
        "signature": "org.apache.commons.lang.CharSetUtilsTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharSetUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharSetUtilsTest.java",
        "signature": "org.apache.commons.lang.CharSetUtilsTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(CharSetUtilsTest.class);\n        suite.setName(\"CharSetUtils Tests\");\n        return suite;\n    }",
        "begin_line": 45,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 64)",
            "(line 47,col 9)-(line 47,col 44)",
            "(line 48,col 9)-(line 48,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharSetUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharSetUtilsTest.java",
        "signature": "org.apache.commons.lang.CharSetUtilsTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        super.setUp();\n    }",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharSetUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharSetUtilsTest.java",
        "signature": "org.apache.commons.lang.CharSetUtilsTest.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        super.tearDown();\n    }",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharSetUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharSetUtilsTest.java",
        "signature": "org.apache.commons.lang.CharSetUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new CharSetUtils());\n        Constructor[] cons = CharSetUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(CharSetUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(CharSetUtils.class.getModifiers()));\n    }",
        "begin_line": 60,
        "end_line": 67,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 42)",
            "(line 62,col 9)-(line 62,col 74)",
            "(line 63,col 9)-(line 63,col 37)",
            "(line 64,col 9)-(line 64,col 70)",
            "(line 65,col 9)-(line 65,col 81)",
            "(line 66,col 9)-(line 66,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharSetUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharSetUtilsTest.java",
        "signature": "org.apache.commons.lang.CharSetUtilsTest.testEvaluateSet_Stringarray()",
        "snippet": "    public void testEvaluateSet_Stringarray() {\n        assertEquals(null, CharSetUtils.evaluateSet((String[]) null));\n        assertEquals(\"[]\", CharSetUtils.evaluateSet(new String[0]).toString());\n        assertEquals(\"[]\", CharSetUtils.evaluateSet(new String[] {null}).toString());\n        assertEquals(\"[a-e]\", CharSetUtils.evaluateSet(new String[] {\"a-e\"}).toString());\n    }",
        "begin_line": 70,
        "end_line": 75,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 70)",
            "(line 72,col 9)-(line 72,col 79)",
            "(line 73,col 9)-(line 73,col 85)",
            "(line 74,col 9)-(line 74,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharSetUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharSetUtilsTest.java",
        "signature": "org.apache.commons.lang.CharSetUtilsTest.testSqueeze_StringString()",
        "snippet": "    public void testSqueeze_StringString() {\n        assertEquals(null, CharSetUtils.squeeze(null, (String) null));\n        assertEquals(null, CharSetUtils.squeeze(null, \"\"));\n        \n        assertEquals(\"\", CharSetUtils.squeeze(\"\", (String) null));\n        assertEquals(\"\", CharSetUtils.squeeze(\"\", \"\"));\n        assertEquals(\"\", CharSetUtils.squeeze(\"\", \"a-e\"));\n        \n        assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", (String) null));\n        assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", \"\"));\n        assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", \"a-e\"));\n        assertEquals(\"helo\", CharSetUtils.squeeze(\"hello\", \"l-p\"));\n        assertEquals(\"heloo\", CharSetUtils.squeeze(\"helloo\", \"l\"));\n        assertEquals(\"hello\", CharSetUtils.squeeze(\"helloo\", \"^l\"));\n    }",
        "begin_line": 78,
        "end_line": 92,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 70)",
            "(line 80,col 9)-(line 80,col 59)",
            "(line 82,col 9)-(line 82,col 66)",
            "(line 83,col 9)-(line 83,col 55)",
            "(line 84,col 9)-(line 84,col 58)",
            "(line 86,col 9)-(line 86,col 76)",
            "(line 87,col 9)-(line 87,col 65)",
            "(line 88,col 9)-(line 88,col 68)",
            "(line 89,col 9)-(line 89,col 67)",
            "(line 90,col 9)-(line 90,col 67)",
            "(line 91,col 9)-(line 91,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharSetUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharSetUtilsTest.java",
        "signature": "org.apache.commons.lang.CharSetUtilsTest.testSqueeze_StringStringarray()",
        "snippet": "    public void testSqueeze_StringStringarray() {\n        assertEquals(null, CharSetUtils.squeeze(null, (String[]) null));\n        assertEquals(null, CharSetUtils.squeeze(null, new String[0]));\n        assertEquals(null, CharSetUtils.squeeze(null, new String[] {null}));\n        assertEquals(null, CharSetUtils.squeeze(null, new String[] {\"el\"}));\n        \n        assertEquals(\"\", CharSetUtils.squeeze(\"\", (String[]) null));\n        assertEquals(\"\", CharSetUtils.squeeze(\"\", new String[0]));\n        assertEquals(\"\", CharSetUtils.squeeze(\"\", new String[] {null}));\n        assertEquals(\"\", CharSetUtils.squeeze(\"\", new String[] {\"a-e\"}));\n        \n        assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", (String[]) null));\n        assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", new String[0]));\n        assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", new String[] {null}));\n        assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", new String[] {\"a-e\"}));\n        \n        assertEquals(\"helo\", CharSetUtils.squeeze(\"hello\", new String[] { \"el\" }));\n        assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", new String[] { \"e\" }));\n        assertEquals(\"fofof\", CharSetUtils.squeeze(\"fooffooff\", new String[] { \"of\" }));\n        assertEquals(\"fof\", CharSetUtils.squeeze(\"fooooff\", new String[] { \"fo\" }));\n    }",
        "begin_line": 94,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 72)",
            "(line 96,col 9)-(line 96,col 70)",
            "(line 97,col 9)-(line 97,col 76)",
            "(line 98,col 9)-(line 98,col 76)",
            "(line 100,col 9)-(line 100,col 68)",
            "(line 101,col 9)-(line 101,col 66)",
            "(line 102,col 9)-(line 102,col 72)",
            "(line 103,col 9)-(line 103,col 73)",
            "(line 105,col 9)-(line 105,col 78)",
            "(line 106,col 9)-(line 106,col 76)",
            "(line 107,col 9)-(line 107,col 82)",
            "(line 108,col 9)-(line 108,col 83)",
            "(line 110,col 9)-(line 110,col 83)",
            "(line 111,col 9)-(line 111,col 83)",
            "(line 112,col 9)-(line 112,col 88)",
            "(line 113,col 9)-(line 113,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharSetUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharSetUtilsTest.java",
        "signature": "org.apache.commons.lang.CharSetUtilsTest.testCount_StringString()",
        "snippet": "    public void testCount_StringString() {\n        assertEquals(0, CharSetUtils.count(null, (String) null));\n        assertEquals(0, CharSetUtils.count(null, \"\"));\n        \n        assertEquals(0, CharSetUtils.count(\"\", (String) null));\n        assertEquals(0, CharSetUtils.count(\"\", \"\"));\n        assertEquals(0, CharSetUtils.count(\"\", \"a-e\"));\n        \n        assertEquals(0, CharSetUtils.count(\"hello\", (String) null));\n        assertEquals(0, CharSetUtils.count(\"hello\", \"\"));\n        assertEquals(1, CharSetUtils.count(\"hello\", \"a-e\"));\n        assertEquals(3, CharSetUtils.count(\"hello\", \"l-p\"));\n    }",
        "begin_line": 117,
        "end_line": 129,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 118,col 9)-(line 118,col 65)",
            "(line 119,col 9)-(line 119,col 54)",
            "(line 121,col 9)-(line 121,col 63)",
            "(line 122,col 9)-(line 122,col 52)",
            "(line 123,col 9)-(line 123,col 55)",
            "(line 125,col 9)-(line 125,col 68)",
            "(line 126,col 9)-(line 126,col 57)",
            "(line 127,col 9)-(line 127,col 60)",
            "(line 128,col 9)-(line 128,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharSetUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharSetUtilsTest.java",
        "signature": "org.apache.commons.lang.CharSetUtilsTest.testCount_StringStringarray()",
        "snippet": "    public void testCount_StringStringarray() {\n        assertEquals(0, CharSetUtils.count(null, (String[]) null));\n        assertEquals(0, CharSetUtils.count(null, new String[0]));\n        assertEquals(0, CharSetUtils.count(null, new String[] {null}));\n        assertEquals(0, CharSetUtils.count(null, new String[] {\"a-e\"}));\n        \n        assertEquals(0, CharSetUtils.count(\"\", (String[]) null));\n        assertEquals(0, CharSetUtils.count(\"\", new String[0]));\n        assertEquals(0, CharSetUtils.count(\"\", new String[] {null}));\n        assertEquals(0, CharSetUtils.count(\"\", new String[] {\"a-e\"}));\n        \n        assertEquals(0, CharSetUtils.count(\"hello\", (String[]) null));\n        assertEquals(0, CharSetUtils.count(\"hello\", new String[0]));\n        assertEquals(0, CharSetUtils.count(\"hello\", new String[] {null}));\n        assertEquals(1, CharSetUtils.count(\"hello\", new String[] {\"a-e\"}));\n        \n        assertEquals(3, CharSetUtils.count(\"hello\", new String[] { \"el\" }));\n        assertEquals(0, CharSetUtils.count(\"hello\", new String[] { \"x\" }));\n        assertEquals(2, CharSetUtils.count(\"hello\", new String[] { \"e-i\" }));\n        assertEquals(5, CharSetUtils.count(\"hello\", new String[] { \"a-z\" }));\n        assertEquals(0, CharSetUtils.count(\"hello\", new String[] { \"\" }));\n    }",
        "begin_line": 131,
        "end_line": 152,
        "comment": "",
        "child_ranges": [
            "(line 132,col 9)-(line 132,col 67)",
            "(line 133,col 9)-(line 133,col 65)",
            "(line 134,col 9)-(line 134,col 71)",
            "(line 135,col 9)-(line 135,col 72)",
            "(line 137,col 9)-(line 137,col 65)",
            "(line 138,col 9)-(line 138,col 63)",
            "(line 139,col 9)-(line 139,col 69)",
            "(line 140,col 9)-(line 140,col 70)",
            "(line 142,col 9)-(line 142,col 70)",
            "(line 143,col 9)-(line 143,col 68)",
            "(line 144,col 9)-(line 144,col 74)",
            "(line 145,col 9)-(line 145,col 75)",
            "(line 147,col 9)-(line 147,col 76)",
            "(line 148,col 9)-(line 148,col 75)",
            "(line 149,col 9)-(line 149,col 77)",
            "(line 150,col 9)-(line 150,col 77)",
            "(line 151,col 9)-(line 151,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharSetUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharSetUtilsTest.java",
        "signature": "org.apache.commons.lang.CharSetUtilsTest.testKeep_StringString()",
        "snippet": "    public void testKeep_StringString() {\n        assertEquals(null, CharSetUtils.keep(null, (String) null));\n        assertEquals(null, CharSetUtils.keep(null, \"\"));\n        \n        assertEquals(\"\", CharSetUtils.keep(\"\", (String) null));\n        assertEquals(\"\", CharSetUtils.keep(\"\", \"\"));\n        assertEquals(\"\", CharSetUtils.keep(\"\", \"a-e\"));\n        \n        assertEquals(\"\", CharSetUtils.keep(\"hello\", (String) null));\n        assertEquals(\"\", CharSetUtils.keep(\"hello\", \"\"));\n        assertEquals(\"\", CharSetUtils.keep(\"hello\", \"xyz\"));\n        assertEquals(\"hello\", CharSetUtils.keep(\"hello\", \"a-z\"));\n        assertEquals(\"hello\", CharSetUtils.keep(\"hello\", \"oleh\"));\n        assertEquals(\"ell\", CharSetUtils.keep(\"hello\", \"el\"));\n    }",
        "begin_line": 155,
        "end_line": 169,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 156,col 9)-(line 156,col 67)",
            "(line 157,col 9)-(line 157,col 56)",
            "(line 159,col 9)-(line 159,col 63)",
            "(line 160,col 9)-(line 160,col 52)",
            "(line 161,col 9)-(line 161,col 55)",
            "(line 163,col 9)-(line 163,col 68)",
            "(line 164,col 9)-(line 164,col 57)",
            "(line 165,col 9)-(line 165,col 60)",
            "(line 166,col 9)-(line 166,col 65)",
            "(line 167,col 9)-(line 167,col 66)",
            "(line 168,col 9)-(line 168,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharSetUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharSetUtilsTest.java",
        "signature": "org.apache.commons.lang.CharSetUtilsTest.testKeep_StringStringarray()",
        "snippet": "    public void testKeep_StringStringarray() {\n        assertEquals(null, CharSetUtils.keep(null, (String[]) null));\n        assertEquals(null, CharSetUtils.keep(null, new String[0]));\n        assertEquals(null, CharSetUtils.keep(null, new String[] {null}));\n        assertEquals(null, CharSetUtils.keep(null, new String[] {\"a-e\"}));\n        \n        assertEquals(\"\", CharSetUtils.keep(\"\", (String[]) null));\n        assertEquals(\"\", CharSetUtils.keep(\"\", new String[0]));\n        assertEquals(\"\", CharSetUtils.keep(\"\", new String[] {null}));\n        assertEquals(\"\", CharSetUtils.keep(\"\", new String[] {\"a-e\"}));\n        \n        assertEquals(\"\", CharSetUtils.keep(\"hello\", (String[]) null));\n        assertEquals(\"\", CharSetUtils.keep(\"hello\", new String[0]));\n        assertEquals(\"\", CharSetUtils.keep(\"hello\", new String[] {null}));\n        assertEquals(\"e\", CharSetUtils.keep(\"hello\", new String[] {\"a-e\"}));\n        \n        assertEquals(\"e\", CharSetUtils.keep(\"hello\", new String[] { \"a-e\" }));\n        assertEquals(\"ell\", CharSetUtils.keep(\"hello\", new String[] { \"el\" }));\n        assertEquals(\"hello\", CharSetUtils.keep(\"hello\", new String[] { \"elho\" }));\n        assertEquals(\"hello\", CharSetUtils.keep(\"hello\", new String[] { \"a-z\" }));\n        assertEquals(\"----\", CharSetUtils.keep(\"----\", new String[] { \"-\" }));\n        assertEquals(\"ll\", CharSetUtils.keep(\"hello\", new String[] { \"l\" }));\n    }",
        "begin_line": 171,
        "end_line": 193,
        "comment": "",
        "child_ranges": [
            "(line 172,col 9)-(line 172,col 69)",
            "(line 173,col 9)-(line 173,col 67)",
            "(line 174,col 9)-(line 174,col 73)",
            "(line 175,col 9)-(line 175,col 74)",
            "(line 177,col 9)-(line 177,col 65)",
            "(line 178,col 9)-(line 178,col 63)",
            "(line 179,col 9)-(line 179,col 69)",
            "(line 180,col 9)-(line 180,col 70)",
            "(line 182,col 9)-(line 182,col 70)",
            "(line 183,col 9)-(line 183,col 68)",
            "(line 184,col 9)-(line 184,col 74)",
            "(line 185,col 9)-(line 185,col 76)",
            "(line 187,col 9)-(line 187,col 78)",
            "(line 188,col 9)-(line 188,col 79)",
            "(line 189,col 9)-(line 189,col 83)",
            "(line 190,col 9)-(line 190,col 82)",
            "(line 191,col 9)-(line 191,col 78)",
            "(line 192,col 9)-(line 192,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharSetUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharSetUtilsTest.java",
        "signature": "org.apache.commons.lang.CharSetUtilsTest.testDelete_StringString()",
        "snippet": "    public void testDelete_StringString() {\n        assertEquals(null, CharSetUtils.delete(null, (String) null));\n        assertEquals(null, CharSetUtils.delete(null, \"\"));\n        \n        assertEquals(\"\", CharSetUtils.delete(\"\", (String) null));\n        assertEquals(\"\", CharSetUtils.delete(\"\", \"\"));\n        assertEquals(\"\", CharSetUtils.delete(\"\", \"a-e\"));\n        \n        assertEquals(\"hello\", CharSetUtils.delete(\"hello\", (String) null));\n        assertEquals(\"hello\", CharSetUtils.delete(\"hello\", \"\"));\n        assertEquals(\"hllo\", CharSetUtils.delete(\"hello\", \"a-e\"));\n        assertEquals(\"he\", CharSetUtils.delete(\"hello\", \"l-p\"));\n        assertEquals(\"hello\", CharSetUtils.delete(\"hello\", \"z\"));\n    }",
        "begin_line": 196,
        "end_line": 209,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 197,col 9)-(line 197,col 69)",
            "(line 198,col 9)-(line 198,col 58)",
            "(line 200,col 9)-(line 200,col 65)",
            "(line 201,col 9)-(line 201,col 54)",
            "(line 202,col 9)-(line 202,col 57)",
            "(line 204,col 9)-(line 204,col 75)",
            "(line 205,col 9)-(line 205,col 64)",
            "(line 206,col 9)-(line 206,col 66)",
            "(line 207,col 9)-(line 207,col 64)",
            "(line 208,col 9)-(line 208,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharSetUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharSetUtilsTest.java",
        "signature": "org.apache.commons.lang.CharSetUtilsTest.testDelete_StringStringarray()",
        "snippet": "    public void testDelete_StringStringarray() {\n        assertEquals(null, CharSetUtils.delete(null, (String[]) null));\n        assertEquals(null, CharSetUtils.delete(null, new String[0]));\n        assertEquals(null, CharSetUtils.delete(null, new String[] {null}));\n        assertEquals(null, CharSetUtils.delete(null, new String[] {\"el\"}));\n        \n        assertEquals(\"\", CharSetUtils.delete(\"\", (String[]) null));\n        assertEquals(\"\", CharSetUtils.delete(\"\", new String[0]));\n        assertEquals(\"\", CharSetUtils.delete(\"\", new String[] {null}));\n        assertEquals(\"\", CharSetUtils.delete(\"\", new String[] {\"a-e\"}));\n        \n        assertEquals(\"hello\", CharSetUtils.delete(\"hello\", (String[]) null));\n        assertEquals(\"hello\", CharSetUtils.delete(\"hello\", new String[0]));\n        assertEquals(\"hello\", CharSetUtils.delete(\"hello\", new String[] {null}));\n        assertEquals(\"hello\", CharSetUtils.delete(\"hello\", new String[] {\"xyz\"}));\n\n        assertEquals(\"ho\", CharSetUtils.delete(\"hello\", new String[] { \"el\" }));\n        assertEquals(\"\", CharSetUtils.delete(\"hello\", new String[] { \"elho\" }));\n        assertEquals(\"hello\", CharSetUtils.delete(\"hello\", new String[] { \"\" }));\n        assertEquals(\"hello\", CharSetUtils.delete(\"hello\", \"\"));\n        assertEquals(\"\", CharSetUtils.delete(\"hello\", new String[] { \"a-z\" }));\n        assertEquals(\"\", CharSetUtils.delete(\"----\", new String[] { \"-\" }));\n        assertEquals(\"heo\", CharSetUtils.delete(\"hello\", new String[] { \"l\" }));\n    }",
        "begin_line": 211,
        "end_line": 234,
        "comment": "",
        "child_ranges": [
            "(line 212,col 9)-(line 212,col 71)",
            "(line 213,col 9)-(line 213,col 69)",
            "(line 214,col 9)-(line 214,col 75)",
            "(line 215,col 9)-(line 215,col 75)",
            "(line 217,col 9)-(line 217,col 67)",
            "(line 218,col 9)-(line 218,col 65)",
            "(line 219,col 9)-(line 219,col 71)",
            "(line 220,col 9)-(line 220,col 72)",
            "(line 222,col 9)-(line 222,col 77)",
            "(line 223,col 9)-(line 223,col 75)",
            "(line 224,col 9)-(line 224,col 81)",
            "(line 225,col 9)-(line 225,col 82)",
            "(line 227,col 9)-(line 227,col 80)",
            "(line 228,col 9)-(line 228,col 80)",
            "(line 229,col 9)-(line 229,col 81)",
            "(line 230,col 9)-(line 230,col 64)",
            "(line 231,col 9)-(line 231,col 79)",
            "(line 232,col 9)-(line 232,col 76)",
            "(line 233,col 9)-(line 233,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharSetUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharSetUtilsTest.java",
        "signature": "org.apache.commons.lang.CharSetUtilsTest.testTranslate()",
        "snippet": "    public void testTranslate() {\n        assertEquals(null, CharSetUtils.translate(null, null, null));\n        assertEquals(\"\", CharSetUtils.translate(\"\", \"a\", \"b\"));\n        assertEquals(\"jelly\", CharSetUtils.translate(\"hello\", \"ho\", \"jy\"));\n        assertEquals(\"jellj\", CharSetUtils.translate(\"hello\", \"ho\", \"j\"));\n        assertEquals(\"jelly\", CharSetUtils.translate(\"hello\", \"ho\", \"jyx\"));\n        assertEquals(\"\\rhello\\r\", CharSetUtils.translate(\"\\nhello\\n\", \"\\n\", \"\\r\"));\n        assertEquals(\"hello\", CharSetUtils.translate(\"hello\", \"\", \"x\"));\n        assertEquals(\"hello\", CharSetUtils.translate(\"hello\", \"\", \"\"));\n        assertEquals(\"hello\", CharSetUtils.translate(\"hello\", \"\", \"\"));\n        // From http://issues.apache.org/bugzilla/show_bug.cgi?id=25454\n        assertEquals(\"q651.506bera\", CharSetUtils.translate(\"d216.102oren\", \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789\",\n                \"nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM567891234\"));\n    }",
        "begin_line": 237,
        "end_line": 250,
        "comment": "",
        "child_ranges": [
            "(line 238,col 9)-(line 238,col 69)",
            "(line 239,col 9)-(line 239,col 63)",
            "(line 240,col 9)-(line 240,col 75)",
            "(line 241,col 9)-(line 241,col 74)",
            "(line 242,col 9)-(line 242,col 76)",
            "(line 243,col 9)-(line 243,col 83)",
            "(line 244,col 9)-(line 244,col 72)",
            "(line 245,col 9)-(line 245,col 71)",
            "(line 246,col 9)-(line 246,col 71)",
            "(line 248,col 9)-(line 249,col 82)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharSetUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharSetUtilsTest.java",
        "signature": "org.apache.commons.lang.CharSetUtilsTest.testTranslateNullPointerException()",
        "snippet": "    public void testTranslateNullPointerException() {\n        try {\n            CharSetUtils.translate(\"hello\", null, null);\n            fail(\"Expecting NullPointerException\");\n        } catch (NullPointerException ex) {\n        }\n        try {\n            CharSetUtils.translate(\"hello\", \"h\", null);\n            fail(\"Expecting NullPointerException\");\n        } catch (NullPointerException ex) {\n        }\n        try {\n            CharSetUtils.translate(\"hello\", null, \"a\");\n            fail(\"Expecting NullPointerException\");\n        } catch (NullPointerException ex) {\n        }\n        try {\n            CharSetUtils.translate(\"hello\", \"h\", \"\");\n            fail(\"Expecting ArrayIndexOutOfBoundsException\");\n        } catch (ArrayIndexOutOfBoundsException ex) {\n        }\n    }",
        "begin_line": 252,
        "end_line": 273,
        "comment": "",
        "child_ranges": [
            "(line 253,col 9)-(line 257,col 9)",
            "(line 258,col 9)-(line 262,col 9)",
            "(line 263,col 9)-(line 267,col 9)",
            "(line 268,col 9)-(line 272,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.IntHashMapTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/IntHashMapTest.java",
        "signature": "org.apache.commons.lang.IntHashMapTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.IntHashMapTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/IntHashMapTest.java",
        "signature": "org.apache.commons.lang.IntHashMapTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(IntHashMapTest.class);\n        suite.setName(\"IntHashMapTest Tests\");\n        return suite;\n    }",
        "begin_line": 36,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 62)",
            "(line 38,col 9)-(line 38,col 46)",
            "(line 39,col 9)-(line 39,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.IntHashMapTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/IntHashMapTest.java",
        "signature": "org.apache.commons.lang.IntHashMapTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        try {\n            new IntHashMap(-1, 0.0f);\n            fail();\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"Illegal Capacity: -1\", e.getMessage());\n        }\n        try {\n            new IntHashMap(1, 0.0f);\n            fail();\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"Illegal Load: 0.0\", e.getMessage());\n        }\n        new IntHashMap(0, 1.0f);\n        \n        try {\n            new IntHashMap(-1);\n            fail();\n        } catch (IllegalArgumentException e) {\n           assertEquals(\"Illegal Capacity: -1\", e.getMessage());\n        }\n        IntHashMap map1 = new IntHashMap(0);\n        assertEquals(0, map1.size());\n    }",
        "begin_line": 42,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 48,col 9)",
            "(line 49,col 9)-(line 54,col 9)",
            "(line 55,col 9)-(line 55,col 32)",
            "(line 57,col 9)-(line 62,col 9)",
            "(line 63,col 9)-(line 63,col 44)",
            "(line 64,col 9)-(line 64,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.IntHashMapTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/IntHashMapTest.java",
        "signature": "org.apache.commons.lang.IntHashMapTest.testClear()",
        "snippet": "    public void testClear() {\n        IntHashMap map = new IntHashMap();\n        assertNull(map.put(1, \"hello\"));\n        assertNull(map.put(2, \"world\"));\n        assertEquals(2, map.size());\n        map.clear();\n        assertEquals(0, map.size());\n    }",
        "begin_line": 67,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 42)",
            "(line 69,col 9)-(line 69,col 40)",
            "(line 70,col 9)-(line 70,col 40)",
            "(line 71,col 9)-(line 71,col 36)",
            "(line 72,col 9)-(line 72,col 20)",
            "(line 73,col 9)-(line 73,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.IntHashMapTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/IntHashMapTest.java",
        "signature": "org.apache.commons.lang.IntHashMapTest.testContainsKey()",
        "snippet": "    public void testContainsKey() {\n        IntHashMap map = new IntHashMap();\n        assertNull(map.put(1, \"hello\"));\n        assertNull(map.put(2, \"world\"));\n        assertEquals(2, map.size());\n        assertTrue(map.containsKey(1));\n        assertTrue(map.containsKey(2));\n        assertFalse(map.containsKey(3));\n    }",
        "begin_line": 76,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 42)",
            "(line 78,col 9)-(line 78,col 40)",
            "(line 79,col 9)-(line 79,col 40)",
            "(line 80,col 9)-(line 80,col 36)",
            "(line 81,col 9)-(line 81,col 39)",
            "(line 82,col 9)-(line 82,col 39)",
            "(line 83,col 9)-(line 83,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.IntHashMapTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/IntHashMapTest.java",
        "signature": "org.apache.commons.lang.IntHashMapTest.testContains()",
        "snippet": "    public void testContains() {\n        IntHashMap map = new IntHashMap();\n        assertNull(map.put(1, \"hello\"));\n        assertNull(map.put(2, \"world\"));\n        assertEquals(2, map.size());\n        assertTrue(map.containsValue(\"hello\"));\n        assertTrue(map.containsValue(\"world\"));\n        assertFalse(map.containsValue(\"goodbye\"));\n        try {\n            map.containsValue(null);\n            fail();\n        } catch(NullPointerException e) {\n      }\n    }",
        "begin_line": 86,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 42)",
            "(line 88,col 9)-(line 88,col 40)",
            "(line 89,col 9)-(line 89,col 40)",
            "(line 90,col 9)-(line 90,col 36)",
            "(line 91,col 9)-(line 91,col 47)",
            "(line 92,col 9)-(line 92,col 47)",
            "(line 93,col 9)-(line 93,col 50)",
            "(line 94,col 9)-(line 98,col 7)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.IntHashMapTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/IntHashMapTest.java",
        "signature": "org.apache.commons.lang.IntHashMapTest.testContainsValue()",
        "snippet": "    public void testContainsValue() {\n        IntHashMap map = new IntHashMap();\n        assertNull(map.put(1, \"hello\"));\n        assertNull(map.put(2, \"world\"));\n        assertEquals(2, map.size());\n        assertTrue(map.containsValue(\"hello\"));\n        assertTrue(map.containsValue(\"world\"));\n        assertFalse(map.containsValue(\"goodbye\"));\n        try {\n            map.containsValue(null);\n            fail();\n        } catch(NullPointerException e) {\n        }\n    }",
        "begin_line": 101,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 42)",
            "(line 103,col 9)-(line 103,col 40)",
            "(line 104,col 9)-(line 104,col 40)",
            "(line 105,col 9)-(line 105,col 36)",
            "(line 106,col 9)-(line 106,col 47)",
            "(line 107,col 9)-(line 107,col 47)",
            "(line 108,col 9)-(line 108,col 50)",
            "(line 109,col 9)-(line 113,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.IntHashMapTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/IntHashMapTest.java",
        "signature": "org.apache.commons.lang.IntHashMapTest.testIsEmpty()",
        "snippet": "    public void testIsEmpty() {\n        IntHashMap map = new IntHashMap();\n        assertTrue(map.isEmpty());\n        assertNull(map.put(1, \"hello\"));\n        assertEquals(1, map.size());\n        assertFalse(map.isEmpty());\n    }",
        "begin_line": 116,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 117,col 9)-(line 117,col 42)",
            "(line 118,col 9)-(line 118,col 34)",
            "(line 119,col 9)-(line 119,col 40)",
            "(line 120,col 9)-(line 120,col 36)",
            "(line 121,col 9)-(line 121,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.IntHashMapTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/IntHashMapTest.java",
        "signature": "org.apache.commons.lang.IntHashMapTest.testPut()",
        "snippet": "    public void testPut() {\n        IntHashMap map = new IntHashMap();\n        assertNull(map.put(1, \"hello\"));\n        assertNull(map.put(2, \"world\"));\n        assertEquals(2, map.size());\n        assertEquals(\"hello\", map.put(1, \"hellooooo\"));\n    }",
        "begin_line": 124,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 42)",
            "(line 126,col 9)-(line 126,col 40)",
            "(line 127,col 9)-(line 127,col 40)",
            "(line 128,col 9)-(line 128,col 36)",
            "(line 129,col 9)-(line 129,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.IntHashMapTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/IntHashMapTest.java",
        "signature": "org.apache.commons.lang.IntHashMapTest.testRemove()",
        "snippet": "    public void testRemove() {\n        IntHashMap map = new IntHashMap();\n        assertNull(map.put(1, \"hello\"));\n        assertNull(map.put(2, \"world\"));\n        assertEquals(2, map.size());\n        assertEquals(\"hello\", map.remove(1));\n        assertEquals(1, map.size());\n        assertNull(map.remove(3));\n    }",
        "begin_line": 132,
        "end_line": 140,
        "comment": "",
        "child_ranges": [
            "(line 133,col 9)-(line 133,col 42)",
            "(line 134,col 9)-(line 134,col 40)",
            "(line 135,col 9)-(line 135,col 40)",
            "(line 136,col 9)-(line 136,col 36)",
            "(line 137,col 9)-(line 137,col 45)",
            "(line 138,col 9)-(line 138,col 36)",
            "(line 139,col 9)-(line 139,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTrimEmptyTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTrimEmptyTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTrimEmptyTest.StringUtilsTrimEmptyTest(java.lang.String)",
        "snippet": "    public StringUtilsTrimEmptyTest(String name) {\n        super(name);\n    }",
        "begin_line": 34,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTrimEmptyTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTrimEmptyTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTrimEmptyTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTrimEmptyTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTrimEmptyTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTrimEmptyTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(StringUtilsTrimEmptyTest.class);\n        suite.setName(\"StringUtilsTrimEmpty Tests\");\n        return suite;\n    }",
        "begin_line": 42,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 72)",
            "(line 44,col 9)-(line 44,col 52)",
            "(line 45,col 9)-(line 45,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTrimEmptyTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTrimEmptyTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTrimEmptyTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        super.setUp();\n    }",
        "begin_line": 48,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTrimEmptyTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTrimEmptyTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTrimEmptyTest.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        super.tearDown();\n    }",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTrimEmptyTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTrimEmptyTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTrimEmptyTest.testIsEmpty()",
        "snippet": "    public void testIsEmpty() {\n        assertEquals(true, StringUtils.isEmpty(null));\n        assertEquals(true, StringUtils.isEmpty(\"\"));\n        assertEquals(false, StringUtils.isEmpty(\" \"));\n        assertEquals(false, StringUtils.isEmpty(\"foo\"));\n        assertEquals(false, StringUtils.isEmpty(\"  foo  \"));\n    }",
        "begin_line": 57,
        "end_line": 63,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 58,col 9)-(line 58,col 54)",
            "(line 59,col 9)-(line 59,col 52)",
            "(line 60,col 9)-(line 60,col 54)",
            "(line 61,col 9)-(line 61,col 56)",
            "(line 62,col 9)-(line 62,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTrimEmptyTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTrimEmptyTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTrimEmptyTest.testIsNotEmpty()",
        "snippet": "    public void testIsNotEmpty() {\n        assertEquals(false, StringUtils.isNotEmpty(null));\n        assertEquals(false, StringUtils.isNotEmpty(\"\"));\n        assertEquals(true, StringUtils.isNotEmpty(\" \"));\n        assertEquals(true, StringUtils.isNotEmpty(\"foo\"));\n        assertEquals(true, StringUtils.isNotEmpty(\"  foo  \"));\n    }",
        "begin_line": 65,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 58)",
            "(line 67,col 9)-(line 67,col 56)",
            "(line 68,col 9)-(line 68,col 56)",
            "(line 69,col 9)-(line 69,col 58)",
            "(line 70,col 9)-(line 70,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTrimEmptyTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTrimEmptyTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTrimEmptyTest.testIsBlank()",
        "snippet": "    public void testIsBlank() {\n        assertEquals(true, StringUtils.isBlank(null));\n        assertEquals(true, StringUtils.isBlank(\"\"));\n        assertEquals(true, StringUtils.isBlank(StringUtilsTest.WHITESPACE));\n        assertEquals(false, StringUtils.isBlank(\"foo\"));\n        assertEquals(false, StringUtils.isBlank(\"  foo  \"));\n    }",
        "begin_line": 73,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 54)",
            "(line 75,col 9)-(line 75,col 52)",
            "(line 76,col 9)-(line 76,col 76)",
            "(line 77,col 9)-(line 77,col 56)",
            "(line 78,col 9)-(line 78,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTrimEmptyTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTrimEmptyTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTrimEmptyTest.testIsNotBlank()",
        "snippet": "    public void testIsNotBlank() {\n        assertEquals(false, StringUtils.isNotBlank(null));\n        assertEquals(false, StringUtils.isNotBlank(\"\"));\n        assertEquals(false, StringUtils.isNotBlank(StringUtilsTest.WHITESPACE));\n        assertEquals(true, StringUtils.isNotBlank(\"foo\"));\n        assertEquals(true, StringUtils.isNotBlank(\"  foo  \"));\n    }",
        "begin_line": 81,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 58)",
            "(line 83,col 9)-(line 83,col 56)",
            "(line 84,col 9)-(line 84,col 80)",
            "(line 85,col 9)-(line 85,col 58)",
            "(line 86,col 9)-(line 86,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTrimEmptyTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTrimEmptyTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTrimEmptyTest.testDeprecatedClean()",
        "snippet": "    public void testDeprecatedClean() {\n        assertEquals(FOO, StringUtils.clean(FOO + \"  \"));\n        assertEquals(FOO, StringUtils.clean(\" \" + FOO + \"  \"));\n        assertEquals(FOO, StringUtils.clean(\" \" + FOO));\n        assertEquals(FOO, StringUtils.clean(FOO + \"\"));\n        assertEquals(\"\", StringUtils.clean(\" \\t\\r\\n\\b \"));\n        assertEquals(\"\", StringUtils.clean(\"\"));\n        assertEquals(\"\", StringUtils.clean(null));\n    }",
        "begin_line": 90,
        "end_line": 98,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 57)",
            "(line 92,col 9)-(line 92,col 63)",
            "(line 93,col 9)-(line 93,col 56)",
            "(line 94,col 9)-(line 94,col 55)",
            "(line 95,col 9)-(line 95,col 58)",
            "(line 96,col 9)-(line 96,col 48)",
            "(line 97,col 9)-(line 97,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTrimEmptyTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTrimEmptyTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTrimEmptyTest.testTrim()",
        "snippet": "    public void testTrim() {\n        assertEquals(FOO, StringUtils.trim(FOO + \"  \"));\n        assertEquals(FOO, StringUtils.trim(\" \" + FOO + \"  \"));\n        assertEquals(FOO, StringUtils.trim(\" \" + FOO));\n        assertEquals(FOO, StringUtils.trim(FOO + \"\"));\n        assertEquals(\"\", StringUtils.trim(\" \\t\\r\\n\\b \"));\n        assertEquals(\"\", StringUtils.trim(StringUtilsTest.TRIMMABLE));\n        assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trim(StringUtilsTest.NON_TRIMMABLE));\n        assertEquals(\"\", StringUtils.trim(\"\"));\n        assertEquals(null, StringUtils.trim(null));\n    }",
        "begin_line": 100,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 56)",
            "(line 102,col 9)-(line 102,col 62)",
            "(line 103,col 9)-(line 103,col 55)",
            "(line 104,col 9)-(line 104,col 54)",
            "(line 105,col 9)-(line 105,col 57)",
            "(line 106,col 9)-(line 106,col 70)",
            "(line 107,col 9)-(line 107,col 101)",
            "(line 108,col 9)-(line 108,col 47)",
            "(line 109,col 9)-(line 109,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTrimEmptyTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTrimEmptyTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTrimEmptyTest.testTrimToNull()",
        "snippet": "    public void testTrimToNull() {\n        assertEquals(FOO, StringUtils.trimToNull(FOO + \"  \"));\n        assertEquals(FOO, StringUtils.trimToNull(\" \" + FOO + \"  \"));\n        assertEquals(FOO, StringUtils.trimToNull(\" \" + FOO));\n        assertEquals(FOO, StringUtils.trimToNull(FOO + \"\"));\n        assertEquals(null, StringUtils.trimToNull(\" \\t\\r\\n\\b \"));\n        assertEquals(null, StringUtils.trimToNull(StringUtilsTest.TRIMMABLE));\n        assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trimToNull(StringUtilsTest.NON_TRIMMABLE));\n        assertEquals(null, StringUtils.trimToNull(\"\"));\n        assertEquals(null, StringUtils.trimToNull(null));\n    }",
        "begin_line": 112,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 62)",
            "(line 114,col 9)-(line 114,col 68)",
            "(line 115,col 9)-(line 115,col 61)",
            "(line 116,col 9)-(line 116,col 60)",
            "(line 117,col 9)-(line 117,col 65)",
            "(line 118,col 9)-(line 118,col 78)",
            "(line 119,col 9)-(line 119,col 107)",
            "(line 120,col 9)-(line 120,col 55)",
            "(line 121,col 9)-(line 121,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTrimEmptyTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTrimEmptyTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTrimEmptyTest.testTrimToEmpty()",
        "snippet": "    public void testTrimToEmpty() {\n        assertEquals(FOO, StringUtils.trimToEmpty(FOO + \"  \"));\n        assertEquals(FOO, StringUtils.trimToEmpty(\" \" + FOO + \"  \"));\n        assertEquals(FOO, StringUtils.trimToEmpty(\" \" + FOO));\n        assertEquals(FOO, StringUtils.trimToEmpty(FOO + \"\"));\n        assertEquals(\"\", StringUtils.trimToEmpty(\" \\t\\r\\n\\b \"));\n        assertEquals(\"\", StringUtils.trimToEmpty(StringUtilsTest.TRIMMABLE));\n        assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trimToEmpty(StringUtilsTest.NON_TRIMMABLE));\n        assertEquals(\"\", StringUtils.trimToEmpty(\"\"));\n        assertEquals(\"\", StringUtils.trimToEmpty(null));\n    }",
        "begin_line": 124,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 63)",
            "(line 126,col 9)-(line 126,col 69)",
            "(line 127,col 9)-(line 127,col 62)",
            "(line 128,col 9)-(line 128,col 61)",
            "(line 129,col 9)-(line 129,col 64)",
            "(line 130,col 9)-(line 130,col 77)",
            "(line 131,col 9)-(line 131,col 108)",
            "(line 132,col 9)-(line 132,col 54)",
            "(line 133,col 9)-(line 133,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTrimEmptyTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTrimEmptyTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTrimEmptyTest.testStrip_String()",
        "snippet": "    public void testStrip_String() {\n        assertEquals(null, StringUtils.strip(null));\n        assertEquals(\"\", StringUtils.strip(\"\"));\n        assertEquals(\"\", StringUtils.strip(\"        \"));\n        assertEquals(\"abc\", StringUtils.strip(\"  abc  \"));\n        assertEquals(StringUtilsTest.NON_WHITESPACE, \n            StringUtils.strip(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE));\n    }",
        "begin_line": 137,
        "end_line": 144,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 138,col 9)-(line 138,col 52)",
            "(line 139,col 9)-(line 139,col 48)",
            "(line 140,col 9)-(line 140,col 56)",
            "(line 141,col 9)-(line 141,col 58)",
            "(line 142,col 9)-(line 143,col 121)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTrimEmptyTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTrimEmptyTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTrimEmptyTest.testStripToNull_String()",
        "snippet": "    public void testStripToNull_String() {\n        assertEquals(null, StringUtils.stripToNull(null));\n        assertEquals(null, StringUtils.stripToNull(\"\"));\n        assertEquals(null, StringUtils.stripToNull(\"        \"));\n        assertEquals(null, StringUtils.stripToNull(StringUtilsTest.WHITESPACE));\n        assertEquals(\"ab c\", StringUtils.stripToNull(\"  ab c  \"));\n        assertEquals(StringUtilsTest.NON_WHITESPACE, \n            StringUtils.stripToNull(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE));\n    }",
        "begin_line": 146,
        "end_line": 154,
        "comment": "",
        "child_ranges": [
            "(line 147,col 9)-(line 147,col 58)",
            "(line 148,col 9)-(line 148,col 56)",
            "(line 149,col 9)-(line 149,col 64)",
            "(line 150,col 9)-(line 150,col 80)",
            "(line 151,col 9)-(line 151,col 66)",
            "(line 152,col 9)-(line 153,col 127)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTrimEmptyTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTrimEmptyTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTrimEmptyTest.testStripToEmpty_String()",
        "snippet": "    public void testStripToEmpty_String() {\n        assertEquals(\"\", StringUtils.stripToEmpty(null));\n        assertEquals(\"\", StringUtils.stripToEmpty(\"\"));\n        assertEquals(\"\", StringUtils.stripToEmpty(\"        \"));\n        assertEquals(\"\", StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE));\n        assertEquals(\"ab c\", StringUtils.stripToEmpty(\"  ab c  \"));\n        assertEquals(StringUtilsTest.NON_WHITESPACE, \n            StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE));\n    }",
        "begin_line": 156,
        "end_line": 164,
        "comment": "",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 57)",
            "(line 158,col 9)-(line 158,col 55)",
            "(line 159,col 9)-(line 159,col 63)",
            "(line 160,col 9)-(line 160,col 79)",
            "(line 161,col 9)-(line 161,col 67)",
            "(line 162,col 9)-(line 163,col 128)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTrimEmptyTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTrimEmptyTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTrimEmptyTest.testStrip_StringString()",
        "snippet": "    public void testStrip_StringString() {\n        // null strip\n        assertEquals(null, StringUtils.strip(null, null));\n        assertEquals(\"\", StringUtils.strip(\"\", null));\n        assertEquals(\"\", StringUtils.strip(\"        \", null));\n        assertEquals(\"abc\", StringUtils.strip(\"  abc  \", null));\n        assertEquals(StringUtilsTest.NON_WHITESPACE, \n            StringUtils.strip(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null));\n\n        // \"\" strip\n        assertEquals(null, StringUtils.strip(null, \"\"));\n        assertEquals(\"\", StringUtils.strip(\"\", \"\"));\n        assertEquals(\"        \", StringUtils.strip(\"        \", \"\"));\n        assertEquals(\"  abc  \", StringUtils.strip(\"  abc  \", \"\"));\n        assertEquals(StringUtilsTest.WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE, \"\"));\n        \n        // \" \" strip\n        assertEquals(null, StringUtils.strip(null, \" \"));\n        assertEquals(\"\", StringUtils.strip(\"\", \" \"));\n        assertEquals(\"\", StringUtils.strip(\"        \", \" \"));\n        assertEquals(\"abc\", StringUtils.strip(\"  abc  \", \" \"));\n        \n        // \"ab\" strip\n        assertEquals(null, StringUtils.strip(null, \"ab\"));\n        assertEquals(\"\", StringUtils.strip(\"\", \"ab\"));\n        assertEquals(\"        \", StringUtils.strip(\"        \", \"ab\"));\n        assertEquals(\"  abc  \", StringUtils.strip(\"  abc  \", \"ab\"));\n        assertEquals(\"c\", StringUtils.strip(\"abcabab\", \"ab\"));\n        assertEquals(StringUtilsTest.WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE, \"\"));\n    }",
        "begin_line": 166,
        "end_line": 195,
        "comment": "",
        "child_ranges": [
            "(line 168,col 9)-(line 168,col 58)",
            "(line 169,col 9)-(line 169,col 54)",
            "(line 170,col 9)-(line 170,col 62)",
            "(line 171,col 9)-(line 171,col 64)",
            "(line 172,col 9)-(line 173,col 127)",
            "(line 176,col 9)-(line 176,col 56)",
            "(line 177,col 9)-(line 177,col 52)",
            "(line 178,col 9)-(line 178,col 68)",
            "(line 179,col 9)-(line 179,col 66)",
            "(line 180,col 9)-(line 180,col 100)",
            "(line 183,col 9)-(line 183,col 57)",
            "(line 184,col 9)-(line 184,col 53)",
            "(line 185,col 9)-(line 185,col 61)",
            "(line 186,col 9)-(line 186,col 63)",
            "(line 189,col 9)-(line 189,col 58)",
            "(line 190,col 9)-(line 190,col 54)",
            "(line 191,col 9)-(line 191,col 70)",
            "(line 192,col 9)-(line 192,col 68)",
            "(line 193,col 9)-(line 193,col 62)",
            "(line 194,col 9)-(line 194,col 100)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTrimEmptyTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTrimEmptyTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTrimEmptyTest.testStripStart_StringString()",
        "snippet": "    public void testStripStart_StringString() {\n        // null stripStart\n        assertEquals(null, StringUtils.stripStart(null, null));\n        assertEquals(\"\", StringUtils.stripStart(\"\", null));\n        assertEquals(\"\", StringUtils.stripStart(\"        \", null));\n        assertEquals(\"abc  \", StringUtils.stripStart(\"  abc  \", null));\n        assertEquals(StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, \n            StringUtils.stripStart(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null));\n\n        // \"\" stripStart\n        assertEquals(null, StringUtils.stripStart(null, \"\"));\n        assertEquals(\"\", StringUtils.stripStart(\"\", \"\"));\n        assertEquals(\"        \", StringUtils.stripStart(\"        \", \"\"));\n        assertEquals(\"  abc  \", StringUtils.stripStart(\"  abc  \", \"\"));\n        assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripStart(StringUtilsTest.WHITESPACE, \"\"));\n        \n        // \" \" stripStart\n        assertEquals(null, StringUtils.stripStart(null, \" \"));\n        assertEquals(\"\", StringUtils.stripStart(\"\", \" \"));\n        assertEquals(\"\", StringUtils.stripStart(\"        \", \" \"));\n        assertEquals(\"abc  \", StringUtils.stripStart(\"  abc  \", \" \"));\n        \n        // \"ab\" stripStart\n        assertEquals(null, StringUtils.stripStart(null, \"ab\"));\n        assertEquals(\"\", StringUtils.stripStart(\"\", \"ab\"));\n        assertEquals(\"        \", StringUtils.stripStart(\"        \", \"ab\"));\n        assertEquals(\"  abc  \", StringUtils.stripStart(\"  abc  \", \"ab\"));\n        assertEquals(\"cabab\", StringUtils.stripStart(\"abcabab\", \"ab\"));\n        assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripStart(StringUtilsTest.WHITESPACE, \"\"));\n    }",
        "begin_line": 197,
        "end_line": 226,
        "comment": "",
        "child_ranges": [
            "(line 199,col 9)-(line 199,col 63)",
            "(line 200,col 9)-(line 200,col 59)",
            "(line 201,col 9)-(line 201,col 67)",
            "(line 202,col 9)-(line 202,col 71)",
            "(line 203,col 9)-(line 204,col 132)",
            "(line 207,col 9)-(line 207,col 61)",
            "(line 208,col 9)-(line 208,col 57)",
            "(line 209,col 9)-(line 209,col 73)",
            "(line 210,col 9)-(line 210,col 71)",
            "(line 211,col 9)-(line 211,col 105)",
            "(line 214,col 9)-(line 214,col 62)",
            "(line 215,col 9)-(line 215,col 58)",
            "(line 216,col 9)-(line 216,col 66)",
            "(line 217,col 9)-(line 217,col 70)",
            "(line 220,col 9)-(line 220,col 63)",
            "(line 221,col 9)-(line 221,col 59)",
            "(line 222,col 9)-(line 222,col 75)",
            "(line 223,col 9)-(line 223,col 73)",
            "(line 224,col 9)-(line 224,col 71)",
            "(line 225,col 9)-(line 225,col 105)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTrimEmptyTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTrimEmptyTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTrimEmptyTest.testStripEnd_StringString()",
        "snippet": "    public void testStripEnd_StringString() {\n        // null stripEnd\n        assertEquals(null, StringUtils.stripEnd(null, null));\n        assertEquals(\"\", StringUtils.stripEnd(\"\", null));\n        assertEquals(\"\", StringUtils.stripEnd(\"        \", null));\n        assertEquals(\"  abc\", StringUtils.stripEnd(\"  abc  \", null));\n        assertEquals(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE, \n            StringUtils.stripEnd(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null));\n\n        // \"\" stripEnd\n        assertEquals(null, StringUtils.stripEnd(null, \"\"));\n        assertEquals(\"\", StringUtils.stripEnd(\"\", \"\"));\n        assertEquals(\"        \", StringUtils.stripEnd(\"        \", \"\"));\n        assertEquals(\"  abc  \", StringUtils.stripEnd(\"  abc  \", \"\"));\n        assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripEnd(StringUtilsTest.WHITESPACE, \"\"));\n        \n        // \" \" stripEnd\n        assertEquals(null, StringUtils.stripEnd(null, \" \"));\n        assertEquals(\"\", StringUtils.stripEnd(\"\", \" \"));\n        assertEquals(\"\", StringUtils.stripEnd(\"        \", \" \"));\n        assertEquals(\"  abc\", StringUtils.stripEnd(\"  abc  \", \" \"));\n        \n        // \"ab\" stripEnd\n        assertEquals(null, StringUtils.stripEnd(null, \"ab\"));\n        assertEquals(\"\", StringUtils.stripEnd(\"\", \"ab\"));\n        assertEquals(\"        \", StringUtils.stripEnd(\"        \", \"ab\"));\n        assertEquals(\"  abc  \", StringUtils.stripEnd(\"  abc  \", \"ab\"));\n        assertEquals(\"abc\", StringUtils.stripEnd(\"abcabab\", \"ab\"));\n        assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripEnd(StringUtilsTest.WHITESPACE, \"\"));\n    }",
        "begin_line": 228,
        "end_line": 257,
        "comment": "",
        "child_ranges": [
            "(line 230,col 9)-(line 230,col 61)",
            "(line 231,col 9)-(line 231,col 57)",
            "(line 232,col 9)-(line 232,col 65)",
            "(line 233,col 9)-(line 233,col 69)",
            "(line 234,col 9)-(line 235,col 130)",
            "(line 238,col 9)-(line 238,col 59)",
            "(line 239,col 9)-(line 239,col 55)",
            "(line 240,col 9)-(line 240,col 71)",
            "(line 241,col 9)-(line 241,col 69)",
            "(line 242,col 9)-(line 242,col 103)",
            "(line 245,col 9)-(line 245,col 60)",
            "(line 246,col 9)-(line 246,col 56)",
            "(line 247,col 9)-(line 247,col 64)",
            "(line 248,col 9)-(line 248,col 68)",
            "(line 251,col 9)-(line 251,col 61)",
            "(line 252,col 9)-(line 252,col 57)",
            "(line 253,col 9)-(line 253,col 73)",
            "(line 254,col 9)-(line 254,col 71)",
            "(line 255,col 9)-(line 255,col 67)",
            "(line 256,col 9)-(line 256,col 103)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTrimEmptyTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTrimEmptyTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTrimEmptyTest.testStripAll()",
        "snippet": "    public void testStripAll() {\n        // test stripAll method, merely an array version of the above strip\n        String[] empty = new String[0];\n        String[] fooSpace = new String[] { \"  \"+FOO+\"  \", \"  \"+FOO, FOO+\"  \" };\n        String[] fooDots = new String[] { \"..\"+FOO+\"..\", \"..\"+FOO, FOO+\"..\" };\n        String[] foo = new String[] { FOO, FOO, FOO };\n\n        assertEquals(null, StringUtils.stripAll(null));\n        assertArrayEquals(empty, StringUtils.stripAll(empty));\n        assertArrayEquals(foo, StringUtils.stripAll(fooSpace));\n        \n        assertEquals(null, StringUtils.stripAll(null, null));\n        assertArrayEquals(foo, StringUtils.stripAll(fooSpace, null));\n        assertArrayEquals(foo, StringUtils.stripAll(fooDots, \".\"));\n    }",
        "begin_line": 259,
        "end_line": 273,
        "comment": "",
        "child_ranges": [
            "(line 261,col 9)-(line 261,col 39)",
            "(line 262,col 9)-(line 262,col 79)",
            "(line 263,col 9)-(line 263,col 78)",
            "(line 264,col 9)-(line 264,col 54)",
            "(line 266,col 9)-(line 266,col 55)",
            "(line 267,col 9)-(line 267,col 62)",
            "(line 268,col 9)-(line 268,col 63)",
            "(line 270,col 9)-(line 270,col 61)",
            "(line 271,col 9)-(line 271,col 69)",
            "(line 272,col 9)-(line 272,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTrimEmptyTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTrimEmptyTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTrimEmptyTest.assertArrayEquals(java.lang.Object[], java.lang.Object[])",
        "snippet": "    private void assertArrayEquals(Object[] o1, Object[] o2) {\n        if(o1 == null) {\n            assertEquals(o1,o2);\n            return;\n        }\n        assertEquals(\"Length not equal. \", o1.length, o2.length);\n        int sz = o1.length;\n        for(int i=0; i<sz; i++) {\n            if(o1[i] instanceof Object[]) {\n                // do an assert equals on type....\n                assertArrayEquals( (Object[]) o1[i], (Object[]) o2[i] );\n            } else {\n                assertEquals(o1[i], o2[i]);\n            }\n        }\n    }",
        "begin_line": 275,
        "end_line": 290,
        "comment": "",
        "child_ranges": [
            "(line 276,col 9)-(line 279,col 9)",
            "(line 280,col 9)-(line 280,col 65)",
            "(line 281,col 9)-(line 281,col 27)",
            "(line 282,col 9)-(line 289,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharUtilsPerfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharUtilsPerfTest.java",
        "signature": "org.apache.commons.lang.CharUtilsPerfTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        new CharUtilsPerfTest().run();\n    }",
        "begin_line": 74,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharUtilsPerfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharUtilsPerfTest.java",
        "signature": "org.apache.commons.lang.CharUtilsPerfTest.printSysInfo()",
        "snippet": "    private void printSysInfo() {\n        System.out.println(VERSION);\n        System.out.println(\"Now: \" + Calendar.getInstance().getTime());\n        System.out.println(System.getProperty(\"java.vendor\")\n                + \" \"\n                + System.getProperty(\"java.runtime.name\")\n                + \" \"\n                + System.getProperty(\"java.runtime.version\"));\n        System.out.println(System.getProperty(\"java.vm.vendor\")\n                + \" \"\n                + System.getProperty(\"java.vm.name\")\n                + \" \"\n                + System.getProperty(\"java.vm.version\"));\n        System.out.println(System.getProperty(\"os.name\")\n            + \" \"\n            + System.getProperty(\"os.version\")\n            + \" \"\n            + System.getProperty(\"os.arch\")\n            + \" \"\n            + System.getProperty(\"sun.cpu.isalist\"));\n    }",
        "begin_line": 78,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 36)",
            "(line 80,col 9)-(line 80,col 71)",
            "(line 81,col 9)-(line 85,col 62)",
            "(line 86,col 9)-(line 90,col 57)",
            "(line 91,col 9)-(line 97,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharUtilsPerfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharUtilsPerfTest.java",
        "signature": "org.apache.commons.lang.CharUtilsPerfTest.run()",
        "snippet": "    private void run() {\n        this.printSysInfo();\n        long start;\n        start = System.currentTimeMillis();\n        this.printlnTotal(\"Do nohting\", start);\n        //System.out.println(\"Warming up...\");\n        run_CharUtils_isAsciiNumeric(WARM_UP);\n        //System.out.println(\"Measuring...\");\n        start = System.currentTimeMillis();\n        run_CharUtils_isAsciiNumeric(COUNT);\n        this.printlnTotal(\"run_CharUtils_isAsciiNumeric\", start);\n        //System.out.println(\"Warming up...\");\n        run_inlined_CharUtils_isAsciiNumeric(WARM_UP);\n        //System.out.println(\"Measuring...\");\n        start = System.currentTimeMillis();\n        run_inlined_CharUtils_isAsciiNumeric(COUNT);\n        this.printlnTotal(\"run_inlined_CharUtils_isAsciiNumeric\", start);\n        //System.out.println(\"Warming up...\");\n        run_CharSet(WARM_UP);\n        //System.out.println(\"Measuring...\");\n        start = System.currentTimeMillis();\n        run_CharSet(COUNT);\n        this.printlnTotal(\"run_CharSet\", start);\n    }",
        "begin_line": 100,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 28)",
            "(line 102,col 9)-(line 102,col 19)",
            "(line 103,col 9)-(line 103,col 43)",
            "(line 104,col 9)-(line 104,col 47)",
            "(line 106,col 9)-(line 106,col 46)",
            "(line 108,col 9)-(line 108,col 43)",
            "(line 109,col 9)-(line 109,col 44)",
            "(line 110,col 9)-(line 110,col 65)",
            "(line 112,col 9)-(line 112,col 54)",
            "(line 114,col 9)-(line 114,col 43)",
            "(line 115,col 9)-(line 115,col 52)",
            "(line 116,col 9)-(line 116,col 73)",
            "(line 118,col 9)-(line 118,col 29)",
            "(line 120,col 9)-(line 120,col 43)",
            "(line 121,col 9)-(line 121,col 27)",
            "(line 122,col 9)-(line 122,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharUtilsPerfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharUtilsPerfTest.java",
        "signature": "org.apache.commons.lang.CharUtilsPerfTest.run_CharSet(int)",
        "snippet": "    private int run_CharSet(int loopCount) {\n        int t = 0;\n        for (int i = 0; i < loopCount; i++) {\n            for (int j = 0; j < CHAR_SAMPLES.length; j++) {\n                char ch = CHAR_SAMPLES[j];\n                boolean b = CharSet.ASCII_NUMERIC.contains(ch);\n                t += b ? 1 : 0;\n            }\n        }\n        return t;\n    }",
        "begin_line": 125,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 126,col 9)-(line 126,col 18)",
            "(line 127,col 9)-(line 133,col 9)",
            "(line 134,col 9)-(line 134,col 17)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharUtilsPerfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharUtilsPerfTest.java",
        "signature": "org.apache.commons.lang.CharUtilsPerfTest.run_CharUtils_isAsciiNumeric(int)",
        "snippet": "    private int run_CharUtils_isAsciiNumeric(int loopCount) {\n        int t = 0;\n        for (int i = 0; i < loopCount; i++) {\n            for (int j = 0; j < CHAR_SAMPLES.length; j++) {\n                char ch = CHAR_SAMPLES[j];\n                boolean b = CharUtils.isAsciiNumeric(ch);\n                t += b ? 1 : 0;\n            }\n        }\n        return t;\n    }",
        "begin_line": 137,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 138,col 9)-(line 138,col 18)",
            "(line 139,col 9)-(line 145,col 9)",
            "(line 146,col 9)-(line 146,col 17)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharUtilsPerfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharUtilsPerfTest.java",
        "signature": "org.apache.commons.lang.CharUtilsPerfTest.run_inlined_CharUtils_isAsciiNumeric(int)",
        "snippet": "    private int run_inlined_CharUtils_isAsciiNumeric(int loopCount) {\n        int t = 0;\n        for (int i = 0; i < loopCount; i++) {\n            for (int j = 0; j < CHAR_SAMPLES.length; j++) {\n                char ch = CHAR_SAMPLES[j];\n                boolean b = (ch >= '0' && ch <= '9');\n                t += b ? 1 : 0;\n            }\n        }\n        return t;\n    }",
        "begin_line": 149,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 150,col 9)-(line 150,col 18)",
            "(line 151,col 9)-(line 157,col 9)",
            "(line 158,col 9)-(line 158,col 17)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.CharUtilsPerfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/CharUtilsPerfTest.java",
        "signature": "org.apache.commons.lang.CharUtilsPerfTest.printlnTotal(java.lang.String, long)",
        "snippet": "    private void printlnTotal(String prefix, long start) {\n        long total = System.currentTimeMillis() - start;\n        System.out.println(prefix + \": \" + NumberFormat.getInstance().format(total) + \" milliseconds.\");\n    }",
        "begin_line": 161,
        "end_line": 164,
        "comment": "",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 56)",
            "(line 163,col 9)-(line 163,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.StringUtilsEqualsIndexOfTest(java.lang.String)",
        "snippet": "    public StringUtilsEqualsIndexOfTest(String name) {\n        super(name);\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(StringUtilsEqualsIndexOfTest.class);\n        suite.setName(\"StringUtilsEqualsIndexOf Tests\");\n        return suite;\n    }",
        "begin_line": 46,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 76)",
            "(line 48,col 9)-(line 48,col 56)",
            "(line 49,col 9)-(line 49,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        super.setUp();\n    }",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        super.tearDown();\n    }",
        "begin_line": 56,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testEquals()",
        "snippet": "    public void testEquals() {\n        assertEquals(true, StringUtils.equals(null, null));\n        assertEquals(true, StringUtils.equals(FOO, FOO));\n        assertEquals(true, StringUtils.equals(FOO, new String(new char[] { 'f', 'o', 'o' })));\n        assertEquals(false, StringUtils.equals(FOO, new String(new char[] { 'f', 'O', 'O' })));\n        assertEquals(false, StringUtils.equals(FOO, BAR));\n        assertEquals(false, StringUtils.equals(FOO, null));\n        assertEquals(false, StringUtils.equals(null, FOO));\n    }",
        "begin_line": 62,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 59)",
            "(line 64,col 9)-(line 64,col 57)",
            "(line 65,col 9)-(line 65,col 94)",
            "(line 66,col 9)-(line 66,col 95)",
            "(line 67,col 9)-(line 67,col 58)",
            "(line 68,col 9)-(line 68,col 59)",
            "(line 69,col 9)-(line 69,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testEqualsIgnoreCase()",
        "snippet": "    public void testEqualsIgnoreCase() {\n        assertEquals(true, StringUtils.equalsIgnoreCase(null, null));\n        assertEquals(true, StringUtils.equalsIgnoreCase(FOO, FOO));\n        assertEquals(true, StringUtils.equalsIgnoreCase(FOO, new String(new char[] { 'f', 'o', 'o' })));\n        assertEquals(true, StringUtils.equalsIgnoreCase(FOO, new String(new char[] { 'f', 'O', 'O' })));\n        assertEquals(false, StringUtils.equalsIgnoreCase(FOO, BAR));\n        assertEquals(false, StringUtils.equalsIgnoreCase(FOO, null));\n        assertEquals(false, StringUtils.equalsIgnoreCase(null, FOO));\n    }",
        "begin_line": 72,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 69)",
            "(line 74,col 9)-(line 74,col 67)",
            "(line 75,col 9)-(line 75,col 104)",
            "(line 76,col 9)-(line 76,col 104)",
            "(line 77,col 9)-(line 77,col 68)",
            "(line 78,col 9)-(line 78,col 69)",
            "(line 79,col 9)-(line 79,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testIndexOf_char()",
        "snippet": "    public void testIndexOf_char() {\n        assertEquals(-1, StringUtils.indexOf(null, ' '));\n        assertEquals(-1, StringUtils.indexOf(\"\", ' '));\n        assertEquals(0, StringUtils.indexOf(\"aabaabaa\", 'a'));\n        assertEquals(2, StringUtils.indexOf(\"aabaabaa\", 'b'));\n    }",
        "begin_line": 83,
        "end_line": 88,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 57)",
            "(line 85,col 9)-(line 85,col 55)",
            "(line 86,col 9)-(line 86,col 62)",
            "(line 87,col 9)-(line 87,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testIndexOf_charInt()",
        "snippet": "    public void testIndexOf_charInt() {\n        assertEquals(-1, StringUtils.indexOf(null, ' ', 0));\n        assertEquals(-1, StringUtils.indexOf(null, ' ', -1));\n        assertEquals(-1, StringUtils.indexOf(\"\", ' ', 0));\n        assertEquals(-1, StringUtils.indexOf(\"\", ' ', -1));\n        assertEquals(0, StringUtils.indexOf(\"aabaabaa\", 'a', 0));\n        assertEquals(2, StringUtils.indexOf(\"aabaabaa\", 'b', 0));\n        assertEquals(5, StringUtils.indexOf(\"aabaabaa\", 'b', 3));\n        assertEquals(-1, StringUtils.indexOf(\"aabaabaa\", 'b', 9));\n        assertEquals(2, StringUtils.indexOf(\"aabaabaa\", 'b', -1));\n    }",
        "begin_line": 90,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 60)",
            "(line 92,col 9)-(line 92,col 61)",
            "(line 93,col 9)-(line 93,col 58)",
            "(line 94,col 9)-(line 94,col 59)",
            "(line 95,col 9)-(line 95,col 65)",
            "(line 96,col 9)-(line 96,col 65)",
            "(line 97,col 9)-(line 97,col 65)",
            "(line 98,col 9)-(line 98,col 66)",
            "(line 99,col 9)-(line 99,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testIndexOf_String()",
        "snippet": "    public void testIndexOf_String() {\n        assertEquals(-1, StringUtils.indexOf(null, null));\n        assertEquals(-1, StringUtils.indexOf(\"\", null));\n        assertEquals(0, StringUtils.indexOf(\"\", \"\"));\n        assertEquals(0, StringUtils.indexOf(\"aabaabaa\", \"a\"));\n        assertEquals(2, StringUtils.indexOf(\"aabaabaa\", \"b\"));\n        assertEquals(1, StringUtils.indexOf(\"aabaabaa\", \"ab\"));\n        assertEquals(0, StringUtils.indexOf(\"aabaabaa\", \"\"));\n    }",
        "begin_line": 102,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 58)",
            "(line 104,col 9)-(line 104,col 56)",
            "(line 105,col 9)-(line 105,col 53)",
            "(line 106,col 9)-(line 106,col 62)",
            "(line 107,col 9)-(line 107,col 62)",
            "(line 108,col 9)-(line 108,col 63)",
            "(line 109,col 9)-(line 109,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testOrdinalIndexOf()",
        "snippet": "    public void testOrdinalIndexOf() {\n        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MIN_VALUE));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, Integer.MIN_VALUE));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", \"\", Integer.MIN_VALUE));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", Integer.MIN_VALUE));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", Integer.MIN_VALUE));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", Integer.MIN_VALUE));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", Integer.MIN_VALUE));\n        \n        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, -1));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, -1));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", \"\", -1));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", -1));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", -1));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", -1));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", -1));\n\n        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 0));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, 0));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", \"\", 0));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", 0));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", 0));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", 0));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", 0));\n\n        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 1));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, 1));\n        assertEquals(0, StringUtils.ordinalIndexOf(\"\", \"\", 1));\n        assertEquals(0, StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", 1));\n        assertEquals(2, StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", 1));\n        assertEquals(1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", 1));\n        assertEquals(0, StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", 1));\n\n        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 2));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, 2));\n        assertEquals(0, StringUtils.ordinalIndexOf(\"\", \"\", 2));\n        assertEquals(1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", 2));\n        assertEquals(5, StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", 2));\n        assertEquals(4, StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", 2));\n        assertEquals(0, StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", 2));\n        \n        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MAX_VALUE));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, Integer.MAX_VALUE));\n        assertEquals(0, StringUtils.ordinalIndexOf(\"\", \"\", Integer.MAX_VALUE));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", Integer.MAX_VALUE));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", Integer.MAX_VALUE));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", Integer.MAX_VALUE));\n        assertEquals(0, StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", Integer.MAX_VALUE));\n        \n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 0));\n        assertEquals(0, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 1));\n        assertEquals(1, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 2));\n        assertEquals(2, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 3));\n        assertEquals(3, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 4));\n        assertEquals(4, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 5));\n        assertEquals(5, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 6));\n        assertEquals(6, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 7));\n        assertEquals(7, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 8));\n        assertEquals(8, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 9));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 10));\n    }",
        "begin_line": 112,
        "end_line": 172,
        "comment": "",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 84)",
            "(line 114,col 9)-(line 114,col 82)",
            "(line 115,col 9)-(line 115,col 80)",
            "(line 116,col 9)-(line 116,col 89)",
            "(line 117,col 9)-(line 117,col 89)",
            "(line 118,col 9)-(line 118,col 90)",
            "(line 119,col 9)-(line 119,col 88)",
            "(line 121,col 9)-(line 121,col 69)",
            "(line 122,col 9)-(line 122,col 67)",
            "(line 123,col 9)-(line 123,col 65)",
            "(line 124,col 9)-(line 124,col 74)",
            "(line 125,col 9)-(line 125,col 74)",
            "(line 126,col 9)-(line 126,col 75)",
            "(line 127,col 9)-(line 127,col 73)",
            "(line 129,col 9)-(line 129,col 68)",
            "(line 130,col 9)-(line 130,col 66)",
            "(line 131,col 9)-(line 131,col 64)",
            "(line 132,col 9)-(line 132,col 73)",
            "(line 133,col 9)-(line 133,col 73)",
            "(line 134,col 9)-(line 134,col 74)",
            "(line 135,col 9)-(line 135,col 72)",
            "(line 137,col 9)-(line 137,col 68)",
            "(line 138,col 9)-(line 138,col 66)",
            "(line 139,col 9)-(line 139,col 63)",
            "(line 140,col 9)-(line 140,col 72)",
            "(line 141,col 9)-(line 141,col 72)",
            "(line 142,col 9)-(line 142,col 73)",
            "(line 143,col 9)-(line 143,col 71)",
            "(line 145,col 9)-(line 145,col 68)",
            "(line 146,col 9)-(line 146,col 66)",
            "(line 147,col 9)-(line 147,col 63)",
            "(line 148,col 9)-(line 148,col 72)",
            "(line 149,col 9)-(line 149,col 72)",
            "(line 150,col 9)-(line 150,col 73)",
            "(line 151,col 9)-(line 151,col 71)",
            "(line 153,col 9)-(line 153,col 84)",
            "(line 154,col 9)-(line 154,col 82)",
            "(line 155,col 9)-(line 155,col 79)",
            "(line 156,col 9)-(line 156,col 89)",
            "(line 157,col 9)-(line 157,col 89)",
            "(line 158,col 9)-(line 158,col 90)",
            "(line 159,col 9)-(line 159,col 87)",
            "(line 161,col 9)-(line 161,col 74)",
            "(line 162,col 9)-(line 162,col 73)",
            "(line 163,col 9)-(line 163,col 73)",
            "(line 164,col 9)-(line 164,col 73)",
            "(line 165,col 9)-(line 165,col 73)",
            "(line 166,col 9)-(line 166,col 73)",
            "(line 167,col 9)-(line 167,col 73)",
            "(line 168,col 9)-(line 168,col 73)",
            "(line 169,col 9)-(line 169,col 73)",
            "(line 170,col 9)-(line 170,col 73)",
            "(line 171,col 9)-(line 171,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testIndexOf_StringInt()",
        "snippet": "    public void testIndexOf_StringInt() {\n        assertEquals(-1, StringUtils.indexOf(null, null, 0));\n        assertEquals(-1, StringUtils.indexOf(null, null, -1));\n        assertEquals(-1, StringUtils.indexOf(null, \"\", 0));\n        assertEquals(-1, StringUtils.indexOf(null, \"\", -1));\n        assertEquals(-1, StringUtils.indexOf(\"\", null, 0));\n        assertEquals(-1, StringUtils.indexOf(\"\", null, -1));\n        assertEquals(0, StringUtils.indexOf(\"\", \"\", 0));\n        assertEquals(0, StringUtils.indexOf(\"\", \"\", -1));\n        assertEquals(0, StringUtils.indexOf(\"\", \"\", 9));\n        assertEquals(0, StringUtils.indexOf(\"abc\", \"\", 0));\n        assertEquals(0, StringUtils.indexOf(\"abc\", \"\", -1));\n        assertEquals(3, StringUtils.indexOf(\"abc\", \"\", 9));\n        assertEquals(3, StringUtils.indexOf(\"abc\", \"\", 3));\n        assertEquals(0, StringUtils.indexOf(\"aabaabaa\", \"a\", 0));\n        assertEquals(2, StringUtils.indexOf(\"aabaabaa\", \"b\", 0));\n        assertEquals(1, StringUtils.indexOf(\"aabaabaa\", \"ab\", 0));\n        assertEquals(5, StringUtils.indexOf(\"aabaabaa\", \"b\", 3));\n        assertEquals(-1, StringUtils.indexOf(\"aabaabaa\", \"b\", 9));\n        assertEquals(2, StringUtils.indexOf(\"aabaabaa\", \"b\", -1));\n        assertEquals(2,StringUtils.indexOf(\"aabaabaa\", \"\", 2)); \n    }",
        "begin_line": 174,
        "end_line": 195,
        "comment": "",
        "child_ranges": [
            "(line 175,col 9)-(line 175,col 61)",
            "(line 176,col 9)-(line 176,col 62)",
            "(line 177,col 9)-(line 177,col 59)",
            "(line 178,col 9)-(line 178,col 60)",
            "(line 179,col 9)-(line 179,col 59)",
            "(line 180,col 9)-(line 180,col 60)",
            "(line 181,col 9)-(line 181,col 56)",
            "(line 182,col 9)-(line 182,col 57)",
            "(line 183,col 9)-(line 183,col 56)",
            "(line 184,col 9)-(line 184,col 59)",
            "(line 185,col 9)-(line 185,col 60)",
            "(line 186,col 9)-(line 186,col 59)",
            "(line 187,col 9)-(line 187,col 59)",
            "(line 188,col 9)-(line 188,col 65)",
            "(line 189,col 9)-(line 189,col 65)",
            "(line 190,col 9)-(line 190,col 66)",
            "(line 191,col 9)-(line 191,col 65)",
            "(line 192,col 9)-(line 192,col 66)",
            "(line 193,col 9)-(line 193,col 66)",
            "(line 194,col 9)-(line 194,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testLastIndexOf_char()",
        "snippet": "    public void testLastIndexOf_char() {\n        assertEquals(-1, StringUtils.lastIndexOf(null, ' '));\n        assertEquals(-1, StringUtils.lastIndexOf(\"\", ' '));\n        assertEquals(7, StringUtils.lastIndexOf(\"aabaabaa\", 'a'));\n        assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", 'b'));\n    }",
        "begin_line": 198,
        "end_line": 203,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 199,col 9)-(line 199,col 61)",
            "(line 200,col 9)-(line 200,col 59)",
            "(line 201,col 9)-(line 201,col 66)",
            "(line 202,col 9)-(line 202,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testLastIndexOf_charInt()",
        "snippet": "    public void testLastIndexOf_charInt() {\n        assertEquals(-1, StringUtils.lastIndexOf(null, ' ', 0));\n        assertEquals(-1, StringUtils.lastIndexOf(null, ' ', -1));\n        assertEquals(-1, StringUtils.lastIndexOf(\"\", ' ', 0));\n        assertEquals(-1, StringUtils.lastIndexOf(\"\", ' ', -1));\n        assertEquals(7, StringUtils.lastIndexOf(\"aabaabaa\", 'a', 8));\n        assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", 'b', 8));\n        assertEquals(2, StringUtils.lastIndexOf(\"aabaabaa\", 'b', 3));\n        assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", 'b', 9));\n        assertEquals(-1, StringUtils.lastIndexOf(\"aabaabaa\", 'b', -1));\n        assertEquals(0, StringUtils.lastIndexOf(\"aabaabaa\", 'a', 0));\n    }",
        "begin_line": 205,
        "end_line": 216,
        "comment": "",
        "child_ranges": [
            "(line 206,col 9)-(line 206,col 64)",
            "(line 207,col 9)-(line 207,col 65)",
            "(line 208,col 9)-(line 208,col 62)",
            "(line 209,col 9)-(line 209,col 63)",
            "(line 210,col 9)-(line 210,col 69)",
            "(line 211,col 9)-(line 211,col 69)",
            "(line 212,col 9)-(line 212,col 69)",
            "(line 213,col 9)-(line 213,col 69)",
            "(line 214,col 9)-(line 214,col 71)",
            "(line 215,col 9)-(line 215,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testLastIndexOf_String()",
        "snippet": "    public void testLastIndexOf_String() {\n        assertEquals(-1, StringUtils.lastIndexOf(null, null));\n        assertEquals(-1, StringUtils.lastIndexOf(\"\", null));\n        assertEquals(-1, StringUtils.lastIndexOf(\"\", \"a\"));\n        assertEquals(0, StringUtils.lastIndexOf(\"\", \"\"));\n        assertEquals(8, StringUtils.lastIndexOf(\"aabaabaa\", \"\"));\n        assertEquals(7, StringUtils.lastIndexOf(\"aabaabaa\", \"a\"));\n        assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", \"b\"));\n        assertEquals(4, StringUtils.lastIndexOf(\"aabaabaa\", \"ab\"));\n    }",
        "begin_line": 218,
        "end_line": 227,
        "comment": "",
        "child_ranges": [
            "(line 219,col 9)-(line 219,col 62)",
            "(line 220,col 9)-(line 220,col 60)",
            "(line 221,col 9)-(line 221,col 59)",
            "(line 222,col 9)-(line 222,col 57)",
            "(line 223,col 9)-(line 223,col 65)",
            "(line 224,col 9)-(line 224,col 66)",
            "(line 225,col 9)-(line 225,col 66)",
            "(line 226,col 9)-(line 226,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testLastIndexOf_StringInt()",
        "snippet": "    public void testLastIndexOf_StringInt() {\n        assertEquals(-1, StringUtils.lastIndexOf(null, null, 0));\n        assertEquals(-1, StringUtils.lastIndexOf(null, null, -1));\n        assertEquals(-1, StringUtils.lastIndexOf(null, \"\", 0));\n        assertEquals(-1, StringUtils.lastIndexOf(null, \"\", -1));\n        assertEquals(-1, StringUtils.lastIndexOf(\"\", null, 0));\n        assertEquals(-1, StringUtils.lastIndexOf(\"\", null, -1));\n        assertEquals(0, StringUtils.lastIndexOf(\"\", \"\", 0));\n        assertEquals(-1, StringUtils.lastIndexOf(\"\", \"\", -1));\n        assertEquals(0, StringUtils.lastIndexOf(\"\", \"\", 9));\n        assertEquals(0, StringUtils.lastIndexOf(\"abc\", \"\", 0));\n        assertEquals(-1, StringUtils.lastIndexOf(\"abc\", \"\", -1));\n        assertEquals(3, StringUtils.lastIndexOf(\"abc\", \"\", 9));\n        assertEquals(7, StringUtils.lastIndexOf(\"aabaabaa\", \"a\", 8));\n        assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 8));\n        assertEquals(4, StringUtils.lastIndexOf(\"aabaabaa\", \"ab\", 8));\n        assertEquals(2, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 3));\n        assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 9));\n        assertEquals(-1, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", -1));\n        assertEquals(-1, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 0));\n        assertEquals(0, StringUtils.lastIndexOf(\"aabaabaa\", \"a\", 0));\n    }",
        "begin_line": 229,
        "end_line": 250,
        "comment": "",
        "child_ranges": [
            "(line 230,col 9)-(line 230,col 65)",
            "(line 231,col 9)-(line 231,col 66)",
            "(line 232,col 9)-(line 232,col 63)",
            "(line 233,col 9)-(line 233,col 64)",
            "(line 234,col 9)-(line 234,col 63)",
            "(line 235,col 9)-(line 235,col 64)",
            "(line 236,col 9)-(line 236,col 60)",
            "(line 237,col 9)-(line 237,col 62)",
            "(line 238,col 9)-(line 238,col 60)",
            "(line 239,col 9)-(line 239,col 63)",
            "(line 240,col 9)-(line 240,col 65)",
            "(line 241,col 9)-(line 241,col 63)",
            "(line 242,col 9)-(line 242,col 69)",
            "(line 243,col 9)-(line 243,col 69)",
            "(line 244,col 9)-(line 244,col 70)",
            "(line 245,col 9)-(line 245,col 69)",
            "(line 246,col 9)-(line 246,col 69)",
            "(line 247,col 9)-(line 247,col 71)",
            "(line 248,col 9)-(line 248,col 70)",
            "(line 249,col 9)-(line 249,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testContainsChar()",
        "snippet": "    public void testContainsChar() {\n        assertEquals(false, StringUtils.contains(null, ' '));\n        assertEquals(false, StringUtils.contains(\"\", ' '));\n        assertEquals(false, StringUtils.contains(\"\",null));\n        assertEquals(false, StringUtils.contains(null,null));\n        assertEquals(true, StringUtils.contains(\"abc\", 'a'));\n        assertEquals(true, StringUtils.contains(\"abc\", 'b'));\n        assertEquals(true, StringUtils.contains(\"abc\", 'c'));\n        assertEquals(false, StringUtils.contains(\"abc\", 'z'));\n    }",
        "begin_line": 253,
        "end_line": 262,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 254,col 9)-(line 254,col 61)",
            "(line 255,col 9)-(line 255,col 59)",
            "(line 256,col 9)-(line 256,col 59)",
            "(line 257,col 9)-(line 257,col 61)",
            "(line 258,col 9)-(line 258,col 61)",
            "(line 259,col 9)-(line 259,col 61)",
            "(line 260,col 9)-(line 260,col 61)",
            "(line 261,col 9)-(line 261,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testContainsString()",
        "snippet": "    public void testContainsString() {\n        assertEquals(false, StringUtils.contains(null, null));\n        assertEquals(false, StringUtils.contains(null, \"\"));\n        assertEquals(false, StringUtils.contains(null, \"a\"));\n        assertEquals(false, StringUtils.contains(\"\", null));\n        assertEquals(true, StringUtils.contains(\"\", \"\"));\n        assertEquals(false, StringUtils.contains(\"\", \"a\"));\n        assertEquals(true, StringUtils.contains(\"abc\", \"a\"));\n        assertEquals(true, StringUtils.contains(\"abc\", \"b\"));\n        assertEquals(true, StringUtils.contains(\"abc\", \"c\"));\n        assertEquals(true, StringUtils.contains(\"abc\", \"abc\"));\n        assertEquals(false, StringUtils.contains(\"abc\", \"z\"));\n    }",
        "begin_line": 264,
        "end_line": 276,
        "comment": "",
        "child_ranges": [
            "(line 265,col 9)-(line 265,col 62)",
            "(line 266,col 9)-(line 266,col 60)",
            "(line 267,col 9)-(line 267,col 61)",
            "(line 268,col 9)-(line 268,col 60)",
            "(line 269,col 9)-(line 269,col 57)",
            "(line 270,col 9)-(line 270,col 59)",
            "(line 271,col 9)-(line 271,col 61)",
            "(line 272,col 9)-(line 272,col 61)",
            "(line 273,col 9)-(line 273,col 61)",
            "(line 274,col 9)-(line 274,col 63)",
            "(line 275,col 9)-(line 275,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testContainsIgnoreCase_StringString()",
        "snippet": "    public void testContainsIgnoreCase_StringString() {\n        assertFalse(StringUtils.containsIgnoreCase(null, null));\n        \n        // Null tests\n        assertFalse(StringUtils.containsIgnoreCase(null, \"\"));\n        assertFalse(StringUtils.containsIgnoreCase(null, \"a\"));\n        assertFalse(StringUtils.containsIgnoreCase(null, \"abc\"));\n        \n        assertFalse(StringUtils.containsIgnoreCase(\"\", null));\n        assertFalse(StringUtils.containsIgnoreCase(\"a\", null));\n        assertFalse(StringUtils.containsIgnoreCase(\"abc\", null));\n        \n        // Match len = 0\n        assertTrue(StringUtils.containsIgnoreCase(\"\", \"\"));\n        assertTrue(StringUtils.containsIgnoreCase(\"a\", \"\"));\n        assertTrue(StringUtils.containsIgnoreCase(\"abc\", \"\"));\n\n        // Match len = 1\n        assertFalse(StringUtils.containsIgnoreCase(\"\", \"a\"));\n        assertTrue(StringUtils.containsIgnoreCase(\"a\", \"a\"));\n        assertTrue(StringUtils.containsIgnoreCase(\"abc\", \"a\"));\n        assertFalse(StringUtils.containsIgnoreCase(\"\", \"A\"));\n        assertTrue(StringUtils.containsIgnoreCase(\"a\", \"A\"));\n        assertTrue(StringUtils.containsIgnoreCase(\"abc\", \"A\"));\n        \n        // Match len > 1\n        assertFalse(StringUtils.containsIgnoreCase(\"\", \"abc\"));\n        assertFalse(StringUtils.containsIgnoreCase(\"a\", \"abc\"));\n        assertTrue(StringUtils.containsIgnoreCase(\"xabcz\", \"abc\"));\n        assertFalse(StringUtils.containsIgnoreCase(\"\", \"ABC\"));\n        assertFalse(StringUtils.containsIgnoreCase(\"a\", \"ABC\"));\n        assertTrue(StringUtils.containsIgnoreCase(\"xabcz\", \"ABC\"));\n    }",
        "begin_line": 278,
        "end_line": 310,
        "comment": "",
        "child_ranges": [
            "(line 279,col 9)-(line 279,col 64)",
            "(line 282,col 9)-(line 282,col 62)",
            "(line 283,col 9)-(line 283,col 63)",
            "(line 284,col 9)-(line 284,col 65)",
            "(line 286,col 9)-(line 286,col 62)",
            "(line 287,col 9)-(line 287,col 63)",
            "(line 288,col 9)-(line 288,col 65)",
            "(line 291,col 9)-(line 291,col 59)",
            "(line 292,col 9)-(line 292,col 60)",
            "(line 293,col 9)-(line 293,col 62)",
            "(line 296,col 9)-(line 296,col 61)",
            "(line 297,col 9)-(line 297,col 61)",
            "(line 298,col 9)-(line 298,col 63)",
            "(line 299,col 9)-(line 299,col 61)",
            "(line 300,col 9)-(line 300,col 61)",
            "(line 301,col 9)-(line 301,col 63)",
            "(line 304,col 9)-(line 304,col 63)",
            "(line 305,col 9)-(line 305,col 64)",
            "(line 306,col 9)-(line 306,col 67)",
            "(line 307,col 9)-(line 307,col 63)",
            "(line 308,col 9)-(line 308,col 64)",
            "(line 309,col 9)-(line 309,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testIndexOfAny_StringStringarray()",
        "snippet": "    public void testIndexOfAny_StringStringarray() {\n        assertEquals(-1, StringUtils.indexOfAny(null, (String[]) null));\n        assertEquals(-1, StringUtils.indexOfAny(null, FOOBAR_SUB_ARRAY));\n        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, (String[]) null));\n        assertEquals(2, StringUtils.indexOfAny(FOOBAR, FOOBAR_SUB_ARRAY));\n        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[0]));\n        assertEquals(-1, StringUtils.indexOfAny(null, new String[0]));\n        assertEquals(-1, StringUtils.indexOfAny(\"\", new String[0]));\n        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] {\"llll\"}));\n        assertEquals(0, StringUtils.indexOfAny(FOOBAR, new String[] {\"\"}));\n        assertEquals(0, StringUtils.indexOfAny(\"\", new String[] {\"\"}));\n        assertEquals(-1, StringUtils.indexOfAny(\"\", new String[] {\"a\"}));\n        assertEquals(-1, StringUtils.indexOfAny(\"\", new String[] {null}));\n        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] {null}));\n        assertEquals(-1, StringUtils.indexOfAny(null, new String[] {null}));\n    }",
        "begin_line": 313,
        "end_line": 328,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 314,col 9)-(line 314,col 72)",
            "(line 315,col 9)-(line 315,col 73)",
            "(line 316,col 9)-(line 316,col 74)",
            "(line 317,col 9)-(line 317,col 74)",
            "(line 318,col 9)-(line 318,col 72)",
            "(line 319,col 9)-(line 319,col 70)",
            "(line 320,col 9)-(line 320,col 68)",
            "(line 321,col 9)-(line 321,col 80)",
            "(line 322,col 9)-(line 322,col 75)",
            "(line 323,col 9)-(line 323,col 71)",
            "(line 324,col 9)-(line 324,col 73)",
            "(line 325,col 9)-(line 325,col 74)",
            "(line 326,col 9)-(line 326,col 78)",
            "(line 327,col 9)-(line 327,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testLastIndexOfAny_StringStringarray()",
        "snippet": "    public void testLastIndexOfAny_StringStringarray() {\n        assertEquals(-1, StringUtils.lastIndexOfAny(null, null));\n        assertEquals(-1, StringUtils.lastIndexOfAny(null, FOOBAR_SUB_ARRAY));\n        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, null));\n        assertEquals(3, StringUtils.lastIndexOfAny(FOOBAR, FOOBAR_SUB_ARRAY));\n        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[0]));\n        assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[0]));\n        assertEquals(-1, StringUtils.lastIndexOfAny(\"\", new String[0]));\n        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] {\"llll\"}));\n        assertEquals(6, StringUtils.lastIndexOfAny(FOOBAR, new String[] {\"\"}));\n        assertEquals(0, StringUtils.lastIndexOfAny(\"\", new String[] {\"\"}));\n        assertEquals(-1, StringUtils.lastIndexOfAny(\"\", new String[] {\"a\"}));\n        assertEquals(-1, StringUtils.lastIndexOfAny(\"\", new String[] {null}));\n        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] {null}));\n        assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[] {null}));\n    }",
        "begin_line": 330,
        "end_line": 345,
        "comment": "",
        "child_ranges": [
            "(line 331,col 9)-(line 331,col 65)",
            "(line 332,col 9)-(line 332,col 77)",
            "(line 333,col 9)-(line 333,col 67)",
            "(line 334,col 9)-(line 334,col 78)",
            "(line 335,col 9)-(line 335,col 76)",
            "(line 336,col 9)-(line 336,col 74)",
            "(line 337,col 9)-(line 337,col 72)",
            "(line 338,col 9)-(line 338,col 84)",
            "(line 339,col 9)-(line 339,col 79)",
            "(line 340,col 9)-(line 340,col 75)",
            "(line 341,col 9)-(line 341,col 77)",
            "(line 342,col 9)-(line 342,col 78)",
            "(line 343,col 9)-(line 343,col 82)",
            "(line 344,col 9)-(line 344,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testIndexOfAny_StringChararray()",
        "snippet": "    public void testIndexOfAny_StringChararray() {\n        assertEquals(-1, StringUtils.indexOfAny(null, (char[]) null));\n        assertEquals(-1, StringUtils.indexOfAny(null, new char[0]));\n        assertEquals(-1, StringUtils.indexOfAny(null, new char[] {'a','b'}));\n        \n        assertEquals(-1, StringUtils.indexOfAny(\"\", (char[]) null));\n        assertEquals(-1, StringUtils.indexOfAny(\"\", new char[0]));\n        assertEquals(-1, StringUtils.indexOfAny(\"\", new char[] {'a','b'}));\n        \n        assertEquals(-1, StringUtils.indexOfAny(\"zzabyycdxx\", (char[]) null)); \n        assertEquals(-1, StringUtils.indexOfAny(\"zzabyycdxx\", new char[0])); \n        assertEquals(0, StringUtils.indexOfAny(\"zzabyycdxx\", new char[] {'z','a'})); \n        assertEquals(3, StringUtils.indexOfAny(\"zzabyycdxx\", new char[] {'b','y'}));\n        assertEquals(-1, StringUtils.indexOfAny(\"ab\", new char[] {'z'}));\n    }",
        "begin_line": 348,
        "end_line": 362,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 349,col 9)-(line 349,col 70)",
            "(line 350,col 9)-(line 350,col 68)",
            "(line 351,col 9)-(line 351,col 77)",
            "(line 353,col 9)-(line 353,col 68)",
            "(line 354,col 9)-(line 354,col 66)",
            "(line 355,col 9)-(line 355,col 75)",
            "(line 357,col 9)-(line 357,col 78)",
            "(line 358,col 9)-(line 358,col 76)",
            "(line 359,col 9)-(line 359,col 84)",
            "(line 360,col 9)-(line 360,col 84)",
            "(line 361,col 9)-(line 361,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testIndexOfAny_StringString()",
        "snippet": "    public void testIndexOfAny_StringString() {\n        assertEquals(-1, StringUtils.indexOfAny(null, (String) null));\n        assertEquals(-1, StringUtils.indexOfAny(null, \"\"));\n        assertEquals(-1, StringUtils.indexOfAny(null, \"ab\"));\n        \n        assertEquals(-1, StringUtils.indexOfAny(\"\", (String) null));\n        assertEquals(-1, StringUtils.indexOfAny(\"\", \"\"));\n        assertEquals(-1, StringUtils.indexOfAny(\"\", \"ab\"));\n        \n        assertEquals(-1, StringUtils.indexOfAny(\"zzabyycdxx\", (String) null)); \n        assertEquals(-1, StringUtils.indexOfAny(\"zzabyycdxx\", \"\")); \n        assertEquals(0, StringUtils.indexOfAny(\"zzabyycdxx\", \"za\")); \n        assertEquals(3, StringUtils.indexOfAny(\"zzabyycdxx\", \"by\"));\n        assertEquals(-1, StringUtils.indexOfAny(\"ab\", \"z\"));\n    }",
        "begin_line": 364,
        "end_line": 378,
        "comment": "",
        "child_ranges": [
            "(line 365,col 9)-(line 365,col 70)",
            "(line 366,col 9)-(line 366,col 59)",
            "(line 367,col 9)-(line 367,col 61)",
            "(line 369,col 9)-(line 369,col 68)",
            "(line 370,col 9)-(line 370,col 57)",
            "(line 371,col 9)-(line 371,col 59)",
            "(line 373,col 9)-(line 373,col 78)",
            "(line 374,col 9)-(line 374,col 67)",
            "(line 375,col 9)-(line 375,col 68)",
            "(line 376,col 9)-(line 376,col 68)",
            "(line 377,col 9)-(line 377,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testContainsAny_StringChararray()",
        "snippet": "    public void testContainsAny_StringChararray() {\n        assertFalse(StringUtils.containsAny(null, (char[]) null));\n        assertFalse(StringUtils.containsAny(null, new char[0]));\n        assertFalse(StringUtils.containsAny(null, new char[] {'a','b'}));\n        \n        assertFalse(StringUtils.containsAny(\"\", (char[]) null));\n        assertFalse(StringUtils.containsAny(\"\", new char[0]));\n        assertFalse(StringUtils.containsAny(\"\", new char[] {'a','b'}));\n        \n        assertFalse(StringUtils.containsAny(\"zzabyycdxx\", (char[]) null)); \n        assertFalse(StringUtils.containsAny(\"zzabyycdxx\", new char[0])); \n        assertTrue(StringUtils.containsAny(\"zzabyycdxx\", new char[] {'z','a'})); \n        assertTrue(StringUtils.containsAny(\"zzabyycdxx\", new char[] {'b','y'}));\n        assertFalse(StringUtils.containsAny(\"ab\", new char[] {'z'}));\n    }",
        "begin_line": 381,
        "end_line": 395,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 382,col 9)-(line 382,col 66)",
            "(line 383,col 9)-(line 383,col 64)",
            "(line 384,col 9)-(line 384,col 73)",
            "(line 386,col 9)-(line 386,col 64)",
            "(line 387,col 9)-(line 387,col 62)",
            "(line 388,col 9)-(line 388,col 71)",
            "(line 390,col 9)-(line 390,col 74)",
            "(line 391,col 9)-(line 391,col 72)",
            "(line 392,col 9)-(line 392,col 80)",
            "(line 393,col 9)-(line 393,col 80)",
            "(line 394,col 9)-(line 394,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testContainsAny_StringString()",
        "snippet": "    public void testContainsAny_StringString() {\n        assertFalse(StringUtils.containsAny(null, (String) null));\n        assertFalse(StringUtils.containsAny(null, \"\"));\n        assertFalse(StringUtils.containsAny(null, \"ab\"));\n        \n        assertFalse(StringUtils.containsAny(\"\", (String) null));\n        assertFalse(StringUtils.containsAny(\"\", \"\"));\n        assertFalse(StringUtils.containsAny(\"\", \"ab\"));\n        \n        assertFalse(StringUtils.containsAny(\"zzabyycdxx\", (String) null)); \n        assertFalse(StringUtils.containsAny(\"zzabyycdxx\", \"\")); \n        assertTrue(StringUtils.containsAny(\"zzabyycdxx\", \"za\")); \n        assertTrue(StringUtils.containsAny(\"zzabyycdxx\", \"by\"));\n        assertFalse(StringUtils.containsAny(\"ab\", \"z\"));\n    }",
        "begin_line": 397,
        "end_line": 411,
        "comment": "",
        "child_ranges": [
            "(line 398,col 9)-(line 398,col 66)",
            "(line 399,col 9)-(line 399,col 55)",
            "(line 400,col 9)-(line 400,col 57)",
            "(line 402,col 9)-(line 402,col 64)",
            "(line 403,col 9)-(line 403,col 53)",
            "(line 404,col 9)-(line 404,col 55)",
            "(line 406,col 9)-(line 406,col 74)",
            "(line 407,col 9)-(line 407,col 63)",
            "(line 408,col 9)-(line 408,col 64)",
            "(line 409,col 9)-(line 409,col 64)",
            "(line 410,col 9)-(line 410,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testIndexOfAnyBut_StringChararray()",
        "snippet": "    public void testIndexOfAnyBut_StringChararray() {\n        assertEquals(-1, StringUtils.indexOfAnyBut(null, (char[]) null));\n        assertEquals(-1, StringUtils.indexOfAnyBut(null, new char[0]));\n        assertEquals(-1, StringUtils.indexOfAnyBut(null, new char[] {'a','b'}));\n        \n        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", (char[]) null));\n        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", new char[0]));\n        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", new char[] {'a','b'}));\n        \n        assertEquals(-1, StringUtils.indexOfAnyBut(\"zzabyycdxx\", (char[]) null));\n        assertEquals(-1, StringUtils.indexOfAnyBut(\"zzabyycdxx\", new char[0]));\n        assertEquals(3, StringUtils.indexOfAnyBut(\"zzabyycdxx\", new char[] {'z','a'})); \n        assertEquals(0, StringUtils.indexOfAnyBut(\"zzabyycdxx\", new char[] {'b','y'})); \n        assertEquals(0, StringUtils.indexOfAnyBut(\"ab\", new char[] {'z'}));\n    }",
        "begin_line": 414,
        "end_line": 428,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 415,col 9)-(line 415,col 73)",
            "(line 416,col 9)-(line 416,col 71)",
            "(line 417,col 9)-(line 417,col 80)",
            "(line 419,col 9)-(line 419,col 71)",
            "(line 420,col 9)-(line 420,col 69)",
            "(line 421,col 9)-(line 421,col 78)",
            "(line 423,col 9)-(line 423,col 81)",
            "(line 424,col 9)-(line 424,col 79)",
            "(line 425,col 9)-(line 425,col 87)",
            "(line 426,col 9)-(line 426,col 87)",
            "(line 427,col 9)-(line 427,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testIndexOfAnyBut_StringString()",
        "snippet": "    public void testIndexOfAnyBut_StringString() {\n        assertEquals(-1, StringUtils.indexOfAnyBut(null, (String) null));\n        assertEquals(-1, StringUtils.indexOfAnyBut(null, \"\"));\n        assertEquals(-1, StringUtils.indexOfAnyBut(null, \"ab\"));\n        \n        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", (String) null));\n        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", \"\"));\n        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", \"ab\"));\n        \n        assertEquals(-1, StringUtils.indexOfAnyBut(\"zzabyycdxx\", (String) null)); \n        assertEquals(-1, StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"\")); \n        assertEquals(3, StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"za\")); \n        assertEquals(0, StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"by\"));\n        assertEquals(0, StringUtils.indexOfAnyBut(\"ab\", \"z\"));\n    }",
        "begin_line": 430,
        "end_line": 444,
        "comment": "",
        "child_ranges": [
            "(line 431,col 9)-(line 431,col 73)",
            "(line 432,col 9)-(line 432,col 62)",
            "(line 433,col 9)-(line 433,col 64)",
            "(line 435,col 9)-(line 435,col 71)",
            "(line 436,col 9)-(line 436,col 60)",
            "(line 437,col 9)-(line 437,col 62)",
            "(line 439,col 9)-(line 439,col 81)",
            "(line 440,col 9)-(line 440,col 70)",
            "(line 441,col 9)-(line 441,col 71)",
            "(line 442,col 9)-(line 442,col 71)",
            "(line 443,col 9)-(line 443,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testContainsOnly_String()",
        "snippet": "    public void testContainsOnly_String() {\n        String str1 = \"a\";\n        String str2 = \"b\";\n        String str3 = \"ab\";\n        String chars1= \"b\";\n        String chars2= \"a\";\n        String chars3= \"ab\";\n        assertEquals(false, StringUtils.containsOnly(null, (String) null));\n        assertEquals(false, StringUtils.containsOnly(\"\", (String) null));\n        assertEquals(false, StringUtils.containsOnly(null, \"\"));\n        assertEquals(false, StringUtils.containsOnly(str1, \"\"));\n        assertEquals(true, StringUtils.containsOnly(\"\", \"\"));\n        assertEquals(true, StringUtils.containsOnly(\"\", chars1));\n        assertEquals(false, StringUtils.containsOnly(str1, chars1));\n        assertEquals(true, StringUtils.containsOnly(str1, chars2));\n        assertEquals(true, StringUtils.containsOnly(str1, chars3));\n        assertEquals(true, StringUtils.containsOnly(str2, chars1));\n        assertEquals(false, StringUtils.containsOnly(str2, chars2));\n        assertEquals(true, StringUtils.containsOnly(str2, chars3));\n        assertEquals(false, StringUtils.containsOnly(str3, chars1));\n        assertEquals(false, StringUtils.containsOnly(str3, chars2));\n        assertEquals(true, StringUtils.containsOnly(str3, chars3));\n    }",
        "begin_line": 447,
        "end_line": 469,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 448,col 9)-(line 448,col 26)",
            "(line 449,col 9)-(line 449,col 26)",
            "(line 450,col 9)-(line 450,col 27)",
            "(line 451,col 9)-(line 451,col 27)",
            "(line 452,col 9)-(line 452,col 27)",
            "(line 453,col 9)-(line 453,col 28)",
            "(line 454,col 9)-(line 454,col 75)",
            "(line 455,col 9)-(line 455,col 73)",
            "(line 456,col 9)-(line 456,col 64)",
            "(line 457,col 9)-(line 457,col 64)",
            "(line 458,col 9)-(line 458,col 61)",
            "(line 459,col 9)-(line 459,col 65)",
            "(line 460,col 9)-(line 460,col 68)",
            "(line 461,col 9)-(line 461,col 67)",
            "(line 462,col 9)-(line 462,col 67)",
            "(line 463,col 9)-(line 463,col 67)",
            "(line 464,col 9)-(line 464,col 68)",
            "(line 465,col 9)-(line 465,col 67)",
            "(line 466,col 9)-(line 466,col 68)",
            "(line 467,col 9)-(line 467,col 68)",
            "(line 468,col 9)-(line 468,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testContainsOnly_Chararray()",
        "snippet": "    public void testContainsOnly_Chararray() {\n        String str1 = \"a\";\n        String str2 = \"b\";\n        String str3 = \"ab\";\n        char[] chars1= {'b'};\n        char[] chars2= {'a'};\n        char[] chars3= {'a', 'b'};\n        char[] emptyChars = new char[0];\n        assertEquals(false, StringUtils.containsOnly(null, (char[]) null));\n        assertEquals(false, StringUtils.containsOnly(\"\", (char[]) null));\n        assertEquals(false, StringUtils.containsOnly(null, emptyChars));\n        assertEquals(false, StringUtils.containsOnly(str1, emptyChars));\n        assertEquals(true, StringUtils.containsOnly(\"\", emptyChars));\n        assertEquals(true, StringUtils.containsOnly(\"\", chars1));\n        assertEquals(false, StringUtils.containsOnly(str1, chars1));\n        assertEquals(true, StringUtils.containsOnly(str1, chars2));\n        assertEquals(true, StringUtils.containsOnly(str1, chars3));\n        assertEquals(true, StringUtils.containsOnly(str2, chars1));\n        assertEquals(false, StringUtils.containsOnly(str2, chars2));\n        assertEquals(true, StringUtils.containsOnly(str2, chars3));\n        assertEquals(false, StringUtils.containsOnly(str3, chars1));\n        assertEquals(false, StringUtils.containsOnly(str3, chars2));\n        assertEquals(true, StringUtils.containsOnly(str3, chars3));\n    }",
        "begin_line": 471,
        "end_line": 494,
        "comment": "",
        "child_ranges": [
            "(line 472,col 9)-(line 472,col 26)",
            "(line 473,col 9)-(line 473,col 26)",
            "(line 474,col 9)-(line 474,col 27)",
            "(line 475,col 9)-(line 475,col 29)",
            "(line 476,col 9)-(line 476,col 29)",
            "(line 477,col 9)-(line 477,col 34)",
            "(line 478,col 9)-(line 478,col 40)",
            "(line 479,col 9)-(line 479,col 75)",
            "(line 480,col 9)-(line 480,col 73)",
            "(line 481,col 9)-(line 481,col 72)",
            "(line 482,col 9)-(line 482,col 72)",
            "(line 483,col 9)-(line 483,col 69)",
            "(line 484,col 9)-(line 484,col 65)",
            "(line 485,col 9)-(line 485,col 68)",
            "(line 486,col 9)-(line 486,col 67)",
            "(line 487,col 9)-(line 487,col 67)",
            "(line 488,col 9)-(line 488,col 67)",
            "(line 489,col 9)-(line 489,col 68)",
            "(line 490,col 9)-(line 490,col 67)",
            "(line 491,col 9)-(line 491,col 68)",
            "(line 492,col 9)-(line 492,col 68)",
            "(line 493,col 9)-(line 493,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testContainsNone_String()",
        "snippet": "    public void testContainsNone_String() {\n        String str1 = \"a\";\n        String str2 = \"b\";\n        String str3 = \"ab.\";\n        String chars1= \"b\";\n        String chars2= \".\";\n        String chars3= \"cd\";\n        assertEquals(true, StringUtils.containsNone(null, (String) null));\n        assertEquals(true, StringUtils.containsNone(\"\", (String) null));\n        assertEquals(true, StringUtils.containsNone(null, \"\"));\n        assertEquals(true, StringUtils.containsNone(str1, \"\"));\n        assertEquals(true, StringUtils.containsNone(\"\", \"\"));\n        assertEquals(true, StringUtils.containsNone(\"\", chars1));\n        assertEquals(true, StringUtils.containsNone(str1, chars1));\n        assertEquals(true, StringUtils.containsNone(str1, chars2));\n        assertEquals(true, StringUtils.containsNone(str1, chars3));\n        assertEquals(false, StringUtils.containsNone(str2, chars1));\n        assertEquals(true, StringUtils.containsNone(str2, chars2));\n        assertEquals(true, StringUtils.containsNone(str2, chars3));\n        assertEquals(false, StringUtils.containsNone(str3, chars1));\n        assertEquals(false, StringUtils.containsNone(str3, chars2));\n        assertEquals(true, StringUtils.containsNone(str3, chars3));\n    }",
        "begin_line": 496,
        "end_line": 518,
        "comment": "",
        "child_ranges": [
            "(line 497,col 9)-(line 497,col 26)",
            "(line 498,col 9)-(line 498,col 26)",
            "(line 499,col 9)-(line 499,col 28)",
            "(line 500,col 9)-(line 500,col 27)",
            "(line 501,col 9)-(line 501,col 27)",
            "(line 502,col 9)-(line 502,col 28)",
            "(line 503,col 9)-(line 503,col 74)",
            "(line 504,col 9)-(line 504,col 72)",
            "(line 505,col 9)-(line 505,col 63)",
            "(line 506,col 9)-(line 506,col 63)",
            "(line 507,col 9)-(line 507,col 61)",
            "(line 508,col 9)-(line 508,col 65)",
            "(line 509,col 9)-(line 509,col 67)",
            "(line 510,col 9)-(line 510,col 67)",
            "(line 511,col 9)-(line 511,col 67)",
            "(line 512,col 9)-(line 512,col 68)",
            "(line 513,col 9)-(line 513,col 67)",
            "(line 514,col 9)-(line 514,col 67)",
            "(line 515,col 9)-(line 515,col 68)",
            "(line 516,col 9)-(line 516,col 68)",
            "(line 517,col 9)-(line 517,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testContainsNone_Chararray()",
        "snippet": "    public void testContainsNone_Chararray() {\n        String str1 = \"a\";\n        String str2 = \"b\";\n        String str3 = \"ab.\";\n        char[] chars1= {'b'};\n        char[] chars2= {'.'};\n        char[] chars3= {'c', 'd'};\n        char[] emptyChars = new char[0];\n        assertEquals(true, StringUtils.containsNone(null, (char[]) null));\n        assertEquals(true, StringUtils.containsNone(\"\", (char[]) null));\n        assertEquals(true, StringUtils.containsNone(null, emptyChars));\n        assertEquals(true, StringUtils.containsNone(str1, emptyChars));\n        assertEquals(true, StringUtils.containsNone(\"\", emptyChars));\n        assertEquals(true, StringUtils.containsNone(\"\", chars1));\n        assertEquals(true, StringUtils.containsNone(str1, chars1));\n        assertEquals(true, StringUtils.containsNone(str1, chars2));\n        assertEquals(true, StringUtils.containsNone(str1, chars3));\n        assertEquals(false, StringUtils.containsNone(str2, chars1));\n        assertEquals(true, StringUtils.containsNone(str2, chars2));\n        assertEquals(true, StringUtils.containsNone(str2, chars3));\n        assertEquals(false, StringUtils.containsNone(str3, chars1));\n        assertEquals(false, StringUtils.containsNone(str3, chars2));\n        assertEquals(true, StringUtils.containsNone(str3, chars3));\n    }",
        "begin_line": 520,
        "end_line": 543,
        "comment": "",
        "child_ranges": [
            "(line 521,col 9)-(line 521,col 26)",
            "(line 522,col 9)-(line 522,col 26)",
            "(line 523,col 9)-(line 523,col 28)",
            "(line 524,col 9)-(line 524,col 29)",
            "(line 525,col 9)-(line 525,col 29)",
            "(line 526,col 9)-(line 526,col 34)",
            "(line 527,col 9)-(line 527,col 40)",
            "(line 528,col 9)-(line 528,col 74)",
            "(line 529,col 9)-(line 529,col 72)",
            "(line 530,col 9)-(line 530,col 71)",
            "(line 531,col 9)-(line 531,col 71)",
            "(line 532,col 9)-(line 532,col 69)",
            "(line 533,col 9)-(line 533,col 65)",
            "(line 534,col 9)-(line 534,col 67)",
            "(line 535,col 9)-(line 535,col 67)",
            "(line 536,col 9)-(line 536,col 67)",
            "(line 537,col 9)-(line 537,col 68)",
            "(line 538,col 9)-(line 538,col 67)",
            "(line 539,col 9)-(line 539,col 67)",
            "(line 540,col 9)-(line 540,col 68)",
            "(line 541,col 9)-(line 541,col 68)",
            "(line 542,col 9)-(line 542,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ValidateTest.java",
        "signature": "org.apache.commons.lang.ValidateTest.ValidateTest(java.lang.String)",
        "snippet": "    public ValidateTest(String name) {\n        super(name);\n    }",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ValidateTest.java",
        "signature": "org.apache.commons.lang.ValidateTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ValidateTest.java",
        "signature": "org.apache.commons.lang.ValidateTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(ValidateTest.class);\n        suite.setName(\"Validate Tests\");\n        return suite;\n    }",
        "begin_line": 50,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 60)",
            "(line 52,col 9)-(line 52,col 40)",
            "(line 53,col 9)-(line 53,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ValidateTest.java",
        "signature": "org.apache.commons.lang.ValidateTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        super.setUp();\n    }",
        "begin_line": 56,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ValidateTest.java",
        "signature": "org.apache.commons.lang.ValidateTest.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        super.tearDown();\n    }",
        "begin_line": 60,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ValidateTest.java",
        "signature": "org.apache.commons.lang.ValidateTest.testIsTrue1()",
        "snippet": "    public void testIsTrue1() {\n        Validate.isTrue(true);\n        try {\n            Validate.isTrue(false);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"The validated expression is false\", ex.getMessage());\n        }\n    }",
        "begin_line": 65,
        "end_line": 73,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 30)",
            "(line 67,col 9)-(line 72,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ValidateTest.java",
        "signature": "org.apache.commons.lang.ValidateTest.testIsTrue2()",
        "snippet": "    public void testIsTrue2() {\n        Validate.isTrue(true, \"MSG\");\n        try {\n            Validate.isTrue(false, \"MSG\");\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"MSG\", ex.getMessage());\n        }\n    }",
        "begin_line": 76,
        "end_line": 84,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 37)",
            "(line 78,col 9)-(line 83,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ValidateTest.java",
        "signature": "org.apache.commons.lang.ValidateTest.testIsTrue3()",
        "snippet": "    public void testIsTrue3() {\n        Validate.isTrue(true, \"MSG\", new Integer(6));\n        try {\n            Validate.isTrue(false, \"MSG\", new Integer(6));\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"MSG6\", ex.getMessage());\n        }\n    }",
        "begin_line": 87,
        "end_line": 95,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 53)",
            "(line 89,col 9)-(line 94,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ValidateTest.java",
        "signature": "org.apache.commons.lang.ValidateTest.testIsTrue4()",
        "snippet": "    public void testIsTrue4() {\n        Validate.isTrue(true, \"MSG\", 7);\n        try {\n            Validate.isTrue(false, \"MSG\", 7);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"MSG7\", ex.getMessage());\n        }\n    }",
        "begin_line": 98,
        "end_line": 106,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 40)",
            "(line 100,col 9)-(line 105,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ValidateTest.java",
        "signature": "org.apache.commons.lang.ValidateTest.testIsTrue5()",
        "snippet": "    public void testIsTrue5() {\n        Validate.isTrue(true, \"MSG\", 7.4d);\n        try {\n            Validate.isTrue(false, \"MSG\", 7.4d);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"MSG7.4\", ex.getMessage());\n        }\n    }",
        "begin_line": 109,
        "end_line": 117,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 43)",
            "(line 111,col 9)-(line 116,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ValidateTest.java",
        "signature": "org.apache.commons.lang.ValidateTest.testNotNull1()",
        "snippet": "    public void testNotNull1() {\n        Validate.notNull(new Object());\n        try {\n            Validate.notNull(null);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"The validated object is null\", ex.getMessage());\n        }\n    }",
        "begin_line": 120,
        "end_line": 128,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 39)",
            "(line 122,col 9)-(line 127,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ValidateTest.java",
        "signature": "org.apache.commons.lang.ValidateTest.testNotNull2()",
        "snippet": "    public void testNotNull2() {\n        Validate.notNull(new Object(), \"MSG\");\n        try {\n            Validate.notNull(null, \"MSG\");\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"MSG\", ex.getMessage());\n        }\n    }",
        "begin_line": 131,
        "end_line": 139,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 132,col 9)-(line 132,col 46)",
            "(line 133,col 9)-(line 138,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ValidateTest.java",
        "signature": "org.apache.commons.lang.ValidateTest.testNotEmptyArray1()",
        "snippet": "    public void testNotEmptyArray1() {\n        Validate.notEmpty(new Object[] {null});\n        try {\n            Validate.notEmpty((Object[]) null);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"The validated array is empty\", ex.getMessage());\n        }\n        try {\n            Validate.notEmpty(new Object[0]);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"The validated array is empty\", ex.getMessage());\n        }\n    }",
        "begin_line": 142,
        "end_line": 156,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 143,col 9)-(line 143,col 47)",
            "(line 144,col 9)-(line 149,col 9)",
            "(line 150,col 9)-(line 155,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ValidateTest.java",
        "signature": "org.apache.commons.lang.ValidateTest.testNotEmptyArray2()",
        "snippet": "    public void testNotEmptyArray2() {\n        Validate.notEmpty(new Object[] {null}, \"MSG\");\n        try {\n            Validate.notEmpty((Object[]) null, \"MSG\");\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"MSG\", ex.getMessage());\n        }\n        try {\n            Validate.notEmpty(new Object[0], \"MSG\");\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"MSG\", ex.getMessage());\n        }\n    }",
        "begin_line": 159,
        "end_line": 173,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 54)",
            "(line 161,col 9)-(line 166,col 9)",
            "(line 167,col 9)-(line 172,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ValidateTest.java",
        "signature": "org.apache.commons.lang.ValidateTest.testNotEmptyCollection1()",
        "snippet": "    public void testNotEmptyCollection1() {\n        Collection coll = new ArrayList();\n        try {\n            Validate.notEmpty((Collection) null);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"The validated collection is empty\", ex.getMessage());\n        }\n        try {\n            Validate.notEmpty(coll);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"The validated collection is empty\", ex.getMessage());\n        }\n        coll.add(new Integer(8));\n        Validate.notEmpty(coll);\n    }",
        "begin_line": 176,
        "end_line": 192,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 177,col 9)-(line 177,col 42)",
            "(line 178,col 9)-(line 183,col 9)",
            "(line 184,col 9)-(line 189,col 9)",
            "(line 190,col 9)-(line 190,col 33)",
            "(line 191,col 9)-(line 191,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ValidateTest.java",
        "signature": "org.apache.commons.lang.ValidateTest.testNotEmptyCollection2()",
        "snippet": "    public void testNotEmptyCollection2() {\n        Collection coll = new ArrayList();\n        try {\n            Validate.notEmpty((Collection) null, \"MSG\");\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"MSG\", ex.getMessage());\n        }\n        try {\n            Validate.notEmpty(coll, \"MSG\");\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"MSG\", ex.getMessage());\n        }\n        coll.add(new Integer(8));\n        Validate.notEmpty(coll, \"MSG\");\n    }",
        "begin_line": 195,
        "end_line": 211,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 196,col 9)-(line 196,col 42)",
            "(line 197,col 9)-(line 202,col 9)",
            "(line 203,col 9)-(line 208,col 9)",
            "(line 209,col 9)-(line 209,col 33)",
            "(line 210,col 9)-(line 210,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ValidateTest.java",
        "signature": "org.apache.commons.lang.ValidateTest.testNotEmptyMap1()",
        "snippet": "    public void testNotEmptyMap1() {\n        Map map = new HashMap();\n        try {\n            Validate.notEmpty((Map) null);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"The validated map is empty\", ex.getMessage());\n        }\n        try {\n            Validate.notEmpty(map);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"The validated map is empty\", ex.getMessage());\n        }\n        map.put(\"ll\", new Integer(8));\n        Validate.notEmpty(map);\n    }",
        "begin_line": 214,
        "end_line": 230,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 215,col 9)-(line 215,col 32)",
            "(line 216,col 9)-(line 221,col 9)",
            "(line 222,col 9)-(line 227,col 9)",
            "(line 228,col 9)-(line 228,col 38)",
            "(line 229,col 9)-(line 229,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ValidateTest.java",
        "signature": "org.apache.commons.lang.ValidateTest.testNotEmptyMap2()",
        "snippet": "    public void testNotEmptyMap2() {\n        Map map = new HashMap();\n        try {\n            Validate.notEmpty((Map) null, \"MSG\");\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"MSG\", ex.getMessage());\n        }\n        try {\n            Validate.notEmpty(map, \"MSG\");\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"MSG\", ex.getMessage());\n        }\n        map.put(\"ll\", new Integer(8));\n        Validate.notEmpty(map, \"MSG\");\n    }",
        "begin_line": 233,
        "end_line": 249,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 234,col 9)-(line 234,col 32)",
            "(line 235,col 9)-(line 240,col 9)",
            "(line 241,col 9)-(line 246,col 9)",
            "(line 247,col 9)-(line 247,col 38)",
            "(line 248,col 9)-(line 248,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ValidateTest.java",
        "signature": "org.apache.commons.lang.ValidateTest.testNotEmptyString1()",
        "snippet": "    public void testNotEmptyString1() {\n        Validate.notEmpty(\"hjl\");\n        try {\n            Validate.notEmpty((String) null);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"The validated string is empty\", ex.getMessage());\n        }\n        try {\n            Validate.notEmpty(\"\");\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"The validated string is empty\", ex.getMessage());\n        }\n    }",
        "begin_line": 252,
        "end_line": 266,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 253,col 9)-(line 253,col 33)",
            "(line 254,col 9)-(line 259,col 9)",
            "(line 260,col 9)-(line 265,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ValidateTest.java",
        "signature": "org.apache.commons.lang.ValidateTest.testNotEmptyString2()",
        "snippet": "    public void testNotEmptyString2() {\n        Validate.notEmpty(\"a\", \"MSG\");\n        try {\n            Validate.notEmpty((String) null, \"MSG\");\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"MSG\", ex.getMessage());\n        }\n        try {\n            Validate.notEmpty(\"\", \"MSG\");\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"MSG\", ex.getMessage());\n        }\n    }",
        "begin_line": 269,
        "end_line": 283,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 270,col 9)-(line 270,col 38)",
            "(line 271,col 9)-(line 276,col 9)",
            "(line 277,col 9)-(line 282,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ValidateTest.java",
        "signature": "org.apache.commons.lang.ValidateTest.testNoNullElementsArray1()",
        "snippet": "    public void testNoNullElementsArray1() {\n        String[] array = new String[] {\"a\", \"b\"};\n        Validate.noNullElements(array);\n        try {\n            Validate.noNullElements((Object[]) null);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"The validated object is null\", ex.getMessage());\n        }\n        array[1] = null;\n        try {\n            Validate.noNullElements(array);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"The validated array contains null element at index: 1\", ex.getMessage());\n        }\n    }",
        "begin_line": 286,
        "end_line": 302,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 287,col 9)-(line 287,col 49)",
            "(line 288,col 9)-(line 288,col 39)",
            "(line 289,col 9)-(line 294,col 9)",
            "(line 295,col 9)-(line 295,col 24)",
            "(line 296,col 9)-(line 301,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ValidateTest.java",
        "signature": "org.apache.commons.lang.ValidateTest.testNoNullElementsArray2()",
        "snippet": "    public void testNoNullElementsArray2() {\n        String[] array = new String[] {\"a\", \"b\"};\n        Validate.noNullElements(array, \"MSG\");\n        try {\n            Validate.noNullElements((Object[]) null, \"MSG\");\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"The validated object is null\", ex.getMessage());\n        }\n        array[1] = null;\n        try {\n            Validate.noNullElements(array, \"MSG\");\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"MSG\", ex.getMessage());\n        }\n    }",
        "begin_line": 305,
        "end_line": 321,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 306,col 9)-(line 306,col 49)",
            "(line 307,col 9)-(line 307,col 46)",
            "(line 308,col 9)-(line 313,col 9)",
            "(line 314,col 9)-(line 314,col 24)",
            "(line 315,col 9)-(line 320,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ValidateTest.java",
        "signature": "org.apache.commons.lang.ValidateTest.testNoNullElementsCollection1()",
        "snippet": "    public void testNoNullElementsCollection1() {\n        List coll = new ArrayList();\n        coll.add(\"a\");\n        coll.add(\"b\");\n        Validate.noNullElements(coll);\n        try {\n            Validate.noNullElements((Collection) null);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"The validated object is null\", ex.getMessage());\n        }\n        coll.set(1, null);\n        try {\n            Validate.noNullElements(coll);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"The validated collection contains null element at index: 1\", ex.getMessage());\n        }\n    }",
        "begin_line": 324,
        "end_line": 342,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 325,col 9)-(line 325,col 36)",
            "(line 326,col 9)-(line 326,col 22)",
            "(line 327,col 9)-(line 327,col 22)",
            "(line 328,col 9)-(line 328,col 38)",
            "(line 329,col 9)-(line 334,col 9)",
            "(line 335,col 9)-(line 335,col 26)",
            "(line 336,col 9)-(line 341,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ValidateTest.java",
        "signature": "org.apache.commons.lang.ValidateTest.testNoNullElementsCollection2()",
        "snippet": "    public void testNoNullElementsCollection2() {\n        List coll = new ArrayList();\n        coll.add(\"a\");\n        coll.add(\"b\");\n        Validate.noNullElements(coll, \"MSG\");\n        try {\n            Validate.noNullElements((Collection) null, \"MSG\");\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"The validated object is null\", ex.getMessage());\n        }\n        coll.set(1, null);\n        try {\n            Validate.noNullElements(coll, \"MSG\");\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"MSG\", ex.getMessage());\n        }\n    }",
        "begin_line": 345,
        "end_line": 363,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 346,col 9)-(line 346,col 36)",
            "(line 347,col 9)-(line 347,col 22)",
            "(line 348,col 9)-(line 348,col 22)",
            "(line 349,col 9)-(line 349,col 45)",
            "(line 350,col 9)-(line 355,col 9)",
            "(line 356,col 9)-(line 356,col 26)",
            "(line 357,col 9)-(line 362,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ValidateTest.java",
        "signature": "org.apache.commons.lang.ValidateTest.testAllElementsOfType()",
        "snippet": "    public void testAllElementsOfType() {\n        List coll = new ArrayList();\n        coll.add(\"a\");\n        coll.add(\"b\");\n        Validate.allElementsOfType(coll, String.class, \"MSG\");\n        Validate.allElementsOfType(coll, String.class);\n        try {\n            Validate.allElementsOfType(coll, Integer.class, \"MSG\");\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"MSG\", ex.getMessage());\n        }\n        coll.set(1, Boolean.FALSE);\n        try {\n            Validate.allElementsOfType(coll, String.class);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"The validated collection contains an element not of type java.lang.String at index: 1\", ex.getMessage());\n        }\n        \n        coll = new ArrayList();\n        coll.add(new Integer(5));\n        coll.add(new Double(2.0d));\n        Validate.allElementsOfType(coll, Number.class, \"MSG\");\n        try {\n            Validate.allElementsOfType(coll, Integer.class, \"MSG\");\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"MSG\", ex.getMessage());\n        }\n        try {\n            Validate.allElementsOfType(coll, Double.class, \"MSG\");\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"MSG\", ex.getMessage());\n        }\n    }",
        "begin_line": 366,
        "end_line": 402,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 367,col 9)-(line 367,col 36)",
            "(line 368,col 9)-(line 368,col 22)",
            "(line 369,col 9)-(line 369,col 22)",
            "(line 370,col 9)-(line 370,col 62)",
            "(line 371,col 9)-(line 371,col 55)",
            "(line 372,col 9)-(line 377,col 9)",
            "(line 378,col 9)-(line 378,col 35)",
            "(line 379,col 9)-(line 384,col 9)",
            "(line 386,col 9)-(line 386,col 31)",
            "(line 387,col 9)-(line 387,col 33)",
            "(line 388,col 9)-(line 388,col 35)",
            "(line 389,col 9)-(line 389,col 62)",
            "(line 390,col 9)-(line 395,col 9)",
            "(line 396,col 9)-(line 401,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/ValidateTest.java",
        "signature": "org.apache.commons.lang.ValidateTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new Validate());\n        Constructor[] cons = Validate.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(Validate.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(Validate.class.getModifiers()));\n    }",
        "begin_line": 404,
        "end_line": 411,
        "comment": "",
        "child_ranges": [
            "(line 405,col 9)-(line 405,col 38)",
            "(line 406,col 9)-(line 406,col 70)",
            "(line 407,col 9)-(line 407,col 37)",
            "(line 408,col 9)-(line 408,col 70)",
            "(line 409,col 9)-(line 409,col 77)",
            "(line 410,col 9)-(line 410,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsIsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsIsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsIsTest.StringUtilsIsTest(java.lang.String)",
        "snippet": "    public StringUtilsIsTest(String name) {\n        super(name);\n    }",
        "begin_line": 33,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsIsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsIsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsIsTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 37,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsIsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsIsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsIsTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(StringUtilsIsTest.class);\n        suite.setName(\"StringUtilsIsXxx Tests\");\n        return suite;\n    }",
        "begin_line": 41,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 65)",
            "(line 43,col 9)-(line 43,col 48)",
            "(line 44,col 9)-(line 44,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsIsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsIsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsIsTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        super.setUp();\n    }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsIsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsIsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsIsTest.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        super.tearDown();\n    }",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsIsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsIsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsIsTest.testIsAlpha()",
        "snippet": "    public void testIsAlpha() {\n        assertEquals(false, StringUtils.isAlpha(null));\n        assertEquals(true, StringUtils.isAlpha(\"\"));\n        assertEquals(false, StringUtils.isAlpha(\" \"));\n        assertEquals(true, StringUtils.isAlpha(\"a\"));\n        assertEquals(true, StringUtils.isAlpha(\"A\"));\n        assertEquals(true, StringUtils.isAlpha(\"kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl\"));\n        assertEquals(false, StringUtils.isAlpha(\"ham kso\"));\n        assertEquals(false, StringUtils.isAlpha(\"1\"));\n        assertEquals(false, StringUtils.isAlpha(\"hkHKHik6iUGHKJgU7tUJgKJGI87GIkug\"));\n        assertEquals(false, StringUtils.isAlpha(\"_\"));\n        assertEquals(false, StringUtils.isAlpha(\"hkHKHik*khbkuh\"));\n    }",
        "begin_line": 57,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 58,col 9)-(line 58,col 55)",
            "(line 59,col 9)-(line 59,col 52)",
            "(line 60,col 9)-(line 60,col 54)",
            "(line 61,col 9)-(line 61,col 53)",
            "(line 62,col 9)-(line 62,col 53)",
            "(line 63,col 9)-(line 63,col 82)",
            "(line 64,col 9)-(line 64,col 60)",
            "(line 65,col 9)-(line 65,col 54)",
            "(line 66,col 9)-(line 66,col 85)",
            "(line 67,col 9)-(line 67,col 54)",
            "(line 68,col 9)-(line 68,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsIsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsIsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsIsTest.testIsAlphanumeric()",
        "snippet": "    public void testIsAlphanumeric() {\n        assertEquals(false, StringUtils.isAlphanumeric(null));\n        assertEquals(true, StringUtils.isAlphanumeric(\"\"));\n        assertEquals(false, StringUtils.isAlphanumeric(\" \"));\n        assertEquals(true, StringUtils.isAlphanumeric(\"a\"));\n        assertEquals(true, StringUtils.isAlphanumeric(\"A\"));\n        assertEquals(true, StringUtils.isAlphanumeric(\"kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl\"));\n        assertEquals(false, StringUtils.isAlphanumeric(\"ham kso\"));\n        assertEquals(true, StringUtils.isAlphanumeric(\"1\"));\n        assertEquals(true, StringUtils.isAlphanumeric(\"hkHKHik6iUGHKJgU7tUJgKJGI87GIkug\"));\n        assertEquals(false, StringUtils.isAlphanumeric(\"_\"));\n        assertEquals(false, StringUtils.isAlphanumeric(\"hkHKHik*khbkuh\"));\n    }",
        "begin_line": 71,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 62)",
            "(line 73,col 9)-(line 73,col 59)",
            "(line 74,col 9)-(line 74,col 61)",
            "(line 75,col 9)-(line 75,col 60)",
            "(line 76,col 9)-(line 76,col 60)",
            "(line 77,col 9)-(line 77,col 89)",
            "(line 78,col 9)-(line 78,col 67)",
            "(line 79,col 9)-(line 79,col 60)",
            "(line 80,col 9)-(line 80,col 91)",
            "(line 81,col 9)-(line 81,col 61)",
            "(line 82,col 9)-(line 82,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsIsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsIsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsIsTest.testIsWhitespace()",
        "snippet": "    public void testIsWhitespace() {\n        assertEquals(false, StringUtils.isWhitespace(null));\n        assertEquals(true, StringUtils.isWhitespace(\"\"));\n        assertEquals(true, StringUtils.isWhitespace(\" \"));\n        assertEquals(true, StringUtils.isWhitespace(\"\\t \\n \\t\"));\n        assertEquals(false, StringUtils.isWhitespace(\"\\t aa\\n \\t\"));\n        assertEquals(true, StringUtils.isWhitespace(\" \"));\n        assertEquals(false, StringUtils.isWhitespace(\" a \"));\n        assertEquals(false, StringUtils.isWhitespace(\"a  \"));\n        assertEquals(false, StringUtils.isWhitespace(\"  a\"));\n        assertEquals(false, StringUtils.isWhitespace(\"aba\"));\n        assertEquals(true, StringUtils.isWhitespace(StringUtilsTest.WHITESPACE));\n        assertEquals(false, StringUtils.isWhitespace(StringUtilsTest.NON_WHITESPACE));\n    }",
        "begin_line": 85,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 60)",
            "(line 87,col 9)-(line 87,col 57)",
            "(line 88,col 9)-(line 88,col 58)",
            "(line 89,col 9)-(line 89,col 65)",
            "(line 90,col 9)-(line 90,col 68)",
            "(line 91,col 9)-(line 91,col 58)",
            "(line 92,col 9)-(line 92,col 61)",
            "(line 93,col 9)-(line 93,col 61)",
            "(line 94,col 9)-(line 94,col 61)",
            "(line 95,col 9)-(line 95,col 61)",
            "(line 96,col 9)-(line 96,col 81)",
            "(line 97,col 9)-(line 97,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsIsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsIsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsIsTest.testIsAlphaspace()",
        "snippet": "    public void testIsAlphaspace() {\n        assertEquals(false, StringUtils.isAlphaSpace(null));\n        assertEquals(true, StringUtils.isAlphaSpace(\"\"));\n        assertEquals(true, StringUtils.isAlphaSpace(\" \"));\n        assertEquals(true, StringUtils.isAlphaSpace(\"a\"));\n        assertEquals(true, StringUtils.isAlphaSpace(\"A\"));\n        assertEquals(true, StringUtils.isAlphaSpace(\"kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl\"));\n        assertEquals(true, StringUtils.isAlphaSpace(\"ham kso\"));\n        assertEquals(false, StringUtils.isAlphaSpace(\"1\"));\n        assertEquals(false, StringUtils.isAlphaSpace(\"hkHKHik6iUGHKJgU7tUJgKJGI87GIkug\"));\n        assertEquals(false, StringUtils.isAlphaSpace(\"_\"));\n        assertEquals(false, StringUtils.isAlphaSpace(\"hkHKHik*khbkuh\"));\n    }",
        "begin_line": 100,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 60)",
            "(line 102,col 9)-(line 102,col 57)",
            "(line 103,col 9)-(line 103,col 58)",
            "(line 104,col 9)-(line 104,col 58)",
            "(line 105,col 9)-(line 105,col 58)",
            "(line 106,col 9)-(line 106,col 87)",
            "(line 107,col 9)-(line 107,col 64)",
            "(line 108,col 9)-(line 108,col 59)",
            "(line 109,col 9)-(line 109,col 90)",
            "(line 110,col 9)-(line 110,col 59)",
            "(line 111,col 9)-(line 111,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsIsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsIsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsIsTest.testIsAlphanumericSpace()",
        "snippet": "    public void testIsAlphanumericSpace() {\n        assertEquals(false, StringUtils.isAlphanumericSpace(null));\n        assertEquals(true, StringUtils.isAlphanumericSpace(\"\"));\n        assertEquals(true, StringUtils.isAlphanumericSpace(\" \"));\n        assertEquals(true, StringUtils.isAlphanumericSpace(\"a\"));\n        assertEquals(true, StringUtils.isAlphanumericSpace(\"A\"));\n        assertEquals(true, StringUtils.isAlphanumericSpace(\"kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl\"));\n        assertEquals(true, StringUtils.isAlphanumericSpace(\"ham kso\"));\n        assertEquals(true, StringUtils.isAlphanumericSpace(\"1\"));\n        assertEquals(true, StringUtils.isAlphanumericSpace(\"hkHKHik6iUGHKJgU7tUJgKJGI87GIkug\"));\n        assertEquals(false, StringUtils.isAlphanumericSpace(\"_\"));\n        assertEquals(false, StringUtils.isAlphanumericSpace(\"hkHKHik*khbkuh\"));\n    }",
        "begin_line": 114,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 67)",
            "(line 116,col 9)-(line 116,col 64)",
            "(line 117,col 9)-(line 117,col 65)",
            "(line 118,col 9)-(line 118,col 65)",
            "(line 119,col 9)-(line 119,col 65)",
            "(line 120,col 9)-(line 120,col 94)",
            "(line 121,col 9)-(line 121,col 71)",
            "(line 122,col 9)-(line 122,col 65)",
            "(line 123,col 9)-(line 123,col 96)",
            "(line 124,col 9)-(line 124,col 66)",
            "(line 125,col 9)-(line 125,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsIsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsIsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsIsTest.testIsAsciiPrintable_String()",
        "snippet": "    public void testIsAsciiPrintable_String() {\n        assertEquals(false, StringUtils.isAsciiPrintable(null));\n        assertEquals(true, StringUtils.isAsciiPrintable(\"\"));\n        assertEquals(true, StringUtils.isAsciiPrintable(\" \"));\n        assertEquals(true, StringUtils.isAsciiPrintable(\"a\"));\n        assertEquals(true, StringUtils.isAsciiPrintable(\"A\"));\n        assertEquals(true, StringUtils.isAsciiPrintable(\"1\"));\n        assertEquals(true, StringUtils.isAsciiPrintable(\"Ceki\"));\n        assertEquals(true, StringUtils.isAsciiPrintable(\"!ab2c~\"));\n        assertEquals(true, StringUtils.isAsciiPrintable(\"1000\"));\n        assertEquals(true, StringUtils.isAsciiPrintable(\"10 00\"));\n        assertEquals(false, StringUtils.isAsciiPrintable(\"10\\t00\"));\n        assertEquals(true, StringUtils.isAsciiPrintable(\"10.00\"));\n        assertEquals(true, StringUtils.isAsciiPrintable(\"10,00\"));\n        assertEquals(true, StringUtils.isAsciiPrintable(\"!ab-c~\"));\n        assertEquals(true, StringUtils.isAsciiPrintable(\"hkHK=Hik6i?UGH_KJgU7.tUJgKJ*GI87GI,kug\"));\n        assertEquals(true, StringUtils.isAsciiPrintable(\"\\u0020\"));\n        assertEquals(true, StringUtils.isAsciiPrintable(\"\\u0021\"));\n        assertEquals(true, StringUtils.isAsciiPrintable(\"\\u007e\"));\n        assertEquals(false, StringUtils.isAsciiPrintable(\"\\u007f\"));\n        assertEquals(true, StringUtils.isAsciiPrintable(\"G?lc?\"));\n        assertEquals(true, StringUtils.isAsciiPrintable(\"=?iso-8859-1?Q?G=FClc=FC?=\"));\n        assertEquals(false, StringUtils.isAsciiPrintable(\"G\\u00fclc\\u00fc\"));\n    }",
        "begin_line": 128,
        "end_line": 151,
        "comment": "",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 64)",
            "(line 130,col 9)-(line 130,col 61)",
            "(line 131,col 9)-(line 131,col 62)",
            "(line 132,col 9)-(line 132,col 62)",
            "(line 133,col 9)-(line 133,col 62)",
            "(line 134,col 9)-(line 134,col 62)",
            "(line 135,col 9)-(line 135,col 65)",
            "(line 136,col 9)-(line 136,col 67)",
            "(line 137,col 9)-(line 137,col 65)",
            "(line 138,col 9)-(line 138,col 66)",
            "(line 139,col 9)-(line 139,col 68)",
            "(line 140,col 9)-(line 140,col 66)",
            "(line 141,col 9)-(line 141,col 66)",
            "(line 142,col 9)-(line 142,col 67)",
            "(line 143,col 9)-(line 143,col 99)",
            "(line 144,col 9)-(line 144,col 67)",
            "(line 145,col 9)-(line 145,col 67)",
            "(line 146,col 9)-(line 146,col 67)",
            "(line 147,col 9)-(line 147,col 68)",
            "(line 148,col 9)-(line 148,col 66)",
            "(line 149,col 9)-(line 149,col 87)",
            "(line 150,col 9)-(line 150,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsIsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsIsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsIsTest.testIsNumeric()",
        "snippet": "    public void testIsNumeric() {\n        assertEquals(false, StringUtils.isNumeric(null));\n        assertEquals(true, StringUtils.isNumeric(\"\"));\n        assertEquals(false, StringUtils.isNumeric(\" \"));\n        assertEquals(false, StringUtils.isNumeric(\"a\"));\n        assertEquals(false, StringUtils.isNumeric(\"A\"));\n        assertEquals(false, StringUtils.isNumeric(\"kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl\"));\n        assertEquals(false, StringUtils.isNumeric(\"ham kso\"));\n        assertEquals(true, StringUtils.isNumeric(\"1\"));\n        assertEquals(true, StringUtils.isNumeric(\"1000\"));\n        assertEquals(false, StringUtils.isNumeric(\"2.3\"));\n        assertEquals(false, StringUtils.isNumeric(\"10 00\"));\n        assertEquals(false, StringUtils.isNumeric(\"hkHKHik6iUGHKJgU7tUJgKJGI87GIkug\"));\n        assertEquals(false, StringUtils.isNumeric(\"_\"));\n        assertEquals(false, StringUtils.isNumeric(\"hkHKHik*khbkuh\"));\n    }",
        "begin_line": 153,
        "end_line": 168,
        "comment": "",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 57)",
            "(line 155,col 9)-(line 155,col 54)",
            "(line 156,col 9)-(line 156,col 56)",
            "(line 157,col 9)-(line 157,col 56)",
            "(line 158,col 9)-(line 158,col 56)",
            "(line 159,col 9)-(line 159,col 85)",
            "(line 160,col 9)-(line 160,col 62)",
            "(line 161,col 9)-(line 161,col 55)",
            "(line 162,col 9)-(line 162,col 58)",
            "(line 163,col 9)-(line 163,col 58)",
            "(line 164,col 9)-(line 164,col 60)",
            "(line 165,col 9)-(line 165,col 87)",
            "(line 166,col 9)-(line 166,col 56)",
            "(line 167,col 9)-(line 167,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsIsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsIsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsIsTest.testIsNumericSpace()",
        "snippet": "    public void testIsNumericSpace() {\n        assertEquals(false, StringUtils.isNumericSpace(null));\n        assertEquals(true, StringUtils.isNumericSpace(\"\"));\n        assertEquals(true, StringUtils.isNumericSpace(\" \"));\n        assertEquals(false, StringUtils.isNumericSpace(\"a\"));\n        assertEquals(false, StringUtils.isNumericSpace(\"A\"));\n        assertEquals(false, StringUtils.isNumericSpace(\"kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl\"));\n        assertEquals(false, StringUtils.isNumericSpace(\"ham kso\"));\n        assertEquals(true, StringUtils.isNumericSpace(\"1\"));\n        assertEquals(true, StringUtils.isNumericSpace(\"1000\"));\n        assertEquals(false, StringUtils.isNumericSpace(\"2.3\"));\n        assertEquals(true, StringUtils.isNumericSpace(\"10 00\"));\n        assertEquals(false, StringUtils.isNumericSpace(\"hkHKHik6iUGHKJgU7tUJgKJGI87GIkug\"));\n        assertEquals(false, StringUtils.isNumericSpace(\"_\"));\n        assertEquals(false, StringUtils.isNumericSpace(\"hkHKHik*khbkuh\"));\n    }",
        "begin_line": 170,
        "end_line": 185,
        "comment": "",
        "child_ranges": [
            "(line 171,col 9)-(line 171,col 62)",
            "(line 172,col 9)-(line 172,col 59)",
            "(line 173,col 9)-(line 173,col 60)",
            "(line 174,col 9)-(line 174,col 61)",
            "(line 175,col 9)-(line 175,col 61)",
            "(line 176,col 9)-(line 176,col 90)",
            "(line 177,col 9)-(line 177,col 67)",
            "(line 178,col 9)-(line 178,col 60)",
            "(line 179,col 9)-(line 179,col 63)",
            "(line 180,col 9)-(line 180,col 63)",
            "(line 181,col 9)-(line 181,col 64)",
            "(line 182,col 9)-(line 182,col 92)",
            "(line 183,col 9)-(line 183,col 61)",
            "(line 184,col 9)-(line 184,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.IllegalClassExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/IllegalClassExceptionTest.java",
        "signature": "org.apache.commons.lang.IllegalClassExceptionTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 33,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.IllegalClassExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/IllegalClassExceptionTest.java",
        "signature": "org.apache.commons.lang.IllegalClassExceptionTest.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(IllegalClassExceptionTest.class);\n    }",
        "begin_line": 37,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.IllegalClassExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/IllegalClassExceptionTest.java",
        "signature": "org.apache.commons.lang.IllegalClassExceptionTest.IllegalClassExceptionTest(java.lang.String)",
        "snippet": "    public IllegalClassExceptionTest(String testName) {\n        super(testName);\n    }",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.IllegalClassExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/IllegalClassExceptionTest.java",
        "signature": "org.apache.commons.lang.IllegalClassExceptionTest.testConstructor_classArgs_allNullInput()",
        "snippet": "    public void testConstructor_classArgs_allNullInput() {\n        new IllegalClassException(null, null);\n    }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.IllegalClassExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/IllegalClassExceptionTest.java",
        "signature": "org.apache.commons.lang.IllegalClassExceptionTest.testConstructor_classArgs_nullExpected()",
        "snippet": "    public void testConstructor_classArgs_nullExpected() {\n        new IllegalClassException(null, String.class);\n    }",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.IllegalClassExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/IllegalClassExceptionTest.java",
        "signature": "org.apache.commons.lang.IllegalClassExceptionTest.testConstructor_classArgs_nullActual()",
        "snippet": "    public void testConstructor_classArgs_nullActual() {\n        new IllegalClassException(String.class, null);\n    }",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.IllegalClassExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/IllegalClassExceptionTest.java",
        "signature": "org.apache.commons.lang.IllegalClassExceptionTest.testConstructor_stringArg_nullInput()",
        "snippet": "    public void testConstructor_stringArg_nullInput() {\n        new IllegalClassException(null);\n    }",
        "begin_line": 61,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.IllegalClassExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/IllegalClassExceptionTest.java",
        "signature": "org.apache.commons.lang.IllegalClassExceptionTest.testConstructor_classObjectArgs_allNullInput()",
        "snippet": "    public void testConstructor_classObjectArgs_allNullInput() {\n        new IllegalClassException(null, (Object) null);\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.IllegalClassExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/IllegalClassExceptionTest.java",
        "signature": "org.apache.commons.lang.IllegalClassExceptionTest.testConstructor_classObjectArgs_nullExpected()",
        "snippet": "    public void testConstructor_classObjectArgs_nullExpected() {\n        new IllegalClassException(null, new Object());\n    }",
        "begin_line": 71,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.IllegalClassExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/IllegalClassExceptionTest.java",
        "signature": "org.apache.commons.lang.IllegalClassExceptionTest.testConstructor_classObjectArgs_nullActual()",
        "snippet": "    public void testConstructor_classObjectArgs_nullActual() {\n        new IllegalClassException(String.class, (Object) null);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.IllegalClassExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/IllegalClassExceptionTest.java",
        "signature": "org.apache.commons.lang.IllegalClassExceptionTest.testGetMessage_classArgs_nullInput()",
        "snippet": "    public void testGetMessage_classArgs_nullInput() {\n        final Throwable t = new IllegalClassException(null, null);\n        assertEquals(\"Expected: null, actual: null\", t.getMessage());\n    }",
        "begin_line": 81,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 66)",
            "(line 83,col 9)-(line 83,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.IllegalClassExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/IllegalClassExceptionTest.java",
        "signature": "org.apache.commons.lang.IllegalClassExceptionTest.testGetMessage_classArgs_normalInput()",
        "snippet": "    public void testGetMessage_classArgs_normalInput() {\n        final Throwable t =\n            new IllegalClassException(String.class, Integer.class);\n        assertEquals(\n            \"Expected: java.lang.String, actual: java.lang.Integer\",\n            t.getMessage());\n    }",
        "begin_line": 86,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 87,col 9)-(line 88,col 67)",
            "(line 89,col 9)-(line 91,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.IllegalClassExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/IllegalClassExceptionTest.java",
        "signature": "org.apache.commons.lang.IllegalClassExceptionTest.testGetMessage_classObjectArgs_nullInput()",
        "snippet": "    public void testGetMessage_classObjectArgs_nullInput() {\n        final Throwable t = new IllegalClassException(null, (Object) null);\n        assertEquals(\"Expected: null, actual: null\", t.getMessage());\n    }",
        "begin_line": 94,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 75)",
            "(line 96,col 9)-(line 96,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.IllegalClassExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/IllegalClassExceptionTest.java",
        "signature": "org.apache.commons.lang.IllegalClassExceptionTest.testGetMessage_classObjectArgs_normalInput()",
        "snippet": "    public void testGetMessage_classObjectArgs_normalInput() {\n        final Throwable t =\n            new IllegalClassException(String.class, new Object());\n        assertEquals(\n            \"Expected: java.lang.String, actual: java.lang.Object\",\n            t.getMessage());\n    }",
        "begin_line": 99,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 100,col 9)-(line 101,col 66)",
            "(line 102,col 9)-(line 104,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.IllegalClassExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/IllegalClassExceptionTest.java",
        "signature": "org.apache.commons.lang.IllegalClassExceptionTest.testGetMessage_stringArg_nullInput()",
        "snippet": "    public void testGetMessage_stringArg_nullInput() {\n        final Throwable t = new IllegalClassException(null);\n        assertEquals(null, t.getMessage());\n    }",
        "begin_line": 107,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 60)",
            "(line 109,col 9)-(line 109,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.IllegalClassExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/IllegalClassExceptionTest.java",
        "signature": "org.apache.commons.lang.IllegalClassExceptionTest.testGetMessage_stringArg_validInput()",
        "snippet": "    public void testGetMessage_stringArg_validInput() {\n        final String message = \"message\";\n        final Throwable t = new IllegalClassException(message);\n        assertEquals(message, t.getMessage());\n    }",
        "begin_line": 112,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 41)",
            "(line 114,col 9)-(line 114,col 63)",
            "(line 115,col 9)-(line 115,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.StringUtilsTest(java.lang.String)",
        "snippet": "    public StringUtilsTest(String name) {\n        super(name);\n    }",
        "begin_line": 95,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 99,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 100,col 9)-(line 100,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(StringUtilsTest.class);\n        suite.setName(\"StringUtilsTest Tests\");\n        return suite;\n    }",
        "begin_line": 103,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 63)",
            "(line 105,col 9)-(line 105,col 47)",
            "(line 106,col 9)-(line 106,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        super.setUp();\n    }",
        "begin_line": 109,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        super.tearDown();\n    }",
        "begin_line": 113,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new StringUtils());\n        Constructor[] cons = StringUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(StringUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(StringUtils.class.getModifiers()));\n    }",
        "begin_line": 118,
        "end_line": 125,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 41)",
            "(line 120,col 9)-(line 120,col 73)",
            "(line 121,col 9)-(line 121,col 37)",
            "(line 122,col 9)-(line 122,col 70)",
            "(line 123,col 9)-(line 123,col 80)",
            "(line 124,col 9)-(line 124,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testCaseFunctions()",
        "snippet": "    public void testCaseFunctions() {\n        assertEquals(null, StringUtils.upperCase(null));\n        assertEquals(null, StringUtils.lowerCase(null));\n        assertEquals(null, StringUtils.capitalize(null));\n        assertEquals(null, StringUtils.uncapitalise(null));\n        assertEquals(null, StringUtils.uncapitalize(null));\n\n        assertEquals(\"capitalise(String) failed\",\n                    FOO_CAP, StringUtils.capitalise(FOO_UNCAP) );\n        assertEquals(\"capitalise(empty-string) failed\",\n                    \"\", StringUtils.capitalise(\"\") );\n        assertEquals(\"capitalise(single-char-string) failed\",\n                    \"X\", StringUtils.capitalise(\"x\") );\n        assertEquals(\"capitalize(String) failed\",\n                     FOO_CAP, StringUtils.capitalize(FOO_UNCAP) );\n        assertEquals(\"capitalize(empty-string) failed\",\n                     \"\", StringUtils.capitalize(\"\") );\n        assertEquals(\"capitalize(single-char-string) failed\",\n                     \"X\", StringUtils.capitalize(\"x\") );\n        assertEquals(\"uncapitalise(String) failed\",\n                     FOO_UNCAP, StringUtils.uncapitalise(FOO_CAP) );\n        assertEquals(\"uncapitalise(empty-string) failed\",\n                     \"\", StringUtils.uncapitalise(\"\") );\n        assertEquals(\"uncapitalise(single-char-string) failed\",\n                     \"x\", StringUtils.uncapitalise(\"X\") );\n        assertEquals(\"uncapitalize(String) failed\",\n                     FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP) );\n        assertEquals(\"uncapitalize(empty-string) failed\",\n                     \"\", StringUtils.uncapitalize(\"\") );\n        assertEquals(\"uncapitalize(single-char-string) failed\",\n                     \"x\", StringUtils.uncapitalize(\"X\") );\n                     \n        // reflection type of tests: Sentences.\n        assertEquals(\"uncapitalise(capitalise(String)) failed\",\n                     SENTENCE_UNCAP, StringUtils.uncapitalise(StringUtils.capitalise(SENTENCE_UNCAP)) );\n        assertEquals(\"capitalise(uncapitalise(String)) failed\",\n                     SENTENCE_CAP, StringUtils.capitalise(StringUtils.uncapitalise(SENTENCE_CAP)) );\n        assertEquals(\"uncapitalize(capitalize(String)) failed\",\n                     SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP)) );\n        assertEquals(\"capitalize(uncapitalize(String)) failed\",\n                     SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP)) );\n\n        // reflection type of tests: One word.\n        assertEquals(\"uncapitalise(capitalise(String)) failed\",\n                     FOO_UNCAP, StringUtils.uncapitalise(StringUtils.capitalise(FOO_UNCAP)) );\n        assertEquals(\"capitalise(uncapitalise(String)) failed\",\n                     FOO_CAP, StringUtils.capitalise(StringUtils.uncapitalise(FOO_CAP)) );\n        assertEquals(\"uncapitalize(capitalize(String)) failed\",\n                     FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP)) );\n        assertEquals(\"capitalize(uncapitalize(String)) failed\",\n                     FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP)) );\n\n        assertEquals(\"upperCase(String) failed\",\n                     \"FOO TEST THING\", StringUtils.upperCase(\"fOo test THING\") );\n        assertEquals(\"upperCase(empty-string) failed\",\n                     \"\", StringUtils.upperCase(\"\") );\n        assertEquals(\"lowerCase(String) failed\",\n                     \"foo test thing\", StringUtils.lowerCase(\"fOo test THING\") );\n        assertEquals(\"lowerCase(empty-string) failed\",\n                     \"\", StringUtils.lowerCase(\"\") );\n        \n    }",
        "begin_line": 128,
        "end_line": 189,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 56)",
            "(line 130,col 9)-(line 130,col 56)",
            "(line 131,col 9)-(line 131,col 57)",
            "(line 132,col 9)-(line 132,col 59)",
            "(line 133,col 9)-(line 133,col 59)",
            "(line 135,col 9)-(line 136,col 65)",
            "(line 137,col 9)-(line 138,col 53)",
            "(line 139,col 9)-(line 140,col 55)",
            "(line 141,col 9)-(line 142,col 66)",
            "(line 143,col 9)-(line 144,col 54)",
            "(line 145,col 9)-(line 146,col 56)",
            "(line 147,col 9)-(line 148,col 68)",
            "(line 149,col 9)-(line 150,col 56)",
            "(line 151,col 9)-(line 152,col 58)",
            "(line 153,col 9)-(line 154,col 68)",
            "(line 155,col 9)-(line 156,col 56)",
            "(line 157,col 9)-(line 158,col 58)",
            "(line 161,col 9)-(line 162,col 104)",
            "(line 163,col 9)-(line 164,col 100)",
            "(line 165,col 9)-(line 166,col 104)",
            "(line 167,col 9)-(line 168,col 100)",
            "(line 171,col 9)-(line 172,col 94)",
            "(line 173,col 9)-(line 174,col 90)",
            "(line 175,col 9)-(line 176,col 94)",
            "(line 177,col 9)-(line 178,col 90)",
            "(line 180,col 9)-(line 181,col 81)",
            "(line 182,col 9)-(line 183,col 53)",
            "(line 184,col 9)-(line 185,col 81)",
            "(line 186,col 9)-(line 187,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testSwapCase_String()",
        "snippet": "    public void testSwapCase_String() {\n        assertEquals(null, StringUtils.swapCase(null));\n        assertEquals(\"\", StringUtils.swapCase(\"\"));\n        assertEquals(\"  \", StringUtils.swapCase(\"  \"));\n        \n        assertEquals(\"i\", WordUtils.swapCase(\"I\") );\n        assertEquals(\"I\", WordUtils.swapCase(\"i\") );\n        assertEquals(\"I AM HERE 123\", StringUtils.swapCase(\"i am here 123\") );\n        assertEquals(\"i aM hERE 123\", StringUtils.swapCase(\"I Am Here 123\") );\n        assertEquals(\"I AM here 123\", StringUtils.swapCase(\"i am HERE 123\") );\n        assertEquals(\"i am here 123\", StringUtils.swapCase(\"I AM HERE 123\") );\n        \n        String test = \"This String contains a TitleCase character: \\u01C8\";\n        String expect = \"tHIS sTRING CONTAINS A tITLEcASE CHARACTER: \\u01C9\";\n        assertEquals(expect, WordUtils.swapCase(test));\n    }",
        "begin_line": 191,
        "end_line": 206,
        "comment": "",
        "child_ranges": [
            "(line 192,col 9)-(line 192,col 55)",
            "(line 193,col 9)-(line 193,col 51)",
            "(line 194,col 9)-(line 194,col 55)",
            "(line 196,col 9)-(line 196,col 52)",
            "(line 197,col 9)-(line 197,col 52)",
            "(line 198,col 9)-(line 198,col 78)",
            "(line 199,col 9)-(line 199,col 78)",
            "(line 200,col 9)-(line 200,col 78)",
            "(line 201,col 9)-(line 201,col 78)",
            "(line 203,col 9)-(line 203,col 75)",
            "(line 204,col 9)-(line 204,col 77)",
            "(line 205,col 9)-(line 205,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testJoin_Objectarray()",
        "snippet": "    public void testJoin_Objectarray() {\n        assertEquals(null, StringUtils.join(null));\n        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));\n        assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));\n        assertEquals(\"abc\", StringUtils.join(new String[] {\"a\", \"b\", \"c\"}));\n        assertEquals(\"a\", StringUtils.join(new String[] {null, \"a\", \"\"}));\n        assertEquals(\"foo\", StringUtils.join(MIXED_ARRAY_LIST));\n        assertEquals(\"foo2\", StringUtils.join(MIXED_TYPE_LIST));\n    }",
        "begin_line": 209,
        "end_line": 217,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 210,col 9)-(line 210,col 51)",
            "(line 211,col 9)-(line 211,col 61)",
            "(line 212,col 9)-(line 212,col 60)",
            "(line 213,col 9)-(line 213,col 76)",
            "(line 214,col 9)-(line 214,col 74)",
            "(line 215,col 9)-(line 215,col 64)",
            "(line 216,col 9)-(line 216,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testJoin_ArrayChar()",
        "snippet": "    public void testJoin_ArrayChar() {\n        assertEquals(null, StringUtils.join((Object[]) null, ','));\n        assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));\n        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));\n        assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));\n        assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));\n\n        assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));\n        assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));\n        assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));\n        assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));\n        assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));\n    }",
        "begin_line": 219,
        "end_line": 231,
        "comment": "",
        "child_ranges": [
            "(line 220,col 9)-(line 220,col 67)",
            "(line 221,col 9)-(line 221,col 83)",
            "(line 222,col 9)-(line 222,col 77)",
            "(line 223,col 9)-(line 223,col 82)",
            "(line 224,col 9)-(line 224,col 81)",
            "(line 226,col 9)-(line 226,col 97)",
            "(line 227,col 9)-(line 227,col 74)",
            "(line 228,col 9)-(line 228,col 76)",
            "(line 229,col 9)-(line 229,col 72)",
            "(line 230,col 9)-(line 230,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testJoin_ArrayString()",
        "snippet": "    public void testJoin_ArrayString() {\n        assertEquals(null, StringUtils.join((Object[]) null, null));\n        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, null));\n        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, \"\"));\n        \n        assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST, null));\n        \n        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, null));\n        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, \"\"));\n        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR));\n\n        assertEquals(TEXT_LIST, StringUtils.join(ARRAY_LIST, SEPARATOR));\n        assertEquals(\",,foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR));\n        assertEquals(\"foo,2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR));\n\n        assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, \"/\", 0, MIXED_ARRAY_LIST.length-1));\n        assertEquals(\"\", StringUtils.join(MIXED_ARRAY_LIST, \"\", 0, MIXED_ARRAY_LIST.length-1));\n        assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, \"/\", 0, 1));\n        assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, \"/\", 0, 2));\n        assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, \"/\", 1, 2));\n        assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, \"/\", 2, 1));\n    }",
        "begin_line": 233,
        "end_line": 254,
        "comment": "",
        "child_ranges": [
            "(line 234,col 9)-(line 234,col 68)",
            "(line 235,col 9)-(line 235,col 74)",
            "(line 236,col 9)-(line 236,col 72)",
            "(line 238,col 9)-(line 238,col 66)",
            "(line 240,col 9)-(line 240,col 67)",
            "(line 241,col 9)-(line 241,col 65)",
            "(line 242,col 9)-(line 242,col 72)",
            "(line 244,col 9)-(line 244,col 73)",
            "(line 245,col 9)-(line 245,col 77)",
            "(line 246,col 9)-(line 246,col 76)",
            "(line 248,col 9)-(line 248,col 97)",
            "(line 249,col 9)-(line 249,col 95)",
            "(line 250,col 9)-(line 250,col 74)",
            "(line 251,col 9)-(line 251,col 76)",
            "(line 252,col 9)-(line 252,col 72)",
            "(line 253,col 9)-(line 253,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testJoin_IteratorChar()",
        "snippet": "    public void testJoin_IteratorChar() {\n        assertEquals(null, StringUtils.join((Iterator) null, ','));\n        assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR_CHAR));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), SEPARATOR_CHAR));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR_CHAR));\n        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\").iterator(), 'x'));\n    }",
        "begin_line": 256,
        "end_line": 262,
        "comment": "",
        "child_ranges": [
            "(line 257,col 9)-(line 257,col 67)",
            "(line 258,col 9)-(line 258,col 109)",
            "(line 259,col 9)-(line 259,col 102)",
            "(line 260,col 9)-(line 260,col 103)",
            "(line 261,col 9)-(line 261,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testJoin_IteratorString()",
        "snippet": "    public void testJoin_IteratorString() {\n        assertEquals(null, StringUtils.join((Iterator) null, null));\n        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), null));\n        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), \"\"));\n        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\").iterator(), \"x\"));\n        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\").iterator(), null));\n\n        assertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), null));\n        \n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), null));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), \"\"));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR));\n        \n        assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR));\n    }",
        "begin_line": 264,
        "end_line": 278,
        "comment": "",
        "child_ranges": [
            "(line 265,col 9)-(line 265,col 68)",
            "(line 266,col 9)-(line 266,col 100)",
            "(line 267,col 9)-(line 267,col 98)",
            "(line 268,col 9)-(line 268,col 92)",
            "(line 269,col 9)-(line 269,col 93)",
            "(line 271,col 9)-(line 271,col 92)",
            "(line 273,col 9)-(line 273,col 93)",
            "(line 274,col 9)-(line 274,col 91)",
            "(line 275,col 9)-(line 275,col 98)",
            "(line 277,col 9)-(line 277,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testJoin_CollectionChar()",
        "snippet": "    public void testJoin_CollectionChar() {\n        assertEquals(null, StringUtils.join((Collection) null, ','));\n        assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR_CHAR));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), SEPARATOR_CHAR));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR_CHAR));\n        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\"), 'x'));\n    }",
        "begin_line": 280,
        "end_line": 286,
        "comment": "",
        "child_ranges": [
            "(line 281,col 9)-(line 281,col 69)",
            "(line 282,col 9)-(line 282,col 98)",
            "(line 283,col 9)-(line 283,col 91)",
            "(line 284,col 9)-(line 284,col 92)",
            "(line 285,col 9)-(line 285,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testJoin_CollectionString()",
        "snippet": "    public void testJoin_CollectionString() {\n        assertEquals(null, StringUtils.join((Collection) null, null));\n        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), null));\n        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), \"\"));\n        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\"), \"x\"));\n        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\"), null));\n\n        assertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), null));\n\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), null));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), \"\"));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR));\n\n        assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR));\n    }",
        "begin_line": 288,
        "end_line": 302,
        "comment": "",
        "child_ranges": [
            "(line 289,col 9)-(line 289,col 70)",
            "(line 290,col 9)-(line 290,col 89)",
            "(line 291,col 9)-(line 291,col 87)",
            "(line 292,col 9)-(line 292,col 81)",
            "(line 293,col 9)-(line 293,col 82)",
            "(line 295,col 9)-(line 295,col 81)",
            "(line 297,col 9)-(line 297,col 82)",
            "(line 298,col 9)-(line 298,col 80)",
            "(line 299,col 9)-(line 299,col 87)",
            "(line 301,col 9)-(line 301,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testDeprecatedConcatenate_Objectarray()",
        "snippet": "    public void testDeprecatedConcatenate_Objectarray() {\n        assertEquals(null, StringUtils.concatenate(null));\n        assertEquals(\"\", StringUtils.concatenate(EMPTY_ARRAY_LIST));\n        assertEquals(\"\", StringUtils.concatenate(NULL_ARRAY_LIST));\n        assertEquals(\"foo\", StringUtils.concatenate(MIXED_ARRAY_LIST));\n        assertEquals(\"foo2\", StringUtils.concatenate(MIXED_TYPE_LIST));\n    }",
        "begin_line": 304,
        "end_line": 310,
        "comment": "",
        "child_ranges": [
            "(line 305,col 9)-(line 305,col 58)",
            "(line 306,col 9)-(line 306,col 68)",
            "(line 307,col 9)-(line 307,col 67)",
            "(line 308,col 9)-(line 308,col 71)",
            "(line 309,col 9)-(line 309,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testSplit_String()",
        "snippet": "    public void testSplit_String() {\n        assertEquals(null, StringUtils.split(null));\n        assertEquals(0, StringUtils.split(\"\").length);\n        \n        String str = \"a b  .c\";\n        String[] res = StringUtils.split(str);\n        assertEquals(3, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\".c\", res[2]);\n        \n        str = \" a \";\n        res = StringUtils.split(str);\n        assertEquals(1, res.length);\n        assertEquals(\"a\", res[0]);\n        \n        str = \"a\" + WHITESPACE + \"b\" + NON_WHITESPACE + \"c\";\n        res = StringUtils.split(str);\n        assertEquals(2, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\" + NON_WHITESPACE + \"c\", res[1]);                       \n    }",
        "begin_line": 312,
        "end_line": 333,
        "comment": "",
        "child_ranges": [
            "(line 313,col 9)-(line 313,col 52)",
            "(line 314,col 9)-(line 314,col 54)",
            "(line 316,col 9)-(line 316,col 31)",
            "(line 317,col 9)-(line 317,col 46)",
            "(line 318,col 9)-(line 318,col 36)",
            "(line 319,col 9)-(line 319,col 34)",
            "(line 320,col 9)-(line 320,col 34)",
            "(line 321,col 9)-(line 321,col 35)",
            "(line 323,col 9)-(line 323,col 20)",
            "(line 324,col 9)-(line 324,col 37)",
            "(line 325,col 9)-(line 325,col 36)",
            "(line 326,col 9)-(line 326,col 34)",
            "(line 328,col 9)-(line 328,col 60)",
            "(line 329,col 9)-(line 329,col 37)",
            "(line 330,col 9)-(line 330,col 36)",
            "(line 331,col 9)-(line 331,col 34)",
            "(line 332,col 9)-(line 332,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testSplit_StringChar()",
        "snippet": "    public void testSplit_StringChar() {\n        assertEquals(null, StringUtils.split(null, '.'));\n        assertEquals(0, StringUtils.split(\"\", '.').length);\n\n        String str = \"a.b.. c\";\n        String[] res = StringUtils.split(str, '.');\n        assertEquals(3, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\" c\", res[2]);\n            \n        str = \".a.\";\n        res = StringUtils.split(str, '.');\n        assertEquals(1, res.length);\n        assertEquals(\"a\", res[0]);\n        \n        str = \"a b c\";\n        res = StringUtils.split(str,' ');\n        assertEquals(3, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\"c\", res[2]);\n    }",
        "begin_line": 335,
        "end_line": 357,
        "comment": "",
        "child_ranges": [
            "(line 336,col 9)-(line 336,col 57)",
            "(line 337,col 9)-(line 337,col 59)",
            "(line 339,col 9)-(line 339,col 31)",
            "(line 340,col 9)-(line 340,col 51)",
            "(line 341,col 9)-(line 341,col 36)",
            "(line 342,col 9)-(line 342,col 34)",
            "(line 343,col 9)-(line 343,col 34)",
            "(line 344,col 9)-(line 344,col 35)",
            "(line 346,col 9)-(line 346,col 20)",
            "(line 347,col 9)-(line 347,col 42)",
            "(line 348,col 9)-(line 348,col 36)",
            "(line 349,col 9)-(line 349,col 34)",
            "(line 351,col 9)-(line 351,col 22)",
            "(line 352,col 9)-(line 352,col 41)",
            "(line 353,col 9)-(line 353,col 36)",
            "(line 354,col 9)-(line 354,col 34)",
            "(line 355,col 9)-(line 355,col 34)",
            "(line 356,col 9)-(line 356,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testSplit_StringString_StringStringInt()",
        "snippet": "    public void testSplit_StringString_StringStringInt() {\n        assertEquals(null, StringUtils.split(null, \".\"));\n        assertEquals(null, StringUtils.split(null, \".\", 3));\n        \n        assertEquals(0, StringUtils.split(\"\", \".\").length);\n        assertEquals(0, StringUtils.split(\"\", \".\", 3).length);\n        \n        innerTestSplit('.', \".\", ' ');\n        innerTestSplit('.', \".\", ',');\n        innerTestSplit('.', \".,\", 'x');\n        for (int i = 0; i < WHITESPACE.length(); i++) {\n            for (int j = 0; j < NON_WHITESPACE.length(); j++) {\n                innerTestSplit(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j));\n                innerTestSplit(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j));\n            }\n        }\n        \n        String[] results = null;\n        String[] expectedResults = {\"ab\", \"de fg\"};\n        results = StringUtils.split(\"ab   de fg\", null, 2);\n        assertEquals(expectedResults.length, results.length);\n        for (int i = 0; i < expectedResults.length; i++) {\n            assertEquals(expectedResults[i], results[i]);\n        }\n        \n        String[] expectedResults2 = {\"ab\", \"cd:ef\"};\n        results = StringUtils.split(\"ab:cd:ef\",\":\", 2);\n        assertEquals(expectedResults2.length, results.length);\n        for (int i = 0; i < expectedResults2.length; i++) {\n            assertEquals(expectedResults2[i], results[i]);\n        }\n    }",
        "begin_line": 359,
        "end_line": 390,
        "comment": "",
        "child_ranges": [
            "(line 360,col 9)-(line 360,col 57)",
            "(line 361,col 9)-(line 361,col 60)",
            "(line 363,col 9)-(line 363,col 59)",
            "(line 364,col 9)-(line 364,col 62)",
            "(line 366,col 9)-(line 366,col 38)",
            "(line 367,col 9)-(line 367,col 38)",
            "(line 368,col 9)-(line 368,col 39)",
            "(line 369,col 9)-(line 374,col 9)",
            "(line 376,col 9)-(line 376,col 32)",
            "(line 377,col 9)-(line 377,col 51)",
            "(line 378,col 9)-(line 378,col 59)",
            "(line 379,col 9)-(line 379,col 61)",
            "(line 380,col 9)-(line 382,col 9)",
            "(line 384,col 9)-(line 384,col 52)",
            "(line 385,col 9)-(line 385,col 55)",
            "(line 386,col 9)-(line 386,col 62)",
            "(line 387,col 9)-(line 389,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.innerTestSplit(char, java.lang.String, char)",
        "snippet": "    private void innerTestSplit(char separator, String sepStr, char noMatch) {\n        String msg = \"Failed on separator hex(\" + Integer.toHexString(separator) +\n            \"), noMatch hex(\" + Integer.toHexString(noMatch) + \"), sepStr(\" + sepStr + \")\";\n        \n        final String str = \"a\" + separator + \"b\" + separator + separator + noMatch + \"c\";\n        String[] res;\n        // (str, sepStr)\n        res = StringUtils.split(str, sepStr);\n        assertEquals(msg, 3, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, noMatch + \"c\", res[2]);\n        \n        final String str2 = separator + \"a\" + separator;\n        res = StringUtils.split(str2, sepStr);\n        assertEquals(msg, 1, res.length);\n        assertEquals(msg, \"a\", res[0]);\n\n        res = StringUtils.split(str, sepStr, -1);\n        assertEquals(msg, 3, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, noMatch + \"c\", res[2]);\n        \n        res = StringUtils.split(str, sepStr, 0);\n        assertEquals(msg, 3, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, noMatch + \"c\", res[2]);\n        \n        res = StringUtils.split(str, sepStr, 1);\n        assertEquals(msg, 1, res.length);\n        assertEquals(msg, str, res[0]);\n        \n        res = StringUtils.split(str, sepStr, 2);\n        assertEquals(msg, 2, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, str.substring(2), res[1]);\n    }",
        "begin_line": 392,
        "end_line": 430,
        "comment": "",
        "child_ranges": [
            "(line 393,col 9)-(line 394,col 91)",
            "(line 396,col 9)-(line 396,col 89)",
            "(line 397,col 9)-(line 397,col 21)",
            "(line 399,col 9)-(line 399,col 45)",
            "(line 400,col 9)-(line 400,col 41)",
            "(line 401,col 9)-(line 401,col 39)",
            "(line 402,col 9)-(line 402,col 39)",
            "(line 403,col 9)-(line 403,col 49)",
            "(line 405,col 9)-(line 405,col 56)",
            "(line 406,col 9)-(line 406,col 46)",
            "(line 407,col 9)-(line 407,col 41)",
            "(line 408,col 9)-(line 408,col 39)",
            "(line 410,col 9)-(line 410,col 49)",
            "(line 411,col 9)-(line 411,col 41)",
            "(line 412,col 9)-(line 412,col 39)",
            "(line 413,col 9)-(line 413,col 39)",
            "(line 414,col 9)-(line 414,col 49)",
            "(line 416,col 9)-(line 416,col 48)",
            "(line 417,col 9)-(line 417,col 41)",
            "(line 418,col 9)-(line 418,col 39)",
            "(line 419,col 9)-(line 419,col 39)",
            "(line 420,col 9)-(line 420,col 49)",
            "(line 422,col 9)-(line 422,col 48)",
            "(line 423,col 9)-(line 423,col 41)",
            "(line 424,col 9)-(line 424,col 39)",
            "(line 426,col 9)-(line 426,col 48)",
            "(line 427,col 9)-(line 427,col 41)",
            "(line 428,col 9)-(line 428,col 39)",
            "(line 429,col 9)-(line 429,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testSplitByWholeString_StringStringBoolean()",
        "snippet": "    public void testSplitByWholeString_StringStringBoolean() {\n        assertEquals( null, StringUtils.splitByWholeSeparator( null, \".\" ) ) ;\n\n        assertEquals( 0, StringUtils.splitByWholeSeparator( \"\", \".\" ).length ) ;\n\n        String stringToSplitOnNulls = \"ab   de fg\" ;\n        String[] splitOnNullExpectedResults = { \"ab\", \"de\", \"fg\" } ;\n\n        String[] splitOnNullResults = StringUtils.splitByWholeSeparator( \"ab   de fg\", null ) ;\n        assertEquals( splitOnNullExpectedResults.length, splitOnNullResults.length ) ;\n        for ( int i = 0 ; i < splitOnNullExpectedResults.length ; i+= 1 ) {\n            assertEquals( splitOnNullExpectedResults[i], splitOnNullResults[i] ) ;\n        }\n\n        String stringToSplitOnCharactersAndString = \"abstemiouslyaeiouyabstemiously\" ;\n\n        String[] splitOnStringExpectedResults = { \"abstemiously\", \"abstemiously\" } ;\n        String[] splitOnStringResults = StringUtils.splitByWholeSeparator( stringToSplitOnCharactersAndString, \"aeiouy\" ) ;\n        assertEquals( splitOnStringExpectedResults.length, splitOnStringResults.length ) ;\n        for ( int i = 0 ; i < splitOnStringExpectedResults.length ; i+= 1 ) {\n            assertEquals( splitOnStringExpectedResults[i], splitOnStringResults[i] ) ;\n        }\n\n        String[] splitWithMultipleSeparatorExpectedResults = {\"ab\", \"cd\", \"ef\"};\n        String[] splitWithMultipleSeparator = StringUtils.splitByWholeSeparator(\"ab:cd::ef\", \":\");\n        assertEquals( splitWithMultipleSeparatorExpectedResults.length, splitWithMultipleSeparator.length );\n        for( int i = 0; i < splitWithMultipleSeparatorExpectedResults.length ; i++ ) {\n            assertEquals( splitWithMultipleSeparatorExpectedResults[i], splitWithMultipleSeparator[i] ) ;\n        }\n    }",
        "begin_line": 432,
        "end_line": 461,
        "comment": "",
        "child_ranges": [
            "(line 433,col 9)-(line 433,col 78)",
            "(line 435,col 9)-(line 435,col 80)",
            "(line 437,col 9)-(line 437,col 52)",
            "(line 438,col 9)-(line 438,col 68)",
            "(line 440,col 9)-(line 440,col 95)",
            "(line 441,col 9)-(line 441,col 86)",
            "(line 442,col 9)-(line 444,col 9)",
            "(line 446,col 9)-(line 446,col 86)",
            "(line 448,col 9)-(line 448,col 84)",
            "(line 449,col 9)-(line 449,col 123)",
            "(line 450,col 9)-(line 450,col 90)",
            "(line 451,col 9)-(line 453,col 9)",
            "(line 455,col 9)-(line 455,col 80)",
            "(line 456,col 9)-(line 456,col 98)",
            "(line 457,col 9)-(line 457,col 108)",
            "(line 458,col 9)-(line 460,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testSplitByWholeString_StringStringBooleanInt()",
        "snippet": "    public void testSplitByWholeString_StringStringBooleanInt() {\n        assertEquals( null, StringUtils.splitByWholeSeparator( null, \".\", 3 ) ) ;\n\n        assertEquals( 0, StringUtils.splitByWholeSeparator( \"\", \".\", 3 ).length ) ;\n\n        String stringToSplitOnNulls = \"ab   de fg\" ;\n        String[] splitOnNullExpectedResults = { \"ab\", \"de fg\" } ;\n        //String[] splitOnNullExpectedResults = { \"ab\", \"de\" } ;\n\n        String[] splitOnNullResults = StringUtils.splitByWholeSeparator( stringToSplitOnNulls, null, 2 ) ;\n        assertEquals( splitOnNullExpectedResults.length, splitOnNullResults.length ) ;\n        for ( int i = 0 ; i < splitOnNullExpectedResults.length ; i+= 1 ) {\n            assertEquals( splitOnNullExpectedResults[i], splitOnNullResults[i] ) ;\n        }\n\n        String stringToSplitOnCharactersAndString = \"abstemiouslyaeiouyabstemiouslyaeiouyabstemiously\" ;\n\n        String[] splitOnStringExpectedResults = { \"abstemiously\", \"abstemiouslyaeiouyabstemiously\" } ;\n        //String[] splitOnStringExpectedResults = { \"abstemiously\", \"abstemiously\" } ;\n        String[] splitOnStringResults = StringUtils.splitByWholeSeparator( stringToSplitOnCharactersAndString, \"aeiouy\", 2 ) ;\n        assertEquals( splitOnStringExpectedResults.length, splitOnStringResults.length ) ;\n        for ( int i = 0 ; i < splitOnStringExpectedResults.length ; i++ ) {\n            assertEquals( splitOnStringExpectedResults[i], splitOnStringResults[i] ) ;\n        }\n    }",
        "begin_line": 463,
        "end_line": 487,
        "comment": "",
        "child_ranges": [
            "(line 464,col 9)-(line 464,col 81)",
            "(line 466,col 9)-(line 466,col 83)",
            "(line 468,col 9)-(line 468,col 52)",
            "(line 469,col 9)-(line 469,col 65)",
            "(line 472,col 9)-(line 472,col 106)",
            "(line 473,col 9)-(line 473,col 86)",
            "(line 474,col 9)-(line 476,col 9)",
            "(line 478,col 9)-(line 478,col 104)",
            "(line 480,col 9)-(line 480,col 102)",
            "(line 482,col 9)-(line 482,col 126)",
            "(line 483,col 9)-(line 483,col 90)",
            "(line 484,col 9)-(line 486,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testSplitByWholeSeparatorPreserveAllTokens_StringStringInt()",
        "snippet": "    public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() {\n        assertEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, \".\", -1 ) ) ;\n\n        assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( \"\", \".\", -1 ).length ) ;\n\n        // test whitespace\n        String input = \"ab   de fg\" ;\n        String[] expected = new String[] { \"ab\", \"\", \"\", \"de\", \"fg\" } ;\n\n        String[] actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, null, -1 ) ;\n        assertEquals( expected.length, actual.length ) ;\n        for ( int i = 0 ; i < actual.length ; i+= 1 ) {\n            assertEquals( expected[i], actual[i] );\n        }\n\n        // test delimiter singlechar\n        input = \"1::2:::3::::4\";\n        expected = new String[] { \"1\", \"\", \"2\", \"\", \"\", \"3\", \"\", \"\", \"\", \"4\" };\n\n        actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, \":\", -1 ) ;\n        assertEquals( expected.length, actual.length ) ;\n        for ( int i = 0 ; i < actual.length ; i+= 1 ) {\n            assertEquals( expected[i], actual[i] );\n        }\n\n        // test delimiter multichar\n        input = \"1::2:::3::::4\";\n        expected = new String[] { \"1\", \"2\", \":3\", \"\", \"4\" };\n\n        actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, \"::\", -1 ) ;\n        assertEquals( expected.length, actual.length ) ;\n        for ( int i = 0 ; i < actual.length ; i+= 1 ) {\n            assertEquals( expected[i], actual[i] );\n        }\n\n        // test delimiter char with max\n        input = \"1::2::3:4\";\n        expected = new String[] { \"1\", \"\", \"2\", \":3:4\" };\n\n        actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, \":\", 4 ) ;\n        assertEquals( expected.length, actual.length ) ;\n        for ( int i = 0 ; i < actual.length ; i+= 1 ) {\n            assertEquals( expected[i], actual[i] );\n        }\n    }",
        "begin_line": 489,
        "end_line": 533,
        "comment": "",
        "child_ranges": [
            "(line 490,col 9)-(line 490,col 99)",
            "(line 492,col 9)-(line 492,col 101)",
            "(line 495,col 9)-(line 495,col 37)",
            "(line 496,col 9)-(line 496,col 71)",
            "(line 498,col 9)-(line 498,col 97)",
            "(line 499,col 9)-(line 499,col 56)",
            "(line 500,col 9)-(line 502,col 9)",
            "(line 505,col 9)-(line 505,col 32)",
            "(line 506,col 9)-(line 506,col 79)",
            "(line 508,col 9)-(line 508,col 87)",
            "(line 509,col 9)-(line 509,col 56)",
            "(line 510,col 9)-(line 512,col 9)",
            "(line 515,col 9)-(line 515,col 32)",
            "(line 516,col 9)-(line 516,col 60)",
            "(line 518,col 9)-(line 518,col 88)",
            "(line 519,col 9)-(line 519,col 56)",
            "(line 520,col 9)-(line 522,col 9)",
            "(line 525,col 9)-(line 525,col 28)",
            "(line 526,col 9)-(line 526,col 57)",
            "(line 528,col 9)-(line 528,col 86)",
            "(line 529,col 9)-(line 529,col 56)",
            "(line 530,col 9)-(line 532,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testSplitPreserveAllTokens_String()",
        "snippet": "    public void testSplitPreserveAllTokens_String() {\n        assertEquals(null, StringUtils.splitPreserveAllTokens(null));\n        assertEquals(0, StringUtils.splitPreserveAllTokens(\"\").length);\n        \n        String str = \"abc def\";\n        String[] res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(2, res.length);\n        assertEquals(\"abc\", res[0]);\n        assertEquals(\"def\", res[1]);\n        \n        str = \"abc  def\";\n        res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(3, res.length);\n        assertEquals(\"abc\", res[0]);\n        assertEquals(\"\", res[1]);\n        assertEquals(\"def\", res[2]);\n        \n        str = \" abc \";\n        res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(3, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"abc\", res[1]);\n        assertEquals(\"\", res[2]);\n        \n        str = \"a b .c\";\n        res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(3, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\".c\", res[2]);\n        \n        str = \" a b .c\";\n        res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(4, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"a\", res[1]);\n        assertEquals(\"b\", res[2]);\n        assertEquals(\".c\", res[3]);\n        \n        str = \"a  b  .c\";\n        res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(5, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"\", res[1]);\n        assertEquals(\"b\", res[2]);\n        assertEquals(\"\", res[3]);\n        assertEquals(\".c\", res[4]);\n        \n        str = \" a  \";\n        res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(4, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"a\", res[1]);\n        assertEquals(\"\", res[2]);\n        assertEquals(\"\", res[3]);\n\n        str = \" a  b\";\n        res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(4, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"a\", res[1]);\n        assertEquals(\"\", res[2]);\n        assertEquals(\"b\", res[3]);\n\n        str = \"a\" + WHITESPACE + \"b\" + NON_WHITESPACE + \"c\";\n        res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(WHITESPACE.length() + 1, res.length);\n        assertEquals(\"a\", res[0]);\n        for(int i = 1; i < WHITESPACE.length()-1; i++)\n        {\n          assertEquals(\"\", res[i]);\n        }\n        assertEquals(\"b\" + NON_WHITESPACE + \"c\", res[WHITESPACE.length()]);                       \n    }",
        "begin_line": 535,
        "end_line": 608,
        "comment": "",
        "child_ranges": [
            "(line 536,col 9)-(line 536,col 69)",
            "(line 537,col 9)-(line 537,col 71)",
            "(line 539,col 9)-(line 539,col 31)",
            "(line 540,col 9)-(line 540,col 63)",
            "(line 541,col 9)-(line 541,col 36)",
            "(line 542,col 9)-(line 542,col 36)",
            "(line 543,col 9)-(line 543,col 36)",
            "(line 545,col 9)-(line 545,col 25)",
            "(line 546,col 9)-(line 546,col 54)",
            "(line 547,col 9)-(line 547,col 36)",
            "(line 548,col 9)-(line 548,col 36)",
            "(line 549,col 9)-(line 549,col 33)",
            "(line 550,col 9)-(line 550,col 36)",
            "(line 552,col 9)-(line 552,col 22)",
            "(line 553,col 9)-(line 553,col 54)",
            "(line 554,col 9)-(line 554,col 36)",
            "(line 555,col 9)-(line 555,col 33)",
            "(line 556,col 9)-(line 556,col 36)",
            "(line 557,col 9)-(line 557,col 33)",
            "(line 559,col 9)-(line 559,col 23)",
            "(line 560,col 9)-(line 560,col 54)",
            "(line 561,col 9)-(line 561,col 36)",
            "(line 562,col 9)-(line 562,col 34)",
            "(line 563,col 9)-(line 563,col 34)",
            "(line 564,col 9)-(line 564,col 35)",
            "(line 566,col 9)-(line 566,col 24)",
            "(line 567,col 9)-(line 567,col 54)",
            "(line 568,col 9)-(line 568,col 36)",
            "(line 569,col 9)-(line 569,col 33)",
            "(line 570,col 9)-(line 570,col 34)",
            "(line 571,col 9)-(line 571,col 34)",
            "(line 572,col 9)-(line 572,col 35)",
            "(line 574,col 9)-(line 574,col 25)",
            "(line 575,col 9)-(line 575,col 54)",
            "(line 576,col 9)-(line 576,col 36)",
            "(line 577,col 9)-(line 577,col 34)",
            "(line 578,col 9)-(line 578,col 33)",
            "(line 579,col 9)-(line 579,col 34)",
            "(line 580,col 9)-(line 580,col 33)",
            "(line 581,col 9)-(line 581,col 35)",
            "(line 583,col 9)-(line 583,col 21)",
            "(line 584,col 9)-(line 584,col 54)",
            "(line 585,col 9)-(line 585,col 36)",
            "(line 586,col 9)-(line 586,col 33)",
            "(line 587,col 9)-(line 587,col 34)",
            "(line 588,col 9)-(line 588,col 33)",
            "(line 589,col 9)-(line 589,col 33)",
            "(line 591,col 9)-(line 591,col 22)",
            "(line 592,col 9)-(line 592,col 54)",
            "(line 593,col 9)-(line 593,col 36)",
            "(line 594,col 9)-(line 594,col 33)",
            "(line 595,col 9)-(line 595,col 34)",
            "(line 596,col 9)-(line 596,col 33)",
            "(line 597,col 9)-(line 597,col 34)",
            "(line 599,col 9)-(line 599,col 60)",
            "(line 600,col 9)-(line 600,col 54)",
            "(line 601,col 9)-(line 601,col 58)",
            "(line 602,col 9)-(line 602,col 34)",
            "(line 603,col 9)-(line 606,col 9)",
            "(line 607,col 9)-(line 607,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testSplitPreserveAllTokens_StringChar()",
        "snippet": "    public void testSplitPreserveAllTokens_StringChar() {\n        assertEquals(null, StringUtils.splitPreserveAllTokens(null, '.'));\n        assertEquals(0, StringUtils.splitPreserveAllTokens(\"\", '.').length);\n\n        String str = \"a.b. c\";\n        String[] res = StringUtils.splitPreserveAllTokens(str, '.');\n        assertEquals(3, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\" c\", res[2]);\n            \n        str = \"a.b.. c\";\n        res = StringUtils.splitPreserveAllTokens(str, '.');\n        assertEquals(4, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\"\", res[2]);\n        assertEquals(\" c\", res[3]);\n\n        str = \".a.\";\n        res = StringUtils.splitPreserveAllTokens(str, '.');\n        assertEquals(3, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"a\", res[1]);\n        assertEquals(\"\", res[2]);\n       \n        str = \".a..\";\n        res = StringUtils.splitPreserveAllTokens(str, '.');\n        assertEquals(4, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"a\", res[1]);\n        assertEquals(\"\", res[2]);\n        assertEquals(\"\", res[3]);\n        \n        str = \"..a.\";\n        res = StringUtils.splitPreserveAllTokens(str, '.');\n        assertEquals(4, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"\", res[1]);\n        assertEquals(\"a\", res[2]);\n        assertEquals(\"\", res[3]);\n        \n        str = \"..a\";\n        res = StringUtils.splitPreserveAllTokens(str, '.');\n        assertEquals(3, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"\", res[1]);\n        assertEquals(\"a\", res[2]);\n        \n        str = \"a b c\";\n        res = StringUtils.splitPreserveAllTokens(str,' ');\n        assertEquals(3, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\"c\", res[2]);\n\n        str = \"a  b  c\";\n        res = StringUtils.splitPreserveAllTokens(str,' ');\n        assertEquals(5, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"\", res[1]);\n        assertEquals(\"b\", res[2]);\n        assertEquals(\"\", res[3]);\n        assertEquals(\"c\", res[4]);\n        \n        str = \" a b c\";\n        res = StringUtils.splitPreserveAllTokens(str,' ');\n        assertEquals(4, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"a\", res[1]);\n        assertEquals(\"b\", res[2]);\n        assertEquals(\"c\", res[3]);\n\n        str = \"  a b c\";\n        res = StringUtils.splitPreserveAllTokens(str,' ');\n        assertEquals(5, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"\", res[1]);\n        assertEquals(\"a\", res[2]);\n        assertEquals(\"b\", res[3]);\n        assertEquals(\"c\", res[4]);\n\n        str = \"a b c \";\n        res = StringUtils.splitPreserveAllTokens(str,' ');\n        assertEquals(4, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\"c\", res[2]);\n        assertEquals(\"\", res[3]);\n\n        str = \"a b c  \";\n        res = StringUtils.splitPreserveAllTokens(str,' ');\n        assertEquals(5, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\"c\", res[2]);\n        assertEquals(\"\", res[3]);\n        assertEquals(\"\", res[3]);\n\n        // Match example in javadoc\n        {\n          String[] results = null;\n          String[] expectedResults = {\"a\", \"\", \"b\", \"c\"};\n          results = StringUtils.splitPreserveAllTokens(\"a..b.c\",'.');\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n    }",
        "begin_line": 610,
        "end_line": 719,
        "comment": "",
        "child_ranges": [
            "(line 611,col 9)-(line 611,col 74)",
            "(line 612,col 9)-(line 612,col 76)",
            "(line 614,col 9)-(line 614,col 30)",
            "(line 615,col 9)-(line 615,col 68)",
            "(line 616,col 9)-(line 616,col 36)",
            "(line 617,col 9)-(line 617,col 34)",
            "(line 618,col 9)-(line 618,col 34)",
            "(line 619,col 9)-(line 619,col 35)",
            "(line 621,col 9)-(line 621,col 24)",
            "(line 622,col 9)-(line 622,col 59)",
            "(line 623,col 9)-(line 623,col 36)",
            "(line 624,col 9)-(line 624,col 34)",
            "(line 625,col 9)-(line 625,col 34)",
            "(line 626,col 9)-(line 626,col 33)",
            "(line 627,col 9)-(line 627,col 35)",
            "(line 629,col 9)-(line 629,col 20)",
            "(line 630,col 9)-(line 630,col 59)",
            "(line 631,col 9)-(line 631,col 36)",
            "(line 632,col 9)-(line 632,col 33)",
            "(line 633,col 9)-(line 633,col 34)",
            "(line 634,col 9)-(line 634,col 33)",
            "(line 636,col 9)-(line 636,col 21)",
            "(line 637,col 9)-(line 637,col 59)",
            "(line 638,col 9)-(line 638,col 36)",
            "(line 639,col 9)-(line 639,col 33)",
            "(line 640,col 9)-(line 640,col 34)",
            "(line 641,col 9)-(line 641,col 33)",
            "(line 642,col 9)-(line 642,col 33)",
            "(line 644,col 9)-(line 644,col 21)",
            "(line 645,col 9)-(line 645,col 59)",
            "(line 646,col 9)-(line 646,col 36)",
            "(line 647,col 9)-(line 647,col 33)",
            "(line 648,col 9)-(line 648,col 33)",
            "(line 649,col 9)-(line 649,col 34)",
            "(line 650,col 9)-(line 650,col 33)",
            "(line 652,col 9)-(line 652,col 20)",
            "(line 653,col 9)-(line 653,col 59)",
            "(line 654,col 9)-(line 654,col 36)",
            "(line 655,col 9)-(line 655,col 33)",
            "(line 656,col 9)-(line 656,col 33)",
            "(line 657,col 9)-(line 657,col 34)",
            "(line 659,col 9)-(line 659,col 22)",
            "(line 660,col 9)-(line 660,col 58)",
            "(line 661,col 9)-(line 661,col 36)",
            "(line 662,col 9)-(line 662,col 34)",
            "(line 663,col 9)-(line 663,col 34)",
            "(line 664,col 9)-(line 664,col 34)",
            "(line 666,col 9)-(line 666,col 24)",
            "(line 667,col 9)-(line 667,col 58)",
            "(line 668,col 9)-(line 668,col 36)",
            "(line 669,col 9)-(line 669,col 34)",
            "(line 670,col 9)-(line 670,col 33)",
            "(line 671,col 9)-(line 671,col 34)",
            "(line 672,col 9)-(line 672,col 33)",
            "(line 673,col 9)-(line 673,col 34)",
            "(line 675,col 9)-(line 675,col 23)",
            "(line 676,col 9)-(line 676,col 58)",
            "(line 677,col 9)-(line 677,col 36)",
            "(line 678,col 9)-(line 678,col 33)",
            "(line 679,col 9)-(line 679,col 34)",
            "(line 680,col 9)-(line 680,col 34)",
            "(line 681,col 9)-(line 681,col 34)",
            "(line 683,col 9)-(line 683,col 24)",
            "(line 684,col 9)-(line 684,col 58)",
            "(line 685,col 9)-(line 685,col 36)",
            "(line 686,col 9)-(line 686,col 33)",
            "(line 687,col 9)-(line 687,col 33)",
            "(line 688,col 9)-(line 688,col 34)",
            "(line 689,col 9)-(line 689,col 34)",
            "(line 690,col 9)-(line 690,col 34)",
            "(line 692,col 9)-(line 692,col 23)",
            "(line 693,col 9)-(line 693,col 58)",
            "(line 694,col 9)-(line 694,col 36)",
            "(line 695,col 9)-(line 695,col 34)",
            "(line 696,col 9)-(line 696,col 34)",
            "(line 697,col 9)-(line 697,col 34)",
            "(line 698,col 9)-(line 698,col 33)",
            "(line 700,col 9)-(line 700,col 24)",
            "(line 701,col 9)-(line 701,col 58)",
            "(line 702,col 9)-(line 702,col 36)",
            "(line 703,col 9)-(line 703,col 34)",
            "(line 704,col 9)-(line 704,col 34)",
            "(line 705,col 9)-(line 705,col 34)",
            "(line 706,col 9)-(line 706,col 33)",
            "(line 707,col 9)-(line 707,col 33)",
            "(line 710,col 9)-(line 718,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testSplitPreserveAllTokens_StringString_StringStringInt()",
        "snippet": "    public void testSplitPreserveAllTokens_StringString_StringStringInt() {\n        assertEquals(null, StringUtils.splitPreserveAllTokens(null, \".\"));\n        assertEquals(null, StringUtils.splitPreserveAllTokens(null, \".\", 3));\n        \n        assertEquals(0, StringUtils.splitPreserveAllTokens(\"\", \".\").length);\n        assertEquals(0, StringUtils.splitPreserveAllTokens(\"\", \".\", 3).length);\n        \n        innerTestSplitPreserveAllTokens('.', \".\", ' ');\n        innerTestSplitPreserveAllTokens('.', \".\", ',');\n        innerTestSplitPreserveAllTokens('.', \".,\", 'x');\n        for (int i = 0; i < WHITESPACE.length(); i++) {\n            for (int j = 0; j < NON_WHITESPACE.length(); j++) {\n                innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j));\n                innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j));\n            }\n        }\n\n        {\n          String[] results = null;\n          String[] expectedResults = {\"ab\", \"de fg\"};\n          results = StringUtils.splitPreserveAllTokens(\"ab de fg\", null, 2);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n\n        {\n          String[] results = null;\n          String[] expectedResults = {\"ab\", \"  de fg\"};\n          results = StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 2);\n          System.out.println(\"\");\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n        \n        {\n          String[] results = null;\n          String[] expectedResults = {\"ab\", \"::de:fg\"};\n          results = StringUtils.splitPreserveAllTokens(\"ab:::de:fg\", \":\", 2);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n        \n        {\n          String[] results = null;\n          String[] expectedResults = {\"ab\", \"\", \" de fg\"};\n          results = StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 3);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n        \n        {\n          String[] results = null;\n          String[] expectedResults = {\"ab\", \"\", \"\", \"de fg\"};\n          results = StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 4);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n\n        {\n          String[] expectedResults = {\"ab\", \"cd:ef\"};\n          String[] results = null;\n          results = StringUtils.splitPreserveAllTokens(\"ab:cd:ef\",\":\", 2);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n\n        {\n          String[] results = null;\n          String[] expectedResults = {\"ab\", \":cd:ef\"};\n          results = StringUtils.splitPreserveAllTokens(\"ab::cd:ef\",\":\", 2);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n\n        {\n          String[] results = null;\n          String[] expectedResults = {\"ab\", \"\", \":cd:ef\"};\n          results = StringUtils.splitPreserveAllTokens(\"ab:::cd:ef\",\":\", 3);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n\n        {\n          String[] results = null;\n          String[] expectedResults = {\"ab\", \"\", \"\", \"cd:ef\"};\n          results = StringUtils.splitPreserveAllTokens(\"ab:::cd:ef\",\":\", 4);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n\n        {\n          String[] results = null;\n          String[] expectedResults = {\"\", \"ab\", \"\", \"\", \"cd:ef\"};\n          results = StringUtils.splitPreserveAllTokens(\":ab:::cd:ef\",\":\", 5);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n        \n        {\n          String[] results = null;\n          String[] expectedResults = {\"\", \"\", \"ab\", \"\", \"\", \"cd:ef\"};\n          results = StringUtils.splitPreserveAllTokens(\"::ab:::cd:ef\",\":\", 6);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n        \n    }",
        "begin_line": 721,
        "end_line": 849,
        "comment": "",
        "child_ranges": [
            "(line 722,col 9)-(line 722,col 74)",
            "(line 723,col 9)-(line 723,col 77)",
            "(line 725,col 9)-(line 725,col 76)",
            "(line 726,col 9)-(line 726,col 79)",
            "(line 728,col 9)-(line 728,col 55)",
            "(line 729,col 9)-(line 729,col 55)",
            "(line 730,col 9)-(line 730,col 56)",
            "(line 731,col 9)-(line 736,col 9)",
            "(line 738,col 9)-(line 746,col 9)",
            "(line 748,col 9)-(line 757,col 9)",
            "(line 759,col 9)-(line 767,col 9)",
            "(line 769,col 9)-(line 777,col 9)",
            "(line 779,col 9)-(line 787,col 9)",
            "(line 789,col 9)-(line 797,col 9)",
            "(line 799,col 9)-(line 807,col 9)",
            "(line 809,col 9)-(line 817,col 9)",
            "(line 819,col 9)-(line 827,col 9)",
            "(line 829,col 9)-(line 837,col 9)",
            "(line 839,col 9)-(line 847,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.innerTestSplitPreserveAllTokens(char, java.lang.String, char)",
        "snippet": "    private void innerTestSplitPreserveAllTokens(char separator, String sepStr, char noMatch) {\n        String msg = \"Failed on separator hex(\" + Integer.toHexString(separator) +\n            \"), noMatch hex(\" + Integer.toHexString(noMatch) + \"), sepStr(\" + sepStr + \")\";\n        \n        final String str = \"a\" + separator + \"b\" + separator + separator + noMatch + \"c\";\n        String[] res;\n        // (str, sepStr)\n        res = StringUtils.splitPreserveAllTokens(str, sepStr);\n        assertEquals(msg, 4, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, \"\", res[2]);\n        assertEquals(msg, noMatch + \"c\", res[3]);\n        \n        final String str2 = separator + \"a\" + separator;\n        res = StringUtils.splitPreserveAllTokens(str2, sepStr);\n        assertEquals(msg, 3, res.length);\n        assertEquals(msg, \"\", res[0]);\n        assertEquals(msg, \"a\", res[1]);\n        assertEquals(msg, \"\", res[2]);\n\n        res = StringUtils.splitPreserveAllTokens(str, sepStr, -1);\n        assertEquals(msg, 4, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, \"\", res[2]);\n        assertEquals(msg, noMatch + \"c\", res[3]);\n        \n        res = StringUtils.splitPreserveAllTokens(str, sepStr, 0);\n        assertEquals(msg, 4, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, \"\", res[2]);\n        assertEquals(msg, noMatch + \"c\", res[3]);\n        \n        res = StringUtils.splitPreserveAllTokens(str, sepStr, 1);\n        assertEquals(msg, 1, res.length);\n        assertEquals(msg, str, res[0]);\n        \n        res = StringUtils.splitPreserveAllTokens(str, sepStr, 2);\n        assertEquals(msg, 2, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, str.substring(2), res[1]);\n    }",
        "begin_line": 851,
        "end_line": 894,
        "comment": "",
        "child_ranges": [
            "(line 852,col 9)-(line 853,col 91)",
            "(line 855,col 9)-(line 855,col 89)",
            "(line 856,col 9)-(line 856,col 21)",
            "(line 858,col 9)-(line 858,col 62)",
            "(line 859,col 9)-(line 859,col 41)",
            "(line 860,col 9)-(line 860,col 39)",
            "(line 861,col 9)-(line 861,col 39)",
            "(line 862,col 9)-(line 862,col 38)",
            "(line 863,col 9)-(line 863,col 49)",
            "(line 865,col 9)-(line 865,col 56)",
            "(line 866,col 9)-(line 866,col 63)",
            "(line 867,col 9)-(line 867,col 41)",
            "(line 868,col 9)-(line 868,col 38)",
            "(line 869,col 9)-(line 869,col 39)",
            "(line 870,col 9)-(line 870,col 38)",
            "(line 872,col 9)-(line 872,col 66)",
            "(line 873,col 9)-(line 873,col 41)",
            "(line 874,col 9)-(line 874,col 39)",
            "(line 875,col 9)-(line 875,col 39)",
            "(line 876,col 9)-(line 876,col 38)",
            "(line 877,col 9)-(line 877,col 49)",
            "(line 879,col 9)-(line 879,col 65)",
            "(line 880,col 9)-(line 880,col 41)",
            "(line 881,col 9)-(line 881,col 39)",
            "(line 882,col 9)-(line 882,col 39)",
            "(line 883,col 9)-(line 883,col 38)",
            "(line 884,col 9)-(line 884,col 49)",
            "(line 886,col 9)-(line 886,col 65)",
            "(line 887,col 9)-(line 887,col 41)",
            "(line 888,col 9)-(line 888,col 39)",
            "(line 890,col 9)-(line 890,col 65)",
            "(line 891,col 9)-(line 891,col 41)",
            "(line 892,col 9)-(line 892,col 39)",
            "(line 893,col 9)-(line 893,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testSplitByCharacterType()",
        "snippet": "    public void testSplitByCharacterType() {\n        assertNull(StringUtils.splitByCharacterType(null));\n        assertEquals(0, StringUtils.splitByCharacterType(\"\").length);\n        \n        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \" \", \"de\", \" \",\n        \"fg\" }, StringUtils.splitByCharacterType(\"ab de fg\")));\n        \n        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \"   \", \"de\", \" \",\n        \"fg\" }, StringUtils.splitByCharacterType(\"ab   de fg\")));\n        \n        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \":\", \"cd\", \":\",\n        \"ef\" }, StringUtils.splitByCharacterType(\"ab:cd:ef\")));\n        \n        assertTrue(ArrayUtils.isEquals(new String[] { \"number\", \"5\" },\n                StringUtils.splitByCharacterType(\"number5\")));\n        \n        assertTrue(ArrayUtils.isEquals(new String[] { \"foo\", \"B\", \"ar\" },\n                StringUtils.splitByCharacterType(\"fooBar\")));\n        \n        assertTrue(ArrayUtils.isEquals(new String[] { \"foo\", \"200\", \"B\", \"ar\" },\n                StringUtils.splitByCharacterType(\"foo200Bar\")));\n        \n        assertTrue(ArrayUtils.isEquals(new String[] { \"ASFR\", \"ules\" },\n                StringUtils.splitByCharacterType(\"ASFRules\")));\n    }",
        "begin_line": 896,
        "end_line": 920,
        "comment": "",
        "child_ranges": [
            "(line 897,col 9)-(line 897,col 59)",
            "(line 898,col 9)-(line 898,col 69)",
            "(line 900,col 9)-(line 901,col 63)",
            "(line 903,col 9)-(line 904,col 65)",
            "(line 906,col 9)-(line 907,col 63)",
            "(line 909,col 9)-(line 910,col 62)",
            "(line 912,col 9)-(line 913,col 61)",
            "(line 915,col 9)-(line 916,col 64)",
            "(line 918,col 9)-(line 919,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testSplitByCharacterTypeCamelCase()",
        "snippet": "    public void testSplitByCharacterTypeCamelCase() {\n        assertNull(StringUtils.splitByCharacterTypeCamelCase(null));\n        assertEquals(0, StringUtils.splitByCharacterTypeCamelCase(\"\").length);\n\n        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \" \", \"de\", \" \",\n                \"fg\" }, StringUtils.splitByCharacterTypeCamelCase(\"ab de fg\")));\n\n        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \"   \", \"de\", \" \",\n                \"fg\" }, StringUtils.splitByCharacterTypeCamelCase(\"ab   de fg\")));\n\n        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \":\", \"cd\", \":\",\n                \"ef\" }, StringUtils.splitByCharacterTypeCamelCase(\"ab:cd:ef\")));\n        \n        assertTrue(ArrayUtils.isEquals(new String[] { \"number\", \"5\" },\n                StringUtils.splitByCharacterTypeCamelCase(\"number5\")));\n\n        assertTrue(ArrayUtils.isEquals(new String[] { \"foo\", \"Bar\" },\n                StringUtils.splitByCharacterTypeCamelCase(\"fooBar\")));\n\n        assertTrue(ArrayUtils.isEquals(new String[] { \"foo\", \"200\", \"Bar\" },\n                StringUtils.splitByCharacterTypeCamelCase(\"foo200Bar\")));\n\n        assertTrue(ArrayUtils.isEquals(new String[] { \"ASF\", \"Rules\" },\n                StringUtils.splitByCharacterTypeCamelCase(\"ASFRules\")));\n    }",
        "begin_line": 922,
        "end_line": 946,
        "comment": "",
        "child_ranges": [
            "(line 923,col 9)-(line 923,col 68)",
            "(line 924,col 9)-(line 924,col 78)",
            "(line 926,col 9)-(line 927,col 80)",
            "(line 929,col 9)-(line 930,col 82)",
            "(line 932,col 9)-(line 933,col 80)",
            "(line 935,col 9)-(line 936,col 71)",
            "(line 938,col 9)-(line 939,col 70)",
            "(line 941,col 9)-(line 942,col 73)",
            "(line 944,col 9)-(line 945,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testDeprecatedDeleteSpace_String()",
        "snippet": "    public void testDeprecatedDeleteSpace_String() {\n        assertEquals(null, StringUtils.deleteSpaces(null));\n        assertEquals(\"\", StringUtils.deleteSpaces(\"\"));\n        assertEquals(\"\", StringUtils.deleteSpaces(\"    \\t\\t\\n\\n   \"));\n        assertEquals(\"test\", StringUtils.deleteSpaces(\"t  \\t\\ne\\rs\\n\\n   \\tt\"));\n    }",
        "begin_line": 948,
        "end_line": 953,
        "comment": "",
        "child_ranges": [
            "(line 949,col 9)-(line 949,col 59)",
            "(line 950,col 9)-(line 950,col 55)",
            "(line 951,col 9)-(line 951,col 70)",
            "(line 952,col 9)-(line 952,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testDeleteWhitespace_String()",
        "snippet": "    public void testDeleteWhitespace_String() {\n        assertEquals(null, StringUtils.deleteWhitespace(null));\n        assertEquals(\"\", StringUtils.deleteWhitespace(\"\"));\n        assertEquals(\"\", StringUtils.deleteWhitespace(\"  \\u000C  \\t\\t\\u001F\\n\\n \\u000B  \"));\n        assertEquals(\"\", StringUtils.deleteWhitespace(StringUtilsTest.WHITESPACE));\n        assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.deleteWhitespace(StringUtilsTest.NON_WHITESPACE));\n        // Note: u-2007 and u-000A both cause problems in the source code\n        // it should ignore 2007 but delete 000A\n        assertEquals(\"\\u00A0\\u202F\", StringUtils.deleteWhitespace(\"  \\u00A0  \\t\\t\\n\\n \\u202F  \"));\n        assertEquals(\"\\u00A0\\u202F\", StringUtils.deleteWhitespace(\"\\u00A0\\u202F\"));\n        assertEquals(\"test\", StringUtils.deleteWhitespace(\"\\u000Bt  \\t\\n\\u0009e\\rs\\n\\n   \\tt\"));\n    }",
        "begin_line": 955,
        "end_line": 966,
        "comment": "",
        "child_ranges": [
            "(line 956,col 9)-(line 956,col 63)",
            "(line 957,col 9)-(line 957,col 59)",
            "(line 958,col 9)-(line 958,col 92)",
            "(line 959,col 9)-(line 959,col 83)",
            "(line 960,col 9)-(line 960,col 115)",
            "(line 963,col 9)-(line 963,col 98)",
            "(line 964,col 9)-(line 964,col 83)",
            "(line 965,col 9)-(line 965,col 96)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testReplace_StringStringString()",
        "snippet": "    public void testReplace_StringStringString() {\n        assertEquals(null, StringUtils.replace(null, null, null));\n        assertEquals(null, StringUtils.replace(null, null, \"any\"));\n        assertEquals(null, StringUtils.replace(null, \"any\", null));\n        assertEquals(null, StringUtils.replace(null, \"any\", \"any\"));\n\n        assertEquals(\"\", StringUtils.replace(\"\", null, null));\n        assertEquals(\"\", StringUtils.replace(\"\", null, \"any\"));\n        assertEquals(\"\", StringUtils.replace(\"\", \"any\", null));\n        assertEquals(\"\", StringUtils.replace(\"\", \"any\", \"any\"));\n\n        assertEquals(\"FOO\", StringUtils.replace(\"FOO\", \"\", \"any\"));\n        assertEquals(\"FOO\", StringUtils.replace(\"FOO\", null, \"any\"));\n        assertEquals(\"FOO\", StringUtils.replace(\"FOO\", \"F\", null));\n        assertEquals(\"FOO\", StringUtils.replace(\"FOO\", null, null));\n\n        assertEquals(\"\", StringUtils.replace(\"foofoofoo\", \"foo\", \"\"));\n        assertEquals(\"barbarbar\", StringUtils.replace(\"foofoofoo\", \"foo\", \"bar\"));\n        assertEquals(\"farfarfar\", StringUtils.replace(\"foofoofoo\", \"oo\", \"ar\"));\n       }",
        "begin_line": 968,
        "end_line": 987,
        "comment": "",
        "child_ranges": [
            "(line 969,col 9)-(line 969,col 66)",
            "(line 970,col 9)-(line 970,col 67)",
            "(line 971,col 9)-(line 971,col 67)",
            "(line 972,col 9)-(line 972,col 68)",
            "(line 974,col 9)-(line 974,col 62)",
            "(line 975,col 9)-(line 975,col 63)",
            "(line 976,col 9)-(line 976,col 63)",
            "(line 977,col 9)-(line 977,col 64)",
            "(line 979,col 9)-(line 979,col 67)",
            "(line 980,col 9)-(line 980,col 69)",
            "(line 981,col 9)-(line 981,col 67)",
            "(line 982,col 9)-(line 982,col 68)",
            "(line 984,col 9)-(line 984,col 70)",
            "(line 985,col 9)-(line 985,col 82)",
            "(line 986,col 9)-(line 986,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testReplace_StringStringStringInt()",
        "snippet": "    public void testReplace_StringStringStringInt() {\n        assertEquals(null, StringUtils.replace(null, null, null, 2));\n        assertEquals(null, StringUtils.replace(null, null, \"any\", 2));\n        assertEquals(null, StringUtils.replace(null, \"any\", null, 2));\n        assertEquals(null, StringUtils.replace(null, \"any\", \"any\", 2));\n\n        assertEquals(\"\", StringUtils.replace(\"\", null, null, 2));\n        assertEquals(\"\", StringUtils.replace(\"\", null, \"any\", 2));\n        assertEquals(\"\", StringUtils.replace(\"\", \"any\", null, 2));\n        assertEquals(\"\", StringUtils.replace(\"\", \"any\", \"any\", 2));\n        \n        String str = new String(new char[] {'o', 'o', 'f', 'o', 'o'});\n        assertSame(str, StringUtils.replace(str, \"x\", \"\", -1));\n        \n        assertEquals(\"f\", StringUtils.replace(\"oofoo\", \"o\", \"\", -1));\n        assertEquals(\"oofoo\", StringUtils.replace(\"oofoo\", \"o\", \"\", 0));\n        assertEquals(\"ofoo\", StringUtils.replace(\"oofoo\", \"o\", \"\", 1));\n        assertEquals(\"foo\", StringUtils.replace(\"oofoo\", \"o\", \"\", 2));\n        assertEquals(\"fo\", StringUtils.replace(\"oofoo\", \"o\", \"\", 3));\n        assertEquals(\"f\", StringUtils.replace(\"oofoo\", \"o\", \"\", 4));\n        \n        assertEquals(\"f\", StringUtils.replace(\"oofoo\", \"o\", \"\", -5));\n        assertEquals(\"f\", StringUtils.replace(\"oofoo\", \"o\", \"\", 1000));\n    }",
        "begin_line": 989,
        "end_line": 1012,
        "comment": "",
        "child_ranges": [
            "(line 990,col 9)-(line 990,col 69)",
            "(line 991,col 9)-(line 991,col 70)",
            "(line 992,col 9)-(line 992,col 70)",
            "(line 993,col 9)-(line 993,col 71)",
            "(line 995,col 9)-(line 995,col 65)",
            "(line 996,col 9)-(line 996,col 66)",
            "(line 997,col 9)-(line 997,col 66)",
            "(line 998,col 9)-(line 998,col 67)",
            "(line 1000,col 9)-(line 1000,col 70)",
            "(line 1001,col 9)-(line 1001,col 63)",
            "(line 1003,col 9)-(line 1003,col 69)",
            "(line 1004,col 9)-(line 1004,col 72)",
            "(line 1005,col 9)-(line 1005,col 71)",
            "(line 1006,col 9)-(line 1006,col 70)",
            "(line 1007,col 9)-(line 1007,col 69)",
            "(line 1008,col 9)-(line 1008,col 68)",
            "(line 1010,col 9)-(line 1010,col 69)",
            "(line 1011,col 9)-(line 1011,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testReplaceOnce_StringStringString()",
        "snippet": "    public void testReplaceOnce_StringStringString() {\n        assertEquals(null, StringUtils.replaceOnce(null, null, null));\n        assertEquals(null, StringUtils.replaceOnce(null, null, \"any\"));\n        assertEquals(null, StringUtils.replaceOnce(null, \"any\", null));\n        assertEquals(null, StringUtils.replaceOnce(null, \"any\", \"any\"));\n\n        assertEquals(\"\", StringUtils.replaceOnce(\"\", null, null));\n        assertEquals(\"\", StringUtils.replaceOnce(\"\", null, \"any\"));\n        assertEquals(\"\", StringUtils.replaceOnce(\"\", \"any\", null));\n        assertEquals(\"\", StringUtils.replaceOnce(\"\", \"any\", \"any\"));\n\n        assertEquals(\"FOO\", StringUtils.replaceOnce(\"FOO\", \"\", \"any\"));\n        assertEquals(\"FOO\", StringUtils.replaceOnce(\"FOO\", null, \"any\"));\n        assertEquals(\"FOO\", StringUtils.replaceOnce(\"FOO\", \"F\", null));\n        assertEquals(\"FOO\", StringUtils.replaceOnce(\"FOO\", null, null));\n\n        assertEquals(\"foofoo\", StringUtils.replaceOnce(\"foofoofoo\", \"foo\", \"\"));\n    }",
        "begin_line": 1014,
        "end_line": 1031,
        "comment": "",
        "child_ranges": [
            "(line 1015,col 9)-(line 1015,col 70)",
            "(line 1016,col 9)-(line 1016,col 71)",
            "(line 1017,col 9)-(line 1017,col 71)",
            "(line 1018,col 9)-(line 1018,col 72)",
            "(line 1020,col 9)-(line 1020,col 66)",
            "(line 1021,col 9)-(line 1021,col 67)",
            "(line 1022,col 9)-(line 1022,col 67)",
            "(line 1023,col 9)-(line 1023,col 68)",
            "(line 1025,col 9)-(line 1025,col 71)",
            "(line 1026,col 9)-(line 1026,col 73)",
            "(line 1027,col 9)-(line 1027,col 71)",
            "(line 1028,col 9)-(line 1028,col 72)",
            "(line 1030,col 9)-(line 1030,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testReplace_StringStringArrayStringArray()",
        "snippet": "    public void testReplace_StringStringArrayStringArray() {\n\n        \n        //JAVADOC TESTS START\n        assertNull(StringUtils.replaceEach(null, new String[]{\"a\"}, new String[]{\"b\"}));\n        assertEquals(StringUtils.replaceEach(\"\", new String[]{\"a\"}, new String[]{\"b\"}),\"\");\n        assertEquals(StringUtils.replaceEach(\"aba\", null, null),\"aba\");\n        assertEquals(StringUtils.replaceEach(\"aba\", new String[0], null),\"aba\");\n        assertEquals(StringUtils.replaceEach(\"aba\", null, new String[0]),\"aba\");\n        assertEquals(StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, null),\"aba\");\n\n        assertEquals(StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{\"\"}),\"b\");\n        assertEquals(StringUtils.replaceEach(\"aba\", new String[]{null}, new String[]{\"a\"}),\"aba\");\n        assertEquals(StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"}),\"wcte\");\n        assertEquals(StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"}),\"dcte\");\n        //JAVADOC TESTS END\n\n        assertEquals(\"bcc\", StringUtils.replaceEach(\"abc\", new String[]{\"a\", \"b\"}, new String[]{\"b\", \"c\"}));\n        assertEquals(\"q651.506bera\", StringUtils.replaceEach(\"d216.102oren\",\n            new String[]{\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \n                \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \n                \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \n                \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"},\n            new String[]{\"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \n                \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"N\", \"O\", \"P\", \"Q\", \n                \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \n                \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"5\", \"6\", \"7\", \"8\", \"9\", \"1\", \"2\", \"3\", \"4\"}));\n    }",
        "begin_line": 1036,
        "end_line": 1063,
        "comment": "\n     * Test method for 'org.apache.commons.lang.StringUtils.replaceEach(String, String[], String[])'\n     ",
        "child_ranges": [
            "(line 1040,col 9)-(line 1040,col 88)",
            "(line 1041,col 9)-(line 1041,col 91)",
            "(line 1042,col 9)-(line 1042,col 71)",
            "(line 1043,col 9)-(line 1043,col 80)",
            "(line 1044,col 9)-(line 1044,col 80)",
            "(line 1045,col 9)-(line 1045,col 84)",
            "(line 1047,col 9)-(line 1047,col 94)",
            "(line 1048,col 9)-(line 1048,col 98)",
            "(line 1049,col 9)-(line 1049,col 111)",
            "(line 1050,col 9)-(line 1050,col 111)",
            "(line 1053,col 9)-(line 1053,col 108)",
            "(line 1054,col 9)-(line 1062,col 93)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testReplace_StringStringArrayStringArrayBoolean()",
        "snippet": "    public void testReplace_StringStringArrayStringArrayBoolean() {\n        //JAVADOC TESTS START\n        assertNull(StringUtils.replaceEachRepeatedly(null, new String[]{\"a\"}, new String[]{\"b\"}));\n        assertEquals(StringUtils.replaceEachRepeatedly(\"\", new String[]{\"a\"}, new String[]{\"b\"}),\"\");\n        assertEquals(StringUtils.replaceEachRepeatedly(\"aba\", null, null),\"aba\");\n        assertEquals(StringUtils.replaceEachRepeatedly(\"aba\", new String[0], null),\"aba\");\n        assertEquals(StringUtils.replaceEachRepeatedly(\"aba\", null, new String[0]),\"aba\");\n        assertEquals(StringUtils.replaceEachRepeatedly(\"aba\", new String[0], null),\"aba\");\n\n        assertEquals(StringUtils.replaceEachRepeatedly(\"aba\", new String[]{\"a\"}, new String[]{\"\"}),\"b\");\n        assertEquals(StringUtils.replaceEachRepeatedly(\"aba\", new String[]{null}, new String[]{\"a\"}),\"aba\");\n        assertEquals(StringUtils.replaceEachRepeatedly(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"}),\"wcte\");\n        assertEquals(StringUtils.replaceEachRepeatedly(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"}),\"tcte\");\n\n        try {\n            StringUtils.replaceEachRepeatedly(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"ab\"});\n            fail(\"Should be a circular reference\");\n        } catch (IllegalStateException e) {}\n\n        //JAVADOC TESTS END\n\n    }",
        "begin_line": 1068,
        "end_line": 1089,
        "comment": "\n     * Test method for 'org.apache.commons.lang.StringUtils.replaceEachRepeatedly(String, String[], String[])'\n     ",
        "child_ranges": [
            "(line 1070,col 9)-(line 1070,col 98)",
            "(line 1071,col 9)-(line 1071,col 101)",
            "(line 1072,col 9)-(line 1072,col 81)",
            "(line 1073,col 9)-(line 1073,col 90)",
            "(line 1074,col 9)-(line 1074,col 90)",
            "(line 1075,col 9)-(line 1075,col 90)",
            "(line 1077,col 9)-(line 1077,col 104)",
            "(line 1078,col 9)-(line 1078,col 108)",
            "(line 1079,col 9)-(line 1079,col 121)",
            "(line 1080,col 9)-(line 1080,col 121)",
            "(line 1082,col 9)-(line 1085,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testReplaceChars_StringCharChar()",
        "snippet": "    public void testReplaceChars_StringCharChar() {\n        assertEquals(null, StringUtils.replaceChars(null, 'b', 'z'));\n        assertEquals(\"\", StringUtils.replaceChars(\"\", 'b', 'z'));\n        assertEquals(\"azcza\", StringUtils.replaceChars(\"abcba\", 'b', 'z'));\n        assertEquals(\"abcba\", StringUtils.replaceChars(\"abcba\", 'x', 'z'));\n    }",
        "begin_line": 1091,
        "end_line": 1096,
        "comment": "",
        "child_ranges": [
            "(line 1092,col 9)-(line 1092,col 69)",
            "(line 1093,col 9)-(line 1093,col 65)",
            "(line 1094,col 9)-(line 1094,col 75)",
            "(line 1095,col 9)-(line 1095,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testReplaceChars_StringStringString()",
        "snippet": "    public void testReplaceChars_StringStringString() {\n        assertEquals(null, StringUtils.replaceChars(null, null, null));\n        assertEquals(null, StringUtils.replaceChars(null, \"\", null));\n        assertEquals(null, StringUtils.replaceChars(null, \"a\", null));\n        assertEquals(null, StringUtils.replaceChars(null, null, \"\"));\n        assertEquals(null, StringUtils.replaceChars(null, null, \"x\"));\n        \n        assertEquals(\"\", StringUtils.replaceChars(\"\", null, null));\n        assertEquals(\"\", StringUtils.replaceChars(\"\", \"\", null));\n        assertEquals(\"\", StringUtils.replaceChars(\"\", \"a\", null));\n        assertEquals(\"\", StringUtils.replaceChars(\"\", null, \"\"));\n        assertEquals(\"\", StringUtils.replaceChars(\"\", null, \"x\"));\n\n        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", null, null));\n        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", null, \"\"));\n        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", null, \"x\"));\n        \n        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", \"\", null));\n        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", \"\", \"\"));\n        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", \"\", \"x\"));\n        \n        assertEquals(\"ac\", StringUtils.replaceChars(\"abc\", \"b\", null));\n        assertEquals(\"ac\", StringUtils.replaceChars(\"abc\", \"b\", \"\"));\n        assertEquals(\"axc\", StringUtils.replaceChars(\"abc\", \"b\", \"x\"));\n        \n        assertEquals(\"ayzya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"yz\"));\n        assertEquals(\"ayya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"y\"));\n        assertEquals(\"ayzya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"yzx\"));\n        \n        assertEquals(\"abcba\", StringUtils.replaceChars(\"abcba\", \"z\", \"w\"));\n        assertSame(\"abcba\", StringUtils.replaceChars(\"abcba\", \"z\", \"w\"));\n        \n        // Javadoc examples:\n        assertEquals(\"jelly\", StringUtils.replaceChars(\"hello\", \"ho\", \"jy\"));\n        assertEquals(\"ayzya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"yz\"));\n        assertEquals(\"ayya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"y\"));\n        assertEquals(\"ayzya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"yzx\"));\n        \n        // From http://issues.apache.org/bugzilla/show_bug.cgi?id=25454\n        assertEquals(\"bcc\", StringUtils.replaceChars(\"abc\", \"ab\", \"bc\"));\n        assertEquals(\"q651.506bera\", StringUtils.replaceChars(\"d216.102oren\",\n            \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789\",\n            \"nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM567891234\"));\n    }",
        "begin_line": 1098,
        "end_line": 1141,
        "comment": "",
        "child_ranges": [
            "(line 1099,col 9)-(line 1099,col 71)",
            "(line 1100,col 9)-(line 1100,col 69)",
            "(line 1101,col 9)-(line 1101,col 70)",
            "(line 1102,col 9)-(line 1102,col 69)",
            "(line 1103,col 9)-(line 1103,col 70)",
            "(line 1105,col 9)-(line 1105,col 67)",
            "(line 1106,col 9)-(line 1106,col 65)",
            "(line 1107,col 9)-(line 1107,col 66)",
            "(line 1108,col 9)-(line 1108,col 65)",
            "(line 1109,col 9)-(line 1109,col 66)",
            "(line 1111,col 9)-(line 1111,col 73)",
            "(line 1112,col 9)-(line 1112,col 71)",
            "(line 1113,col 9)-(line 1113,col 72)",
            "(line 1115,col 9)-(line 1115,col 71)",
            "(line 1116,col 9)-(line 1116,col 69)",
            "(line 1117,col 9)-(line 1117,col 70)",
            "(line 1119,col 9)-(line 1119,col 71)",
            "(line 1120,col 9)-(line 1120,col 69)",
            "(line 1121,col 9)-(line 1121,col 71)",
            "(line 1123,col 9)-(line 1123,col 77)",
            "(line 1124,col 9)-(line 1124,col 75)",
            "(line 1125,col 9)-(line 1125,col 78)",
            "(line 1127,col 9)-(line 1127,col 75)",
            "(line 1128,col 9)-(line 1128,col 73)",
            "(line 1131,col 9)-(line 1131,col 77)",
            "(line 1132,col 9)-(line 1132,col 77)",
            "(line 1133,col 9)-(line 1133,col 75)",
            "(line 1134,col 9)-(line 1134,col 78)",
            "(line 1137,col 9)-(line 1137,col 73)",
            "(line 1138,col 9)-(line 1140,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testDeprecatedOverlayString_StringStringIntInt()",
        "snippet": "    public void testDeprecatedOverlayString_StringStringIntInt() {\n        assertEquals(\"overlayString(String, String, int, int) failed\",\n                     \"foo foor baz\", StringUtils.overlayString(SENTENCE_UNCAP, FOO_UNCAP, 4, 6) );\n        assertEquals(\"abef\", StringUtils.overlayString(\"abcdef\", \"\", 2, 4));\n        assertEquals(\"abzzzzef\", StringUtils.overlayString(\"abcdef\", \"zzzz\", 2, 4));\n        assertEquals(\"abcdzzzzcdef\", StringUtils.overlayString(\"abcdef\", \"zzzz\", 4, 2));\n        try {\n            StringUtils.overlayString(null, \"zzzz\", 2, 4);\n            fail();\n        } catch (NullPointerException ex) {}\n        try {\n            StringUtils.overlayString(\"abcdef\", null, 2, 4);\n            fail();\n        } catch (NullPointerException ex) {}\n        try {\n            StringUtils.overlayString(\"abcdef\", \"zzzz\", -1, 4);\n            fail();\n        } catch (IndexOutOfBoundsException ex) {}\n        try {\n            StringUtils.overlayString(\"abcdef\", \"zzzz\", 2, 8);\n            fail();\n        } catch (IndexOutOfBoundsException ex) {}\n    }",
        "begin_line": 1143,
        "end_line": 1165,
        "comment": "",
        "child_ranges": [
            "(line 1144,col 9)-(line 1145,col 98)",
            "(line 1146,col 9)-(line 1146,col 76)",
            "(line 1147,col 9)-(line 1147,col 84)",
            "(line 1148,col 9)-(line 1148,col 88)",
            "(line 1149,col 9)-(line 1152,col 44)",
            "(line 1153,col 9)-(line 1156,col 44)",
            "(line 1157,col 9)-(line 1160,col 49)",
            "(line 1161,col 9)-(line 1164,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testOverlay_StringStringIntInt()",
        "snippet": "    public void testOverlay_StringStringIntInt() {\n        assertEquals(null, StringUtils.overlay(null, null, 2, 4));\n        assertEquals(null, StringUtils.overlay(null, null, -2, -4));\n        \n        assertEquals(\"\", StringUtils.overlay(\"\", null, 0, 0));\n        assertEquals(\"\", StringUtils.overlay(\"\", \"\", 0, 0));\n        assertEquals(\"zzzz\", StringUtils.overlay(\"\", \"zzzz\", 0, 0));\n        assertEquals(\"zzzz\", StringUtils.overlay(\"\", \"zzzz\", 2, 4));\n        assertEquals(\"zzzz\", StringUtils.overlay(\"\", \"zzzz\", -2, -4));\n        \n        assertEquals(\"abef\", StringUtils.overlay(\"abcdef\", null, 2, 4));\n        assertEquals(\"abef\", StringUtils.overlay(\"abcdef\", null, 4, 2));\n        assertEquals(\"abef\", StringUtils.overlay(\"abcdef\", \"\", 2, 4));\n        assertEquals(\"abef\", StringUtils.overlay(\"abcdef\", \"\", 4, 2));\n        assertEquals(\"abzzzzef\", StringUtils.overlay(\"abcdef\", \"zzzz\", 2, 4));\n        assertEquals(\"abzzzzef\", StringUtils.overlay(\"abcdef\", \"zzzz\", 4, 2));\n        \n        assertEquals(\"zzzzef\", StringUtils.overlay(\"abcdef\", \"zzzz\", -1, 4));\n        assertEquals(\"zzzzef\", StringUtils.overlay(\"abcdef\", \"zzzz\", 4, -1));\n        assertEquals(\"zzzzabcdef\", StringUtils.overlay(\"abcdef\", \"zzzz\", -2, -1));\n        assertEquals(\"zzzzabcdef\", StringUtils.overlay(\"abcdef\", \"zzzz\", -1, -2));\n        assertEquals(\"abcdzzzz\", StringUtils.overlay(\"abcdef\", \"zzzz\", 4, 10));\n        assertEquals(\"abcdzzzz\", StringUtils.overlay(\"abcdef\", \"zzzz\", 10, 4));\n        assertEquals(\"abcdefzzzz\", StringUtils.overlay(\"abcdef\", \"zzzz\", 8, 10));\n        assertEquals(\"abcdefzzzz\", StringUtils.overlay(\"abcdef\", \"zzzz\", 10, 8));\n    }",
        "begin_line": 1167,
        "end_line": 1192,
        "comment": "",
        "child_ranges": [
            "(line 1168,col 9)-(line 1168,col 66)",
            "(line 1169,col 9)-(line 1169,col 68)",
            "(line 1171,col 9)-(line 1171,col 62)",
            "(line 1172,col 9)-(line 1172,col 60)",
            "(line 1173,col 9)-(line 1173,col 68)",
            "(line 1174,col 9)-(line 1174,col 68)",
            "(line 1175,col 9)-(line 1175,col 70)",
            "(line 1177,col 9)-(line 1177,col 72)",
            "(line 1178,col 9)-(line 1178,col 72)",
            "(line 1179,col 9)-(line 1179,col 70)",
            "(line 1180,col 9)-(line 1180,col 70)",
            "(line 1181,col 9)-(line 1181,col 78)",
            "(line 1182,col 9)-(line 1182,col 78)",
            "(line 1184,col 9)-(line 1184,col 77)",
            "(line 1185,col 9)-(line 1185,col 77)",
            "(line 1186,col 9)-(line 1186,col 82)",
            "(line 1187,col 9)-(line 1187,col 82)",
            "(line 1188,col 9)-(line 1188,col 79)",
            "(line 1189,col 9)-(line 1189,col 79)",
            "(line 1190,col 9)-(line 1190,col 81)",
            "(line 1191,col 9)-(line 1191,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testRepeat_StringInt()",
        "snippet": "    public void testRepeat_StringInt() {\n        assertEquals(null, StringUtils.repeat(null, 2));\n        assertEquals(\"\", StringUtils.repeat(\"ab\", 0));\n        assertEquals(\"\", StringUtils.repeat(\"\", 3));\n        assertEquals(\"aaa\", StringUtils.repeat(\"a\", 3));\n        assertEquals(\"ababab\", StringUtils.repeat(\"ab\", 3));\n        assertEquals(\"abcabcabc\", StringUtils.repeat(\"abc\", 3));\n        String str = StringUtils.repeat(\"a\", 10000);  // bigger than pad limit\n        assertEquals(10000, str.length());\n        assertEquals(true, StringUtils.containsOnly(str, new char[] {'a'}));\n    }",
        "begin_line": 1194,
        "end_line": 1204,
        "comment": "",
        "child_ranges": [
            "(line 1195,col 9)-(line 1195,col 56)",
            "(line 1196,col 9)-(line 1196,col 54)",
            "(line 1197,col 9)-(line 1197,col 52)",
            "(line 1198,col 9)-(line 1198,col 56)",
            "(line 1199,col 9)-(line 1199,col 60)",
            "(line 1200,col 9)-(line 1200,col 64)",
            "(line 1201,col 9)-(line 1201,col 52)",
            "(line 1202,col 9)-(line 1202,col 42)",
            "(line 1203,col 9)-(line 1203,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testDeprecatedChompFunctions()",
        "snippet": "    public void testDeprecatedChompFunctions() {\n        assertEquals(\"chompLast(String) failed\",\n                     FOO_UNCAP, StringUtils.chompLast(FOO_UNCAP + \"\\n\") );\n\n        assertEquals(\"chompLast(\\\"\\\") failed\",\n            \"\", StringUtils.chompLast(\"\") );\n        assertEquals(\"chompLast(\\\"test\\\", \\\"test\\\") failed\",\n            \"test\", StringUtils.chompLast(\"test\", \"tst\") );\n        \n        assertEquals(\"getChomp(String, String) failed\",\n                     \"\\n\" + FOO_UNCAP, StringUtils.getChomp(FOO_UNCAP + \"\\n\" + FOO_UNCAP, \"\\n\") );\n        assertEquals(\"getChomp(String, String) failed\",\n                     FOO_CAP, StringUtils.getChomp(FOO_CAP+FOO_CAP, FOO_CAP));\n        assertEquals(\"getChomp(String, String) failed\",\n                     \"\", StringUtils.getChomp(FOO_UNCAP, FOO_CAP));\n\n        assertEquals(\"prechomp(String, String) failed\",\n                     FOO_UNCAP, StringUtils.prechomp(FOO_UNCAP + \"\\n\" + FOO_UNCAP, \"\\n\") );\n        assertEquals(\"prechomp(String, String) failed\",\n                     FOO_UNCAP, StringUtils.prechomp(FOO_UNCAP, FOO_CAP));\n        \n        assertEquals(\"getPrechomp(String, String) failed\",\n                     FOO_UNCAP + \"\\n\", StringUtils.getPrechomp(FOO_UNCAP + \"\\n\" + FOO_UNCAP, \"\\n\") );\n        assertEquals(\"getPrechomp(String, String) failed\",\n                     \"\", StringUtils.getPrechomp(FOO_CAP, FOO_UNCAP));\n        \n        assertEquals(\"chopNewline(String, String) failed\",\n                     FOO_UNCAP, StringUtils.chopNewline(FOO_UNCAP + \"\\r\\n\") );\n    }",
        "begin_line": 1206,
        "end_line": 1234,
        "comment": "",
        "child_ranges": [
            "(line 1207,col 9)-(line 1208,col 74)",
            "(line 1210,col 9)-(line 1211,col 44)",
            "(line 1212,col 9)-(line 1213,col 59)",
            "(line 1215,col 9)-(line 1216,col 98)",
            "(line 1217,col 9)-(line 1218,col 78)",
            "(line 1219,col 9)-(line 1220,col 67)",
            "(line 1222,col 9)-(line 1223,col 91)",
            "(line 1224,col 9)-(line 1225,col 74)",
            "(line 1227,col 9)-(line 1228,col 101)",
            "(line 1229,col 9)-(line 1230,col 70)",
            "(line 1232,col 9)-(line 1233,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testChop()",
        "snippet": "    public void testChop() {\n\n        String[][] chopCases = {\n            { FOO_UNCAP + \"\\r\\n\", FOO_UNCAP } ,\n            { FOO_UNCAP + \"\\n\" , FOO_UNCAP } ,\n            { FOO_UNCAP + \"\\r\", FOO_UNCAP },\n            { FOO_UNCAP + \" \\r\", FOO_UNCAP + \" \" },\n            { \"foo\", \"fo\"},\n            { \"foo\\nfoo\", \"foo\\nfo\" },\n            { \"\\n\", \"\" },\n            { \"\\r\", \"\" },\n            { \"\\r\\n\", \"\" },\n            { null, null },\n            { \"\", \"\" },\n            { \"a\", \"\" },\n        };\n        for (int i = 0; i < chopCases.length; i++) {\n            String original = chopCases[i][0];\n            String expectedResult = chopCases[i][1];\n            assertEquals(\"chop(String) failed\",\n                    expectedResult, StringUtils.chop(original));\n        }\n    }",
        "begin_line": 1236,
        "end_line": 1258,
        "comment": "",
        "child_ranges": [
            "(line 1238,col 9)-(line 1251,col 10)",
            "(line 1252,col 9)-(line 1257,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testChomp()",
        "snippet": "    public void testChomp() {\n\n        String[][] chompCases = {\n            { FOO_UNCAP + \"\\r\\n\", FOO_UNCAP },\n            { FOO_UNCAP + \"\\n\" , FOO_UNCAP },\n            { FOO_UNCAP + \"\\r\", FOO_UNCAP },\n            { FOO_UNCAP + \" \\r\", FOO_UNCAP + \" \" },\n            { FOO_UNCAP, FOO_UNCAP },\n            { FOO_UNCAP + \"\\n\\n\", FOO_UNCAP + \"\\n\"},\n            { FOO_UNCAP + \"\\r\\n\\r\\n\", FOO_UNCAP + \"\\r\\n\" },\n            { \"foo\\nfoo\", \"foo\\nfoo\" },\n            { \"foo\\n\\rfoo\", \"foo\\n\\rfoo\" },\n            { \"\\n\", \"\" },\n            { \"\\r\", \"\" },\n            { \"a\", \"a\" },\n            { \"\\r\\n\", \"\" },\n            { \"\", \"\" },\n            { null, null },\n            { FOO_UNCAP + \"\\n\\r\", FOO_UNCAP + \"\\n\"}\n        };\n        for (int i = 0; i < chompCases.length; i++) {\n            String original = chompCases[i][0];\n            String expectedResult = chompCases[i][1];\n            assertEquals(\"chomp(String) failed\",\n                    expectedResult, StringUtils.chomp(original));\n        }\n\n        assertEquals(\"chomp(String, String) failed\",\n                \"foo\", StringUtils.chomp(\"foobar\", \"bar\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \"foobar\", StringUtils.chomp(\"foobar\", \"baz\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \"foo\", StringUtils.chomp(\"foo\", \"foooo\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \"foobar\", StringUtils.chomp(\"foobar\", \"\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \"foobar\", StringUtils.chomp(\"foobar\", null));\n        assertEquals(\"chomp(String, String) failed\",\n                \"\", StringUtils.chomp(\"\", \"foo\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \"\", StringUtils.chomp(\"\", null));\n        assertEquals(\"chomp(String, String) failed\",\n                \"\", StringUtils.chomp(\"\", \"\"));\n        assertEquals(\"chomp(String, String) failed\",\n                null, StringUtils.chomp(null, \"foo\"));\n        assertEquals(\"chomp(String, String) failed\",\n                null, StringUtils.chomp(null, null));\n        assertEquals(\"chomp(String, String) failed\",\n                null, StringUtils.chomp(null, \"\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \"\", StringUtils.chomp(\"foo\", \"foo\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \" \", StringUtils.chomp(\" foo\", \"foo\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \"foo \", StringUtils.chomp(\"foo \", \"foo\"));\n    }",
        "begin_line": 1260,
        "end_line": 1315,
        "comment": "",
        "child_ranges": [
            "(line 1262,col 9)-(line 1279,col 10)",
            "(line 1280,col 9)-(line 1285,col 9)",
            "(line 1287,col 9)-(line 1288,col 59)",
            "(line 1289,col 9)-(line 1290,col 62)",
            "(line 1291,col 9)-(line 1292,col 58)",
            "(line 1293,col 9)-(line 1294,col 59)",
            "(line 1295,col 9)-(line 1296,col 61)",
            "(line 1297,col 9)-(line 1298,col 50)",
            "(line 1299,col 9)-(line 1300,col 49)",
            "(line 1301,col 9)-(line 1302,col 47)",
            "(line 1303,col 9)-(line 1304,col 54)",
            "(line 1305,col 9)-(line 1306,col 53)",
            "(line 1307,col 9)-(line 1308,col 51)",
            "(line 1309,col 9)-(line 1310,col 53)",
            "(line 1311,col 9)-(line 1312,col 55)",
            "(line 1313,col 9)-(line 1314,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testChopNewLine()",
        "snippet": "    public void testChopNewLine() {\n\n        String[][] newLineCases = {\n            { FOO_UNCAP + \"\\r\\n\", FOO_UNCAP } ,\n            { FOO_UNCAP + \"\\n\" , FOO_UNCAP } ,\n            { FOO_UNCAP + \"\\r\", FOO_UNCAP + \"\\r\" },\n            { FOO_UNCAP, FOO_UNCAP },\n            { FOO_UNCAP + \"\\n\" + FOO_UNCAP , FOO_UNCAP + \"\\n\" + FOO_UNCAP },\n            { FOO_UNCAP + \"\\n\\n\", FOO_UNCAP + \"\\n\"},\n            { \"\\n\", \"\" },\n            { \"\", \"\" },\n            { \"\\r\\n\", \"\" }\n      };\n\n      for (int i = 0; i < newLineCases.length; i++) {\n          String original = newLineCases[i][0];\n          String expectedResult = newLineCases[i][1];\n          assertEquals(\"chopNewline(String) failed\",\n                  expectedResult, StringUtils.chopNewline(original));\n      }\n    }",
        "begin_line": 1317,
        "end_line": 1337,
        "comment": "",
        "child_ranges": [
            "(line 1319,col 9)-(line 1329,col 8)",
            "(line 1331,col 7)-(line 1336,col 7)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testRightPad_StringInt()",
        "snippet": "    public void testRightPad_StringInt() {\n        assertEquals(null, StringUtils.rightPad(null, 5));\n        assertEquals(\"     \", StringUtils.rightPad(\"\", 5));\n        assertEquals(\"abc  \", StringUtils.rightPad(\"abc\", 5));\n        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", 2));\n        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", -1));\n    }",
        "begin_line": 1340,
        "end_line": 1346,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1341,col 9)-(line 1341,col 58)",
            "(line 1342,col 9)-(line 1342,col 59)",
            "(line 1343,col 9)-(line 1343,col 62)",
            "(line 1344,col 9)-(line 1344,col 60)",
            "(line 1345,col 9)-(line 1345,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testRightPad_StringIntChar()",
        "snippet": "    public void testRightPad_StringIntChar() {\n        assertEquals(null, StringUtils.rightPad(null, 5, ' '));\n        assertEquals(\"     \", StringUtils.rightPad(\"\", 5, ' '));\n        assertEquals(\"abc  \", StringUtils.rightPad(\"abc\", 5, ' '));\n        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", 2, ' '));\n        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", -1, ' '));\n        assertEquals(\"abcxx\", StringUtils.rightPad(\"abc\", 5, 'x'));\n        String str = StringUtils.rightPad(\"aaa\", 10000, 'a');  // bigger than pad length\n        assertEquals(10000, str.length());\n        assertEquals(true, StringUtils.containsOnly(str, new char[] {'a'}));\n    }",
        "begin_line": 1348,
        "end_line": 1358,
        "comment": "",
        "child_ranges": [
            "(line 1349,col 9)-(line 1349,col 63)",
            "(line 1350,col 9)-(line 1350,col 64)",
            "(line 1351,col 9)-(line 1351,col 67)",
            "(line 1352,col 9)-(line 1352,col 65)",
            "(line 1353,col 9)-(line 1353,col 66)",
            "(line 1354,col 9)-(line 1354,col 67)",
            "(line 1355,col 9)-(line 1355,col 61)",
            "(line 1356,col 9)-(line 1356,col 42)",
            "(line 1357,col 9)-(line 1357,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testRightPad_StringIntString()",
        "snippet": "    public void testRightPad_StringIntString() {\n        assertEquals(null, StringUtils.rightPad(null, 5, \"-+\"));\n        assertEquals(\"     \", StringUtils.rightPad(\"\", 5, \" \"));\n        assertEquals(null, StringUtils.rightPad(null, 8, null));\n        assertEquals(\"abc-+-+\", StringUtils.rightPad(\"abc\", 7, \"-+\"));\n        assertEquals(\"abc-+~\", StringUtils.rightPad(\"abc\", 6, \"-+~\"));\n        assertEquals(\"abc-+\", StringUtils.rightPad(\"abc\", 5, \"-+~\"));\n        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", 2, \" \"));\n        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", -1, \" \"));\n        assertEquals(\"abc  \", StringUtils.rightPad(\"abc\", 5, null));\n        assertEquals(\"abc  \", StringUtils.rightPad(\"abc\", 5, \"\"));\n    }",
        "begin_line": 1360,
        "end_line": 1371,
        "comment": "",
        "child_ranges": [
            "(line 1361,col 9)-(line 1361,col 64)",
            "(line 1362,col 9)-(line 1362,col 64)",
            "(line 1363,col 9)-(line 1363,col 64)",
            "(line 1364,col 9)-(line 1364,col 70)",
            "(line 1365,col 9)-(line 1365,col 70)",
            "(line 1366,col 9)-(line 1366,col 69)",
            "(line 1367,col 9)-(line 1367,col 65)",
            "(line 1368,col 9)-(line 1368,col 66)",
            "(line 1369,col 9)-(line 1369,col 68)",
            "(line 1370,col 9)-(line 1370,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testLeftPad_StringInt()",
        "snippet": "    public void testLeftPad_StringInt() {\n        assertEquals(null, StringUtils.leftPad(null, 5));\n        assertEquals(\"     \", StringUtils.leftPad(\"\", 5));\n        assertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5));\n        assertEquals(\"abc\", StringUtils.leftPad(\"abc\", 2));\n    }",
        "begin_line": 1374,
        "end_line": 1379,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1375,col 9)-(line 1375,col 57)",
            "(line 1376,col 9)-(line 1376,col 58)",
            "(line 1377,col 9)-(line 1377,col 61)",
            "(line 1378,col 9)-(line 1378,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testLeftPad_StringIntChar()",
        "snippet": "    public void testLeftPad_StringIntChar() {\n        assertEquals(null, StringUtils.leftPad(null, 5, ' '));\n        assertEquals(\"     \", StringUtils.leftPad(\"\", 5, ' '));\n        assertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5, ' '));\n        assertEquals(\"xxabc\", StringUtils.leftPad(\"abc\", 5, 'x'));\n        assertEquals(\"\\uffff\\uffffabc\", StringUtils.leftPad(\"abc\", 5, '\\uffff'));\n        assertEquals(\"abc\", StringUtils.leftPad(\"abc\", 2, ' '));\n        String str = StringUtils.leftPad(\"aaa\", 10000, 'a');  // bigger than pad length\n        assertEquals(10000, str.length());\n        assertEquals(true, StringUtils.containsOnly(str, new char[] {'a'}));\n    }",
        "begin_line": 1381,
        "end_line": 1391,
        "comment": "",
        "child_ranges": [
            "(line 1382,col 9)-(line 1382,col 62)",
            "(line 1383,col 9)-(line 1383,col 63)",
            "(line 1384,col 9)-(line 1384,col 66)",
            "(line 1385,col 9)-(line 1385,col 66)",
            "(line 1386,col 9)-(line 1386,col 81)",
            "(line 1387,col 9)-(line 1387,col 64)",
            "(line 1388,col 9)-(line 1388,col 60)",
            "(line 1389,col 9)-(line 1389,col 42)",
            "(line 1390,col 9)-(line 1390,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testLeftPad_StringIntString()",
        "snippet": "    public void testLeftPad_StringIntString() {\n        assertEquals(null, StringUtils.leftPad(null, 5, \"-+\"));\n        assertEquals(null, StringUtils.leftPad(null, 5, null));\n        assertEquals(\"     \", StringUtils.leftPad(\"\", 5, \" \"));\n        assertEquals(\"-+-+abc\", StringUtils.leftPad(\"abc\", 7, \"-+\"));\n        assertEquals(\"-+~abc\", StringUtils.leftPad(\"abc\", 6, \"-+~\"));\n        assertEquals(\"-+abc\", StringUtils.leftPad(\"abc\", 5, \"-+~\"));\n        assertEquals(\"abc\", StringUtils.leftPad(\"abc\", 2, \" \"));\n        assertEquals(\"abc\", StringUtils.leftPad(\"abc\", -1, \" \"));\n        assertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5, null));\n        assertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5, \"\"));\n    }",
        "begin_line": 1393,
        "end_line": 1404,
        "comment": "",
        "child_ranges": [
            "(line 1394,col 9)-(line 1394,col 63)",
            "(line 1395,col 9)-(line 1395,col 63)",
            "(line 1396,col 9)-(line 1396,col 63)",
            "(line 1397,col 9)-(line 1397,col 69)",
            "(line 1398,col 9)-(line 1398,col 69)",
            "(line 1399,col 9)-(line 1399,col 68)",
            "(line 1400,col 9)-(line 1400,col 64)",
            "(line 1401,col 9)-(line 1401,col 65)",
            "(line 1402,col 9)-(line 1402,col 67)",
            "(line 1403,col 9)-(line 1403,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testLength()",
        "snippet": "    public void testLength() {\n        assertEquals(0, StringUtils.length(null));\n        assertEquals(0, StringUtils.length(\"\"));\n        assertEquals(0, StringUtils.length(StringUtils.EMPTY));\n        assertEquals(1, StringUtils.length(\"A\"));\n        assertEquals(1, StringUtils.length(\" \"));\n        assertEquals(8, StringUtils.length(\"ABCDEFGH\"));\n    }",
        "begin_line": 1406,
        "end_line": 1413,
        "comment": "",
        "child_ranges": [
            "(line 1407,col 9)-(line 1407,col 50)",
            "(line 1408,col 9)-(line 1408,col 48)",
            "(line 1409,col 9)-(line 1409,col 63)",
            "(line 1410,col 9)-(line 1410,col 49)",
            "(line 1411,col 9)-(line 1411,col 49)",
            "(line 1412,col 9)-(line 1412,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testCenter_StringInt()",
        "snippet": "    public void testCenter_StringInt() {\n        assertEquals(null, StringUtils.center(null, -1));\n        assertEquals(null, StringUtils.center(null, 4));\n        assertEquals(\"    \", StringUtils.center(\"\", 4));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", 0));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", -1));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", 1));\n        assertEquals(\"    \", StringUtils.center(\"\", 4));\n        assertEquals(\" ab \", StringUtils.center(\"ab\", 4));\n        assertEquals(\"abcd\", StringUtils.center(\"abcd\", 2));\n        assertEquals(\" a  \", StringUtils.center(\"a\", 4));\n        assertEquals(\"  a  \", StringUtils.center(\"a\", 5));\n    }",
        "begin_line": 1416,
        "end_line": 1428,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1417,col 9)-(line 1417,col 57)",
            "(line 1418,col 9)-(line 1418,col 56)",
            "(line 1419,col 9)-(line 1419,col 56)",
            "(line 1420,col 9)-(line 1420,col 56)",
            "(line 1421,col 9)-(line 1421,col 57)",
            "(line 1422,col 9)-(line 1422,col 56)",
            "(line 1423,col 9)-(line 1423,col 56)",
            "(line 1424,col 9)-(line 1424,col 58)",
            "(line 1425,col 9)-(line 1425,col 60)",
            "(line 1426,col 9)-(line 1426,col 57)",
            "(line 1427,col 9)-(line 1427,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testCenter_StringIntChar()",
        "snippet": "    public void testCenter_StringIntChar() {\n        assertEquals(null, StringUtils.center(null, -1, ' '));\n        assertEquals(null, StringUtils.center(null, 4, ' '));\n        assertEquals(\"    \", StringUtils.center(\"\", 4, ' '));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", 0, ' '));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", -1, ' '));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", 1, ' '));\n        assertEquals(\"    \", StringUtils.center(\"\", 4, ' '));\n        assertEquals(\" ab \", StringUtils.center(\"ab\", 4, ' '));\n        assertEquals(\"abcd\", StringUtils.center(\"abcd\", 2, ' '));\n        assertEquals(\" a  \", StringUtils.center(\"a\", 4, ' '));\n        assertEquals(\"  a  \", StringUtils.center(\"a\", 5, ' '));\n        assertEquals(\"xxaxx\", StringUtils.center(\"a\", 5, 'x'));\n    }",
        "begin_line": 1430,
        "end_line": 1443,
        "comment": "",
        "child_ranges": [
            "(line 1431,col 9)-(line 1431,col 62)",
            "(line 1432,col 9)-(line 1432,col 61)",
            "(line 1433,col 9)-(line 1433,col 61)",
            "(line 1434,col 9)-(line 1434,col 61)",
            "(line 1435,col 9)-(line 1435,col 62)",
            "(line 1436,col 9)-(line 1436,col 61)",
            "(line 1437,col 9)-(line 1437,col 61)",
            "(line 1438,col 9)-(line 1438,col 63)",
            "(line 1439,col 9)-(line 1439,col 65)",
            "(line 1440,col 9)-(line 1440,col 62)",
            "(line 1441,col 9)-(line 1441,col 63)",
            "(line 1442,col 9)-(line 1442,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testCenter_StringIntString()",
        "snippet": "    public void testCenter_StringIntString() {\n        assertEquals(null, StringUtils.center(null, 4, null));\n        assertEquals(null, StringUtils.center(null, -1, \" \"));\n        assertEquals(null, StringUtils.center(null, 4, \" \"));\n        assertEquals(\"    \", StringUtils.center(\"\", 4, \" \"));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", 0, \" \"));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", -1, \" \"));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", 1, \" \"));\n        assertEquals(\"    \", StringUtils.center(\"\", 4, \" \"));\n        assertEquals(\" ab \", StringUtils.center(\"ab\", 4, \" \"));\n        assertEquals(\"abcd\", StringUtils.center(\"abcd\", 2, \" \"));\n        assertEquals(\" a  \", StringUtils.center(\"a\", 4, \" \"));\n        assertEquals(\"yayz\", StringUtils.center(\"a\", 4, \"yz\"));\n        assertEquals(\"yzyayzy\", StringUtils.center(\"a\", 7, \"yz\"));\n        assertEquals(\"  abc  \", StringUtils.center(\"abc\", 7, null));\n        assertEquals(\"  abc  \", StringUtils.center(\"abc\", 7, \"\"));\n    }",
        "begin_line": 1445,
        "end_line": 1461,
        "comment": "",
        "child_ranges": [
            "(line 1446,col 9)-(line 1446,col 62)",
            "(line 1447,col 9)-(line 1447,col 62)",
            "(line 1448,col 9)-(line 1448,col 61)",
            "(line 1449,col 9)-(line 1449,col 61)",
            "(line 1450,col 9)-(line 1450,col 61)",
            "(line 1451,col 9)-(line 1451,col 62)",
            "(line 1452,col 9)-(line 1452,col 61)",
            "(line 1453,col 9)-(line 1453,col 61)",
            "(line 1454,col 9)-(line 1454,col 63)",
            "(line 1455,col 9)-(line 1455,col 65)",
            "(line 1456,col 9)-(line 1456,col 62)",
            "(line 1457,col 9)-(line 1457,col 63)",
            "(line 1458,col 9)-(line 1458,col 66)",
            "(line 1459,col 9)-(line 1459,col 68)",
            "(line 1460,col 9)-(line 1460,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testReverse_String()",
        "snippet": "    public void testReverse_String() {\n        assertEquals(null, StringUtils.reverse(null) );\n        assertEquals(\"\", StringUtils.reverse(\"\") );\n        assertEquals(\"sdrawkcab\", StringUtils.reverse(\"backwards\") );\n    }",
        "begin_line": 1464,
        "end_line": 1468,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1465,col 9)-(line 1465,col 55)",
            "(line 1466,col 9)-(line 1466,col 51)",
            "(line 1467,col 9)-(line 1467,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testReverseDelimited_StringChar()",
        "snippet": "    public void testReverseDelimited_StringChar() {\n        assertEquals(null, StringUtils.reverseDelimited(null, '.') );\n        assertEquals(\"\", StringUtils.reverseDelimited(\"\", '.') );\n        assertEquals(\"c.b.a\", StringUtils.reverseDelimited(\"a.b.c\", '.') );\n        assertEquals(\"a b c\", StringUtils.reverseDelimited(\"a b c\", '.') );\n        assertEquals(\"\", StringUtils.reverseDelimited(\"\", '.') );\n    }",
        "begin_line": 1470,
        "end_line": 1476,
        "comment": "",
        "child_ranges": [
            "(line 1471,col 9)-(line 1471,col 69)",
            "(line 1472,col 9)-(line 1472,col 65)",
            "(line 1473,col 9)-(line 1473,col 75)",
            "(line 1474,col 9)-(line 1474,col 75)",
            "(line 1475,col 9)-(line 1475,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testDeprecatedReverseDelimitedString_StringString()",
        "snippet": "    public void testDeprecatedReverseDelimitedString_StringString() {\n        assertEquals(null, StringUtils.reverseDelimitedString(null, null) );\n        assertEquals(\"\", StringUtils.reverseDelimitedString(\"\", null) );\n        assertEquals(\"\", StringUtils.reverseDelimitedString(\"\", \".\") );\n        assertEquals(\"a.b.c\", StringUtils.reverseDelimitedString(\"a.b.c\", null) );\n        assertEquals(\"c b a\", StringUtils.reverseDelimitedString(\"a b c\", null) );\n        assertEquals(\"c.b.a\", StringUtils.reverseDelimitedString(\"a.b.c\", \".\") );\n    }",
        "begin_line": 1478,
        "end_line": 1485,
        "comment": "",
        "child_ranges": [
            "(line 1479,col 9)-(line 1479,col 76)",
            "(line 1480,col 9)-(line 1480,col 72)",
            "(line 1481,col 9)-(line 1481,col 71)",
            "(line 1482,col 9)-(line 1482,col 82)",
            "(line 1483,col 9)-(line 1483,col 82)",
            "(line 1484,col 9)-(line 1484,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testDefault_String()",
        "snippet": "    public void testDefault_String() {\n        assertEquals(\"\", StringUtils.defaultString(null));\n        assertEquals(\"\", StringUtils.defaultString(\"\"));\n        assertEquals(\"abc\", StringUtils.defaultString(\"abc\"));\n    }",
        "begin_line": 1488,
        "end_line": 1492,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1489,col 9)-(line 1489,col 58)",
            "(line 1490,col 9)-(line 1490,col 56)",
            "(line 1491,col 9)-(line 1491,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testDefault_StringString()",
        "snippet": "    public void testDefault_StringString() {\n        assertEquals(\"NULL\", StringUtils.defaultString(null, \"NULL\"));\n        assertEquals(\"\", StringUtils.defaultString(\"\", \"NULL\"));\n        assertEquals(\"abc\", StringUtils.defaultString(\"abc\", \"NULL\"));\n    }",
        "begin_line": 1494,
        "end_line": 1498,
        "comment": "",
        "child_ranges": [
            "(line 1495,col 9)-(line 1495,col 70)",
            "(line 1496,col 9)-(line 1496,col 64)",
            "(line 1497,col 9)-(line 1497,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testDefaultIfEmpty_StringString()",
        "snippet": "    public void testDefaultIfEmpty_StringString() {\n        assertEquals(\"NULL\", StringUtils.defaultIfEmpty(null, \"NULL\"));\n        assertEquals(\"NULL\", StringUtils.defaultIfEmpty(\"\", \"NULL\"));\n        assertEquals(\"abc\", StringUtils.defaultIfEmpty(\"abc\", \"NULL\"));\n    }",
        "begin_line": 1500,
        "end_line": 1504,
        "comment": "",
        "child_ranges": [
            "(line 1501,col 9)-(line 1501,col 71)",
            "(line 1502,col 9)-(line 1502,col 69)",
            "(line 1503,col 9)-(line 1503,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testDeprecatedEscapeFunctions_String()",
        "snippet": "    public void testDeprecatedEscapeFunctions_String() {\n        assertEquals(\"\", StringUtils.escape(\"\") );\n        assertEquals(\"abc\", StringUtils.escape(\"abc\") );\n        assertEquals(\"\\\\t\", StringUtils.escape(\"\\t\") );\n        assertEquals(\"\\\\\\\\\", StringUtils.escape(\"\\\\\") );\n        assertEquals(\"\\\\\\\\\\\\b\\\\t\\\\r\", StringUtils.escape(\"\\\\\\b\\t\\r\") );\n        assertEquals(\"\\\\u1234\", StringUtils.escape(\"\\u1234\") );\n        assertEquals(\"\\\\u0234\", StringUtils.escape(\"\\u0234\") );\n        assertEquals(\"\\\\u00FD\", StringUtils.escape(\"\\u00fd\") );\n    }",
        "begin_line": 1507,
        "end_line": 1516,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1508,col 9)-(line 1508,col 50)",
            "(line 1509,col 9)-(line 1509,col 56)",
            "(line 1510,col 9)-(line 1510,col 55)",
            "(line 1511,col 9)-(line 1511,col 56)",
            "(line 1512,col 9)-(line 1512,col 71)",
            "(line 1513,col 9)-(line 1513,col 63)",
            "(line 1514,col 9)-(line 1514,col 63)",
            "(line 1515,col 9)-(line 1515,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testAbbreviate_StringInt()",
        "snippet": "    public void testAbbreviate_StringInt() {\n        assertEquals(null, StringUtils.abbreviate(null, 10));\n        assertEquals(\"\", StringUtils.abbreviate(\"\", 10));\n        assertEquals(\"short\", StringUtils.abbreviate(\"short\", 10));\n        assertEquals(\"Now is ...\", StringUtils.abbreviate(\"Now is the time for all good men to come to the aid of their party.\", 10));\n\n        String raspberry = \"raspberry peach\";\n        assertEquals(\"raspberry p...\", StringUtils.abbreviate(raspberry, 14));\n        assertEquals(\"raspberry peach\", StringUtils.abbreviate(\"raspberry peach\", 15));\n        assertEquals(\"raspberry peach\", StringUtils.abbreviate(\"raspberry peach\", 16));\n        assertEquals(\"abc...\", StringUtils.abbreviate(\"abcdefg\", 6));\n        assertEquals(\"abcdefg\", StringUtils.abbreviate(\"abcdefg\", 7));\n        assertEquals(\"abcdefg\", StringUtils.abbreviate(\"abcdefg\", 8));\n        assertEquals(\"a...\", StringUtils.abbreviate(\"abcdefg\", 4));\n        assertEquals(\"\", StringUtils.abbreviate(\"\", 4));\n        \n        try {\n            String res = StringUtils.abbreviate(\"abc\", 3);\n            fail(\"StringUtils.abbreviate expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n                // empty\n        }              \n    }",
        "begin_line": 1519,
        "end_line": 1541,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1520,col 9)-(line 1520,col 61)",
            "(line 1521,col 9)-(line 1521,col 57)",
            "(line 1522,col 9)-(line 1522,col 67)",
            "(line 1523,col 9)-(line 1523,col 134)",
            "(line 1525,col 9)-(line 1525,col 45)",
            "(line 1526,col 9)-(line 1526,col 78)",
            "(line 1527,col 9)-(line 1527,col 87)",
            "(line 1528,col 9)-(line 1528,col 87)",
            "(line 1529,col 9)-(line 1529,col 69)",
            "(line 1530,col 9)-(line 1530,col 70)",
            "(line 1531,col 9)-(line 1531,col 70)",
            "(line 1532,col 9)-(line 1532,col 67)",
            "(line 1533,col 9)-(line 1533,col 56)",
            "(line 1535,col 9)-(line 1540,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testAbbreviate_StringIntInt()",
        "snippet": "    public void testAbbreviate_StringIntInt() {\n        assertEquals(null, StringUtils.abbreviate(null, 10, 12));\n        assertEquals(\"\", StringUtils.abbreviate(\"\", 0, 10));\n        assertEquals(\"\", StringUtils.abbreviate(\"\", 2, 10));\n        \n        try {\n            String res = StringUtils.abbreviate(\"abcdefghij\", 0, 3);\n            fail(\"StringUtils.abbreviate expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n                // empty\n        }      \n        try {\n            String res = StringUtils.abbreviate(\"abcdefghij\", 5, 6);\n            fail(\"StringUtils.abbreviate expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n                // empty\n        }      \n        \n\n        String raspberry = \"raspberry peach\";\n        assertEquals(\"raspberry peach\", StringUtils.abbreviate(raspberry, 11, 15));\n\n        assertEquals(null, StringUtils.abbreviate(null, 7, 14));\n        assertAbbreviateWithOffset(\"abcdefg...\", -1, 10);\n        assertAbbreviateWithOffset(\"abcdefg...\", 0, 10);\n        assertAbbreviateWithOffset(\"abcdefg...\", 1, 10);\n        assertAbbreviateWithOffset(\"abcdefg...\", 2, 10);\n        assertAbbreviateWithOffset(\"abcdefg...\", 3, 10);\n        assertAbbreviateWithOffset(\"abcdefg...\", 4, 10);\n        assertAbbreviateWithOffset(\"...fghi...\", 5, 10);\n        assertAbbreviateWithOffset(\"...ghij...\", 6, 10);\n        assertAbbreviateWithOffset(\"...hijk...\", 7, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 8, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 9, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 10, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 10, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 11, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 12, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 13, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 14, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 15, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 16, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", Integer.MAX_VALUE, 10);\n    }",
        "begin_line": 1543,
        "end_line": 1586,
        "comment": "",
        "child_ranges": [
            "(line 1544,col 9)-(line 1544,col 65)",
            "(line 1545,col 9)-(line 1545,col 60)",
            "(line 1546,col 9)-(line 1546,col 60)",
            "(line 1548,col 9)-(line 1553,col 9)",
            "(line 1554,col 9)-(line 1559,col 9)",
            "(line 1562,col 9)-(line 1562,col 45)",
            "(line 1563,col 9)-(line 1563,col 83)",
            "(line 1565,col 9)-(line 1565,col 64)",
            "(line 1566,col 9)-(line 1566,col 57)",
            "(line 1567,col 9)-(line 1567,col 56)",
            "(line 1568,col 9)-(line 1568,col 56)",
            "(line 1569,col 9)-(line 1569,col 56)",
            "(line 1570,col 9)-(line 1570,col 56)",
            "(line 1571,col 9)-(line 1571,col 56)",
            "(line 1572,col 9)-(line 1572,col 56)",
            "(line 1573,col 9)-(line 1573,col 56)",
            "(line 1574,col 9)-(line 1574,col 56)",
            "(line 1575,col 9)-(line 1575,col 56)",
            "(line 1576,col 9)-(line 1576,col 56)",
            "(line 1577,col 9)-(line 1577,col 57)",
            "(line 1578,col 9)-(line 1578,col 57)",
            "(line 1579,col 9)-(line 1579,col 57)",
            "(line 1580,col 9)-(line 1580,col 57)",
            "(line 1581,col 9)-(line 1581,col 57)",
            "(line 1582,col 9)-(line 1582,col 57)",
            "(line 1583,col 9)-(line 1583,col 57)",
            "(line 1584,col 9)-(line 1584,col 57)",
            "(line 1585,col 9)-(line 1585,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.assertAbbreviateWithOffset(java.lang.String, int, int)",
        "snippet": "    private void assertAbbreviateWithOffset(String expected, int offset, int maxWidth) {\n        String abcdefghijklmno = \"abcdefghijklmno\";\n        String message = \"abbreviate(String,int,int) failed\";\n        String actual = StringUtils.abbreviate(abcdefghijklmno, offset, maxWidth);\n        if (offset >= 0 && offset < abcdefghijklmno.length()) {\n            assertTrue(message + \" -- should contain offset character\",\n                    actual.indexOf((char)('a'+offset)) != -1);\n        }\n        assertTrue(message + \" -- should not be greater than maxWidth\",\n                actual.length() <= maxWidth);\n        assertEquals(message, expected, actual);\n    }",
        "begin_line": 1588,
        "end_line": 1599,
        "comment": "",
        "child_ranges": [
            "(line 1589,col 9)-(line 1589,col 51)",
            "(line 1590,col 9)-(line 1590,col 61)",
            "(line 1591,col 9)-(line 1591,col 82)",
            "(line 1592,col 9)-(line 1595,col 9)",
            "(line 1596,col 9)-(line 1597,col 45)",
            "(line 1598,col 9)-(line 1598,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testDifference_StringString()",
        "snippet": "    public void testDifference_StringString() {\n        assertEquals(null, StringUtils.difference(null, null));\n        assertEquals(\"\", StringUtils.difference(\"\", \"\"));\n        assertEquals(\"abc\", StringUtils.difference(\"\", \"abc\"));\n        assertEquals(\"\", StringUtils.difference(\"abc\", \"\"));\n        assertEquals(\"i am a robot\", StringUtils.difference(null, \"i am a robot\"));\n        assertEquals(\"i am a machine\", StringUtils.difference(\"i am a machine\", null));\n        assertEquals(\"robot\", StringUtils.difference(\"i am a machine\", \"i am a robot\"));\n        assertEquals(\"\", StringUtils.difference(\"abc\", \"abc\"));\n        assertEquals(\"you are a robot\", StringUtils.difference(\"i am a robot\", \"you are a robot\"));\n    }",
        "begin_line": 1602,
        "end_line": 1612,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1603,col 9)-(line 1603,col 63)",
            "(line 1604,col 9)-(line 1604,col 57)",
            "(line 1605,col 9)-(line 1605,col 63)",
            "(line 1606,col 9)-(line 1606,col 60)",
            "(line 1607,col 9)-(line 1607,col 83)",
            "(line 1608,col 9)-(line 1608,col 87)",
            "(line 1609,col 9)-(line 1609,col 88)",
            "(line 1610,col 9)-(line 1610,col 63)",
            "(line 1611,col 9)-(line 1611,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testDifferenceAt_StringString()",
        "snippet": "    public void testDifferenceAt_StringString() {\n        assertEquals(-1, StringUtils.indexOfDifference(null, null));\n        assertEquals(0, StringUtils.indexOfDifference(null, \"i am a robot\"));\n        assertEquals(-1, StringUtils.indexOfDifference(\"\", \"\"));\n        assertEquals(0, StringUtils.indexOfDifference(\"\", \"abc\"));\n        assertEquals(0, StringUtils.indexOfDifference(\"abc\", \"\"));\n        assertEquals(0, StringUtils.indexOfDifference(\"i am a machine\", null));\n        assertEquals(7, StringUtils.indexOfDifference(\"i am a machine\", \"i am a robot\"));\n        assertEquals(-1, StringUtils.indexOfDifference(\"foo\", \"foo\"));\n        assertEquals(0, StringUtils.indexOfDifference(\"i am a robot\", \"you are a robot\"));\n        //System.out.println(\"indexOfDiff: \" + StringUtils.indexOfDifference(\"i am a robot\", \"not machine\"));\n    }",
        "begin_line": 1614,
        "end_line": 1625,
        "comment": "",
        "child_ranges": [
            "(line 1615,col 9)-(line 1615,col 68)",
            "(line 1616,col 9)-(line 1616,col 77)",
            "(line 1617,col 9)-(line 1617,col 64)",
            "(line 1618,col 9)-(line 1618,col 66)",
            "(line 1619,col 9)-(line 1619,col 66)",
            "(line 1620,col 9)-(line 1620,col 79)",
            "(line 1621,col 9)-(line 1621,col 89)",
            "(line 1622,col 9)-(line 1622,col 70)",
            "(line 1623,col 9)-(line 1623,col 90)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testGetLevenshteinDistance_StringString()",
        "snippet": "    public void testGetLevenshteinDistance_StringString() {\n        assertEquals(0, StringUtils.getLevenshteinDistance(\"\", \"\") );\n        assertEquals(1, StringUtils.getLevenshteinDistance(\"\", \"a\") );\n        assertEquals(7, StringUtils.getLevenshteinDistance(\"aaapppp\", \"\") );\n        assertEquals(1, StringUtils.getLevenshteinDistance(\"frog\", \"fog\") );\n        assertEquals(3, StringUtils.getLevenshteinDistance(\"fly\", \"ant\") );\n        assertEquals(7, StringUtils.getLevenshteinDistance(\"elephant\", \"hippo\") );\n        assertEquals(7, StringUtils.getLevenshteinDistance(\"hippo\", \"elephant\") );\n        assertEquals(8, StringUtils.getLevenshteinDistance(\"hippo\", \"zzzzzzzz\") );\n        assertEquals(8, StringUtils.getLevenshteinDistance(\"zzzzzzzz\", \"hippo\") );\n        assertEquals(1, StringUtils.getLevenshteinDistance(\"hello\", \"hallo\") );\n        try {\n            int d = StringUtils.getLevenshteinDistance(\"a\", null);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // empty\n        }\n        try {\n            int d = StringUtils.getLevenshteinDistance(null, \"a\");\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // empty\n        }\n    }",
        "begin_line": 1628,
        "end_line": 1651,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1629,col 9)-(line 1629,col 69)",
            "(line 1630,col 9)-(line 1630,col 70)",
            "(line 1631,col 9)-(line 1631,col 76)",
            "(line 1632,col 9)-(line 1632,col 76)",
            "(line 1633,col 9)-(line 1633,col 75)",
            "(line 1634,col 9)-(line 1634,col 82)",
            "(line 1635,col 9)-(line 1635,col 82)",
            "(line 1636,col 9)-(line 1636,col 82)",
            "(line 1637,col 9)-(line 1637,col 82)",
            "(line 1638,col 9)-(line 1638,col 79)",
            "(line 1639,col 9)-(line 1644,col 9)",
            "(line 1645,col 9)-(line 1650,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testEMPTY()",
        "snippet": "    public void testEMPTY() {\n        assertNotNull(StringUtils.EMPTY);\n        assertEquals(\"\", StringUtils.EMPTY);\n        assertEquals(0, StringUtils.EMPTY.length());\n    }",
        "begin_line": 1656,
        "end_line": 1660,
        "comment": "\n     * A sanity check for {@link StringUtils#EMPTY}.\n     ",
        "child_ranges": [
            "(line 1657,col 9)-(line 1657,col 41)",
            "(line 1658,col 9)-(line 1658,col 44)",
            "(line 1659,col 9)-(line 1659,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testRemoveStart()",
        "snippet": "    public void testRemoveStart() {\n        // StringUtils.removeStart(\"\", *)        = \"\"\n        assertNull(StringUtils.removeStart(null, null));\n        assertNull(StringUtils.removeStart(null, \"\"));\n        assertNull(StringUtils.removeStart(null, \"a\"));\n        \n        // StringUtils.removeStart(*, null)      = *\n        assertEquals(StringUtils.removeStart(\"\", null), \"\");\n        assertEquals(StringUtils.removeStart(\"\", \"\"), \"\");\n        assertEquals(StringUtils.removeStart(\"\", \"a\"), \"\");\n        \n        // All others:\n        assertEquals(StringUtils.removeStart(\"www.domain.com\", \"www.\"), \"domain.com\");\n        assertEquals(StringUtils.removeStart(\"domain.com\", \"www.\"), \"domain.com\");\n        assertEquals(StringUtils.removeStart(\"domain.com\", \"\"), \"domain.com\");        \n        assertEquals(StringUtils.removeStart(\"domain.com\", null), \"domain.com\");        \n    }",
        "begin_line": 1662,
        "end_line": 1678,
        "comment": "",
        "child_ranges": [
            "(line 1664,col 9)-(line 1664,col 56)",
            "(line 1665,col 9)-(line 1665,col 54)",
            "(line 1666,col 9)-(line 1666,col 55)",
            "(line 1669,col 9)-(line 1669,col 60)",
            "(line 1670,col 9)-(line 1670,col 58)",
            "(line 1671,col 9)-(line 1671,col 59)",
            "(line 1674,col 9)-(line 1674,col 86)",
            "(line 1675,col 9)-(line 1675,col 82)",
            "(line 1676,col 9)-(line 1676,col 78)",
            "(line 1677,col 9)-(line 1677,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testRemoveStartIgnoreCase()",
        "snippet": "    public void testRemoveStartIgnoreCase() {\n        // StringUtils.removeStart(\"\", *)        = \"\"\n        assertNull(\"removeStartIgnoreCase(null, null)\", StringUtils.removeStartIgnoreCase(null, null));\n        assertNull(\"removeStartIgnoreCase(null, \\\"\\\")\", StringUtils.removeStartIgnoreCase(null, \"\"));\n        assertNull(\"removeStartIgnoreCase(null, \\\"a\\\")\", StringUtils.removeStartIgnoreCase(null, \"a\"));\n        \n        // StringUtils.removeStart(*, null)      = *\n        assertEquals(\"removeStartIgnoreCase(\\\"\\\", null)\", StringUtils.removeStartIgnoreCase(\"\", null), \"\");\n        assertEquals(\"removeStartIgnoreCase(\\\"\\\", \\\"\\\")\", StringUtils.removeStartIgnoreCase(\"\", \"\"), \"\");\n        assertEquals(\"removeStartIgnoreCase(\\\"\\\", \\\"a\\\")\", StringUtils.removeStartIgnoreCase(\"\", \"a\"), \"\");\n        \n        // All others:\n        assertEquals(\"removeStartIgnoreCase(\\\"www.domain.com\\\", \\\"www.\\\")\", StringUtils.removeStartIgnoreCase(\"www.domain.com\", \"www.\"), \"domain.com\");\n        assertEquals(\"removeStartIgnoreCase(\\\"domain.com\\\", \\\"www.\\\")\", StringUtils.removeStartIgnoreCase(\"domain.com\", \"www.\"), \"domain.com\");\n        assertEquals(\"removeStartIgnoreCase(\\\"domain.com\\\", \\\"\\\")\", StringUtils.removeStartIgnoreCase(\"domain.com\", \"\"), \"domain.com\");        \n        assertEquals(\"removeStartIgnoreCase(\\\"domain.com\\\", null)\", StringUtils.removeStartIgnoreCase(\"domain.com\", null), \"domain.com\");        \n        \n        // Case insensitive:\n        assertEquals(\"removeStartIgnoreCase(\\\"www.domain.com\\\", \\\"WWW.\\\")\", StringUtils.removeStartIgnoreCase(\"www.domain.com\", \"WWW.\"), \"domain.com\");\n    }",
        "begin_line": 1680,
        "end_line": 1699,
        "comment": "",
        "child_ranges": [
            "(line 1682,col 9)-(line 1682,col 103)",
            "(line 1683,col 9)-(line 1683,col 101)",
            "(line 1684,col 9)-(line 1684,col 103)",
            "(line 1687,col 9)-(line 1687,col 107)",
            "(line 1688,col 9)-(line 1688,col 105)",
            "(line 1689,col 9)-(line 1689,col 107)",
            "(line 1692,col 9)-(line 1692,col 151)",
            "(line 1693,col 9)-(line 1693,col 143)",
            "(line 1694,col 9)-(line 1694,col 135)",
            "(line 1695,col 9)-(line 1695,col 137)",
            "(line 1698,col 9)-(line 1698,col 151)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testRemoveEnd()",
        "snippet": "    public void testRemoveEnd() {\n        // StringUtils.removeEnd(\"\", *)        = \"\"\n        assertNull(StringUtils.removeEnd(null, null));\n        assertNull(StringUtils.removeEnd(null, \"\"));\n        assertNull(StringUtils.removeEnd(null, \"a\"));\n        \n        // StringUtils.removeEnd(*, null)      = *\n        assertEquals(StringUtils.removeEnd(\"\", null), \"\");\n        assertEquals(StringUtils.removeEnd(\"\", \"\"), \"\");\n        assertEquals(StringUtils.removeEnd(\"\", \"a\"), \"\");\n        \n        // All others:\n        assertEquals(StringUtils.removeEnd(\"www.domain.com.\", \".com\"), \"www.domain.com.\");\n        assertEquals(StringUtils.removeEnd(\"www.domain.com\", \".com\"), \"www.domain\");\n        assertEquals(StringUtils.removeEnd(\"www.domain\", \".com\"), \"www.domain\");\n        assertEquals(StringUtils.removeEnd(\"domain.com\", \"\"), \"domain.com\");   \n        assertEquals(StringUtils.removeEnd(\"domain.com\", null), \"domain.com\");   \n    }",
        "begin_line": 1701,
        "end_line": 1718,
        "comment": "",
        "child_ranges": [
            "(line 1703,col 9)-(line 1703,col 54)",
            "(line 1704,col 9)-(line 1704,col 52)",
            "(line 1705,col 9)-(line 1705,col 53)",
            "(line 1708,col 9)-(line 1708,col 58)",
            "(line 1709,col 9)-(line 1709,col 56)",
            "(line 1710,col 9)-(line 1710,col 57)",
            "(line 1713,col 9)-(line 1713,col 90)",
            "(line 1714,col 9)-(line 1714,col 84)",
            "(line 1715,col 9)-(line 1715,col 80)",
            "(line 1716,col 9)-(line 1716,col 76)",
            "(line 1717,col 9)-(line 1717,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testRemoveEndIgnoreCase()",
        "snippet": "    public void testRemoveEndIgnoreCase() {\n        // StringUtils.removeEndIgnoreCase(\"\", *)        = \"\"\n        assertNull(\"removeEndIgnoreCase(null, null)\", StringUtils.removeEndIgnoreCase(null, null));\n        assertNull(\"removeEndIgnoreCase(null, \\\"\\\")\", StringUtils.removeEndIgnoreCase(null, \"\"));\n        assertNull(\"removeEndIgnoreCase(null, \\\"a\\\")\", StringUtils.removeEndIgnoreCase(null, \"a\"));\n        \n        // StringUtils.removeEnd(*, null)      = *\n        assertEquals(\"removeEndIgnoreCase(\\\"\\\", null)\", StringUtils.removeEndIgnoreCase(\"\", null), \"\");\n        assertEquals(\"removeEndIgnoreCase(\\\"\\\", \\\"\\\")\", StringUtils.removeEndIgnoreCase(\"\", \"\"), \"\");\n        assertEquals(\"removeEndIgnoreCase(\\\"\\\", \\\"a\\\")\", StringUtils.removeEndIgnoreCase(\"\", \"a\"), \"\");\n        \n        // All others:\n        assertEquals(\"removeEndIgnoreCase(\\\"www.domain.com.\\\", \\\".com\\\")\", StringUtils.removeEndIgnoreCase(\"www.domain.com.\", \".com\"), \"www.domain.com.\");\n        assertEquals(\"removeEndIgnoreCase(\\\"www.domain.com\\\", \\\".com\\\")\", StringUtils.removeEndIgnoreCase(\"www.domain.com\", \".com\"), \"www.domain\");\n        assertEquals(\"removeEndIgnoreCase(\\\"www.domain\\\", \\\".com\\\")\", StringUtils.removeEndIgnoreCase(\"www.domain\", \".com\"), \"www.domain\");\n        assertEquals(\"removeEndIgnoreCase(\\\"domain.com\\\", \\\"\\\")\", StringUtils.removeEndIgnoreCase(\"domain.com\", \"\"), \"domain.com\");   \n        assertEquals(\"removeEndIgnoreCase(\\\"domain.com\\\", null)\", StringUtils.removeEndIgnoreCase(\"domain.com\", null), \"domain.com\");   \n\n        // Case insensitive:\n        assertEquals(\"removeEndIgnoreCase(\\\"www.domain.com\\\", \\\".com\\\")\", StringUtils.removeEndIgnoreCase(\"www.domain.com\", \".COM\"), \"www.domain\");\n    }",
        "begin_line": 1720,
        "end_line": 1740,
        "comment": "",
        "child_ranges": [
            "(line 1722,col 9)-(line 1722,col 99)",
            "(line 1723,col 9)-(line 1723,col 97)",
            "(line 1724,col 9)-(line 1724,col 99)",
            "(line 1727,col 9)-(line 1727,col 103)",
            "(line 1728,col 9)-(line 1728,col 101)",
            "(line 1729,col 9)-(line 1729,col 103)",
            "(line 1732,col 9)-(line 1732,col 154)",
            "(line 1733,col 9)-(line 1733,col 147)",
            "(line 1734,col 9)-(line 1734,col 139)",
            "(line 1735,col 9)-(line 1735,col 131)",
            "(line 1736,col 9)-(line 1736,col 133)",
            "(line 1739,col 9)-(line 1739,col 147)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testRemove_String()",
        "snippet": "    public void testRemove_String() {\n        // StringUtils.remove(null, *)        = null\n        assertEquals(null, StringUtils.remove(null, null));\n        assertEquals(null, StringUtils.remove(null, \"\"));\n        assertEquals(null, StringUtils.remove(null, \"a\"));\n        \n        // StringUtils.remove(\"\", *)          = \"\"\n        assertEquals(\"\", StringUtils.remove(\"\", null));\n        assertEquals(\"\", StringUtils.remove(\"\", \"\"));\n        assertEquals(\"\", StringUtils.remove(\"\", \"a\"));\n        \n        // StringUtils.remove(*, null)        = *\n        assertEquals(null, StringUtils.remove(null, null));\n        assertEquals(\"\", StringUtils.remove(\"\", null));\n        assertEquals(\"a\", StringUtils.remove(\"a\", null));\n        \n        // StringUtils.remove(*, \"\")          = *\n        assertEquals(null, StringUtils.remove(null, \"\"));\n        assertEquals(\"\", StringUtils.remove(\"\", \"\"));\n        assertEquals(\"a\", StringUtils.remove(\"a\", \"\"));\n        \n        // StringUtils.remove(\"queued\", \"ue\") = \"qd\"\n        assertEquals(\"qd\", StringUtils.remove(\"queued\", \"ue\"));\n        \n        // StringUtils.remove(\"queued\", \"zz\") = \"queued\"\n        assertEquals(\"queued\", StringUtils.remove(\"queued\", \"zz\"));\n    }",
        "begin_line": 1742,
        "end_line": 1768,
        "comment": "",
        "child_ranges": [
            "(line 1744,col 9)-(line 1744,col 59)",
            "(line 1745,col 9)-(line 1745,col 57)",
            "(line 1746,col 9)-(line 1746,col 58)",
            "(line 1749,col 9)-(line 1749,col 55)",
            "(line 1750,col 9)-(line 1750,col 53)",
            "(line 1751,col 9)-(line 1751,col 54)",
            "(line 1754,col 9)-(line 1754,col 59)",
            "(line 1755,col 9)-(line 1755,col 55)",
            "(line 1756,col 9)-(line 1756,col 57)",
            "(line 1759,col 9)-(line 1759,col 57)",
            "(line 1760,col 9)-(line 1760,col 53)",
            "(line 1761,col 9)-(line 1761,col 55)",
            "(line 1764,col 9)-(line 1764,col 63)",
            "(line 1767,col 9)-(line 1767,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testRemove_char()",
        "snippet": "    public void testRemove_char() {\n        // StringUtils.remove(null, *)       = null\n        assertEquals(null, StringUtils.remove(null, 'a'));\n        assertEquals(null, StringUtils.remove(null, 'a'));\n        assertEquals(null, StringUtils.remove(null, 'a'));\n        \n        // StringUtils.remove(\"\", *)          = \"\"\n        assertEquals(\"\", StringUtils.remove(\"\", 'a'));\n        assertEquals(\"\", StringUtils.remove(\"\", 'a'));\n        assertEquals(\"\", StringUtils.remove(\"\", 'a'));\n        \n        // StringUtils.remove(\"queued\", 'u') = \"qeed\"\n        assertEquals(\"qeed\", StringUtils.remove(\"queued\", 'u'));\n        \n        // StringUtils.remove(\"queued\", 'z') = \"queued\"\n        assertEquals(\"queued\", StringUtils.remove(\"queued\", 'z'));\n    }",
        "begin_line": 1770,
        "end_line": 1786,
        "comment": "",
        "child_ranges": [
            "(line 1772,col 9)-(line 1772,col 58)",
            "(line 1773,col 9)-(line 1773,col 58)",
            "(line 1774,col 9)-(line 1774,col 58)",
            "(line 1777,col 9)-(line 1777,col 54)",
            "(line 1778,col 9)-(line 1778,col 54)",
            "(line 1779,col 9)-(line 1779,col 54)",
            "(line 1782,col 9)-(line 1782,col 64)",
            "(line 1785,col 9)-(line 1785,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testDifferenceAt_StringArray()",
        "snippet": "    public void testDifferenceAt_StringArray(){        \n        assertEquals(-1, StringUtils.indexOfDifference(null));\n        assertEquals(-1, StringUtils.indexOfDifference(new String[] {}));\n        assertEquals(-1, StringUtils.indexOfDifference(new String[] {\"abc\"}));\n        assertEquals(-1, StringUtils.indexOfDifference(new String[] {null, null}));\n        assertEquals(-1, StringUtils.indexOfDifference(new String[] {\"\", \"\"}));\n        assertEquals(0, StringUtils.indexOfDifference(new String[] {\"\", null}));\n        assertEquals(0, StringUtils.indexOfDifference(new String[] {\"abc\", null, null}));\n        assertEquals(0, StringUtils.indexOfDifference(new String[] {null, null, \"abc\"}));\n        assertEquals(0, StringUtils.indexOfDifference(new String[] {\"\", \"abc\"}));\n        assertEquals(0, StringUtils.indexOfDifference(new String[] {\"abc\", \"\"}));\n        assertEquals(-1, StringUtils.indexOfDifference(new String[] {\"abc\", \"abc\"}));\n        assertEquals(1, StringUtils.indexOfDifference(new String[] {\"abc\", \"a\"}));\n        assertEquals(2, StringUtils.indexOfDifference(new String[] {\"ab\", \"abxyz\"}));\n        assertEquals(2, StringUtils.indexOfDifference(new String[] {\"abcde\", \"abxyz\"}));\n        assertEquals(0, StringUtils.indexOfDifference(new String[] {\"abcde\", \"xyz\"}));\n        assertEquals(0, StringUtils.indexOfDifference(new String[] {\"xyz\", \"abcde\"}));\n        assertEquals(7, StringUtils.indexOfDifference(new String[] {\"i am a machine\", \"i am a robot\"}));\n    }",
        "begin_line": 1789,
        "end_line": 1807,
        "comment": "",
        "child_ranges": [
            "(line 1790,col 9)-(line 1790,col 62)",
            "(line 1791,col 9)-(line 1791,col 73)",
            "(line 1792,col 9)-(line 1792,col 78)",
            "(line 1793,col 9)-(line 1793,col 83)",
            "(line 1794,col 9)-(line 1794,col 79)",
            "(line 1795,col 9)-(line 1795,col 80)",
            "(line 1796,col 9)-(line 1796,col 89)",
            "(line 1797,col 9)-(line 1797,col 89)",
            "(line 1798,col 9)-(line 1798,col 81)",
            "(line 1799,col 9)-(line 1799,col 81)",
            "(line 1800,col 9)-(line 1800,col 85)",
            "(line 1801,col 9)-(line 1801,col 82)",
            "(line 1802,col 9)-(line 1802,col 85)",
            "(line 1803,col 9)-(line 1803,col 88)",
            "(line 1804,col 9)-(line 1804,col 86)",
            "(line 1805,col 9)-(line 1805,col 86)",
            "(line 1806,col 9)-(line 1806,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsTest.java",
        "signature": "org.apache.commons.lang.StringUtilsTest.testGetCommonPrefix_StringArray()",
        "snippet": "    public void testGetCommonPrefix_StringArray(){        \n        assertEquals(\"\", StringUtils.getCommonPrefix(null));\n        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {}));\n        assertEquals(\"abc\", StringUtils.getCommonPrefix(new String[] {\"abc\"}));\n        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {null, null}));\n        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"\", \"\"}));\n        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"\", null}));\n        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"abc\", null, null}));\n        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {null, null, \"abc\"}));\n        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"\", \"abc\"}));\n        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"abc\", \"\"}));\n        assertEquals(\"abc\", StringUtils.getCommonPrefix(new String[] {\"abc\", \"abc\"}));\n        assertEquals(\"a\", StringUtils.getCommonPrefix(new String[] {\"abc\", \"a\"}));\n        assertEquals(\"ab\", StringUtils.getCommonPrefix(new String[] {\"ab\", \"abxyz\"}));\n        assertEquals(\"ab\", StringUtils.getCommonPrefix(new String[] {\"abcde\", \"abxyz\"}));\n        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"abcde\", \"xyz\"}));\n        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"xyz\", \"abcde\"}));\n        assertEquals(\"i am a \", StringUtils.getCommonPrefix(new String[] {\"i am a machine\", \"i am a robot\"}));\n    }",
        "begin_line": 1809,
        "end_line": 1827,
        "comment": "",
        "child_ranges": [
            "(line 1810,col 9)-(line 1810,col 60)",
            "(line 1811,col 9)-(line 1811,col 71)",
            "(line 1812,col 9)-(line 1812,col 79)",
            "(line 1813,col 9)-(line 1813,col 81)",
            "(line 1814,col 9)-(line 1814,col 77)",
            "(line 1815,col 9)-(line 1815,col 79)",
            "(line 1816,col 9)-(line 1816,col 88)",
            "(line 1817,col 9)-(line 1817,col 88)",
            "(line 1818,col 9)-(line 1818,col 80)",
            "(line 1819,col 9)-(line 1819,col 80)",
            "(line 1820,col 9)-(line 1820,col 86)",
            "(line 1821,col 9)-(line 1821,col 82)",
            "(line 1822,col 9)-(line 1822,col 86)",
            "(line 1823,col 9)-(line 1823,col 89)",
            "(line 1824,col 9)-(line 1824,col 85)",
            "(line 1825,col 9)-(line 1825,col 85)",
            "(line 1826,col 9)-(line 1826,col 110)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/WordUtilsTest.java",
        "signature": "org.apache.commons.lang.WordUtilsTest.WordUtilsTest(java.lang.String)",
        "snippet": "    public WordUtilsTest(String name) {\n        super(name);\n    }",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/WordUtilsTest.java",
        "signature": "org.apache.commons.lang.WordUtilsTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(WordUtilsTest.class);\n        suite.setName(\"WordUtilsTests\");\n        return suite;\n    }",
        "begin_line": 39,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 61)",
            "(line 41,col 9)-(line 41,col 40)",
            "(line 42,col 9)-(line 42,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/WordUtilsTest.java",
        "signature": "org.apache.commons.lang.WordUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new WordUtils());\n        Constructor[] cons = WordUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(WordUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(WordUtils.class.getModifiers()));\n    }",
        "begin_line": 46,
        "end_line": 53,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 39)",
            "(line 48,col 9)-(line 48,col 71)",
            "(line 49,col 9)-(line 49,col 37)",
            "(line 50,col 9)-(line 50,col 70)",
            "(line 51,col 9)-(line 51,col 78)",
            "(line 52,col 9)-(line 52,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/WordUtilsTest.java",
        "signature": "org.apache.commons.lang.WordUtilsTest.testWrap_StringInt()",
        "snippet": "    public void testWrap_StringInt() {\n        assertEquals(null, WordUtils.wrap(null, 20));\n        assertEquals(null, WordUtils.wrap(null, -1));\n        \n        assertEquals(\"\", WordUtils.wrap(\"\", 20));\n        assertEquals(\"\", WordUtils.wrap(\"\", -1));\n        \n        // normal\n        String systemNewLine = System.getProperty(\"line.separator\");\n        String input = \"Here is one line of text that is going to be wrapped after 20 columns.\";\n        String expected = \"Here is one line of\" + systemNewLine + \"text that is going\" \n            + systemNewLine + \"to be wrapped after\" + systemNewLine + \"20 columns.\";\n        assertEquals(expected, WordUtils.wrap(input, 20));\n        \n        // long word at end\n        input = \"Click here to jump to the jakarta website - http://jakarta.apache.org\";\n        expected = \"Click here to jump\" + systemNewLine + \"to the jakarta\" + systemNewLine \n            + \"website -\" + systemNewLine + \"http://jakarta.apache.org\";\n        assertEquals(expected, WordUtils.wrap(input, 20));\n        \n        // long word in middle\n        input = \"Click here, http://jakarta.apache.org, to jump to the jakarta website\";\n        expected = \"Click here,\" + systemNewLine + \"http://jakarta.apache.org,\" + systemNewLine \n            + \"to jump to the\" + systemNewLine + \"jakarta website\";\n        assertEquals(expected, WordUtils.wrap(input, 20));\n    }",
        "begin_line": 56,
        "end_line": 81,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 53)",
            "(line 58,col 9)-(line 58,col 53)",
            "(line 60,col 9)-(line 60,col 49)",
            "(line 61,col 9)-(line 61,col 49)",
            "(line 64,col 9)-(line 64,col 68)",
            "(line 65,col 9)-(line 65,col 96)",
            "(line 66,col 9)-(line 67,col 84)",
            "(line 68,col 9)-(line 68,col 58)",
            "(line 71,col 9)-(line 71,col 88)",
            "(line 72,col 9)-(line 73,col 72)",
            "(line 74,col 9)-(line 74,col 58)",
            "(line 77,col 9)-(line 77,col 88)",
            "(line 78,col 9)-(line 79,col 67)",
            "(line 80,col 9)-(line 80,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/WordUtilsTest.java",
        "signature": "org.apache.commons.lang.WordUtilsTest.testWrap_StringIntStringBoolean()",
        "snippet": "    public void testWrap_StringIntStringBoolean() {\n        assertEquals(null, WordUtils.wrap(null, 20, \"\\n\", false));\n        assertEquals(null, WordUtils.wrap(null, 20, \"\\n\", true));\n        assertEquals(null, WordUtils.wrap(null, 20, null, true));\n        assertEquals(null, WordUtils.wrap(null, 20, null, false));\n        assertEquals(null, WordUtils.wrap(null, -1, null, true));\n        assertEquals(null, WordUtils.wrap(null, -1, null, false));\n        \n        assertEquals(\"\", WordUtils.wrap(\"\", 20, \"\\n\", false));\n        assertEquals(\"\", WordUtils.wrap(\"\", 20, \"\\n\", true));\n        assertEquals(\"\", WordUtils.wrap(\"\", 20, null, false));\n        assertEquals(\"\", WordUtils.wrap(\"\", 20, null, true));\n        assertEquals(\"\", WordUtils.wrap(\"\", -1, null, false));\n        assertEquals(\"\", WordUtils.wrap(\"\", -1, null, true));\n        \n        // normal\n        String input = \"Here is one line of text that is going to be wrapped after 20 columns.\";\n        String expected = \"Here is one line of\\ntext that is going\\nto be wrapped after\\n20 columns.\";\n        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\n        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\n\n        // unusual newline char\n        input = \"Here is one line of text that is going to be wrapped after 20 columns.\";\n        expected = \"Here is one line of<br />text that is going<br />to be wrapped after<br />20 columns.\";\n        assertEquals(expected, WordUtils.wrap(input, 20, \"<br />\", false));\n        assertEquals(expected, WordUtils.wrap(input, 20, \"<br />\", true));\n\n        // short line length\n        input = \"Here is one line\";\n        expected = \"Here\\nis one\\nline\";\n        assertEquals(expected, WordUtils.wrap(input, 6, \"\\n\", false));\n        expected = \"Here\\nis\\none\\nline\";\n        assertEquals(expected, WordUtils.wrap(input, 2, \"\\n\", false));\n        assertEquals(expected, WordUtils.wrap(input, -1, \"\\n\", false));\n\n        // system newline char\n        String systemNewLine = System.getProperty(\"line.separator\");\n        input = \"Here is one line of text that is going to be wrapped after 20 columns.\";\n        expected = \"Here is one line of\" + systemNewLine + \"text that is going\" + systemNewLine \n            + \"to be wrapped after\" + systemNewLine + \"20 columns.\";\n        assertEquals(expected, WordUtils.wrap(input, 20, null, false));\n        assertEquals(expected, WordUtils.wrap(input, 20, null, true));\n\n        // with extra spaces\n        input = \" Here:  is  one  line  of  text  that  is  going  to  be  wrapped  after  20  columns.\";\n        expected = \"Here:  is  one  line\\nof  text  that  is \\ngoing  to  be \\nwrapped  after  20 \\ncolumns.\";\n        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\n        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\n        \n        // with tab\n        input = \"Here is\\tone line of text that is going to be wrapped after 20 columns.\";\n        expected = \"Here is\\tone line of\\ntext that is going\\nto be wrapped after\\n20 columns.\";\n        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\n        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\n        \n        // with tab at wrapColumn\n        input = \"Here is one line of\\ttext that is going to be wrapped after 20 columns.\";\n        expected = \"Here is one line\\nof\\ttext that is\\ngoing to be wrapped\\nafter 20 columns.\";\n        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\n        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\n        \n        // difference because of long word\n        input = \"Click here to jump to the jakarta website - http://jakarta.apache.org\";\n        expected = \"Click here to jump\\nto the jakarta\\nwebsite -\\nhttp://jakarta.apache.org\";\n        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\n        expected = \"Click here to jump\\nto the jakarta\\nwebsite -\\nhttp://jakarta.apach\\ne.org\";\n        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\n        \n        // difference because of long word in middle\n        input = \"Click here, http://jakarta.apache.org, to jump to the jakarta website\";\n        expected = \"Click here,\\nhttp://jakarta.apache.org,\\nto jump to the\\njakarta website\";\n        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\n        expected = \"Click here,\\nhttp://jakarta.apach\\ne.org, to jump to\\nthe jakarta website\";\n        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\n//        System.err.println(expected);\n//        System.err.println(WordUtils.wrap(input, 20, \"\\n\", false));\n    }",
        "begin_line": 83,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 66)",
            "(line 85,col 9)-(line 85,col 65)",
            "(line 86,col 9)-(line 86,col 65)",
            "(line 87,col 9)-(line 87,col 66)",
            "(line 88,col 9)-(line 88,col 65)",
            "(line 89,col 9)-(line 89,col 66)",
            "(line 91,col 9)-(line 91,col 62)",
            "(line 92,col 9)-(line 92,col 61)",
            "(line 93,col 9)-(line 93,col 62)",
            "(line 94,col 9)-(line 94,col 61)",
            "(line 95,col 9)-(line 95,col 62)",
            "(line 96,col 9)-(line 96,col 61)",
            "(line 99,col 9)-(line 99,col 96)",
            "(line 100,col 9)-(line 100,col 102)",
            "(line 101,col 9)-(line 101,col 71)",
            "(line 102,col 9)-(line 102,col 70)",
            "(line 105,col 9)-(line 105,col 89)",
            "(line 106,col 9)-(line 106,col 107)",
            "(line 107,col 9)-(line 107,col 75)",
            "(line 108,col 9)-(line 108,col 74)",
            "(line 111,col 9)-(line 111,col 35)",
            "(line 112,col 9)-(line 112,col 40)",
            "(line 113,col 9)-(line 113,col 70)",
            "(line 114,col 9)-(line 114,col 41)",
            "(line 115,col 9)-(line 115,col 70)",
            "(line 116,col 9)-(line 116,col 71)",
            "(line 119,col 9)-(line 119,col 68)",
            "(line 120,col 9)-(line 120,col 89)",
            "(line 121,col 9)-(line 122,col 68)",
            "(line 123,col 9)-(line 123,col 71)",
            "(line 124,col 9)-(line 124,col 70)",
            "(line 127,col 9)-(line 127,col 105)",
            "(line 128,col 9)-(line 128,col 110)",
            "(line 129,col 9)-(line 129,col 71)",
            "(line 130,col 9)-(line 130,col 70)",
            "(line 133,col 9)-(line 133,col 90)",
            "(line 134,col 9)-(line 134,col 96)",
            "(line 135,col 9)-(line 135,col 71)",
            "(line 136,col 9)-(line 136,col 70)",
            "(line 139,col 9)-(line 139,col 90)",
            "(line 140,col 9)-(line 140,col 96)",
            "(line 141,col 9)-(line 141,col 71)",
            "(line 142,col 9)-(line 142,col 70)",
            "(line 145,col 9)-(line 145,col 88)",
            "(line 146,col 9)-(line 146,col 94)",
            "(line 147,col 9)-(line 147,col 71)",
            "(line 148,col 9)-(line 148,col 96)",
            "(line 149,col 9)-(line 149,col 70)",
            "(line 152,col 9)-(line 152,col 88)",
            "(line 153,col 9)-(line 153,col 94)",
            "(line 154,col 9)-(line 154,col 71)",
            "(line 155,col 9)-(line 155,col 95)",
            "(line 156,col 9)-(line 156,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/WordUtilsTest.java",
        "signature": "org.apache.commons.lang.WordUtilsTest.testCapitalize_String()",
        "snippet": "    public void testCapitalize_String() {\n        assertEquals(null, WordUtils.capitalize(null));\n        assertEquals(\"\", WordUtils.capitalize(\"\"));\n        assertEquals(\"  \", WordUtils.capitalize(\"  \"));\n        \n        assertEquals(\"I\", WordUtils.capitalize(\"I\") );\n        assertEquals(\"I\", WordUtils.capitalize(\"i\") );\n        assertEquals(\"I Am Here 123\", WordUtils.capitalize(\"i am here 123\") );\n        assertEquals(\"I Am Here 123\", WordUtils.capitalize(\"I Am Here 123\") );\n        assertEquals(\"I Am HERE 123\", WordUtils.capitalize(\"i am HERE 123\") );\n        assertEquals(\"I AM HERE 123\", WordUtils.capitalize(\"I AM HERE 123\") );\n    }",
        "begin_line": 162,
        "end_line": 173,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 163,col 9)-(line 163,col 55)",
            "(line 164,col 9)-(line 164,col 51)",
            "(line 165,col 9)-(line 165,col 55)",
            "(line 167,col 9)-(line 167,col 54)",
            "(line 168,col 9)-(line 168,col 54)",
            "(line 169,col 9)-(line 169,col 78)",
            "(line 170,col 9)-(line 170,col 78)",
            "(line 171,col 9)-(line 171,col 78)",
            "(line 172,col 9)-(line 172,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/WordUtilsTest.java",
        "signature": "org.apache.commons.lang.WordUtilsTest.testCapitalizeWithDelimiters_String()",
        "snippet": "    public void testCapitalizeWithDelimiters_String() {\n        assertEquals(null, WordUtils.capitalize(null, null));\n        assertEquals(\"\", WordUtils.capitalize(\"\", new char[0]));\n        assertEquals(\"  \", WordUtils.capitalize(\"  \", new char[0]));\n        \n        char[] chars = new char[] { '-', '+', ' ', '@' };\n        assertEquals(\"I\", WordUtils.capitalize(\"I\", chars) );\n        assertEquals(\"I\", WordUtils.capitalize(\"i\", chars) );\n        assertEquals(\"I-Am Here+123\", WordUtils.capitalize(\"i-am here+123\", chars) );\n        assertEquals(\"I Am+Here-123\", WordUtils.capitalize(\"I Am+Here-123\", chars) );\n        assertEquals(\"I+Am-HERE 123\", WordUtils.capitalize(\"i+am-HERE 123\", chars) );\n        assertEquals(\"I-AM HERE+123\", WordUtils.capitalize(\"I-AM HERE+123\", chars) );\n        chars = new char[] {'.'};\n        assertEquals(\"I aM.Fine\", WordUtils.capitalize(\"i aM.fine\", chars) );\n        assertEquals(\"I Am.fine\", WordUtils.capitalize(\"i am.fine\", null) );\n    }",
        "begin_line": 175,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 176,col 9)-(line 176,col 61)",
            "(line 177,col 9)-(line 177,col 64)",
            "(line 178,col 9)-(line 178,col 68)",
            "(line 180,col 9)-(line 180,col 57)",
            "(line 181,col 9)-(line 181,col 61)",
            "(line 182,col 9)-(line 182,col 61)",
            "(line 183,col 9)-(line 183,col 85)",
            "(line 184,col 9)-(line 184,col 85)",
            "(line 185,col 9)-(line 185,col 85)",
            "(line 186,col 9)-(line 186,col 85)",
            "(line 187,col 9)-(line 187,col 33)",
            "(line 188,col 9)-(line 188,col 77)",
            "(line 189,col 9)-(line 189,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/WordUtilsTest.java",
        "signature": "org.apache.commons.lang.WordUtilsTest.testCapitalizeFully_String()",
        "snippet": "    public void testCapitalizeFully_String() {\n        assertEquals(null, WordUtils.capitalizeFully(null));\n        assertEquals(\"\", WordUtils.capitalizeFully(\"\"));\n        assertEquals(\"  \", WordUtils.capitalizeFully(\"  \"));\n        \n        assertEquals(\"I\", WordUtils.capitalizeFully(\"I\") );\n        assertEquals(\"I\", WordUtils.capitalizeFully(\"i\") );\n        assertEquals(\"I Am Here 123\", WordUtils.capitalizeFully(\"i am here 123\") );\n        assertEquals(\"I Am Here 123\", WordUtils.capitalizeFully(\"I Am Here 123\") );\n        assertEquals(\"I Am Here 123\", WordUtils.capitalizeFully(\"i am HERE 123\") );\n        assertEquals(\"I Am Here 123\", WordUtils.capitalizeFully(\"I AM HERE 123\") );\n    }",
        "begin_line": 192,
        "end_line": 203,
        "comment": "",
        "child_ranges": [
            "(line 193,col 9)-(line 193,col 60)",
            "(line 194,col 9)-(line 194,col 56)",
            "(line 195,col 9)-(line 195,col 60)",
            "(line 197,col 9)-(line 197,col 59)",
            "(line 198,col 9)-(line 198,col 59)",
            "(line 199,col 9)-(line 199,col 83)",
            "(line 200,col 9)-(line 200,col 83)",
            "(line 201,col 9)-(line 201,col 83)",
            "(line 202,col 9)-(line 202,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/WordUtilsTest.java",
        "signature": "org.apache.commons.lang.WordUtilsTest.testCapitalizeFullyWithDelimiters_String()",
        "snippet": "    public void testCapitalizeFullyWithDelimiters_String() {\n        assertEquals(null, WordUtils.capitalizeFully(null, null));\n        assertEquals(\"\", WordUtils.capitalizeFully(\"\", new char[0]));\n        assertEquals(\"  \", WordUtils.capitalizeFully(\"  \", new char[0]));\n        \n        char[] chars = new char[] { '-', '+', ' ', '@' };\n        assertEquals(\"I\", WordUtils.capitalizeFully(\"I\", chars) );\n        assertEquals(\"I\", WordUtils.capitalizeFully(\"i\", chars) );\n        assertEquals(\"I-Am Here+123\", WordUtils.capitalizeFully(\"i-am here+123\", chars) );\n        assertEquals(\"I Am+Here-123\", WordUtils.capitalizeFully(\"I Am+Here-123\", chars) );\n        assertEquals(\"I+Am-Here 123\", WordUtils.capitalizeFully(\"i+am-HERE 123\", chars) );\n        assertEquals(\"I-Am Here+123\", WordUtils.capitalizeFully(\"I-AM HERE+123\", chars) );\n        chars = new char[] {'.'};\n        assertEquals(\"I am.Fine\", WordUtils.capitalizeFully(\"i aM.fine\", chars) );\n        assertEquals(\"I Am.fine\", WordUtils.capitalizeFully(\"i am.fine\", null) );\n    }",
        "begin_line": 205,
        "end_line": 220,
        "comment": "",
        "child_ranges": [
            "(line 206,col 9)-(line 206,col 66)",
            "(line 207,col 9)-(line 207,col 69)",
            "(line 208,col 9)-(line 208,col 73)",
            "(line 210,col 9)-(line 210,col 57)",
            "(line 211,col 9)-(line 211,col 66)",
            "(line 212,col 9)-(line 212,col 66)",
            "(line 213,col 9)-(line 213,col 90)",
            "(line 214,col 9)-(line 214,col 90)",
            "(line 215,col 9)-(line 215,col 90)",
            "(line 216,col 9)-(line 216,col 90)",
            "(line 217,col 9)-(line 217,col 33)",
            "(line 218,col 9)-(line 218,col 82)",
            "(line 219,col 9)-(line 219,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/WordUtilsTest.java",
        "signature": "org.apache.commons.lang.WordUtilsTest.testUncapitalize_String()",
        "snippet": "    public void testUncapitalize_String() {\n        assertEquals(null, WordUtils.uncapitalize(null));\n        assertEquals(\"\", WordUtils.uncapitalize(\"\"));\n        assertEquals(\"  \", WordUtils.uncapitalize(\"  \"));\n        \n        assertEquals(\"i\", WordUtils.uncapitalize(\"I\") );\n        assertEquals(\"i\", WordUtils.uncapitalize(\"i\") );\n        assertEquals(\"i am here 123\", WordUtils.uncapitalize(\"i am here 123\") );\n        assertEquals(\"i am here 123\", WordUtils.uncapitalize(\"I Am Here 123\") );\n        assertEquals(\"i am hERE 123\", WordUtils.uncapitalize(\"i am HERE 123\") );\n        assertEquals(\"i aM hERE 123\", WordUtils.uncapitalize(\"I AM HERE 123\") );\n    }",
        "begin_line": 222,
        "end_line": 233,
        "comment": "",
        "child_ranges": [
            "(line 223,col 9)-(line 223,col 57)",
            "(line 224,col 9)-(line 224,col 53)",
            "(line 225,col 9)-(line 225,col 57)",
            "(line 227,col 9)-(line 227,col 56)",
            "(line 228,col 9)-(line 228,col 56)",
            "(line 229,col 9)-(line 229,col 80)",
            "(line 230,col 9)-(line 230,col 80)",
            "(line 231,col 9)-(line 231,col 80)",
            "(line 232,col 9)-(line 232,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/WordUtilsTest.java",
        "signature": "org.apache.commons.lang.WordUtilsTest.testUncapitalizeWithDelimiters_String()",
        "snippet": "    public void testUncapitalizeWithDelimiters_String() {\n        assertEquals(null, WordUtils.uncapitalize(null, null));\n        assertEquals(\"\", WordUtils.uncapitalize(\"\", new char[0]));\n        assertEquals(\"  \", WordUtils.uncapitalize(\"  \", new char[0]));\n        \n        char[] chars = new char[] { '-', '+', ' ', '@' };\n        assertEquals(\"i\", WordUtils.uncapitalize(\"I\", chars) );\n        assertEquals(\"i\", WordUtils.uncapitalize(\"i\", chars) );\n        assertEquals(\"i am-here+123\", WordUtils.uncapitalize(\"i am-here+123\", chars) );\n        assertEquals(\"i+am here-123\", WordUtils.uncapitalize(\"I+Am Here-123\", chars) );\n        assertEquals(\"i-am+hERE 123\", WordUtils.uncapitalize(\"i-am+HERE 123\", chars) );\n        assertEquals(\"i aM-hERE+123\", WordUtils.uncapitalize(\"I AM-HERE+123\", chars) );\n        chars = new char[] {'.'};\n        assertEquals(\"i AM.fINE\", WordUtils.uncapitalize(\"I AM.FINE\", chars) );\n        assertEquals(\"i aM.FINE\", WordUtils.uncapitalize(\"I AM.FINE\", null) );\n    }",
        "begin_line": 235,
        "end_line": 250,
        "comment": "",
        "child_ranges": [
            "(line 236,col 9)-(line 236,col 63)",
            "(line 237,col 9)-(line 237,col 66)",
            "(line 238,col 9)-(line 238,col 70)",
            "(line 240,col 9)-(line 240,col 57)",
            "(line 241,col 9)-(line 241,col 63)",
            "(line 242,col 9)-(line 242,col 63)",
            "(line 243,col 9)-(line 243,col 87)",
            "(line 244,col 9)-(line 244,col 87)",
            "(line 245,col 9)-(line 245,col 87)",
            "(line 246,col 9)-(line 246,col 87)",
            "(line 247,col 9)-(line 247,col 33)",
            "(line 248,col 9)-(line 248,col 79)",
            "(line 249,col 9)-(line 249,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/WordUtilsTest.java",
        "signature": "org.apache.commons.lang.WordUtilsTest.testInitials_String()",
        "snippet": "    public void testInitials_String() {\n        assertEquals(null, WordUtils.initials(null));\n        assertEquals(\"\", WordUtils.initials(\"\"));\n        assertEquals(\"\", WordUtils.initials(\"  \"));\n\n        assertEquals(\"I\", WordUtils.initials(\"I\"));\n        assertEquals(\"i\", WordUtils.initials(\"i\"));\n        assertEquals(\"BJL\", WordUtils.initials(\"Ben John Lee\"));\n        assertEquals(\"BJ\", WordUtils.initials(\"Ben J.Lee\"));\n        assertEquals(\"BJ.L\", WordUtils.initials(\" Ben   John  . Lee\"));\n        assertEquals(\"iah1\", WordUtils.initials(\"i am here 123\"));\n    }",
        "begin_line": 253,
        "end_line": 264,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 254,col 9)-(line 254,col 53)",
            "(line 255,col 9)-(line 255,col 49)",
            "(line 256,col 9)-(line 256,col 51)",
            "(line 258,col 9)-(line 258,col 51)",
            "(line 259,col 9)-(line 259,col 51)",
            "(line 260,col 9)-(line 260,col 64)",
            "(line 261,col 9)-(line 261,col 60)",
            "(line 262,col 9)-(line 262,col 71)",
            "(line 263,col 9)-(line 263,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/WordUtilsTest.java",
        "signature": "org.apache.commons.lang.WordUtilsTest.testInitials_String_charArray()",
        "snippet": "    public void testInitials_String_charArray() {\n        char[] array = null;\n        assertEquals(null, WordUtils.initials(null, array));\n        assertEquals(\"\", WordUtils.initials(\"\", array));\n        assertEquals(\"\", WordUtils.initials(\"  \", array));\n        assertEquals(\"I\", WordUtils.initials(\"I\", array));\n        assertEquals(\"i\", WordUtils.initials(\"i\", array));\n        assertEquals(\"S\", WordUtils.initials(\"SJC\", array));\n        assertEquals(\"BJL\", WordUtils.initials(\"Ben John Lee\", array));\n        assertEquals(\"BJ\", WordUtils.initials(\"Ben J.Lee\", array));\n        assertEquals(\"BJ.L\", WordUtils.initials(\" Ben   John  . Lee\", array));\n        assertEquals(\"KO\", WordUtils.initials(\"Kay O'Murphy\", array));\n        assertEquals(\"iah1\", WordUtils.initials(\"i am here 123\", array));\n        \n        array = new char[0];\n        assertEquals(null, WordUtils.initials(null, array));\n        assertEquals(\"\", WordUtils.initials(\"\", array));\n        assertEquals(\"\", WordUtils.initials(\"  \", array));\n        assertEquals(\"\", WordUtils.initials(\"I\", array));\n        assertEquals(\"\", WordUtils.initials(\"i\", array));\n        assertEquals(\"\", WordUtils.initials(\"SJC\", array));\n        assertEquals(\"\", WordUtils.initials(\"Ben John Lee\", array));\n        assertEquals(\"\", WordUtils.initials(\"Ben J.Lee\", array));\n        assertEquals(\"\", WordUtils.initials(\" Ben   John  . Lee\", array));\n        assertEquals(\"\", WordUtils.initials(\"Kay O'Murphy\", array));\n        assertEquals(\"\", WordUtils.initials(\"i am here 123\", array));\n        \n        array = \" \".toCharArray();\n        assertEquals(null, WordUtils.initials(null, array));\n        assertEquals(\"\", WordUtils.initials(\"\", array));\n        assertEquals(\"\", WordUtils.initials(\"  \", array));\n        assertEquals(\"I\", WordUtils.initials(\"I\", array));\n        assertEquals(\"i\", WordUtils.initials(\"i\", array));\n        assertEquals(\"S\", WordUtils.initials(\"SJC\", array));\n        assertEquals(\"BJL\", WordUtils.initials(\"Ben John Lee\", array));\n        assertEquals(\"BJ\", WordUtils.initials(\"Ben J.Lee\", array));\n        assertEquals(\"BJ.L\", WordUtils.initials(\" Ben   John  . Lee\", array));\n        assertEquals(\"KO\", WordUtils.initials(\"Kay O'Murphy\", array));\n        assertEquals(\"iah1\", WordUtils.initials(\"i am here 123\", array));\n        \n        array = \" .\".toCharArray();\n        assertEquals(null, WordUtils.initials(null, array));\n        assertEquals(\"\", WordUtils.initials(\"\", array));\n        assertEquals(\"\", WordUtils.initials(\"  \", array));\n        assertEquals(\"I\", WordUtils.initials(\"I\", array));\n        assertEquals(\"i\", WordUtils.initials(\"i\", array));\n        assertEquals(\"S\", WordUtils.initials(\"SJC\", array));\n        assertEquals(\"BJL\", WordUtils.initials(\"Ben John Lee\", array));\n        assertEquals(\"BJL\", WordUtils.initials(\"Ben J.Lee\", array));\n        assertEquals(\"BJL\", WordUtils.initials(\" Ben   John  . Lee\", array));\n        assertEquals(\"KO\", WordUtils.initials(\"Kay O'Murphy\", array));\n        assertEquals(\"iah1\", WordUtils.initials(\"i am here 123\", array));\n        \n        array = \" .'\".toCharArray();\n        assertEquals(null, WordUtils.initials(null, array));\n        assertEquals(\"\", WordUtils.initials(\"\", array));\n        assertEquals(\"\", WordUtils.initials(\"  \", array));\n        assertEquals(\"I\", WordUtils.initials(\"I\", array));\n        assertEquals(\"i\", WordUtils.initials(\"i\", array));\n        assertEquals(\"S\", WordUtils.initials(\"SJC\", array));\n        assertEquals(\"BJL\", WordUtils.initials(\"Ben John Lee\", array));\n        assertEquals(\"BJL\", WordUtils.initials(\"Ben J.Lee\", array));\n        assertEquals(\"BJL\", WordUtils.initials(\" Ben   John  . Lee\", array));\n        assertEquals(\"KOM\", WordUtils.initials(\"Kay O'Murphy\", array));\n        assertEquals(\"iah1\", WordUtils.initials(\"i am here 123\", array));\n        \n        array = \"SIJo1\".toCharArray();\n        assertEquals(null, WordUtils.initials(null, array));\n        assertEquals(\"\", WordUtils.initials(\"\", array));\n        assertEquals(\" \", WordUtils.initials(\"  \", array));\n        assertEquals(\"\", WordUtils.initials(\"I\", array));\n        assertEquals(\"i\", WordUtils.initials(\"i\", array));\n        assertEquals(\"C\", WordUtils.initials(\"SJC\", array));\n        assertEquals(\"Bh\", WordUtils.initials(\"Ben John Lee\", array));\n        assertEquals(\"B.\", WordUtils.initials(\"Ben J.Lee\", array));\n        assertEquals(\" h\", WordUtils.initials(\" Ben   John  . Lee\", array));\n        assertEquals(\"K\", WordUtils.initials(\"Kay O'Murphy\", array));\n        assertEquals(\"i2\", WordUtils.initials(\"i am here 123\", array));\n    }",
        "begin_line": 267,
        "end_line": 345,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 268,col 9)-(line 268,col 28)",
            "(line 269,col 9)-(line 269,col 60)",
            "(line 270,col 9)-(line 270,col 56)",
            "(line 271,col 9)-(line 271,col 58)",
            "(line 272,col 9)-(line 272,col 58)",
            "(line 273,col 9)-(line 273,col 58)",
            "(line 274,col 9)-(line 274,col 60)",
            "(line 275,col 9)-(line 275,col 71)",
            "(line 276,col 9)-(line 276,col 67)",
            "(line 277,col 9)-(line 277,col 78)",
            "(line 278,col 9)-(line 278,col 70)",
            "(line 279,col 9)-(line 279,col 73)",
            "(line 281,col 9)-(line 281,col 28)",
            "(line 282,col 9)-(line 282,col 60)",
            "(line 283,col 9)-(line 283,col 56)",
            "(line 284,col 9)-(line 284,col 58)",
            "(line 285,col 9)-(line 285,col 57)",
            "(line 286,col 9)-(line 286,col 57)",
            "(line 287,col 9)-(line 287,col 59)",
            "(line 288,col 9)-(line 288,col 68)",
            "(line 289,col 9)-(line 289,col 65)",
            "(line 290,col 9)-(line 290,col 74)",
            "(line 291,col 9)-(line 291,col 68)",
            "(line 292,col 9)-(line 292,col 69)",
            "(line 294,col 9)-(line 294,col 34)",
            "(line 295,col 9)-(line 295,col 60)",
            "(line 296,col 9)-(line 296,col 56)",
            "(line 297,col 9)-(line 297,col 58)",
            "(line 298,col 9)-(line 298,col 58)",
            "(line 299,col 9)-(line 299,col 58)",
            "(line 300,col 9)-(line 300,col 60)",
            "(line 301,col 9)-(line 301,col 71)",
            "(line 302,col 9)-(line 302,col 67)",
            "(line 303,col 9)-(line 303,col 78)",
            "(line 304,col 9)-(line 304,col 70)",
            "(line 305,col 9)-(line 305,col 73)",
            "(line 307,col 9)-(line 307,col 35)",
            "(line 308,col 9)-(line 308,col 60)",
            "(line 309,col 9)-(line 309,col 56)",
            "(line 310,col 9)-(line 310,col 58)",
            "(line 311,col 9)-(line 311,col 58)",
            "(line 312,col 9)-(line 312,col 58)",
            "(line 313,col 9)-(line 313,col 60)",
            "(line 314,col 9)-(line 314,col 71)",
            "(line 315,col 9)-(line 315,col 68)",
            "(line 316,col 9)-(line 316,col 77)",
            "(line 317,col 9)-(line 317,col 70)",
            "(line 318,col 9)-(line 318,col 73)",
            "(line 320,col 9)-(line 320,col 36)",
            "(line 321,col 9)-(line 321,col 60)",
            "(line 322,col 9)-(line 322,col 56)",
            "(line 323,col 9)-(line 323,col 58)",
            "(line 324,col 9)-(line 324,col 58)",
            "(line 325,col 9)-(line 325,col 58)",
            "(line 326,col 9)-(line 326,col 60)",
            "(line 327,col 9)-(line 327,col 71)",
            "(line 328,col 9)-(line 328,col 68)",
            "(line 329,col 9)-(line 329,col 77)",
            "(line 330,col 9)-(line 330,col 71)",
            "(line 331,col 9)-(line 331,col 73)",
            "(line 333,col 9)-(line 333,col 38)",
            "(line 334,col 9)-(line 334,col 60)",
            "(line 335,col 9)-(line 335,col 56)",
            "(line 336,col 9)-(line 336,col 59)",
            "(line 337,col 9)-(line 337,col 57)",
            "(line 338,col 9)-(line 338,col 58)",
            "(line 339,col 9)-(line 339,col 60)",
            "(line 340,col 9)-(line 340,col 70)",
            "(line 341,col 9)-(line 341,col 67)",
            "(line 342,col 9)-(line 342,col 76)",
            "(line 343,col 9)-(line 343,col 69)",
            "(line 344,col 9)-(line 344,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/WordUtilsTest.java",
        "signature": "org.apache.commons.lang.WordUtilsTest.testSwapCase_String()",
        "snippet": "    public void testSwapCase_String() {\n        assertEquals(null, WordUtils.swapCase(null));\n        assertEquals(\"\", WordUtils.swapCase(\"\"));\n        assertEquals(\"  \", WordUtils.swapCase(\"  \"));\n        \n        assertEquals(\"i\", WordUtils.swapCase(\"I\") );\n        assertEquals(\"I\", WordUtils.swapCase(\"i\") );\n        assertEquals(\"I AM HERE 123\", WordUtils.swapCase(\"i am here 123\") );\n        assertEquals(\"i aM hERE 123\", WordUtils.swapCase(\"I Am Here 123\") );\n        assertEquals(\"I AM here 123\", WordUtils.swapCase(\"i am HERE 123\") );\n        assertEquals(\"i am here 123\", WordUtils.swapCase(\"I AM HERE 123\") );\n\n        String test = \"This String contains a TitleCase character: \\u01C8\";\n        String expect = \"tHIS sTRING CONTAINS A tITLEcASE CHARACTER: \\u01C9\";\n        assertEquals(expect, WordUtils.swapCase(test));\n    }",
        "begin_line": 348,
        "end_line": 363,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 349,col 9)-(line 349,col 53)",
            "(line 350,col 9)-(line 350,col 49)",
            "(line 351,col 9)-(line 351,col 53)",
            "(line 353,col 9)-(line 353,col 52)",
            "(line 354,col 9)-(line 354,col 52)",
            "(line 355,col 9)-(line 355,col 76)",
            "(line 356,col 9)-(line 356,col 76)",
            "(line 357,col 9)-(line 357,col 76)",
            "(line 358,col 9)-(line 358,col 76)",
            "(line 360,col 9)-(line 360,col 75)",
            "(line 361,col 9)-(line 361,col 77)",
            "(line 362,col 9)-(line 362,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/WordUtilsTest.java",
        "signature": "org.apache.commons.lang.WordUtilsTest.testAbbreviate()",
        "snippet": "    public void testAbbreviate() {\n        // check null and empty are returned respectively\n        assertNull(WordUtils.abbreviate(null, 1,-1,\"\"));\n        assertEquals(StringUtils.EMPTY, WordUtils.abbreviate(\"\", 1,-1,\"\"));\n\n        // test upper limit\n        assertEquals(\"01234\", WordUtils.abbreviate(\"0123456789\", 0,5,\"\"));\n        assertEquals(\"01234\", WordUtils.abbreviate(\"0123456789\", 5, 2,\"\"));\n        assertEquals(\"012\", WordUtils.abbreviate(\"012 3456789\", 2, 5,\"\"));\n        assertEquals(\"012 3\", WordUtils.abbreviate(\"012 3456789\", 5, 2,\"\"));\n        assertEquals(\"0123456789\", WordUtils.abbreviate(\"0123456789\", 0,-1,\"\"));\n\n        // test upper limit + append string\n        assertEquals(\"01234-\", WordUtils.abbreviate(\"0123456789\", 0,5,\"-\"));\n        assertEquals(\"01234-\", WordUtils.abbreviate(\"0123456789\", 5, 2,\"-\"));\n        assertEquals(\"012\", WordUtils.abbreviate(\"012 3456789\", 2, 5, null));\n        assertEquals(\"012 3\", WordUtils.abbreviate(\"012 3456789\", 5, 2,\"\"));\n        assertEquals(\"0123456789\", WordUtils.abbreviate(\"0123456789\", 0,-1,\"\"));\n\n        // test lower value\n        assertEquals(\"012\", WordUtils.abbreviate(\"012 3456789\", 0,5, null));\n        assertEquals(\"01234\", WordUtils.abbreviate(\"01234 56789\", 5, 10, null));\n        assertEquals(\"01 23 45 67\", WordUtils.abbreviate(\"01 23 45 67 89\", 9, -1, null));\n        assertEquals(\"01 23 45 6\", WordUtils.abbreviate(\"01 23 45 67 89\", 9, 10, null));\n\n        // test lower value + append\n        assertEquals(\"012\", WordUtils.abbreviate(\"012 3456789\", 0,5, null));\n        assertEquals(\"01234-\", WordUtils.abbreviate(\"01234 56789\", 5, 10, \"-\"));\n        assertEquals(\"01 23 45 67abc\", WordUtils.abbreviate(\"01 23 45 67 89\", 9, -1, \"abc\"));\n        assertEquals(\"01 23 45 6\", WordUtils.abbreviate(\"01 23 45 67 89\", 9, 10, \"\"));\n\n        // others\n        assertEquals(\"\", WordUtils.abbreviate(\"0123456790\", 0,0,\"\"));\n        assertEquals(\"\", WordUtils.abbreviate(\" 0123456790\", 0,-1,\"\"));\n    }",
        "begin_line": 366,
        "end_line": 400,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 368,col 9)-(line 368,col 56)",
            "(line 369,col 9)-(line 369,col 75)",
            "(line 372,col 9)-(line 372,col 74)",
            "(line 373,col 9)-(line 373,col 75)",
            "(line 374,col 9)-(line 374,col 74)",
            "(line 375,col 9)-(line 375,col 76)",
            "(line 376,col 9)-(line 376,col 80)",
            "(line 379,col 9)-(line 379,col 76)",
            "(line 380,col 9)-(line 380,col 77)",
            "(line 381,col 9)-(line 381,col 77)",
            "(line 382,col 9)-(line 382,col 76)",
            "(line 383,col 9)-(line 383,col 80)",
            "(line 386,col 9)-(line 386,col 76)",
            "(line 387,col 9)-(line 387,col 80)",
            "(line 388,col 9)-(line 388,col 89)",
            "(line 389,col 9)-(line 389,col 88)",
            "(line 392,col 9)-(line 392,col 76)",
            "(line 393,col 9)-(line 393,col 80)",
            "(line 394,col 9)-(line 394,col 93)",
            "(line 395,col 9)-(line 395,col 86)",
            "(line 398,col 9)-(line 398,col 69)",
            "(line 399,col 9)-(line 399,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.BooleanUtilsTest(java.lang.String)",
        "snippet": "    public BooleanUtilsTest(String name) {\n        super(name);\n    }",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(BooleanUtilsTest.class);\n        suite.setName(\"BooleanUtils Tests\");\n        return suite;\n    }",
        "begin_line": 44,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 64)",
            "(line 46,col 9)-(line 46,col 44)",
            "(line 47,col 9)-(line 47,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        super.setUp();\n    }",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        super.tearDown();\n    }",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new BooleanUtils());\n        Constructor[] cons = BooleanUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(BooleanUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(BooleanUtils.class.getModifiers()));\n    }",
        "begin_line": 59,
        "end_line": 66,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 42)",
            "(line 61,col 9)-(line 61,col 74)",
            "(line 62,col 9)-(line 62,col 37)",
            "(line 63,col 9)-(line 63,col 70)",
            "(line 64,col 9)-(line 64,col 81)",
            "(line 65,col 9)-(line 65,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_negate_Boolean()",
        "snippet": "    public void test_negate_Boolean() {\n        assertSame(null, BooleanUtils.negate(null));\n        assertSame(Boolean.TRUE, BooleanUtils.negate(Boolean.FALSE));\n        assertSame(Boolean.FALSE, BooleanUtils.negate(Boolean.TRUE));\n    }",
        "begin_line": 69,
        "end_line": 73,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 52)",
            "(line 71,col 9)-(line 71,col 69)",
            "(line 72,col 9)-(line 72,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_isTrue_Boolean()",
        "snippet": "    public void test_isTrue_Boolean() {\n        assertEquals(true, BooleanUtils.isTrue(Boolean.TRUE));\n        assertEquals(false, BooleanUtils.isTrue(Boolean.FALSE));\n        assertEquals(false, BooleanUtils.isTrue((Boolean) null));\n    }",
        "begin_line": 76,
        "end_line": 80,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 62)",
            "(line 78,col 9)-(line 78,col 64)",
            "(line 79,col 9)-(line 79,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_isNotTrue_Boolean()",
        "snippet": "    public void test_isNotTrue_Boolean() {\n        assertEquals(false, BooleanUtils.isNotTrue(Boolean.TRUE));\n        assertEquals(true, BooleanUtils.isNotTrue(Boolean.FALSE));\n        assertEquals(true, BooleanUtils.isNotTrue((Boolean) null));\n    }",
        "begin_line": 82,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 66)",
            "(line 84,col 9)-(line 84,col 66)",
            "(line 85,col 9)-(line 85,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_isFalse_Boolean()",
        "snippet": "    public void test_isFalse_Boolean() {\n        assertEquals(false, BooleanUtils.isFalse(Boolean.TRUE));\n        assertEquals(true, BooleanUtils.isFalse(Boolean.FALSE));\n        assertEquals(false, BooleanUtils.isFalse((Boolean) null));\n    }",
        "begin_line": 89,
        "end_line": 93,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 64)",
            "(line 91,col 9)-(line 91,col 64)",
            "(line 92,col 9)-(line 92,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_isNotFalse_Boolean()",
        "snippet": "    public void test_isNotFalse_Boolean() {\n        assertEquals(true, BooleanUtils.isNotFalse(Boolean.TRUE));\n        assertEquals(false, BooleanUtils.isNotFalse(Boolean.FALSE));\n        assertEquals(true, BooleanUtils.isNotFalse((Boolean) null));\n    }",
        "begin_line": 95,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 66)",
            "(line 97,col 9)-(line 97,col 68)",
            "(line 98,col 9)-(line 98,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toBooleanObject_boolean()",
        "snippet": "    public void test_toBooleanObject_boolean() {\n        assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject(true));\n        assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject(false));\n    }",
        "begin_line": 102,
        "end_line": 105,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 69)",
            "(line 104,col 9)-(line 104,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toBoolean_Boolean()",
        "snippet": "    public void test_toBoolean_Boolean() {\n        assertEquals(true, BooleanUtils.toBoolean(Boolean.TRUE));\n        assertEquals(false, BooleanUtils.toBoolean(Boolean.FALSE));\n        assertEquals(false, BooleanUtils.toBoolean((Boolean) null));\n    }",
        "begin_line": 107,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 65)",
            "(line 109,col 9)-(line 109,col 67)",
            "(line 110,col 9)-(line 110,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toBooleanDefaultIfNull_Boolean_boolean()",
        "snippet": "    public void test_toBooleanDefaultIfNull_Boolean_boolean() {\n        assertEquals(true, BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, true));\n        assertEquals(true, BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, false));\n        assertEquals(false, BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, true));\n        assertEquals(false, BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, false));\n        assertEquals(true, BooleanUtils.toBooleanDefaultIfNull((Boolean) null, true));\n        assertEquals(false, BooleanUtils.toBooleanDefaultIfNull((Boolean) null, false));\n    }",
        "begin_line": 113,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 84)",
            "(line 115,col 9)-(line 115,col 85)",
            "(line 116,col 9)-(line 116,col 86)",
            "(line 117,col 9)-(line 117,col 87)",
            "(line 118,col 9)-(line 118,col 86)",
            "(line 119,col 9)-(line 119,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toBoolean_int()",
        "snippet": "    public void test_toBoolean_int() {\n        assertEquals(true, BooleanUtils.toBoolean(1));\n        assertEquals(true, BooleanUtils.toBoolean(-1));\n        assertEquals(false, BooleanUtils.toBoolean(0));\n    }",
        "begin_line": 124,
        "end_line": 128,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 54)",
            "(line 126,col 9)-(line 126,col 55)",
            "(line 127,col 9)-(line 127,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toBooleanObject_int()",
        "snippet": "    public void test_toBooleanObject_int() {\n        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(1));\n        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(-1));\n        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(0));\n    }",
        "begin_line": 130,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 131,col 9)-(line 131,col 68)",
            "(line 132,col 9)-(line 132,col 69)",
            "(line 133,col 9)-(line 133,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toBooleanObject_Integer()",
        "snippet": "    public void test_toBooleanObject_Integer() {\n        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n        assertEquals(null, BooleanUtils.toBooleanObject((Integer) null));\n    }",
        "begin_line": 136,
        "end_line": 141,
        "comment": "",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 81)",
            "(line 138,col 9)-(line 138,col 82)",
            "(line 139,col 9)-(line 139,col 82)",
            "(line 140,col 9)-(line 140,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toBoolean_int_int_int()",
        "snippet": "    public void test_toBoolean_int_int_int() {\n        assertEquals(true, BooleanUtils.toBoolean(6, 6, 7));\n        assertEquals(false, BooleanUtils.toBoolean(7, 6, 7));\n        try {\n            BooleanUtils.toBoolean(8, 6, 7);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 144,
        "end_line": 151,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 145,col 9)-(line 145,col 60)",
            "(line 146,col 9)-(line 146,col 61)",
            "(line 147,col 9)-(line 150,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toBoolean_Integer_Integer_Integer()",
        "snippet": "    public void test_toBoolean_Integer_Integer_Integer() {\n        Integer six = new Integer(6);\n        Integer seven = new Integer(7);\n\n        assertEquals(true, BooleanUtils.toBoolean((Integer) null, null, seven));\n        assertEquals(false, BooleanUtils.toBoolean((Integer) null, six, null));\n        try {\n            BooleanUtils.toBoolean(null, six, seven);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        \n        assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n        assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n        try {\n            BooleanUtils.toBoolean(new Integer(8), six, seven);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 153,
        "end_line": 170,
        "comment": "",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 37)",
            "(line 155,col 9)-(line 155,col 39)",
            "(line 157,col 9)-(line 157,col 80)",
            "(line 158,col 9)-(line 158,col 79)",
            "(line 159,col 9)-(line 162,col 48)",
            "(line 164,col 9)-(line 164,col 79)",
            "(line 165,col 9)-(line 165,col 80)",
            "(line 166,col 9)-(line 169,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toBooleanObject_int_int_int()",
        "snippet": "    public void test_toBooleanObject_int_int_int() {\n        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(6, 6, 7, 8));\n        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(7, 6, 7, 8));\n        assertEquals(null, BooleanUtils.toBooleanObject(8, 6, 7, 8));\n        try {\n            BooleanUtils.toBooleanObject(9, 6, 7, 8);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 173,
        "end_line": 181,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 174,col 9)-(line 174,col 77)",
            "(line 175,col 9)-(line 175,col 78)",
            "(line 176,col 9)-(line 176,col 69)",
            "(line 177,col 9)-(line 180,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toBooleanObject_Integer_Integer_Integer_Integer()",
        "snippet": "    public void test_toBooleanObject_Integer_Integer_Integer_Integer() {\n        Integer six = new Integer(6);\n        Integer seven = new Integer(7);\n        Integer eight = new Integer(8);\n\n        assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((Integer) null, null, seven, eight));\n        assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((Integer) null, six, null, eight));\n        assertSame(null, BooleanUtils.toBooleanObject((Integer) null, six, seven, null));\n        try {\n            BooleanUtils.toBooleanObject(null, six, seven, eight);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        \n        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n        assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n        try {\n            BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 183,
        "end_line": 203,
        "comment": "",
        "child_ranges": [
            "(line 184,col 9)-(line 184,col 37)",
            "(line 185,col 9)-(line 185,col 39)",
            "(line 186,col 9)-(line 186,col 39)",
            "(line 188,col 9)-(line 188,col 99)",
            "(line 189,col 9)-(line 189,col 98)",
            "(line 190,col 9)-(line 190,col 89)",
            "(line 191,col 9)-(line 194,col 48)",
            "(line 196,col 9)-(line 196,col 100)",
            "(line 197,col 9)-(line 197,col 101)",
            "(line 198,col 9)-(line 198,col 92)",
            "(line 199,col 9)-(line 202,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toInteger_boolean()",
        "snippet": "    public void test_toInteger_boolean() {\n        assertEquals(1, BooleanUtils.toInteger(true));\n        assertEquals(0, BooleanUtils.toInteger(false));\n    }",
        "begin_line": 206,
        "end_line": 209,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 207,col 9)-(line 207,col 54)",
            "(line 208,col 9)-(line 208,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toIntegerObject_boolean()",
        "snippet": "    public void test_toIntegerObject_boolean() {\n        assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n        assertEquals(new Integer(0), BooleanUtils.toIntegerObject(false));\n    }",
        "begin_line": 211,
        "end_line": 214,
        "comment": "",
        "child_ranges": [
            "(line 212,col 9)-(line 212,col 73)",
            "(line 213,col 9)-(line 213,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toIntegerObject_Boolean()",
        "snippet": "    public void test_toIntegerObject_Boolean() {\n        assertEquals(new Integer(1), BooleanUtils.toIntegerObject(Boolean.TRUE));\n        assertEquals(new Integer(0), BooleanUtils.toIntegerObject(Boolean.FALSE));\n        assertEquals(null, BooleanUtils.toIntegerObject((Boolean) null));\n    }",
        "begin_line": 216,
        "end_line": 220,
        "comment": "",
        "child_ranges": [
            "(line 217,col 9)-(line 217,col 81)",
            "(line 218,col 9)-(line 218,col 82)",
            "(line 219,col 9)-(line 219,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toInteger_boolean_int_int()",
        "snippet": "    public void test_toInteger_boolean_int_int() {\n        assertEquals(6, BooleanUtils.toInteger(true, 6, 7));\n        assertEquals(7, BooleanUtils.toInteger(false, 6, 7));\n    }",
        "begin_line": 223,
        "end_line": 226,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 224,col 9)-(line 224,col 60)",
            "(line 225,col 9)-(line 225,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toInteger_Boolean_int_int_int()",
        "snippet": "    public void test_toInteger_Boolean_int_int_int() {\n        assertEquals(6, BooleanUtils.toInteger(Boolean.TRUE, 6, 7, 8));\n        assertEquals(7, BooleanUtils.toInteger(Boolean.FALSE, 6, 7, 8));\n        assertEquals(8, BooleanUtils.toInteger(null, 6, 7, 8));\n    }",
        "begin_line": 228,
        "end_line": 232,
        "comment": "",
        "child_ranges": [
            "(line 229,col 9)-(line 229,col 71)",
            "(line 230,col 9)-(line 230,col 72)",
            "(line 231,col 9)-(line 231,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toIntegerObject_boolean_Integer_Integer()",
        "snippet": "    public void test_toIntegerObject_boolean_Integer_Integer() {\n        Integer six = new Integer(6);\n        Integer seven = new Integer(7);\n        assertEquals(six, BooleanUtils.toIntegerObject(true, six, seven));\n        assertEquals(seven, BooleanUtils.toIntegerObject(false, six, seven));\n    }",
        "begin_line": 234,
        "end_line": 239,
        "comment": "",
        "child_ranges": [
            "(line 235,col 9)-(line 235,col 37)",
            "(line 236,col 9)-(line 236,col 39)",
            "(line 237,col 9)-(line 237,col 74)",
            "(line 238,col 9)-(line 238,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toIntegerObject_Boolean_Integer_Integer_Integer()",
        "snippet": "    public void test_toIntegerObject_Boolean_Integer_Integer_Integer() {\n        Integer six = new Integer(6);\n        Integer seven = new Integer(7);\n        Integer eight = new Integer(8);\n        assertEquals(six, BooleanUtils.toIntegerObject(Boolean.TRUE, six, seven, eight));\n        assertEquals(seven, BooleanUtils.toIntegerObject(Boolean.FALSE, six, seven, eight));\n        assertEquals(eight, BooleanUtils.toIntegerObject((Boolean) null, six, seven, eight));\n        assertEquals(null, BooleanUtils.toIntegerObject((Boolean) null, six, seven, null));\n    }",
        "begin_line": 241,
        "end_line": 249,
        "comment": "",
        "child_ranges": [
            "(line 242,col 9)-(line 242,col 37)",
            "(line 243,col 9)-(line 243,col 39)",
            "(line 244,col 9)-(line 244,col 39)",
            "(line 245,col 9)-(line 245,col 89)",
            "(line 246,col 9)-(line 246,col 92)",
            "(line 247,col 9)-(line 247,col 93)",
            "(line 248,col 9)-(line 248,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toBooleanObject_String()",
        "snippet": "    public void test_toBooleanObject_String() {\n        assertEquals(null, BooleanUtils.toBooleanObject((String) null));\n        assertEquals(null, BooleanUtils.toBooleanObject(\"\"));\n        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"false\"));\n        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"no\"));\n        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"off\"));\n        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"FALSE\"));\n        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"NO\"));\n        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"OFF\"));\n        assertEquals(null, BooleanUtils.toBooleanObject(\"oof\"));\n        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"true\"));\n        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"yes\"));\n        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"on\"));\n        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"TRUE\"));\n        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"ON\"));\n        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"YES\"));\n        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"TruE\"));\n    }",
        "begin_line": 253,
        "end_line": 270,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 254,col 9)-(line 254,col 72)",
            "(line 255,col 9)-(line 255,col 61)",
            "(line 256,col 9)-(line 256,col 75)",
            "(line 257,col 9)-(line 257,col 72)",
            "(line 258,col 9)-(line 258,col 73)",
            "(line 259,col 9)-(line 259,col 75)",
            "(line 260,col 9)-(line 260,col 72)",
            "(line 261,col 9)-(line 261,col 73)",
            "(line 262,col 9)-(line 262,col 64)",
            "(line 263,col 9)-(line 263,col 73)",
            "(line 264,col 9)-(line 264,col 72)",
            "(line 265,col 9)-(line 265,col 71)",
            "(line 266,col 9)-(line 266,col 73)",
            "(line 267,col 9)-(line 267,col 71)",
            "(line 268,col 9)-(line 268,col 72)",
            "(line 269,col 9)-(line 269,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toBooleanObject_String_String_String_String()",
        "snippet": "    public void test_toBooleanObject_String_String_String_String() {\n        assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((String) null, null, \"N\", \"U\"));\n        assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((String) null, \"Y\", null, \"U\"));\n        assertSame(null, BooleanUtils.toBooleanObject((String) null, \"Y\", \"N\", null));\n        try {\n            BooleanUtils.toBooleanObject((String) null, \"Y\", \"N\", \"U\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n\n        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"Y\", \"Y\", \"N\", \"U\"));\n        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"N\", \"Y\", \"N\", \"U\"));\n        assertEquals(null, BooleanUtils.toBooleanObject(\"U\", \"Y\", \"N\", \"U\"));\n        try {\n            BooleanUtils.toBooleanObject(null, \"Y\", \"N\", \"U\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            BooleanUtils.toBooleanObject(\"X\", \"Y\", \"N\", \"U\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 272,
        "end_line": 292,
        "comment": "",
        "child_ranges": [
            "(line 273,col 9)-(line 273,col 94)",
            "(line 274,col 9)-(line 274,col 95)",
            "(line 275,col 9)-(line 275,col 86)",
            "(line 276,col 9)-(line 279,col 48)",
            "(line 281,col 9)-(line 281,col 85)",
            "(line 282,col 9)-(line 282,col 86)",
            "(line 283,col 9)-(line 283,col 77)",
            "(line 284,col 9)-(line 287,col 48)",
            "(line 288,col 9)-(line 291,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toBoolean_String()",
        "snippet": "    public void test_toBoolean_String() {\n        assertEquals(false, BooleanUtils.toBoolean((String) null));\n        assertEquals(false, BooleanUtils.toBoolean(\"\"));\n        assertEquals(false, BooleanUtils.toBoolean(\"off\"));\n        assertEquals(false, BooleanUtils.toBoolean(\"oof\"));\n        assertEquals(false, BooleanUtils.toBoolean(\"yep\"));\n        assertEquals(false, BooleanUtils.toBoolean(\"trux\"));\n        assertEquals(false, BooleanUtils.toBoolean(\"false\"));\n        assertEquals(false, BooleanUtils.toBoolean(\"a\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"true\")); // interned handled differently\n        assertEquals(true, BooleanUtils.toBoolean(new StringBuffer(\"tr\").append(\"ue\").toString()));\n        assertEquals(true, BooleanUtils.toBoolean(\"truE\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"trUe\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"trUE\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"tRue\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"tRuE\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"tRUe\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"tRUE\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"TRUE\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"TRUe\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"TRuE\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"TRue\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"TrUE\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"TrUe\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"TruE\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"True\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"on\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"oN\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"On\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"ON\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"yes\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"yeS\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"yEs\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"yES\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"Yes\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"YeS\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"YEs\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"YES\"));\n        assertEquals(false, BooleanUtils.toBoolean(\"yes?\"));\n        assertEquals(false, BooleanUtils.toBoolean(\"tru\"));\n    }",
        "begin_line": 295,
        "end_line": 335,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 296,col 9)-(line 296,col 67)",
            "(line 297,col 9)-(line 297,col 56)",
            "(line 298,col 9)-(line 298,col 59)",
            "(line 299,col 9)-(line 299,col 59)",
            "(line 300,col 9)-(line 300,col 59)",
            "(line 301,col 9)-(line 301,col 60)",
            "(line 302,col 9)-(line 302,col 61)",
            "(line 303,col 9)-(line 303,col 57)",
            "(line 304,col 9)-(line 304,col 59)",
            "(line 305,col 9)-(line 305,col 99)",
            "(line 306,col 9)-(line 306,col 59)",
            "(line 307,col 9)-(line 307,col 59)",
            "(line 308,col 9)-(line 308,col 59)",
            "(line 309,col 9)-(line 309,col 59)",
            "(line 310,col 9)-(line 310,col 59)",
            "(line 311,col 9)-(line 311,col 59)",
            "(line 312,col 9)-(line 312,col 59)",
            "(line 313,col 9)-(line 313,col 59)",
            "(line 314,col 9)-(line 314,col 59)",
            "(line 315,col 9)-(line 315,col 59)",
            "(line 316,col 9)-(line 316,col 59)",
            "(line 317,col 9)-(line 317,col 59)",
            "(line 318,col 9)-(line 318,col 59)",
            "(line 319,col 9)-(line 319,col 59)",
            "(line 320,col 9)-(line 320,col 59)",
            "(line 321,col 9)-(line 321,col 57)",
            "(line 322,col 9)-(line 322,col 57)",
            "(line 323,col 9)-(line 323,col 57)",
            "(line 324,col 9)-(line 324,col 57)",
            "(line 325,col 9)-(line 325,col 58)",
            "(line 326,col 9)-(line 326,col 58)",
            "(line 327,col 9)-(line 327,col 58)",
            "(line 328,col 9)-(line 328,col 58)",
            "(line 329,col 9)-(line 329,col 58)",
            "(line 330,col 9)-(line 330,col 58)",
            "(line 331,col 9)-(line 331,col 58)",
            "(line 332,col 9)-(line 332,col 58)",
            "(line 333,col 9)-(line 333,col 60)",
            "(line 334,col 9)-(line 334,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toBoolean_String_String_String()",
        "snippet": "    public void test_toBoolean_String_String_String() {\n        assertEquals(true, BooleanUtils.toBoolean((String) null, null, \"N\"));\n        assertEquals(false, BooleanUtils.toBoolean((String) null, \"Y\", null));\n        try {\n            BooleanUtils.toBooleanObject((String) null, \"Y\", \"N\", \"U\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        \n        assertEquals(true, BooleanUtils.toBoolean(\"Y\", \"Y\", \"N\"));\n        assertEquals(false, BooleanUtils.toBoolean(\"N\", \"Y\", \"N\"));\n        try {\n            BooleanUtils.toBoolean(null, \"Y\", \"N\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            BooleanUtils.toBoolean(\"X\", \"Y\", \"N\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 337,
        "end_line": 355,
        "comment": "",
        "child_ranges": [
            "(line 338,col 9)-(line 338,col 77)",
            "(line 339,col 9)-(line 339,col 78)",
            "(line 340,col 9)-(line 343,col 48)",
            "(line 345,col 9)-(line 345,col 66)",
            "(line 346,col 9)-(line 346,col 67)",
            "(line 347,col 9)-(line 350,col 48)",
            "(line 351,col 9)-(line 354,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toStringTrueFalse_Boolean()",
        "snippet": "    public void test_toStringTrueFalse_Boolean() {\n        assertEquals(null, BooleanUtils.toStringTrueFalse((Boolean) null));\n        assertEquals(\"true\", BooleanUtils.toStringTrueFalse(Boolean.TRUE));\n        assertEquals(\"false\", BooleanUtils.toStringTrueFalse(Boolean.FALSE));\n    }",
        "begin_line": 358,
        "end_line": 362,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 359,col 9)-(line 359,col 75)",
            "(line 360,col 9)-(line 360,col 75)",
            "(line 361,col 9)-(line 361,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toStringOnOff_Boolean()",
        "snippet": "    public void test_toStringOnOff_Boolean() {\n        assertEquals(null, BooleanUtils.toStringOnOff((Boolean) null));\n        assertEquals(\"on\", BooleanUtils.toStringOnOff(Boolean.TRUE));\n        assertEquals(\"off\", BooleanUtils.toStringOnOff(Boolean.FALSE));\n    }",
        "begin_line": 364,
        "end_line": 368,
        "comment": "",
        "child_ranges": [
            "(line 365,col 9)-(line 365,col 71)",
            "(line 366,col 9)-(line 366,col 69)",
            "(line 367,col 9)-(line 367,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toStringYesNo_Boolean()",
        "snippet": "    public void test_toStringYesNo_Boolean() {\n        assertEquals(null, BooleanUtils.toStringYesNo((Boolean) null));\n        assertEquals(\"yes\", BooleanUtils.toStringYesNo(Boolean.TRUE));\n        assertEquals(\"no\", BooleanUtils.toStringYesNo(Boolean.FALSE));\n    }",
        "begin_line": 370,
        "end_line": 374,
        "comment": "",
        "child_ranges": [
            "(line 371,col 9)-(line 371,col 71)",
            "(line 372,col 9)-(line 372,col 70)",
            "(line 373,col 9)-(line 373,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toString_Boolean_String_String_String()",
        "snippet": "    public void test_toString_Boolean_String_String_String() {\n        assertEquals(\"U\", BooleanUtils.toString((Boolean) null, \"Y\", \"N\", \"U\"));\n        assertEquals(\"Y\", BooleanUtils.toString(Boolean.TRUE, \"Y\", \"N\", \"U\"));\n        assertEquals(\"N\", BooleanUtils.toString(Boolean.FALSE, \"Y\", \"N\", \"U\"));\n    }",
        "begin_line": 376,
        "end_line": 380,
        "comment": "",
        "child_ranges": [
            "(line 377,col 9)-(line 377,col 80)",
            "(line 378,col 9)-(line 378,col 78)",
            "(line 379,col 9)-(line 379,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toStringTrueFalse_boolean()",
        "snippet": "    public void test_toStringTrueFalse_boolean() {\n        assertEquals(\"true\", BooleanUtils.toStringTrueFalse(true));\n        assertEquals(\"false\", BooleanUtils.toStringTrueFalse(false));\n    }",
        "begin_line": 383,
        "end_line": 386,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 384,col 9)-(line 384,col 67)",
            "(line 385,col 9)-(line 385,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toStringOnOff_boolean()",
        "snippet": "    public void test_toStringOnOff_boolean() {\n        assertEquals(\"on\", BooleanUtils.toStringOnOff(true));\n        assertEquals(\"off\", BooleanUtils.toStringOnOff(false));\n    }",
        "begin_line": 388,
        "end_line": 391,
        "comment": "",
        "child_ranges": [
            "(line 389,col 9)-(line 389,col 61)",
            "(line 390,col 9)-(line 390,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toStringYesNo_boolean()",
        "snippet": "    public void test_toStringYesNo_boolean() {\n        assertEquals(\"yes\", BooleanUtils.toStringYesNo(true));\n        assertEquals(\"no\", BooleanUtils.toStringYesNo(false));\n    }",
        "begin_line": 393,
        "end_line": 396,
        "comment": "",
        "child_ranges": [
            "(line 394,col 9)-(line 394,col 62)",
            "(line 395,col 9)-(line 395,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toString_boolean_String_String_String()",
        "snippet": "    public void test_toString_boolean_String_String_String() {\n        assertEquals(\"Y\", BooleanUtils.toString(true, \"Y\", \"N\"));\n        assertEquals(\"N\", BooleanUtils.toString(false, \"Y\", \"N\"));\n    }",
        "begin_line": 398,
        "end_line": 401,
        "comment": "",
        "child_ranges": [
            "(line 399,col 9)-(line 399,col 65)",
            "(line 400,col 9)-(line 400,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.testXor_primitive_nullInput()",
        "snippet": "    public void testXor_primitive_nullInput() {\n        final boolean[] b = null;\n        try {\n            BooleanUtils.xor(b);\n            fail(\"Exception was not thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 405,
        "end_line": 411,
        "comment": "  -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 406,col 9)-(line 406,col 33)",
            "(line 407,col 9)-(line 410,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.testXor_primitive_emptyInput()",
        "snippet": "    public void testXor_primitive_emptyInput() {\n        try {\n            BooleanUtils.xor(new boolean[] {});\n            fail(\"Exception was not thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 413,
        "end_line": 418,
        "comment": "",
        "child_ranges": [
            "(line 414,col 9)-(line 417,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.testXor_primitive_validInput_2items()",
        "snippet": "    public void testXor_primitive_validInput_2items() {\n        assertTrue(\n            \"True result for (true, true)\",\n            ! BooleanUtils.xor(new boolean[] { true, true }));\n\n        assertTrue(\n            \"True result for (false, false)\",\n            ! BooleanUtils.xor(new boolean[] { false, false }));\n\n        assertTrue(\n            \"False result for (true, false)\",\n            BooleanUtils.xor(new boolean[] { true, false }));\n\n        assertTrue(\n            \"False result for (false, true)\",\n            BooleanUtils.xor(new boolean[] { false, true }));\n    }",
        "begin_line": 420,
        "end_line": 436,
        "comment": "",
        "child_ranges": [
            "(line 421,col 9)-(line 423,col 62)",
            "(line 425,col 9)-(line 427,col 64)",
            "(line 429,col 9)-(line 431,col 61)",
            "(line 433,col 9)-(line 435,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.testXor_primitive_validInput_3items()",
        "snippet": "    public void testXor_primitive_validInput_3items() {\n        assertTrue(\n            \"False result for (false, false, true)\",\n            BooleanUtils.xor(new boolean[] { false, false, true }));\n\n        assertTrue(\n            \"False result for (false, true, false)\",\n            BooleanUtils.xor(new boolean[] { false, true, false }));\n\n        assertTrue(\n            \"False result for (true, false, false)\",\n            BooleanUtils.xor(new boolean[] { true, false, false }));\n\n        assertTrue(\n            \"True result for (true, true, true)\",\n            ! BooleanUtils.xor(new boolean[] { true, true, true }));\n\n        assertTrue(\n            \"True result for (false, false)\",\n            ! BooleanUtils.xor(new boolean[] { false, false, false }));\n\n        assertTrue(\n            \"True result for (true, true, false)\",\n            ! BooleanUtils.xor(new boolean[] { true, true, false }));\n\n        assertTrue(\n            \"True result for (true, false, true)\",\n            ! BooleanUtils.xor(new boolean[] { true, false, true }));\n\n        assertTrue(\n            \"False result for (false, true, true)\",\n            ! BooleanUtils.xor(new boolean[] { false, true, true }));\n    }",
        "begin_line": 438,
        "end_line": 470,
        "comment": "",
        "child_ranges": [
            "(line 439,col 9)-(line 441,col 68)",
            "(line 443,col 9)-(line 445,col 68)",
            "(line 447,col 9)-(line 449,col 68)",
            "(line 451,col 9)-(line 453,col 68)",
            "(line 455,col 9)-(line 457,col 71)",
            "(line 459,col 9)-(line 461,col 69)",
            "(line 463,col 9)-(line 465,col 69)",
            "(line 467,col 9)-(line 469,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.testXor_object_nullInput()",
        "snippet": "    public void testXor_object_nullInput() {\n        final Boolean[] b = null;\n        try {\n            BooleanUtils.xor(b);\n            fail(\"Exception was not thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 472,
        "end_line": 478,
        "comment": "",
        "child_ranges": [
            "(line 473,col 9)-(line 473,col 33)",
            "(line 474,col 9)-(line 477,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.testXor_object_emptyInput()",
        "snippet": "    public void testXor_object_emptyInput() {\n        try {\n            BooleanUtils.xor(new Boolean[] {});\n            fail(\"Exception was not thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 480,
        "end_line": 485,
        "comment": "",
        "child_ranges": [
            "(line 481,col 9)-(line 484,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.testXor_object_nullElementInput()",
        "snippet": "    public void testXor_object_nullElementInput() {\n        try {\n            BooleanUtils.xor(new Boolean[] {null});\n            fail(\"Exception was not thrown for null element input.\");\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 487,
        "end_line": 492,
        "comment": "",
        "child_ranges": [
            "(line 488,col 9)-(line 491,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.testXor_object_validInput_2items()",
        "snippet": "    public void testXor_object_validInput_2items() {\n        assertTrue(\n            \"True result for (true, true)\",\n            ! BooleanUtils\n                .xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE })\n                .booleanValue());\n\n        assertTrue(\n            \"True result for (false, false)\",\n            ! BooleanUtils\n                .xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE })\n                .booleanValue());\n\n        assertTrue(\n            \"False result for (true, false)\",\n            BooleanUtils\n                .xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE })\n                .booleanValue());\n\n        assertTrue(\n            \"False result for (false, true)\",\n            BooleanUtils\n                .xor(new Boolean[] { Boolean.FALSE, Boolean.TRUE })\n                .booleanValue());\n    }",
        "begin_line": 494,
        "end_line": 518,
        "comment": "",
        "child_ranges": [
            "(line 495,col 9)-(line 499,col 33)",
            "(line 501,col 9)-(line 505,col 33)",
            "(line 507,col 9)-(line 511,col 33)",
            "(line 513,col 9)-(line 517,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.testXor_object_validInput_3items()",
        "snippet": "    public void testXor_object_validInput_3items() {\n        assertTrue(\n            \"False result for (false, false, true)\",\n            BooleanUtils\n                .xor(\n                    new Boolean[] {\n                        Boolean.FALSE,\n                        Boolean.FALSE,\n                        Boolean.TRUE })\n                .booleanValue());\n\n        assertTrue(\n            \"False result for (false, true, false)\",\n            BooleanUtils\n                .xor(\n                    new Boolean[] {\n                        Boolean.FALSE,\n                        Boolean.TRUE,\n                        Boolean.FALSE })\n                .booleanValue());\n\n        assertTrue(\n            \"False result for (true, false, false)\",\n            BooleanUtils\n                .xor(\n                    new Boolean[] {\n                        Boolean.TRUE,\n                        Boolean.FALSE,\n                        Boolean.FALSE })\n                .booleanValue());\n\n        assertTrue(\n            \"True result for (true, true, true)\",\n            ! BooleanUtils\n                .xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.TRUE })\n                .booleanValue());\n\n        assertTrue(\n            \"True result for (false, false)\",\n            ! BooleanUtils.xor(\n                    new Boolean[] {\n                        Boolean.FALSE,\n                        Boolean.FALSE,\n                        Boolean.FALSE })\n                .booleanValue());\n\n        assertTrue(\n            \"True result for (true, true, false)\",\n            ! BooleanUtils.xor(\n                    new Boolean[] {\n                        Boolean.TRUE,\n                        Boolean.TRUE,\n                        Boolean.FALSE })\n                .booleanValue());\n\n        assertTrue(\n            \"True result for (true, false, true)\",\n            ! BooleanUtils.xor(\n                    new Boolean[] {\n                        Boolean.TRUE,\n                        Boolean.FALSE,\n                        Boolean.TRUE })\n                .booleanValue());\n\n        assertTrue(\n            \"False result for (false, true, true)\",\n            ! BooleanUtils.xor(\n                    new Boolean[] {\n                        Boolean.FALSE,\n                        Boolean.TRUE,\n                        Boolean.TRUE })\n                .booleanValue());\n                \n    }",
        "begin_line": 520,
        "end_line": 593,
        "comment": "",
        "child_ranges": [
            "(line 521,col 9)-(line 529,col 33)",
            "(line 531,col 9)-(line 539,col 33)",
            "(line 541,col 9)-(line 549,col 33)",
            "(line 551,col 9)-(line 555,col 33)",
            "(line 557,col 9)-(line 564,col 33)",
            "(line 566,col 9)-(line 573,col 33)",
            "(line 575,col 9)-(line 582,col 33)",
            "(line 584,col 9)-(line 591,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.LocaleUtilsTest(java.lang.String)",
        "snippet": "    public LocaleUtilsTest(String name) {\n        super(name);\n    }",
        "begin_line": 56,
        "end_line": 58,
        "comment": "\n     * Constructor.\n     * \n     * @param name\n     ",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 64,
        "end_line": 66,
        "comment": "\n     * Main.\n     * @param args\n     ",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(LocaleUtilsTest.class);\n        suite.setName(\"LocaleUtilsTest Tests\");\n        return suite;\n    }",
        "begin_line": 72,
        "end_line": 76,
        "comment": "\n     * Run the test cases as a suite.\n     * @return the Test\n     ",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 63)",
            "(line 74,col 9)-(line 74,col 47)",
            "(line 75,col 9)-(line 75,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.setUp()",
        "snippet": "    public void setUp() throws Exception {\n        super.setUp();\n\n        // Testing #LANG-304. Must be called before availableLocaleSet is called.\n        LocaleUtils.isAvailableLocale(Locale.getDefault());\n    }",
        "begin_line": 78,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 22)",
            "(line 82,col 9)-(line 82,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new LocaleUtils());\n        Constructor[] cons = LocaleUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(LocaleUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(LocaleUtils.class.getModifiers()));\n    }",
        "begin_line": 89,
        "end_line": 96,
        "comment": "\n     * Test that constructors are public, and work, etc.\n     ",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 41)",
            "(line 91,col 9)-(line 91,col 73)",
            "(line 92,col 9)-(line 92,col 37)",
            "(line 93,col 9)-(line 93,col 70)",
            "(line 94,col 9)-(line 94,col 80)",
            "(line 95,col 9)-(line 95,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.assertValidToLocale(java.lang.String)",
        "snippet": "    private void assertValidToLocale(String language) {\n        Locale locale = LocaleUtils.toLocale(language);\n        assertNotNull(\"valid locale\", locale);\n        assertEquals(language, locale.getLanguage());\n        //country and variant are empty\n        assertTrue(locale.getCountry() == null || locale.getCountry().length() == 0);\n        assertTrue(locale.getVariant() == null || locale.getVariant().length() == 0);\n    }",
        "begin_line": 104,
        "end_line": 111,
        "comment": "\n     * Pass in a valid language, test toLocale.\n     *\n     * @param language  the language string\n     ",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 55)",
            "(line 106,col 9)-(line 106,col 46)",
            "(line 107,col 9)-(line 107,col 53)",
            "(line 109,col 9)-(line 109,col 85)",
            "(line 110,col 9)-(line 110,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.assertValidToLocale(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    private void assertValidToLocale(String localeString, String language, String country) {\n        Locale locale = LocaleUtils.toLocale(localeString);\n        assertNotNull(\"valid locale\", locale);\n        assertEquals(language, locale.getLanguage());\n        assertEquals(country, locale.getCountry());\n        //variant is empty\n        assertTrue(locale.getVariant() == null || locale.getVariant().length() == 0);\n    }",
        "begin_line": 120,
        "end_line": 127,
        "comment": "\n     * Pass in a valid language, test toLocale.\n     *\n     * @param localeString to pass to toLocale()\n     * @param language of the resulting Locale\n     * @param country of the resulting Locale\n     ",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 59)",
            "(line 122,col 9)-(line 122,col 46)",
            "(line 123,col 9)-(line 123,col 53)",
            "(line 124,col 9)-(line 124,col 51)",
            "(line 126,col 9)-(line 126,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.assertValidToLocale(java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    private void assertValidToLocale(\n            String localeString, String language, \n            String country, String variant) {\n        Locale locale = LocaleUtils.toLocale(localeString);\n        assertNotNull(\"valid locale\", locale);\n        assertEquals(language, locale.getLanguage());\n        assertEquals(country, locale.getCountry());\n        assertEquals(variant, locale.getVariant());\n        \n    }",
        "begin_line": 137,
        "end_line": 146,
        "comment": "\n     * Pass in a valid language, test toLocale.\n     *\n     * @param localeString to pass to toLocale()\n     * @param language of the resulting Locale\n     * @param country of the resulting Locale\n     * @param variant of the resulting Locale\n     ",
        "child_ranges": [
            "(line 140,col 9)-(line 140,col 59)",
            "(line 141,col 9)-(line 141,col 46)",
            "(line 142,col 9)-(line 142,col 53)",
            "(line 143,col 9)-(line 143,col 51)",
            "(line 144,col 9)-(line 144,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.testToLocale_1Part()",
        "snippet": "    public void testToLocale_1Part() {\n        assertEquals(null, LocaleUtils.toLocale((String) null));\n        \n        assertValidToLocale(\"us\");\n        assertValidToLocale(\"fr\");\n        assertValidToLocale(\"de\");\n        assertValidToLocale(\"zh\");\n        // Valid format but lang doesnt exist, should make instance anyway\n        assertValidToLocale(\"qq\");\n        \n        try {\n            LocaleUtils.toLocale(\"Us\");\n            fail(\"Should fail if not lowercase\");\n        } catch (IllegalArgumentException iae) {}\n        try {\n            LocaleUtils.toLocale(\"US\");\n            fail(\"Should fail if not lowercase\");\n        } catch (IllegalArgumentException iae) {}\n        try {\n            LocaleUtils.toLocale(\"uS\");\n            fail(\"Should fail if not lowercase\");\n        } catch (IllegalArgumentException iae) {}\n        try {\n            LocaleUtils.toLocale(\"u#\");\n            fail(\"Should fail if not lowercase\");\n        } catch (IllegalArgumentException iae) {}\n        \n        try {\n            LocaleUtils.toLocale(\"u\");\n            fail(\"Must be 2 chars if less than 5\");\n        } catch (IllegalArgumentException iae) {}\n       \n        try {\n            LocaleUtils.toLocale(\"uuu\");\n            fail(\"Must be 2 chars if less than 5\");\n        } catch (IllegalArgumentException iae) {}\n\n        try {\n            LocaleUtils.toLocale(\"uu_U\");\n            fail(\"Must be 2 chars if less than 5\");\n        } catch (IllegalArgumentException iae) {}\n    }        ",
        "begin_line": 151,
        "end_line": 192,
        "comment": "\n     * Test toLocale() method.\n     ",
        "child_ranges": [
            "(line 152,col 9)-(line 152,col 64)",
            "(line 154,col 9)-(line 154,col 34)",
            "(line 155,col 9)-(line 155,col 34)",
            "(line 156,col 9)-(line 156,col 34)",
            "(line 157,col 9)-(line 157,col 34)",
            "(line 159,col 9)-(line 159,col 34)",
            "(line 161,col 9)-(line 164,col 49)",
            "(line 165,col 9)-(line 168,col 49)",
            "(line 169,col 9)-(line 172,col 49)",
            "(line 173,col 9)-(line 176,col 49)",
            "(line 178,col 9)-(line 181,col 49)",
            "(line 183,col 9)-(line 186,col 49)",
            "(line 188,col 9)-(line 191,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.testToLocale_2Part()",
        "snippet": "    public void testToLocale_2Part() {\n        assertValidToLocale(\"us_EN\", \"us\", \"EN\");\n        //valid though doesnt exist\n        assertValidToLocale(\"us_ZH\", \"us\", \"ZH\");\n        \n        try {\n            LocaleUtils.toLocale(\"us-EN\");\n            fail(\"Should fail as not underscore\");\n        } catch (IllegalArgumentException iae) {}\n        try {\n            LocaleUtils.toLocale(\"us_En\");\n            fail(\"Should fail second part not uppercase\");\n        } catch (IllegalArgumentException iae) {}\n        try {\n            LocaleUtils.toLocale(\"us_en\");\n            fail(\"Should fail second part not uppercase\");\n        } catch (IllegalArgumentException iae) {}\n        try {\n            LocaleUtils.toLocale(\"us_eN\");\n            fail(\"Should fail second part not uppercase\");\n        } catch (IllegalArgumentException iae) {}\n        try {\n            LocaleUtils.toLocale(\"uS_EN\");\n            fail(\"Should fail first part not lowercase\");\n        } catch (IllegalArgumentException iae) {}\n        try {\n            LocaleUtils.toLocale(\"us_E3\");\n            fail(\"Should fail second part not uppercase\");\n        } catch (IllegalArgumentException iae) {}\n    }        ",
        "begin_line": 197,
        "end_line": 226,
        "comment": "\n     * Test toLocale() method.\n     ",
        "child_ranges": [
            "(line 198,col 9)-(line 198,col 49)",
            "(line 200,col 9)-(line 200,col 49)",
            "(line 202,col 9)-(line 205,col 49)",
            "(line 206,col 9)-(line 209,col 49)",
            "(line 210,col 9)-(line 213,col 49)",
            "(line 214,col 9)-(line 217,col 49)",
            "(line 218,col 9)-(line 221,col 49)",
            "(line 222,col 9)-(line 225,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.testToLocale_3Part()",
        "snippet": "    public void testToLocale_3Part() {\n        assertValidToLocale(\"us_EN_A\", \"us\", \"EN\", \"A\");\n        // this isn't pretty, but was caused by a jdk bug it seems\n        // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4210525\n        if (SystemUtils.isJavaVersionAtLeast(1.4f)) {\n            assertValidToLocale(\"us_EN_a\", \"us\", \"EN\", \"a\");\n            assertValidToLocale(\"us_EN_SFsafdFDsdfF\", \"us\", \"EN\", \"SFsafdFDsdfF\");\n        } else {\n            assertValidToLocale(\"us_EN_a\", \"us\", \"EN\", \"A\");\n            assertValidToLocale(\"us_EN_SFsafdFDsdfF\", \"us\", \"EN\", \"SFSAFDFDSDFF\");\n        }\n        \n        try {\n            LocaleUtils.toLocale(\"us_EN-a\");\n            fail(\"Should fail as not underscore\");\n        } catch (IllegalArgumentException iae) {}\n        try {\n            LocaleUtils.toLocale(\"uu_UU_\");\n            fail(\"Must be 3, 5 or 7+ in length\");\n        } catch (IllegalArgumentException iae) {}\n    }",
        "begin_line": 231,
        "end_line": 251,
        "comment": "\n     * Test toLocale() method.\n     ",
        "child_ranges": [
            "(line 232,col 9)-(line 232,col 56)",
            "(line 235,col 9)-(line 241,col 9)",
            "(line 243,col 9)-(line 246,col 49)",
            "(line 247,col 9)-(line 250,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.assertLocaleLookupList(java.util.Locale, java.util.Locale, java.util.Locale[])",
        "snippet": "    private void assertLocaleLookupList(Locale locale, Locale defaultLocale, Locale[] expected) {\n        List localeList = defaultLocale == null ?\n                LocaleUtils.localeLookupList(locale) :\n                LocaleUtils.localeLookupList(locale, defaultLocale);\n        \n        assertEquals(expected.length, localeList.size());\n        assertEquals(Arrays.asList(expected), localeList);\n        assertUnmodifiableCollection(localeList);\n    }",
        "begin_line": 261,
        "end_line": 269,
        "comment": "\n     * Helper method for local lookups.\n     *\n     * @param locale  the input locale\n     * @param defaultLocale  the input default locale\n     * @param expected  expected results\n     ",
        "child_ranges": [
            "(line 262,col 9)-(line 264,col 68)",
            "(line 266,col 9)-(line 266,col 57)",
            "(line 267,col 9)-(line 267,col 58)",
            "(line 268,col 9)-(line 268,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.testLocaleLookupList_Locale()",
        "snippet": "    public void testLocaleLookupList_Locale() {\n        assertLocaleLookupList(null, null, new Locale[0]);\n        assertLocaleLookupList(LOCALE_QQ, null, new Locale[]{LOCALE_QQ});\n        assertLocaleLookupList(LOCALE_EN, null, new Locale[]{LOCALE_EN});\n        assertLocaleLookupList(LOCALE_EN, null, new Locale[]{LOCALE_EN});\n        assertLocaleLookupList(LOCALE_EN_US, null,\n            new Locale[] {\n                LOCALE_EN_US,\n                LOCALE_EN});\n        assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null,\n            new Locale[] {\n                LOCALE_EN_US_ZZZZ,\n                LOCALE_EN_US,\n                LOCALE_EN});\n    }        ",
        "begin_line": 275,
        "end_line": 289,
        "comment": "\n     * Test localeLookupList() method.\n     ",
        "child_ranges": [
            "(line 276,col 9)-(line 276,col 58)",
            "(line 277,col 9)-(line 277,col 73)",
            "(line 278,col 9)-(line 278,col 73)",
            "(line 279,col 9)-(line 279,col 73)",
            "(line 280,col 9)-(line 283,col 28)",
            "(line 284,col 9)-(line 288,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.testLocaleLookupList_LocaleLocale()",
        "snippet": "    public void testLocaleLookupList_LocaleLocale() {\n        assertLocaleLookupList(LOCALE_QQ, LOCALE_QQ, \n                new Locale[]{LOCALE_QQ});\n        assertLocaleLookupList(LOCALE_EN, LOCALE_EN, \n                new Locale[]{LOCALE_EN});\n        \n        assertLocaleLookupList(LOCALE_EN_US, LOCALE_EN_US, \n            new Locale[]{\n                LOCALE_EN_US,\n                LOCALE_EN});\n        assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ,\n            new Locale[] {\n                LOCALE_EN_US,\n                LOCALE_EN,\n                LOCALE_QQ});\n        assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ_ZZ,\n            new Locale[] {\n                LOCALE_EN_US,\n                LOCALE_EN,\n                LOCALE_QQ_ZZ});\n        \n        assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null,\n            new Locale[] {\n                LOCALE_EN_US_ZZZZ,\n                LOCALE_EN_US,\n                LOCALE_EN});\n        assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_EN_US_ZZZZ,\n            new Locale[] {\n                LOCALE_EN_US_ZZZZ,\n                LOCALE_EN_US,\n                LOCALE_EN});\n        assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ,\n            new Locale[] {\n                LOCALE_EN_US_ZZZZ,\n                LOCALE_EN_US,\n                LOCALE_EN,\n                LOCALE_QQ});\n        assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ_ZZ,\n            new Locale[] {\n                LOCALE_EN_US_ZZZZ,\n                LOCALE_EN_US,\n                LOCALE_EN,\n                LOCALE_QQ_ZZ});\n        assertLocaleLookupList(LOCALE_FR_CA, LOCALE_EN,\n            new Locale[] {\n                LOCALE_FR_CA,\n                LOCALE_FR,\n                LOCALE_EN});\n    }",
        "begin_line": 294,
        "end_line": 342,
        "comment": "\n     * Test localeLookupList() method.\n     ",
        "child_ranges": [
            "(line 295,col 9)-(line 296,col 41)",
            "(line 297,col 9)-(line 298,col 41)",
            "(line 300,col 9)-(line 303,col 28)",
            "(line 304,col 9)-(line 308,col 28)",
            "(line 309,col 9)-(line 313,col 31)",
            "(line 315,col 9)-(line 319,col 28)",
            "(line 320,col 9)-(line 324,col 28)",
            "(line 325,col 9)-(line 330,col 28)",
            "(line 331,col 9)-(line 336,col 31)",
            "(line 337,col 9)-(line 341,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.testAvailableLocaleList()",
        "snippet": "    public void testAvailableLocaleList() {\n        List list = LocaleUtils.availableLocaleList();\n        List list2 = LocaleUtils.availableLocaleList();\n        assertNotNull(list);\n        assertSame(list, list2);\n        assertUnmodifiableCollection(list);\n        \n        Locale[] jdkLocaleArray = Locale.getAvailableLocales();\n        List jdkLocaleList = Arrays.asList(jdkLocaleArray);\n        assertEquals(jdkLocaleList, list);\n    }",
        "begin_line": 348,
        "end_line": 358,
        "comment": "\n     * Test availableLocaleList() method.\n     ",
        "child_ranges": [
            "(line 349,col 9)-(line 349,col 54)",
            "(line 350,col 9)-(line 350,col 55)",
            "(line 351,col 9)-(line 351,col 28)",
            "(line 352,col 9)-(line 352,col 32)",
            "(line 353,col 9)-(line 353,col 43)",
            "(line 355,col 9)-(line 355,col 63)",
            "(line 356,col 9)-(line 356,col 59)",
            "(line 357,col 9)-(line 357,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.testAvailableLocaleSet()",
        "snippet": "    public void testAvailableLocaleSet() {\n        Set set = LocaleUtils.availableLocaleSet();\n        Set set2 = LocaleUtils.availableLocaleSet();\n        assertNotNull(set);\n        assertSame(set, set2);\n        assertUnmodifiableCollection(set);\n        \n        Locale[] jdkLocaleArray = Locale.getAvailableLocales();\n        List jdkLocaleList = Arrays.asList(jdkLocaleArray);\n        Set jdkLocaleSet = new HashSet(jdkLocaleList);\n        assertEquals(jdkLocaleSet, set);\n    }",
        "begin_line": 364,
        "end_line": 375,
        "comment": "\n     * Test availableLocaleSet() method.\n     ",
        "child_ranges": [
            "(line 365,col 9)-(line 365,col 51)",
            "(line 366,col 9)-(line 366,col 52)",
            "(line 367,col 9)-(line 367,col 27)",
            "(line 368,col 9)-(line 368,col 30)",
            "(line 369,col 9)-(line 369,col 42)",
            "(line 371,col 9)-(line 371,col 63)",
            "(line 372,col 9)-(line 372,col 59)",
            "(line 373,col 9)-(line 373,col 54)",
            "(line 374,col 9)-(line 374,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.testIsAvailableLocale()",
        "snippet": "    public void testIsAvailableLocale() {\n        Set set = LocaleUtils.availableLocaleSet();\n        assertEquals(set.contains(LOCALE_EN), LocaleUtils.isAvailableLocale(LOCALE_EN));\n        assertEquals(set.contains(LOCALE_EN_US), LocaleUtils.isAvailableLocale(LOCALE_EN_US));\n        assertEquals(set.contains(LOCALE_EN_US_ZZZZ), LocaleUtils.isAvailableLocale(LOCALE_EN_US_ZZZZ));\n        assertEquals(set.contains(LOCALE_FR), LocaleUtils.isAvailableLocale(LOCALE_FR));\n        assertEquals(set.contains(LOCALE_FR_CA), LocaleUtils.isAvailableLocale(LOCALE_FR_CA));\n        assertEquals(set.contains(LOCALE_QQ), LocaleUtils.isAvailableLocale(LOCALE_QQ));\n        assertEquals(set.contains(LOCALE_QQ_ZZ), LocaleUtils.isAvailableLocale(LOCALE_QQ_ZZ));\n    }",
        "begin_line": 381,
        "end_line": 390,
        "comment": "\n     * Test availableLocaleSet() method.\n     ",
        "child_ranges": [
            "(line 382,col 9)-(line 382,col 51)",
            "(line 383,col 9)-(line 383,col 88)",
            "(line 384,col 9)-(line 384,col 94)",
            "(line 385,col 9)-(line 385,col 104)",
            "(line 386,col 9)-(line 386,col 88)",
            "(line 387,col 9)-(line 387,col 94)",
            "(line 388,col 9)-(line 388,col 88)",
            "(line 389,col 9)-(line 389,col 94)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.assertLanguageByCountry(java.lang.String, java.lang.String[])",
        "snippet": "    private void assertLanguageByCountry(String country, String[] languages) {\n        List list = LocaleUtils.languagesByCountry(country);\n        List list2 = LocaleUtils.languagesByCountry(country);\n        assertNotNull(list);\n        assertSame(list, list2);\n        //search through langauges\n        for (int i = 0; i < languages.length; i++) {\n            Iterator iterator = list.iterator();\n            boolean found = false;\n            // see if it was returned by the set\n            while (iterator.hasNext()) {\n                Locale locale = (Locale) iterator.next();\n                // should have an en empty variant\n                assertTrue(locale.getVariant() == null\n                        || locale.getVariant().length() == 0);\n                assertEquals(country, locale.getCountry());\n                if (languages[i].equals(locale.getLanguage())) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                fail(\"Cound not find language: \" + languages[i]\n                        + \" for country: \" + country);\n            }\n        }\n        assertUnmodifiableCollection(list);\n    }",
        "begin_line": 402,
        "end_line": 429,
        "comment": "\n     * Make sure the language by country is correct. It checks that \n     * the LocaleUtils.languagesByCountry(country) call contains the \n     * array of languages passed in. It may contain more due to JVM \n     * variations.\n     *\n     * @param country\n     * @param languages array of languages that should be returned\n     ",
        "child_ranges": [
            "(line 403,col 9)-(line 403,col 60)",
            "(line 404,col 9)-(line 404,col 61)",
            "(line 405,col 9)-(line 405,col 28)",
            "(line 406,col 9)-(line 406,col 32)",
            "(line 408,col 9)-(line 427,col 9)",
            "(line 428,col 9)-(line 428,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.testLanguagesByCountry()",
        "snippet": "    public void testLanguagesByCountry() {\n        assertLanguageByCountry(null, new String[0]);\n        assertLanguageByCountry(\"GB\", new String[]{\"en\"});\n        assertLanguageByCountry(\"ZZ\", new String[0]);\n        assertLanguageByCountry(\"CH\", new String[]{\"fr\", \"de\", \"it\"});\n    }",
        "begin_line": 434,
        "end_line": 439,
        "comment": "\n     * Test languagesByCountry() method.\n     ",
        "child_ranges": [
            "(line 435,col 9)-(line 435,col 53)",
            "(line 436,col 9)-(line 436,col 58)",
            "(line 437,col 9)-(line 437,col 53)",
            "(line 438,col 9)-(line 438,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.assertCountriesByLanguage(java.lang.String, java.lang.String[])",
        "snippet": "    private void assertCountriesByLanguage(String language, String[] countries) {\n        List list = LocaleUtils.countriesByLanguage(language);\n        List list2 = LocaleUtils.countriesByLanguage(language);\n        assertNotNull(list);\n        assertSame(list, list2);\n        //search through langauges\n        for (int i = 0; i < countries.length; i++) {\n            Iterator iterator = list.iterator();\n            boolean found = false;\n            // see if it was returned by the set\n            while (iterator.hasNext()) {\n                Locale locale = (Locale) iterator.next();\n                // should have an en empty variant\n                assertTrue(locale.getVariant() == null\n                        || locale.getVariant().length() == 0);\n                assertEquals(language, locale.getLanguage());\n                if (countries[i].equals(locale.getCountry())) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                fail(\"Cound not find language: \" + countries[i]\n                        + \" for country: \" + language);\n            }\n        }\n        assertUnmodifiableCollection(list);\n    }",
        "begin_line": 452,
        "end_line": 479,
        "comment": "\n     * Make sure the country by language is correct. It checks that \n     * the LocaleUtils.countryByLanguage(language) call contains the \n     * array of countries passed in. It may contain more due to JVM \n     * variations.\n     *\n     *\n     * @param language\n     * @param countries array of countries that should be returned\n     ",
        "child_ranges": [
            "(line 453,col 9)-(line 453,col 62)",
            "(line 454,col 9)-(line 454,col 63)",
            "(line 455,col 9)-(line 455,col 28)",
            "(line 456,col 9)-(line 456,col 32)",
            "(line 458,col 9)-(line 477,col 9)",
            "(line 478,col 9)-(line 478,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.testCountriesByLanguage()",
        "snippet": "    public void testCountriesByLanguage() {\n        assertCountriesByLanguage(null, new String[0]);\n        assertCountriesByLanguage(\"de\", new String[]{\"DE\", \"CH\", \"AT\", \"LU\"});\n        assertCountriesByLanguage(\"zz\", new String[0]);\n        assertCountriesByLanguage(\"it\", new String[]{\"IT\", \"CH\"});\n    }",
        "begin_line": 484,
        "end_line": 489,
        "comment": "\n     * Test countriesByLanguage() method.\n     ",
        "child_ranges": [
            "(line 485,col 9)-(line 485,col 55)",
            "(line 486,col 9)-(line 486,col 78)",
            "(line 487,col 9)-(line 487,col 55)",
            "(line 488,col 9)-(line 488,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.assertUnmodifiableCollection(java.util.Collection)",
        "snippet": "    private static void assertUnmodifiableCollection(Collection coll) {\n        try {\n            coll.add(\"Unmodifiable\");\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n    }",
        "begin_line": 494,
        "end_line": 499,
        "comment": "\n     * @param coll  the collection to check\n     ",
        "child_ranges": [
            "(line 495,col 9)-(line 498,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.testLang328()",
        "snippet": "    public void testLang328() {\n        assertValidToLocale(\"fr__POSIX\", \"fr\", \"\", \"POSIX\");\n    }",
        "begin_line": 504,
        "end_line": 506,
        "comment": "\n     * Tests #LANG-328 - only language+variant\n     ",
        "child_ranges": [
            "(line 505,col 9)-(line 505,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BitFieldTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BitFieldTest.java",
        "signature": "org.apache.commons.lang.BitFieldTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 34,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BitFieldTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BitFieldTest.java",
        "signature": "org.apache.commons.lang.BitFieldTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(BitFieldTest.class);\n        suite.setName(\"BitField Tests\");\n        return suite;\n    }",
        "begin_line": 38,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 60)",
            "(line 40,col 9)-(line 40,col 40)",
            "(line 41,col 9)-(line 41,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BitFieldTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BitFieldTest.java",
        "signature": "org.apache.commons.lang.BitFieldTest.BitFieldTest(java.lang.String)",
        "snippet": "    public BitFieldTest(String name) {\n        super(name);\n    }",
        "begin_line": 53,
        "end_line": 55,
        "comment": "\n     * Constructor BitFieldTest\n     *\n     * @param name\n     ",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BitFieldTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BitFieldTest.java",
        "signature": "org.apache.commons.lang.BitFieldTest.testGetValue()",
        "snippet": "    public void testGetValue() {\n        assertEquals(bf_multi.getValue(-1), 127);\n        assertEquals(bf_multi.getValue(0), 0);\n        assertEquals(bf_single.getValue(-1), 1);\n        assertEquals(bf_single.getValue(0), 0);\n        assertEquals(bf_zero.getValue(-1), 0);\n        assertEquals(bf_zero.getValue(0), 0);\n    }",
        "begin_line": 60,
        "end_line": 67,
        "comment": "\n     * test the getValue() method\n     ",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 49)",
            "(line 62,col 9)-(line 62,col 46)",
            "(line 63,col 9)-(line 63,col 48)",
            "(line 64,col 9)-(line 64,col 47)",
            "(line 65,col 9)-(line 65,col 46)",
            "(line 66,col 9)-(line 66,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BitFieldTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BitFieldTest.java",
        "signature": "org.apache.commons.lang.BitFieldTest.testGetShortValue()",
        "snippet": "    public void testGetShortValue() {\n        assertEquals(bf_multi.getShortValue((short) - 1), (short) 127);\n        assertEquals(bf_multi.getShortValue((short) 0), (short) 0);\n        assertEquals(bf_single.getShortValue((short) - 1), (short) 1);\n        assertEquals(bf_single.getShortValue((short) 0), (short) 0);\n        assertEquals(bf_zero.getShortValue((short) -1), (short) 0);\n        assertEquals(bf_zero.getShortValue((short) 0), (short) 0);\n    }",
        "begin_line": 72,
        "end_line": 79,
        "comment": "\n     * test the getShortValue() method\n     ",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 71)",
            "(line 74,col 9)-(line 74,col 67)",
            "(line 75,col 9)-(line 75,col 70)",
            "(line 76,col 9)-(line 76,col 68)",
            "(line 77,col 9)-(line 77,col 67)",
            "(line 78,col 9)-(line 78,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BitFieldTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BitFieldTest.java",
        "signature": "org.apache.commons.lang.BitFieldTest.testGetRawValue()",
        "snippet": "    public void testGetRawValue() {\n        assertEquals(bf_multi.getRawValue(-1), 0x3F80);\n        assertEquals(bf_multi.getRawValue(0), 0);\n        assertEquals(bf_single.getRawValue(-1), 0x4000);\n        assertEquals(bf_single.getRawValue(0), 0);\n        assertEquals(bf_zero.getRawValue(-1), 0);\n        assertEquals(bf_zero.getRawValue(0), 0);\n    }",
        "begin_line": 84,
        "end_line": 91,
        "comment": "\n     * test the getRawValue() method\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 55)",
            "(line 86,col 9)-(line 86,col 49)",
            "(line 87,col 9)-(line 87,col 56)",
            "(line 88,col 9)-(line 88,col 50)",
            "(line 89,col 9)-(line 89,col 49)",
            "(line 90,col 9)-(line 90,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BitFieldTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BitFieldTest.java",
        "signature": "org.apache.commons.lang.BitFieldTest.testGetShortRawValue()",
        "snippet": "    public void testGetShortRawValue() {\n        assertEquals(bf_multi.getShortRawValue((short) - 1), (short) 0x3F80);\n        assertEquals(bf_multi.getShortRawValue((short) 0), (short) 0);\n        assertEquals(bf_single.getShortRawValue((short) - 1), (short) 0x4000);\n        assertEquals(bf_single.getShortRawValue((short) 0), (short) 0);\n        assertEquals(bf_zero.getShortRawValue((short) -1), (short) 0);\n        assertEquals(bf_zero.getShortRawValue((short) 0), (short) 0);\n    }",
        "begin_line": 96,
        "end_line": 103,
        "comment": "\n     * test the getShortRawValue() method\n     ",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 77)",
            "(line 98,col 9)-(line 98,col 70)",
            "(line 99,col 9)-(line 99,col 78)",
            "(line 100,col 9)-(line 100,col 71)",
            "(line 101,col 9)-(line 101,col 70)",
            "(line 102,col 9)-(line 102,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BitFieldTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BitFieldTest.java",
        "signature": "org.apache.commons.lang.BitFieldTest.testIsSet()",
        "snippet": "    public void testIsSet() {\n        assertTrue(!bf_multi.isSet(0));\n        assertTrue(!bf_zero.isSet(0));\n        for (int j = 0x80; j <= 0x3F80; j += 0x80) {\n            assertTrue(bf_multi.isSet(j));\n        }\n        for (int j = 0x80; j <= 0x3F80; j += 0x80) {\n            assertTrue(!bf_zero.isSet(j));\n        }\n        assertTrue(!bf_single.isSet(0));\n        assertTrue(bf_single.isSet(0x4000));\n    }",
        "begin_line": 108,
        "end_line": 119,
        "comment": "\n     * test the isSet() method\n     ",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 39)",
            "(line 110,col 9)-(line 110,col 38)",
            "(line 111,col 9)-(line 113,col 9)",
            "(line 114,col 9)-(line 116,col 9)",
            "(line 117,col 9)-(line 117,col 40)",
            "(line 118,col 9)-(line 118,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BitFieldTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BitFieldTest.java",
        "signature": "org.apache.commons.lang.BitFieldTest.testIsAllSet()",
        "snippet": "    public void testIsAllSet() {\n        for (int j = 0; j < 0x3F80; j += 0x80) {\n            assertTrue(!bf_multi.isAllSet(j));\n            assertTrue(bf_zero.isAllSet(j));\n        }\n        assertTrue(bf_multi.isAllSet(0x3F80));\n        assertTrue(!bf_single.isAllSet(0));\n        assertTrue(bf_single.isAllSet(0x4000));\n    }",
        "begin_line": 124,
        "end_line": 132,
        "comment": "\n     * test the isAllSet() method\n     ",
        "child_ranges": [
            "(line 125,col 9)-(line 128,col 9)",
            "(line 129,col 9)-(line 129,col 46)",
            "(line 130,col 9)-(line 130,col 43)",
            "(line 131,col 9)-(line 131,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BitFieldTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BitFieldTest.java",
        "signature": "org.apache.commons.lang.BitFieldTest.testSetValue()",
        "snippet": "    public void testSetValue() {\n        for (int j = 0; j < 128; j++) {\n            assertEquals(bf_multi.getValue(bf_multi.setValue(0, j)), j);\n            assertEquals(bf_multi.setValue(0, j), j << 7);\n        }\n        for (int j = 0; j < 128; j++) {\n          assertEquals(bf_zero.getValue(bf_zero.setValue(0, j)), 0);\n          assertEquals(bf_zero.setValue(0, j), 0);\n      }\n\n        // verify that excess bits are stripped off\n        assertEquals(bf_multi.setValue(0x3f80, 128), 0);\n        for (int j = 0; j < 2; j++) {\n            assertEquals(bf_single.getValue(bf_single.setValue(0, j)), j);\n            assertEquals(bf_single.setValue(0, j), j << 14);\n        }\n\n        // verify that excess bits are stripped off\n        assertEquals(bf_single.setValue(0x4000, 2), 0);\n    }",
        "begin_line": 137,
        "end_line": 156,
        "comment": "\n     * test the setValue() method\n     ",
        "child_ranges": [
            "(line 138,col 9)-(line 141,col 9)",
            "(line 142,col 9)-(line 145,col 7)",
            "(line 148,col 9)-(line 148,col 56)",
            "(line 149,col 9)-(line 152,col 9)",
            "(line 155,col 9)-(line 155,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BitFieldTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BitFieldTest.java",
        "signature": "org.apache.commons.lang.BitFieldTest.testSetShortValue()",
        "snippet": "    public void testSetShortValue() {\n        for (int j = 0; j < 128; j++) {\n            assertEquals(bf_multi.getShortValue(bf_multi.setShortValue((short) 0, (short) j)), (short) j);\n            assertEquals(bf_multi.setShortValue((short) 0, (short) j), (short) (j << 7));\n        }\n        for (int j = 0; j < 128; j++) {\n            assertEquals(bf_zero.getShortValue(bf_zero.setShortValue((short) 0, (short) j)), (short) 0);\n            assertEquals(bf_zero.setShortValue((short) 0, (short) j), (short) (0));\n        }\n\n        // verify that excess bits are stripped off\n        assertEquals(bf_multi.setShortValue((short) 0x3f80, (short) 128), (short) 0);\n        for (int j = 0; j < 2; j++) {\n            assertEquals(bf_single.getShortValue(bf_single.setShortValue((short) 0, (short) j)), (short) j);\n            assertEquals(bf_single.setShortValue((short) 0, (short) j), (short) (j << 14));\n        }\n\n        // verify that excess bits are stripped off\n        assertEquals(bf_single.setShortValue((short) 0x4000, (short) 2), (short) 0);\n    }",
        "begin_line": 161,
        "end_line": 180,
        "comment": "\n     * test the setShortValue() method\n     ",
        "child_ranges": [
            "(line 162,col 9)-(line 165,col 9)",
            "(line 166,col 9)-(line 169,col 9)",
            "(line 172,col 9)-(line 172,col 85)",
            "(line 173,col 9)-(line 176,col 9)",
            "(line 179,col 9)-(line 179,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BitFieldTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BitFieldTest.java",
        "signature": "org.apache.commons.lang.BitFieldTest.testByte()",
        "snippet": "    public void testByte() {\n        assertEquals(0, new BitField(0).setByteBoolean((byte) 0, true));\n        assertEquals(1, new BitField(1).setByteBoolean((byte) 0, true));\n        assertEquals(2, new BitField(2).setByteBoolean((byte) 0, true));\n        assertEquals(4, new BitField(4).setByteBoolean((byte) 0, true));\n        assertEquals(8, new BitField(8).setByteBoolean((byte) 0, true));\n        assertEquals(16, new BitField(16).setByteBoolean((byte) 0, true));\n        assertEquals(32, new BitField(32).setByteBoolean((byte) 0, true));\n        assertEquals(64, new BitField(64).setByteBoolean((byte) 0, true));\n        assertEquals(-128, new BitField(128).setByteBoolean((byte) 0, true));\n        assertEquals(1, new BitField(0).setByteBoolean((byte) 1, false));\n        assertEquals(0, new BitField(1).setByteBoolean((byte) 1, false));\n        assertEquals(0, new BitField(2).setByteBoolean((byte) 2, false));\n        assertEquals(0, new BitField(4).setByteBoolean((byte) 4, false));\n        assertEquals(0, new BitField(8).setByteBoolean((byte) 8, false));\n        assertEquals(0, new BitField(16).setByteBoolean((byte) 16, false));\n        assertEquals(0, new BitField(32).setByteBoolean((byte) 32, false));\n        assertEquals(0, new BitField(64).setByteBoolean((byte) 64, false));\n        assertEquals(0, new BitField(128).setByteBoolean((byte) 128, false));\n        assertEquals(-2, new BitField(1).setByteBoolean((byte) 255, false));\n        byte clearedBit = new BitField(0x40).setByteBoolean((byte) - 63, false);\n\n        assertEquals(false, new BitField(0x40).isSet(clearedBit));\n    }",
        "begin_line": 182,
        "end_line": 205,
        "comment": "",
        "child_ranges": [
            "(line 183,col 9)-(line 183,col 72)",
            "(line 184,col 9)-(line 184,col 72)",
            "(line 185,col 9)-(line 185,col 72)",
            "(line 186,col 9)-(line 186,col 72)",
            "(line 187,col 9)-(line 187,col 72)",
            "(line 188,col 9)-(line 188,col 74)",
            "(line 189,col 9)-(line 189,col 74)",
            "(line 190,col 9)-(line 190,col 74)",
            "(line 191,col 9)-(line 191,col 77)",
            "(line 192,col 9)-(line 192,col 73)",
            "(line 193,col 9)-(line 193,col 73)",
            "(line 194,col 9)-(line 194,col 73)",
            "(line 195,col 9)-(line 195,col 73)",
            "(line 196,col 9)-(line 196,col 73)",
            "(line 197,col 9)-(line 197,col 75)",
            "(line 198,col 9)-(line 198,col 75)",
            "(line 199,col 9)-(line 199,col 75)",
            "(line 200,col 9)-(line 200,col 77)",
            "(line 201,col 9)-(line 201,col 76)",
            "(line 202,col 9)-(line 202,col 80)",
            "(line 204,col 9)-(line 204,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BitFieldTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BitFieldTest.java",
        "signature": "org.apache.commons.lang.BitFieldTest.testClear()",
        "snippet": "    public void testClear() {\n        assertEquals(bf_multi.clear(-1), 0xFFFFC07F);\n        assertEquals(bf_single.clear(-1), 0xFFFFBFFF);\n        assertEquals(bf_zero.clear(-1), 0xFFFFFFFF);\n    }",
        "begin_line": 210,
        "end_line": 214,
        "comment": "\n     * test the clear() method\n     ",
        "child_ranges": [
            "(line 211,col 9)-(line 211,col 53)",
            "(line 212,col 9)-(line 212,col 54)",
            "(line 213,col 9)-(line 213,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BitFieldTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BitFieldTest.java",
        "signature": "org.apache.commons.lang.BitFieldTest.testClearShort()",
        "snippet": "    public void testClearShort() {\n        assertEquals(bf_multi.clearShort((short) - 1), (short) 0xC07F);\n        assertEquals(bf_single.clearShort((short) - 1), (short) 0xBFFF);\n        assertEquals(bf_zero.clearShort((short) -1), (short) 0xFFFF);\n    }",
        "begin_line": 219,
        "end_line": 223,
        "comment": "\n     * test the clearShort() method\n     ",
        "child_ranges": [
            "(line 220,col 9)-(line 220,col 71)",
            "(line 221,col 9)-(line 221,col 72)",
            "(line 222,col 9)-(line 222,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BitFieldTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BitFieldTest.java",
        "signature": "org.apache.commons.lang.BitFieldTest.testSet()",
        "snippet": "    public void testSet() {\n        assertEquals(bf_multi.set(0), 0x3F80);\n        assertEquals(bf_single.set(0), 0x4000);\n        assertEquals(bf_zero.set(0), 0);\n    }",
        "begin_line": 228,
        "end_line": 232,
        "comment": "\n     * test the set() method\n     ",
        "child_ranges": [
            "(line 229,col 9)-(line 229,col 46)",
            "(line 230,col 9)-(line 230,col 47)",
            "(line 231,col 9)-(line 231,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BitFieldTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BitFieldTest.java",
        "signature": "org.apache.commons.lang.BitFieldTest.testSetShort()",
        "snippet": "    public void testSetShort() {\n        assertEquals(bf_multi.setShort((short) 0), (short) 0x3F80);\n        assertEquals(bf_single.setShort((short) 0), (short) 0x4000);\n        assertEquals(bf_zero.setShort((short) 0), (short) 0);\n    }",
        "begin_line": 237,
        "end_line": 241,
        "comment": "\n     * test the setShort() method\n     ",
        "child_ranges": [
            "(line 238,col 9)-(line 238,col 67)",
            "(line 239,col 9)-(line 239,col 68)",
            "(line 240,col 9)-(line 240,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BitFieldTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BitFieldTest.java",
        "signature": "org.apache.commons.lang.BitFieldTest.testSetBoolean()",
        "snippet": "    public void testSetBoolean() {\n        assertEquals(bf_multi.set(0), bf_multi.setBoolean(0, true));\n        assertEquals(bf_single.set(0), bf_single.setBoolean(0, true));\n        assertEquals(bf_zero.set(0), bf_zero.setBoolean(0, true));\n        assertEquals(bf_multi.clear(-1), bf_multi.setBoolean(-1, false));\n        assertEquals(bf_single.clear(-1), bf_single.setBoolean(-1, false));\n        assertEquals(bf_zero.clear(-1), bf_zero.setBoolean(-1, false));\n    }",
        "begin_line": 246,
        "end_line": 253,
        "comment": "\n     * test the setBoolean() method\n     ",
        "child_ranges": [
            "(line 247,col 9)-(line 247,col 68)",
            "(line 248,col 9)-(line 248,col 70)",
            "(line 249,col 9)-(line 249,col 66)",
            "(line 250,col 9)-(line 250,col 73)",
            "(line 251,col 9)-(line 251,col 75)",
            "(line 252,col 9)-(line 252,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BitFieldTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BitFieldTest.java",
        "signature": "org.apache.commons.lang.BitFieldTest.testSetShortBoolean()",
        "snippet": "    public void testSetShortBoolean() {\n        assertEquals(bf_multi.setShort((short) 0), bf_multi.setShortBoolean((short) 0, true));\n        assertEquals(bf_single.setShort((short) 0), bf_single.setShortBoolean((short) 0, true));\n        assertEquals(bf_zero.setShort((short) 0), bf_zero.setShortBoolean((short) 0, true));\n        assertEquals(bf_multi.clearShort((short) - 1), bf_multi.setShortBoolean((short) - 1, false));\n        assertEquals(bf_single.clearShort((short) - 1), bf_single.setShortBoolean((short) - 1, false));\n        assertEquals(bf_zero.clearShort((short) -1), bf_zero.setShortBoolean((short) -1, false));\n    }",
        "begin_line": 258,
        "end_line": 265,
        "comment": "\n     * test the setShortBoolean() method\n     ",
        "child_ranges": [
            "(line 259,col 9)-(line 259,col 94)",
            "(line 260,col 9)-(line 260,col 96)",
            "(line 261,col 9)-(line 261,col 92)",
            "(line 262,col 9)-(line 262,col 101)",
            "(line 263,col 9)-(line 263,col 103)",
            "(line 264,col 9)-(line 264,col 97)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsStartsEndsWithTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsStartsEndsWithTest.java",
        "signature": "org.apache.commons.lang.StringUtilsStartsEndsWithTest.StringUtilsStartsEndsWithTest(java.lang.String)",
        "snippet": "    public StringUtilsStartsEndsWithTest(String name) {\n        super(name);\n    }",
        "begin_line": 37,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsStartsEndsWithTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsStartsEndsWithTest.java",
        "signature": "org.apache.commons.lang.StringUtilsStartsEndsWithTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsStartsEndsWithTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsStartsEndsWithTest.java",
        "signature": "org.apache.commons.lang.StringUtilsStartsEndsWithTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(StringUtilsStartsEndsWithTest.class);\n        suite.setName(\"StringUtilsStartsEndsWith Tests\");\n        return suite;\n    }",
        "begin_line": 45,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 77)",
            "(line 47,col 9)-(line 47,col 57)",
            "(line 48,col 9)-(line 48,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsStartsEndsWithTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsStartsEndsWithTest.java",
        "signature": "org.apache.commons.lang.StringUtilsStartsEndsWithTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        super.setUp();\n    }",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsStartsEndsWithTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsStartsEndsWithTest.java",
        "signature": "org.apache.commons.lang.StringUtilsStartsEndsWithTest.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        super.tearDown();\n    }",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsStartsEndsWithTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsStartsEndsWithTest.java",
        "signature": "org.apache.commons.lang.StringUtilsStartsEndsWithTest.testStartsWith()",
        "snippet": "    public void testStartsWith() {\n        assertTrue(\"startsWith(null, null)\", StringUtils.startsWith(null, (String)null));\n        assertFalse(\"startsWith(FOOBAR, null)\", StringUtils.startsWith(FOOBAR, (String)null));\n        assertFalse(\"startsWith(null, FOO)\",    StringUtils.startsWith(null, FOO));\n        assertTrue(\"startsWith(FOOBAR, \\\"\\\")\",  StringUtils.startsWith(FOOBAR, \"\"));\n\n        assertTrue(\"startsWith(foobar, foo)\",  StringUtils.startsWith(foobar, foo));\n        assertTrue(\"startsWith(FOOBAR, FOO)\",  StringUtils.startsWith(FOOBAR, FOO));\n        assertFalse(\"startsWith(foobar, FOO)\", StringUtils.startsWith(foobar, FOO));\n        assertFalse(\"startsWith(FOOBAR, foo)\", StringUtils.startsWith(FOOBAR, foo));\n\n        assertFalse(\"startsWith(foo, foobar)\", StringUtils.startsWith(foo, foobar));\n        assertFalse(\"startsWith(foo, foobar)\", StringUtils.startsWith(bar, foobar));\n\n        assertFalse(\"startsWith(foobar, bar)\", StringUtils.startsWith(foobar, bar));\n        assertFalse(\"startsWith(FOOBAR, BAR)\", StringUtils.startsWith(FOOBAR, BAR));\n        assertFalse(\"startsWith(foobar, BAR)\", StringUtils.startsWith(foobar, BAR));\n        assertFalse(\"startsWith(FOOBAR, bar)\", StringUtils.startsWith(FOOBAR, bar));\n    }",
        "begin_line": 64,
        "end_line": 82,
        "comment": "\n     * Test StringUtils.startsWith()\n     ",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 89)",
            "(line 66,col 9)-(line 66,col 94)",
            "(line 67,col 9)-(line 67,col 83)",
            "(line 68,col 9)-(line 68,col 84)",
            "(line 70,col 9)-(line 70,col 84)",
            "(line 71,col 9)-(line 71,col 84)",
            "(line 72,col 9)-(line 72,col 84)",
            "(line 73,col 9)-(line 73,col 84)",
            "(line 75,col 9)-(line 75,col 84)",
            "(line 76,col 9)-(line 76,col 84)",
            "(line 78,col 9)-(line 78,col 84)",
            "(line 79,col 9)-(line 79,col 84)",
            "(line 80,col 9)-(line 80,col 84)",
            "(line 81,col 9)-(line 81,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsStartsEndsWithTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsStartsEndsWithTest.java",
        "signature": "org.apache.commons.lang.StringUtilsStartsEndsWithTest.testStartsWithIgnoreCase()",
        "snippet": "    public void testStartsWithIgnoreCase() {\n        assertTrue(\"startsWithIgnoreCase(null, null)\",    StringUtils.startsWithIgnoreCase(null, (String)null));\n        assertFalse(\"startsWithIgnoreCase(FOOBAR, null)\", StringUtils.startsWithIgnoreCase(FOOBAR, (String)null));\n        assertFalse(\"startsWithIgnoreCase(null, FOO)\",    StringUtils.startsWithIgnoreCase(null, FOO));\n        assertTrue(\"startsWithIgnoreCase(FOOBAR, \\\"\\\")\",  StringUtils.startsWithIgnoreCase(FOOBAR, \"\"));\n\n        assertTrue(\"startsWithIgnoreCase(foobar, foo)\", StringUtils.startsWithIgnoreCase(foobar, foo));\n        assertTrue(\"startsWithIgnoreCase(FOOBAR, FOO)\", StringUtils.startsWithIgnoreCase(FOOBAR, FOO));\n        assertTrue(\"startsWithIgnoreCase(foobar, FOO)\", StringUtils.startsWithIgnoreCase(foobar, FOO));\n        assertTrue(\"startsWithIgnoreCase(FOOBAR, foo)\", StringUtils.startsWithIgnoreCase(FOOBAR, foo));\n\n        assertFalse(\"startsWithIgnoreCase(foo, foobar)\", StringUtils.startsWithIgnoreCase(foo, foobar));\n        assertFalse(\"startsWithIgnoreCase(foo, foobar)\", StringUtils.startsWithIgnoreCase(bar, foobar));\n\n        assertFalse(\"startsWithIgnoreCase(foobar, bar)\", StringUtils.startsWithIgnoreCase(foobar, bar));\n        assertFalse(\"startsWithIgnoreCase(FOOBAR, BAR)\", StringUtils.startsWithIgnoreCase(FOOBAR, BAR));\n        assertFalse(\"startsWithIgnoreCase(foobar, BAR)\", StringUtils.startsWithIgnoreCase(foobar, BAR));\n        assertFalse(\"startsWithIgnoreCase(FOOBAR, bar)\", StringUtils.startsWithIgnoreCase(FOOBAR, bar));\n    }",
        "begin_line": 87,
        "end_line": 105,
        "comment": "\n     * Test StringUtils.testStartsWithIgnoreCase()\n     ",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 112)",
            "(line 89,col 9)-(line 89,col 114)",
            "(line 90,col 9)-(line 90,col 103)",
            "(line 91,col 9)-(line 91,col 104)",
            "(line 93,col 9)-(line 93,col 103)",
            "(line 94,col 9)-(line 94,col 103)",
            "(line 95,col 9)-(line 95,col 103)",
            "(line 96,col 9)-(line 96,col 103)",
            "(line 98,col 9)-(line 98,col 104)",
            "(line 99,col 9)-(line 99,col 104)",
            "(line 101,col 9)-(line 101,col 104)",
            "(line 102,col 9)-(line 102,col 104)",
            "(line 103,col 9)-(line 103,col 104)",
            "(line 104,col 9)-(line 104,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsStartsEndsWithTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsStartsEndsWithTest.java",
        "signature": "org.apache.commons.lang.StringUtilsStartsEndsWithTest.testEndsWith()",
        "snippet": "    public void testEndsWith() {\n        assertTrue(\"endsWith(null, null)\",    StringUtils.endsWith(null, (String)null));\n        assertFalse(\"endsWith(FOOBAR, null)\", StringUtils.endsWith(FOOBAR, (String)null));\n        assertFalse(\"endsWith(null, FOO)\",    StringUtils.endsWith(null, FOO));\n        assertTrue(\"endsWith(FOOBAR, \\\"\\\")\",  StringUtils.endsWith(FOOBAR, \"\"));\n\n        assertFalse(\"endsWith(foobar, foo)\", StringUtils.endsWith(foobar, foo));\n        assertFalse(\"endsWith(FOOBAR, FOO)\", StringUtils.endsWith(FOOBAR, FOO));\n        assertFalse(\"endsWith(foobar, FOO)\", StringUtils.endsWith(foobar, FOO));\n        assertFalse(\"endsWith(FOOBAR, foo)\", StringUtils.endsWith(FOOBAR, foo));\n\n        assertFalse(\"endsWith(foo, foobar)\", StringUtils.endsWith(foo, foobar));\n        assertFalse(\"endsWith(foo, foobar)\", StringUtils.endsWith(bar, foobar));\n\n        assertTrue(\"endsWith(foobar, bar)\",  StringUtils.endsWith(foobar, bar));\n        assertTrue(\"endsWith(FOOBAR, BAR)\",  StringUtils.endsWith(FOOBAR, BAR));\n        assertFalse(\"endsWith(foobar, BAR)\", StringUtils.endsWith(foobar, BAR));\n        assertFalse(\"endsWith(FOOBAR, bar)\", StringUtils.endsWith(FOOBAR, bar));\n    }",
        "begin_line": 111,
        "end_line": 129,
        "comment": "\n     * Test StringUtils.endsWith()\n     ",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 88)",
            "(line 113,col 9)-(line 113,col 90)",
            "(line 114,col 9)-(line 114,col 79)",
            "(line 115,col 9)-(line 115,col 80)",
            "(line 117,col 9)-(line 117,col 80)",
            "(line 118,col 9)-(line 118,col 80)",
            "(line 119,col 9)-(line 119,col 80)",
            "(line 120,col 9)-(line 120,col 80)",
            "(line 122,col 9)-(line 122,col 80)",
            "(line 123,col 9)-(line 123,col 80)",
            "(line 125,col 9)-(line 125,col 80)",
            "(line 126,col 9)-(line 126,col 80)",
            "(line 127,col 9)-(line 127,col 80)",
            "(line 128,col 9)-(line 128,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringUtilsStartsEndsWithTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringUtilsStartsEndsWithTest.java",
        "signature": "org.apache.commons.lang.StringUtilsStartsEndsWithTest.testEndsWithIgnoreCase()",
        "snippet": "    public void testEndsWithIgnoreCase() {\n        assertTrue(\"endsWithIgnoreCase(null, null)\",    StringUtils.endsWithIgnoreCase(null, (String)null));\n        assertFalse(\"endsWithIgnoreCase(FOOBAR, null)\", StringUtils.endsWithIgnoreCase(FOOBAR, (String)null));\n        assertFalse(\"endsWithIgnoreCase(null, FOO)\",    StringUtils.endsWithIgnoreCase(null, FOO));\n        assertTrue(\"endsWithIgnoreCase(FOOBAR, \\\"\\\")\",  StringUtils.endsWithIgnoreCase(FOOBAR, \"\"));\n\n        assertFalse(\"endsWithIgnoreCase(foobar, foo)\", StringUtils.endsWithIgnoreCase(foobar, foo));\n        assertFalse(\"endsWithIgnoreCase(FOOBAR, FOO)\", StringUtils.endsWithIgnoreCase(FOOBAR, FOO));\n        assertFalse(\"endsWithIgnoreCase(foobar, FOO)\", StringUtils.endsWithIgnoreCase(foobar, FOO));\n        assertFalse(\"endsWithIgnoreCase(FOOBAR, foo)\", StringUtils.endsWithIgnoreCase(FOOBAR, foo));\n\n        assertFalse(\"endsWithIgnoreCase(foo, foobar)\", StringUtils.endsWithIgnoreCase(foo, foobar));\n        assertFalse(\"endsWithIgnoreCase(foo, foobar)\", StringUtils.endsWithIgnoreCase(bar, foobar));\n\n        assertTrue(\"endsWithIgnoreCase(foobar, bar)\", StringUtils.endsWithIgnoreCase(foobar, bar));\n        assertTrue(\"endsWithIgnoreCase(FOOBAR, BAR)\", StringUtils.endsWithIgnoreCase(FOOBAR, BAR));\n        assertTrue(\"endsWithIgnoreCase(foobar, BAR)\", StringUtils.endsWithIgnoreCase(foobar, BAR));\n        assertTrue(\"endsWithIgnoreCase(FOOBAR, bar)\", StringUtils.endsWithIgnoreCase(FOOBAR, bar));\n    }",
        "begin_line": 134,
        "end_line": 152,
        "comment": "\n     * Test StringUtils.endsWithIgnoreCase()\n     ",
        "child_ranges": [
            "(line 135,col 9)-(line 135,col 108)",
            "(line 136,col 9)-(line 136,col 110)",
            "(line 137,col 9)-(line 137,col 99)",
            "(line 138,col 9)-(line 138,col 100)",
            "(line 140,col 9)-(line 140,col 100)",
            "(line 141,col 9)-(line 141,col 100)",
            "(line 142,col 9)-(line 142,col 100)",
            "(line 143,col 9)-(line 143,col 100)",
            "(line 145,col 9)-(line 145,col 100)",
            "(line 146,col 9)-(line 146,col 100)",
            "(line 148,col 9)-(line 148,col 99)",
            "(line 149,col 9)-(line 149,col 99)",
            "(line 150,col 9)-(line 150,col 99)",
            "(line 151,col 9)-(line 151,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.RandomStringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/RandomStringUtilsTest.java",
        "signature": "org.apache.commons.lang.RandomStringUtilsTest.RandomStringUtilsTest(java.lang.String)",
        "snippet": "    public RandomStringUtilsTest(String name) {\n        super(name);\n    }",
        "begin_line": 39,
        "end_line": 41,
        "comment": "\n     * Construct a new instance of RandomStringUtilsTest with the specified name\n     ",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.RandomStringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/RandomStringUtilsTest.java",
        "signature": "org.apache.commons.lang.RandomStringUtilsTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(RandomStringUtilsTest.class);\n        suite.setName(\"RandomStringUtils Tests\");\n        return suite;\n    }",
        "begin_line": 43,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 69)",
            "(line 45,col 9)-(line 45,col 49)",
            "(line 46,col 9)-(line 46,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.RandomStringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/RandomStringUtilsTest.java",
        "signature": "org.apache.commons.lang.RandomStringUtilsTest.setUp()",
        "snippet": "    public void setUp() {\n    }",
        "begin_line": 52,
        "end_line": 53,
        "comment": "\n     * Set up instance variables required by this test case.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.RandomStringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/RandomStringUtilsTest.java",
        "signature": "org.apache.commons.lang.RandomStringUtilsTest.tearDown()",
        "snippet": "    public void tearDown() {\n    }",
        "begin_line": 58,
        "end_line": 59,
        "comment": "\n     * Tear down instance variables required by this test case.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.RandomStringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/RandomStringUtilsTest.java",
        "signature": "org.apache.commons.lang.RandomStringUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new RandomStringUtils());\n        Constructor[] cons = RandomStringUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(RandomStringUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(RandomStringUtils.class.getModifiers()));\n    }",
        "begin_line": 62,
        "end_line": 69,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 47)",
            "(line 64,col 9)-(line 64,col 79)",
            "(line 65,col 9)-(line 65,col 37)",
            "(line 66,col 9)-(line 66,col 70)",
            "(line 67,col 9)-(line 67,col 86)",
            "(line 68,col 9)-(line 68,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.RandomStringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/RandomStringUtilsTest.java",
        "signature": "org.apache.commons.lang.RandomStringUtilsTest.testRandomStringUtils()",
        "snippet": "    public void testRandomStringUtils() {\n        String r1 = RandomStringUtils.random(50);\n        assertEquals(\"random(50) length\", 50, r1.length());\n        String r2 = RandomStringUtils.random(50);\n        assertEquals(\"random(50) length\", 50, r2.length());\n        assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n        \n        r1 = RandomStringUtils.randomAscii(50);\n        assertEquals(\"randomAscii(50) length\", 50, r1.length());\n        for(int i = 0; i < r1.length(); i++) {\n            assertTrue(\"char between 32 and 127\", r1.charAt(i) >= 32 && r1.charAt(i) <= 127);\n        }        \n        r2 = RandomStringUtils.randomAscii(50);\n        assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n\n        r1 = RandomStringUtils.randomAlphabetic(50);\n        assertEquals(\"randomAlphabetic(50)\", 50, r1.length());\n        for(int i = 0; i < r1.length(); i++) {\n            assertEquals(\"r1 contains alphabetic\", true, Character.isLetter(r1.charAt(i)) && !Character.isDigit(r1.charAt(i)));\n        }\n        r2 = RandomStringUtils.randomAlphabetic(50);\n        assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n        \n        r1 = RandomStringUtils.randomAlphanumeric(50);\n        assertEquals(\"randomAlphanumeric(50)\", 50, r1.length());\n        for(int i = 0; i < r1.length(); i++) {\n            assertEquals(\"r1 contains alphanumeric\", true, Character.isLetterOrDigit(r1.charAt(i)));\n        }\n        r2 = RandomStringUtils.randomAlphabetic(50);\n        assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n        \n        r1 = RandomStringUtils.randomNumeric(50);\n        assertEquals(\"randomNumeric(50)\", 50, r1.length());\n        for(int i = 0; i < r1.length(); i++) {\n            assertEquals(\"r1 contains numeric\", true, Character.isDigit(r1.charAt(i)) && !Character.isLetter(r1.charAt(i)));\n        }\n        r2 = RandomStringUtils.randomNumeric(50);\n        assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n        \n        String set = \"abcdefg\";\n        r1 = RandomStringUtils.random(50, set);\n        assertEquals(\"random(50, \\\"abcdefg\\\")\", 50, r1.length());\n        for(int i = 0; i < r1.length(); i++) {\n            assertTrue(\"random char in set\", set.indexOf(r1.charAt(i)) > -1);\n        }\n        r2 = RandomStringUtils.random(50, set);\n        assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n        \n        r1 = RandomStringUtils.random(50, (String) null);\n        assertEquals(\"random(50) length\", 50, r1.length());\n        r2 = RandomStringUtils.random(50, (String) null);\n        assertEquals(\"random(50) length\", 50, r2.length());\n        assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n        \n        set = \"stuvwxyz\";\n        r1 = RandomStringUtils.random(50, set.toCharArray());\n        assertEquals(\"random(50, \\\"stuvwxyz\\\")\", 50, r1.length());\n        for(int i = 0; i < r1.length(); i++) {\n            assertTrue(\"random char in set\", set.indexOf(r1.charAt(i)) > -1);\n        }\n        r2 = RandomStringUtils.random(50, set);\n        assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n        \n        r1 = RandomStringUtils.random(50, (char[]) null);\n        assertEquals(\"random(50) length\", 50, r1.length());\n        r2 = RandomStringUtils.random(50, (char[]) null);\n        assertEquals(\"random(50) length\", 50, r2.length());\n        assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n\n        long seed = System.currentTimeMillis();\n        r1 = RandomStringUtils.random(50,0,0,true,true,null,new Random(seed));\n        r2 = RandomStringUtils.random(50,0,0,true,true,null,new Random(seed));\n        assertEquals(\"r1.equals(r2)\", r1, r2);\n\n        r1 = RandomStringUtils.random(0);\n        assertEquals(\"random(0).equals(\\\"\\\")\", \"\", r1);\n\n    }",
        "begin_line": 75,
        "end_line": 152,
        "comment": "\n     * Test the implementation\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 49)",
            "(line 77,col 9)-(line 77,col 59)",
            "(line 78,col 9)-(line 78,col 49)",
            "(line 79,col 9)-(line 79,col 59)",
            "(line 80,col 9)-(line 80,col 53)",
            "(line 82,col 9)-(line 82,col 47)",
            "(line 83,col 9)-(line 83,col 64)",
            "(line 84,col 9)-(line 86,col 9)",
            "(line 87,col 9)-(line 87,col 47)",
            "(line 88,col 9)-(line 88,col 53)",
            "(line 90,col 9)-(line 90,col 52)",
            "(line 91,col 9)-(line 91,col 62)",
            "(line 92,col 9)-(line 94,col 9)",
            "(line 95,col 9)-(line 95,col 52)",
            "(line 96,col 9)-(line 96,col 53)",
            "(line 98,col 9)-(line 98,col 54)",
            "(line 99,col 9)-(line 99,col 64)",
            "(line 100,col 9)-(line 102,col 9)",
            "(line 103,col 9)-(line 103,col 52)",
            "(line 104,col 9)-(line 104,col 53)",
            "(line 106,col 9)-(line 106,col 49)",
            "(line 107,col 9)-(line 107,col 59)",
            "(line 108,col 9)-(line 110,col 9)",
            "(line 111,col 9)-(line 111,col 49)",
            "(line 112,col 9)-(line 112,col 53)",
            "(line 114,col 9)-(line 114,col 31)",
            "(line 115,col 9)-(line 115,col 47)",
            "(line 116,col 9)-(line 116,col 65)",
            "(line 117,col 9)-(line 119,col 9)",
            "(line 120,col 9)-(line 120,col 47)",
            "(line 121,col 9)-(line 121,col 53)",
            "(line 123,col 9)-(line 123,col 57)",
            "(line 124,col 9)-(line 124,col 59)",
            "(line 125,col 9)-(line 125,col 57)",
            "(line 126,col 9)-(line 126,col 59)",
            "(line 127,col 9)-(line 127,col 53)",
            "(line 129,col 9)-(line 129,col 25)",
            "(line 130,col 9)-(line 130,col 61)",
            "(line 131,col 9)-(line 131,col 66)",
            "(line 132,col 9)-(line 134,col 9)",
            "(line 135,col 9)-(line 135,col 47)",
            "(line 136,col 9)-(line 136,col 53)",
            "(line 138,col 9)-(line 138,col 57)",
            "(line 139,col 9)-(line 139,col 59)",
            "(line 140,col 9)-(line 140,col 57)",
            "(line 141,col 9)-(line 141,col 59)",
            "(line 142,col 9)-(line 142,col 53)",
            "(line 144,col 9)-(line 144,col 47)",
            "(line 145,col 9)-(line 145,col 78)",
            "(line 146,col 9)-(line 146,col 78)",
            "(line 147,col 9)-(line 147,col 46)",
            "(line 149,col 9)-(line 149,col 41)",
            "(line 150,col 9)-(line 150,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.RandomStringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/RandomStringUtilsTest.java",
        "signature": "org.apache.commons.lang.RandomStringUtilsTest.testExceptions()",
        "snippet": "    public void testExceptions() {\n        try {\n            RandomStringUtils.random(-1);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            RandomStringUtils.random(-1, true, true);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            RandomStringUtils.random(-1, new char[0]);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            RandomStringUtils.random(-1, \"\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            RandomStringUtils.random(-1, 'a', 'z', false, false);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            RandomStringUtils.random(-1, 'a', 'z', false, false, new char[0]);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            RandomStringUtils.random(-1, 'a', 'z', false, false, new char[0], new Random());\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 153,
        "end_line": 182,
        "comment": "",
        "child_ranges": [
            "(line 154,col 9)-(line 157,col 48)",
            "(line 158,col 9)-(line 161,col 48)",
            "(line 162,col 9)-(line 165,col 48)",
            "(line 166,col 9)-(line 169,col 48)",
            "(line 170,col 9)-(line 173,col 48)",
            "(line 174,col 9)-(line 177,col 48)",
            "(line 178,col 9)-(line 181,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.RandomStringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/RandomStringUtilsTest.java",
        "signature": "org.apache.commons.lang.RandomStringUtilsTest.testRandomAlphaNumeric()",
        "snippet": "    public void testRandomAlphaNumeric() {}",
        "begin_line": 188,
        "end_line": 188,
        "comment": "\n     * Make sure boundary alphanumeric characters are generated by randomAlphaNumeric\n     * This test will fail randomly with probability = 6 * (61/62)**1000 ~ 5.2E-7\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.RandomStringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/RandomStringUtilsTest.java",
        "signature": "org.apache.commons.lang.RandomStringUtilsTest.testRandomNumeric()",
        "snippet": "    public void testRandomNumeric() {}",
        "begin_line": 213,
        "end_line": 213,
        "comment": "\n     * Make sure '0' and '9' are generated by randomNumeric\n     * This test will fail randomly with probability = 2 * (9/10)**1000 ~ 3.5E-46\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.RandomStringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/RandomStringUtilsTest.java",
        "signature": "org.apache.commons.lang.RandomStringUtilsTest.testRandomAlphabetic()",
        "snippet": "    public void testRandomAlphabetic() {}",
        "begin_line": 238,
        "end_line": 238,
        "comment": "\n     * Make sure boundary alpha characters are generated by randomAlphabetic\n     * This test will fail randomly with probability = 4 * (51/52)**1000 ~ 1.58E-8\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.RandomStringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/RandomStringUtilsTest.java",
        "signature": "org.apache.commons.lang.RandomStringUtilsTest.testRandomAscii()",
        "snippet": "    public void testRandomAscii() {}",
        "begin_line": 263,
        "end_line": 263,
        "comment": "\n     * Make sure 32 and 127 are generated by randomNumeric\n     * This test will fail randomly with probability = 2*(95/96)**1000 ~ 5.7E-5\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.RandomStringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/RandomStringUtilsTest.java",
        "signature": "org.apache.commons.lang.RandomStringUtilsTest.testRandomStringUtilsHomog()",
        "snippet": "    public void testRandomStringUtilsHomog() {}",
        "begin_line": 291,
        "end_line": 291,
        "comment": " \n     * Test homogeneity of random strings generated --\n     * i.e., test that characters show up with expected frequencies\n     * in generated strings.  Will fail randomly about 1 in 1000 times.\n     * Repeated failures indicate a problem.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.RandomStringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/RandomStringUtilsTest.java",
        "signature": "org.apache.commons.lang.RandomStringUtilsTest.chiSquare(int[], int[])",
        "snippet": "    private double chiSquare(int[] expected, int[] observed) {\n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n            dev = (double) (observed[i] - expected[i]);\n            sumSq += dev * dev / (double) expected[i];\n        }\n        return sumSq;\n    }           ",
        "begin_line": 320,
        "end_line": 328,
        "comment": "\n     * Computes Chi-Square statistic given observed and expected counts\n     * @param observed array of observed frequency counts\n     * @param expected array of expected frequency counts\n     ",
        "child_ranges": [
            "(line 321,col 9)-(line 321,col 28)",
            "(line 322,col 9)-(line 322,col 26)",
            "(line 323,col 9)-(line 326,col 9)",
            "(line 327,col 9)-(line 327,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.RandomStringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/RandomStringUtilsTest.java",
        "signature": "org.apache.commons.lang.RandomStringUtilsTest.testLang100()",
        "snippet": "    public void testLang100() throws Exception {\n        int size = 5000;\n        String encoding = \"UTF-8\";\n        String orig = RandomStringUtils.random(size);\n        byte[] bytes = orig.getBytes(encoding);\n        String copy = new String(bytes, encoding);\n\n        // for a verbose compare:\n        for (int i=0; i < orig.length() && i < copy.length(); i++) {\n            char o = orig.charAt(i);\n            char c = copy.charAt(i);\n            assertEquals(\"differs at \" + i + \"(\" + Integer.toHexString((new Character(o)).hashCode()) + \",\" +\n            Integer.toHexString((new Character(c)).hashCode()) + \")\", o, c);\n        }\n        // compare length also\n        assertEquals(orig.length(), copy.length());\n        // just to be complete\n        assertEquals(orig, copy);\n    }",
        "begin_line": 337,
        "end_line": 355,
        "comment": "\n     * Checks if the string got by {@link RandomStringUtils#random(int)}\n     * can be converted to UTF-8 and back without loss.\n     *\n     * @author stefanhoehne@fastmail.fm\n     * @throws Exception\n     ",
        "child_ranges": [
            "(line 338,col 9)-(line 338,col 24)",
            "(line 339,col 9)-(line 339,col 34)",
            "(line 340,col 9)-(line 340,col 53)",
            "(line 341,col 9)-(line 341,col 47)",
            "(line 342,col 9)-(line 342,col 50)",
            "(line 345,col 9)-(line 350,col 9)",
            "(line 352,col 9)-(line 352,col 51)",
            "(line 354,col 9)-(line 354,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.RandomStringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/RandomStringUtilsTest.java",
        "signature": "org.apache.commons.lang.RandomStringUtilsTest.main(java.lang.String[])",
        "snippet": "    public static void main(String args[]) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 357,
        "end_line": 359,
        "comment": "",
        "child_ranges": [
            "(line 358,col 9)-(line 358,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesTest.java",
        "signature": "org.apache.commons.lang.EntitiesTest.EntitiesTest(java.lang.String)",
        "snippet": "    public EntitiesTest(String name) {\n        super(name);\n    }",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesTest.java",
        "signature": "org.apache.commons.lang.EntitiesTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 39,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesTest.java",
        "signature": "org.apache.commons.lang.EntitiesTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(EntitiesTest.class);\n        suite.setName(\"EntitiesTest Tests\");\n        return suite;\n    }",
        "begin_line": 43,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 60)",
            "(line 45,col 9)-(line 45,col 44)",
            "(line 46,col 9)-(line 46,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesTest.java",
        "signature": "org.apache.commons.lang.EntitiesTest.setUp()",
        "snippet": "    public void setUp()\n    {\n        entities = new Entities();\n        entities.addEntity(\"foo\", 161);\n        entities.addEntity(\"bar\", 162);\n    }",
        "begin_line": 51,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 34)",
            "(line 54,col 9)-(line 54,col 39)",
            "(line 55,col 9)-(line 55,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesTest.java",
        "signature": "org.apache.commons.lang.EntitiesTest.testEscapeNamedEntity()",
        "snippet": "    public void testEscapeNamedEntity() throws Exception\n    {\n        doTestEscapeNamedEntity(\"&foo;\", \"\\u00A1\");\n        doTestEscapeNamedEntity(\"x&foo;\", \"x\\u00A1\");\n        doTestEscapeNamedEntity(\"&foo;x\", \"\\u00A1x\");\n        doTestEscapeNamedEntity(\"x&foo;x\", \"x\\u00A1x\");\n        doTestEscapeNamedEntity(\"&foo;&bar;\", \"\\u00A1\\u00A2\");\n    }",
        "begin_line": 58,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 51)",
            "(line 61,col 9)-(line 61,col 53)",
            "(line 62,col 9)-(line 62,col 53)",
            "(line 63,col 9)-(line 63,col 55)",
            "(line 64,col 9)-(line 64,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesTest.java",
        "signature": "org.apache.commons.lang.EntitiesTest.doTestEscapeNamedEntity(java.lang.String, java.lang.String)",
        "snippet": "    private void doTestEscapeNamedEntity(final String expected, final String entity) throws Exception\n    {\n        assertEquals(expected, entities.escape(entity));\n        StringWriter writer = new StringWriter();\n        entities.escape(writer, entity);\n        assertEquals(expected, writer.toString());\n    }",
        "begin_line": 67,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 56)",
            "(line 70,col 9)-(line 70,col 49)",
            "(line 71,col 9)-(line 71,col 40)",
            "(line 72,col 9)-(line 72,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesTest.java",
        "signature": "org.apache.commons.lang.EntitiesTest.testUnescapeNamedEntity()",
        "snippet": "    public void testUnescapeNamedEntity() throws Exception\n    {\n        assertEquals(\"\\u00A1\", entities.unescape(\"&foo;\"));\n        assertEquals(\"x\\u00A1\", entities.unescape(\"x&foo;\"));\n        assertEquals(\"\\u00A1x\", entities.unescape(\"&foo;x\"));\n        assertEquals(\"x\\u00A1x\", entities.unescape(\"x&foo;x\"));\n        assertEquals(\"\\u00A1\\u00A2\", entities.unescape(\"&foo;&bar;\"));\n    }",
        "begin_line": 75,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 59)",
            "(line 78,col 9)-(line 78,col 61)",
            "(line 79,col 9)-(line 79,col 61)",
            "(line 80,col 9)-(line 80,col 63)",
            "(line 81,col 9)-(line 81,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesTest.java",
        "signature": "org.apache.commons.lang.EntitiesTest.testUnescapeUnknownEntity()",
        "snippet": "    public void testUnescapeUnknownEntity() throws Exception\n    {\n        doTestUnescapeEntity(\"&zzzz;\", \"&zzzz;\");\n    }",
        "begin_line": 84,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesTest.java",
        "signature": "org.apache.commons.lang.EntitiesTest.testUnescapeMiscellaneous()",
        "snippet": "    public void testUnescapeMiscellaneous() throws Exception\n    {\n      doTestUnescapeEntity(\"&hello\", \"&hello\");\n      doTestUnescapeEntity(\"&;\", \"&;\");\n      doTestUnescapeEntity(\"&#;\", \"&#;\");\n      doTestUnescapeEntity(\"&#invalid;\", \"&#invalid;\");\n      doTestUnescapeEntity(\"A\", \"&#X41;\");\n    }",
        "begin_line": 89,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 91,col 7)-(line 91,col 47)",
            "(line 92,col 7)-(line 92,col 39)",
            "(line 93,col 7)-(line 93,col 41)",
            "(line 94,col 7)-(line 94,col 55)",
            "(line 95,col 7)-(line 95,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesTest.java",
        "signature": "org.apache.commons.lang.EntitiesTest.doTestUnescapeEntity(java.lang.String, java.lang.String)",
        "snippet": "    private void doTestUnescapeEntity(final String expected, final String entity) throws Exception\n    {\n        assertEquals(expected, entities.unescape(entity));\n        StringWriter writer = new StringWriter();\n        entities.unescape(writer, entity);\n        assertEquals(expected, writer.toString());\n    }",
        "begin_line": 98,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 100,col 9)-(line 100,col 58)",
            "(line 101,col 9)-(line 101,col 49)",
            "(line 102,col 9)-(line 102,col 42)",
            "(line 103,col 9)-(line 103,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesTest.java",
        "signature": "org.apache.commons.lang.EntitiesTest.testAddEntitiesArray()",
        "snippet": "    public void testAddEntitiesArray() throws Exception\n    {\n        String[][] array = {{\"foo\", \"100\"}, {\"bar\", \"101\"}};\n        Entities e = new Entities();\n        e.addEntities(array);\n        assertEquals(\"foo\", e.entityName(100));\n        assertEquals(\"bar\", e.entityName(101));\n        assertEquals(100, e.entityValue(\"foo\"));\n        assertEquals(101, e.entityValue(\"bar\"));\n    }",
        "begin_line": 106,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 60)",
            "(line 109,col 9)-(line 109,col 36)",
            "(line 110,col 9)-(line 110,col 29)",
            "(line 111,col 9)-(line 111,col 47)",
            "(line 112,col 9)-(line 112,col 47)",
            "(line 113,col 9)-(line 113,col 48)",
            "(line 114,col 9)-(line 114,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesTest.java",
        "signature": "org.apache.commons.lang.EntitiesTest.testEntitiesXmlObject()",
        "snippet": "    public void testEntitiesXmlObject() throws Exception\n    {\n        assertEquals(\"gt\", Entities.XML.entityName('>'));\n        assertEquals('>', Entities.XML.entityValue(\"gt\"));\n        assertEquals(-1, Entities.XML.entityValue(\"xyzzy\"));\n    }",
        "begin_line": 117,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 57)",
            "(line 120,col 9)-(line 120,col 58)",
            "(line 121,col 9)-(line 121,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesTest.java",
        "signature": "org.apache.commons.lang.EntitiesTest.testArrayIntMap()",
        "snippet": "    public void testArrayIntMap() throws Exception\n    {\n        Entities.ArrayEntityMap map = new Entities.ArrayEntityMap(2);\n        checkSomeEntityMap(map);\n        Entities.ArrayEntityMap map1 = new Entities.ArrayEntityMap();\n        checkSomeEntityMap(map1);\n        assertEquals(-1, map.value(\"null\"));\n        assertNull(map.name(-1));\n    }",
        "begin_line": 124,
        "end_line": 132,
        "comment": "",
        "child_ranges": [
            "(line 126,col 9)-(line 126,col 69)",
            "(line 127,col 9)-(line 127,col 32)",
            "(line 128,col 9)-(line 128,col 69)",
            "(line 129,col 9)-(line 129,col 33)",
            "(line 130,col 9)-(line 130,col 44)",
            "(line 131,col 9)-(line 131,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesTest.java",
        "signature": "org.apache.commons.lang.EntitiesTest.testTreeIntMap()",
        "snippet": "    public void testTreeIntMap() throws Exception\n    {\n        Entities.EntityMap map = new Entities.TreeEntityMap();\n        checkSomeEntityMap(map);\n    }",
        "begin_line": 134,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 136,col 9)-(line 136,col 62)",
            "(line 137,col 9)-(line 137,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesTest.java",
        "signature": "org.apache.commons.lang.EntitiesTest.testHashIntMap()",
        "snippet": "    public void testHashIntMap() throws Exception\n    {\n        Entities.EntityMap map = new Entities.HashEntityMap();\n        checkSomeEntityMap(map);\n        assertEquals(-1, map.value(\"noname\"));\n    }",
        "begin_line": 140,
        "end_line": 145,
        "comment": "",
        "child_ranges": [
            "(line 142,col 9)-(line 142,col 62)",
            "(line 143,col 9)-(line 143,col 32)",
            "(line 144,col 9)-(line 144,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesTest.java",
        "signature": "org.apache.commons.lang.EntitiesTest.testBinaryIntMap()",
        "snippet": "    public void testBinaryIntMap() throws Exception\n    {\n        Entities.BinaryEntityMap map = new Entities.BinaryEntityMap(2);\n        checkSomeEntityMap(map);\n        Entities.BinaryEntityMap map1 = new Entities.BinaryEntityMap();\n        checkSomeEntityMap(map1);\n        \n        // value cannot be added twice\n        map1.add(\"baz4a\", 4);\n        map1.add(\"baz4b\", 4);\n        assertEquals(-1, map1.value(\"baz4b\"));\n        assertEquals(\"baz4a\", map1.name(4));\n        assertNull(map1.name(99));\n        \n        Entities.BinaryEntityMap map2 = new Entities.BinaryEntityMap();\n        map2.add(\"val1\", 1);\n        map2.add(\"val2\", 2);\n        map2.add(\"val3\", 3);\n        map2.add(\"val4\", 4);\n        map2.add(\"val5\", 5);\n        assertEquals(\"val5\", map2.name(5));\n        assertEquals(\"val4\", map2.name(4));\n        assertEquals(\"val3\", map2.name(3));\n        assertEquals(\"val2\", map2.name(2));\n        assertEquals(\"val1\", map2.name(1));\n    }",
        "begin_line": 147,
        "end_line": 172,
        "comment": "",
        "child_ranges": [
            "(line 149,col 9)-(line 149,col 71)",
            "(line 150,col 9)-(line 150,col 32)",
            "(line 151,col 9)-(line 151,col 71)",
            "(line 152,col 9)-(line 152,col 33)",
            "(line 155,col 9)-(line 155,col 29)",
            "(line 156,col 9)-(line 156,col 29)",
            "(line 157,col 9)-(line 157,col 46)",
            "(line 158,col 9)-(line 158,col 44)",
            "(line 159,col 9)-(line 159,col 34)",
            "(line 161,col 9)-(line 161,col 71)",
            "(line 162,col 9)-(line 162,col 28)",
            "(line 163,col 9)-(line 163,col 28)",
            "(line 164,col 9)-(line 164,col 28)",
            "(line 165,col 9)-(line 165,col 28)",
            "(line 166,col 9)-(line 166,col 28)",
            "(line 167,col 9)-(line 167,col 43)",
            "(line 168,col 9)-(line 168,col 43)",
            "(line 169,col 9)-(line 169,col 43)",
            "(line 170,col 9)-(line 170,col 43)",
            "(line 171,col 9)-(line 171,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesTest.java",
        "signature": "org.apache.commons.lang.EntitiesTest.testPrimitiveIntMap()",
        "snippet": "    public void testPrimitiveIntMap() throws Exception\n    {\n        Entities.PrimitiveEntityMap map = new Entities.PrimitiveEntityMap();\n        checkSomeEntityMap(map);\n    }",
        "begin_line": 174,
        "end_line": 178,
        "comment": "",
        "child_ranges": [
            "(line 176,col 9)-(line 176,col 76)",
            "(line 177,col 9)-(line 177,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesTest.java",
        "signature": "org.apache.commons.lang.EntitiesTest.checkSomeEntityMap(org.apache.commons.lang.Entities.EntityMap)",
        "snippet": "    private void checkSomeEntityMap(Entities.EntityMap map) {\n        map.add(\"foo\", 1);\n        assertEquals(1, map.value(\"foo\"));\n        assertEquals(\"foo\", map.name(1));\n        map.add(\"bar\", 2);\n        map.add(\"baz\", 3);\n        assertEquals(3, map.value(\"baz\"));\n        assertEquals(\"baz\", map.name(3));\n    }",
        "begin_line": 180,
        "end_line": 188,
        "comment": "",
        "child_ranges": [
            "(line 181,col 9)-(line 181,col 26)",
            "(line 182,col 9)-(line 182,col 42)",
            "(line 183,col 9)-(line 183,col 41)",
            "(line 184,col 9)-(line 184,col 26)",
            "(line 185,col 9)-(line 185,col 26)",
            "(line 186,col 9)-(line 186,col 42)",
            "(line 187,col 9)-(line 187,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesTest.java",
        "signature": "org.apache.commons.lang.EntitiesTest.testHtml40Nbsp()",
        "snippet": "    public void testHtml40Nbsp() throws Exception\n    {\n        assertEquals(\"&nbsp;\", Entities.HTML40.escape(\"\\u00A0\"));\n        Entities e = new Entities();\n        e.map = new Entities.PrimitiveEntityMap();\n        Entities.fillWithHtml40Entities(e);\n        assertEquals(\"&nbsp;\", e.escape(\"\\u00A0\"));\n    }",
        "begin_line": 190,
        "end_line": 197,
        "comment": "",
        "child_ranges": [
            "(line 192,col 9)-(line 192,col 65)",
            "(line 193,col 9)-(line 193,col 36)",
            "(line 194,col 9)-(line 194,col 50)",
            "(line 195,col 9)-(line 195,col 43)",
            "(line 196,col 9)-(line 196,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/EntitiesTest.java",
        "signature": "org.apache.commons.lang.EntitiesTest.testNumberOverflow()",
        "snippet": "    public void testNumberOverflow() throws Exception {\n        doTestUnescapeEntity(\"&#12345678;\", \"&#12345678;\");\n        doTestUnescapeEntity(\"x&#12345678;y\", \"x&#12345678;y\");\n        doTestUnescapeEntity(\"&#x12345678;\", \"&#x12345678;\");\n        doTestUnescapeEntity(\"x&#x12345678;y\", \"x&#x12345678;y\");\n    }",
        "begin_line": 199,
        "end_line": 204,
        "comment": "",
        "child_ranges": [
            "(line 200,col 9)-(line 200,col 59)",
            "(line 201,col 9)-(line 201,col 63)",
            "(line 202,col 9)-(line 202,col 61)",
            "(line 203,col 9)-(line 203,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.StringEscapeUtilsTest(java.lang.String)",
        "snippet": "    public StringEscapeUtilsTest(String name) {\n        super(name);\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(StringEscapeUtilsTest.class);\n        suite.setName(\"StringEscapeUtilsTest Tests\");\n        return suite;\n    }",
        "begin_line": 46,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 69)",
            "(line 48,col 9)-(line 48,col 53)",
            "(line 49,col 9)-(line 49,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new StringEscapeUtils());\n        Constructor[] cons = StringEscapeUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(StringEscapeUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(StringEscapeUtils.class.getModifiers()));\n    }",
        "begin_line": 53,
        "end_line": 60,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 47)",
            "(line 55,col 9)-(line 55,col 79)",
            "(line 56,col 9)-(line 56,col 37)",
            "(line 57,col 9)-(line 57,col 70)",
            "(line 58,col 9)-(line 58,col 86)",
            "(line 59,col 9)-(line 59,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testEscapeJava()",
        "snippet": "    public void testEscapeJava() throws IOException {\n        assertEquals(null, StringEscapeUtils.escapeJava(null));\n        try {\n            StringEscapeUtils.escapeJava(null, null);\n            fail();\n        } catch (IOException ex) {\n            fail();\n        } catch (IllegalArgumentException ex) {\n        }\n        try {\n            StringEscapeUtils.escapeJava(null, \"\");\n            fail();\n        } catch (IOException ex) {\n            fail();\n        } catch (IllegalArgumentException ex) {\n        }\n        \n        assertEscapeJava(\"empty string\", \"\", \"\");\n        assertEscapeJava(FOO, FOO);\n        assertEscapeJava(\"tab\", \"\\\\t\", \"\\t\");\n        assertEscapeJava(\"backslash\", \"\\\\\\\\\", \"\\\\\");\n        assertEscapeJava(\"single quote should not be escaped\", \"'\", \"'\");\n        assertEscapeJava(\"\\\\\\\\\\\\b\\\\t\\\\r\", \"\\\\\\b\\t\\r\");\n        assertEscapeJava(\"\\\\u1234\", \"\\u1234\");\n        assertEscapeJava(\"\\\\u0234\", \"\\u0234\");\n        assertEscapeJava(\"\\\\u00EF\", \"\\u00ef\");\n        assertEscapeJava(\"\\\\u0001\", \"\\u0001\");\n        assertEscapeJava(\"Should use capitalized unicode hex\", \"\\\\uABCD\", \"\\uabcd\");\n\n        assertEscapeJava(\"He didn't say, \\\\\\\"stop!\\\\\\\"\",\n                \"He didn't say, \\\"stop!\\\"\");\n        assertEscapeJava(\"non-breaking space\", \"This space is non-breaking:\" + \"\\\\u00A0\",\n                \"This space is non-breaking:\\u00a0\");\n        assertEscapeJava(\"\\\\uABCD\\\\u1234\\\\u012C\",\n                \"\\uABCD\\u1234\\u012C\");\n    }",
        "begin_line": 63,
        "end_line": 98,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 63)",
            "(line 65,col 9)-(line 71,col 9)",
            "(line 72,col 9)-(line 78,col 9)",
            "(line 80,col 9)-(line 80,col 49)",
            "(line 81,col 9)-(line 81,col 35)",
            "(line 82,col 9)-(line 82,col 45)",
            "(line 83,col 9)-(line 83,col 52)",
            "(line 84,col 9)-(line 84,col 73)",
            "(line 85,col 9)-(line 85,col 54)",
            "(line 86,col 9)-(line 86,col 46)",
            "(line 87,col 9)-(line 87,col 46)",
            "(line 88,col 9)-(line 88,col 46)",
            "(line 89,col 9)-(line 89,col 46)",
            "(line 90,col 9)-(line 90,col 84)",
            "(line 92,col 9)-(line 93,col 44)",
            "(line 94,col 9)-(line 95,col 53)",
            "(line 96,col 9)-(line 97,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.assertEscapeJava(java.lang.String, java.lang.String)",
        "snippet": "    private void assertEscapeJava(String escaped, String original) throws IOException {\n        assertEscapeJava(null, escaped, original);\n    }",
        "begin_line": 100,
        "end_line": 102,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.assertEscapeJava(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    private void assertEscapeJava(String message, String expected, String original) throws IOException {\n        String converted = StringEscapeUtils.escapeJava(original);\n        message = \"escapeJava(String) failed\" + (message == null ? \"\" : (\": \" + message));\n        assertEquals(message, expected, converted);\n\n        StringWriter writer = new StringWriter();\n        StringEscapeUtils.escapeJava(writer, original);\n        assertEquals(expected, writer.toString());\n    }",
        "begin_line": 104,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 66)",
            "(line 106,col 9)-(line 106,col 90)",
            "(line 107,col 9)-(line 107,col 51)",
            "(line 109,col 9)-(line 109,col 49)",
            "(line 110,col 9)-(line 110,col 55)",
            "(line 111,col 9)-(line 111,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testUnescapeJava()",
        "snippet": "    public void testUnescapeJava() throws IOException {\n        assertEquals(null, StringEscapeUtils.unescapeJava(null));\n        try {\n            StringEscapeUtils.unescapeJava(null, null);\n            fail();\n        } catch (IOException ex) {\n            fail();\n        } catch (IllegalArgumentException ex) {\n        }\n        try {\n            StringEscapeUtils.unescapeJava(null, \"\");\n            fail();\n        } catch (IOException ex) {\n            fail();\n        } catch (IllegalArgumentException ex) {\n        }\n        try {\n            StringEscapeUtils.unescapeJava(\"\\\\u02-3\");\n            fail();\n        } catch (RuntimeException ex) {\n        }\n        \n        assertUnescapeJava(\"\", \"\");\n        assertUnescapeJava(\"test\", \"test\");\n        assertUnescapeJava(\"\\ntest\\b\", \"\\\\ntest\\\\b\");\n        assertUnescapeJava(\"\\u123425foo\\ntest\\b\", \"\\\\u123425foo\\\\ntest\\\\b\");\n        assertUnescapeJava(\"'\\foo\\teste\\r\", \"\\\\'\\\\foo\\\\teste\\\\r\");\n        assertUnescapeJava(\"\\\\\", \"\\\\\");\n        //foo\n        assertUnescapeJava(\"lowercase unicode\", \"\\uABCDx\", \"\\\\uabcdx\");\n        assertUnescapeJava(\"uppercase unicode\", \"\\uABCDx\", \"\\\\uABCDx\");\n        assertUnescapeJava(\"unicode as final character\", \"\\uABCD\", \"\\\\uabcd\");\n    }",
        "begin_line": 114,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 65)",
            "(line 116,col 9)-(line 122,col 9)",
            "(line 123,col 9)-(line 129,col 9)",
            "(line 130,col 9)-(line 134,col 9)",
            "(line 136,col 9)-(line 136,col 35)",
            "(line 137,col 9)-(line 137,col 43)",
            "(line 138,col 9)-(line 138,col 53)",
            "(line 139,col 9)-(line 139,col 76)",
            "(line 140,col 9)-(line 140,col 66)",
            "(line 141,col 9)-(line 141,col 39)",
            "(line 143,col 9)-(line 143,col 71)",
            "(line 144,col 9)-(line 144,col 71)",
            "(line 145,col 9)-(line 145,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.assertUnescapeJava(java.lang.String, java.lang.String)",
        "snippet": "    private void assertUnescapeJava(String unescaped, String original) throws IOException {\n        assertUnescapeJava(null, unescaped, original);\n    }",
        "begin_line": 148,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 149,col 9)-(line 149,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.assertUnescapeJava(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    private void assertUnescapeJava(String message, String unescaped, String original) throws IOException {\n        String expected = unescaped;\n        String actual = StringEscapeUtils.unescapeJava(original);\n\n        assertEquals(\"unescape(String) failed\" +\n                (message == null ? \"\" : (\": \" + message)) +\n                \": expected '\" + StringEscapeUtils.escapeJava(expected) +\n                // we escape this so we can see it in the error message\n                \"' actual '\" + StringEscapeUtils.escapeJava(actual) + \"'\",\n                expected, actual);\n\n        StringWriter writer = new StringWriter();\n        StringEscapeUtils.unescapeJava(writer, original);\n        assertEquals(unescaped, writer.toString());\n\n    }",
        "begin_line": 152,
        "end_line": 167,
        "comment": "",
        "child_ranges": [
            "(line 153,col 9)-(line 153,col 36)",
            "(line 154,col 9)-(line 154,col 65)",
            "(line 156,col 9)-(line 161,col 34)",
            "(line 163,col 9)-(line 163,col 49)",
            "(line 164,col 9)-(line 164,col 57)",
            "(line 165,col 9)-(line 165,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testEscapeJavaScript()",
        "snippet": "    public void testEscapeJavaScript() {\n        assertEquals(null, StringEscapeUtils.escapeJavaScript(null));\n        try {\n            StringEscapeUtils.escapeJavaScript(null, null);\n            fail();\n        } catch (IOException ex) {\n            fail();\n        } catch (IllegalArgumentException ex) {\n        }\n        try {\n            StringEscapeUtils.escapeJavaScript(null, \"\");\n            fail();\n        } catch (IOException ex) {\n            fail();\n        } catch (IllegalArgumentException ex) {\n        }\n        \n        assertEquals(\"He didn\\\\'t say, \\\\\\\"stop!\\\\\\\"\", StringEscapeUtils.escapeJavaScript(\"He didn't say, \\\"stop!\\\"\"));\n        assertEquals(\"document.getElementById(\\\\\\\"test\\\\\\\").value = \\\\'<script>alert(\\\\'aaa\\\\');<\\\\/script>\\\\';\", \n                StringEscapeUtils.escapeJavaScript(\"document.getElementById(\\\"test\\\").value = '<script>alert('aaa');</script>';\"));\n    }",
        "begin_line": 169,
        "end_line": 189,
        "comment": "",
        "child_ranges": [
            "(line 170,col 9)-(line 170,col 69)",
            "(line 171,col 9)-(line 177,col 9)",
            "(line 178,col 9)-(line 184,col 9)",
            "(line 186,col 9)-(line 186,col 119)",
            "(line 187,col 9)-(line 188,col 131)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testEscapeHtml()",
        "snippet": "    public void testEscapeHtml() {\n        for (int i = 0; i < htmlEscapes.length; ++i) {\n            String message = htmlEscapes[i][0];\n            String expected = htmlEscapes[i][1];\n            String original = htmlEscapes[i][2];\n            assertEquals(message, expected, StringEscapeUtils.escapeHtml(original));\n            StringWriter sw = new StringWriter();\n            try {\n            StringEscapeUtils.escapeHtml(sw, original);\n            } catch (IOException e) {\n            }\n            String actual = original == null ? null : sw.toString();\n            assertEquals(message, expected, actual);\n        }\n    }",
        "begin_line": 210,
        "end_line": 224,
        "comment": "",
        "child_ranges": [
            "(line 211,col 9)-(line 223,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testUnescapeHtml()",
        "snippet": "    public void testUnescapeHtml() {\n        for (int i = 0; i < htmlEscapes.length; ++i) {\n            String message = htmlEscapes[i][0];\n            String expected = htmlEscapes[i][2];\n            String original = htmlEscapes[i][1];\n            assertEquals(message, expected, StringEscapeUtils.unescapeHtml(original));\n            \n            StringWriter sw = new StringWriter();\n            try {\n            StringEscapeUtils.unescapeHtml(sw, original);\n            } catch (IOException e) {\n            }\n            String actual = original == null ? null : sw.toString();\n            assertEquals(message, expected, actual);\n        }\n        // \\u00E7 is a cedilla (c with wiggle under)\n        // note that the test string must be 7-bit-clean (unicode escaped) or else it will compile incorrectly\n        // on some locales        \n        assertEquals(\"funny chars pass through OK\", \"Fran\\u00E7ais\", StringEscapeUtils.unescapeHtml(\"Fran\\u00E7ais\"));\n        \n        assertEquals(\"Hello&;World\", StringEscapeUtils.unescapeHtml(\"Hello&;World\"));\n        assertEquals(\"Hello&#;World\", StringEscapeUtils.unescapeHtml(\"Hello&#;World\"));\n        assertEquals(\"Hello&# ;World\", StringEscapeUtils.unescapeHtml(\"Hello&# ;World\"));\n        assertEquals(\"Hello&##;World\", StringEscapeUtils.unescapeHtml(\"Hello&##;World\"));\n    }",
        "begin_line": 226,
        "end_line": 250,
        "comment": "",
        "child_ranges": [
            "(line 227,col 9)-(line 240,col 9)",
            "(line 244,col 9)-(line 244,col 118)",
            "(line 246,col 9)-(line 246,col 85)",
            "(line 247,col 9)-(line 247,col 87)",
            "(line 248,col 9)-(line 248,col 89)",
            "(line 249,col 9)-(line 249,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testUnescapeHexCharsHtml()",
        "snippet": "    public void testUnescapeHexCharsHtml() {\n        // Simple easy to grok test \n        assertEquals(\"hex number unescape\", \"\\u0080\\u009F\", StringEscapeUtils.unescapeHtml(\"&#x80;&#x9F;\"));\n        assertEquals(\"hex number unescape\", \"\\u0080\\u009F\", StringEscapeUtils.unescapeHtml(\"&#X80;&#X9F;\"));\n        // Test all Character values:\n        for (char i = Character.MIN_VALUE; i < Character.MAX_VALUE; i++) {\n            Character c1 = new Character(i);\n            Character c2 = new Character((char)(i+1));\n            String expected = c1.toString() + c2.toString();\n            String escapedC1 = \"&#x\" + Integer.toHexString((c1.charValue())) + \";\";\n            String escapedC2 = \"&#x\" + Integer.toHexString((c2.charValue())) + \";\";\n            assertEquals(\"hex number unescape index \" + (int)i, expected, StringEscapeUtils.unescapeHtml(escapedC1 + escapedC2));\n        }\n    }",
        "begin_line": 252,
        "end_line": 265,
        "comment": "",
        "child_ranges": [
            "(line 254,col 9)-(line 254,col 108)",
            "(line 255,col 9)-(line 255,col 108)",
            "(line 257,col 9)-(line 264,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testUnescapeUnknownEntity()",
        "snippet": "    public void testUnescapeUnknownEntity() throws Exception\n    {\n        assertEquals(\"&zzzz;\", StringEscapeUtils.unescapeHtml(\"&zzzz;\"));\n    }",
        "begin_line": 267,
        "end_line": 270,
        "comment": "",
        "child_ranges": [
            "(line 269,col 9)-(line 269,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testEscapeHtmlVersions()",
        "snippet": "    public void testEscapeHtmlVersions() throws Exception\n    {\n        assertEquals(\"&Beta;\", StringEscapeUtils.escapeHtml(\"\\u0392\"));\n        assertEquals(\"\\u0392\", StringEscapeUtils.unescapeHtml(\"&Beta;\"));\n\n        //todo: refine API for escaping/unescaping specific HTML versions\n\n    }",
        "begin_line": 272,
        "end_line": 279,
        "comment": "",
        "child_ranges": [
            "(line 274,col 9)-(line 274,col 71)",
            "(line 275,col 9)-(line 275,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testEscapeXml()",
        "snippet": "    public void testEscapeXml() throws Exception {\n        assertEquals(\"&lt;abc&gt;\", StringEscapeUtils.escapeXml(\"<abc>\"));\n        assertEquals(\"<abc>\", StringEscapeUtils.unescapeXml(\"&lt;abc&gt;\"));\n\n        assertEquals(\"XML should use numbers, not names for HTML entities\",\n                \"&#161;\", StringEscapeUtils.escapeXml(\"\\u00A1\"));\n        assertEquals(\"XML should use numbers, not names for HTML entities\",\n                \"\\u00A0\", StringEscapeUtils.unescapeXml(\"&#160;\"));\n\n        assertEquals(\"ain't\", StringEscapeUtils.unescapeXml(\"ain&apos;t\"));\n        assertEquals(\"ain&apos;t\", StringEscapeUtils.escapeXml(\"ain't\"));\n        assertEquals(\"\", StringEscapeUtils.escapeXml(\"\"));\n        assertEquals(null, StringEscapeUtils.escapeXml(null));\n        assertEquals(null, StringEscapeUtils.unescapeXml(null));\n\n        StringWriter sw = new StringWriter();\n        try {\n            StringEscapeUtils.escapeXml(sw, \"<abc>\");\n        } catch (IOException e) {\n        }\n        assertEquals(\"XML was escaped incorrectly\", \"&lt;abc&gt;\", sw.toString() );\n\n        sw = new StringWriter();\n        try {\n            StringEscapeUtils.unescapeXml(sw, \"&lt;abc&gt;\");\n        } catch (IOException e) {\n        }\n        assertEquals(\"XML was unescaped incorrectly\", \"<abc>\", sw.toString() );\n    }",
        "begin_line": 281,
        "end_line": 309,
        "comment": "",
        "child_ranges": [
            "(line 282,col 9)-(line 282,col 74)",
            "(line 283,col 9)-(line 283,col 76)",
            "(line 285,col 9)-(line 286,col 65)",
            "(line 287,col 9)-(line 288,col 67)",
            "(line 290,col 9)-(line 290,col 75)",
            "(line 291,col 9)-(line 291,col 73)",
            "(line 292,col 9)-(line 292,col 58)",
            "(line 293,col 9)-(line 293,col 62)",
            "(line 294,col 9)-(line 294,col 64)",
            "(line 296,col 9)-(line 296,col 45)",
            "(line 297,col 9)-(line 300,col 9)",
            "(line 301,col 9)-(line 301,col 83)",
            "(line 303,col 9)-(line 303,col 32)",
            "(line 304,col 9)-(line 307,col 9)",
            "(line 308,col 9)-(line 308,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testEscapeSql()",
        "snippet": "    public void testEscapeSql() throws Exception\n    {\n        assertEquals(\"don''t stop\", StringEscapeUtils.escapeSql(\"don't stop\"));\n        assertEquals(\"\", StringEscapeUtils.escapeSql(\"\"));\n        assertEquals(null, StringEscapeUtils.escapeSql(null));\n    }",
        "begin_line": 315,
        "end_line": 320,
        "comment": "",
        "child_ranges": [
            "(line 317,col 9)-(line 317,col 79)",
            "(line 318,col 9)-(line 318,col 58)",
            "(line 319,col 9)-(line 319,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testStandaloneAmphersand()",
        "snippet": "    public void testStandaloneAmphersand() {\n        assertEquals(\"<P&O>\", StringEscapeUtils.unescapeHtml(\"&lt;P&O&gt;\"));\n        assertEquals(\"test & <\", StringEscapeUtils.unescapeHtml(\"test & &lt;\"));\n        assertEquals(\"<P&O>\", StringEscapeUtils.unescapeXml(\"&lt;P&O&gt;\"));\n        assertEquals(\"test & <\", StringEscapeUtils.unescapeXml(\"test & &lt;\"));\n    }",
        "begin_line": 324,
        "end_line": 329,
        "comment": " http://issues.apache.org/bugzilla/show_bug.cgi?id=38569",
        "child_ranges": [
            "(line 325,col 9)-(line 325,col 77)",
            "(line 326,col 9)-(line 326,col 80)",
            "(line 327,col 9)-(line 327,col 76)",
            "(line 328,col 9)-(line 328,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testLang313()",
        "snippet": "    public void testLang313() {\n        assertEquals(\"& &\", StringEscapeUtils.unescapeHtml(\"& &amp;\"));\n    }",
        "begin_line": 331,
        "end_line": 333,
        "comment": "",
        "child_ranges": [
            "(line 332,col 9)-(line 332,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testEscapeCsvString()",
        "snippet": "    public void testEscapeCsvString() throws Exception\n    {\n        assertEquals(\"foo.bar\",          StringEscapeUtils.escapeCsv(\"foo.bar\"));\n        assertEquals(\"\\\"foo,bar\\\"\",      StringEscapeUtils.escapeCsv(\"foo,bar\"));\n        assertEquals(\"\\\"foo\\nbar\\\"\",     StringEscapeUtils.escapeCsv(\"foo\\nbar\"));\n        assertEquals(\"\\\"foo\\rbar\\\"\",     StringEscapeUtils.escapeCsv(\"foo\\rbar\"));\n        assertEquals(\"\\\"foo\\\"\\\"bar\\\"\",   StringEscapeUtils.escapeCsv(\"foo\\\"bar\"));\n        assertEquals(\"\",   StringEscapeUtils.escapeCsv(\"\"));\n        assertEquals(null, StringEscapeUtils.escapeCsv(null));\n    }",
        "begin_line": 335,
        "end_line": 344,
        "comment": "",
        "child_ranges": [
            "(line 337,col 9)-(line 337,col 81)",
            "(line 338,col 9)-(line 338,col 81)",
            "(line 339,col 9)-(line 339,col 82)",
            "(line 340,col 9)-(line 340,col 82)",
            "(line 341,col 9)-(line 341,col 82)",
            "(line 342,col 9)-(line 342,col 60)",
            "(line 343,col 9)-(line 343,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testEscapeCsvWriter()",
        "snippet": "    public void testEscapeCsvWriter() throws Exception\n    {\n        checkCsvEscapeWriter(\"foo.bar\",        \"foo.bar\");\n        checkCsvEscapeWriter(\"\\\"foo,bar\\\"\",    \"foo,bar\");\n        checkCsvEscapeWriter(\"\\\"foo\\nbar\\\"\",   \"foo\\nbar\");\n        checkCsvEscapeWriter(\"\\\"foo\\rbar\\\"\",   \"foo\\rbar\");\n        checkCsvEscapeWriter(\"\\\"foo\\\"\\\"bar\\\"\", \"foo\\\"bar\");\n        checkCsvEscapeWriter(\"\", null);\n        checkCsvEscapeWriter(\"\", \"\");\n    }",
        "begin_line": 346,
        "end_line": 355,
        "comment": "",
        "child_ranges": [
            "(line 348,col 9)-(line 348,col 58)",
            "(line 349,col 9)-(line 349,col 58)",
            "(line 350,col 9)-(line 350,col 59)",
            "(line 351,col 9)-(line 351,col 59)",
            "(line 352,col 9)-(line 352,col 59)",
            "(line 353,col 9)-(line 353,col 39)",
            "(line 354,col 9)-(line 354,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.checkCsvEscapeWriter(java.lang.String, java.lang.String)",
        "snippet": "    private void checkCsvEscapeWriter(String expected, String value) {\n        try {\n            StringWriter writer = new StringWriter();\n            StringEscapeUtils.escapeCsv(writer, value);\n            assertEquals(expected, writer.toString());\n        } catch (IOException e) {\n            fail(\"Threw: \" + e);\n        }\n    }",
        "begin_line": 357,
        "end_line": 365,
        "comment": "",
        "child_ranges": [
            "(line 358,col 9)-(line 364,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testUnescapeCsvString()",
        "snippet": "    public void testUnescapeCsvString() throws Exception\n    {\n        assertEquals(\"foo.bar\",          StringEscapeUtils.unescapeCsv(\"foo.bar\"));\n        assertEquals(\"foo,bar\",      StringEscapeUtils.unescapeCsv(\"\\\"foo,bar\\\"\"));\n        assertEquals(\"foo\\nbar\",     StringEscapeUtils.unescapeCsv(\"\\\"foo\\nbar\\\"\"));\n        assertEquals(\"foo\\rbar\",     StringEscapeUtils.unescapeCsv(\"\\\"foo\\rbar\\\"\"));\n        assertEquals(\"foo\\\"bar\",   StringEscapeUtils.unescapeCsv(\"\\\"foo\\\"\\\"bar\\\"\"));\n        assertEquals(\"\",   StringEscapeUtils.unescapeCsv(\"\"));\n        assertEquals(null, StringEscapeUtils.unescapeCsv(null));\n\n        assertEquals(\"\\\"foo.bar\\\"\",          StringEscapeUtils.unescapeCsv(\"\\\"foo.bar\\\"\"));\n    }",
        "begin_line": 367,
        "end_line": 378,
        "comment": "",
        "child_ranges": [
            "(line 369,col 9)-(line 369,col 83)",
            "(line 370,col 9)-(line 370,col 83)",
            "(line 371,col 9)-(line 371,col 84)",
            "(line 372,col 9)-(line 372,col 84)",
            "(line 373,col 9)-(line 373,col 84)",
            "(line 374,col 9)-(line 374,col 62)",
            "(line 375,col 9)-(line 375,col 64)",
            "(line 377,col 9)-(line 377,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testUnescapeCsvWriter()",
        "snippet": "    public void testUnescapeCsvWriter() throws Exception\n    {\n        checkCsvUnescapeWriter(\"foo.bar\",        \"foo.bar\");\n        checkCsvUnescapeWriter(\"foo,bar\",    \"\\\"foo,bar\\\"\");\n        checkCsvUnescapeWriter(\"foo\\nbar\",   \"\\\"foo\\nbar\\\"\");\n        checkCsvUnescapeWriter(\"foo\\rbar\",   \"\\\"foo\\rbar\\\"\");\n        checkCsvUnescapeWriter(\"foo\\\"bar\", \"\\\"foo\\\"\\\"bar\\\"\");\n        checkCsvUnescapeWriter(\"\", null);\n        checkCsvUnescapeWriter(\"\", \"\");\n\n        checkCsvUnescapeWriter(\"\\\"foo.bar\\\"\",        \"\\\"foo.bar\\\"\");\n    }",
        "begin_line": 380,
        "end_line": 391,
        "comment": "",
        "child_ranges": [
            "(line 382,col 9)-(line 382,col 60)",
            "(line 383,col 9)-(line 383,col 60)",
            "(line 384,col 9)-(line 384,col 61)",
            "(line 385,col 9)-(line 385,col 61)",
            "(line 386,col 9)-(line 386,col 61)",
            "(line 387,col 9)-(line 387,col 41)",
            "(line 388,col 9)-(line 388,col 39)",
            "(line 390,col 9)-(line 390,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.checkCsvUnescapeWriter(java.lang.String, java.lang.String)",
        "snippet": "    private void checkCsvUnescapeWriter(String expected, String value) {\n        try {\n            StringWriter writer = new StringWriter();\n            StringEscapeUtils.unescapeCsv(writer, value);\n            assertEquals(expected, writer.toString());\n        } catch (IOException e) {\n            fail(\"Threw: \" + e);\n        }\n    }",
        "begin_line": 393,
        "end_line": 401,
        "comment": "",
        "child_ranges": [
            "(line 394,col 9)-(line 400,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.NumberUtilsTest(java.lang.String)",
        "snippet": "    public NumberUtilsTest(String name) {\n        super(name);\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(NumberUtilsTest.class);\n        suite.setName(\"NumberUtils Tests\");\n        return suite;\n    }",
        "begin_line": 42,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 63)",
            "(line 44,col 9)-(line 44,col 43)",
            "(line 45,col 9)-(line 45,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.testStringToIntString()",
        "snippet": "    public void testStringToIntString() {\n        assertTrue(\"stringToInt(String) 1 failed\", NumberUtils.stringToInt(\"12345\") == 12345);\n        assertTrue(\"stringToInt(String) 2 failed\", NumberUtils.stringToInt(\"abc\") == 0);\n    }",
        "begin_line": 53,
        "end_line": 56,
        "comment": "\n     * Test for int stringToInt(String)\n     ",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 94)",
            "(line 55,col 9)-(line 55,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.testStringToIntStringI()",
        "snippet": "    public void testStringToIntStringI() {\n        assertTrue(\"stringToInt(String,int) 1 failed\", NumberUtils.stringToInt(\"12345\", 5) == 12345);\n        assertTrue(\"stringToInt(String,int) 2 failed\", NumberUtils.stringToInt(\"1234.5\", 5) == 5);\n    }",
        "begin_line": 61,
        "end_line": 64,
        "comment": "\n     * Test for int stringToInt(String, int)\n     ",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 101)",
            "(line 63,col 9)-(line 63,col 98)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.testCreateNumber()",
        "snippet": "    public void testCreateNumber() {\n        //a lot of things can go wrong\n        assertEquals(\"createNumber(String) 1 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));\n        assertEquals(\"createNumber(String) 2 failed\", new Integer(\"12345\"), NumberUtils.createNumber(\"12345\"));\n        assertEquals(\"createNumber(String) 3 failed\", new Double(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));\n        assertEquals(\"createNumber(String) 4 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));\n        assertEquals(\"createNumber(String) 5 failed\", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\" + (Integer.MAX_VALUE + 1L)));\n        assertEquals(\"createNumber(String) 6 failed\", new BigInteger(Long.MAX_VALUE + \"0\"), NumberUtils.createNumber(Long.MAX_VALUE + \"0L\"));\n        assertEquals(\"createNumber(String) 7 failed\", new Long(12345), NumberUtils.createNumber(\"12345L\"));\n        assertEquals(\"createNumber(String) 8 failed\", new Float(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));\n        assertEquals(\"createNumber(String) 9 failed\", new Integer(\"-12345\"), NumberUtils.createNumber(\"-12345\"));\n        assertTrue(\"createNumber(String) 10 failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());\n        assertTrue(\"createNumber(String) 11 failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());\n        assertEquals(\"createNumber(String) 12 failed\", new Double(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));\n        assertEquals(\"createNumber(String) 13 failed\", new Float(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));\n        assertEquals(\"createNumber(String) 14 failed\", new Double(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));\n        assertEquals(\"createNumber(String) 15 failed\", new Double(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));\n        assertEquals(\"createNumber(String) 16 failed\", new Double(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if(SystemUtils.isJavaVersionAtLeast(1.3f)) { \n            assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils.createNumber(\"1.1E-700F\"));\n        }\n        assertEquals(\n            \"createNumber(String) 16 failed\",\n            new Long(\"10\" + Integer.MAX_VALUE),\n            NumberUtils.createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));\n        assertEquals(\n            \"createNumber(String) 17 failed\",\n            new Long(\"10\" + Integer.MAX_VALUE),\n            NumberUtils.createNumber(\"10\" + Integer.MAX_VALUE));\n        assertEquals(\n            \"createNumber(String) 18 failed\",\n            new BigInteger(\"10\" + Long.MAX_VALUE),\n            NumberUtils.createNumber(\"10\" + Long.MAX_VALUE));\n\n    }",
        "begin_line": 66,
        "end_line": 102,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 111)",
            "(line 69,col 9)-(line 69,col 111)",
            "(line 70,col 9)-(line 70,col 113)",
            "(line 71,col 9)-(line 71,col 112)",
            "(line 72,col 9)-(line 72,col 145)",
            "(line 73,col 9)-(line 73,col 141)",
            "(line 74,col 9)-(line 74,col 107)",
            "(line 75,col 9)-(line 75,col 113)",
            "(line 76,col 9)-(line 76,col 113)",
            "(line 77,col 9)-(line 77,col 110)",
            "(line 78,col 9)-(line 78,col 112)",
            "(line 79,col 9)-(line 79,col 115)",
            "(line 80,col 9)-(line 80,col 112)",
            "(line 81,col 9)-(line 81,col 117)",
            "(line 82,col 9)-(line 82,col 117)",
            "(line 83,col 9)-(line 83,col 117)",
            "(line 86,col 9)-(line 88,col 9)",
            "(line 89,col 9)-(line 92,col 70)",
            "(line 93,col 9)-(line 96,col 64)",
            "(line 97,col 9)-(line 100,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.testCreateFloat()",
        "snippet": "    public void testCreateFloat() {\n        assertEquals(\"createFloat(String) failed\", new Float(\"1234.5\"), NumberUtils.createFloat(\"1234.5\"));\n    }",
        "begin_line": 104,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 107)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.testCreateDouble()",
        "snippet": "    public void testCreateDouble() {\n        assertEquals(\"createDouble(String) failed\", new Double(\"1234.5\"), NumberUtils.createDouble(\"1234.5\"));\n    }",
        "begin_line": 108,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 110)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.testCreateInteger()",
        "snippet": "    public void testCreateInteger() {\n        assertEquals(\"createInteger(String) failed\", new Integer(\"12345\"), NumberUtils.createInteger(\"12345\"));\n    }",
        "begin_line": 112,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 111)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.testCreateLong()",
        "snippet": "    public void testCreateLong() {\n        assertEquals(\"createInteger(String) failed\", new Long(\"12345\"), NumberUtils.createLong(\"12345\"));\n    }",
        "begin_line": 116,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 117,col 9)-(line 117,col 105)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.testCreateBigInteger()",
        "snippet": "    public void testCreateBigInteger() {\n        assertEquals(\"createBigInteger(String) failed\", new BigInteger(\"12345\"), NumberUtils.createBigInteger(\"12345\"));\n    }",
        "begin_line": 120,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 120)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.testCreateBigDecimal()",
        "snippet": "    public void testCreateBigDecimal() {\n        assertEquals(\"createBigDecimal(String) failed\", new BigDecimal(\"1234.5\"), NumberUtils.createBigDecimal(\"1234.5\"));\n    }",
        "begin_line": 124,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 122)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.testMinimumLong()",
        "snippet": "    public void testMinimumLong() {\n        assertEquals(\"minimum(long,long,long) 1 failed\", 12345L, NumberUtils.minimum(12345L, 12345L + 1L, 12345L + 2L));\n        assertEquals(\"minimum(long,long,long) 2 failed\", 12345L, NumberUtils.minimum(12345L + 1L, 12345L, 12345 + 2L));\n        assertEquals(\"minimum(long,long,long) 3 failed\", 12345L, NumberUtils.minimum(12345L + 1L, 12345L + 2L, 12345L));\n        assertEquals(\"minimum(long,long,long) 4 failed\", 12345L, NumberUtils.minimum(12345L + 1L, 12345L, 12345L));\n        assertEquals(\"minimum(long,long,long) 5 failed\", 12345L, NumberUtils.minimum(12345L, 12345L, 12345L));\n\n    }",
        "begin_line": 128,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 120)",
            "(line 130,col 9)-(line 130,col 119)",
            "(line 131,col 9)-(line 131,col 120)",
            "(line 132,col 9)-(line 132,col 115)",
            "(line 133,col 9)-(line 133,col 110)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.testMinimumInt()",
        "snippet": "    public void testMinimumInt() {\n        assertEquals(\"minimum(int,int,int) 1 failed\", 12345, NumberUtils.minimum(12345, 12345 + 1, 12345 + 2));\n        assertEquals(\"minimum(int,int,int) 2 failed\", 12345, NumberUtils.minimum(12345 + 1, 12345, 12345 + 2));\n        assertEquals(\"minimum(int,int,int) 3 failed\", 12345, NumberUtils.minimum(12345 + 1, 12345 + 2, 12345));\n        assertEquals(\"minimum(int,int,int) 4 failed\", 12345, NumberUtils.minimum(12345 + 1, 12345, 12345));\n        assertEquals(\"minimum(int,int,int) 5 failed\", 12345, NumberUtils.minimum(12345, 12345, 12345));\n\n    }",
        "begin_line": 137,
        "end_line": 144,
        "comment": "",
        "child_ranges": [
            "(line 138,col 9)-(line 138,col 111)",
            "(line 139,col 9)-(line 139,col 111)",
            "(line 140,col 9)-(line 140,col 111)",
            "(line 141,col 9)-(line 141,col 107)",
            "(line 142,col 9)-(line 142,col 103)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.testMaximumLong()",
        "snippet": "    public void testMaximumLong() {\n        assertEquals(\"maximum(long,long,long) 1 failed\", 12345L, NumberUtils.maximum(12345L, 12345L - 1L, 12345L - 2L));\n        assertEquals(\"maximum(long,long,long) 2 failed\", 12345L, NumberUtils.maximum(12345L - 1L, 12345L, 12345L - 2L));\n        assertEquals(\"maximum(long,long,long) 3 failed\", 12345L, NumberUtils.maximum(12345L - 1L, 12345L - 2L, 12345L));\n        assertEquals(\"maximum(long,long,long) 4 failed\", 12345L, NumberUtils.maximum(12345L - 1L, 12345L, 12345L));\n        assertEquals(\"maximum(long,long,long) 5 failed\", 12345L, NumberUtils.maximum(12345L, 12345L, 12345L));\n\n    }",
        "begin_line": 146,
        "end_line": 153,
        "comment": "",
        "child_ranges": [
            "(line 147,col 9)-(line 147,col 120)",
            "(line 148,col 9)-(line 148,col 120)",
            "(line 149,col 9)-(line 149,col 120)",
            "(line 150,col 9)-(line 150,col 115)",
            "(line 151,col 9)-(line 151,col 110)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.testMaximumInt()",
        "snippet": "    public void testMaximumInt() {\n        assertEquals(\"maximum(int,int,int) 1 failed\", 12345, NumberUtils.maximum(12345, 12345 - 1, 12345 - 2));\n        assertEquals(\"maximum(int,int,int) 2 failed\", 12345, NumberUtils.maximum(12345 - 1, 12345, 12345 - 2));\n        assertEquals(\"maximum(int,int,int) 3 failed\", 12345, NumberUtils.maximum(12345 - 1, 12345 - 2, 12345));\n        assertEquals(\"maximum(int,int,int) 4 failed\", 12345, NumberUtils.maximum(12345 - 1, 12345, 12345));\n        assertEquals(\"maximum(int,int,int) 5 failed\", 12345, NumberUtils.maximum(12345, 12345, 12345));\n\n    }",
        "begin_line": 155,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 156,col 9)-(line 156,col 111)",
            "(line 157,col 9)-(line 157,col 111)",
            "(line 158,col 9)-(line 158,col 111)",
            "(line 159,col 9)-(line 159,col 107)",
            "(line 160,col 9)-(line 160,col 103)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.testCompareDouble()",
        "snippet": "    public void testCompareDouble() {\n        assertTrue(NumberUtils.compare(Double.NaN, Double.NaN) == 0);\n        assertTrue(NumberUtils.compare(Double.NaN, Double.POSITIVE_INFINITY) == +1);\n        assertTrue(NumberUtils.compare(Double.NaN, Double.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(Double.NaN, 1.2d) == +1);\n        assertTrue(NumberUtils.compare(Double.NaN, 0.0d) == +1);\n        assertTrue(NumberUtils.compare(Double.NaN, -0.0d) == +1);\n        assertTrue(NumberUtils.compare(Double.NaN, -1.2d) == +1);\n        assertTrue(NumberUtils.compare(Double.NaN, -Double.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(Double.NaN, Double.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.NaN) == -1);\n        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY) == 0);\n        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, 1.2d) == +1);\n        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, 0.0d) == +1);\n        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, -0.0d) == +1);\n        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, -1.2d) == +1);\n        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, -Double.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.NaN) == -1);\n        assertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.MAX_VALUE) == 0);\n        assertTrue(NumberUtils.compare(Double.MAX_VALUE, 1.2d) == +1);\n        assertTrue(NumberUtils.compare(Double.MAX_VALUE, 0.0d) == +1);\n        assertTrue(NumberUtils.compare(Double.MAX_VALUE, -0.0d) == +1);\n        assertTrue(NumberUtils.compare(Double.MAX_VALUE, -1.2d) == +1);\n        assertTrue(NumberUtils.compare(Double.MAX_VALUE, -Double.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(1.2d, Double.NaN) == -1);\n        assertTrue(NumberUtils.compare(1.2d, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(1.2d, Double.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(1.2d, 1.2d) == 0);\n        assertTrue(NumberUtils.compare(1.2d, 0.0d) == +1);\n        assertTrue(NumberUtils.compare(1.2d, -0.0d) == +1);\n        assertTrue(NumberUtils.compare(1.2d, -1.2d) == +1);\n        assertTrue(NumberUtils.compare(1.2d, -Double.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(1.2d, Double.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(0.0d, Double.NaN) == -1);\n        assertTrue(NumberUtils.compare(0.0d, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(0.0d, Double.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(0.0d, 1.2d) == -1);\n        assertTrue(NumberUtils.compare(0.0d, 0.0d) == 0);\n        assertTrue(NumberUtils.compare(0.0d, -0.0d) == +1);\n        assertTrue(NumberUtils.compare(0.0d, -1.2d) == +1);\n        assertTrue(NumberUtils.compare(0.0d, -Double.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(0.0d, Double.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(-0.0d, Double.NaN) == -1);\n        assertTrue(NumberUtils.compare(-0.0d, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(-0.0d, Double.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(-0.0d, 1.2d) == -1);\n        assertTrue(NumberUtils.compare(-0.0d, 0.0d) == -1);\n        assertTrue(NumberUtils.compare(-0.0d, -0.0d) == 0);\n        assertTrue(NumberUtils.compare(-0.0d, -1.2d) == +1);\n        assertTrue(NumberUtils.compare(-0.0d, -Double.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(-0.0d, Double.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(-1.2d, Double.NaN) == -1);\n        assertTrue(NumberUtils.compare(-1.2d, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(-1.2d, Double.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(-1.2d, 1.2d) == -1);\n        assertTrue(NumberUtils.compare(-1.2d, 0.0d) == -1);\n        assertTrue(NumberUtils.compare(-1.2d, -0.0d) == -1);\n        assertTrue(NumberUtils.compare(-1.2d, -1.2d) == 0);\n        assertTrue(NumberUtils.compare(-1.2d, -Double.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(-1.2d, Double.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.NaN) == -1);\n        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, 1.2d) == -1);\n        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, 0.0d) == -1);\n        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, -0.0d) == -1);\n        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, -1.2d) == -1);\n        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, -Double.MAX_VALUE) == 0);\n        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.NaN) == -1);\n        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, 1.2d) == -1);\n        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, 0.0d) == -1);\n        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, -0.0d) == -1);\n        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, -1.2d) == -1);\n        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, -Double.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY) == 0);\n    }",
        "begin_line": 164,
        "end_line": 254,
        "comment": "",
        "child_ranges": [
            "(line 165,col 9)-(line 165,col 69)",
            "(line 166,col 9)-(line 166,col 84)",
            "(line 167,col 9)-(line 167,col 76)",
            "(line 168,col 9)-(line 168,col 64)",
            "(line 169,col 9)-(line 169,col 64)",
            "(line 170,col 9)-(line 170,col 65)",
            "(line 171,col 9)-(line 171,col 65)",
            "(line 172,col 9)-(line 172,col 77)",
            "(line 173,col 9)-(line 173,col 84)",
            "(line 175,col 9)-(line 175,col 84)",
            "(line 176,col 9)-(line 176,col 97)",
            "(line 177,col 9)-(line 177,col 90)",
            "(line 178,col 9)-(line 178,col 78)",
            "(line 179,col 9)-(line 179,col 78)",
            "(line 180,col 9)-(line 180,col 79)",
            "(line 181,col 9)-(line 181,col 79)",
            "(line 182,col 9)-(line 182,col 91)",
            "(line 183,col 9)-(line 183,col 98)",
            "(line 185,col 9)-(line 185,col 76)",
            "(line 186,col 9)-(line 186,col 90)",
            "(line 187,col 9)-(line 187,col 81)",
            "(line 188,col 9)-(line 188,col 70)",
            "(line 189,col 9)-(line 189,col 70)",
            "(line 190,col 9)-(line 190,col 71)",
            "(line 191,col 9)-(line 191,col 71)",
            "(line 192,col 9)-(line 192,col 83)",
            "(line 193,col 9)-(line 193,col 90)",
            "(line 195,col 9)-(line 195,col 64)",
            "(line 196,col 9)-(line 196,col 78)",
            "(line 197,col 9)-(line 197,col 70)",
            "(line 198,col 9)-(line 198,col 57)",
            "(line 199,col 9)-(line 199,col 58)",
            "(line 200,col 9)-(line 200,col 59)",
            "(line 201,col 9)-(line 201,col 59)",
            "(line 202,col 9)-(line 202,col 71)",
            "(line 203,col 9)-(line 203,col 78)",
            "(line 205,col 9)-(line 205,col 64)",
            "(line 206,col 9)-(line 206,col 78)",
            "(line 207,col 9)-(line 207,col 70)",
            "(line 208,col 9)-(line 208,col 58)",
            "(line 209,col 9)-(line 209,col 57)",
            "(line 210,col 9)-(line 210,col 59)",
            "(line 211,col 9)-(line 211,col 59)",
            "(line 212,col 9)-(line 212,col 71)",
            "(line 213,col 9)-(line 213,col 78)",
            "(line 215,col 9)-(line 215,col 65)",
            "(line 216,col 9)-(line 216,col 79)",
            "(line 217,col 9)-(line 217,col 71)",
            "(line 218,col 9)-(line 218,col 59)",
            "(line 219,col 9)-(line 219,col 59)",
            "(line 220,col 9)-(line 220,col 59)",
            "(line 221,col 9)-(line 221,col 60)",
            "(line 222,col 9)-(line 222,col 72)",
            "(line 223,col 9)-(line 223,col 79)",
            "(line 225,col 9)-(line 225,col 65)",
            "(line 226,col 9)-(line 226,col 79)",
            "(line 227,col 9)-(line 227,col 71)",
            "(line 228,col 9)-(line 228,col 59)",
            "(line 229,col 9)-(line 229,col 59)",
            "(line 230,col 9)-(line 230,col 60)",
            "(line 231,col 9)-(line 231,col 59)",
            "(line 232,col 9)-(line 232,col 72)",
            "(line 233,col 9)-(line 233,col 79)",
            "(line 235,col 9)-(line 235,col 77)",
            "(line 236,col 9)-(line 236,col 91)",
            "(line 237,col 9)-(line 237,col 83)",
            "(line 238,col 9)-(line 238,col 71)",
            "(line 239,col 9)-(line 239,col 71)",
            "(line 240,col 9)-(line 240,col 72)",
            "(line 241,col 9)-(line 241,col 72)",
            "(line 242,col 9)-(line 242,col 83)",
            "(line 243,col 9)-(line 243,col 91)",
            "(line 245,col 9)-(line 245,col 84)",
            "(line 246,col 9)-(line 246,col 98)",
            "(line 247,col 9)-(line 247,col 90)",
            "(line 248,col 9)-(line 248,col 78)",
            "(line 249,col 9)-(line 249,col 78)",
            "(line 250,col 9)-(line 250,col 79)",
            "(line 251,col 9)-(line 251,col 79)",
            "(line 252,col 9)-(line 252,col 91)",
            "(line 253,col 9)-(line 253,col 97)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.testCompareFloat()",
        "snippet": "    public void testCompareFloat() {\n        assertTrue(NumberUtils.compare(Float.NaN, Float.NaN) == 0);\n        assertTrue(NumberUtils.compare(Float.NaN, Float.POSITIVE_INFINITY) == +1);\n        assertTrue(NumberUtils.compare(Float.NaN, Float.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(Float.NaN, 1.2f) == +1);\n        assertTrue(NumberUtils.compare(Float.NaN, 0.0f) == +1);\n        assertTrue(NumberUtils.compare(Float.NaN, -0.0f) == +1);\n        assertTrue(NumberUtils.compare(Float.NaN, -1.2f) == +1);\n        assertTrue(NumberUtils.compare(Float.NaN, -Float.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(Float.NaN, Float.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.NaN) == -1);\n        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY) == 0);\n        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, 1.2f) == +1);\n        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, 0.0f) == +1);\n        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, -0.0f) == +1);\n        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, -1.2f) == +1);\n        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, -Float.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.NaN) == -1);\n        assertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.MAX_VALUE) == 0);\n        assertTrue(NumberUtils.compare(Float.MAX_VALUE, 1.2f) == +1);\n        assertTrue(NumberUtils.compare(Float.MAX_VALUE, 0.0f) == +1);\n        assertTrue(NumberUtils.compare(Float.MAX_VALUE, -0.0f) == +1);\n        assertTrue(NumberUtils.compare(Float.MAX_VALUE, -1.2f) == +1);\n        assertTrue(NumberUtils.compare(Float.MAX_VALUE, -Float.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(1.2f, Float.NaN) == -1);\n        assertTrue(NumberUtils.compare(1.2f, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(1.2f, Float.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(1.2f, 1.2f) == 0);\n        assertTrue(NumberUtils.compare(1.2f, 0.0f) == +1);\n        assertTrue(NumberUtils.compare(1.2f, -0.0f) == +1);\n        assertTrue(NumberUtils.compare(1.2f, -1.2f) == +1);\n        assertTrue(NumberUtils.compare(1.2f, -Float.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(1.2f, Float.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(0.0f, Float.NaN) == -1);\n        assertTrue(NumberUtils.compare(0.0f, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(0.0f, Float.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(0.0f, 1.2f) == -1);\n        assertTrue(NumberUtils.compare(0.0f, 0.0f) == 0);\n        assertTrue(NumberUtils.compare(0.0f, -0.0f) == +1);\n        assertTrue(NumberUtils.compare(0.0f, -1.2f) == +1);\n        assertTrue(NumberUtils.compare(0.0f, -Float.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(0.0f, Float.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(-0.0f, Float.NaN) == -1);\n        assertTrue(NumberUtils.compare(-0.0f, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(-0.0f, Float.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(-0.0f, 1.2f) == -1);\n        assertTrue(NumberUtils.compare(-0.0f, 0.0f) == -1);\n        assertTrue(NumberUtils.compare(-0.0f, -0.0f) == 0);\n        assertTrue(NumberUtils.compare(-0.0f, -1.2f) == +1);\n        assertTrue(NumberUtils.compare(-0.0f, -Float.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(-0.0f, Float.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(-1.2f, Float.NaN) == -1);\n        assertTrue(NumberUtils.compare(-1.2f, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(-1.2f, Float.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(-1.2f, 1.2f) == -1);\n        assertTrue(NumberUtils.compare(-1.2f, 0.0f) == -1);\n        assertTrue(NumberUtils.compare(-1.2f, -0.0f) == -1);\n        assertTrue(NumberUtils.compare(-1.2f, -1.2f) == 0);\n        assertTrue(NumberUtils.compare(-1.2f, -Float.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(-1.2f, Float.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.NaN) == -1);\n        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, 1.2f) == -1);\n        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, 0.0f) == -1);\n        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, -0.0f) == -1);\n        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, -1.2f) == -1);\n        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, -Float.MAX_VALUE) == 0);\n        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.NaN) == -1);\n        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, 1.2f) == -1);\n        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, 0.0f) == -1);\n        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, -0.0f) == -1);\n        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, -1.2f) == -1);\n        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, -Float.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY) == 0);\n    }",
        "begin_line": 256,
        "end_line": 346,
        "comment": "",
        "child_ranges": [
            "(line 257,col 9)-(line 257,col 67)",
            "(line 258,col 9)-(line 258,col 82)",
            "(line 259,col 9)-(line 259,col 74)",
            "(line 260,col 9)-(line 260,col 63)",
            "(line 261,col 9)-(line 261,col 63)",
            "(line 262,col 9)-(line 262,col 64)",
            "(line 263,col 9)-(line 263,col 64)",
            "(line 264,col 9)-(line 264,col 75)",
            "(line 265,col 9)-(line 265,col 82)",
            "(line 267,col 9)-(line 267,col 82)",
            "(line 268,col 9)-(line 268,col 95)",
            "(line 269,col 9)-(line 269,col 88)",
            "(line 270,col 9)-(line 270,col 77)",
            "(line 271,col 9)-(line 271,col 77)",
            "(line 272,col 9)-(line 272,col 78)",
            "(line 273,col 9)-(line 273,col 78)",
            "(line 274,col 9)-(line 274,col 89)",
            "(line 275,col 9)-(line 275,col 96)",
            "(line 277,col 9)-(line 277,col 74)",
            "(line 278,col 9)-(line 278,col 88)",
            "(line 279,col 9)-(line 279,col 79)",
            "(line 280,col 9)-(line 280,col 69)",
            "(line 281,col 9)-(line 281,col 69)",
            "(line 282,col 9)-(line 282,col 70)",
            "(line 283,col 9)-(line 283,col 70)",
            "(line 284,col 9)-(line 284,col 81)",
            "(line 285,col 9)-(line 285,col 88)",
            "(line 287,col 9)-(line 287,col 63)",
            "(line 288,col 9)-(line 288,col 77)",
            "(line 289,col 9)-(line 289,col 69)",
            "(line 290,col 9)-(line 290,col 57)",
            "(line 291,col 9)-(line 291,col 58)",
            "(line 292,col 9)-(line 292,col 59)",
            "(line 293,col 9)-(line 293,col 59)",
            "(line 294,col 9)-(line 294,col 70)",
            "(line 295,col 9)-(line 295,col 77)",
            "(line 297,col 9)-(line 297,col 63)",
            "(line 298,col 9)-(line 298,col 77)",
            "(line 299,col 9)-(line 299,col 69)",
            "(line 300,col 9)-(line 300,col 58)",
            "(line 301,col 9)-(line 301,col 57)",
            "(line 302,col 9)-(line 302,col 59)",
            "(line 303,col 9)-(line 303,col 59)",
            "(line 304,col 9)-(line 304,col 70)",
            "(line 305,col 9)-(line 305,col 77)",
            "(line 307,col 9)-(line 307,col 64)",
            "(line 308,col 9)-(line 308,col 78)",
            "(line 309,col 9)-(line 309,col 70)",
            "(line 310,col 9)-(line 310,col 59)",
            "(line 311,col 9)-(line 311,col 59)",
            "(line 312,col 9)-(line 312,col 59)",
            "(line 313,col 9)-(line 313,col 60)",
            "(line 314,col 9)-(line 314,col 71)",
            "(line 315,col 9)-(line 315,col 78)",
            "(line 317,col 9)-(line 317,col 64)",
            "(line 318,col 9)-(line 318,col 78)",
            "(line 319,col 9)-(line 319,col 70)",
            "(line 320,col 9)-(line 320,col 59)",
            "(line 321,col 9)-(line 321,col 59)",
            "(line 322,col 9)-(line 322,col 60)",
            "(line 323,col 9)-(line 323,col 59)",
            "(line 324,col 9)-(line 324,col 71)",
            "(line 325,col 9)-(line 325,col 78)",
            "(line 327,col 9)-(line 327,col 75)",
            "(line 328,col 9)-(line 328,col 89)",
            "(line 329,col 9)-(line 329,col 81)",
            "(line 330,col 9)-(line 330,col 70)",
            "(line 331,col 9)-(line 331,col 70)",
            "(line 332,col 9)-(line 332,col 71)",
            "(line 333,col 9)-(line 333,col 71)",
            "(line 334,col 9)-(line 334,col 81)",
            "(line 335,col 9)-(line 335,col 89)",
            "(line 337,col 9)-(line 337,col 82)",
            "(line 338,col 9)-(line 338,col 96)",
            "(line 339,col 9)-(line 339,col 88)",
            "(line 340,col 9)-(line 340,col 77)",
            "(line 341,col 9)-(line 341,col 77)",
            "(line 342,col 9)-(line 342,col 78)",
            "(line 343,col 9)-(line 343,col 78)",
            "(line 344,col 9)-(line 344,col 89)",
            "(line 345,col 9)-(line 345,col 95)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.testIsDigits()",
        "snippet": "    public void testIsDigits() {\n        assertEquals(\"isDigits(null) failed\", false, NumberUtils.isDigits(null));\n        assertEquals(\"isDigits('') failed\", false, NumberUtils.isDigits(\"\"));\n        assertEquals(\"isDigits(String) failed\", true, NumberUtils.isDigits(\"12345\"));\n        assertEquals(\"isDigits(String) neg 1 failed\", false, NumberUtils.isDigits(\"1234.5\"));\n        assertEquals(\"isDigits(String) neg 3 failed\", false, NumberUtils.isDigits(\"1ab\"));\n        assertEquals(\"isDigits(String) neg 4 failed\", false, NumberUtils.isDigits(\"abc\"));\n    }",
        "begin_line": 348,
        "end_line": 355,
        "comment": "",
        "child_ranges": [
            "(line 349,col 9)-(line 349,col 81)",
            "(line 350,col 9)-(line 350,col 77)",
            "(line 351,col 9)-(line 351,col 85)",
            "(line 352,col 9)-(line 352,col 93)",
            "(line 353,col 9)-(line 353,col 90)",
            "(line 354,col 9)-(line 354,col 90)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.testIsNumber()",
        "snippet": "    public void testIsNumber() {\n        String val = \"12345\";\n        assertTrue(\"isNumber(String) 1 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 1 failed\", checkCreateNumber(val));\n        val = \"1234.5\";\n        assertTrue(\"isNumber(String) 2 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 2 failed\", checkCreateNumber(val));\n        val = \".12345\";\n        assertTrue(\"isNumber(String) 3 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 3 failed\", checkCreateNumber(val));\n        val = \"1234E5\";\n        assertTrue(\"isNumber(String) 4 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 4 failed\", checkCreateNumber(val));\n        val = \"1234E+5\";\n        assertTrue(\"isNumber(String) 5 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 5 failed\", checkCreateNumber(val));\n        val = \"1234E-5\";\n        assertTrue(\"isNumber(String) 6 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 6 failed\", checkCreateNumber(val));\n        val = \"123.4E5\";\n        assertTrue(\"isNumber(String) 7 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 7 failed\", checkCreateNumber(val));\n        val = \"-1234\";\n        assertTrue(\"isNumber(String) 8 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 8 failed\", checkCreateNumber(val));\n        val = \"-1234.5\";\n        assertTrue(\"isNumber(String) 9 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 9 failed\", checkCreateNumber(val));\n        val = \"-.12345\";\n        assertTrue(\"isNumber(String) 10 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 10 failed\", checkCreateNumber(val));\n        val = \"-1234E5\";\n        assertTrue(\"isNumber(String) 11 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 11 failed\", checkCreateNumber(val));\n        val = \"0\";\n        assertTrue(\"isNumber(String) 12 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 12 failed\", checkCreateNumber(val));\n        val = \"-0\";\n        assertTrue(\"isNumber(String) 13 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 13 failed\", checkCreateNumber(val));\n        val = \"01234\";\n        assertTrue(\"isNumber(String) 14 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 14 failed\", checkCreateNumber(val));\n        val = \"-01234\";\n        assertTrue(\"isNumber(String) 15 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 15 failed\", checkCreateNumber(val));\n        val = \"0xABC123\";\n        assertTrue(\"isNumber(String) 16 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 16 failed\", checkCreateNumber(val));\n        val = \"0x0\";\n        assertTrue(\"isNumber(String) 17 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 17 failed\", checkCreateNumber(val));\n        val = \"123.4E21D\";\n        assertTrue(\"isNumber(String) 19 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 19 failed\", checkCreateNumber(val));\n        val = \"-221.23F\";\n        assertTrue(\"isNumber(String) 20 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 20 failed\", checkCreateNumber(val));\n        val = \"22338L\";\n        assertTrue(\"isNumber(String) 21 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 21 failed\", checkCreateNumber(val));\n        val = null;\n        assertTrue(\"isNumber(String) 1 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 1 Neg failed\", !checkCreateNumber(val));\n        val = \"\";\n        assertTrue(\"isNumber(String) 2 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 2 Neg failed\", !checkCreateNumber(val));\n        val = \"--2.3\";\n        assertTrue(\"isNumber(String) 3 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 3 Neg failed\", !checkCreateNumber(val));\n        val = \".12.3\";\n        assertTrue(\"isNumber(String) 4 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 4 Neg failed\", !checkCreateNumber(val));\n        val = \"-123E\";\n        assertTrue(\"isNumber(String) 5 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 5 Neg failed\", !checkCreateNumber(val));\n        val = \"-123E+-212\";\n        assertTrue(\"isNumber(String) 6 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 6 Neg failed\", !checkCreateNumber(val));\n        val = \"-123E2.12\";\n        assertTrue(\"isNumber(String) 7 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 7 Neg failed\", !checkCreateNumber(val));\n        val = \"0xGF\";\n        assertTrue(\"isNumber(String) 8 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 8 Neg failed\", !checkCreateNumber(val));\n        val = \"0xFAE-1\";\n        assertTrue(\"isNumber(String) 9 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 9 Neg failed\", !checkCreateNumber(val));\n        val = \".\";\n        assertTrue(\"isNumber(String) 10 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 10 Neg failed\", !checkCreateNumber(val));\n        val = \"-0ABC123\";\n        assertTrue(\"isNumber(String) 11 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 11 Neg failed\", !checkCreateNumber(val));\n        val = \"123.4E-D\";\n        assertTrue(\"isNumber(String) 12 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 12 Neg failed\", !checkCreateNumber(val));\n        val = \"123.4ED\";\n        assertTrue(\"isNumber(String) 13 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 13 Neg failed\", !checkCreateNumber(val));\n        val = \"1234E5l\";\n        assertTrue(\"isNumber(String) 14 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 14 Neg failed\", !checkCreateNumber(val));\n        val = \"11a\";\n        assertTrue(\"isNumber(String) 15 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 15 Neg failed\", !checkCreateNumber(val)); \n        val = \"1a\";\n        assertTrue(\"isNumber(String) 16 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 16 Neg failed\", !checkCreateNumber(val)); \n        val = \"a\";\n        assertTrue(\"isNumber(String) 17 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 17 Neg failed\", !checkCreateNumber(val)); \n        val = \"11g\";\n        assertTrue(\"isNumber(String) 18 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 18 Neg failed\", !checkCreateNumber(val)); \n        val = \"11z\";\n        assertTrue(\"isNumber(String) 19 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 19 Neg failed\", !checkCreateNumber(val)); \n        val = \"11def\";\n        assertTrue(\"isNumber(String) 20 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 20 Neg failed\", !checkCreateNumber(val)); \n        val = \"11d11\";\n        assertTrue(\"isNumber(String) 21 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 21 Neg failed\", !checkCreateNumber(val)); \n\n    }",
        "begin_line": 361,
        "end_line": 486,
        "comment": "\n     * Tests isNumber(String) and tests that createNumber(String) returns\n     * a valid number iff isNumber(String) returns false.\n     ",
        "child_ranges": [
            "(line 362,col 9)-(line 362,col 29)",
            "(line 363,col 9)-(line 363,col 75)",
            "(line 364,col 9)-(line 364,col 93)",
            "(line 365,col 9)-(line 365,col 23)",
            "(line 366,col 9)-(line 366,col 75)",
            "(line 367,col 9)-(line 367,col 93)",
            "(line 368,col 9)-(line 368,col 23)",
            "(line 369,col 9)-(line 369,col 75)",
            "(line 370,col 9)-(line 370,col 93)",
            "(line 371,col 9)-(line 371,col 23)",
            "(line 372,col 9)-(line 372,col 75)",
            "(line 373,col 9)-(line 373,col 93)",
            "(line 374,col 9)-(line 374,col 24)",
            "(line 375,col 9)-(line 375,col 75)",
            "(line 376,col 9)-(line 376,col 93)",
            "(line 377,col 9)-(line 377,col 24)",
            "(line 378,col 9)-(line 378,col 75)",
            "(line 379,col 9)-(line 379,col 93)",
            "(line 380,col 9)-(line 380,col 24)",
            "(line 381,col 9)-(line 381,col 75)",
            "(line 382,col 9)-(line 382,col 93)",
            "(line 383,col 9)-(line 383,col 22)",
            "(line 384,col 9)-(line 384,col 75)",
            "(line 385,col 9)-(line 385,col 93)",
            "(line 386,col 9)-(line 386,col 24)",
            "(line 387,col 9)-(line 387,col 75)",
            "(line 388,col 9)-(line 388,col 93)",
            "(line 389,col 9)-(line 389,col 24)",
            "(line 390,col 9)-(line 390,col 76)",
            "(line 391,col 9)-(line 391,col 94)",
            "(line 392,col 9)-(line 392,col 24)",
            "(line 393,col 9)-(line 393,col 76)",
            "(line 394,col 9)-(line 394,col 94)",
            "(line 395,col 9)-(line 395,col 18)",
            "(line 396,col 9)-(line 396,col 76)",
            "(line 397,col 9)-(line 397,col 94)",
            "(line 398,col 9)-(line 398,col 19)",
            "(line 399,col 9)-(line 399,col 76)",
            "(line 400,col 9)-(line 400,col 94)",
            "(line 401,col 9)-(line 401,col 22)",
            "(line 402,col 9)-(line 402,col 76)",
            "(line 403,col 9)-(line 403,col 94)",
            "(line 404,col 9)-(line 404,col 23)",
            "(line 405,col 9)-(line 405,col 76)",
            "(line 406,col 9)-(line 406,col 94)",
            "(line 407,col 9)-(line 407,col 25)",
            "(line 408,col 9)-(line 408,col 76)",
            "(line 409,col 9)-(line 409,col 94)",
            "(line 410,col 9)-(line 410,col 20)",
            "(line 411,col 9)-(line 411,col 76)",
            "(line 412,col 9)-(line 412,col 94)",
            "(line 413,col 9)-(line 413,col 26)",
            "(line 414,col 9)-(line 414,col 76)",
            "(line 415,col 9)-(line 415,col 94)",
            "(line 416,col 9)-(line 416,col 25)",
            "(line 417,col 9)-(line 417,col 76)",
            "(line 418,col 9)-(line 418,col 94)",
            "(line 419,col 9)-(line 419,col 23)",
            "(line 420,col 9)-(line 420,col 76)",
            "(line 421,col 9)-(line 421,col 94)",
            "(line 422,col 9)-(line 422,col 19)",
            "(line 423,col 9)-(line 423,col 80)",
            "(line 424,col 9)-(line 424,col 98)",
            "(line 425,col 9)-(line 425,col 17)",
            "(line 426,col 9)-(line 426,col 80)",
            "(line 427,col 9)-(line 427,col 98)",
            "(line 428,col 9)-(line 428,col 22)",
            "(line 429,col 9)-(line 429,col 80)",
            "(line 430,col 9)-(line 430,col 98)",
            "(line 431,col 9)-(line 431,col 22)",
            "(line 432,col 9)-(line 432,col 80)",
            "(line 433,col 9)-(line 433,col 98)",
            "(line 434,col 9)-(line 434,col 22)",
            "(line 435,col 9)-(line 435,col 80)",
            "(line 436,col 9)-(line 436,col 98)",
            "(line 437,col 9)-(line 437,col 27)",
            "(line 438,col 9)-(line 438,col 80)",
            "(line 439,col 9)-(line 439,col 98)",
            "(line 440,col 9)-(line 440,col 26)",
            "(line 441,col 9)-(line 441,col 80)",
            "(line 442,col 9)-(line 442,col 98)",
            "(line 443,col 9)-(line 443,col 21)",
            "(line 444,col 9)-(line 444,col 80)",
            "(line 445,col 9)-(line 445,col 98)",
            "(line 446,col 9)-(line 446,col 24)",
            "(line 447,col 9)-(line 447,col 80)",
            "(line 448,col 9)-(line 448,col 98)",
            "(line 449,col 9)-(line 449,col 18)",
            "(line 450,col 9)-(line 450,col 81)",
            "(line 451,col 9)-(line 451,col 99)",
            "(line 452,col 9)-(line 452,col 25)",
            "(line 453,col 9)-(line 453,col 81)",
            "(line 454,col 9)-(line 454,col 99)",
            "(line 455,col 9)-(line 455,col 25)",
            "(line 456,col 9)-(line 456,col 81)",
            "(line 457,col 9)-(line 457,col 99)",
            "(line 458,col 9)-(line 458,col 24)",
            "(line 459,col 9)-(line 459,col 81)",
            "(line 460,col 9)-(line 460,col 99)",
            "(line 461,col 9)-(line 461,col 24)",
            "(line 462,col 9)-(line 462,col 81)",
            "(line 463,col 9)-(line 463,col 99)",
            "(line 464,col 9)-(line 464,col 20)",
            "(line 465,col 9)-(line 465,col 81)",
            "(line 466,col 9)-(line 466,col 99)",
            "(line 467,col 9)-(line 467,col 19)",
            "(line 468,col 9)-(line 468,col 81)",
            "(line 469,col 9)-(line 469,col 99)",
            "(line 470,col 9)-(line 470,col 18)",
            "(line 471,col 9)-(line 471,col 81)",
            "(line 472,col 9)-(line 472,col 99)",
            "(line 473,col 9)-(line 473,col 20)",
            "(line 474,col 9)-(line 474,col 81)",
            "(line 475,col 9)-(line 475,col 99)",
            "(line 476,col 9)-(line 476,col 20)",
            "(line 477,col 9)-(line 477,col 81)",
            "(line 478,col 9)-(line 478,col 99)",
            "(line 479,col 9)-(line 479,col 22)",
            "(line 480,col 9)-(line 480,col 81)",
            "(line 481,col 9)-(line 481,col 99)",
            "(line 482,col 9)-(line 482,col 22)",
            "(line 483,col 9)-(line 483,col 81)",
            "(line 484,col 9)-(line 484,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.testIsNumberInvalidInput()",
        "snippet": "    public void testIsNumberInvalidInput() {\n        String val = \"0x\";\n        assertEquals(\"isNumber() with 0x wasn't false\",  false, NumberUtils.isNumber(val));\n        val = \"0x3x3\";\n        assertEquals(\"isNumber() with 0x3x3 wasn't false\",  false, NumberUtils.isNumber(val));\n        val = \"20EE-3\";\n        assertEquals(\"isNumber() with 20EE-3 wasn't false\",  false, NumberUtils.isNumber(val));\n        val = \"2435q\";\n        assertEquals(\"isNumber() with 2435q wasn't false\",  false, NumberUtils.isNumber(val));\n        val = \".\";\n        assertEquals(\"isNumber() with . wasn't false\",  false, NumberUtils.isNumber(val));\n\n    }",
        "begin_line": 488,
        "end_line": 500,
        "comment": "",
        "child_ranges": [
            "(line 489,col 9)-(line 489,col 26)",
            "(line 490,col 9)-(line 490,col 91)",
            "(line 491,col 9)-(line 491,col 22)",
            "(line 492,col 9)-(line 492,col 94)",
            "(line 493,col 9)-(line 493,col 23)",
            "(line 494,col 9)-(line 494,col 95)",
            "(line 495,col 9)-(line 495,col 22)",
            "(line 496,col 9)-(line 496,col 94)",
            "(line 497,col 9)-(line 497,col 18)",
            "(line 498,col 9)-(line 498,col 90)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.checkCreateNumber(java.lang.String)",
        "snippet": "    private boolean checkCreateNumber(String val) {\n        try {\n            Object obj = NumberUtils.createNumber(val);\n            if (obj == null) {\n                return false;\n            }\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        } catch (NullPointerException e) {\n            return false;\n        }\n    }",
        "begin_line": 502,
        "end_line": 514,
        "comment": "",
        "child_ranges": [
            "(line 503,col 9)-(line 513,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.NumberUtilsTest.testPublicNoArgConstructor()",
        "snippet": "    public void testPublicNoArgConstructor() {\n        try {\n            NumberUtils nu = new NumberUtils();\n        } catch( Exception e ) {\n            fail( \"Error calling public no-arg constructor\" );\n        }\n    }",
        "begin_line": 516,
        "end_line": 522,
        "comment": "",
        "child_ranges": [
            "(line 517,col 9)-(line 521,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.UnhandledExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/UnhandledExceptionTest.java",
        "signature": "org.apache.commons.lang.UnhandledExceptionTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.UnhandledExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/UnhandledExceptionTest.java",
        "signature": "org.apache.commons.lang.UnhandledExceptionTest.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(UnhandledExceptionTest.class);\n    }",
        "begin_line": 39,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.UnhandledExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/UnhandledExceptionTest.java",
        "signature": "org.apache.commons.lang.UnhandledExceptionTest.UnhandledExceptionTest(java.lang.String)",
        "snippet": "    public UnhandledExceptionTest(String testName) {\n        super(testName);\n    }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.UnhandledExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/UnhandledExceptionTest.java",
        "signature": "org.apache.commons.lang.UnhandledExceptionTest.testConstructor_throwable_nullInput()",
        "snippet": "    public void testConstructor_throwable_nullInput() {\n        final Throwable t = null;\n        new UnhandledException(t);\n    }",
        "begin_line": 49,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 33)",
            "(line 51,col 9)-(line 51,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.UnhandledExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/UnhandledExceptionTest.java",
        "signature": "org.apache.commons.lang.UnhandledExceptionTest.testConstructor_stringAndThrowable_nullInput()",
        "snippet": "    public void testConstructor_stringAndThrowable_nullInput() {\n        new UnhandledException(null, null);\n    }",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.UnhandledExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/UnhandledExceptionTest.java",
        "signature": "org.apache.commons.lang.UnhandledExceptionTest.testGetCause()",
        "snippet": "    public void testGetCause() {\n        final Throwable t = new NullPointerException();\n        final Nestable n = new UnhandledException(t);\n        assertEquals(t, n.getCause());\n    }",
        "begin_line": 60,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 55)",
            "(line 62,col 9)-(line 62,col 53)",
            "(line 63,col 9)-(line 63,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.UnhandledExceptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/UnhandledExceptionTest.java",
        "signature": "org.apache.commons.lang.UnhandledExceptionTest.testGetCauseAndGetMessage()",
        "snippet": "    public void testGetCauseAndGetMessage() {\n        final Throwable t = new NullPointerException();\n        final String msg = \"nullArg\";\n        final Nestable n = new UnhandledException(msg, t);\n        assertEquals(t, n.getCause());\n        assertEquals(msg, n.getMessage());\n    }",
        "begin_line": 66,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 55)",
            "(line 68,col 9)-(line 68,col 37)",
            "(line 69,col 9)-(line 69,col 58)",
            "(line 70,col 9)-(line 70,col 38)",
            "(line 71,col 9)-(line 71,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken3Enum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken3Enum.java",
        "signature": "Broken3Enum.Broken3Enum(java.lang.String)",
        "snippet": "    private Broken3Enum(String color) {\n        super(color);\n    }",
        "begin_line": 34,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken3Enum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken3Enum.java",
        "signature": "Broken3Enum.getEnum(java.lang.String)",
        "snippet": "    public static Broken3Enum getEnum(String color) {\n        return (Broken3Enum) getEnum(Broken3Enum.class, color);\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken3Enum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken3Enum.java",
        "signature": "Broken3Enum.getEnumMap()",
        "snippet": "    public static Map getEnumMap() {\n        return getEnumMap(Broken3Enum.class);\n    }",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken3Enum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken3Enum.java",
        "signature": "Broken3Enum.getEnumList()",
        "snippet": "    public static List getEnumList() {\n        return getEnumList(Broken3Enum.class);\n    }",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken3Enum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken3Enum.java",
        "signature": "Broken3Enum.iterator()",
        "snippet": "    public static Iterator iterator() {\n        return iterator(Broken3Enum.class);\n    }",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.NestReferenced",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/NestReferenced.java",
        "signature": "NestReferenced.NestReferenced()",
        "snippet": "    public NestReferenced() {\n        super();\n    }",
        "begin_line": 39,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 16)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.NestReferenced",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/NestReferenced.java",
        "signature": "NestReferenced.ColorEnum.ColorEnum(java.lang.String)",
        "snippet": "        private ColorEnum(String color) {\n            super(color);\n        }",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 13)-(line 51,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.NestReferenced",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/NestReferenced.java",
        "signature": "NestReferenced.ColorEnum.getEnum(java.lang.String)",
        "snippet": "        public static ColorEnum getEnum(String color) {\n            return (ColorEnum) getEnum(ColorEnum.class, color);\n        }",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 55,col 13)-(line 55,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.NestReferenced",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/NestReferenced.java",
        "signature": "NestReferenced.ColorEnum.getEnumMap()",
        "snippet": "        public static Map getEnumMap() {\n            return getEnumMap(ColorEnum.class);\n        }",
        "begin_line": 58,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 59,col 13)-(line 59,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.NestReferenced",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/NestReferenced.java",
        "signature": "NestReferenced.ColorEnum.getEnumList()",
        "snippet": "        public static List getEnumList() {\n            return getEnumList(ColorEnum.class);\n        }",
        "begin_line": 62,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 63,col 13)-(line 63,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.NestReferenced",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/NestReferenced.java",
        "signature": "NestReferenced.ColorEnum.iterator()",
        "snippet": "        public static Iterator iterator() {\n            return iterator(ColorEnum.class);\n        }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 67,col 13)-(line 67,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.ColorEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/ColorEnum.java",
        "signature": "ColorEnum.ColorEnum(java.lang.String)",
        "snippet": "    private ColorEnum(String color) {\n        super(color);\n    }",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.ColorEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/ColorEnum.java",
        "signature": "ColorEnum.getEnum(java.lang.String)",
        "snippet": "    public static ColorEnum getEnum(String color) {\n        return (ColorEnum) getEnum(ColorEnum.class, color);\n    }",
        "begin_line": 39,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.ColorEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/ColorEnum.java",
        "signature": "ColorEnum.getEnumMap()",
        "snippet": "    public static Map getEnumMap() {\n        return getEnumMap(ColorEnum.class);\n    }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.ColorEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/ColorEnum.java",
        "signature": "ColorEnum.getEnumList()",
        "snippet": "    public static List getEnumList() {\n        return getEnumList(ColorEnum.class);\n    }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.ColorEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/ColorEnum.java",
        "signature": "ColorEnum.iterator()",
        "snippet": "    public static Iterator iterator() {\n        return iterator(ColorEnum.class);\n    }",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken3OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken3OperationEnum.java",
        "signature": "Broken3OperationEnum.PlusOperation.PlusOperation()",
        "snippet": "        private PlusOperation() {\n            super(\"Plus\");\n        }",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 45,col 13)-(line 45,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken3OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken3OperationEnum.java",
        "signature": "Broken3OperationEnum.PlusOperation.eval(int, int)",
        "snippet": "        public int eval(int a, int b) {\n            return (a + b);\n        }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 13)-(line 48,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken3OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken3OperationEnum.java",
        "signature": "Broken3OperationEnum.MinusOperation.MinusOperation()",
        "snippet": "        private MinusOperation() {\n            super(\"Minus\");\n        }",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 54,col 13)-(line 54,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken3OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken3OperationEnum.java",
        "signature": "Broken3OperationEnum.MinusOperation.eval(int, int)",
        "snippet": "        public int eval(int a, int b) {\n            return (a - b);\n        }",
        "begin_line": 56,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 57,col 13)-(line 57,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken3OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken3OperationEnum.java",
        "signature": "Broken3OperationEnum.Broken3OperationEnum(java.lang.String)",
        "snippet": "    private Broken3OperationEnum(String name) {\n        super(name);\n    }",
        "begin_line": 61,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken3OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken3OperationEnum.java",
        "signature": "Broken3OperationEnum.getEnumClass()",
        "snippet": "    public final Class getEnumClass() {\n        return Enum.class;\n    }",
        "begin_line": 65,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken3OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken3OperationEnum.java",
        "signature": "Broken3OperationEnum.eval(int, int)",
        "snippet": "    public abstract int eval(int a, int b);",
        "begin_line": 69,
        "end_line": 69,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken3OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken3OperationEnum.java",
        "signature": "Broken3OperationEnum.getEnum(java.lang.String)",
        "snippet": "    public static Broken3OperationEnum getEnum(String name) {\n        return (Broken3OperationEnum) getEnum(Broken3OperationEnum.class, name);\n    }",
        "begin_line": 71,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken3OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken3OperationEnum.java",
        "signature": "Broken3OperationEnum.getEnumMap()",
        "snippet": "    public static Map getEnumMap() {\n        return getEnumMap(Broken3OperationEnum.class);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken3OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken3OperationEnum.java",
        "signature": "Broken3OperationEnum.getEnumList()",
        "snippet": "    public static List getEnumList() {\n        return getEnumList(Broken3OperationEnum.class);\n    }",
        "begin_line": 79,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken3OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken3OperationEnum.java",
        "signature": "Broken3OperationEnum.iterator()",
        "snippet": "    public static Iterator iterator() {\n        return iterator(Broken3OperationEnum.class);\n    }",
        "begin_line": 83,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken2OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken2OperationEnum.java",
        "signature": "Broken2OperationEnum.PlusOperation.PlusOperation()",
        "snippet": "        private PlusOperation() {\n            super(\"Plus\");\n        }",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 45,col 13)-(line 45,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken2OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken2OperationEnum.java",
        "signature": "Broken2OperationEnum.PlusOperation.eval(int, int)",
        "snippet": "        public int eval(int a, int b) {\n            return (a + b);\n        }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 13)-(line 48,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken2OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken2OperationEnum.java",
        "signature": "Broken2OperationEnum.MinusOperation.MinusOperation()",
        "snippet": "        private MinusOperation() {\n            super(\"Minus\");\n        }",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 54,col 13)-(line 54,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken2OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken2OperationEnum.java",
        "signature": "Broken2OperationEnum.MinusOperation.eval(int, int)",
        "snippet": "        public int eval(int a, int b) {\n            return (a - b);\n        }",
        "begin_line": 56,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 57,col 13)-(line 57,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken2OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken2OperationEnum.java",
        "signature": "Broken2OperationEnum.Broken2OperationEnum(java.lang.String)",
        "snippet": "    private Broken2OperationEnum(String name) {\n        super(name);\n    }",
        "begin_line": 61,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken2OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken2OperationEnum.java",
        "signature": "Broken2OperationEnum.getEnumClass()",
        "snippet": "    public final Class getEnumClass() {\n        return ColorEnum.class;\n    }",
        "begin_line": 65,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken2OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken2OperationEnum.java",
        "signature": "Broken2OperationEnum.eval(int, int)",
        "snippet": "    public abstract int eval(int a, int b);",
        "begin_line": 69,
        "end_line": 69,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken2OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken2OperationEnum.java",
        "signature": "Broken2OperationEnum.getEnum(java.lang.String)",
        "snippet": "    public static Broken2OperationEnum getEnum(String name) {\n        return (Broken2OperationEnum) getEnum(Broken2OperationEnum.class, name);\n    }",
        "begin_line": 71,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken2OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken2OperationEnum.java",
        "signature": "Broken2OperationEnum.getEnumMap()",
        "snippet": "    public static Map getEnumMap() {\n        return getEnumMap(Broken2OperationEnum.class);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken2OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken2OperationEnum.java",
        "signature": "Broken2OperationEnum.getEnumList()",
        "snippet": "    public static List getEnumList() {\n        return getEnumList(Broken2OperationEnum.class);\n    }",
        "begin_line": 79,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken2OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken2OperationEnum.java",
        "signature": "Broken2OperationEnum.iterator()",
        "snippet": "    public static Iterator iterator() {\n        return iterator(Broken2OperationEnum.class);\n    }",
        "begin_line": 83,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Extended2Enum",
        "child_classes": [
            "org.apache.commons.lang.enum.Extended3Enum",
            "org.apache.commons.lang.enums.Extended3Enum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enum/Extended2Enum.java",
        "signature": "Extended2Enum.Extended2Enum(java.lang.String)",
        "snippet": "    protected Extended2Enum(String color) {\n        super(color);\n    }",
        "begin_line": 34,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Extended2Enum",
        "child_classes": [
            "org.apache.commons.lang.enum.Extended3Enum",
            "org.apache.commons.lang.enums.Extended3Enum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enum/Extended2Enum.java",
        "signature": "Extended2Enum.getEnum(java.lang.String)",
        "snippet": "    public static Extended1Enum getEnum(String name) {\n        return (Extended1Enum) getEnum(Extended2Enum.class, name);\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Extended2Enum",
        "child_classes": [
            "org.apache.commons.lang.enum.Extended3Enum",
            "org.apache.commons.lang.enums.Extended3Enum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enum/Extended2Enum.java",
        "signature": "Extended2Enum.getEnumMap()",
        "snippet": "    public static Map getEnumMap() {\n        return getEnumMap(Extended2Enum.class);\n    }",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Extended2Enum",
        "child_classes": [
            "org.apache.commons.lang.enum.Extended3Enum",
            "org.apache.commons.lang.enums.Extended3Enum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enum/Extended2Enum.java",
        "signature": "Extended2Enum.getEnumList()",
        "snippet": "    public static List getEnumList() {\n        return getEnumList(Extended2Enum.class);\n    }",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Extended2Enum",
        "child_classes": [
            "org.apache.commons.lang.enum.Extended3Enum",
            "org.apache.commons.lang.enums.Extended3Enum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enum/Extended2Enum.java",
        "signature": "Extended2Enum.iterator()",
        "snippet": "    public static Iterator iterator() {\n        return iterator(Extended2Enum.class);\n    }",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Extended3Enum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Extended3Enum.java",
        "signature": "Extended3Enum.Extended3Enum(java.lang.String)",
        "snippet": "    protected Extended3Enum(String name) {\n        super(name);\n    }",
        "begin_line": 34,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Extended3Enum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Extended3Enum.java",
        "signature": "Extended3Enum.getEnum(java.lang.String)",
        "snippet": "    public static Extended1Enum getEnum(String name) {\n        return (Extended1Enum) Enum.getEnum(Extended3Enum.class, name);\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Extended3Enum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Extended3Enum.java",
        "signature": "Extended3Enum.getEnumMap()",
        "snippet": "    public static Map getEnumMap() {\n        return Enum.getEnumMap(Extended3Enum.class);\n    }",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Extended3Enum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Extended3Enum.java",
        "signature": "Extended3Enum.getEnumList()",
        "snippet": "    public static List getEnumList() {\n        return Enum.getEnumList(Extended3Enum.class);\n    }",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Extended3Enum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Extended3Enum.java",
        "signature": "Extended3Enum.iterator()",
        "snippet": "    public static Iterator iterator() {\n        return Enum.iterator(Extended3Enum.class);\n    }",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken1Enum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken1Enum.java",
        "signature": "Broken1Enum.Broken1Enum(java.lang.String)",
        "snippet": "    private Broken1Enum(String color) {\n        super(color);\n    }",
        "begin_line": 34,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken1Enum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken1Enum.java",
        "signature": "Broken1Enum.getEnum(java.lang.String)",
        "snippet": "    public static Broken1Enum getEnum(String color) {\n        return (Broken1Enum) getEnum(Broken1Enum.class, color);\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken1Enum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken1Enum.java",
        "signature": "Broken1Enum.getEnumMap()",
        "snippet": "    public static Map getEnumMap() {\n        return getEnumMap(Broken1Enum.class);\n    }",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken1Enum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken1Enum.java",
        "signature": "Broken1Enum.getEnumList()",
        "snippet": "    public static List getEnumList() {\n        return getEnumList(Broken1Enum.class);\n    }",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken1Enum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken1Enum.java",
        "signature": "Broken1Enum.iterator()",
        "snippet": "    public static Iterator iterator() {\n        return iterator(Broken1Enum.class);\n    }",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Extended1Enum",
        "child_classes": [
            "org.apache.commons.lang.enums.Extended2Enum",
            "org.apache.commons.lang.enum.Extended3Enum",
            "org.apache.commons.lang.enum.Extended2Enum",
            "org.apache.commons.lang.enums.Extended3Enum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enum/Extended1Enum.java",
        "signature": "Extended1Enum.Extended1Enum(java.lang.String)",
        "snippet": "    protected Extended1Enum(String name) {\n        super(name);\n    }",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Extended1Enum",
        "child_classes": [
            "org.apache.commons.lang.enums.Extended2Enum",
            "org.apache.commons.lang.enum.Extended3Enum",
            "org.apache.commons.lang.enum.Extended2Enum",
            "org.apache.commons.lang.enums.Extended3Enum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enum/Extended1Enum.java",
        "signature": "Extended1Enum.getEnum(java.lang.String)",
        "snippet": "    public static Extended1Enum getEnum(String name) {\n        return (Extended1Enum) getEnum(Extended1Enum.class, name);\n    }",
        "begin_line": 39,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Extended1Enum",
        "child_classes": [
            "org.apache.commons.lang.enums.Extended2Enum",
            "org.apache.commons.lang.enum.Extended3Enum",
            "org.apache.commons.lang.enum.Extended2Enum",
            "org.apache.commons.lang.enums.Extended3Enum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enum/Extended1Enum.java",
        "signature": "Extended1Enum.getEnumMap()",
        "snippet": "    public static Map getEnumMap() {\n        return getEnumMap(Extended1Enum.class);\n    }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Extended1Enum",
        "child_classes": [
            "org.apache.commons.lang.enums.Extended2Enum",
            "org.apache.commons.lang.enum.Extended3Enum",
            "org.apache.commons.lang.enum.Extended2Enum",
            "org.apache.commons.lang.enums.Extended3Enum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enum/Extended1Enum.java",
        "signature": "Extended1Enum.getEnumList()",
        "snippet": "    public static List getEnumList() {\n        return getEnumList(Extended1Enum.class);\n    }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Extended1Enum",
        "child_classes": [
            "org.apache.commons.lang.enums.Extended2Enum",
            "org.apache.commons.lang.enum.Extended3Enum",
            "org.apache.commons.lang.enum.Extended2Enum",
            "org.apache.commons.lang.enums.Extended3Enum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enum/Extended1Enum.java",
        "signature": "Extended1Enum.iterator()",
        "snippet": "    public static Iterator iterator() {\n        return iterator(Extended1Enum.class);\n    }",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.ValuedEnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/ValuedEnumTest.java",
        "signature": "ValuedEnumTest.ValuedEnumTest(java.lang.String)",
        "snippet": "    public ValuedEnumTest(String name) {\n        super(name);\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.ValuedEnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/ValuedEnumTest.java",
        "signature": "ValuedEnumTest.setUp()",
        "snippet": "    public void setUp() {\n    }",
        "begin_line": 42,
        "end_line": 43,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.enum.ValuedEnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/ValuedEnumTest.java",
        "signature": "ValuedEnumTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(ValuedEnumTest.class);\n        suite.setName(\"ValuedEnum Tests\");\n        return suite;\n    }",
        "begin_line": 45,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 62)",
            "(line 47,col 9)-(line 47,col 42)",
            "(line 48,col 9)-(line 48,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.ValuedEnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/ValuedEnumTest.java",
        "signature": "ValuedEnumTest.testName()",
        "snippet": "    public void testName() {\n        assertEquals(\"Red\", ValuedColorEnum.RED.getName());\n        assertEquals(\"Green\", ValuedColorEnum.GREEN.getName());\n        assertEquals(\"Blue\", ValuedColorEnum.BLUE.getName());\n    }",
        "begin_line": 51,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 59)",
            "(line 53,col 9)-(line 53,col 63)",
            "(line 54,col 9)-(line 54,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.ValuedEnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/ValuedEnumTest.java",
        "signature": "ValuedEnumTest.testValue()",
        "snippet": "    public void testValue() {\n        assertEquals(1, ValuedColorEnum.RED.getValue());\n        assertEquals(2, ValuedColorEnum.GREEN.getValue());\n        assertEquals(3, ValuedColorEnum.BLUE.getValue());\n    }",
        "begin_line": 57,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 58,col 9)-(line 58,col 56)",
            "(line 59,col 9)-(line 59,col 58)",
            "(line 60,col 9)-(line 60,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.ValuedEnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/ValuedEnumTest.java",
        "signature": "ValuedEnumTest.testCompareTo()",
        "snippet": "    public void testCompareTo() {\n        assertTrue(ValuedColorEnum.BLUE.compareTo(ValuedColorEnum.BLUE) == 0);\n        assertTrue(ValuedColorEnum.RED.compareTo(ValuedColorEnum.BLUE) < 0);\n        assertTrue(ValuedColorEnum.BLUE.compareTo(ValuedColorEnum.RED) > 0);\n    }",
        "begin_line": 63,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 78)",
            "(line 65,col 9)-(line 65,col 76)",
            "(line 66,col 9)-(line 66,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.ValuedEnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/ValuedEnumTest.java",
        "signature": "ValuedEnumTest.testEquals()",
        "snippet": "    public void testEquals() {\n        assertSame(ValuedColorEnum.RED, ValuedColorEnum.RED);\n        assertSame(ValuedColorEnum.getEnum(\"Red\"), ValuedColorEnum.RED);\n    }",
        "begin_line": 69,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 61)",
            "(line 71,col 9)-(line 71,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.ValuedEnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/ValuedEnumTest.java",
        "signature": "ValuedEnumTest.testToString()",
        "snippet": "    public void testToString() {\n        String toString = ValuedColorEnum.RED.toString();\n        assertEquals(\"ValuedColorEnum[Red=1]\", toString);\n        assertSame(toString, ValuedColorEnum.RED.toString());\n    }",
        "begin_line": 74,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 57)",
            "(line 76,col 9)-(line 76,col 57)",
            "(line 77,col 9)-(line 77,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.ValuedEnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/ValuedEnumTest.java",
        "signature": "ValuedEnumTest.testIterator()",
        "snippet": "    public void testIterator() {\n        Iterator it = ValuedColorEnum.iterator();\n        assertSame(ValuedColorEnum.RED, it.next());\n        assertSame(ValuedColorEnum.GREEN, it.next());\n        assertSame(ValuedColorEnum.BLUE, it.next());\n    }",
        "begin_line": 80,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 49)",
            "(line 82,col 9)-(line 82,col 51)",
            "(line 83,col 9)-(line 83,col 53)",
            "(line 84,col 9)-(line 84,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.ValuedEnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/ValuedEnumTest.java",
        "signature": "ValuedEnumTest.testList()",
        "snippet": "    public void testList() {\n        List list = ValuedColorEnum.getEnumList();\n        \n        assertNotNull(list);\n        \n        assertEquals( list.size(),\n                     ValuedColorEnum.getEnumMap().keySet().size());\n        \n        Iterator it = list.iterator();\n        assertSame(ValuedColorEnum.RED, it.next());\n        assertSame(ValuedColorEnum.GREEN, it.next());\n        assertSame(ValuedColorEnum.BLUE, it.next());\n    }",
        "begin_line": 87,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 50)",
            "(line 90,col 9)-(line 90,col 28)",
            "(line 92,col 9)-(line 93,col 67)",
            "(line 95,col 9)-(line 95,col 38)",
            "(line 96,col 9)-(line 96,col 51)",
            "(line 97,col 9)-(line 97,col 53)",
            "(line 98,col 9)-(line 98,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.ValuedEnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/ValuedEnumTest.java",
        "signature": "ValuedEnumTest.testMap()",
        "snippet": "    public void testMap() {\n        Map map = ValuedColorEnum.getEnumMap();\n        \n        assertNotNull(map);\n        \n        assertEquals( map.keySet().size(),\n                     ValuedColorEnum.getEnumList().size());\n                     \n        assertTrue(map.containsValue(ValuedColorEnum.RED));\n        assertTrue(map.containsValue(ValuedColorEnum.GREEN));\n        assertTrue(map.containsValue(ValuedColorEnum.BLUE));\n        assertSame(ValuedColorEnum.RED, map.get(\"Red\"));\n        assertSame(ValuedColorEnum.GREEN, map.get(\"Green\"));\n        assertSame(ValuedColorEnum.BLUE, map.get(\"Blue\"));\n    }",
        "begin_line": 101,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 47)",
            "(line 104,col 9)-(line 104,col 27)",
            "(line 106,col 9)-(line 107,col 59)",
            "(line 109,col 9)-(line 109,col 59)",
            "(line 110,col 9)-(line 110,col 61)",
            "(line 111,col 9)-(line 111,col 60)",
            "(line 112,col 9)-(line 112,col 56)",
            "(line 113,col 9)-(line 113,col 60)",
            "(line 114,col 9)-(line 114,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.ValuedEnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/ValuedEnumTest.java",
        "signature": "ValuedEnumTest.testGet()",
        "snippet": "    public void testGet() {\n        assertSame(ValuedColorEnum.RED, ValuedColorEnum.getEnum(\"Red\"));\n        assertSame(ValuedColorEnum.GREEN, ValuedColorEnum.getEnum(\"Green\"));\n        assertSame(ValuedColorEnum.BLUE, ValuedColorEnum.getEnum(\"Blue\"));\n        assertSame(null, ValuedColorEnum.getEnum(\"Pink\"));\n    }",
        "begin_line": 117,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 118,col 9)-(line 118,col 72)",
            "(line 119,col 9)-(line 119,col 76)",
            "(line 120,col 9)-(line 120,col 74)",
            "(line 121,col 9)-(line 121,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.ValuedEnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/ValuedEnumTest.java",
        "signature": "ValuedEnumTest.testGetValue()",
        "snippet": "    public void testGetValue() {\n        assertSame(ValuedColorEnum.RED, ValuedColorEnum.getEnum(1));\n        assertSame(ValuedColorEnum.GREEN, ValuedColorEnum.getEnum(2));\n        assertSame(ValuedColorEnum.BLUE, ValuedColorEnum.getEnum(3));\n        assertSame(null, ValuedColorEnum.getEnum(4));\n    }",
        "begin_line": 124,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 68)",
            "(line 126,col 9)-(line 126,col 70)",
            "(line 127,col 9)-(line 127,col 69)",
            "(line 128,col 9)-(line 128,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.ValuedEnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/ValuedEnumTest.java",
        "signature": "ValuedEnumTest.testSerialization()",
        "snippet": "    public void testSerialization() {\n        assertSame(ValuedColorEnum.RED, SerializationUtils.clone(ValuedColorEnum.RED));\n        assertSame(ValuedColorEnum.GREEN, SerializationUtils.clone(ValuedColorEnum.GREEN));\n        assertSame(ValuedColorEnum.BLUE, SerializationUtils.clone(ValuedColorEnum.BLUE));\n    }",
        "begin_line": 131,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 132,col 9)-(line 132,col 87)",
            "(line 133,col 9)-(line 133,col 91)",
            "(line 134,col 9)-(line 134,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumUtilsTest.java",
        "signature": "EnumUtilsTest.EnumUtilsTest(java.lang.String)",
        "snippet": "    public EnumUtilsTest(String name) {\n        super(name);\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumUtilsTest.java",
        "signature": "EnumUtilsTest.setUp()",
        "snippet": "    public void setUp() {\n    }",
        "begin_line": 42,
        "end_line": 43,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumUtilsTest.java",
        "signature": "EnumUtilsTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(EnumUtilsTest.class);\n        suite.setName(\"EnumUtils Tests\");\n        return suite;\n    }",
        "begin_line": 45,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 61)",
            "(line 47,col 9)-(line 47,col 41)",
            "(line 48,col 9)-(line 48,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumUtilsTest.java",
        "signature": "EnumUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new EnumUtils());\n        Constructor[] cons = EnumUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(EnumUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(EnumUtils.class.getModifiers()));\n    }",
        "begin_line": 52,
        "end_line": 59,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 39)",
            "(line 54,col 9)-(line 54,col 71)",
            "(line 55,col 9)-(line 55,col 37)",
            "(line 56,col 9)-(line 56,col 70)",
            "(line 57,col 9)-(line 57,col 78)",
            "(line 58,col 9)-(line 58,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumUtilsTest.java",
        "signature": "EnumUtilsTest.testIterator()",
        "snippet": "    public void testIterator() {\n        Iterator it = EnumUtils.iterator(ColorEnum.class);\n        assertSame(ColorEnum.RED, it.next());\n        assertSame(ColorEnum.GREEN, it.next());\n        assertSame(ColorEnum.BLUE, it.next());\n        it = EnumUtils.iterator(DummyEnum.class);\n        assertEquals(false, it.hasNext());\n    }",
        "begin_line": 62,
        "end_line": 69,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 58)",
            "(line 64,col 9)-(line 64,col 45)",
            "(line 65,col 9)-(line 65,col 47)",
            "(line 66,col 9)-(line 66,col 46)",
            "(line 67,col 9)-(line 67,col 49)",
            "(line 68,col 9)-(line 68,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumUtilsTest.java",
        "signature": "EnumUtilsTest.testIteratorEx()",
        "snippet": "    public void testIteratorEx() {\n        try {\n            EnumUtils.iterator(null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            EnumUtils.iterator(Object.class);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 71,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 75,col 48)",
            "(line 76,col 9)-(line 79,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumUtilsTest.java",
        "signature": "EnumUtilsTest.testList()",
        "snippet": "    public void testList() {\n        List list = EnumUtils.getEnumList(ColorEnum.class);\n        Iterator it = list.iterator();\n        assertSame(ColorEnum.RED, it.next());\n        assertSame(ColorEnum.GREEN, it.next());\n        assertSame(ColorEnum.BLUE, it.next());\n        list = EnumUtils.getEnumList(DummyEnum.class);\n        assertEquals(0, list.size());\n    }",
        "begin_line": 83,
        "end_line": 91,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 59)",
            "(line 85,col 9)-(line 85,col 38)",
            "(line 86,col 9)-(line 86,col 45)",
            "(line 87,col 9)-(line 87,col 47)",
            "(line 88,col 9)-(line 88,col 46)",
            "(line 89,col 9)-(line 89,col 54)",
            "(line 90,col 9)-(line 90,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumUtilsTest.java",
        "signature": "EnumUtilsTest.testListEx()",
        "snippet": "    public void testListEx() {\n        try {\n            EnumUtils.getEnumList(null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            EnumUtils.getEnumList(Object.class);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 93,
        "end_line": 102,
        "comment": "",
        "child_ranges": [
            "(line 94,col 9)-(line 97,col 48)",
            "(line 98,col 9)-(line 101,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumUtilsTest.java",
        "signature": "EnumUtilsTest.testMap()",
        "snippet": "    public void testMap() {\n        Map map = EnumUtils.getEnumMap(ColorEnum.class);\n        assertTrue(map.containsValue(ColorEnum.RED));\n        assertTrue(map.containsValue(ColorEnum.GREEN));\n        assertTrue(map.containsValue(ColorEnum.BLUE));\n        assertSame(ColorEnum.RED, map.get(\"Red\"));\n        assertSame(ColorEnum.GREEN, map.get(\"Green\"));\n        assertSame(ColorEnum.BLUE, map.get(\"Blue\"));\n        map = EnumUtils.getEnumMap(DummyEnum.class);\n        assertEquals(0, map.size());\n    }",
        "begin_line": 105,
        "end_line": 115,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 56)",
            "(line 107,col 9)-(line 107,col 53)",
            "(line 108,col 9)-(line 108,col 55)",
            "(line 109,col 9)-(line 109,col 54)",
            "(line 110,col 9)-(line 110,col 50)",
            "(line 111,col 9)-(line 111,col 54)",
            "(line 112,col 9)-(line 112,col 52)",
            "(line 113,col 9)-(line 113,col 52)",
            "(line 114,col 9)-(line 114,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumUtilsTest.java",
        "signature": "EnumUtilsTest.testMapEx()",
        "snippet": "    public void testMapEx() {\n        try {\n            EnumUtils.getEnumMap(null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            EnumUtils.getEnumMap(Object.class);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 117,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 118,col 9)-(line 121,col 48)",
            "(line 122,col 9)-(line 125,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumUtilsTest.java",
        "signature": "EnumUtilsTest.testGet()",
        "snippet": "    public void testGet() {\n        assertSame(ColorEnum.RED, EnumUtils.getEnum(ColorEnum.class, \"Red\"));\n        assertSame(ColorEnum.GREEN, EnumUtils.getEnum(ColorEnum.class, \"Green\"));\n        assertSame(ColorEnum.BLUE, EnumUtils.getEnum(ColorEnum.class, \"Blue\"));\n        assertSame(null, EnumUtils.getEnum(ColorEnum.class, \"Pink\"));\n        assertSame(null, EnumUtils.getEnum(DummyEnum.class, \"Pink\"));\n    }",
        "begin_line": 129,
        "end_line": 135,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 130,col 9)-(line 130,col 77)",
            "(line 131,col 9)-(line 131,col 81)",
            "(line 132,col 9)-(line 132,col 79)",
            "(line 133,col 9)-(line 133,col 69)",
            "(line 134,col 9)-(line 134,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumUtilsTest.java",
        "signature": "EnumUtilsTest.testGetEx()",
        "snippet": "    public void testGetEx() {\n        try {\n            EnumUtils.getEnum(null, \"\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            EnumUtils.getEnum(Object.class, \"Red\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 137,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 138,col 9)-(line 141,col 48)",
            "(line 142,col 9)-(line 145,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumUtilsTest.java",
        "signature": "EnumUtilsTest.testGetValue()",
        "snippet": "    public void testGetValue() {\n        assertSame(ValuedColorEnum.RED, EnumUtils.getEnum(ValuedColorEnum.class, 1));\n        assertSame(ValuedColorEnum.GREEN, EnumUtils.getEnum(ValuedColorEnum.class, 2));\n        assertSame(ValuedColorEnum.BLUE, EnumUtils.getEnum(ValuedColorEnum.class, 3));\n        assertSame(null, EnumUtils.getEnum(ValuedColorEnum.class, 4));\n        assertSame(null, EnumUtils.getEnum(DummyEnum.class, 5));\n    }",
        "begin_line": 149,
        "end_line": 155,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 150,col 9)-(line 150,col 85)",
            "(line 151,col 9)-(line 151,col 87)",
            "(line 152,col 9)-(line 152,col 86)",
            "(line 153,col 9)-(line 153,col 70)",
            "(line 154,col 9)-(line 154,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumUtilsTest.java",
        "signature": "EnumUtilsTest.testGetValueEx()",
        "snippet": "    public void testGetValueEx() {\n        try {\n            EnumUtils.getEnum(null, 0);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            EnumUtils.getEnum(Object.class, 2);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 157,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 158,col 9)-(line 161,col 48)",
            "(line 162,col 9)-(line 165,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Nest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Nest.java",
        "signature": "Nest.Nest()",
        "snippet": "    public Nest() {\n        super();\n    }",
        "begin_line": 34,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 16)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Nest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Nest.java",
        "signature": "Nest.ColorEnum.ColorEnum(java.lang.String)",
        "snippet": "        private ColorEnum(String color) {\n            super(color);\n        }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 13)-(line 44,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Nest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Nest.java",
        "signature": "Nest.ColorEnum.getEnum(java.lang.String)",
        "snippet": "        public static ColorEnum getEnum(String color) {\n            return (ColorEnum) getEnum(ColorEnum.class, color);\n        }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 13)-(line 48,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Nest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Nest.java",
        "signature": "Nest.ColorEnum.getEnumMap()",
        "snippet": "        public static Map getEnumMap() {\n            return getEnumMap(ColorEnum.class);\n        }",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 52,col 13)-(line 52,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Nest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Nest.java",
        "signature": "Nest.ColorEnum.getEnumList()",
        "snippet": "        public static List getEnumList() {\n            return getEnumList(ColorEnum.class);\n        }",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 56,col 13)-(line 56,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Nest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Nest.java",
        "signature": "Nest.ColorEnum.iterator()",
        "snippet": "        public static Iterator iterator() {\n            return iterator(ColorEnum.class);\n        }",
        "begin_line": 59,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 60,col 13)-(line 60,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.DummyEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/DummyEnum.java",
        "signature": "DummyEnum.DummyEnum(java.lang.String)",
        "snippet": "    private DummyEnum(String name) {\n        super(name);\n    }",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken5OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken5OperationEnum.java",
        "signature": "Broken5OperationEnum.PlusOperation.PlusOperation()",
        "snippet": "        private PlusOperation() {\n            super(\"Plus\");\n        }",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 45,col 13)-(line 45,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken5OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken5OperationEnum.java",
        "signature": "Broken5OperationEnum.PlusOperation.eval(int, int)",
        "snippet": "        public int eval(int a, int b) {\n            return (a + b);\n        }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 13)-(line 48,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken5OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken5OperationEnum.java",
        "signature": "Broken5OperationEnum.MinusOperation.MinusOperation()",
        "snippet": "        private MinusOperation() {\n            super(\"Minus\");\n        }",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 54,col 13)-(line 54,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken5OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken5OperationEnum.java",
        "signature": "Broken5OperationEnum.MinusOperation.eval(int, int)",
        "snippet": "        public int eval(int a, int b) {\n            return (a - b);\n        }",
        "begin_line": 56,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 57,col 13)-(line 57,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken5OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken5OperationEnum.java",
        "signature": "Broken5OperationEnum.Broken5OperationEnum(java.lang.String)",
        "snippet": "    private Broken5OperationEnum(String name) {\n        super(name);\n    }",
        "begin_line": 61,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken5OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken5OperationEnum.java",
        "signature": "Broken5OperationEnum.getEnumClass()",
        "snippet": "    public final Class getEnumClass() {\n        return String.class;\n    }",
        "begin_line": 65,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken5OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken5OperationEnum.java",
        "signature": "Broken5OperationEnum.eval(int, int)",
        "snippet": "    public abstract int eval(int a, int b);",
        "begin_line": 69,
        "end_line": 69,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken5OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken5OperationEnum.java",
        "signature": "Broken5OperationEnum.getEnum(java.lang.String)",
        "snippet": "    public static Broken5OperationEnum getEnum(String name) {\n        return (Broken5OperationEnum) getEnum(Broken5OperationEnum.class, name);\n    }",
        "begin_line": 71,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken5OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken5OperationEnum.java",
        "signature": "Broken5OperationEnum.getEnumMap()",
        "snippet": "    public static Map getEnumMap() {\n        return getEnumMap(Broken5OperationEnum.class);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken5OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken5OperationEnum.java",
        "signature": "Broken5OperationEnum.getEnumList()",
        "snippet": "    public static List getEnumList() {\n        return getEnumList(Broken5OperationEnum.class);\n    }",
        "begin_line": 79,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken5OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken5OperationEnum.java",
        "signature": "Broken5OperationEnum.iterator()",
        "snippet": "    public static Iterator iterator() {\n        return iterator(Broken5OperationEnum.class);\n    }",
        "begin_line": 83,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken2Enum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken2Enum.java",
        "signature": "Broken2Enum.Broken2Enum(java.lang.String)",
        "snippet": "    private Broken2Enum(String color) {\n        super(color);\n    }",
        "begin_line": 34,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken2Enum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken2Enum.java",
        "signature": "Broken2Enum.getEnum(java.lang.String)",
        "snippet": "    public static Broken2Enum getEnum(String color) {\n        return (Broken2Enum) getEnum(Broken2Enum.class, color);\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken2Enum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken2Enum.java",
        "signature": "Broken2Enum.getEnumMap()",
        "snippet": "    public static Map getEnumMap() {\n        return getEnumMap(Broken2Enum.class);\n    }",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken2Enum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken2Enum.java",
        "signature": "Broken2Enum.getEnumList()",
        "snippet": "    public static List getEnumList() {\n        return getEnumList(Broken2Enum.class);\n    }",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken2Enum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken2Enum.java",
        "signature": "Broken2Enum.iterator()",
        "snippet": "    public static Iterator iterator() {\n        return iterator(Broken2Enum.class);\n    }",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.EnumTest(java.lang.String)",
        "snippet": "    public EnumTest(String name) {\n        super(name);\n    }",
        "begin_line": 49,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.setUp()",
        "snippet": "    public void setUp() {\n    }",
        "begin_line": 53,
        "end_line": 54,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(EnumTest.class);\n        suite.setName(\"Enum Tests\");\n        return suite;\n    }",
        "begin_line": 56,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 56)",
            "(line 58,col 9)-(line 58,col 36)",
            "(line 59,col 9)-(line 59,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.testName()",
        "snippet": "    public void testName() {\n        assertEquals(\"Red\", ColorEnum.RED.getName());\n        assertEquals(\"Green\", ColorEnum.GREEN.getName());\n        assertEquals(\"Blue\", ColorEnum.BLUE.getName());\n    }",
        "begin_line": 62,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 53)",
            "(line 64,col 9)-(line 64,col 57)",
            "(line 65,col 9)-(line 65,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.testCompareTo()",
        "snippet": "    public void testCompareTo() {\n        assertTrue(ColorEnum.BLUE.compareTo(ColorEnum.BLUE) == 0);\n        assertTrue(ColorEnum.RED.compareTo(ColorEnum.BLUE) > 0);\n        assertTrue(ColorEnum.BLUE.compareTo(ColorEnum.RED) < 0);\n        try {\n            ColorEnum.RED.compareTo(null);\n            fail();\n        } catch (NullPointerException ex) {\n        }\n        try {\n            ColorEnum.RED.compareTo(new Object());\n            fail();\n        } catch (ClassCastException ex) {\n        }\n    }",
        "begin_line": 68,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 66)",
            "(line 70,col 9)-(line 70,col 64)",
            "(line 71,col 9)-(line 71,col 64)",
            "(line 72,col 9)-(line 76,col 9)",
            "(line 77,col 9)-(line 81,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.testEquals()",
        "snippet": "    public void testEquals() {\n        assertSame(ColorEnum.RED, ColorEnum.RED);\n        assertSame(ColorEnum.getEnum(\"Red\"), ColorEnum.RED);\n        assertEquals(false, ColorEnum.RED.equals(null));\n        assertEquals(true, ColorEnum.RED.equals(ColorEnum.RED));\n        assertEquals(true, ColorEnum.RED.equals(ColorEnum.getEnum(\"Red\")));\n    }",
        "begin_line": 84,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 49)",
            "(line 86,col 9)-(line 86,col 60)",
            "(line 87,col 9)-(line 87,col 56)",
            "(line 88,col 9)-(line 88,col 64)",
            "(line 89,col 9)-(line 89,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.testHashCode()",
        "snippet": "    public void testHashCode() {\n        assertEquals(ColorEnum.RED.hashCode(), ColorEnum.RED.hashCode());\n        assertEquals(7 + ColorEnum.class.hashCode() + 3 * \"Red\".hashCode(), ColorEnum.RED.hashCode());\n    }",
        "begin_line": 92,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 73)",
            "(line 94,col 9)-(line 94,col 102)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.testToString()",
        "snippet": "    public void testToString() {\n        String toString = ColorEnum.RED.toString();\n        assertEquals(\"ColorEnum[Red]\", toString);\n        assertSame(toString, ColorEnum.RED.toString());\n    }",
        "begin_line": 97,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 51)",
            "(line 99,col 9)-(line 99,col 49)",
            "(line 100,col 9)-(line 100,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.testIterator()",
        "snippet": "    public void testIterator() {\n        Iterator it = ColorEnum.iterator();\n        assertSame(ColorEnum.RED, it.next());\n        assertSame(ColorEnum.GREEN, it.next());\n        assertSame(ColorEnum.BLUE, it.next());\n    }",
        "begin_line": 103,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 43)",
            "(line 105,col 9)-(line 105,col 45)",
            "(line 106,col 9)-(line 106,col 47)",
            "(line 107,col 9)-(line 107,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.testList()",
        "snippet": "    public void testList() {\n        List list = new ArrayList(ColorEnum.getEnumList());\n\n        assertNotNull(list);\n\n        assertEquals(list.size(), ColorEnum.getEnumMap().keySet().size());\n\n        Iterator it = list.iterator();\n        assertSame(ColorEnum.RED, it.next());\n        assertSame(ColorEnum.GREEN, it.next());\n        assertSame(ColorEnum.BLUE, it.next());\n    }",
        "begin_line": 110,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 59)",
            "(line 113,col 9)-(line 113,col 28)",
            "(line 115,col 9)-(line 115,col 74)",
            "(line 117,col 9)-(line 117,col 38)",
            "(line 118,col 9)-(line 118,col 45)",
            "(line 119,col 9)-(line 119,col 47)",
            "(line 120,col 9)-(line 120,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.testMap()",
        "snippet": "    public void testMap() {\n        Map map = new HashMap(ColorEnum.getEnumMap());\n\n        assertNotNull(map);\n        assertTrue(map.containsValue(ColorEnum.RED));\n        assertTrue(map.containsValue(ColorEnum.GREEN));\n        assertTrue(map.containsValue(ColorEnum.BLUE));\n        assertSame(ColorEnum.RED, map.get(\"Red\"));\n        assertSame(ColorEnum.GREEN, map.get(\"Green\"));\n        assertSame(ColorEnum.BLUE, map.get(\"Blue\"));\n        assertEquals(map.keySet().size(), ColorEnum.getEnumList().size());\n    }",
        "begin_line": 123,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 124,col 9)-(line 124,col 54)",
            "(line 126,col 9)-(line 126,col 27)",
            "(line 127,col 9)-(line 127,col 53)",
            "(line 128,col 9)-(line 128,col 55)",
            "(line 129,col 9)-(line 129,col 54)",
            "(line 130,col 9)-(line 130,col 50)",
            "(line 131,col 9)-(line 131,col 54)",
            "(line 132,col 9)-(line 132,col 52)",
            "(line 133,col 9)-(line 133,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.testGet()",
        "snippet": "    public void testGet() {\n        assertSame(ColorEnum.RED, ColorEnum.getEnum(\"Red\"));\n        assertSame(ColorEnum.GREEN, ColorEnum.getEnum(\"Green\"));\n        assertSame(ColorEnum.BLUE, ColorEnum.getEnum(\"Blue\"));\n        assertSame(null, ColorEnum.getEnum(\"Pink\"));\n    }",
        "begin_line": 136,
        "end_line": 141,
        "comment": "",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 60)",
            "(line 138,col 9)-(line 138,col 64)",
            "(line 139,col 9)-(line 139,col 62)",
            "(line 140,col 9)-(line 140,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.testSerialization()",
        "snippet": "    public void testSerialization() {\n        int hashCode = ColorEnum.RED.hashCode();\n        assertSame(ColorEnum.RED, SerializationUtils.clone(ColorEnum.RED));\n        assertEquals(hashCode, SerializationUtils.clone(ColorEnum.RED).hashCode());\n        assertSame(ColorEnum.GREEN, SerializationUtils.clone(ColorEnum.GREEN));\n        assertSame(ColorEnum.BLUE, SerializationUtils.clone(ColorEnum.BLUE));\n    }",
        "begin_line": 143,
        "end_line": 149,
        "comment": "",
        "child_ranges": [
            "(line 144,col 9)-(line 144,col 48)",
            "(line 145,col 9)-(line 145,col 75)",
            "(line 146,col 9)-(line 146,col 83)",
            "(line 147,col 9)-(line 147,col 79)",
            "(line 148,col 9)-(line 148,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.testBroken1()",
        "snippet": "    public void testBroken1() {\n        try {\n            Broken1Enum.RED.getName();\n            fail();\n        } catch (ExceptionInInitializerError ex) {\n            assertTrue(ex.getException() instanceof IllegalArgumentException);\n        }\n    }",
        "begin_line": 151,
        "end_line": 158,
        "comment": "",
        "child_ranges": [
            "(line 152,col 9)-(line 157,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.testBroken2()",
        "snippet": "    public void testBroken2() {\n        try {\n            Broken2Enum.RED.getName();\n            fail();\n        } catch (ExceptionInInitializerError ex) {\n            assertTrue(ex.getException() instanceof IllegalArgumentException);\n        }\n    }",
        "begin_line": 160,
        "end_line": 167,
        "comment": "",
        "child_ranges": [
            "(line 161,col 9)-(line 166,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.testBroken3()",
        "snippet": "    public void testBroken3() {\n        try {\n            Broken3Enum.RED.getName();\n            fail();\n        } catch (ExceptionInInitializerError ex) {\n            assertTrue(ex.getException() instanceof IllegalArgumentException);\n        }\n    }",
        "begin_line": 169,
        "end_line": 176,
        "comment": "",
        "child_ranges": [
            "(line 170,col 9)-(line 175,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.testBroken1Operation()",
        "snippet": "    public void testBroken1Operation() {\n        try {\n            Broken1OperationEnum.PLUS.getName();\n            fail();\n        } catch (ExceptionInInitializerError ex) {\n            assertTrue(ex.getException() instanceof IllegalArgumentException);\n        }\n    }",
        "begin_line": 178,
        "end_line": 185,
        "comment": "",
        "child_ranges": [
            "(line 179,col 9)-(line 184,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.testBroken2Operation()",
        "snippet": "    public void testBroken2Operation() {\n        try {\n            Broken2OperationEnum.PLUS.getName();\n            fail();\n        } catch (ExceptionInInitializerError ex) {\n            assertTrue(ex.getException() instanceof IllegalArgumentException);\n        }\n    }",
        "begin_line": 187,
        "end_line": 194,
        "comment": "",
        "child_ranges": [
            "(line 188,col 9)-(line 193,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.testBroken3Operation()",
        "snippet": "    public void testBroken3Operation() {\n        try {\n            Broken3OperationEnum.PLUS.getName();\n            fail();\n        } catch (ExceptionInInitializerError ex) {\n            assertTrue(ex.getException() instanceof IllegalArgumentException);\n        }\n    }",
        "begin_line": 196,
        "end_line": 203,
        "comment": "",
        "child_ranges": [
            "(line 197,col 9)-(line 202,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.testBroken4Operation()",
        "snippet": "    public void testBroken4Operation() {\n        try {\n            Broken4OperationEnum.PLUS.getName();\n            fail();\n        } catch (ExceptionInInitializerError ex) {\n            assertTrue(ex.getException() instanceof IllegalArgumentException);\n        }\n    }",
        "begin_line": 205,
        "end_line": 212,
        "comment": "",
        "child_ranges": [
            "(line 206,col 9)-(line 211,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.testBroken5Operation()",
        "snippet": "    public void testBroken5Operation() {\n        try {\n            Broken5OperationEnum.PLUS.getName();\n            fail();\n        } catch (ExceptionInInitializerError ex) {\n            assertTrue(ex.getException() instanceof IllegalArgumentException);\n        }\n    }",
        "begin_line": 214,
        "end_line": 221,
        "comment": "",
        "child_ranges": [
            "(line 215,col 9)-(line 220,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.testOperationGet()",
        "snippet": "    public void testOperationGet() {\n        assertSame(OperationEnum.PLUS, OperationEnum.getEnum(\"Plus\"));\n        assertSame(OperationEnum.MINUS, OperationEnum.getEnum(\"Minus\"));\n        assertSame(null, OperationEnum.getEnum(\"Pink\"));\n    }",
        "begin_line": 223,
        "end_line": 227,
        "comment": "",
        "child_ranges": [
            "(line 224,col 9)-(line 224,col 70)",
            "(line 225,col 9)-(line 225,col 72)",
            "(line 226,col 9)-(line 226,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.testOperationSerialization()",
        "snippet": "    public void testOperationSerialization() {\n        assertSame(OperationEnum.PLUS, SerializationUtils.clone(OperationEnum.PLUS));\n        assertSame(OperationEnum.MINUS, SerializationUtils.clone(OperationEnum.MINUS));\n    }",
        "begin_line": 229,
        "end_line": 232,
        "comment": "",
        "child_ranges": [
            "(line 230,col 9)-(line 230,col 85)",
            "(line 231,col 9)-(line 231,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.testOperationToString()",
        "snippet": "    public void testOperationToString() {\n        assertEquals(\"OperationEnum[Plus]\", OperationEnum.PLUS.toString());\n    }",
        "begin_line": 234,
        "end_line": 236,
        "comment": "",
        "child_ranges": [
            "(line 235,col 9)-(line 235,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.testOperationList()",
        "snippet": "    public void testOperationList() {\n        List list = OperationEnum.getEnumList();\n        assertNotNull(list);\n        assertEquals(2, list.size());\n        assertEquals(list.size(), OperationEnum.getEnumMap().keySet().size());\n\n        Iterator it = list.iterator();\n        assertSame(OperationEnum.PLUS, it.next());\n        assertSame(OperationEnum.MINUS, it.next());\n    }",
        "begin_line": 238,
        "end_line": 247,
        "comment": "",
        "child_ranges": [
            "(line 239,col 9)-(line 239,col 48)",
            "(line 240,col 9)-(line 240,col 28)",
            "(line 241,col 9)-(line 241,col 37)",
            "(line 242,col 9)-(line 242,col 78)",
            "(line 244,col 9)-(line 244,col 38)",
            "(line 245,col 9)-(line 245,col 50)",
            "(line 246,col 9)-(line 246,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.testOperationMap()",
        "snippet": "    public void testOperationMap() {\n        Map map = OperationEnum.getEnumMap();\n        assertNotNull(map);\n        assertEquals(map.keySet().size(), OperationEnum.getEnumList().size());\n\n        assertTrue(map.containsValue(OperationEnum.PLUS));\n        assertTrue(map.containsValue(OperationEnum.MINUS));\n        assertSame(OperationEnum.PLUS, map.get(\"Plus\"));\n        assertSame(OperationEnum.MINUS, map.get(\"Minus\"));\n    }",
        "begin_line": 249,
        "end_line": 258,
        "comment": "",
        "child_ranges": [
            "(line 250,col 9)-(line 250,col 45)",
            "(line 251,col 9)-(line 251,col 27)",
            "(line 252,col 9)-(line 252,col 78)",
            "(line 254,col 9)-(line 254,col 58)",
            "(line 255,col 9)-(line 255,col 59)",
            "(line 256,col 9)-(line 256,col 56)",
            "(line 257,col 9)-(line 257,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.testOperationCalculation()",
        "snippet": "    public void testOperationCalculation() {\n        assertEquals(3, OperationEnum.PLUS.eval(1, 2));\n        assertEquals(-1, OperationEnum.MINUS.eval(1, 2));\n    }",
        "begin_line": 260,
        "end_line": 263,
        "comment": "",
        "child_ranges": [
            "(line 261,col 9)-(line 261,col 55)",
            "(line 262,col 9)-(line 262,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.testExtended1Get()",
        "snippet": "    public void testExtended1Get() {\n        assertSame(Extended1Enum.ALPHA, Extended1Enum.getEnum(\"Alpha\"));\n        assertSame(Extended1Enum.BETA, Extended1Enum.getEnum(\"Beta\"));\n        assertSame(null, Extended1Enum.getEnum(\"Gamma\"));\n        assertSame(null, Extended1Enum.getEnum(\"Delta\"));\n    }",
        "begin_line": 266,
        "end_line": 271,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 267,col 9)-(line 267,col 72)",
            "(line 268,col 9)-(line 268,col 70)",
            "(line 269,col 9)-(line 269,col 57)",
            "(line 270,col 9)-(line 270,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.testExtended2Get()",
        "snippet": "    public void testExtended2Get() {\n        assertSame(Extended1Enum.ALPHA, Extended2Enum.ALPHA);\n        assertSame(Extended1Enum.BETA, Extended2Enum.BETA);\n\n        assertSame(Extended2Enum.ALPHA, Extended2Enum.getEnum(\"Alpha\"));\n        assertSame(Extended2Enum.BETA, Extended2Enum.getEnum(\"Beta\"));\n        assertSame(Extended2Enum.GAMMA, Extended2Enum.getEnum(\"Gamma\"));\n        assertSame(null, Extended2Enum.getEnum(\"Delta\"));\n    }",
        "begin_line": 273,
        "end_line": 281,
        "comment": "",
        "child_ranges": [
            "(line 274,col 9)-(line 274,col 61)",
            "(line 275,col 9)-(line 275,col 59)",
            "(line 277,col 9)-(line 277,col 72)",
            "(line 278,col 9)-(line 278,col 70)",
            "(line 279,col 9)-(line 279,col 72)",
            "(line 280,col 9)-(line 280,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.testExtended3Get()",
        "snippet": "    public void testExtended3Get() {\n        assertSame(Extended2Enum.ALPHA, Extended3Enum.ALPHA);\n        assertSame(Extended2Enum.BETA, Extended3Enum.BETA);\n        assertSame(Extended2Enum.GAMMA, Extended3Enum.GAMMA);\n\n        assertSame(Extended3Enum.ALPHA, Extended3Enum.getEnum(\"Alpha\"));\n        assertSame(Extended3Enum.BETA, Extended3Enum.getEnum(\"Beta\"));\n        assertSame(Extended3Enum.GAMMA, Extended3Enum.getEnum(\"Gamma\"));\n        assertSame(Extended3Enum.DELTA, Extended3Enum.getEnum(\"Delta\"));\n    }",
        "begin_line": 283,
        "end_line": 292,
        "comment": "",
        "child_ranges": [
            "(line 284,col 9)-(line 284,col 61)",
            "(line 285,col 9)-(line 285,col 59)",
            "(line 286,col 9)-(line 286,col 61)",
            "(line 288,col 9)-(line 288,col 72)",
            "(line 289,col 9)-(line 289,col 70)",
            "(line 290,col 9)-(line 290,col 72)",
            "(line 291,col 9)-(line 291,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.testExtendedSerialization()",
        "snippet": "    public void testExtendedSerialization() {\n        assertSame(Extended1Enum.ALPHA, SerializationUtils.clone(Extended1Enum.ALPHA));\n        assertSame(Extended1Enum.BETA, SerializationUtils.clone(Extended1Enum.BETA));\n        assertSame(Extended2Enum.GAMMA, SerializationUtils.clone(Extended2Enum.GAMMA));\n        assertSame(Extended3Enum.DELTA, SerializationUtils.clone(Extended3Enum.DELTA));\n    }",
        "begin_line": 294,
        "end_line": 299,
        "comment": "",
        "child_ranges": [
            "(line 295,col 9)-(line 295,col 87)",
            "(line 296,col 9)-(line 296,col 85)",
            "(line 297,col 9)-(line 297,col 87)",
            "(line 298,col 9)-(line 298,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.testExtendedToString()",
        "snippet": "    public void testExtendedToString() {\n        assertEquals(\"Extended1Enum[Alpha]\", Extended1Enum.ALPHA.toString());\n        assertEquals(\"Extended1Enum[Beta]\", Extended1Enum.BETA.toString());\n\n        assertEquals(\"Extended1Enum[Alpha]\", Extended2Enum.ALPHA.toString());\n        assertEquals(\"Extended1Enum[Beta]\", Extended2Enum.BETA.toString());\n        assertEquals(\"Extended2Enum[Gamma]\", Extended2Enum.GAMMA.toString());\n\n        assertEquals(\"Extended1Enum[Alpha]\", Extended3Enum.ALPHA.toString());\n        assertEquals(\"Extended1Enum[Beta]\", Extended3Enum.BETA.toString());\n        assertEquals(\"Extended2Enum[Gamma]\", Extended3Enum.GAMMA.toString());\n        assertEquals(\"Extended3Enum[Delta]\", Extended3Enum.DELTA.toString());\n    }",
        "begin_line": 301,
        "end_line": 313,
        "comment": "",
        "child_ranges": [
            "(line 302,col 9)-(line 302,col 77)",
            "(line 303,col 9)-(line 303,col 75)",
            "(line 305,col 9)-(line 305,col 77)",
            "(line 306,col 9)-(line 306,col 75)",
            "(line 307,col 9)-(line 307,col 77)",
            "(line 309,col 9)-(line 309,col 77)",
            "(line 310,col 9)-(line 310,col 75)",
            "(line 311,col 9)-(line 311,col 77)",
            "(line 312,col 9)-(line 312,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.testExtended1List()",
        "snippet": "    public void testExtended1List() {\n        List list = Extended1Enum.getEnumList();\n        assertNotNull(list);\n        assertEquals(2, list.size());\n        assertEquals(list.size(), Extended1Enum.getEnumMap().keySet().size());\n\n        Iterator it = list.iterator();\n        assertSame(Extended1Enum.ALPHA, it.next());\n        assertSame(Extended1Enum.BETA, it.next());\n    }",
        "begin_line": 315,
        "end_line": 324,
        "comment": "",
        "child_ranges": [
            "(line 316,col 9)-(line 316,col 48)",
            "(line 317,col 9)-(line 317,col 28)",
            "(line 318,col 9)-(line 318,col 37)",
            "(line 319,col 9)-(line 319,col 78)",
            "(line 321,col 9)-(line 321,col 38)",
            "(line 322,col 9)-(line 322,col 51)",
            "(line 323,col 9)-(line 323,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.testExtended2List()",
        "snippet": "    public void testExtended2List() {\n        List list = Extended2Enum.getEnumList();\n        assertNotNull(list);\n        assertEquals(3, list.size());\n        assertEquals(list.size(), Extended2Enum.getEnumMap().keySet().size());\n\n        Iterator it = list.iterator();\n        assertSame(Extended2Enum.ALPHA, it.next());\n        assertSame(Extended2Enum.BETA, it.next());\n        assertSame(Extended2Enum.GAMMA, it.next());\n    }",
        "begin_line": 326,
        "end_line": 336,
        "comment": "",
        "child_ranges": [
            "(line 327,col 9)-(line 327,col 48)",
            "(line 328,col 9)-(line 328,col 28)",
            "(line 329,col 9)-(line 329,col 37)",
            "(line 330,col 9)-(line 330,col 78)",
            "(line 332,col 9)-(line 332,col 38)",
            "(line 333,col 9)-(line 333,col 51)",
            "(line 334,col 9)-(line 334,col 50)",
            "(line 335,col 9)-(line 335,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.testExtended3List()",
        "snippet": "    public void testExtended3List() {\n        List list = Extended3Enum.getEnumList();\n        assertNotNull(list);\n        assertEquals(4, list.size());\n        assertEquals(list.size(), Extended3Enum.getEnumMap().keySet().size());\n\n        Iterator it = list.iterator();\n        assertSame(Extended3Enum.ALPHA, it.next());\n        assertSame(Extended3Enum.BETA, it.next());\n        assertSame(Extended3Enum.GAMMA, it.next());\n        assertSame(Extended3Enum.DELTA, it.next());\n    }",
        "begin_line": 338,
        "end_line": 349,
        "comment": "",
        "child_ranges": [
            "(line 339,col 9)-(line 339,col 48)",
            "(line 340,col 9)-(line 340,col 28)",
            "(line 341,col 9)-(line 341,col 37)",
            "(line 342,col 9)-(line 342,col 78)",
            "(line 344,col 9)-(line 344,col 38)",
            "(line 345,col 9)-(line 345,col 51)",
            "(line 346,col 9)-(line 346,col 50)",
            "(line 347,col 9)-(line 347,col 51)",
            "(line 348,col 9)-(line 348,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.testExtended1Map()",
        "snippet": "    public void testExtended1Map() {\n        Map map = Extended1Enum.getEnumMap();\n        assertNotNull(map);\n        assertEquals(map.keySet().size(), Extended1Enum.getEnumList().size());\n\n        assertTrue(map.containsValue(Extended1Enum.ALPHA));\n        assertTrue(map.containsValue(Extended1Enum.BETA));\n        assertSame(Extended1Enum.ALPHA, map.get(\"Alpha\"));\n        assertSame(Extended1Enum.BETA, map.get(\"Beta\"));\n    }",
        "begin_line": 351,
        "end_line": 360,
        "comment": "",
        "child_ranges": [
            "(line 352,col 9)-(line 352,col 45)",
            "(line 353,col 9)-(line 353,col 27)",
            "(line 354,col 9)-(line 354,col 78)",
            "(line 356,col 9)-(line 356,col 59)",
            "(line 357,col 9)-(line 357,col 58)",
            "(line 358,col 9)-(line 358,col 58)",
            "(line 359,col 9)-(line 359,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.testExtended2Map()",
        "snippet": "    public void testExtended2Map() {\n        Map map = Extended2Enum.getEnumMap();\n        assertNotNull(map);\n        assertEquals(map.keySet().size(), Extended2Enum.getEnumList().size());\n\n        assertTrue(map.containsValue(Extended2Enum.ALPHA));\n        assertTrue(map.containsValue(Extended2Enum.BETA));\n        assertTrue(map.containsValue(Extended2Enum.GAMMA));\n        assertSame(Extended2Enum.ALPHA, map.get(\"Alpha\"));\n        assertSame(Extended2Enum.BETA, map.get(\"Beta\"));\n        assertSame(Extended2Enum.GAMMA, map.get(\"Gamma\"));\n    }",
        "begin_line": 362,
        "end_line": 373,
        "comment": "",
        "child_ranges": [
            "(line 363,col 9)-(line 363,col 45)",
            "(line 364,col 9)-(line 364,col 27)",
            "(line 365,col 9)-(line 365,col 78)",
            "(line 367,col 9)-(line 367,col 59)",
            "(line 368,col 9)-(line 368,col 58)",
            "(line 369,col 9)-(line 369,col 59)",
            "(line 370,col 9)-(line 370,col 58)",
            "(line 371,col 9)-(line 371,col 56)",
            "(line 372,col 9)-(line 372,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.testExtended3Map()",
        "snippet": "    public void testExtended3Map() {\n        Map map = Extended3Enum.getEnumMap();\n        assertNotNull(map);\n        assertEquals(map.keySet().size(), Extended3Enum.getEnumList().size());\n\n        assertTrue(map.containsValue(Extended3Enum.ALPHA));\n        assertTrue(map.containsValue(Extended3Enum.BETA));\n        assertTrue(map.containsValue(Extended3Enum.GAMMA));\n        assertTrue(map.containsValue(Extended3Enum.DELTA));\n        assertSame(Extended3Enum.ALPHA, map.get(\"Alpha\"));\n        assertSame(Extended3Enum.BETA, map.get(\"Beta\"));\n        assertSame(Extended3Enum.GAMMA, map.get(\"Gamma\"));\n        assertSame(Extended3Enum.DELTA, map.get(\"Delta\"));\n    }",
        "begin_line": 375,
        "end_line": 388,
        "comment": "",
        "child_ranges": [
            "(line 376,col 9)-(line 376,col 45)",
            "(line 377,col 9)-(line 377,col 27)",
            "(line 378,col 9)-(line 378,col 78)",
            "(line 380,col 9)-(line 380,col 59)",
            "(line 381,col 9)-(line 381,col 58)",
            "(line 382,col 9)-(line 382,col 59)",
            "(line 383,col 9)-(line 383,col 59)",
            "(line 384,col 9)-(line 384,col 58)",
            "(line 385,col 9)-(line 385,col 56)",
            "(line 386,col 9)-(line 386,col 58)",
            "(line 387,col 9)-(line 387,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.testNested()",
        "snippet": "    public void testNested() {\n        List list = new ArrayList(Nest.ColorEnum.getEnumList());\n        assertEquals(3, list.size()); // all is well\n        Iterator it = list.iterator();\n        assertSame(Nest.ColorEnum.RED, it.next());\n        assertSame(Nest.ColorEnum.GREEN, it.next());\n        assertSame(Nest.ColorEnum.BLUE, it.next());\n        // This nesting works because the enum constants are defined in the SAME\n        // class as the getEnumList(). It just acts as a normal enum.\n    }",
        "begin_line": 391,
        "end_line": 400,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 392,col 9)-(line 392,col 64)",
            "(line 393,col 9)-(line 393,col 37)",
            "(line 394,col 9)-(line 394,col 38)",
            "(line 395,col 9)-(line 395,col 50)",
            "(line 396,col 9)-(line 396,col 52)",
            "(line 397,col 9)-(line 397,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.testNestedBroken()",
        "snippet": "    public void testNestedBroken() {\n        List list = new ArrayList(NestBroken.ColorEnum.getEnumList());\n        try {\n            assertEquals(0, list.size()); // no enums!!!\n            // this is BROKEN because the enum constants are defined in a DIFFERENT\n            // class from getEnumList(). Once NestBroken class is referenced,\n            // and thus class loaded with its enum constants, the getEnumList works:\n        } catch (AssertionFailedError ex) {\n            // this actually works and isn't broken on Linux SunJDK1.4.1, so...\n            assertEquals(3, list.size());\n        }\n        new NestBroken();\n        list = new ArrayList(NestBroken.ColorEnum.getEnumList());\n        assertEquals(3, list.size()); // all is well!!!\n        Iterator it = list.iterator();\n        assertSame(NestBroken.RED, it.next());\n        assertSame(NestBroken.GREEN, it.next());\n        assertSame(NestBroken.BLUE, it.next());\n    }",
        "begin_line": 402,
        "end_line": 420,
        "comment": "",
        "child_ranges": [
            "(line 403,col 9)-(line 403,col 70)",
            "(line 404,col 9)-(line 412,col 9)",
            "(line 413,col 9)-(line 413,col 25)",
            "(line 414,col 9)-(line 414,col 65)",
            "(line 415,col 9)-(line 415,col 37)",
            "(line 416,col 9)-(line 416,col 38)",
            "(line 417,col 9)-(line 417,col 46)",
            "(line 418,col 9)-(line 418,col 48)",
            "(line 419,col 9)-(line 419,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.testNestedLinked()",
        "snippet": "    public void testNestedLinked() {\n        List list = new ArrayList(NestLinked.ColorEnum.getEnumList());\n        assertEquals(3, list.size()); // all is well\n        Iterator it = list.iterator();\n        assertSame(NestLinked.RED, it.next());\n        assertSame(NestLinked.GREEN, it.next());\n        assertSame(NestLinked.BLUE, it.next());\n        // This nesting works because a static block in the enum class forces a\n        // class load of the outer class which defines the enum constants.\n    }",
        "begin_line": 422,
        "end_line": 431,
        "comment": "",
        "child_ranges": [
            "(line 423,col 9)-(line 423,col 70)",
            "(line 424,col 9)-(line 424,col 37)",
            "(line 425,col 9)-(line 425,col 38)",
            "(line 426,col 9)-(line 426,col 46)",
            "(line 427,col 9)-(line 427,col 48)",
            "(line 428,col 9)-(line 428,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.testNestedReferenced()",
        "snippet": "    public void testNestedReferenced() {\n        List list = new ArrayList(NestReferenced.ColorEnum.getEnumList());\n        assertEquals(3, list.size()); // all is well\n        Iterator it = list.iterator();\n        assertSame(NestReferenced.RED, it.next());\n        assertSame(NestReferenced.GREEN, it.next());\n        assertSame(NestReferenced.BLUE, it.next());\n        // This nesting works because the enum constants are actually defined in\n        // the SAME class as the getEnumList(). The references in the outer class\n        // are just extra references.\n    }",
        "begin_line": 433,
        "end_line": 443,
        "comment": "",
        "child_ranges": [
            "(line 434,col 9)-(line 434,col 74)",
            "(line 435,col 9)-(line 435,col 37)",
            "(line 436,col 9)-(line 436,col 38)",
            "(line 437,col 9)-(line 437,col 50)",
            "(line 438,col 9)-(line 438,col 52)",
            "(line 439,col 9)-(line 439,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.testColorEnumEqualsWithDifferentClassLoaders()",
        "snippet": "    public void testColorEnumEqualsWithDifferentClassLoaders() {}",
        "begin_line": 445,
        "end_line": 445,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "testWithDifferentClassLoaders(ColorEnum)",
        "snippet": "    void testWithDifferentClassLoaders(ColorEnum colorEnum) throws ClassNotFoundException, SecurityException,\n            NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {\n        // Sanity checks:\n        assertTrue(colorEnum.equals(colorEnum));\n        assertNotNull(ColorEnum.class.getClassLoader());\n        // set up:\n        ClassLoader myClassLoader = EnumTest.class.getClassLoader();\n        if (!(myClassLoader instanceof URLClassLoader)) {\n            fail(\"EnumTest ClassLoader = \" + (myClassLoader == null ? null : myClassLoader.getClass().getName()));\n        }\n        ClassLoader classLoader = URLClassLoader.newInstance( ((URLClassLoader)myClassLoader).getURLs(), null);\n        Object enumObjectFromOtherClassLoader = this.getColorEnum(classLoader, colorEnum.getName());\n\n        // the real test, part 1.\n        try {\n            ColorEnum testCase = (ColorEnum) enumObjectFromOtherClassLoader;\n            fail(\"Should have thrown a ClassCastException for \" + testCase);\n        } catch (ClassCastException e) {\n            // normal.\n        }\n\n        // the real test, part 2.\n        assertEquals(\"The two objects should match even though they are from different class loaders\", colorEnum,\n                enumObjectFromOtherClassLoader);\n\n        // the real test, part 3 - testing equals(Object)\n        int falseCount = 0;\n        for (Iterator iter = ColorEnum.iterator(); iter.hasNext();) {\n            ColorEnum element = (ColorEnum) iter.next();\n            if (!colorEnum.equals(element)) {\n                falseCount++;\n                assertFalse(enumObjectFromOtherClassLoader.equals(element));\n            }\n        }\n        assertEquals(ColorEnum.getEnumList().size() - 1, falseCount);\n\n        // the real test, part 4 - testing compareTo(Object) == 0\n        falseCount = 0;\n        for (Iterator iter = ColorEnum.iterator(); iter.hasNext();) {\n            ColorEnum element = (ColorEnum) iter.next();\n            if (!colorEnum.equals(element)) {\n                falseCount++;\n                assertFalse( ((Comparable)enumObjectFromOtherClassLoader).compareTo(element) == 0);\n            }\n        }\n        assertEquals(ColorEnum.getEnumList().size() - 1, falseCount);\n    }",
        "begin_line": 454,
        "end_line": 500,
        "comment": "",
        "child_ranges": [
            "(line 457,col 9)-(line 457,col 48)",
            "(line 458,col 9)-(line 458,col 56)",
            "(line 460,col 9)-(line 460,col 68)",
            "(line 461,col 9)-(line 463,col 9)",
            "(line 464,col 9)-(line 464,col 111)",
            "(line 465,col 9)-(line 465,col 100)",
            "(line 468,col 9)-(line 473,col 9)",
            "(line 476,col 9)-(line 477,col 48)",
            "(line 480,col 9)-(line 480,col 27)",
            "(line 481,col 9)-(line 487,col 9)",
            "(line 488,col 9)-(line 488,col 69)",
            "(line 491,col 9)-(line 491,col 23)",
            "(line 492,col 9)-(line 498,col 9)",
            "(line 499,col 9)-(line 499,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.getColorEnum(java.lang.ClassLoader, java.lang.String)",
        "snippet": "    Object getColorEnum(ClassLoader classLoader, String color) throws ClassNotFoundException, SecurityException,\n            NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {\n        // Sanity check:\n        ColorEnum.RED.equals(ColorEnum.RED);\n        assertNotNull(ColorEnum.class.getClassLoader());\n        // set up:\n        assertNotNull(classLoader);\n        assertFalse(classLoader.equals(ColorEnum.class.getClassLoader()));\n        Class otherColorEnumClass = null;\n        try {\n            otherColorEnumClass = classLoader.loadClass(ENUM_CLASS_NAME);\n        } catch (ClassNotFoundException e) {\n            // Dump some information to help debug class loader issues under different JREs, Ant, Eclipse.\n            System.err.println(\"Could not load \" + ENUM_CLASS_NAME + \" from the class loader \" + classLoader);\n            URLClassLoader urlCl = (URLClassLoader) classLoader;\n            URL[] urls = urlCl.getURLs();\n            System.err.println(\"Class loader has \" + urls.length + \" URLs:\");\n            for (int i = 0; i < urls.length; i++) {\n                System.err.println(\"URL[\" + i + \"] = \" + urls[i]);\n            }\n            e.printStackTrace();\n            throw e;\n        }\n        assertNotNull(otherColorEnumClass);\n        assertNotNull(otherColorEnumClass.getClassLoader());\n        assertTrue(classLoader.equals(otherColorEnumClass.getClassLoader()));\n        assertFalse(otherColorEnumClass.getClassLoader().equals(ColorEnum.class.getClassLoader()));\n        Method method = otherColorEnumClass.getMethod(\"getEnum\", new Class[]{String.class});\n        Object enumObject = method.invoke(otherColorEnumClass, new Object[]{color});\n        assertNotNull(enumObject);\n        assertFalse(ColorEnum.class.equals(enumObject.getClass()));\n        assertFalse(ColorEnum.class == enumObject.getClass());\n        return enumObject;\n    }",
        "begin_line": 502,
        "end_line": 535,
        "comment": "",
        "child_ranges": [
            "(line 505,col 9)-(line 505,col 44)",
            "(line 506,col 9)-(line 506,col 56)",
            "(line 508,col 9)-(line 508,col 35)",
            "(line 509,col 9)-(line 509,col 74)",
            "(line 510,col 9)-(line 510,col 41)",
            "(line 511,col 9)-(line 524,col 9)",
            "(line 525,col 9)-(line 525,col 43)",
            "(line 526,col 9)-(line 526,col 60)",
            "(line 527,col 9)-(line 527,col 77)",
            "(line 528,col 9)-(line 528,col 99)",
            "(line 529,col 9)-(line 529,col 92)",
            "(line 530,col 9)-(line 530,col 84)",
            "(line 531,col 9)-(line 531,col 34)",
            "(line 532,col 9)-(line 532,col 67)",
            "(line 533,col 9)-(line 533,col 62)",
            "(line 534,col 9)-(line 534,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "EnumTest.testEqualsToWrongInstance()",
        "snippet": "    public void testEqualsToWrongInstance() {\n        for (Iterator iter = ColorEnum.iterator(); iter.hasNext();) {\n            ColorEnum element = (ColorEnum) iter.next();\n            this.testEqualsToWrongInstance(element);\n        }\n    }",
        "begin_line": 537,
        "end_line": 542,
        "comment": "",
        "child_ranges": [
            "(line 538,col 9)-(line 541,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTest.java",
        "signature": "testEqualsToWrongInstance(ColorEnum)",
        "snippet": "    void testEqualsToWrongInstance(ColorEnum colorEnum) {\n        assertEquals(false, colorEnum.equals(\"test\"));\n        assertEquals(false, colorEnum.equals(new Integer(1)));\n        assertEquals(false, colorEnum.equals(new Boolean(true)));\n        assertEquals(false, colorEnum.equals(new StringBuffer(\"test\")));\n        assertEquals(false, colorEnum.equals(new Object()));\n        assertEquals(false, colorEnum.equals(null));\n        assertEquals(false, colorEnum.equals(\"\"));\n        assertEquals(false, colorEnum.equals(ColorEnum.getEnum(null)));\n        assertEquals(false, colorEnum.equals(ColorEnum.getEnum(\"\")));\n        assertEquals(false, colorEnum.equals(ColorEnum.getEnum(\"This ColorEnum does not exist.\")));\n    }",
        "begin_line": 544,
        "end_line": 555,
        "comment": "",
        "child_ranges": [
            "(line 545,col 9)-(line 545,col 54)",
            "(line 546,col 9)-(line 546,col 62)",
            "(line 547,col 9)-(line 547,col 65)",
            "(line 548,col 9)-(line 548,col 72)",
            "(line 549,col 9)-(line 549,col 60)",
            "(line 550,col 9)-(line 550,col 52)",
            "(line 551,col 9)-(line 551,col 50)",
            "(line 552,col 9)-(line 552,col 71)",
            "(line 553,col 9)-(line 553,col 69)",
            "(line 554,col 9)-(line 554,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.NestBroken",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/NestBroken.java",
        "signature": "NestBroken.NestBroken()",
        "snippet": "    public NestBroken() {\n        super();\n    }",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 16)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.NestBroken",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/NestBroken.java",
        "signature": "NestBroken.ColorEnum.ColorEnum(java.lang.String)",
        "snippet": "        private ColorEnum(String color) {\n            super(color);\n        }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 13)-(line 48,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.NestBroken",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/NestBroken.java",
        "signature": "NestBroken.ColorEnum.getEnum(java.lang.String)",
        "snippet": "        public static ColorEnum getEnum(String color) {\n            return (ColorEnum) getEnum(ColorEnum.class, color);\n        }",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 52,col 13)-(line 52,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.NestBroken",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/NestBroken.java",
        "signature": "NestBroken.ColorEnum.getEnumMap()",
        "snippet": "        public static Map getEnumMap() {\n            return getEnumMap(ColorEnum.class);\n        }",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 56,col 13)-(line 56,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.NestBroken",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/NestBroken.java",
        "signature": "NestBroken.ColorEnum.getEnumList()",
        "snippet": "        public static List getEnumList() {\n            return getEnumList(ColorEnum.class);\n        }",
        "begin_line": 59,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 60,col 13)-(line 60,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.NestBroken",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/NestBroken.java",
        "signature": "NestBroken.ColorEnum.iterator()",
        "snippet": "        public static Iterator iterator() {\n            return iterator(ColorEnum.class);\n        }",
        "begin_line": 63,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 64,col 13)-(line 64,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/OperationEnum.java",
        "signature": "OperationEnum.PlusOperation.PlusOperation()",
        "snippet": "        private PlusOperation() {\n            super(\"Plus\");\n        }",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 45,col 13)-(line 45,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/OperationEnum.java",
        "signature": "OperationEnum.PlusOperation.eval(int, int)",
        "snippet": "        public int eval(int a, int b) {\n            return (a + b);\n        }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 13)-(line 48,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/OperationEnum.java",
        "signature": "OperationEnum.MinusOperation.MinusOperation()",
        "snippet": "        private MinusOperation() {\n            super(\"Minus\");\n        }",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 54,col 13)-(line 54,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/OperationEnum.java",
        "signature": "OperationEnum.MinusOperation.eval(int, int)",
        "snippet": "        public int eval(int a, int b) {\n            return (a - b);\n        }",
        "begin_line": 56,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 57,col 13)-(line 57,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/OperationEnum.java",
        "signature": "OperationEnum.OperationEnum(java.lang.String)",
        "snippet": "    private OperationEnum(String name) {\n        super(name);\n    }",
        "begin_line": 61,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/OperationEnum.java",
        "signature": "OperationEnum.getEnumClass()",
        "snippet": "    public final Class getEnumClass() {\n        return OperationEnum.class;\n    }",
        "begin_line": 65,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/OperationEnum.java",
        "signature": "OperationEnum.eval(int, int)",
        "snippet": "    public abstract int eval(int a, int b);",
        "begin_line": 69,
        "end_line": 69,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.enum.OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/OperationEnum.java",
        "signature": "OperationEnum.getEnum(java.lang.String)",
        "snippet": "    public static OperationEnum getEnum(String name) {\n        return (OperationEnum) getEnum(OperationEnum.class, name);\n    }",
        "begin_line": 71,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/OperationEnum.java",
        "signature": "OperationEnum.getEnumMap()",
        "snippet": "    public static Map getEnumMap() {\n        return getEnumMap(OperationEnum.class);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/OperationEnum.java",
        "signature": "OperationEnum.getEnumList()",
        "snippet": "    public static List getEnumList() {\n        return getEnumList(OperationEnum.class);\n    }",
        "begin_line": 79,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/OperationEnum.java",
        "signature": "OperationEnum.iterator()",
        "snippet": "    public static Iterator iterator() {\n        return iterator(OperationEnum.class);\n    }",
        "begin_line": 83,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken4OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken4OperationEnum.java",
        "signature": "Broken4OperationEnum.PlusOperation.PlusOperation()",
        "snippet": "        private PlusOperation() {\n            super(\"Plus\");\n        }",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 45,col 13)-(line 45,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken4OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken4OperationEnum.java",
        "signature": "Broken4OperationEnum.PlusOperation.eval(int, int)",
        "snippet": "        public int eval(int a, int b) {\n            return (a + b);\n        }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 13)-(line 48,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken4OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken4OperationEnum.java",
        "signature": "Broken4OperationEnum.MinusOperation.MinusOperation()",
        "snippet": "        private MinusOperation() {\n            super(\"Minus\");\n        }",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 54,col 13)-(line 54,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken4OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken4OperationEnum.java",
        "signature": "Broken4OperationEnum.MinusOperation.eval(int, int)",
        "snippet": "        public int eval(int a, int b) {\n            return (a - b);\n        }",
        "begin_line": 56,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 57,col 13)-(line 57,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken4OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken4OperationEnum.java",
        "signature": "Broken4OperationEnum.Broken4OperationEnum(java.lang.String)",
        "snippet": "    private Broken4OperationEnum(String name) {\n        super(name);\n    }",
        "begin_line": 61,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken4OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken4OperationEnum.java",
        "signature": "Broken4OperationEnum.getEnumClass()",
        "snippet": "    public final Class getEnumClass() {\n        return ValuedEnum.class;\n    }",
        "begin_line": 65,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken4OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken4OperationEnum.java",
        "signature": "Broken4OperationEnum.eval(int, int)",
        "snippet": "    public abstract int eval(int a, int b);",
        "begin_line": 69,
        "end_line": 69,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken4OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken4OperationEnum.java",
        "signature": "Broken4OperationEnum.getEnum(java.lang.String)",
        "snippet": "    public static Broken4OperationEnum getEnum(String name) {\n        return (Broken4OperationEnum) getEnum(Broken4OperationEnum.class, name);\n    }",
        "begin_line": 71,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken4OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken4OperationEnum.java",
        "signature": "Broken4OperationEnum.getEnumMap()",
        "snippet": "    public static Map getEnumMap() {\n        return getEnumMap(Broken4OperationEnum.class);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken4OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken4OperationEnum.java",
        "signature": "Broken4OperationEnum.getEnumList()",
        "snippet": "    public static List getEnumList() {\n        return getEnumList(Broken4OperationEnum.class);\n    }",
        "begin_line": 79,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken4OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken4OperationEnum.java",
        "signature": "Broken4OperationEnum.iterator()",
        "snippet": "    public static Iterator iterator() {\n        return iterator(Broken4OperationEnum.class);\n    }",
        "begin_line": 83,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.NestLinked",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/NestLinked.java",
        "signature": "NestLinked.NestLinked()",
        "snippet": "    public NestLinked() {\n        super();\n    }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 16)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.NestLinked",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/NestLinked.java",
        "signature": "NestLinked.ColorEnum.ColorEnum(java.lang.String)",
        "snippet": "        private ColorEnum(String color) {\n            super(color);\n        }",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 55,col 13)-(line 55,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.NestLinked",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/NestLinked.java",
        "signature": "NestLinked.ColorEnum.getEnum(java.lang.String)",
        "snippet": "        public static ColorEnum getEnum(String color) {\n            return (ColorEnum) getEnum(ColorEnum.class, color);\n        }",
        "begin_line": 58,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 59,col 13)-(line 59,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.NestLinked",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/NestLinked.java",
        "signature": "NestLinked.ColorEnum.getEnumMap()",
        "snippet": "        public static Map getEnumMap() {\n            return getEnumMap(ColorEnum.class);\n        }",
        "begin_line": 62,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 63,col 13)-(line 63,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.NestLinked",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/NestLinked.java",
        "signature": "NestLinked.ColorEnum.getEnumList()",
        "snippet": "        public static List getEnumList() {\n            return getEnumList(ColorEnum.class);\n        }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 67,col 13)-(line 67,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.NestLinked",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/NestLinked.java",
        "signature": "NestLinked.ColorEnum.iterator()",
        "snippet": "        public static Iterator iterator() {\n            return iterator(ColorEnum.class);\n        }",
        "begin_line": 70,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 71,col 13)-(line 71,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTestSuite",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTestSuite.java",
        "signature": "EnumTestSuite.EnumTestSuite(java.lang.String)",
        "snippet": "    public EnumTestSuite(String name) {\n        super(name);\n    }",
        "begin_line": 35,
        "end_line": 37,
        "comment": "\n     * Construct a new instance.\n     ",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTestSuite",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTestSuite.java",
        "signature": "EnumTestSuite.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 42,
        "end_line": 44,
        "comment": "\n     * Command-line interface.\n     ",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.EnumTestSuite",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/EnumTestSuite.java",
        "signature": "EnumTestSuite.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite();\n        suite.setName(\"Commons-Lang-Enum Tests\");\n        suite.addTest(EnumTest.suite());\n        suite.addTest(EnumUtilsTest.suite());\n        suite.addTest(ValuedEnumTest.suite());\n        return suite;\n    }",
        "begin_line": 49,
        "end_line": 56,
        "comment": "\n     * Get the suite of tests\n     ",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 42)",
            "(line 51,col 9)-(line 51,col 49)",
            "(line 52,col 9)-(line 52,col 40)",
            "(line 53,col 9)-(line 53,col 45)",
            "(line 54,col 9)-(line 54,col 46)",
            "(line 55,col 9)-(line 55,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.ValuedColorEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/ValuedColorEnum.java",
        "signature": "ValuedColorEnum.ValuedColorEnum(java.lang.String, int)",
        "snippet": "    private ValuedColorEnum(String color, int value) {\n        super(color, value);\n    }",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.ValuedColorEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/ValuedColorEnum.java",
        "signature": "ValuedColorEnum.getEnum(java.lang.String)",
        "snippet": "    public static ValuedColorEnum getEnum(String color) {\n        return (ValuedColorEnum) getEnum(ValuedColorEnum.class, color);\n    }",
        "begin_line": 39,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.ValuedColorEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/ValuedColorEnum.java",
        "signature": "ValuedColorEnum.getEnum(int)",
        "snippet": "    public static ValuedColorEnum getEnum(int value) {\n        return (ValuedColorEnum) getEnum(ValuedColorEnum.class, value);\n    }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.ValuedColorEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/ValuedColorEnum.java",
        "signature": "ValuedColorEnum.getEnumMap()",
        "snippet": "    public static Map getEnumMap() {\n        return getEnumMap(ValuedColorEnum.class);\n    }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.ValuedColorEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/ValuedColorEnum.java",
        "signature": "ValuedColorEnum.getEnumList()",
        "snippet": "    public static List getEnumList() {\n        return getEnumList(ValuedColorEnum.class);\n    }",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.ValuedColorEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/ValuedColorEnum.java",
        "signature": "ValuedColorEnum.iterator()",
        "snippet": "    public static Iterator iterator() {\n        return iterator(ValuedColorEnum.class);\n    }",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken1OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken1OperationEnum.java",
        "signature": "Broken1OperationEnum.PlusOperation.PlusOperation()",
        "snippet": "        private PlusOperation() {\n            super(\"Plus\");\n        }",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 45,col 13)-(line 45,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken1OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken1OperationEnum.java",
        "signature": "Broken1OperationEnum.PlusOperation.eval(int, int)",
        "snippet": "        public int eval(int a, int b) {\n            return (a + b);\n        }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 13)-(line 48,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken1OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken1OperationEnum.java",
        "signature": "Broken1OperationEnum.MinusOperation.MinusOperation()",
        "snippet": "        private MinusOperation() {\n            super(\"Minus\");\n        }",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 54,col 13)-(line 54,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken1OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken1OperationEnum.java",
        "signature": "Broken1OperationEnum.MinusOperation.eval(int, int)",
        "snippet": "        public int eval(int a, int b) {\n            return (a - b);\n        }",
        "begin_line": 56,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 57,col 13)-(line 57,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken1OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken1OperationEnum.java",
        "signature": "Broken1OperationEnum.Broken1OperationEnum(java.lang.String)",
        "snippet": "    private Broken1OperationEnum(String name) {\n        super(name);\n    }",
        "begin_line": 61,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken1OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken1OperationEnum.java",
        "signature": "Broken1OperationEnum.getEnumClass()",
        "snippet": "    public final Class getEnumClass() {\n        return null;\n    }",
        "begin_line": 65,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken1OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken1OperationEnum.java",
        "signature": "Broken1OperationEnum.eval(int, int)",
        "snippet": "    public abstract int eval(int a, int b);",
        "begin_line": 69,
        "end_line": 69,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken1OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken1OperationEnum.java",
        "signature": "Broken1OperationEnum.getEnum(java.lang.String)",
        "snippet": "    public static Broken1OperationEnum getEnum(String name) {\n        return (Broken1OperationEnum) getEnum(Broken1OperationEnum.class, name);\n    }",
        "begin_line": 71,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken1OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken1OperationEnum.java",
        "signature": "Broken1OperationEnum.getEnumMap()",
        "snippet": "    public static Map getEnumMap() {\n        return getEnumMap(Broken1OperationEnum.class);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken1OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken1OperationEnum.java",
        "signature": "Broken1OperationEnum.getEnumList()",
        "snippet": "    public static List getEnumList() {\n        return getEnumList(Broken1OperationEnum.class);\n    }",
        "begin_line": 79,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enum.Broken1OperationEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enum/Broken1OperationEnum.java",
        "signature": "Broken1OperationEnum.iterator()",
        "snippet": "    public static Iterator iterator() {\n        return iterator(Broken1OperationEnum.class);\n    }",
        "begin_line": 83,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableExceptionTestCase.NestableExceptionTestCase(java.lang.String)",
        "snippet": "    public NestableExceptionTestCase(String name)\n    {\n        super(name);\n    }",
        "begin_line": 44,
        "end_line": 47,
        "comment": "\n     * Construct a new instance of\n     * <code>NestableExceptionTestCase</code>.\n     *\n     * @param name test case name\n     ",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableExceptionTestCase.setUp()",
        "snippet": "    public void setUp()\n    {\n    }",
        "begin_line": 52,
        "end_line": 54,
        "comment": "\n     * Sets up instance variables required by this test case.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableExceptionTestCase.suite()",
        "snippet": "    public static Test suite()\n    {\n        return new TestSuite(NestableExceptionTestCase.class);\n    }",
        "begin_line": 61,
        "end_line": 64,
        "comment": "\n     * Returns the test suite\n     *\n     * @return the test suite\n     ",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableExceptionTestCase.tearDown()",
        "snippet": "    public void tearDown()\n    {\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Tears down instance variables required by this test case.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableExceptionTestCase.main(java.lang.String[])",
        "snippet": "    public static void main(String args[])\n    {\n        TestRunner.run(suite());\n    }",
        "begin_line": 78,
        "end_line": 81,
        "comment": "\n     * Command line entry point for running the test suite.\n     *\n     * @param args array of command line arguments\n     ",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableExceptionTestCase.getNestable()",
        "snippet": "    public Nestable getNestable()\n    {\n        return new NestableException();\n    }",
        "begin_line": 86,
        "end_line": 89,
        "comment": "\n     * @see AbstractNestableTestCase#getNestable()\n     ",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableExceptionTestCase.getNestable(org.apache.commons.lang.exception.Nestable)",
        "snippet": "    public Nestable getNestable(Nestable n)\n    {\n        return new NestableException((Throwable) n);\n    }",
        "begin_line": 94,
        "end_line": 97,
        "comment": "\n     * @see AbstractNestableTestCase#getNestable(Nestable)\n     ",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableExceptionTestCase.getNestable(java.lang.String)",
        "snippet": "    public Nestable getNestable(String msg)\n    {\n        return new NestableException(msg);\n    }",
        "begin_line": 102,
        "end_line": 105,
        "comment": "\n     * @see AbstractNestableTestCase#getNestable(String)\n     ",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableExceptionTestCase.getNestable(java.lang.Throwable)",
        "snippet": "    public Nestable getNestable(Throwable t)\n    {\n        return new NestableException(t);\n    }",
        "begin_line": 110,
        "end_line": 113,
        "comment": "\n     * @see AbstractNestableTestCase#getNestable(Throwable)\n     ",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableExceptionTestCase.getNestable(java.lang.String, java.lang.Throwable)",
        "snippet": "    public Nestable getNestable(String msg, Throwable t)\n    {\n        return new NestableException(msg, t);\n    }",
        "begin_line": 118,
        "end_line": 121,
        "comment": "\n     * @see AbstractNestableTestCase#getNestable(String, Throwable)\n     ",
        "child_ranges": [
            "(line 120,col 9)-(line 120,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableExceptionTestCase.getNestable(java.lang.String, org.apache.commons.lang.exception.Nestable)",
        "snippet": "    public Nestable getNestable(String msg, Nestable n)\n    {\n        return new NestableException(msg, (Throwable) n);\n    }",
        "begin_line": 126,
        "end_line": 129,
        "comment": "\n     * @see AbstractNestableTestCase#getNestable(String, Nestable)\n     ",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableExceptionTestCase.getTester1(java.lang.Throwable)",
        "snippet": "    public Nestable getTester1(Throwable t)\n    {\n        return new NestableExceptionTester1(t);\n    }",
        "begin_line": 134,
        "end_line": 137,
        "comment": "\n     * @see AbstractNestableTestCase#getTester1(Throwable)\n     ",
        "child_ranges": [
            "(line 136,col 9)-(line 136,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableExceptionTestCase.getTester1(org.apache.commons.lang.exception.Nestable)",
        "snippet": "    public Nestable getTester1(Nestable n)\n    {\n        return new NestableExceptionTester1((Throwable) n);\n    }",
        "begin_line": 142,
        "end_line": 145,
        "comment": "\n     * @see AbstractNestableTestCase#getTester1(Nestable)\n     ",
        "child_ranges": [
            "(line 144,col 9)-(line 144,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableExceptionTestCase.getTester1(java.lang.String, java.lang.Throwable)",
        "snippet": "    public Nestable getTester1(String msg, Throwable t)\n    {\n        return new NestableExceptionTester1(msg, t);\n    }",
        "begin_line": 150,
        "end_line": 153,
        "comment": "\n     * @see AbstractNestableTestCase#getTester1(String, Throwable)\n     ",
        "child_ranges": [
            "(line 152,col 9)-(line 152,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableExceptionTestCase.getTester1(java.lang.String, org.apache.commons.lang.exception.Nestable)",
        "snippet": "    public Nestable getTester1(String msg, Nestable n)\n    {\n        return new NestableExceptionTester1(msg, (Throwable) n);\n    }",
        "begin_line": 158,
        "end_line": 161,
        "comment": "\n     * @see AbstractNestableTestCase#getTester1(String, Nestable)\n     ",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableExceptionTestCase.getTester1Class()",
        "snippet": "    public Class getTester1Class()\n    {\n        return NestableExceptionTester1.class;\n    }",
        "begin_line": 166,
        "end_line": 169,
        "comment": "\n     * @see AbstractNestableTestCase#getTester1Class()\n     ",
        "child_ranges": [
            "(line 168,col 9)-(line 168,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableExceptionTestCase.getTester2(java.lang.String, java.lang.Throwable)",
        "snippet": "    public Nestable getTester2(String msg, Throwable t)\n    {\n        return new NestableExceptionTester2(msg, t);\n    }",
        "begin_line": 174,
        "end_line": 177,
        "comment": "\n     * @see AbstractNestableTestCase#getTester2(String, Throwable)\n     ",
        "child_ranges": [
            "(line 176,col 9)-(line 176,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableExceptionTestCase.getTester2(java.lang.String, org.apache.commons.lang.exception.Nestable)",
        "snippet": "    public Nestable getTester2(String msg, Nestable n)\n    {\n        return new NestableExceptionTester2(msg, (Throwable) n);\n    }",
        "begin_line": 182,
        "end_line": 185,
        "comment": "\n     * @see AbstractNestableTestCase#getTester2(String, Nestable)\n     ",
        "child_ranges": [
            "(line 184,col 9)-(line 184,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableExceptionTestCase.getTester2Class()",
        "snippet": "    public Class getTester2Class()\n    {\n        return NestableExceptionTester2.class;\n    }",
        "begin_line": 190,
        "end_line": 193,
        "comment": "\n     * @see AbstractNestableTestCase#getTester2Class()\n     ",
        "child_ranges": [
            "(line 192,col 9)-(line 192,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableExceptionTestCase.getThrowable(java.lang.String)",
        "snippet": "    public Throwable getThrowable(String msg)\n    {\n        return new EOFException(msg);\n    }",
        "begin_line": 198,
        "end_line": 201,
        "comment": "\n     * @see AbstractNestableTestCase#getThrowable(String)\n     ",
        "child_ranges": [
            "(line 200,col 9)-(line 200,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableExceptionTestCase.getThrowableClass()",
        "snippet": "    public Class getThrowableClass()\n    {\n        return EOFException.class;\n    }",
        "begin_line": 206,
        "end_line": 209,
        "comment": "\n     * @see AbstractNestableTestCase#getThrowableClass()\n     ",
        "child_ranges": [
            "(line 208,col 9)-(line 208,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableExceptionTestCase.getBaseThrowableClass()",
        "snippet": "    public Class getBaseThrowableClass()\n    {\n        return Exception.class;\n    }",
        "begin_line": 214,
        "end_line": 217,
        "comment": "\n     * @see AbstractNestableTestCase#getBaseThrowableClass()\n     ",
        "child_ranges": [
            "(line 216,col 9)-(line 216,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableExceptionTestCase.testSpecificPrintStackTrace()",
        "snippet": "    public void testSpecificPrintStackTrace()\n    {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        PrintStream ps = new PrintStream(baos);\n        NestableException ne = new NestableException(\"outer\", new NestableException(\"inner\", new Exception(\"another exception\")));\n        for(int i = 0; i < 2; i++)\n        {\n            if(i == 0)\n            {\n                // Test printStackTrac()\n                // Replace System.err with our own PrintStream so that we can\n                // obtain and check the printStrackTrace output\n                PrintStream err = System.err;\n                System.setErr(ps);\n                ne.printStackTrace();\n                // Restore the System.err\n                System.setErr(err);\n            }\n            else\n            {\n                // Test printStackTrace(PrintStream)\n                ne.printStackTrace(ps);\n            }\n        }\n        String msg = baos.toString();\n        assertTrue( \"printStackTrace() starts with outer message\", msg.startsWith(\"org.apache.commons.lang.exception.NestableException: outer\"));\n        assertTrue( \"printStackTrace() contains 1st nested message\", msg.indexOf(\"Caused by: org.apache.commons.lang.exception.NestableException: inner\") >= 0);\n        assertTrue( \"printStackTrace() contains 2nd nested message\", msg.indexOf(\"Caused by: java.lang.Exception: another exception\") >= 0);\n        assertTrue( \"printStackTrace() inner message after outer message\", \n            msg.indexOf(\"org.apache.commons.lang.exception.NestableException: outer\") <\n            msg.indexOf(\"Caused by: org.apache.commons.lang.exception.NestableException: inner\"));\n        assertTrue( \"printStackTrace() cause message after inner message\",\n            msg.indexOf(\"Caused by: org.apache.commons.lang.exception.NestableException: inner\") <\n            msg.indexOf(\"Caused by: java.lang.Exception: another exception\"));\n    }",
        "begin_line": 219,
        "end_line": 253,
        "comment": "",
        "child_ranges": [
            "(line 221,col 9)-(line 221,col 65)",
            "(line 222,col 9)-(line 222,col 47)",
            "(line 223,col 9)-(line 223,col 130)",
            "(line 224,col 9)-(line 242,col 9)",
            "(line 243,col 9)-(line 243,col 37)",
            "(line 244,col 9)-(line 244,col 145)",
            "(line 245,col 9)-(line 245,col 160)",
            "(line 246,col 9)-(line 246,col 140)",
            "(line 247,col 9)-(line 249,col 98)",
            "(line 250,col 9)-(line 252,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableExceptionTestCase.testSerialization()",
        "snippet": "    public void testSerialization()\n        throws java.io.IOException, ClassNotFoundException\n    {\n        RuntimeException nestedEx = new RuntimeException(\"nested exception message\");\n        NestableExceptionTester1 ex = new NestableExceptionTester1(\"serialization test\", nestedEx);\n\n        assertTrue( \"implements java.io.Serializable\", nestedEx instanceof java.io.Serializable);\n        \n        assertTrue( \"implements java.io.Serializable\", ex instanceof java.io.Serializable);\n        \n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        ByteArrayInputStream bais = null;\n        ObjectOutputStream oos = null;\n        ObjectInputStream ois = null;\n\n        try\n        {        \n            oos = new ObjectOutputStream(baos);\n            oos.writeObject(ex);\n            oos.flush();\n            bais = new ByteArrayInputStream(baos.toByteArray());\n            ois = new ObjectInputStream(bais);\n            NestableExceptionTester1 deserializedEx = (NestableExceptionTester1) ois.readObject();\n            assertEquals( \n                    \"getThrowableCount() return value\",\n                        ex.getThrowableCount(),\n                        deserializedEx.getThrowableCount());\n            \n            for (int i = 0; i < ex.getThrowableCount(); i++)\n            {\n                Throwable t = ex.getThrowable(i);\n                Throwable deserializedThrowable = deserializedEx.getThrowable(i);\n                \n                assertEquals( t.getClass(),\n                        deserializedThrowable.getClass());\n                        \n                assertEquals(\n                    t.getMessage(),\n                    deserializedThrowable.getMessage());\n            }\n        }\n        finally\n        {\n            if (null != oos)\n            {\n                try\n                {\n                    oos.close();\n                }\n                catch (Exception ignored)\n                {\n                    // intentionally empty\n                }\n            }\n        }\n        \n    }",
        "begin_line": 255,
        "end_line": 311,
        "comment": "",
        "child_ranges": [
            "(line 258,col 9)-(line 258,col 85)",
            "(line 259,col 9)-(line 259,col 99)",
            "(line 261,col 9)-(line 261,col 97)",
            "(line 263,col 9)-(line 263,col 91)",
            "(line 265,col 9)-(line 265,col 65)",
            "(line 266,col 9)-(line 266,col 41)",
            "(line 267,col 9)-(line 267,col 38)",
            "(line 268,col 9)-(line 268,col 37)",
            "(line 270,col 9)-(line 309,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableExceptionTester1.NestableExceptionTester1()",
        "snippet": "    public NestableExceptionTester1()\n    {\n        super();\n    }",
        "begin_line": 319,
        "end_line": 322,
        "comment": "",
        "child_ranges": [
            "(line 321,col 9)-(line 321,col 16)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableExceptionTester1.NestableExceptionTester1(java.lang.String, java.lang.Throwable)",
        "snippet": "    public NestableExceptionTester1(String reason, Throwable cause)\n    {\n        super(reason, cause);\n    }",
        "begin_line": 324,
        "end_line": 327,
        "comment": "",
        "child_ranges": [
            "(line 326,col 9)-(line 326,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableExceptionTester1.NestableExceptionTester1(java.lang.String)",
        "snippet": "    public NestableExceptionTester1(String reason)\n    {\n        super(reason);\n    }",
        "begin_line": 329,
        "end_line": 332,
        "comment": "",
        "child_ranges": [
            "(line 331,col 9)-(line 331,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableExceptionTester1.NestableExceptionTester1(java.lang.Throwable)",
        "snippet": "    public NestableExceptionTester1(Throwable cause)\n    {\n        super(cause);\n    }",
        "begin_line": 334,
        "end_line": 337,
        "comment": "",
        "child_ranges": [
            "(line 336,col 9)-(line 336,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableExceptionTester2.NestableExceptionTester2()",
        "snippet": "    public NestableExceptionTester2()\n    {\n        super();\n    }",
        "begin_line": 346,
        "end_line": 349,
        "comment": "",
        "child_ranges": [
            "(line 348,col 9)-(line 348,col 16)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableExceptionTester2.NestableExceptionTester2(java.lang.String, java.lang.Throwable)",
        "snippet": "    public NestableExceptionTester2(String reason, Throwable cause)\n    {\n        super(reason, cause);\n    }",
        "begin_line": 351,
        "end_line": 354,
        "comment": "",
        "child_ranges": [
            "(line 353,col 9)-(line 353,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableExceptionTester2.NestableExceptionTester2(java.lang.String)",
        "snippet": "    public NestableExceptionTester2(String reason)\n    {\n        super(reason);\n    }",
        "begin_line": 356,
        "end_line": 359,
        "comment": "",
        "child_ranges": [
            "(line 358,col 9)-(line 358,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableExceptionTester2.NestableExceptionTester2(java.lang.Throwable)",
        "snippet": "    public NestableExceptionTester2(Throwable cause)\n    {\n        super(cause);\n    }",
        "begin_line": 361,
        "end_line": 364,
        "comment": "",
        "child_ranges": [
            "(line 363,col 9)-(line 363,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionTestSuite",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionTestSuite.java",
        "signature": "org.apache.commons.lang.exception.ExceptionTestSuite.ExceptionTestSuite(java.lang.String)",
        "snippet": "    public ExceptionTestSuite(String name)\n    {\n        super(name);\n    }",
        "begin_line": 34,
        "end_line": 37,
        "comment": "\n     * Construct a new instance.\n     ",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionTestSuite",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionTestSuite.java",
        "signature": "org.apache.commons.lang.exception.ExceptionTestSuite.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args)\n    {\n        TestRunner.run(suite());\n    }",
        "begin_line": 42,
        "end_line": 45,
        "comment": "\n     * Command-line interface.\n     ",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionTestSuite",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionTestSuite.java",
        "signature": "org.apache.commons.lang.exception.ExceptionTestSuite.suite()",
        "snippet": "    public static Test suite()\n    {\n        TestSuite suite = new TestSuite();\n        suite.addTest(NestableDelegateTestCase.suite());\n        suite.addTest(NestableErrorTestCase.suite());\n        suite.addTest(NestableExceptionTestCase.suite());\n        suite.addTest(NestableRuntimeExceptionTestCase.suite());\n        suite.addTest(ExceptionUtilsTestCase.suite());\n        return suite;\n    }",
        "begin_line": 47,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 42)",
            "(line 50,col 9)-(line 50,col 56)",
            "(line 51,col 9)-(line 51,col 53)",
            "(line 52,col 9)-(line 52,col 57)",
            "(line 53,col 9)-(line 53,col 64)",
            "(line 54,col 9)-(line 54,col 54)",
            "(line 55,col 9)-(line 55,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTestCase.NestableDelegateTestCase(java.lang.String)",
        "snippet": "    public NestableDelegateTestCase(String name)\n    {\n        super(name);\n    }",
        "begin_line": 48,
        "end_line": 51,
        "comment": "\n     * Construct a new instance of NestableDelegateTestCase with the specified name\n     ",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTestCase.setUp()",
        "snippet": "    public void setUp()\n    {\n        lineSeparator = System.getProperty(\"line.separator\");\n    }",
        "begin_line": 56,
        "end_line": 59,
        "comment": "\n     * Set up instance variables required by this test case.\n     ",
        "child_ranges": [
            "(line 58,col 9)-(line 58,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTestCase.suite()",
        "snippet": "    public static Test suite()\n    {\n        return new TestSuite(NestableDelegateTestCase.class);\n    }",
        "begin_line": 61,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTestCase.tearDown()",
        "snippet": "    public void tearDown()\n    {\n        lineSeparator = null;\n    }",
        "begin_line": 69,
        "end_line": 72,
        "comment": "\n     * Tear down instance variables required by this test case.\n     ",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTestCase.testNestableDelegateConstructor()",
        "snippet": "    public void testNestableDelegateConstructor()\n    {\n        String msg = null;\n        boolean constructorFailed = false;\n        try\n        {\n            NestableDelegate nonThrowableCause = new NestableDelegate(new NonThrowableNestable());\n        }\n        catch(IllegalArgumentException iae)\n        {\n            constructorFailed = true;\n            msg = iae.getMessage();\n        }\n        assertTrue(\"nestable delegate constructor with non-throwable cause failed == true\", constructorFailed);\n        assertTrue(\"constructor failed exception msg == \" + CONSTRUCTOR_FAILED_MSG,\n            msg.equals(CONSTRUCTOR_FAILED_MSG));\n\n        constructorFailed = false;\n        try\n        {\n            NestableDelegate nd1 = new NestableDelegate(new ThrowableNestable());\n        }\n        catch(IllegalArgumentException iae)\n        {\n            constructorFailed = true;\n        }\n        assertTrue(\"nestable delegate constructor with throwable cause failed == false\", !constructorFailed);\n    }",
        "begin_line": 77,
        "end_line": 104,
        "comment": "\n     * Test the implementation\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 26)",
            "(line 80,col 9)-(line 80,col 42)",
            "(line 81,col 9)-(line 89,col 9)",
            "(line 90,col 9)-(line 90,col 111)",
            "(line 91,col 9)-(line 92,col 48)",
            "(line 94,col 9)-(line 94,col 34)",
            "(line 95,col 9)-(line 102,col 9)",
            "(line 103,col 9)-(line 103,col 109)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTestCase.testNestableDelegateGetMessage()",
        "snippet": "    public void testNestableDelegateGetMessage()\n    {\n        Nestable ne1 = new ThrowableNestable();\n        assertTrue(\"ThrowableNestable ne1 getMessage() == ThrowableNestable exception\",\n            ne1.getMessage().equals(\"ThrowableNestable exception\"));\n        NestableDelegate nd1 = new NestableDelegate(ne1);\n        assertTrue(\"nd1 getMessage() == \" + ne1.getCause().getMessage(),\n            nd1.getMessage(\"base\").equals(\"base: \" + ne1.getCause().getMessage()));\n        \n        Nestable ne2 = new ThrowableNestedNestable(new Exception(\"nested exception 2\"));\n        NestableDelegate nd2 = new NestableDelegate(ne2);\n        assertTrue(\"nd2 getMessage() == base: \" + ne2.getCause().getMessage(),\n            nd2.getMessage(\"base\").equals(\"base: \" + ne2.getCause().getMessage()));\n    }",
        "begin_line": 106,
        "end_line": 119,
        "comment": "",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 47)",
            "(line 109,col 9)-(line 110,col 68)",
            "(line 111,col 9)-(line 111,col 57)",
            "(line 112,col 9)-(line 113,col 83)",
            "(line 115,col 9)-(line 115,col 88)",
            "(line 116,col 9)-(line 116,col 57)",
            "(line 117,col 9)-(line 118,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTestCase.testNestableDelegateGetThrowableCount()",
        "snippet": "    public void testNestableDelegateGetThrowableCount()\n    {\n        Nestable n = null;\n        NestableDelegate d = null;\n        \n        n = new NestableDelegateTester1();\n        d = new NestableDelegate(n);\n        doNestableDelegateGetThrowableCount(d, 1);\n        \n        n = new NestableDelegateTester1(\"level 1\");\n        d = new NestableDelegate(n);\n        doNestableDelegateGetThrowableCount(d, 1);\n        \n        n = new NestableDelegateTester1(new Exception());\n        d = new NestableDelegate(n);\n        doNestableDelegateGetThrowableCount(d, 2);\n        \n        n = new NestableDelegateTester1(new Exception(\"level 2\"));\n        d = new NestableDelegate(n);\n        doNestableDelegateGetThrowableCount(d, 2);\n        \n        n = new NestableDelegateTester1(\"level 1\", \n                new NestableDelegateTester2(\"level 2\", \n                    new NestableDelegateTester1(\n                        new NestableDelegateTester2(\"level 4\", \n                            new Exception(\"level 5\")\n                        )\n                    )\n                )\n            );\n        d = new NestableDelegate(n);\n        doNestableDelegateGetThrowableCount(d, 5);\n    }",
        "begin_line": 121,
        "end_line": 153,
        "comment": "",
        "child_ranges": [
            "(line 123,col 9)-(line 123,col 26)",
            "(line 124,col 9)-(line 124,col 34)",
            "(line 126,col 9)-(line 126,col 42)",
            "(line 127,col 9)-(line 127,col 36)",
            "(line 128,col 9)-(line 128,col 50)",
            "(line 130,col 9)-(line 130,col 51)",
            "(line 131,col 9)-(line 131,col 36)",
            "(line 132,col 9)-(line 132,col 50)",
            "(line 134,col 9)-(line 134,col 57)",
            "(line 135,col 9)-(line 135,col 36)",
            "(line 136,col 9)-(line 136,col 50)",
            "(line 138,col 9)-(line 138,col 66)",
            "(line 139,col 9)-(line 139,col 36)",
            "(line 140,col 9)-(line 140,col 50)",
            "(line 142,col 9)-(line 150,col 14)",
            "(line 151,col 9)-(line 151,col 36)",
            "(line 152,col 9)-(line 152,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTestCase.doNestableDelegateGetThrowableCount(org.apache.commons.lang.exception.NestableDelegate, int)",
        "snippet": "    private void doNestableDelegateGetThrowableCount(NestableDelegate d, int len)\n    {\n        // Compare the lengths\n        assertEquals(\"delegate length\", len, d.getThrowableCount());\n    }",
        "begin_line": 155,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 158,col 9)-(line 158,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTestCase.testNestableDelegateGetMessages()",
        "snippet": "    public void testNestableDelegateGetMessages()\n    {\n        Nestable n = null;\n        NestableDelegate d = null;\n        String msgs[] = null;\n        \n        msgs = new String[1];\n        n = new NestableDelegateTester1();\n        d = new NestableDelegate(n);        \n        doNestableDelegateGetMessages(d, msgs);\n        \n        msgs = new String[1];\n        msgs[0] = \"level 1\";\n        n = new NestableDelegateTester1(msgs[0]);\n        d = new NestableDelegate(n);\n        doNestableDelegateGetMessages(d, msgs);\n\n        msgs = new String[2];\n        n = new NestableDelegateTester1(new Exception());\n        d = new NestableDelegate(n);\n        doNestableDelegateGetMessages(d, msgs);\n\n        msgs = new String[2];\n        msgs[0] = null;\n        msgs[1] = \"level 2\";\n        n = new NestableDelegateTester1(new Exception(msgs[1]));\n        d = new NestableDelegate(n);\n        doNestableDelegateGetMessages(d, msgs);\n \n        msgs = new String[5];\n        msgs[0] = \"level 1\";\n        msgs[1] = \"level 2\";\n        msgs[2] = null;\n        msgs[3] = \"level 4\";\n        msgs[4] = \"level 5\";\n        n = new NestableDelegateTester1(msgs[0], \n                new NestableDelegateTester2(msgs[1], \n                    new NestableDelegateTester1(\n                        new NestableDelegateTester2(msgs[3], \n                            new Exception(msgs[4])\n                        )\n                    )\n                )\n            );\n        d = new NestableDelegate(n);\n        doNestableDelegateGetMessages(d, msgs);\n    }",
        "begin_line": 161,
        "end_line": 207,
        "comment": "",
        "child_ranges": [
            "(line 163,col 9)-(line 163,col 26)",
            "(line 164,col 9)-(line 164,col 34)",
            "(line 165,col 9)-(line 165,col 29)",
            "(line 167,col 9)-(line 167,col 29)",
            "(line 168,col 9)-(line 168,col 42)",
            "(line 169,col 9)-(line 169,col 36)",
            "(line 170,col 9)-(line 170,col 47)",
            "(line 172,col 9)-(line 172,col 29)",
            "(line 173,col 9)-(line 173,col 28)",
            "(line 174,col 9)-(line 174,col 49)",
            "(line 175,col 9)-(line 175,col 36)",
            "(line 176,col 9)-(line 176,col 47)",
            "(line 178,col 9)-(line 178,col 29)",
            "(line 179,col 9)-(line 179,col 57)",
            "(line 180,col 9)-(line 180,col 36)",
            "(line 181,col 9)-(line 181,col 47)",
            "(line 183,col 9)-(line 183,col 29)",
            "(line 184,col 9)-(line 184,col 23)",
            "(line 185,col 9)-(line 185,col 28)",
            "(line 186,col 9)-(line 186,col 64)",
            "(line 187,col 9)-(line 187,col 36)",
            "(line 188,col 9)-(line 188,col 47)",
            "(line 190,col 9)-(line 190,col 29)",
            "(line 191,col 9)-(line 191,col 28)",
            "(line 192,col 9)-(line 192,col 28)",
            "(line 193,col 9)-(line 193,col 23)",
            "(line 194,col 9)-(line 194,col 28)",
            "(line 195,col 9)-(line 195,col 28)",
            "(line 196,col 9)-(line 204,col 14)",
            "(line 205,col 9)-(line 205,col 36)",
            "(line 206,col 9)-(line 206,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTestCase.doNestableDelegateGetMessages(org.apache.commons.lang.exception.NestableDelegate, java.lang.String[])",
        "snippet": "    private void doNestableDelegateGetMessages(NestableDelegate d, String[] nMsgs)\n    {\n        // Compare the messages\n        String[] dMsgs = d.getMessages();\n        assertEquals(\"messages length\", nMsgs.length, dMsgs.length);\n        for(int i = 0; i < nMsgs.length; i++)\n        {\n            assertEquals(\"message \" + i, nMsgs[i], dMsgs[i]);\n        }\n    }",
        "begin_line": 209,
        "end_line": 218,
        "comment": "",
        "child_ranges": [
            "(line 212,col 9)-(line 212,col 41)",
            "(line 213,col 9)-(line 213,col 68)",
            "(line 214,col 9)-(line 217,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTestCase.testGetMessageString()",
        "snippet": "    public void testGetMessageString()\n    {\n        NestableDelegateTester1 ndt1 = new NestableDelegateTester1 (new NullPointerException ());\n        NestableDelegate nd = new NestableDelegate (ndt1);\n        assertNull (nd.getMessage((String)null));\n        \n        ndt1 = new NestableDelegateTester1 (new NullPointerException (\"null pointer\"));\n        nd = new NestableDelegate (ndt1);\n        assertNotNull(nd.getMessage((String)null));\n        \n        ndt1 = new NestableDelegateTester1 ();\n        nd = new NestableDelegate (ndt1);\n        assertNull(nd.getMessage((String)null));\n        \n        ndt1 = new NestableDelegateTester1 (\"root\");\n        nd = new NestableDelegate (ndt1);\n        assertNull(nd.getMessage((String)null));\n    }",
        "begin_line": 220,
        "end_line": 237,
        "comment": "",
        "child_ranges": [
            "(line 222,col 9)-(line 222,col 97)",
            "(line 223,col 9)-(line 223,col 58)",
            "(line 224,col 9)-(line 224,col 49)",
            "(line 226,col 9)-(line 226,col 87)",
            "(line 227,col 9)-(line 227,col 41)",
            "(line 228,col 9)-(line 228,col 51)",
            "(line 230,col 9)-(line 230,col 46)",
            "(line 231,col 9)-(line 231,col 41)",
            "(line 232,col 9)-(line 232,col 48)",
            "(line 234,col 9)-(line 234,col 52)",
            "(line 235,col 9)-(line 235,col 41)",
            "(line 236,col 9)-(line 236,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTestCase.testNestableDelegateGetMessageN()",
        "snippet": "    public void testNestableDelegateGetMessageN()\n    {\n        Nestable n = null;\n        NestableDelegate d = null;\n        String[] msgs = new String[5];\n        msgs[0] = \"level 1\";\n        msgs[1] = \"level 2\";\n        msgs[2] = null;\n        msgs[3] = \"level 4\";\n        msgs[4] = \"level 5\";\n        n = new NestableDelegateTester1(msgs[0], \n                new NestableDelegateTester2(msgs[1], \n                    new NestableDelegateTester1(\n                        new NestableDelegateTester2(msgs[3], \n                            new Exception(msgs[4])\n                        )\n                    )\n                )\n            );\n        d = new NestableDelegate(n);\n        for(int i = 0; i < msgs.length; i++)\n        {\n            assertEquals(\"message \" + i, msgs[i], d.getMessage(i));\n        }\n        \n        // Test for index out of bounds\n        try\n        {\n            String msg = d.getMessage(-1);\n            fail(\"getMessage(-1) should have thrown IndexOutOfBoundsException\");\n        }\n        catch(IndexOutOfBoundsException ioode)\n        {\n        }\n        try\n        {\n            String msg = d.getMessage(msgs.length + 100);\n            fail(\"getMessage(999) should have thrown IndexOutOfBoundsException\");\n        }\n        catch(IndexOutOfBoundsException ioode)\n        {\n        }\n    }",
        "begin_line": 239,
        "end_line": 281,
        "comment": "",
        "child_ranges": [
            "(line 241,col 9)-(line 241,col 26)",
            "(line 242,col 9)-(line 242,col 34)",
            "(line 243,col 9)-(line 243,col 38)",
            "(line 244,col 9)-(line 244,col 28)",
            "(line 245,col 9)-(line 245,col 28)",
            "(line 246,col 9)-(line 246,col 23)",
            "(line 247,col 9)-(line 247,col 28)",
            "(line 248,col 9)-(line 248,col 28)",
            "(line 249,col 9)-(line 257,col 14)",
            "(line 258,col 9)-(line 258,col 36)",
            "(line 259,col 9)-(line 262,col 9)",
            "(line 265,col 9)-(line 272,col 9)",
            "(line 273,col 9)-(line 280,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTestCase.testNestableDelegateGetThrowableN()",
        "snippet": "    public void testNestableDelegateGetThrowableN()\n    {\n        Nestable n = null;\n        NestableDelegate d = null;\n        String msgs[] = null;\n        Class[] throwables = null;\n        \n        msgs = new String[2];\n        msgs[0] = null;\n        msgs[1] = \"level 2\";\n        throwables = new Class[2];\n        throwables[0] = NestableDelegateTester1.class;\n        throwables[1] = Exception.class;\n        n = new NestableDelegateTester1(new Exception(msgs[1]));\n        d = new NestableDelegate(n);\n        doNestableDelegateGetThrowableN(d, throwables, msgs);\n \n        msgs = new String[5];\n        msgs[0] = \"level 1\";\n        msgs[1] = \"level 2\";\n        msgs[2] = null;\n        msgs[3] = \"level 4\";\n        msgs[4] = \"level 5\";\n        throwables = new Class[5];\n        throwables[0] = NestableDelegateTester1.class;\n        throwables[1] = NestableDelegateTester2.class;\n        throwables[2] = NestableDelegateTester1.class;\n        throwables[3] = NestableDelegateTester2.class;\n        throwables[4] = Exception.class;        \n        n = new NestableDelegateTester1(msgs[0], \n                new NestableDelegateTester2(msgs[1], \n                    new NestableDelegateTester1(\n                        new NestableDelegateTester2(msgs[3], \n                            new Exception(msgs[4])\n                            )\n                        )\n                    )\n                );\n        d = new NestableDelegate(n);\n        doNestableDelegateGetThrowableN(d, throwables, msgs);\n    }",
        "begin_line": 283,
        "end_line": 323,
        "comment": "",
        "child_ranges": [
            "(line 285,col 9)-(line 285,col 26)",
            "(line 286,col 9)-(line 286,col 34)",
            "(line 287,col 9)-(line 287,col 29)",
            "(line 288,col 9)-(line 288,col 34)",
            "(line 290,col 9)-(line 290,col 29)",
            "(line 291,col 9)-(line 291,col 23)",
            "(line 292,col 9)-(line 292,col 28)",
            "(line 293,col 9)-(line 293,col 34)",
            "(line 294,col 9)-(line 294,col 54)",
            "(line 295,col 9)-(line 295,col 40)",
            "(line 296,col 9)-(line 296,col 64)",
            "(line 297,col 9)-(line 297,col 36)",
            "(line 298,col 9)-(line 298,col 61)",
            "(line 300,col 9)-(line 300,col 29)",
            "(line 301,col 9)-(line 301,col 28)",
            "(line 302,col 9)-(line 302,col 28)",
            "(line 303,col 9)-(line 303,col 23)",
            "(line 304,col 9)-(line 304,col 28)",
            "(line 305,col 9)-(line 305,col 28)",
            "(line 306,col 9)-(line 306,col 34)",
            "(line 307,col 9)-(line 307,col 54)",
            "(line 308,col 9)-(line 308,col 54)",
            "(line 309,col 9)-(line 309,col 54)",
            "(line 310,col 9)-(line 310,col 54)",
            "(line 311,col 9)-(line 311,col 40)",
            "(line 312,col 9)-(line 320,col 18)",
            "(line 321,col 9)-(line 321,col 36)",
            "(line 322,col 9)-(line 322,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTestCase.doNestableDelegateGetThrowableN(org.apache.commons.lang.exception.NestableDelegate, java.lang.Class[], java.lang.String[])",
        "snippet": "    private void doNestableDelegateGetThrowableN(NestableDelegate d, Class[] classes, String[] msgs)\n    {\n        Throwable t = null;\n        String msg = null;\n        \n        for(int i = 0; i < classes.length; i++)\n        {\n            t = d.getThrowable(i);\n            assertEquals(\"throwable class\", classes[i], t.getClass());\n            if(Nestable.class.isInstance(t))\n            {\n                msg = ((Nestable) t).getMessage(0);\n            }\n            else\n            {\n                msg = t.getMessage();\n            }\n            assertEquals(\"throwable message\", msgs[i], msg);\n        }\n        \n        // Test for index out of bounds\n        try\n        {\n            t = d.getThrowable(-1);\n            fail(\"getThrowable(-1) should have thrown IndexOutOfBoundsException\");\n        }\n        catch(IndexOutOfBoundsException ioobe)\n        {\n        }\n        try\n        {\n            t = d.getThrowable(999);\n            fail(\"getThrowable(999) should have thrown IndexOutOfBoundsException\");\n        }\n        catch(IndexOutOfBoundsException ioobe)\n        {\n        }\n    }",
        "begin_line": 325,
        "end_line": 362,
        "comment": "",
        "child_ranges": [
            "(line 327,col 9)-(line 327,col 27)",
            "(line 328,col 9)-(line 328,col 26)",
            "(line 330,col 9)-(line 343,col 9)",
            "(line 346,col 9)-(line 353,col 9)",
            "(line 354,col 9)-(line 361,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTestCase.testNestableDelegateGetThrowables()",
        "snippet": "    public void testNestableDelegateGetThrowables()\n    {\n        Nestable n = null;\n        NestableDelegate d = null;\n        String msgs[] = null;\n        Class[] throwables = null;\n        \n        msgs = new String[2];\n        msgs[0] = null;\n        msgs[1] = \"level 2\";\n        throwables = new Class[2];\n        throwables[0] = NestableDelegateTester1.class;\n        throwables[1] = Exception.class;\n        n = new NestableDelegateTester1(new Exception(msgs[1]));\n        d = new NestableDelegate(n);\n        doNestableDelegateGetThrowables(d, throwables, msgs);\n \n        msgs = new String[5];\n        msgs[0] = \"level 1\";\n        msgs[1] = \"level 2\";\n        msgs[2] = null;\n        msgs[3] = \"level 4\";\n        msgs[4] = \"level 5\";\n        throwables = new Class[5];\n        throwables[0] = NestableDelegateTester1.class;\n        throwables[1] = NestableDelegateTester2.class;\n        throwables[2] = NestableDelegateTester1.class;\n        throwables[3] = NestableDelegateTester2.class;\n        throwables[4] = Exception.class;        \n        n = new NestableDelegateTester1(msgs[0], \n                new NestableDelegateTester2(msgs[1], \n                    new NestableDelegateTester1(\n                        new NestableDelegateTester2(msgs[3], \n                            new Exception(msgs[4])\n                        )\n                    )\n                )\n            );\n        d = new NestableDelegate(n);\n        doNestableDelegateGetThrowables(d, throwables, msgs);\n    }",
        "begin_line": 364,
        "end_line": 404,
        "comment": "",
        "child_ranges": [
            "(line 366,col 9)-(line 366,col 26)",
            "(line 367,col 9)-(line 367,col 34)",
            "(line 368,col 9)-(line 368,col 29)",
            "(line 369,col 9)-(line 369,col 34)",
            "(line 371,col 9)-(line 371,col 29)",
            "(line 372,col 9)-(line 372,col 23)",
            "(line 373,col 9)-(line 373,col 28)",
            "(line 374,col 9)-(line 374,col 34)",
            "(line 375,col 9)-(line 375,col 54)",
            "(line 376,col 9)-(line 376,col 40)",
            "(line 377,col 9)-(line 377,col 64)",
            "(line 378,col 9)-(line 378,col 36)",
            "(line 379,col 9)-(line 379,col 61)",
            "(line 381,col 9)-(line 381,col 29)",
            "(line 382,col 9)-(line 382,col 28)",
            "(line 383,col 9)-(line 383,col 28)",
            "(line 384,col 9)-(line 384,col 23)",
            "(line 385,col 9)-(line 385,col 28)",
            "(line 386,col 9)-(line 386,col 28)",
            "(line 387,col 9)-(line 387,col 34)",
            "(line 388,col 9)-(line 388,col 54)",
            "(line 389,col 9)-(line 389,col 54)",
            "(line 390,col 9)-(line 390,col 54)",
            "(line 391,col 9)-(line 391,col 54)",
            "(line 392,col 9)-(line 392,col 40)",
            "(line 393,col 9)-(line 401,col 14)",
            "(line 402,col 9)-(line 402,col 36)",
            "(line 403,col 9)-(line 403,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTestCase.doNestableDelegateGetThrowables(org.apache.commons.lang.exception.NestableDelegate, java.lang.Class[], java.lang.String[])",
        "snippet": "    private void doNestableDelegateGetThrowables(NestableDelegate d, Class[] classes, String[] msgs)\n    {\n        Throwable[] throwables = null;\n        String msg = null;\n\n        throwables = d.getThrowables();\n        assertEquals(\"throwables length\", classes.length, throwables.length);\n        for(int i = 0; i < classes.length; i++)\n        {\n            assertEquals(\"throwable class\", classes[i], throwables[i].getClass());\n            Throwable t = throwables[i];\n            if(Nestable.class.isInstance(t))\n            {\n                msg = ((Nestable) t).getMessage(0);\n            }\n            else\n            {\n                msg = t.getMessage();\n            }\n            assertEquals(\"throwable message\", msgs[i], msg);\n        }\n    }",
        "begin_line": 406,
        "end_line": 427,
        "comment": "",
        "child_ranges": [
            "(line 408,col 9)-(line 408,col 38)",
            "(line 409,col 9)-(line 409,col 26)",
            "(line 411,col 9)-(line 411,col 39)",
            "(line 412,col 9)-(line 412,col 77)",
            "(line 413,col 9)-(line 426,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTestCase.testIndexOfThrowable()",
        "snippet": "    public void testIndexOfThrowable()\n    {\n        Nestable n = null;\n        NestableDelegate d = null;\n        String msgs[] = null;\n        Class[] throwables = null;\n        \n        msgs = new String[5];\n        msgs[0] = \"level 1\";\n        msgs[1] = \"level 2\";\n        msgs[2] = null;\n        msgs[3] = \"level 4\";\n        msgs[4] = \"level 5\";\n        throwables = new Class[5];\n        throwables[0] = NestableDelegateTester1.class;\n        throwables[1] = NestableDelegateTester2.class;\n        throwables[2] = NestableDelegateTester1.class;\n        throwables[3] = NestableDelegateTester2.class;\n        throwables[4] = EOFException.class;\n        int[] indexes = {0, 1, 0, 1, 4};\n        n = new NestableDelegateTester1(msgs[0], \n                new NestableDelegateTester2(msgs[1], \n                    new NestableDelegateTester1(\n                        new NestableDelegateTester2(msgs[3], \n                            new EOFException(msgs[4])\n                        )\n                    )\n                )\n            );\n        d = new NestableDelegate(n);\n        for(int i = 0; i < throwables.length; i++)\n        {\n            doNestableDelegateIndexOfThrowable(d, throwables[i], 0, indexes[i], msgs[indexes[i]]);\n        }\n        doNestableDelegateIndexOfThrowable(d, NestableDelegateTester2.class, 2, 3, msgs[3]);\n        doNestableDelegateIndexOfThrowable(d, NestableDelegateTester1.class, 1, 2, msgs[2]);\n        doNestableDelegateIndexOfThrowable(d, NestableDelegateTester1.class, 3, -1, null);\n        doNestableDelegateIndexOfThrowable(d, NestableDelegateTester1.class, 4, -1, null);\n        doNestableDelegateIndexOfThrowable(d, EOFException.class, 2, 4, msgs[4]);\n        doNestableDelegateIndexOfThrowable(d, IOException.class, 2, 4, msgs[4]);\n        doNestableDelegateIndexOfThrowable(d, Exception.class, 2, 2, msgs[2]);\n        doNestableDelegateIndexOfThrowable(d, Exception.class, 0, 0, msgs[0]);\n        doNestableDelegateIndexOfThrowable(d, java.util.Date.class, 0, -1, null);\n        doNestableDelegateIndexOfThrowable(d, null, 0, -1, null);\n        \n        // Test for index out of bounds\n        try\n        {\n            int index = d.indexOfThrowable(NestableDelegateTester1.class, -1);\n            fail(\"method should have thrown IndexOutOfBoundsException\");\n        }\n        catch(IndexOutOfBoundsException iooob)\n        {\n        }\n        try\n        {\n            int index = d.indexOfThrowable(NestableDelegateTester1.class, 5);\n            fail(\"method should have thrown IndexOutOfBoundsException\");\n        }\n        catch(IndexOutOfBoundsException iooob)\n        {\n        }\n    }",
        "begin_line": 429,
        "end_line": 491,
        "comment": "",
        "child_ranges": [
            "(line 431,col 9)-(line 431,col 26)",
            "(line 432,col 9)-(line 432,col 34)",
            "(line 433,col 9)-(line 433,col 29)",
            "(line 434,col 9)-(line 434,col 34)",
            "(line 436,col 9)-(line 436,col 29)",
            "(line 437,col 9)-(line 437,col 28)",
            "(line 438,col 9)-(line 438,col 28)",
            "(line 439,col 9)-(line 439,col 23)",
            "(line 440,col 9)-(line 440,col 28)",
            "(line 441,col 9)-(line 441,col 28)",
            "(line 442,col 9)-(line 442,col 34)",
            "(line 443,col 9)-(line 443,col 54)",
            "(line 444,col 9)-(line 444,col 54)",
            "(line 445,col 9)-(line 445,col 54)",
            "(line 446,col 9)-(line 446,col 54)",
            "(line 447,col 9)-(line 447,col 43)",
            "(line 448,col 9)-(line 448,col 40)",
            "(line 449,col 9)-(line 457,col 14)",
            "(line 458,col 9)-(line 458,col 36)",
            "(line 459,col 9)-(line 462,col 9)",
            "(line 463,col 9)-(line 463,col 92)",
            "(line 464,col 9)-(line 464,col 92)",
            "(line 465,col 9)-(line 465,col 90)",
            "(line 466,col 9)-(line 466,col 90)",
            "(line 467,col 9)-(line 467,col 81)",
            "(line 468,col 9)-(line 468,col 80)",
            "(line 469,col 9)-(line 469,col 78)",
            "(line 470,col 9)-(line 470,col 78)",
            "(line 471,col 9)-(line 471,col 81)",
            "(line 472,col 9)-(line 472,col 65)",
            "(line 475,col 9)-(line 482,col 9)",
            "(line 483,col 9)-(line 490,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTestCase.doNestableDelegateIndexOfThrowable(org.apache.commons.lang.exception.NestableDelegate, java.lang.Class, int, int, java.lang.String)",
        "snippet": "    private void doNestableDelegateIndexOfThrowable(NestableDelegate d, Class type, int fromIndex, int expectedIndex, String expectedMsg)\n    {\n        Throwable t = null;\n        \n        int index = d.indexOfThrowable(type, fromIndex);\n        assertEquals(\"index of throwable \" + (type == null ? \"null\" : type.getName()), expectedIndex, index);\n        if(expectedIndex > -1)\n        {\n            t = d.getThrowable(index);\n            if(expectedMsg != null)\n            {\n                String msg = null;\n                if(Nestable.class.isInstance(t))\n                {\n                    msg = ((Nestable) t).getMessage(0);\n                }\n                else\n                {\n                    msg = t.getMessage();\n                }\n                assertEquals(\"message of indexed throwable\", expectedMsg, msg);\n            }\n        }\n    }",
        "begin_line": 493,
        "end_line": 516,
        "comment": "",
        "child_ranges": [
            "(line 495,col 9)-(line 495,col 27)",
            "(line 497,col 9)-(line 497,col 56)",
            "(line 498,col 9)-(line 498,col 109)",
            "(line 499,col 9)-(line 515,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTestCase.testNestableDelegetePrintStackTrace()",
        "snippet": "    public void testNestableDelegetePrintStackTrace()\n    {\n        int lineSepLen = lineSeparator.length();\n        int partialStackTraceLen = PARTIAL_STACK_TRACE.length();\n        Nestable ne3 = new ThrowableNestedNestable(new Exception(\"nested exception 3\"));\n        NestableDelegate nd3 = new NestableDelegate(ne3);\n\n        ByteArrayOutputStream baos1 = new ByteArrayOutputStream();\n        PrintStream ps1 = new PrintStream(baos1);\n        nd3.printStackTrace(ps1);\n        String stack1 = baos1.toString();\n        assertTrue(\"stack trace startsWith\", stack1.startsWith(PARTIAL_STACK_TRACE));\n\n        Nestable n = new NestableDelegateTester1(\"level 1\", \n                new NestableDelegateTester2(\"level 2\", \n                    new NestableDelegateTester1(\n                        new NestableDelegateTester2(\"level 4\", \n                            new Exception(\"level 5\")\n                        )\n                    )\n                )\n            );\n        NestableDelegate d = new NestableDelegate(n);\n        \n        // Only testing the flags for jdk1.3 and below\n        if (!ExceptionUtils.isThrowableNested()) {\n            NestableDelegate.topDown = true; NestableDelegate.trimStackFrames = true;\n            checkStackTrace(d, true, true, NestableDelegateTester1.class.getName()+\": level 1\", 24);\n            NestableDelegate.topDown = true; NestableDelegate.trimStackFrames = false;\n            checkStackTrace(d, true, false, NestableDelegateTester1.class.getName()+\": level 1\", 80);\n            NestableDelegate.topDown = false; NestableDelegate.trimStackFrames = true;\n            checkStackTrace(d, false, true, \"java.lang.Exception: level 5\", 24);\n            NestableDelegate.topDown = false; NestableDelegate.trimStackFrames = false;\n            checkStackTrace(d, false, false, \"java.lang.Exception: level 5\", 80);\n            NestableDelegate.topDown = true; NestableDelegate.trimStackFrames = true;\n        }\n    }",
        "begin_line": 518,
        "end_line": 554,
        "comment": "",
        "child_ranges": [
            "(line 520,col 9)-(line 520,col 48)",
            "(line 521,col 9)-(line 521,col 64)",
            "(line 522,col 9)-(line 522,col 88)",
            "(line 523,col 9)-(line 523,col 57)",
            "(line 525,col 9)-(line 525,col 66)",
            "(line 526,col 9)-(line 526,col 49)",
            "(line 527,col 9)-(line 527,col 33)",
            "(line 528,col 9)-(line 528,col 41)",
            "(line 529,col 9)-(line 529,col 85)",
            "(line 531,col 9)-(line 539,col 14)",
            "(line 540,col 9)-(line 540,col 53)",
            "(line 543,col 9)-(line 553,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTestCase.checkStackTrace(org.apache.commons.lang.exception.NestableDelegate, boolean, boolean, java.lang.String, int)",
        "snippet": "    private void checkStackTrace(NestableDelegate d, boolean topDown, boolean trimStackFrames,\n            String startsWith, int expCount) {\n        ByteArrayOutputStream baos1 = new ByteArrayOutputStream();\n        PrintStream ps1 = new PrintStream(baos1);\n        d.printStackTrace(ps1);\n        String stack1 = baos1.toString();\n        int actCount = countLines(stack1);\n        assertTrue(\"topDown: \"+topDown+\", trimStackFrames: \"+trimStackFrames+\" startsWith\",\n            stack1.startsWith(startsWith));\n        // test is unreliable, as count varies depending on JUnit version/where main method is\n//        assertEquals(\"topDown: \"+topDown+\", trimStackFrames: \"+trimStackFrames+\" lineCount\",\n//            expCount, actCount);\n    }",
        "begin_line": 555,
        "end_line": 567,
        "comment": "",
        "child_ranges": [
            "(line 557,col 9)-(line 557,col 66)",
            "(line 558,col 9)-(line 558,col 49)",
            "(line 559,col 9)-(line 559,col 31)",
            "(line 560,col 9)-(line 560,col 41)",
            "(line 561,col 9)-(line 561,col 42)",
            "(line 562,col 9)-(line 563,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTestCase.countLines(java.lang.String)",
        "snippet": "    private int countLines(String s) {\n        if (s == null) return 0;\n        \n        int i = 0, ndx = -1;\n        while ((ndx = s.indexOf(\"\\n\", ndx+1)) != -1) {\n            i++;\n        }\n        return i;\n    }",
        "begin_line": 568,
        "end_line": 576,
        "comment": "",
        "child_ranges": [
            "(line 569,col 9)-(line 569,col 32)",
            "(line 571,col 9)-(line 571,col 28)",
            "(line 572,col 9)-(line 574,col 9)",
            "(line 575,col 9)-(line 575,col 17)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTestCase.main(java.lang.String[])",
        "snippet": "    public static void main(String args[])\n    {\n        TestRunner.run(suite());\n    }",
        "begin_line": 578,
        "end_line": 581,
        "comment": "",
        "child_ranges": [
            "(line 580,col 9)-(line 580,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTester1.NestableDelegateTester1()",
        "snippet": "    public NestableDelegateTester1()\n    {\n        super();\n    }",
        "begin_line": 593,
        "end_line": 596,
        "comment": "",
        "child_ranges": [
            "(line 595,col 9)-(line 595,col 16)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTester1.NestableDelegateTester1(java.lang.String, java.lang.Throwable)",
        "snippet": "    public NestableDelegateTester1(String reason, Throwable cause)\n    {\n        super(reason);\n        this.cause = cause;\n    }",
        "begin_line": 598,
        "end_line": 602,
        "comment": "",
        "child_ranges": [
            "(line 600,col 9)-(line 600,col 22)",
            "(line 601,col 9)-(line 601,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTester1.NestableDelegateTester1(java.lang.String)",
        "snippet": "    public NestableDelegateTester1(String reason)\n    {\n        super(reason);\n    }",
        "begin_line": 604,
        "end_line": 607,
        "comment": "",
        "child_ranges": [
            "(line 606,col 9)-(line 606,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTester1.NestableDelegateTester1(java.lang.Throwable)",
        "snippet": "    public NestableDelegateTester1(Throwable cause)\n    {\n        super();\n        this.cause = cause;\n    }",
        "begin_line": 609,
        "end_line": 613,
        "comment": "",
        "child_ranges": [
            "(line 611,col 9)-(line 611,col 16)",
            "(line 612,col 9)-(line 612,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTester1.getThrowables()",
        "snippet": "    public Throwable[] getThrowables()\n    {\n        return new Throwable[0];\n    }",
        "begin_line": 619,
        "end_line": 622,
        "comment": "\n     * @see Nestable#getThrowables()\n     * Returns zero-length <code>Throwable</code> array for this test.\n     ",
        "child_ranges": [
            "(line 621,col 9)-(line 621,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTester1.getMessages()",
        "snippet": "    public String[] getMessages()\n    {\n        return new String[0];\n    }",
        "begin_line": 628,
        "end_line": 631,
        "comment": "\n     * @see Nestable#getMessages()\n     * Returns zero-length String array for this test.\n     ",
        "child_ranges": [
            "(line 630,col 9)-(line 630,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTester1.indexOfThrowable(java.lang.Class)",
        "snippet": "    public int indexOfThrowable(Class type)\n    {\n        return -1;\n    }",
        "begin_line": 637,
        "end_line": 640,
        "comment": "\n     * @see Nestable#indexOfThrowable(Class)\n     * Returns -1 for this test.\n     ",
        "child_ranges": [
            "(line 639,col 9)-(line 639,col 18)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTester1.getThrowable(int)",
        "snippet": "    public Throwable getThrowable(int index)\n    {\n        return null;\n    }",
        "begin_line": 646,
        "end_line": 649,
        "comment": "\n     * @see Nestable#getThrowable(int)\n     * Returns <code>null</code> for this test.\n     ",
        "child_ranges": [
            "(line 648,col 9)-(line 648,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTester1.getThrowableCount()",
        "snippet": "    public int getThrowableCount()\n    {\n        return 1;\n    }",
        "begin_line": 655,
        "end_line": 658,
        "comment": "\n     * @see Nestable#getThrowableCount()\n     * Returns 1 for this test.\n     ",
        "child_ranges": [
            "(line 657,col 9)-(line 657,col 17)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTester1.getCause()",
        "snippet": "    public Throwable getCause()\n    {\n        return cause;\n    }",
        "begin_line": 663,
        "end_line": 666,
        "comment": "\n     * @see Nestable#getCause()\n     ",
        "child_ranges": [
            "(line 665,col 9)-(line 665,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTester1.printPartialStackTrace(java.io.PrintWriter)",
        "snippet": "    public void printPartialStackTrace(PrintWriter out)\n    {\n        super.printStackTrace(out);\n    }",
        "begin_line": 674,
        "end_line": 677,
        "comment": "\n     * Empty method to satisfy the implemented interface. Does nothing\n     * in this test.\n     *\n     * @param out The writer to use.\n     ",
        "child_ranges": [
            "(line 676,col 9)-(line 676,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTester1.getMessage(int)",
        "snippet": "    public String getMessage(int index)\n    {\n        if(index == 0)\n        {\n            return super.getMessage();\n        }\n        else\n        {\n            return \"\";\n        }\n    }",
        "begin_line": 682,
        "end_line": 692,
        "comment": "\n     * @see Nestable#getMessage(int)\n     ",
        "child_ranges": [
            "(line 684,col 9)-(line 691,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTester1.indexOfThrowable(java.lang.Class, int)",
        "snippet": "    public int indexOfThrowable(Class type, int fromIndex)\n    {\n        return -1;\n    }",
        "begin_line": 698,
        "end_line": 701,
        "comment": "\n     * @see Nestable#indexOfThrowable(Class, int)\n     * Returns -1 for this test.\n     ",
        "child_ranges": [
            "(line 700,col 9)-(line 700,col 18)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTester2.NestableDelegateTester2()",
        "snippet": "    public NestableDelegateTester2()\n    {\n        super();\n    }",
        "begin_line": 714,
        "end_line": 717,
        "comment": "",
        "child_ranges": [
            "(line 716,col 9)-(line 716,col 16)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTester2.NestableDelegateTester2(java.lang.String, java.lang.Throwable)",
        "snippet": "    public NestableDelegateTester2(String reason, Throwable cause)\n    {\n        super(reason);\n        this.cause = cause;\n    }",
        "begin_line": 719,
        "end_line": 723,
        "comment": "",
        "child_ranges": [
            "(line 721,col 9)-(line 721,col 22)",
            "(line 722,col 9)-(line 722,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTester2.NestableDelegateTester2(java.lang.String)",
        "snippet": "    public NestableDelegateTester2(String reason)\n    {\n        super(reason);\n    }",
        "begin_line": 725,
        "end_line": 728,
        "comment": "",
        "child_ranges": [
            "(line 727,col 9)-(line 727,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTester2.NestableDelegateTester2(java.lang.Throwable)",
        "snippet": "    public NestableDelegateTester2(Throwable cause)\n    {\n        super();\n        this.cause = cause;\n    }",
        "begin_line": 730,
        "end_line": 734,
        "comment": "",
        "child_ranges": [
            "(line 732,col 9)-(line 732,col 16)",
            "(line 733,col 9)-(line 733,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTester2.getThrowables()",
        "snippet": "    public Throwable[] getThrowables()\n    {\n        return new Throwable[0];\n    }",
        "begin_line": 740,
        "end_line": 743,
        "comment": "\n     * @see Nestable#getThrowables()\n     * Returns zero-length <code>Throwable</code> array for this test.\n     ",
        "child_ranges": [
            "(line 742,col 9)-(line 742,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTester2.getMessages()",
        "snippet": "    public String[] getMessages()\n    {\n        return new String[0];\n    }",
        "begin_line": 749,
        "end_line": 752,
        "comment": "\n     * @see Nestable#getMessages()\n     * Returns zero-length String array for this test.\n     ",
        "child_ranges": [
            "(line 751,col 9)-(line 751,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTester2.indexOfThrowable(java.lang.Class)",
        "snippet": "    public int indexOfThrowable(Class type)\n    {\n        return -1;\n    }",
        "begin_line": 758,
        "end_line": 761,
        "comment": "\n     * @see Nestable#indexOfThrowable(Class)\n     * Returns -1 for this test.\n     ",
        "child_ranges": [
            "(line 760,col 9)-(line 760,col 18)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTester2.getThrowable(int)",
        "snippet": "    public Throwable getThrowable(int index)\n    {\n        return null;\n    }",
        "begin_line": 767,
        "end_line": 770,
        "comment": "\n     * @see Nestable#getThrowable(int)\n     * Returns <code>null</code> for this test.\n     ",
        "child_ranges": [
            "(line 769,col 9)-(line 769,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTester2.getThrowableCount()",
        "snippet": "    public int getThrowableCount()\n    {\n        return 1;\n    }",
        "begin_line": 778,
        "end_line": 781,
        "comment": "\n     * @see Nestable#getThrowableCount()\n     * Returns 1 for this test.\n     *\n     * @return 1\n     ",
        "child_ranges": [
            "(line 780,col 9)-(line 780,col 17)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTester2.getCause()",
        "snippet": "    public Throwable getCause()\n    {\n        return cause;\n    }",
        "begin_line": 786,
        "end_line": 789,
        "comment": "\n     * @see Nestable#getCause()\n     ",
        "child_ranges": [
            "(line 788,col 9)-(line 788,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTester2.printPartialStackTrace(java.io.PrintWriter)",
        "snippet": "    public void printPartialStackTrace(PrintWriter out)\n    {\n        super.printStackTrace(out);\n    }",
        "begin_line": 797,
        "end_line": 800,
        "comment": "\n     * Empty method to satisfy the implemented interface. Does nothing\n     * in this test.\n     *\n     * @param out The writer to use.\n     ",
        "child_ranges": [
            "(line 799,col 9)-(line 799,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTester2.getMessage(int)",
        "snippet": "    public String getMessage(int index)\n    {\n        if(index == 0)\n        {\n            return super.getMessage();\n        }\n        else\n        {\n            return \"\";\n        }\n    }",
        "begin_line": 805,
        "end_line": 815,
        "comment": "\n     * @see Nestable#getMessage(int)\n     ",
        "child_ranges": [
            "(line 807,col 9)-(line 814,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableDelegateTester2.indexOfThrowable(java.lang.Class, int)",
        "snippet": "    public int indexOfThrowable(Class type, int fromIndex)\n    {\n        return -1;\n    }",
        "begin_line": 821,
        "end_line": 824,
        "comment": "\n     * @see Nestable#indexOfThrowable(Class, int)     \n     * Returns -1 for this test.\n     ",
        "child_ranges": [
            "(line 823,col 9)-(line 823,col 18)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.ThrowableNestable.getThrowableCount()",
        "snippet": "    public int getThrowableCount()\n    {\n        return 1;\n    }",
        "begin_line": 841,
        "end_line": 844,
        "comment": "\n     * @see Nestable#getThrowableCount()\n     * Returns 1 for this test.\n     ",
        "child_ranges": [
            "(line 843,col 9)-(line 843,col 17)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.ThrowableNestable.getMessage()",
        "snippet": "    public String getMessage()\n    {\n        return \"ThrowableNestable exception\";\n    }",
        "begin_line": 851,
        "end_line": 854,
        "comment": "\n     * @see Nestable#getMessage()\n     * Returns the hard-coded string \"ThrowableNestable exception\" for this\n     * test.\n     ",
        "child_ranges": [
            "(line 853,col 9)-(line 853,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.ThrowableNestable.getMessage(int)",
        "snippet": "    public String getMessage(int index)\n    {\n        return getMessage();\n    }",
        "begin_line": 861,
        "end_line": 864,
        "comment": "\n     * @see Nestable#getMessage(int)\n     * Returns the hard-coded string \"ThrowableNestable exception\" for this\n     * test.\n     ",
        "child_ranges": [
            "(line 863,col 9)-(line 863,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.ThrowableNestable.getMessages()",
        "snippet": "    public String[] getMessages()\n    {\n        String msgs[] = new String[1];\n        msgs[0] = getMessage();\n        return msgs;\n    }",
        "begin_line": 870,
        "end_line": 875,
        "comment": "\n     * @see Nestable#getMessages()\n     * Returns single-element string array with \"ThrowableNestable exception\".\n     ",
        "child_ranges": [
            "(line 872,col 9)-(line 872,col 38)",
            "(line 873,col 9)-(line 873,col 31)",
            "(line 874,col 9)-(line 874,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.ThrowableNestable.getCause()",
        "snippet": "    public Throwable getCause()\n    {\n        return cause;\n    }",
        "begin_line": 880,
        "end_line": 883,
        "comment": "\n     * @see Nestable#getCause()\n     ",
        "child_ranges": [
            "(line 882,col 9)-(line 882,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.ThrowableNestable.printStackTrace(java.io.PrintWriter)",
        "snippet": "    public void printStackTrace(PrintWriter out)\n    {\n    }",
        "begin_line": 890,
        "end_line": 892,
        "comment": "\n     * @see Nestable#printStackTrace(PrintWriter)\n     * Empty method to satisfy the implemented interface. Does nothing\n     * in this test.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.ThrowableNestable.printPartialStackTrace(java.io.PrintWriter)",
        "snippet": "    public void printPartialStackTrace(PrintWriter out)\n    {\n    }",
        "begin_line": 899,
        "end_line": 901,
        "comment": "\n     * @see Nestable#printPartialStackTrace(PrintWriter)\n     * Empty method to satisfy the implemented interface. Does nothing\n     * in this test.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.ThrowableNestable.getThrowable(int)",
        "snippet": "    public Throwable getThrowable(int index)\n    {\n        return cause;\n    }",
        "begin_line": 906,
        "end_line": 909,
        "comment": "\n     * @see Nestable#getThrowable(int)\n     ",
        "child_ranges": [
            "(line 908,col 9)-(line 908,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.ThrowableNestable.getThrowables()",
        "snippet": "    public Throwable[] getThrowables()\n    {\n        Throwable throwables[] = new Throwable[1];\n        throwables[0] = cause;\n        return throwables;\n    }",
        "begin_line": 914,
        "end_line": 919,
        "comment": "\n     * @see Nestable#getThrowables()\n     ",
        "child_ranges": [
            "(line 916,col 9)-(line 916,col 50)",
            "(line 917,col 9)-(line 917,col 30)",
            "(line 918,col 9)-(line 918,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.ThrowableNestable.indexOfThrowable(java.lang.Class)",
        "snippet": "    public int indexOfThrowable(Class type)\n    {\n        if(Exception.class.isInstance(type))\n        {\n            return 0;\n        }\n        return -1;\n    }",
        "begin_line": 924,
        "end_line": 931,
        "comment": "\n     * @see Nestable#indexOfThrowable(Class)\n     ",
        "child_ranges": [
            "(line 926,col 9)-(line 929,col 9)",
            "(line 930,col 9)-(line 930,col 18)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.ThrowableNestable.indexOfThrowable(java.lang.Class, int)",
        "snippet": "    public int indexOfThrowable(Class type, int fromIndex)\n    {\n        return indexOfThrowable(type);\n    }",
        "begin_line": 936,
        "end_line": 939,
        "comment": "\n     * @see Nestable#indexOfThrowable(Class,int)\n     ",
        "child_ranges": [
            "(line 938,col 9)-(line 938,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.ThrowableNestedNestable.ThrowableNestedNestable(java.lang.Throwable)",
        "snippet": "    public ThrowableNestedNestable(Throwable cause)\n    {\n        this.cause = cause;\n    }",
        "begin_line": 952,
        "end_line": 955,
        "comment": "",
        "child_ranges": [
            "(line 954,col 9)-(line 954,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.ThrowableNestedNestable.getThrowableCount()",
        "snippet": "    public int getThrowableCount()\n    {\n        return 1;\n    }",
        "begin_line": 961,
        "end_line": 964,
        "comment": "\n     * @see Nestable#getThrowableCount()\n     * Returns 1 for this test.\n     ",
        "child_ranges": [
            "(line 963,col 9)-(line 963,col 17)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.ThrowableNestedNestable.getMessage()",
        "snippet": "    public String getMessage()\n    {\n        return \"ThrowableNestedNestable exception (\" + cause.getMessage() + \")\";\n    }",
        "begin_line": 971,
        "end_line": 974,
        "comment": "\n     * @see Nestable#getMessage()\n     * For this test, returns \"ThrowableNestable exception (\" appended to the\n     * message of the cause specified in the constructor.\n     ",
        "child_ranges": [
            "(line 973,col 9)-(line 973,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.ThrowableNestedNestable.getMessage(int)",
        "snippet": "    public String getMessage(int index)\n    {\n        return \"ThrowableNestedNestable exception (\" + cause.getMessage() + \")\";\n    }",
        "begin_line": 981,
        "end_line": 984,
        "comment": "\n     * @see Nestable#getMessage(int)\n     * For this test, returns \"ThrowableNestable exception (\" appended to the\n     * message of the cause specified in the constructor.\n     ",
        "child_ranges": [
            "(line 983,col 9)-(line 983,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.ThrowableNestedNestable.getMessages()",
        "snippet": "    public String[] getMessages()\n    {\n        String[] msgs = new String[1];\n        msgs[0] = \"ThrowableNestedNestable exception (\" + cause.getMessage() + \")\";\n        return msgs;\n    }",
        "begin_line": 992,
        "end_line": 997,
        "comment": "\n     * @see Nestable#getMessages()\n     * For this test, returns a single-element string array containing\n     * \"ThrowableNestable exception (\" appended to the\n     * message of the cause specified in the constructor.\n     ",
        "child_ranges": [
            "(line 994,col 9)-(line 994,col 38)",
            "(line 995,col 9)-(line 995,col 83)",
            "(line 996,col 9)-(line 996,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.ThrowableNestedNestable.getCause()",
        "snippet": "    public Throwable getCause()\n    {\n        return cause;\n    }",
        "begin_line": 1002,
        "end_line": 1005,
        "comment": "\n     * @see Nestable#getCause()\n     ",
        "child_ranges": [
            "(line 1004,col 9)-(line 1004,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.ThrowableNestedNestable.printStackTrace(java.io.PrintWriter)",
        "snippet": "    public void printStackTrace(PrintWriter out)\n    {\n        out.println(\"ThrowableNestedNestable stack trace place-holder\");\n    }",
        "begin_line": 1012,
        "end_line": 1015,
        "comment": "\n     * @see Nestable#printStackTrace(PrintWriter)\n     * For this test, writes the string\n     * \"ThrowableNestedNestable stack trace place-holder\" to the print writer.\n     ",
        "child_ranges": [
            "(line 1014,col 9)-(line 1014,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.ThrowableNestedNestable.printPartialStackTrace(java.io.PrintWriter)",
        "snippet": "    public void printPartialStackTrace(PrintWriter out)\n    {\n        out.println(\"ThrowableNestedNestable partial stack trace place-holder\");\n    }",
        "begin_line": 1023,
        "end_line": 1026,
        "comment": "\n     * @see Nestable#printPartialStackTrace(PrintWriter)\n     * For this test, writes the string\n     * \"ThrowableNestedNestable partial stack trace place-holder\" to the print\n     * writer.\n     ",
        "child_ranges": [
            "(line 1025,col 9)-(line 1025,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.ThrowableNestedNestable.getThrowable(int)",
        "snippet": "    public Throwable getThrowable(int index)\n    {\n        return cause;\n    }",
        "begin_line": 1031,
        "end_line": 1034,
        "comment": "\n     * @see Nestable#getThrowable(int)\n     ",
        "child_ranges": [
            "(line 1033,col 9)-(line 1033,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.ThrowableNestedNestable.getThrowables()",
        "snippet": "    public Throwable[] getThrowables()\n    {\n        Throwable throwables[] = new Throwable[1];\n        throwables[0] = cause;\n        return throwables;\n    }",
        "begin_line": 1039,
        "end_line": 1044,
        "comment": "\n     * @see Nestable#getThrowables()\n     ",
        "child_ranges": [
            "(line 1041,col 9)-(line 1041,col 50)",
            "(line 1042,col 9)-(line 1042,col 30)",
            "(line 1043,col 9)-(line 1043,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.ThrowableNestedNestable.indexOfThrowable(java.lang.Class)",
        "snippet": "    public int indexOfThrowable(Class type)\n    {\n        if(Exception.class.isInstance(type))\n        {\n            return 0;\n        }\n        return -1;\n    }",
        "begin_line": 1049,
        "end_line": 1056,
        "comment": "\n     * @see Nestable#indexOfThrowable(Class)\n     ",
        "child_ranges": [
            "(line 1051,col 9)-(line 1054,col 9)",
            "(line 1055,col 9)-(line 1055,col 18)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.ThrowableNestedNestable.indexOfThrowable(java.lang.Class, int)",
        "snippet": "    public int indexOfThrowable(Class type, int fromIndex)\n    {\n        return indexOfThrowable(type);\n    }",
        "begin_line": 1061,
        "end_line": 1064,
        "comment": "\n     * @see Nestable#indexOfThrowable(Class, int)\n     ",
        "child_ranges": [
            "(line 1063,col 9)-(line 1063,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NonThrowableNestable.getThrowableCount()",
        "snippet": "    public int getThrowableCount()\n    {\n        return 1;\n    }",
        "begin_line": 1077,
        "end_line": 1080,
        "comment": "\n     * @see Nestable#getThrowableCount()\n     * Returns 1 for this test.\n     ",
        "child_ranges": [
            "(line 1079,col 9)-(line 1079,col 17)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NonThrowableNestable.getMessage()",
        "snippet": "    public String getMessage()\n    {\n        return \"non-throwable\";\n    }",
        "begin_line": 1086,
        "end_line": 1089,
        "comment": "\n     * @see Nestable#getMessage()\n     * Returns the string \"non-throwable\" for this test.\n     ",
        "child_ranges": [
            "(line 1088,col 9)-(line 1088,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NonThrowableNestable.getMessage(int)",
        "snippet": "    public String getMessage(int index)\n    {\n        return \"non-throwable\";\n    }",
        "begin_line": 1095,
        "end_line": 1098,
        "comment": "\n     * @see Nestable#getMessage(int)\n     * Returns the string \"non-throwable\" for this test.\n     ",
        "child_ranges": [
            "(line 1097,col 9)-(line 1097,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NonThrowableNestable.getMessages()",
        "snippet": "    public String[] getMessages()\n    {\n        String[] msgs = new String[1];\n        msgs[0] = \"non-throwable\";\n        return msgs;\n    }",
        "begin_line": 1105,
        "end_line": 1110,
        "comment": "\n     * @see Nestable#getMessage()\n     * Returns a single-element array containing the string \"non-throwable\" for\n     * this test.\n     ",
        "child_ranges": [
            "(line 1107,col 9)-(line 1107,col 38)",
            "(line 1108,col 9)-(line 1108,col 34)",
            "(line 1109,col 9)-(line 1109,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NonThrowableNestable.getCause()",
        "snippet": "    public Throwable getCause()\n    {\n        return null;\n    }",
        "begin_line": 1116,
        "end_line": 1119,
        "comment": "\n     * @see Nestable#getCause()\n     * Returns <code>null</code> for this test.\n     ",
        "child_ranges": [
            "(line 1118,col 9)-(line 1118,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NonThrowableNestable.printStackTrace(java.io.PrintWriter)",
        "snippet": "    public void printStackTrace(PrintWriter out)\n    {\n    }",
        "begin_line": 1126,
        "end_line": 1128,
        "comment": "\n     * @see Nestable#printStackTrace(PrintWriter)\n     * Empty method to satisfy the implemented interface. Does nothing\n     * in this test.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NonThrowableNestable.printStackTrace(java.io.PrintStream)",
        "snippet": "    public void printStackTrace(PrintStream out)\n    {\n    }",
        "begin_line": 1135,
        "end_line": 1137,
        "comment": "\n     * @see Nestable#printStackTrace(PrintStream)\n     * Empty method to satisfy the implemented interface. Does nothing\n     * in this test.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NonThrowableNestable.printPartialStackTrace(java.io.PrintWriter)",
        "snippet": "    public void printPartialStackTrace(PrintWriter out)\n    {\n    }",
        "begin_line": 1144,
        "end_line": 1146,
        "comment": "\n     * @see Nestable#printPartialStackTrace(PrintWriter)\n     * Empty method to satisfy the implemented interface. Does nothing\n     * in this test.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NonThrowableNestable.getThrowable(int)",
        "snippet": "    public Throwable getThrowable(int index)\n    {\n        return null;\n    }",
        "begin_line": 1153,
        "end_line": 1156,
        "comment": "\n     * @see Nestable#getThrowable(int)\n     * Returns <code>null</code> for this test.\n     ",
        "child_ranges": [
            "(line 1155,col 9)-(line 1155,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NonThrowableNestable.getThrowables()",
        "snippet": "    public Throwable[] getThrowables()\n    {\n        return new Throwable[0];\n    }",
        "begin_line": 1162,
        "end_line": 1165,
        "comment": "\n     * @see Nestable#getThrowables()\n     * Returns zero-length <code>Throwable</code> array.\n     ",
        "child_ranges": [
            "(line 1164,col 9)-(line 1164,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NonThrowableNestable.indexOfThrowable(java.lang.Class)",
        "snippet": "    public int indexOfThrowable(Class type)\n    {\n        return -1;\n    }",
        "begin_line": 1171,
        "end_line": 1174,
        "comment": "\n     * @see Nestable#indexOfThrowable(Class)\n     * Returns -1 for this test.\n     ",
        "child_ranges": [
            "(line 1173,col 9)-(line 1173,col 18)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableDelegateTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java",
        "signature": "org.apache.commons.lang.exception.NonThrowableNestable.indexOfThrowable(java.lang.Class, int)",
        "snippet": "    public int indexOfThrowable(Class type, int fromIndex)\n    {\n        return -1;\n    }",
        "begin_line": 1180,
        "end_line": 1183,
        "comment": "\n     * @see Nestable#indexOfThrowable(Class, int)\n     * Returns -1 for this test.\n     ",
        "child_ranges": [
            "(line 1182,col 9)-(line 1182,col 18)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.AbstractNestableTestCase",
        "child_classes": [
            "org.apache.commons.lang.exception.NestableErrorTestCase",
            "org.apache.commons.lang.exception.NestableExceptionTestCase",
            "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase"
        ],
        "src_path": "src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java",
        "signature": "org.apache.commons.lang.exception.AbstractNestableTestCase.AbstractNestableTestCase(java.lang.String)",
        "snippet": "    public AbstractNestableTestCase(String name)\n    {\n        super(name);\n    }",
        "begin_line": 40,
        "end_line": 43,
        "comment": "\n     * Constructs an instance of\n     * <code>AbstractNestableTestCase</code>.\n     *\n     * @param name the test name\n     ",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.AbstractNestableTestCase",
        "child_classes": [
            "org.apache.commons.lang.exception.NestableErrorTestCase",
            "org.apache.commons.lang.exception.NestableExceptionTestCase",
            "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase"
        ],
        "src_path": "src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java",
        "signature": "org.apache.commons.lang.exception.AbstractNestableTestCase.testGetCause()",
        "snippet": "    public void testGetCause()\n    {\n        Nestable ne1 = getNestable();\n        assertNull(\"nestable exception() cause is null\", ne1.getCause()); \n        \n        Nestable ne2 = getNestable(\"ne2\");\n        assertNull(\"nestable exception(\\\"ne2\\\") cause is null\", ne2.getCause());\n        \n        Nestable ne3 = getNestable(getThrowable(\"ne3 exception\"));\n        assertNotNull(\"nestable exception(Throwable(\\\"ne3 exception\\\") cause is not null\",\n            ne3.getCause()); \n        assertTrue(\"nestable exception(Throwable(\\\"ne3 exception\\\") cause message == ne3 exception\",\n            ne3.getCause().getMessage().equals(\"ne3 exception\")); \n        \n        Nestable ne4 = getNestable(\"ne4\", getThrowable(\"ne4 exception\"));\n        assertNotNull(\"nestable exception(\\\"ne4\\\", Throwable(\\\"ne4 exception\\\") cause is not null\", \n            ne4.getCause()); \n        \n        Nestable ne5 = getNestable(\"ne5\", (Throwable) null);\n        assertNull(\"nestable exception(\\\"ne5\\\", null) cause is null\", \n            ne5.getCause()); \n        \n        Nestable ne6 = getNestable(null, getThrowable(\"ne6 exception\"));\n        assertNotNull(\"nestable exception(null, Throwable(\\\"ne6 exception\\\") cause is not null\", \n            ne6.getCause()); \n    }",
        "begin_line": 48,
        "end_line": 73,
        "comment": "\n     * Tests the getCause() operation.\n     ",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 37)",
            "(line 51,col 9)-(line 51,col 73)",
            "(line 53,col 9)-(line 53,col 42)",
            "(line 54,col 9)-(line 54,col 80)",
            "(line 56,col 9)-(line 56,col 66)",
            "(line 57,col 9)-(line 58,col 28)",
            "(line 59,col 9)-(line 60,col 65)",
            "(line 62,col 9)-(line 62,col 73)",
            "(line 63,col 9)-(line 64,col 28)",
            "(line 66,col 9)-(line 66,col 60)",
            "(line 67,col 9)-(line 68,col 28)",
            "(line 70,col 9)-(line 70,col 72)",
            "(line 71,col 9)-(line 72,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.AbstractNestableTestCase",
        "child_classes": [
            "org.apache.commons.lang.exception.NestableErrorTestCase",
            "org.apache.commons.lang.exception.NestableExceptionTestCase",
            "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase"
        ],
        "src_path": "src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java",
        "signature": "org.apache.commons.lang.exception.AbstractNestableTestCase.testGetThrowableCount()",
        "snippet": "    public void testGetThrowableCount()\n    {\n        Nestable ne1 = getNestable();\n        assertEquals(\"ne1 throwable count\", 1, ne1.getThrowableCount());\n\n        Nestable ne2 = getNestable(\"ne2\");\n        assertEquals(\"ne2 throwable count\", 1, ne2.getThrowableCount());\n        \n        Nestable ne3 = getNestable(getThrowable(\"ne3 exception\"));\n        assertEquals(\"ne3 throwable count\", 2, ne3.getThrowableCount());\n        \n        Nestable ne4 = getNestable(\"ne4\", getThrowable(\"ne4 exception\"));\n        assertEquals(\"ne4 throwable count\", 2, ne4.getThrowableCount());\n        \n        Nestable ne5 = getNestable(\"ne5\", (Throwable) null);\n        assertEquals(\"ne 5 throwable count\", 1, ne5.getThrowableCount());\n        \n        Nestable ne6 = getNestable(null, getThrowable(\"ne6 exception\"));\n        assertEquals(\"ne 6 throwable count\", 2, ne6.getThrowableCount());\n        \n        Nestable ne7 = getNestable(\"ne7o\", getNestable(\"ne7i\", getThrowable(\"ne7 exception\")));\n        assertEquals(\"ne 7 throwable count\", 3, ne7.getThrowableCount());\n\n        Nestable ne8 = getNestable(\"level 1\", getNestable(\"level 2\", getNestable(getNestable(\"level 4\", getThrowable(\"level 5\")))));\n        assertEquals(\"ne 8 throwable count\", 5, ne8.getThrowableCount());\n    }",
        "begin_line": 78,
        "end_line": 103,
        "comment": "\n     * Tests the getThrowableCount() operation.\n     ",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 37)",
            "(line 81,col 9)-(line 81,col 72)",
            "(line 83,col 9)-(line 83,col 42)",
            "(line 84,col 9)-(line 84,col 72)",
            "(line 86,col 9)-(line 86,col 66)",
            "(line 87,col 9)-(line 87,col 72)",
            "(line 89,col 9)-(line 89,col 73)",
            "(line 90,col 9)-(line 90,col 72)",
            "(line 92,col 9)-(line 92,col 60)",
            "(line 93,col 9)-(line 93,col 73)",
            "(line 95,col 9)-(line 95,col 72)",
            "(line 96,col 9)-(line 96,col 73)",
            "(line 98,col 9)-(line 98,col 95)",
            "(line 99,col 9)-(line 99,col 73)",
            "(line 101,col 9)-(line 101,col 132)",
            "(line 102,col 9)-(line 102,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.AbstractNestableTestCase",
        "child_classes": [
            "org.apache.commons.lang.exception.NestableErrorTestCase",
            "org.apache.commons.lang.exception.NestableExceptionTestCase",
            "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase"
        ],
        "src_path": "src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java",
        "signature": "org.apache.commons.lang.exception.AbstractNestableTestCase.testGetMessage()",
        "snippet": "    public void testGetMessage()\n    {\n        Nestable ne1 = getNestable();\n        assertNull(\"nestable exception() message is null\", ne1.getMessage()); \n\n        Nestable ne2 = getNestable(\"ne2\");\n        assertNotNull(\"nestable exception(\\\"ne2\\\") message is not null\", ne2.getMessage());\n        assertEquals(\"nestable exception(\\\"ne2\\\") message == ne2\", ne2.getMessage(), \"ne2\");\n        \n        Nestable ne3 = getNestable(getThrowable(\"ne3 exception\"));\n        assertNotNull(\"nestable exception(Throwable(\\\"ne3 exception\\\") message is not null\",\n            ne3.getMessage()); \n        assertEquals(\"nestable exception(Throwable(\\\"ne3 exception\\\") message equals cause.toString()\",\n            ne3.getMessage(), ne3.getCause().toString()); \n        \n        Nestable ne4 = getNestable(\"ne4\", getThrowable(\"ne4 exception\"));\n        assertNotNull(\"nestable exception(\\\"ne4\\\", Throwable(\\\"ne4 exception\\\") message is not null\", \n            ne4.getMessage()); \n        assertEquals(\"nestable exception(\\\"ne4\\\", Throwable(\\\"ne4 exception\\\") message == ne4\", \n            ne4.getMessage(), \"ne4\"); \n        \n        Nestable ne5 = getNestable(\"ne5\", (Throwable) null);\n        assertNotNull(\"nestable exception(\\\"ne5\\\", null) message is not null\", \n            ne5.getMessage()); \n        assertEquals(\"nestable exception(\\\"ne5\\\", null) message == ne5\", \n            ne5.getMessage(), \"ne5\"); \n        \n        Throwable t6 = getThrowable(\"ne6 exception\");\n        Nestable ne6 = getNestable(null, t6);\n        assertNotNull(\"nestable exception(null, Throwable(\\\"ne6 exception\\\") message is not null\",\n            ne6.getMessage()); \n        assertEquals(\"nestable exception(null, Throwable(\\\"ne6 exception\\\") message equals cause.toString()\",\n            ne6.getMessage(), ne6.getCause().toString()); \n        \n        Nestable ne7 = getNestable(\"ne7o\", getNestable(\"ne7i\", getThrowable(\"ne7 exception\")));\n        assertEquals(\"nestable exception(\\\"ne7o\\\", getNestable(\\\"ne7i\\\", Throwable(\\\"ne7 exception\\\"))) message is ne7o: ne7i: ne7 exception\",\n            ne7.getMessage(), \"ne7o\");\n\n        Nestable ne8 = getNestable();\n        assertNull(\"nestable exception() message is null\",\n            ne8.getMessage());\n\n    }",
        "begin_line": 108,
        "end_line": 150,
        "comment": "\n     * Tests the getMessage() operation.\n     ",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 37)",
            "(line 111,col 9)-(line 111,col 77)",
            "(line 113,col 9)-(line 113,col 42)",
            "(line 114,col 9)-(line 114,col 91)",
            "(line 115,col 9)-(line 115,col 92)",
            "(line 117,col 9)-(line 117,col 66)",
            "(line 118,col 9)-(line 119,col 30)",
            "(line 120,col 9)-(line 121,col 57)",
            "(line 123,col 9)-(line 123,col 73)",
            "(line 124,col 9)-(line 125,col 30)",
            "(line 126,col 9)-(line 127,col 37)",
            "(line 129,col 9)-(line 129,col 60)",
            "(line 130,col 9)-(line 131,col 30)",
            "(line 132,col 9)-(line 133,col 37)",
            "(line 135,col 9)-(line 135,col 53)",
            "(line 136,col 9)-(line 136,col 45)",
            "(line 137,col 9)-(line 138,col 30)",
            "(line 139,col 9)-(line 140,col 57)",
            "(line 142,col 9)-(line 142,col 95)",
            "(line 143,col 9)-(line 144,col 38)",
            "(line 146,col 9)-(line 146,col 37)",
            "(line 147,col 9)-(line 148,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.AbstractNestableTestCase",
        "child_classes": [
            "org.apache.commons.lang.exception.NestableErrorTestCase",
            "org.apache.commons.lang.exception.NestableExceptionTestCase",
            "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase"
        ],
        "src_path": "src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java",
        "signature": "org.apache.commons.lang.exception.AbstractNestableTestCase.testGetMessageI()",
        "snippet": "    public void testGetMessageI()\n    {\n        String[] msgs = new String[5];\n        msgs[0] = \"level 1\";\n        msgs[1] = \"level 2\";\n        msgs[2] = null;\n        msgs[3] = \"level 4\";\n        msgs[4] = \"level 5\";\n        Nestable ne = getNestable(msgs[0], getNestable(msgs[1], getNestable(getNestable(msgs[3], getThrowable(msgs[4])))));\n        for(int i = 0; i < msgs.length; i++)\n        {\n            assertEquals(\"message \" + i, msgs[i], ne.getMessage(i));\n        }\n        \n        // Test for index out of bounds\n        try\n        {\n            String msg = ne.getMessage(-1);\n            fail(\"getMessage(-1) should have thrown IndexOutOfBoundsException\");\n        }\n        catch(IndexOutOfBoundsException ioode)\n        {\n        }\n        try\n        {\n            String msg = ne.getMessage(msgs.length + 100);\n            fail(\"getMessage(999) should have thrown IndexOutOfBoundsException\");\n        }\n        catch(IndexOutOfBoundsException ioode)\n        {\n        }\n    }",
        "begin_line": 155,
        "end_line": 186,
        "comment": "\n     * Tests the getMessage(int) operation.\n     ",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 38)",
            "(line 158,col 9)-(line 158,col 28)",
            "(line 159,col 9)-(line 159,col 28)",
            "(line 160,col 9)-(line 160,col 23)",
            "(line 161,col 9)-(line 161,col 28)",
            "(line 162,col 9)-(line 162,col 28)",
            "(line 163,col 9)-(line 163,col 123)",
            "(line 164,col 9)-(line 167,col 9)",
            "(line 170,col 9)-(line 177,col 9)",
            "(line 178,col 9)-(line 185,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.AbstractNestableTestCase",
        "child_classes": [
            "org.apache.commons.lang.exception.NestableErrorTestCase",
            "org.apache.commons.lang.exception.NestableExceptionTestCase",
            "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase"
        ],
        "src_path": "src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java",
        "signature": "org.apache.commons.lang.exception.AbstractNestableTestCase.testGetMessages()",
        "snippet": "    public void testGetMessages()\n    {\n        String[] msgs = new String[5];\n        msgs[0] = \"level 1\";\n        msgs[1] = \"level 2\";\n        msgs[2] = null;\n        msgs[3] = \"level 4\";\n        msgs[4] = \"level 5\";\n        Nestable ne = getNestable(msgs[0], getNestable(msgs[1], getNestable(getNestable(msgs[3], getThrowable(msgs[4])))));\n        String[] nMsgs = ne.getMessages();\n        assertEquals(\"messages length\", msgs.length, nMsgs.length);\n        for(int i = 0; i < nMsgs.length; i++)\n        {\n            assertEquals(\"message \" + i, msgs[i], nMsgs[i]);\n        }\n    }",
        "begin_line": 191,
        "end_line": 206,
        "comment": "\n     * Tests the getMessages() operation.\n     ",
        "child_ranges": [
            "(line 193,col 9)-(line 193,col 38)",
            "(line 194,col 9)-(line 194,col 28)",
            "(line 195,col 9)-(line 195,col 28)",
            "(line 196,col 9)-(line 196,col 23)",
            "(line 197,col 9)-(line 197,col 28)",
            "(line 198,col 9)-(line 198,col 28)",
            "(line 199,col 9)-(line 199,col 123)",
            "(line 200,col 9)-(line 200,col 42)",
            "(line 201,col 9)-(line 201,col 67)",
            "(line 202,col 9)-(line 205,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.AbstractNestableTestCase",
        "child_classes": [
            "org.apache.commons.lang.exception.NestableErrorTestCase",
            "org.apache.commons.lang.exception.NestableExceptionTestCase",
            "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase"
        ],
        "src_path": "src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java",
        "signature": "org.apache.commons.lang.exception.AbstractNestableTestCase.testGetThrowableI()",
        "snippet": "    public void testGetThrowableI()\n    {\n        Nestable n = null;\n        String msgs[] = null;\n        Class[] throwables = null;\n        \n        msgs = new String[2];\n        msgs[0] = null;\n        msgs[1] = \"level 2\";\n        throwables = new Class[2];\n        throwables[0] = getTester1Class();\n        throwables[1] = getThrowableClass();\n        n = getTester1(getThrowable(msgs[1]));\n        doNestableExceptionGetThrowableI(n, throwables, msgs);\n \n        msgs = new String[5];\n        msgs[0] = \"level 1\";\n        msgs[1] = \"level 2\";\n        msgs[2] = null;\n        msgs[3] = \"level 4\";\n        msgs[4] = \"level 5\";\n        throwables = new Class[5];\n        throwables[0] = getTester1Class();\n        throwables[1] = getTester2Class();\n        throwables[2] = getTester1Class();\n        throwables[3] = getTester2Class();\n        throwables[4] = getThrowableClass();        \n        n = getTester1(msgs[0], getTester2(msgs[1], getTester1(getTester2(msgs[3], getThrowable(msgs[4])))));\n        doNestableExceptionGetThrowableI(n, throwables, msgs);\n    }",
        "begin_line": 211,
        "end_line": 240,
        "comment": "\n     * Tests the getThrowable(int) operation.\n     ",
        "child_ranges": [
            "(line 213,col 9)-(line 213,col 26)",
            "(line 214,col 9)-(line 214,col 29)",
            "(line 215,col 9)-(line 215,col 34)",
            "(line 217,col 9)-(line 217,col 29)",
            "(line 218,col 9)-(line 218,col 23)",
            "(line 219,col 9)-(line 219,col 28)",
            "(line 220,col 9)-(line 220,col 34)",
            "(line 221,col 9)-(line 221,col 42)",
            "(line 222,col 9)-(line 222,col 44)",
            "(line 223,col 9)-(line 223,col 46)",
            "(line 224,col 9)-(line 224,col 62)",
            "(line 226,col 9)-(line 226,col 29)",
            "(line 227,col 9)-(line 227,col 28)",
            "(line 228,col 9)-(line 228,col 28)",
            "(line 229,col 9)-(line 229,col 23)",
            "(line 230,col 9)-(line 230,col 28)",
            "(line 231,col 9)-(line 231,col 28)",
            "(line 232,col 9)-(line 232,col 34)",
            "(line 233,col 9)-(line 233,col 42)",
            "(line 234,col 9)-(line 234,col 42)",
            "(line 235,col 9)-(line 235,col 42)",
            "(line 236,col 9)-(line 236,col 42)",
            "(line 237,col 9)-(line 237,col 44)",
            "(line 238,col 9)-(line 238,col 109)",
            "(line 239,col 9)-(line 239,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.AbstractNestableTestCase",
        "child_classes": [
            "org.apache.commons.lang.exception.NestableErrorTestCase",
            "org.apache.commons.lang.exception.NestableExceptionTestCase",
            "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase"
        ],
        "src_path": "src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java",
        "signature": "org.apache.commons.lang.exception.AbstractNestableTestCase.doNestableExceptionGetThrowableI(org.apache.commons.lang.exception.Nestable, java.lang.Class[], java.lang.String[])",
        "snippet": "    private void doNestableExceptionGetThrowableI(Nestable n, Class[] classes, String[] msgs)\n    {\n        Throwable t = null;\n        String msg = null;\n\n        for(int i = 0; i < classes.length; i++)\n        {\n            t = n.getThrowable(i);\n            assertEquals(\"throwable class\", classes[i], t.getClass());\n            if(Nestable.class.isInstance(t))\n            {\n                msg = ((Nestable) t).getMessage(0);\n            }\n            else\n            {\n                msg = t.getMessage();\n            }\n            assertEquals(\"throwable message\", msgs[i], msg);\n        }\n        \n        // Test for index out of bounds\n        try\n        {\n            t = n.getThrowable(-1);\n            fail(\"getThrowable(-1) should have thrown IndexOutOfBoundsException\");\n        }\n        catch(IndexOutOfBoundsException ioobe)\n        {\n        }\n        try\n        {\n            t = n.getThrowable(999);\n            fail(\"getThrowable(999) should have thrown IndexOutOfBoundsException\");\n        }\n        catch(IndexOutOfBoundsException ioobe)\n        {\n        }\n    }",
        "begin_line": 242,
        "end_line": 279,
        "comment": "",
        "child_ranges": [
            "(line 244,col 9)-(line 244,col 27)",
            "(line 245,col 9)-(line 245,col 26)",
            "(line 247,col 9)-(line 260,col 9)",
            "(line 263,col 9)-(line 270,col 9)",
            "(line 271,col 9)-(line 278,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.AbstractNestableTestCase",
        "child_classes": [
            "org.apache.commons.lang.exception.NestableErrorTestCase",
            "org.apache.commons.lang.exception.NestableExceptionTestCase",
            "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase"
        ],
        "src_path": "src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java",
        "signature": "org.apache.commons.lang.exception.AbstractNestableTestCase.testGetThrowables()",
        "snippet": "    public void testGetThrowables()\n    {\n        Nestable n = null;\n        String msgs[] = null;\n        Class[] throwables = null;\n        \n        msgs = new String[2];\n        msgs[0] = null;\n        msgs[1] = \"level 2\";\n        throwables = new Class[2];\n        throwables[0] = getTester1Class();\n        throwables[1] = getThrowableClass();\n        n = getTester1(getThrowable(msgs[1]));\n        doNestableExceptionGetThrowables(n, throwables, msgs);\n \n        msgs = new String[5];\n        msgs[0] = \"level 1\";\n        msgs[1] = \"level 2\";\n        msgs[2] = null;\n        msgs[3] = \"level 4\";\n        msgs[4] = \"level 5\";\n        throwables = new Class[5];\n        throwables[0] = getTester1Class();\n        throwables[1] = getTester2Class();\n        throwables[2] = getTester1Class();\n        throwables[3] = getTester2Class();\n        throwables[4] = getThrowableClass();\n        n = getTester1(msgs[0], getTester2(msgs[1], getTester1(getTester2(msgs[3], getThrowable(msgs[4])))));\n        doNestableExceptionGetThrowables(n, throwables, msgs);\n    }",
        "begin_line": 284,
        "end_line": 313,
        "comment": "\n     * Tests the getThrowables() operation.\n     ",
        "child_ranges": [
            "(line 286,col 9)-(line 286,col 26)",
            "(line 287,col 9)-(line 287,col 29)",
            "(line 288,col 9)-(line 288,col 34)",
            "(line 290,col 9)-(line 290,col 29)",
            "(line 291,col 9)-(line 291,col 23)",
            "(line 292,col 9)-(line 292,col 28)",
            "(line 293,col 9)-(line 293,col 34)",
            "(line 294,col 9)-(line 294,col 42)",
            "(line 295,col 9)-(line 295,col 44)",
            "(line 296,col 9)-(line 296,col 46)",
            "(line 297,col 9)-(line 297,col 62)",
            "(line 299,col 9)-(line 299,col 29)",
            "(line 300,col 9)-(line 300,col 28)",
            "(line 301,col 9)-(line 301,col 28)",
            "(line 302,col 9)-(line 302,col 23)",
            "(line 303,col 9)-(line 303,col 28)",
            "(line 304,col 9)-(line 304,col 28)",
            "(line 305,col 9)-(line 305,col 34)",
            "(line 306,col 9)-(line 306,col 42)",
            "(line 307,col 9)-(line 307,col 42)",
            "(line 308,col 9)-(line 308,col 42)",
            "(line 309,col 9)-(line 309,col 42)",
            "(line 310,col 9)-(line 310,col 44)",
            "(line 311,col 9)-(line 311,col 109)",
            "(line 312,col 9)-(line 312,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.AbstractNestableTestCase",
        "child_classes": [
            "org.apache.commons.lang.exception.NestableErrorTestCase",
            "org.apache.commons.lang.exception.NestableExceptionTestCase",
            "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase"
        ],
        "src_path": "src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java",
        "signature": "org.apache.commons.lang.exception.AbstractNestableTestCase.doNestableExceptionGetThrowables(org.apache.commons.lang.exception.Nestable, java.lang.Class[], java.lang.String[])",
        "snippet": "    private void doNestableExceptionGetThrowables(Nestable n, Class[] classes, String[] msgs)\n    {\n        String msg = null;\n\n        Throwable throwables[] = n.getThrowables();\n        assertEquals(\"throwables length\", classes.length, throwables.length);\n        for(int i = 0; i < classes.length; i++)\n        {\n            assertEquals(\"throwable class\", classes[i], throwables[i].getClass());\n            Throwable t = throwables[i];\n            if(Nestable.class.isInstance(t))\n            {\n                msg = ((Nestable) t).getMessage(0);\n            }\n            else\n            {\n                msg = t.getMessage();\n            }\n            assertEquals(\"throwable message\", msgs[i], msg);\n        }\n    }",
        "begin_line": 315,
        "end_line": 335,
        "comment": "",
        "child_ranges": [
            "(line 317,col 9)-(line 317,col 26)",
            "(line 319,col 9)-(line 319,col 51)",
            "(line 320,col 9)-(line 320,col 77)",
            "(line 321,col 9)-(line 334,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.AbstractNestableTestCase",
        "child_classes": [
            "org.apache.commons.lang.exception.NestableErrorTestCase",
            "org.apache.commons.lang.exception.NestableExceptionTestCase",
            "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase"
        ],
        "src_path": "src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java",
        "signature": "org.apache.commons.lang.exception.AbstractNestableTestCase.testIndexOfThrowable()",
        "snippet": "    public void testIndexOfThrowable()\n    {\n        Nestable n = null;\n        String msgs[] = null;\n        Class[] throwables = null;\n        \n        msgs = new String[5];\n        msgs[0] = \"level 1\";\n        msgs[1] = \"level 2\";\n        msgs[2] = null;\n        msgs[3] = \"level 4\";\n        msgs[4] = \"level 5\";\n        throwables = new Class[5];\n        throwables[0] = getTester1Class();\n        throwables[1] = getTester2Class();\n        throwables[2] = getTester1Class();\n        throwables[3] = getTester2Class();\n        throwables[4] = getThrowableClass();\n        int[] indexes = {0, 1, 0, 1, 4};\n        n = getTester1(msgs[0], getTester2(msgs[1], getTester1(getTester2(msgs[3], getThrowable(msgs[4])))));\n        for(int i = 0; i < throwables.length; i++)\n        {\n            doNestableExceptionIndexOfThrowable(n, throwables[i], indexes[i], msgs[indexes[i]]);\n        }\n        doNestableExceptionIndexOfThrowable(n, getBaseThrowableClass(), 0, msgs[0]);\n        doNestableExceptionIndexOfThrowable(n, java.util.Date.class, -1, null);\n        doNestableExceptionIndexOfThrowable(n, null, -1, null);\n    }",
        "begin_line": 340,
        "end_line": 367,
        "comment": "\n     * Tests the indexOfThrowable() operation.\n     ",
        "child_ranges": [
            "(line 342,col 9)-(line 342,col 26)",
            "(line 343,col 9)-(line 343,col 29)",
            "(line 344,col 9)-(line 344,col 34)",
            "(line 346,col 9)-(line 346,col 29)",
            "(line 347,col 9)-(line 347,col 28)",
            "(line 348,col 9)-(line 348,col 28)",
            "(line 349,col 9)-(line 349,col 23)",
            "(line 350,col 9)-(line 350,col 28)",
            "(line 351,col 9)-(line 351,col 28)",
            "(line 352,col 9)-(line 352,col 34)",
            "(line 353,col 9)-(line 353,col 42)",
            "(line 354,col 9)-(line 354,col 42)",
            "(line 355,col 9)-(line 355,col 42)",
            "(line 356,col 9)-(line 356,col 42)",
            "(line 357,col 9)-(line 357,col 44)",
            "(line 358,col 9)-(line 358,col 40)",
            "(line 359,col 9)-(line 359,col 109)",
            "(line 360,col 9)-(line 363,col 9)",
            "(line 364,col 9)-(line 364,col 84)",
            "(line 365,col 9)-(line 365,col 79)",
            "(line 366,col 9)-(line 366,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.AbstractNestableTestCase",
        "child_classes": [
            "org.apache.commons.lang.exception.NestableErrorTestCase",
            "org.apache.commons.lang.exception.NestableExceptionTestCase",
            "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase"
        ],
        "src_path": "src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java",
        "signature": "org.apache.commons.lang.exception.AbstractNestableTestCase.doNestableExceptionIndexOfThrowable(org.apache.commons.lang.exception.Nestable, java.lang.Class, int, java.lang.String)",
        "snippet": "    private void doNestableExceptionIndexOfThrowable(Nestable n, Class type, int expectedIndex, String expectedMsg)\n    {\n        Throwable t = null;\n        \n        int index = n.indexOfThrowable(type);\n        assertEquals(\"index of throwable \" + (type == null ? \"null\" : type.getName()), expectedIndex, index);\n        if(expectedIndex > -1)\n        {\n            t = n.getThrowable(index);\n            if(expectedMsg != null)\n            {\n                String msg = null;\n                if(Nestable.class.isInstance(t))\n                {\n                    msg = ((Nestable) t).getMessage(0);\n                }\n                else\n                {\n                    msg = t.getMessage();\n                }\n                assertEquals(\"message of indexed throwable\", expectedMsg, msg);\n            }\n        }\n    }",
        "begin_line": 369,
        "end_line": 392,
        "comment": "",
        "child_ranges": [
            "(line 371,col 9)-(line 371,col 27)",
            "(line 373,col 9)-(line 373,col 45)",
            "(line 374,col 9)-(line 374,col 109)",
            "(line 375,col 9)-(line 391,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.AbstractNestableTestCase",
        "child_classes": [
            "org.apache.commons.lang.exception.NestableErrorTestCase",
            "org.apache.commons.lang.exception.NestableExceptionTestCase",
            "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase"
        ],
        "src_path": "src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java",
        "signature": "org.apache.commons.lang.exception.AbstractNestableTestCase.testIndexOfThrowableI()",
        "snippet": "    public void testIndexOfThrowableI()\n    {\n        Nestable n = null;\n        String msgs[] = null;\n        Class[] throwables = null;\n        \n        msgs = new String[5];\n        msgs[0] = \"level 1\";\n        msgs[1] = \"level 2\";\n        msgs[2] = null;\n        msgs[3] = \"level 4\";\n        msgs[4] = \"level 5\";\n        throwables = new Class[5];\n        throwables[0] = getTester1Class();\n        throwables[1] = getTester2Class();\n        throwables[2] = getTester1Class();\n        throwables[3] = getTester2Class();\n        throwables[4] = getThrowableClass();\n        int[] indexes = {0, 1, 0, 1, 4};\n        n = getTester1(msgs[0], getTester2(msgs[1], getTester1(getTester2(msgs[3], getThrowable(msgs[4])))));\n        for(int i = 0; i < throwables.length; i++)\n        {\n            doNestableExceptionIndexOfThrowableI(n, throwables[i], 0, indexes[i], msgs[indexes[i]]);\n        }\n        doNestableExceptionIndexOfThrowableI(n, getTester2Class(), 2, 3, msgs[3]);\n        doNestableExceptionIndexOfThrowableI(n, getTester1Class(), 1, 2, msgs[2]);\n        doNestableExceptionIndexOfThrowableI(n, getTester1Class(), 3, -1, null);\n        doNestableExceptionIndexOfThrowableI(n, getTester1Class(), 4, -1, null);\n        doNestableExceptionIndexOfThrowableI(n, getThrowableClass(), 2, 4, msgs[4]);\n        doNestableExceptionIndexOfThrowableI(n, java.util.Date.class, 0, -1, null);\n        doNestableExceptionIndexOfThrowableI(n, null, 0, -1, null);\n        \n        // Test for index out of bounds\n        try\n        {\n            int index = n.indexOfThrowable(getTester1Class(), -1);\n            fail(\"method should have thrown IndexOutOfBoundsException\");\n        }\n        catch(IndexOutOfBoundsException iooob)\n        {\n        }\n        try\n        {\n            int index = n.indexOfThrowable(getTester1Class(), 5);\n            fail(\"method should have thrown IndexOutOfBoundsException\");\n        }\n        catch(IndexOutOfBoundsException iooob)\n        {\n        }\n        \n    }",
        "begin_line": 397,
        "end_line": 447,
        "comment": "\n     * Tests the indexOfThrowable(int) operation.\n     ",
        "child_ranges": [
            "(line 399,col 9)-(line 399,col 26)",
            "(line 400,col 9)-(line 400,col 29)",
            "(line 401,col 9)-(line 401,col 34)",
            "(line 403,col 9)-(line 403,col 29)",
            "(line 404,col 9)-(line 404,col 28)",
            "(line 405,col 9)-(line 405,col 28)",
            "(line 406,col 9)-(line 406,col 23)",
            "(line 407,col 9)-(line 407,col 28)",
            "(line 408,col 9)-(line 408,col 28)",
            "(line 409,col 9)-(line 409,col 34)",
            "(line 410,col 9)-(line 410,col 42)",
            "(line 411,col 9)-(line 411,col 42)",
            "(line 412,col 9)-(line 412,col 42)",
            "(line 413,col 9)-(line 413,col 42)",
            "(line 414,col 9)-(line 414,col 44)",
            "(line 415,col 9)-(line 415,col 40)",
            "(line 416,col 9)-(line 416,col 109)",
            "(line 417,col 9)-(line 420,col 9)",
            "(line 421,col 9)-(line 421,col 82)",
            "(line 422,col 9)-(line 422,col 82)",
            "(line 423,col 9)-(line 423,col 80)",
            "(line 424,col 9)-(line 424,col 80)",
            "(line 425,col 9)-(line 425,col 84)",
            "(line 426,col 9)-(line 426,col 83)",
            "(line 427,col 9)-(line 427,col 67)",
            "(line 430,col 9)-(line 437,col 9)",
            "(line 438,col 9)-(line 445,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.AbstractNestableTestCase",
        "child_classes": [
            "org.apache.commons.lang.exception.NestableErrorTestCase",
            "org.apache.commons.lang.exception.NestableExceptionTestCase",
            "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase"
        ],
        "src_path": "src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java",
        "signature": "org.apache.commons.lang.exception.AbstractNestableTestCase.doNestableExceptionIndexOfThrowableI(org.apache.commons.lang.exception.Nestable, java.lang.Class, int, int, java.lang.String)",
        "snippet": "    private void doNestableExceptionIndexOfThrowableI(Nestable n, Class type, int fromIndex, int expectedIndex, String expectedMsg)\n    {\n        Throwable t = null;\n        \n        int index = n.indexOfThrowable(type, fromIndex);\n        assertEquals(\"index of throwable \" + (type == null ? \"null\" : type.getName()), expectedIndex, index);\n        if(expectedIndex > -1)\n        {\n            t = n.getThrowable(index);\n            if(expectedMsg != null)\n            {\n                String msg = null;\n                if(Nestable.class.isInstance(t))\n                {\n                    msg = ((Nestable) t).getMessage(0);\n                }\n                else\n                {\n                    msg = t.getMessage();\n                }\n                assertEquals(\"message of indexed throwable\", expectedMsg, msg);\n            }\n        }\n        \n    }",
        "begin_line": 449,
        "end_line": 473,
        "comment": "",
        "child_ranges": [
            "(line 451,col 9)-(line 451,col 27)",
            "(line 453,col 9)-(line 453,col 56)",
            "(line 454,col 9)-(line 454,col 109)",
            "(line 455,col 9)-(line 471,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.AbstractNestableTestCase",
        "child_classes": [
            "org.apache.commons.lang.exception.NestableErrorTestCase",
            "org.apache.commons.lang.exception.NestableExceptionTestCase",
            "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase"
        ],
        "src_path": "src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java",
        "signature": "org.apache.commons.lang.exception.AbstractNestableTestCase.testPrintPartialStackTrace()",
        "snippet": "    public void testPrintPartialStackTrace()\n    {\n        Nestable ne9 = getNestable(\"ne9\", getThrowable(\"ne9 exception\"));\n        ByteArrayOutputStream baos2 = new ByteArrayOutputStream();\n        PrintStream ps2 = new PrintStream(baos2);\n        PrintWriter pw2 = new PrintWriter(ps2, true);\n        ne9.printPartialStackTrace(pw2);\n        String stack2 = baos2.toString();\n        String startsWith = ne9.getClass().getName() + \": ne9\";\n        assertTrue(\"stack trace startsWith == \" + startsWith,\n            stack2.startsWith(startsWith));\n        assertEquals(\"stack trace indexOf rethrown == -1\",\n            stack2.indexOf(\"rethrown\"), -1);\n    }",
        "begin_line": 478,
        "end_line": 491,
        "comment": "\n     * Tests the printPartialStackTrace() operation.\n     ",
        "child_ranges": [
            "(line 480,col 9)-(line 480,col 73)",
            "(line 481,col 9)-(line 481,col 66)",
            "(line 482,col 9)-(line 482,col 49)",
            "(line 483,col 9)-(line 483,col 53)",
            "(line 484,col 9)-(line 484,col 40)",
            "(line 485,col 9)-(line 485,col 41)",
            "(line 486,col 9)-(line 486,col 63)",
            "(line 487,col 9)-(line 488,col 43)",
            "(line 489,col 9)-(line 490,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.AbstractNestableTestCase",
        "child_classes": [
            "org.apache.commons.lang.exception.NestableErrorTestCase",
            "org.apache.commons.lang.exception.NestableExceptionTestCase",
            "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase"
        ],
        "src_path": "src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java",
        "signature": "org.apache.commons.lang.exception.AbstractNestableTestCase.testPrintStackTrace()",
        "snippet": "    public void testPrintStackTrace()\n    {\n        Nestable ne8 = getNestable(\"ne8\", getThrowable(\"ne8 exception\"));\n        ByteArrayOutputStream baos1 = new ByteArrayOutputStream();\n        PrintStream ps1 = new PrintStream(baos1);\n        PrintWriter pw1 = new PrintWriter(ps1, true);\n        ne8.printStackTrace(pw1);\n        String stack1 = baos1.toString();\n        String startsWith = ne8.getClass().getName() + \": ne8\";\n        assertTrue(\"stack trace startsWith == \" + startsWith,\n            stack1.startsWith(startsWith));\n        String indexOf = getThrowableClass().getName() + \": ne8 exception\";\n        assertTrue(\"stack trace indexOf \" + indexOf + \" > -1\",\n            stack1.indexOf(indexOf) > -1); \n    }",
        "begin_line": 496,
        "end_line": 510,
        "comment": "\n     * Tests the printStackTrace() operation.\n     ",
        "child_ranges": [
            "(line 498,col 9)-(line 498,col 73)",
            "(line 499,col 9)-(line 499,col 66)",
            "(line 500,col 9)-(line 500,col 49)",
            "(line 501,col 9)-(line 501,col 53)",
            "(line 502,col 9)-(line 502,col 33)",
            "(line 503,col 9)-(line 503,col 41)",
            "(line 504,col 9)-(line 504,col 63)",
            "(line 505,col 9)-(line 506,col 43)",
            "(line 507,col 9)-(line 507,col 75)",
            "(line 508,col 9)-(line 509,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.AbstractNestableTestCase",
        "child_classes": [
            "org.apache.commons.lang.exception.NestableErrorTestCase",
            "org.apache.commons.lang.exception.NestableExceptionTestCase",
            "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase"
        ],
        "src_path": "src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java",
        "signature": "org.apache.commons.lang.exception.AbstractNestableTestCase.getNestable()",
        "snippet": "    public abstract Nestable getNestable();",
        "begin_line": 518,
        "end_line": 518,
        "comment": "\n     * Returns an instance of the <code>Nestable</code> implementation being\n     * tested.\n     *\n     * @return the instance\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.exception.AbstractNestableTestCase",
        "child_classes": [
            "org.apache.commons.lang.exception.NestableErrorTestCase",
            "org.apache.commons.lang.exception.NestableExceptionTestCase",
            "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase"
        ],
        "src_path": "src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java",
        "signature": "org.apache.commons.lang.exception.AbstractNestableTestCase.getNestable(org.apache.commons.lang.exception.Nestable)",
        "snippet": "    public abstract Nestable getNestable(Nestable n);",
        "begin_line": 528,
        "end_line": 528,
        "comment": "\n     * Returns an instance of the <code>Nestable</code> implementation being\n     * tested.\n     *\n     * @param n <code>Nestable</code> argument to be provided to the instance\n     * constructor\n     * @return the instance\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.exception.AbstractNestableTestCase",
        "child_classes": [
            "org.apache.commons.lang.exception.NestableErrorTestCase",
            "org.apache.commons.lang.exception.NestableExceptionTestCase",
            "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase"
        ],
        "src_path": "src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java",
        "signature": "org.apache.commons.lang.exception.AbstractNestableTestCase.getNestable(java.lang.String)",
        "snippet": "    public abstract Nestable getNestable(String msg);",
        "begin_line": 538,
        "end_line": 538,
        "comment": "\n     * Returns an instance of the <code>Nestable</code> implementation being\n     * tested.\n     *\n     * @param msg <code>String</code> argument to be provided to the instance\n     * constructor\n     * @return the instance\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.exception.AbstractNestableTestCase",
        "child_classes": [
            "org.apache.commons.lang.exception.NestableErrorTestCase",
            "org.apache.commons.lang.exception.NestableExceptionTestCase",
            "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase"
        ],
        "src_path": "src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java",
        "signature": "org.apache.commons.lang.exception.AbstractNestableTestCase.getNestable(java.lang.String, org.apache.commons.lang.exception.Nestable)",
        "snippet": "    public abstract Nestable getNestable(String msg, Nestable n);",
        "begin_line": 550,
        "end_line": 550,
        "comment": "\n     * Returns an instance of the <code>Nestable</code> implementation being\n     * tested.\n     *\n     * @param msg <code>String</code> argument to be provided to the instance\n     * constructor\n     * @param n <code>Nestable</code> argument to be provided to the instance\n     * constructor\n     * @return the instance\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.exception.AbstractNestableTestCase",
        "child_classes": [
            "org.apache.commons.lang.exception.NestableErrorTestCase",
            "org.apache.commons.lang.exception.NestableExceptionTestCase",
            "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase"
        ],
        "src_path": "src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java",
        "signature": "org.apache.commons.lang.exception.AbstractNestableTestCase.getNestable(java.lang.String, java.lang.Throwable)",
        "snippet": "    public abstract Nestable getNestable(String msg, Throwable t);",
        "begin_line": 562,
        "end_line": 562,
        "comment": "\n     * Returns an instance of the <code>Nestable</code> implementation being\n     * tested.\n     *\n     * @param msg <code>String</code> argument to be provided to the instance\n     * constructor\n     * @param t <code>Throwable</code> argument to be provided to the instance\n     * constructor\n     * @return the instance\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.exception.AbstractNestableTestCase",
        "child_classes": [
            "org.apache.commons.lang.exception.NestableErrorTestCase",
            "org.apache.commons.lang.exception.NestableExceptionTestCase",
            "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase"
        ],
        "src_path": "src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java",
        "signature": "org.apache.commons.lang.exception.AbstractNestableTestCase.getNestable(java.lang.Throwable)",
        "snippet": "    public abstract Nestable getNestable(Throwable t);",
        "begin_line": 572,
        "end_line": 572,
        "comment": "\n     * Returns an instance of the <code>Nestable</code> implementation being\n     * tested.\n     *\n     * @param t <code>Throwable</code> argument to be provided to the instance\n     * constructor\n     * @return the instance\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.exception.AbstractNestableTestCase",
        "child_classes": [
            "org.apache.commons.lang.exception.NestableErrorTestCase",
            "org.apache.commons.lang.exception.NestableExceptionTestCase",
            "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase"
        ],
        "src_path": "src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java",
        "signature": "org.apache.commons.lang.exception.AbstractNestableTestCase.getThrowable(java.lang.String)",
        "snippet": "    public abstract Throwable getThrowable(String msg);",
        "begin_line": 583,
        "end_line": 583,
        "comment": "\n     * Returns an instance of a <code>Throwable</code> to be used in\n     * constructing instances of the <code>Nestable</code> implementation being\n     * tested.\n     *\n     * @param msg <code>String</code> argument to be provided to the instance\n     * constructor\n     * @return the instance\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.exception.AbstractNestableTestCase",
        "child_classes": [
            "org.apache.commons.lang.exception.NestableErrorTestCase",
            "org.apache.commons.lang.exception.NestableExceptionTestCase",
            "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase"
        ],
        "src_path": "src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java",
        "signature": "org.apache.commons.lang.exception.AbstractNestableTestCase.getTester1(org.apache.commons.lang.exception.Nestable)",
        "snippet": "    public abstract Nestable getTester1(Nestable n);",
        "begin_line": 592,
        "end_line": 592,
        "comment": "\n     * Returns an instance of one tester <code>Nestable</code> implementation.\n     *\n     * @param n <code>Nestable</code> argument to be provided to the instance\n     * constructor\n     * @return the instance\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.exception.AbstractNestableTestCase",
        "child_classes": [
            "org.apache.commons.lang.exception.NestableErrorTestCase",
            "org.apache.commons.lang.exception.NestableExceptionTestCase",
            "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase"
        ],
        "src_path": "src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java",
        "signature": "org.apache.commons.lang.exception.AbstractNestableTestCase.getTester1(java.lang.Throwable)",
        "snippet": "    public abstract Nestable getTester1(Throwable t);",
        "begin_line": 601,
        "end_line": 601,
        "comment": "\n     * Returns an instance of one tester <code>Nestable</code> implementation.\n     *\n     * @param t <code>Throwable</code> argument to be provided to the instance\n     * constructor\n     * @return the instance\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.exception.AbstractNestableTestCase",
        "child_classes": [
            "org.apache.commons.lang.exception.NestableErrorTestCase",
            "org.apache.commons.lang.exception.NestableExceptionTestCase",
            "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase"
        ],
        "src_path": "src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java",
        "signature": "org.apache.commons.lang.exception.AbstractNestableTestCase.getTester1(java.lang.String, org.apache.commons.lang.exception.Nestable)",
        "snippet": "    public abstract Nestable getTester1(String msg, Nestable n);",
        "begin_line": 612,
        "end_line": 612,
        "comment": "\n     * Returns an instance of one tester <code>Nestable</code> implementation.\n     *\n     * @param msg <code>String</code> argument to be provided to the instance\n     * constructor\n     * @param n <code>Nestable</code> argument to be provided to the instance\n     * constructor\n     * @return the instance\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.exception.AbstractNestableTestCase",
        "child_classes": [
            "org.apache.commons.lang.exception.NestableErrorTestCase",
            "org.apache.commons.lang.exception.NestableExceptionTestCase",
            "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase"
        ],
        "src_path": "src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java",
        "signature": "org.apache.commons.lang.exception.AbstractNestableTestCase.getTester1(java.lang.String, java.lang.Throwable)",
        "snippet": "    public abstract Nestable getTester1(String msg, Throwable t);",
        "begin_line": 623,
        "end_line": 623,
        "comment": "\n     * Returns an instance of one tester <code>Nestable</code> implementation.\n     *\n     * @param msg <code>String</code> argument to be provided to the instance\n     * constructor\n     * @param t <code>Throwable</code> argument to be provided to the instance\n     * constructor\n     * @return the instance\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.exception.AbstractNestableTestCase",
        "child_classes": [
            "org.apache.commons.lang.exception.NestableErrorTestCase",
            "org.apache.commons.lang.exception.NestableExceptionTestCase",
            "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase"
        ],
        "src_path": "src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java",
        "signature": "org.apache.commons.lang.exception.AbstractNestableTestCase.getTester2(java.lang.String, org.apache.commons.lang.exception.Nestable)",
        "snippet": "    public abstract Nestable getTester2(String msg, Nestable n);",
        "begin_line": 635,
        "end_line": 635,
        "comment": "\n     * Returns an instance of a second tester <code>Nestable</code>\n     * implementation.\n     *\n     * @param msg <code>String</code> argument to be provided to the instance\n     * constructor\n     * @param n <code>Nestable</code> argument to be provided to the instance\n     * constructor\n     * @return the instance\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.exception.AbstractNestableTestCase",
        "child_classes": [
            "org.apache.commons.lang.exception.NestableErrorTestCase",
            "org.apache.commons.lang.exception.NestableExceptionTestCase",
            "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase"
        ],
        "src_path": "src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java",
        "signature": "org.apache.commons.lang.exception.AbstractNestableTestCase.getTester2(java.lang.String, java.lang.Throwable)",
        "snippet": "    public abstract Nestable getTester2(String msg, Throwable t);",
        "begin_line": 647,
        "end_line": 647,
        "comment": "\n     * Returns an instance of a second tester <code>Nestable</code>\n     * implementation.\n     *\n     * @param msg <code>String</code> argument to be provided to the instance\n     * constructor\n     * @param t <code>Throwable</code> argument to be provided to the instance\n     * constructor\n     * @return the instance\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.exception.AbstractNestableTestCase",
        "child_classes": [
            "org.apache.commons.lang.exception.NestableErrorTestCase",
            "org.apache.commons.lang.exception.NestableExceptionTestCase",
            "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase"
        ],
        "src_path": "src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java",
        "signature": "org.apache.commons.lang.exception.AbstractNestableTestCase.getTester1Class()",
        "snippet": "    public abstract Class getTester1Class();",
        "begin_line": 655,
        "end_line": 655,
        "comment": "\n     * Returns the class of the first tester <code>Nestable</code>\n     * implementation.\n     *\n     * @return the class\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.exception.AbstractNestableTestCase",
        "child_classes": [
            "org.apache.commons.lang.exception.NestableErrorTestCase",
            "org.apache.commons.lang.exception.NestableExceptionTestCase",
            "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase"
        ],
        "src_path": "src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java",
        "signature": "org.apache.commons.lang.exception.AbstractNestableTestCase.getTester2Class()",
        "snippet": "    public abstract Class getTester2Class();",
        "begin_line": 663,
        "end_line": 663,
        "comment": "\n     * Returns the class of the second tester <code>Nestable</code>\n     * implementation.\n     *\n     * @return the class\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.exception.AbstractNestableTestCase",
        "child_classes": [
            "org.apache.commons.lang.exception.NestableErrorTestCase",
            "org.apache.commons.lang.exception.NestableExceptionTestCase",
            "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase"
        ],
        "src_path": "src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java",
        "signature": "org.apache.commons.lang.exception.AbstractNestableTestCase.getThrowableClass()",
        "snippet": "    public abstract Class getThrowableClass();",
        "begin_line": 671,
        "end_line": 671,
        "comment": "\n     * Returns the class of the <code>Throwable</code> used in constructing\n     * instances of the <code>Nestable</code> implementation being tested.\n     *\n     * @return the class\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.exception.AbstractNestableTestCase",
        "child_classes": [
            "org.apache.commons.lang.exception.NestableErrorTestCase",
            "org.apache.commons.lang.exception.NestableExceptionTestCase",
            "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase"
        ],
        "src_path": "src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java",
        "signature": "org.apache.commons.lang.exception.AbstractNestableTestCase.getBaseThrowableClass()",
        "snippet": "    public abstract Class getBaseThrowableClass();",
        "begin_line": 678,
        "end_line": 678,
        "comment": "\n     * Returns the base class being used, typically Error, Eception or RuntimeException.\n     *\n     * @return the class\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableErrorTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableErrorTestCase.NestableErrorTestCase(java.lang.String)",
        "snippet": "    public NestableErrorTestCase(String name)\n    {\n        super(name);\n    }",
        "begin_line": 39,
        "end_line": 42,
        "comment": "\n     * Construct a new instance of\n     * <code>NestableErrorTestCase</code>.\n     *\n     * @param name test case name\n     ",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableErrorTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableErrorTestCase.setUp()",
        "snippet": "    public void setUp()\n    {\n    }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "\n     * Sets up instance variables required by this test case.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableErrorTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableErrorTestCase.suite()",
        "snippet": "    public static Test suite()\n    {\n        return new TestSuite(NestableErrorTestCase.class);\n    }",
        "begin_line": 56,
        "end_line": 59,
        "comment": "\n     * Returns the test suite\n     *\n     * @return the test suite\n     ",
        "child_ranges": [
            "(line 58,col 9)-(line 58,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableErrorTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableErrorTestCase.tearDown()",
        "snippet": "    public void tearDown()\n    {\n    }",
        "begin_line": 64,
        "end_line": 66,
        "comment": "\n     * Tears down instance variables required by this test case.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableErrorTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableErrorTestCase.main(java.lang.String[])",
        "snippet": "    public static void main(String args[])\n    {\n        TestRunner.run(suite());\n    }",
        "begin_line": 73,
        "end_line": 76,
        "comment": "\n     * Command line entry point for running the test suite.\n     *\n     * @param args array of command line arguments\n     ",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableErrorTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableErrorTestCase.getNestable()",
        "snippet": "    public Nestable getNestable()\n    {\n        return new NestableError();\n    }    ",
        "begin_line": 81,
        "end_line": 84,
        "comment": "\n     * @see AbstractNestableTestCase#getNestable()\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableErrorTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableErrorTestCase.getNestable(org.apache.commons.lang.exception.Nestable)",
        "snippet": "    public Nestable getNestable(Nestable n)\n    {\n        return new NestableError((Throwable) n);\n    }",
        "begin_line": 89,
        "end_line": 92,
        "comment": "\n     * @see AbstractNestableTestCase#getNestable(Nestable)\n     ",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableErrorTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableErrorTestCase.getNestable(java.lang.String)",
        "snippet": "    public Nestable getNestable(String msg)\n    {\n        return new NestableError(msg);\n    }",
        "begin_line": 97,
        "end_line": 100,
        "comment": "\n     * @see AbstractNestableTestCase#getNestable(String)\n     ",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableErrorTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableErrorTestCase.getNestable(java.lang.Throwable)",
        "snippet": "    public Nestable getNestable(Throwable t)\n    {\n        return new NestableError(t);\n    }",
        "begin_line": 105,
        "end_line": 108,
        "comment": "\n     * @see AbstractNestableTestCase#getNestable(Throwable)\n     ",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableErrorTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableErrorTestCase.getNestable(java.lang.String, java.lang.Throwable)",
        "snippet": "    public Nestable getNestable(String msg, Throwable t)\n    {\n        return new NestableError(msg, t);\n    }",
        "begin_line": 113,
        "end_line": 116,
        "comment": "\n     * @see AbstractNestableTestCase#getNestable(String, Throwable)\n     ",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableErrorTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableErrorTestCase.getNestable(java.lang.String, org.apache.commons.lang.exception.Nestable)",
        "snippet": "    public Nestable getNestable(String msg, Nestable n)\n    {\n        return new NestableError(msg, (Throwable) n);\n    }",
        "begin_line": 121,
        "end_line": 124,
        "comment": "\n     * @see AbstractNestableTestCase#getNestable(String, Nestable)\n     ",
        "child_ranges": [
            "(line 123,col 9)-(line 123,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableErrorTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableErrorTestCase.getTester1(java.lang.Throwable)",
        "snippet": "    public Nestable getTester1(Throwable t)\n    {\n        return new NestableErrorTester1(t);\n    }",
        "begin_line": 129,
        "end_line": 132,
        "comment": "\n     * @see AbstractNestableTestCase#getTester1(Throwable)\n     ",
        "child_ranges": [
            "(line 131,col 9)-(line 131,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableErrorTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableErrorTestCase.getTester1(org.apache.commons.lang.exception.Nestable)",
        "snippet": "    public Nestable getTester1(Nestable n)\n    {\n        return new NestableErrorTester1((Throwable) n);\n    }",
        "begin_line": 137,
        "end_line": 140,
        "comment": "\n     * @see AbstractNestableTestCase#getTester1(Nestable)\n     ",
        "child_ranges": [
            "(line 139,col 9)-(line 139,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableErrorTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableErrorTestCase.getTester1(java.lang.String, java.lang.Throwable)",
        "snippet": "    public Nestable getTester1(String msg, Throwable t)\n    {\n        return new NestableErrorTester1(msg, t);\n    }",
        "begin_line": 145,
        "end_line": 148,
        "comment": "\n     * @see AbstractNestableTestCase#getTester1(String, Throwable)\n     ",
        "child_ranges": [
            "(line 147,col 9)-(line 147,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableErrorTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableErrorTestCase.getTester1(java.lang.String, org.apache.commons.lang.exception.Nestable)",
        "snippet": "    public Nestable getTester1(String msg, Nestable n)\n    {\n        return new NestableErrorTester1(msg, (Throwable) n);\n    }",
        "begin_line": 153,
        "end_line": 156,
        "comment": "\n     * @see AbstractNestableTestCase#getTester1(String, Nestable)\n     ",
        "child_ranges": [
            "(line 155,col 9)-(line 155,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableErrorTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableErrorTestCase.getTester1Class()",
        "snippet": "    public Class getTester1Class()\n    {\n        return NestableErrorTester1.class;\n    }",
        "begin_line": 161,
        "end_line": 164,
        "comment": "\n     * @see AbstractNestableTestCase#getTester1Class()\n     ",
        "child_ranges": [
            "(line 163,col 9)-(line 163,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableErrorTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableErrorTestCase.getTester2(java.lang.String, java.lang.Throwable)",
        "snippet": "    public Nestable getTester2(String msg, Throwable t)\n    {\n        return new NestableErrorTester2(msg, t);\n    }",
        "begin_line": 169,
        "end_line": 172,
        "comment": "\n     * @see AbstractNestableTestCase#getTester2(String, Throwable)\n     ",
        "child_ranges": [
            "(line 171,col 9)-(line 171,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableErrorTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableErrorTestCase.getTester2(java.lang.String, org.apache.commons.lang.exception.Nestable)",
        "snippet": "    public Nestable getTester2(String msg, Nestable n)\n    {\n        return new NestableErrorTester2(msg, (Throwable) n);\n    }",
        "begin_line": 177,
        "end_line": 180,
        "comment": "\n     * @see AbstractNestableTestCase#getTester2(String, Nestable)\n     ",
        "child_ranges": [
            "(line 179,col 9)-(line 179,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableErrorTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableErrorTestCase.getTester2Class()",
        "snippet": "    public Class getTester2Class()\n    {\n        return NestableErrorTester2.class;\n    }",
        "begin_line": 185,
        "end_line": 188,
        "comment": "\n     * @see AbstractNestableTestCase#getTester2Class()\n     ",
        "child_ranges": [
            "(line 187,col 9)-(line 187,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableErrorTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableErrorTestCase.getThrowable(java.lang.String)",
        "snippet": "    public Throwable getThrowable(String msg)\n    {\n        return new EOFException(msg);\n    }",
        "begin_line": 193,
        "end_line": 196,
        "comment": "\n     * @see AbstractNestableTestCase#getThrowable(String)\n     ",
        "child_ranges": [
            "(line 195,col 9)-(line 195,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableErrorTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableErrorTestCase.getThrowableClass()",
        "snippet": "    public Class getThrowableClass()\n    {\n        return EOFException.class;\n    }",
        "begin_line": 201,
        "end_line": 204,
        "comment": "\n     * @see AbstractNestableTestCase#getThrowableClass()\n     ",
        "child_ranges": [
            "(line 203,col 9)-(line 203,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableErrorTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableErrorTestCase.getBaseThrowableClass()",
        "snippet": "    public Class getBaseThrowableClass()\n    {\n        return Error.class;\n    }",
        "begin_line": 209,
        "end_line": 212,
        "comment": "\n     * @see AbstractNestableTestCase#getBaseThrowableClass()\n     ",
        "child_ranges": [
            "(line 211,col 9)-(line 211,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableErrorTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableErrorTester1.NestableErrorTester1()",
        "snippet": "    public NestableErrorTester1()\n    {\n        super();\n    }",
        "begin_line": 221,
        "end_line": 224,
        "comment": "",
        "child_ranges": [
            "(line 223,col 9)-(line 223,col 16)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableErrorTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableErrorTester1.NestableErrorTester1(java.lang.String, java.lang.Throwable)",
        "snippet": "    public NestableErrorTester1(String reason, Throwable cause)\n    {\n        super(reason, cause);\n    }",
        "begin_line": 226,
        "end_line": 229,
        "comment": "",
        "child_ranges": [
            "(line 228,col 9)-(line 228,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableErrorTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableErrorTester1.NestableErrorTester1(java.lang.String)",
        "snippet": "    public NestableErrorTester1(String reason)\n    {\n        super(reason);\n    }",
        "begin_line": 231,
        "end_line": 234,
        "comment": "",
        "child_ranges": [
            "(line 233,col 9)-(line 233,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableErrorTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableErrorTester1.NestableErrorTester1(java.lang.Throwable)",
        "snippet": "    public NestableErrorTester1(Throwable cause)\n    {\n        super(cause);\n    }",
        "begin_line": 236,
        "end_line": 239,
        "comment": "",
        "child_ranges": [
            "(line 238,col 9)-(line 238,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableErrorTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableErrorTester2.NestableErrorTester2()",
        "snippet": "    public NestableErrorTester2()\n    {\n        super();\n    }",
        "begin_line": 248,
        "end_line": 251,
        "comment": "",
        "child_ranges": [
            "(line 250,col 9)-(line 250,col 16)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableErrorTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableErrorTester2.NestableErrorTester2(java.lang.String, java.lang.Throwable)",
        "snippet": "    public NestableErrorTester2(String reason, Throwable cause)\n    {\n        super(reason, cause);\n    }",
        "begin_line": 253,
        "end_line": 256,
        "comment": "",
        "child_ranges": [
            "(line 255,col 9)-(line 255,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableErrorTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableErrorTester2.NestableErrorTester2(java.lang.String)",
        "snippet": "    public NestableErrorTester2(String reason)\n    {\n        super(reason);\n    }",
        "begin_line": 258,
        "end_line": 261,
        "comment": "",
        "child_ranges": [
            "(line 260,col 9)-(line 260,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableErrorTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableErrorTester2.NestableErrorTester2(java.lang.Throwable)",
        "snippet": "    public NestableErrorTester2(Throwable cause)\n    {\n        super(cause);\n    }",
        "begin_line": 263,
        "end_line": 266,
        "comment": "",
        "child_ranges": [
            "(line 265,col 9)-(line 265,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase.NestableRuntimeExceptionTestCase(java.lang.String)",
        "snippet": "    public NestableRuntimeExceptionTestCase(String name)\n    {\n        super(name);\n    }",
        "begin_line": 41,
        "end_line": 44,
        "comment": "\n     * Construct a new instance of\n     * <code>NestableRuntimeExceptionTestCase</code>.\n     *\n     * @param name test case name\n     ",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase.setUp()",
        "snippet": "    public void setUp()\n    {\n    }",
        "begin_line": 49,
        "end_line": 51,
        "comment": "\n     * Sets up instance variables required by this test case.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase.suite()",
        "snippet": "    public static Test suite()\n    {\n        return new TestSuite(NestableRuntimeExceptionTestCase.class);\n    }",
        "begin_line": 58,
        "end_line": 61,
        "comment": "\n     * Returns the test suite\n     *\n     * @return the test suite\n     ",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase.tearDown()",
        "snippet": "    public void tearDown()\n    {\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Tears down instance variables required by this test case.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase.main(java.lang.String[])",
        "snippet": "    public static void main(String args[])\n    {\n        TestRunner.run(suite());\n    }",
        "begin_line": 75,
        "end_line": 78,
        "comment": "\n     * Command line entry point for running the test suite.\n     *\n     * @param args array of command line arguments\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase.getNestable()",
        "snippet": "    public Nestable getNestable()\n    {\n        return new NestableRuntimeException();\n    }",
        "begin_line": 83,
        "end_line": 86,
        "comment": "\n     * @see AbstractNestableTestCase#getNestable()\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase.getNestable(org.apache.commons.lang.exception.Nestable)",
        "snippet": "    public Nestable getNestable(Nestable n)\n    {\n        return new NestableRuntimeException((Throwable) n);\n    }",
        "begin_line": 91,
        "end_line": 94,
        "comment": "\n     * @see AbstractNestableTestCase#getNestable(Nestable)\n     ",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase.getNestable(java.lang.String)",
        "snippet": "    public Nestable getNestable(String msg)\n    {\n        return new NestableRuntimeException(msg);\n    }",
        "begin_line": 99,
        "end_line": 102,
        "comment": "\n     * @see AbstractNestableTestCase#getNestable(String)\n     ",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase.getNestable(java.lang.Throwable)",
        "snippet": "    public Nestable getNestable(Throwable t)\n    {\n        return new NestableRuntimeException(t);\n    }",
        "begin_line": 107,
        "end_line": 110,
        "comment": "\n     * @see AbstractNestableTestCase#getNestable(Throwable)\n     ",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase.getNestable(java.lang.String, java.lang.Throwable)",
        "snippet": "    public Nestable getNestable(String msg, Throwable t)\n    {\n        return new NestableRuntimeException(msg, t);\n    }",
        "begin_line": 115,
        "end_line": 118,
        "comment": "\n     * @see AbstractNestableTestCase#getNestable(String, Throwable)\n     ",
        "child_ranges": [
            "(line 117,col 9)-(line 117,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase.getNestable(java.lang.String, org.apache.commons.lang.exception.Nestable)",
        "snippet": "    public Nestable getNestable(String msg, Nestable n)\n    {\n        return new NestableRuntimeException(msg, (Throwable) n);\n    }",
        "begin_line": 123,
        "end_line": 126,
        "comment": "\n     * @see AbstractNestableTestCase#getNestable(String, Nestable)\n     ",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase.getTester1(java.lang.Throwable)",
        "snippet": "    public Nestable getTester1(Throwable t)\n    {\n        return new NestableRuntimeExceptionTester1(t);\n    }",
        "begin_line": 131,
        "end_line": 134,
        "comment": "\n     * @see AbstractNestableTestCase#getTester1(Throwable)\n     ",
        "child_ranges": [
            "(line 133,col 9)-(line 133,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase.getTester1(org.apache.commons.lang.exception.Nestable)",
        "snippet": "    public Nestable getTester1(Nestable n)\n    {\n        return new NestableRuntimeExceptionTester1((Throwable) n);\n    }",
        "begin_line": 139,
        "end_line": 142,
        "comment": "\n     * @see AbstractNestableTestCase#getTester1(Nestable)\n     ",
        "child_ranges": [
            "(line 141,col 9)-(line 141,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase.getTester1(java.lang.String, java.lang.Throwable)",
        "snippet": "    public Nestable getTester1(String msg, Throwable t)\n    {\n        return new NestableRuntimeExceptionTester1(msg, t);\n    }",
        "begin_line": 147,
        "end_line": 150,
        "comment": "\n     * @see AbstractNestableTestCase#getTester1(String, Throwable)\n     ",
        "child_ranges": [
            "(line 149,col 9)-(line 149,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase.getTester1(java.lang.String, org.apache.commons.lang.exception.Nestable)",
        "snippet": "    public Nestable getTester1(String msg, Nestable n)\n    {\n        return new NestableRuntimeExceptionTester1(msg, (Throwable) n);\n    }",
        "begin_line": 155,
        "end_line": 158,
        "comment": "\n     * @see AbstractNestableTestCase#getTester1(String, Nestable)\n     ",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase.getTester1Class()",
        "snippet": "    public Class getTester1Class()\n    {\n        return NestableRuntimeExceptionTester1.class;\n    }",
        "begin_line": 163,
        "end_line": 166,
        "comment": "\n     * @see AbstractNestableTestCase#getTester1Class()\n     ",
        "child_ranges": [
            "(line 165,col 9)-(line 165,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase.getTester2(java.lang.String, java.lang.Throwable)",
        "snippet": "    public Nestable getTester2(String msg, Throwable t)\n    {\n        return new NestableRuntimeExceptionTester2(msg, t);\n    }",
        "begin_line": 171,
        "end_line": 174,
        "comment": "\n     * @see AbstractNestableTestCase#getTester2(String, Throwable)\n     ",
        "child_ranges": [
            "(line 173,col 9)-(line 173,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase.getTester2(java.lang.String, org.apache.commons.lang.exception.Nestable)",
        "snippet": "    public Nestable getTester2(String msg, Nestable n)\n    {\n        return new NestableRuntimeExceptionTester2(msg, (Throwable) n);\n    }",
        "begin_line": 179,
        "end_line": 182,
        "comment": "\n     * @see AbstractNestableTestCase#getTester2(String, Nestable)\n     ",
        "child_ranges": [
            "(line 181,col 9)-(line 181,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase.getTester2Class()",
        "snippet": "    public Class getTester2Class()\n    {\n        return NestableRuntimeExceptionTester2.class;\n    }",
        "begin_line": 187,
        "end_line": 190,
        "comment": "\n     * @see AbstractNestableTestCase#getTester2Class()\n     ",
        "child_ranges": [
            "(line 189,col 9)-(line 189,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase.getThrowable(java.lang.String)",
        "snippet": "    public Throwable getThrowable(String msg)\n    {\n        return new EOFException(msg);\n    }",
        "begin_line": 195,
        "end_line": 198,
        "comment": "\n     * @see AbstractNestableTestCase#getThrowable(String)\n     ",
        "child_ranges": [
            "(line 197,col 9)-(line 197,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase.getThrowableClass()",
        "snippet": "    public Class getThrowableClass()\n    {\n        return EOFException.class;\n    }",
        "begin_line": 203,
        "end_line": 206,
        "comment": "\n     * @see AbstractNestableTestCase#getThrowableClass()\n     ",
        "child_ranges": [
            "(line 205,col 9)-(line 205,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase.getBaseThrowableClass()",
        "snippet": "    public Class getBaseThrowableClass()\n    {\n        return RuntimeException.class;\n    }",
        "begin_line": 211,
        "end_line": 214,
        "comment": "\n     * @see AbstractNestableTestCase#getBaseThrowableClass()\n     ",
        "child_ranges": [
            "(line 213,col 9)-(line 213,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase.testSpecificPrintStackTrace()",
        "snippet": "    public void testSpecificPrintStackTrace()\n    {\n        // Test printStackTrac()\n        // Replace System.err with our own PrintStream so that we can obtain\n        // and check the printStrackTrace output\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        PrintStream ps = new PrintStream(baos);\n        NestableRuntimeException ne = new NestableRuntimeException(\"outer\", new NestableRuntimeException(\"inner\", new Exception(\"another exception\")));\n        for(int i = 0; i < 2; i++)\n        {\n            if(i == 0)\n            {\n                // Test printStackTrac()\n                // Replace System.err with our own PrintStream so that we can\n                // obtain and check the printStrackTrace output\n                PrintStream err = System.err;\n                System.setErr(ps);\n                ne.printStackTrace();\n                // Restore the System.err\n                System.setErr(err);\n            }\n            else\n            {\n                // Test printStackTrace(PrintStream)\n                ne.printStackTrace(ps);\n            }\n        }\n        String msg = baos.toString();\n        assertTrue( \"printStackTrace() starts with outer message\", msg.startsWith(\"org.apache.commons.lang.exception.NestableRuntimeException: outer\"));\n        assertTrue( \"printStackTrace() contains 1st nested message\", msg.indexOf(\"Caused by: org.apache.commons.lang.exception.NestableRuntimeException: inner\") >= 0);\n        assertTrue( \"printStackTrace() contains 2nd nested message\", msg.indexOf(\"Caused by: java.lang.Exception: another exception\") >= 0);\n        assertTrue( \"printStackTrace() inner message after outer message\", \n            msg.indexOf(\"org.apache.commons.lang.exception.NestableRuntimeException: outer\") <\n            msg.indexOf(\"Caused by: org.apache.commons.lang.exception.NestableRuntimeException: inner\"));\n        assertTrue( \"printStackTrace() cause message after inner message\",\n            msg.indexOf(\"Caused by: org.apache.commons.lang.exception.NestableRuntimeException: inner\") <\n            msg.indexOf(\"Caused by: java.lang.Exception: another exception\"));\n    }",
        "begin_line": 216,
        "end_line": 253,
        "comment": "",
        "child_ranges": [
            "(line 221,col 9)-(line 221,col 65)",
            "(line 222,col 9)-(line 222,col 47)",
            "(line 223,col 9)-(line 223,col 151)",
            "(line 224,col 9)-(line 242,col 9)",
            "(line 243,col 9)-(line 243,col 37)",
            "(line 244,col 9)-(line 244,col 152)",
            "(line 245,col 9)-(line 245,col 167)",
            "(line 246,col 9)-(line 246,col 140)",
            "(line 247,col 9)-(line 249,col 105)",
            "(line 250,col 9)-(line 252,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeExceptionTester1.NestableRuntimeExceptionTester1()",
        "snippet": "    public NestableRuntimeExceptionTester1()\n    {\n        super();\n    }",
        "begin_line": 262,
        "end_line": 265,
        "comment": "",
        "child_ranges": [
            "(line 264,col 9)-(line 264,col 16)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeExceptionTester1.NestableRuntimeExceptionTester1(java.lang.String, java.lang.Throwable)",
        "snippet": "    public NestableRuntimeExceptionTester1(String reason, Throwable cause)\n    {\n        super(reason, cause);\n    }",
        "begin_line": 267,
        "end_line": 270,
        "comment": "",
        "child_ranges": [
            "(line 269,col 9)-(line 269,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeExceptionTester1.NestableRuntimeExceptionTester1(java.lang.String)",
        "snippet": "    public NestableRuntimeExceptionTester1(String reason)\n    {\n        super(reason);\n    }",
        "begin_line": 272,
        "end_line": 275,
        "comment": "",
        "child_ranges": [
            "(line 274,col 9)-(line 274,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeExceptionTester1.NestableRuntimeExceptionTester1(java.lang.Throwable)",
        "snippet": "    public NestableRuntimeExceptionTester1(Throwable cause)\n    {\n        super(cause);\n    }",
        "begin_line": 277,
        "end_line": 280,
        "comment": "",
        "child_ranges": [
            "(line 279,col 9)-(line 279,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeExceptionTester2.NestableRuntimeExceptionTester2()",
        "snippet": "    public NestableRuntimeExceptionTester2()\n    {\n        super();\n    }",
        "begin_line": 289,
        "end_line": 292,
        "comment": "",
        "child_ranges": [
            "(line 291,col 9)-(line 291,col 16)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeExceptionTester2.NestableRuntimeExceptionTester2(java.lang.String, java.lang.Throwable)",
        "snippet": "    public NestableRuntimeExceptionTester2(String reason, Throwable cause)\n    {\n        super(reason, cause);\n    }",
        "begin_line": 294,
        "end_line": 297,
        "comment": "",
        "child_ranges": [
            "(line 296,col 9)-(line 296,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeExceptionTester2.NestableRuntimeExceptionTester2(java.lang.String)",
        "snippet": "    public NestableRuntimeExceptionTester2(String reason)\n    {\n        super(reason);\n    }",
        "begin_line": 299,
        "end_line": 302,
        "comment": "",
        "child_ranges": [
            "(line 301,col 9)-(line 301,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeExceptionTester2.NestableRuntimeExceptionTester2(java.lang.Throwable)",
        "snippet": "    public NestableRuntimeExceptionTester2(Throwable cause)\n    {\n        super(cause);\n    }",
        "begin_line": 304,
        "end_line": 307,
        "comment": "",
        "child_ranges": [
            "(line 306,col 9)-(line 306,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.ExceptionUtilsTestCase(java.lang.String)",
        "snippet": "    public ExceptionUtilsTestCase(String name) {\n        super(name);\n    }",
        "begin_line": 70,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(ExceptionUtilsTestCase.class);\n    }",
        "begin_line": 74,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.setUp()",
        "snippet": "    public void setUp() {\n        withoutCause = createExceptionWithoutCause();\n        nested = new NestableException(withoutCause);\n        withCause = new ExceptionWithCause(nested);\n        jdkNoCause = new NullPointerException();\n        selfCause = new ExceptionWithCause(null);\n        selfCause.setCause(selfCause);\n        ExceptionWithCause a = new ExceptionWithCause(null);\n        ExceptionWithCause b = new ExceptionWithCause(a);\n        a.setCause(b);\n        cyclicCause = new ExceptionWithCause(a);\n    }",
        "begin_line": 78,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 53)",
            "(line 80,col 9)-(line 80,col 53)",
            "(line 81,col 9)-(line 81,col 51)",
            "(line 82,col 9)-(line 82,col 48)",
            "(line 83,col 9)-(line 83,col 49)",
            "(line 84,col 9)-(line 84,col 38)",
            "(line 85,col 9)-(line 85,col 60)",
            "(line 86,col 9)-(line 86,col 57)",
            "(line 87,col 9)-(line 87,col 22)",
            "(line 88,col 9)-(line 88,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        withoutCause = null;\n        nested = null;\n        withCause = null;\n        jdkNoCause = null;\n        selfCause = null;\n        cyclicCause = null;\n    }",
        "begin_line": 91,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 28)",
            "(line 93,col 9)-(line 93,col 22)",
            "(line 94,col 9)-(line 94,col 25)",
            "(line 95,col 9)-(line 95,col 26)",
            "(line 96,col 9)-(line 96,col 25)",
            "(line 97,col 9)-(line 97,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.createExceptionWithoutCause()",
        "snippet": "    private Throwable createExceptionWithoutCause() {\n        try {\n            throw new ExceptionWithoutCause();\n        } catch (Throwable t) {\n            return t;\n        }\n    }",
        "begin_line": 101,
        "end_line": 107,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 102,col 9)-(line 106,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.createExceptionWithCause()",
        "snippet": "    private Throwable createExceptionWithCause() {\n        try {\n            try {\n                throw new ExceptionWithCause(createExceptionWithoutCause());\n            } catch (Throwable t) {\n                throw new ExceptionWithCause(t);\n            }\n        } catch (Throwable t) {\n            return t;\n        }\n    }",
        "begin_line": 109,
        "end_line": 119,
        "comment": "",
        "child_ranges": [
            "(line 110,col 9)-(line 118,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new ExceptionUtils());\n        Constructor[] cons = ExceptionUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(ExceptionUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(ExceptionUtils.class.getModifiers()));\n    }",
        "begin_line": 123,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 124,col 9)-(line 124,col 44)",
            "(line 125,col 9)-(line 125,col 76)",
            "(line 126,col 9)-(line 126,col 37)",
            "(line 127,col 9)-(line 127,col 70)",
            "(line 128,col 9)-(line 128,col 83)",
            "(line 129,col 9)-(line 129,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.testCauseMethodNameOps()",
        "snippet": "    public void testCauseMethodNameOps() {\n        this.testCauseMethodNameOps(null);\n        this.testCauseMethodNameOps(\"\");\n        this.testCauseMethodNameOps(\" \");\n        this.testCauseMethodNameOps(\"\\t\\r\\n\\t\");\n        this.testCauseMethodNameOps(\"testMethodName\");\n    }",
        "begin_line": 134,
        "end_line": 140,
        "comment": "",
        "child_ranges": [
            "(line 135,col 9)-(line 135,col 42)",
            "(line 136,col 9)-(line 136,col 40)",
            "(line 137,col 9)-(line 137,col 41)",
            "(line 138,col 9)-(line 138,col 48)",
            "(line 139,col 9)-(line 139,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.testCauseMethodNameOps(java.lang.String)",
        "snippet": "    void testCauseMethodNameOps(String name) {\n        String methodName = \"testMethodName\";\n        try {\n            Assert.assertFalse(ExceptionUtils.isCauseMethodName(methodName));\n            ExceptionUtils.addCauseMethodName(methodName);            \n            ExceptionUtils.addCauseMethodName(methodName);            \n            Assert.assertTrue(ExceptionUtils.isCauseMethodName(methodName));\n        } finally {\n            ExceptionUtils.removeCauseMethodName(methodName);\n            Assert.assertFalse(\n                    \"The method name \" + methodName + \" should not be in the array\", \n                    ExceptionUtils.isCauseMethodName(methodName));\n        }\n    }",
        "begin_line": 142,
        "end_line": 155,
        "comment": "",
        "child_ranges": [
            "(line 143,col 9)-(line 143,col 45)",
            "(line 144,col 9)-(line 154,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.testGetCause_Throwable()",
        "snippet": "    public void testGetCause_Throwable() {\n        assertSame(null, ExceptionUtils.getCause(null));\n        assertSame(null, ExceptionUtils.getCause(withoutCause));\n        assertSame(withoutCause, ExceptionUtils.getCause(nested));\n        assertSame(nested, ExceptionUtils.getCause(withCause));\n        assertSame(null, ExceptionUtils.getCause(jdkNoCause));\n        assertSame(selfCause, ExceptionUtils.getCause(selfCause));\n        assertSame(cyclicCause.getCause(), ExceptionUtils.getCause(cyclicCause));\n        assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), ExceptionUtils.getCause(cyclicCause.getCause()));\n        assertSame(cyclicCause.getCause(), ExceptionUtils.getCause(((ExceptionWithCause) cyclicCause.getCause()).getCause()));\n    }",
        "begin_line": 157,
        "end_line": 167,
        "comment": "",
        "child_ranges": [
            "(line 158,col 9)-(line 158,col 56)",
            "(line 159,col 9)-(line 159,col 64)",
            "(line 160,col 9)-(line 160,col 66)",
            "(line 161,col 9)-(line 161,col 63)",
            "(line 162,col 9)-(line 162,col 62)",
            "(line 163,col 9)-(line 163,col 66)",
            "(line 164,col 9)-(line 164,col 81)",
            "(line 165,col 9)-(line 165,col 126)",
            "(line 166,col 9)-(line 166,col 126)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.testGetCause_ThrowableArray()",
        "snippet": "    public void testGetCause_ThrowableArray() {\n        assertSame(null, ExceptionUtils.getCause(null, null));\n        assertSame(null, ExceptionUtils.getCause(null, new String[0]));\n\n        // match because known type        \n        assertSame(withoutCause, ExceptionUtils.getCause(nested, null));\n        assertSame(withoutCause, ExceptionUtils.getCause(nested, new String[0]));\n        assertSame(withoutCause, ExceptionUtils.getCause(nested, new String[] {\"getCause\"}));\n        \n        // not known type, so match on supplied method names\n        assertSame(nested, ExceptionUtils.getCause(withCause, null));  // default names\n        assertSame(null, ExceptionUtils.getCause(withCause, new String[0]));\n        assertSame(null, ExceptionUtils.getCause(withCause, new String[] {null}));\n        assertSame(nested, ExceptionUtils.getCause(withCause, new String[] {\"getCause\"}));\n        \n        // not known type, so match on supplied method names\n        assertSame(null, ExceptionUtils.getCause(withoutCause, null));\n        assertSame(null, ExceptionUtils.getCause(withoutCause, new String[0]));\n        assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] {null}));\n        assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] {\"getCause\"}));\n        assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] {\"getTargetException\"}));\n    }",
        "begin_line": 169,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 170,col 9)-(line 170,col 62)",
            "(line 171,col 9)-(line 171,col 71)",
            "(line 174,col 9)-(line 174,col 72)",
            "(line 175,col 9)-(line 175,col 81)",
            "(line 176,col 9)-(line 176,col 93)",
            "(line 179,col 9)-(line 179,col 69)",
            "(line 180,col 9)-(line 180,col 76)",
            "(line 181,col 9)-(line 181,col 82)",
            "(line 182,col 9)-(line 182,col 90)",
            "(line 185,col 9)-(line 185,col 70)",
            "(line 186,col 9)-(line 186,col 79)",
            "(line 187,col 9)-(line 187,col 85)",
            "(line 188,col 9)-(line 188,col 91)",
            "(line 189,col 9)-(line 189,col 101)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.testGetRootCause_Throwable()",
        "snippet": "    public void testGetRootCause_Throwable() {\n        assertSame(null, ExceptionUtils.getRootCause(null));\n        assertSame(null, ExceptionUtils.getRootCause(withoutCause));\n        assertSame(withoutCause, ExceptionUtils.getRootCause(nested));\n        assertSame(withoutCause, ExceptionUtils.getRootCause(withCause));\n        assertSame(null, ExceptionUtils.getRootCause(jdkNoCause));\n        assertSame(null, ExceptionUtils.getRootCause(selfCause));\n        assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), ExceptionUtils.getRootCause(cyclicCause));\n    }",
        "begin_line": 192,
        "end_line": 200,
        "comment": "",
        "child_ranges": [
            "(line 193,col 9)-(line 193,col 60)",
            "(line 194,col 9)-(line 194,col 68)",
            "(line 195,col 9)-(line 195,col 70)",
            "(line 196,col 9)-(line 196,col 73)",
            "(line 197,col 9)-(line 197,col 66)",
            "(line 198,col 9)-(line 198,col 65)",
            "(line 199,col 9)-(line 199,col 119)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.testSetCause()",
        "snippet": "    public void testSetCause() {\n        Exception cause = new ExceptionWithoutCause();\n        assertEquals(true, ExceptionUtils.setCause(new ExceptionWithCause(null), cause));\n        if (SystemUtils.isJavaVersionAtLeast(140)) {\n            assertEquals(true, ExceptionUtils.setCause(new ExceptionWithoutCause(), cause));\n        }\n    }",
        "begin_line": 202,
        "end_line": 208,
        "comment": "",
        "child_ranges": [
            "(line 203,col 9)-(line 203,col 54)",
            "(line 204,col 9)-(line 204,col 89)",
            "(line 205,col 9)-(line 207,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.testSetCauseToNull()",
        "snippet": "    public void testSetCauseToNull() {\n        Exception ex = new ExceptionWithCause(new IOException());\n        assertEquals(true, ExceptionUtils.setCause(ex, new IllegalStateException()));\n        assertNotNull(ExceptionUtils.getCause(ex));\n        assertEquals(true, ExceptionUtils.setCause(ex, null));\n        assertNull(ExceptionUtils.getCause(ex));\n    }",
        "begin_line": 213,
        "end_line": 219,
        "comment": "\n     * Tests overriding a cause to <code>null</code>.\n     ",
        "child_ranges": [
            "(line 214,col 9)-(line 214,col 65)",
            "(line 215,col 9)-(line 215,col 85)",
            "(line 216,col 9)-(line 216,col 51)",
            "(line 217,col 9)-(line 217,col 62)",
            "(line 218,col 9)-(line 218,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.testIsThrowableNested()",
        "snippet": "    public void testIsThrowableNested() {\n        if (SystemUtils.isJavaVersionAtLeast(140)) {\n            assertEquals(true, ExceptionUtils.isThrowableNested());\n        } else {\n            assertEquals(false, ExceptionUtils.isThrowableNested());\n        }\n    }",
        "begin_line": 222,
        "end_line": 228,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 223,col 9)-(line 227,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.testIsNestedThrowable_Throwable()",
        "snippet": "    public void testIsNestedThrowable_Throwable() {\n        assertEquals(true, ExceptionUtils.isNestedThrowable(new SQLException()));\n        assertEquals(true, ExceptionUtils.isNestedThrowable(new InvocationTargetException(new Exception())));\n        assertEquals(true, ExceptionUtils.isNestedThrowable(new NestableRuntimeException()));\n        assertEquals(true, ExceptionUtils.isNestedThrowable(withCause));\n        assertEquals(true, ExceptionUtils.isNestedThrowable(nested));\n        if (SystemUtils.isJavaVersionAtLeast(140)) {\n            assertEquals(true, ExceptionUtils.isNestedThrowable(withoutCause));\n            assertEquals(true, ExceptionUtils.isNestedThrowable(new Throwable()));\n        } else {\n            assertEquals(false, ExceptionUtils.isNestedThrowable(withoutCause));\n            assertEquals(false, ExceptionUtils.isNestedThrowable(new Throwable()));\n        }\n    }",
        "begin_line": 230,
        "end_line": 243,
        "comment": "",
        "child_ranges": [
            "(line 231,col 9)-(line 231,col 81)",
            "(line 232,col 9)-(line 232,col 109)",
            "(line 233,col 9)-(line 233,col 93)",
            "(line 234,col 9)-(line 234,col 72)",
            "(line 235,col 9)-(line 235,col 69)",
            "(line 236,col 9)-(line 242,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.testGetThrowableCount_Throwable()",
        "snippet": "    public void testGetThrowableCount_Throwable() {\n        assertEquals(0, ExceptionUtils.getThrowableCount(null));\n        assertEquals(1, ExceptionUtils.getThrowableCount(withoutCause));\n        assertEquals(2, ExceptionUtils.getThrowableCount(nested));\n        assertEquals(3, ExceptionUtils.getThrowableCount(withCause));\n        assertEquals(1, ExceptionUtils.getThrowableCount(jdkNoCause));\n        assertEquals(1, ExceptionUtils.getThrowableCount(selfCause));\n        assertEquals(3, ExceptionUtils.getThrowableCount(cyclicCause));\n    }",
        "begin_line": 246,
        "end_line": 254,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 247,col 9)-(line 247,col 64)",
            "(line 248,col 9)-(line 248,col 72)",
            "(line 249,col 9)-(line 249,col 66)",
            "(line 250,col 9)-(line 250,col 69)",
            "(line 251,col 9)-(line 251,col 70)",
            "(line 252,col 9)-(line 252,col 69)",
            "(line 253,col 9)-(line 253,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.testGetThrowables_Throwable_null()",
        "snippet": "    public void testGetThrowables_Throwable_null() {\n        assertEquals(0, ExceptionUtils.getThrowables(null).length);\n    }",
        "begin_line": 257,
        "end_line": 259,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 258,col 9)-(line 258,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.testGetThrowables_Throwable_withoutCause()",
        "snippet": "    public void testGetThrowables_Throwable_withoutCause() {\n        Throwable[] throwables = ExceptionUtils.getThrowables(withoutCause);\n        assertEquals(1, throwables.length);\n        assertSame(withoutCause, throwables[0]);\n    }",
        "begin_line": 261,
        "end_line": 265,
        "comment": "",
        "child_ranges": [
            "(line 262,col 9)-(line 262,col 76)",
            "(line 263,col 9)-(line 263,col 43)",
            "(line 264,col 9)-(line 264,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.testGetThrowables_Throwable_nested()",
        "snippet": "    public void testGetThrowables_Throwable_nested() {\n        Throwable[] throwables = ExceptionUtils.getThrowables(nested);\n        assertEquals(2, throwables.length);\n        assertSame(nested, throwables[0]);\n        assertSame(withoutCause, throwables[1]);\n    }",
        "begin_line": 267,
        "end_line": 272,
        "comment": "",
        "child_ranges": [
            "(line 268,col 9)-(line 268,col 70)",
            "(line 269,col 9)-(line 269,col 43)",
            "(line 270,col 9)-(line 270,col 42)",
            "(line 271,col 9)-(line 271,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.testGetThrowables_Throwable_withCause()",
        "snippet": "    public void testGetThrowables_Throwable_withCause() {\n        Throwable[] throwables = ExceptionUtils.getThrowables(withCause);\n        assertEquals(3, throwables.length);\n        assertSame(withCause, throwables[0]);\n        assertSame(nested, throwables[1]);\n        assertSame(withoutCause, throwables[2]);\n    }",
        "begin_line": 274,
        "end_line": 280,
        "comment": "",
        "child_ranges": [
            "(line 275,col 9)-(line 275,col 73)",
            "(line 276,col 9)-(line 276,col 43)",
            "(line 277,col 9)-(line 277,col 45)",
            "(line 278,col 9)-(line 278,col 42)",
            "(line 279,col 9)-(line 279,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.testGetThrowables_Throwable_jdkNoCause()",
        "snippet": "    public void testGetThrowables_Throwable_jdkNoCause() {\n        Throwable[] throwables = ExceptionUtils.getThrowables(jdkNoCause);\n        assertEquals(1, throwables.length);\n        assertSame(jdkNoCause, throwables[0]);\n    }",
        "begin_line": 282,
        "end_line": 286,
        "comment": "",
        "child_ranges": [
            "(line 283,col 9)-(line 283,col 74)",
            "(line 284,col 9)-(line 284,col 43)",
            "(line 285,col 9)-(line 285,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.testGetThrowables_Throwable_selfCause()",
        "snippet": "    public void testGetThrowables_Throwable_selfCause() {\n        Throwable[] throwables = ExceptionUtils.getThrowables(selfCause);\n        assertEquals(1, throwables.length);\n        assertSame(selfCause, throwables[0]);\n    }",
        "begin_line": 288,
        "end_line": 292,
        "comment": "",
        "child_ranges": [
            "(line 289,col 9)-(line 289,col 73)",
            "(line 290,col 9)-(line 290,col 43)",
            "(line 291,col 9)-(line 291,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.testGetThrowables_Throwable_recursiveCause()",
        "snippet": "    public void testGetThrowables_Throwable_recursiveCause() {\n        Throwable[] throwables = ExceptionUtils.getThrowables(cyclicCause);\n        assertEquals(3, throwables.length);\n        assertSame(cyclicCause, throwables[0]);\n        assertSame(cyclicCause.getCause(), throwables[1]);\n        assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), throwables[2]);\n    }",
        "begin_line": 294,
        "end_line": 300,
        "comment": "",
        "child_ranges": [
            "(line 295,col 9)-(line 295,col 75)",
            "(line 296,col 9)-(line 296,col 43)",
            "(line 297,col 9)-(line 297,col 47)",
            "(line 298,col 9)-(line 298,col 58)",
            "(line 299,col 9)-(line 299,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.testGetThrowableList_Throwable_null()",
        "snippet": "    public void testGetThrowableList_Throwable_null() {\n        List throwables = ExceptionUtils.getThrowableList(null);\n        assertEquals(0, throwables.size());\n    }",
        "begin_line": 303,
        "end_line": 306,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 304,col 9)-(line 304,col 64)",
            "(line 305,col 9)-(line 305,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.testGetThrowableList_Throwable_withoutCause()",
        "snippet": "    public void testGetThrowableList_Throwable_withoutCause() {\n        List throwables = ExceptionUtils.getThrowableList(withoutCause);\n        assertEquals(1, throwables.size());\n        assertSame(withoutCause, throwables.get(0));\n    }",
        "begin_line": 308,
        "end_line": 312,
        "comment": "",
        "child_ranges": [
            "(line 309,col 9)-(line 309,col 72)",
            "(line 310,col 9)-(line 310,col 43)",
            "(line 311,col 9)-(line 311,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.testGetThrowableList_Throwable_nested()",
        "snippet": "    public void testGetThrowableList_Throwable_nested() {\n        List throwables = ExceptionUtils.getThrowableList(nested);\n        assertEquals(2, throwables.size());\n        assertSame(nested, throwables.get(0));\n        assertSame(withoutCause, throwables.get(1));\n    }",
        "begin_line": 314,
        "end_line": 319,
        "comment": "",
        "child_ranges": [
            "(line 315,col 9)-(line 315,col 66)",
            "(line 316,col 9)-(line 316,col 43)",
            "(line 317,col 9)-(line 317,col 46)",
            "(line 318,col 9)-(line 318,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.testGetThrowableList_Throwable_withCause()",
        "snippet": "    public void testGetThrowableList_Throwable_withCause() {\n        List throwables = ExceptionUtils.getThrowableList(withCause);\n        assertEquals(3, throwables.size());\n        assertSame(withCause, throwables.get(0));\n        assertSame(nested, throwables.get(1));\n        assertSame(withoutCause, throwables.get(2));\n    }",
        "begin_line": 321,
        "end_line": 327,
        "comment": "",
        "child_ranges": [
            "(line 322,col 9)-(line 322,col 69)",
            "(line 323,col 9)-(line 323,col 43)",
            "(line 324,col 9)-(line 324,col 49)",
            "(line 325,col 9)-(line 325,col 46)",
            "(line 326,col 9)-(line 326,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.testGetThrowableList_Throwable_jdkNoCause()",
        "snippet": "    public void testGetThrowableList_Throwable_jdkNoCause() {\n        List throwables = ExceptionUtils.getThrowableList(jdkNoCause);\n        assertEquals(1, throwables.size());\n        assertSame(jdkNoCause, throwables.get(0));\n    }",
        "begin_line": 329,
        "end_line": 333,
        "comment": "",
        "child_ranges": [
            "(line 330,col 9)-(line 330,col 70)",
            "(line 331,col 9)-(line 331,col 43)",
            "(line 332,col 9)-(line 332,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.testGetThrowableList_Throwable_selfCause()",
        "snippet": "    public void testGetThrowableList_Throwable_selfCause() {\n        List throwables = ExceptionUtils.getThrowableList(selfCause);\n        assertEquals(1, throwables.size());\n        assertSame(selfCause, throwables.get(0));\n    }",
        "begin_line": 335,
        "end_line": 339,
        "comment": "",
        "child_ranges": [
            "(line 336,col 9)-(line 336,col 69)",
            "(line 337,col 9)-(line 337,col 43)",
            "(line 338,col 9)-(line 338,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.testGetThrowableList_Throwable_recursiveCause()",
        "snippet": "    public void testGetThrowableList_Throwable_recursiveCause() {\n        List throwables = ExceptionUtils.getThrowableList(cyclicCause);\n        assertEquals(3, throwables.size());\n        assertSame(cyclicCause, throwables.get(0));\n        assertSame(cyclicCause.getCause(), throwables.get(1));\n        assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), throwables.get(2));\n    }",
        "begin_line": 341,
        "end_line": 347,
        "comment": "",
        "child_ranges": [
            "(line 342,col 9)-(line 342,col 71)",
            "(line 343,col 9)-(line 343,col 43)",
            "(line 344,col 9)-(line 344,col 51)",
            "(line 345,col 9)-(line 345,col 62)",
            "(line 346,col 9)-(line 346,col 96)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.testIndexOf_ThrowableClass()",
        "snippet": "    public void testIndexOf_ThrowableClass() {\n        assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null));\n        assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class));\n        \n        assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, null));\n        assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithCause.class));\n        assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, NestableException.class));\n        assertEquals(0, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithoutCause.class));\n        \n        assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, null));\n        assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithCause.class));\n        assertEquals(0, ExceptionUtils.indexOfThrowable(nested, NestableException.class));\n        assertEquals(1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithoutCause.class));\n        \n        assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, null));\n        assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class));\n        assertEquals(1, ExceptionUtils.indexOfThrowable(withCause, NestableException.class));\n        assertEquals(2, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithoutCause.class));\n        \n        assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Exception.class));\n    }",
        "begin_line": 350,
        "end_line": 370,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 351,col 9)-(line 351,col 70)",
            "(line 352,col 9)-(line 352,col 89)",
            "(line 354,col 9)-(line 354,col 78)",
            "(line 355,col 9)-(line 355,col 98)",
            "(line 356,col 9)-(line 356,col 97)",
            "(line 357,col 9)-(line 357,col 100)",
            "(line 359,col 9)-(line 359,col 72)",
            "(line 360,col 9)-(line 360,col 92)",
            "(line 361,col 9)-(line 361,col 90)",
            "(line 362,col 9)-(line 362,col 94)",
            "(line 364,col 9)-(line 364,col 75)",
            "(line 365,col 9)-(line 365,col 94)",
            "(line 366,col 9)-(line 366,col 93)",
            "(line 367,col 9)-(line 367,col 97)",
            "(line 369,col 9)-(line 369,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.testIndexOf_ThrowableClassInt()",
        "snippet": "    public void testIndexOf_ThrowableClassInt() {\n        assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null, 0));\n        assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class, 0));\n        \n        assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, null));\n        assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithCause.class, 0));\n        assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, NestableException.class, 0));\n        assertEquals(0, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithoutCause.class, 0));\n        \n        assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, null, 0));\n        assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithCause.class, 0));\n        assertEquals(0, ExceptionUtils.indexOfThrowable(nested, NestableException.class, 0));\n        assertEquals(1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithoutCause.class, 0));\n        \n        assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, null));\n        assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0));\n        assertEquals(1, ExceptionUtils.indexOfThrowable(withCause, NestableException.class, 0));\n        assertEquals(2, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithoutCause.class, 0));\n\n        assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, -1));\n        assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0));\n        assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 1));\n        assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 9));\n        \n        assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Exception.class, 0));\n    }",
        "begin_line": 372,
        "end_line": 397,
        "comment": "",
        "child_ranges": [
            "(line 373,col 9)-(line 373,col 73)",
            "(line 374,col 9)-(line 374,col 92)",
            "(line 376,col 9)-(line 376,col 78)",
            "(line 377,col 9)-(line 377,col 101)",
            "(line 378,col 9)-(line 378,col 100)",
            "(line 379,col 9)-(line 379,col 103)",
            "(line 381,col 9)-(line 381,col 75)",
            "(line 382,col 9)-(line 382,col 95)",
            "(line 383,col 9)-(line 383,col 93)",
            "(line 384,col 9)-(line 384,col 97)",
            "(line 386,col 9)-(line 386,col 75)",
            "(line 387,col 9)-(line 387,col 97)",
            "(line 388,col 9)-(line 388,col 96)",
            "(line 389,col 9)-(line 389,col 100)",
            "(line 391,col 9)-(line 391,col 98)",
            "(line 392,col 9)-(line 392,col 97)",
            "(line 393,col 9)-(line 393,col 98)",
            "(line 394,col 9)-(line 394,col 98)",
            "(line 396,col 9)-(line 396,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.testIndexOfType_ThrowableClass()",
        "snippet": "    public void testIndexOfType_ThrowableClass() {\n        assertEquals(-1, ExceptionUtils.indexOfType(null, null));\n        assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class));\n        \n        assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null));\n        assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, ExceptionWithCause.class));\n        assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, NestableException.class));\n        assertEquals(0, ExceptionUtils.indexOfType(withoutCause, ExceptionWithoutCause.class));\n        \n        assertEquals(-1, ExceptionUtils.indexOfType(nested, null));\n        assertEquals(-1, ExceptionUtils.indexOfType(nested, ExceptionWithCause.class));\n        assertEquals(0, ExceptionUtils.indexOfType(nested, NestableException.class));\n        assertEquals(1, ExceptionUtils.indexOfType(nested, ExceptionWithoutCause.class));\n        \n        assertEquals(-1, ExceptionUtils.indexOfType(withCause, null));\n        assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class));\n        assertEquals(1, ExceptionUtils.indexOfType(withCause, NestableException.class));\n        assertEquals(2, ExceptionUtils.indexOfType(withCause, ExceptionWithoutCause.class));\n        \n        assertEquals(0, ExceptionUtils.indexOfType(withCause, Exception.class));\n    }",
        "begin_line": 400,
        "end_line": 420,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 401,col 9)-(line 401,col 65)",
            "(line 402,col 9)-(line 402,col 84)",
            "(line 404,col 9)-(line 404,col 73)",
            "(line 405,col 9)-(line 405,col 93)",
            "(line 406,col 9)-(line 406,col 92)",
            "(line 407,col 9)-(line 407,col 95)",
            "(line 409,col 9)-(line 409,col 67)",
            "(line 410,col 9)-(line 410,col 87)",
            "(line 411,col 9)-(line 411,col 85)",
            "(line 412,col 9)-(line 412,col 89)",
            "(line 414,col 9)-(line 414,col 70)",
            "(line 415,col 9)-(line 415,col 89)",
            "(line 416,col 9)-(line 416,col 88)",
            "(line 417,col 9)-(line 417,col 92)",
            "(line 419,col 9)-(line 419,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.testIndexOfType_ThrowableClassInt()",
        "snippet": "    public void testIndexOfType_ThrowableClassInt() {\n        assertEquals(-1, ExceptionUtils.indexOfType(null, null, 0));\n        assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class, 0));\n        \n        assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null));\n        assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, ExceptionWithCause.class, 0));\n        assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, NestableException.class, 0));\n        assertEquals(0, ExceptionUtils.indexOfType(withoutCause, ExceptionWithoutCause.class, 0));\n        \n        assertEquals(-1, ExceptionUtils.indexOfType(nested, null, 0));\n        assertEquals(-1, ExceptionUtils.indexOfType(nested, ExceptionWithCause.class, 0));\n        assertEquals(0, ExceptionUtils.indexOfType(nested, NestableException.class, 0));\n        assertEquals(1, ExceptionUtils.indexOfType(nested, ExceptionWithoutCause.class, 0));\n        \n        assertEquals(-1, ExceptionUtils.indexOfType(withCause, null));\n        assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0));\n        assertEquals(1, ExceptionUtils.indexOfType(withCause, NestableException.class, 0));\n        assertEquals(2, ExceptionUtils.indexOfType(withCause, ExceptionWithoutCause.class, 0));\n\n        assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, -1));\n        assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0));\n        assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 1));\n        assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 9));\n        \n        assertEquals(0, ExceptionUtils.indexOfType(withCause, Exception.class, 0));\n    }",
        "begin_line": 422,
        "end_line": 447,
        "comment": "",
        "child_ranges": [
            "(line 423,col 9)-(line 423,col 68)",
            "(line 424,col 9)-(line 424,col 87)",
            "(line 426,col 9)-(line 426,col 73)",
            "(line 427,col 9)-(line 427,col 96)",
            "(line 428,col 9)-(line 428,col 95)",
            "(line 429,col 9)-(line 429,col 98)",
            "(line 431,col 9)-(line 431,col 70)",
            "(line 432,col 9)-(line 432,col 90)",
            "(line 433,col 9)-(line 433,col 88)",
            "(line 434,col 9)-(line 434,col 92)",
            "(line 436,col 9)-(line 436,col 70)",
            "(line 437,col 9)-(line 437,col 92)",
            "(line 438,col 9)-(line 438,col 91)",
            "(line 439,col 9)-(line 439,col 95)",
            "(line 441,col 9)-(line 441,col 93)",
            "(line 442,col 9)-(line 442,col 92)",
            "(line 443,col 9)-(line 443,col 93)",
            "(line 444,col 9)-(line 444,col 93)",
            "(line 446,col 9)-(line 446,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.testPrintRootCauseStackTrace_Throwable()",
        "snippet": "    public void testPrintRootCauseStackTrace_Throwable() throws Exception {\n        ExceptionUtils.printRootCauseStackTrace(null);\n        // could pipe system.err to a known stream, but not much point as\n        // internally this method calls stram method anyway\n    }",
        "begin_line": 450,
        "end_line": 454,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 451,col 9)-(line 451,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.testPrintRootCauseStackTrace_ThrowableStream()",
        "snippet": "    public void testPrintRootCauseStackTrace_ThrowableStream() throws Exception {\n        ByteArrayOutputStream out = new ByteArrayOutputStream(1024);\n        ExceptionUtils.printRootCauseStackTrace(null, (PrintStream) null);\n        ExceptionUtils.printRootCauseStackTrace(null, new PrintStream(out));\n        assertEquals(0, out.toString().length());\n        \n        out = new ByteArrayOutputStream(1024);\n        try {\n            ExceptionUtils.printRootCauseStackTrace(withCause, (PrintStream) null);\n            fail();\n        } catch (IllegalArgumentException ex) {\n        }\n        \n        out = new ByteArrayOutputStream(1024);\n        Throwable withCause = createExceptionWithCause();\n        ExceptionUtils.printRootCauseStackTrace(withCause, new PrintStream(out));\n        String stackTrace = out.toString();\n        assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) != -1);\n        \n        out = new ByteArrayOutputStream(1024);\n        ExceptionUtils.printRootCauseStackTrace(withoutCause, new PrintStream(out));\n        stackTrace = out.toString();\n        assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) == -1);\n    }",
        "begin_line": 456,
        "end_line": 479,
        "comment": "",
        "child_ranges": [
            "(line 457,col 9)-(line 457,col 68)",
            "(line 458,col 9)-(line 458,col 74)",
            "(line 459,col 9)-(line 459,col 76)",
            "(line 460,col 9)-(line 460,col 49)",
            "(line 462,col 9)-(line 462,col 46)",
            "(line 463,col 9)-(line 467,col 9)",
            "(line 469,col 9)-(line 469,col 46)",
            "(line 470,col 9)-(line 470,col 57)",
            "(line 471,col 9)-(line 471,col 81)",
            "(line 472,col 9)-(line 472,col 43)",
            "(line 473,col 9)-(line 473,col 76)",
            "(line 475,col 9)-(line 475,col 46)",
            "(line 476,col 9)-(line 476,col 84)",
            "(line 477,col 9)-(line 477,col 36)",
            "(line 478,col 9)-(line 478,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.testPrintRootCauseStackTrace_ThrowableWriter()",
        "snippet": "    public void testPrintRootCauseStackTrace_ThrowableWriter() throws Exception {\n        StringWriter writer = new StringWriter(1024);\n        ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null);\n        ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer));\n        assertEquals(0, writer.getBuffer().length());\n        \n        writer = new StringWriter(1024);\n        try {\n            ExceptionUtils.printRootCauseStackTrace(withCause, (PrintWriter) null);\n            fail();\n        } catch (IllegalArgumentException ex) {\n        }\n        \n        writer = new StringWriter(1024);\n        Throwable withCause = createExceptionWithCause();\n        ExceptionUtils.printRootCauseStackTrace(withCause, new PrintWriter(writer));\n        String stackTrace = writer.toString();\n        assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) != -1);\n        \n        writer = new StringWriter(1024);\n        ExceptionUtils.printRootCauseStackTrace(withoutCause, new PrintWriter(writer));\n        stackTrace = writer.toString();\n        assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) == -1);\n    }",
        "begin_line": 481,
        "end_line": 504,
        "comment": "",
        "child_ranges": [
            "(line 482,col 9)-(line 482,col 53)",
            "(line 483,col 9)-(line 483,col 74)",
            "(line 484,col 9)-(line 484,col 79)",
            "(line 485,col 9)-(line 485,col 53)",
            "(line 487,col 9)-(line 487,col 40)",
            "(line 488,col 9)-(line 492,col 9)",
            "(line 494,col 9)-(line 494,col 40)",
            "(line 495,col 9)-(line 495,col 57)",
            "(line 496,col 9)-(line 496,col 84)",
            "(line 497,col 9)-(line 497,col 46)",
            "(line 498,col 9)-(line 498,col 76)",
            "(line 500,col 9)-(line 500,col 40)",
            "(line 501,col 9)-(line 501,col 87)",
            "(line 502,col 9)-(line 502,col 39)",
            "(line 503,col 9)-(line 503,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.testGetRootCauseStackTrace_Throwable()",
        "snippet": "    public void testGetRootCauseStackTrace_Throwable() throws Exception {\n        assertEquals(0, ExceptionUtils.getRootCauseStackTrace(null).length);\n        \n        Throwable withCause = createExceptionWithCause();\n        String[] stackTrace = ExceptionUtils.getRootCauseStackTrace(withCause);\n        boolean match = false;\n        for (int i = 0; i < stackTrace.length; i++) {\n            if (stackTrace[i].startsWith(ExceptionUtils.WRAPPED_MARKER)) {\n                match = true;\n                break;\n            }\n        }\n        assertEquals(true, match);\n        \n        stackTrace = ExceptionUtils.getRootCauseStackTrace(withoutCause);\n        match = false;\n        for (int i = 0; i < stackTrace.length; i++) {\n            if (stackTrace[i].startsWith(ExceptionUtils.WRAPPED_MARKER)) {\n                match = true;\n                break;\n            }\n        }\n        assertEquals(false, match);\n    }",
        "begin_line": 507,
        "end_line": 530,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 508,col 9)-(line 508,col 76)",
            "(line 510,col 9)-(line 510,col 57)",
            "(line 511,col 9)-(line 511,col 79)",
            "(line 512,col 9)-(line 512,col 30)",
            "(line 513,col 9)-(line 518,col 9)",
            "(line 519,col 9)-(line 519,col 34)",
            "(line 521,col 9)-(line 521,col 73)",
            "(line 522,col 9)-(line 522,col 22)",
            "(line 523,col 9)-(line 528,col 9)",
            "(line 529,col 9)-(line 529,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.testRemoveCommonFrames_ListList()",
        "snippet": "    public void testRemoveCommonFrames_ListList() throws Exception {\n        try {\n            ExceptionUtils.removeCommonFrames(null, null);\n            fail();\n        } catch (IllegalArgumentException ex) {\n        }\n    }",
        "begin_line": 532,
        "end_line": 538,
        "comment": "",
        "child_ranges": [
            "(line 533,col 9)-(line 537,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.test_getMessage_Throwable()",
        "snippet": "    public void test_getMessage_Throwable() {\n        Throwable th = null;\n        assertEquals(\"\", ExceptionUtils.getMessage(th));\n        \n        th = new IllegalArgumentException(\"Base\");\n        assertEquals(\"IllegalArgumentException: Base\", ExceptionUtils.getMessage(th));\n        \n        th = new ExceptionWithCause(\"Wrapper\", th);\n        assertEquals(\"ExceptionUtilsTestCase.ExceptionWithCause: Wrapper\", ExceptionUtils.getMessage(th));\n    }",
        "begin_line": 540,
        "end_line": 549,
        "comment": "",
        "child_ranges": [
            "(line 541,col 9)-(line 541,col 28)",
            "(line 542,col 9)-(line 542,col 56)",
            "(line 544,col 9)-(line 544,col 50)",
            "(line 545,col 9)-(line 545,col 86)",
            "(line 547,col 9)-(line 547,col 51)",
            "(line 548,col 9)-(line 548,col 106)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.test_getRootCauseMessage_Throwable()",
        "snippet": "    public void test_getRootCauseMessage_Throwable() {\n        Throwable th = null;\n        assertEquals(\"\", ExceptionUtils.getRootCauseMessage(th));\n        \n        th = new IllegalArgumentException(\"Base\");\n        assertEquals(\"IllegalArgumentException: Base\", ExceptionUtils.getRootCauseMessage(th));\n        \n        th = new ExceptionWithCause(\"Wrapper\", th);\n        assertEquals(\"IllegalArgumentException: Base\", ExceptionUtils.getRootCauseMessage(th));\n    }",
        "begin_line": 551,
        "end_line": 560,
        "comment": "",
        "child_ranges": [
            "(line 552,col 9)-(line 552,col 28)",
            "(line 553,col 9)-(line 553,col 65)",
            "(line 555,col 9)-(line 555,col 50)",
            "(line 556,col 9)-(line 556,col 95)",
            "(line 558,col 9)-(line 558,col 51)",
            "(line 559,col 9)-(line 559,col 95)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.ExceptionWithCause.ExceptionWithCause(java.lang.String, java.lang.Throwable)",
        "snippet": "        public ExceptionWithCause(String str, Throwable cause) {\n            super(str);\n            setCause(cause);\n        }",
        "begin_line": 571,
        "end_line": 574,
        "comment": "",
        "child_ranges": [
            "(line 572,col 13)-(line 572,col 23)",
            "(line 573,col 13)-(line 573,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.ExceptionWithCause.ExceptionWithCause(java.lang.Throwable)",
        "snippet": "        public ExceptionWithCause(Throwable cause) {\n            super();\n            setCause(cause);\n        }",
        "begin_line": 576,
        "end_line": 579,
        "comment": "",
        "child_ranges": [
            "(line 577,col 13)-(line 577,col 20)",
            "(line 578,col 13)-(line 578,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.ExceptionWithCause.getCause()",
        "snippet": "        public Throwable getCause() {\n            return cause;\n        }",
        "begin_line": 581,
        "end_line": 583,
        "comment": "",
        "child_ranges": [
            "(line 582,col 13)-(line 582,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.ExceptionWithCause.setCause(java.lang.Throwable)",
        "snippet": "        public void setCause(Throwable cause) {\n            this.cause = cause;\n        }",
        "begin_line": 585,
        "end_line": 587,
        "comment": "",
        "child_ranges": [
            "(line 586,col 13)-(line 586,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.exception.ExceptionUtilsTestCase",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java",
        "signature": "org.apache.commons.lang.exception.ExceptionUtilsTestCase.ExceptionWithoutCause.getTargetException()",
        "snippet": "        public void getTargetException() {\n        }",
        "begin_line": 596,
        "end_line": 597,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.text.StrLookupTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrLookupTest.java",
        "signature": "org.apache.commons.lang.text.StrLookupTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 40,
        "end_line": 42,
        "comment": "\n     * Main method.\n     * \n     * @param args  command line arguments, ignored\n     ",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrLookupTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrLookupTest.java",
        "signature": "org.apache.commons.lang.text.StrLookupTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(StrLookupTest.class);\n        suite.setName(\"StrLookup Tests\");\n        return suite;\n    }",
        "begin_line": 49,
        "end_line": 53,
        "comment": "\n     * Return a new test suite containing this test case.\n     * \n     * @return a new test suite containing this test case\n     ",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 61)",
            "(line 51,col 9)-(line 51,col 41)",
            "(line 52,col 9)-(line 52,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrLookupTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrLookupTest.java",
        "signature": "org.apache.commons.lang.text.StrLookupTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        super.setUp();\n    }",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrLookupTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrLookupTest.java",
        "signature": "org.apache.commons.lang.text.StrLookupTest.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        super.tearDown();\n    }",
        "begin_line": 59,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrLookupTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrLookupTest.java",
        "signature": "org.apache.commons.lang.text.StrLookupTest.testNoneLookup()",
        "snippet": "    public void testNoneLookup() {\n        assertEquals(null, StrLookup.noneLookup().lookup(null));\n        assertEquals(null, StrLookup.noneLookup().lookup(\"\"));\n        assertEquals(null, StrLookup.noneLookup().lookup(\"any\"));\n    }",
        "begin_line": 64,
        "end_line": 68,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 64)",
            "(line 66,col 9)-(line 66,col 62)",
            "(line 67,col 9)-(line 67,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrLookupTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrLookupTest.java",
        "signature": "org.apache.commons.lang.text.StrLookupTest.testSystemProperiesLookup()",
        "snippet": "    public void testSystemProperiesLookup() {\n        assertEquals(System.getProperty(\"os.name\"), StrLookup.systemPropertiesLookup().lookup(\"os.name\"));\n        assertEquals(null, StrLookup.systemPropertiesLookup().lookup(\"\"));\n        assertEquals(null, StrLookup.systemPropertiesLookup().lookup(\"other\"));\n        try {\n            StrLookup.systemPropertiesLookup().lookup(null);\n            fail();\n        } catch (NullPointerException ex) {\n            // expected\n        }\n    }",
        "begin_line": 70,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 106)",
            "(line 72,col 9)-(line 72,col 74)",
            "(line 73,col 9)-(line 73,col 79)",
            "(line 74,col 9)-(line 79,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrLookupTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrLookupTest.java",
        "signature": "org.apache.commons.lang.text.StrLookupTest.testMapLookup()",
        "snippet": "    public void testMapLookup() {\n        Map map = new HashMap();\n        map.put(\"key\", \"value\");\n        map.put(\"number\", new Integer(2));\n        assertEquals(\"value\", StrLookup.mapLookup(map).lookup(\"key\"));\n        assertEquals(\"2\", StrLookup.mapLookup(map).lookup(\"number\"));\n        assertEquals(null, StrLookup.mapLookup(map).lookup(null));\n        assertEquals(null, StrLookup.mapLookup(map).lookup(\"\"));\n        assertEquals(null, StrLookup.mapLookup(map).lookup(\"other\"));\n    }",
        "begin_line": 82,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 32)",
            "(line 84,col 9)-(line 84,col 32)",
            "(line 85,col 9)-(line 85,col 42)",
            "(line 86,col 9)-(line 86,col 70)",
            "(line 87,col 9)-(line 87,col 69)",
            "(line 88,col 9)-(line 88,col 66)",
            "(line 89,col 9)-(line 89,col 64)",
            "(line 90,col 9)-(line 90,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrLookupTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrLookupTest.java",
        "signature": "org.apache.commons.lang.text.StrLookupTest.testMapLookup_nullMap()",
        "snippet": "    public void testMapLookup_nullMap() {\n        Map map = null;\n        assertEquals(null, StrLookup.mapLookup(map).lookup(null));\n        assertEquals(null, StrLookup.mapLookup(map).lookup(\"\"));\n        assertEquals(null, StrLookup.mapLookup(map).lookup(\"any\"));\n    }",
        "begin_line": 93,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 23)",
            "(line 95,col 9)-(line 95,col 66)",
            "(line 96,col 9)-(line 96,col 64)",
            "(line 97,col 9)-(line 97,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.MultiFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/MultiFormatTest.java",
        "signature": "org.apache.commons.lang.text.MultiFormatTest.GuardedFormat.GuardedFormat(java.text.Format, java.lang.Class[])",
        "snippet": "        public GuardedFormat(Format delegate, Class[] allowableTypes) {\n            Validate.notNull(delegate);\n            this.delegate = delegate;\n            Validate.notNull(allowableTypes);\n            this.allowableTypes = allowableTypes;\n        }",
        "begin_line": 52,
        "end_line": 57,
        "comment": "\n         * Create a new MultiFormatTest.GuardedFormat.\n         ",
        "child_ranges": [
            "(line 53,col 13)-(line 53,col 39)",
            "(line 54,col 13)-(line 54,col 37)",
            "(line 55,col 13)-(line 55,col 45)",
            "(line 56,col 13)-(line 56,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.MultiFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/MultiFormatTest.java",
        "signature": "org.apache.commons.lang.text.MultiFormatTest.GuardedFormat.format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)",
        "snippet": "        public StringBuffer format(Object obj, StringBuffer toAppendTo,\n                FieldPosition pos) {\n            Class c = obj == null ? null : obj.getClass();\n            for (int i = 0; i < allowableTypes.length; i++) {\n                if (ClassUtils.isAssignable(c, allowableTypes[i])) {\n                    return delegate.format(obj, toAppendTo, pos);\n                }\n            }\n            throw new IllegalArgumentException();\n        }",
        "begin_line": 59,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 61,col 13)-(line 61,col 58)",
            "(line 62,col 13)-(line 66,col 13)",
            "(line 67,col 13)-(line 67,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.MultiFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/MultiFormatTest.java",
        "signature": "org.apache.commons.lang.text.MultiFormatTest.GuardedFormat.parseObject(java.lang.String, java.text.ParsePosition)",
        "snippet": "        public Object parseObject(String source, ParsePosition pos) {\n            return delegate.parseObject(source, pos);\n        }",
        "begin_line": 70,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 71,col 13)-(line 71,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.MultiFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/MultiFormatTest.java",
        "signature": "org.apache.commons.lang.text.MultiFormatTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        super.setUp();\n        // silliness to avoid the DateFormat grabbing the Integer, or the\n        // integer parsing the first (month) date component:\n        format = new MultiFormat.Builder().add(\n                new GuardedFormat(DateFormat.getDateInstance(DateFormat.SHORT,\n                        Locale.US), new Class[] { Date.class })).add(\n                getIntegerNumberFormat(Locale.US)).toMultiFormat();\n    }",
        "begin_line": 82,
        "end_line": 90,
        "comment": "\n     * (non-Javadoc)\n     * \n     * @see junit.framework.TestCase#setUp()\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 22)",
            "(line 86,col 9)-(line 89,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.MultiFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/MultiFormatTest.java",
        "signature": "org.apache.commons.lang.text.MultiFormatTest.getIntegerNumberFormat(java.util.Locale)",
        "snippet": "    private NumberFormat getIntegerNumberFormat(Locale locale) {\n        NumberFormat result = NumberFormat.getInstance(locale);\n        result.setMaximumFractionDigits(0);\n        result.setParseIntegerOnly(true);\n        return result;\n    }",
        "begin_line": 92,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 63)",
            "(line 94,col 9)-(line 94,col 43)",
            "(line 95,col 9)-(line 95,col 41)",
            "(line 96,col 9)-(line 96,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.MultiFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/MultiFormatTest.java",
        "signature": "org.apache.commons.lang.text.MultiFormatTest.testFormatNumber()",
        "snippet": "    public void testFormatNumber() {\n        assertEquals(\"1,000\", format.format(new Integer(1000)));\n    }",
        "begin_line": 99,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 100,col 9)-(line 100,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.MultiFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/MultiFormatTest.java",
        "signature": "org.apache.commons.lang.text.MultiFormatTest.testParseNumber()",
        "snippet": "    public void testParseNumber() throws ParseException {\n        assertEquals(new Integer(-1000).intValue(), ((Number) format\n                .parseObject(\"-1,000\")).intValue());\n    }",
        "begin_line": 103,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 104,col 9)-(line 105,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.MultiFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/MultiFormatTest.java",
        "signature": "org.apache.commons.lang.text.MultiFormatTest.testFormatDate()",
        "snippet": "    public void testFormatDate() {\n        assertEquals(\"1/1/70\", format.format(new GregorianCalendar(1970,\n                Calendar.JANUARY, 01).getTime()));\n    }",
        "begin_line": 108,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 109,col 9)-(line 110,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.MultiFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/MultiFormatTest.java",
        "signature": "org.apache.commons.lang.text.MultiFormatTest.testParseDate()",
        "snippet": "    public void testParseDate() throws ParseException {\n        assertEquals(new GregorianCalendar(1970, Calendar.JANUARY, 01)\n                .getTime(), format.parseObject(\"1/1/70\"));\n    }",
        "begin_line": 113,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 114,col 9)-(line 115,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.MultiFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/MultiFormatTest.java",
        "signature": "org.apache.commons.lang.text.MultiFormatTest.testFormatObject()",
        "snippet": "    public void testFormatObject() {\n        try {\n            format.format(new Object());\n            fail(\"expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // okay\n        }\n    }",
        "begin_line": 118,
        "end_line": 125,
        "comment": "",
        "child_ranges": [
            "(line 119,col 9)-(line 124,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.MultiFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/MultiFormatTest.java",
        "signature": "org.apache.commons.lang.text.MultiFormatTest.testParseGarbage()",
        "snippet": "    public void testParseGarbage() {\n        try {\n            format.parseObject(\"garbage\");\n            fail(\"expected ParseException\");\n        } catch (ParseException e) {\n            //okay\n        }\n    }",
        "begin_line": 127,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 128,col 9)-(line 133,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.MessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/MessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.MessageFormatTest.US.getLocale()",
        "snippet": "        protected Locale getLocale() {\n            return Locale.US;\n        }",
        "begin_line": 40,
        "end_line": 42,
        "comment": "\n         * {@inheritDoc}\n         ",
        "child_ranges": [
            "(line 41,col 13)-(line 41,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.MessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/MessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.MessageFormatTest.UK.getLocale()",
        "snippet": "        protected Locale getLocale() {\n            return Locale.UK;\n        }",
        "begin_line": 54,
        "end_line": 56,
        "comment": "\n         * {@inheritDoc}\n         ",
        "child_ranges": [
            "(line 55,col 13)-(line 55,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.MessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/MessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.MessageFormatTest.DE.getLocale()",
        "snippet": "        protected Locale getLocale() {\n            return Locale.GERMANY;\n        }",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\n         * {@inheritDoc}\n         ",
        "child_ranges": [
            "(line 69,col 13)-(line 69,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.MessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/MessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.MessageFormatTest.IT.getLocale()",
        "snippet": "        protected Locale getLocale() {\n            return Locale.ITALY;\n        }",
        "begin_line": 82,
        "end_line": 84,
        "comment": "\n         * {@inheritDoc}\n         ",
        "child_ranges": [
            "(line 83,col 13)-(line 83,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.MessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/MessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.MessageFormatTest.JP.getLocale()",
        "snippet": "        protected Locale getLocale() {\n            return Locale.JAPAN;\n        }",
        "begin_line": 96,
        "end_line": 98,
        "comment": "\n         * {@inheritDoc}\n         ",
        "child_ranges": [
            "(line 97,col 13)-(line 97,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.MessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/MessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.MessageFormatTest.CN.getLocale()",
        "snippet": "        protected Locale getLocale() {\n            return Locale.CHINA;\n        }",
        "begin_line": 110,
        "end_line": 112,
        "comment": "\n         * {@inheritDoc}\n         ",
        "child_ranges": [
            "(line 111,col 13)-(line 111,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.MessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/MessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.MessageFormatTest.CA.getLocale()",
        "snippet": "        protected Locale getLocale() {\n            return Locale.CANADA;\n        }",
        "begin_line": 124,
        "end_line": 126,
        "comment": "\n         * {@inheritDoc}\n         ",
        "child_ranges": [
            "(line 125,col 13)-(line 125,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.MessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/MessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.MessageFormatTest.FR.getLocale()",
        "snippet": "        protected Locale getLocale() {\n            return Locale.FRANCE;\n        }",
        "begin_line": 138,
        "end_line": 140,
        "comment": "\n         * {@inheritDoc}\n         ",
        "child_ranges": [
            "(line 139,col 13)-(line 139,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.MessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/MessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.MessageFormatTest.KR.getLocale()",
        "snippet": "        protected Locale getLocale() {\n            return Locale.KOREA;\n        }",
        "begin_line": 152,
        "end_line": 154,
        "comment": "\n         * {@inheritDoc}\n         ",
        "child_ranges": [
            "(line 153,col 13)-(line 153,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.MessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/MessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.MessageFormatTest.TW.getLocale()",
        "snippet": "        protected Locale getLocale() {\n            return Locale.TAIWAN;\n        }",
        "begin_line": 166,
        "end_line": 168,
        "comment": "\n         * {@inheritDoc}\n         ",
        "child_ranges": [
            "(line 167,col 13)-(line 167,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.MessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/MessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.MessageFormatTest.createMessageFormat(java.lang.String, java.util.Locale)",
        "snippet": "    protected MessageFormat createMessageFormat(String pattern, Locale locale) {\n        MessageFormat result = new MessageFormat(pattern);\n        if (!Locale.getDefault().equals(locale)) {\n            result.setLocale(locale);\n            result.applyPattern(pattern);\n        }\n        return result;\n    }",
        "begin_line": 174,
        "end_line": 181,
        "comment": "\n     * {@inheritDoc}\n     ",
        "child_ranges": [
            "(line 175,col 9)-(line 175,col 58)",
            "(line 176,col 9)-(line 179,col 9)",
            "(line 180,col 9)-(line 180,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.Anonymous-d370b4dc-7d60-4737-b382-877081f4bf8c.toString()",
        "snippet": "        public String toString() {\n            return \"foo\";\n        }",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 45,col 13)-(line 45,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 54,
        "end_line": 56,
        "comment": "\n     * Main method.\n     * \n     * @param args  command line arguments, ignored\n     ",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(StrBuilderAppendInsertTest.class);\n        suite.setName(\"StrBuilder Tests\");\n        return suite;\n    }",
        "begin_line": 63,
        "end_line": 67,
        "comment": "\n     * Return a new test suite containing this test case.\n     * \n     * @return a new test suite containing this test case\n     ",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 74)",
            "(line 65,col 9)-(line 65,col 42)",
            "(line 66,col 9)-(line 66,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.StrBuilderAppendInsertTest(java.lang.String)",
        "snippet": "    public StrBuilderAppendInsertTest(String name) {\n        super(name);\n    }",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\n     * Create a new test case with the specified name.\n     * \n     * @param name  the name\n     ",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendNewLine()",
        "snippet": "    public void testAppendNewLine() {\n        StrBuilder sb = new StrBuilder(\"---\");\n        sb.appendNewLine().append(\"+++\");\n        assertEquals(\"---\" + SEP + \"+++\", sb.toString());\n        \n        sb = new StrBuilder(\"---\");\n        sb.setNewLineText(\"#\").appendNewLine().setNewLineText(null).appendNewLine();\n        assertEquals(\"---#\" + SEP, sb.toString());\n    }",
        "begin_line": 79,
        "end_line": 87,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 46)",
            "(line 81,col 9)-(line 81,col 41)",
            "(line 82,col 9)-(line 82,col 57)",
            "(line 84,col 9)-(line 84,col 35)",
            "(line 85,col 9)-(line 85,col 84)",
            "(line 86,col 9)-(line 86,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendWithNullText()",
        "snippet": "    public void testAppendWithNullText() {\n        StrBuilder sb = new StrBuilder();\n        sb.setNullText(\"NULL\");\n        assertEquals(\"\", sb.toString());\n\n        sb.appendNull();\n        assertEquals(\"NULL\", sb.toString());\n\n        sb.append((Object) null);\n        assertEquals(\"NULLNULL\", sb.toString());\n\n        sb.append(FOO);\n        assertEquals(\"NULLNULLfoo\", sb.toString());\n\n        sb.append((String) null);\n        assertEquals(\"NULLNULLfooNULL\", sb.toString());\n\n        sb.append(\"\");\n        assertEquals(\"NULLNULLfooNULL\", sb.toString());\n\n        sb.append(\"bar\");\n        assertEquals(\"NULLNULLfooNULLbar\", sb.toString());\n\n        sb.append((StringBuffer) null);\n        assertEquals(\"NULLNULLfooNULLbarNULL\", sb.toString());\n\n        sb.append(new StringBuffer(\"baz\"));\n        assertEquals(\"NULLNULLfooNULLbarNULLbaz\", sb.toString());\n    }",
        "begin_line": 90,
        "end_line": 118,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 41)",
            "(line 92,col 9)-(line 92,col 31)",
            "(line 93,col 9)-(line 93,col 40)",
            "(line 95,col 9)-(line 95,col 24)",
            "(line 96,col 9)-(line 96,col 44)",
            "(line 98,col 9)-(line 98,col 33)",
            "(line 99,col 9)-(line 99,col 48)",
            "(line 101,col 9)-(line 101,col 23)",
            "(line 102,col 9)-(line 102,col 51)",
            "(line 104,col 9)-(line 104,col 33)",
            "(line 105,col 9)-(line 105,col 55)",
            "(line 107,col 9)-(line 107,col 22)",
            "(line 108,col 9)-(line 108,col 55)",
            "(line 110,col 9)-(line 110,col 25)",
            "(line 111,col 9)-(line 111,col 58)",
            "(line 113,col 9)-(line 113,col 39)",
            "(line 114,col 9)-(line 114,col 62)",
            "(line 116,col 9)-(line 116,col 43)",
            "(line 117,col 9)-(line 117,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppend_Object()",
        "snippet": "    public void testAppend_Object() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendNull();\n        assertEquals(\"\", sb.toString());\n\n        sb.append((Object) null);\n        assertEquals(\"\", sb.toString());\n\n        sb.append(FOO);\n        assertEquals(\"foo\", sb.toString());\n\n        sb.append((StringBuffer) null);\n        assertEquals(\"foo\", sb.toString());\n\n        sb.append(new StringBuffer(\"baz\"));\n        assertEquals(\"foobaz\", sb.toString());\n\n        sb.append(new StrBuilder(\"yes\"));\n        assertEquals(\"foobazyes\", sb.toString());\n    }",
        "begin_line": 121,
        "end_line": 140,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 122,col 9)-(line 122,col 41)",
            "(line 123,col 9)-(line 123,col 24)",
            "(line 124,col 9)-(line 124,col 40)",
            "(line 126,col 9)-(line 126,col 33)",
            "(line 127,col 9)-(line 127,col 40)",
            "(line 129,col 9)-(line 129,col 23)",
            "(line 130,col 9)-(line 130,col 43)",
            "(line 132,col 9)-(line 132,col 39)",
            "(line 133,col 9)-(line 133,col 43)",
            "(line 135,col 9)-(line 135,col 43)",
            "(line 136,col 9)-(line 136,col 46)",
            "(line 138,col 9)-(line 138,col 41)",
            "(line 139,col 9)-(line 139,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppend_String()",
        "snippet": "    public void testAppend_String() {\n        StrBuilder sb = new StrBuilder();\n        sb.setNullText(\"NULL\").append((String) null);\n        assertEquals(\"NULL\", sb.toString());\n\n        sb = new StrBuilder();\n        sb.append(\"foo\");\n        assertEquals(\"foo\", sb.toString());\n\n        sb.append(\"\");\n        assertEquals(\"foo\", sb.toString());\n\n        sb.append(\"bar\");\n        assertEquals(\"foobar\", sb.toString());\n    }",
        "begin_line": 143,
        "end_line": 157,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 144,col 9)-(line 144,col 41)",
            "(line 145,col 9)-(line 145,col 53)",
            "(line 146,col 9)-(line 146,col 44)",
            "(line 148,col 9)-(line 148,col 30)",
            "(line 149,col 9)-(line 149,col 25)",
            "(line 150,col 9)-(line 150,col 43)",
            "(line 152,col 9)-(line 152,col 22)",
            "(line 153,col 9)-(line 153,col 43)",
            "(line 155,col 9)-(line 155,col 25)",
            "(line 156,col 9)-(line 156,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppend_String_int_int()",
        "snippet": "    public void testAppend_String_int_int() {\n        StrBuilder sb = new StrBuilder();\n        sb.setNullText(\"NULL\").append((String) null, 0, 1);\n        assertEquals(\"NULL\", sb.toString());\n\n        sb = new StrBuilder();\n        sb.append(\"foo\", 0, 3);\n        assertEquals(\"foo\", sb.toString());\n\n        try {\n            sb.append(\"bar\", -1, 1);\n            fail(\"append(char[], -1,) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(\"bar\", 3, 1);\n            fail(\"append(char[], 3,) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(\"bar\", 1, -1);\n            fail(\"append(char[],, -1) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(\"bar\", 1, 3);\n            fail(\"append(char[], 1, 3) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(\"bar\", -1, 3);\n            fail(\"append(char[], -1, 3) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(\"bar\", 4, 0);\n            fail(\"append(char[], 4, 0) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.append(\"bar\", 3, 0);\n        assertEquals(\"foo\", sb.toString());\n\n        sb.append(\"abcbardef\", 3, 3);\n        assertEquals(\"foobar\", sb.toString());\n    }",
        "begin_line": 160,
        "end_line": 216,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 161,col 9)-(line 161,col 41)",
            "(line 162,col 9)-(line 162,col 59)",
            "(line 163,col 9)-(line 163,col 44)",
            "(line 165,col 9)-(line 165,col 30)",
            "(line 166,col 9)-(line 166,col 31)",
            "(line 167,col 9)-(line 167,col 43)",
            "(line 169,col 9)-(line 174,col 9)",
            "(line 176,col 9)-(line 181,col 9)",
            "(line 183,col 9)-(line 188,col 9)",
            "(line 190,col 9)-(line 195,col 9)",
            "(line 197,col 9)-(line 202,col 9)",
            "(line 204,col 9)-(line 209,col 9)",
            "(line 211,col 9)-(line 211,col 31)",
            "(line 212,col 9)-(line 212,col 43)",
            "(line 214,col 9)-(line 214,col 37)",
            "(line 215,col 9)-(line 215,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppend_StringBuffer()",
        "snippet": "    public void testAppend_StringBuffer() {\n        StrBuilder sb = new StrBuilder();\n        sb.setNullText(\"NULL\").append((StringBuffer) null);\n        assertEquals(\"NULL\", sb.toString());\n\n        sb = new StrBuilder();\n        sb.append(new StringBuffer(\"foo\"));\n        assertEquals(\"foo\", sb.toString());\n\n        sb.append(new StringBuffer(\"\"));\n        assertEquals(\"foo\", sb.toString());\n\n        sb.append(new StringBuffer(\"bar\"));\n        assertEquals(\"foobar\", sb.toString());\n    }",
        "begin_line": 219,
        "end_line": 233,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 220,col 9)-(line 220,col 41)",
            "(line 221,col 9)-(line 221,col 59)",
            "(line 222,col 9)-(line 222,col 44)",
            "(line 224,col 9)-(line 224,col 30)",
            "(line 225,col 9)-(line 225,col 43)",
            "(line 226,col 9)-(line 226,col 43)",
            "(line 228,col 9)-(line 228,col 40)",
            "(line 229,col 9)-(line 229,col 43)",
            "(line 231,col 9)-(line 231,col 43)",
            "(line 232,col 9)-(line 232,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppend_StringBuffer_int_int()",
        "snippet": "    public void testAppend_StringBuffer_int_int() {\n        StrBuilder sb = new StrBuilder();\n        sb.setNullText(\"NULL\").append((StringBuffer) null, 0, 1);\n        assertEquals(\"NULL\", sb.toString());\n\n        sb = new StrBuilder();\n        sb.append(new StringBuffer(\"foo\"), 0, 3);\n        assertEquals(\"foo\", sb.toString());\n\n        try {\n            sb.append(new StringBuffer(\"bar\"), -1, 1);\n            fail(\"append(char[], -1,) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new StringBuffer(\"bar\"), 3, 1);\n            fail(\"append(char[], 3,) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new StringBuffer(\"bar\"), 1, -1);\n            fail(\"append(char[],, -1) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new StringBuffer(\"bar\"), 1, 3);\n            fail(\"append(char[], 1, 3) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new StringBuffer(\"bar\"), -1, 3);\n            fail(\"append(char[], -1, 3) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new StringBuffer(\"bar\"), 4, 0);\n            fail(\"append(char[], 4, 0) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.append(new StringBuffer(\"bar\"), 3, 0);\n        assertEquals(\"foo\", sb.toString());\n\n        sb.append(new StringBuffer(\"abcbardef\"), 3, 3);\n        assertEquals(\"foobar\", sb.toString());\n    }",
        "begin_line": 236,
        "end_line": 292,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 237,col 9)-(line 237,col 41)",
            "(line 238,col 9)-(line 238,col 65)",
            "(line 239,col 9)-(line 239,col 44)",
            "(line 241,col 9)-(line 241,col 30)",
            "(line 242,col 9)-(line 242,col 49)",
            "(line 243,col 9)-(line 243,col 43)",
            "(line 245,col 9)-(line 250,col 9)",
            "(line 252,col 9)-(line 257,col 9)",
            "(line 259,col 9)-(line 264,col 9)",
            "(line 266,col 9)-(line 271,col 9)",
            "(line 273,col 9)-(line 278,col 9)",
            "(line 280,col 9)-(line 285,col 9)",
            "(line 287,col 9)-(line 287,col 49)",
            "(line 288,col 9)-(line 288,col 43)",
            "(line 290,col 9)-(line 290,col 55)",
            "(line 291,col 9)-(line 291,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppend_StrBuilder()",
        "snippet": "    public void testAppend_StrBuilder() {\n        StrBuilder sb = new StrBuilder();\n        sb.setNullText(\"NULL\").append((StrBuilder) null);\n        assertEquals(\"NULL\", sb.toString());\n\n        sb = new StrBuilder();\n        sb.append(new StrBuilder(\"foo\"));\n        assertEquals(\"foo\", sb.toString());\n\n        sb.append(new StrBuilder(\"\"));\n        assertEquals(\"foo\", sb.toString());\n\n        sb.append(new StrBuilder(\"bar\"));\n        assertEquals(\"foobar\", sb.toString());\n    }",
        "begin_line": 295,
        "end_line": 309,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 296,col 9)-(line 296,col 41)",
            "(line 297,col 9)-(line 297,col 57)",
            "(line 298,col 9)-(line 298,col 44)",
            "(line 300,col 9)-(line 300,col 30)",
            "(line 301,col 9)-(line 301,col 41)",
            "(line 302,col 9)-(line 302,col 43)",
            "(line 304,col 9)-(line 304,col 38)",
            "(line 305,col 9)-(line 305,col 43)",
            "(line 307,col 9)-(line 307,col 41)",
            "(line 308,col 9)-(line 308,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppend_StrBuilder_int_int()",
        "snippet": "    public void testAppend_StrBuilder_int_int() {\n        StrBuilder sb = new StrBuilder();\n        sb.setNullText(\"NULL\").append((StrBuilder) null, 0, 1);\n        assertEquals(\"NULL\", sb.toString());\n\n        sb = new StrBuilder();\n        sb.append(new StrBuilder(\"foo\"), 0, 3);\n        assertEquals(\"foo\", sb.toString());\n\n        try {\n            sb.append(new StrBuilder(\"bar\"), -1, 1);\n            fail(\"append(char[], -1,) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new StrBuilder(\"bar\"), 3, 1);\n            fail(\"append(char[], 3,) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new StrBuilder(\"bar\"), 1, -1);\n            fail(\"append(char[],, -1) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new StrBuilder(\"bar\"), 1, 3);\n            fail(\"append(char[], 1, 3) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new StrBuilder(\"bar\"), -1, 3);\n            fail(\"append(char[], -1, 3) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new StrBuilder(\"bar\"), 4, 0);\n            fail(\"append(char[], 4, 0) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.append(new StrBuilder(\"bar\"), 3, 0);\n        assertEquals(\"foo\", sb.toString());\n\n        sb.append(new StrBuilder(\"abcbardef\"), 3, 3);\n        assertEquals(\"foobar\", sb.toString());\n    }",
        "begin_line": 312,
        "end_line": 368,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 313,col 9)-(line 313,col 41)",
            "(line 314,col 9)-(line 314,col 63)",
            "(line 315,col 9)-(line 315,col 44)",
            "(line 317,col 9)-(line 317,col 30)",
            "(line 318,col 9)-(line 318,col 47)",
            "(line 319,col 9)-(line 319,col 43)",
            "(line 321,col 9)-(line 326,col 9)",
            "(line 328,col 9)-(line 333,col 9)",
            "(line 335,col 9)-(line 340,col 9)",
            "(line 342,col 9)-(line 347,col 9)",
            "(line 349,col 9)-(line 354,col 9)",
            "(line 356,col 9)-(line 361,col 9)",
            "(line 363,col 9)-(line 363,col 47)",
            "(line 364,col 9)-(line 364,col 43)",
            "(line 366,col 9)-(line 366,col 53)",
            "(line 367,col 9)-(line 367,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppend_CharArray()",
        "snippet": "    public void testAppend_CharArray() {\n        StrBuilder sb = new StrBuilder();\n        sb.setNullText(\"NULL\").append((char[]) null);\n        assertEquals(\"NULL\", sb.toString());\n\n        sb = new StrBuilder();\n        sb.append(new char[0]);\n        assertEquals(\"\", sb.toString());\n\n        sb.append(new char[]{'f', 'o', 'o'});\n        assertEquals(\"foo\", sb.toString());\n    }",
        "begin_line": 371,
        "end_line": 382,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 372,col 9)-(line 372,col 41)",
            "(line 373,col 9)-(line 373,col 53)",
            "(line 374,col 9)-(line 374,col 44)",
            "(line 376,col 9)-(line 376,col 30)",
            "(line 377,col 9)-(line 377,col 31)",
            "(line 378,col 9)-(line 378,col 40)",
            "(line 380,col 9)-(line 380,col 45)",
            "(line 381,col 9)-(line 381,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppend_CharArray_int_int()",
        "snippet": "    public void testAppend_CharArray_int_int() {\n        StrBuilder sb = new StrBuilder();\n        sb.setNullText(\"NULL\").append((char[]) null, 0, 1);\n        assertEquals(\"NULL\", sb.toString());\n\n        sb = new StrBuilder();\n        sb.append(new char[]{'f', 'o', 'o'}, 0, 3);\n        assertEquals(\"foo\", sb.toString());\n\n        try {\n            sb.append(new char[]{'b', 'a', 'r'}, -1, 1);\n            fail(\"append(char[], -1,) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new char[]{'b', 'a', 'r'}, 3, 1);\n            fail(\"append(char[], 3,) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new char[]{'b', 'a', 'r'}, 1, -1);\n            fail(\"append(char[],, -1) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new char[]{'b', 'a', 'r'}, 1, 3);\n            fail(\"append(char[], 1, 3) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new char[]{'b', 'a', 'r'}, -1, 3);\n            fail(\"append(char[], -1, 3) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new char[]{'b', 'a', 'r'}, 4, 0);\n            fail(\"append(char[], 4, 0) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.append(new char[]{'b', 'a', 'r'}, 3, 0);\n        assertEquals(\"foo\", sb.toString());\n\n        sb.append(new char[]{'a', 'b', 'c', 'b', 'a', 'r', 'd', 'e', 'f'}, 3, 3);\n        assertEquals(\"foobar\", sb.toString());\n    }",
        "begin_line": 385,
        "end_line": 441,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 386,col 9)-(line 386,col 41)",
            "(line 387,col 9)-(line 387,col 59)",
            "(line 388,col 9)-(line 388,col 44)",
            "(line 390,col 9)-(line 390,col 30)",
            "(line 391,col 9)-(line 391,col 51)",
            "(line 392,col 9)-(line 392,col 43)",
            "(line 394,col 9)-(line 399,col 9)",
            "(line 401,col 9)-(line 406,col 9)",
            "(line 408,col 9)-(line 413,col 9)",
            "(line 415,col 9)-(line 420,col 9)",
            "(line 422,col 9)-(line 427,col 9)",
            "(line 429,col 9)-(line 434,col 9)",
            "(line 436,col 9)-(line 436,col 51)",
            "(line 437,col 9)-(line 437,col 43)",
            "(line 439,col 9)-(line 439,col 81)",
            "(line 440,col 9)-(line 440,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppend_Boolean()",
        "snippet": "    public void testAppend_Boolean() {\n        StrBuilder sb = new StrBuilder();\n        sb.append(true);\n        assertEquals(\"true\", sb.toString());\n\n        sb.append(false);\n        assertEquals(\"truefalse\", sb.toString());\n\n        sb.append('!');\n        assertEquals(\"truefalse!\", sb.toString());\n    }",
        "begin_line": 444,
        "end_line": 454,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 445,col 9)-(line 445,col 41)",
            "(line 446,col 9)-(line 446,col 24)",
            "(line 447,col 9)-(line 447,col 44)",
            "(line 449,col 9)-(line 449,col 25)",
            "(line 450,col 9)-(line 450,col 49)",
            "(line 452,col 9)-(line 452,col 23)",
            "(line 453,col 9)-(line 453,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppend_PrimitiveNumber()",
        "snippet": "    public void testAppend_PrimitiveNumber() {\n        StrBuilder sb = new StrBuilder();\n        sb.append(0);\n        assertEquals(\"0\", sb.toString());\n\n        sb.append(1L);\n        assertEquals(\"01\", sb.toString());\n\n        sb.append(2.3f);\n        assertEquals(\"012.3\", sb.toString());\n\n        sb.append(4.5d);\n        assertEquals(\"012.34.5\", sb.toString());\n    }",
        "begin_line": 457,
        "end_line": 470,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 458,col 9)-(line 458,col 41)",
            "(line 459,col 9)-(line 459,col 21)",
            "(line 460,col 9)-(line 460,col 41)",
            "(line 462,col 9)-(line 462,col 22)",
            "(line 463,col 9)-(line 463,col 42)",
            "(line 465,col 9)-(line 465,col 24)",
            "(line 466,col 9)-(line 466,col 45)",
            "(line 468,col 9)-(line 468,col 24)",
            "(line 469,col 9)-(line 469,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendln_Object()",
        "snippet": "    public void testAppendln_Object() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendln((Object) null);\n        assertEquals(\"\" + SEP, sb.toString());\n\n        sb.appendln((Object) FOO);\n        assertEquals(SEP + \"foo\" + SEP, sb.toString());\n\n        sb.appendln(new Integer(6));\n        assertEquals(SEP + \"foo\" + SEP + \"6\" + SEP, sb.toString());\n    }",
        "begin_line": 473,
        "end_line": 483,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 474,col 9)-(line 474,col 41)",
            "(line 475,col 9)-(line 475,col 35)",
            "(line 476,col 9)-(line 476,col 46)",
            "(line 478,col 9)-(line 478,col 34)",
            "(line 479,col 9)-(line 479,col 55)",
            "(line 481,col 9)-(line 481,col 36)",
            "(line 482,col 9)-(line 482,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendln_String()",
        "snippet": "    public void testAppendln_String() {\n        final int[] count = new int[2];\n        StrBuilder sb = new StrBuilder() {\n            public StrBuilder append(String str) {\n                count[0]++;\n                return super.append(str);\n            }\n            public StrBuilder appendNewLine() {\n                count[1]++;\n                return super.appendNewLine();\n            }\n        };\n        sb.appendln(\"foo\");\n        assertEquals(\"foo\" + SEP, sb.toString());\n        assertEquals(2, count[0]);  // appendNewLine() calls append(String)\n        assertEquals(1, count[1]);\n    }",
        "begin_line": 486,
        "end_line": 502,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 487,col 9)-(line 487,col 39)",
            "(line 488,col 9)-(line 497,col 10)",
            "(line 498,col 9)-(line 498,col 27)",
            "(line 499,col 9)-(line 499,col 49)",
            "(line 500,col 9)-(line 500,col 34)",
            "(line 501,col 9)-(line 501,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.Anonymous-c4f0e326-2c89-4d8b-a0b3-3280f9ae3482.append(java.lang.String)",
        "snippet": "            public StrBuilder append(String str) {\n                count[0]++;\n                return super.append(str);\n            }",
        "begin_line": 489,
        "end_line": 492,
        "comment": "",
        "child_ranges": [
            "(line 490,col 17)-(line 490,col 27)",
            "(line 491,col 17)-(line 491,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.Anonymous-24423e2e-b1d5-4ae5-ae7e-1bc608ae4f19.appendNewLine()",
        "snippet": "            public StrBuilder appendNewLine() {\n                count[1]++;\n                return super.appendNewLine();\n            }",
        "begin_line": 493,
        "end_line": 496,
        "comment": "",
        "child_ranges": [
            "(line 494,col 17)-(line 494,col 27)",
            "(line 495,col 17)-(line 495,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendln_String_int_int()",
        "snippet": "    public void testAppendln_String_int_int() {\n        final int[] count = new int[2];\n        StrBuilder sb = new StrBuilder() {\n            public StrBuilder append(String str, int startIndex, int length) {\n                count[0]++;\n                return super.append(str, startIndex, length);\n            }\n            public StrBuilder appendNewLine() {\n                count[1]++;\n                return super.appendNewLine();\n            }\n        };\n        sb.appendln(\"foo\", 0, 3);\n        assertEquals(\"foo\" + SEP, sb.toString());\n        assertEquals(1, count[0]);\n        assertEquals(1, count[1]);\n    }",
        "begin_line": 505,
        "end_line": 521,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 506,col 9)-(line 506,col 39)",
            "(line 507,col 9)-(line 516,col 10)",
            "(line 517,col 9)-(line 517,col 33)",
            "(line 518,col 9)-(line 518,col 49)",
            "(line 519,col 9)-(line 519,col 34)",
            "(line 520,col 9)-(line 520,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.Anonymous-54f9d926-53bf-41fe-bbc7-25e336b8a4cf.append(java.lang.String, int, int)",
        "snippet": "            public StrBuilder append(String str, int startIndex, int length) {\n                count[0]++;\n                return super.append(str, startIndex, length);\n            }",
        "begin_line": 508,
        "end_line": 511,
        "comment": "",
        "child_ranges": [
            "(line 509,col 17)-(line 509,col 27)",
            "(line 510,col 17)-(line 510,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.Anonymous-f3703768-6d6b-4ac9-b185-5f3315d95f89.appendNewLine()",
        "snippet": "            public StrBuilder appendNewLine() {\n                count[1]++;\n                return super.appendNewLine();\n            }",
        "begin_line": 512,
        "end_line": 515,
        "comment": "",
        "child_ranges": [
            "(line 513,col 17)-(line 513,col 27)",
            "(line 514,col 17)-(line 514,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendln_StringBuffer()",
        "snippet": "    public void testAppendln_StringBuffer() {\n        final int[] count = new int[2];\n        StrBuilder sb = new StrBuilder() {\n            public StrBuilder append(StringBuffer str) {\n                count[0]++;\n                return super.append(str);\n            }\n            public StrBuilder appendNewLine() {\n                count[1]++;\n                return super.appendNewLine();\n            }\n        };\n        sb.appendln(new StringBuffer(\"foo\"));\n        assertEquals(\"foo\" + SEP, sb.toString());\n        assertEquals(1, count[0]);\n        assertEquals(1, count[1]);\n    }",
        "begin_line": 524,
        "end_line": 540,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 525,col 9)-(line 525,col 39)",
            "(line 526,col 9)-(line 535,col 10)",
            "(line 536,col 9)-(line 536,col 45)",
            "(line 537,col 9)-(line 537,col 49)",
            "(line 538,col 9)-(line 538,col 34)",
            "(line 539,col 9)-(line 539,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.Anonymous-2e81ad00-2f4b-405c-bcd7-c25509d0a73b.append(java.lang.StringBuffer)",
        "snippet": "            public StrBuilder append(StringBuffer str) {\n                count[0]++;\n                return super.append(str);\n            }",
        "begin_line": 527,
        "end_line": 530,
        "comment": "",
        "child_ranges": [
            "(line 528,col 17)-(line 528,col 27)",
            "(line 529,col 17)-(line 529,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.Anonymous-7e65d215-ee2c-400e-b67f-78855f2ca448.appendNewLine()",
        "snippet": "            public StrBuilder appendNewLine() {\n                count[1]++;\n                return super.appendNewLine();\n            }",
        "begin_line": 531,
        "end_line": 534,
        "comment": "",
        "child_ranges": [
            "(line 532,col 17)-(line 532,col 27)",
            "(line 533,col 17)-(line 533,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendln_StringBuffer_int_int()",
        "snippet": "    public void testAppendln_StringBuffer_int_int() {\n        final int[] count = new int[2];\n        StrBuilder sb = new StrBuilder() {\n            public StrBuilder append(StringBuffer str, int startIndex, int length) {\n                count[0]++;\n                return super.append(str, startIndex, length);\n            }\n            public StrBuilder appendNewLine() {\n                count[1]++;\n                return super.appendNewLine();\n            }\n        };\n        sb.appendln(new StringBuffer(\"foo\"), 0, 3);\n        assertEquals(\"foo\" + SEP, sb.toString());\n        assertEquals(1, count[0]);\n        assertEquals(1, count[1]);\n    }",
        "begin_line": 543,
        "end_line": 559,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 544,col 9)-(line 544,col 39)",
            "(line 545,col 9)-(line 554,col 10)",
            "(line 555,col 9)-(line 555,col 51)",
            "(line 556,col 9)-(line 556,col 49)",
            "(line 557,col 9)-(line 557,col 34)",
            "(line 558,col 9)-(line 558,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.Anonymous-eabcc243-195b-405f-b027-6f99a1ef33f7.append(java.lang.StringBuffer, int, int)",
        "snippet": "            public StrBuilder append(StringBuffer str, int startIndex, int length) {\n                count[0]++;\n                return super.append(str, startIndex, length);\n            }",
        "begin_line": 546,
        "end_line": 549,
        "comment": "",
        "child_ranges": [
            "(line 547,col 17)-(line 547,col 27)",
            "(line 548,col 17)-(line 548,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.Anonymous-2b395040-6f3e-4baa-a21f-cb13f52b2b1b.appendNewLine()",
        "snippet": "            public StrBuilder appendNewLine() {\n                count[1]++;\n                return super.appendNewLine();\n            }",
        "begin_line": 550,
        "end_line": 553,
        "comment": "",
        "child_ranges": [
            "(line 551,col 17)-(line 551,col 27)",
            "(line 552,col 17)-(line 552,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendln_StrBuilder()",
        "snippet": "    public void testAppendln_StrBuilder() {\n        final int[] count = new int[2];\n        StrBuilder sb = new StrBuilder() {\n            public StrBuilder append(StrBuilder str) {\n                count[0]++;\n                return super.append(str);\n            }\n            public StrBuilder appendNewLine() {\n                count[1]++;\n                return super.appendNewLine();\n            }\n        };\n        sb.appendln(new StrBuilder(\"foo\"));\n        assertEquals(\"foo\" + SEP, sb.toString());\n        assertEquals(1, count[0]);\n        assertEquals(1, count[1]);\n    }",
        "begin_line": 562,
        "end_line": 578,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 563,col 9)-(line 563,col 39)",
            "(line 564,col 9)-(line 573,col 10)",
            "(line 574,col 9)-(line 574,col 43)",
            "(line 575,col 9)-(line 575,col 49)",
            "(line 576,col 9)-(line 576,col 34)",
            "(line 577,col 9)-(line 577,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.Anonymous-82db2f60-eceb-43e8-872c-25b2d4ed9594.append(org.apache.commons.lang.text.StrBuilder)",
        "snippet": "            public StrBuilder append(StrBuilder str) {\n                count[0]++;\n                return super.append(str);\n            }",
        "begin_line": 565,
        "end_line": 568,
        "comment": "",
        "child_ranges": [
            "(line 566,col 17)-(line 566,col 27)",
            "(line 567,col 17)-(line 567,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.Anonymous-45e76f69-7c87-4946-9587-50e9e425113f.appendNewLine()",
        "snippet": "            public StrBuilder appendNewLine() {\n                count[1]++;\n                return super.appendNewLine();\n            }",
        "begin_line": 569,
        "end_line": 572,
        "comment": "",
        "child_ranges": [
            "(line 570,col 17)-(line 570,col 27)",
            "(line 571,col 17)-(line 571,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendln_StrBuilder_int_int()",
        "snippet": "    public void testAppendln_StrBuilder_int_int() {\n        final int[] count = new int[2];\n        StrBuilder sb = new StrBuilder() {\n            public StrBuilder append(StrBuilder str, int startIndex, int length) {\n                count[0]++;\n                return super.append(str, startIndex, length);\n            }\n            public StrBuilder appendNewLine() {\n                count[1]++;\n                return super.appendNewLine();\n            }\n        };\n        sb.appendln(new StrBuilder(\"foo\"), 0, 3);\n        assertEquals(\"foo\" + SEP, sb.toString());\n        assertEquals(1, count[0]);\n        assertEquals(1, count[1]);\n    }",
        "begin_line": 581,
        "end_line": 597,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 582,col 9)-(line 582,col 39)",
            "(line 583,col 9)-(line 592,col 10)",
            "(line 593,col 9)-(line 593,col 49)",
            "(line 594,col 9)-(line 594,col 49)",
            "(line 595,col 9)-(line 595,col 34)",
            "(line 596,col 9)-(line 596,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.Anonymous-ac705f02-63c5-4745-9743-a88e90e7d540.append(org.apache.commons.lang.text.StrBuilder, int, int)",
        "snippet": "            public StrBuilder append(StrBuilder str, int startIndex, int length) {\n                count[0]++;\n                return super.append(str, startIndex, length);\n            }",
        "begin_line": 584,
        "end_line": 587,
        "comment": "",
        "child_ranges": [
            "(line 585,col 17)-(line 585,col 27)",
            "(line 586,col 17)-(line 586,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.Anonymous-38bc5ab9-a098-4a95-8549-e10ceec042ea.appendNewLine()",
        "snippet": "            public StrBuilder appendNewLine() {\n                count[1]++;\n                return super.appendNewLine();\n            }",
        "begin_line": 588,
        "end_line": 591,
        "comment": "",
        "child_ranges": [
            "(line 589,col 17)-(line 589,col 27)",
            "(line 590,col 17)-(line 590,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendln_CharArray()",
        "snippet": "    public void testAppendln_CharArray() {\n        final int[] count = new int[2];\n        StrBuilder sb = new StrBuilder() {\n            public StrBuilder append(char[] str) {\n                count[0]++;\n                return super.append(str);\n            }\n            public StrBuilder appendNewLine() {\n                count[1]++;\n                return super.appendNewLine();\n            }\n        };\n        sb.appendln(\"foo\".toCharArray());\n        assertEquals(\"foo\" + SEP, sb.toString());\n        assertEquals(1, count[0]);\n        assertEquals(1, count[1]);\n    }",
        "begin_line": 600,
        "end_line": 616,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 601,col 9)-(line 601,col 39)",
            "(line 602,col 9)-(line 611,col 10)",
            "(line 612,col 9)-(line 612,col 41)",
            "(line 613,col 9)-(line 613,col 49)",
            "(line 614,col 9)-(line 614,col 34)",
            "(line 615,col 9)-(line 615,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.Anonymous-e1a0682a-b1a9-4f9d-a938-c6ecb66485aa.append(char[])",
        "snippet": "            public StrBuilder append(char[] str) {\n                count[0]++;\n                return super.append(str);\n            }",
        "begin_line": 603,
        "end_line": 606,
        "comment": "",
        "child_ranges": [
            "(line 604,col 17)-(line 604,col 27)",
            "(line 605,col 17)-(line 605,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.Anonymous-6d298d7d-d1c4-45ea-bb5e-c04ed457f04a.appendNewLine()",
        "snippet": "            public StrBuilder appendNewLine() {\n                count[1]++;\n                return super.appendNewLine();\n            }",
        "begin_line": 607,
        "end_line": 610,
        "comment": "",
        "child_ranges": [
            "(line 608,col 17)-(line 608,col 27)",
            "(line 609,col 17)-(line 609,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendln_CharArray_int_int()",
        "snippet": "    public void testAppendln_CharArray_int_int() {\n        final int[] count = new int[2];\n        StrBuilder sb = new StrBuilder() {\n            public StrBuilder append(char[] str, int startIndex, int length) {\n                count[0]++;\n                return super.append(str, startIndex, length);\n            }\n            public StrBuilder appendNewLine() {\n                count[1]++;\n                return super.appendNewLine();\n            }\n        };\n        sb.appendln(\"foo\".toCharArray(), 0, 3);\n        assertEquals(\"foo\" + SEP, sb.toString());\n        assertEquals(1, count[0]);\n        assertEquals(1, count[1]);\n    }",
        "begin_line": 619,
        "end_line": 635,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 620,col 9)-(line 620,col 39)",
            "(line 621,col 9)-(line 630,col 10)",
            "(line 631,col 9)-(line 631,col 47)",
            "(line 632,col 9)-(line 632,col 49)",
            "(line 633,col 9)-(line 633,col 34)",
            "(line 634,col 9)-(line 634,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.Anonymous-1e8d0a21-fef4-4063-9c7a-39c6193e8b66.append(char[], int, int)",
        "snippet": "            public StrBuilder append(char[] str, int startIndex, int length) {\n                count[0]++;\n                return super.append(str, startIndex, length);\n            }",
        "begin_line": 622,
        "end_line": 625,
        "comment": "",
        "child_ranges": [
            "(line 623,col 17)-(line 623,col 27)",
            "(line 624,col 17)-(line 624,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.Anonymous-cac3dd4b-9bfb-4294-9220-488dc85db575.appendNewLine()",
        "snippet": "            public StrBuilder appendNewLine() {\n                count[1]++;\n                return super.appendNewLine();\n            }",
        "begin_line": 626,
        "end_line": 629,
        "comment": "",
        "child_ranges": [
            "(line 627,col 17)-(line 627,col 27)",
            "(line 628,col 17)-(line 628,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendln_Boolean()",
        "snippet": "    public void testAppendln_Boolean() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendln(true);\n        assertEquals(\"true\" + SEP, sb.toString());\n        \n        sb.clear();\n        sb.appendln(false);\n        assertEquals(\"false\" + SEP, sb.toString());\n    }",
        "begin_line": 638,
        "end_line": 646,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 639,col 9)-(line 639,col 41)",
            "(line 640,col 9)-(line 640,col 26)",
            "(line 641,col 9)-(line 641,col 50)",
            "(line 643,col 9)-(line 643,col 19)",
            "(line 644,col 9)-(line 644,col 27)",
            "(line 645,col 9)-(line 645,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendln_PrimitiveNumber()",
        "snippet": "    public void testAppendln_PrimitiveNumber() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendln(0);\n        assertEquals(\"0\" + SEP, sb.toString());\n        \n        sb.clear();\n        sb.appendln(1L);\n        assertEquals(\"1\" + SEP, sb.toString());\n        \n        sb.clear();\n        sb.appendln(2.3f);\n        assertEquals(\"2.3\" + SEP, sb.toString());\n        \n        sb.clear();\n        sb.appendln(4.5d);\n        assertEquals(\"4.5\" + SEP, sb.toString());\n    }",
        "begin_line": 649,
        "end_line": 665,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 650,col 9)-(line 650,col 41)",
            "(line 651,col 9)-(line 651,col 23)",
            "(line 652,col 9)-(line 652,col 47)",
            "(line 654,col 9)-(line 654,col 19)",
            "(line 655,col 9)-(line 655,col 24)",
            "(line 656,col 9)-(line 656,col 47)",
            "(line 658,col 9)-(line 658,col 19)",
            "(line 659,col 9)-(line 659,col 26)",
            "(line 660,col 9)-(line 660,col 49)",
            "(line 662,col 9)-(line 662,col 19)",
            "(line 663,col 9)-(line 663,col 26)",
            "(line 664,col 9)-(line 664,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendPadding()",
        "snippet": "    public void testAppendPadding() {\n        StrBuilder sb = new StrBuilder();\n        sb.append(\"foo\");\n        assertEquals(\"foo\", sb.toString());\n\n        sb.appendPadding(-1, '-');\n        assertEquals(\"foo\", sb.toString());\n\n        sb.appendPadding(0, '-');\n        assertEquals(\"foo\", sb.toString());\n\n        sb.appendPadding(1, '-');\n        assertEquals(\"foo-\", sb.toString());\n\n        sb.appendPadding(16, '-');\n        assertEquals(20, sb.length());\n        //            12345678901234567890\n        assertEquals(\"foo-----------------\", sb.toString());\n    }",
        "begin_line": 668,
        "end_line": 686,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 669,col 9)-(line 669,col 41)",
            "(line 670,col 9)-(line 670,col 25)",
            "(line 671,col 9)-(line 671,col 43)",
            "(line 673,col 9)-(line 673,col 34)",
            "(line 674,col 9)-(line 674,col 43)",
            "(line 676,col 9)-(line 676,col 33)",
            "(line 677,col 9)-(line 677,col 43)",
            "(line 679,col 9)-(line 679,col 33)",
            "(line 680,col 9)-(line 680,col 44)",
            "(line 682,col 9)-(line 682,col 34)",
            "(line 683,col 9)-(line 683,col 38)",
            "(line 685,col 9)-(line 685,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadLeft()",
        "snippet": "    public void testAppendFixedWidthPadLeft() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendFixedWidthPadLeft(\"foo\", -1, '-');\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadLeft(\"foo\", 0, '-');\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadLeft(\"foo\", 1, '-');\n        assertEquals(\"o\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadLeft(\"foo\", 2, '-');\n        assertEquals(\"oo\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadLeft(\"foo\", 3, '-');\n        assertEquals(\"foo\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadLeft(\"foo\", 4, '-');\n        assertEquals(\"-foo\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadLeft(\"foo\", 10, '-');\n        assertEquals(10, sb.length());\n        //            1234567890\n        assertEquals(\"-------foo\", sb.toString());\n\n        sb.clear();\n        sb.setNullText(\"null\");\n        sb.appendFixedWidthPadLeft(null, 5, '-');\n        assertEquals(\"-null\", sb.toString());\n    }",
        "begin_line": 689,
        "end_line": 724,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 690,col 9)-(line 690,col 41)",
            "(line 691,col 9)-(line 691,col 51)",
            "(line 692,col 9)-(line 692,col 40)",
            "(line 694,col 9)-(line 694,col 19)",
            "(line 695,col 9)-(line 695,col 50)",
            "(line 696,col 9)-(line 696,col 40)",
            "(line 698,col 9)-(line 698,col 19)",
            "(line 699,col 9)-(line 699,col 50)",
            "(line 700,col 9)-(line 700,col 41)",
            "(line 702,col 9)-(line 702,col 19)",
            "(line 703,col 9)-(line 703,col 50)",
            "(line 704,col 9)-(line 704,col 42)",
            "(line 706,col 9)-(line 706,col 19)",
            "(line 707,col 9)-(line 707,col 50)",
            "(line 708,col 9)-(line 708,col 43)",
            "(line 710,col 9)-(line 710,col 19)",
            "(line 711,col 9)-(line 711,col 50)",
            "(line 712,col 9)-(line 712,col 44)",
            "(line 714,col 9)-(line 714,col 19)",
            "(line 715,col 9)-(line 715,col 51)",
            "(line 716,col 9)-(line 716,col 38)",
            "(line 718,col 9)-(line 718,col 50)",
            "(line 720,col 9)-(line 720,col 19)",
            "(line 721,col 9)-(line 721,col 31)",
            "(line 722,col 9)-(line 722,col 49)",
            "(line 723,col 9)-(line 723,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadLeft_int()",
        "snippet": "    public void testAppendFixedWidthPadLeft_int() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendFixedWidthPadLeft(123, -1, '-');\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadLeft(123, 0, '-');\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadLeft(123, 1, '-');\n        assertEquals(\"3\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadLeft(123, 2, '-');\n        assertEquals(\"23\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadLeft(123, 3, '-');\n        assertEquals(\"123\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadLeft(123, 4, '-');\n        assertEquals(\"-123\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadLeft(123, 10, '-');\n        assertEquals(10, sb.length());\n        //            1234567890\n        assertEquals(\"-------123\", sb.toString());\n    }",
        "begin_line": 727,
        "end_line": 757,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 728,col 9)-(line 728,col 41)",
            "(line 729,col 9)-(line 729,col 49)",
            "(line 730,col 9)-(line 730,col 40)",
            "(line 732,col 9)-(line 732,col 19)",
            "(line 733,col 9)-(line 733,col 48)",
            "(line 734,col 9)-(line 734,col 40)",
            "(line 736,col 9)-(line 736,col 19)",
            "(line 737,col 9)-(line 737,col 48)",
            "(line 738,col 9)-(line 738,col 41)",
            "(line 740,col 9)-(line 740,col 19)",
            "(line 741,col 9)-(line 741,col 48)",
            "(line 742,col 9)-(line 742,col 42)",
            "(line 744,col 9)-(line 744,col 19)",
            "(line 745,col 9)-(line 745,col 48)",
            "(line 746,col 9)-(line 746,col 43)",
            "(line 748,col 9)-(line 748,col 19)",
            "(line 749,col 9)-(line 749,col 48)",
            "(line 750,col 9)-(line 750,col 44)",
            "(line 752,col 9)-(line 752,col 19)",
            "(line 753,col 9)-(line 753,col 49)",
            "(line 754,col 9)-(line 754,col 38)",
            "(line 756,col 9)-(line 756,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadRight()",
        "snippet": "    public void testAppendFixedWidthPadRight() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendFixedWidthPadRight(\"foo\", -1, '-');\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadRight(\"foo\", 0, '-');\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadRight(\"foo\", 1, '-');\n        assertEquals(\"f\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadRight(\"foo\", 2, '-');\n        assertEquals(\"fo\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadRight(\"foo\", 3, '-');\n        assertEquals(\"foo\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadRight(\"foo\", 4, '-');\n        assertEquals(\"foo-\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadRight(\"foo\", 10, '-');\n        assertEquals(10, sb.length());\n        //            1234567890\n        assertEquals(\"foo-------\", sb.toString());\n\n        sb.clear();\n        sb.setNullText(\"null\");\n        sb.appendFixedWidthPadRight(null, 5, '-');\n        assertEquals(\"null-\", sb.toString());\n    }",
        "begin_line": 760,
        "end_line": 795,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 761,col 9)-(line 761,col 41)",
            "(line 762,col 9)-(line 762,col 52)",
            "(line 763,col 9)-(line 763,col 40)",
            "(line 765,col 9)-(line 765,col 19)",
            "(line 766,col 9)-(line 766,col 51)",
            "(line 767,col 9)-(line 767,col 40)",
            "(line 769,col 9)-(line 769,col 19)",
            "(line 770,col 9)-(line 770,col 51)",
            "(line 771,col 9)-(line 771,col 41)",
            "(line 773,col 9)-(line 773,col 19)",
            "(line 774,col 9)-(line 774,col 51)",
            "(line 775,col 9)-(line 775,col 42)",
            "(line 777,col 9)-(line 777,col 19)",
            "(line 778,col 9)-(line 778,col 51)",
            "(line 779,col 9)-(line 779,col 43)",
            "(line 781,col 9)-(line 781,col 19)",
            "(line 782,col 9)-(line 782,col 51)",
            "(line 783,col 9)-(line 783,col 44)",
            "(line 785,col 9)-(line 785,col 19)",
            "(line 786,col 9)-(line 786,col 52)",
            "(line 787,col 9)-(line 787,col 38)",
            "(line 789,col 9)-(line 789,col 50)",
            "(line 791,col 9)-(line 791,col 19)",
            "(line 792,col 9)-(line 792,col 31)",
            "(line 793,col 9)-(line 793,col 50)",
            "(line 794,col 9)-(line 794,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testLang299()",
        "snippet": "    public void testLang299() {\n        StrBuilder sb = new StrBuilder(1);\n        sb.appendFixedWidthPadRight(\"foo\", 1, '-');\n        assertEquals(\"f\", sb.toString());\n    }",
        "begin_line": 798,
        "end_line": 802,
        "comment": " See: http://issues.apache.org/jira/browse/LANG-299",
        "child_ranges": [
            "(line 799,col 9)-(line 799,col 42)",
            "(line 800,col 9)-(line 800,col 51)",
            "(line 801,col 9)-(line 801,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadRight_int()",
        "snippet": "    public void testAppendFixedWidthPadRight_int() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendFixedWidthPadRight(123, -1, '-');\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadRight(123, 0, '-');\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadRight(123, 1, '-');\n        assertEquals(\"1\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadRight(123, 2, '-');\n        assertEquals(\"12\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadRight(123, 3, '-');\n        assertEquals(\"123\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadRight(123, 4, '-');\n        assertEquals(\"123-\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadRight(123, 10, '-');\n        assertEquals(10, sb.length());\n        //            1234567890\n        assertEquals(\"123-------\", sb.toString());\n    }",
        "begin_line": 805,
        "end_line": 835,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 806,col 9)-(line 806,col 41)",
            "(line 807,col 9)-(line 807,col 50)",
            "(line 808,col 9)-(line 808,col 40)",
            "(line 810,col 9)-(line 810,col 19)",
            "(line 811,col 9)-(line 811,col 49)",
            "(line 812,col 9)-(line 812,col 40)",
            "(line 814,col 9)-(line 814,col 19)",
            "(line 815,col 9)-(line 815,col 49)",
            "(line 816,col 9)-(line 816,col 41)",
            "(line 818,col 9)-(line 818,col 19)",
            "(line 819,col 9)-(line 819,col 49)",
            "(line 820,col 9)-(line 820,col 42)",
            "(line 822,col 9)-(line 822,col 19)",
            "(line 823,col 9)-(line 823,col 49)",
            "(line 824,col 9)-(line 824,col 43)",
            "(line 826,col 9)-(line 826,col 19)",
            "(line 827,col 9)-(line 827,col 49)",
            "(line 828,col 9)-(line 828,col 44)",
            "(line 830,col 9)-(line 830,col 19)",
            "(line 831,col 9)-(line 831,col 50)",
            "(line 832,col 9)-(line 832,col 38)",
            "(line 834,col 9)-(line 834,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendAll_Array()",
        "snippet": "    public void testAppendAll_Array() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendAll((Object[]) null);\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendAll(new Object[0]);\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendAll(new Object[]{\"foo\", \"bar\", \"baz\"});\n        assertEquals(\"foobarbaz\", sb.toString());\n    }",
        "begin_line": 838,
        "end_line": 850,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 839,col 9)-(line 839,col 41)",
            "(line 840,col 9)-(line 840,col 38)",
            "(line 841,col 9)-(line 841,col 40)",
            "(line 843,col 9)-(line 843,col 19)",
            "(line 844,col 9)-(line 844,col 36)",
            "(line 845,col 9)-(line 845,col 40)",
            "(line 847,col 9)-(line 847,col 19)",
            "(line 848,col 9)-(line 848,col 56)",
            "(line 849,col 9)-(line 849,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendAll_Collection()",
        "snippet": "    public void testAppendAll_Collection() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendAll((Collection) null);\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendAll(Collections.EMPTY_LIST);\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendAll(Arrays.asList(new Object[]{\"foo\", \"bar\", \"baz\"}));\n        assertEquals(\"foobarbaz\", sb.toString());\n    }",
        "begin_line": 853,
        "end_line": 865,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 854,col 9)-(line 854,col 41)",
            "(line 855,col 9)-(line 855,col 40)",
            "(line 856,col 9)-(line 856,col 40)",
            "(line 858,col 9)-(line 858,col 19)",
            "(line 859,col 9)-(line 859,col 45)",
            "(line 860,col 9)-(line 860,col 40)",
            "(line 862,col 9)-(line 862,col 19)",
            "(line 863,col 9)-(line 863,col 71)",
            "(line 864,col 9)-(line 864,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendAll_Iterator()",
        "snippet": "    public void testAppendAll_Iterator() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendAll((Iterator) null);\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendAll(Collections.EMPTY_LIST.iterator());\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendAll(Arrays.asList(new Object[]{\"foo\", \"bar\", \"baz\"}).iterator());\n        assertEquals(\"foobarbaz\", sb.toString());\n    }",
        "begin_line": 868,
        "end_line": 880,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 869,col 9)-(line 869,col 41)",
            "(line 870,col 9)-(line 870,col 38)",
            "(line 871,col 9)-(line 871,col 40)",
            "(line 873,col 9)-(line 873,col 19)",
            "(line 874,col 9)-(line 874,col 56)",
            "(line 875,col 9)-(line 875,col 40)",
            "(line 877,col 9)-(line 877,col 19)",
            "(line 878,col 9)-(line 878,col 82)",
            "(line 879,col 9)-(line 879,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Array()",
        "snippet": "    public void testAppendWithSeparators_Array() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendWithSeparators((Object[]) null, \",\");\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendWithSeparators(new Object[0], \",\");\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendWithSeparators(new Object[]{\"foo\", \"bar\", \"baz\"}, \",\");\n        assertEquals(\"foo,bar,baz\", sb.toString());\n\n        sb.clear();\n        sb.appendWithSeparators(new Object[]{\"foo\", \"bar\", \"baz\"}, null);\n        assertEquals(\"foobarbaz\", sb.toString());\n\n        sb.clear();\n        sb.appendWithSeparators(new Object[]{\"foo\", null, \"baz\"}, \",\");\n        assertEquals(\"foo,,baz\", sb.toString());\n    }",
        "begin_line": 883,
        "end_line": 903,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 884,col 9)-(line 884,col 41)",
            "(line 885,col 9)-(line 885,col 54)",
            "(line 886,col 9)-(line 886,col 40)",
            "(line 888,col 9)-(line 888,col 19)",
            "(line 889,col 9)-(line 889,col 52)",
            "(line 890,col 9)-(line 890,col 40)",
            "(line 892,col 9)-(line 892,col 19)",
            "(line 893,col 9)-(line 893,col 72)",
            "(line 894,col 9)-(line 894,col 51)",
            "(line 896,col 9)-(line 896,col 19)",
            "(line 897,col 9)-(line 897,col 73)",
            "(line 898,col 9)-(line 898,col 49)",
            "(line 900,col 9)-(line 900,col 19)",
            "(line 901,col 9)-(line 901,col 71)",
            "(line 902,col 9)-(line 902,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Collection()",
        "snippet": "    public void testAppendWithSeparators_Collection() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendWithSeparators((Collection) null, \",\");\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendWithSeparators(Collections.EMPTY_LIST, \",\");\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", \"bar\", \"baz\"}), \",\");\n        assertEquals(\"foo,bar,baz\", sb.toString());\n\n        sb.clear();\n        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", \"bar\", \"baz\"}), null);\n        assertEquals(\"foobarbaz\", sb.toString());\n\n        sb.clear();\n        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", null, \"baz\"}), \",\");\n        assertEquals(\"foo,,baz\", sb.toString());\n    }",
        "begin_line": 906,
        "end_line": 926,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 907,col 9)-(line 907,col 41)",
            "(line 908,col 9)-(line 908,col 56)",
            "(line 909,col 9)-(line 909,col 40)",
            "(line 911,col 9)-(line 911,col 19)",
            "(line 912,col 9)-(line 912,col 61)",
            "(line 913,col 9)-(line 913,col 40)",
            "(line 915,col 9)-(line 915,col 19)",
            "(line 916,col 9)-(line 916,col 87)",
            "(line 917,col 9)-(line 917,col 51)",
            "(line 919,col 9)-(line 919,col 19)",
            "(line 920,col 9)-(line 920,col 88)",
            "(line 921,col 9)-(line 921,col 49)",
            "(line 923,col 9)-(line 923,col 19)",
            "(line 924,col 9)-(line 924,col 86)",
            "(line 925,col 9)-(line 925,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Iterator()",
        "snippet": "    public void testAppendWithSeparators_Iterator() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendWithSeparators((Iterator) null, \",\");\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendWithSeparators(Collections.EMPTY_LIST.iterator(), \",\");\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", \"bar\", \"baz\"}).iterator(), \",\");\n        assertEquals(\"foo,bar,baz\", sb.toString());\n\n        sb.clear();\n        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", \"bar\", \"baz\"}).iterator(), null);\n        assertEquals(\"foobarbaz\", sb.toString());\n\n        sb.clear();\n        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", null, \"baz\"}).iterator(), \",\");\n        assertEquals(\"foo,,baz\", sb.toString());\n    }",
        "begin_line": 929,
        "end_line": 949,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 930,col 9)-(line 930,col 41)",
            "(line 931,col 9)-(line 931,col 54)",
            "(line 932,col 9)-(line 932,col 40)",
            "(line 934,col 9)-(line 934,col 19)",
            "(line 935,col 9)-(line 935,col 72)",
            "(line 936,col 9)-(line 936,col 40)",
            "(line 938,col 9)-(line 938,col 19)",
            "(line 939,col 9)-(line 939,col 98)",
            "(line 940,col 9)-(line 940,col 51)",
            "(line 942,col 9)-(line 942,col 19)",
            "(line 943,col 9)-(line 943,col 99)",
            "(line 944,col 9)-(line 944,col 49)",
            "(line 946,col 9)-(line 946,col 19)",
            "(line 947,col 9)-(line 947,col 97)",
            "(line 948,col 9)-(line 948,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendWithSeparatorsWithNullText()",
        "snippet": "    public void testAppendWithSeparatorsWithNullText() {\n        StrBuilder sb = new StrBuilder();\n        sb.setNullText(\"null\");\n        sb.appendWithSeparators(new Object[]{\"foo\", null, \"baz\"}, \",\");\n        assertEquals(\"foo,null,baz\", sb.toString());\n\n        sb.clear();\n        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", null, \"baz\"}), \",\");\n        assertEquals(\"foo,null,baz\", sb.toString());\n    }",
        "begin_line": 952,
        "end_line": 961,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 953,col 9)-(line 953,col 41)",
            "(line 954,col 9)-(line 954,col 31)",
            "(line 955,col 9)-(line 955,col 71)",
            "(line 956,col 9)-(line 956,col 52)",
            "(line 958,col 9)-(line 958,col 19)",
            "(line 959,col 9)-(line 959,col 86)",
            "(line 960,col 9)-(line 960,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendSeparator_String()",
        "snippet": "    public void testAppendSeparator_String() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendSeparator(\",\");  // no effect\n        assertEquals(\"\", sb.toString());\n        sb.append(\"foo\");\n        assertEquals(\"foo\", sb.toString());\n        sb.appendSeparator(\",\");\n        assertEquals(\"foo,\", sb.toString());\n    }",
        "begin_line": 964,
        "end_line": 972,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 965,col 9)-(line 965,col 41)",
            "(line 966,col 9)-(line 966,col 32)",
            "(line 967,col 9)-(line 967,col 40)",
            "(line 968,col 9)-(line 968,col 25)",
            "(line 969,col 9)-(line 969,col 43)",
            "(line 970,col 9)-(line 970,col 32)",
            "(line 971,col 9)-(line 971,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendSeparator_char()",
        "snippet": "    public void testAppendSeparator_char() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendSeparator(',');  // no effect\n        assertEquals(\"\", sb.toString());\n        sb.append(\"foo\");\n        assertEquals(\"foo\", sb.toString());\n        sb.appendSeparator(',');\n        assertEquals(\"foo,\", sb.toString());\n    }",
        "begin_line": 975,
        "end_line": 983,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 976,col 9)-(line 976,col 41)",
            "(line 977,col 9)-(line 977,col 32)",
            "(line 978,col 9)-(line 978,col 40)",
            "(line 979,col 9)-(line 979,col 25)",
            "(line 980,col 9)-(line 980,col 43)",
            "(line 981,col 9)-(line 981,col 32)",
            "(line 982,col 9)-(line 982,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendSeparator_String_int()",
        "snippet": "    public void testAppendSeparator_String_int() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendSeparator(\",\", 0);  // no effect\n        assertEquals(\"\", sb.toString());\n        sb.append(\"foo\");\n        assertEquals(\"foo\", sb.toString());\n        sb.appendSeparator(\",\", 1);\n        assertEquals(\"foo,\", sb.toString());\n        \n        sb.appendSeparator(\",\", -1);  // no effect\n        assertEquals(\"foo,\", sb.toString());\n    }",
        "begin_line": 986,
        "end_line": 997,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 987,col 9)-(line 987,col 41)",
            "(line 988,col 9)-(line 988,col 35)",
            "(line 989,col 9)-(line 989,col 40)",
            "(line 990,col 9)-(line 990,col 25)",
            "(line 991,col 9)-(line 991,col 43)",
            "(line 992,col 9)-(line 992,col 35)",
            "(line 993,col 9)-(line 993,col 44)",
            "(line 995,col 9)-(line 995,col 36)",
            "(line 996,col 9)-(line 996,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendSeparator_char_int()",
        "snippet": "    public void testAppendSeparator_char_int() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendSeparator(',', 0);  // no effect\n        assertEquals(\"\", sb.toString());\n        sb.append(\"foo\");\n        assertEquals(\"foo\", sb.toString());\n        sb.appendSeparator(',', 1);\n        assertEquals(\"foo,\", sb.toString());\n        \n        sb.appendSeparator(',', -1);  // no effect\n        assertEquals(\"foo,\", sb.toString());\n    }",
        "begin_line": 1000,
        "end_line": 1011,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1001,col 9)-(line 1001,col 41)",
            "(line 1002,col 9)-(line 1002,col 35)",
            "(line 1003,col 9)-(line 1003,col 40)",
            "(line 1004,col 9)-(line 1004,col 25)",
            "(line 1005,col 9)-(line 1005,col 43)",
            "(line 1006,col 9)-(line 1006,col 35)",
            "(line 1007,col 9)-(line 1007,col 44)",
            "(line 1009,col 9)-(line 1009,col 36)",
            "(line 1010,col 9)-(line 1010,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testInsert()",
        "snippet": "    public void testInsert() {\n\n        StrBuilder sb = new StrBuilder();\n        sb.append(\"barbaz\");\n        assertEquals(\"barbaz\", sb.toString());\n\n        try {\n            sb.insert(-1, FOO);\n            fail(\"insert(-1, Object) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(7, FOO);\n            fail(\"insert(7, Object) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.insert(0, (Object) null);\n        assertEquals(\"barbaz\", sb.toString());\n\n        sb.insert(0, FOO);\n        assertEquals(\"foobarbaz\", sb.toString());\n\n        sb.clear();\n        sb.append(\"barbaz\");\n        assertEquals(\"barbaz\", sb.toString());\n\n        try {\n            sb.insert(-1, \"foo\");\n            fail(\"insert(-1, String) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(7, \"foo\");\n            fail(\"insert(7, String) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.insert(0, (String) null);\n        assertEquals(\"barbaz\", sb.toString());\n\n        sb.insert(0, \"foo\");\n        assertEquals(\"foobarbaz\", sb.toString());\n\n        sb.clear();\n        sb.append(\"barbaz\");\n        assertEquals(\"barbaz\", sb.toString());\n\n        try {\n            sb.insert(-1, new char[]{'f', 'o', 'o'});\n            fail(\"insert(-1, char[]) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(7, new char[]{'f', 'o', 'o'});\n            fail(\"insert(7, char[]) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.insert(0, (char[]) null);\n        assertEquals(\"barbaz\", sb.toString());\n\n        sb.insert(0, new char[0]);\n        assertEquals(\"barbaz\", sb.toString());\n\n        sb.insert(0, new char[]{'f', 'o', 'o'});\n        assertEquals(\"foobarbaz\", sb.toString());\n\n        sb.clear();\n        sb.append(\"barbaz\");\n        assertEquals(\"barbaz\", sb.toString());\n\n        try {\n            sb.insert(-1, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3);\n            fail(\"insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(7, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3);\n            fail(\"insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.insert(0, (char[]) null, 0, 0);\n        assertEquals(\"barbaz\", sb.toString());\n\n        sb.insert(0, new char[0], 0, 0);\n        assertEquals(\"barbaz\", sb.toString());\n\n        try {\n            sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, -1, 3);\n            fail(\"insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 10, 3);\n            fail(\"insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, -1);\n            fail(\"insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 10);\n            fail(\"insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 0);\n        assertEquals(\"barbaz\", sb.toString());\n\n        sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3);\n        assertEquals(\"foobarbaz\", sb.toString());\n\n        sb.clear();\n        sb.append(\"barbaz\");\n        assertEquals(\"barbaz\", sb.toString());\n\n        try {\n            sb.insert(-1, true);\n            fail(\"insert(-1, boolean) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(7, true);\n            fail(\"insert(7, boolean) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.insert(0, true);\n        assertEquals(\"truebarbaz\", sb.toString());\n\n        sb.insert(0, false);\n        assertEquals(\"falsetruebarbaz\", sb.toString());\n\n        sb.clear();\n        sb.append(\"barbaz\");\n        assertEquals(\"barbaz\", sb.toString());\n\n        try {\n            sb.insert(-1, '!');\n            fail(\"insert(-1, char) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(7, '!');\n            fail(\"insert(7, char) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.insert(0, '!');\n        assertEquals(\"!barbaz\", sb.toString());\n\n        sb.clear();\n        sb.append(\"barbaz\");\n        assertEquals(\"barbaz\", sb.toString());\n\n        try {\n            sb.insert(-1, 0);\n            fail(\"insert(-1, int) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(7, 0);\n            fail(\"insert(7, int) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.insert(0, '0');\n        assertEquals(\"0barbaz\", sb.toString());\n\n        sb.clear();\n        sb.append(\"barbaz\");\n        assertEquals(\"barbaz\", sb.toString());\n\n        try {\n            sb.insert(-1, 1L);\n            fail(\"insert(-1, long) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(7, 1L);\n            fail(\"insert(7, long) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.insert(0, 1L);\n        assertEquals(\"1barbaz\", sb.toString());\n\n        sb.clear();\n        sb.append(\"barbaz\");\n        assertEquals(\"barbaz\", sb.toString());\n\n        try {\n            sb.insert(-1, 2.3F);\n            fail(\"insert(-1, float) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(7, 2.3F);\n            fail(\"insert(7, float) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.insert(0, 2.3F);\n        assertEquals(\"2.3barbaz\", sb.toString());\n\n        sb.clear();\n        sb.append(\"barbaz\");\n        assertEquals(\"barbaz\", sb.toString());\n\n        try {\n            sb.insert(-1, 4.5D);\n            fail(\"insert(-1, double) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(7, 4.5D);\n            fail(\"insert(7, double) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.insert(0, 4.5D);\n        assertEquals(\"4.5barbaz\", sb.toString());\n    }",
        "begin_line": 1014,
        "end_line": 1277,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1016,col 9)-(line 1016,col 41)",
            "(line 1017,col 9)-(line 1017,col 28)",
            "(line 1018,col 9)-(line 1018,col 46)",
            "(line 1020,col 9)-(line 1025,col 9)",
            "(line 1027,col 9)-(line 1032,col 9)",
            "(line 1034,col 9)-(line 1034,col 36)",
            "(line 1035,col 9)-(line 1035,col 46)",
            "(line 1037,col 9)-(line 1037,col 26)",
            "(line 1038,col 9)-(line 1038,col 49)",
            "(line 1040,col 9)-(line 1040,col 19)",
            "(line 1041,col 9)-(line 1041,col 28)",
            "(line 1042,col 9)-(line 1042,col 46)",
            "(line 1044,col 9)-(line 1049,col 9)",
            "(line 1051,col 9)-(line 1056,col 9)",
            "(line 1058,col 9)-(line 1058,col 36)",
            "(line 1059,col 9)-(line 1059,col 46)",
            "(line 1061,col 9)-(line 1061,col 28)",
            "(line 1062,col 9)-(line 1062,col 49)",
            "(line 1064,col 9)-(line 1064,col 19)",
            "(line 1065,col 9)-(line 1065,col 28)",
            "(line 1066,col 9)-(line 1066,col 46)",
            "(line 1068,col 9)-(line 1073,col 9)",
            "(line 1075,col 9)-(line 1080,col 9)",
            "(line 1082,col 9)-(line 1082,col 36)",
            "(line 1083,col 9)-(line 1083,col 46)",
            "(line 1085,col 9)-(line 1085,col 34)",
            "(line 1086,col 9)-(line 1086,col 46)",
            "(line 1088,col 9)-(line 1088,col 48)",
            "(line 1089,col 9)-(line 1089,col 49)",
            "(line 1091,col 9)-(line 1091,col 19)",
            "(line 1092,col 9)-(line 1092,col 28)",
            "(line 1093,col 9)-(line 1093,col 46)",
            "(line 1095,col 9)-(line 1100,col 9)",
            "(line 1102,col 9)-(line 1107,col 9)",
            "(line 1109,col 9)-(line 1109,col 42)",
            "(line 1110,col 9)-(line 1110,col 46)",
            "(line 1112,col 9)-(line 1112,col 40)",
            "(line 1113,col 9)-(line 1113,col 46)",
            "(line 1115,col 9)-(line 1120,col 9)",
            "(line 1122,col 9)-(line 1127,col 9)",
            "(line 1129,col 9)-(line 1134,col 9)",
            "(line 1136,col 9)-(line 1141,col 9)",
            "(line 1143,col 9)-(line 1143,col 84)",
            "(line 1144,col 9)-(line 1144,col 46)",
            "(line 1146,col 9)-(line 1146,col 84)",
            "(line 1147,col 9)-(line 1147,col 49)",
            "(line 1149,col 9)-(line 1149,col 19)",
            "(line 1150,col 9)-(line 1150,col 28)",
            "(line 1151,col 9)-(line 1151,col 46)",
            "(line 1153,col 9)-(line 1158,col 9)",
            "(line 1160,col 9)-(line 1165,col 9)",
            "(line 1167,col 9)-(line 1167,col 27)",
            "(line 1168,col 9)-(line 1168,col 50)",
            "(line 1170,col 9)-(line 1170,col 28)",
            "(line 1171,col 9)-(line 1171,col 55)",
            "(line 1173,col 9)-(line 1173,col 19)",
            "(line 1174,col 9)-(line 1174,col 28)",
            "(line 1175,col 9)-(line 1175,col 46)",
            "(line 1177,col 9)-(line 1182,col 9)",
            "(line 1184,col 9)-(line 1189,col 9)",
            "(line 1191,col 9)-(line 1191,col 26)",
            "(line 1192,col 9)-(line 1192,col 47)",
            "(line 1194,col 9)-(line 1194,col 19)",
            "(line 1195,col 9)-(line 1195,col 28)",
            "(line 1196,col 9)-(line 1196,col 46)",
            "(line 1198,col 9)-(line 1203,col 9)",
            "(line 1205,col 9)-(line 1210,col 9)",
            "(line 1212,col 9)-(line 1212,col 26)",
            "(line 1213,col 9)-(line 1213,col 47)",
            "(line 1215,col 9)-(line 1215,col 19)",
            "(line 1216,col 9)-(line 1216,col 28)",
            "(line 1217,col 9)-(line 1217,col 46)",
            "(line 1219,col 9)-(line 1224,col 9)",
            "(line 1226,col 9)-(line 1231,col 9)",
            "(line 1233,col 9)-(line 1233,col 25)",
            "(line 1234,col 9)-(line 1234,col 47)",
            "(line 1236,col 9)-(line 1236,col 19)",
            "(line 1237,col 9)-(line 1237,col 28)",
            "(line 1238,col 9)-(line 1238,col 46)",
            "(line 1240,col 9)-(line 1245,col 9)",
            "(line 1247,col 9)-(line 1252,col 9)",
            "(line 1254,col 9)-(line 1254,col 27)",
            "(line 1255,col 9)-(line 1255,col 49)",
            "(line 1257,col 9)-(line 1257,col 19)",
            "(line 1258,col 9)-(line 1258,col 28)",
            "(line 1259,col 9)-(line 1259,col 46)",
            "(line 1261,col 9)-(line 1266,col 9)",
            "(line 1268,col 9)-(line 1273,col 9)",
            "(line 1275,col 9)-(line 1275,col 27)",
            "(line 1276,col 9)-(line 1276,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderAppendInsertTest.testInsertWithNullText()",
        "snippet": "    public void testInsertWithNullText() {\n        StrBuilder sb = new StrBuilder();\n        sb.setNullText(\"null\");\n        sb.append(\"barbaz\");\n        assertEquals(\"barbaz\", sb.toString());\n\n        try {\n            sb.insert(-1, FOO);\n            fail(\"insert(-1, Object) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(7, FOO);\n            fail(\"insert(7, Object) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.insert(0, (Object) null);\n        assertEquals(\"nullbarbaz\", sb.toString());\n\n        sb.insert(0, FOO);\n        assertEquals(\"foonullbarbaz\", sb.toString());\n\n        sb.clear();\n        sb.append(\"barbaz\");\n        assertEquals(\"barbaz\", sb.toString());\n\n        try {\n            sb.insert(-1, \"foo\");\n            fail(\"insert(-1, String) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(7, \"foo\");\n            fail(\"insert(7, String) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.insert(0, (String) null);\n        assertEquals(\"nullbarbaz\", sb.toString());\n\n        sb.insert(0, \"foo\");\n        assertEquals(\"foonullbarbaz\", sb.toString());\n\n        sb.insert(0, (char[]) null);\n        assertEquals(\"nullfoonullbarbaz\", sb.toString());\n\n        sb.insert(0, (char[]) null, 0, 0);\n        assertEquals(\"nullnullfoonullbarbaz\", sb.toString());\n    }",
        "begin_line": 1280,
        "end_line": 1335,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1281,col 9)-(line 1281,col 41)",
            "(line 1282,col 9)-(line 1282,col 31)",
            "(line 1283,col 9)-(line 1283,col 28)",
            "(line 1284,col 9)-(line 1284,col 46)",
            "(line 1286,col 9)-(line 1291,col 9)",
            "(line 1293,col 9)-(line 1298,col 9)",
            "(line 1300,col 9)-(line 1300,col 36)",
            "(line 1301,col 9)-(line 1301,col 50)",
            "(line 1303,col 9)-(line 1303,col 26)",
            "(line 1304,col 9)-(line 1304,col 53)",
            "(line 1306,col 9)-(line 1306,col 19)",
            "(line 1307,col 9)-(line 1307,col 28)",
            "(line 1308,col 9)-(line 1308,col 46)",
            "(line 1310,col 9)-(line 1315,col 9)",
            "(line 1317,col 9)-(line 1322,col 9)",
            "(line 1324,col 9)-(line 1324,col 36)",
            "(line 1325,col 9)-(line 1325,col 50)",
            "(line 1327,col 9)-(line 1327,col 28)",
            "(line 1328,col 9)-(line 1328,col 53)",
            "(line 1330,col 9)-(line 1330,col 36)",
            "(line 1331,col 9)-(line 1331,col 57)",
            "(line 1333,col 9)-(line 1333,col 42)",
            "(line 1334,col 9)-(line 1334,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java",
        "signature": "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest.US.getLocale()",
        "snippet": "        protected Locale getLocale() {\n            return Locale.US;\n        }",
        "begin_line": 41,
        "end_line": 43,
        "comment": "\n         * {@inheritDoc}\n         ",
        "child_ranges": [
            "(line 42,col 13)-(line 42,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java",
        "signature": "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest.UK.getLocale()",
        "snippet": "        protected Locale getLocale() {\n            return Locale.UK;\n        }",
        "begin_line": 55,
        "end_line": 57,
        "comment": "\n         * {@inheritDoc}\n         ",
        "child_ranges": [
            "(line 56,col 13)-(line 56,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java",
        "signature": "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest.DE.getLocale()",
        "snippet": "        protected Locale getLocale() {\n            return Locale.GERMANY;\n        }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n         * {@inheritDoc}\n         ",
        "child_ranges": [
            "(line 70,col 13)-(line 70,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java",
        "signature": "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest.IT.getLocale()",
        "snippet": "        protected Locale getLocale() {\n            return Locale.ITALY;\n        }",
        "begin_line": 83,
        "end_line": 85,
        "comment": "\n         * {@inheritDoc}\n         ",
        "child_ranges": [
            "(line 84,col 13)-(line 84,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java",
        "signature": "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest.JP.getLocale()",
        "snippet": "        protected Locale getLocale() {\n            return Locale.JAPAN;\n        }",
        "begin_line": 97,
        "end_line": 99,
        "comment": "\n         * {@inheritDoc}\n         ",
        "child_ranges": [
            "(line 98,col 13)-(line 98,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java",
        "signature": "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest.CN.getLocale()",
        "snippet": "        protected Locale getLocale() {\n            return Locale.CHINA;\n        }",
        "begin_line": 111,
        "end_line": 113,
        "comment": "\n         * {@inheritDoc}\n         ",
        "child_ranges": [
            "(line 112,col 13)-(line 112,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java",
        "signature": "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest.CA.getLocale()",
        "snippet": "        protected Locale getLocale() {\n            return Locale.CANADA;\n        }",
        "begin_line": 125,
        "end_line": 127,
        "comment": "\n         * {@inheritDoc}\n         ",
        "child_ranges": [
            "(line 126,col 13)-(line 126,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java",
        "signature": "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest.FR.getLocale()",
        "snippet": "        protected Locale getLocale() {\n            return Locale.FRANCE;\n        }",
        "begin_line": 139,
        "end_line": 141,
        "comment": "\n         * {@inheritDoc}\n         ",
        "child_ranges": [
            "(line 140,col 13)-(line 140,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java",
        "signature": "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest.KR.getLocale()",
        "snippet": "        protected Locale getLocale() {\n            return Locale.KOREA;\n        }",
        "begin_line": 153,
        "end_line": 155,
        "comment": "\n         * {@inheritDoc}\n         ",
        "child_ranges": [
            "(line 154,col 13)-(line 154,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java",
        "signature": "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest.TW.getLocale()",
        "snippet": "        protected Locale getLocale() {\n            return Locale.TAIWAN;\n        }",
        "begin_line": 167,
        "end_line": 169,
        "comment": "\n         * {@inheritDoc}\n         ",
        "child_ranges": [
            "(line 168,col 13)-(line 168,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java",
        "signature": "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest.createMessageFormat(java.lang.String, java.util.Locale)",
        "snippet": "    protected MessageFormat createMessageFormat(String pattern, Locale locale) {\n        return new ExtendedMessageFormat(pattern, locale, ExtendedMessageFormat\n                .createDefaultMetaFormat(locale));\n    }",
        "begin_line": 175,
        "end_line": 178,
        "comment": "\n     * {@inheritDoc}\n     ",
        "child_ranges": [
            "(line 176,col 9)-(line 177,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.TextTestSuite",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/TextTestSuite.java",
        "signature": "org.apache.commons.lang.text.TextTestSuite.TextTestSuite(java.lang.String)",
        "snippet": "    public TextTestSuite(String name) {\n        super(name);\n    }",
        "begin_line": 35,
        "end_line": 37,
        "comment": "\n     * Construct a new instance.\n     ",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.TextTestSuite",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/TextTestSuite.java",
        "signature": "org.apache.commons.lang.text.TextTestSuite.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 42,
        "end_line": 44,
        "comment": "\n     * Command-line interface.\n     ",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.TextTestSuite",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/TextTestSuite.java",
        "signature": "org.apache.commons.lang.text.TextTestSuite.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite();\n        suite.setName(\"Commons-Lang-Text Tests\");\n        suite.addTest(CompositeFormatTest.suite());\n        suite.addTest(StrBuilderTest.suite());\n        suite.addTest(StrBuilderAppendInsertTest.suite());\n        suite.addTest(StrLookupTest.suite());\n        suite.addTest(StrMatcherTest.suite());\n        suite.addTest(StrSubstitutorTest.suite());\n        suite.addTest(StrTokenizerTest.suite());\n        suite.addTestSuite(MultiFormatTest.class);\n        suite.addTestSuite(MessageFormatTest.US.class);\n        suite.addTestSuite(MessageFormatTest.UK.class);\n        suite.addTestSuite(MessageFormatTest.DE.class);\n        suite.addTestSuite(MessageFormatTest.IT.class);\n        suite.addTestSuite(MessageFormatTest.JP.class);\n        suite.addTestSuite(MessageFormatTest.CA.class);\n        suite.addTestSuite(MessageFormatTest.CN.class);\n        suite.addTestSuite(MessageFormatTest.FR.class);\n        suite.addTestSuite(MessageFormatTest.KR.class);\n        suite.addTestSuite(MessageFormatTest.TW.class);\n        suite.addTestSuite(ExtendedMessageFormatBaselineTest.US.class);\n        suite.addTestSuite(ExtendedMessageFormatBaselineTest.UK.class);\n        suite.addTestSuite(ExtendedMessageFormatBaselineTest.DE.class);\n        suite.addTestSuite(ExtendedMessageFormatBaselineTest.IT.class);\n        suite.addTestSuite(ExtendedMessageFormatBaselineTest.JP.class);\n        suite.addTestSuite(ExtendedMessageFormatBaselineTest.CA.class);\n        suite.addTestSuite(ExtendedMessageFormatBaselineTest.CN.class);\n        suite.addTestSuite(ExtendedMessageFormatBaselineTest.FR.class);\n        suite.addTestSuite(ExtendedMessageFormatBaselineTest.KR.class);\n        suite.addTestSuite(ExtendedMessageFormatBaselineTest.TW.class);\n        suite.addTestSuite(MessageFormatExtensionTest.US.class);\n        suite.addTestSuite(MessageFormatExtensionTest.UK.class);\n        suite.addTestSuite(MessageFormatExtensionTest.DE.class);\n        suite.addTestSuite(MessageFormatExtensionTest.IT.class);\n        suite.addTestSuite(MessageFormatExtensionTest.JP.class);\n        suite.addTestSuite(MessageFormatExtensionTest.CA.class);\n        suite.addTestSuite(MessageFormatExtensionTest.CN.class);\n        suite.addTestSuite(MessageFormatExtensionTest.FR.class);\n        suite.addTestSuite(MessageFormatExtensionTest.KR.class);\n        suite.addTestSuite(MessageFormatExtensionTest.TW.class);\n        return suite;\n    }",
        "begin_line": 49,
        "end_line": 91,
        "comment": "\n     * Get the suite of tests\n     ",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 42)",
            "(line 51,col 9)-(line 51,col 49)",
            "(line 52,col 9)-(line 52,col 51)",
            "(line 53,col 9)-(line 53,col 46)",
            "(line 54,col 9)-(line 54,col 58)",
            "(line 55,col 9)-(line 55,col 45)",
            "(line 56,col 9)-(line 56,col 46)",
            "(line 57,col 9)-(line 57,col 50)",
            "(line 58,col 9)-(line 58,col 48)",
            "(line 59,col 9)-(line 59,col 50)",
            "(line 60,col 9)-(line 60,col 55)",
            "(line 61,col 9)-(line 61,col 55)",
            "(line 62,col 9)-(line 62,col 55)",
            "(line 63,col 9)-(line 63,col 55)",
            "(line 64,col 9)-(line 64,col 55)",
            "(line 65,col 9)-(line 65,col 55)",
            "(line 66,col 9)-(line 66,col 55)",
            "(line 67,col 9)-(line 67,col 55)",
            "(line 68,col 9)-(line 68,col 55)",
            "(line 69,col 9)-(line 69,col 55)",
            "(line 70,col 9)-(line 70,col 71)",
            "(line 71,col 9)-(line 71,col 71)",
            "(line 72,col 9)-(line 72,col 71)",
            "(line 73,col 9)-(line 73,col 71)",
            "(line 74,col 9)-(line 74,col 71)",
            "(line 75,col 9)-(line 75,col 71)",
            "(line 76,col 9)-(line 76,col 71)",
            "(line 77,col 9)-(line 77,col 71)",
            "(line 78,col 9)-(line 78,col 71)",
            "(line 79,col 9)-(line 79,col 71)",
            "(line 80,col 9)-(line 80,col 64)",
            "(line 81,col 9)-(line 81,col 64)",
            "(line 82,col 9)-(line 82,col 64)",
            "(line 83,col 9)-(line 83,col 64)",
            "(line 84,col 9)-(line 84,col 64)",
            "(line 85,col 9)-(line 85,col 64)",
            "(line 86,col 9)-(line 86,col 64)",
            "(line 87,col 9)-(line 87,col 64)",
            "(line 88,col 9)-(line 88,col 64)",
            "(line 89,col 9)-(line 89,col 64)",
            "(line 90,col 9)-(line 90,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(StrTokenizerTest.class);\n        suite.setName(\"TokenizerTest Tests\");\n        return suite;\n    }",
        "begin_line": 48,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 64)",
            "(line 50,col 9)-(line 50,col 45)",
            "(line 51,col 9)-(line 51,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.StrTokenizerTest(java.lang.String)",
        "snippet": "    public StrTokenizerTest(String name) {\n        super(name);\n    }",
        "begin_line": 59,
        "end_line": 61,
        "comment": "\n     * JUnit constructor.\n     * \n     * @param name\n     ",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.checkClone(org.apache.commons.lang.text.StrTokenizer)",
        "snippet": "    private void checkClone(StrTokenizer tokenizer) {\n        assertFalse(StrTokenizer.getCSVInstance() == tokenizer);\n        assertFalse(StrTokenizer.getTSVInstance() == tokenizer);\n    }",
        "begin_line": 63,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 64)",
            "(line 65,col 9)-(line 65,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.test1()",
        "snippet": "    public void test1() {\n\n        String input = \"a;b;c;\\\"d;\\\"\\\"e\\\";f; ; ;  \";\n        StrTokenizer tok = new StrTokenizer(input);\n        tok.setDelimiterChar(';');\n        tok.setQuoteChar('\"');\n        tok.setIgnoredMatcher(StrMatcher.trimMatcher());\n        tok.setIgnoreEmptyTokens(false);\n        String tokens[] = tok.getTokenArray();\n\n        String expected[] = new String[]{\"a\", \"b\", \"c\", \"d;\\\"e\", \"f\", \"\", \"\", \"\",};\n\n        assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length);\n        for (int i = 0; i < expected.length; i++) {\n            assertTrue(\"token[\" + i + \"] was '\" + tokens[i] + \"' but was expected to be '\" + expected[i] + \"'\",\n                    ObjectUtils.equals(expected[i], tokens[i]));\n        }\n\n    }",
        "begin_line": 69,
        "end_line": 87,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 52)",
            "(line 72,col 9)-(line 72,col 51)",
            "(line 73,col 9)-(line 73,col 34)",
            "(line 74,col 9)-(line 74,col 30)",
            "(line 75,col 9)-(line 75,col 56)",
            "(line 76,col 9)-(line 76,col 40)",
            "(line 77,col 9)-(line 77,col 46)",
            "(line 79,col 9)-(line 79,col 83)",
            "(line 81,col 9)-(line 81,col 82)",
            "(line 82,col 9)-(line 85,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.test2()",
        "snippet": "    public void test2() {\n\n        String input = \"a;b;c ;\\\"d;\\\"\\\"e\\\";f; ; ;\";\n        StrTokenizer tok = new StrTokenizer(input);\n        tok.setDelimiterChar(';');\n        tok.setQuoteChar('\"');\n        tok.setIgnoredMatcher(StrMatcher.noneMatcher());\n        tok.setIgnoreEmptyTokens(false);\n        String tokens[] = tok.getTokenArray();\n\n        String expected[] = new String[]{\"a\", \"b\", \"c \", \"d;\\\"e\", \"f\", \" \", \" \", \"\",};\n\n        assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length);\n        for (int i = 0; i < expected.length; i++) {\n            assertTrue(\"token[\" + i + \"] was '\" + tokens[i] + \"' but was expected to be '\" + expected[i] + \"'\",\n                    ObjectUtils.equals(expected[i], tokens[i]));\n        }\n\n    }",
        "begin_line": 89,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 51)",
            "(line 92,col 9)-(line 92,col 51)",
            "(line 93,col 9)-(line 93,col 34)",
            "(line 94,col 9)-(line 94,col 30)",
            "(line 95,col 9)-(line 95,col 56)",
            "(line 96,col 9)-(line 96,col 40)",
            "(line 97,col 9)-(line 97,col 46)",
            "(line 99,col 9)-(line 99,col 86)",
            "(line 101,col 9)-(line 101,col 82)",
            "(line 102,col 9)-(line 105,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.test3()",
        "snippet": "    public void test3() {\n\n        String input = \"a;b; c;\\\"d;\\\"\\\"e\\\";f; ; ;\";\n        StrTokenizer tok = new StrTokenizer(input);\n        tok.setDelimiterChar(';');\n        tok.setQuoteChar('\"');\n        tok.setIgnoredMatcher(StrMatcher.noneMatcher());\n        tok.setIgnoreEmptyTokens(false);\n        String tokens[] = tok.getTokenArray();\n\n        String expected[] = new String[]{\"a\", \"b\", \" c\", \"d;\\\"e\", \"f\", \" \", \" \", \"\",};\n\n        assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length);\n        for (int i = 0; i < expected.length; i++) {\n            assertTrue(\"token[\" + i + \"] was '\" + tokens[i] + \"' but was expected to be '\" + expected[i] + \"'\",\n                    ObjectUtils.equals(expected[i], tokens[i]));\n        }\n\n    }",
        "begin_line": 109,
        "end_line": 127,
        "comment": "",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 51)",
            "(line 112,col 9)-(line 112,col 51)",
            "(line 113,col 9)-(line 113,col 34)",
            "(line 114,col 9)-(line 114,col 30)",
            "(line 115,col 9)-(line 115,col 56)",
            "(line 116,col 9)-(line 116,col 40)",
            "(line 117,col 9)-(line 117,col 46)",
            "(line 119,col 9)-(line 119,col 86)",
            "(line 121,col 9)-(line 121,col 82)",
            "(line 122,col 9)-(line 125,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.test4()",
        "snippet": "    public void test4() {\n\n        String input = \"a;b; c;\\\"d;\\\"\\\"e\\\";f; ; ;\";\n        StrTokenizer tok = new StrTokenizer(input);\n        tok.setDelimiterChar(';');\n        tok.setQuoteChar('\"');\n        tok.setIgnoredMatcher(StrMatcher.trimMatcher());\n        tok.setIgnoreEmptyTokens(true);\n        String tokens[] = tok.getTokenArray();\n\n        String expected[] = new String[]{\"a\", \"b\", \"c\", \"d;\\\"e\", \"f\",};\n\n        assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length);\n        for (int i = 0; i < expected.length; i++) {\n            assertTrue(\"token[\" + i + \"] was '\" + tokens[i] + \"' but was expected to be '\" + expected[i] + \"'\",\n                    ObjectUtils.equals(expected[i], tokens[i]));\n        }\n\n    }",
        "begin_line": 129,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 131,col 9)-(line 131,col 51)",
            "(line 132,col 9)-(line 132,col 51)",
            "(line 133,col 9)-(line 133,col 34)",
            "(line 134,col 9)-(line 134,col 30)",
            "(line 135,col 9)-(line 135,col 56)",
            "(line 136,col 9)-(line 136,col 39)",
            "(line 137,col 9)-(line 137,col 46)",
            "(line 139,col 9)-(line 139,col 71)",
            "(line 141,col 9)-(line 141,col 82)",
            "(line 142,col 9)-(line 145,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.test5()",
        "snippet": "    public void test5() {\n\n        String input = \"a;b; c;\\\"d;\\\"\\\"e\\\";f; ; ;\";\n        StrTokenizer tok = new StrTokenizer(input);\n        tok.setDelimiterChar(';');\n        tok.setQuoteChar('\"');\n        tok.setIgnoredMatcher(StrMatcher.trimMatcher());\n        tok.setIgnoreEmptyTokens(false);\n        tok.setEmptyTokenAsNull(true);\n        String tokens[] = tok.getTokenArray();\n\n        String expected[] = new String[]{\"a\", \"b\", \"c\", \"d;\\\"e\", \"f\", null, null, null,};\n\n        assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length);\n        for (int i = 0; i < expected.length; i++) {\n            assertTrue(\"token[\" + i + \"] was '\" + tokens[i] + \"' but was expected to be '\" + expected[i] + \"'\",\n                    ObjectUtils.equals(expected[i], tokens[i]));\n        }\n\n    }",
        "begin_line": 149,
        "end_line": 168,
        "comment": "",
        "child_ranges": [
            "(line 151,col 9)-(line 151,col 51)",
            "(line 152,col 9)-(line 152,col 51)",
            "(line 153,col 9)-(line 153,col 34)",
            "(line 154,col 9)-(line 154,col 30)",
            "(line 155,col 9)-(line 155,col 56)",
            "(line 156,col 9)-(line 156,col 40)",
            "(line 157,col 9)-(line 157,col 38)",
            "(line 158,col 9)-(line 158,col 46)",
            "(line 160,col 9)-(line 160,col 89)",
            "(line 162,col 9)-(line 162,col 82)",
            "(line 163,col 9)-(line 166,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.test6()",
        "snippet": "    public void test6() {\n\n        String input = \"a;b; c;\\\"d;\\\"\\\"e\\\";f; ; ;\";\n        StrTokenizer tok = new StrTokenizer(input);\n        tok.setDelimiterChar(';');\n        tok.setQuoteChar('\"');\n        tok.setIgnoredMatcher(StrMatcher.trimMatcher());\n        tok.setIgnoreEmptyTokens(false);\n        // tok.setTreatingEmptyAsNull(true);\n        String tokens[] = tok.getTokenArray();\n\n        String expected[] = new String[]{\"a\", \"b\", \" c\", \"d;\\\"e\", \"f\", null, null, null,};\n\n        int nextCount = 0;\n        while (tok.hasNext()) {\n            tok.next();\n            nextCount++;\n        }\n\n        int prevCount = 0;\n        while (tok.hasPrevious()) {\n            tok.previous();\n            prevCount++;\n        }\n\n        assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length);\n\n        assertTrue(\"could not cycle through entire token list\" + \" using the 'hasNext' and 'next' methods\",\n                nextCount == expected.length);\n\n        assertTrue(\"could not cycle through entire token list\" + \" using the 'hasPrevious' and 'previous' methods\",\n                prevCount == expected.length);\n\n    }",
        "begin_line": 170,
        "end_line": 203,
        "comment": "",
        "child_ranges": [
            "(line 172,col 9)-(line 172,col 51)",
            "(line 173,col 9)-(line 173,col 51)",
            "(line 174,col 9)-(line 174,col 34)",
            "(line 175,col 9)-(line 175,col 30)",
            "(line 176,col 9)-(line 176,col 56)",
            "(line 177,col 9)-(line 177,col 40)",
            "(line 179,col 9)-(line 179,col 46)",
            "(line 181,col 9)-(line 181,col 90)",
            "(line 183,col 9)-(line 183,col 26)",
            "(line 184,col 9)-(line 187,col 9)",
            "(line 189,col 9)-(line 189,col 26)",
            "(line 190,col 9)-(line 193,col 9)",
            "(line 195,col 9)-(line 195,col 82)",
            "(line 197,col 9)-(line 198,col 46)",
            "(line 200,col 9)-(line 201,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.test7()",
        "snippet": "    public void test7() {\n\n        String input = \"a   b c \\\"d e\\\" f \";\n        StrTokenizer tok = new StrTokenizer(input);\n        tok.setDelimiterMatcher(StrMatcher.spaceMatcher());\n        tok.setQuoteMatcher(StrMatcher.doubleQuoteMatcher());\n        tok.setIgnoredMatcher(StrMatcher.noneMatcher());\n        tok.setIgnoreEmptyTokens(false);\n        String tokens[] = tok.getTokenArray();\n\n        String expected[] = new String[]{\"a\", \"\", \"\", \"b\", \"c\", \"d e\", \"f\", \"\",};\n\n        assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length);\n        for (int i = 0; i < expected.length; i++) {\n            assertTrue(\"token[\" + i + \"] was '\" + tokens[i] + \"' but was expected to be '\" + expected[i] + \"'\",\n                    ObjectUtils.equals(expected[i], tokens[i]));\n        }\n\n    }",
        "begin_line": 205,
        "end_line": 223,
        "comment": "",
        "child_ranges": [
            "(line 207,col 9)-(line 207,col 44)",
            "(line 208,col 9)-(line 208,col 51)",
            "(line 209,col 9)-(line 209,col 59)",
            "(line 210,col 9)-(line 210,col 61)",
            "(line 211,col 9)-(line 211,col 56)",
            "(line 212,col 9)-(line 212,col 40)",
            "(line 213,col 9)-(line 213,col 46)",
            "(line 215,col 9)-(line 215,col 81)",
            "(line 217,col 9)-(line 217,col 82)",
            "(line 218,col 9)-(line 221,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.test8()",
        "snippet": "    public void test8() {\n\n        String input = \"a   b c \\\"d e\\\" f \";\n        StrTokenizer tok = new StrTokenizer(input);\n        tok.setDelimiterMatcher(StrMatcher.spaceMatcher());\n        tok.setQuoteMatcher(StrMatcher.doubleQuoteMatcher());\n        tok.setIgnoredMatcher(StrMatcher.noneMatcher());\n        tok.setIgnoreEmptyTokens(true);\n        String tokens[] = tok.getTokenArray();\n\n        String expected[] = new String[]{\"a\", \"b\", \"c\", \"d e\", \"f\",};\n\n        assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length);\n        for (int i = 0; i < expected.length; i++) {\n            assertTrue(\"token[\" + i + \"] was '\" + tokens[i] + \"' but was expected to be '\" + expected[i] + \"'\",\n                    ObjectUtils.equals(expected[i], tokens[i]));\n        }\n\n    }",
        "begin_line": 225,
        "end_line": 243,
        "comment": "",
        "child_ranges": [
            "(line 227,col 9)-(line 227,col 44)",
            "(line 228,col 9)-(line 228,col 51)",
            "(line 229,col 9)-(line 229,col 59)",
            "(line 230,col 9)-(line 230,col 61)",
            "(line 231,col 9)-(line 231,col 56)",
            "(line 232,col 9)-(line 232,col 39)",
            "(line 233,col 9)-(line 233,col 46)",
            "(line 235,col 9)-(line 235,col 69)",
            "(line 237,col 9)-(line 237,col 82)",
            "(line 238,col 9)-(line 241,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testBasic1()",
        "snippet": "    public void testBasic1() {\n        String input = \"a  b c\";\n        StrTokenizer tok = new StrTokenizer(input);\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertEquals(\"c\", tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 245,
        "end_line": 252,
        "comment": "",
        "child_ranges": [
            "(line 246,col 9)-(line 246,col 32)",
            "(line 247,col 9)-(line 247,col 51)",
            "(line 248,col 9)-(line 248,col 38)",
            "(line 249,col 9)-(line 249,col 38)",
            "(line 250,col 9)-(line 250,col 38)",
            "(line 251,col 9)-(line 251,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testBasic2()",
        "snippet": "    public void testBasic2() {\n        String input = \"a \\nb\\fc\";\n        StrTokenizer tok = new StrTokenizer(input);\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertEquals(\"c\", tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 254,
        "end_line": 261,
        "comment": "",
        "child_ranges": [
            "(line 255,col 9)-(line 255,col 34)",
            "(line 256,col 9)-(line 256,col 51)",
            "(line 257,col 9)-(line 257,col 38)",
            "(line 258,col 9)-(line 258,col 38)",
            "(line 259,col 9)-(line 259,col 38)",
            "(line 260,col 9)-(line 260,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testBasic3()",
        "snippet": "    public void testBasic3() {\n        String input = \"a \\nb\\u0001\\fc\";\n        StrTokenizer tok = new StrTokenizer(input);\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\\u0001\", tok.next());\n        assertEquals(\"c\", tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 263,
        "end_line": 270,
        "comment": "",
        "child_ranges": [
            "(line 264,col 9)-(line 264,col 40)",
            "(line 265,col 9)-(line 265,col 51)",
            "(line 266,col 9)-(line 266,col 38)",
            "(line 267,col 9)-(line 267,col 44)",
            "(line 268,col 9)-(line 268,col 38)",
            "(line 269,col 9)-(line 269,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testBasic4()",
        "snippet": "    public void testBasic4() {\n        String input = \"a \\\"b\\\" c\";\n        StrTokenizer tok = new StrTokenizer(input);\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"\\\"b\\\"\", tok.next());\n        assertEquals(\"c\", tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 272,
        "end_line": 279,
        "comment": "",
        "child_ranges": [
            "(line 273,col 9)-(line 273,col 35)",
            "(line 274,col 9)-(line 274,col 51)",
            "(line 275,col 9)-(line 275,col 38)",
            "(line 276,col 9)-(line 276,col 42)",
            "(line 277,col 9)-(line 277,col 38)",
            "(line 278,col 9)-(line 278,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testBasic5()",
        "snippet": "    public void testBasic5() {\n        String input = \"a:b':c\";\n        StrTokenizer tok = new StrTokenizer(input, ':', '\\'');\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b'\", tok.next());\n        assertEquals(\"c\", tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 281,
        "end_line": 288,
        "comment": "",
        "child_ranges": [
            "(line 282,col 9)-(line 282,col 32)",
            "(line 283,col 9)-(line 283,col 62)",
            "(line 284,col 9)-(line 284,col 38)",
            "(line 285,col 9)-(line 285,col 39)",
            "(line 286,col 9)-(line 286,col 38)",
            "(line 287,col 9)-(line 287,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testBasicDelim1()",
        "snippet": "    public void testBasicDelim1() {\n        String input = \"a:b:c\";\n        StrTokenizer tok = new StrTokenizer(input, ':');\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertEquals(\"c\", tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 290,
        "end_line": 297,
        "comment": "",
        "child_ranges": [
            "(line 291,col 9)-(line 291,col 31)",
            "(line 292,col 9)-(line 292,col 56)",
            "(line 293,col 9)-(line 293,col 38)",
            "(line 294,col 9)-(line 294,col 38)",
            "(line 295,col 9)-(line 295,col 38)",
            "(line 296,col 9)-(line 296,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testBasicDelim2()",
        "snippet": "    public void testBasicDelim2() {\n        String input = \"a:b:c\";\n        StrTokenizer tok = new StrTokenizer(input, ',');\n        assertEquals(\"a:b:c\", tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 299,
        "end_line": 304,
        "comment": "",
        "child_ranges": [
            "(line 300,col 9)-(line 300,col 31)",
            "(line 301,col 9)-(line 301,col 56)",
            "(line 302,col 9)-(line 302,col 42)",
            "(line 303,col 9)-(line 303,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testBasicEmpty1()",
        "snippet": "    public void testBasicEmpty1() {\n        String input = \"a  b c\";\n        StrTokenizer tok = new StrTokenizer(input);\n        tok.setIgnoreEmptyTokens(false);\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertEquals(\"c\", tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 306,
        "end_line": 315,
        "comment": "",
        "child_ranges": [
            "(line 307,col 9)-(line 307,col 32)",
            "(line 308,col 9)-(line 308,col 51)",
            "(line 309,col 9)-(line 309,col 40)",
            "(line 310,col 9)-(line 310,col 38)",
            "(line 311,col 9)-(line 311,col 37)",
            "(line 312,col 9)-(line 312,col 38)",
            "(line 313,col 9)-(line 313,col 38)",
            "(line 314,col 9)-(line 314,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testBasicEmpty2()",
        "snippet": "    public void testBasicEmpty2() {\n        String input = \"a  b c\";\n        StrTokenizer tok = new StrTokenizer(input);\n        tok.setIgnoreEmptyTokens(false);\n        tok.setEmptyTokenAsNull(true);\n        assertEquals(\"a\", tok.next());\n        assertEquals(null, tok.next());\n        assertEquals(\"b\", tok.next());\n        assertEquals(\"c\", tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 317,
        "end_line": 327,
        "comment": "",
        "child_ranges": [
            "(line 318,col 9)-(line 318,col 32)",
            "(line 319,col 9)-(line 319,col 51)",
            "(line 320,col 9)-(line 320,col 40)",
            "(line 321,col 9)-(line 321,col 38)",
            "(line 322,col 9)-(line 322,col 38)",
            "(line 323,col 9)-(line 323,col 39)",
            "(line 324,col 9)-(line 324,col 38)",
            "(line 325,col 9)-(line 325,col 38)",
            "(line 326,col 9)-(line 326,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testBasicQuoted1()",
        "snippet": "    public void testBasicQuoted1() {\n        String input = \"a 'b' c\";\n        StrTokenizer tok = new StrTokenizer(input, ' ', '\\'');\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertEquals(\"c\", tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 329,
        "end_line": 336,
        "comment": "",
        "child_ranges": [
            "(line 330,col 9)-(line 330,col 33)",
            "(line 331,col 9)-(line 331,col 62)",
            "(line 332,col 9)-(line 332,col 38)",
            "(line 333,col 9)-(line 333,col 38)",
            "(line 334,col 9)-(line 334,col 38)",
            "(line 335,col 9)-(line 335,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testBasicQuoted2()",
        "snippet": "    public void testBasicQuoted2() {\n        String input = \"a:'b':\";\n        StrTokenizer tok = new StrTokenizer(input, ':', '\\'');\n        tok.setIgnoreEmptyTokens(false);\n        tok.setEmptyTokenAsNull(true);\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertEquals(null, tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 338,
        "end_line": 347,
        "comment": "",
        "child_ranges": [
            "(line 339,col 9)-(line 339,col 32)",
            "(line 340,col 9)-(line 340,col 62)",
            "(line 341,col 9)-(line 341,col 40)",
            "(line 342,col 9)-(line 342,col 38)",
            "(line 343,col 9)-(line 343,col 38)",
            "(line 344,col 9)-(line 344,col 38)",
            "(line 345,col 9)-(line 345,col 39)",
            "(line 346,col 9)-(line 346,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testBasicQuoted3()",
        "snippet": "    public void testBasicQuoted3() {\n        String input = \"a:'b''c'\";\n        StrTokenizer tok = new StrTokenizer(input, ':', '\\'');\n        tok.setIgnoreEmptyTokens(false);\n        tok.setEmptyTokenAsNull(true);\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b'c\", tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 349,
        "end_line": 357,
        "comment": "",
        "child_ranges": [
            "(line 350,col 9)-(line 350,col 34)",
            "(line 351,col 9)-(line 351,col 62)",
            "(line 352,col 9)-(line 352,col 40)",
            "(line 353,col 9)-(line 353,col 38)",
            "(line 354,col 9)-(line 354,col 38)",
            "(line 355,col 9)-(line 355,col 40)",
            "(line 356,col 9)-(line 356,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testBasicQuoted4()",
        "snippet": "    public void testBasicQuoted4() {\n        String input = \"a: 'b' 'c' :d\";\n        StrTokenizer tok = new StrTokenizer(input, ':', '\\'');\n        tok.setTrimmerMatcher(StrMatcher.trimMatcher());\n        tok.setIgnoreEmptyTokens(false);\n        tok.setEmptyTokenAsNull(true);\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b c\", tok.next());\n        assertEquals(\"d\", tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 359,
        "end_line": 369,
        "comment": "",
        "child_ranges": [
            "(line 360,col 9)-(line 360,col 39)",
            "(line 361,col 9)-(line 361,col 62)",
            "(line 362,col 9)-(line 362,col 56)",
            "(line 363,col 9)-(line 363,col 40)",
            "(line 364,col 9)-(line 364,col 38)",
            "(line 365,col 9)-(line 365,col 38)",
            "(line 366,col 9)-(line 366,col 40)",
            "(line 367,col 9)-(line 367,col 38)",
            "(line 368,col 9)-(line 368,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testBasicQuoted5()",
        "snippet": "    public void testBasicQuoted5() {\n        String input = \"a: 'b'x'c' :d\";\n        StrTokenizer tok = new StrTokenizer(input, ':', '\\'');\n        tok.setTrimmerMatcher(StrMatcher.trimMatcher());\n        tok.setIgnoreEmptyTokens(false);\n        tok.setEmptyTokenAsNull(true);\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"bxc\", tok.next());\n        assertEquals(\"d\", tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 371,
        "end_line": 381,
        "comment": "",
        "child_ranges": [
            "(line 372,col 9)-(line 372,col 39)",
            "(line 373,col 9)-(line 373,col 62)",
            "(line 374,col 9)-(line 374,col 56)",
            "(line 375,col 9)-(line 375,col 40)",
            "(line 376,col 9)-(line 376,col 38)",
            "(line 377,col 9)-(line 377,col 38)",
            "(line 378,col 9)-(line 378,col 40)",
            "(line 379,col 9)-(line 379,col 38)",
            "(line 380,col 9)-(line 380,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testBasicQuoted6()",
        "snippet": "    public void testBasicQuoted6() {\n        String input = \"a:'b'\\\"c':d\";\n        StrTokenizer tok = new StrTokenizer(input, ':');\n        tok.setQuoteMatcher(StrMatcher.quoteMatcher());\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\\\"c:d\", tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 383,
        "end_line": 390,
        "comment": "",
        "child_ranges": [
            "(line 384,col 9)-(line 384,col 37)",
            "(line 385,col 9)-(line 385,col 56)",
            "(line 386,col 9)-(line 386,col 55)",
            "(line 387,col 9)-(line 387,col 38)",
            "(line 388,col 9)-(line 388,col 43)",
            "(line 389,col 9)-(line 389,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testBasicQuoted7()",
        "snippet": "    public void testBasicQuoted7() {\n        String input = \"a:\\\"There's a reason here\\\":b\";\n        StrTokenizer tok = new StrTokenizer(input, ':');\n        tok.setQuoteMatcher(StrMatcher.quoteMatcher());\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"There's a reason here\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 392,
        "end_line": 400,
        "comment": "",
        "child_ranges": [
            "(line 393,col 9)-(line 393,col 55)",
            "(line 394,col 9)-(line 394,col 56)",
            "(line 395,col 9)-(line 395,col 55)",
            "(line 396,col 9)-(line 396,col 38)",
            "(line 397,col 9)-(line 397,col 58)",
            "(line 398,col 9)-(line 398,col 38)",
            "(line 399,col 9)-(line 399,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testBasicQuotedTrimmed1()",
        "snippet": "    public void testBasicQuotedTrimmed1() {\n        String input = \"a: 'b' :\";\n        StrTokenizer tok = new StrTokenizer(input, ':', '\\'');\n        tok.setTrimmerMatcher(StrMatcher.trimMatcher());\n        tok.setIgnoreEmptyTokens(false);\n        tok.setEmptyTokenAsNull(true);\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertEquals(null, tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 402,
        "end_line": 412,
        "comment": "",
        "child_ranges": [
            "(line 403,col 9)-(line 403,col 34)",
            "(line 404,col 9)-(line 404,col 62)",
            "(line 405,col 9)-(line 405,col 56)",
            "(line 406,col 9)-(line 406,col 40)",
            "(line 407,col 9)-(line 407,col 38)",
            "(line 408,col 9)-(line 408,col 38)",
            "(line 409,col 9)-(line 409,col 38)",
            "(line 410,col 9)-(line 410,col 39)",
            "(line 411,col 9)-(line 411,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testBasicTrimmed1()",
        "snippet": "    public void testBasicTrimmed1() {\n        String input = \"a: b :  \";\n        StrTokenizer tok = new StrTokenizer(input, ':');\n        tok.setTrimmerMatcher(StrMatcher.trimMatcher());\n        tok.setIgnoreEmptyTokens(false);\n        tok.setEmptyTokenAsNull(true);\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertEquals(null, tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 414,
        "end_line": 424,
        "comment": "",
        "child_ranges": [
            "(line 415,col 9)-(line 415,col 34)",
            "(line 416,col 9)-(line 416,col 56)",
            "(line 417,col 9)-(line 417,col 56)",
            "(line 418,col 9)-(line 418,col 40)",
            "(line 419,col 9)-(line 419,col 38)",
            "(line 420,col 9)-(line 420,col 38)",
            "(line 421,col 9)-(line 421,col 38)",
            "(line 422,col 9)-(line 422,col 39)",
            "(line 423,col 9)-(line 423,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testBasicTrimmed2()",
        "snippet": "    public void testBasicTrimmed2() {\n        String input = \"a:  b  :\";\n        StrTokenizer tok = new StrTokenizer(input, ':');\n        tok.setTrimmerMatcher(StrMatcher.stringMatcher(\"  \"));\n        tok.setIgnoreEmptyTokens(false);\n        tok.setEmptyTokenAsNull(true);\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertEquals(null, tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 426,
        "end_line": 436,
        "comment": "",
        "child_ranges": [
            "(line 427,col 9)-(line 427,col 34)",
            "(line 428,col 9)-(line 428,col 56)",
            "(line 429,col 9)-(line 429,col 62)",
            "(line 430,col 9)-(line 430,col 40)",
            "(line 431,col 9)-(line 431,col 38)",
            "(line 432,col 9)-(line 432,col 38)",
            "(line 433,col 9)-(line 433,col 38)",
            "(line 434,col 9)-(line 434,col 39)",
            "(line 435,col 9)-(line 435,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testBasicIgnoreTrimmed1()",
        "snippet": "    public void testBasicIgnoreTrimmed1() {\n        String input = \"a: bIGNOREc : \";\n        StrTokenizer tok = new StrTokenizer(input, ':');\n        tok.setIgnoredMatcher(StrMatcher.stringMatcher(\"IGNORE\"));\n        tok.setTrimmerMatcher(StrMatcher.trimMatcher());\n        tok.setIgnoreEmptyTokens(false);\n        tok.setEmptyTokenAsNull(true);\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"bc\", tok.next());\n        assertEquals(null, tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 438,
        "end_line": 449,
        "comment": "",
        "child_ranges": [
            "(line 439,col 9)-(line 439,col 40)",
            "(line 440,col 9)-(line 440,col 56)",
            "(line 441,col 9)-(line 441,col 66)",
            "(line 442,col 9)-(line 442,col 56)",
            "(line 443,col 9)-(line 443,col 40)",
            "(line 444,col 9)-(line 444,col 38)",
            "(line 445,col 9)-(line 445,col 38)",
            "(line 446,col 9)-(line 446,col 39)",
            "(line 447,col 9)-(line 447,col 39)",
            "(line 448,col 9)-(line 448,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testBasicIgnoreTrimmed2()",
        "snippet": "    public void testBasicIgnoreTrimmed2() {\n        String input = \"IGNOREaIGNORE: IGNORE bIGNOREc IGNORE : IGNORE \";\n        StrTokenizer tok = new StrTokenizer(input, ':');\n        tok.setIgnoredMatcher(StrMatcher.stringMatcher(\"IGNORE\"));\n        tok.setTrimmerMatcher(StrMatcher.trimMatcher());\n        tok.setIgnoreEmptyTokens(false);\n        tok.setEmptyTokenAsNull(true);\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"bc\", tok.next());\n        assertEquals(null, tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 451,
        "end_line": 462,
        "comment": "",
        "child_ranges": [
            "(line 452,col 9)-(line 452,col 73)",
            "(line 453,col 9)-(line 453,col 56)",
            "(line 454,col 9)-(line 454,col 66)",
            "(line 455,col 9)-(line 455,col 56)",
            "(line 456,col 9)-(line 456,col 40)",
            "(line 457,col 9)-(line 457,col 38)",
            "(line 458,col 9)-(line 458,col 38)",
            "(line 459,col 9)-(line 459,col 39)",
            "(line 460,col 9)-(line 460,col 39)",
            "(line 461,col 9)-(line 461,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testBasicIgnoreTrimmed3()",
        "snippet": "    public void testBasicIgnoreTrimmed3() {\n        String input = \"IGNOREaIGNORE: IGNORE bIGNOREc IGNORE : IGNORE \";\n        StrTokenizer tok = new StrTokenizer(input, ':');\n        tok.setIgnoredMatcher(StrMatcher.stringMatcher(\"IGNORE\"));\n        tok.setIgnoreEmptyTokens(false);\n        tok.setEmptyTokenAsNull(true);\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"  bc  \", tok.next());\n        assertEquals(\"  \", tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 464,
        "end_line": 474,
        "comment": "",
        "child_ranges": [
            "(line 465,col 9)-(line 465,col 73)",
            "(line 466,col 9)-(line 466,col 56)",
            "(line 467,col 9)-(line 467,col 66)",
            "(line 468,col 9)-(line 468,col 40)",
            "(line 469,col 9)-(line 469,col 38)",
            "(line 470,col 9)-(line 470,col 38)",
            "(line 471,col 9)-(line 471,col 43)",
            "(line 472,col 9)-(line 472,col 39)",
            "(line 473,col 9)-(line 473,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testBasicIgnoreTrimmed4()",
        "snippet": "    public void testBasicIgnoreTrimmed4() {\n        String input = \"IGNOREaIGNORE: IGNORE 'bIGNOREc'IGNORE'd' IGNORE : IGNORE \";\n        StrTokenizer tok = new StrTokenizer(input, ':', '\\'');\n        tok.setIgnoredMatcher(StrMatcher.stringMatcher(\"IGNORE\"));\n        tok.setTrimmerMatcher(StrMatcher.trimMatcher());\n        tok.setIgnoreEmptyTokens(false);\n        tok.setEmptyTokenAsNull(true);\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"bIGNOREcd\", tok.next());\n        assertEquals(null, tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 476,
        "end_line": 487,
        "comment": "",
        "child_ranges": [
            "(line 477,col 9)-(line 477,col 84)",
            "(line 478,col 9)-(line 478,col 62)",
            "(line 479,col 9)-(line 479,col 66)",
            "(line 480,col 9)-(line 480,col 56)",
            "(line 481,col 9)-(line 481,col 40)",
            "(line 482,col 9)-(line 482,col 38)",
            "(line 483,col 9)-(line 483,col 38)",
            "(line 484,col 9)-(line 484,col 46)",
            "(line 485,col 9)-(line 485,col 39)",
            "(line 486,col 9)-(line 486,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testListArray()",
        "snippet": "    public void testListArray() {\n        String input = \"a  b c\";\n        StrTokenizer tok = new StrTokenizer(input);\n        String[] array = tok.getTokenArray();\n        List list = tok.getTokenList();\n        \n        assertEquals(Arrays.asList(array), list);\n        assertEquals(3, list.size());\n    }",
        "begin_line": 490,
        "end_line": 498,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 491,col 9)-(line 491,col 32)",
            "(line 492,col 9)-(line 492,col 51)",
            "(line 493,col 9)-(line 493,col 45)",
            "(line 494,col 9)-(line 494,col 39)",
            "(line 496,col 9)-(line 496,col 49)",
            "(line 497,col 9)-(line 497,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testCSV(java.lang.String)",
        "snippet": "    public void testCSV(String data) {\n        this.testXSVAbc(StrTokenizer.getCSVInstance(data));\n        this.testXSVAbc(StrTokenizer.getCSVInstance(data.toCharArray()));\n    }",
        "begin_line": 501,
        "end_line": 504,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 502,col 9)-(line 502,col 59)",
            "(line 503,col 9)-(line 503,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testCSVEmpty()",
        "snippet": "    public void testCSVEmpty() {\n        this.testEmpty(StrTokenizer.getCSVInstance());\n        this.testEmpty(StrTokenizer.getCSVInstance(\"\"));\n    }",
        "begin_line": 506,
        "end_line": 509,
        "comment": "",
        "child_ranges": [
            "(line 507,col 9)-(line 507,col 54)",
            "(line 508,col 9)-(line 508,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testCSVSimple()",
        "snippet": "    public void testCSVSimple() {\n        this.testCSV(CSV_SIMPLE_FIXTURE);\n    }",
        "begin_line": 511,
        "end_line": 513,
        "comment": "",
        "child_ranges": [
            "(line 512,col 9)-(line 512,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testCSVSimpleNeedsTrim()",
        "snippet": "    public void testCSVSimpleNeedsTrim() {\n        this.testCSV(\"   \" + CSV_SIMPLE_FIXTURE);\n        this.testCSV(\"   \\n\\t  \" + CSV_SIMPLE_FIXTURE);\n        this.testCSV(\"   \\n  \" + CSV_SIMPLE_FIXTURE + \"\\n\\n\\r\");\n    }",
        "begin_line": 515,
        "end_line": 519,
        "comment": "",
        "child_ranges": [
            "(line 516,col 9)-(line 516,col 49)",
            "(line 517,col 9)-(line 517,col 55)",
            "(line 518,col 9)-(line 518,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testEmpty(org.apache.commons.lang.text.StrTokenizer)",
        "snippet": "    void testEmpty(StrTokenizer tokenizer) {\n        this.checkClone(tokenizer);\n        assertEquals(false, tokenizer.hasNext());\n        assertEquals(false, tokenizer.hasPrevious());\n        assertEquals(null, tokenizer.nextToken());\n        assertEquals(0, tokenizer.size());\n        try {\n            tokenizer.next();\n            fail();\n        } catch (NoSuchElementException ex) {}\n    }",
        "begin_line": 521,
        "end_line": 531,
        "comment": "",
        "child_ranges": [
            "(line 522,col 9)-(line 522,col 35)",
            "(line 523,col 9)-(line 523,col 49)",
            "(line 524,col 9)-(line 524,col 53)",
            "(line 525,col 9)-(line 525,col 50)",
            "(line 526,col 9)-(line 526,col 42)",
            "(line 527,col 9)-(line 530,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testGetContent()",
        "snippet": "    public void testGetContent() {\n        String input = \"a   b c \\\"d e\\\" f \";\n        StrTokenizer tok = new StrTokenizer(input);\n        assertEquals(input, tok.getContent());\n\n        tok = new StrTokenizer(input.toCharArray());\n        assertEquals(input, tok.getContent());\n        \n        tok = new StrTokenizer();\n        assertEquals(null, tok.getContent());\n    }",
        "begin_line": 533,
        "end_line": 543,
        "comment": "",
        "child_ranges": [
            "(line 534,col 9)-(line 534,col 44)",
            "(line 535,col 9)-(line 535,col 51)",
            "(line 536,col 9)-(line 536,col 46)",
            "(line 538,col 9)-(line 538,col 52)",
            "(line 539,col 9)-(line 539,col 46)",
            "(line 541,col 9)-(line 541,col 33)",
            "(line 542,col 9)-(line 542,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testChaining()",
        "snippet": "    public void testChaining() {\n        StrTokenizer tok = new StrTokenizer();\n        assertEquals(tok, tok.reset());\n        assertEquals(tok, tok.reset(\"\"));\n        assertEquals(tok, tok.reset(new char[0]));\n        assertEquals(tok, tok.setDelimiterChar(' '));\n        assertEquals(tok, tok.setDelimiterString(\" \"));\n        assertEquals(tok, tok.setDelimiterMatcher(null));\n        assertEquals(tok, tok.setQuoteChar(' '));\n        assertEquals(tok, tok.setQuoteMatcher(null));\n        assertEquals(tok, tok.setIgnoredChar(' '));\n        assertEquals(tok, tok.setIgnoredMatcher(null));\n        assertEquals(tok, tok.setTrimmerMatcher(null));\n        assertEquals(tok, tok.setEmptyTokenAsNull(false));\n        assertEquals(tok, tok.setIgnoreEmptyTokens(false));\n    }",
        "begin_line": 546,
        "end_line": 561,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 547,col 9)-(line 547,col 46)",
            "(line 548,col 9)-(line 548,col 39)",
            "(line 549,col 9)-(line 549,col 41)",
            "(line 550,col 9)-(line 550,col 50)",
            "(line 551,col 9)-(line 551,col 53)",
            "(line 552,col 9)-(line 552,col 55)",
            "(line 553,col 9)-(line 553,col 57)",
            "(line 554,col 9)-(line 554,col 49)",
            "(line 555,col 9)-(line 555,col 53)",
            "(line 556,col 9)-(line 556,col 51)",
            "(line 557,col 9)-(line 557,col 55)",
            "(line 558,col 9)-(line 558,col 55)",
            "(line 559,col 9)-(line 559,col 58)",
            "(line 560,col 9)-(line 560,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testCloneNotSupportedException()",
        "snippet": "    public void testCloneNotSupportedException() {\n        Object notCloned = (new StrTokenizer() {\n            Object cloneReset() throws CloneNotSupportedException {\n                throw new CloneNotSupportedException(\"test\");\n            }\n        }).clone();\n        assertNull(notCloned);\n    }",
        "begin_line": 567,
        "end_line": 574,
        "comment": "\n     * Tests that the {@link StrTokenizer#clone()} clone method catches {@link CloneNotSupportedException} and returns\n     * <code>null</code>.\n     ",
        "child_ranges": [
            "(line 568,col 9)-(line 572,col 19)",
            "(line 573,col 9)-(line 573,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.Anonymous-21569fe1-3a6b-480c-80bb-37b8cb12ddeb.cloneReset()",
        "snippet": "            Object cloneReset() throws CloneNotSupportedException {\n                throw new CloneNotSupportedException(\"test\");\n            }",
        "begin_line": 569,
        "end_line": 571,
        "comment": "",
        "child_ranges": [
            "(line 570,col 17)-(line 570,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testCloneNull()",
        "snippet": "    public void testCloneNull() {\n        StrTokenizer tokenizer = new StrTokenizer((char[]) null);\n        // Start sanity check\n        assertEquals(null, tokenizer.nextToken());\n        tokenizer.reset();\n        assertEquals(null, tokenizer.nextToken());\n        // End sanity check\n        StrTokenizer clonedTokenizer = (StrTokenizer) tokenizer.clone();\n        tokenizer.reset();\n        assertEquals(null, tokenizer.nextToken());\n        assertEquals(null, clonedTokenizer.nextToken());\n    }",
        "begin_line": 576,
        "end_line": 587,
        "comment": "",
        "child_ranges": [
            "(line 577,col 9)-(line 577,col 65)",
            "(line 579,col 9)-(line 579,col 50)",
            "(line 580,col 9)-(line 580,col 26)",
            "(line 581,col 9)-(line 581,col 50)",
            "(line 583,col 9)-(line 583,col 72)",
            "(line 584,col 9)-(line 584,col 26)",
            "(line 585,col 9)-(line 585,col 50)",
            "(line 586,col 9)-(line 586,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testCloneReset()",
        "snippet": "    public void testCloneReset() {\n        char[] input = new char[]{'a'};\n        StrTokenizer tokenizer = new StrTokenizer(input);\n        // Start sanity check\n        assertEquals(\"a\", tokenizer.nextToken());\n        tokenizer.reset();\n        assertEquals(\"a\", tokenizer.nextToken());\n        // End sanity check\n        StrTokenizer clonedTokenizer = (StrTokenizer) tokenizer.clone();\n        input[0] = 'b';\n        tokenizer.reset();\n        assertEquals(\"b\", tokenizer.nextToken());\n        assertEquals(\"a\", clonedTokenizer.nextToken());\n    }",
        "begin_line": 589,
        "end_line": 602,
        "comment": "",
        "child_ranges": [
            "(line 590,col 9)-(line 590,col 39)",
            "(line 591,col 9)-(line 591,col 57)",
            "(line 593,col 9)-(line 593,col 49)",
            "(line 594,col 9)-(line 594,col 26)",
            "(line 595,col 9)-(line 595,col 49)",
            "(line 597,col 9)-(line 597,col 72)",
            "(line 598,col 9)-(line 598,col 23)",
            "(line 599,col 9)-(line 599,col 26)",
            "(line 600,col 9)-(line 600,col 49)",
            "(line 601,col 9)-(line 601,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testConstructor_String()",
        "snippet": "    public void testConstructor_String() {\n        StrTokenizer tok = new StrTokenizer(\"a b\");\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertEquals(false, tok.hasNext());\n        \n        tok = new StrTokenizer(\"\");\n        assertEquals(false, tok.hasNext());\n        \n        tok = new StrTokenizer((String) null);\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 605,
        "end_line": 616,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 606,col 9)-(line 606,col 51)",
            "(line 607,col 9)-(line 607,col 38)",
            "(line 608,col 9)-(line 608,col 38)",
            "(line 609,col 9)-(line 609,col 43)",
            "(line 611,col 9)-(line 611,col 35)",
            "(line 612,col 9)-(line 612,col 43)",
            "(line 614,col 9)-(line 614,col 46)",
            "(line 615,col 9)-(line 615,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testConstructor_String_char()",
        "snippet": "    public void testConstructor_String_char() {\n        StrTokenizer tok = new StrTokenizer(\"a b\", ' ');\n        assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \".toCharArray(), 0, 0, 1));\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertEquals(false, tok.hasNext());\n        \n        tok = new StrTokenizer(\"\", ' ');\n        assertEquals(false, tok.hasNext());\n        \n        tok = new StrTokenizer((String) null, ' ');\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 619,
        "end_line": 631,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 620,col 9)-(line 620,col 56)",
            "(line 621,col 9)-(line 621,col 87)",
            "(line 622,col 9)-(line 622,col 38)",
            "(line 623,col 9)-(line 623,col 38)",
            "(line 624,col 9)-(line 624,col 43)",
            "(line 626,col 9)-(line 626,col 40)",
            "(line 627,col 9)-(line 627,col 43)",
            "(line 629,col 9)-(line 629,col 51)",
            "(line 630,col 9)-(line 630,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testConstructor_String_char_char()",
        "snippet": "    public void testConstructor_String_char_char() {\n        StrTokenizer tok = new StrTokenizer(\"a b\", ' ', '\"');\n        assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \".toCharArray(), 0, 0, 1));\n        assertEquals(1, tok.getQuoteMatcher().isMatch(\"\\\"\".toCharArray(), 0, 0, 1));\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertEquals(false, tok.hasNext());\n        \n        tok = new StrTokenizer(\"\", ' ', '\"');\n        assertEquals(false, tok.hasNext());\n        \n        tok = new StrTokenizer((String) null, ' ', '\"');\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 634,
        "end_line": 647,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 635,col 9)-(line 635,col 61)",
            "(line 636,col 9)-(line 636,col 87)",
            "(line 637,col 9)-(line 637,col 84)",
            "(line 638,col 9)-(line 638,col 38)",
            "(line 639,col 9)-(line 639,col 38)",
            "(line 640,col 9)-(line 640,col 43)",
            "(line 642,col 9)-(line 642,col 45)",
            "(line 643,col 9)-(line 643,col 43)",
            "(line 645,col 9)-(line 645,col 56)",
            "(line 646,col 9)-(line 646,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testConstructor_charArray()",
        "snippet": "    public void testConstructor_charArray() {\n        StrTokenizer tok = new StrTokenizer(\"a b\".toCharArray());\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertEquals(false, tok.hasNext());\n        \n        tok = new StrTokenizer(new char[0]);\n        assertEquals(false, tok.hasNext());\n        \n        tok = new StrTokenizer((char[]) null);\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 650,
        "end_line": 661,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 651,col 9)-(line 651,col 65)",
            "(line 652,col 9)-(line 652,col 38)",
            "(line 653,col 9)-(line 653,col 38)",
            "(line 654,col 9)-(line 654,col 43)",
            "(line 656,col 9)-(line 656,col 44)",
            "(line 657,col 9)-(line 657,col 43)",
            "(line 659,col 9)-(line 659,col 46)",
            "(line 660,col 9)-(line 660,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testConstructor_charArray_char()",
        "snippet": "    public void testConstructor_charArray_char() {\n        StrTokenizer tok = new StrTokenizer(\"a b\".toCharArray(), ' ');\n        assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \".toCharArray(), 0, 0, 1));\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertEquals(false, tok.hasNext());\n        \n        tok = new StrTokenizer(new char[0], ' ');\n        assertEquals(false, tok.hasNext());\n        \n        tok = new StrTokenizer((char[]) null, ' ');\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 664,
        "end_line": 676,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 665,col 9)-(line 665,col 70)",
            "(line 666,col 9)-(line 666,col 87)",
            "(line 667,col 9)-(line 667,col 38)",
            "(line 668,col 9)-(line 668,col 38)",
            "(line 669,col 9)-(line 669,col 43)",
            "(line 671,col 9)-(line 671,col 49)",
            "(line 672,col 9)-(line 672,col 43)",
            "(line 674,col 9)-(line 674,col 51)",
            "(line 675,col 9)-(line 675,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testConstructor_charArray_char_char()",
        "snippet": "    public void testConstructor_charArray_char_char() {\n        StrTokenizer tok = new StrTokenizer(\"a b\".toCharArray(), ' ', '\"');\n        assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \".toCharArray(), 0, 0, 1));\n        assertEquals(1, tok.getQuoteMatcher().isMatch(\"\\\"\".toCharArray(), 0, 0, 1));\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertEquals(false, tok.hasNext());\n        \n        tok = new StrTokenizer(new char[0], ' ', '\"');\n        assertEquals(false, tok.hasNext());\n        \n        tok = new StrTokenizer((char[]) null, ' ', '\"');\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 679,
        "end_line": 692,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 680,col 9)-(line 680,col 75)",
            "(line 681,col 9)-(line 681,col 87)",
            "(line 682,col 9)-(line 682,col 84)",
            "(line 683,col 9)-(line 683,col 38)",
            "(line 684,col 9)-(line 684,col 38)",
            "(line 685,col 9)-(line 685,col 43)",
            "(line 687,col 9)-(line 687,col 54)",
            "(line 688,col 9)-(line 688,col 43)",
            "(line 690,col 9)-(line 690,col 56)",
            "(line 691,col 9)-(line 691,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testReset()",
        "snippet": "    public void testReset() {\n        StrTokenizer tok = new StrTokenizer(\"a b c\");\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertEquals(\"c\", tok.next());\n        assertEquals(false, tok.hasNext());\n        \n        tok.reset();\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertEquals(\"c\", tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 695,
        "end_line": 707,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 696,col 9)-(line 696,col 53)",
            "(line 697,col 9)-(line 697,col 38)",
            "(line 698,col 9)-(line 698,col 38)",
            "(line 699,col 9)-(line 699,col 38)",
            "(line 700,col 9)-(line 700,col 43)",
            "(line 702,col 9)-(line 702,col 20)",
            "(line 703,col 9)-(line 703,col 38)",
            "(line 704,col 9)-(line 704,col 38)",
            "(line 705,col 9)-(line 705,col 38)",
            "(line 706,col 9)-(line 706,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testReset_String()",
        "snippet": "    public void testReset_String() {\n        StrTokenizer tok = new StrTokenizer(\"x x x\");\n        tok.reset(\"d e\");\n        assertEquals(\"d\", tok.next());\n        assertEquals(\"e\", tok.next());\n        assertEquals(false, tok.hasNext());\n        \n        tok.reset((String) null);\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 710,
        "end_line": 719,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 711,col 9)-(line 711,col 53)",
            "(line 712,col 9)-(line 712,col 25)",
            "(line 713,col 9)-(line 713,col 38)",
            "(line 714,col 9)-(line 714,col 38)",
            "(line 715,col 9)-(line 715,col 43)",
            "(line 717,col 9)-(line 717,col 33)",
            "(line 718,col 9)-(line 718,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testReset_charArray()",
        "snippet": "    public void testReset_charArray() {\n        StrTokenizer tok = new StrTokenizer(\"x x x\");\n        \n        char[] array = new char[] {'a', ' ', 'c'};\n        tok.reset(array);\n        array[1] = 'b'; // test linked array\n        assertEquals(\"abc\", tok.next());\n        assertEquals(false, tok.hasNext());\n        \n        tok.reset((char[]) null);\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 722,
        "end_line": 733,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 723,col 9)-(line 723,col 53)",
            "(line 725,col 9)-(line 725,col 50)",
            "(line 726,col 9)-(line 726,col 25)",
            "(line 727,col 9)-(line 727,col 23)",
            "(line 728,col 9)-(line 728,col 40)",
            "(line 729,col 9)-(line 729,col 43)",
            "(line 731,col 9)-(line 731,col 33)",
            "(line 732,col 9)-(line 732,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testTSV()",
        "snippet": "    public void testTSV() {\n        this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE));\n        this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE.toCharArray()));\n    }",
        "begin_line": 736,
        "end_line": 739,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 737,col 9)-(line 737,col 73)",
            "(line 738,col 9)-(line 738,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testTSVEmpty()",
        "snippet": "    public void testTSVEmpty() {\n        this.testEmpty(StrTokenizer.getCSVInstance());\n        this.testEmpty(StrTokenizer.getCSVInstance(\"\"));\n    }",
        "begin_line": 741,
        "end_line": 744,
        "comment": "",
        "child_ranges": [
            "(line 742,col 9)-(line 742,col 54)",
            "(line 743,col 9)-(line 743,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testXSVAbc(org.apache.commons.lang.text.StrTokenizer)",
        "snippet": "    void testXSVAbc(StrTokenizer tokenizer) {\n        this.checkClone(tokenizer);\n        assertEquals(-1, tokenizer.previousIndex());\n        assertEquals(0, tokenizer.nextIndex());\n        assertEquals(null, tokenizer.previousToken());\n        assertEquals(\"A\", tokenizer.nextToken());\n        assertEquals(1, tokenizer.nextIndex());\n        assertEquals(\"b\", tokenizer.nextToken());\n        assertEquals(2, tokenizer.nextIndex());\n        assertEquals(\"c\", tokenizer.nextToken());\n        assertEquals(3, tokenizer.nextIndex());\n        assertEquals(null, tokenizer.nextToken());\n        assertEquals(3, tokenizer.nextIndex());\n        assertEquals(\"c\", tokenizer.previousToken());\n        assertEquals(2, tokenizer.nextIndex());\n        assertEquals(\"b\", tokenizer.previousToken());\n        assertEquals(1, tokenizer.nextIndex());\n        assertEquals(\"A\", tokenizer.previousToken());\n        assertEquals(0, tokenizer.nextIndex());\n        assertEquals(null, tokenizer.previousToken());\n        assertEquals(0, tokenizer.nextIndex());\n        assertEquals(-1, tokenizer.previousIndex());\n        assertEquals(3, tokenizer.size());\n    }",
        "begin_line": 746,
        "end_line": 769,
        "comment": "",
        "child_ranges": [
            "(line 747,col 9)-(line 747,col 35)",
            "(line 748,col 9)-(line 748,col 52)",
            "(line 749,col 9)-(line 749,col 47)",
            "(line 750,col 9)-(line 750,col 54)",
            "(line 751,col 9)-(line 751,col 49)",
            "(line 752,col 9)-(line 752,col 47)",
            "(line 753,col 9)-(line 753,col 49)",
            "(line 754,col 9)-(line 754,col 47)",
            "(line 755,col 9)-(line 755,col 49)",
            "(line 756,col 9)-(line 756,col 47)",
            "(line 757,col 9)-(line 757,col 50)",
            "(line 758,col 9)-(line 758,col 47)",
            "(line 759,col 9)-(line 759,col 53)",
            "(line 760,col 9)-(line 760,col 47)",
            "(line 761,col 9)-(line 761,col 53)",
            "(line 762,col 9)-(line 762,col 47)",
            "(line 763,col 9)-(line 763,col 53)",
            "(line 764,col 9)-(line 764,col 47)",
            "(line 765,col 9)-(line 765,col 54)",
            "(line 766,col 9)-(line 766,col 47)",
            "(line 767,col 9)-(line 767,col 52)",
            "(line 768,col 9)-(line 768,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testIteration()",
        "snippet": "    public void testIteration() {\n        StrTokenizer tkn = new StrTokenizer(\"a b c\");\n        assertEquals(false, tkn.hasPrevious());\n        try {\n            tkn.previous();\n            fail();\n        } catch (NoSuchElementException ex) {}\n        assertEquals(true, tkn.hasNext());\n        \n        assertEquals(\"a\", tkn.next());\n        try {\n            tkn.remove();\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n        try {\n            tkn.set(\"x\");\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n        try {\n            tkn.add(\"y\");\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n        assertEquals(true, tkn.hasPrevious());\n        assertEquals(true, tkn.hasNext());\n        \n        assertEquals(\"b\", tkn.next());\n        assertEquals(true, tkn.hasPrevious());\n        assertEquals(true, tkn.hasNext());\n        \n        assertEquals(\"c\", tkn.next());\n        assertEquals(true, tkn.hasPrevious());\n        assertEquals(false, tkn.hasNext());\n        \n        try {\n            tkn.next();\n            fail();\n        } catch (NoSuchElementException ex) {}\n        assertEquals(true, tkn.hasPrevious());\n        assertEquals(false, tkn.hasNext());\n    }",
        "begin_line": 771,
        "end_line": 810,
        "comment": "",
        "child_ranges": [
            "(line 772,col 9)-(line 772,col 53)",
            "(line 773,col 9)-(line 773,col 47)",
            "(line 774,col 9)-(line 777,col 46)",
            "(line 778,col 9)-(line 778,col 42)",
            "(line 780,col 9)-(line 780,col 38)",
            "(line 781,col 9)-(line 784,col 53)",
            "(line 785,col 9)-(line 788,col 53)",
            "(line 789,col 9)-(line 792,col 53)",
            "(line 793,col 9)-(line 793,col 46)",
            "(line 794,col 9)-(line 794,col 42)",
            "(line 796,col 9)-(line 796,col 38)",
            "(line 797,col 9)-(line 797,col 46)",
            "(line 798,col 9)-(line 798,col 42)",
            "(line 800,col 9)-(line 800,col 38)",
            "(line 801,col 9)-(line 801,col 46)",
            "(line 802,col 9)-(line 802,col 43)",
            "(line 804,col 9)-(line 807,col 46)",
            "(line 808,col 9)-(line 808,col 46)",
            "(line 809,col 9)-(line 809,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testTokenizeSubclassInputChange()",
        "snippet": "    public void testTokenizeSubclassInputChange() {\n        StrTokenizer tkn = new StrTokenizer(\"a b c d e\") {\n            protected List tokenize(char[] chars, int offset, int count) {\n                return super.tokenize(\"w x y z\".toCharArray(), 2, 5);\n            }\n        };\n        assertEquals(\"x\", tkn.next());\n        assertEquals(\"y\", tkn.next());\n    }",
        "begin_line": 813,
        "end_line": 821,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 814,col 9)-(line 818,col 10)",
            "(line 819,col 9)-(line 819,col 38)",
            "(line 820,col 9)-(line 820,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.Anonymous-0787d9e9-63e1-42c2-942b-5923bd641d36.tokenize(char[], int, int)",
        "snippet": "            protected List tokenize(char[] chars, int offset, int count) {\n                return super.tokenize(\"w x y z\".toCharArray(), 2, 5);\n            }",
        "begin_line": 815,
        "end_line": 817,
        "comment": "",
        "child_ranges": [
            "(line 816,col 17)-(line 816,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testTokenizeSubclassOutputChange()",
        "snippet": "    public void testTokenizeSubclassOutputChange() {\n        StrTokenizer tkn = new StrTokenizer(\"a b c\") {\n            protected List tokenize(char[] chars, int offset, int count) {\n                List list = super.tokenize(chars, offset, count);\n                Collections.reverse(list);\n                return list;\n            }\n        };\n        assertEquals(\"c\", tkn.next());\n        assertEquals(\"b\", tkn.next());\n        assertEquals(\"a\", tkn.next());\n    }",
        "begin_line": 824,
        "end_line": 835,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 825,col 9)-(line 831,col 10)",
            "(line 832,col 9)-(line 832,col 38)",
            "(line 833,col 9)-(line 833,col 38)",
            "(line 834,col 9)-(line 834,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.Anonymous-ef538610-0441-4a62-9f02-c8bd5452bbf9.tokenize(char[], int, int)",
        "snippet": "            protected List tokenize(char[] chars, int offset, int count) {\n                List list = super.tokenize(chars, offset, count);\n                Collections.reverse(list);\n                return list;\n            }",
        "begin_line": 826,
        "end_line": 830,
        "comment": "",
        "child_ranges": [
            "(line 827,col 17)-(line 827,col 65)",
            "(line 828,col 17)-(line 828,col 42)",
            "(line 829,col 17)-(line 829,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang.text.StrTokenizerTest.testToString()",
        "snippet": "    public void testToString() {\n        StrTokenizer tkn = new StrTokenizer(\"a b c d e\");\n        assertEquals(\"StrTokenizer[not tokenized yet]\", tkn.toString());\n        tkn.next();\n        assertEquals(\"StrTokenizer[a, b, c, d, e]\", tkn.toString());\n    }",
        "begin_line": 838,
        "end_line": 843,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 839,col 9)-(line 839,col 57)",
            "(line 840,col 9)-(line 840,col 72)",
            "(line 841,col 9)-(line 841,col 19)",
            "(line 842,col 9)-(line 842,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.MessageFormatExtensionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java",
        "signature": "org.apache.commons.lang.text.MessageFormatExtensionTest.US.getLocale()",
        "snippet": "        protected Locale getLocale() {\n            return Locale.US;\n        }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "\n         * {@inheritDoc}\n         ",
        "child_ranges": [
            "(line 48,col 13)-(line 48,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.MessageFormatExtensionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java",
        "signature": "org.apache.commons.lang.text.MessageFormatExtensionTest.UK.getLocale()",
        "snippet": "        protected Locale getLocale() {\n            return Locale.UK;\n        }",
        "begin_line": 61,
        "end_line": 63,
        "comment": "\n         * {@inheritDoc}\n         ",
        "child_ranges": [
            "(line 62,col 13)-(line 62,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.MessageFormatExtensionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java",
        "signature": "org.apache.commons.lang.text.MessageFormatExtensionTest.DE.getLocale()",
        "snippet": "        protected Locale getLocale() {\n            return Locale.GERMANY;\n        }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n         * {@inheritDoc}\n         ",
        "child_ranges": [
            "(line 76,col 13)-(line 76,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.MessageFormatExtensionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java",
        "signature": "org.apache.commons.lang.text.MessageFormatExtensionTest.IT.getLocale()",
        "snippet": "        protected Locale getLocale() {\n            return Locale.ITALY;\n        }",
        "begin_line": 89,
        "end_line": 91,
        "comment": "\n         * {@inheritDoc}\n         ",
        "child_ranges": [
            "(line 90,col 13)-(line 90,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.MessageFormatExtensionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java",
        "signature": "org.apache.commons.lang.text.MessageFormatExtensionTest.JP.getLocale()",
        "snippet": "        protected Locale getLocale() {\n            return Locale.JAPAN;\n        }",
        "begin_line": 103,
        "end_line": 105,
        "comment": "\n         * {@inheritDoc}\n         ",
        "child_ranges": [
            "(line 104,col 13)-(line 104,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.MessageFormatExtensionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java",
        "signature": "org.apache.commons.lang.text.MessageFormatExtensionTest.CN.getLocale()",
        "snippet": "        protected Locale getLocale() {\n            return Locale.CHINA;\n        }",
        "begin_line": 117,
        "end_line": 119,
        "comment": "\n         * {@inheritDoc}\n         ",
        "child_ranges": [
            "(line 118,col 13)-(line 118,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.MessageFormatExtensionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java",
        "signature": "org.apache.commons.lang.text.MessageFormatExtensionTest.CA.getLocale()",
        "snippet": "        protected Locale getLocale() {\n            return Locale.CANADA;\n        }",
        "begin_line": 131,
        "end_line": 133,
        "comment": "\n         * {@inheritDoc}\n         ",
        "child_ranges": [
            "(line 132,col 13)-(line 132,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.MessageFormatExtensionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java",
        "signature": "org.apache.commons.lang.text.MessageFormatExtensionTest.FR.getLocale()",
        "snippet": "        protected Locale getLocale() {\n            return Locale.FRANCE;\n        }",
        "begin_line": 145,
        "end_line": 147,
        "comment": "\n         * {@inheritDoc}\n         ",
        "child_ranges": [
            "(line 146,col 13)-(line 146,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.MessageFormatExtensionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java",
        "signature": "org.apache.commons.lang.text.MessageFormatExtensionTest.KR.getLocale()",
        "snippet": "        protected Locale getLocale() {\n            return Locale.KOREA;\n        }",
        "begin_line": 159,
        "end_line": 161,
        "comment": "\n         * {@inheritDoc}\n         ",
        "child_ranges": [
            "(line 160,col 13)-(line 160,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.MessageFormatExtensionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java",
        "signature": "org.apache.commons.lang.text.MessageFormatExtensionTest.TW.getLocale()",
        "snippet": "        protected Locale getLocale() {\n            return Locale.TAIWAN;\n        }",
        "begin_line": 173,
        "end_line": 175,
        "comment": "\n         * {@inheritDoc}\n         ",
        "child_ranges": [
            "(line 174,col 13)-(line 174,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.MessageFormatExtensionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java",
        "signature": "org.apache.commons.lang.text.MessageFormatExtensionTest.ProperNameCapitalizationFormat.format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)",
        "snippet": "        public StringBuffer format(Object obj, StringBuffer toAppendTo,\n                FieldPosition fpos) {\n            if (!(obj instanceof String)) {\n                throw new IllegalArgumentException();\n            }\n            char[] buffer = ((String) obj).toCharArray();\n            ParsePosition pos = new ParsePosition(0);\n            while (pos.getIndex() < buffer.length) {\n                char c = buffer[pos.getIndex()];\n                if (Character.isLowerCase(c)) {\n                    c = Character.toUpperCase(c);\n                }\n                if (Character.isUpperCase(c)) {\n                    toAppendTo.append(c);\n                    next(pos);\n                }\n                int start = pos.getIndex();\n                seekDelimiter(buffer, pos);\n                toAppendTo.append(new String(buffer, start, pos.getIndex()\n                        - start).toLowerCase());\n            }\n            return toAppendTo;\n        }",
        "begin_line": 186,
        "end_line": 208,
        "comment": "\n         * {@inheritDoc}\n         ",
        "child_ranges": [
            "(line 188,col 13)-(line 190,col 13)",
            "(line 191,col 13)-(line 191,col 57)",
            "(line 192,col 13)-(line 192,col 53)",
            "(line 193,col 13)-(line 206,col 13)",
            "(line 207,col 13)-(line 207,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.MessageFormatExtensionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java",
        "signature": "org.apache.commons.lang.text.MessageFormatExtensionTest.ProperNameCapitalizationFormat.parseObject(java.lang.String, java.text.ParsePosition)",
        "snippet": "        public Object parseObject(String source, ParsePosition pos) {\n            return source.substring(pos.getIndex());\n        }",
        "begin_line": 213,
        "end_line": 215,
        "comment": "\n         * Unable to do much; return the String.\n         ",
        "child_ranges": [
            "(line 214,col 13)-(line 214,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.MessageFormatExtensionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java",
        "signature": "org.apache.commons.lang.text.MessageFormatExtensionTest.ProperNameCapitalizationFormat.seekDelimiter(char[], java.text.ParsePosition)",
        "snippet": "        private static void seekDelimiter(char[] buffer, ParsePosition pos) {\n            for (; pos.getIndex() < buffer.length\n                    && MATCH.isMatch(buffer, pos.getIndex()) == 0; next(pos))\n                ;\n            if (pos.getIndex() >= buffer.length) {\n                return;\n            }\n            int len = 0;\n            do {\n                len = MATCH.isMatch(buffer, pos.getIndex());\n                pos.setIndex(pos.getIndex() + len);\n            } while (len > 0 && pos.getIndex() < buffer.length);\n        }",
        "begin_line": 217,
        "end_line": 229,
        "comment": "",
        "child_ranges": [
            "(line 218,col 13)-(line 220,col 17)",
            "(line 221,col 13)-(line 223,col 13)",
            "(line 224,col 13)-(line 224,col 24)",
            "(line 225,col 13)-(line 228,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.MessageFormatExtensionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java",
        "signature": "org.apache.commons.lang.text.MessageFormatExtensionTest.ProperNameCapitalizationFormat.next(java.text.ParsePosition)",
        "snippet": "        private static void next(ParsePosition pos) {\n            pos.setIndex(pos.getIndex() + 1);\n        }",
        "begin_line": 231,
        "end_line": 233,
        "comment": "",
        "child_ranges": [
            "(line 232,col 13)-(line 232,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.MessageFormatExtensionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java",
        "signature": "org.apache.commons.lang.text.MessageFormatExtensionTest.createMessageFormat(java.lang.String, java.util.Locale)",
        "snippet": "    protected MessageFormat createMessageFormat(String pattern, Locale locale) {\n        return new ExtendedMessageFormat(pattern, locale,\n                new MultiFormat.Builder().add(\n                        new NameKeyedMetaFormat.Builder().put(\"properName\",\n                                new ProperNameCapitalizationFormat())\n                                .toNameKeyedMetaFormat()).add(\n                        ExtendedMessageFormat.createDefaultMetaFormat(locale))\n                        .toMultiFormat());\n    }",
        "begin_line": 239,
        "end_line": 247,
        "comment": "\n     * {@inheritDoc}\n     ",
        "child_ranges": [
            "(line 240,col 9)-(line 246,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.MessageFormatExtensionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java",
        "signature": "org.apache.commons.lang.text.MessageFormatExtensionTest.testProperName()",
        "snippet": "    public void testProperName() {\n        doAssertions(\"John Q. Public; John Q. Public\",\n                \"{0,properName}; {1,properName}\", new String[] {\n                        \"JOHN Q. PUBLIC\", \"john q. public\" });\n    }",
        "begin_line": 249,
        "end_line": 253,
        "comment": "",
        "child_ranges": [
            "(line 250,col 9)-(line 252,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.MessageFormatExtensionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java",
        "signature": "org.apache.commons.lang.text.MessageFormatExtensionTest.testMixed()",
        "snippet": "    public void testMixed() {\n        StringBuffer expected = new StringBuffer(\"John Q. Public was born on \");\n        Date dob = new GregorianCalendar(1970, Calendar.JANUARY, 01, 0, 15, 20)\n                .getTime();\n        DateFormat longDf = DateFormat.getDateInstance(DateFormat.LONG, locale);\n        longDf.format(dob, expected, new FieldPosition(0));\n        expected.append('.');\n        String pattern = \"{0,properName} was born on {1,date,long}.\";\n        StringBuffer toPattern = new StringBuffer(pattern);\n        if (longDf.equals(DateFormat.getDateInstance(DateFormat.DEFAULT, locale))) {\n            int idx = pattern.indexOf(\",long\");\n            toPattern.delete(idx, idx + \",long\".length());\n        }\n        doAssertions(expected.toString(),\n                pattern, new Object[] {\n                        \"john q. public\",\n                        new GregorianCalendar(1970, Calendar.JANUARY, 01, 0,\n                                15, 20).getTime() }, toPattern.toString());\n    }",
        "begin_line": 255,
        "end_line": 273,
        "comment": "",
        "child_ranges": [
            "(line 256,col 9)-(line 256,col 80)",
            "(line 257,col 9)-(line 258,col 27)",
            "(line 259,col 9)-(line 259,col 80)",
            "(line 260,col 9)-(line 260,col 59)",
            "(line 261,col 9)-(line 261,col 29)",
            "(line 262,col 9)-(line 262,col 69)",
            "(line 263,col 9)-(line 263,col 59)",
            "(line 264,col 9)-(line 267,col 9)",
            "(line 268,col 9)-(line 272,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.CompositeFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/CompositeFormatTest.java",
        "signature": "org.apache.commons.lang.text.CompositeFormatTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 41,
        "end_line": 43,
        "comment": "\n     * Main method.\n     * \n     * @param args  command line arguments, ignored\n     ",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.CompositeFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/CompositeFormatTest.java",
        "signature": "org.apache.commons.lang.text.CompositeFormatTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(CompositeFormatTest.class);\n        suite.setName(\"CompositeFormat Tests\");\n        return suite;\n    }",
        "begin_line": 50,
        "end_line": 54,
        "comment": "\n     * Return a new test suite containing this test case.\n     * \n     * @return a new test suite containing this test case\n     ",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 67)",
            "(line 52,col 9)-(line 52,col 47)",
            "(line 53,col 9)-(line 53,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.CompositeFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/CompositeFormatTest.java",
        "signature": "org.apache.commons.lang.text.CompositeFormatTest.CompositeFormatTest(java.lang.String)",
        "snippet": "    public CompositeFormatTest(String name) {\n        super(name);\n    }",
        "begin_line": 62,
        "end_line": 64,
        "comment": "\n     * Create a new test case with the specified name.\n     * \n     * @param name\n     *            name\n     ",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.CompositeFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/CompositeFormatTest.java",
        "signature": "org.apache.commons.lang.text.CompositeFormatTest.testCompositeFormat()",
        "snippet": "    public void testCompositeFormat() {\n\n        Format parser = new Format() {\n            public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {\n                throw new UnsupportedOperationException(\"Not implemented\");\n            }\n\n            public Object parseObject(String source, ParsePosition pos) {\n                return null;    // do nothing\n            }\n        };\n\n        Format formatter = new Format() {\n            public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {\n                return null;    // do nothing\n            }\n\n            public Object parseObject(String source, ParsePosition pos) {\n                throw new UnsupportedOperationException(\"Not implemented\");\n            }\n        };\n\n        CompositeFormat composite = new CompositeFormat(parser, formatter);\n\n        composite.parseObject(\"\", null);\n        composite.format(new Object(), new StringBuffer(), null);\n        assertEquals( \"Parser get method incorrectly implemented\", parser, composite.getParser() );\n        assertEquals( \"Formatter get method incorrectly implemented\", formatter, composite.getFormatter() );\n    }",
        "begin_line": 70,
        "end_line": 98,
        "comment": "\n     * Ensures that the parse/format separation is correctly maintained. \n     ",
        "child_ranges": [
            "(line 72,col 9)-(line 80,col 10)",
            "(line 82,col 9)-(line 90,col 10)",
            "(line 92,col 9)-(line 92,col 75)",
            "(line 94,col 9)-(line 94,col 40)",
            "(line 95,col 9)-(line 95,col 65)",
            "(line 96,col 9)-(line 96,col 99)",
            "(line 97,col 9)-(line 97,col 108)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.CompositeFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/CompositeFormatTest.java",
        "signature": "org.apache.commons.lang.text.CompositeFormatTest.Anonymous-6c4535f6-1b5d-4165-a559-7178d166e3c2.format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)",
        "snippet": "            public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {\n                throw new UnsupportedOperationException(\"Not implemented\");\n            }",
        "begin_line": 73,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 74,col 17)-(line 74,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.CompositeFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/CompositeFormatTest.java",
        "signature": "org.apache.commons.lang.text.CompositeFormatTest.Anonymous-41831406-b062-4615-86dd-437670eaa762.parseObject(java.lang.String, java.text.ParsePosition)",
        "snippet": "            public Object parseObject(String source, ParsePosition pos) {\n                return null;    // do nothing\n            }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 78,col 17)-(line 78,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.CompositeFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/CompositeFormatTest.java",
        "signature": "org.apache.commons.lang.text.CompositeFormatTest.Anonymous-8d9daeba-805d-45f8-8b49-436f561eda5e.format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)",
        "snippet": "            public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {\n                return null;    // do nothing\n            }",
        "begin_line": 83,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 84,col 17)-(line 84,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.CompositeFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/CompositeFormatTest.java",
        "signature": "org.apache.commons.lang.text.CompositeFormatTest.Anonymous-ae953baf-ed18-4a71-ab7e-ee3491e4ea2a.parseObject(java.lang.String, java.text.ParsePosition)",
        "snippet": "            public Object parseObject(String source, ParsePosition pos) {\n                throw new UnsupportedOperationException(\"Not implemented\");\n            }",
        "begin_line": 87,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 88,col 17)-(line 88,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.CompositeFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/CompositeFormatTest.java",
        "signature": "org.apache.commons.lang.text.CompositeFormatTest.testUsage()",
        "snippet": "    public void testUsage() throws Exception {\n        Format f1 = new SimpleDateFormat(\"MMddyyyy\", Locale.ENGLISH);\n        Format f2 = new SimpleDateFormat(\"MMMM d, yyyy\", Locale.ENGLISH);\n        CompositeFormat c = new CompositeFormat(f1, f2);\n        String testString = \"January 3, 2005\";\n        assertEquals(testString, c.format(c.parseObject(\"01032005\")));\n        assertEquals(testString, c.reformat(\"01032005\"));\n    }",
        "begin_line": 100,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 69)",
            "(line 102,col 9)-(line 102,col 73)",
            "(line 103,col 9)-(line 103,col 56)",
            "(line 104,col 9)-(line 104,col 46)",
            "(line 105,col 9)-(line 105,col 70)",
            "(line 106,col 9)-(line 106,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang.text.StrSubstitutorTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 45,
        "end_line": 47,
        "comment": "\n     * Main method.\n     * \n     * @param args  command line arguments, ignored\n     ",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang.text.StrSubstitutorTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(StrSubstitutorTest.class);\n        suite.setName(\"StrSubstitutor Tests\");\n        return suite;\n    }",
        "begin_line": 54,
        "end_line": 58,
        "comment": "\n     * Return a new test suite containing this test case.\n     * \n     * @return a new test suite containing this test case\n     ",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 66)",
            "(line 56,col 9)-(line 56,col 46)",
            "(line 57,col 9)-(line 57,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang.text.StrSubstitutorTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        super.setUp();\n        values = new HashMap();\n        values.put(\"animal\", \"quick brown fox\");\n        values.put(\"target\", \"lazy dog\");\n    }",
        "begin_line": 60,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 22)",
            "(line 62,col 9)-(line 62,col 31)",
            "(line 63,col 9)-(line 63,col 48)",
            "(line 64,col 9)-(line 64,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang.text.StrSubstitutorTest.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        super.tearDown();\n        values = null;\n    }",
        "begin_line": 67,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 25)",
            "(line 69,col 9)-(line 69,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang.text.StrSubstitutorTest.testReplaceSimple()",
        "snippet": "    public void testReplaceSimple() {\n        doTestReplace(\"The quick brown fox jumps over the lazy dog.\", \"The ${animal} jumps over the ${target}.\", true);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Tests simple key replace.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 119)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang.text.StrSubstitutorTest.testReplaceSolo()",
        "snippet": "    public void testReplaceSolo() {\n        doTestReplace(\"quick brown fox\", \"${animal}\", false);\n    }",
        "begin_line": 83,
        "end_line": 85,
        "comment": "\n     * Tests simple key replace.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang.text.StrSubstitutorTest.testReplaceNoVariables()",
        "snippet": "    public void testReplaceNoVariables() {\n        doTestNoReplace(\"The balloon arrived.\");\n    }",
        "begin_line": 90,
        "end_line": 92,
        "comment": "\n     * Tests replace with no variables.\n     ",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang.text.StrSubstitutorTest.testReplaceNull()",
        "snippet": "    public void testReplaceNull() {\n        doTestNoReplace(null);\n    }",
        "begin_line": 97,
        "end_line": 99,
        "comment": "\n     * Tests replace with null.\n     ",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang.text.StrSubstitutorTest.testReplaceEmpty()",
        "snippet": "    public void testReplaceEmpty() {\n        doTestNoReplace(\"\");\n    }",
        "begin_line": 104,
        "end_line": 106,
        "comment": "\n     * Tests replace with null.\n     ",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang.text.StrSubstitutorTest.testReplaceChangedMap()",
        "snippet": "    public void testReplaceChangedMap() {\n        StrSubstitutor sub = new StrSubstitutor(values);\n        values.put(\"target\", \"moon\");\n        assertEquals(\"The quick brown fox jumps over the moon.\", sub.replace(\"The ${animal} jumps over the ${target}.\"));\n    }",
        "begin_line": 111,
        "end_line": 115,
        "comment": "\n     * Tests key replace changing map after initialization (not recommended).\n     ",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 56)",
            "(line 113,col 9)-(line 113,col 37)",
            "(line 114,col 9)-(line 114,col 121)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang.text.StrSubstitutorTest.testReplaceUnknownKey()",
        "snippet": "    public void testReplaceUnknownKey() {\n        doTestReplace(\"The ${person} jumps over the lazy dog.\", \"The ${person} jumps over the ${target}.\", true);\n    }",
        "begin_line": 120,
        "end_line": 122,
        "comment": "\n     * Tests unknown key replace.\n     ",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 113)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang.text.StrSubstitutorTest.testReplaceAdjacentAtStart()",
        "snippet": "    public void testReplaceAdjacentAtStart() {\n        values.put(\"code\", \"GBP\");\n        values.put(\"amount\", \"12.50\");\n        StrSubstitutor sub = new StrSubstitutor(values);\n        assertEquals(\"GBP12.50 charged\", sub.replace(\"${code}${amount} charged\"));\n    }",
        "begin_line": 127,
        "end_line": 132,
        "comment": "\n     * Tests adjacent keys.\n     ",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 34)",
            "(line 129,col 9)-(line 129,col 38)",
            "(line 130,col 9)-(line 130,col 56)",
            "(line 131,col 9)-(line 131,col 82)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang.text.StrSubstitutorTest.testReplaceAdjacentAtEnd()",
        "snippet": "    public void testReplaceAdjacentAtEnd() {\n        values.put(\"code\", \"GBP\");\n        values.put(\"amount\", \"12.50\");\n        StrSubstitutor sub = new StrSubstitutor(values);\n        assertEquals(\"Amount is GBP12.50\", sub.replace(\"Amount is ${code}${amount}\"));\n    }",
        "begin_line": 137,
        "end_line": 142,
        "comment": "\n     * Tests adjacent keys.\n     ",
        "child_ranges": [
            "(line 138,col 9)-(line 138,col 34)",
            "(line 139,col 9)-(line 139,col 38)",
            "(line 140,col 9)-(line 140,col 56)",
            "(line 141,col 9)-(line 141,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang.text.StrSubstitutorTest.testReplaceRecursive()",
        "snippet": "    public void testReplaceRecursive() {\n        values.put(\"animal\", \"${critter}\");\n        values.put(\"target\", \"${pet}\");\n        values.put(\"pet\", \"${petCharacteristic} dog\");\n        values.put(\"petCharacteristic\", \"lazy\");\n        values.put(\"critter\", \"${critterSpeed} ${critterColor} ${critterType}\");\n        values.put(\"critterSpeed\", \"quick\");\n        values.put(\"critterColor\", \"brown\");\n        values.put(\"critterType\", \"fox\");\n        doTestReplace(\"The quick brown fox jumps over the lazy dog.\", \"The ${animal} jumps over the ${target}.\", true);\n    }",
        "begin_line": 147,
        "end_line": 157,
        "comment": "\n     * Tests simple recursive replace.\n     ",
        "child_ranges": [
            "(line 148,col 9)-(line 148,col 43)",
            "(line 149,col 9)-(line 149,col 39)",
            "(line 150,col 9)-(line 150,col 54)",
            "(line 151,col 9)-(line 151,col 48)",
            "(line 152,col 9)-(line 152,col 80)",
            "(line 153,col 9)-(line 153,col 44)",
            "(line 154,col 9)-(line 154,col 44)",
            "(line 155,col 9)-(line 155,col 41)",
            "(line 156,col 9)-(line 156,col 119)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang.text.StrSubstitutorTest.testReplaceEscaping()",
        "snippet": "    public void testReplaceEscaping() {\n        doTestReplace(\"The ${animal} jumps over the lazy dog.\", \"The $${animal} jumps over the ${target}.\", true);\n    }",
        "begin_line": 162,
        "end_line": 164,
        "comment": "\n     * Tests escaping.\n     ",
        "child_ranges": [
            "(line 163,col 9)-(line 163,col 114)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang.text.StrSubstitutorTest.testReplaceSoloEscaping()",
        "snippet": "    public void testReplaceSoloEscaping() {\n        doTestReplace(\"${animal}\", \"$${animal}\", false);\n    }",
        "begin_line": 169,
        "end_line": 171,
        "comment": "\n     * Tests escaping.\n     ",
        "child_ranges": [
            "(line 170,col 9)-(line 170,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang.text.StrSubstitutorTest.testReplaceComplexEscaping()",
        "snippet": "    public void testReplaceComplexEscaping() {\n        doTestReplace(\"The ${quick brown fox} jumps over the lazy dog.\", \"The $${${animal}} jumps over the ${target}.\", true);\n    }",
        "begin_line": 176,
        "end_line": 178,
        "comment": "\n     * Tests complex escaping.\n     ",
        "child_ranges": [
            "(line 177,col 9)-(line 177,col 126)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang.text.StrSubstitutorTest.testReplaceNoPefixNoSuffix()",
        "snippet": "    public void testReplaceNoPefixNoSuffix() {\n        doTestReplace(\"The animal jumps over the lazy dog.\", \"The animal jumps over the ${target}.\", true);\n    }",
        "begin_line": 183,
        "end_line": 185,
        "comment": "\n     * Tests when no prefix or suffix.\n     ",
        "child_ranges": [
            "(line 184,col 9)-(line 184,col 107)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang.text.StrSubstitutorTest.testReplaceIncompletePefix()",
        "snippet": "    public void testReplaceIncompletePefix() {\n        doTestReplace(\"The {animal} jumps over the lazy dog.\", \"The {animal} jumps over the ${target}.\", true);\n    }",
        "begin_line": 190,
        "end_line": 192,
        "comment": "\n     * Tests when no incomplete prefix.\n     ",
        "child_ranges": [
            "(line 191,col 9)-(line 191,col 111)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang.text.StrSubstitutorTest.testReplacePrefixNoSuffix()",
        "snippet": "    public void testReplacePrefixNoSuffix() {\n        doTestReplace(\"The ${animal jumps over the ${target} lazy dog.\", \"The ${animal jumps over the ${target} ${target}.\", true);\n    }",
        "begin_line": 197,
        "end_line": 199,
        "comment": "\n     * Tests when prefix but no suffix.\n     ",
        "child_ranges": [
            "(line 198,col 9)-(line 198,col 131)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang.text.StrSubstitutorTest.testReplaceNoPrefixSuffix()",
        "snippet": "    public void testReplaceNoPrefixSuffix() {\n        doTestReplace(\"The animal} jumps over the lazy dog.\", \"The animal} jumps over the ${target}.\", true);\n    }",
        "begin_line": 204,
        "end_line": 206,
        "comment": "\n     * Tests when suffix but no prefix.\n     ",
        "child_ranges": [
            "(line 205,col 9)-(line 205,col 109)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang.text.StrSubstitutorTest.testReplaceEmptyKeys()",
        "snippet": "    public void testReplaceEmptyKeys() {\n        doTestReplace(\"The ${} jumps over the lazy dog.\", \"The ${} jumps over the ${target}.\", true);\n    }",
        "begin_line": 211,
        "end_line": 213,
        "comment": "\n     * Tests when no variable name.\n     ",
        "child_ranges": [
            "(line 212,col 9)-(line 212,col 101)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang.text.StrSubstitutorTest.testReplaceToIdentical()",
        "snippet": "    public void testReplaceToIdentical() {\n        values.put(\"animal\", \"$${${thing}}\");\n        values.put(\"thing\", \"animal\");\n        doTestReplace(\"The ${animal} jumps.\", \"The ${animal} jumps.\", true);\n    }",
        "begin_line": 218,
        "end_line": 222,
        "comment": "\n     * Tests replace creates output same as input.\n     ",
        "child_ranges": [
            "(line 219,col 9)-(line 219,col 45)",
            "(line 220,col 9)-(line 220,col 38)",
            "(line 221,col 9)-(line 221,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang.text.StrSubstitutorTest.testCyclicReplacement()",
        "snippet": "    public void testCyclicReplacement() {\n        Map map = new HashMap();\n        map.put(\"animal\", \"${critter}\");\n        map.put(\"target\", \"${pet}\");\n        map.put(\"pet\", \"${petCharacteristic} dog\");\n        map.put(\"petCharacteristic\", \"lazy\");\n        map.put(\"critter\", \"${critterSpeed} ${critterColor} ${critterType}\");\n        map.put(\"critterSpeed\", \"quick\");\n        map.put(\"critterColor\", \"brown\");\n        map.put(\"critterType\", \"${animal}\");\n        StrSubstitutor sub = new StrSubstitutor(map);\n        try {\n            sub.replace(\"The ${animal} jumps over the ${target}.\");\n            fail(\"Cyclic replacement was not detected!\");\n        } catch (IllegalStateException ex) {\n            // expected\n        }\n    }",
        "begin_line": 228,
        "end_line": 245,
        "comment": "\n     * Tests a cyclic replace operation.\n     * The cycle should be detected and cause an exception to be thrown.\n     ",
        "child_ranges": [
            "(line 229,col 9)-(line 229,col 32)",
            "(line 230,col 9)-(line 230,col 40)",
            "(line 231,col 9)-(line 231,col 36)",
            "(line 232,col 9)-(line 232,col 51)",
            "(line 233,col 9)-(line 233,col 45)",
            "(line 234,col 9)-(line 234,col 77)",
            "(line 235,col 9)-(line 235,col 41)",
            "(line 236,col 9)-(line 236,col 41)",
            "(line 237,col 9)-(line 237,col 44)",
            "(line 238,col 9)-(line 238,col 53)",
            "(line 239,col 9)-(line 244,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang.text.StrSubstitutorTest.testReplaceWeirdPattens()",
        "snippet": "    public void testReplaceWeirdPattens() {\n        doTestNoReplace(\"\");\n        doTestNoReplace(\"${}\");\n        doTestNoReplace(\"${ }\");\n        doTestNoReplace(\"${\\t}\");\n        doTestNoReplace(\"${\\n}\");\n        doTestNoReplace(\"${\\b}\");\n        doTestNoReplace(\"${\");\n        doTestNoReplace(\"$}\");\n        doTestNoReplace(\"}\");\n        doTestNoReplace(\"${}$\");\n        doTestNoReplace(\"${${\");\n        doTestNoReplace(\"${${}}\");\n        doTestNoReplace(\"${$${}}\");\n        doTestNoReplace(\"${$$${}}\");\n        doTestNoReplace(\"${$$${$}}\");\n        doTestNoReplace(\"${${}}\");\n        doTestNoReplace(\"${${ }}\");\n    }",
        "begin_line": 250,
        "end_line": 268,
        "comment": "\n     * Tests interpolation with weird boundary patterns.\n     ",
        "child_ranges": [
            "(line 251,col 9)-(line 251,col 28)",
            "(line 252,col 9)-(line 252,col 31)",
            "(line 253,col 9)-(line 253,col 32)",
            "(line 254,col 9)-(line 254,col 33)",
            "(line 255,col 9)-(line 255,col 33)",
            "(line 256,col 9)-(line 256,col 33)",
            "(line 257,col 9)-(line 257,col 30)",
            "(line 258,col 9)-(line 258,col 30)",
            "(line 259,col 9)-(line 259,col 29)",
            "(line 260,col 9)-(line 260,col 32)",
            "(line 261,col 9)-(line 261,col 32)",
            "(line 262,col 9)-(line 262,col 34)",
            "(line 263,col 9)-(line 263,col 35)",
            "(line 264,col 9)-(line 264,col 36)",
            "(line 265,col 9)-(line 265,col 37)",
            "(line 266,col 9)-(line 266,col 34)",
            "(line 267,col 9)-(line 267,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang.text.StrSubstitutorTest.testReplacePartialString_noReplace()",
        "snippet": "    public void testReplacePartialString_noReplace() {\n        StrSubstitutor sub = new StrSubstitutor();\n        assertEquals(\"${animal} jumps\", sub.replace(\"The ${animal} jumps over the ${target}.\", 4, 15));\n    }",
        "begin_line": 273,
        "end_line": 276,
        "comment": "\n     * Tests simple key replace.\n     ",
        "child_ranges": [
            "(line 274,col 9)-(line 274,col 50)",
            "(line 275,col 9)-(line 275,col 103)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang.text.StrSubstitutorTest.testResolveVariable()",
        "snippet": "    public void testResolveVariable() {\n        final StrBuilder builder = new StrBuilder(\"Hi ${name}!\");\n        Map map = new HashMap();\n        map.put(\"name\", \"commons\");\n        StrSubstitutor sub = new StrSubstitutor(map) {\n            protected String resolveVariable(String variableName, StrBuilder buf, int startPos, int endPos) {\n                assertEquals(\"name\", variableName);\n                assertSame(builder, buf);\n                assertEquals(3, startPos);\n                assertEquals(10, endPos);\n                return \"jakarta\";\n            }\n        };\n        sub.replaceIn(builder);\n        assertEquals(\"Hi jakarta!\", builder.toString());\n    }",
        "begin_line": 282,
        "end_line": 297,
        "comment": "\n     * Tests protected.\n     ",
        "child_ranges": [
            "(line 283,col 9)-(line 283,col 65)",
            "(line 284,col 9)-(line 284,col 32)",
            "(line 285,col 9)-(line 285,col 35)",
            "(line 286,col 9)-(line 294,col 10)",
            "(line 295,col 9)-(line 295,col 31)",
            "(line 296,col 9)-(line 296,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang.text.StrSubstitutorTest.Anonymous-c4d2efbb-8d08-4df3-b12a-dbdc64e4c718.resolveVariable(java.lang.String, org.apache.commons.lang.text.StrBuilder, int, int)",
        "snippet": "            protected String resolveVariable(String variableName, StrBuilder buf, int startPos, int endPos) {\n                assertEquals(\"name\", variableName);\n                assertSame(builder, buf);\n                assertEquals(3, startPos);\n                assertEquals(10, endPos);\n                return \"jakarta\";\n            }",
        "begin_line": 287,
        "end_line": 293,
        "comment": "",
        "child_ranges": [
            "(line 288,col 17)-(line 288,col 51)",
            "(line 289,col 17)-(line 289,col 41)",
            "(line 290,col 17)-(line 290,col 42)",
            "(line 291,col 17)-(line 291,col 41)",
            "(line 292,col 17)-(line 292,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang.text.StrSubstitutorTest.testConstructorNoArgs()",
        "snippet": "    public void testConstructorNoArgs() {\n        StrSubstitutor sub = new StrSubstitutor();\n        assertEquals(\"Hi ${name}\", sub.replace(\"Hi ${name}\"));\n    }",
        "begin_line": 303,
        "end_line": 306,
        "comment": "\n     * Tests constructor.\n     ",
        "child_ranges": [
            "(line 304,col 9)-(line 304,col 50)",
            "(line 305,col 9)-(line 305,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang.text.StrSubstitutorTest.testConstructorMapPrefixSuffix()",
        "snippet": "    public void testConstructorMapPrefixSuffix() {\n        Map map = new HashMap();\n        map.put(\"name\", \"commons\");\n        StrSubstitutor sub = new StrSubstitutor(map, \"<\", \">\");\n        assertEquals(\"Hi < commons\", sub.replace(\"Hi $< <name>\"));\n    }",
        "begin_line": 311,
        "end_line": 316,
        "comment": "\n     * Tests constructor.\n     ",
        "child_ranges": [
            "(line 312,col 9)-(line 312,col 32)",
            "(line 313,col 9)-(line 313,col 35)",
            "(line 314,col 9)-(line 314,col 63)",
            "(line 315,col 9)-(line 315,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang.text.StrSubstitutorTest.testConstructorMapFull()",
        "snippet": "    public void testConstructorMapFull() {\n        Map map = new HashMap();\n        map.put(\"name\", \"commons\");\n        StrSubstitutor sub = new StrSubstitutor(map, \"<\", \">\", '!');\n        assertEquals(\"Hi < commons\", sub.replace(\"Hi !< <name>\"));\n    }",
        "begin_line": 321,
        "end_line": 326,
        "comment": "\n     * Tests constructor.\n     ",
        "child_ranges": [
            "(line 322,col 9)-(line 322,col 32)",
            "(line 323,col 9)-(line 323,col 35)",
            "(line 324,col 9)-(line 324,col 68)",
            "(line 325,col 9)-(line 325,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang.text.StrSubstitutorTest.testGetSetEscape()",
        "snippet": "    public void testGetSetEscape() {\n        StrSubstitutor sub = new StrSubstitutor();\n        assertEquals('$', sub.getEscapeChar());\n        sub.setEscapeChar('<');\n        assertEquals('<', sub.getEscapeChar());\n    }",
        "begin_line": 332,
        "end_line": 337,
        "comment": "\n     * Tests get set.\n     ",
        "child_ranges": [
            "(line 333,col 9)-(line 333,col 50)",
            "(line 334,col 9)-(line 334,col 47)",
            "(line 335,col 9)-(line 335,col 31)",
            "(line 336,col 9)-(line 336,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang.text.StrSubstitutorTest.testGetSetPrefix()",
        "snippet": "    public void testGetSetPrefix() {\n        StrSubstitutor sub = new StrSubstitutor();\n        assertEquals(true, sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher);\n        sub.setVariablePrefix('<');\n        assertEquals(true, sub.getVariablePrefixMatcher() instanceof StrMatcher.CharMatcher);\n        \n        sub.setVariablePrefix(\"<<\");\n        assertEquals(true, sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher);\n        try {\n            sub.setVariablePrefix((String) null);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        assertEquals(true, sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher);\n        \n        StrMatcher matcher = StrMatcher.commaMatcher();\n        sub.setVariablePrefixMatcher(matcher);\n        assertSame(matcher, sub.getVariablePrefixMatcher());\n        try {\n            sub.setVariablePrefixMatcher((StrMatcher) null);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        assertSame(matcher, sub.getVariablePrefixMatcher());\n    }",
        "begin_line": 342,
        "end_line": 368,
        "comment": "\n     * Tests get set.\n     ",
        "child_ranges": [
            "(line 343,col 9)-(line 343,col 50)",
            "(line 344,col 9)-(line 344,col 95)",
            "(line 345,col 9)-(line 345,col 35)",
            "(line 346,col 9)-(line 346,col 93)",
            "(line 348,col 9)-(line 348,col 36)",
            "(line 349,col 9)-(line 349,col 95)",
            "(line 350,col 9)-(line 355,col 9)",
            "(line 356,col 9)-(line 356,col 95)",
            "(line 358,col 9)-(line 358,col 55)",
            "(line 359,col 9)-(line 359,col 46)",
            "(line 360,col 9)-(line 360,col 60)",
            "(line 361,col 9)-(line 366,col 9)",
            "(line 367,col 9)-(line 367,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang.text.StrSubstitutorTest.testGetSetSuffix()",
        "snippet": "    public void testGetSetSuffix() {\n        StrSubstitutor sub = new StrSubstitutor();\n        assertEquals(true, sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher);\n        sub.setVariableSuffix('<');\n        assertEquals(true, sub.getVariableSuffixMatcher() instanceof StrMatcher.CharMatcher);\n        \n        sub.setVariableSuffix(\"<<\");\n        assertEquals(true, sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher);\n        try {\n            sub.setVariableSuffix((String) null);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        assertEquals(true, sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher);\n        \n        StrMatcher matcher = StrMatcher.commaMatcher();\n        sub.setVariableSuffixMatcher(matcher);\n        assertSame(matcher, sub.getVariableSuffixMatcher());\n        try {\n            sub.setVariableSuffixMatcher((StrMatcher) null);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        assertSame(matcher, sub.getVariableSuffixMatcher());\n    }",
        "begin_line": 373,
        "end_line": 399,
        "comment": "\n     * Tests get set.\n     ",
        "child_ranges": [
            "(line 374,col 9)-(line 374,col 50)",
            "(line 375,col 9)-(line 375,col 95)",
            "(line 376,col 9)-(line 376,col 35)",
            "(line 377,col 9)-(line 377,col 93)",
            "(line 379,col 9)-(line 379,col 36)",
            "(line 380,col 9)-(line 380,col 95)",
            "(line 381,col 9)-(line 386,col 9)",
            "(line 387,col 9)-(line 387,col 95)",
            "(line 389,col 9)-(line 389,col 55)",
            "(line 390,col 9)-(line 390,col 46)",
            "(line 391,col 9)-(line 391,col 60)",
            "(line 392,col 9)-(line 397,col 9)",
            "(line 398,col 9)-(line 398,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang.text.StrSubstitutorTest.testStaticReplace()",
        "snippet": "    public void testStaticReplace() {\n        Map map = new HashMap();\n        map.put(\"name\", \"commons\");\n        assertEquals(\"Hi commons!\", StrSubstitutor.replace(\"Hi ${name}!\", map));\n    }",
        "begin_line": 405,
        "end_line": 409,
        "comment": "\n     * Tests static.\n     ",
        "child_ranges": [
            "(line 406,col 9)-(line 406,col 32)",
            "(line 407,col 9)-(line 407,col 35)",
            "(line 408,col 9)-(line 408,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang.text.StrSubstitutorTest.testStaticReplacePrefixSuffix()",
        "snippet": "    public void testStaticReplacePrefixSuffix() {\n        Map map = new HashMap();\n        map.put(\"name\", \"commons\");\n        assertEquals(\"Hi commons!\", StrSubstitutor.replace(\"Hi <name>!\", map, \"<\", \">\"));\n    }",
        "begin_line": 414,
        "end_line": 418,
        "comment": "\n     * Tests static.\n     ",
        "child_ranges": [
            "(line 415,col 9)-(line 415,col 32)",
            "(line 416,col 9)-(line 416,col 35)",
            "(line 417,col 9)-(line 417,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang.text.StrSubstitutorTest.testStaticReplaceSystemProperties()",
        "snippet": "    public void testStaticReplaceSystemProperties() {\n        StrBuilder buf = new StrBuilder();\n        buf.append(\"Hi \").append(System.getProperty(\"user.name\"));\n        buf.append(\", you are working with \");\n        buf.append(System.getProperty(\"os.name\"));\n        buf.append(\", your home directory is \");\n        buf.append(System.getProperty(\"user.home\")).append('.');\n        assertEquals(buf.toString(), StrSubstitutor.replaceSystemProperties(\"Hi ${user.name}, you are \"\n            + \"working with ${os.name}, your home \"\n            + \"directory is ${user.home}.\"));\n    }",
        "begin_line": 423,
        "end_line": 433,
        "comment": "\n     * Tests interpolation with system properties.\n     ",
        "child_ranges": [
            "(line 424,col 9)-(line 424,col 42)",
            "(line 425,col 9)-(line 425,col 66)",
            "(line 426,col 9)-(line 426,col 46)",
            "(line 427,col 9)-(line 427,col 50)",
            "(line 428,col 9)-(line 428,col 48)",
            "(line 429,col 9)-(line 429,col 64)",
            "(line 430,col 9)-(line 432,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang.text.StrSubstitutorTest.doTestReplace(java.lang.String, java.lang.String, boolean)",
        "snippet": "    private void doTestReplace(String expectedResult, String replaceTemplate, boolean substring) {\n        String expectedShortResult = expectedResult.substring(1, expectedResult.length() - 1);\n        StrSubstitutor sub = new StrSubstitutor(values);\n        \n        // replace using String\n        assertEquals(expectedResult, sub.replace(replaceTemplate));\n        if (substring) {\n            assertEquals(expectedShortResult, sub.replace(replaceTemplate, 1, replaceTemplate.length() - 2));\n        }\n        \n        // replace using char[]\n        char[] chars = replaceTemplate.toCharArray();\n        assertEquals(expectedResult, sub.replace(chars));\n        if (substring) {\n            assertEquals(expectedShortResult, sub.replace(chars, 1, chars.length - 2));\n        }\n        \n        // replace using StringBuffer\n        StringBuffer buf = new StringBuffer(replaceTemplate);\n        assertEquals(expectedResult, sub.replace(buf));\n        if (substring) {\n            assertEquals(expectedShortResult, sub.replace(buf, 1, buf.length() - 2));\n        }\n        \n        // replace using StrBuilder\n        StrBuilder bld = new StrBuilder(replaceTemplate);\n        assertEquals(expectedResult, sub.replace(bld));\n        if (substring) {\n            assertEquals(expectedShortResult, sub.replace(bld, 1, bld.length() - 2));\n        }\n        \n        // replace using object\n        MutableObject obj = new MutableObject(replaceTemplate);  // toString returns template\n        assertEquals(expectedResult, sub.replace(obj));\n        \n        // replace in StringBuffer\n        buf = new StringBuffer(replaceTemplate);\n        assertEquals(true, sub.replaceIn(buf));\n        assertEquals(expectedResult, buf.toString());\n        if (substring) {\n            buf = new StringBuffer(replaceTemplate);\n            assertEquals(true, sub.replaceIn(buf, 1, buf.length() - 2));\n            assertEquals(expectedResult, buf.toString());  // expect full result as remainder is untouched\n        }\n        \n        // replace in StrBuilder\n        bld = new StrBuilder(replaceTemplate);\n        assertEquals(true, sub.replaceIn(bld));\n        assertEquals(expectedResult, bld.toString());\n        if (substring) {\n            bld = new StrBuilder(replaceTemplate);\n            assertEquals(true, sub.replaceIn(bld, 1, bld.length() - 2));\n            assertEquals(expectedResult, bld.toString());  // expect full result as remainder is untouched\n        }\n    }",
        "begin_line": 436,
        "end_line": 490,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 437,col 9)-(line 437,col 94)",
            "(line 438,col 9)-(line 438,col 56)",
            "(line 441,col 9)-(line 441,col 67)",
            "(line 442,col 9)-(line 444,col 9)",
            "(line 447,col 9)-(line 447,col 53)",
            "(line 448,col 9)-(line 448,col 57)",
            "(line 449,col 9)-(line 451,col 9)",
            "(line 454,col 9)-(line 454,col 61)",
            "(line 455,col 9)-(line 455,col 55)",
            "(line 456,col 9)-(line 458,col 9)",
            "(line 461,col 9)-(line 461,col 57)",
            "(line 462,col 9)-(line 462,col 55)",
            "(line 463,col 9)-(line 465,col 9)",
            "(line 468,col 9)-(line 468,col 63)",
            "(line 469,col 9)-(line 469,col 55)",
            "(line 472,col 9)-(line 472,col 48)",
            "(line 473,col 9)-(line 473,col 47)",
            "(line 474,col 9)-(line 474,col 53)",
            "(line 475,col 9)-(line 479,col 9)",
            "(line 482,col 9)-(line 482,col 46)",
            "(line 483,col 9)-(line 483,col 47)",
            "(line 484,col 9)-(line 484,col 53)",
            "(line 485,col 9)-(line 489,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang.text.StrSubstitutorTest.doTestNoReplace(java.lang.String)",
        "snippet": "    private void doTestNoReplace(String replaceTemplate) {\n        StrSubstitutor sub = new StrSubstitutor(values);\n        \n        if (replaceTemplate == null) {\n            assertEquals(null, sub.replace((String) null));\n            assertEquals(null, sub.replace((String) null, 0, 100));\n            assertEquals(null, sub.replace((char[]) null));\n            assertEquals(null, sub.replace((char[]) null, 0, 100));\n            assertEquals(null, sub.replace((StringBuffer) null));\n            assertEquals(null, sub.replace((StringBuffer) null, 0, 100));\n            assertEquals(null, sub.replace((StrBuilder) null));\n            assertEquals(null, sub.replace((StrBuilder) null, 0, 100));\n            assertEquals(null, sub.replace((Object) null));\n            assertEquals(false, sub.replaceIn((StringBuffer) null));\n            assertEquals(false, sub.replaceIn((StringBuffer) null, 0, 100));\n            assertEquals(false, sub.replaceIn((StrBuilder) null));\n            assertEquals(false, sub.replaceIn((StrBuilder) null, 0, 100));\n        } else {\n            assertEquals(replaceTemplate, sub.replace(replaceTemplate));\n            StrBuilder bld = new StrBuilder(replaceTemplate);\n            assertEquals(false, sub.replaceIn(bld));\n            assertEquals(replaceTemplate, bld.toString());\n        }\n    }",
        "begin_line": 492,
        "end_line": 515,
        "comment": "",
        "child_ranges": [
            "(line 493,col 9)-(line 493,col 56)",
            "(line 495,col 9)-(line 514,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.AbstractMessageFormatTest",
        "child_classes": [
            "org.apache.commons.lang.text.MessageFormatTest",
            "org.apache.commons.lang.text.MessageFormatExtensionTest",
            "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.AbstractMessageFormatTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        super.setUp();\n        this.locale = getLocale();\n    }",
        "begin_line": 61,
        "end_line": 64,
        "comment": "\n     * {@inheritDoc}\n     ",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 22)",
            "(line 63,col 9)-(line 63,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.AbstractMessageFormatTest",
        "child_classes": [
            "org.apache.commons.lang.text.MessageFormatTest",
            "org.apache.commons.lang.text.MessageFormatExtensionTest",
            "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.AbstractMessageFormatTest.createMessageFormat(java.lang.String, java.util.Locale)",
        "snippet": "    protected abstract MessageFormat createMessageFormat(String pattern,\n            Locale locale);",
        "begin_line": 72,
        "end_line": 73,
        "comment": "\n     * Create a MessageFormat.\n     * @param pattern\n     * @param locale\n     * @return\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.text.AbstractMessageFormatTest",
        "child_classes": [
            "org.apache.commons.lang.text.MessageFormatTest",
            "org.apache.commons.lang.text.MessageFormatExtensionTest",
            "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.AbstractMessageFormatTest.getLocale()",
        "snippet": "    protected abstract Locale getLocale();",
        "begin_line": 79,
        "end_line": 79,
        "comment": "\n     * Get the Locale to use.\n     * @return\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.text.AbstractMessageFormatTest",
        "child_classes": [
            "org.apache.commons.lang.text.MessageFormatTest",
            "org.apache.commons.lang.text.MessageFormatExtensionTest",
            "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.AbstractMessageFormatTest.doAssertions(java.lang.String, java.lang.String, java.lang.Object[])",
        "snippet": "    protected void doAssertions(String expected, String pattern, Object[] args) {\n        doAssertions(expected, pattern, args, pattern);\n    }",
        "begin_line": 81,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.AbstractMessageFormatTest",
        "child_classes": [
            "org.apache.commons.lang.text.MessageFormatTest",
            "org.apache.commons.lang.text.MessageFormatExtensionTest",
            "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.AbstractMessageFormatTest.doAssertions(java.lang.String, java.lang.String, java.lang.Object[], java.lang.String)",
        "snippet": "    protected void doAssertions(String expected, String pattern, Object[] args,\n            String toPattern) {\n        MessageFormat f = createMessageFormat(pattern, locale);\n        assertEquals(expected, f.format(args));\n        if (SystemUtils.isJavaVersionAtLeast(140)) {\n            assertEquals(toPattern, f.toPattern());\n        }\n    }",
        "begin_line": 85,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 63)",
            "(line 88,col 9)-(line 88,col 47)",
            "(line 89,col 9)-(line 91,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.AbstractMessageFormatTest",
        "child_classes": [
            "org.apache.commons.lang.text.MessageFormatTest",
            "org.apache.commons.lang.text.MessageFormatExtensionTest",
            "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.AbstractMessageFormatTest.doAssertions(java.text.Format, java.lang.Object[])",
        "snippet": "    protected void doAssertions(Format format, Object[] args) {\n        doAssertions(format, args, null);\n    }",
        "begin_line": 94,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.AbstractMessageFormatTest",
        "child_classes": [
            "org.apache.commons.lang.text.MessageFormatTest",
            "org.apache.commons.lang.text.MessageFormatExtensionTest",
            "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.AbstractMessageFormatTest.doAssertions(java.text.Format, java.lang.Object[], java.lang.String)",
        "snippet": "    protected void doAssertions(Format format, Object[] args, String formatName) {\n        doAssertions(format, args, formatName, null);\n    }",
        "begin_line": 98,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.AbstractMessageFormatTest",
        "child_classes": [
            "org.apache.commons.lang.text.MessageFormatTest",
            "org.apache.commons.lang.text.MessageFormatExtensionTest",
            "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.AbstractMessageFormatTest.doAssertions(java.text.Format, java.lang.Object[], java.lang.String, java.lang.String)",
        "snippet": "    protected void doAssertions(Format format, Object[] args,\n            String formatName, String decodeFormatName) {\n        StringBuffer pattern = new StringBuffer();\n        StringBuffer expected = new StringBuffer();\n        StringBuffer decodePattern = new StringBuffer();\n        for (int i = 0; i < args.length; i++) {\n            pattern.append(i).append(\": {\").append(i);\n            if (formatName != null) {\n                pattern.append(',').append(formatName);\n            }\n            pattern.append(\"}; \");\n            expected.append(i).append(\": \");\n            if (format != null) {\n                format.format(args[i], expected, new FieldPosition(0));\n            } else {\n                expected.append(String.valueOf(args[i]));\n            }\n            expected.append(\"; \");\n            decodePattern.append(i).append(\": {\").append(i);\n            if (decodeFormatName != null || formatName != null) {\n                decodePattern.append(',').append(\n                        decodeFormatName == null ? formatName\n                                : decodeFormatName);\n            }\n            decodePattern.append(\"}; \");\n        }\n        doAssertions(expected.toString(), pattern.toString(), args,\n                decodePattern.toString());\n    }",
        "begin_line": 102,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 50)",
            "(line 105,col 9)-(line 105,col 51)",
            "(line 106,col 9)-(line 106,col 56)",
            "(line 107,col 9)-(line 127,col 9)",
            "(line 128,col 9)-(line 129,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.AbstractMessageFormatTest",
        "child_classes": [
            "org.apache.commons.lang.text.MessageFormatTest",
            "org.apache.commons.lang.text.MessageFormatExtensionTest",
            "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.AbstractMessageFormatTest.testNoFormatElements()",
        "snippet": "    public void testNoFormatElements() {\n        StringBuffer pattern = new StringBuffer();\n        for (int i = 0; i < NUMBERS.length; i++) {\n            if (i > 0) {\n                pattern.append(\"; \");\n            }\n            pattern.append(i).append(\": \").append(NUMBERS[i]);\n        }\n        String p = pattern.toString();\n        doAssertions(p, p, null);\n    }",
        "begin_line": 132,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 133,col 9)-(line 133,col 50)",
            "(line 134,col 9)-(line 139,col 9)",
            "(line 140,col 9)-(line 140,col 38)",
            "(line 141,col 9)-(line 141,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.AbstractMessageFormatTest",
        "child_classes": [
            "org.apache.commons.lang.text.MessageFormatTest",
            "org.apache.commons.lang.text.MessageFormatExtensionTest",
            "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.AbstractMessageFormatTest.testSimpleStrings()",
        "snippet": "    public void testSimpleStrings() {\n        doAssertions(null, new Object[] { \"foo\", \"bar\", \"baz\"}, null);\n    }",
        "begin_line": 144,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 145,col 9)-(line 145,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.AbstractMessageFormatTest",
        "child_classes": [
            "org.apache.commons.lang.text.MessageFormatTest",
            "org.apache.commons.lang.text.MessageFormatExtensionTest",
            "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.AbstractMessageFormatTest.testSimpleNumbers()",
        "snippet": "    public void testSimpleNumbers() {\n        doAssertions(NumberFormat.getInstance(locale), NUMBERS, null);\n    }",
        "begin_line": 148,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 149,col 9)-(line 149,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.AbstractMessageFormatTest",
        "child_classes": [
            "org.apache.commons.lang.text.MessageFormatTest",
            "org.apache.commons.lang.text.MessageFormatExtensionTest",
            "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.AbstractMessageFormatTest.testSimpleDates()",
        "snippet": "    public void testSimpleDates() {\n        doAssertions(DateFormat.getDateTimeInstance(DateFormat.SHORT,\n                DateFormat.SHORT, locale), DATES, null);\n    }",
        "begin_line": 152,
        "end_line": 155,
        "comment": "",
        "child_ranges": [
            "(line 153,col 9)-(line 154,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.AbstractMessageFormatTest",
        "child_classes": [
            "org.apache.commons.lang.text.MessageFormatTest",
            "org.apache.commons.lang.text.MessageFormatExtensionTest",
            "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.AbstractMessageFormatTest.testNumber()",
        "snippet": "    public void testNumber() {\n        doAssertions(NumberFormat.getInstance(locale), NUMBERS, \"number\");\n    }",
        "begin_line": 157,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 158,col 9)-(line 158,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.AbstractMessageFormatTest",
        "child_classes": [
            "org.apache.commons.lang.text.MessageFormatTest",
            "org.apache.commons.lang.text.MessageFormatExtensionTest",
            "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.AbstractMessageFormatTest.testNumberLooseFormatting()",
        "snippet": "    public void testNumberLooseFormatting() {\n        doAssertions(NumberFormat.getInstance(locale), NUMBERS, \" number \",\n                \"number\");\n    }",
        "begin_line": 161,
        "end_line": 164,
        "comment": "",
        "child_ranges": [
            "(line 162,col 9)-(line 163,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.AbstractMessageFormatTest",
        "child_classes": [
            "org.apache.commons.lang.text.MessageFormatTest",
            "org.apache.commons.lang.text.MessageFormatExtensionTest",
            "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.AbstractMessageFormatTest.testInteger()",
        "snippet": "    public void testInteger() {\n        doAssertions(getIntegerNumberFormat(locale), NUMBERS,\n                \"number,integer\");\n    }",
        "begin_line": 166,
        "end_line": 169,
        "comment": "",
        "child_ranges": [
            "(line 167,col 9)-(line 168,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.AbstractMessageFormatTest",
        "child_classes": [
            "org.apache.commons.lang.text.MessageFormatTest",
            "org.apache.commons.lang.text.MessageFormatExtensionTest",
            "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.AbstractMessageFormatTest.testIntegerLooseFormatting()",
        "snippet": "    public void testIntegerLooseFormatting() {\n        doAssertions(getIntegerNumberFormat(locale), NUMBERS,\n                \" number , integer \", \"number,integer\");\n    }",
        "begin_line": 171,
        "end_line": 174,
        "comment": "",
        "child_ranges": [
            "(line 172,col 9)-(line 173,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.AbstractMessageFormatTest",
        "child_classes": [
            "org.apache.commons.lang.text.MessageFormatTest",
            "org.apache.commons.lang.text.MessageFormatExtensionTest",
            "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.AbstractMessageFormatTest.testCurrency()",
        "snippet": "    public void testCurrency() {\n        doAssertions(NumberFormat.getCurrencyInstance(locale), NUMBERS,\n                \"number,currency\");\n    }",
        "begin_line": 176,
        "end_line": 179,
        "comment": "",
        "child_ranges": [
            "(line 177,col 9)-(line 178,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.AbstractMessageFormatTest",
        "child_classes": [
            "org.apache.commons.lang.text.MessageFormatTest",
            "org.apache.commons.lang.text.MessageFormatExtensionTest",
            "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.AbstractMessageFormatTest.testPercent()",
        "snippet": "    public void testPercent() {\n        doAssertions(NumberFormat.getPercentInstance(locale), NUMBERS,\n                \"number,percent\");\n    }",
        "begin_line": 181,
        "end_line": 184,
        "comment": "",
        "child_ranges": [
            "(line 182,col 9)-(line 183,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.AbstractMessageFormatTest",
        "child_classes": [
            "org.apache.commons.lang.text.MessageFormatTest",
            "org.apache.commons.lang.text.MessageFormatExtensionTest",
            "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.AbstractMessageFormatTest.testNumberPattern()",
        "snippet": "    public void testNumberPattern() {\n        doAssertions(new DecimalFormat(\"#000.000\", new DecimalFormatSymbols(\n                locale)), NUMBERS, \"number,#000.000\");\n    }",
        "begin_line": 186,
        "end_line": 189,
        "comment": "",
        "child_ranges": [
            "(line 187,col 9)-(line 188,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.AbstractMessageFormatTest",
        "child_classes": [
            "org.apache.commons.lang.text.MessageFormatTest",
            "org.apache.commons.lang.text.MessageFormatExtensionTest",
            "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.AbstractMessageFormatTest.testDate()",
        "snippet": "    public void testDate() {\n        doAssertions(DateFormat.getDateInstance(DateFormat.DEFAULT, locale),\n                DATES, \"date\");\n    }",
        "begin_line": 191,
        "end_line": 194,
        "comment": "",
        "child_ranges": [
            "(line 192,col 9)-(line 193,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.AbstractMessageFormatTest",
        "child_classes": [
            "org.apache.commons.lang.text.MessageFormatTest",
            "org.apache.commons.lang.text.MessageFormatExtensionTest",
            "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.AbstractMessageFormatTest.testDateLooseFormatting()",
        "snippet": "    public void testDateLooseFormatting() {\n        doAssertions(DateFormat.getDateInstance(DateFormat.DEFAULT, locale),\n                DATES, \" date \", \"date\");\n    }",
        "begin_line": 196,
        "end_line": 199,
        "comment": "",
        "child_ranges": [
            "(line 197,col 9)-(line 198,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.AbstractMessageFormatTest",
        "child_classes": [
            "org.apache.commons.lang.text.MessageFormatTest",
            "org.apache.commons.lang.text.MessageFormatExtensionTest",
            "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.AbstractMessageFormatTest.testShortDate()",
        "snippet": "    public void testShortDate() {\n        DateFormat shortDf = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        DateFormat defaultDf = DateFormat.getDateInstance(DateFormat.DEFAULT, locale);\n        doAssertions(shortDf, DATES, \"date,short\",\n                shortDf.equals(defaultDf) ? \"date\" : \"date,short\");\n    }",
        "begin_line": 201,
        "end_line": 206,
        "comment": "",
        "child_ranges": [
            "(line 202,col 9)-(line 202,col 82)",
            "(line 203,col 9)-(line 203,col 86)",
            "(line 204,col 9)-(line 205,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.AbstractMessageFormatTest",
        "child_classes": [
            "org.apache.commons.lang.text.MessageFormatTest",
            "org.apache.commons.lang.text.MessageFormatExtensionTest",
            "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.AbstractMessageFormatTest.testShortDateLooseFormatting()",
        "snippet": "    public void testShortDateLooseFormatting() {\n        DateFormat shortDf = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        DateFormat defaultDf = DateFormat.getDateInstance(DateFormat.DEFAULT, locale);\n        doAssertions(shortDf, DATES, \" date , short \",\n                shortDf.equals(defaultDf) ? \"date\" : \"date,short\");\n    }",
        "begin_line": 208,
        "end_line": 213,
        "comment": "",
        "child_ranges": [
            "(line 209,col 9)-(line 209,col 82)",
            "(line 210,col 9)-(line 210,col 86)",
            "(line 211,col 9)-(line 212,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.AbstractMessageFormatTest",
        "child_classes": [
            "org.apache.commons.lang.text.MessageFormatTest",
            "org.apache.commons.lang.text.MessageFormatExtensionTest",
            "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.AbstractMessageFormatTest.testMediumDate()",
        "snippet": "    public void testMediumDate() {\n        doAssertions(DateFormat.getDateInstance(DateFormat.MEDIUM, locale),\n                DATES, \"date,medium\", \"date\");\n    }",
        "begin_line": 215,
        "end_line": 218,
        "comment": "",
        "child_ranges": [
            "(line 216,col 9)-(line 217,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.AbstractMessageFormatTest",
        "child_classes": [
            "org.apache.commons.lang.text.MessageFormatTest",
            "org.apache.commons.lang.text.MessageFormatExtensionTest",
            "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.AbstractMessageFormatTest.testLongDate()",
        "snippet": "    public void testLongDate() {\n        DateFormat longDf = DateFormat.getDateInstance(DateFormat.LONG, locale);\n        DateFormat defaultDf = DateFormat.getDateInstance(DateFormat.DEFAULT,\n                locale);\n        doAssertions(longDf, DATES, \"date,long\",\n                longDf.equals(defaultDf) ? \"date\" : \"date,long\");\n    }",
        "begin_line": 220,
        "end_line": 226,
        "comment": "",
        "child_ranges": [
            "(line 221,col 9)-(line 221,col 80)",
            "(line 222,col 9)-(line 223,col 24)",
            "(line 224,col 9)-(line 225,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.AbstractMessageFormatTest",
        "child_classes": [
            "org.apache.commons.lang.text.MessageFormatTest",
            "org.apache.commons.lang.text.MessageFormatExtensionTest",
            "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.AbstractMessageFormatTest.testFullDate()",
        "snippet": "    public void testFullDate() {\n        DateFormat fullDf = DateFormat.getDateInstance(DateFormat.FULL, locale);\n        DateFormat longDf = DateFormat.getDateInstance(DateFormat.LONG, locale);\n        doAssertions(fullDf, DATES, \"date,full\",\n                fullDf.equals(longDf) ? \"date,long\" : \"date,full\");\n    }",
        "begin_line": 228,
        "end_line": 233,
        "comment": "",
        "child_ranges": [
            "(line 229,col 9)-(line 229,col 80)",
            "(line 230,col 9)-(line 230,col 80)",
            "(line 231,col 9)-(line 232,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.AbstractMessageFormatTest",
        "child_classes": [
            "org.apache.commons.lang.text.MessageFormatTest",
            "org.apache.commons.lang.text.MessageFormatExtensionTest",
            "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.AbstractMessageFormatTest.testDatePattern()",
        "snippet": "    public void testDatePattern() {\n        doAssertions(new SimpleDateFormat(\"Gyyyy.D\", locale), DATES,\n                \"date,Gyyyy.D\");\n    }",
        "begin_line": 235,
        "end_line": 238,
        "comment": "",
        "child_ranges": [
            "(line 236,col 9)-(line 237,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.AbstractMessageFormatTest",
        "child_classes": [
            "org.apache.commons.lang.text.MessageFormatTest",
            "org.apache.commons.lang.text.MessageFormatExtensionTest",
            "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.AbstractMessageFormatTest.testTime()",
        "snippet": "    public void testTime() {\n        doAssertions(DateFormat.getTimeInstance(DateFormat.DEFAULT, locale),\n                DATES, \"time\");\n    }",
        "begin_line": 240,
        "end_line": 243,
        "comment": "",
        "child_ranges": [
            "(line 241,col 9)-(line 242,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.AbstractMessageFormatTest",
        "child_classes": [
            "org.apache.commons.lang.text.MessageFormatTest",
            "org.apache.commons.lang.text.MessageFormatExtensionTest",
            "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.AbstractMessageFormatTest.testShortTime()",
        "snippet": "    public void testShortTime() {\n        doAssertions(DateFormat.getTimeInstance(DateFormat.SHORT, locale),\n                DATES, \"time,short\");\n    }",
        "begin_line": 245,
        "end_line": 248,
        "comment": "",
        "child_ranges": [
            "(line 246,col 9)-(line 247,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.AbstractMessageFormatTest",
        "child_classes": [
            "org.apache.commons.lang.text.MessageFormatTest",
            "org.apache.commons.lang.text.MessageFormatExtensionTest",
            "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.AbstractMessageFormatTest.testMediumTime()",
        "snippet": "    public void testMediumTime() {\n        doAssertions(DateFormat.getTimeInstance(DateFormat.MEDIUM, locale),\n                DATES, \"time,medium\", \"time\");\n    }",
        "begin_line": 250,
        "end_line": 253,
        "comment": "",
        "child_ranges": [
            "(line 251,col 9)-(line 252,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.AbstractMessageFormatTest",
        "child_classes": [
            "org.apache.commons.lang.text.MessageFormatTest",
            "org.apache.commons.lang.text.MessageFormatExtensionTest",
            "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.AbstractMessageFormatTest.testLongTime()",
        "snippet": "    public void testLongTime() {\n        doAssertions(DateFormat.getTimeInstance(DateFormat.LONG, locale),\n                DATES, \"time,long\");\n    }",
        "begin_line": 255,
        "end_line": 258,
        "comment": "",
        "child_ranges": [
            "(line 256,col 9)-(line 257,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.AbstractMessageFormatTest",
        "child_classes": [
            "org.apache.commons.lang.text.MessageFormatTest",
            "org.apache.commons.lang.text.MessageFormatExtensionTest",
            "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.AbstractMessageFormatTest.testFullTime()",
        "snippet": "    public void testFullTime() {\n        DateFormat fullDf = DateFormat.getTimeInstance(DateFormat.FULL, locale);\n        DateFormat longDf = DateFormat.getTimeInstance(DateFormat.LONG, locale);\n        doAssertions(fullDf, DATES, \"time,full\",\n                fullDf.equals(longDf) ? \"time,long\" : \"time,full\");\n    }",
        "begin_line": 260,
        "end_line": 265,
        "comment": "",
        "child_ranges": [
            "(line 261,col 9)-(line 261,col 80)",
            "(line 262,col 9)-(line 262,col 80)",
            "(line 263,col 9)-(line 264,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.AbstractMessageFormatTest",
        "child_classes": [
            "org.apache.commons.lang.text.MessageFormatTest",
            "org.apache.commons.lang.text.MessageFormatExtensionTest",
            "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.AbstractMessageFormatTest.testTimePattern()",
        "snippet": "    public void testTimePattern() {\n        doAssertions(new SimpleDateFormat(\"aHms\", locale), DATES, \"date,aHms\");\n    }",
        "begin_line": 267,
        "end_line": 269,
        "comment": "",
        "child_ranges": [
            "(line 268,col 9)-(line 268,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.AbstractMessageFormatTest",
        "child_classes": [
            "org.apache.commons.lang.text.MessageFormatTest",
            "org.apache.commons.lang.text.MessageFormatExtensionTest",
            "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.AbstractMessageFormatTest.testChoice()",
        "snippet": "    public void testChoice() {\n        doAssertions(new ChoiceFormat(\"0.0#x|1.0#y|2.0#z\"), NUMBERS,\n                \"choice,0.0#x|1.0#y|2.0#z\");\n    }",
        "begin_line": 271,
        "end_line": 274,
        "comment": "",
        "child_ranges": [
            "(line 272,col 9)-(line 273,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.AbstractMessageFormatTest",
        "child_classes": [
            "org.apache.commons.lang.text.MessageFormatTest",
            "org.apache.commons.lang.text.MessageFormatExtensionTest",
            "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.AbstractMessageFormatTest.testChoiceLooseFormatting()",
        "snippet": "    public void testChoiceLooseFormatting() {\n        doAssertions(new ChoiceFormat(\"0.0#x |1.0#y |2.0#z \"), NUMBERS,\n                \"choice,0.0#x |1.0#y |2.0#z \");\n    }",
        "begin_line": 276,
        "end_line": 279,
        "comment": "",
        "child_ranges": [
            "(line 277,col 9)-(line 278,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.AbstractMessageFormatTest",
        "child_classes": [
            "org.apache.commons.lang.text.MessageFormatTest",
            "org.apache.commons.lang.text.MessageFormatExtensionTest",
            "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.AbstractMessageFormatTest.testChoiceRecursive()",
        "snippet": "    public void testChoiceRecursive() {\n        NumberFormat nf = NumberFormat.getInstance(locale);\n        StringBuffer choice = new StringBuffer();\n        StringBuffer format = new StringBuffer(\"choice,\");\n        for (int i = 0; i < NUMBERS.length; i++) {\n            Double d = new Double(Math.floor(NUMBERS[i].doubleValue()));\n            if (i > 0) {\n                choice.append('|');\n                format.append('|');\n            }\n            choice.append(d).append('#').append(\n                    nf.format(NUMBERS[i].doubleValue()));\n            format.append(d).append('#').append('{').append(i).append('}');\n        }\n        doAssertions(new ChoiceFormat(choice.toString()), NUMBERS, format\n                .toString());\n    }",
        "begin_line": 281,
        "end_line": 297,
        "comment": "",
        "child_ranges": [
            "(line 282,col 9)-(line 282,col 59)",
            "(line 283,col 9)-(line 283,col 49)",
            "(line 284,col 9)-(line 284,col 58)",
            "(line 285,col 9)-(line 294,col 9)",
            "(line 295,col 9)-(line 296,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.AbstractMessageFormatTest",
        "child_classes": [
            "org.apache.commons.lang.text.MessageFormatTest",
            "org.apache.commons.lang.text.MessageFormatExtensionTest",
            "org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java",
        "signature": "org.apache.commons.lang.text.AbstractMessageFormatTest.getIntegerNumberFormat(java.util.Locale)",
        "snippet": "    private NumberFormat getIntegerNumberFormat(Locale locale) {\n        NumberFormat result = NumberFormat.getInstance(locale);\n        result.setMaximumFractionDigits(0);\n        result.setParseIntegerOnly(true);\n        return result;\n    }",
        "begin_line": 299,
        "end_line": 304,
        "comment": "",
        "child_ranges": [
            "(line 300,col 9)-(line 300,col 63)",
            "(line 301,col 9)-(line 301,col 43)",
            "(line 302,col 9)-(line 302,col 41)",
            "(line 303,col 9)-(line 303,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrMatcherTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrMatcherTest.java",
        "signature": "org.apache.commons.lang.text.StrMatcherTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 41,
        "end_line": 43,
        "comment": "\n     * Main method.\n     * \n     * @param args  command line arguments, ignored\n     ",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrMatcherTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrMatcherTest.java",
        "signature": "org.apache.commons.lang.text.StrMatcherTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(StrMatcherTest.class);\n        suite.setName(\"StrMatcher Tests\");\n        return suite;\n    }",
        "begin_line": 50,
        "end_line": 54,
        "comment": "\n     * Return a new test suite containing this test case.\n     * \n     * @return a new test suite containing this test case\n     ",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 62)",
            "(line 52,col 9)-(line 52,col 42)",
            "(line 53,col 9)-(line 53,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrMatcherTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrMatcherTest.java",
        "signature": "org.apache.commons.lang.text.StrMatcherTest.StrMatcherTest(java.lang.String)",
        "snippet": "    public StrMatcherTest(String name) {\n        super(name);\n    }",
        "begin_line": 61,
        "end_line": 63,
        "comment": "\n     * Create a new test case with the specified name.\n     * \n     * @param name  the name\n     ",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrMatcherTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrMatcherTest.java",
        "signature": "org.apache.commons.lang.text.StrMatcherTest.testCommaMatcher()",
        "snippet": "    public void testCommaMatcher() {\n        StrMatcher matcher = StrMatcher.commaMatcher();\n        assertSame(matcher, StrMatcher.commaMatcher());\n        assertEquals(0, matcher.isMatch(BUFFER1, 0));\n        assertEquals(1, matcher.isMatch(BUFFER1, 1));\n        assertEquals(0, matcher.isMatch(BUFFER1, 2));\n    }",
        "begin_line": 66,
        "end_line": 72,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 55)",
            "(line 68,col 9)-(line 68,col 55)",
            "(line 69,col 9)-(line 69,col 53)",
            "(line 70,col 9)-(line 70,col 53)",
            "(line 71,col 9)-(line 71,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrMatcherTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrMatcherTest.java",
        "signature": "org.apache.commons.lang.text.StrMatcherTest.testTabMatcher()",
        "snippet": "    public void testTabMatcher() {\n        StrMatcher matcher = StrMatcher.tabMatcher();\n        assertSame(matcher, StrMatcher.tabMatcher());\n        assertEquals(0, matcher.isMatch(BUFFER1, 2));\n        assertEquals(1, matcher.isMatch(BUFFER1, 3));\n        assertEquals(0, matcher.isMatch(BUFFER1, 4));\n    }",
        "begin_line": 75,
        "end_line": 81,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 53)",
            "(line 77,col 9)-(line 77,col 53)",
            "(line 78,col 9)-(line 78,col 53)",
            "(line 79,col 9)-(line 79,col 53)",
            "(line 80,col 9)-(line 80,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrMatcherTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrMatcherTest.java",
        "signature": "org.apache.commons.lang.text.StrMatcherTest.testSpaceMatcher()",
        "snippet": "    public void testSpaceMatcher() {\n        StrMatcher matcher = StrMatcher.spaceMatcher();\n        assertSame(matcher, StrMatcher.spaceMatcher());\n        assertEquals(0, matcher.isMatch(BUFFER1, 4));\n        assertEquals(1, matcher.isMatch(BUFFER1, 5));\n        assertEquals(0, matcher.isMatch(BUFFER1, 6));\n    }",
        "begin_line": 84,
        "end_line": 90,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 55)",
            "(line 86,col 9)-(line 86,col 55)",
            "(line 87,col 9)-(line 87,col 53)",
            "(line 88,col 9)-(line 88,col 53)",
            "(line 89,col 9)-(line 89,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrMatcherTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrMatcherTest.java",
        "signature": "org.apache.commons.lang.text.StrMatcherTest.testSplitMatcher()",
        "snippet": "    public void testSplitMatcher() {\n        StrMatcher matcher = StrMatcher.splitMatcher();\n        assertSame(matcher, StrMatcher.splitMatcher());\n        assertEquals(0, matcher.isMatch(BUFFER1, 2));\n        assertEquals(1, matcher.isMatch(BUFFER1, 3));\n        assertEquals(0, matcher.isMatch(BUFFER1, 4));\n        assertEquals(1, matcher.isMatch(BUFFER1, 5));\n        assertEquals(0, matcher.isMatch(BUFFER1, 6));\n        assertEquals(1, matcher.isMatch(BUFFER1, 7));\n        assertEquals(1, matcher.isMatch(BUFFER1, 8));\n        assertEquals(1, matcher.isMatch(BUFFER1, 9));\n        assertEquals(0, matcher.isMatch(BUFFER1, 10));\n    }",
        "begin_line": 93,
        "end_line": 105,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 55)",
            "(line 95,col 9)-(line 95,col 55)",
            "(line 96,col 9)-(line 96,col 53)",
            "(line 97,col 9)-(line 97,col 53)",
            "(line 98,col 9)-(line 98,col 53)",
            "(line 99,col 9)-(line 99,col 53)",
            "(line 100,col 9)-(line 100,col 53)",
            "(line 101,col 9)-(line 101,col 53)",
            "(line 102,col 9)-(line 102,col 53)",
            "(line 103,col 9)-(line 103,col 53)",
            "(line 104,col 9)-(line 104,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrMatcherTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrMatcherTest.java",
        "signature": "org.apache.commons.lang.text.StrMatcherTest.testTrimMatcher()",
        "snippet": "    public void testTrimMatcher() {\n        StrMatcher matcher = StrMatcher.trimMatcher();\n        assertSame(matcher, StrMatcher.trimMatcher());\n        assertEquals(0, matcher.isMatch(BUFFER1, 2));\n        assertEquals(1, matcher.isMatch(BUFFER1, 3));\n        assertEquals(0, matcher.isMatch(BUFFER1, 4));\n        assertEquals(1, matcher.isMatch(BUFFER1, 5));\n        assertEquals(0, matcher.isMatch(BUFFER1, 6));\n        assertEquals(1, matcher.isMatch(BUFFER1, 7));\n        assertEquals(1, matcher.isMatch(BUFFER1, 8));\n        assertEquals(1, matcher.isMatch(BUFFER1, 9));\n        assertEquals(1, matcher.isMatch(BUFFER1, 10));\n    }",
        "begin_line": 108,
        "end_line": 120,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 54)",
            "(line 110,col 9)-(line 110,col 54)",
            "(line 111,col 9)-(line 111,col 53)",
            "(line 112,col 9)-(line 112,col 53)",
            "(line 113,col 9)-(line 113,col 53)",
            "(line 114,col 9)-(line 114,col 53)",
            "(line 115,col 9)-(line 115,col 53)",
            "(line 116,col 9)-(line 116,col 53)",
            "(line 117,col 9)-(line 117,col 53)",
            "(line 118,col 9)-(line 118,col 53)",
            "(line 119,col 9)-(line 119,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrMatcherTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrMatcherTest.java",
        "signature": "org.apache.commons.lang.text.StrMatcherTest.testSingleQuoteMatcher()",
        "snippet": "    public void testSingleQuoteMatcher() {\n        StrMatcher matcher = StrMatcher.singleQuoteMatcher();\n        assertSame(matcher, StrMatcher.singleQuoteMatcher());\n        assertEquals(0, matcher.isMatch(BUFFER1, 10));\n        assertEquals(1, matcher.isMatch(BUFFER1, 11));\n        assertEquals(0, matcher.isMatch(BUFFER1, 12));\n    }",
        "begin_line": 123,
        "end_line": 129,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 124,col 9)-(line 124,col 61)",
            "(line 125,col 9)-(line 125,col 61)",
            "(line 126,col 9)-(line 126,col 54)",
            "(line 127,col 9)-(line 127,col 54)",
            "(line 128,col 9)-(line 128,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrMatcherTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrMatcherTest.java",
        "signature": "org.apache.commons.lang.text.StrMatcherTest.testDoubleQuoteMatcher()",
        "snippet": "    public void testDoubleQuoteMatcher() {\n        StrMatcher matcher = StrMatcher.doubleQuoteMatcher();\n        assertSame(matcher, StrMatcher.doubleQuoteMatcher());\n        assertEquals(0, matcher.isMatch(BUFFER1, 11));\n        assertEquals(1, matcher.isMatch(BUFFER1, 12));\n    }",
        "begin_line": 132,
        "end_line": 137,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 133,col 9)-(line 133,col 61)",
            "(line 134,col 9)-(line 134,col 61)",
            "(line 135,col 9)-(line 135,col 54)",
            "(line 136,col 9)-(line 136,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrMatcherTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrMatcherTest.java",
        "signature": "org.apache.commons.lang.text.StrMatcherTest.testQuoteMatcher()",
        "snippet": "    public void testQuoteMatcher() {\n        StrMatcher matcher = StrMatcher.quoteMatcher();\n        assertSame(matcher, StrMatcher.quoteMatcher());\n        assertEquals(0, matcher.isMatch(BUFFER1, 10));\n        assertEquals(1, matcher.isMatch(BUFFER1, 11));\n        assertEquals(1, matcher.isMatch(BUFFER1, 12));\n    }",
        "begin_line": 140,
        "end_line": 146,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 141,col 9)-(line 141,col 55)",
            "(line 142,col 9)-(line 142,col 55)",
            "(line 143,col 9)-(line 143,col 54)",
            "(line 144,col 9)-(line 144,col 54)",
            "(line 145,col 9)-(line 145,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrMatcherTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrMatcherTest.java",
        "signature": "org.apache.commons.lang.text.StrMatcherTest.testNoneMatcher()",
        "snippet": "    public void testNoneMatcher() {\n        StrMatcher matcher = StrMatcher.noneMatcher();\n        assertSame(matcher, StrMatcher.noneMatcher());\n        assertEquals(0, matcher.isMatch(BUFFER1, 0));\n        assertEquals(0, matcher.isMatch(BUFFER1, 1));\n        assertEquals(0, matcher.isMatch(BUFFER1, 2));\n        assertEquals(0, matcher.isMatch(BUFFER1, 3));\n        assertEquals(0, matcher.isMatch(BUFFER1, 4));\n        assertEquals(0, matcher.isMatch(BUFFER1, 5));\n        assertEquals(0, matcher.isMatch(BUFFER1, 6));\n        assertEquals(0, matcher.isMatch(BUFFER1, 7));\n        assertEquals(0, matcher.isMatch(BUFFER1, 8));\n        assertEquals(0, matcher.isMatch(BUFFER1, 9));\n        assertEquals(0, matcher.isMatch(BUFFER1, 10));\n        assertEquals(0, matcher.isMatch(BUFFER1, 11));\n        assertEquals(0, matcher.isMatch(BUFFER1, 12));\n    }",
        "begin_line": 149,
        "end_line": 165,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 150,col 9)-(line 150,col 54)",
            "(line 151,col 9)-(line 151,col 54)",
            "(line 152,col 9)-(line 152,col 53)",
            "(line 153,col 9)-(line 153,col 53)",
            "(line 154,col 9)-(line 154,col 53)",
            "(line 155,col 9)-(line 155,col 53)",
            "(line 156,col 9)-(line 156,col 53)",
            "(line 157,col 9)-(line 157,col 53)",
            "(line 158,col 9)-(line 158,col 53)",
            "(line 159,col 9)-(line 159,col 53)",
            "(line 160,col 9)-(line 160,col 53)",
            "(line 161,col 9)-(line 161,col 53)",
            "(line 162,col 9)-(line 162,col 54)",
            "(line 163,col 9)-(line 163,col 54)",
            "(line 164,col 9)-(line 164,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrMatcherTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrMatcherTest.java",
        "signature": "org.apache.commons.lang.text.StrMatcherTest.testCharMatcher_char()",
        "snippet": "    public void testCharMatcher_char() {\n        StrMatcher matcher = StrMatcher.charMatcher('c');\n        assertEquals(0, matcher.isMatch(BUFFER2, 0));\n        assertEquals(0, matcher.isMatch(BUFFER2, 1));\n        assertEquals(1, matcher.isMatch(BUFFER2, 2));\n        assertEquals(0, matcher.isMatch(BUFFER2, 3));\n        assertEquals(0, matcher.isMatch(BUFFER2, 4));\n        assertEquals(0, matcher.isMatch(BUFFER2, 5));\n    }",
        "begin_line": 168,
        "end_line": 176,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 169,col 9)-(line 169,col 57)",
            "(line 170,col 9)-(line 170,col 53)",
            "(line 171,col 9)-(line 171,col 53)",
            "(line 172,col 9)-(line 172,col 53)",
            "(line 173,col 9)-(line 173,col 53)",
            "(line 174,col 9)-(line 174,col 53)",
            "(line 175,col 9)-(line 175,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrMatcherTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrMatcherTest.java",
        "signature": "org.apache.commons.lang.text.StrMatcherTest.testCharSetMatcher_String()",
        "snippet": "    public void testCharSetMatcher_String() {\n        StrMatcher matcher = StrMatcher.charSetMatcher(\"ace\");\n        assertEquals(1, matcher.isMatch(BUFFER2, 0));\n        assertEquals(0, matcher.isMatch(BUFFER2, 1));\n        assertEquals(1, matcher.isMatch(BUFFER2, 2));\n        assertEquals(0, matcher.isMatch(BUFFER2, 3));\n        assertEquals(1, matcher.isMatch(BUFFER2, 4));\n        assertEquals(0, matcher.isMatch(BUFFER2, 5));\n        assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher(\"\"));\n        assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher((String) null));\n        assertTrue(StrMatcher.charSetMatcher(\"a\") instanceof StrMatcher.CharMatcher);\n    }",
        "begin_line": 179,
        "end_line": 190,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 180,col 9)-(line 180,col 62)",
            "(line 181,col 9)-(line 181,col 53)",
            "(line 182,col 9)-(line 182,col 53)",
            "(line 183,col 9)-(line 183,col 53)",
            "(line 184,col 9)-(line 184,col 53)",
            "(line 185,col 9)-(line 185,col 53)",
            "(line 186,col 9)-(line 186,col 53)",
            "(line 187,col 9)-(line 187,col 76)",
            "(line 188,col 9)-(line 188,col 87)",
            "(line 189,col 9)-(line 189,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrMatcherTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrMatcherTest.java",
        "signature": "org.apache.commons.lang.text.StrMatcherTest.testCharSetMatcher_charArray()",
        "snippet": "    public void testCharSetMatcher_charArray() {\n        StrMatcher matcher = StrMatcher.charSetMatcher(\"ace\".toCharArray());\n        assertEquals(1, matcher.isMatch(BUFFER2, 0));\n        assertEquals(0, matcher.isMatch(BUFFER2, 1));\n        assertEquals(1, matcher.isMatch(BUFFER2, 2));\n        assertEquals(0, matcher.isMatch(BUFFER2, 3));\n        assertEquals(1, matcher.isMatch(BUFFER2, 4));\n        assertEquals(0, matcher.isMatch(BUFFER2, 5));\n        assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher(new char[0]));\n        assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher((char[]) null));\n        assertTrue(StrMatcher.charSetMatcher(\"a\".toCharArray()) instanceof StrMatcher.CharMatcher);\n    }",
        "begin_line": 193,
        "end_line": 204,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 194,col 9)-(line 194,col 76)",
            "(line 195,col 9)-(line 195,col 53)",
            "(line 196,col 9)-(line 196,col 53)",
            "(line 197,col 9)-(line 197,col 53)",
            "(line 198,col 9)-(line 198,col 53)",
            "(line 199,col 9)-(line 199,col 53)",
            "(line 200,col 9)-(line 200,col 53)",
            "(line 201,col 9)-(line 201,col 85)",
            "(line 202,col 9)-(line 202,col 87)",
            "(line 203,col 9)-(line 203,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrMatcherTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrMatcherTest.java",
        "signature": "org.apache.commons.lang.text.StrMatcherTest.testStringMatcher_String()",
        "snippet": "    public void testStringMatcher_String() {\n        StrMatcher matcher = StrMatcher.stringMatcher(\"bc\");\n        assertEquals(0, matcher.isMatch(BUFFER2, 0));\n        assertEquals(2, matcher.isMatch(BUFFER2, 1));\n        assertEquals(0, matcher.isMatch(BUFFER2, 2));\n        assertEquals(0, matcher.isMatch(BUFFER2, 3));\n        assertEquals(0, matcher.isMatch(BUFFER2, 4));\n        assertEquals(0, matcher.isMatch(BUFFER2, 5));\n        assertSame(StrMatcher.noneMatcher(), StrMatcher.stringMatcher(\"\"));\n        assertSame(StrMatcher.noneMatcher(), StrMatcher.stringMatcher((String) null));\n    }",
        "begin_line": 207,
        "end_line": 217,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 208,col 9)-(line 208,col 60)",
            "(line 209,col 9)-(line 209,col 53)",
            "(line 210,col 9)-(line 210,col 53)",
            "(line 211,col 9)-(line 211,col 53)",
            "(line 212,col 9)-(line 212,col 53)",
            "(line 213,col 9)-(line 213,col 53)",
            "(line 214,col 9)-(line 214,col 53)",
            "(line 215,col 9)-(line 215,col 75)",
            "(line 216,col 9)-(line 216,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrMatcherTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrMatcherTest.java",
        "signature": "org.apache.commons.lang.text.StrMatcherTest.testMatcherIndices()",
        "snippet": "    public void testMatcherIndices() {\n        // remember that the API contract is tight for the isMatch() method\n        // all the onus is on the caller, so invalid inputs are not\n        // the concern of StrMatcher, and are not bugs\n        StrMatcher matcher = StrMatcher.stringMatcher(\"bc\");\n        assertEquals(2, matcher.isMatch(BUFFER2, 1, 1, BUFFER2.length));\n        assertEquals(2, matcher.isMatch(BUFFER2, 1, 0, 3));\n        assertEquals(0, matcher.isMatch(BUFFER2, 1, 0, 2));\n    }",
        "begin_line": 220,
        "end_line": 228,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 224,col 9)-(line 224,col 60)",
            "(line 225,col 9)-(line 225,col 72)",
            "(line 226,col 9)-(line 226,col 59)",
            "(line 227,col 9)-(line 227,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 44,
        "end_line": 46,
        "comment": "\n     * Main method.\n     * \n     * @param args  command line arguments, ignored\n     ",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(StrBuilderTest.class);\n        suite.setName(\"StrBuilder Tests\");\n        return suite;\n    }",
        "begin_line": 53,
        "end_line": 57,
        "comment": "\n     * Return a new test suite containing this test case.\n     * \n     * @return a new test suite containing this test case\n     ",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 62)",
            "(line 55,col 9)-(line 55,col 42)",
            "(line 56,col 9)-(line 56,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.StrBuilderTest(java.lang.String)",
        "snippet": "    public StrBuilderTest(String name) {\n        super(name);\n    }",
        "begin_line": 65,
        "end_line": 67,
        "comment": "\n     * Create a new test case with the specified name.\n     * \n     * @param name\n     *            name\n     ",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testConstructors()",
        "snippet": "    public void testConstructors() {\n        StrBuilder sb0 = new StrBuilder();\n        assertEquals(32, sb0.capacity());\n        assertEquals(0, sb0.length());\n        assertEquals(0, sb0.size());\n\n        StrBuilder sb1 = new StrBuilder(32);\n        assertEquals(32, sb1.capacity());\n        assertEquals(0, sb1.length());\n        assertEquals(0, sb1.size());\n\n        StrBuilder sb2 = new StrBuilder(0);\n        assertEquals(32, sb2.capacity());\n        assertEquals(0, sb2.length());\n        assertEquals(0, sb2.size());\n\n        StrBuilder sb3 = new StrBuilder(-1);\n        assertEquals(32, sb3.capacity());\n        assertEquals(0, sb3.length());\n        assertEquals(0, sb3.size());\n\n        StrBuilder sb4 = new StrBuilder(1);\n        assertEquals(1, sb4.capacity());\n        assertEquals(0, sb4.length());\n        assertEquals(0, sb4.size());\n\n        StrBuilder sb5 = new StrBuilder((String) null);\n        assertEquals(32, sb5.capacity());\n        assertEquals(0, sb5.length());\n        assertEquals(0, sb5.size());\n\n        StrBuilder sb6 = new StrBuilder(\"\");\n        assertEquals(32, sb6.capacity());\n        assertEquals(0, sb6.length());\n        assertEquals(0, sb6.size());\n\n        StrBuilder sb7 = new StrBuilder(\"foo\");\n        assertEquals(35, sb7.capacity());\n        assertEquals(3, sb7.length());\n        assertEquals(3, sb7.size());\n    }",
        "begin_line": 70,
        "end_line": 110,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 42)",
            "(line 72,col 9)-(line 72,col 41)",
            "(line 73,col 9)-(line 73,col 38)",
            "(line 74,col 9)-(line 74,col 36)",
            "(line 76,col 9)-(line 76,col 44)",
            "(line 77,col 9)-(line 77,col 41)",
            "(line 78,col 9)-(line 78,col 38)",
            "(line 79,col 9)-(line 79,col 36)",
            "(line 81,col 9)-(line 81,col 43)",
            "(line 82,col 9)-(line 82,col 41)",
            "(line 83,col 9)-(line 83,col 38)",
            "(line 84,col 9)-(line 84,col 36)",
            "(line 86,col 9)-(line 86,col 44)",
            "(line 87,col 9)-(line 87,col 41)",
            "(line 88,col 9)-(line 88,col 38)",
            "(line 89,col 9)-(line 89,col 36)",
            "(line 91,col 9)-(line 91,col 43)",
            "(line 92,col 9)-(line 92,col 40)",
            "(line 93,col 9)-(line 93,col 38)",
            "(line 94,col 9)-(line 94,col 36)",
            "(line 96,col 9)-(line 96,col 55)",
            "(line 97,col 9)-(line 97,col 41)",
            "(line 98,col 9)-(line 98,col 38)",
            "(line 99,col 9)-(line 99,col 36)",
            "(line 101,col 9)-(line 101,col 44)",
            "(line 102,col 9)-(line 102,col 41)",
            "(line 103,col 9)-(line 103,col 38)",
            "(line 104,col 9)-(line 104,col 36)",
            "(line 106,col 9)-(line 106,col 47)",
            "(line 107,col 9)-(line 107,col 41)",
            "(line 108,col 9)-(line 108,col 38)",
            "(line 109,col 9)-(line 109,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testChaining()",
        "snippet": "    public void testChaining() {\n        StrBuilder sb = new StrBuilder();\n        assertSame(sb, sb.setNewLineText(null));\n        assertSame(sb, sb.setNullText(null));\n        assertSame(sb, sb.setLength(1));\n        assertSame(sb, sb.setCharAt(0, 'a'));\n        assertSame(sb, sb.ensureCapacity(0));\n        assertSame(sb, sb.minimizeCapacity());\n        assertSame(sb, sb.clear());\n        assertSame(sb, sb.reverse());\n        assertSame(sb, sb.trim());\n    }",
        "begin_line": 113,
        "end_line": 124,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 41)",
            "(line 115,col 9)-(line 115,col 48)",
            "(line 116,col 9)-(line 116,col 45)",
            "(line 117,col 9)-(line 117,col 40)",
            "(line 118,col 9)-(line 118,col 45)",
            "(line 119,col 9)-(line 119,col 45)",
            "(line 120,col 9)-(line 120,col 46)",
            "(line 121,col 9)-(line 121,col 35)",
            "(line 122,col 9)-(line 122,col 37)",
            "(line 123,col 9)-(line 123,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testGetSetNewLineText()",
        "snippet": "    public void testGetSetNewLineText() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(null, sb.getNewLineText());\n\n        sb.setNewLineText(\"#\");\n        assertEquals(\"#\", sb.getNewLineText());\n\n        sb.setNewLineText(\"\");\n        assertEquals(\"\", sb.getNewLineText());\n\n        sb.setNewLineText((String) null);\n        assertEquals(null, sb.getNewLineText());\n    }",
        "begin_line": 127,
        "end_line": 139,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 41)",
            "(line 129,col 9)-(line 129,col 48)",
            "(line 131,col 9)-(line 131,col 31)",
            "(line 132,col 9)-(line 132,col 47)",
            "(line 134,col 9)-(line 134,col 30)",
            "(line 135,col 9)-(line 135,col 46)",
            "(line 137,col 9)-(line 137,col 41)",
            "(line 138,col 9)-(line 138,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testGetSetNullText()",
        "snippet": "    public void testGetSetNullText() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(null, sb.getNullText());\n\n        sb.setNullText(\"null\");\n        assertEquals(\"null\", sb.getNullText());\n\n        sb.setNullText(\"\");\n        assertEquals(null, sb.getNullText());\n\n        sb.setNullText(\"NULL\");\n        assertEquals(\"NULL\", sb.getNullText());\n\n        sb.setNullText((String) null);\n        assertEquals(null, sb.getNullText());\n    }",
        "begin_line": 142,
        "end_line": 157,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 143,col 9)-(line 143,col 41)",
            "(line 144,col 9)-(line 144,col 45)",
            "(line 146,col 9)-(line 146,col 31)",
            "(line 147,col 9)-(line 147,col 47)",
            "(line 149,col 9)-(line 149,col 27)",
            "(line 150,col 9)-(line 150,col 45)",
            "(line 152,col 9)-(line 152,col 31)",
            "(line 153,col 9)-(line 153,col 47)",
            "(line 155,col 9)-(line 155,col 38)",
            "(line 156,col 9)-(line 156,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testCapacityAndLength()",
        "snippet": "    public void testCapacityAndLength() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(32, sb.capacity());\n        assertEquals(0, sb.length());\n        assertEquals(0, sb.size());\n        assertTrue(sb.isEmpty());\n\n        sb.minimizeCapacity();\n        assertEquals(0, sb.capacity());\n        assertEquals(0, sb.length());\n        assertEquals(0, sb.size());\n        assertTrue(sb.isEmpty());\n\n        sb.ensureCapacity(32);\n        assertTrue(sb.capacity() >= 32);\n        assertEquals(0, sb.length());\n        assertEquals(0, sb.size());\n        assertTrue(sb.isEmpty());\n\n        sb.append(\"foo\");\n        assertTrue(sb.capacity() >= 32);\n        assertEquals(3, sb.length());\n        assertEquals(3, sb.size());\n        assertTrue(sb.isEmpty() == false);\n\n        sb.clear();\n        assertTrue(sb.capacity() >= 32);\n        assertEquals(0, sb.length());\n        assertEquals(0, sb.size());\n        assertTrue(sb.isEmpty());\n\n        sb.append(\"123456789012345678901234567890123\");\n        assertTrue(sb.capacity() > 32);\n        assertEquals(33, sb.length());\n        assertEquals(33, sb.size());\n        assertTrue(sb.isEmpty() == false);\n\n        sb.ensureCapacity(16);\n        assertTrue(sb.capacity() > 16);\n        assertEquals(33, sb.length());\n        assertEquals(33, sb.size());\n        assertTrue(sb.isEmpty() == false);\n\n        sb.minimizeCapacity();\n        assertEquals(33, sb.capacity());\n        assertEquals(33, sb.length());\n        assertEquals(33, sb.size());\n        assertTrue(sb.isEmpty() == false);\n\n        try {\n            sb.setLength(-1);\n            fail(\"setLength(-1) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.setLength(33);\n        assertEquals(33, sb.capacity());\n        assertEquals(33, sb.length());\n        assertEquals(33, sb.size());\n        assertTrue(sb.isEmpty() == false);\n\n        sb.setLength(16);\n        assertTrue(sb.capacity() >= 16);\n        assertEquals(16, sb.length());\n        assertEquals(16, sb.size());\n        assertEquals(\"1234567890123456\", sb.toString());\n        assertTrue(sb.isEmpty() == false);\n\n        sb.setLength(32);\n        assertTrue(sb.capacity() >= 32);\n        assertEquals(32, sb.length());\n        assertEquals(32, sb.size());\n        assertEquals(\"1234567890123456\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\", sb.toString());\n        assertTrue(sb.isEmpty() == false);\n\n        sb.setLength(0);\n        assertTrue(sb.capacity() >= 32);\n        assertEquals(0, sb.length());\n        assertEquals(0, sb.size());\n        assertTrue(sb.isEmpty());\n    }",
        "begin_line": 160,
        "end_line": 241,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 161,col 9)-(line 161,col 41)",
            "(line 162,col 9)-(line 162,col 40)",
            "(line 163,col 9)-(line 163,col 37)",
            "(line 164,col 9)-(line 164,col 35)",
            "(line 165,col 9)-(line 165,col 33)",
            "(line 167,col 9)-(line 167,col 30)",
            "(line 168,col 9)-(line 168,col 39)",
            "(line 169,col 9)-(line 169,col 37)",
            "(line 170,col 9)-(line 170,col 35)",
            "(line 171,col 9)-(line 171,col 33)",
            "(line 173,col 9)-(line 173,col 30)",
            "(line 174,col 9)-(line 174,col 40)",
            "(line 175,col 9)-(line 175,col 37)",
            "(line 176,col 9)-(line 176,col 35)",
            "(line 177,col 9)-(line 177,col 33)",
            "(line 179,col 9)-(line 179,col 25)",
            "(line 180,col 9)-(line 180,col 40)",
            "(line 181,col 9)-(line 181,col 37)",
            "(line 182,col 9)-(line 182,col 35)",
            "(line 183,col 9)-(line 183,col 42)",
            "(line 185,col 9)-(line 185,col 19)",
            "(line 186,col 9)-(line 186,col 40)",
            "(line 187,col 9)-(line 187,col 37)",
            "(line 188,col 9)-(line 188,col 35)",
            "(line 189,col 9)-(line 189,col 33)",
            "(line 191,col 9)-(line 191,col 55)",
            "(line 192,col 9)-(line 192,col 39)",
            "(line 193,col 9)-(line 193,col 38)",
            "(line 194,col 9)-(line 194,col 36)",
            "(line 195,col 9)-(line 195,col 42)",
            "(line 197,col 9)-(line 197,col 30)",
            "(line 198,col 9)-(line 198,col 39)",
            "(line 199,col 9)-(line 199,col 38)",
            "(line 200,col 9)-(line 200,col 36)",
            "(line 201,col 9)-(line 201,col 42)",
            "(line 203,col 9)-(line 203,col 30)",
            "(line 204,col 9)-(line 204,col 40)",
            "(line 205,col 9)-(line 205,col 38)",
            "(line 206,col 9)-(line 206,col 36)",
            "(line 207,col 9)-(line 207,col 42)",
            "(line 209,col 9)-(line 214,col 9)",
            "(line 216,col 9)-(line 216,col 25)",
            "(line 217,col 9)-(line 217,col 40)",
            "(line 218,col 9)-(line 218,col 38)",
            "(line 219,col 9)-(line 219,col 36)",
            "(line 220,col 9)-(line 220,col 42)",
            "(line 222,col 9)-(line 222,col 25)",
            "(line 223,col 9)-(line 223,col 40)",
            "(line 224,col 9)-(line 224,col 38)",
            "(line 225,col 9)-(line 225,col 36)",
            "(line 226,col 9)-(line 226,col 56)",
            "(line 227,col 9)-(line 227,col 42)",
            "(line 229,col 9)-(line 229,col 25)",
            "(line 230,col 9)-(line 230,col 40)",
            "(line 231,col 9)-(line 231,col 38)",
            "(line 232,col 9)-(line 232,col 36)",
            "(line 233,col 9)-(line 233,col 88)",
            "(line 234,col 9)-(line 234,col 42)",
            "(line 236,col 9)-(line 236,col 24)",
            "(line 237,col 9)-(line 237,col 40)",
            "(line 238,col 9)-(line 238,col 37)",
            "(line 239,col 9)-(line 239,col 35)",
            "(line 240,col 9)-(line 240,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testLength()",
        "snippet": "    public void testLength() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(0, sb.length());\n        \n        sb.append(\"Hello\");\n        assertEquals(5, sb.length());\n    }",
        "begin_line": 244,
        "end_line": 250,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 245,col 9)-(line 245,col 41)",
            "(line 246,col 9)-(line 246,col 37)",
            "(line 248,col 9)-(line 248,col 27)",
            "(line 249,col 9)-(line 249,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testSetLength()",
        "snippet": "    public void testSetLength() {\n        StrBuilder sb = new StrBuilder();\n        sb.append(\"Hello\");\n        sb.setLength(2);  // shorten\n        assertEquals(\"He\", sb.toString());\n        sb.setLength(2);  // no change\n        assertEquals(\"He\", sb.toString());\n        sb.setLength(3);  // lengthen\n        assertEquals(\"He\\0\", sb.toString());\n\n        try {\n            sb.setLength(-1);\n            fail(\"setLength(-1) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n    }",
        "begin_line": 252,
        "end_line": 268,
        "comment": "",
        "child_ranges": [
            "(line 253,col 9)-(line 253,col 41)",
            "(line 254,col 9)-(line 254,col 27)",
            "(line 255,col 9)-(line 255,col 24)",
            "(line 256,col 9)-(line 256,col 42)",
            "(line 257,col 9)-(line 257,col 24)",
            "(line 258,col 9)-(line 258,col 42)",
            "(line 259,col 9)-(line 259,col 24)",
            "(line 260,col 9)-(line 260,col 44)",
            "(line 262,col 9)-(line 267,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testCapacity()",
        "snippet": "    public void testCapacity() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(sb.buffer.length, sb.capacity());\n        \n        sb.append(\"HelloWorldHelloWorldHelloWorldHelloWorld\");\n        assertEquals(sb.buffer.length, sb.capacity());\n    }",
        "begin_line": 271,
        "end_line": 277,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 272,col 9)-(line 272,col 41)",
            "(line 273,col 9)-(line 273,col 54)",
            "(line 275,col 9)-(line 275,col 62)",
            "(line 276,col 9)-(line 276,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testEnsureCapacity()",
        "snippet": "    public void testEnsureCapacity() {\n        StrBuilder sb = new StrBuilder();\n        sb.ensureCapacity(2);\n        assertEquals(true, sb.capacity() >= 2);\n        \n        sb.ensureCapacity(-1);\n        assertEquals(true, sb.capacity() >= 0);\n        \n        sb.append(\"HelloWorld\");\n        sb.ensureCapacity(40);\n        assertEquals(true, sb.capacity() >= 40);\n    }",
        "begin_line": 279,
        "end_line": 290,
        "comment": "",
        "child_ranges": [
            "(line 280,col 9)-(line 280,col 41)",
            "(line 281,col 9)-(line 281,col 29)",
            "(line 282,col 9)-(line 282,col 47)",
            "(line 284,col 9)-(line 284,col 30)",
            "(line 285,col 9)-(line 285,col 47)",
            "(line 287,col 9)-(line 287,col 32)",
            "(line 288,col 9)-(line 288,col 30)",
            "(line 289,col 9)-(line 289,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testMinimizeCapacity()",
        "snippet": "    public void testMinimizeCapacity() {\n        StrBuilder sb = new StrBuilder();\n        sb.minimizeCapacity();\n        assertEquals(0, sb.capacity());\n        \n        sb.append(\"HelloWorld\");\n        sb.minimizeCapacity();\n        assertEquals(10, sb.capacity());\n    }",
        "begin_line": 292,
        "end_line": 300,
        "comment": "",
        "child_ranges": [
            "(line 293,col 9)-(line 293,col 41)",
            "(line 294,col 9)-(line 294,col 30)",
            "(line 295,col 9)-(line 295,col 39)",
            "(line 297,col 9)-(line 297,col 32)",
            "(line 298,col 9)-(line 298,col 30)",
            "(line 299,col 9)-(line 299,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testSize()",
        "snippet": "    public void testSize() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(0, sb.size());\n        \n        sb.append(\"Hello\");\n        assertEquals(5, sb.size());\n    }",
        "begin_line": 303,
        "end_line": 309,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 304,col 9)-(line 304,col 41)",
            "(line 305,col 9)-(line 305,col 35)",
            "(line 307,col 9)-(line 307,col 27)",
            "(line 308,col 9)-(line 308,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testIsEmpty()",
        "snippet": "    public void testIsEmpty() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(true, sb.isEmpty());\n        \n        sb.append(\"Hello\");\n        assertEquals(false, sb.isEmpty());\n        \n        sb.clear();\n        assertEquals(true, sb.isEmpty());\n    }",
        "begin_line": 311,
        "end_line": 320,
        "comment": "",
        "child_ranges": [
            "(line 312,col 9)-(line 312,col 41)",
            "(line 313,col 9)-(line 313,col 41)",
            "(line 315,col 9)-(line 315,col 27)",
            "(line 316,col 9)-(line 316,col 42)",
            "(line 318,col 9)-(line 318,col 19)",
            "(line 319,col 9)-(line 319,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testClear()",
        "snippet": "    public void testClear() {\n        StrBuilder sb = new StrBuilder();\n        sb.append(\"Hello\");\n        sb.clear();\n        assertEquals(0, sb.length());\n        assertEquals(true, sb.buffer.length >= 5);\n    }",
        "begin_line": 322,
        "end_line": 328,
        "comment": "",
        "child_ranges": [
            "(line 323,col 9)-(line 323,col 41)",
            "(line 324,col 9)-(line 324,col 27)",
            "(line 325,col 9)-(line 325,col 19)",
            "(line 326,col 9)-(line 326,col 37)",
            "(line 327,col 9)-(line 327,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testCharAt()",
        "snippet": "    public void testCharAt() {\n        StrBuilder sb = new StrBuilder();\n        try {\n            sb.charAt(0);\n            fail(\"charAt(0) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n        try {\n            sb.charAt(-1);\n            fail(\"charAt(-1) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n        sb.append(\"foo\");\n        assertEquals('f', sb.charAt(0));\n        assertEquals('o', sb.charAt(1));\n        assertEquals('o', sb.charAt(2));\n        try {\n            sb.charAt(-1);\n            fail(\"charAt(-1) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n        try {\n            sb.charAt(3);\n            fail(\"charAt(3) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n    }",
        "begin_line": 331,
        "end_line": 361,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 332,col 9)-(line 332,col 41)",
            "(line 333,col 9)-(line 338,col 9)",
            "(line 339,col 9)-(line 344,col 9)",
            "(line 345,col 9)-(line 345,col 25)",
            "(line 346,col 9)-(line 346,col 40)",
            "(line 347,col 9)-(line 347,col 40)",
            "(line 348,col 9)-(line 348,col 40)",
            "(line 349,col 9)-(line 354,col 9)",
            "(line 355,col 9)-(line 360,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testSetCharAt()",
        "snippet": "    public void testSetCharAt() {\n        StrBuilder sb = new StrBuilder();\n        try {\n            sb.setCharAt(0, 'f');\n            fail(\"setCharAt(0,) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n        try {\n            sb.setCharAt(-1, 'f');\n            fail(\"setCharAt(-1,) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n        sb.append(\"foo\");\n        sb.setCharAt(0, 'b');\n        sb.setCharAt(1, 'a');\n        sb.setCharAt(2, 'r');\n        try {\n            sb.setCharAt(3, '!');\n            fail(\"setCharAt(3,) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n        assertEquals(\"bar\", sb.toString());\n    }",
        "begin_line": 364,
        "end_line": 389,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 365,col 9)-(line 365,col 41)",
            "(line 366,col 9)-(line 371,col 9)",
            "(line 372,col 9)-(line 377,col 9)",
            "(line 378,col 9)-(line 378,col 25)",
            "(line 379,col 9)-(line 379,col 29)",
            "(line 380,col 9)-(line 380,col 29)",
            "(line 381,col 9)-(line 381,col 29)",
            "(line 382,col 9)-(line 387,col 9)",
            "(line 388,col 9)-(line 388,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testDeleteCharAt()",
        "snippet": "    public void testDeleteCharAt() {\n        StrBuilder sb = new StrBuilder(\"abc\");\n        sb.deleteCharAt(0);\n        assertEquals(\"bc\", sb.toString()); \n        \n        try {\n            sb.deleteCharAt(1000);\n            fail(\"Expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {}\n    }",
        "begin_line": 392,
        "end_line": 401,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 393,col 9)-(line 393,col 46)",
            "(line 394,col 9)-(line 394,col 27)",
            "(line 395,col 9)-(line 395,col 42)",
            "(line 397,col 9)-(line 400,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testToCharArray()",
        "snippet": "    public void testToCharArray() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, sb.toCharArray());\n\n        char[] a = sb.toCharArray();\n        assertNotNull(\"toCharArray() result is null\", a);\n        assertEquals(\"toCharArray() result is too large\", 0, a.length);\n\n        sb.append(\"junit\");\n        a = sb.toCharArray();\n        assertEquals(\"toCharArray() result incorrect length\", 5, a.length);\n        assertTrue(\"toCharArray() result does not match\", Arrays.equals(\"junit\".toCharArray(), a));\n    }",
        "begin_line": 404,
        "end_line": 416,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 405,col 9)-(line 405,col 41)",
            "(line 406,col 9)-(line 406,col 68)",
            "(line 408,col 9)-(line 408,col 36)",
            "(line 409,col 9)-(line 409,col 57)",
            "(line 410,col 9)-(line 410,col 71)",
            "(line 412,col 9)-(line 412,col 27)",
            "(line 413,col 9)-(line 413,col 29)",
            "(line 414,col 9)-(line 414,col 75)",
            "(line 415,col 9)-(line 415,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testToCharArrayIntInt()",
        "snippet": "    public void testToCharArrayIntInt() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, sb.toCharArray(0, 0));\n\n        sb.append(\"junit\");\n        char[] a = sb.toCharArray(0, 20); // too large test\n        assertEquals(\"toCharArray(int,int) result incorrect length\", 5, a.length);\n        assertTrue(\"toCharArray(int,int) result does not match\", Arrays.equals(\"junit\".toCharArray(), a));\n\n        a = sb.toCharArray(0, 4);\n        assertEquals(\"toCharArray(int,int) result incorrect length\", 4, a.length);\n        assertTrue(\"toCharArray(int,int) result does not match\", Arrays.equals(\"juni\".toCharArray(), a));\n\n        a = sb.toCharArray(0, 4);\n        assertEquals(\"toCharArray(int,int) result incorrect length\", 4, a.length);\n        assertTrue(\"toCharArray(int,int) result does not match\", Arrays.equals(\"juni\".toCharArray(), a));\n\n        a = sb.toCharArray(0, 1);\n        assertNotNull(\"toCharArray(int,int) result is null\", a);\n\n        try {\n            sb.toCharArray(-1, 5);\n            fail(\"no string index out of bound on -1\");\n        } catch (IndexOutOfBoundsException e) {\n        }\n\n        try {\n            sb.toCharArray(6, 5);\n            fail(\"no string index out of bound on -1\");\n        } catch (IndexOutOfBoundsException e) {\n        }\n    }",
        "begin_line": 418,
        "end_line": 449,
        "comment": "",
        "child_ranges": [
            "(line 419,col 9)-(line 419,col 41)",
            "(line 420,col 9)-(line 420,col 72)",
            "(line 422,col 9)-(line 422,col 27)",
            "(line 423,col 9)-(line 423,col 41)",
            "(line 424,col 9)-(line 424,col 82)",
            "(line 425,col 9)-(line 425,col 106)",
            "(line 427,col 9)-(line 427,col 33)",
            "(line 428,col 9)-(line 428,col 82)",
            "(line 429,col 9)-(line 429,col 105)",
            "(line 431,col 9)-(line 431,col 33)",
            "(line 432,col 9)-(line 432,col 82)",
            "(line 433,col 9)-(line 433,col 105)",
            "(line 435,col 9)-(line 435,col 33)",
            "(line 436,col 9)-(line 436,col 64)",
            "(line 438,col 9)-(line 442,col 9)",
            "(line 444,col 9)-(line 448,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testGetChars()",
        "snippet": "    public void testGetChars ( ) {\n        StrBuilder sb = new StrBuilder();\n        \n        char[] input = new char[10];\n        char[] a = sb.getChars(input);\n        assertSame (input, a);\n        assertTrue(Arrays.equals(new char[10], a));\n        \n        sb.append(\"junit\");\n        a = sb.getChars(input);\n        assertSame(input, a);\n        assertTrue(Arrays.equals(new char[] {'j','u','n','i','t',0,0,0,0,0},a));\n        \n        a = sb.getChars(null);\n        assertNotSame(input,a);\n        assertEquals(5,a.length);\n        assertTrue(Arrays.equals(\"junit\".toCharArray(),a));\n        \n        input = new char[5];\n        a = sb.getChars(input);\n        assertSame(input, a);\n        \n        input = new char[4];\n        a = sb.getChars(input);\n        assertNotSame(input, a);\n    }",
        "begin_line": 451,
        "end_line": 476,
        "comment": "",
        "child_ranges": [
            "(line 452,col 9)-(line 452,col 41)",
            "(line 454,col 9)-(line 454,col 36)",
            "(line 455,col 9)-(line 455,col 38)",
            "(line 456,col 9)-(line 456,col 30)",
            "(line 457,col 9)-(line 457,col 51)",
            "(line 459,col 9)-(line 459,col 27)",
            "(line 460,col 9)-(line 460,col 31)",
            "(line 461,col 9)-(line 461,col 29)",
            "(line 462,col 9)-(line 462,col 80)",
            "(line 464,col 9)-(line 464,col 30)",
            "(line 465,col 9)-(line 465,col 31)",
            "(line 466,col 9)-(line 466,col 33)",
            "(line 467,col 9)-(line 467,col 59)",
            "(line 469,col 9)-(line 469,col 28)",
            "(line 470,col 9)-(line 470,col 31)",
            "(line 471,col 9)-(line 471,col 29)",
            "(line 473,col 9)-(line 473,col 28)",
            "(line 474,col 9)-(line 474,col 31)",
            "(line 475,col 9)-(line 475,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testGetCharsIntIntCharArrayInt()",
        "snippet": "    public void testGetCharsIntIntCharArrayInt( ) {\n        StrBuilder sb = new StrBuilder();\n               \n        sb.append(\"junit\");\n        char[] a = new char[5];\n        sb.getChars(0,5,a,0);\n        assertTrue(Arrays.equals(new char[] {'j','u','n','i','t'},a));\n        \n        a = new char[5];\n        sb.getChars(0,2,a,3);\n        assertTrue(Arrays.equals(new char[] {0,0,0,'j','u'},a));\n        \n        try {\n            sb.getChars(-1,0,a,0);\n            fail(\"no exception\");\n        }\n        catch (IndexOutOfBoundsException e) {\n        }\n        \n        try {\n            sb.getChars(0,-1,a,0);\n            fail(\"no exception\");\n        }\n        catch (IndexOutOfBoundsException e) {\n        }\n        \n        try {\n            sb.getChars(0,20,a,0);\n            fail(\"no exception\");\n        }\n        catch (IndexOutOfBoundsException e) {\n        }\n        \n        try {\n            sb.getChars(4,2,a,0);\n            fail(\"no exception\");\n        }\n        catch (IndexOutOfBoundsException e) {\n        }\n    }",
        "begin_line": 478,
        "end_line": 517,
        "comment": "",
        "child_ranges": [
            "(line 479,col 9)-(line 479,col 41)",
            "(line 481,col 9)-(line 481,col 27)",
            "(line 482,col 9)-(line 482,col 31)",
            "(line 483,col 9)-(line 483,col 29)",
            "(line 484,col 9)-(line 484,col 70)",
            "(line 486,col 9)-(line 486,col 24)",
            "(line 487,col 9)-(line 487,col 29)",
            "(line 488,col 9)-(line 488,col 64)",
            "(line 490,col 9)-(line 495,col 9)",
            "(line 497,col 9)-(line 502,col 9)",
            "(line 504,col 9)-(line 509,col 9)",
            "(line 511,col 9)-(line 516,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testDeleteIntInt()",
        "snippet": "    public void testDeleteIntInt() {\n        StrBuilder sb = new StrBuilder(\"abc\");\n        sb.delete(0, 1);\n        assertEquals(\"bc\", sb.toString()); \n        sb.delete(1, 2);\n        assertEquals(\"b\", sb.toString());\n        sb.delete(0, 1);\n        assertEquals(\"\", sb.toString()); \n        sb.delete(0, 1000);\n        assertEquals(\"\", sb.toString()); \n        \n        try {\n            sb.delete(1, 2);\n            fail(\"Expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {}\n        try {\n            sb.delete(-1, 1);\n            fail(\"Expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {}\n        \n        sb = new StrBuilder(\"anything\");\n        try {\n            sb.delete(2, 1);\n            fail(\"Expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {}\n    }",
        "begin_line": 520,
        "end_line": 545,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 521,col 9)-(line 521,col 46)",
            "(line 522,col 9)-(line 522,col 24)",
            "(line 523,col 9)-(line 523,col 42)",
            "(line 524,col 9)-(line 524,col 24)",
            "(line 525,col 9)-(line 525,col 41)",
            "(line 526,col 9)-(line 526,col 24)",
            "(line 527,col 9)-(line 527,col 40)",
            "(line 528,col 9)-(line 528,col 27)",
            "(line 529,col 9)-(line 529,col 40)",
            "(line 531,col 9)-(line 534,col 48)",
            "(line 535,col 9)-(line 538,col 48)",
            "(line 540,col 9)-(line 540,col 40)",
            "(line 541,col 9)-(line 544,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testDeleteAll_char()",
        "snippet": "    public void testDeleteAll_char() {\n        StrBuilder sb = new StrBuilder(\"abcbccba\");\n        sb.deleteAll('X');\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.deleteAll('a');\n        assertEquals(\"bcbccb\", sb.toString());\n        sb.deleteAll('c');\n        assertEquals(\"bbb\", sb.toString());\n        sb.deleteAll('b');\n        assertEquals(\"\", sb.toString());\n\n        sb = new StrBuilder(\"\");\n        sb.deleteAll('b');\n        assertEquals(\"\", sb.toString());\n    }",
        "begin_line": 548,
        "end_line": 562,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 549,col 9)-(line 549,col 51)",
            "(line 550,col 9)-(line 550,col 26)",
            "(line 551,col 9)-(line 551,col 48)",
            "(line 552,col 9)-(line 552,col 26)",
            "(line 553,col 9)-(line 553,col 46)",
            "(line 554,col 9)-(line 554,col 26)",
            "(line 555,col 9)-(line 555,col 43)",
            "(line 556,col 9)-(line 556,col 26)",
            "(line 557,col 9)-(line 557,col 40)",
            "(line 559,col 9)-(line 559,col 32)",
            "(line 560,col 9)-(line 560,col 26)",
            "(line 561,col 9)-(line 561,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testDeleteFirst_char()",
        "snippet": "    public void testDeleteFirst_char() {\n        StrBuilder sb = new StrBuilder(\"abcba\");\n        sb.deleteFirst('X');\n        assertEquals(\"abcba\", sb.toString());\n        sb.deleteFirst('a');\n        assertEquals(\"bcba\", sb.toString());\n        sb.deleteFirst('c');\n        assertEquals(\"bba\", sb.toString());\n        sb.deleteFirst('b');\n        assertEquals(\"ba\", sb.toString());\n\n        sb = new StrBuilder(\"\");\n        sb.deleteFirst('b');\n        assertEquals(\"\", sb.toString());\n    }",
        "begin_line": 564,
        "end_line": 578,
        "comment": "",
        "child_ranges": [
            "(line 565,col 9)-(line 565,col 48)",
            "(line 566,col 9)-(line 566,col 28)",
            "(line 567,col 9)-(line 567,col 45)",
            "(line 568,col 9)-(line 568,col 28)",
            "(line 569,col 9)-(line 569,col 44)",
            "(line 570,col 9)-(line 570,col 28)",
            "(line 571,col 9)-(line 571,col 43)",
            "(line 572,col 9)-(line 572,col 28)",
            "(line 573,col 9)-(line 573,col 42)",
            "(line 575,col 9)-(line 575,col 32)",
            "(line 576,col 9)-(line 576,col 28)",
            "(line 577,col 9)-(line 577,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testDeleteAll_String()",
        "snippet": "    public void testDeleteAll_String() {\n        StrBuilder sb = new StrBuilder(\"abcbccba\");\n        sb.deleteAll((String) null);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.deleteAll(\"\");\n        assertEquals(\"abcbccba\", sb.toString());\n        \n        sb.deleteAll(\"X\");\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.deleteAll(\"a\");\n        assertEquals(\"bcbccb\", sb.toString());\n        sb.deleteAll(\"c\");\n        assertEquals(\"bbb\", sb.toString());\n        sb.deleteAll(\"b\");\n        assertEquals(\"\", sb.toString());\n\n        sb = new StrBuilder(\"abcbccba\");\n        sb.deleteAll(\"bc\");\n        assertEquals(\"acba\", sb.toString());\n\n        sb = new StrBuilder(\"\");\n        sb.deleteAll(\"bc\");\n        assertEquals(\"\", sb.toString());\n    }",
        "begin_line": 581,
        "end_line": 604,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 582,col 9)-(line 582,col 51)",
            "(line 583,col 9)-(line 583,col 36)",
            "(line 584,col 9)-(line 584,col 48)",
            "(line 585,col 9)-(line 585,col 25)",
            "(line 586,col 9)-(line 586,col 48)",
            "(line 588,col 9)-(line 588,col 26)",
            "(line 589,col 9)-(line 589,col 48)",
            "(line 590,col 9)-(line 590,col 26)",
            "(line 591,col 9)-(line 591,col 46)",
            "(line 592,col 9)-(line 592,col 26)",
            "(line 593,col 9)-(line 593,col 43)",
            "(line 594,col 9)-(line 594,col 26)",
            "(line 595,col 9)-(line 595,col 40)",
            "(line 597,col 9)-(line 597,col 40)",
            "(line 598,col 9)-(line 598,col 27)",
            "(line 599,col 9)-(line 599,col 44)",
            "(line 601,col 9)-(line 601,col 32)",
            "(line 602,col 9)-(line 602,col 27)",
            "(line 603,col 9)-(line 603,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testDeleteFirst_String()",
        "snippet": "    public void testDeleteFirst_String() {\n        StrBuilder sb = new StrBuilder(\"abcbccba\");\n        sb.deleteFirst((String) null);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.deleteFirst(\"\");\n        assertEquals(\"abcbccba\", sb.toString());\n\n        sb.deleteFirst(\"X\");\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.deleteFirst(\"a\");\n        assertEquals(\"bcbccba\", sb.toString());\n        sb.deleteFirst(\"c\");\n        assertEquals(\"bbccba\", sb.toString());\n        sb.deleteFirst(\"b\");\n        assertEquals(\"bccba\", sb.toString());\n\n        sb = new StrBuilder(\"abcbccba\");\n        sb.deleteFirst(\"bc\");\n        assertEquals(\"abccba\", sb.toString());\n\n        sb = new StrBuilder(\"\");\n        sb.deleteFirst(\"bc\");\n        assertEquals(\"\", sb.toString());\n    }",
        "begin_line": 606,
        "end_line": 629,
        "comment": "",
        "child_ranges": [
            "(line 607,col 9)-(line 607,col 51)",
            "(line 608,col 9)-(line 608,col 38)",
            "(line 609,col 9)-(line 609,col 48)",
            "(line 610,col 9)-(line 610,col 27)",
            "(line 611,col 9)-(line 611,col 48)",
            "(line 613,col 9)-(line 613,col 28)",
            "(line 614,col 9)-(line 614,col 48)",
            "(line 615,col 9)-(line 615,col 28)",
            "(line 616,col 9)-(line 616,col 47)",
            "(line 617,col 9)-(line 617,col 28)",
            "(line 618,col 9)-(line 618,col 46)",
            "(line 619,col 9)-(line 619,col 28)",
            "(line 620,col 9)-(line 620,col 45)",
            "(line 622,col 9)-(line 622,col 40)",
            "(line 623,col 9)-(line 623,col 29)",
            "(line 624,col 9)-(line 624,col 46)",
            "(line 626,col 9)-(line 626,col 32)",
            "(line 627,col 9)-(line 627,col 29)",
            "(line 628,col 9)-(line 628,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testDeleteAll_StrMatcher()",
        "snippet": "    public void testDeleteAll_StrMatcher() {\n        StrBuilder sb = new StrBuilder(\"A0xA1A2yA3\");\n        sb.deleteAll((StrMatcher) null);\n        assertEquals(\"A0xA1A2yA3\", sb.toString());\n        sb.deleteAll(A_NUMBER_MATCHER);\n        assertEquals(\"xy\", sb.toString());\n\n        sb = new StrBuilder(\"Ax1\");\n        sb.deleteAll(A_NUMBER_MATCHER);\n        assertEquals(\"Ax1\", sb.toString());\n\n        sb = new StrBuilder(\"\");\n        sb.deleteAll(A_NUMBER_MATCHER);\n        assertEquals(\"\", sb.toString());\n    }",
        "begin_line": 632,
        "end_line": 646,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 633,col 9)-(line 633,col 53)",
            "(line 634,col 9)-(line 634,col 40)",
            "(line 635,col 9)-(line 635,col 50)",
            "(line 636,col 9)-(line 636,col 39)",
            "(line 637,col 9)-(line 637,col 42)",
            "(line 639,col 9)-(line 639,col 35)",
            "(line 640,col 9)-(line 640,col 39)",
            "(line 641,col 9)-(line 641,col 43)",
            "(line 643,col 9)-(line 643,col 32)",
            "(line 644,col 9)-(line 644,col 39)",
            "(line 645,col 9)-(line 645,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testDeleteFirst_StrMatcher()",
        "snippet": "    public void testDeleteFirst_StrMatcher() {\n        StrBuilder sb = new StrBuilder(\"A0xA1A2yA3\");\n        sb.deleteFirst((StrMatcher) null);\n        assertEquals(\"A0xA1A2yA3\", sb.toString());\n        sb.deleteFirst(A_NUMBER_MATCHER);\n        assertEquals(\"xA1A2yA3\", sb.toString());\n\n        sb = new StrBuilder(\"Ax1\");\n        sb.deleteFirst(A_NUMBER_MATCHER);\n        assertEquals(\"Ax1\", sb.toString());\n\n        sb = new StrBuilder(\"\");\n        sb.deleteFirst(A_NUMBER_MATCHER);\n        assertEquals(\"\", sb.toString());\n    }",
        "begin_line": 648,
        "end_line": 662,
        "comment": "",
        "child_ranges": [
            "(line 649,col 9)-(line 649,col 53)",
            "(line 650,col 9)-(line 650,col 42)",
            "(line 651,col 9)-(line 651,col 50)",
            "(line 652,col 9)-(line 652,col 41)",
            "(line 653,col 9)-(line 653,col 48)",
            "(line 655,col 9)-(line 655,col 35)",
            "(line 656,col 9)-(line 656,col 41)",
            "(line 657,col 9)-(line 657,col 43)",
            "(line 659,col 9)-(line 659,col 32)",
            "(line 660,col 9)-(line 660,col 41)",
            "(line 661,col 9)-(line 661,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testReplace_int_int_String()",
        "snippet": "    public void testReplace_int_int_String() {\n        StrBuilder sb = new StrBuilder(\"abc\");\n        sb.replace(0, 1, \"d\");\n        assertEquals(\"dbc\", sb.toString());\n        sb.replace(0, 1, \"aaa\");\n        assertEquals(\"aaabc\", sb.toString());\n        sb.replace(0, 3, \"\");\n        assertEquals(\"bc\", sb.toString());\n        sb.replace(1, 2, (String) null);\n        assertEquals(\"b\", sb.toString());\n        sb.replace(1, 1000, \"text\");\n        assertEquals(\"btext\", sb.toString());\n        sb.replace(0, 1000, \"text\");\n        assertEquals(\"text\", sb.toString());\n        \n        sb = new StrBuilder(\"atext\");\n        sb.replace(1, 1, \"ny\");\n        assertEquals(\"anytext\", sb.toString());\n        try {\n            sb.replace(2, 1, \"anything\");\n            fail(\"Expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {}\n        \n        sb = new StrBuilder();\n        try {\n            sb.replace(1, 2, \"anything\");\n            fail(\"Expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {}\n        try {\n            sb.replace(-1, 1, \"anything\");\n            fail(\"Expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {}\n    }",
        "begin_line": 665,
        "end_line": 697,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 666,col 9)-(line 666,col 46)",
            "(line 667,col 9)-(line 667,col 30)",
            "(line 668,col 9)-(line 668,col 43)",
            "(line 669,col 9)-(line 669,col 32)",
            "(line 670,col 9)-(line 670,col 45)",
            "(line 671,col 9)-(line 671,col 29)",
            "(line 672,col 9)-(line 672,col 42)",
            "(line 673,col 9)-(line 673,col 40)",
            "(line 674,col 9)-(line 674,col 41)",
            "(line 675,col 9)-(line 675,col 36)",
            "(line 676,col 9)-(line 676,col 45)",
            "(line 677,col 9)-(line 677,col 36)",
            "(line 678,col 9)-(line 678,col 44)",
            "(line 680,col 9)-(line 680,col 37)",
            "(line 681,col 9)-(line 681,col 31)",
            "(line 682,col 9)-(line 682,col 47)",
            "(line 683,col 9)-(line 686,col 48)",
            "(line 688,col 9)-(line 688,col 30)",
            "(line 689,col 9)-(line 692,col 48)",
            "(line 693,col 9)-(line 696,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testReplaceAll_char_char()",
        "snippet": "    public void testReplaceAll_char_char() {\n        StrBuilder sb = new StrBuilder(\"abcbccba\");\n        sb.replaceAll('x', 'y');\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceAll('a', 'd');\n        assertEquals(\"dbcbccbd\", sb.toString());\n        sb.replaceAll('b', 'e');\n        assertEquals(\"dececced\", sb.toString());\n        sb.replaceAll('c', 'f');\n        assertEquals(\"defeffed\", sb.toString());\n        sb.replaceAll('d', 'd');\n        assertEquals(\"defeffed\", sb.toString());\n    }",
        "begin_line": 700,
        "end_line": 712,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 701,col 9)-(line 701,col 51)",
            "(line 702,col 9)-(line 702,col 32)",
            "(line 703,col 9)-(line 703,col 48)",
            "(line 704,col 9)-(line 704,col 32)",
            "(line 705,col 9)-(line 705,col 48)",
            "(line 706,col 9)-(line 706,col 32)",
            "(line 707,col 9)-(line 707,col 48)",
            "(line 708,col 9)-(line 708,col 32)",
            "(line 709,col 9)-(line 709,col 48)",
            "(line 710,col 9)-(line 710,col 32)",
            "(line 711,col 9)-(line 711,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testReplaceFirst_char_char()",
        "snippet": "    public void testReplaceFirst_char_char() {\n        StrBuilder sb = new StrBuilder(\"abcbccba\");\n        sb.replaceFirst('x', 'y');\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceFirst('a', 'd');\n        assertEquals(\"dbcbccba\", sb.toString());\n        sb.replaceFirst('b', 'e');\n        assertEquals(\"decbccba\", sb.toString());\n        sb.replaceFirst('c', 'f');\n        assertEquals(\"defbccba\", sb.toString());\n        sb.replaceFirst('d', 'd');\n        assertEquals(\"defbccba\", sb.toString());\n    }",
        "begin_line": 715,
        "end_line": 727,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 716,col 9)-(line 716,col 51)",
            "(line 717,col 9)-(line 717,col 34)",
            "(line 718,col 9)-(line 718,col 48)",
            "(line 719,col 9)-(line 719,col 34)",
            "(line 720,col 9)-(line 720,col 48)",
            "(line 721,col 9)-(line 721,col 34)",
            "(line 722,col 9)-(line 722,col 48)",
            "(line 723,col 9)-(line 723,col 34)",
            "(line 724,col 9)-(line 724,col 48)",
            "(line 725,col 9)-(line 725,col 34)",
            "(line 726,col 9)-(line 726,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testReplaceAll_String_String()",
        "snippet": "    public void testReplaceAll_String_String() {\n        StrBuilder sb = new StrBuilder(\"abcbccba\");\n        sb.replaceAll((String) null, null);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceAll((String) null, \"anything\");\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceAll(\"\", null);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceAll(\"\", \"anything\");\n        assertEquals(\"abcbccba\", sb.toString());\n        \n        sb.replaceAll(\"x\", \"y\");\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceAll(\"a\", \"d\");\n        assertEquals(\"dbcbccbd\", sb.toString());\n        sb.replaceAll(\"d\", null);\n        assertEquals(\"bcbccb\", sb.toString());\n        sb.replaceAll(\"cb\", \"-\");\n        assertEquals(\"b-c-\", sb.toString());\n        \n        sb = new StrBuilder(\"abcba\");\n        sb.replaceAll(\"b\", \"xbx\");\n        assertEquals(\"axbxcxbxa\", sb.toString());\n        \n        sb = new StrBuilder(\"bb\");\n        sb.replaceAll(\"b\", \"xbx\");\n        assertEquals(\"xbxxbx\", sb.toString());\n    }",
        "begin_line": 730,
        "end_line": 757,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 731,col 9)-(line 731,col 51)",
            "(line 732,col 9)-(line 732,col 43)",
            "(line 733,col 9)-(line 733,col 48)",
            "(line 734,col 9)-(line 734,col 49)",
            "(line 735,col 9)-(line 735,col 48)",
            "(line 736,col 9)-(line 736,col 32)",
            "(line 737,col 9)-(line 737,col 48)",
            "(line 738,col 9)-(line 738,col 38)",
            "(line 739,col 9)-(line 739,col 48)",
            "(line 741,col 9)-(line 741,col 32)",
            "(line 742,col 9)-(line 742,col 48)",
            "(line 743,col 9)-(line 743,col 32)",
            "(line 744,col 9)-(line 744,col 48)",
            "(line 745,col 9)-(line 745,col 33)",
            "(line 746,col 9)-(line 746,col 46)",
            "(line 747,col 9)-(line 747,col 33)",
            "(line 748,col 9)-(line 748,col 44)",
            "(line 750,col 9)-(line 750,col 37)",
            "(line 751,col 9)-(line 751,col 34)",
            "(line 752,col 9)-(line 752,col 49)",
            "(line 754,col 9)-(line 754,col 34)",
            "(line 755,col 9)-(line 755,col 34)",
            "(line 756,col 9)-(line 756,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testReplaceFirst_String_String()",
        "snippet": "    public void testReplaceFirst_String_String() {\n        StrBuilder sb = new StrBuilder(\"abcbccba\");\n        sb.replaceFirst((String) null, null);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceFirst((String) null, \"anything\");\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceFirst(\"\", null);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceFirst(\"\", \"anything\");\n        assertEquals(\"abcbccba\", sb.toString());\n        \n        sb.replaceFirst(\"x\", \"y\");\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceFirst(\"a\", \"d\");\n        assertEquals(\"dbcbccba\", sb.toString());\n        sb.replaceFirst(\"d\", null);\n        assertEquals(\"bcbccba\", sb.toString());\n        sb.replaceFirst(\"cb\", \"-\");\n        assertEquals(\"b-ccba\", sb.toString());\n        \n        sb = new StrBuilder(\"abcba\");\n        sb.replaceFirst(\"b\", \"xbx\");\n        assertEquals(\"axbxcba\", sb.toString());\n        \n        sb = new StrBuilder(\"bb\");\n        sb.replaceFirst(\"b\", \"xbx\");\n        assertEquals(\"xbxb\", sb.toString());\n    }",
        "begin_line": 759,
        "end_line": 786,
        "comment": "",
        "child_ranges": [
            "(line 760,col 9)-(line 760,col 51)",
            "(line 761,col 9)-(line 761,col 45)",
            "(line 762,col 9)-(line 762,col 48)",
            "(line 763,col 9)-(line 763,col 51)",
            "(line 764,col 9)-(line 764,col 48)",
            "(line 765,col 9)-(line 765,col 34)",
            "(line 766,col 9)-(line 766,col 48)",
            "(line 767,col 9)-(line 767,col 40)",
            "(line 768,col 9)-(line 768,col 48)",
            "(line 770,col 9)-(line 770,col 34)",
            "(line 771,col 9)-(line 771,col 48)",
            "(line 772,col 9)-(line 772,col 34)",
            "(line 773,col 9)-(line 773,col 48)",
            "(line 774,col 9)-(line 774,col 35)",
            "(line 775,col 9)-(line 775,col 47)",
            "(line 776,col 9)-(line 776,col 35)",
            "(line 777,col 9)-(line 777,col 46)",
            "(line 779,col 9)-(line 779,col 37)",
            "(line 780,col 9)-(line 780,col 36)",
            "(line 781,col 9)-(line 781,col 47)",
            "(line 783,col 9)-(line 783,col 34)",
            "(line 784,col 9)-(line 784,col 36)",
            "(line 785,col 9)-(line 785,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testReplaceAll_StrMatcher_String()",
        "snippet": "    public void testReplaceAll_StrMatcher_String() {\n        StrBuilder sb = new StrBuilder(\"abcbccba\");\n        sb.replaceAll((StrMatcher) null, null);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceAll((StrMatcher) null, \"anything\");\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceAll(StrMatcher.noneMatcher(), null);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceAll(StrMatcher.noneMatcher(), \"anything\");\n        assertEquals(\"abcbccba\", sb.toString());\n        \n        sb.replaceAll(StrMatcher.charMatcher('x'), \"y\");\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceAll(StrMatcher.charMatcher('a'), \"d\");\n        assertEquals(\"dbcbccbd\", sb.toString());\n        sb.replaceAll(StrMatcher.charMatcher('d'), null);\n        assertEquals(\"bcbccb\", sb.toString());\n        sb.replaceAll(StrMatcher.stringMatcher(\"cb\"), \"-\");\n        assertEquals(\"b-c-\", sb.toString());\n        \n        sb = new StrBuilder(\"abcba\");\n        sb.replaceAll(StrMatcher.charMatcher('b'), \"xbx\");\n        assertEquals(\"axbxcxbxa\", sb.toString());\n        \n        sb = new StrBuilder(\"bb\");\n        sb.replaceAll(StrMatcher.charMatcher('b'), \"xbx\");\n        assertEquals(\"xbxxbx\", sb.toString());\n        \n        sb = new StrBuilder(\"A1-A2A3-A4\");\n        sb.replaceAll(A_NUMBER_MATCHER, \"***\");\n        assertEquals(\"***-******-***\", sb.toString());\n    }",
        "begin_line": 789,
        "end_line": 820,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 790,col 9)-(line 790,col 51)",
            "(line 791,col 9)-(line 791,col 47)",
            "(line 792,col 9)-(line 792,col 48)",
            "(line 793,col 9)-(line 793,col 53)",
            "(line 794,col 9)-(line 794,col 48)",
            "(line 795,col 9)-(line 795,col 54)",
            "(line 796,col 9)-(line 796,col 48)",
            "(line 797,col 9)-(line 797,col 60)",
            "(line 798,col 9)-(line 798,col 48)",
            "(line 800,col 9)-(line 800,col 56)",
            "(line 801,col 9)-(line 801,col 48)",
            "(line 802,col 9)-(line 802,col 56)",
            "(line 803,col 9)-(line 803,col 48)",
            "(line 804,col 9)-(line 804,col 57)",
            "(line 805,col 9)-(line 805,col 46)",
            "(line 806,col 9)-(line 806,col 59)",
            "(line 807,col 9)-(line 807,col 44)",
            "(line 809,col 9)-(line 809,col 37)",
            "(line 810,col 9)-(line 810,col 58)",
            "(line 811,col 9)-(line 811,col 49)",
            "(line 813,col 9)-(line 813,col 34)",
            "(line 814,col 9)-(line 814,col 58)",
            "(line 815,col 9)-(line 815,col 46)",
            "(line 817,col 9)-(line 817,col 42)",
            "(line 818,col 9)-(line 818,col 47)",
            "(line 819,col 9)-(line 819,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testReplaceFirst_StrMatcher_String()",
        "snippet": "    public void testReplaceFirst_StrMatcher_String() {\n        StrBuilder sb = new StrBuilder(\"abcbccba\");\n        sb.replaceFirst((StrMatcher) null, null);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceFirst((StrMatcher) null, \"anything\");\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceFirst(StrMatcher.noneMatcher(), null);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceFirst(StrMatcher.noneMatcher(), \"anything\");\n        assertEquals(\"abcbccba\", sb.toString());\n        \n        sb.replaceFirst(StrMatcher.charMatcher('x'), \"y\");\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceFirst(StrMatcher.charMatcher('a'), \"d\");\n        assertEquals(\"dbcbccba\", sb.toString());\n        sb.replaceFirst(StrMatcher.charMatcher('d'), null);\n        assertEquals(\"bcbccba\", sb.toString());\n        sb.replaceFirst(StrMatcher.stringMatcher(\"cb\"), \"-\");\n        assertEquals(\"b-ccba\", sb.toString());\n        \n        sb = new StrBuilder(\"abcba\");\n        sb.replaceFirst(StrMatcher.charMatcher('b'), \"xbx\");\n        assertEquals(\"axbxcba\", sb.toString());\n        \n        sb = new StrBuilder(\"bb\");\n        sb.replaceFirst(StrMatcher.charMatcher('b'), \"xbx\");\n        assertEquals(\"xbxb\", sb.toString());\n        \n        sb = new StrBuilder(\"A1-A2A3-A4\");\n        sb.replaceFirst(A_NUMBER_MATCHER, \"***\");\n        assertEquals(\"***-A2A3-A4\", sb.toString());\n    }",
        "begin_line": 822,
        "end_line": 853,
        "comment": "",
        "child_ranges": [
            "(line 823,col 9)-(line 823,col 51)",
            "(line 824,col 9)-(line 824,col 49)",
            "(line 825,col 9)-(line 825,col 48)",
            "(line 826,col 9)-(line 826,col 55)",
            "(line 827,col 9)-(line 827,col 48)",
            "(line 828,col 9)-(line 828,col 56)",
            "(line 829,col 9)-(line 829,col 48)",
            "(line 830,col 9)-(line 830,col 62)",
            "(line 831,col 9)-(line 831,col 48)",
            "(line 833,col 9)-(line 833,col 58)",
            "(line 834,col 9)-(line 834,col 48)",
            "(line 835,col 9)-(line 835,col 58)",
            "(line 836,col 9)-(line 836,col 48)",
            "(line 837,col 9)-(line 837,col 59)",
            "(line 838,col 9)-(line 838,col 47)",
            "(line 839,col 9)-(line 839,col 61)",
            "(line 840,col 9)-(line 840,col 46)",
            "(line 842,col 9)-(line 842,col 37)",
            "(line 843,col 9)-(line 843,col 60)",
            "(line 844,col 9)-(line 844,col 47)",
            "(line 846,col 9)-(line 846,col 34)",
            "(line 847,col 9)-(line 847,col 60)",
            "(line 848,col 9)-(line 848,col 44)",
            "(line 850,col 9)-(line 850,col 42)",
            "(line 851,col 9)-(line 851,col 49)",
            "(line 852,col 9)-(line 852,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryMatcher()",
        "snippet": "    public void testReplace_StrMatcher_String_int_int_int_VaryMatcher() {\n        StrBuilder sb = new StrBuilder(\"abcbccba\");\n        sb.replace((StrMatcher) null, \"x\", 0, sb.length(), -1);\n        assertEquals(\"abcbccba\", sb.toString());\n        \n        sb.replace(StrMatcher.charMatcher('a'), \"x\", 0, sb.length(), -1);\n        assertEquals(\"xbcbccbx\", sb.toString());\n        \n        sb.replace(StrMatcher.stringMatcher(\"cb\"), \"x\", 0, sb.length(), -1);\n        assertEquals(\"xbxcxx\", sb.toString());\n        \n        sb = new StrBuilder(\"A1-A2A3-A4\");\n        sb.replace(A_NUMBER_MATCHER, \"***\", 0, sb.length(), -1);\n        assertEquals(\"***-******-***\", sb.toString());\n        \n        sb = new StrBuilder();\n        sb.replace(A_NUMBER_MATCHER, \"***\", 0, sb.length(), -1);\n        assertEquals(\"\", sb.toString());\n    }",
        "begin_line": 856,
        "end_line": 874,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 857,col 9)-(line 857,col 51)",
            "(line 858,col 9)-(line 858,col 63)",
            "(line 859,col 9)-(line 859,col 48)",
            "(line 861,col 9)-(line 861,col 73)",
            "(line 862,col 9)-(line 862,col 48)",
            "(line 864,col 9)-(line 864,col 76)",
            "(line 865,col 9)-(line 865,col 46)",
            "(line 867,col 9)-(line 867,col 42)",
            "(line 868,col 9)-(line 868,col 64)",
            "(line 869,col 9)-(line 869,col 54)",
            "(line 871,col 9)-(line 871,col 30)",
            "(line 872,col 9)-(line 872,col 64)",
            "(line 873,col 9)-(line 873,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryReplace()",
        "snippet": "    public void testReplace_StrMatcher_String_int_int_int_VaryReplace() {\n        StrBuilder sb = new StrBuilder(\"abcbccba\");\n        sb.replace(StrMatcher.stringMatcher(\"cb\"), \"cb\", 0, sb.length(), -1);\n        assertEquals(\"abcbccba\", sb.toString());\n        \n        sb = new StrBuilder(\"abcbccba\");\n        sb.replace(StrMatcher.stringMatcher(\"cb\"), \"-\", 0, sb.length(), -1);\n        assertEquals(\"ab-c-a\", sb.toString());\n        \n        sb = new StrBuilder(\"abcbccba\");\n        sb.replace(StrMatcher.stringMatcher(\"cb\"), \"+++\", 0, sb.length(), -1);\n        assertEquals(\"ab+++c+++a\", sb.toString());\n        \n        sb = new StrBuilder(\"abcbccba\");\n        sb.replace(StrMatcher.stringMatcher(\"cb\"), \"\", 0, sb.length(), -1);\n        assertEquals(\"abca\", sb.toString());\n        \n        sb = new StrBuilder(\"abcbccba\");\n        sb.replace(StrMatcher.stringMatcher(\"cb\"), null, 0, sb.length(), -1);\n        assertEquals(\"abca\", sb.toString());\n    }",
        "begin_line": 876,
        "end_line": 896,
        "comment": "",
        "child_ranges": [
            "(line 877,col 9)-(line 877,col 51)",
            "(line 878,col 9)-(line 878,col 77)",
            "(line 879,col 9)-(line 879,col 48)",
            "(line 881,col 9)-(line 881,col 40)",
            "(line 882,col 9)-(line 882,col 76)",
            "(line 883,col 9)-(line 883,col 46)",
            "(line 885,col 9)-(line 885,col 40)",
            "(line 886,col 9)-(line 886,col 78)",
            "(line 887,col 9)-(line 887,col 50)",
            "(line 889,col 9)-(line 889,col 40)",
            "(line 890,col 9)-(line 890,col 75)",
            "(line 891,col 9)-(line 891,col 44)",
            "(line 893,col 9)-(line 893,col 40)",
            "(line 894,col 9)-(line 894,col 77)",
            "(line 895,col 9)-(line 895,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryStartIndex()",
        "snippet": "    public void testReplace_StrMatcher_String_int_int_int_VaryStartIndex() {\n        StrBuilder sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, sb.length(), -1);\n        assertEquals(\"-x--y-\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 1, sb.length(), -1);\n        assertEquals(\"aax--y-\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 2, sb.length(), -1);\n        assertEquals(\"aax--y-\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 3, sb.length(), -1);\n        assertEquals(\"aax--y-\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 4, sb.length(), -1);\n        assertEquals(\"aaxa-ay-\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 5, sb.length(), -1);\n        assertEquals(\"aaxaa-y-\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 6, sb.length(), -1);\n        assertEquals(\"aaxaaaay-\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 7, sb.length(), -1);\n        assertEquals(\"aaxaaaay-\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 8, sb.length(), -1);\n        assertEquals(\"aaxaaaay-\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 9, sb.length(), -1);\n        assertEquals(\"aaxaaaayaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 10, sb.length(), -1);\n        assertEquals(\"aaxaaaayaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        try {\n            sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 11, sb.length(), -1);\n            fail();\n        } catch (IndexOutOfBoundsException ex) {}\n        assertEquals(\"aaxaaaayaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        try {\n            sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", -1, sb.length(), -1);\n            fail();\n        } catch (IndexOutOfBoundsException ex) {}\n        assertEquals(\"aaxaaaayaa\", sb.toString());\n    }",
        "begin_line": 898,
        "end_line": 956,
        "comment": "",
        "child_ranges": [
            "(line 899,col 9)-(line 899,col 53)",
            "(line 900,col 9)-(line 900,col 76)",
            "(line 901,col 9)-(line 901,col 46)",
            "(line 903,col 9)-(line 903,col 42)",
            "(line 904,col 9)-(line 904,col 76)",
            "(line 905,col 9)-(line 905,col 47)",
            "(line 907,col 9)-(line 907,col 42)",
            "(line 908,col 9)-(line 908,col 76)",
            "(line 909,col 9)-(line 909,col 47)",
            "(line 911,col 9)-(line 911,col 42)",
            "(line 912,col 9)-(line 912,col 76)",
            "(line 913,col 9)-(line 913,col 47)",
            "(line 915,col 9)-(line 915,col 42)",
            "(line 916,col 9)-(line 916,col 76)",
            "(line 917,col 9)-(line 917,col 48)",
            "(line 919,col 9)-(line 919,col 42)",
            "(line 920,col 9)-(line 920,col 76)",
            "(line 921,col 9)-(line 921,col 48)",
            "(line 923,col 9)-(line 923,col 42)",
            "(line 924,col 9)-(line 924,col 76)",
            "(line 925,col 9)-(line 925,col 49)",
            "(line 927,col 9)-(line 927,col 42)",
            "(line 928,col 9)-(line 928,col 76)",
            "(line 929,col 9)-(line 929,col 49)",
            "(line 931,col 9)-(line 931,col 42)",
            "(line 932,col 9)-(line 932,col 76)",
            "(line 933,col 9)-(line 933,col 49)",
            "(line 935,col 9)-(line 935,col 42)",
            "(line 936,col 9)-(line 936,col 76)",
            "(line 937,col 9)-(line 937,col 50)",
            "(line 939,col 9)-(line 939,col 42)",
            "(line 940,col 9)-(line 940,col 77)",
            "(line 941,col 9)-(line 941,col 50)",
            "(line 943,col 9)-(line 943,col 42)",
            "(line 944,col 9)-(line 947,col 49)",
            "(line 948,col 9)-(line 948,col 50)",
            "(line 950,col 9)-(line 950,col 42)",
            "(line 951,col 9)-(line 954,col 49)",
            "(line 955,col 9)-(line 955,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryEndIndex()",
        "snippet": "    public void testReplace_StrMatcher_String_int_int_int_VaryEndIndex() {\n        StrBuilder sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 0, -1);\n        assertEquals(\"aaxaaaayaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 2, -1);\n        assertEquals(\"-xaaaayaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 3, -1);\n        assertEquals(\"-xaaaayaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 4, -1);\n        assertEquals(\"-xaaaayaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 5, -1);\n        assertEquals(\"-x-aayaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 6, -1);\n        assertEquals(\"-x-aayaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 7, -1);\n        assertEquals(\"-x--yaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 8, -1);\n        assertEquals(\"-x--yaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 9, -1);\n        assertEquals(\"-x--yaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, -1);\n        assertEquals(\"-x--y-\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 1000, -1);\n        assertEquals(\"-x--y-\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        try {\n            sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 2, 1, -1);\n            fail();\n        } catch (IndexOutOfBoundsException ex) {}\n        assertEquals(\"aaxaaaayaa\", sb.toString());\n    }",
        "begin_line": 958,
        "end_line": 1009,
        "comment": "",
        "child_ranges": [
            "(line 959,col 9)-(line 959,col 53)",
            "(line 960,col 9)-(line 960,col 66)",
            "(line 961,col 9)-(line 961,col 50)",
            "(line 963,col 9)-(line 963,col 42)",
            "(line 964,col 9)-(line 964,col 66)",
            "(line 965,col 9)-(line 965,col 49)",
            "(line 967,col 9)-(line 967,col 42)",
            "(line 968,col 9)-(line 968,col 66)",
            "(line 969,col 9)-(line 969,col 49)",
            "(line 971,col 9)-(line 971,col 42)",
            "(line 972,col 9)-(line 972,col 66)",
            "(line 973,col 9)-(line 973,col 49)",
            "(line 975,col 9)-(line 975,col 42)",
            "(line 976,col 9)-(line 976,col 66)",
            "(line 977,col 9)-(line 977,col 48)",
            "(line 979,col 9)-(line 979,col 42)",
            "(line 980,col 9)-(line 980,col 66)",
            "(line 981,col 9)-(line 981,col 48)",
            "(line 983,col 9)-(line 983,col 42)",
            "(line 984,col 9)-(line 984,col 66)",
            "(line 985,col 9)-(line 985,col 47)",
            "(line 987,col 9)-(line 987,col 42)",
            "(line 988,col 9)-(line 988,col 66)",
            "(line 989,col 9)-(line 989,col 47)",
            "(line 991,col 9)-(line 991,col 42)",
            "(line 992,col 9)-(line 992,col 66)",
            "(line 993,col 9)-(line 993,col 47)",
            "(line 995,col 9)-(line 995,col 42)",
            "(line 996,col 9)-(line 996,col 67)",
            "(line 997,col 9)-(line 997,col 46)",
            "(line 999,col 9)-(line 999,col 42)",
            "(line 1000,col 9)-(line 1000,col 69)",
            "(line 1001,col 9)-(line 1001,col 46)",
            "(line 1003,col 9)-(line 1003,col 42)",
            "(line 1004,col 9)-(line 1007,col 49)",
            "(line 1008,col 9)-(line 1008,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryCount()",
        "snippet": "    public void testReplace_StrMatcher_String_int_int_int_VaryCount() {\n        StrBuilder sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, -1);\n        assertEquals(\"-x--y-\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 0);\n        assertEquals(\"aaxaaaayaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 1);\n        assertEquals(\"-xaaaayaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 2);\n        assertEquals(\"-x-aayaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 3);\n        assertEquals(\"-x--yaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 4);\n        assertEquals(\"-x--y-\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 5);\n        assertEquals(\"-x--y-\", sb.toString());\n    }",
        "begin_line": 1011,
        "end_line": 1039,
        "comment": "",
        "child_ranges": [
            "(line 1012,col 9)-(line 1012,col 53)",
            "(line 1013,col 9)-(line 1013,col 67)",
            "(line 1014,col 9)-(line 1014,col 46)",
            "(line 1016,col 9)-(line 1016,col 42)",
            "(line 1017,col 9)-(line 1017,col 66)",
            "(line 1018,col 9)-(line 1018,col 50)",
            "(line 1020,col 9)-(line 1020,col 42)",
            "(line 1021,col 9)-(line 1021,col 66)",
            "(line 1022,col 9)-(line 1022,col 49)",
            "(line 1024,col 9)-(line 1024,col 42)",
            "(line 1025,col 9)-(line 1025,col 66)",
            "(line 1026,col 9)-(line 1026,col 48)",
            "(line 1028,col 9)-(line 1028,col 42)",
            "(line 1029,col 9)-(line 1029,col 66)",
            "(line 1030,col 9)-(line 1030,col 47)",
            "(line 1032,col 9)-(line 1032,col 42)",
            "(line 1033,col 9)-(line 1033,col 66)",
            "(line 1034,col 9)-(line 1034,col 46)",
            "(line 1036,col 9)-(line 1036,col 42)",
            "(line 1037,col 9)-(line 1037,col 66)",
            "(line 1038,col 9)-(line 1038,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testReverse()",
        "snippet": "    public void testReverse() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(\"\", sb.reverse().toString());\n        \n        sb.clear().append(true);\n        assertEquals(\"eurt\", sb.reverse().toString());\n        assertEquals(\"true\", sb.reverse().toString());\n    }",
        "begin_line": 1042,
        "end_line": 1049,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1043,col 9)-(line 1043,col 41)",
            "(line 1044,col 9)-(line 1044,col 50)",
            "(line 1046,col 9)-(line 1046,col 32)",
            "(line 1047,col 9)-(line 1047,col 54)",
            "(line 1048,col 9)-(line 1048,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testTrim()",
        "snippet": "    public void testTrim() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(\"\", sb.reverse().toString());\n        \n        sb.clear().append(\" \\u0000 \");\n        assertEquals(\"\", sb.trim().toString());\n        \n        sb.clear().append(\" \\u0000 a b c\");\n        assertEquals(\"a b c\", sb.trim().toString());\n        \n        sb.clear().append(\"a b c \\u0000 \");\n        assertEquals(\"a b c\", sb.trim().toString());\n        \n        sb.clear().append(\" \\u0000 a b c \\u0000 \");\n        assertEquals(\"a b c\", sb.trim().toString());\n        \n        sb.clear().append(\"a b c\");\n        assertEquals(\"a b c\", sb.trim().toString());\n    }",
        "begin_line": 1052,
        "end_line": 1070,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1053,col 9)-(line 1053,col 41)",
            "(line 1054,col 9)-(line 1054,col 50)",
            "(line 1056,col 9)-(line 1056,col 38)",
            "(line 1057,col 9)-(line 1057,col 47)",
            "(line 1059,col 9)-(line 1059,col 43)",
            "(line 1060,col 9)-(line 1060,col 52)",
            "(line 1062,col 9)-(line 1062,col 43)",
            "(line 1063,col 9)-(line 1063,col 52)",
            "(line 1065,col 9)-(line 1065,col 51)",
            "(line 1066,col 9)-(line 1066,col 52)",
            "(line 1068,col 9)-(line 1068,col 35)",
            "(line 1069,col 9)-(line 1069,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testStartsWith()",
        "snippet": "    public void testStartsWith() {\n        StrBuilder sb = new StrBuilder();\n        assertFalse(sb.startsWith(\"a\"));\n        assertFalse(sb.startsWith(null));\n        assertTrue(sb.startsWith(\"\"));\n        sb.append(\"abc\");\n        assertTrue(sb.startsWith(\"a\"));\n        assertTrue(sb.startsWith(\"ab\"));\n        assertTrue(sb.startsWith(\"abc\"));\n        assertFalse(sb.startsWith(\"cba\"));\n    }",
        "begin_line": 1073,
        "end_line": 1083,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1074,col 9)-(line 1074,col 41)",
            "(line 1075,col 9)-(line 1075,col 40)",
            "(line 1076,col 9)-(line 1076,col 41)",
            "(line 1077,col 9)-(line 1077,col 38)",
            "(line 1078,col 9)-(line 1078,col 25)",
            "(line 1079,col 9)-(line 1079,col 39)",
            "(line 1080,col 9)-(line 1080,col 40)",
            "(line 1081,col 9)-(line 1081,col 41)",
            "(line 1082,col 9)-(line 1082,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testEndsWith()",
        "snippet": "    public void testEndsWith() {\n        StrBuilder sb = new StrBuilder();\n        assertFalse(sb.endsWith(\"a\"));\n        assertFalse(sb.endsWith(\"c\"));\n        assertTrue(sb.endsWith(\"\"));\n        assertFalse(sb.endsWith(null));\n        sb.append(\"abc\");\n        assertTrue(sb.endsWith(\"c\"));\n        assertTrue(sb.endsWith(\"bc\"));\n        assertTrue(sb.endsWith(\"abc\"));\n        assertFalse(sb.endsWith(\"cba\"));\n        assertFalse(sb.endsWith(\"abcd\"));\n        assertFalse(sb.endsWith(\" abc\"));\n        assertFalse(sb.endsWith(\"abc \"));\n    }",
        "begin_line": 1085,
        "end_line": 1099,
        "comment": "",
        "child_ranges": [
            "(line 1086,col 9)-(line 1086,col 41)",
            "(line 1087,col 9)-(line 1087,col 38)",
            "(line 1088,col 9)-(line 1088,col 38)",
            "(line 1089,col 9)-(line 1089,col 36)",
            "(line 1090,col 9)-(line 1090,col 39)",
            "(line 1091,col 9)-(line 1091,col 25)",
            "(line 1092,col 9)-(line 1092,col 37)",
            "(line 1093,col 9)-(line 1093,col 38)",
            "(line 1094,col 9)-(line 1094,col 39)",
            "(line 1095,col 9)-(line 1095,col 40)",
            "(line 1096,col 9)-(line 1096,col 41)",
            "(line 1097,col 9)-(line 1097,col 41)",
            "(line 1098,col 9)-(line 1098,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testSubstringInt()",
        "snippet": "    public void testSubstringInt() {\n        StrBuilder sb = new StrBuilder (\"hello goodbye\");\n        assertEquals (\"goodbye\", sb.substring(6));\n        assertEquals (\"hello goodbye\".substring(6), sb.substring(6));\n        assertEquals (\"hello goodbye\", sb.substring(0));\n        assertEquals (\"hello goodbye\".substring(0), sb.substring(0));\n        try {\n            sb.substring(-1);\n            fail ();\n        } catch (IndexOutOfBoundsException e) {}\n        \n        try {\n            sb.substring(15);\n            fail ();\n        } catch (IndexOutOfBoundsException e) {}\n    \n    }",
        "begin_line": 1102,
        "end_line": 1118,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1103,col 9)-(line 1103,col 57)",
            "(line 1104,col 9)-(line 1104,col 50)",
            "(line 1105,col 9)-(line 1105,col 69)",
            "(line 1106,col 9)-(line 1106,col 56)",
            "(line 1107,col 9)-(line 1107,col 69)",
            "(line 1108,col 9)-(line 1111,col 48)",
            "(line 1113,col 9)-(line 1116,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testSubstringIntInt()",
        "snippet": "    public void testSubstringIntInt() {\n        StrBuilder sb = new StrBuilder (\"hello goodbye\");\n        assertEquals (\"hello\", sb.substring(0, 5));\n        assertEquals (\"hello goodbye\".substring(0, 6), sb.substring(0, 6));\n        \n        assertEquals (\"goodbye\", sb.substring(6, 13));\n        assertEquals (\"hello goodbye\".substring(6,13), sb.substring(6, 13));\n        \n        assertEquals (\"goodbye\", sb.substring(6, 20));\n        \n        try {\n            sb.substring(-1, 5);\n            fail();\n        } catch (IndexOutOfBoundsException e) {}\n        \n        try {\n            sb.substring(15, 20);\n            fail();\n        } catch (IndexOutOfBoundsException e) {}\n    }",
        "begin_line": 1120,
        "end_line": 1139,
        "comment": "",
        "child_ranges": [
            "(line 1121,col 9)-(line 1121,col 57)",
            "(line 1122,col 9)-(line 1122,col 51)",
            "(line 1123,col 9)-(line 1123,col 75)",
            "(line 1125,col 9)-(line 1125,col 54)",
            "(line 1126,col 9)-(line 1126,col 76)",
            "(line 1128,col 9)-(line 1128,col 54)",
            "(line 1130,col 9)-(line 1133,col 48)",
            "(line 1135,col 9)-(line 1138,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testMidString()",
        "snippet": "    public void testMidString() {\n        StrBuilder sb = new StrBuilder(\"hello goodbye hello\");\n        assertEquals(\"goodbye\", sb.midString(6, 7));\n        assertEquals(\"hello\", sb.midString(0, 5));\n        assertEquals(\"hello\", sb.midString(-5, 5));\n        assertEquals(\"\", sb.midString(0, -1));\n        assertEquals(\"\", sb.midString(20, 2));\n        assertEquals(\"hello\", sb.midString(14, 22));\n    }",
        "begin_line": 1142,
        "end_line": 1150,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1143,col 9)-(line 1143,col 62)",
            "(line 1144,col 9)-(line 1144,col 52)",
            "(line 1145,col 9)-(line 1145,col 50)",
            "(line 1146,col 9)-(line 1146,col 51)",
            "(line 1147,col 9)-(line 1147,col 46)",
            "(line 1148,col 9)-(line 1148,col 46)",
            "(line 1149,col 9)-(line 1149,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testRightString()",
        "snippet": "    public void testRightString() {\n        StrBuilder sb = new StrBuilder(\"left right\");\n        assertEquals(\"right\", sb.rightString(5));\n        assertEquals(\"\", sb.rightString(0));\n        assertEquals(\"\", sb.rightString(-5));\n        assertEquals(\"left right\", sb.rightString(15));\n    }",
        "begin_line": 1152,
        "end_line": 1158,
        "comment": "",
        "child_ranges": [
            "(line 1153,col 9)-(line 1153,col 53)",
            "(line 1154,col 9)-(line 1154,col 49)",
            "(line 1155,col 9)-(line 1155,col 44)",
            "(line 1156,col 9)-(line 1156,col 45)",
            "(line 1157,col 9)-(line 1157,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testLeftString()",
        "snippet": "    public void testLeftString() {\n        StrBuilder sb = new StrBuilder(\"left right\");\n        assertEquals(\"left\", sb.leftString(4));\n        assertEquals(\"\", sb.leftString(0));\n        assertEquals(\"\", sb.leftString(-5));\n        assertEquals(\"left right\", sb.leftString(15));\n    }",
        "begin_line": 1160,
        "end_line": 1166,
        "comment": "",
        "child_ranges": [
            "(line 1161,col 9)-(line 1161,col 53)",
            "(line 1162,col 9)-(line 1162,col 47)",
            "(line 1163,col 9)-(line 1163,col 43)",
            "(line 1164,col 9)-(line 1164,col 44)",
            "(line 1165,col 9)-(line 1165,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testContains_char()",
        "snippet": "    public void testContains_char() {\n        StrBuilder sb = new StrBuilder(\"abcdefghijklmnopqrstuvwxyz\");\n        assertEquals(true, sb.contains('a'));\n        assertEquals(true, sb.contains('o'));\n        assertEquals(true, sb.contains('z'));\n        assertEquals(false, sb.contains('1'));\n    }",
        "begin_line": 1169,
        "end_line": 1175,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1170,col 9)-(line 1170,col 69)",
            "(line 1171,col 9)-(line 1171,col 45)",
            "(line 1172,col 9)-(line 1172,col 45)",
            "(line 1173,col 9)-(line 1173,col 45)",
            "(line 1174,col 9)-(line 1174,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testContains_String()",
        "snippet": "    public void testContains_String() {\n        StrBuilder sb = new StrBuilder(\"abcdefghijklmnopqrstuvwxyz\");\n        assertEquals(true, sb.contains(\"a\"));\n        assertEquals(true, sb.contains(\"pq\"));\n        assertEquals(true, sb.contains(\"z\"));\n        assertEquals(false, sb.contains(\"zyx\"));\n        assertEquals(false, sb.contains((String) null));\n    }",
        "begin_line": 1177,
        "end_line": 1184,
        "comment": "",
        "child_ranges": [
            "(line 1178,col 9)-(line 1178,col 69)",
            "(line 1179,col 9)-(line 1179,col 45)",
            "(line 1180,col 9)-(line 1180,col 46)",
            "(line 1181,col 9)-(line 1181,col 45)",
            "(line 1182,col 9)-(line 1182,col 48)",
            "(line 1183,col 9)-(line 1183,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testContains_StrMatcher()",
        "snippet": "    public void testContains_StrMatcher() {\n        StrBuilder sb = new StrBuilder(\"abcdefghijklmnopqrstuvwxyz\");\n        assertEquals(true, sb.contains(StrMatcher.charMatcher('a')));\n        assertEquals(true, sb.contains(StrMatcher.stringMatcher(\"pq\")));\n        assertEquals(true, sb.contains(StrMatcher.charMatcher('z')));\n        assertEquals(false, sb.contains(StrMatcher.stringMatcher(\"zy\")));\n        assertEquals(false, sb.contains((StrMatcher) null));\n\n        sb = new StrBuilder();\n        assertEquals(false, sb.contains(A_NUMBER_MATCHER));\n        sb.append(\"B A1 C\");\n        assertEquals(true, sb.contains(A_NUMBER_MATCHER));\n    }",
        "begin_line": 1186,
        "end_line": 1198,
        "comment": "",
        "child_ranges": [
            "(line 1187,col 9)-(line 1187,col 69)",
            "(line 1188,col 9)-(line 1188,col 69)",
            "(line 1189,col 9)-(line 1189,col 72)",
            "(line 1190,col 9)-(line 1190,col 69)",
            "(line 1191,col 9)-(line 1191,col 73)",
            "(line 1192,col 9)-(line 1192,col 60)",
            "(line 1194,col 9)-(line 1194,col 30)",
            "(line 1195,col 9)-(line 1195,col 59)",
            "(line 1196,col 9)-(line 1196,col 28)",
            "(line 1197,col 9)-(line 1197,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testIndexOf_char()",
        "snippet": "    public void testIndexOf_char() {\n        StrBuilder sb = new StrBuilder(\"abab\");\n        assertEquals(0, sb.indexOf('a'));\n        \n        // should work like String#indexOf\n        assertEquals(\"abab\".indexOf('a'), sb.indexOf('a'));\n\n        assertEquals(1, sb.indexOf('b'));\n        assertEquals(\"abab\".indexOf('b'), sb.indexOf('b'));\n\n        assertEquals(-1, sb.indexOf('z'));\n    }",
        "begin_line": 1201,
        "end_line": 1212,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1202,col 9)-(line 1202,col 47)",
            "(line 1203,col 9)-(line 1203,col 41)",
            "(line 1206,col 9)-(line 1206,col 59)",
            "(line 1208,col 9)-(line 1208,col 41)",
            "(line 1209,col 9)-(line 1209,col 59)",
            "(line 1211,col 9)-(line 1211,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testIndexOf_char_int()",
        "snippet": "    public void testIndexOf_char_int() {\n        StrBuilder sb = new StrBuilder(\"abab\");\n        assertEquals(0, sb.indexOf('a', -1));\n        assertEquals(0, sb.indexOf('a', 0));\n        assertEquals(2, sb.indexOf('a', 1));\n        assertEquals(-1, sb.indexOf('a', 4));\n        assertEquals(-1, sb.indexOf('a', 5));\n\n        // should work like String#indexOf\n        assertEquals(\"abab\".indexOf('a', 1), sb.indexOf('a', 1));\n\n        assertEquals(3, sb.indexOf('b', 2));\n        assertEquals(\"abab\".indexOf('b', 2), sb.indexOf('b', 2));\n\n        assertEquals(-1, sb.indexOf('z', 2));\n\n        sb = new StrBuilder(\"xyzabc\");\n        assertEquals(2, sb.indexOf('z', 0));\n        assertEquals(-1, sb.indexOf('z', 3));\n    }",
        "begin_line": 1214,
        "end_line": 1233,
        "comment": "",
        "child_ranges": [
            "(line 1215,col 9)-(line 1215,col 47)",
            "(line 1216,col 9)-(line 1216,col 45)",
            "(line 1217,col 9)-(line 1217,col 44)",
            "(line 1218,col 9)-(line 1218,col 44)",
            "(line 1219,col 9)-(line 1219,col 45)",
            "(line 1220,col 9)-(line 1220,col 45)",
            "(line 1223,col 9)-(line 1223,col 65)",
            "(line 1225,col 9)-(line 1225,col 44)",
            "(line 1226,col 9)-(line 1226,col 65)",
            "(line 1228,col 9)-(line 1228,col 45)",
            "(line 1230,col 9)-(line 1230,col 38)",
            "(line 1231,col 9)-(line 1231,col 44)",
            "(line 1232,col 9)-(line 1232,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testLastIndexOf_char()",
        "snippet": "    public void testLastIndexOf_char() {\n        StrBuilder sb = new StrBuilder(\"abab\");\n        \n        assertEquals (2, sb.lastIndexOf('a'));\n        //should work like String#lastIndexOf\n        assertEquals (\"abab\".lastIndexOf('a'), sb.lastIndexOf('a'));\n        \n        assertEquals(3, sb.lastIndexOf('b'));\n        assertEquals (\"abab\".lastIndexOf('b'), sb.lastIndexOf('b'));\n        \n        assertEquals (-1, sb.lastIndexOf('z'));\n    }",
        "begin_line": 1235,
        "end_line": 1246,
        "comment": "",
        "child_ranges": [
            "(line 1236,col 9)-(line 1236,col 47)",
            "(line 1238,col 9)-(line 1238,col 46)",
            "(line 1240,col 9)-(line 1240,col 68)",
            "(line 1242,col 9)-(line 1242,col 45)",
            "(line 1243,col 9)-(line 1243,col 68)",
            "(line 1245,col 9)-(line 1245,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testLastIndexOf_char_int()",
        "snippet": "    public void testLastIndexOf_char_int() {\n        StrBuilder sb = new StrBuilder(\"abab\");\n        assertEquals(-1, sb.lastIndexOf('a', -1));\n        assertEquals(0, sb.lastIndexOf('a', 0));\n        assertEquals(0, sb.lastIndexOf('a', 1));\n\n        // should work like String#lastIndexOf\n        assertEquals(\"abab\".lastIndexOf('a', 1), sb.lastIndexOf('a', 1));\n\n        assertEquals(1, sb.lastIndexOf('b', 2));\n        assertEquals(\"abab\".lastIndexOf('b', 2), sb.lastIndexOf('b', 2));\n\n        assertEquals(-1, sb.lastIndexOf('z', 2));\n\n        sb = new StrBuilder(\"xyzabc\");\n        assertEquals(2, sb.lastIndexOf('z', sb.length()));\n        assertEquals(-1, sb.lastIndexOf('z', 1));\n    }",
        "begin_line": 1248,
        "end_line": 1265,
        "comment": "",
        "child_ranges": [
            "(line 1249,col 9)-(line 1249,col 47)",
            "(line 1250,col 9)-(line 1250,col 50)",
            "(line 1251,col 9)-(line 1251,col 48)",
            "(line 1252,col 9)-(line 1252,col 48)",
            "(line 1255,col 9)-(line 1255,col 73)",
            "(line 1257,col 9)-(line 1257,col 48)",
            "(line 1258,col 9)-(line 1258,col 73)",
            "(line 1260,col 9)-(line 1260,col 49)",
            "(line 1262,col 9)-(line 1262,col 38)",
            "(line 1263,col 9)-(line 1263,col 58)",
            "(line 1264,col 9)-(line 1264,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testIndexOf_String()",
        "snippet": "    public void testIndexOf_String() {\n        StrBuilder sb = new StrBuilder(\"abab\");\n        \n        assertEquals(0, sb.indexOf(\"a\"));\n        //should work like String#indexOf\n        assertEquals(\"abab\".indexOf(\"a\"), sb.indexOf(\"a\"));\n        \n        assertEquals(0, sb.indexOf(\"ab\"));\n        //should work like String#indexOf\n        assertEquals(\"abab\".indexOf(\"ab\"), sb.indexOf(\"ab\"));\n        \n        assertEquals(1, sb.indexOf(\"b\"));\n        assertEquals(\"abab\".indexOf(\"b\"), sb.indexOf(\"b\"));\n        \n        assertEquals(1, sb.indexOf(\"ba\"));\n        assertEquals(\"abab\".indexOf(\"ba\"), sb.indexOf(\"ba\"));\n        \n        assertEquals(-1, sb.indexOf(\"z\"));\n        \n        assertEquals(-1, sb.indexOf((String) null));\n    }",
        "begin_line": 1268,
        "end_line": 1288,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1269,col 9)-(line 1269,col 47)",
            "(line 1271,col 9)-(line 1271,col 41)",
            "(line 1273,col 9)-(line 1273,col 59)",
            "(line 1275,col 9)-(line 1275,col 42)",
            "(line 1277,col 9)-(line 1277,col 61)",
            "(line 1279,col 9)-(line 1279,col 41)",
            "(line 1280,col 9)-(line 1280,col 59)",
            "(line 1282,col 9)-(line 1282,col 42)",
            "(line 1283,col 9)-(line 1283,col 61)",
            "(line 1285,col 9)-(line 1285,col 42)",
            "(line 1287,col 9)-(line 1287,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testIndexOf_String_int()",
        "snippet": "    public void testIndexOf_String_int() {\n        StrBuilder sb = new StrBuilder(\"abab\");\n        assertEquals(0, sb.indexOf(\"a\", -1));\n        assertEquals(0, sb.indexOf(\"a\", 0));\n        assertEquals(2, sb.indexOf(\"a\", 1));\n        assertEquals(2, sb.indexOf(\"a\", 2));\n        assertEquals(-1, sb.indexOf(\"a\", 3));\n        assertEquals(-1, sb.indexOf(\"a\", 4));\n        assertEquals(-1, sb.indexOf(\"a\", 5));\n        \n        assertEquals(-1, sb.indexOf(\"abcdef\", 0));\n        assertEquals(0, sb.indexOf(\"\", 0));\n        assertEquals(1, sb.indexOf(\"\", 1));\n        \n        //should work like String#indexOf\n        assertEquals (\"abab\".indexOf(\"a\", 1), sb.indexOf(\"a\", 1));\n        \n        assertEquals(2, sb.indexOf(\"ab\", 1));\n        //should work like String#indexOf\n        assertEquals(\"abab\".indexOf(\"ab\", 1), sb.indexOf(\"ab\", 1));\n        \n        assertEquals(3, sb.indexOf(\"b\", 2));\n        assertEquals(\"abab\".indexOf(\"b\", 2), sb.indexOf(\"b\", 2));\n        \n        assertEquals(1, sb.indexOf(\"ba\", 1));\n        assertEquals(\"abab\".indexOf(\"ba\", 2), sb.indexOf(\"ba\", 2));\n        \n        assertEquals(-1, sb.indexOf(\"z\", 2));\n        \n        sb = new StrBuilder(\"xyzabc\");\n        assertEquals(2, sb.indexOf(\"za\", 0));\n        assertEquals(-1, sb.indexOf(\"za\", 3));\n        \n        assertEquals(-1, sb.indexOf((String) null, 2));\n    }",
        "begin_line": 1290,
        "end_line": 1324,
        "comment": "",
        "child_ranges": [
            "(line 1291,col 9)-(line 1291,col 47)",
            "(line 1292,col 9)-(line 1292,col 45)",
            "(line 1293,col 9)-(line 1293,col 44)",
            "(line 1294,col 9)-(line 1294,col 44)",
            "(line 1295,col 9)-(line 1295,col 44)",
            "(line 1296,col 9)-(line 1296,col 45)",
            "(line 1297,col 9)-(line 1297,col 45)",
            "(line 1298,col 9)-(line 1298,col 45)",
            "(line 1300,col 9)-(line 1300,col 50)",
            "(line 1301,col 9)-(line 1301,col 43)",
            "(line 1302,col 9)-(line 1302,col 43)",
            "(line 1305,col 9)-(line 1305,col 66)",
            "(line 1307,col 9)-(line 1307,col 45)",
            "(line 1309,col 9)-(line 1309,col 67)",
            "(line 1311,col 9)-(line 1311,col 44)",
            "(line 1312,col 9)-(line 1312,col 65)",
            "(line 1314,col 9)-(line 1314,col 45)",
            "(line 1315,col 9)-(line 1315,col 67)",
            "(line 1317,col 9)-(line 1317,col 45)",
            "(line 1319,col 9)-(line 1319,col 38)",
            "(line 1320,col 9)-(line 1320,col 45)",
            "(line 1321,col 9)-(line 1321,col 46)",
            "(line 1323,col 9)-(line 1323,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testLastIndexOf_String()",
        "snippet": "    public void testLastIndexOf_String() {\n        StrBuilder sb = new StrBuilder(\"abab\");\n        \n        assertEquals(2, sb.lastIndexOf(\"a\"));\n        //should work like String#lastIndexOf\n        assertEquals(\"abab\".lastIndexOf(\"a\"), sb.lastIndexOf(\"a\"));\n        \n        assertEquals(2, sb.lastIndexOf(\"ab\"));\n        //should work like String#lastIndexOf\n        assertEquals(\"abab\".lastIndexOf(\"ab\"), sb.lastIndexOf(\"ab\"));\n        \n        assertEquals(3, sb.lastIndexOf(\"b\"));\n        assertEquals(\"abab\".lastIndexOf(\"b\"), sb.lastIndexOf(\"b\"));\n        \n        assertEquals(1, sb.lastIndexOf(\"ba\"));\n        assertEquals(\"abab\".lastIndexOf(\"ba\"), sb.lastIndexOf(\"ba\"));\n        \n        assertEquals(-1, sb.lastIndexOf(\"z\"));\n        \n        assertEquals(-1, sb.lastIndexOf((String) null));\n    }",
        "begin_line": 1326,
        "end_line": 1346,
        "comment": "",
        "child_ranges": [
            "(line 1327,col 9)-(line 1327,col 47)",
            "(line 1329,col 9)-(line 1329,col 45)",
            "(line 1331,col 9)-(line 1331,col 67)",
            "(line 1333,col 9)-(line 1333,col 46)",
            "(line 1335,col 9)-(line 1335,col 69)",
            "(line 1337,col 9)-(line 1337,col 45)",
            "(line 1338,col 9)-(line 1338,col 67)",
            "(line 1340,col 9)-(line 1340,col 46)",
            "(line 1341,col 9)-(line 1341,col 69)",
            "(line 1343,col 9)-(line 1343,col 46)",
            "(line 1345,col 9)-(line 1345,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testLastIndexOf_String_int()",
        "snippet": "    public void testLastIndexOf_String_int() {\n        StrBuilder sb = new StrBuilder(\"abab\");\n        assertEquals(-1, sb.lastIndexOf(\"a\", -1));\n        assertEquals(0, sb.lastIndexOf(\"a\", 0));\n        assertEquals(0, sb.lastIndexOf(\"a\", 1));\n        assertEquals(2, sb.lastIndexOf(\"a\", 2));\n        assertEquals(2, sb.lastIndexOf(\"a\", 3));\n        assertEquals(2, sb.lastIndexOf(\"a\", 4));\n        assertEquals(2, sb.lastIndexOf(\"a\", 5));\n        \n        assertEquals(-1, sb.lastIndexOf(\"abcdef\", 3));\n        assertEquals(\"abab\".lastIndexOf(\"\", 3), sb.lastIndexOf(\"\", 3));\n        assertEquals(\"abab\".lastIndexOf(\"\", 1), sb.lastIndexOf(\"\", 1));\n        \n        //should work like String#lastIndexOf\n        assertEquals(\"abab\".lastIndexOf(\"a\", 1), sb.lastIndexOf(\"a\", 1));\n        \n        assertEquals(0, sb.lastIndexOf(\"ab\", 1));\n        //should work like String#lastIndexOf\n        assertEquals(\"abab\".lastIndexOf(\"ab\", 1), sb.lastIndexOf(\"ab\", 1));\n        \n        assertEquals(1, sb.lastIndexOf(\"b\", 2));\n        assertEquals(\"abab\".lastIndexOf(\"b\", 2), sb.lastIndexOf(\"b\", 2));\n        \n        assertEquals(1, sb.lastIndexOf(\"ba\", 2));\n        assertEquals(\"abab\".lastIndexOf(\"ba\", 2), sb.lastIndexOf(\"ba\", 2));\n        \n        assertEquals(-1, sb.lastIndexOf(\"z\", 2));\n        \n        sb = new StrBuilder(\"xyzabc\");\n        assertEquals(2, sb.lastIndexOf(\"za\", sb.length()));\n        assertEquals(-1, sb.lastIndexOf(\"za\", 1));\n        \n        assertEquals(-1, sb.lastIndexOf((String) null, 2));\n    }",
        "begin_line": 1348,
        "end_line": 1382,
        "comment": "",
        "child_ranges": [
            "(line 1349,col 9)-(line 1349,col 47)",
            "(line 1350,col 9)-(line 1350,col 50)",
            "(line 1351,col 9)-(line 1351,col 48)",
            "(line 1352,col 9)-(line 1352,col 48)",
            "(line 1353,col 9)-(line 1353,col 48)",
            "(line 1354,col 9)-(line 1354,col 48)",
            "(line 1355,col 9)-(line 1355,col 48)",
            "(line 1356,col 9)-(line 1356,col 48)",
            "(line 1358,col 9)-(line 1358,col 54)",
            "(line 1359,col 9)-(line 1359,col 71)",
            "(line 1360,col 9)-(line 1360,col 71)",
            "(line 1363,col 9)-(line 1363,col 73)",
            "(line 1365,col 9)-(line 1365,col 49)",
            "(line 1367,col 9)-(line 1367,col 75)",
            "(line 1369,col 9)-(line 1369,col 48)",
            "(line 1370,col 9)-(line 1370,col 73)",
            "(line 1372,col 9)-(line 1372,col 49)",
            "(line 1373,col 9)-(line 1373,col 75)",
            "(line 1375,col 9)-(line 1375,col 49)",
            "(line 1377,col 9)-(line 1377,col 38)",
            "(line 1378,col 9)-(line 1378,col 59)",
            "(line 1379,col 9)-(line 1379,col 50)",
            "(line 1381,col 9)-(line 1381,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testIndexOf_StrMatcher()",
        "snippet": "    public void testIndexOf_StrMatcher() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(-1, sb.indexOf((StrMatcher) null));\n        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a')));\n        \n        sb.append(\"ab bd\");\n        assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a')));\n        assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b')));\n        assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher()));\n        assertEquals(4, sb.indexOf(StrMatcher.charMatcher('d')));\n        assertEquals(-1, sb.indexOf(StrMatcher.noneMatcher()));\n        assertEquals(-1, sb.indexOf((StrMatcher) null));\n        \n        sb.append(\" A1 junction\");\n        assertEquals(6, sb.indexOf(A_NUMBER_MATCHER));\n    }",
        "begin_line": 1385,
        "end_line": 1400,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1386,col 9)-(line 1386,col 41)",
            "(line 1387,col 9)-(line 1387,col 56)",
            "(line 1388,col 9)-(line 1388,col 66)",
            "(line 1390,col 9)-(line 1390,col 27)",
            "(line 1391,col 9)-(line 1391,col 65)",
            "(line 1392,col 9)-(line 1392,col 65)",
            "(line 1393,col 9)-(line 1393,col 63)",
            "(line 1394,col 9)-(line 1394,col 65)",
            "(line 1395,col 9)-(line 1395,col 63)",
            "(line 1396,col 9)-(line 1396,col 56)",
            "(line 1398,col 9)-(line 1398,col 34)",
            "(line 1399,col 9)-(line 1399,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testIndexOf_StrMatcher_int()",
        "snippet": "    public void testIndexOf_StrMatcher_int() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(-1, sb.indexOf((StrMatcher) null, 2));\n        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 2));\n        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 0));\n        \n        sb.append(\"ab bd\");\n        assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a'), -2));\n        assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a'), 0));\n        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 2));\n        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 20));\n        \n        assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'), -1));\n        assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'), 0));\n        assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'), 1));\n        assertEquals(3, sb.indexOf(StrMatcher.charMatcher('b'), 2));\n        assertEquals(3, sb.indexOf(StrMatcher.charMatcher('b'), 3));\n        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('b'), 4));\n        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('b'), 5));\n        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('b'), 6));\n        \n        assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), -2));\n        assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), 0));\n        assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), 2));\n        assertEquals(-1, sb.indexOf(StrMatcher.spaceMatcher(), 4));\n        assertEquals(-1, sb.indexOf(StrMatcher.spaceMatcher(), 20));\n        \n        assertEquals(-1, sb.indexOf(StrMatcher.noneMatcher(), 0));\n        assertEquals(-1, sb.indexOf((StrMatcher) null, 0));\n        \n        sb.append(\" A1 junction with A2\");\n        assertEquals(6, sb.indexOf(A_NUMBER_MATCHER, 5));\n        assertEquals(6, sb.indexOf(A_NUMBER_MATCHER, 6));\n        assertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 7));\n        assertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 22));\n        assertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 23));\n        assertEquals(-1, sb.indexOf(A_NUMBER_MATCHER, 24));\n    }",
        "begin_line": 1402,
        "end_line": 1439,
        "comment": "",
        "child_ranges": [
            "(line 1403,col 9)-(line 1403,col 41)",
            "(line 1404,col 9)-(line 1404,col 59)",
            "(line 1405,col 9)-(line 1405,col 69)",
            "(line 1406,col 9)-(line 1406,col 69)",
            "(line 1408,col 9)-(line 1408,col 27)",
            "(line 1409,col 9)-(line 1409,col 69)",
            "(line 1410,col 9)-(line 1410,col 68)",
            "(line 1411,col 9)-(line 1411,col 69)",
            "(line 1412,col 9)-(line 1412,col 70)",
            "(line 1414,col 9)-(line 1414,col 69)",
            "(line 1415,col 9)-(line 1415,col 68)",
            "(line 1416,col 9)-(line 1416,col 68)",
            "(line 1417,col 9)-(line 1417,col 68)",
            "(line 1418,col 9)-(line 1418,col 68)",
            "(line 1419,col 9)-(line 1419,col 69)",
            "(line 1420,col 9)-(line 1420,col 69)",
            "(line 1421,col 9)-(line 1421,col 69)",
            "(line 1423,col 9)-(line 1423,col 67)",
            "(line 1424,col 9)-(line 1424,col 66)",
            "(line 1425,col 9)-(line 1425,col 66)",
            "(line 1426,col 9)-(line 1426,col 67)",
            "(line 1427,col 9)-(line 1427,col 68)",
            "(line 1429,col 9)-(line 1429,col 66)",
            "(line 1430,col 9)-(line 1430,col 59)",
            "(line 1432,col 9)-(line 1432,col 42)",
            "(line 1433,col 9)-(line 1433,col 57)",
            "(line 1434,col 9)-(line 1434,col 57)",
            "(line 1435,col 9)-(line 1435,col 58)",
            "(line 1436,col 9)-(line 1436,col 59)",
            "(line 1437,col 9)-(line 1437,col 59)",
            "(line 1438,col 9)-(line 1438,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testLastIndexOf_StrMatcher()",
        "snippet": "    public void testLastIndexOf_StrMatcher() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(-1, sb.lastIndexOf((StrMatcher) null));\n        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a')));\n        \n        sb.append(\"ab bd\");\n        assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a')));\n        assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b')));\n        assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher()));\n        assertEquals(4, sb.lastIndexOf(StrMatcher.charMatcher('d')));\n        assertEquals(-1, sb.lastIndexOf(StrMatcher.noneMatcher()));\n        assertEquals(-1, sb.lastIndexOf((StrMatcher) null));\n        \n        sb.append(\" A1 junction\");\n        assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER));\n    }",
        "begin_line": 1441,
        "end_line": 1456,
        "comment": "",
        "child_ranges": [
            "(line 1442,col 9)-(line 1442,col 41)",
            "(line 1443,col 9)-(line 1443,col 60)",
            "(line 1444,col 9)-(line 1444,col 70)",
            "(line 1446,col 9)-(line 1446,col 27)",
            "(line 1447,col 9)-(line 1447,col 69)",
            "(line 1448,col 9)-(line 1448,col 69)",
            "(line 1449,col 9)-(line 1449,col 67)",
            "(line 1450,col 9)-(line 1450,col 69)",
            "(line 1451,col 9)-(line 1451,col 67)",
            "(line 1452,col 9)-(line 1452,col 60)",
            "(line 1454,col 9)-(line 1454,col 34)",
            "(line 1455,col 9)-(line 1455,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testLastIndexOf_StrMatcher_int()",
        "snippet": "    public void testLastIndexOf_StrMatcher_int() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(-1, sb.lastIndexOf((StrMatcher) null, 2));\n        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), 2));\n        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), 0));\n        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), -1));\n        \n        sb.append(\"ab bd\");\n        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), -2));\n        assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 0));\n        assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 2));\n        assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 20));\n        \n        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('b'), -1));\n        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 0));\n        assertEquals(1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 1));\n        assertEquals(1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 2));\n        assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 3));\n        assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 4));\n        assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 5));\n        assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 6));\n        \n        assertEquals(-1, sb.lastIndexOf(StrMatcher.spaceMatcher(), -2));\n        assertEquals(-1, sb.lastIndexOf(StrMatcher.spaceMatcher(), 0));\n        assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 2));\n        assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 4));\n        assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 20));\n        \n        assertEquals(-1, sb.lastIndexOf(StrMatcher.noneMatcher(), 0));\n        assertEquals(-1, sb.lastIndexOf((StrMatcher) null, 0));\n        \n        sb.append(\" A1 junction with A2\");\n        assertEquals(-1, sb.lastIndexOf(A_NUMBER_MATCHER, 5));\n        assertEquals(-1, sb.lastIndexOf(A_NUMBER_MATCHER, 6)); // A matches, 1 is outside bounds\n        assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 7));\n        assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 22));\n        assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 23)); // A matches, 2 is outside bounds\n        assertEquals(23, sb.lastIndexOf(A_NUMBER_MATCHER, 24));\n    }",
        "begin_line": 1458,
        "end_line": 1496,
        "comment": "",
        "child_ranges": [
            "(line 1459,col 9)-(line 1459,col 41)",
            "(line 1460,col 9)-(line 1460,col 63)",
            "(line 1461,col 9)-(line 1461,col 73)",
            "(line 1462,col 9)-(line 1462,col 73)",
            "(line 1463,col 9)-(line 1463,col 74)",
            "(line 1465,col 9)-(line 1465,col 27)",
            "(line 1466,col 9)-(line 1466,col 74)",
            "(line 1467,col 9)-(line 1467,col 72)",
            "(line 1468,col 9)-(line 1468,col 72)",
            "(line 1469,col 9)-(line 1469,col 73)",
            "(line 1471,col 9)-(line 1471,col 74)",
            "(line 1472,col 9)-(line 1472,col 73)",
            "(line 1473,col 9)-(line 1473,col 72)",
            "(line 1474,col 9)-(line 1474,col 72)",
            "(line 1475,col 9)-(line 1475,col 72)",
            "(line 1476,col 9)-(line 1476,col 72)",
            "(line 1477,col 9)-(line 1477,col 72)",
            "(line 1478,col 9)-(line 1478,col 72)",
            "(line 1480,col 9)-(line 1480,col 72)",
            "(line 1481,col 9)-(line 1481,col 71)",
            "(line 1482,col 9)-(line 1482,col 70)",
            "(line 1483,col 9)-(line 1483,col 70)",
            "(line 1484,col 9)-(line 1484,col 71)",
            "(line 1486,col 9)-(line 1486,col 70)",
            "(line 1487,col 9)-(line 1487,col 63)",
            "(line 1489,col 9)-(line 1489,col 42)",
            "(line 1490,col 9)-(line 1490,col 62)",
            "(line 1491,col 9)-(line 1491,col 62)",
            "(line 1492,col 9)-(line 1492,col 61)",
            "(line 1493,col 9)-(line 1493,col 62)",
            "(line 1494,col 9)-(line 1494,col 62)",
            "(line 1495,col 9)-(line 1495,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.Anonymous-ad7ee384-3a12-421b-bbd3-abd83e04200b.isMatch(char[], int, int, int)",
        "snippet": "        public int isMatch(char[] buffer, int pos, int bufferStart, int bufferEnd) {\n            if (buffer[pos] == 'A') {\n                pos++;\n                if (pos < bufferEnd && buffer[pos] >= '0' && buffer[pos] <= '9') {\n                    return 2;\n                }\n            }\n            return 0;\n        }",
        "begin_line": 1499,
        "end_line": 1507,
        "comment": "",
        "child_ranges": [
            "(line 1500,col 13)-(line 1505,col 13)",
            "(line 1506,col 13)-(line 1506,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testAsTokenizer()",
        "snippet": "    public void testAsTokenizer() throws Exception {\n        // from Javadoc\n        StrBuilder b = new StrBuilder();\n        b.append(\"a b \");\n        StrTokenizer t = b.asTokenizer();\n        \n        String[] tokens1 = t.getTokenArray();\n        assertEquals(2, tokens1.length);\n        assertEquals(\"a\", tokens1[0]);\n        assertEquals(\"b\", tokens1[1]);\n        assertEquals(2, t.size());\n        \n        b.append(\"c d \");\n        String[] tokens2 = t.getTokenArray();\n        assertEquals(2, tokens2.length);\n        assertEquals(\"a\", tokens2[0]);\n        assertEquals(\"b\", tokens2[1]);\n        assertEquals(2, t.size());\n        assertEquals(\"a\", t.next());\n        assertEquals(\"b\", t.next());\n        \n        t.reset();\n        String[] tokens3 = t.getTokenArray();\n        assertEquals(4, tokens3.length);\n        assertEquals(\"a\", tokens3[0]);\n        assertEquals(\"b\", tokens3[1]);\n        assertEquals(\"c\", tokens3[2]);\n        assertEquals(\"d\", tokens3[3]);\n        assertEquals(4, t.size());\n        assertEquals(\"a\", t.next());\n        assertEquals(\"b\", t.next());\n        assertEquals(\"c\", t.next());\n        assertEquals(\"d\", t.next());\n        \n        assertEquals(\"a b c d \", t.getContent());\n    }",
        "begin_line": 1511,
        "end_line": 1546,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1513,col 9)-(line 1513,col 40)",
            "(line 1514,col 9)-(line 1514,col 25)",
            "(line 1515,col 9)-(line 1515,col 41)",
            "(line 1517,col 9)-(line 1517,col 45)",
            "(line 1518,col 9)-(line 1518,col 40)",
            "(line 1519,col 9)-(line 1519,col 38)",
            "(line 1520,col 9)-(line 1520,col 38)",
            "(line 1521,col 9)-(line 1521,col 34)",
            "(line 1523,col 9)-(line 1523,col 25)",
            "(line 1524,col 9)-(line 1524,col 45)",
            "(line 1525,col 9)-(line 1525,col 40)",
            "(line 1526,col 9)-(line 1526,col 38)",
            "(line 1527,col 9)-(line 1527,col 38)",
            "(line 1528,col 9)-(line 1528,col 34)",
            "(line 1529,col 9)-(line 1529,col 36)",
            "(line 1530,col 9)-(line 1530,col 36)",
            "(line 1532,col 9)-(line 1532,col 18)",
            "(line 1533,col 9)-(line 1533,col 45)",
            "(line 1534,col 9)-(line 1534,col 40)",
            "(line 1535,col 9)-(line 1535,col 38)",
            "(line 1536,col 9)-(line 1536,col 38)",
            "(line 1537,col 9)-(line 1537,col 38)",
            "(line 1538,col 9)-(line 1538,col 38)",
            "(line 1539,col 9)-(line 1539,col 34)",
            "(line 1540,col 9)-(line 1540,col 36)",
            "(line 1541,col 9)-(line 1541,col 36)",
            "(line 1542,col 9)-(line 1542,col 36)",
            "(line 1543,col 9)-(line 1543,col 36)",
            "(line 1545,col 9)-(line 1545,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testAsReader()",
        "snippet": "    public void testAsReader() throws Exception {\n        StrBuilder sb = new StrBuilder(\"some text\");\n        Reader reader = sb.asReader();\n        assertEquals(true, reader.ready());\n        char[] buf = new char[40];\n        assertEquals(9, reader.read(buf));\n        assertEquals(\"some text\", new String(buf, 0, 9));\n        \n        assertEquals(-1, reader.read());\n        assertEquals(false, reader.ready());\n        assertEquals(0, reader.skip(2));\n        assertEquals(0, reader.skip(-1));\n        \n        assertEquals(true, reader.markSupported());\n        reader = sb.asReader();\n        assertEquals('s', reader.read());\n        reader.mark(-1);\n        char[] array = new char[3];\n        assertEquals(3, reader.read(array, 0, 3));\n        assertEquals('o', array[0]);\n        assertEquals('m', array[1]);\n        assertEquals('e', array[2]);\n        reader.reset();\n        assertEquals(1, reader.read(array, 1, 1));\n        assertEquals('o', array[0]);\n        assertEquals('o', array[1]);\n        assertEquals('e', array[2]);\n        assertEquals(2, reader.skip(2));\n        assertEquals(' ', reader.read());\n        \n        assertEquals(true, reader.ready());\n        reader.close();\n        assertEquals(true, reader.ready());\n        \n        reader = sb.asReader();\n        array = new char[3];\n        try {\n            reader.read(array, -1, 0);\n            fail();\n        } catch (IndexOutOfBoundsException ex) {}\n        try {\n            reader.read(array, 0, -1);\n            fail();\n        } catch (IndexOutOfBoundsException ex) {}\n        try {\n            reader.read(array, 100, 1);\n            fail();\n        } catch (IndexOutOfBoundsException ex) {}\n        try {\n            reader.read(array, 0, 100);\n            fail();\n        } catch (IndexOutOfBoundsException ex) {}\n        try {\n            reader.read(array, Integer.MAX_VALUE, Integer.MAX_VALUE);\n            fail();\n        } catch (IndexOutOfBoundsException ex) {}\n        \n        assertEquals(0, reader.read(array, 0, 0));\n        assertEquals(0, array[0]);\n        assertEquals(0, array[1]);\n        assertEquals(0, array[2]);\n        \n        reader.skip(9);\n        assertEquals(-1, reader.read(array, 0, 1));\n        \n        reader.reset();\n        array = new char[30];\n        assertEquals(9, reader.read(array, 0, 30));\n    }",
        "begin_line": 1549,
        "end_line": 1617,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1550,col 9)-(line 1550,col 52)",
            "(line 1551,col 9)-(line 1551,col 38)",
            "(line 1552,col 9)-(line 1552,col 43)",
            "(line 1553,col 9)-(line 1553,col 34)",
            "(line 1554,col 9)-(line 1554,col 42)",
            "(line 1555,col 9)-(line 1555,col 57)",
            "(line 1557,col 9)-(line 1557,col 40)",
            "(line 1558,col 9)-(line 1558,col 44)",
            "(line 1559,col 9)-(line 1559,col 40)",
            "(line 1560,col 9)-(line 1560,col 41)",
            "(line 1562,col 9)-(line 1562,col 51)",
            "(line 1563,col 9)-(line 1563,col 31)",
            "(line 1564,col 9)-(line 1564,col 41)",
            "(line 1565,col 9)-(line 1565,col 24)",
            "(line 1566,col 9)-(line 1566,col 35)",
            "(line 1567,col 9)-(line 1567,col 50)",
            "(line 1568,col 9)-(line 1568,col 36)",
            "(line 1569,col 9)-(line 1569,col 36)",
            "(line 1570,col 9)-(line 1570,col 36)",
            "(line 1571,col 9)-(line 1571,col 23)",
            "(line 1572,col 9)-(line 1572,col 50)",
            "(line 1573,col 9)-(line 1573,col 36)",
            "(line 1574,col 9)-(line 1574,col 36)",
            "(line 1575,col 9)-(line 1575,col 36)",
            "(line 1576,col 9)-(line 1576,col 40)",
            "(line 1577,col 9)-(line 1577,col 41)",
            "(line 1579,col 9)-(line 1579,col 43)",
            "(line 1580,col 9)-(line 1580,col 23)",
            "(line 1581,col 9)-(line 1581,col 43)",
            "(line 1583,col 9)-(line 1583,col 31)",
            "(line 1584,col 9)-(line 1584,col 28)",
            "(line 1585,col 9)-(line 1588,col 49)",
            "(line 1589,col 9)-(line 1592,col 49)",
            "(line 1593,col 9)-(line 1596,col 49)",
            "(line 1597,col 9)-(line 1600,col 49)",
            "(line 1601,col 9)-(line 1604,col 49)",
            "(line 1606,col 9)-(line 1606,col 50)",
            "(line 1607,col 9)-(line 1607,col 34)",
            "(line 1608,col 9)-(line 1608,col 34)",
            "(line 1609,col 9)-(line 1609,col 34)",
            "(line 1611,col 9)-(line 1611,col 23)",
            "(line 1612,col 9)-(line 1612,col 51)",
            "(line 1614,col 9)-(line 1614,col 23)",
            "(line 1615,col 9)-(line 1615,col 29)",
            "(line 1616,col 9)-(line 1616,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testAsWriter()",
        "snippet": "    public void testAsWriter() throws Exception {\n        StrBuilder sb = new StrBuilder(\"base\");\n        Writer writer = sb.asWriter();\n        \n        writer.write('l');\n        assertEquals(\"basel\", sb.toString());\n        \n        writer.write(new char[] {'i', 'n'});\n        assertEquals(\"baselin\", sb.toString());\n        \n        writer.write(new char[] {'n', 'e', 'r'}, 1, 2);\n        assertEquals(\"baseliner\", sb.toString());\n        \n        writer.write(\" rout\");\n        assertEquals(\"baseliner rout\", sb.toString());\n        \n        writer.write(\"ping that server\", 1, 3);\n        assertEquals(\"baseliner routing\", sb.toString());\n        \n        writer.flush();  // no effect\n        assertEquals(\"baseliner routing\", sb.toString());\n        \n        writer.close();  // no effect\n        assertEquals(\"baseliner routing\", sb.toString());\n        \n        writer.write(\" hi\");  // works after close\n        assertEquals(\"baseliner routing hi\", sb.toString());\n        \n        sb.setLength(4);  // mix and match\n        writer.write('d');\n        assertEquals(\"based\", sb.toString());\n    }",
        "begin_line": 1620,
        "end_line": 1651,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1621,col 9)-(line 1621,col 47)",
            "(line 1622,col 9)-(line 1622,col 38)",
            "(line 1624,col 9)-(line 1624,col 26)",
            "(line 1625,col 9)-(line 1625,col 45)",
            "(line 1627,col 9)-(line 1627,col 44)",
            "(line 1628,col 9)-(line 1628,col 47)",
            "(line 1630,col 9)-(line 1630,col 55)",
            "(line 1631,col 9)-(line 1631,col 49)",
            "(line 1633,col 9)-(line 1633,col 30)",
            "(line 1634,col 9)-(line 1634,col 54)",
            "(line 1636,col 9)-(line 1636,col 47)",
            "(line 1637,col 9)-(line 1637,col 57)",
            "(line 1639,col 9)-(line 1639,col 23)",
            "(line 1640,col 9)-(line 1640,col 57)",
            "(line 1642,col 9)-(line 1642,col 23)",
            "(line 1643,col 9)-(line 1643,col 57)",
            "(line 1645,col 9)-(line 1645,col 28)",
            "(line 1646,col 9)-(line 1646,col 60)",
            "(line 1648,col 9)-(line 1648,col 24)",
            "(line 1649,col 9)-(line 1649,col 26)",
            "(line 1650,col 9)-(line 1650,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testEqualsIgnoreCase()",
        "snippet": "    public void testEqualsIgnoreCase() {\n        StrBuilder sb1 = new StrBuilder();\n        StrBuilder sb2 = new StrBuilder();\n        assertEquals(true, sb1.equalsIgnoreCase(sb1));\n        assertEquals(true, sb1.equalsIgnoreCase(sb2));\n        assertEquals(true, sb2.equalsIgnoreCase(sb2));\n        \n        sb1.append(\"abc\");\n        assertEquals(false, sb1.equalsIgnoreCase(sb2));\n        \n        sb2.append(\"ABC\");\n        assertEquals(true, sb1.equalsIgnoreCase(sb2));\n        \n        sb2.clear().append(\"abc\");\n        assertEquals(true, sb1.equalsIgnoreCase(sb2));\n        assertEquals(true, sb1.equalsIgnoreCase(sb1));\n        assertEquals(true, sb2.equalsIgnoreCase(sb2));\n        \n        sb2.clear().append(\"aBc\");\n        assertEquals(true, sb1.equalsIgnoreCase(sb2));\n    }",
        "begin_line": 1654,
        "end_line": 1674,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1655,col 9)-(line 1655,col 42)",
            "(line 1656,col 9)-(line 1656,col 42)",
            "(line 1657,col 9)-(line 1657,col 54)",
            "(line 1658,col 9)-(line 1658,col 54)",
            "(line 1659,col 9)-(line 1659,col 54)",
            "(line 1661,col 9)-(line 1661,col 26)",
            "(line 1662,col 9)-(line 1662,col 55)",
            "(line 1664,col 9)-(line 1664,col 26)",
            "(line 1665,col 9)-(line 1665,col 54)",
            "(line 1667,col 9)-(line 1667,col 34)",
            "(line 1668,col 9)-(line 1668,col 54)",
            "(line 1669,col 9)-(line 1669,col 54)",
            "(line 1670,col 9)-(line 1670,col 54)",
            "(line 1672,col 9)-(line 1672,col 34)",
            "(line 1673,col 9)-(line 1673,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testEquals()",
        "snippet": "    public void testEquals() {\n        StrBuilder sb1 = new StrBuilder();\n        StrBuilder sb2 = new StrBuilder();\n        assertEquals(true, sb1.equals(sb2));\n        assertEquals(true, sb1.equals(sb1));\n        assertEquals(true, sb2.equals(sb2));\n        assertEquals(true, sb1.equals((Object) sb2));\n        \n        sb1.append(\"abc\");\n        assertEquals(false, sb1.equals(sb2));\n        assertEquals(false, sb1.equals((Object) sb2));\n        \n        sb2.append(\"ABC\");\n        assertEquals(false, sb1.equals(sb2));\n        assertEquals(false, sb1.equals((Object) sb2));\n        \n        sb2.clear().append(\"abc\");\n        assertEquals(true, sb1.equals(sb2));\n        assertEquals(true, sb1.equals((Object) sb2));\n        \n        assertEquals(false, sb1.equals(new Integer(1)));\n        assertEquals(false, sb1.equals(\"abc\"));\n    }",
        "begin_line": 1677,
        "end_line": 1699,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1678,col 9)-(line 1678,col 42)",
            "(line 1679,col 9)-(line 1679,col 42)",
            "(line 1680,col 9)-(line 1680,col 44)",
            "(line 1681,col 9)-(line 1681,col 44)",
            "(line 1682,col 9)-(line 1682,col 44)",
            "(line 1683,col 9)-(line 1683,col 53)",
            "(line 1685,col 9)-(line 1685,col 26)",
            "(line 1686,col 9)-(line 1686,col 45)",
            "(line 1687,col 9)-(line 1687,col 54)",
            "(line 1689,col 9)-(line 1689,col 26)",
            "(line 1690,col 9)-(line 1690,col 45)",
            "(line 1691,col 9)-(line 1691,col 54)",
            "(line 1693,col 9)-(line 1693,col 34)",
            "(line 1694,col 9)-(line 1694,col 44)",
            "(line 1695,col 9)-(line 1695,col 53)",
            "(line 1697,col 9)-(line 1697,col 56)",
            "(line 1698,col 9)-(line 1698,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testHashCode()",
        "snippet": "    public void testHashCode() {\n        StrBuilder sb = new StrBuilder();\n        int hc1a = sb.hashCode();\n        int hc1b = sb.hashCode();\n        assertEquals(0, hc1a);\n        assertEquals(hc1a, hc1b);\n        \n        sb.append(\"abc\");\n        int hc2a = sb.hashCode();\n        int hc2b = sb.hashCode();\n        assertEquals(true, hc2a != 0);\n        assertEquals(hc2a, hc2b);\n    }",
        "begin_line": 1702,
        "end_line": 1714,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1703,col 9)-(line 1703,col 41)",
            "(line 1704,col 9)-(line 1704,col 33)",
            "(line 1705,col 9)-(line 1705,col 33)",
            "(line 1706,col 9)-(line 1706,col 30)",
            "(line 1707,col 9)-(line 1707,col 33)",
            "(line 1709,col 9)-(line 1709,col 25)",
            "(line 1710,col 9)-(line 1710,col 33)",
            "(line 1711,col 9)-(line 1711,col 33)",
            "(line 1712,col 9)-(line 1712,col 38)",
            "(line 1713,col 9)-(line 1713,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testToString()",
        "snippet": "    public void testToString() {\n        StrBuilder sb = new StrBuilder(\"abc\");\n        assertEquals(\"abc\", sb.toString());\n    }",
        "begin_line": 1717,
        "end_line": 1720,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1718,col 9)-(line 1718,col 46)",
            "(line 1719,col 9)-(line 1719,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testToStringBuffer()",
        "snippet": "    public void testToStringBuffer() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(new StringBuffer().toString(), sb.toStringBuffer().toString());\n        \n        sb.append(\"junit\");\n        assertEquals(new StringBuffer(\"junit\").toString(), sb.toStringBuffer().toString());\n    }",
        "begin_line": 1723,
        "end_line": 1729,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1724,col 9)-(line 1724,col 41)",
            "(line 1725,col 9)-(line 1725,col 84)",
            "(line 1727,col 9)-(line 1727,col 27)",
            "(line 1728,col 9)-(line 1728,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testLang294()",
        "snippet": "    public void testLang294() {\n        StrBuilder sb = new StrBuilder(\"\\n%BLAH%\\nDo more stuff\\neven more stuff\\n%BLAH%\\n\");\n        sb.deleteAll(\"\\n%BLAH%\");\n        assertEquals(\"\\nDo more stuff\\neven more stuff\\n\", sb.toString()); \n    }",
        "begin_line": 1732,
        "end_line": 1736,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1733,col 9)-(line 1733,col 93)",
            "(line 1734,col 9)-(line 1734,col 33)",
            "(line 1735,col 9)-(line 1735,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testIndexOfLang294()",
        "snippet": "    public void testIndexOfLang294() {\n        StrBuilder sb = new StrBuilder(\"onetwothree\");\n        sb.deleteFirst(\"three\");\n        assertEquals(-1, sb.indexOf(\"three\"));\n    }",
        "begin_line": 1738,
        "end_line": 1742,
        "comment": "",
        "child_ranges": [
            "(line 1739,col 9)-(line 1739,col 54)",
            "(line 1740,col 9)-(line 1740,col 32)",
            "(line 1741,col 9)-(line 1741,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testLang295()",
        "snippet": "    public void testLang295() {\n        StrBuilder sb = new StrBuilder(\"onetwothree\");\n        sb.deleteFirst(\"three\");\n        assertFalse( \"The contains(char) method is looking beyond the end of the string\", sb.contains('h'));\n        assertEquals( \"The indexOf(char) method is looking beyond the end of the string\", -1, sb.indexOf('h'));\n    }",
        "begin_line": 1745,
        "end_line": 1750,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1746,col 9)-(line 1746,col 54)",
            "(line 1747,col 9)-(line 1747,col 32)",
            "(line 1748,col 9)-(line 1748,col 108)",
            "(line 1749,col 9)-(line 1749,col 111)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testLang412Right()",
        "snippet": "    public void testLang412Right() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendFixedWidthPadRight(null, 10, '*');\n        assertEquals( \"Failed to invoke appendFixedWidthPadRight correctly\", \"**********\", sb.toString());\n    }",
        "begin_line": 1753,
        "end_line": 1757,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1754,col 9)-(line 1754,col 41)",
            "(line 1755,col 9)-(line 1755,col 51)",
            "(line 1756,col 9)-(line 1756,col 106)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang.text.StrBuilderTest.testLang412Left()",
        "snippet": "    public void testLang412Left() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendFixedWidthPadLeft(null, 10, '*');\n        assertEquals( \"Failed to invoke appendFixedWidthPadLeft correctly\", \"**********\", sb.toString());\n    }",
        "begin_line": 1759,
        "end_line": 1763,
        "comment": "",
        "child_ranges": [
            "(line 1760,col 9)-(line 1760,col 41)",
            "(line 1761,col 9)-(line 1761,col 50)",
            "(line 1762,col 9)-(line 1762,col 105)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DurationFormatUtilsTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DurationFormatUtilsTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(DurationFormatUtilsTest.class);\n        suite.setName(\"DurationFormatUtils Tests\");\n        return suite;\n    }",
        "begin_line": 45,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 71)",
            "(line 47,col 9)-(line 47,col 51)",
            "(line 48,col 9)-(line 48,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DurationFormatUtilsTest.DurationFormatUtilsTest(java.lang.String)",
        "snippet": "    public DurationFormatUtilsTest(String s) {\n        super(s);\n    }",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 17)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DurationFormatUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new DurationFormatUtils());\n        Constructor[] cons = DurationFormatUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(DurationFormatUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(DurationFormatUtils.class.getModifiers()));\n    }",
        "begin_line": 56,
        "end_line": 63,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 49)",
            "(line 58,col 9)-(line 58,col 81)",
            "(line 59,col 9)-(line 59,col 37)",
            "(line 60,col 9)-(line 60,col 70)",
            "(line 61,col 9)-(line 61,col 88)",
            "(line 62,col 9)-(line 62,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatDurationWords()",
        "snippet": "    public void testFormatDurationWords() {\n        String text = null;\n\n        text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false);\n        assertEquals(\"50 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false);\n        assertEquals(\"1 minute 5 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false);\n        assertEquals(\"2 minutes 0 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false);\n        assertEquals(\"2 minutes 1 second\", text);\n        text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false);\n        assertEquals(\"1 hour 12 minutes 0 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false);\n        assertEquals(\"1 day 0 hours 0 minutes 0 seconds\", text);\n\n        text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true);\n        assertEquals(\"50 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true);\n        assertEquals(\"1 minute 5 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(120 * 1000, true, true);\n        assertEquals(\"2 minutes\", text);\n        text = DurationFormatUtils.formatDurationWords(121 * 1000, true, true);\n        assertEquals(\"2 minutes 1 second\", text);\n        text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, true);\n        assertEquals(\"1 hour 12 minutes\", text);\n        text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, true);\n        assertEquals(\"1 day\", text);\n\n        text = DurationFormatUtils.formatDurationWords(50 * 1000, false, true);\n        assertEquals(\"0 days 0 hours 0 minutes 50 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(65 * 1000, false, true);\n        assertEquals(\"0 days 0 hours 1 minute 5 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(120 * 1000, false, true);\n        assertEquals(\"0 days 0 hours 2 minutes\", text);\n        text = DurationFormatUtils.formatDurationWords(121 * 1000, false, true);\n        assertEquals(\"0 days 0 hours 2 minutes 1 second\", text);\n        text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, true);\n        assertEquals(\"0 days 1 hour 12 minutes\", text);\n        text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, false, true);\n        assertEquals(\"1 day\", text);\n\n        text = DurationFormatUtils.formatDurationWords(50 * 1000, false, false);\n        assertEquals(\"0 days 0 hours 0 minutes 50 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(65 * 1000, false, false);\n        assertEquals(\"0 days 0 hours 1 minute 5 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(120 * 1000, false, false);\n        assertEquals(\"0 days 0 hours 2 minutes 0 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(121 * 1000, false, false);\n        assertEquals(\"0 days 0 hours 2 minutes 1 second\", text);\n        text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, false);\n        assertEquals(\"0 days 1 hour 12 minutes 0 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false);\n        assertEquals(\"1 day 1 hour 12 minutes 0 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(2 * 24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false);\n        assertEquals(\"2 days 1 hour 12 minutes 0 seconds\", text);\n        for (int i = 2; i < 31; i++) {\n            text = DurationFormatUtils.formatDurationWords(i * 24 * 60 * 60 * 1000, false, false);\n            // assertEquals(i + \" days 0 hours 0 minutes 0 seconds\", text);\n            //            \n            // junit.framework.ComparisonFailure: expected:<25 days 0 hours 0 minutes 0...> but was:<-24 days -17 hours\n            // -2 minutes -47...>\n            // at junit.framework.Assert.assertEquals(Assert.java:81)\n            // at junit.framework.Assert.assertEquals(Assert.java:87)\n            // at\n            // org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatDurationWords(DurationFormatUtilsTest.java:124)\n            // at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n            // at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n            // at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n            // at java.lang.reflect.Method.invoke(Method.java:324)\n            // at junit.framework.TestCase.runTest(TestCase.java:154)\n            // at junit.framework.TestCase.runBare(TestCase.java:127)\n            // at junit.framework.TestResult$1.protect(TestResult.java:106)\n            // at junit.framework.TestResult.runProtected(TestResult.java:124)\n            // at junit.framework.TestResult.run(TestResult.java:109)\n            // at junit.framework.TestCase.run(TestCase.java:118)\n            // at junit.framework.TestSuite.runTest(TestSuite.java:208)\n            // at junit.framework.TestSuite.run(TestSuite.java:203)\n            // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478)\n            // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344)\n            // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)\n        }\n    }",
        "begin_line": 66,
        "end_line": 148,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 27)",
            "(line 69,col 9)-(line 69,col 79)",
            "(line 70,col 9)-(line 70,col 41)",
            "(line 71,col 9)-(line 71,col 79)",
            "(line 72,col 9)-(line 72,col 49)",
            "(line 73,col 9)-(line 73,col 80)",
            "(line 74,col 9)-(line 74,col 50)",
            "(line 75,col 9)-(line 75,col 80)",
            "(line 76,col 9)-(line 76,col 49)",
            "(line 77,col 9)-(line 77,col 84)",
            "(line 78,col 9)-(line 78,col 58)",
            "(line 79,col 9)-(line 79,col 89)",
            "(line 80,col 9)-(line 80,col 64)",
            "(line 82,col 9)-(line 82,col 78)",
            "(line 83,col 9)-(line 83,col 41)",
            "(line 84,col 9)-(line 84,col 78)",
            "(line 85,col 9)-(line 85,col 49)",
            "(line 86,col 9)-(line 86,col 79)",
            "(line 87,col 9)-(line 87,col 40)",
            "(line 88,col 9)-(line 88,col 79)",
            "(line 89,col 9)-(line 89,col 49)",
            "(line 90,col 9)-(line 90,col 83)",
            "(line 91,col 9)-(line 91,col 48)",
            "(line 92,col 9)-(line 92,col 88)",
            "(line 93,col 9)-(line 93,col 36)",
            "(line 95,col 9)-(line 95,col 79)",
            "(line 96,col 9)-(line 96,col 66)",
            "(line 97,col 9)-(line 97,col 79)",
            "(line 98,col 9)-(line 98,col 64)",
            "(line 99,col 9)-(line 99,col 80)",
            "(line 100,col 9)-(line 100,col 55)",
            "(line 101,col 9)-(line 101,col 80)",
            "(line 102,col 9)-(line 102,col 64)",
            "(line 103,col 9)-(line 103,col 84)",
            "(line 104,col 9)-(line 104,col 55)",
            "(line 105,col 9)-(line 105,col 89)",
            "(line 106,col 9)-(line 106,col 36)",
            "(line 108,col 9)-(line 108,col 80)",
            "(line 109,col 9)-(line 109,col 66)",
            "(line 110,col 9)-(line 110,col 80)",
            "(line 111,col 9)-(line 111,col 64)",
            "(line 112,col 9)-(line 112,col 81)",
            "(line 113,col 9)-(line 113,col 65)",
            "(line 114,col 9)-(line 114,col 81)",
            "(line 115,col 9)-(line 115,col 64)",
            "(line 116,col 9)-(line 116,col 85)",
            "(line 117,col 9)-(line 117,col 65)",
            "(line 118,col 9)-(line 118,col 107)",
            "(line 119,col 9)-(line 119,col 64)",
            "(line 120,col 9)-(line 120,col 111)",
            "(line 121,col 9)-(line 121,col 65)",
            "(line 122,col 9)-(line 147,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatDurationPluralWords()",
        "snippet": "    public void testFormatDurationPluralWords() {\n        long oneSecond = 1000;\n        long oneMinute = oneSecond * 60;\n        long oneHour = oneMinute * 60;\n        long oneDay = oneHour * 24;\n        String text = null;\n\n        text = DurationFormatUtils.formatDurationWords(oneSecond, false, false);\n        assertEquals(\"0 days 0 hours 0 minutes 1 second\", text);\n        text = DurationFormatUtils.formatDurationWords(oneSecond * 2, false, false);\n        assertEquals(\"0 days 0 hours 0 minutes 2 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(oneSecond * 11, false, false);\n        assertEquals(\"0 days 0 hours 0 minutes 11 seconds\", text);\n\n        text = DurationFormatUtils.formatDurationWords(oneMinute, false, false);\n        assertEquals(\"0 days 0 hours 1 minute 0 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(oneMinute * 2, false, false);\n        assertEquals(\"0 days 0 hours 2 minutes 0 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(oneMinute * 11, false, false);\n        assertEquals(\"0 days 0 hours 11 minutes 0 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(oneMinute + oneSecond, false, false);\n        assertEquals(\"0 days 0 hours 1 minute 1 second\", text);\n\n        text = DurationFormatUtils.formatDurationWords(oneHour, false, false);\n        assertEquals(\"0 days 1 hour 0 minutes 0 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(oneHour * 2, false, false);\n        assertEquals(\"0 days 2 hours 0 minutes 0 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(oneHour * 11, false, false);\n        assertEquals(\"0 days 11 hours 0 minutes 0 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(oneHour + oneMinute + oneSecond, false, false);\n        assertEquals(\"0 days 1 hour 1 minute 1 second\", text);\n\n        text = DurationFormatUtils.formatDurationWords(oneDay, false, false);\n        assertEquals(\"1 day 0 hours 0 minutes 0 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(oneDay * 2, false, false);\n        assertEquals(\"2 days 0 hours 0 minutes 0 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(oneDay * 11, false, false);\n        assertEquals(\"11 days 0 hours 0 minutes 0 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(oneDay + oneHour + oneMinute + oneSecond, false, false);\n        assertEquals(\"1 day 1 hour 1 minute 1 second\", text);\n    }",
        "begin_line": 153,
        "end_line": 193,
        "comment": "\n     * Tests that \"1 <unit>s\" gets converted to \"1 <unit>\" but that \"11 <unit>s\" is left alone.\n     ",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 30)",
            "(line 155,col 9)-(line 155,col 40)",
            "(line 156,col 9)-(line 156,col 38)",
            "(line 157,col 9)-(line 157,col 35)",
            "(line 158,col 9)-(line 158,col 27)",
            "(line 160,col 9)-(line 160,col 80)",
            "(line 161,col 9)-(line 161,col 64)",
            "(line 162,col 9)-(line 162,col 84)",
            "(line 163,col 9)-(line 163,col 65)",
            "(line 164,col 9)-(line 164,col 85)",
            "(line 165,col 9)-(line 165,col 66)",
            "(line 167,col 9)-(line 167,col 80)",
            "(line 168,col 9)-(line 168,col 64)",
            "(line 169,col 9)-(line 169,col 84)",
            "(line 170,col 9)-(line 170,col 65)",
            "(line 171,col 9)-(line 171,col 85)",
            "(line 172,col 9)-(line 172,col 66)",
            "(line 173,col 9)-(line 173,col 92)",
            "(line 174,col 9)-(line 174,col 63)",
            "(line 176,col 9)-(line 176,col 78)",
            "(line 177,col 9)-(line 177,col 64)",
            "(line 178,col 9)-(line 178,col 82)",
            "(line 179,col 9)-(line 179,col 65)",
            "(line 180,col 9)-(line 180,col 83)",
            "(line 181,col 9)-(line 181,col 66)",
            "(line 182,col 9)-(line 182,col 102)",
            "(line 183,col 9)-(line 183,col 62)",
            "(line 185,col 9)-(line 185,col 77)",
            "(line 186,col 9)-(line 186,col 64)",
            "(line 187,col 9)-(line 187,col 81)",
            "(line 188,col 9)-(line 188,col 65)",
            "(line 189,col 9)-(line 189,col 82)",
            "(line 190,col 9)-(line 190,col 66)",
            "(line 191,col 9)-(line 191,col 111)",
            "(line 192,col 9)-(line 192,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatDurationHMS()",
        "snippet": "    public void testFormatDurationHMS() {\n        long time = 0;\n        assertEquals(\"0:00:00.000\", DurationFormatUtils.formatDurationHMS(time));\n\n        time = 1;\n        assertEquals(\"0:00:00.001\", DurationFormatUtils.formatDurationHMS(time));\n\n        time = 15;\n        assertEquals(\"0:00:00.015\", DurationFormatUtils.formatDurationHMS(time));\n\n        time = 165;\n        assertEquals(\"0:00:00.165\", DurationFormatUtils.formatDurationHMS(time));\n\n        time = 1675;\n        assertEquals(\"0:00:01.675\", DurationFormatUtils.formatDurationHMS(time));\n\n        time = 13465;\n        assertEquals(\"0:00:13.465\", DurationFormatUtils.formatDurationHMS(time));\n\n        time = 72789;\n        assertEquals(\"0:01:12.789\", DurationFormatUtils.formatDurationHMS(time));\n\n        time = 12789 + 32 * 60000;\n        assertEquals(\"0:32:12.789\", DurationFormatUtils.formatDurationHMS(time));\n\n        time = 12789 + 62 * 60000;\n        assertEquals(\"1:02:12.789\", DurationFormatUtils.formatDurationHMS(time));\n    }",
        "begin_line": 195,
        "end_line": 222,
        "comment": "",
        "child_ranges": [
            "(line 196,col 9)-(line 196,col 22)",
            "(line 197,col 9)-(line 197,col 81)",
            "(line 199,col 9)-(line 199,col 17)",
            "(line 200,col 9)-(line 200,col 81)",
            "(line 202,col 9)-(line 202,col 18)",
            "(line 203,col 9)-(line 203,col 81)",
            "(line 205,col 9)-(line 205,col 19)",
            "(line 206,col 9)-(line 206,col 81)",
            "(line 208,col 9)-(line 208,col 20)",
            "(line 209,col 9)-(line 209,col 81)",
            "(line 211,col 9)-(line 211,col 21)",
            "(line 212,col 9)-(line 212,col 81)",
            "(line 214,col 9)-(line 214,col 21)",
            "(line 215,col 9)-(line 215,col 81)",
            "(line 217,col 9)-(line 217,col 34)",
            "(line 218,col 9)-(line 218,col 81)",
            "(line 220,col 9)-(line 220,col 34)",
            "(line 221,col 9)-(line 221,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatDurationISO()",
        "snippet": "    public void testFormatDurationISO() {\n        assertEquals(\"P0Y0M0DT0H0M0.000S\", DurationFormatUtils.formatDurationISO(0L));\n        assertEquals(\"P0Y0M0DT0H0M0.001S\", DurationFormatUtils.formatDurationISO(1L));\n        assertEquals(\"P0Y0M0DT0H0M0.010S\", DurationFormatUtils.formatDurationISO(10L));\n        assertEquals(\"P0Y0M0DT0H0M0.100S\", DurationFormatUtils.formatDurationISO(100L));\n        assertEquals(\"P0Y0M0DT0H1M15.321S\", DurationFormatUtils.formatDurationISO(75321L));\n    }",
        "begin_line": 224,
        "end_line": 230,
        "comment": "",
        "child_ranges": [
            "(line 225,col 9)-(line 225,col 86)",
            "(line 226,col 9)-(line 226,col 86)",
            "(line 227,col 9)-(line 227,col 87)",
            "(line 228,col 9)-(line 228,col 88)",
            "(line 229,col 9)-(line 229,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatDuration()",
        "snippet": "    public void testFormatDuration() {\n        long duration = 0;\n        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"y\"));\n        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"M\"));\n        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"d\"));\n        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"H\"));\n        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"m\"));\n        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"s\"));\n        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"S\"));\n        assertEquals(\"0000\", DurationFormatUtils.formatDuration(duration, \"SSSS\"));\n        assertEquals(\"0000\", DurationFormatUtils.formatDuration(duration, \"yyyy\"));\n        assertEquals(\"0000\", DurationFormatUtils.formatDuration(duration, \"yyMM\"));\n\n        duration = 60 * 1000;\n        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"y\"));\n        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"M\"));\n        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"d\"));\n        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"H\"));\n        assertEquals(\"1\", DurationFormatUtils.formatDuration(duration, \"m\"));\n        assertEquals(\"60\", DurationFormatUtils.formatDuration(duration, \"s\"));\n        assertEquals(\"60000\", DurationFormatUtils.formatDuration(duration, \"S\"));\n        assertEquals(\"01:00\", DurationFormatUtils.formatDuration(duration, \"mm:ss\"));\n\n        Calendar base = Calendar.getInstance();\n        base.set(2000, 0, 1, 0, 0, 0);\n        base.set(Calendar.MILLISECOND, 0);\n\n        Calendar cal = Calendar.getInstance();\n        cal.set(2003, 1, 1, 0, 0, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        duration = cal.getTime().getTime() - base.getTime().getTime(); // duration from 2000-01-01 to cal\n        // don't use 1970 in test as time zones were less reliable in 1970 than now\n        // remember that duration formatting ignores time zones, working on strict hour lengths\n        int days = 366 + 365 + 365 + 31;\n        assertEquals(\"0 0 \" + days, DurationFormatUtils.formatDuration(duration, \"y M d\"));\n    }",
        "begin_line": 232,
        "end_line": 267,
        "comment": "",
        "child_ranges": [
            "(line 233,col 9)-(line 233,col 26)",
            "(line 234,col 9)-(line 234,col 77)",
            "(line 235,col 9)-(line 235,col 77)",
            "(line 236,col 9)-(line 236,col 77)",
            "(line 237,col 9)-(line 237,col 77)",
            "(line 238,col 9)-(line 238,col 77)",
            "(line 239,col 9)-(line 239,col 77)",
            "(line 240,col 9)-(line 240,col 77)",
            "(line 241,col 9)-(line 241,col 83)",
            "(line 242,col 9)-(line 242,col 83)",
            "(line 243,col 9)-(line 243,col 83)",
            "(line 245,col 9)-(line 245,col 29)",
            "(line 246,col 9)-(line 246,col 77)",
            "(line 247,col 9)-(line 247,col 77)",
            "(line 248,col 9)-(line 248,col 77)",
            "(line 249,col 9)-(line 249,col 77)",
            "(line 250,col 9)-(line 250,col 77)",
            "(line 251,col 9)-(line 251,col 78)",
            "(line 252,col 9)-(line 252,col 81)",
            "(line 253,col 9)-(line 253,col 85)",
            "(line 255,col 9)-(line 255,col 47)",
            "(line 256,col 9)-(line 256,col 38)",
            "(line 257,col 9)-(line 257,col 42)",
            "(line 259,col 9)-(line 259,col 46)",
            "(line 260,col 9)-(line 260,col 37)",
            "(line 261,col 9)-(line 261,col 41)",
            "(line 262,col 9)-(line 262,col 70)",
            "(line 265,col 9)-(line 265,col 40)",
            "(line 266,col 9)-(line 266,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatPeriodISO()",
        "snippet": "    public void testFormatPeriodISO() {\n        TimeZone timeZone = TimeZone.getTimeZone(\"GMT-3\");\n        Calendar base = Calendar.getInstance(timeZone);\n        base.set(1970, 0, 1, 0, 0, 0);\n        base.set(Calendar.MILLISECOND, 0);\n\n        Calendar cal = Calendar.getInstance(timeZone);\n        cal.set(2002, 1, 23, 9, 11, 12);\n        cal.set(Calendar.MILLISECOND, 1);\n        String text;\n        // repeat a test from testDateTimeISO to compare extended and not extended.\n        text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal);\n        assertEquals(\"2002-02-23T09:11:12-03:00\", text);\n        // test fixture is the same as above, but now with extended format.\n        text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(),\n                DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone);\n        assertEquals(\"P32Y1M22DT9H11M12.001S\", text);\n        // test fixture from example in http://www.w3.org/TR/xmlschema-2/#duration\n        cal.set(1971, 1, 3, 10, 30, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(),\n                DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone);\n        assertEquals(\"P1Y1M2DT10H30M0.000S\", text);\n        // want a way to say 'don't print the seconds in format()' or other fields for that matter:\n        // assertEquals(\"P1Y2M3DT10H30M\", text);\n    }",
        "begin_line": 269,
        "end_line": 294,
        "comment": "",
        "child_ranges": [
            "(line 270,col 9)-(line 270,col 58)",
            "(line 271,col 9)-(line 271,col 55)",
            "(line 272,col 9)-(line 272,col 38)",
            "(line 273,col 9)-(line 273,col 42)",
            "(line 275,col 9)-(line 275,col 54)",
            "(line 276,col 9)-(line 276,col 40)",
            "(line 277,col 9)-(line 277,col 41)",
            "(line 278,col 9)-(line 278,col 20)",
            "(line 280,col 9)-(line 280,col 73)",
            "(line 281,col 9)-(line 281,col 56)",
            "(line 283,col 9)-(line 284,col 82)",
            "(line 285,col 9)-(line 285,col 53)",
            "(line 287,col 9)-(line 287,col 39)",
            "(line 288,col 9)-(line 288,col 41)",
            "(line 289,col 9)-(line 290,col 82)",
            "(line 291,col 9)-(line 291,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatPeriod()",
        "snippet": "    public void testFormatPeriod() {\n        Calendar cal1970 = Calendar.getInstance();\n        cal1970.set(1970, 0, 1, 0, 0, 0);\n        cal1970.set(Calendar.MILLISECOND, 0);\n        long time1970 = cal1970.getTime().getTime();\n\n        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"y\"));\n        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"M\"));\n        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"d\"));\n        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"H\"));\n        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"m\"));\n        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"s\"));\n        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"S\"));\n        assertEquals(\"0000\", DurationFormatUtils.formatPeriod(time1970, time1970, \"SSSS\"));\n        assertEquals(\"0000\", DurationFormatUtils.formatPeriod(time1970, time1970, \"yyyy\"));\n        assertEquals(\"0000\", DurationFormatUtils.formatPeriod(time1970, time1970, \"yyMM\"));\n\n        long time = time1970 + 60 * 1000;\n        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time, \"y\"));\n        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time, \"M\"));\n        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time, \"d\"));\n        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time, \"H\"));\n        assertEquals(\"1\", DurationFormatUtils.formatPeriod(time1970, time, \"m\"));\n        assertEquals(\"60\", DurationFormatUtils.formatPeriod(time1970, time, \"s\"));\n        assertEquals(\"60000\", DurationFormatUtils.formatPeriod(time1970, time, \"S\"));\n        assertEquals(\"01:00\", DurationFormatUtils.formatPeriod(time1970, time, \"mm:ss\"));\n\n        Calendar cal = Calendar.getInstance();\n        cal.set(1973, 6, 1, 0, 0, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        time = cal.getTime().getTime();\n        assertEquals(\"36\", DurationFormatUtils.formatPeriod(time1970, time, \"yM\"));\n        assertEquals(\"3 years 6 months\", DurationFormatUtils.formatPeriod(time1970, time, \"y' years 'M' months'\"));\n        assertEquals(\"03/06\", DurationFormatUtils.formatPeriod(time1970, time, \"yy/MM\"));\n\n        cal.set(1973, 10, 1, 0, 0, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        time = cal.getTime().getTime();\n        assertEquals(\"310\", DurationFormatUtils.formatPeriod(time1970, time, \"yM\"));\n        assertEquals(\"3 years 10 months\", DurationFormatUtils.formatPeriod(time1970, time, \"y' years 'M' months'\"));\n        assertEquals(\"03/10\", DurationFormatUtils.formatPeriod(time1970, time, \"yy/MM\"));\n\n        cal.set(1974, 0, 1, 0, 0, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        time = cal.getTime().getTime();\n        assertEquals(\"40\", DurationFormatUtils.formatPeriod(time1970, time, \"yM\"));\n        assertEquals(\"4 years 0 months\", DurationFormatUtils.formatPeriod(time1970, time, \"y' years 'M' months'\"));\n        assertEquals(\"04/00\", DurationFormatUtils.formatPeriod(time1970, time, \"yy/MM\"));\n        assertEquals(\"48\", DurationFormatUtils.formatPeriod(time1970, time, \"M\"));\n        assertEquals(\"48\", DurationFormatUtils.formatPeriod(time1970, time, \"MM\"));\n        assertEquals(\"048\", DurationFormatUtils.formatPeriod(time1970, time, \"MMM\"));\n    }",
        "begin_line": 296,
        "end_line": 347,
        "comment": "",
        "child_ranges": [
            "(line 297,col 9)-(line 297,col 50)",
            "(line 298,col 9)-(line 298,col 41)",
            "(line 299,col 9)-(line 299,col 45)",
            "(line 300,col 9)-(line 300,col 52)",
            "(line 302,col 9)-(line 302,col 85)",
            "(line 303,col 9)-(line 303,col 85)",
            "(line 304,col 9)-(line 304,col 85)",
            "(line 305,col 9)-(line 305,col 85)",
            "(line 306,col 9)-(line 306,col 85)",
            "(line 307,col 9)-(line 307,col 85)",
            "(line 308,col 9)-(line 308,col 85)",
            "(line 309,col 9)-(line 309,col 91)",
            "(line 310,col 9)-(line 310,col 91)",
            "(line 311,col 9)-(line 311,col 91)",
            "(line 313,col 9)-(line 313,col 41)",
            "(line 314,col 9)-(line 314,col 81)",
            "(line 315,col 9)-(line 315,col 81)",
            "(line 316,col 9)-(line 316,col 81)",
            "(line 317,col 9)-(line 317,col 81)",
            "(line 318,col 9)-(line 318,col 81)",
            "(line 319,col 9)-(line 319,col 82)",
            "(line 320,col 9)-(line 320,col 85)",
            "(line 321,col 9)-(line 321,col 89)",
            "(line 323,col 9)-(line 323,col 46)",
            "(line 324,col 9)-(line 324,col 37)",
            "(line 325,col 9)-(line 325,col 41)",
            "(line 326,col 9)-(line 326,col 39)",
            "(line 327,col 9)-(line 327,col 83)",
            "(line 328,col 9)-(line 328,col 115)",
            "(line 329,col 9)-(line 329,col 89)",
            "(line 331,col 9)-(line 331,col 38)",
            "(line 332,col 9)-(line 332,col 41)",
            "(line 333,col 9)-(line 333,col 39)",
            "(line 334,col 9)-(line 334,col 84)",
            "(line 335,col 9)-(line 335,col 116)",
            "(line 336,col 9)-(line 336,col 89)",
            "(line 338,col 9)-(line 338,col 37)",
            "(line 339,col 9)-(line 339,col 41)",
            "(line 340,col 9)-(line 340,col 39)",
            "(line 341,col 9)-(line 341,col 83)",
            "(line 342,col 9)-(line 342,col 115)",
            "(line 343,col 9)-(line 343,col 89)",
            "(line 344,col 9)-(line 344,col 82)",
            "(line 345,col 9)-(line 345,col 83)",
            "(line 346,col 9)-(line 346,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DurationFormatUtilsTest.testLexx()",
        "snippet": "    public void testLexx() {\n        // tests each constant\n        assertArrayEquals(new DurationFormatUtils.Token[]{\n            new DurationFormatUtils.Token(DurationFormatUtils.y, 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.M, 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.d, 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.H, 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.m, 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.s, 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.S, 1)}, DurationFormatUtils.lexx(\"yMdHmsS\"));\n\n        // tests the ISO8601-like\n        assertArrayEquals(new DurationFormatUtils.Token[]{\n            new DurationFormatUtils.Token(DurationFormatUtils.H, 1),\n            new DurationFormatUtils.Token(new StringBuffer(\":\"), 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.m, 2),\n            new DurationFormatUtils.Token(new StringBuffer(\":\"), 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.s, 2),\n            new DurationFormatUtils.Token(new StringBuffer(\".\"), 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.S, 3)}, DurationFormatUtils.lexx(\"H:mm:ss.SSS\"));\n\n        // test the iso extended format\n        assertArrayEquals(new DurationFormatUtils.Token[]{\n            new DurationFormatUtils.Token(new StringBuffer(\"P\"), 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.y, 4),\n            new DurationFormatUtils.Token(new StringBuffer(\"Y\"), 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.M, 1),\n            new DurationFormatUtils.Token(new StringBuffer(\"M\"), 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.d, 1),\n            new DurationFormatUtils.Token(new StringBuffer(\"DT\"), 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.H, 1),\n            new DurationFormatUtils.Token(new StringBuffer(\"H\"), 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.m, 1),\n            new DurationFormatUtils.Token(new StringBuffer(\"M\"), 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.s, 1),\n            new DurationFormatUtils.Token(new StringBuffer(\".\"), 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.S, 1),\n            new DurationFormatUtils.Token(new StringBuffer(\"S\"), 1)}, DurationFormatUtils\n                .lexx(DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN));\n\n        // test failures in equals\n        DurationFormatUtils.Token token = new DurationFormatUtils.Token(DurationFormatUtils.y, 4);\n        assertFalse(\"Token equal to non-Token class. \", token.equals(new Object()));\n        assertFalse(\"Token equal to Token with wrong value class. \", token.equals(new DurationFormatUtils.Token(\n                new Object())));\n        assertFalse(\"Token equal to Token with different count. \", token.equals(new DurationFormatUtils.Token(\n                DurationFormatUtils.y, 1)));\n        DurationFormatUtils.Token numToken = new DurationFormatUtils.Token(new Integer(1), 4);\n        assertTrue(\"Token with Number value not equal to itself. \", numToken.equals(numToken));\n    }",
        "begin_line": 349,
        "end_line": 398,
        "comment": "",
        "child_ranges": [
            "(line 351,col 9)-(line 358,col 107)",
            "(line 361,col 9)-(line 368,col 111)",
            "(line 371,col 9)-(line 387,col 72)",
            "(line 390,col 9)-(line 390,col 98)",
            "(line 391,col 9)-(line 391,col 84)",
            "(line 392,col 9)-(line 393,col 32)",
            "(line 394,col 9)-(line 395,col 44)",
            "(line 396,col 9)-(line 396,col 94)",
            "(line 397,col 9)-(line 397,col 95)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DurationFormatUtilsTest.testBugzilla38401()",
        "snippet": "    public void testBugzilla38401() {}",
        "begin_line": 402,
        "end_line": 402,
        "comment": " http://issues.apache.org/bugzilla/show_bug.cgi?id=38401",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DurationFormatUtilsTest.testJiraLang281()",
        "snippet": "    public void testJiraLang281() {\n        assertEqualDuration( \"09\", new int[] { 2005, 11, 31, 0, 0, 0 }, \n                             new int[] { 2006, 9, 6, 0, 0, 0 }, \"MM\");\n    }",
        "begin_line": 410,
        "end_line": 413,
        "comment": " https://issues.apache.org/jira/browse/LANG-281",
        "child_ranges": [
            "(line 411,col 9)-(line 412,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DurationFormatUtilsTest.testLowDurations()",
        "snippet": "    public void testLowDurations() {\n        for(int hr=0; hr < 24; hr++) {\n            for(int min=0; min < 60; min++) {\n                for(int sec=0; sec < 60; sec++) {\n                    assertEqualDuration( hr + \":\" + min + \":\" + sec, \n                                         new int[] { 2000, 0, 1, 0, 0, 0, 0 },\n                                         new int[] { 2000, 0, 1, hr, min, sec },\n                                         \"H:m:s\"\n                                       );\n                }\n            }\n        }\n    }",
        "begin_line": 416,
        "end_line": 428,
        "comment": " Testing the under a day range in DurationFormatUtils.formatPeriod",
        "child_ranges": [
            "(line 417,col 9)-(line 427,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DurationFormatUtilsTest.testEdgeDurations()",
        "snippet": "    public void testEdgeDurations() {\n        assertEqualDuration( \"01\", new int[] { 2006, 0, 15, 0, 0, 0 }, \n                             new int[] { 2006, 2, 10, 0, 0, 0 }, \"MM\");\n        assertEqualDuration( \"12\", new int[] { 2005, 0, 15, 0, 0, 0 }, \n                             new int[] { 2006, 0, 15, 0, 0, 0 }, \"MM\");\n        assertEqualDuration( \"12\", new int[] { 2005, 0, 15, 0, 0, 0 }, \n                             new int[] { 2006, 0, 16, 0, 0, 0 }, \"MM\");\n        assertEqualDuration( \"11\", new int[] { 2005, 0, 15, 0, 0, 0 }, \n                             new int[] { 2006, 0, 14, 0, 0, 0 }, \"MM\");\n        \n        assertEqualDuration( \"01 26\", new int[] { 2006, 0, 15, 0, 0, 0 },\n                             new int[] { 2006, 2, 10, 0, 0, 0 }, \"MM dd\");\n        assertEqualDuration( \"54\", new int[] { 2006, 0, 15, 0, 0, 0 },\n                             new int[] { 2006, 2, 10, 0, 0, 0 }, \"dd\"); \n        \n        assertEqualDuration( \"09 12\", new int[] { 2006, 1, 20, 0, 0, 0 },\n                             new int[] { 2006, 11, 4, 0, 0, 0 }, \"MM dd\");\n        assertEqualDuration( \"287\", new int[] { 2006, 1, 20, 0, 0, 0 },\n                             new int[] { 2006, 11, 4, 0, 0, 0 }, \"dd\"); \n\n        assertEqualDuration( \"11 30\", new int[] { 2006, 0, 2, 0, 0, 0 },\n                             new int[] { 2007, 0, 1, 0, 0, 0 }, \"MM dd\"); \n        assertEqualDuration( \"364\", new int[] { 2006, 0, 2, 0, 0, 0 },\n                             new int[] { 2007, 0, 1, 0, 0, 0 }, \"dd\"); \n\n        assertEqualDuration( \"12 00\", new int[] { 2006, 0, 1, 0, 0, 0 },\n                             new int[] { 2007, 0, 1, 0, 0, 0 }, \"MM dd\"); \n        assertEqualDuration( \"365\", new int[] { 2006, 0, 1, 0, 0, 0 },\n                             new int[] { 2007, 0, 1, 0, 0, 0 }, \"dd\"); \n    \n        assertEqualDuration( \"31\", new int[] { 2006, 0, 1, 0, 0, 0 },\n                new int[] { 2006, 1, 1, 0, 0, 0 }, \"dd\"); \n        \n        assertEqualDuration( \"92\", new int[] { 2005, 9, 1, 0, 0, 0 },\n                new int[] { 2006, 0, 1, 0, 0, 0 }, \"dd\"); \n        assertEqualDuration( \"77\", new int[] { 2005, 9, 16, 0, 0, 0 },\n                new int[] { 2006, 0, 1, 0, 0, 0 }, \"dd\"); \n\n        // test month larger in start than end\n        assertEqualDuration( \"136\", new int[] { 2005, 9, 16, 0, 0, 0 },\n                new int[] { 2006, 2, 1, 0, 0, 0 }, \"dd\"); \n        // test when start in leap year\n        assertEqualDuration( \"136\", new int[] { 2004, 9, 16, 0, 0, 0 },\n                new int[] { 2005, 2, 1, 0, 0, 0 }, \"dd\"); \n        // test when end in leap year\n        assertEqualDuration( \"137\", new int[] { 2003, 9, 16, 0, 0, 0 },\n                new int[] { 2004, 2, 1, 0, 0, 0 }, \"dd\");         \n        // test when end in leap year but less than end of feb\n        assertEqualDuration( \"135\", new int[] { 2003, 9, 16, 0, 0, 0 },\n                new int[] { 2004, 1, 28, 0, 0, 0 }, \"dd\"); \n\n        assertEqualDuration( \"364\", new int[] { 2007, 0, 2, 0, 0, 0 },\n                new int[] { 2008, 0, 1, 0, 0, 0 }, \"dd\"); \n        assertEqualDuration( \"729\", new int[] { 2006, 0, 2, 0, 0, 0 },\n                new int[] { 2008, 0, 1, 0, 0, 0 }, \"dd\"); \n\n        assertEqualDuration( \"365\", new int[] { 2007, 2, 2, 0, 0, 0 },\n                new int[] { 2008, 2, 1, 0, 0, 0 }, \"dd\"); \n        assertEqualDuration( \"333\", new int[] { 2007, 1, 2, 0, 0, 0 },\n                new int[] { 2008, 0, 1, 0, 0, 0 }, \"dd\"); \n\n        assertEqualDuration( \"28\", new int[] { 2008, 1, 2, 0, 0, 0 },\n                new int[] { 2008, 2, 1, 0, 0, 0 }, \"dd\"); \n        assertEqualDuration( \"393\", new int[] { 2007, 1, 2, 0, 0, 0 },\n                new int[] { 2008, 2, 1, 0, 0, 0 }, \"dd\"); \n\n        assertEqualDuration( \"369\", new int[] { 2004, 0, 29, 0, 0, 0 },\n                new int[] { 2005, 1, 1, 0, 0, 0 }, \"dd\"); \n\n        assertEqualDuration( \"338\", new int[] { 2004, 1, 29, 0, 0, 0 },\n                new int[] { 2005, 1, 1, 0, 0, 0 }, \"dd\"); \n\n        assertEqualDuration( \"28\", new int[] { 2004, 2, 8, 0, 0, 0 },\n                new int[] { 2004, 3, 5, 0, 0, 0 }, \"dd\"); \n\n        assertEqualDuration( \"48\", new int[] { 1992, 1, 29, 0, 0, 0 },\n                new int[] { 1996, 1, 29, 0, 0, 0 }, \"M\"); \n        \n        \n        // this seems odd - and will fail if I throw it in as a brute force \n        // below as it expects the answer to be 12. It's a tricky edge case\n        assertEqualDuration( \"11\", new int[] { 1996, 1, 29, 0, 0, 0 },\n                new int[] { 1997, 1, 28, 0, 0, 0 }, \"M\"); \n        // again - this seems odd\n        assertEqualDuration( \"11 28\", new int[] { 1996, 1, 29, 0, 0, 0 },\n                new int[] { 1997, 1, 28, 0, 0, 0 }, \"M d\"); \n        \n    }",
        "begin_line": 431,
        "end_line": 518,
        "comment": " Attempting to test edge cases in DurationFormatUtils.formatPeriod",
        "child_ranges": [
            "(line 432,col 9)-(line 433,col 71)",
            "(line 434,col 9)-(line 435,col 71)",
            "(line 436,col 9)-(line 437,col 71)",
            "(line 438,col 9)-(line 439,col 71)",
            "(line 441,col 9)-(line 442,col 74)",
            "(line 443,col 9)-(line 444,col 71)",
            "(line 446,col 9)-(line 447,col 74)",
            "(line 448,col 9)-(line 449,col 71)",
            "(line 451,col 9)-(line 452,col 73)",
            "(line 453,col 9)-(line 454,col 70)",
            "(line 456,col 9)-(line 457,col 73)",
            "(line 458,col 9)-(line 459,col 70)",
            "(line 461,col 9)-(line 462,col 57)",
            "(line 464,col 9)-(line 465,col 57)",
            "(line 466,col 9)-(line 467,col 57)",
            "(line 470,col 9)-(line 471,col 57)",
            "(line 473,col 9)-(line 474,col 57)",
            "(line 476,col 9)-(line 477,col 57)",
            "(line 479,col 9)-(line 480,col 58)",
            "(line 482,col 9)-(line 483,col 57)",
            "(line 484,col 9)-(line 485,col 57)",
            "(line 487,col 9)-(line 488,col 57)",
            "(line 489,col 9)-(line 490,col 57)",
            "(line 492,col 9)-(line 493,col 57)",
            "(line 494,col 9)-(line 495,col 57)",
            "(line 497,col 9)-(line 498,col 57)",
            "(line 500,col 9)-(line 501,col 57)",
            "(line 503,col 9)-(line 504,col 57)",
            "(line 506,col 9)-(line 507,col 57)",
            "(line 512,col 9)-(line 513,col 57)",
            "(line 515,col 9)-(line 516,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DurationFormatUtilsTest.testDurationsByBruteForce()",
        "snippet": "    public void testDurationsByBruteForce() {\n        bruteForce(2006, 0, 1, \"d\", Calendar.DAY_OF_MONTH);\n        bruteForce(2006, 0, 2, \"d\", Calendar.DAY_OF_MONTH);\n        bruteForce(2007, 1, 2, \"d\", Calendar.DAY_OF_MONTH);\n        bruteForce(2004, 1, 29, \"d\", Calendar.DAY_OF_MONTH);\n        bruteForce(1996, 1, 29, \"d\", Calendar.DAY_OF_MONTH);\n\n        bruteForce(1969, 1, 28, \"M\", Calendar.MONTH);  // tests for 48 years\n        //bruteForce(1996, 1, 29, \"M\", Calendar.MONTH);  // this will fail\n    }",
        "begin_line": 520,
        "end_line": 529,
        "comment": "",
        "child_ranges": [
            "(line 521,col 9)-(line 521,col 59)",
            "(line 522,col 9)-(line 522,col 59)",
            "(line 523,col 9)-(line 523,col 59)",
            "(line 524,col 9)-(line 524,col 60)",
            "(line 525,col 9)-(line 525,col 60)",
            "(line 527,col 9)-(line 527,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DurationFormatUtilsTest.bruteForce(int, int, int, java.lang.String, int)",
        "snippet": "    private void bruteForce(int year, int month, int day, String format, int calendarType) {\n        String msg = year + \"-\" + month + \"-\" + day + \" to \";\n        Calendar c = Calendar.getInstance();\n        c.set(year, month, day, 0, 0, 0);\n        int[] array1 = new int[] { year, month, day, 0, 0, 0 };\n        int[] array2 = new int[] { year, month, day, 0, 0, 0 };\n        for (int i=0; i < FOUR_YEARS; i++) {\n            array2[0] = c.get(Calendar.YEAR);\n            array2[1] = c.get(Calendar.MONTH);\n            array2[2] = c.get(Calendar.DAY_OF_MONTH);\n            String tmpMsg = msg + array2[0] + \"-\" + array2[1] + \"-\" + array2[2] + \" at \";\n            assertEqualDuration( tmpMsg + i, Integer.toString(i), array1, array2, format );\n            c.add(calendarType, 1);\n        }\n    }",
        "begin_line": 543,
        "end_line": 557,
        "comment": "",
        "child_ranges": [
            "(line 544,col 9)-(line 544,col 61)",
            "(line 545,col 9)-(line 545,col 44)",
            "(line 546,col 9)-(line 546,col 41)",
            "(line 547,col 9)-(line 547,col 63)",
            "(line 548,col 9)-(line 548,col 63)",
            "(line 549,col 9)-(line 556,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DurationFormatUtilsTest.assertEqualDuration(java.lang.String, int[], int[], java.lang.String)",
        "snippet": "    private void assertEqualDuration(String expected, int[] start, int[] end, String format) {\n        assertEqualDuration(null, expected, start, end, format);\n    }",
        "begin_line": 559,
        "end_line": 561,
        "comment": "",
        "child_ranges": [
            "(line 560,col 9)-(line 560,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DurationFormatUtilsTest.assertEqualDuration(java.lang.String, java.lang.String, int[], int[], java.lang.String)",
        "snippet": "    private void assertEqualDuration(String message, String expected, int[] start, int[] end, String format) {\n        Calendar cal1 = Calendar.getInstance();\n        cal1.set(start[0], start[1], start[2], start[3], start[4], start[5]);\n        cal1.set(Calendar.MILLISECOND, 0);\n        Calendar cal2 = Calendar.getInstance();\n        cal2.set(end[0], end[1], end[2], end[3], end[4], end[5]);\n        cal2.set(Calendar.MILLISECOND, 0);\n        long milli1 = cal1.getTime().getTime();\n        long milli2 = cal2.getTime().getTime();\n        String result = DurationFormatUtils.formatPeriod(milli1, milli2, format);\n        if (message == null) {\n            assertEquals(expected, result);\n        } else {\n            assertEquals(message, expected, result);\n        }\n    }",
        "begin_line": 562,
        "end_line": 577,
        "comment": "",
        "child_ranges": [
            "(line 563,col 9)-(line 563,col 47)",
            "(line 564,col 9)-(line 564,col 77)",
            "(line 565,col 9)-(line 565,col 42)",
            "(line 566,col 9)-(line 566,col 47)",
            "(line 567,col 9)-(line 567,col 65)",
            "(line 568,col 9)-(line 568,col 42)",
            "(line 569,col 9)-(line 569,col 47)",
            "(line 570,col 9)-(line 570,col 47)",
            "(line 571,col 9)-(line 571,col 81)",
            "(line 572,col 9)-(line 576,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DurationFormatUtilsTest.assertArrayEquals(org.apache.commons.lang.time.DurationFormatUtils.Token[], org.apache.commons.lang.time.DurationFormatUtils.Token[])",
        "snippet": "    private void assertArrayEquals(DurationFormatUtils.Token[] obj1, DurationFormatUtils.Token[] obj2) {\n        assertEquals(\"Arrays are unequal length. \", obj1.length, obj2.length);\n        for (int i = 0; i < obj1.length; i++) {\n            assertTrue(\"Index \" + i + \" not equal, \" + obj1[i] + \" vs \" + obj2, obj1[i].equals(obj2[i]));\n        }\n    }",
        "begin_line": 579,
        "end_line": 584,
        "comment": "",
        "child_ranges": [
            "(line 580,col 9)-(line 580,col 78)",
            "(line 581,col 9)-(line 583,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsTest.DateUtilsTest(java.lang.String)",
        "snippet": "    public DateUtilsTest(String name) {\n        super(name);\n    }",
        "begin_line": 86,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 90,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(DateUtilsTest.class);\n        suite.setName(\"DateUtils Tests\");\n        return suite;\n    }",
        "begin_line": 94,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 61)",
            "(line 96,col 9)-(line 96,col 41)",
            "(line 97,col 9)-(line 97,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        super.setUp();\n\n        dateParser = new SimpleDateFormat(\"MMM dd, yyyy\", Locale.ENGLISH);\n        dateTimeParser = new SimpleDateFormat(\"MMM dd, yyyy H:mm:ss.SSS\", Locale.ENGLISH);\n\n        dateAmPm1 = dateTimeParser.parse(\"February 3, 2002 01:10:00.000\");\n        dateAmPm2 = dateTimeParser.parse(\"February 3, 2002 11:10:00.000\");\n        dateAmPm3 = dateTimeParser.parse(\"February 3, 2002 13:10:00.000\");\n        dateAmPm4 = dateTimeParser.parse(\"February 3, 2002 19:10:00.000\");\n        date0 = dateTimeParser.parse(\"February 3, 2002 12:34:56.789\");\n        date1 = dateTimeParser.parse(\"February 12, 2002 12:34:56.789\");\n        date2 = dateTimeParser.parse(\"November 18, 2001 1:23:11.321\");\n        defaultZone = TimeZone.getDefault();\n        zone = TimeZone.getTimeZone(\"MET\");\n        TimeZone.setDefault(zone);\n        dateTimeParser.setTimeZone(zone);\n        date3 = dateTimeParser.parse(\"March 30, 2003 05:30:45.000\");\n        date4 = dateTimeParser.parse(\"March 30, 2003 01:10:00.000\");\n        date5 = dateTimeParser.parse(\"March 30, 2003 01:40:00.000\");\n        date6 = dateTimeParser.parse(\"March 30, 2003 02:10:00.000\");\n        date7 = dateTimeParser.parse(\"March 30, 2003 02:40:00.000\");\n        date8 = dateTimeParser.parse(\"October 26, 2003 05:30:45.000\");\n        dateTimeParser.setTimeZone(defaultZone);\n        TimeZone.setDefault(defaultZone);\n        calAmPm1 = Calendar.getInstance();\n        calAmPm1.setTime(dateAmPm1);\n        calAmPm2 = Calendar.getInstance();\n        calAmPm2.setTime(dateAmPm2);\n        calAmPm3 = Calendar.getInstance();\n        calAmPm3.setTime(dateAmPm3);\n        calAmPm4 = Calendar.getInstance();\n        calAmPm4.setTime(dateAmPm4);\n        cal1 = Calendar.getInstance();\n        cal1.setTime(date1);\n        cal2 = Calendar.getInstance();\n        cal2.setTime(date2);\n        TimeZone.setDefault(zone);\n        cal3 = Calendar.getInstance();\n        cal3.setTime(date3);\n        cal4 = Calendar.getInstance();\n        cal4.setTime(date4);\n        cal5 = Calendar.getInstance();\n        cal5.setTime(date5);\n        cal6 = Calendar.getInstance();\n        cal6.setTime(date6);\n        cal7 = Calendar.getInstance();\n        cal7.setTime(date7);\n        cal8 = Calendar.getInstance();\n        cal8.setTime(date8);\n        TimeZone.setDefault(defaultZone);\n    }",
        "begin_line": 100,
        "end_line": 151,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 22)",
            "(line 103,col 9)-(line 103,col 74)",
            "(line 104,col 9)-(line 104,col 90)",
            "(line 106,col 9)-(line 106,col 74)",
            "(line 107,col 9)-(line 107,col 74)",
            "(line 108,col 9)-(line 108,col 74)",
            "(line 109,col 9)-(line 109,col 74)",
            "(line 110,col 9)-(line 110,col 70)",
            "(line 111,col 9)-(line 111,col 71)",
            "(line 112,col 9)-(line 112,col 70)",
            "(line 113,col 9)-(line 113,col 44)",
            "(line 114,col 9)-(line 114,col 43)",
            "(line 115,col 9)-(line 115,col 34)",
            "(line 116,col 9)-(line 116,col 41)",
            "(line 117,col 9)-(line 117,col 68)",
            "(line 118,col 9)-(line 118,col 68)",
            "(line 119,col 9)-(line 119,col 68)",
            "(line 120,col 9)-(line 120,col 68)",
            "(line 121,col 9)-(line 121,col 68)",
            "(line 122,col 9)-(line 122,col 70)",
            "(line 123,col 9)-(line 123,col 48)",
            "(line 124,col 9)-(line 124,col 41)",
            "(line 125,col 9)-(line 125,col 42)",
            "(line 126,col 9)-(line 126,col 36)",
            "(line 127,col 9)-(line 127,col 42)",
            "(line 128,col 9)-(line 128,col 36)",
            "(line 129,col 9)-(line 129,col 42)",
            "(line 130,col 9)-(line 130,col 36)",
            "(line 131,col 9)-(line 131,col 42)",
            "(line 132,col 9)-(line 132,col 36)",
            "(line 133,col 9)-(line 133,col 38)",
            "(line 134,col 9)-(line 134,col 28)",
            "(line 135,col 9)-(line 135,col 38)",
            "(line 136,col 9)-(line 136,col 28)",
            "(line 137,col 9)-(line 137,col 34)",
            "(line 138,col 9)-(line 138,col 38)",
            "(line 139,col 9)-(line 139,col 28)",
            "(line 140,col 9)-(line 140,col 38)",
            "(line 141,col 9)-(line 141,col 28)",
            "(line 142,col 9)-(line 142,col 38)",
            "(line 143,col 9)-(line 143,col 28)",
            "(line 144,col 9)-(line 144,col 38)",
            "(line 145,col 9)-(line 145,col 28)",
            "(line 146,col 9)-(line 146,col 38)",
            "(line 147,col 9)-(line 147,col 28)",
            "(line 148,col 9)-(line 148,col 38)",
            "(line 149,col 9)-(line 149,col 28)",
            "(line 150,col 9)-(line 150,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsTest.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        super.tearDown();\n    }",
        "begin_line": 153,
        "end_line": 155,
        "comment": "",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new DateUtils());\n        Constructor[] cons = DateUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(DateUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(DateUtils.class.getModifiers()));\n    }",
        "begin_line": 158,
        "end_line": 165,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 159,col 9)-(line 159,col 39)",
            "(line 160,col 9)-(line 160,col 71)",
            "(line 161,col 9)-(line 161,col 37)",
            "(line 162,col 9)-(line 162,col 70)",
            "(line 163,col 9)-(line 163,col 78)",
            "(line 164,col 9)-(line 164,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsTest.testIsSameDay_Date()",
        "snippet": "    public void testIsSameDay_Date() {\n        Date date1 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime();\n        Date date2 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime();\n        assertEquals(true, DateUtils.isSameDay(date1, date2));\n        date2 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime();\n        assertEquals(false, DateUtils.isSameDay(date1, date2));\n        date1 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime();\n        assertEquals(true, DateUtils.isSameDay(date1, date2));\n        date2 = new GregorianCalendar(2005, 6, 10, 13, 45).getTime();\n        assertEquals(false, DateUtils.isSameDay(date1, date2));\n        try {\n            DateUtils.isSameDay((Date) null, (Date) null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 168,
        "end_line": 182,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 169,col 9)-(line 169,col 73)",
            "(line 170,col 9)-(line 170,col 73)",
            "(line 171,col 9)-(line 171,col 62)",
            "(line 172,col 9)-(line 172,col 69)",
            "(line 173,col 9)-(line 173,col 63)",
            "(line 174,col 9)-(line 174,col 69)",
            "(line 175,col 9)-(line 175,col 62)",
            "(line 176,col 9)-(line 176,col 69)",
            "(line 177,col 9)-(line 177,col 63)",
            "(line 178,col 9)-(line 181,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsTest.testIsSameDay_Cal()",
        "snippet": "    public void testIsSameDay_Cal() {\n        GregorianCalendar cal1 = new GregorianCalendar(2004, 6, 9, 13, 45);\n        GregorianCalendar cal2 = new GregorianCalendar(2004, 6, 9, 13, 45);\n        assertEquals(true, DateUtils.isSameDay(cal1, cal2));\n        cal2.add(Calendar.DAY_OF_YEAR, 1);\n        assertEquals(false, DateUtils.isSameDay(cal1, cal2));\n        cal1.add(Calendar.DAY_OF_YEAR, 1);\n        assertEquals(true, DateUtils.isSameDay(cal1, cal2));\n        cal2.add(Calendar.YEAR, 1);\n        assertEquals(false, DateUtils.isSameDay(cal1, cal2));\n        try {\n            DateUtils.isSameDay((Calendar) null, (Calendar) null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 185,
        "end_line": 199,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 186,col 9)-(line 186,col 75)",
            "(line 187,col 9)-(line 187,col 75)",
            "(line 188,col 9)-(line 188,col 60)",
            "(line 189,col 9)-(line 189,col 42)",
            "(line 190,col 9)-(line 190,col 61)",
            "(line 191,col 9)-(line 191,col 42)",
            "(line 192,col 9)-(line 192,col 60)",
            "(line 193,col 9)-(line 193,col 35)",
            "(line 194,col 9)-(line 194,col 61)",
            "(line 195,col 9)-(line 198,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsTest.testIsSameInstant_Date()",
        "snippet": "    public void testIsSameInstant_Date() {\n        Date date1 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime();\n        Date date2 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime();\n        assertEquals(true, DateUtils.isSameInstant(date1, date2));\n        date2 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime();\n        assertEquals(false, DateUtils.isSameInstant(date1, date2));\n        date1 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime();\n        assertEquals(true, DateUtils.isSameInstant(date1, date2));\n        date2 = new GregorianCalendar(2005, 6, 10, 13, 45).getTime();\n        assertEquals(false, DateUtils.isSameInstant(date1, date2));\n        try {\n            DateUtils.isSameInstant((Date) null, (Date) null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 202,
        "end_line": 216,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 203,col 9)-(line 203,col 73)",
            "(line 204,col 9)-(line 204,col 73)",
            "(line 205,col 9)-(line 205,col 66)",
            "(line 206,col 9)-(line 206,col 69)",
            "(line 207,col 9)-(line 207,col 67)",
            "(line 208,col 9)-(line 208,col 69)",
            "(line 209,col 9)-(line 209,col 66)",
            "(line 210,col 9)-(line 210,col 69)",
            "(line 211,col 9)-(line 211,col 67)",
            "(line 212,col 9)-(line 215,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsTest.testIsSameInstant_Cal()",
        "snippet": "    public void testIsSameInstant_Cal() {\n        GregorianCalendar cal1 = new GregorianCalendar(TimeZone.getTimeZone(\"GMT+1\"));\n        GregorianCalendar cal2 = new GregorianCalendar(TimeZone.getTimeZone(\"GMT-1\"));\n        cal1.set(2004, 6, 9, 13, 45, 0);\n        cal1.set(Calendar.MILLISECOND, 0);\n        cal2.set(2004, 6, 9, 13, 45, 0);\n        cal2.set(Calendar.MILLISECOND, 0);\n        assertEquals(false, DateUtils.isSameInstant(cal1, cal2));\n        \n        cal2.set(2004, 6, 9, 11, 45, 0);\n        assertEquals(true, DateUtils.isSameInstant(cal1, cal2));\n        try {\n            DateUtils.isSameInstant((Calendar) null, (Calendar) null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 219,
        "end_line": 234,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 220,col 9)-(line 220,col 86)",
            "(line 221,col 9)-(line 221,col 86)",
            "(line 222,col 9)-(line 222,col 40)",
            "(line 223,col 9)-(line 223,col 42)",
            "(line 224,col 9)-(line 224,col 40)",
            "(line 225,col 9)-(line 225,col 42)",
            "(line 226,col 9)-(line 226,col 65)",
            "(line 228,col 9)-(line 228,col 40)",
            "(line 229,col 9)-(line 229,col 64)",
            "(line 230,col 9)-(line 233,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsTest.testIsSameLocalTime_Cal()",
        "snippet": "    public void testIsSameLocalTime_Cal() {\n        GregorianCalendar cal1 = new GregorianCalendar(TimeZone.getTimeZone(\"GMT+1\"));\n        GregorianCalendar cal2 = new GregorianCalendar(TimeZone.getTimeZone(\"GMT-1\"));\n        cal1.set(2004, 6, 9, 13, 45, 0);\n        cal1.set(Calendar.MILLISECOND, 0);\n        cal2.set(2004, 6, 9, 13, 45, 0);\n        cal2.set(Calendar.MILLISECOND, 0);\n        assertEquals(true, DateUtils.isSameLocalTime(cal1, cal2));\n        \n        cal2.set(2004, 6, 9, 11, 45, 0);\n        assertEquals(false, DateUtils.isSameLocalTime(cal1, cal2));\n        try {\n            DateUtils.isSameLocalTime((Calendar) null, (Calendar) null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 237,
        "end_line": 252,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 238,col 9)-(line 238,col 86)",
            "(line 239,col 9)-(line 239,col 86)",
            "(line 240,col 9)-(line 240,col 40)",
            "(line 241,col 9)-(line 241,col 42)",
            "(line 242,col 9)-(line 242,col 40)",
            "(line 243,col 9)-(line 243,col 42)",
            "(line 244,col 9)-(line 244,col 66)",
            "(line 246,col 9)-(line 246,col 40)",
            "(line 247,col 9)-(line 247,col 67)",
            "(line 248,col 9)-(line 251,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsTest.testParseDate()",
        "snippet": "    public void testParseDate() throws Exception {\n        GregorianCalendar cal = new GregorianCalendar(1972, 11, 3);\n        String dateStr = \"1972-12-03\";\n        String[] parsers = new String[] {\"yyyy'-'DDD\", \"yyyy'-'MM'-'dd\", \"yyyyMMdd\"};\n        Date date = DateUtils.parseDate(dateStr, parsers);\n        assertEquals(cal.getTime(), date);\n        \n        dateStr = \"1972-338\";\n        date = DateUtils.parseDate(dateStr, parsers);\n        assertEquals(cal.getTime(), date);\n        \n        dateStr = \"19721203\";\n        date = DateUtils.parseDate(dateStr, parsers);\n        assertEquals(cal.getTime(), date);\n        \n        try {\n            DateUtils.parseDate(\"PURPLE\", parsers);\n            fail();\n        } catch (ParseException ex) {}\n        try {\n            DateUtils.parseDate(\"197212AB\", parsers);\n            fail();\n        } catch (ParseException ex) {}\n        try {\n            DateUtils.parseDate(null, parsers);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateUtils.parseDate(dateStr, null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 255,
        "end_line": 286,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 256,col 9)-(line 256,col 67)",
            "(line 257,col 9)-(line 257,col 38)",
            "(line 258,col 9)-(line 258,col 85)",
            "(line 259,col 9)-(line 259,col 58)",
            "(line 260,col 9)-(line 260,col 42)",
            "(line 262,col 9)-(line 262,col 29)",
            "(line 263,col 9)-(line 263,col 53)",
            "(line 264,col 9)-(line 264,col 42)",
            "(line 266,col 9)-(line 266,col 29)",
            "(line 267,col 9)-(line 267,col 53)",
            "(line 268,col 9)-(line 268,col 42)",
            "(line 270,col 9)-(line 273,col 38)",
            "(line 274,col 9)-(line 277,col 38)",
            "(line 278,col 9)-(line 281,col 48)",
            "(line 282,col 9)-(line 285,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsTest.testAddYears()",
        "snippet": "    public void testAddYears() throws Exception {\n        Date base = new Date(MILLIS_TEST);\n        Date result = DateUtils.addYears(base, 0);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n        \n        result = DateUtils.addYears(base, 1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2001, 6, 5, 4, 3, 2, 1);\n        \n        result = DateUtils.addYears(base, -1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 1999, 6, 5, 4, 3, 2, 1);\n    }",
        "begin_line": 289,
        "end_line": 305,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 290,col 9)-(line 290,col 42)",
            "(line 291,col 9)-(line 291,col 50)",
            "(line 292,col 9)-(line 292,col 36)",
            "(line 293,col 9)-(line 293,col 49)",
            "(line 294,col 9)-(line 294,col 51)",
            "(line 296,col 9)-(line 296,col 45)",
            "(line 297,col 9)-(line 297,col 36)",
            "(line 298,col 9)-(line 298,col 49)",
            "(line 299,col 9)-(line 299,col 51)",
            "(line 301,col 9)-(line 301,col 46)",
            "(line 302,col 9)-(line 302,col 36)",
            "(line 303,col 9)-(line 303,col 49)",
            "(line 304,col 9)-(line 304,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsTest.testAddMonths()",
        "snippet": "    public void testAddMonths() {}",
        "begin_line": 308,
        "end_line": 308,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsTest.testAddWeeks()",
        "snippet": "    public void testAddWeeks() throws Exception {\n        Date base = new Date(MILLIS_TEST);\n        Date result = DateUtils.addWeeks(base, 0);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n        \n        result = DateUtils.addWeeks(base, 1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 12, 4, 3, 2, 1);\n        \n        result = DateUtils.addWeeks(base, -1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);      // july\n        assertDate(result, 2000, 5, 28, 4, 3, 2, 1);   // june\n    }",
        "begin_line": 329,
        "end_line": 345,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 330,col 9)-(line 330,col 42)",
            "(line 331,col 9)-(line 331,col 50)",
            "(line 332,col 9)-(line 332,col 36)",
            "(line 333,col 9)-(line 333,col 49)",
            "(line 334,col 9)-(line 334,col 51)",
            "(line 336,col 9)-(line 336,col 45)",
            "(line 337,col 9)-(line 337,col 36)",
            "(line 338,col 9)-(line 338,col 49)",
            "(line 339,col 9)-(line 339,col 52)",
            "(line 341,col 9)-(line 341,col 46)",
            "(line 342,col 9)-(line 342,col 36)",
            "(line 343,col 9)-(line 343,col 49)",
            "(line 344,col 9)-(line 344,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsTest.testAddDays()",
        "snippet": "    public void testAddDays() throws Exception {\n        Date base = new Date(MILLIS_TEST);\n        Date result = DateUtils.addDays(base, 0);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n        \n        result = DateUtils.addDays(base, 1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 6, 4, 3, 2, 1);\n        \n        result = DateUtils.addDays(base, -1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 4, 4, 3, 2, 1);\n    }",
        "begin_line": 348,
        "end_line": 364,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 349,col 9)-(line 349,col 42)",
            "(line 350,col 9)-(line 350,col 49)",
            "(line 351,col 9)-(line 351,col 36)",
            "(line 352,col 9)-(line 352,col 49)",
            "(line 353,col 9)-(line 353,col 51)",
            "(line 355,col 9)-(line 355,col 44)",
            "(line 356,col 9)-(line 356,col 36)",
            "(line 357,col 9)-(line 357,col 49)",
            "(line 358,col 9)-(line 358,col 51)",
            "(line 360,col 9)-(line 360,col 45)",
            "(line 361,col 9)-(line 361,col 36)",
            "(line 362,col 9)-(line 362,col 49)",
            "(line 363,col 9)-(line 363,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsTest.testAddHours()",
        "snippet": "    public void testAddHours() throws Exception {\n        Date base = new Date(MILLIS_TEST);\n        Date result = DateUtils.addHours(base, 0);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n        \n        result = DateUtils.addHours(base, 1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 5, 3, 2, 1);\n        \n        result = DateUtils.addHours(base, -1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 3, 3, 2, 1);\n    }",
        "begin_line": 367,
        "end_line": 383,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 368,col 9)-(line 368,col 42)",
            "(line 369,col 9)-(line 369,col 50)",
            "(line 370,col 9)-(line 370,col 36)",
            "(line 371,col 9)-(line 371,col 49)",
            "(line 372,col 9)-(line 372,col 51)",
            "(line 374,col 9)-(line 374,col 45)",
            "(line 375,col 9)-(line 375,col 36)",
            "(line 376,col 9)-(line 376,col 49)",
            "(line 377,col 9)-(line 377,col 51)",
            "(line 379,col 9)-(line 379,col 46)",
            "(line 380,col 9)-(line 380,col 36)",
            "(line 381,col 9)-(line 381,col 49)",
            "(line 382,col 9)-(line 382,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsTest.testAddMinutes()",
        "snippet": "    public void testAddMinutes() throws Exception {\n        Date base = new Date(MILLIS_TEST);\n        Date result = DateUtils.addMinutes(base, 0);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n        \n        result = DateUtils.addMinutes(base, 1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 4, 2, 1);\n        \n        result = DateUtils.addMinutes(base, -1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 2, 2, 1);\n    }",
        "begin_line": 386,
        "end_line": 402,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 387,col 9)-(line 387,col 42)",
            "(line 388,col 9)-(line 388,col 52)",
            "(line 389,col 9)-(line 389,col 36)",
            "(line 390,col 9)-(line 390,col 49)",
            "(line 391,col 9)-(line 391,col 51)",
            "(line 393,col 9)-(line 393,col 47)",
            "(line 394,col 9)-(line 394,col 36)",
            "(line 395,col 9)-(line 395,col 49)",
            "(line 396,col 9)-(line 396,col 51)",
            "(line 398,col 9)-(line 398,col 48)",
            "(line 399,col 9)-(line 399,col 36)",
            "(line 400,col 9)-(line 400,col 49)",
            "(line 401,col 9)-(line 401,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsTest.testAddSeconds()",
        "snippet": "    public void testAddSeconds() throws Exception {\n        Date base = new Date(MILLIS_TEST);\n        Date result = DateUtils.addSeconds(base, 0);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n        \n        result = DateUtils.addSeconds(base, 1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 3, 3, 1);\n        \n        result = DateUtils.addSeconds(base, -1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 3, 1, 1);\n    }",
        "begin_line": 405,
        "end_line": 421,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 406,col 9)-(line 406,col 42)",
            "(line 407,col 9)-(line 407,col 52)",
            "(line 408,col 9)-(line 408,col 36)",
            "(line 409,col 9)-(line 409,col 49)",
            "(line 410,col 9)-(line 410,col 51)",
            "(line 412,col 9)-(line 412,col 47)",
            "(line 413,col 9)-(line 413,col 36)",
            "(line 414,col 9)-(line 414,col 49)",
            "(line 415,col 9)-(line 415,col 51)",
            "(line 417,col 9)-(line 417,col 48)",
            "(line 418,col 9)-(line 418,col 36)",
            "(line 419,col 9)-(line 419,col 49)",
            "(line 420,col 9)-(line 420,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsTest.testAddMilliseconds()",
        "snippet": "    public void testAddMilliseconds() {}",
        "begin_line": 424,
        "end_line": 424,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsTest.testAddByField()",
        "snippet": "    public void testAddByField() {}",
        "begin_line": 445,
        "end_line": 445,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsTest.testSetYears()",
        "snippet": "\tpublic void testSetYears() throws Exception {\n\t\tDate base = new Date(MILLIS_TEST);\n\t\tDate result = DateUtils.setYears(base, 2000);\n\t\tassertNotSame(base, result);\n\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n\t\tassertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n\n\t\tresult = DateUtils.setYears(base, 2008);\n\t\tassertNotSame(base, result);\n\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n\t\tassertDate(result, 2008, 6, 5, 4, 3, 2, 1);\n\n\t\tresult = DateUtils.setYears(base, 2005);\n\t\tassertNotSame(base, result);\n\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n\t\tassertDate(result, 2005, 6, 5, 4, 3, 2, 1);\n\t}",
        "begin_line": 466,
        "end_line": 482,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 467,col 3)-(line 467,col 36)",
            "(line 468,col 3)-(line 468,col 47)",
            "(line 469,col 3)-(line 469,col 30)",
            "(line 470,col 3)-(line 470,col 43)",
            "(line 471,col 3)-(line 471,col 45)",
            "(line 473,col 3)-(line 473,col 42)",
            "(line 474,col 3)-(line 474,col 30)",
            "(line 475,col 3)-(line 475,col 43)",
            "(line 476,col 3)-(line 476,col 45)",
            "(line 478,col 3)-(line 478,col 42)",
            "(line 479,col 3)-(line 479,col 30)",
            "(line 480,col 3)-(line 480,col 43)",
            "(line 481,col 3)-(line 481,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsTest.testSetMonths()",
        "snippet": "\tpublic void testSetMonths() throws Exception {\n\t\tDate base = new Date(MILLIS_TEST);\n\t\tDate result = DateUtils.setMonths(base, 5);\n\t\tassertNotSame(base, result);\n\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n\t\tassertDate(result, 2000, 5, 5, 4, 3, 2, 1);\n\n\t\tresult = DateUtils.setMonths(base, 1);\n\t\tassertNotSame(base, result);\n\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n\t\tassertDate(result, 2000, 1, 5, 4, 3, 2, 1);\n\n\t\ttry {\n\t\t\tresult = DateUtils.setMonths(base, 12);\n\t\t\tfail(\"DateUtils.setMonths did not throw an expected IllegalArguementException.\");\n\t\t} catch (IllegalArgumentException e) {\n\n\t\t}\n\t}",
        "begin_line": 485,
        "end_line": 503,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 486,col 3)-(line 486,col 36)",
            "(line 487,col 3)-(line 487,col 45)",
            "(line 488,col 3)-(line 488,col 30)",
            "(line 489,col 3)-(line 489,col 43)",
            "(line 490,col 3)-(line 490,col 45)",
            "(line 492,col 3)-(line 492,col 40)",
            "(line 493,col 3)-(line 493,col 30)",
            "(line 494,col 3)-(line 494,col 43)",
            "(line 495,col 3)-(line 495,col 45)",
            "(line 497,col 3)-(line 502,col 3)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsTest.testSetDays()",
        "snippet": "\tpublic void testSetDays() throws Exception {\n\t\tDate base = new Date(MILLIS_TEST);\n\t\tDate result = DateUtils.setDays(base, 1);\n\t\tassertNotSame(base, result);\n\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n\t\tassertDate(result, 2000, 6, 1, 4, 3, 2, 1);\n\n\t\tresult = DateUtils.setDays(base, 29);\n\t\tassertNotSame(base, result);\n\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n\t\tassertDate(result, 2000, 6, 29, 4, 3, 2, 1);\n\n\t\ttry {\n\t\t\tresult = DateUtils.setDays(base, 32);\n\t\t\tfail(\"DateUtils.setDays did not throw an expected IllegalArguementException.\");\n\t\t} catch (IllegalArgumentException e) {\n\n\t\t}\n\t}",
        "begin_line": 506,
        "end_line": 524,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 507,col 3)-(line 507,col 36)",
            "(line 508,col 3)-(line 508,col 43)",
            "(line 509,col 3)-(line 509,col 30)",
            "(line 510,col 3)-(line 510,col 43)",
            "(line 511,col 3)-(line 511,col 45)",
            "(line 513,col 3)-(line 513,col 39)",
            "(line 514,col 3)-(line 514,col 30)",
            "(line 515,col 3)-(line 515,col 43)",
            "(line 516,col 3)-(line 516,col 46)",
            "(line 518,col 3)-(line 523,col 3)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsTest.testSetHours()",
        "snippet": "\tpublic void testSetHours() throws Exception {\n\t\tDate base = new Date(MILLIS_TEST);\n\t\tDate result = DateUtils.setHours(base, 0);\n\t\tassertNotSame(base, result);\n\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n\t\tassertDate(result, 2000, 6, 5, 0, 3, 2, 1);\n\n\t\tresult = DateUtils.setHours(base, 23);\n\t\tassertNotSame(base, result);\n\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n\t\tassertDate(result, 2000, 6, 5, 23, 3, 2, 1);\n\n\t\ttry {\n\t\t\tresult = DateUtils.setHours(base, 24);\n\t\t\tfail(\"DateUtils.setHours did not throw an expected IllegalArguementException.\");\n\t\t} catch (IllegalArgumentException e) {\n\n\t\t}\n\t}",
        "begin_line": 527,
        "end_line": 545,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 528,col 3)-(line 528,col 36)",
            "(line 529,col 3)-(line 529,col 44)",
            "(line 530,col 3)-(line 530,col 30)",
            "(line 531,col 3)-(line 531,col 43)",
            "(line 532,col 3)-(line 532,col 45)",
            "(line 534,col 3)-(line 534,col 40)",
            "(line 535,col 3)-(line 535,col 30)",
            "(line 536,col 3)-(line 536,col 43)",
            "(line 537,col 3)-(line 537,col 46)",
            "(line 539,col 3)-(line 544,col 3)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsTest.testSetMinutes()",
        "snippet": "\tpublic void testSetMinutes() throws Exception {\n\t\tDate base = new Date(MILLIS_TEST);\n\t\tDate result = DateUtils.setMinutes(base, 0);\n\t\tassertNotSame(base, result);\n\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n\t\tassertDate(result, 2000, 6, 5, 4, 0, 2, 1);\n\n\t\tresult = DateUtils.setMinutes(base, 59);\n\t\tassertNotSame(base, result);\n\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n\t\tassertDate(result, 2000, 6, 5, 4, 59, 2, 1);\n\n\t\ttry {\n\t\t\tresult = DateUtils.setMinutes(base, 60);\n\t\t\tfail(\"DateUtils.setMinutes did not throw an expected IllegalArguementException.\");\n\t\t} catch (IllegalArgumentException e) {\n\n\t\t}\n\t}",
        "begin_line": 548,
        "end_line": 566,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 549,col 3)-(line 549,col 36)",
            "(line 550,col 3)-(line 550,col 46)",
            "(line 551,col 3)-(line 551,col 30)",
            "(line 552,col 3)-(line 552,col 43)",
            "(line 553,col 3)-(line 553,col 45)",
            "(line 555,col 3)-(line 555,col 42)",
            "(line 556,col 3)-(line 556,col 30)",
            "(line 557,col 3)-(line 557,col 43)",
            "(line 558,col 3)-(line 558,col 46)",
            "(line 560,col 3)-(line 565,col 3)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsTest.testSetSeconds()",
        "snippet": "\tpublic void testSetSeconds() throws Exception {\n\t\tDate base = new Date(MILLIS_TEST);\n\t\tDate result = DateUtils.setSeconds(base, 0);\n\t\tassertNotSame(base, result);\n\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n\t\tassertDate(result, 2000, 6, 5, 4, 3, 0, 1);\n\n\t\tresult = DateUtils.setSeconds(base, 59);\n\t\tassertNotSame(base, result);\n\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n\t\tassertDate(result, 2000, 6, 5, 4, 3, 59, 1);\n\n\t\ttry {\n\t\t\tresult = DateUtils.setSeconds(base, 60);\n\t\t\tfail(\"DateUtils.setSeconds did not throw an expected IllegalArguementException.\");\n\t\t} catch (IllegalArgumentException e) {\n\n\t\t}\n\t}",
        "begin_line": 569,
        "end_line": 587,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 570,col 3)-(line 570,col 36)",
            "(line 571,col 3)-(line 571,col 46)",
            "(line 572,col 3)-(line 572,col 30)",
            "(line 573,col 3)-(line 573,col 43)",
            "(line 574,col 3)-(line 574,col 45)",
            "(line 576,col 3)-(line 576,col 42)",
            "(line 577,col 3)-(line 577,col 30)",
            "(line 578,col 3)-(line 578,col 43)",
            "(line 579,col 3)-(line 579,col 46)",
            "(line 581,col 3)-(line 586,col 3)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsTest.testSetMilliseconds()",
        "snippet": "\tpublic void testSetMilliseconds() throws Exception {\n\t\tDate base = new Date(MILLIS_TEST);\n\t\tDate result = DateUtils.setMilliseconds(base, 0);\n\t\tassertNotSame(base, result);\n\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n\t\tassertDate(result, 2000, 6, 5, 4, 3, 2, 0);\n\n\t\tresult = DateUtils.setMilliseconds(base, 999);\n\t\tassertNotSame(base, result);\n\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n\t\tassertDate(result, 2000, 6, 5, 4, 3, 2, 999);\n\n\t\ttry {\n\t\t\tresult = DateUtils.setMilliseconds(base, 1000);\n\t\t\tfail(\"DateUtils.setMilliseconds did not throw an expected IllegalArguementException.\");\n\t\t} catch (IllegalArgumentException e) {\n\n\t\t}\n\t}",
        "begin_line": 590,
        "end_line": 608,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 591,col 3)-(line 591,col 36)",
            "(line 592,col 3)-(line 592,col 51)",
            "(line 593,col 3)-(line 593,col 30)",
            "(line 594,col 3)-(line 594,col 43)",
            "(line 595,col 3)-(line 595,col 45)",
            "(line 597,col 3)-(line 597,col 48)",
            "(line 598,col 3)-(line 598,col 30)",
            "(line 599,col 3)-(line 599,col 43)",
            "(line 600,col 3)-(line 600,col 47)",
            "(line 602,col 3)-(line 607,col 3)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsTest.assertDate(java.util.Date, int, int, int, int, int, int, int)",
        "snippet": "    private void assertDate(Date date, int year, int month, int day, int hour, int min, int sec, int mil) throws Exception {\n        GregorianCalendar cal = new GregorianCalendar();\n        cal.setTime(date);\n        assertEquals(year, cal.get(Calendar.YEAR));\n        assertEquals(month, cal.get(Calendar.MONTH));\n        assertEquals(day, cal.get(Calendar.DAY_OF_MONTH));\n        assertEquals(hour, cal.get(Calendar.HOUR_OF_DAY));\n        assertEquals(min, cal.get(Calendar.MINUTE));\n        assertEquals(sec, cal.get(Calendar.SECOND));\n        assertEquals(mil, cal.get(Calendar.MILLISECOND));\n    }",
        "begin_line": 611,
        "end_line": 621,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 612,col 9)-(line 612,col 56)",
            "(line 613,col 9)-(line 613,col 26)",
            "(line 614,col 9)-(line 614,col 51)",
            "(line 615,col 9)-(line 615,col 53)",
            "(line 616,col 9)-(line 616,col 58)",
            "(line 617,col 9)-(line 617,col 58)",
            "(line 618,col 9)-(line 618,col 52)",
            "(line 619,col 9)-(line 619,col 52)",
            "(line 620,col 9)-(line 620,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsTest.testRound()",
        "snippet": "    public void testRound() throws Exception {\n        // tests for public static Date round(Date date, int field)\n        assertEquals(\"round year-1 failed\",\n                dateParser.parse(\"January 1, 2002\"),\n                DateUtils.round(date1, Calendar.YEAR));\n        assertEquals(\"round year-2 failed\",\n                dateParser.parse(\"January 1, 2002\"),\n                DateUtils.round(date2, Calendar.YEAR));\n        assertEquals(\"round month-1 failed\",\n                dateParser.parse(\"February 1, 2002\"),\n                DateUtils.round(date1, Calendar.MONTH));\n        assertEquals(\"round month-2 failed\",\n                dateParser.parse(\"December 1, 2001\"),\n                DateUtils.round(date2, Calendar.MONTH));\n        assertEquals(\"round semimonth-0 failed\",\n                dateParser.parse(\"February 1, 2002\"),\n                DateUtils.round(date0, DateUtils.SEMI_MONTH));\n        assertEquals(\"round semimonth-1 failed\",\n                dateParser.parse(\"February 16, 2002\"),\n                DateUtils.round(date1, DateUtils.SEMI_MONTH));\n        assertEquals(\"round semimonth-2 failed\",\n                dateParser.parse(\"November 16, 2001\"),\n                DateUtils.round(date2, DateUtils.SEMI_MONTH));\n        \n        \n        assertEquals(\"round date-1 failed\",\n                dateParser.parse(\"February 13, 2002\"),\n                DateUtils.round(date1, Calendar.DATE));\n        assertEquals(\"round date-2 failed\",\n                dateParser.parse(\"November 18, 2001\"),\n                DateUtils.round(date2, Calendar.DATE));\n        assertEquals(\"round hour-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 13:00:00.000\"),\n                DateUtils.round(date1, Calendar.HOUR));\n        assertEquals(\"round hour-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:00:00.000\"),\n                DateUtils.round(date2, Calendar.HOUR));\n        assertEquals(\"round minute-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:35:00.000\"),\n                DateUtils.round(date1, Calendar.MINUTE));\n        assertEquals(\"round minute-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:00.000\"),\n                DateUtils.round(date2, Calendar.MINUTE));\n        assertEquals(\"round second-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"),\n                DateUtils.round(date1, Calendar.SECOND));\n        assertEquals(\"round second-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"),\n                DateUtils.round(date2, Calendar.SECOND));\n        assertEquals(\"truncate ampm-1 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.round(dateAmPm1, Calendar.AM_PM));\n        assertEquals(\"truncate ampm-2 failed\",\n                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n                DateUtils.round(dateAmPm2, Calendar.AM_PM));\n        assertEquals(\"truncate ampm-3 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.round(dateAmPm3, Calendar.AM_PM));\n        assertEquals(\"truncate ampm-4 failed\",\n                dateTimeParser.parse(\"February 4, 2002 12:00:00.000\"),\n                DateUtils.round(dateAmPm4, Calendar.AM_PM));\n\n        // tests for public static Date round(Object date, int field)\n        assertEquals(\"round year-1 failed\",\n                dateParser.parse(\"January 1, 2002\"),\n                DateUtils.round((Object) date1, Calendar.YEAR));\n        assertEquals(\"round year-2 failed\",\n                dateParser.parse(\"January 1, 2002\"),\n                DateUtils.round((Object) date2, Calendar.YEAR));\n        assertEquals(\"round month-1 failed\",\n                dateParser.parse(\"February 1, 2002\"),\n                DateUtils.round((Object) date1, Calendar.MONTH));\n        assertEquals(\"round month-2 failed\",\n                dateParser.parse(\"December 1, 2001\"),\n                DateUtils.round((Object) date2, Calendar.MONTH));\n        assertEquals(\"round semimonth-1 failed\",\n                dateParser.parse(\"February 16, 2002\"),\n                DateUtils.round((Object) date1, DateUtils.SEMI_MONTH));\n        assertEquals(\"round semimonth-2 failed\",\n                dateParser.parse(\"November 16, 2001\"),\n                DateUtils.round((Object) date2, DateUtils.SEMI_MONTH));\n        assertEquals(\"round date-1 failed\",\n                dateParser.parse(\"February 13, 2002\"),\n                DateUtils.round((Object) date1, Calendar.DATE));\n        assertEquals(\"round date-2 failed\",\n                dateParser.parse(\"November 18, 2001\"),\n                DateUtils.round((Object) date2, Calendar.DATE));\n        assertEquals(\"round hour-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 13:00:00.000\"),\n                DateUtils.round((Object) date1, Calendar.HOUR));\n        assertEquals(\"round hour-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:00:00.000\"),\n                DateUtils.round((Object) date2, Calendar.HOUR));\n        assertEquals(\"round minute-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:35:00.000\"),\n                DateUtils.round((Object) date1, Calendar.MINUTE));\n        assertEquals(\"round minute-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:00.000\"),\n                DateUtils.round((Object) date2, Calendar.MINUTE));\n        assertEquals(\"round second-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"),\n                DateUtils.round((Object) date1, Calendar.SECOND));\n        assertEquals(\"round second-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"),\n                DateUtils.round((Object) date2, Calendar.SECOND));\n        assertEquals(\"round calendar second-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"),\n                DateUtils.round((Object) cal1, Calendar.SECOND));\n        assertEquals(\"round calendar second-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"),\n                DateUtils.round((Object) cal2, Calendar.SECOND));\n        assertEquals(\"truncate ampm-1 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.round((Object) dateAmPm1, Calendar.AM_PM));\n        assertEquals(\"truncate ampm-2 failed\",\n                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n                DateUtils.round((Object) dateAmPm2, Calendar.AM_PM));\n        assertEquals(\"truncate ampm-3 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.round((Object) dateAmPm3, Calendar.AM_PM));\n        assertEquals(\"truncate ampm-4 failed\",\n                dateTimeParser.parse(\"February 4, 2002 12:00:00.000\"),\n                DateUtils.round((Object) dateAmPm4, Calendar.AM_PM));\n\n        try {\n            DateUtils.round((Date) null, Calendar.SECOND);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateUtils.round((Calendar) null, Calendar.SECOND);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateUtils.round((Object) null, Calendar.SECOND);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateUtils.round(\"\", Calendar.SECOND);\n            fail();\n        } catch (ClassCastException ex) {}\n        try {\n            DateUtils.round(date1, -9999);\n            fail();\n        } catch(IllegalArgumentException ex) {}\n\n        assertEquals(\"truncate ampm-1 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.round((Object) calAmPm1, Calendar.AM_PM));\n        assertEquals(\"truncate ampm-2 failed\",\n                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n                DateUtils.round((Object) calAmPm2, Calendar.AM_PM));\n        assertEquals(\"truncate ampm-3 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.round((Object) calAmPm3, Calendar.AM_PM));\n        assertEquals(\"truncate ampm-4 failed\",\n                dateTimeParser.parse(\"February 4, 2002 12:00:00.000\"),\n                DateUtils.round((Object) calAmPm4, Calendar.AM_PM));\n        \n        // Fix for http://issues.apache.org/bugzilla/show_bug.cgi?id=25560\n        // Test rounding across the beginning of daylight saving time\n        TimeZone.setDefault(zone);\n        dateTimeParser.setTimeZone(zone);\n        assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.round(date4, Calendar.DATE));\n        assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.round((Object) cal4, Calendar.DATE));\n        assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.round(date5, Calendar.DATE));\n        assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.round((Object) cal5, Calendar.DATE));\n        assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.round(date6, Calendar.DATE));\n        assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.round((Object) cal6, Calendar.DATE));\n        assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.round(date7, Calendar.DATE));\n        assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.round((Object) cal7, Calendar.DATE));\n        \n        assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 01:00:00.000\"),\n                DateUtils.round(date4, Calendar.HOUR_OF_DAY));\n        assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 01:00:00.000\"),\n                DateUtils.round((Object) cal4, Calendar.HOUR_OF_DAY));\n        if (SystemUtils.isJavaVersionAtLeast(1.4f)) {\n            assertEquals(\"round MET date across DST change-over\",\n                    dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n                    DateUtils.round(date5, Calendar.HOUR_OF_DAY));\n            assertEquals(\"round MET date across DST change-over\",\n                    dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n                    DateUtils.round((Object) cal5, Calendar.HOUR_OF_DAY));\n            assertEquals(\"round MET date across DST change-over\",\n                    dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n                    DateUtils.round(date6, Calendar.HOUR_OF_DAY));\n            assertEquals(\"round MET date across DST change-over\",\n                    dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n                    DateUtils.round((Object) cal6, Calendar.HOUR_OF_DAY));\n            assertEquals(\"round MET date across DST change-over\",\n                    dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"),\n                    DateUtils.round(date7, Calendar.HOUR_OF_DAY));\n            assertEquals(\"round MET date across DST change-over\",\n                    dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"),\n                    DateUtils.round((Object) cal7, Calendar.HOUR_OF_DAY));\n        } else {\n            this.warn(\"WARNING: Some date rounding tests not run since the current version is \" + SystemUtils.JAVA_VERSION);\n        }\n        TimeZone.setDefault(defaultZone);\n        dateTimeParser.setTimeZone(defaultZone);\n    }",
        "begin_line": 627,
        "end_line": 844,
        "comment": "\n     * Tests various values with the round method\n     ",
        "child_ranges": [
            "(line 629,col 9)-(line 631,col 55)",
            "(line 632,col 9)-(line 634,col 55)",
            "(line 635,col 9)-(line 637,col 56)",
            "(line 638,col 9)-(line 640,col 56)",
            "(line 641,col 9)-(line 643,col 62)",
            "(line 644,col 9)-(line 646,col 62)",
            "(line 647,col 9)-(line 649,col 62)",
            "(line 652,col 9)-(line 654,col 55)",
            "(line 655,col 9)-(line 657,col 55)",
            "(line 658,col 9)-(line 660,col 55)",
            "(line 661,col 9)-(line 663,col 55)",
            "(line 664,col 9)-(line 666,col 57)",
            "(line 667,col 9)-(line 669,col 57)",
            "(line 670,col 9)-(line 672,col 57)",
            "(line 673,col 9)-(line 675,col 57)",
            "(line 676,col 9)-(line 678,col 60)",
            "(line 679,col 9)-(line 681,col 60)",
            "(line 682,col 9)-(line 684,col 60)",
            "(line 685,col 9)-(line 687,col 60)",
            "(line 690,col 9)-(line 692,col 64)",
            "(line 693,col 9)-(line 695,col 64)",
            "(line 696,col 9)-(line 698,col 65)",
            "(line 699,col 9)-(line 701,col 65)",
            "(line 702,col 9)-(line 704,col 71)",
            "(line 705,col 9)-(line 707,col 71)",
            "(line 708,col 9)-(line 710,col 64)",
            "(line 711,col 9)-(line 713,col 64)",
            "(line 714,col 9)-(line 716,col 64)",
            "(line 717,col 9)-(line 719,col 64)",
            "(line 720,col 9)-(line 722,col 66)",
            "(line 723,col 9)-(line 725,col 66)",
            "(line 726,col 9)-(line 728,col 66)",
            "(line 729,col 9)-(line 731,col 66)",
            "(line 732,col 9)-(line 734,col 65)",
            "(line 735,col 9)-(line 737,col 65)",
            "(line 738,col 9)-(line 740,col 69)",
            "(line 741,col 9)-(line 743,col 69)",
            "(line 744,col 9)-(line 746,col 69)",
            "(line 747,col 9)-(line 749,col 69)",
            "(line 751,col 9)-(line 754,col 48)",
            "(line 755,col 9)-(line 758,col 48)",
            "(line 759,col 9)-(line 762,col 48)",
            "(line 763,col 9)-(line 766,col 42)",
            "(line 767,col 9)-(line 770,col 47)",
            "(line 772,col 9)-(line 774,col 68)",
            "(line 775,col 9)-(line 777,col 68)",
            "(line 778,col 9)-(line 780,col 68)",
            "(line 781,col 9)-(line 783,col 68)",
            "(line 787,col 9)-(line 787,col 34)",
            "(line 788,col 9)-(line 788,col 41)",
            "(line 789,col 9)-(line 791,col 55)",
            "(line 792,col 9)-(line 794,col 63)",
            "(line 795,col 9)-(line 797,col 55)",
            "(line 798,col 9)-(line 800,col 63)",
            "(line 801,col 9)-(line 803,col 55)",
            "(line 804,col 9)-(line 806,col 63)",
            "(line 807,col 9)-(line 809,col 55)",
            "(line 810,col 9)-(line 812,col 63)",
            "(line 814,col 9)-(line 816,col 62)",
            "(line 817,col 9)-(line 819,col 70)",
            "(line 820,col 9)-(line 841,col 9)",
            "(line 842,col 9)-(line 842,col 41)",
            "(line 843,col 9)-(line 843,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsTest.testRoundLang346()",
        "snippet": "    public void testRoundLang346() throws Exception\n    {\n        TimeZone.setDefault(defaultZone);\n        dateTimeParser.setTimeZone(defaultZone);\n        Calendar testCalendar = Calendar.getInstance();\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        Date date = testCalendar.getTime();\n        assertEquals(\"Minute Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:09:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        date = testCalendar.getTime();\n        assertEquals(\"Minute No Round Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        testCalendar.set(Calendar.MILLISECOND, 600);\n        date = testCalendar.getTime();\n\n        assertEquals(\"Second Round Up with 600 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:51.000\"),\n                     DateUtils.round(date, Calendar.SECOND));\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        testCalendar.set(Calendar.MILLISECOND, 200);\n        date = testCalendar.getTime();\n        assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:50.000\"),\n                     DateUtils.round(date, Calendar.SECOND));\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        testCalendar.set(Calendar.MILLISECOND, 600);\n        date = testCalendar.getTime();\n        assertEquals(\"Second Round Up with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:21.000\"),\n                     DateUtils.round(date, Calendar.SECOND));\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        testCalendar.set(Calendar.MILLISECOND, 200);\n        date = testCalendar.getTime();\n        assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:20.000\"),\n                     DateUtils.round(date, Calendar.SECOND));\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        date = testCalendar.getTime();\n        assertEquals(\"Hour Round Down Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));\n\n        testCalendar.set(2007, 6, 2, 8, 31, 50);\n        date = testCalendar.getTime();\n        assertEquals(\"Hour Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 09:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));\n    }",
        "begin_line": 850,
        "end_line": 907,
        "comment": "\n     * Tests the Changes Made by LANG-346 to the DateUtils.modify() private method invoked\n     * by DateUtils.round().\n     ",
        "child_ranges": [
            "(line 852,col 9)-(line 852,col 41)",
            "(line 853,col 9)-(line 853,col 48)",
            "(line 854,col 9)-(line 854,col 55)",
            "(line 855,col 9)-(line 855,col 47)",
            "(line 856,col 9)-(line 856,col 43)",
            "(line 857,col 9)-(line 859,col 61)",
            "(line 861,col 9)-(line 861,col 47)",
            "(line 862,col 9)-(line 862,col 38)",
            "(line 863,col 9)-(line 865,col 61)",
            "(line 867,col 9)-(line 867,col 47)",
            "(line 868,col 9)-(line 868,col 52)",
            "(line 869,col 9)-(line 869,col 38)",
            "(line 871,col 9)-(line 873,col 61)",
            "(line 875,col 9)-(line 875,col 47)",
            "(line 876,col 9)-(line 876,col 52)",
            "(line 877,col 9)-(line 877,col 38)",
            "(line 878,col 9)-(line 880,col 61)",
            "(line 882,col 9)-(line 882,col 47)",
            "(line 883,col 9)-(line 883,col 52)",
            "(line 884,col 9)-(line 884,col 38)",
            "(line 885,col 9)-(line 887,col 61)",
            "(line 889,col 9)-(line 889,col 47)",
            "(line 890,col 9)-(line 890,col 52)",
            "(line 891,col 9)-(line 891,col 38)",
            "(line 892,col 9)-(line 894,col 61)",
            "(line 896,col 9)-(line 896,col 47)",
            "(line 897,col 9)-(line 897,col 38)",
            "(line 898,col 9)-(line 900,col 59)",
            "(line 902,col 9)-(line 902,col 48)",
            "(line 903,col 9)-(line 903,col 38)",
            "(line 904,col 9)-(line 906,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsTest.testTruncate()",
        "snippet": "    public void testTruncate() throws Exception {\n        // tests public static Date truncate(Date date, int field)\n        assertEquals(\"truncate year-1 failed\",\n                dateParser.parse(\"January 1, 2002\"),\n                DateUtils.truncate(date1, Calendar.YEAR));\n        assertEquals(\"truncate year-2 failed\",\n                dateParser.parse(\"January 1, 2001\"),\n                DateUtils.truncate(date2, Calendar.YEAR));\n        assertEquals(\"truncate month-1 failed\",\n                dateParser.parse(\"February 1, 2002\"),\n                DateUtils.truncate(date1, Calendar.MONTH));\n        assertEquals(\"truncate month-2 failed\",\n                dateParser.parse(\"November 1, 2001\"),\n                DateUtils.truncate(date2, Calendar.MONTH));\n        assertEquals(\"truncate semimonth-1 failed\",\n                dateParser.parse(\"February 1, 2002\"),\n                DateUtils.truncate(date1, DateUtils.SEMI_MONTH));\n        assertEquals(\"truncate semimonth-2 failed\",\n                dateParser.parse(\"November 16, 2001\"),\n                DateUtils.truncate(date2, DateUtils.SEMI_MONTH));\n        assertEquals(\"truncate date-1 failed\",\n                dateParser.parse(\"February 12, 2002\"),\n                DateUtils.truncate(date1, Calendar.DATE));\n        assertEquals(\"truncate date-2 failed\",\n                dateParser.parse(\"November 18, 2001\"),\n                DateUtils.truncate(date2, Calendar.DATE));\n        assertEquals(\"truncate hour-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:00:00.000\"),\n                DateUtils.truncate(date1, Calendar.HOUR));\n        assertEquals(\"truncate hour-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:00:00.000\"),\n                DateUtils.truncate(date2, Calendar.HOUR));\n        assertEquals(\"truncate minute-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:00.000\"),\n                DateUtils.truncate(date1, Calendar.MINUTE));\n        assertEquals(\"truncate minute-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:00.000\"),\n                DateUtils.truncate(date2, Calendar.MINUTE));\n        assertEquals(\"truncate second-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:56.000\"),\n                DateUtils.truncate(date1, Calendar.SECOND));\n        assertEquals(\"truncate second-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"),\n                DateUtils.truncate(date2, Calendar.SECOND));\n        assertEquals(\"truncate ampm-1 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.truncate(dateAmPm1, Calendar.AM_PM));\n        assertEquals(\"truncate ampm-2 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.truncate(dateAmPm2, Calendar.AM_PM));\n        assertEquals(\"truncate ampm-3 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.truncate(dateAmPm3, Calendar.AM_PM));\n        assertEquals(\"truncate ampm-4 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.truncate(dateAmPm4, Calendar.AM_PM));\n\n        // tests public static Date truncate(Object date, int field)\n        assertEquals(\"truncate year-1 failed\",\n                dateParser.parse(\"January 1, 2002\"),\n                DateUtils.truncate((Object) date1, Calendar.YEAR));\n        assertEquals(\"truncate year-2 failed\",\n                dateParser.parse(\"January 1, 2001\"),\n                DateUtils.truncate((Object) date2, Calendar.YEAR));\n        assertEquals(\"truncate month-1 failed\",\n                dateParser.parse(\"February 1, 2002\"),\n                DateUtils.truncate((Object) date1, Calendar.MONTH));\n        assertEquals(\"truncate month-2 failed\",\n                dateParser.parse(\"November 1, 2001\"),\n                DateUtils.truncate((Object) date2, Calendar.MONTH));\n        assertEquals(\"truncate semimonth-1 failed\",\n                dateParser.parse(\"February 1, 2002\"),\n                DateUtils.truncate((Object) date1, DateUtils.SEMI_MONTH));\n        assertEquals(\"truncate semimonth-2 failed\",\n                dateParser.parse(\"November 16, 2001\"),\n                DateUtils.truncate((Object) date2, DateUtils.SEMI_MONTH));\n        assertEquals(\"truncate date-1 failed\",\n                dateParser.parse(\"February 12, 2002\"),\n                DateUtils.truncate((Object) date1, Calendar.DATE));\n        assertEquals(\"truncate date-2 failed\",\n                dateParser.parse(\"November 18, 2001\"),\n                DateUtils.truncate((Object) date2, Calendar.DATE));\n        assertEquals(\"truncate hour-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:00:00.000\"),\n                DateUtils.truncate((Object) date1, Calendar.HOUR));\n        assertEquals(\"truncate hour-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:00:00.000\"),\n                DateUtils.truncate((Object) date2, Calendar.HOUR));\n        assertEquals(\"truncate minute-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:00.000\"),\n                DateUtils.truncate((Object) date1, Calendar.MINUTE));\n        assertEquals(\"truncate minute-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:00.000\"),\n                DateUtils.truncate((Object) date2, Calendar.MINUTE));\n        assertEquals(\"truncate second-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:56.000\"),\n                DateUtils.truncate((Object) date1, Calendar.SECOND));\n        assertEquals(\"truncate second-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"),\n                DateUtils.truncate((Object) date2, Calendar.SECOND));\n        assertEquals(\"truncate ampm-1 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.truncate((Object) dateAmPm1, Calendar.AM_PM));\n        assertEquals(\"truncate ampm-2 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.truncate((Object) dateAmPm2, Calendar.AM_PM));\n        assertEquals(\"truncate ampm-3 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.truncate((Object) dateAmPm3, Calendar.AM_PM));\n        assertEquals(\"truncate ampm-4 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.truncate((Object) dateAmPm4, Calendar.AM_PM));\n        \n        assertEquals(\"truncate calendar second-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:56.000\"),\n                DateUtils.truncate((Object) cal1, Calendar.SECOND));\n        assertEquals(\"truncate calendar second-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"),\n                DateUtils.truncate((Object) cal2, Calendar.SECOND));\n        \n        assertEquals(\"truncate ampm-1 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.truncate((Object) calAmPm1, Calendar.AM_PM));\n        assertEquals(\"truncate ampm-2 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.truncate((Object) calAmPm2, Calendar.AM_PM));\n        assertEquals(\"truncate ampm-3 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.truncate((Object) calAmPm3, Calendar.AM_PM));\n        assertEquals(\"truncate ampm-4 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.truncate((Object) calAmPm4, Calendar.AM_PM));\n        \n        try {\n            DateUtils.truncate((Date) null, Calendar.SECOND);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateUtils.truncate((Calendar) null, Calendar.SECOND);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateUtils.truncate((Object) null, Calendar.SECOND);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateUtils.truncate(\"\", Calendar.SECOND);\n            fail();\n        } catch (ClassCastException ex) {}\n\n        // Fix for http://issues.apache.org/bugzilla/show_bug.cgi?id=25560\n        // Test truncate across beginning of daylight saving time\n        TimeZone.setDefault(zone);\n        dateTimeParser.setTimeZone(zone);\n        assertEquals(\"truncate MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.truncate(date3, Calendar.DATE));\n        assertEquals(\"truncate MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.truncate((Object) cal3, Calendar.DATE));\n        // Test truncate across end of daylight saving time\n        assertEquals(\"truncate MET date across DST change-over\",\n                dateTimeParser.parse(\"October 26, 2003 00:00:00.000\"),\n                DateUtils.truncate(date8, Calendar.DATE));\n        assertEquals(\"truncate MET date across DST change-over\",\n                dateTimeParser.parse(\"October 26, 2003 00:00:00.000\"),\n                DateUtils.truncate((Object) cal8, Calendar.DATE));\n        TimeZone.setDefault(defaultZone);\n        dateTimeParser.setTimeZone(defaultZone);\n        \n        // Bug 31395, large dates\n        Date endOfTime = new Date(Long.MAX_VALUE); // fyi: Sun Aug 17 07:12:55 CET 292278994 -- 807 millis\n        GregorianCalendar endCal = new GregorianCalendar();\n        endCal.setTime(endOfTime);\n        try {\n            DateUtils.truncate(endCal, Calendar.DATE);\n            fail();\n        } catch (ArithmeticException ex) {}\n        endCal.set(Calendar.YEAR, 280000001);\n        try {\n            DateUtils.truncate(endCal, Calendar.DATE);\n            fail();\n        } catch (ArithmeticException ex) {}\n        endCal.set(Calendar.YEAR, 280000000);\n        Calendar cal = DateUtils.truncate(endCal, Calendar.DATE);\n        assertEquals(0, cal.get(Calendar.HOUR));\n    }",
        "begin_line": 912,
        "end_line": 1098,
        "comment": "\n     * Tests various values with the trunc method\n     ",
        "child_ranges": [
            "(line 914,col 9)-(line 916,col 58)",
            "(line 917,col 9)-(line 919,col 58)",
            "(line 920,col 9)-(line 922,col 59)",
            "(line 923,col 9)-(line 925,col 59)",
            "(line 926,col 9)-(line 928,col 65)",
            "(line 929,col 9)-(line 931,col 65)",
            "(line 932,col 9)-(line 934,col 58)",
            "(line 935,col 9)-(line 937,col 58)",
            "(line 938,col 9)-(line 940,col 58)",
            "(line 941,col 9)-(line 943,col 58)",
            "(line 944,col 9)-(line 946,col 60)",
            "(line 947,col 9)-(line 949,col 60)",
            "(line 950,col 9)-(line 952,col 60)",
            "(line 953,col 9)-(line 955,col 60)",
            "(line 956,col 9)-(line 958,col 63)",
            "(line 959,col 9)-(line 961,col 63)",
            "(line 962,col 9)-(line 964,col 63)",
            "(line 965,col 9)-(line 967,col 63)",
            "(line 970,col 9)-(line 972,col 67)",
            "(line 973,col 9)-(line 975,col 67)",
            "(line 976,col 9)-(line 978,col 68)",
            "(line 979,col 9)-(line 981,col 68)",
            "(line 982,col 9)-(line 984,col 74)",
            "(line 985,col 9)-(line 987,col 74)",
            "(line 988,col 9)-(line 990,col 67)",
            "(line 991,col 9)-(line 993,col 67)",
            "(line 994,col 9)-(line 996,col 67)",
            "(line 997,col 9)-(line 999,col 67)",
            "(line 1000,col 9)-(line 1002,col 69)",
            "(line 1003,col 9)-(line 1005,col 69)",
            "(line 1006,col 9)-(line 1008,col 69)",
            "(line 1009,col 9)-(line 1011,col 69)",
            "(line 1012,col 9)-(line 1014,col 72)",
            "(line 1015,col 9)-(line 1017,col 72)",
            "(line 1018,col 9)-(line 1020,col 72)",
            "(line 1021,col 9)-(line 1023,col 72)",
            "(line 1025,col 9)-(line 1027,col 68)",
            "(line 1028,col 9)-(line 1030,col 68)",
            "(line 1032,col 9)-(line 1034,col 71)",
            "(line 1035,col 9)-(line 1037,col 71)",
            "(line 1038,col 9)-(line 1040,col 71)",
            "(line 1041,col 9)-(line 1043,col 71)",
            "(line 1045,col 9)-(line 1048,col 48)",
            "(line 1049,col 9)-(line 1052,col 48)",
            "(line 1053,col 9)-(line 1056,col 48)",
            "(line 1057,col 9)-(line 1060,col 42)",
            "(line 1064,col 9)-(line 1064,col 34)",
            "(line 1065,col 9)-(line 1065,col 41)",
            "(line 1066,col 9)-(line 1068,col 58)",
            "(line 1069,col 9)-(line 1071,col 66)",
            "(line 1073,col 9)-(line 1075,col 58)",
            "(line 1076,col 9)-(line 1078,col 66)",
            "(line 1079,col 9)-(line 1079,col 41)",
            "(line 1080,col 9)-(line 1080,col 48)",
            "(line 1083,col 9)-(line 1083,col 50)",
            "(line 1084,col 9)-(line 1084,col 59)",
            "(line 1085,col 9)-(line 1085,col 34)",
            "(line 1086,col 9)-(line 1089,col 43)",
            "(line 1090,col 9)-(line 1090,col 45)",
            "(line 1091,col 9)-(line 1094,col 43)",
            "(line 1095,col 9)-(line 1095,col 45)",
            "(line 1096,col 9)-(line 1096,col 65)",
            "(line 1097,col 9)-(line 1097,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsTest.testTruncateLang59()",
        "snippet": "    public void testTruncateLang59() throws Exception {\n        if (!SystemUtils.isJavaVersionAtLeast(1.4f)) {\n            this.warn(\"WARNING: Test for LANG-59 not run since the current version is \" + SystemUtils.JAVA_VERSION);\n            return;\n        }\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));\n        assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));\n        assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));\n        assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));\n        assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);\n\n        // ---------- Test Truncate ----------\n        assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));\n\n        assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));\n\n        assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));\n\n        assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));\n\n        assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));\n\n        assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));\n\n\n        // ---------- Test Round (down) ----------\n        assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));\n\n        assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));\n\n        assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));\n\n        assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));\n\n        assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));\n\n        assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }",
        "begin_line": 1105,
        "end_line": 1177,
        "comment": "\n     * Tests for LANG-59\n     *\n     * see http://issues.apache.org/jira/browse/LANG-59\n     ",
        "child_ranges": [
            "(line 1106,col 9)-(line 1109,col 9)",
            "(line 1112,col 9)-(line 1112,col 59)",
            "(line 1113,col 9)-(line 1113,col 37)",
            "(line 1114,col 9)-(line 1114,col 78)",
            "(line 1115,col 9)-(line 1115,col 36)",
            "(line 1117,col 9)-(line 1117,col 52)",
            "(line 1119,col 9)-(line 1119,col 85)",
            "(line 1120,col 9)-(line 1120,col 84)",
            "(line 1121,col 9)-(line 1121,col 82)",
            "(line 1122,col 9)-(line 1122,col 79)",
            "(line 1124,col 9)-(line 1124,col 99)",
            "(line 1125,col 9)-(line 1125,col 102)",
            "(line 1126,col 9)-(line 1126,col 105)",
            "(line 1127,col 9)-(line 1127,col 108)",
            "(line 1128,col 9)-(line 1128,col 111)",
            "(line 1131,col 9)-(line 1131,col 47)",
            "(line 1132,col 9)-(line 1132,col 54)",
            "(line 1133,col 9)-(line 1133,col 61)",
            "(line 1134,col 9)-(line 1134,col 104)",
            "(line 1137,col 9)-(line 1138,col 102)",
            "(line 1140,col 9)-(line 1141,col 97)",
            "(line 1143,col 9)-(line 1144,col 97)",
            "(line 1146,col 9)-(line 1147,col 102)",
            "(line 1149,col 9)-(line 1150,col 95)",
            "(line 1152,col 9)-(line 1153,col 95)",
            "(line 1157,col 9)-(line 1158,col 99)",
            "(line 1160,col 9)-(line 1161,col 94)",
            "(line 1163,col 9)-(line 1164,col 94)",
            "(line 1166,col 9)-(line 1167,col 99)",
            "(line 1169,col 9)-(line 1170,col 92)",
            "(line 1172,col 9)-(line 1173,col 92)",
            "(line 1176,col 9)-(line 1176,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsTest.testIteratorEx()",
        "snippet": "    public void testIteratorEx() throws Exception {\n        try {\n            DateUtils.iterator(Calendar.getInstance(), -9999);\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateUtils.iterator((Date) null, DateUtils.RANGE_WEEK_CENTER);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateUtils.iterator((Calendar) null, DateUtils.RANGE_WEEK_CENTER);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateUtils.iterator((Object) null, DateUtils.RANGE_WEEK_CENTER);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateUtils.iterator(\"\", DateUtils.RANGE_WEEK_CENTER);\n            fail();\n        } catch (ClassCastException ex) {}\n    }",
        "begin_line": 1182,
        "end_line": 1202,
        "comment": "\n     * Tests the iterator exceptions\n     ",
        "child_ranges": [
            "(line 1183,col 9)-(line 1185,col 48)",
            "(line 1186,col 9)-(line 1189,col 48)",
            "(line 1190,col 9)-(line 1193,col 48)",
            "(line 1194,col 9)-(line 1197,col 48)",
            "(line 1198,col 9)-(line 1201,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsTest.testWeekIterator()",
        "snippet": "    public void testWeekIterator() throws Exception {\n        Calendar now = Calendar.getInstance();\n        for (int i = 0; i< 7; i++) {\n            Calendar today = DateUtils.truncate(now, Calendar.DATE);\n            Calendar sunday = DateUtils.truncate(now, Calendar.DATE);\n            sunday.add(Calendar.DATE, 1 - sunday.get(Calendar.DAY_OF_WEEK));\n            Calendar monday = DateUtils.truncate(now, Calendar.DATE);\n            if (monday.get(Calendar.DAY_OF_WEEK) == 1) {\n                //This is sunday... roll back 6 days\n                monday.add(Calendar.DATE, -6);\n            } else {\n                monday.add(Calendar.DATE, 2 - monday.get(Calendar.DAY_OF_WEEK));\n            }\n            Calendar centered = DateUtils.truncate(now, Calendar.DATE);\n            centered.add(Calendar.DATE, -3);\n            \n            Iterator it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_SUNDAY);\n            assertWeekIterator(it, sunday);\n            it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_MONDAY);\n            assertWeekIterator(it, monday);\n            it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_RELATIVE);\n            assertWeekIterator(it, today);\n            it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER);\n            assertWeekIterator(it, centered);\n            \n            it = DateUtils.iterator((Object) now, DateUtils.RANGE_WEEK_CENTER);\n            assertWeekIterator(it, centered);\n            it = DateUtils.iterator((Object) now.getTime(), DateUtils.RANGE_WEEK_CENTER);\n            assertWeekIterator(it, centered);\n            try {\n                it.next();\n                fail();\n            } catch (NoSuchElementException ex) {}\n            it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER);\n            it.next();\n            try {\n                it.remove();\n            } catch( UnsupportedOperationException ex) {}\n            \n            now.add(Calendar.DATE,1);\n        }\n    }",
        "begin_line": 1207,
        "end_line": 1248,
        "comment": "\n     * Tests the calendar iterator for week ranges\n     ",
        "child_ranges": [
            "(line 1208,col 9)-(line 1208,col 46)",
            "(line 1209,col 9)-(line 1247,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsTest.testMonthIterator()",
        "snippet": "    public void testMonthIterator() throws Exception {\n        Iterator it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_SUNDAY);\n        assertWeekIterator(it,\n                dateParser.parse(\"January 27, 2002\"),\n                dateParser.parse(\"March 2, 2002\"));\n\n        it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_MONDAY);\n        assertWeekIterator(it,\n                dateParser.parse(\"January 28, 2002\"),\n                dateParser.parse(\"March 3, 2002\"));\n\n        it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_SUNDAY);\n        assertWeekIterator(it,\n                dateParser.parse(\"October 28, 2001\"),\n                dateParser.parse(\"December 1, 2001\"));\n\n        it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_MONDAY);\n        assertWeekIterator(it,\n                dateParser.parse(\"October 29, 2001\"),\n                dateParser.parse(\"December 2, 2001\"));\n    }",
        "begin_line": 1253,
        "end_line": 1273,
        "comment": "\n     * Tests the calendar iterator for month-based ranges\n     ",
        "child_ranges": [
            "(line 1254,col 9)-(line 1254,col 78)",
            "(line 1255,col 9)-(line 1257,col 51)",
            "(line 1259,col 9)-(line 1259,col 69)",
            "(line 1260,col 9)-(line 1262,col 51)",
            "(line 1264,col 9)-(line 1264,col 69)",
            "(line 1265,col 9)-(line 1267,col 54)",
            "(line 1269,col 9)-(line 1269,col 69)",
            "(line 1270,col 9)-(line 1272,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsTest.assertWeekIterator(java.util.Iterator, java.util.Calendar)",
        "snippet": "    private static void assertWeekIterator(Iterator it, Calendar start) {\n        Calendar end = (Calendar) start.clone();\n        end.add(Calendar.DATE, 6);\n\n        assertWeekIterator(it, start, end);\n    }",
        "begin_line": 1279,
        "end_line": 1284,
        "comment": "\n     * This checks that this is a 7 element iterator of Calendar objects\n     * that are dates (no time), and exactly 1 day spaced after each other.\n     ",
        "child_ranges": [
            "(line 1280,col 9)-(line 1280,col 48)",
            "(line 1281,col 9)-(line 1281,col 34)",
            "(line 1283,col 9)-(line 1283,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsTest.assertWeekIterator(java.util.Iterator, java.util.Date, java.util.Date)",
        "snippet": "    private static void assertWeekIterator(Iterator it, Date start, Date end) {\n        Calendar calStart = Calendar.getInstance();\n        calStart.setTime(start);\n        Calendar calEnd = Calendar.getInstance();\n        calEnd.setTime(end);\n\n        assertWeekIterator(it, calStart, calEnd);\n    }",
        "begin_line": 1289,
        "end_line": 1296,
        "comment": "\n     * Convenience method for when working with Date objects\n     ",
        "child_ranges": [
            "(line 1290,col 9)-(line 1290,col 51)",
            "(line 1291,col 9)-(line 1291,col 32)",
            "(line 1292,col 9)-(line 1292,col 49)",
            "(line 1293,col 9)-(line 1293,col 28)",
            "(line 1295,col 9)-(line 1295,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsTest.assertWeekIterator(java.util.Iterator, java.util.Calendar, java.util.Calendar)",
        "snippet": "    private static void assertWeekIterator(Iterator it, Calendar start, Calendar end) {\n        Calendar cal = (Calendar) it.next();\n        assertEquals(\"\", start, cal, 0);\n        Calendar last = null;\n        int count = 1;\n        while (it.hasNext()) {\n            //Check this is just a date (no time component)\n            assertEquals(\"\", cal, DateUtils.truncate(cal, Calendar.DATE), 0);\n\n            last = cal;\n            cal = (Calendar) it.next();\n            count++;\n\n            //Check that this is one day more than the last date\n            last.add(Calendar.DATE, 1);\n            assertEquals(\"\", last, cal, 0);\n        }\n        if (count % 7 != 0) {\n            throw new AssertionFailedError(\"There were \" + count + \" days in this iterator\");\n        }\n        assertEquals(\"\", end, cal, 0);\n    }",
        "begin_line": 1303,
        "end_line": 1324,
        "comment": "\n     * This checks that this is a 7 divisble iterator of Calendar objects\n     * that are dates (no time), and exactly 1 day spaced after each other\n     * (in addition to the proper start and stop dates)\n     ",
        "child_ranges": [
            "(line 1304,col 9)-(line 1304,col 44)",
            "(line 1305,col 9)-(line 1305,col 40)",
            "(line 1306,col 9)-(line 1306,col 29)",
            "(line 1307,col 9)-(line 1307,col 22)",
            "(line 1308,col 9)-(line 1319,col 9)",
            "(line 1320,col 9)-(line 1322,col 9)",
            "(line 1323,col 9)-(line 1323,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsTest.assertEquals(java.lang.String, java.util.Calendar, java.util.Calendar, long)",
        "snippet": "    private static void assertEquals(String message, Calendar cal1, Calendar cal2, long delta) {\n        if (Math.abs(cal1.getTime().getTime() - cal2.getTime().getTime()) > delta) {\n            throw new AssertionFailedError(\n                    message + \" expected \" + cal1.getTime() + \" but got \" + cal2.getTime());\n        }\n    }",
        "begin_line": 1330,
        "end_line": 1335,
        "comment": "\n     * Used to check that Calendar objects are close enough\n     * delta is in milliseconds\n     ",
        "child_ranges": [
            "(line 1331,col 9)-(line 1334,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsTest.warn(java.lang.String)",
        "snippet": "    void warn(String msg) {\n        System.err.println(msg);\n    }",
        "begin_line": 1337,
        "end_line": 1339,
        "comment": "",
        "child_ranges": [
            "(line 1338,col 9)-(line 1338,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.StopWatchTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/StopWatchTest.java",
        "signature": "org.apache.commons.lang.time.StopWatchTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 33,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.StopWatchTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/StopWatchTest.java",
        "signature": "org.apache.commons.lang.time.StopWatchTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(StopWatchTest.class);\n        suite.setName(\"StopWatch Tests\");\n        return suite;\n    }",
        "begin_line": 37,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 61)",
            "(line 39,col 9)-(line 39,col 41)",
            "(line 40,col 9)-(line 40,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.StopWatchTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/StopWatchTest.java",
        "signature": "org.apache.commons.lang.time.StopWatchTest.StopWatchTest(java.lang.String)",
        "snippet": "    public StopWatchTest(String s) {\n        super(s);\n    }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 17)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.StopWatchTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/StopWatchTest.java",
        "signature": "org.apache.commons.lang.time.StopWatchTest.testStopWatchSimple()",
        "snippet": "    public void testStopWatchSimple(){\n        StopWatch watch = new StopWatch();\n        watch.start();\n            try {Thread.sleep(550);} catch (InterruptedException ex) {}\n        watch.stop();\n        long time = watch.getTime();\n        assertEquals(time, watch.getTime());\n        \n        assertTrue(time >= 500);\n        assertTrue(time < 700);\n        \n        watch.reset();\n        assertEquals(0, watch.getTime());\n    }",
        "begin_line": 48,
        "end_line": 61,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 42)",
            "(line 50,col 9)-(line 50,col 22)",
            "(line 51,col 13)-(line 51,col 71)",
            "(line 52,col 9)-(line 52,col 21)",
            "(line 53,col 9)-(line 53,col 36)",
            "(line 54,col 9)-(line 54,col 44)",
            "(line 56,col 9)-(line 56,col 32)",
            "(line 57,col 9)-(line 57,col 31)",
            "(line 59,col 9)-(line 59,col 22)",
            "(line 60,col 9)-(line 60,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.StopWatchTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/StopWatchTest.java",
        "signature": "org.apache.commons.lang.time.StopWatchTest.testStopWatchSimpleGet()",
        "snippet": "    public void testStopWatchSimpleGet(){\n        StopWatch watch = new StopWatch();\n        assertEquals(0, watch.getTime());\n        assertEquals(\"0:00:00.000\", watch.toString());\n        \n        watch.start();\n            try {Thread.sleep(500);} catch (InterruptedException ex) {}\n        assertTrue(watch.getTime() < 2000);\n    }",
        "begin_line": 63,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 42)",
            "(line 65,col 9)-(line 65,col 41)",
            "(line 66,col 9)-(line 66,col 54)",
            "(line 68,col 9)-(line 68,col 22)",
            "(line 69,col 13)-(line 69,col 71)",
            "(line 70,col 9)-(line 70,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.StopWatchTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/StopWatchTest.java",
        "signature": "org.apache.commons.lang.time.StopWatchTest.testStopWatchSplit()",
        "snippet": "    public void testStopWatchSplit(){\n        StopWatch watch = new StopWatch();\n        watch.start();\n            try {Thread.sleep(550);} catch (InterruptedException ex) {}\n        watch.split();\n        long splitTime = watch.getSplitTime();\n        String splitStr = watch.toSplitString();\n            try {Thread.sleep(550);} catch (InterruptedException ex) {}\n        watch.unsplit();\n            try {Thread.sleep(550);} catch (InterruptedException ex) {}\n        watch.stop();\n        long totalTime = watch.getTime();\n\n        assertEquals(\"Formatted split string not the correct length\", \n                     splitStr.length(), 11);\n        assertTrue(splitTime >= 500);\n        assertTrue(splitTime < 700);\n        assertTrue(totalTime >= 1500);\n        assertTrue(totalTime < 1900);\n    }",
        "begin_line": 73,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 42)",
            "(line 75,col 9)-(line 75,col 22)",
            "(line 76,col 13)-(line 76,col 71)",
            "(line 77,col 9)-(line 77,col 22)",
            "(line 78,col 9)-(line 78,col 46)",
            "(line 79,col 9)-(line 79,col 48)",
            "(line 80,col 13)-(line 80,col 71)",
            "(line 81,col 9)-(line 81,col 24)",
            "(line 82,col 13)-(line 82,col 71)",
            "(line 83,col 9)-(line 83,col 21)",
            "(line 84,col 9)-(line 84,col 41)",
            "(line 86,col 9)-(line 87,col 44)",
            "(line 88,col 9)-(line 88,col 37)",
            "(line 89,col 9)-(line 89,col 36)",
            "(line 90,col 9)-(line 90,col 38)",
            "(line 91,col 9)-(line 91,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.StopWatchTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/StopWatchTest.java",
        "signature": "org.apache.commons.lang.time.StopWatchTest.testStopWatchSuspend()",
        "snippet": "    public void testStopWatchSuspend(){\n        StopWatch watch = new StopWatch();\n        watch.start();\n            try {Thread.sleep(550);} catch (InterruptedException ex) {}\n        watch.suspend();\n        long suspendTime = watch.getTime();\n            try {Thread.sleep(550);} catch (InterruptedException ex) {}\n        watch.resume();\n            try {Thread.sleep(550);} catch (InterruptedException ex) {}\n        watch.stop();\n        long totalTime = watch.getTime();\n        \n        assertTrue(suspendTime >= 500);\n        assertTrue(suspendTime < 700);\n        assertTrue(totalTime >= 1000);\n        assertTrue(totalTime < 1300);\n    }",
        "begin_line": 94,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 42)",
            "(line 96,col 9)-(line 96,col 22)",
            "(line 97,col 13)-(line 97,col 71)",
            "(line 98,col 9)-(line 98,col 24)",
            "(line 99,col 9)-(line 99,col 43)",
            "(line 100,col 13)-(line 100,col 71)",
            "(line 101,col 9)-(line 101,col 23)",
            "(line 102,col 13)-(line 102,col 71)",
            "(line 103,col 9)-(line 103,col 21)",
            "(line 104,col 9)-(line 104,col 41)",
            "(line 106,col 9)-(line 106,col 39)",
            "(line 107,col 9)-(line 107,col 38)",
            "(line 108,col 9)-(line 108,col 38)",
            "(line 109,col 9)-(line 109,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.StopWatchTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/StopWatchTest.java",
        "signature": "org.apache.commons.lang.time.StopWatchTest.testLang315()",
        "snippet": "    public void testLang315() {\n        StopWatch watch = new StopWatch();\n        watch.start();\n            try {Thread.sleep(200);} catch (InterruptedException ex) {}\n        watch.suspend();\n        long suspendTime = watch.getTime();\n            try {Thread.sleep(200);} catch (InterruptedException ex) {}\n        watch.stop();\n        long totalTime = watch.getTime();\n        assertTrue( suspendTime == totalTime );\n    }",
        "begin_line": 112,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 42)",
            "(line 114,col 9)-(line 114,col 22)",
            "(line 115,col 13)-(line 115,col 71)",
            "(line 116,col 9)-(line 116,col 24)",
            "(line 117,col 9)-(line 117,col 43)",
            "(line 118,col 13)-(line 118,col 71)",
            "(line 119,col 9)-(line 119,col 21)",
            "(line 120,col 9)-(line 120,col 41)",
            "(line 121,col 9)-(line 121,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.StopWatchTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/StopWatchTest.java",
        "signature": "org.apache.commons.lang.time.StopWatchTest.testBadStates()",
        "snippet": "    public void testBadStates() {\n        StopWatch watch = new StopWatch();\n        try {\n            watch.stop();\n            fail(\"Calling stop on an unstarted StopWatch should throw an exception. \");\n        } catch(IllegalStateException ise) {\n            // expected\n        }\n\n        try {\n            watch.stop();\n            fail(\"Calling stop on an unstarted StopWatch should throw an exception. \");\n        } catch(IllegalStateException ise) {\n            // expected\n        }\n\n        try {\n            watch.suspend();\n            fail(\"Calling suspend on an unstarted StopWatch should throw an exception. \");\n        } catch(IllegalStateException ise) {\n            // expected\n        }\n\n        try {\n            watch.split();\n            fail(\"Calling split on a non-running StopWatch should throw an exception. \");\n        } catch(IllegalStateException ise) {\n            // expected\n        }\n\n        try {\n            watch.unsplit();\n            fail(\"Calling unsplit on an unsplit StopWatch should throw an exception. \");\n        } catch(IllegalStateException ise) {\n            // expected\n        }\n\n        try {\n            watch.resume();\n            fail(\"Calling resume on an unsuspended StopWatch should throw an exception. \");\n        } catch(IllegalStateException ise) {\n            // expected\n        }\n\n        watch.start();\n\n        try {\n            watch.start();\n            fail(\"Calling start on a started StopWatch should throw an exception. \");\n        } catch(IllegalStateException ise) {\n            // expected\n        }\n\n        try {\n            watch.unsplit();\n            fail(\"Calling unsplit on an unsplit StopWatch should throw an exception. \");\n        } catch(IllegalStateException ise) {\n            // expected\n        }\n\n        try {\n            watch.getSplitTime();\n            fail(\"Calling getSplitTime on an unsplit StopWatch should throw an exception. \");\n        } catch(IllegalStateException ise) {\n            // expected\n        }\n\n        try {\n            watch.resume();\n            fail(\"Calling resume on an unsuspended StopWatch should throw an exception. \");\n        } catch(IllegalStateException ise) {\n            // expected\n        }\n\n        watch.stop();\n\n        try {\n            watch.start();\n            fail(\"Calling start on a stopped StopWatch should throw an exception as it needs to be reset. \");\n        } catch(IllegalStateException ise) {\n            // expected\n        }\n    }",
        "begin_line": 125,
        "end_line": 207,
        "comment": " test bad states",
        "child_ranges": [
            "(line 126,col 9)-(line 126,col 42)",
            "(line 127,col 9)-(line 132,col 9)",
            "(line 134,col 9)-(line 139,col 9)",
            "(line 141,col 9)-(line 146,col 9)",
            "(line 148,col 9)-(line 153,col 9)",
            "(line 155,col 9)-(line 160,col 9)",
            "(line 162,col 9)-(line 167,col 9)",
            "(line 169,col 9)-(line 169,col 22)",
            "(line 171,col 9)-(line 176,col 9)",
            "(line 178,col 9)-(line 183,col 9)",
            "(line 185,col 9)-(line 190,col 9)",
            "(line 192,col 9)-(line 197,col 9)",
            "(line 199,col 9)-(line 199,col 21)",
            "(line 201,col 9)-(line 206,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.StopWatchTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/StopWatchTest.java",
        "signature": "org.apache.commons.lang.time.StopWatchTest.testGetStartTime()",
        "snippet": "    public void testGetStartTime() {\n        long beforeStopWatch = System.currentTimeMillis();\n        StopWatch watch = new StopWatch();\n        try {\n            watch.getStartTime();\n            fail(\"Calling getStartTime on an unstarted StopWatch should throw an exception\");\n        } catch (IllegalStateException expected) {\n            // expected\n        }\n        watch.start();\n        try {\n            watch.getStartTime();\n            Assert.assertTrue(watch.getStartTime() >= beforeStopWatch);\n        } catch (IllegalStateException ex) {\n            fail(\"Start time should be available: \" + ex.getMessage());\n        }\n        watch.reset();\n        try {\n            watch.getStartTime();\n            fail(\"Calling getStartTime on a reset, but unstarted StopWatch should throw an exception\");\n        } catch (IllegalStateException expected) {\n            // expected\n        }\n    }",
        "begin_line": 209,
        "end_line": 232,
        "comment": "",
        "child_ranges": [
            "(line 210,col 9)-(line 210,col 58)",
            "(line 211,col 9)-(line 211,col 42)",
            "(line 212,col 9)-(line 217,col 9)",
            "(line 218,col 9)-(line 218,col 22)",
            "(line 219,col 9)-(line 224,col 9)",
            "(line 225,col 9)-(line 225,col 22)",
            "(line 226,col 9)-(line 231,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.TimeTestSuite",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/TimeTestSuite.java",
        "signature": "org.apache.commons.lang.time.TimeTestSuite.TimeTestSuite(java.lang.String)",
        "snippet": "    public TimeTestSuite(String name) {\n        super(name);\n    }",
        "begin_line": 35,
        "end_line": 37,
        "comment": "\n     * Construct a new instance.\n     ",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.TimeTestSuite",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/TimeTestSuite.java",
        "signature": "org.apache.commons.lang.time.TimeTestSuite.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 42,
        "end_line": 44,
        "comment": "\n     * Command-line interface.\n     ",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.TimeTestSuite",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/TimeTestSuite.java",
        "signature": "org.apache.commons.lang.time.TimeTestSuite.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite();\n        suite.setName(\"Commons-Lang-Time Tests\");\n        suite.addTest(DateUtilsTest.suite());\n        suite.addTest(DateFormatUtilsTest.suite());\n        suite.addTest(DurationFormatUtilsTest.suite());\n        suite.addTest(StopWatchTest.suite());\n        suite.addTest(FastDateFormatTest.suite());\n        suite.addTest(DateUtilsFragmentTest.suite());\n        return suite;\n    }",
        "begin_line": 49,
        "end_line": 59,
        "comment": "\n     * Get the suite of tests\n     ",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 42)",
            "(line 51,col 9)-(line 51,col 49)",
            "(line 52,col 9)-(line 52,col 45)",
            "(line 53,col 9)-(line 53,col 51)",
            "(line 54,col 9)-(line 54,col 55)",
            "(line 55,col 9)-(line 55,col 45)",
            "(line 56,col 9)-(line 56,col 50)",
            "(line 57,col 9)-(line 57,col 53)",
            "(line 58,col 9)-(line 58,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateFormatUtilsTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateFormatUtilsTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(DateFormatUtilsTest.class);\n        suite.setName(\"DateFormatUtils Tests\");\n        return suite;\n    }",
        "begin_line": 45,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 67)",
            "(line 47,col 9)-(line 47,col 47)",
            "(line 48,col 9)-(line 48,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateFormatUtilsTest.DateFormatUtilsTest(java.lang.String)",
        "snippet": "    public DateFormatUtilsTest(String s) {\n        super(s);\n    }",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 17)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateFormatUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new DateFormatUtils());\n        Constructor[] cons = DateFormatUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(DateFormatUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(DateFormatUtils.class.getModifiers()));\n    }",
        "begin_line": 56,
        "end_line": 63,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 45)",
            "(line 58,col 9)-(line 58,col 77)",
            "(line 59,col 9)-(line 59,col 37)",
            "(line 60,col 9)-(line 60,col 70)",
            "(line 61,col 9)-(line 61,col 84)",
            "(line 62,col 9)-(line 62,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateFormatUtilsTest.testFormat()",
        "snippet": "    public void testFormat() {\n        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n        c.set(2005,0,1,12,0,0);\n        c.setTimeZone(TimeZone.getDefault());\n        StringBuffer buffer = new StringBuffer ();\n        int year = c.get(Calendar.YEAR);\n        int month = c.get(Calendar.MONTH) + 1;\n        int day = c.get(Calendar.DAY_OF_MONTH);\n        int hour = c.get(Calendar.HOUR_OF_DAY);\n        buffer.append (year);\n        buffer.append(month);\n        buffer.append(day);\n        buffer.append(hour);\n        assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), \"yyyyMdH\"));\n        \n        assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime().getTime(), \"yyyyMdH\"));\n        \n        assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), \"yyyyMdH\", Locale.US));\n        \n        assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime().getTime(), \"yyyyMdH\", Locale.US));\n    }",
        "begin_line": 66,
        "end_line": 86,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 71)",
            "(line 68,col 9)-(line 68,col 31)",
            "(line 69,col 9)-(line 69,col 45)",
            "(line 70,col 9)-(line 70,col 50)",
            "(line 71,col 9)-(line 71,col 40)",
            "(line 72,col 9)-(line 72,col 46)",
            "(line 73,col 9)-(line 73,col 47)",
            "(line 74,col 9)-(line 74,col 47)",
            "(line 75,col 9)-(line 75,col 29)",
            "(line 76,col 9)-(line 76,col 29)",
            "(line 77,col 9)-(line 77,col 27)",
            "(line 78,col 9)-(line 78,col 28)",
            "(line 79,col 9)-(line 79,col 88)",
            "(line 81,col 9)-(line 81,col 98)",
            "(line 83,col 9)-(line 83,col 99)",
            "(line 85,col 9)-(line 85,col 109)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateFormatUtilsTest.testFormatCalendar()",
        "snippet": "    public void testFormatCalendar() {\n        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n        c.set(2005,0,1,12,0,0);\n        c.setTimeZone(TimeZone.getDefault());\n        StringBuffer buffer = new StringBuffer ();\n        int year = c.get(Calendar.YEAR);\n        int month = c.get(Calendar.MONTH) + 1;\n        int day = c.get(Calendar.DAY_OF_MONTH);\n        int hour = c.get(Calendar.HOUR_OF_DAY);\n        buffer.append (year);\n        buffer.append(month);\n        buffer.append(day);\n        buffer.append(hour);\n        assertEquals(buffer.toString(), DateFormatUtils.format(c, \"yyyyMdH\"));\n        \n        assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), \"yyyyMdH\"));\n        \n        assertEquals(buffer.toString(), DateFormatUtils.format(c, \"yyyyMdH\", Locale.US));\n        \n        assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), \"yyyyMdH\", Locale.US));\n    }",
        "begin_line": 89,
        "end_line": 109,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 71)",
            "(line 91,col 9)-(line 91,col 31)",
            "(line 92,col 9)-(line 92,col 45)",
            "(line 93,col 9)-(line 93,col 50)",
            "(line 94,col 9)-(line 94,col 40)",
            "(line 95,col 9)-(line 95,col 46)",
            "(line 96,col 9)-(line 96,col 47)",
            "(line 97,col 9)-(line 97,col 47)",
            "(line 98,col 9)-(line 98,col 29)",
            "(line 99,col 9)-(line 99,col 29)",
            "(line 100,col 9)-(line 100,col 27)",
            "(line 101,col 9)-(line 101,col 28)",
            "(line 102,col 9)-(line 102,col 78)",
            "(line 104,col 9)-(line 104,col 88)",
            "(line 106,col 9)-(line 106,col 89)",
            "(line 108,col 9)-(line 108,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateFormatUtilsTest.testFormatUTC()",
        "snippet": "    public void testFormatUTC() {\n        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n        c.set(2005,0,1,12,0,0);\n        assertEquals (\"2005-01-01T12:00:00\", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern()));\n        \n        assertEquals (\"2005-01-01T12:00:00\", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern()));\n        \n        assertEquals (\"2005-01-01T12:00:00\", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US));\n        \n        assertEquals (\"2005-01-01T12:00:00\", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US));\n    }",
        "begin_line": 111,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 71)",
            "(line 113,col 9)-(line 113,col 31)",
            "(line 114,col 9)-(line 114,col 135)",
            "(line 116,col 9)-(line 116,col 145)",
            "(line 118,col 9)-(line 118,col 146)",
            "(line 120,col 9)-(line 120,col 156)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateFormatUtilsTest.testDateTimeISO()",
        "snippet": "    public void testDateTimeISO(){\n        TimeZone timeZone = TimeZone.getTimeZone(\"GMT-3\");\n        Calendar cal = Calendar.getInstance(timeZone);\n        cal.set(2002,1,23,9,11,12);\n        String text = DateFormatUtils.format(cal.getTime(), \n                        DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), timeZone);\n        assertEquals(\"2002-02-23T09:11:12\", text);\n        text = DateFormatUtils.format(cal.getTime().getTime(), \n                      DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), timeZone);\n        assertEquals(\"2002-02-23T09:11:12\", text);\n        text = DateFormatUtils.ISO_DATETIME_FORMAT.format(cal);\n        assertEquals(\"2002-02-23T09:11:12\", text);\n        \n        text = DateFormatUtils.format(cal.getTime(), \n                      DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), timeZone);\n        assertEquals(\"2002-02-23T09:11:12-03:00\", text);\n        text = DateFormatUtils.format(cal.getTime().getTime(), \n                      DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), timeZone);\n        assertEquals(\"2002-02-23T09:11:12-03:00\", text);\n        text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal);\n        assertEquals(\"2002-02-23T09:11:12-03:00\", text);\n    }",
        "begin_line": 123,
        "end_line": 144,
        "comment": "",
        "child_ranges": [
            "(line 124,col 9)-(line 124,col 58)",
            "(line 125,col 9)-(line 125,col 54)",
            "(line 126,col 9)-(line 126,col 35)",
            "(line 127,col 9)-(line 128,col 84)",
            "(line 129,col 9)-(line 129,col 50)",
            "(line 130,col 9)-(line 131,col 82)",
            "(line 132,col 9)-(line 132,col 50)",
            "(line 133,col 9)-(line 133,col 63)",
            "(line 134,col 9)-(line 134,col 50)",
            "(line 136,col 9)-(line 137,col 92)",
            "(line 138,col 9)-(line 138,col 56)",
            "(line 139,col 9)-(line 140,col 92)",
            "(line 141,col 9)-(line 141,col 56)",
            "(line 142,col 9)-(line 142,col 73)",
            "(line 143,col 9)-(line 143,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateFormatUtilsTest.testDateISO()",
        "snippet": "    public void testDateISO(){\n        TimeZone timeZone = TimeZone.getTimeZone(\"GMT-3\");\n        Calendar cal = Calendar.getInstance(timeZone);\n        cal.set(2002,1,23,10,11,12);\n        String text = DateFormatUtils.format(cal.getTime(), \n                        DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone);\n        assertEquals(\"2002-02-23\", text);\n        text = DateFormatUtils.format(cal.getTime().getTime(), \n                        DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone);\n        assertEquals(\"2002-02-23\", text);\n        text = DateFormatUtils.ISO_DATE_FORMAT.format(cal);\n        assertEquals(\"2002-02-23\", text);\n        \n        text = DateFormatUtils.format(cal.getTime(), \n                      DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone);\n        assertEquals(\"2002-02-23-03:00\", text);\n        text = DateFormatUtils.format(cal.getTime().getTime(), \n                      DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone);\n        assertEquals(\"2002-02-23-03:00\", text);\n        text = DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.format(cal);\n        assertEquals(\"2002-02-23-03:00\", text);\n    }",
        "begin_line": 146,
        "end_line": 167,
        "comment": "",
        "child_ranges": [
            "(line 147,col 9)-(line 147,col 58)",
            "(line 148,col 9)-(line 148,col 54)",
            "(line 149,col 9)-(line 149,col 36)",
            "(line 150,col 9)-(line 151,col 80)",
            "(line 152,col 9)-(line 152,col 41)",
            "(line 153,col 9)-(line 154,col 80)",
            "(line 155,col 9)-(line 155,col 41)",
            "(line 156,col 9)-(line 156,col 59)",
            "(line 157,col 9)-(line 157,col 41)",
            "(line 159,col 9)-(line 160,col 88)",
            "(line 161,col 9)-(line 161,col 47)",
            "(line 162,col 9)-(line 163,col 88)",
            "(line 164,col 9)-(line 164,col 47)",
            "(line 165,col 9)-(line 165,col 69)",
            "(line 166,col 9)-(line 166,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateFormatUtilsTest.testTimeISO()",
        "snippet": "    public void testTimeISO(){\n        TimeZone timeZone = TimeZone.getTimeZone(\"GMT-3\");\n        Calendar cal = Calendar.getInstance(timeZone);\n        cal.set(2002,1,23,10,11,12);\n        String text = DateFormatUtils.format(cal.getTime(), \n                        DateFormatUtils.ISO_TIME_FORMAT.getPattern(), timeZone);\n        assertEquals(\"T10:11:12\", text);\n        text = DateFormatUtils.format(cal.getTime().getTime(), \n                        DateFormatUtils.ISO_TIME_FORMAT.getPattern(), timeZone);\n        assertEquals(\"T10:11:12\", text);\n        text = DateFormatUtils.ISO_TIME_FORMAT.format(cal);\n        assertEquals(\"T10:11:12\", text);\n        \n        text = DateFormatUtils.format(cal.getTime(), \n                      DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern(), timeZone);\n        assertEquals(\"T10:11:12-03:00\", text);\n        text = DateFormatUtils.format(cal.getTime().getTime(), \n                      DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern(), timeZone);\n        assertEquals(\"T10:11:12-03:00\", text);\n        text = DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.format(cal);\n        assertEquals(\"T10:11:12-03:00\", text);\n    }",
        "begin_line": 169,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 170,col 9)-(line 170,col 58)",
            "(line 171,col 9)-(line 171,col 54)",
            "(line 172,col 9)-(line 172,col 36)",
            "(line 173,col 9)-(line 174,col 80)",
            "(line 175,col 9)-(line 175,col 40)",
            "(line 176,col 9)-(line 177,col 80)",
            "(line 178,col 9)-(line 178,col 40)",
            "(line 179,col 9)-(line 179,col 59)",
            "(line 180,col 9)-(line 180,col 40)",
            "(line 182,col 9)-(line 183,col 88)",
            "(line 184,col 9)-(line 184,col 46)",
            "(line 185,col 9)-(line 186,col 88)",
            "(line 187,col 9)-(line 187,col 46)",
            "(line 188,col 9)-(line 188,col 69)",
            "(line 189,col 9)-(line 189,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateFormatUtilsTest.testTimeNoTISO()",
        "snippet": "    public void testTimeNoTISO(){\n        TimeZone timeZone = TimeZone.getTimeZone(\"GMT-3\");\n        Calendar cal = Calendar.getInstance(timeZone);\n        cal.set(2002,1,23,10,11,12);\n        String text = DateFormatUtils.format(cal.getTime(), \n                        DateFormatUtils.ISO_TIME_NO_T_FORMAT.getPattern(), timeZone);\n        assertEquals(\"10:11:12\", text);\n        text = DateFormatUtils.format(cal.getTime().getTime(), \n                        DateFormatUtils.ISO_TIME_NO_T_FORMAT.getPattern(), timeZone);\n        assertEquals(\"10:11:12\", text);\n        text = DateFormatUtils.ISO_TIME_NO_T_FORMAT.format(cal);\n        assertEquals(\"10:11:12\", text);\n        \n        text = DateFormatUtils.format(cal.getTime(), \n                      DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.getPattern(), timeZone);\n        assertEquals(\"10:11:12-03:00\", text);\n        text = DateFormatUtils.format(cal.getTime().getTime(), \n                      DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.getPattern(), timeZone);\n        assertEquals(\"10:11:12-03:00\", text);\n        text = DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.format(cal);\n        assertEquals(\"10:11:12-03:00\", text);\n    }",
        "begin_line": 192,
        "end_line": 213,
        "comment": "",
        "child_ranges": [
            "(line 193,col 9)-(line 193,col 58)",
            "(line 194,col 9)-(line 194,col 54)",
            "(line 195,col 9)-(line 195,col 36)",
            "(line 196,col 9)-(line 197,col 85)",
            "(line 198,col 9)-(line 198,col 39)",
            "(line 199,col 9)-(line 200,col 85)",
            "(line 201,col 9)-(line 201,col 39)",
            "(line 202,col 9)-(line 202,col 64)",
            "(line 203,col 9)-(line 203,col 39)",
            "(line 205,col 9)-(line 206,col 93)",
            "(line 207,col 9)-(line 207,col 45)",
            "(line 208,col 9)-(line 209,col 93)",
            "(line 210,col 9)-(line 210,col 45)",
            "(line 211,col 9)-(line 211,col 74)",
            "(line 212,col 9)-(line 212,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java",
        "signature": "org.apache.commons.lang.time.DateFormatUtilsTest.testSMTP()",
        "snippet": "    public void testSMTP(){\n        TimeZone timeZone = TimeZone.getTimeZone(\"GMT-3\");\n        Calendar cal = Calendar.getInstance(timeZone);\n        cal.set(2003,5,8,10,11,12);\n        String text = DateFormatUtils.format(cal.getTime(), \n                        DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone,\n                        DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale());\n        assertEquals(\"Sun, 08 Jun 2003 10:11:12 -0300\", text);\n        text = DateFormatUtils.format(cal.getTime().getTime(), \n                        DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone,\n                        DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale());\n        assertEquals(\"Sun, 08 Jun 2003 10:11:12 -0300\", text);\n        text = DateFormatUtils.SMTP_DATETIME_FORMAT.format(cal);\n        assertEquals(\"Sun, 08 Jun 2003 10:11:12 -0300\", text);\n        \n        // format UTC\n        text = DateFormatUtils.formatUTC(cal.getTime().getTime(), \n                        DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(),\n                        DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale());\n        assertEquals(\"Sun, 08 Jun 2003 13:11:12 +0000\", text);\n    }",
        "begin_line": 215,
        "end_line": 235,
        "comment": "",
        "child_ranges": [
            "(line 216,col 9)-(line 216,col 58)",
            "(line 217,col 9)-(line 217,col 54)",
            "(line 218,col 9)-(line 218,col 35)",
            "(line 219,col 9)-(line 221,col 74)",
            "(line 222,col 9)-(line 222,col 62)",
            "(line 223,col 9)-(line 225,col 74)",
            "(line 226,col 9)-(line 226,col 62)",
            "(line 227,col 9)-(line 227,col 64)",
            "(line 228,col 9)-(line 228,col 62)",
            "(line 231,col 9)-(line 233,col 74)",
            "(line 234,col 9)-(line 234,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(DateUtilsFragmentTest.class);\n        suite.setName(\"DateUtils Fragment Tests\");\n        return suite;\n    }",
        "begin_line": 15,
        "end_line": 19,
        "comment": "",
        "child_ranges": [
            "(line 16,col 9)-(line 16,col 69)",
            "(line 17,col 9)-(line 17,col 50)",
            "(line 18,col 9)-(line 18,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.setUp()",
        "snippet": "\tprotected void setUp() {\n\t\taCalendar = Calendar.getInstance();\n\t\taCalendar.set(2005, months, days, hours, minutes, seconds);\n\t\taCalendar.set(Calendar.MILLISECOND, millis);\n\t\taDate = aCalendar.getTime();\n\t}",
        "begin_line": 31,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 32,col 3)-(line 32,col 37)",
            "(line 33,col 3)-(line 33,col 61)",
            "(line 34,col 3)-(line 34,col 46)",
            "(line 35,col 3)-(line 35,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testNullDate()",
        "snippet": "\tpublic void testNullDate() {\n\t\ttry {\n\t\t\tDateUtils.getFragmentInMilliseconds((Date) null, Calendar.MILLISECOND);\n\t\t\tfail();\n\t\t} catch(IllegalArgumentException iae) {}\n\n\t\ttry {\n\t\t\tDateUtils.getFragmentInSeconds((Date) null, Calendar.MILLISECOND);\n\t\t\tfail();\n\t\t} catch(IllegalArgumentException iae) {}\n\n\t\ttry {\n\t\t\tDateUtils.getFragmentInMinutes((Date) null, Calendar.MILLISECOND);\n\t\t\tfail();\n\t\t} catch(IllegalArgumentException iae) {}\n\n\t\ttry {\n\t\t\tDateUtils.getFragmentInHours((Date) null, Calendar.MILLISECOND);\n\t\t\tfail();\n\t\t} catch(IllegalArgumentException iae) {}\n\n\t\ttry {\n\t\t\tDateUtils.getFragmentInDays((Date) null, Calendar.MILLISECOND);\n\t\t\tfail();\n\t\t} catch(IllegalArgumentException iae) {}\n\t}",
        "begin_line": 38,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 39,col 3)-(line 42,col 42)",
            "(line 44,col 3)-(line 47,col 42)",
            "(line 49,col 3)-(line 52,col 42)",
            "(line 54,col 3)-(line 57,col 42)",
            "(line 59,col 3)-(line 62,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testNullCalendar()",
        "snippet": "\tpublic void testNullCalendar() {\n\t\ttry {\n\t\t\tDateUtils.getFragmentInMilliseconds((Calendar) null, Calendar.MILLISECOND);\n\t\t\tfail();\n\t\t} catch(IllegalArgumentException iae) {}\n\n\t\ttry {\n\t\t\tDateUtils.getFragmentInSeconds((Calendar) null, Calendar.MILLISECOND);\n\t\t\tfail();\n\t\t} catch(IllegalArgumentException iae) {}\n\n\t\ttry {\n\t\t\tDateUtils.getFragmentInMinutes((Calendar) null, Calendar.MILLISECOND);\n\t\t\tfail();\n\t\t} catch(IllegalArgumentException iae) {}\n\n\t\ttry {\n\t\t\tDateUtils.getFragmentInHours((Calendar) null, Calendar.MILLISECOND);\n\t\t\tfail();\n\t\t} catch(IllegalArgumentException iae) {}\n\n\t\ttry {\n\t\t\tDateUtils.getFragmentInDays((Calendar) null, Calendar.MILLISECOND);\n\t\t\tfail();\n\t\t} catch(IllegalArgumentException iae) {}\n\t}",
        "begin_line": 65,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 66,col 3)-(line 69,col 42)",
            "(line 71,col 3)-(line 74,col 42)",
            "(line 76,col 3)-(line 79,col 42)",
            "(line 81,col 3)-(line 84,col 42)",
            "(line 86,col 3)-(line 89,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testInvalidFragmentWithDate()",
        "snippet": "\tpublic void testInvalidFragmentWithDate() {\n\t\ttry {\n\t\t\tDateUtils.getFragmentInMilliseconds(aDate, 0);\n\t\t\tfail();\n\t\t} catch(IllegalArgumentException iae) {}\n\n\t\ttry {\n\t\t\tDateUtils.getFragmentInSeconds(aDate, 0);\n\t\t\tfail();\n\t\t} catch(IllegalArgumentException iae) {}\n\n\t\ttry {\n\t\t\tDateUtils.getFragmentInMinutes(aDate, 0);\n\t\t\tfail();\n\t\t} catch(IllegalArgumentException iae) {}\n\n\t\ttry {\n\t\t\tDateUtils.getFragmentInHours(aDate, 0);\n\t\t\tfail();\n\t\t} catch(IllegalArgumentException iae) {}\n\n\t\ttry {\n\t\t\tDateUtils.getFragmentInDays(aDate, 0);\n\t\t\tfail();\n\t\t} catch(IllegalArgumentException iae) {}\n\t}",
        "begin_line": 92,
        "end_line": 117,
        "comment": "",
        "child_ranges": [
            "(line 93,col 3)-(line 96,col 42)",
            "(line 98,col 3)-(line 101,col 42)",
            "(line 103,col 3)-(line 106,col 42)",
            "(line 108,col 3)-(line 111,col 42)",
            "(line 113,col 3)-(line 116,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testInvalidFragmentWithCalendar()",
        "snippet": "\tpublic void testInvalidFragmentWithCalendar() {\n\t\ttry {\n\t\t\tDateUtils.getFragmentInMilliseconds(aCalendar, 0);\n\t\t\tfail();\n\t\t} catch(IllegalArgumentException iae) {}\n\n\t\ttry {\n\t\t\tDateUtils.getFragmentInSeconds(aCalendar, 0);\n\t\t\tfail();\n\t\t} catch(IllegalArgumentException iae) {}\n\n\t\ttry {\n\t\t\tDateUtils.getFragmentInMinutes(aCalendar, 0);\n\t\t\tfail();\n\t\t} catch(IllegalArgumentException iae) {}\n\n\t\ttry {\n\t\t\tDateUtils.getFragmentInHours(aCalendar, 0);\n\t\t\tfail();\n\t\t} catch(IllegalArgumentException iae) {}\n\n\t\ttry {\n\t\t\tDateUtils.getFragmentInDays(aCalendar, 0);\n\t\t\tfail();\n\t\t} catch(IllegalArgumentException iae) {}\n\t}",
        "begin_line": 119,
        "end_line": 144,
        "comment": "",
        "child_ranges": [
            "(line 120,col 3)-(line 123,col 42)",
            "(line 125,col 3)-(line 128,col 42)",
            "(line 130,col 3)-(line 133,col 42)",
            "(line 135,col 3)-(line 138,col 42)",
            "(line 140,col 3)-(line 143,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testMillisecondFragmentInLargerUnitWithDate()",
        "snippet": "\tpublic void testMillisecondFragmentInLargerUnitWithDate() {\n\t\tassertEquals(0, DateUtils.getFragmentInMilliseconds(aDate, Calendar.MILLISECOND));\n\t\tassertEquals(0, DateUtils.getFragmentInSeconds(aDate, Calendar.MILLISECOND));\n\t\tassertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MILLISECOND));\n\t\tassertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MILLISECOND));\n\t\tassertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MILLISECOND));\n\t}",
        "begin_line": 146,
        "end_line": 152,
        "comment": "",
        "child_ranges": [
            "(line 147,col 3)-(line 147,col 84)",
            "(line 148,col 3)-(line 148,col 79)",
            "(line 149,col 3)-(line 149,col 79)",
            "(line 150,col 3)-(line 150,col 77)",
            "(line 151,col 3)-(line 151,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testMillisecondFragmentInLargerUnitWithCalendar()",
        "snippet": "\tpublic void testMillisecondFragmentInLargerUnitWithCalendar() {\n\t\tassertEquals(0, DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MILLISECOND));\n\t\tassertEquals(0, DateUtils.getFragmentInSeconds(aCalendar, Calendar.MILLISECOND));\n\t\tassertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.MILLISECOND));\n\t\tassertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.MILLISECOND));\n\t\tassertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.MILLISECOND));\n\t}",
        "begin_line": 154,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 155,col 3)-(line 155,col 88)",
            "(line 156,col 3)-(line 156,col 83)",
            "(line 157,col 3)-(line 157,col 83)",
            "(line 158,col 3)-(line 158,col 81)",
            "(line 159,col 3)-(line 159,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testSecondFragmentInLargerUnitWithDate()",
        "snippet": "\tpublic void testSecondFragmentInLargerUnitWithDate() {\n\t\tassertEquals(0, DateUtils.getFragmentInSeconds(aDate, Calendar.SECOND));\n\t\tassertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.SECOND));\n\t\tassertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.SECOND));\n\t\tassertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.SECOND));\n\t}",
        "begin_line": 162,
        "end_line": 167,
        "comment": "",
        "child_ranges": [
            "(line 163,col 3)-(line 163,col 74)",
            "(line 164,col 3)-(line 164,col 74)",
            "(line 165,col 3)-(line 165,col 72)",
            "(line 166,col 3)-(line 166,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testSecondFragmentInLargerUnitWithCalendar()",
        "snippet": "\tpublic void testSecondFragmentInLargerUnitWithCalendar() {\n\t\tassertEquals(0, DateUtils.getFragmentInSeconds(aCalendar, Calendar.SECOND));\n\t\tassertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.SECOND));\n\t\tassertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.SECOND));\n\t\tassertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.SECOND));\n\t}",
        "begin_line": 169,
        "end_line": 174,
        "comment": "",
        "child_ranges": [
            "(line 170,col 3)-(line 170,col 78)",
            "(line 171,col 3)-(line 171,col 78)",
            "(line 172,col 3)-(line 172,col 76)",
            "(line 173,col 3)-(line 173,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testMinuteFragmentInLargerUnitWithDate()",
        "snippet": "\tpublic void testMinuteFragmentInLargerUnitWithDate() {\n\t\tassertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE));\n\t\tassertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE));\n\t\tassertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE));\n\t}",
        "begin_line": 176,
        "end_line": 180,
        "comment": "",
        "child_ranges": [
            "(line 177,col 3)-(line 177,col 74)",
            "(line 178,col 3)-(line 178,col 72)",
            "(line 179,col 3)-(line 179,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testMinuteFragmentInLargerUnitWithCalendar()",
        "snippet": "\tpublic void testMinuteFragmentInLargerUnitWithCalendar() {\n\t\tassertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.MINUTE));\n\t\tassertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.MINUTE));\n\t\tassertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.MINUTE));\n\t}",
        "begin_line": 182,
        "end_line": 186,
        "comment": "",
        "child_ranges": [
            "(line 183,col 3)-(line 183,col 78)",
            "(line 184,col 3)-(line 184,col 76)",
            "(line 185,col 3)-(line 185,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testHourOfDayFragmentInLargerUnitWithDate()",
        "snippet": "\tpublic void testHourOfDayFragmentInLargerUnitWithDate() {\n\t\tassertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.HOUR_OF_DAY));\n\t\tassertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.HOUR_OF_DAY));\n\t}",
        "begin_line": 188,
        "end_line": 191,
        "comment": "",
        "child_ranges": [
            "(line 189,col 3)-(line 189,col 77)",
            "(line 190,col 3)-(line 190,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testHourOfDayFragmentInLargerUnitWithCalendar()",
        "snippet": "\tpublic void testHourOfDayFragmentInLargerUnitWithCalendar() {\n\t\tassertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.HOUR_OF_DAY));\n\t\tassertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.HOUR_OF_DAY));\n\t}",
        "begin_line": 193,
        "end_line": 196,
        "comment": "",
        "child_ranges": [
            "(line 194,col 3)-(line 194,col 81)",
            "(line 195,col 3)-(line 195,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testDayOfYearFragmentInLargerUnitWithDate()",
        "snippet": "\tpublic void testDayOfYearFragmentInLargerUnitWithDate() {\n\t\tassertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.DAY_OF_YEAR));\n\t}",
        "begin_line": 198,
        "end_line": 200,
        "comment": "",
        "child_ranges": [
            "(line 199,col 3)-(line 199,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testDayOfYearFragmentInLargerUnitWithCalendar()",
        "snippet": "\tpublic void testDayOfYearFragmentInLargerUnitWithCalendar() {\n\t\tassertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.DAY_OF_YEAR));\n\t}",
        "begin_line": 202,
        "end_line": 204,
        "comment": "",
        "child_ranges": [
            "(line 203,col 3)-(line 203,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testDateFragmentInLargerUnitWithDate()",
        "snippet": "\tpublic void testDateFragmentInLargerUnitWithDate() {\n\t\tassertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.DATE));\n\t}",
        "begin_line": 206,
        "end_line": 208,
        "comment": "",
        "child_ranges": [
            "(line 207,col 3)-(line 207,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testDateFragmentInLargerUnitWithCalendar()",
        "snippet": "\tpublic void testDateFragmentInLargerUnitWithCalendar() {\n\t\tassertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.DATE));\n\t}",
        "begin_line": 210,
        "end_line": 212,
        "comment": "",
        "child_ranges": [
            "(line 211,col 3)-(line 211,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testMillisecondsOfSecondWithDate()",
        "snippet": "\tpublic void testMillisecondsOfSecondWithDate() {\n\t\tlong testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.SECOND);\n\t\tassertEquals(millis, testResult);\n\t}",
        "begin_line": 216,
        "end_line": 219,
        "comment": "",
        "child_ranges": [
            "(line 217,col 3)-(line 217,col 80)",
            "(line 218,col 3)-(line 218,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testMillisecondsOfSecondWithCalendar()",
        "snippet": "\tpublic void testMillisecondsOfSecondWithCalendar() {\n\t\tlong testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.SECOND);\n\t\tassertEquals(millis, testResult);\n\t\tassertEquals(aCalendar.get(Calendar.MILLISECOND), testResult);\n\t}",
        "begin_line": 221,
        "end_line": 225,
        "comment": "",
        "child_ranges": [
            "(line 222,col 3)-(line 222,col 84)",
            "(line 223,col 3)-(line 223,col 35)",
            "(line 224,col 3)-(line 224,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testMillisecondsOfMinuteWithDate()",
        "snippet": "\tpublic void testMillisecondsOfMinuteWithDate() {\n\t\tlong testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.MINUTE);\n\t\tassertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND), testResult);\n\t}",
        "begin_line": 229,
        "end_line": 232,
        "comment": "",
        "child_ranges": [
            "(line 230,col 3)-(line 230,col 80)",
            "(line 231,col 3)-(line 231,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testMillisecondsOfMinuteWithCalender()",
        "snippet": "\tpublic void testMillisecondsOfMinuteWithCalender() {\n\t\tlong testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MINUTE);\n\t\tassertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND), testResult);\n\t}",
        "begin_line": 234,
        "end_line": 237,
        "comment": "",
        "child_ranges": [
            "(line 235,col 3)-(line 235,col 84)",
            "(line 236,col 3)-(line 236,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testSecondsofMinuteWithDate()",
        "snippet": "\tpublic void testSecondsofMinuteWithDate() {\n\t\tlong testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.MINUTE);\n\t\tassertEquals(seconds, testResult);\n\t}",
        "begin_line": 239,
        "end_line": 242,
        "comment": "",
        "child_ranges": [
            "(line 240,col 3)-(line 240,col 75)",
            "(line 241,col 3)-(line 241,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testSecondsofMinuteWithCalendar()",
        "snippet": "\tpublic void testSecondsofMinuteWithCalendar() {\n\t\tlong testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.MINUTE);\n\t\tassertEquals(seconds, testResult);\n\t\tassertEquals(aCalendar.get(Calendar.SECOND), testResult);\n\t}",
        "begin_line": 244,
        "end_line": 248,
        "comment": "",
        "child_ranges": [
            "(line 245,col 3)-(line 245,col 79)",
            "(line 246,col 3)-(line 246,col 36)",
            "(line 247,col 3)-(line 247,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testMillisecondsOfHourWithDate()",
        "snippet": "\tpublic void testMillisecondsOfHourWithDate() {\n\t\tlong testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.HOUR_OF_DAY);\n\t\tassertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE), testResult);\n\t}",
        "begin_line": 252,
        "end_line": 255,
        "comment": "",
        "child_ranges": [
            "(line 253,col 3)-(line 253,col 85)",
            "(line 254,col 3)-(line 254,col 119)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testMillisecondsOfHourWithCalendar()",
        "snippet": "\tpublic void testMillisecondsOfHourWithCalendar() {\n\t\tlong testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.HOUR_OF_DAY);\n\t\tassertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE), testResult);\n\t}",
        "begin_line": 257,
        "end_line": 260,
        "comment": "",
        "child_ranges": [
            "(line 258,col 3)-(line 258,col 89)",
            "(line 259,col 3)-(line 259,col 119)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testSecondsofHourWithDate()",
        "snippet": "\tpublic void testSecondsofHourWithDate() {\n\t\tlong testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.HOUR_OF_DAY);\n\t\tassertEquals(\n\t\t\t\tseconds\n\t\t\t\t\t\t+ (minutes\n\t\t\t\t\t\t\t\t* DateUtils.MILLIS_PER_MINUTE / DateUtils.MILLIS_PER_SECOND),\n\t\t\t\ttestResult);\n\t}",
        "begin_line": 262,
        "end_line": 269,
        "comment": "",
        "child_ranges": [
            "(line 263,col 3)-(line 263,col 80)",
            "(line 264,col 3)-(line 268,col 16)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testSecondsofHourWithCalendar()",
        "snippet": "\tpublic void testSecondsofHourWithCalendar() {\n\t\tlong testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.HOUR_OF_DAY);\n\t\tassertEquals(\n\t\t\t\tseconds\n\t\t\t\t\t\t+ (minutes\n\t\t\t\t\t\t\t\t* DateUtils.MILLIS_PER_MINUTE / DateUtils.MILLIS_PER_SECOND),\n\t\t\t\ttestResult);\n\t}",
        "begin_line": 271,
        "end_line": 278,
        "comment": "",
        "child_ranges": [
            "(line 272,col 3)-(line 272,col 84)",
            "(line 273,col 3)-(line 277,col 16)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testMinutesOfHourWithDate()",
        "snippet": "\tpublic void testMinutesOfHourWithDate() {\n\t\tlong testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.HOUR_OF_DAY);\n\t\tassertEquals(minutes, testResult);\n\t}",
        "begin_line": 280,
        "end_line": 283,
        "comment": "",
        "child_ranges": [
            "(line 281,col 3)-(line 281,col 80)",
            "(line 282,col 3)-(line 282,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testMinutesOfHourWithCalendar()",
        "snippet": "\tpublic void testMinutesOfHourWithCalendar() {\n\t\tlong testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.HOUR_OF_DAY);\n\t\tassertEquals(minutes, testResult);\n\t}",
        "begin_line": 285,
        "end_line": 288,
        "comment": "",
        "child_ranges": [
            "(line 286,col 3)-(line 286,col 84)",
            "(line 287,col 3)-(line 287,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testMillisecondsOfDayWithDate()",
        "snippet": "\tpublic void testMillisecondsOfDayWithDate() {\n\t\tlong testresult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.DATE);\n\t\tlong expectedValue = millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR); \n\t\tassertEquals(expectedValue, testresult);\n\t\ttestresult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.DAY_OF_YEAR);\n\t\tassertEquals(expectedValue, testresult);\n\t}",
        "begin_line": 291,
        "end_line": 297,
        "comment": "Calendar.DATE and Calendar.DAY_OF_YEAR as useful fragment",
        "child_ranges": [
            "(line 292,col 3)-(line 292,col 78)",
            "(line 293,col 3)-(line 293,col 152)",
            "(line 294,col 3)-(line 294,col 42)",
            "(line 295,col 3)-(line 295,col 80)",
            "(line 296,col 3)-(line 296,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testMillisecondsOfDayWithCalendar()",
        "snippet": "\tpublic void testMillisecondsOfDayWithCalendar() {\n\t\tlong testresult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.DATE);\n\t\tlong expectedValue = millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR); \n\t\tassertEquals(expectedValue, testresult);\n\t\ttestresult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.DAY_OF_YEAR);\n\t\tassertEquals(expectedValue, testresult);\n\t}",
        "begin_line": 299,
        "end_line": 305,
        "comment": "",
        "child_ranges": [
            "(line 300,col 3)-(line 300,col 82)",
            "(line 301,col 3)-(line 301,col 152)",
            "(line 302,col 3)-(line 302,col 42)",
            "(line 303,col 3)-(line 303,col 84)",
            "(line 304,col 3)-(line 304,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testSecondsOfDayWithDate()",
        "snippet": "\tpublic void testSecondsOfDayWithDate() {\n\t\tlong testresult = DateUtils.getFragmentInSeconds(aDate, Calendar.DATE);\n\t\tlong expectedValue = seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_SECOND;\n\t\tassertEquals(expectedValue, testresult);\n\t\ttestresult = DateUtils.getFragmentInSeconds(aDate, Calendar.DAY_OF_YEAR);\n\t\tassertEquals(expectedValue, testresult);\n\t}",
        "begin_line": 307,
        "end_line": 313,
        "comment": "",
        "child_ranges": [
            "(line 308,col 3)-(line 308,col 73)",
            "(line 309,col 3)-(line 309,col 142)",
            "(line 310,col 3)-(line 310,col 42)",
            "(line 311,col 3)-(line 311,col 75)",
            "(line 312,col 3)-(line 312,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testSecondsOfDayWithCalendar()",
        "snippet": "\tpublic void testSecondsOfDayWithCalendar() {\n\t\tlong testresult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.DATE);\n\t\tlong expectedValue = seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_SECOND;\n\t\tassertEquals(expectedValue, testresult);\n\t\ttestresult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.DAY_OF_YEAR);\n\t\tassertEquals(expectedValue, testresult);\n\t}",
        "begin_line": 315,
        "end_line": 321,
        "comment": "",
        "child_ranges": [
            "(line 316,col 3)-(line 316,col 77)",
            "(line 317,col 3)-(line 317,col 142)",
            "(line 318,col 3)-(line 318,col 42)",
            "(line 319,col 3)-(line 319,col 79)",
            "(line 320,col 3)-(line 320,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testMinutesOfDayWithDate()",
        "snippet": "\tpublic void testMinutesOfDayWithDate() {\n\t\tlong testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.DATE);\n\t\tlong expectedValue = minutes + ((hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_MINUTE; \n\t\tassertEquals(expectedValue,testResult);\n\t\ttestResult = DateUtils.getFragmentInMinutes(aDate, Calendar.DAY_OF_YEAR);\n\t\tassertEquals(expectedValue,testResult);\n\t}",
        "begin_line": 323,
        "end_line": 329,
        "comment": "",
        "child_ranges": [
            "(line 324,col 3)-(line 324,col 73)",
            "(line 325,col 3)-(line 325,col 100)",
            "(line 326,col 3)-(line 326,col 41)",
            "(line 327,col 3)-(line 327,col 75)",
            "(line 328,col 3)-(line 328,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testMinutesOfDayWithCalendar()",
        "snippet": "\tpublic void testMinutesOfDayWithCalendar() {\n\t\tlong testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.DATE);\n\t\tlong expectedValue = minutes + ((hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_MINUTE; \n\t\tassertEquals(expectedValue, testResult);\n\t\ttestResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.DAY_OF_YEAR);\n\t\tassertEquals(expectedValue, testResult);\n\t}",
        "begin_line": 331,
        "end_line": 337,
        "comment": "",
        "child_ranges": [
            "(line 332,col 3)-(line 332,col 77)",
            "(line 333,col 3)-(line 333,col 100)",
            "(line 334,col 3)-(line 334,col 42)",
            "(line 335,col 3)-(line 335,col 79)",
            "(line 336,col 3)-(line 336,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testHoursOfDayWithDate()",
        "snippet": "\tpublic void testHoursOfDayWithDate() {\n\t\tlong testResult = DateUtils.getFragmentInHours(aDate, Calendar.DATE);\n\t\tlong expectedValue = hours; \n\t\tassertEquals(expectedValue,testResult);\n\t\ttestResult = DateUtils.getFragmentInHours(aDate, Calendar.DAY_OF_YEAR);\n\t\tassertEquals(expectedValue,testResult);\n\t}",
        "begin_line": 339,
        "end_line": 345,
        "comment": "",
        "child_ranges": [
            "(line 340,col 3)-(line 340,col 71)",
            "(line 341,col 3)-(line 341,col 29)",
            "(line 342,col 3)-(line 342,col 41)",
            "(line 343,col 3)-(line 343,col 73)",
            "(line 344,col 3)-(line 344,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testHoursOfDayWithCalendar()",
        "snippet": "\tpublic void testHoursOfDayWithCalendar() {\n\t\tlong testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.DATE);\n\t\tlong expectedValue = hours; \n\t\tassertEquals(expectedValue, testResult);\n\t\ttestResult = DateUtils.getFragmentInHours(aCalendar, Calendar.DAY_OF_YEAR);\n\t\tassertEquals(expectedValue, testResult);\n\t}",
        "begin_line": 347,
        "end_line": 353,
        "comment": "",
        "child_ranges": [
            "(line 348,col 3)-(line 348,col 75)",
            "(line 349,col 3)-(line 349,col 29)",
            "(line 350,col 3)-(line 350,col 42)",
            "(line 351,col 3)-(line 351,col 77)",
            "(line 352,col 3)-(line 352,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testMillisecondsOfMonthWithDate()",
        "snippet": "\tpublic void testMillisecondsOfMonthWithDate() {\n\t\tlong testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.MONTH);\n\t\tassertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)\n\t\t\t\t\t\t\t\t+ (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY),\n\t\t\t\ttestResult);\n\t}",
        "begin_line": 357,
        "end_line": 362,
        "comment": "Calendar.MONTH as useful fragment",
        "child_ranges": [
            "(line 358,col 3)-(line 358,col 79)",
            "(line 359,col 3)-(line 361,col 16)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testMillisecondsOfMonthWithCalendar()",
        "snippet": "\tpublic void testMillisecondsOfMonthWithCalendar() {\n\t\tlong testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MONTH);\n\t\tassertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)\n\t\t\t\t+ (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY),\ntestResult);\n\t}",
        "begin_line": 364,
        "end_line": 369,
        "comment": "",
        "child_ranges": [
            "(line 365,col 3)-(line 365,col 83)",
            "(line 366,col 3)-(line 368,col 12)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testSecondsOfMonthWithDate()",
        "snippet": "\tpublic void testSecondsOfMonthWithDate() {\n\t\tlong testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.MONTH);\n\t\tassertEquals(\n\t\t\t\tseconds\n\t\t\t\t\t\t+ ((minutes * DateUtils.MILLIS_PER_MINUTE)\n\t\t\t\t\t\t\t\t+ (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY))\n\t\t\t\t\t\t/ DateUtils.MILLIS_PER_SECOND,\n\t\t\t\ttestResult);\n\t}",
        "begin_line": 371,
        "end_line": 379,
        "comment": "",
        "child_ranges": [
            "(line 372,col 3)-(line 372,col 74)",
            "(line 373,col 3)-(line 378,col 16)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testSecondsOfMonthWithCalendar()",
        "snippet": "\tpublic void testSecondsOfMonthWithCalendar() {\n\t\tlong testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.MONTH);\n\t\tassertEquals(\n\t\t\t\tseconds\n\t\t\t\t\t\t+ ((minutes * DateUtils.MILLIS_PER_MINUTE)\n\t\t\t\t\t\t\t\t+ (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY))\n\t\t\t\t\t\t/ DateUtils.MILLIS_PER_SECOND,\n\t\t\t\ttestResult);\n\t}",
        "begin_line": 381,
        "end_line": 389,
        "comment": "",
        "child_ranges": [
            "(line 382,col 3)-(line 382,col 78)",
            "(line 383,col 3)-(line 388,col 16)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testMinutesOfMonthWithDate()",
        "snippet": "\tpublic void testMinutesOfMonthWithDate() {\n\t\tlong testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.MONTH);\n\t\tassertEquals(minutes\n\t\t\t\t\t\t\t\t+ ((hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY))\n\t\t\t\t\t\t/ DateUtils.MILLIS_PER_MINUTE,\n\t\t\t\ttestResult);\n\t}",
        "begin_line": 391,
        "end_line": 397,
        "comment": "",
        "child_ranges": [
            "(line 392,col 3)-(line 392,col 74)",
            "(line 393,col 3)-(line 396,col 16)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testMinutesOfMonthWithCalendar()",
        "snippet": "\tpublic void testMinutesOfMonthWithCalendar() {\n\t\tlong testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.MONTH);\n\t\tassertEquals( minutes  +((hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY))\n\t\t\t\t\t\t/ DateUtils.MILLIS_PER_MINUTE,\n\t\t\t\ttestResult);\n\t}",
        "begin_line": 399,
        "end_line": 404,
        "comment": "",
        "child_ranges": [
            "(line 400,col 3)-(line 400,col 78)",
            "(line 401,col 3)-(line 403,col 16)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testHoursOfMonthWithDate()",
        "snippet": "\tpublic void testHoursOfMonthWithDate() {\n\t\tlong testResult = DateUtils.getFragmentInHours(aDate, Calendar.MONTH);\n\t\tassertEquals(hours + ((days * DateUtils.MILLIS_PER_DAY))\n\t\t\t\t\t\t/ DateUtils.MILLIS_PER_HOUR,\n\t\t\t\ttestResult);\n\t}",
        "begin_line": 406,
        "end_line": 411,
        "comment": "",
        "child_ranges": [
            "(line 407,col 3)-(line 407,col 72)",
            "(line 408,col 3)-(line 410,col 16)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testHoursOfMonthWithCalendar()",
        "snippet": "\tpublic void testHoursOfMonthWithCalendar() {\n\t\tlong testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.MONTH);\n\t\tassertEquals( hours +((days * DateUtils.MILLIS_PER_DAY))\n\t\t\t\t\t\t/ DateUtils.MILLIS_PER_HOUR,\n\t\t\t\ttestResult);\n\t}",
        "begin_line": 413,
        "end_line": 418,
        "comment": "",
        "child_ranges": [
            "(line 414,col 3)-(line 414,col 76)",
            "(line 415,col 3)-(line 417,col 16)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testMillisecondsOfYearWithDate()",
        "snippet": "\tpublic void testMillisecondsOfYearWithDate() {\n\t\tlong testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.YEAR);\n\t\tCalendar cal = Calendar.getInstance();\n\t\tcal.setTime(aDate);\n\t\tassertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)\n\t\t\t\t\t\t\t\t+ (hours * DateUtils.MILLIS_PER_HOUR) + (cal.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY),\n\t\t\t\ttestResult);\n\t}",
        "begin_line": 421,
        "end_line": 428,
        "comment": "Calendar.YEAR as useful fragment",
        "child_ranges": [
            "(line 422,col 3)-(line 422,col 78)",
            "(line 423,col 3)-(line 423,col 40)",
            "(line 424,col 3)-(line 424,col 21)",
            "(line 425,col 3)-(line 427,col 16)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testMillisecondsOfYearWithCalendar()",
        "snippet": "\tpublic void testMillisecondsOfYearWithCalendar() {\n\t\tlong testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.YEAR);\n\t\tassertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)\n\t\t\t\t+ (hours * DateUtils.MILLIS_PER_HOUR) + (aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY),\ntestResult);\n\t}",
        "begin_line": 430,
        "end_line": 435,
        "comment": "",
        "child_ranges": [
            "(line 431,col 3)-(line 431,col 82)",
            "(line 432,col 3)-(line 434,col 12)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testSecondsOfYearWithDate()",
        "snippet": "\tpublic void testSecondsOfYearWithDate() {\n\t\tlong testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.YEAR);\n\t\tCalendar cal = Calendar.getInstance();\n\t\tcal.setTime(aDate);\n\t\tassertEquals(\n\t\t\t\tseconds\n\t\t\t\t\t\t+ ((minutes * DateUtils.MILLIS_PER_MINUTE)\n\t\t\t\t\t\t\t\t+ (hours * DateUtils.MILLIS_PER_HOUR) + (cal.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))\n\t\t\t\t\t\t/ DateUtils.MILLIS_PER_SECOND,\n\t\t\t\ttestResult);\n\t}",
        "begin_line": 437,
        "end_line": 447,
        "comment": "",
        "child_ranges": [
            "(line 438,col 3)-(line 438,col 73)",
            "(line 439,col 3)-(line 439,col 40)",
            "(line 440,col 3)-(line 440,col 21)",
            "(line 441,col 3)-(line 446,col 16)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testSecondsOfYearWithCalendar()",
        "snippet": "\tpublic void testSecondsOfYearWithCalendar() {\n\t\tlong testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.YEAR);\n\t\tassertEquals(\n\t\t\t\tseconds\n\t\t\t\t\t\t+ ((minutes * DateUtils.MILLIS_PER_MINUTE)\n\t\t\t\t\t\t\t\t+ (hours * DateUtils.MILLIS_PER_HOUR) + (aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))\n\t\t\t\t\t\t/ DateUtils.MILLIS_PER_SECOND,\n\t\t\t\ttestResult);\n\t}",
        "begin_line": 449,
        "end_line": 457,
        "comment": "",
        "child_ranges": [
            "(line 450,col 3)-(line 450,col 77)",
            "(line 451,col 3)-(line 456,col 16)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testMinutesOfYearWithDate()",
        "snippet": "\tpublic void testMinutesOfYearWithDate() {\n\t\tlong testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.YEAR);\n\t\tCalendar cal = Calendar.getInstance();\n\t\tcal.setTime(aDate);\n\t\tassertEquals(minutes\n\t\t\t\t\t\t\t\t+ ((hours * DateUtils.MILLIS_PER_HOUR) + (cal.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))\n\t\t\t\t\t\t/ DateUtils.MILLIS_PER_MINUTE,\n\t\t\t\ttestResult);\n\t}",
        "begin_line": 459,
        "end_line": 467,
        "comment": "",
        "child_ranges": [
            "(line 460,col 3)-(line 460,col 73)",
            "(line 461,col 3)-(line 461,col 40)",
            "(line 462,col 3)-(line 462,col 21)",
            "(line 463,col 3)-(line 466,col 16)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testMinutesOfYearWithCalendar()",
        "snippet": "\tpublic void testMinutesOfYearWithCalendar() {\n\t\tlong testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.YEAR);\n\t\tassertEquals( minutes  +((hours * DateUtils.MILLIS_PER_HOUR) + (aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))\n\t\t\t\t\t\t/ DateUtils.MILLIS_PER_MINUTE,\n\t\t\t\ttestResult);\n\t}",
        "begin_line": 469,
        "end_line": 474,
        "comment": "",
        "child_ranges": [
            "(line 470,col 3)-(line 470,col 77)",
            "(line 471,col 3)-(line 473,col 16)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testHoursOfYearWithDate()",
        "snippet": "\tpublic void testHoursOfYearWithDate() {\n\t\tlong testResult = DateUtils.getFragmentInHours(aDate, Calendar.YEAR);\n\t\tCalendar cal = Calendar.getInstance();\n\t\tcal.setTime(aDate);\n\t\tassertEquals(hours + ((cal.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))\n\t\t\t\t\t\t/ DateUtils.MILLIS_PER_HOUR,\n\t\t\t\ttestResult);\n\t}",
        "begin_line": 476,
        "end_line": 483,
        "comment": "",
        "child_ranges": [
            "(line 477,col 3)-(line 477,col 71)",
            "(line 478,col 3)-(line 478,col 40)",
            "(line 479,col 3)-(line 479,col 21)",
            "(line 480,col 3)-(line 482,col 16)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang.time.DateUtilsFragmentTest.testHoursOfYearWithCalendar()",
        "snippet": "\tpublic void testHoursOfYearWithCalendar() {\n\t\tlong testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.YEAR);\n\t\tassertEquals( hours +((aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))\n\t\t\t\t\t\t/ DateUtils.MILLIS_PER_HOUR,\n\t\t\t\ttestResult);\n\t}",
        "begin_line": 485,
        "end_line": 490,
        "comment": "",
        "child_ranges": [
            "(line 486,col 3)-(line 486,col 75)",
            "(line 487,col 3)-(line 489,col 16)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang.time.FastDateFormatTest.FastDateFormatTest(java.lang.String)",
        "snippet": "    public FastDateFormatTest(String name) {\n        super(name);\n    }",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang.time.FastDateFormatTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 48,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang.time.FastDateFormatTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(FastDateFormatTest.class);\n        suite.setName(\"FastDateFormat Tests\");\n\n        return suite;\n    }",
        "begin_line": 52,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 66)",
            "(line 54,col 9)-(line 54,col 46)",
            "(line 56,col 9)-(line 56,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang.time.FastDateFormatTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        super.setUp();\n    }",
        "begin_line": 59,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang.time.FastDateFormatTest.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        super.tearDown();\n    }",
        "begin_line": 63,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang.time.FastDateFormatTest.test_getInstance()",
        "snippet": "    public void test_getInstance() {\n        FastDateFormat format1 = FastDateFormat.getInstance();\n        FastDateFormat format2 = FastDateFormat.getInstance();\n        assertSame(format1, format2);\n        assertEquals(new SimpleDateFormat().toPattern(), format1.getPattern());\n    }",
        "begin_line": 67,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 62)",
            "(line 69,col 9)-(line 69,col 62)",
            "(line 70,col 9)-(line 70,col 37)",
            "(line 71,col 9)-(line 71,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang.time.FastDateFormatTest.test_getInstance_String()",
        "snippet": "    public void test_getInstance_String() {\n        FastDateFormat format1 = FastDateFormat.getInstance(\"MM/DD/yyyy\");\n        FastDateFormat format2 = FastDateFormat.getInstance(\"MM-DD-yyyy\");\n        FastDateFormat format3 = FastDateFormat.getInstance(\"MM-DD-yyyy\");\n\n        assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);\n        assertSame(format2, format3);\n        assertEquals(\"MM/DD/yyyy\", format1.getPattern());\n        assertEquals(TimeZone.getDefault(), format1.getTimeZone());\n        assertEquals(TimeZone.getDefault(), format2.getTimeZone());\n        assertEquals(false, format1.getTimeZoneOverridesCalendar());\n        assertEquals(false, format2.getTimeZoneOverridesCalendar());\n    }",
        "begin_line": 74,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 74)",
            "(line 76,col 9)-(line 76,col 74)",
            "(line 77,col 9)-(line 77,col 74)",
            "(line 79,col 9)-(line 79,col 39)",
            "(line 80,col 9)-(line 80,col 37)",
            "(line 81,col 9)-(line 81,col 57)",
            "(line 82,col 9)-(line 82,col 67)",
            "(line 83,col 9)-(line 83,col 67)",
            "(line 84,col 9)-(line 84,col 68)",
            "(line 85,col 9)-(line 85,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang.time.FastDateFormatTest.test_getInstance_String_TimeZone()",
        "snippet": "    public void test_getInstance_String_TimeZone() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            FastDateFormat format1 = FastDateFormat.getInstance(\"MM/DD/yyyy\",\n                    TimeZone.getTimeZone(\"Atlantic/Reykjavik\"));\n            FastDateFormat format2 = FastDateFormat.getInstance(\"MM/DD/yyyy\");\n            FastDateFormat format3 = FastDateFormat.getInstance(\"MM/DD/yyyy\", TimeZone.getDefault());\n            FastDateFormat format4 = FastDateFormat.getInstance(\"MM/DD/yyyy\", TimeZone.getDefault());\n            FastDateFormat format5 = FastDateFormat.getInstance(\"MM-DD-yyyy\", TimeZone.getDefault());\n            FastDateFormat format6 = FastDateFormat.getInstance(\"MM-DD-yyyy\");\n\n            assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);\n            assertEquals(TimeZone.getTimeZone(\"Atlantic/Reykjavik\"), format1.getTimeZone());\n            assertEquals(true, format1.getTimeZoneOverridesCalendar());\n            assertEquals(TimeZone.getDefault(), format2.getTimeZone());\n            assertEquals(false, format2.getTimeZoneOverridesCalendar());\n            assertSame(format3, format4);\n            assertTrue(format3 != format5); // -- junit 3.8 version -- assertFalse(format3 == format5);\n            assertTrue(format4 != format6); // -- junit 3.8 version -- assertFalse(format3 == format5);\n\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
        "begin_line": 88,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 55)",
            "(line 90,col 9)-(line 90,col 57)",
            "(line 91,col 9)-(line 115,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang.time.FastDateFormatTest.test_getInstance_String_Locale()",
        "snippet": "    public void test_getInstance_String_Locale() {\n        Locale realDefaultLocale = Locale.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            FastDateFormat format1 = FastDateFormat.getInstance(\"MM/DD/yyyy\", Locale.GERMANY);\n            FastDateFormat format2 = FastDateFormat.getInstance(\"MM/DD/yyyy\");\n            FastDateFormat format3 = FastDateFormat.getInstance(\"MM/DD/yyyy\", Locale.GERMANY);\n\n            assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);\n            assertSame(format1, format3);\n            assertSame(Locale.GERMANY, format1.getLocale());\n\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n        }\n    }",
        "begin_line": 118,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 55)",
            "(line 120,col 9)-(line 132,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance()",
        "snippet": "    public void test_changeDefault_Locale_DateInstance() {\n        Locale realDefaultLocale = Locale.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY);\n            FastDateFormat format2 = FastDateFormat.getDateInstance(FastDateFormat.FULL);\n            Locale.setDefault(Locale.GERMANY);\n            FastDateFormat format3 = FastDateFormat.getDateInstance(FastDateFormat.FULL);\n\n            assertSame(Locale.GERMANY, format1.getLocale());\n            assertSame(Locale.US, format2.getLocale());\n            assertSame(Locale.GERMANY, format3.getLocale());\n            assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);\n            assertTrue(format2 != format3);\n\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n        }\n    }",
        "begin_line": 135,
        "end_line": 153,
        "comment": "",
        "child_ranges": [
            "(line 136,col 9)-(line 136,col 55)",
            "(line 137,col 9)-(line 152,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance()",
        "snippet": "    public void test_changeDefault_Locale_DateTimeInstance() {\n        Locale realDefaultLocale = Locale.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            FastDateFormat format1 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL, Locale.GERMANY);\n            FastDateFormat format2 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL);\n            Locale.setDefault(Locale.GERMANY);\n            FastDateFormat format3 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL);\n\n            assertSame(Locale.GERMANY, format1.getLocale());\n            assertSame(Locale.US, format2.getLocale());\n            assertSame(Locale.GERMANY, format3.getLocale());\n            assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);\n            assertTrue(format2 != format3);\n\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n        }\n    }",
        "begin_line": 155,
        "end_line": 173,
        "comment": "",
        "child_ranges": [
            "(line 156,col 9)-(line 156,col 55)",
            "(line 157,col 9)-(line 172,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang.time.FastDateFormatTest.test_getInstance_String_TimeZone_Locale()",
        "snippet": "    public void test_getInstance_String_TimeZone_Locale() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            FastDateFormat format1 = FastDateFormat.getInstance(\"MM/DD/yyyy\",\n                    TimeZone.getTimeZone(\"Atlantic/Reykjavik\"), Locale.GERMANY);\n            FastDateFormat format2 = FastDateFormat.getInstance(\"MM/DD/yyyy\", Locale.GERMANY);\n            FastDateFormat format3 = FastDateFormat.getInstance(\"MM/DD/yyyy\",\n                    TimeZone.getDefault(), Locale.GERMANY);\n\n            assertTrue(format1 != format2); // -- junit 3.8 version -- assertNotSame(format1, format2);\n            assertEquals(TimeZone.getTimeZone(\"Atlantic/Reykjavik\"), format1.getTimeZone());\n            assertEquals(TimeZone.getDefault(), format2.getTimeZone());\n            assertEquals(TimeZone.getDefault(), format3.getTimeZone());\n            assertEquals(true, format1.getTimeZoneOverridesCalendar());\n            assertEquals(false, format2.getTimeZoneOverridesCalendar());\n            assertEquals(true, format3.getTimeZoneOverridesCalendar());\n            assertEquals(Locale.GERMANY, format1.getLocale());\n            assertEquals(Locale.GERMANY, format2.getLocale());\n            assertEquals(Locale.GERMANY, format3.getLocale());\n\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
        "begin_line": 175,
        "end_line": 203,
        "comment": "",
        "child_ranges": [
            "(line 176,col 9)-(line 176,col 55)",
            "(line 177,col 9)-(line 177,col 57)",
            "(line 178,col 9)-(line 202,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang.time.FastDateFormatTest.testFormat()",
        "snippet": "    public void testFormat() {}",
        "begin_line": 205,
        "end_line": 205,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang.time.FastDateFormatTest.testShortDateStyleWithLocales()",
        "snippet": "    public void testShortDateStyleWithLocales() {\n        Locale usLocale = Locale.US;\n        Locale swedishLocale = new Locale(\"sv\", \"SE\");\n        Calendar cal = Calendar.getInstance();\n        cal.set(2004, 1, 3);\n        FastDateFormat fdf = FastDateFormat.getDateInstance(FastDateFormat.SHORT, usLocale);\n        assertEquals(\"2/3/04\", fdf.format(cal));\n\n        fdf = FastDateFormat.getDateInstance(FastDateFormat.SHORT, swedishLocale);\n        assertEquals(\"2004-02-03\", fdf.format(cal));\n\n    }",
        "begin_line": 269,
        "end_line": 280,
        "comment": "\n     * Test case for {@link FastDateFormat#getDateInstance(int, java.util.Locale)}.\n     ",
        "child_ranges": [
            "(line 270,col 9)-(line 270,col 36)",
            "(line 271,col 9)-(line 271,col 54)",
            "(line 272,col 9)-(line 272,col 46)",
            "(line 273,col 9)-(line 273,col 28)",
            "(line 274,col 9)-(line 274,col 92)",
            "(line 275,col 9)-(line 275,col 48)",
            "(line 277,col 9)-(line 277,col 82)",
            "(line 278,col 9)-(line 278,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang.time.FastDateFormatTest.testLowYearPadding()",
        "snippet": "    public void testLowYearPadding() {\n        Calendar cal = Calendar.getInstance();\n        FastDateFormat format = FastDateFormat.getInstance(\"yyyy/MM/DD\");\n\n        cal.set(1,0,1);\n        assertEquals(\"0001/01/01\", format.format(cal));\n        cal.set(10,0,1);\n        assertEquals(\"0010/01/01\", format.format(cal));\n        cal.set(100,0,1);\n        assertEquals(\"0100/01/01\", format.format(cal));\n        cal.set(999,0,1);\n        assertEquals(\"0999/01/01\", format.format(cal));\n    }",
        "begin_line": 285,
        "end_line": 297,
        "comment": "\n     * Tests that pre-1000AD years get padded with yyyy\n     ",
        "child_ranges": [
            "(line 286,col 9)-(line 286,col 46)",
            "(line 287,col 9)-(line 287,col 73)",
            "(line 289,col 9)-(line 289,col 23)",
            "(line 290,col 9)-(line 290,col 55)",
            "(line 291,col 9)-(line 291,col 24)",
            "(line 292,col 9)-(line 292,col 55)",
            "(line 293,col 9)-(line 293,col 25)",
            "(line 294,col 9)-(line 294,col 55)",
            "(line 295,col 9)-(line 295,col 25)",
            "(line 296,col 9)-(line 296,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang.time.FastDateFormatTest.testMilleniumBug()",
        "snippet": "    public void testMilleniumBug() {\n        Calendar cal = Calendar.getInstance();\n        FastDateFormat format = FastDateFormat.getInstance(\"dd.MM.yyyy\");\n\n        cal.set(1000,0,1);\n        assertEquals(\"01.01.1000\", format.format(cal));\n    }",
        "begin_line": 301,
        "end_line": 307,
        "comment": "\n     * Show Bug #39410 is solved\n     ",
        "child_ranges": [
            "(line 302,col 9)-(line 302,col 46)",
            "(line 303,col 9)-(line 303,col 73)",
            "(line 305,col 9)-(line 305,col 26)",
            "(line 306,col 9)-(line 306,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang.time.FastDateFormatTest.testSimpleDate()",
        "snippet": "    public void testSimpleDate() {\n        Calendar cal = Calendar.getInstance();\n        FastDateFormat format = FastDateFormat.getInstance(\"yyyy/MM/dd\");\n\n        cal.set(2004,11,31);\n        assertEquals(\"2004/12/31\", format.format(cal));\n        cal.set(999,11,31);\n        assertEquals(\"0999/12/31\", format.format(cal));\n        cal.set(1,2,2);\n        assertEquals(\"0001/03/02\", format.format(cal));\n    }",
        "begin_line": 314,
        "end_line": 324,
        "comment": " TODO: Fix this problem",
        "child_ranges": [
            "(line 315,col 9)-(line 315,col 46)",
            "(line 316,col 9)-(line 316,col 73)",
            "(line 318,col 9)-(line 318,col 28)",
            "(line 319,col 9)-(line 319,col 55)",
            "(line 320,col 9)-(line 320,col 27)",
            "(line 321,col 9)-(line 321,col 55)",
            "(line 322,col 9)-(line 322,col 23)",
            "(line 323,col 9)-(line 323,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang.time.FastDateFormatTest.testLang303()",
        "snippet": "    public void testLang303() {\n        Calendar cal = Calendar.getInstance();\n        cal.set(2004,11,31);\n\n        FastDateFormat format = FastDateFormat.getInstance(\"yyyy/MM/dd\");\n        String output = format.format(cal);\n\n        format = (FastDateFormat) SerializationUtils.deserialize( SerializationUtils.serialize( format ) );\n        assertEquals(output, format.format(cal));\n    }",
        "begin_line": 326,
        "end_line": 335,
        "comment": "",
        "child_ranges": [
            "(line 327,col 9)-(line 327,col 46)",
            "(line 328,col 9)-(line 328,col 28)",
            "(line 330,col 9)-(line 330,col 73)",
            "(line 331,col 9)-(line 331,col 43)",
            "(line 333,col 9)-(line 333,col 107)",
            "(line 334,col 9)-(line 334,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ReflectionToStringBuilderExcludeTest.java",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest.test_toStringExclude()",
        "snippet": "    public void test_toStringExclude() {\n        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), SECRET_FIELD);\n        this.validateSecretFieldAbsent(toString);\n    }",
        "begin_line": 49,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 101)",
            "(line 51,col 9)-(line 51,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ReflectionToStringBuilderExcludeTest.java",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArray()",
        "snippet": "    public void test_toStringExcludeArray() {\n        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), new String[]{SECRET_FIELD});\n        this.validateSecretFieldAbsent(toString);\n    }",
        "begin_line": 54,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 115)",
            "(line 56,col 9)-(line 56,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ReflectionToStringBuilderExcludeTest.java",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArrayWithNull()",
        "snippet": "    public void test_toStringExcludeArrayWithNull() {\n        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), new String[]{null});\n        this.validateSecretFieldPresent(toString);\n    }",
        "begin_line": 59,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 107)",
            "(line 61,col 9)-(line 61,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ReflectionToStringBuilderExcludeTest.java",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArrayWithNulls()",
        "snippet": "    public void test_toStringExcludeArrayWithNulls() {\n        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), new String[]{null, null});\n        this.validateSecretFieldPresent(toString);\n    }",
        "begin_line": 64,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 113)",
            "(line 66,col 9)-(line 66,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ReflectionToStringBuilderExcludeTest.java",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollection()",
        "snippet": "    public void test_toStringExcludeCollection() {\n        List excludeList = new ArrayList();\n        excludeList.add(SECRET_FIELD);\n        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList);\n        this.validateSecretFieldAbsent(toString);\n    }",
        "begin_line": 69,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 43)",
            "(line 71,col 9)-(line 71,col 38)",
            "(line 72,col 9)-(line 72,col 100)",
            "(line 73,col 9)-(line 73,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ReflectionToStringBuilderExcludeTest.java",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollectionWithNull()",
        "snippet": "    public void test_toStringExcludeCollectionWithNull() {\n        List excludeList = new ArrayList();\n        excludeList.add(null);\n        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList);\n        this.validateSecretFieldPresent(toString);\n    }",
        "begin_line": 76,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 43)",
            "(line 78,col 9)-(line 78,col 30)",
            "(line 79,col 9)-(line 79,col 100)",
            "(line 80,col 9)-(line 80,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ReflectionToStringBuilderExcludeTest.java",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollectionWithNulls()",
        "snippet": "    public void test_toStringExcludeCollectionWithNulls() {\n        List excludeList = new ArrayList();\n        excludeList.add(null);\n        excludeList.add(null);\n        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList);\n        this.validateSecretFieldPresent(toString);\n    }",
        "begin_line": 83,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 43)",
            "(line 85,col 9)-(line 85,col 30)",
            "(line 86,col 9)-(line 86,col 30)",
            "(line 87,col 9)-(line 87,col 100)",
            "(line 88,col 9)-(line 88,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ReflectionToStringBuilderExcludeTest.java",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeEmptyArray()",
        "snippet": "    public void test_toStringExcludeEmptyArray() {\n        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), ArrayUtils.EMPTY_STRING_ARRAY);\n        this.validateSecretFieldPresent(toString);\n    }",
        "begin_line": 91,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 118)",
            "(line 93,col 9)-(line 93,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ReflectionToStringBuilderExcludeTest.java",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeEmptyCollection()",
        "snippet": "    public void test_toStringExcludeEmptyCollection() {\n        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), new ArrayList());\n        this.validateSecretFieldPresent(toString);\n    }",
        "begin_line": 96,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 104)",
            "(line 98,col 9)-(line 98,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ReflectionToStringBuilderExcludeTest.java",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeNullArray()",
        "snippet": "    public void test_toStringExcludeNullArray() {\n        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), (String[]) null);\n        this.validateSecretFieldPresent(toString);\n    }",
        "begin_line": 101,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 104)",
            "(line 103,col 9)-(line 103,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ReflectionToStringBuilderExcludeTest.java",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeNullCollection()",
        "snippet": "    public void test_toStringExcludeNullCollection() {\n        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), (Collection) null);\n        this.validateSecretFieldPresent(toString);\n    }",
        "begin_line": 106,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 106)",
            "(line 108,col 9)-(line 108,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ReflectionToStringBuilderExcludeTest.java",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest.validateNonSecretField(java.lang.String)",
        "snippet": "    private void validateNonSecretField(String toString) {\n        Assert.assertTrue(toString.indexOf(NOT_SECRET_FIELD) > ArrayUtils.INDEX_NOT_FOUND);\n        Assert.assertTrue(toString.indexOf(NOT_SECRET_VALUE) > ArrayUtils.INDEX_NOT_FOUND);\n    }",
        "begin_line": 111,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 91)",
            "(line 113,col 9)-(line 113,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ReflectionToStringBuilderExcludeTest.java",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest.validateSecretFieldAbsent(java.lang.String)",
        "snippet": "    private void validateSecretFieldAbsent(String toString) {\n        Assert.assertEquals(ArrayUtils.INDEX_NOT_FOUND, toString.indexOf(SECRET_VALUE));\n        this.validateNonSecretField(toString);\n    }",
        "begin_line": 116,
        "end_line": 119,
        "comment": "",
        "child_ranges": [
            "(line 117,col 9)-(line 117,col 88)",
            "(line 118,col 9)-(line 118,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ReflectionToStringBuilderExcludeTest.java",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest.validateSecretFieldPresent(java.lang.String)",
        "snippet": "    private void validateSecretFieldPresent(String toString) {\n        Assert.assertTrue(toString.indexOf(SECRET_VALUE) > 0);\n        this.validateNonSecretField(toString);\n    }",
        "begin_line": 121,
        "end_line": 124,
        "comment": "",
        "child_ranges": [
            "(line 122,col 9)-(line 122,col 62)",
            "(line 123,col 9)-(line 123,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.MultiLineToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/MultiLineToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.MultiLineToStringStyleTest.MultiLineToStringStyleTest(java.lang.String)",
        "snippet": "    public MultiLineToStringStyleTest(String name) {\n        super(name);\n    }",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.MultiLineToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/MultiLineToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.MultiLineToStringStyleTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 45,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.MultiLineToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/MultiLineToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.MultiLineToStringStyleTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(MultiLineToStringStyleTest.class);\n        suite.setName(\"MultiLineToStringStyle Tests\");\n        return suite;\n    }",
        "begin_line": 49,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 74)",
            "(line 51,col 9)-(line 51,col 54)",
            "(line 52,col 9)-(line 52,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.MultiLineToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/MultiLineToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.MultiLineToStringStyleTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        super.setUp();\n        ToStringBuilder.setDefaultStyle(ToStringStyle.MULTI_LINE_STYLE);\n    }",
        "begin_line": 55,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 22)",
            "(line 57,col 9)-(line 57,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.MultiLineToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/MultiLineToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.MultiLineToStringStyleTest.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        super.tearDown();\n        ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);\n    }",
        "begin_line": 60,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 25)",
            "(line 62,col 9)-(line 62,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.MultiLineToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/MultiLineToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.MultiLineToStringStyleTest.testBlank()",
        "snippet": "    public void testBlank() {\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).toString());\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 109)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.MultiLineToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/MultiLineToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.MultiLineToStringStyleTest.testAppendSuper()",
        "snippet": "    public void testAppendSuper() {\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[\" + SystemUtils.LINE_SEPARATOR + \"]\").toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\").toString());\n        \n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=hello\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[\" + SystemUtils.LINE_SEPARATOR + \"]\").append(\"a\", \"hello\").toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"  a=hello\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\").append(\"a\", \"hello\").toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=hello\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).appendSuper(null).append(\"a\", \"hello\").toString());\n    }",
        "begin_line": 71,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 173)",
            "(line 73,col 9)-(line 73,col 257)",
            "(line 75,col 9)-(line 75,col 237)",
            "(line 76,col 9)-(line 76,col 321)",
            "(line 77,col 9)-(line 77,col 191)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.MultiLineToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/MultiLineToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.MultiLineToStringStyleTest.testObject()",
        "snippet": "    public void testObject() {\n        Integer i3 = new Integer(3);\n        Integer i4 = new Integer(4);\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append((Object) null).toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  3\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(i3).toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=<null>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=3\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", i3).toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=3\" + SystemUtils.LINE_SEPARATOR + \"  b=4\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=<Integer>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=<size=0>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", new ArrayList(), false).toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=[]\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", new ArrayList(), true).toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=<size=0>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", new HashMap(), false).toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a={}\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", new HashMap(), true).toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=<size=0>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], false).toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a={}\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).toString());\n    }",
        "begin_line": 80,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 36)",
            "(line 82,col 9)-(line 82,col 36)",
            "(line 83,col 9)-(line 83,col 173)",
            "(line 84,col 9)-(line 84,col 157)",
            "(line 85,col 9)-(line 85,col 180)",
            "(line 86,col 9)-(line 86,col 164)",
            "(line 87,col 9)-(line 87,col 219)",
            "(line 88,col 9)-(line 88,col 179)",
            "(line 89,col 9)-(line 89,col 191)",
            "(line 90,col 9)-(line 90,col 184)",
            "(line 91,col 9)-(line 91,col 189)",
            "(line 92,col 9)-(line 92,col 182)",
            "(line 93,col 9)-(line 93,col 198)",
            "(line 94,col 9)-(line 94,col 191)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.MultiLineToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/MultiLineToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.MultiLineToStringStyleTest.testPerson()",
        "snippet": "    public void testPerson() {\n        Person p = new Person();\n        p.name = \"Jane Doe\";\n        p.age = 25;\n        p.smoker = true;\n        String pBaseStr = p.getClass().getName() + \"@\" + Integer.toHexString(System.identityHashCode(p));\n        assertEquals(pBaseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  name=Jane Doe\" + SystemUtils.LINE_SEPARATOR + \"  age=25\" + SystemUtils.LINE_SEPARATOR + \"  smoker=true\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(p).append(\"name\", p.name).append(\"age\", p.age).append(\"smoker\", p.smoker).toString());\n    }",
        "begin_line": 97,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 32)",
            "(line 99,col 9)-(line 99,col 28)",
            "(line 100,col 9)-(line 100,col 19)",
            "(line 101,col 9)-(line 101,col 24)",
            "(line 102,col 9)-(line 102,col 105)",
            "(line 103,col 9)-(line 103,col 316)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.MultiLineToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/MultiLineToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.MultiLineToStringStyleTest.testLong()",
        "snippet": "    public void testLong() {\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  3\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(3L).toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=3\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", 3L).toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=3\" + SystemUtils.LINE_SEPARATOR + \"  b=4\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", 3L).append(\"b\", 4L).toString());\n    }",
        "begin_line": 106,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 157)",
            "(line 108,col 9)-(line 108,col 164)",
            "(line 109,col 9)-(line 109,col 219)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.MultiLineToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/MultiLineToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.MultiLineToStringStyleTest.testObjectArray()",
        "snippet": "    public void testObjectArray() {\n        Object[] array = new Object[] {null, base, new int[] {3, 6}};\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  {<null>,5,{3,6}}\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  {<null>,5,{3,6}}\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 112,
        "end_line": 119,
        "comment": "",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 69)",
            "(line 114,col 9)-(line 114,col 175)",
            "(line 115,col 9)-(line 115,col 184)",
            "(line 116,col 9)-(line 116,col 21)",
            "(line 117,col 9)-(line 117,col 165)",
            "(line 118,col 9)-(line 118,col 174)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.MultiLineToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/MultiLineToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.MultiLineToStringStyleTest.testLongArray()",
        "snippet": "    public void testLongArray() {\n        long[] array = new long[] {1, 2, -3, 4};\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  {1,2,-3,4}\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  {1,2,-3,4}\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 121,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 122,col 9)-(line 122,col 48)",
            "(line 123,col 9)-(line 123,col 169)",
            "(line 124,col 9)-(line 124,col 178)",
            "(line 125,col 9)-(line 125,col 21)",
            "(line 126,col 9)-(line 126,col 165)",
            "(line 127,col 9)-(line 127,col 174)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.MultiLineToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/MultiLineToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.MultiLineToStringStyleTest.testLongArrayArray()",
        "snippet": "    public void testLongArrayArray() {\n        long[][] array = new long[][] {{1, 2}, null, {5}};\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  {{1,2},<null>,{5}}\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  {{1,2},<null>,{5}}\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 130,
        "end_line": 137,
        "comment": "",
        "child_ranges": [
            "(line 131,col 9)-(line 131,col 58)",
            "(line 132,col 9)-(line 132,col 177)",
            "(line 133,col 9)-(line 133,col 186)",
            "(line 134,col 9)-(line 134,col 21)",
            "(line 135,col 9)-(line 135,col 165)",
            "(line 136,col 9)-(line 136,col 174)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderAndEqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest.HashCodeBuilderAndEqualsBuilderTest(java.lang.String)",
        "snippet": "    public HashCodeBuilderAndEqualsBuilderTest(String name) {\n        super(name);\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "\n     * Constructor for HashCodeBuilderAndEqualsBuilderTest.\n     * @param name\n     ",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderAndEqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderAndEqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(HashCodeBuilderAndEqualsBuilderTest.class);\n        suite.setName(\"HashCodeBuilderAndEqualsBuilder Tests\");\n        return suite;\n    }",
        "begin_line": 46,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 83)",
            "(line 48,col 9)-(line 48,col 63)",
            "(line 49,col 9)-(line 49,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderAndEqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        super.setUp();\n    }",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderAndEqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        super.tearDown();\n    }",
        "begin_line": 56,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderAndEqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest.testInteger(boolean)",
        "snippet": "    public void testInteger(boolean testTransients) {\n        Integer i1 = new Integer(12345);\n        Integer i2 = new Integer(12345);\n        assertEqualsAndHashCodeContract(i1, i2, testTransients);\n    }",
        "begin_line": 62,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 40)",
            "(line 64,col 9)-(line 64,col 40)",
            "(line 65,col 9)-(line 65,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderAndEqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest.testInteger()",
        "snippet": "    public void testInteger() {\n        testInteger(false);\n    }",
        "begin_line": 68,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderAndEqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest.testIntegerWithTransients()",
        "snippet": "    public void testIntegerWithTransients() {\n        testInteger(true);\n    }",
        "begin_line": 72,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderAndEqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest.testFixture()",
        "snippet": "    public void testFixture() {\n        testFixture(false);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderAndEqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest.testFixtureWithTransients()",
        "snippet": "    public void testFixtureWithTransients() {\n        testFixture(true);\n    }",
        "begin_line": 80,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderAndEqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest.testFixture(boolean)",
        "snippet": "    public void testFixture(boolean testTransients) {\n        assertEqualsAndHashCodeContract(new TestFixture(2, 'c', \"Test\", (short) 2), new TestFixture(2, 'c', \"Test\", (short) 2), testTransients);\n        assertEqualsAndHashCodeContract(\n            new AllTransientFixture(2, 'c', \"Test\", (short) 2),\n            new AllTransientFixture(2, 'c', \"Test\", (short) 2),\n            testTransients);\n        assertEqualsAndHashCodeContract(\n            new SubTestFixture(2, 'c', \"Test\", (short) 2, \"Same\"),\n            new SubTestFixture(2, 'c', \"Test\", (short) 2, \"Same\"),\n            testTransients);\n        assertEqualsAndHashCodeContract(\n            new SubAllTransientFixture(2, 'c', \"Test\", (short) 2, \"Same\"),\n            new SubAllTransientFixture(2, 'c', \"Test\", (short) 2, \"Same\"),\n            testTransients);\n    }",
        "begin_line": 84,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 144)",
            "(line 86,col 9)-(line 89,col 28)",
            "(line 90,col 9)-(line 93,col 28)",
            "(line 94,col 9)-(line 97,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderAndEqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest.assertEqualsAndHashCodeContract(java.lang.Object, java.lang.Object, boolean)",
        "snippet": "    public void assertEqualsAndHashCodeContract(Object lhs, Object rhs, boolean testTransients) {\n        if (EqualsBuilder.reflectionEquals(lhs, rhs, testTransients)) {\n            // test a couple of times for consistency.\n            assertEquals(HashCodeBuilder.reflectionHashCode(lhs, testTransients), HashCodeBuilder.reflectionHashCode(rhs, testTransients));\n            assertEquals(HashCodeBuilder.reflectionHashCode(lhs, testTransients), HashCodeBuilder.reflectionHashCode(rhs, testTransients));\n            assertEquals(HashCodeBuilder.reflectionHashCode(lhs, testTransients), HashCodeBuilder.reflectionHashCode(rhs, testTransients));\n        }\n    }",
        "begin_line": 108,
        "end_line": 115,
        "comment": "\n     * Asserts that if <code>lhs</code> equals <code>rhs</code> \n     * then their hash codes MUST be identical.\n     * \n     * @param lhs The Left-Hand-Side of the equals test\n     * @param rhs The Right-Hand-Side of the equals test\n     * @param testTransients wether to test transient fields\n     ",
        "child_ranges": [
            "(line 109,col 9)-(line 114,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderAndEqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest.TestFixture.TestFixture(int, char, java.lang.String, short)",
        "snippet": "        TestFixture(int i, char c, String string, short s) {\n            this.i = i;\n            this.c = c;\n            this.string = string;\n            this.s = s;\n        }",
        "begin_line": 123,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 124,col 13)-(line 124,col 23)",
            "(line 125,col 13)-(line 125,col 23)",
            "(line 126,col 13)-(line 126,col 33)",
            "(line 127,col 13)-(line 127,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderAndEqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest.SubTestFixture.SubTestFixture(int, char, java.lang.String, short, java.lang.String)",
        "snippet": "        SubTestFixture(int i, char c, String string, short s, String tString) {\n            super(i, c, string, s);\n            this.tString = tString;\n        }",
        "begin_line": 134,
        "end_line": 137,
        "comment": "",
        "child_ranges": [
            "(line 135,col 13)-(line 135,col 35)",
            "(line 136,col 13)-(line 136,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderAndEqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest.AllTransientFixture.AllTransientFixture(int, char, java.lang.String, short)",
        "snippet": "        AllTransientFixture(int i, char c, String string, short s) {\n            this.i = i;\n            this.c = c;\n            this.string = string;\n            this.s = s;\n        }",
        "begin_line": 146,
        "end_line": 151,
        "comment": "",
        "child_ranges": [
            "(line 147,col 13)-(line 147,col 23)",
            "(line 148,col 13)-(line 148,col 23)",
            "(line 149,col 13)-(line 149,col 33)",
            "(line 150,col 13)-(line 150,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderAndEqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest.SubAllTransientFixture.SubAllTransientFixture(int, char, java.lang.String, short, java.lang.String)",
        "snippet": "        SubAllTransientFixture(int i, char c, String string, short s, String tString) {\n            super(i, c, string, s);\n            this.tString = tString;\n        }",
        "begin_line": 157,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 158,col 13)-(line 158,col 35)",
            "(line 159,col 13)-(line 159,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.ToStringBuilderTest(java.lang.String)",
        "snippet": "    public ToStringBuilderTest(String name) {\n        super(name);\n    }",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 45,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(ToStringBuilderTest.class);\n        suite.setName(\"ToStringBuilder Tests\");\n        return suite;\n    }",
        "begin_line": 49,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 67)",
            "(line 51,col 9)-(line 51,col 47)",
            "(line 52,col 9)-(line 52,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        super.setUp();\n    }",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        super.tearDown();\n    }",
        "begin_line": 59,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testConstructorEx1()",
        "snippet": "    public void testConstructorEx1() {\n        assertEquals(\"<null>\", new ToStringBuilder(null).toString());\n    }",
        "begin_line": 65,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testConstructorEx2()",
        "snippet": "    public void testConstructorEx2() {\n        assertEquals(\"<null>\", new ToStringBuilder(null, null).toString());\n        new ToStringBuilder(this.base, null).toString();\n    }",
        "begin_line": 69,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 75)",
            "(line 71,col 9)-(line 71,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testConstructorEx3()",
        "snippet": "    public void testConstructorEx3() {\n        assertEquals(\"<null>\", new ToStringBuilder(null, null, null).toString());\n        new ToStringBuilder(this.base, null, null);\n        new ToStringBuilder(this.base, ToStringStyle.DEFAULT_STYLE, null);\n    }",
        "begin_line": 74,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 81)",
            "(line 76,col 9)-(line 76,col 51)",
            "(line 77,col 9)-(line 77,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testGetSetDefault()",
        "snippet": "    public void testGetSetDefault() {\n        try {\n            ToStringBuilder.setDefaultStyle(ToStringStyle.NO_FIELD_NAMES_STYLE);\n            assertSame(ToStringStyle.NO_FIELD_NAMES_STYLE, ToStringBuilder.getDefaultStyle());\n        } finally {\n            // reset for other tests\n            ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);\n        }\n    }",
        "begin_line": 80,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 81,col 9)-(line 87,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testSetDefaultEx()",
        "snippet": "    public void testSetDefaultEx() {\n        try {\n            ToStringBuilder.setDefaultStyle(null);\n            \n        } catch (IllegalArgumentException ex) {\n            return;\n        }\n        fail();\n    }",
        "begin_line": 90,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 91,col 9)-(line 96,col 9)",
            "(line 97,col 9)-(line 97,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testBlank()",
        "snippet": "    public void testBlank() {\n        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).toString());\n    }",
        "begin_line": 100,
        "end_line": 102,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionInteger()",
        "snippet": "    public void testReflectionInteger() {\n        assertEquals(baseStr + \"[value=5]\", ToStringBuilder.reflectionToString(base));\n    }",
        "begin_line": 107,
        "end_line": 109,
        "comment": "\n     * Test wrapper for int primitive.\n     ",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionCharacter()",
        "snippet": "    public void testReflectionCharacter() {\n        Character c = new Character('A');\n        assertEquals(this.toBaseString(c) + \"[value=A]\", ToStringBuilder.reflectionToString(c));\n    }",
        "begin_line": 114,
        "end_line": 117,
        "comment": "\n     * Test wrapper for char primitive.\n     ",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 41)",
            "(line 116,col 9)-(line 116,col 96)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionBoolean()",
        "snippet": "    public void testReflectionBoolean() {\n        Boolean b;\n        b = Boolean.TRUE;\n        assertEquals(this.toBaseString(b) + \"[value=true]\", ToStringBuilder.reflectionToString(b));\n        b = Boolean.FALSE;\n        assertEquals(this.toBaseString(b) + \"[value=false]\", ToStringBuilder.reflectionToString(b));\n    }",
        "begin_line": 122,
        "end_line": 128,
        "comment": "\n     * Test wrapper for char boolean.\n     ",
        "child_ranges": [
            "(line 123,col 9)-(line 123,col 18)",
            "(line 124,col 9)-(line 124,col 25)",
            "(line 125,col 9)-(line 125,col 99)",
            "(line 126,col 9)-(line 126,col 26)",
            "(line 127,col 9)-(line 127,col 100)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.toBaseString(java.lang.Object)",
        "snippet": "    private String toBaseString(Object o) {\n        return o.getClass().getName() + \"@\" + Integer.toHexString(System.identityHashCode(o));\n    }",
        "begin_line": 135,
        "end_line": 137,
        "comment": "\n     * Create the same toString() as Object.toString().\n     * @param o the object to create the string for.\n     * @return a String in the Object.toString format.\n     ",
        "child_ranges": [
            "(line 136,col 9)-(line 136,col 94)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.assertReflectionArray(java.lang.String, java.lang.Object)",
        "snippet": "    public void assertReflectionArray(String expected, Object actual) {\n        if (actual == null) {\n            // Until ToStringBuilder supports null objects.\n            return;\n        }\n        assertEquals(expected, ToStringBuilder.reflectionToString(actual));\n        assertEquals(expected, ToStringBuilder.reflectionToString(actual, null));\n        assertEquals(expected, ToStringBuilder.reflectionToString(actual, null, true));\n        assertEquals(expected, ToStringBuilder.reflectionToString(actual, null, false));\n    }",
        "begin_line": 154,
        "end_line": 163,
        "comment": "",
        "child_ranges": [
            "(line 155,col 9)-(line 158,col 9)",
            "(line 159,col 9)-(line 159,col 75)",
            "(line 160,col 9)-(line 160,col 81)",
            "(line 161,col 9)-(line 161,col 87)",
            "(line 162,col 9)-(line 162,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionObjectArray()",
        "snippet": "    public void testReflectionObjectArray() {\n        Object[] array = new Object[] { null, base, new int[] { 3, 6 } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateEmptyToStringStyleRegistry();\n    }",
        "begin_line": 165,
        "end_line": 172,
        "comment": "",
        "child_ranges": [
            "(line 166,col 9)-(line 166,col 73)",
            "(line 167,col 9)-(line 167,col 50)",
            "(line 168,col 9)-(line 168,col 96)",
            "(line 169,col 9)-(line 169,col 21)",
            "(line 170,col 9)-(line 170,col 47)",
            "(line 171,col 9)-(line 171,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionLongArray()",
        "snippet": "    public void testReflectionLongArray() {\n        long[] array = new long[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateEmptyToStringStyleRegistry();\n    }",
        "begin_line": 174,
        "end_line": 181,
        "comment": "",
        "child_ranges": [
            "(line 175,col 9)-(line 175,col 50)",
            "(line 176,col 9)-(line 176,col 50)",
            "(line 177,col 9)-(line 177,col 90)",
            "(line 178,col 9)-(line 178,col 21)",
            "(line 179,col 9)-(line 179,col 47)",
            "(line 180,col 9)-(line 180,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionIntArray()",
        "snippet": "    public void testReflectionIntArray() {\n        int[] array = new int[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateEmptyToStringStyleRegistry();\n    }",
        "begin_line": 183,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 184,col 9)-(line 184,col 48)",
            "(line 185,col 9)-(line 185,col 50)",
            "(line 186,col 9)-(line 186,col 90)",
            "(line 187,col 9)-(line 187,col 21)",
            "(line 188,col 9)-(line 188,col 47)",
            "(line 189,col 9)-(line 189,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionShortArray()",
        "snippet": "    public void testReflectionShortArray() {\n        short[] array = new short[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateEmptyToStringStyleRegistry();\n    }",
        "begin_line": 192,
        "end_line": 199,
        "comment": "",
        "child_ranges": [
            "(line 193,col 9)-(line 193,col 52)",
            "(line 194,col 9)-(line 194,col 50)",
            "(line 195,col 9)-(line 195,col 90)",
            "(line 196,col 9)-(line 196,col 21)",
            "(line 197,col 9)-(line 197,col 47)",
            "(line 198,col 9)-(line 198,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionyteArray()",
        "snippet": "    public void testReflectionyteArray() {\n        byte[] array = new byte[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateEmptyToStringStyleRegistry();\n    }",
        "begin_line": 201,
        "end_line": 208,
        "comment": "",
        "child_ranges": [
            "(line 202,col 9)-(line 202,col 50)",
            "(line 203,col 9)-(line 203,col 50)",
            "(line 204,col 9)-(line 204,col 90)",
            "(line 205,col 9)-(line 205,col 21)",
            "(line 206,col 9)-(line 206,col 47)",
            "(line 207,col 9)-(line 207,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionCharArray()",
        "snippet": "    public void testReflectionCharArray() {\n        char[] array = new char[] { 'A', '2', '_', 'D' };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{A,2,_,D}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateEmptyToStringStyleRegistry();\n    }",
        "begin_line": 210,
        "end_line": 217,
        "comment": "",
        "child_ranges": [
            "(line 211,col 9)-(line 211,col 57)",
            "(line 212,col 9)-(line 212,col 50)",
            "(line 213,col 9)-(line 213,col 89)",
            "(line 214,col 9)-(line 214,col 21)",
            "(line 215,col 9)-(line 215,col 47)",
            "(line 216,col 9)-(line 216,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionDoubleArray()",
        "snippet": "    public void testReflectionDoubleArray() {\n        double[] array = new double[] { 1.0, 2.9876, -3.00001, 4.3 };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateEmptyToStringStyleRegistry();\n    }",
        "begin_line": 219,
        "end_line": 226,
        "comment": "",
        "child_ranges": [
            "(line 220,col 9)-(line 220,col 69)",
            "(line 221,col 9)-(line 221,col 50)",
            "(line 222,col 9)-(line 222,col 105)",
            "(line 223,col 9)-(line 223,col 21)",
            "(line 224,col 9)-(line 224,col 47)",
            "(line 225,col 9)-(line 225,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionFloatArray()",
        "snippet": "    public void testReflectionFloatArray() {\n        float[] array = new float[] { 1.0f, 2.9876f, -3.00001f, 4.3f };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateEmptyToStringStyleRegistry();\n    }",
        "begin_line": 228,
        "end_line": 235,
        "comment": "",
        "child_ranges": [
            "(line 229,col 9)-(line 229,col 71)",
            "(line 230,col 9)-(line 230,col 50)",
            "(line 231,col 9)-(line 231,col 105)",
            "(line 232,col 9)-(line 232,col 21)",
            "(line 233,col 9)-(line 233,col 47)",
            "(line 234,col 9)-(line 234,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionBooleanArray()",
        "snippet": "    public void testReflectionBooleanArray() {\n        boolean[] array = new boolean[] { true, false, false };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{true,false,false}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateEmptyToStringStyleRegistry();\n    }",
        "begin_line": 237,
        "end_line": 244,
        "comment": "",
        "child_ranges": [
            "(line 238,col 9)-(line 238,col 63)",
            "(line 239,col 9)-(line 239,col 50)",
            "(line 240,col 9)-(line 240,col 98)",
            "(line 241,col 9)-(line 241,col 21)",
            "(line 242,col 9)-(line 242,col 47)",
            "(line 243,col 9)-(line 243,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionFloatArrayArray()",
        "snippet": "    public void testReflectionFloatArrayArray() {\n        float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateEmptyToStringStyleRegistry();\n    }",
        "begin_line": 248,
        "end_line": 255,
        "comment": "",
        "child_ranges": [
            "(line 249,col 9)-(line 249,col 84)",
            "(line 250,col 9)-(line 250,col 50)",
            "(line 251,col 9)-(line 251,col 108)",
            "(line 252,col 9)-(line 252,col 21)",
            "(line 253,col 9)-(line 253,col 47)",
            "(line 254,col 9)-(line 254,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionLongArrayArray()",
        "snippet": "    public void testReflectionLongArrayArray() {\n        long[][] array = new long[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateEmptyToStringStyleRegistry();\n    }",
        "begin_line": 258,
        "end_line": 265,
        "comment": "",
        "child_ranges": [
            "(line 259,col 9)-(line 259,col 64)",
            "(line 260,col 9)-(line 260,col 50)",
            "(line 261,col 9)-(line 261,col 98)",
            "(line 262,col 9)-(line 262,col 21)",
            "(line 263,col 9)-(line 263,col 47)",
            "(line 264,col 9)-(line 264,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionIntArrayArray()",
        "snippet": "    public void testReflectionIntArrayArray() {\n        int[][] array = new int[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateEmptyToStringStyleRegistry();\n    }",
        "begin_line": 267,
        "end_line": 274,
        "comment": "",
        "child_ranges": [
            "(line 268,col 9)-(line 268,col 62)",
            "(line 269,col 9)-(line 269,col 50)",
            "(line 270,col 9)-(line 270,col 98)",
            "(line 271,col 9)-(line 271,col 21)",
            "(line 272,col 9)-(line 272,col 47)",
            "(line 273,col 9)-(line 273,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionhortArrayArray()",
        "snippet": "    public void testReflectionhortArrayArray() {\n        short[][] array = new short[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateEmptyToStringStyleRegistry();\n    }",
        "begin_line": 276,
        "end_line": 283,
        "comment": "",
        "child_ranges": [
            "(line 277,col 9)-(line 277,col 66)",
            "(line 278,col 9)-(line 278,col 50)",
            "(line 279,col 9)-(line 279,col 98)",
            "(line 280,col 9)-(line 280,col 21)",
            "(line 281,col 9)-(line 281,col 47)",
            "(line 282,col 9)-(line 282,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionByteArrayArray()",
        "snippet": "    public void testReflectionByteArrayArray() {\n        byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateEmptyToStringStyleRegistry();\n    }",
        "begin_line": 285,
        "end_line": 292,
        "comment": "",
        "child_ranges": [
            "(line 286,col 9)-(line 286,col 64)",
            "(line 287,col 9)-(line 287,col 50)",
            "(line 288,col 9)-(line 288,col 98)",
            "(line 289,col 9)-(line 289,col 21)",
            "(line 290,col 9)-(line 290,col 47)",
            "(line 291,col 9)-(line 291,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionCharArrayArray()",
        "snippet": "    public void testReflectionCharArrayArray() {\n        char[][] array = new char[][] { { 'A', 'B' }, null, { 'p' } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{A,B},<null>,{p}}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateEmptyToStringStyleRegistry();\n    }",
        "begin_line": 294,
        "end_line": 301,
        "comment": "",
        "child_ranges": [
            "(line 295,col 9)-(line 295,col 70)",
            "(line 296,col 9)-(line 296,col 50)",
            "(line 297,col 9)-(line 297,col 98)",
            "(line 298,col 9)-(line 298,col 21)",
            "(line 299,col 9)-(line 299,col 47)",
            "(line 300,col 9)-(line 300,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionDoubleArrayArray()",
        "snippet": "    public void testReflectionDoubleArrayArray() {\n        double[][] array = new double[][] { { 1.0, 2.29686 }, null, { Double.NaN } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateEmptyToStringStyleRegistry();\n    }",
        "begin_line": 303,
        "end_line": 310,
        "comment": "",
        "child_ranges": [
            "(line 304,col 9)-(line 304,col 85)",
            "(line 305,col 9)-(line 305,col 50)",
            "(line 306,col 9)-(line 306,col 108)",
            "(line 307,col 9)-(line 307,col 21)",
            "(line 308,col 9)-(line 308,col 47)",
            "(line 309,col 9)-(line 309,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionBooleanArrayArray()",
        "snippet": "    public void testReflectionBooleanArrayArray() {\n        boolean[][] array = new boolean[][] { { true, false }, null, { false } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", ToStringBuilder.reflectionToString(array));\n        assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateEmptyToStringStyleRegistry();\n    }",
        "begin_line": 312,
        "end_line": 320,
        "comment": "",
        "child_ranges": [
            "(line 313,col 9)-(line 313,col 81)",
            "(line 314,col 9)-(line 314,col 50)",
            "(line 315,col 9)-(line 315,col 109)",
            "(line 316,col 9)-(line 316,col 109)",
            "(line 317,col 9)-(line 317,col 21)",
            "(line 318,col 9)-(line 318,col 47)",
            "(line 319,col 9)-(line 319,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionHierarchyArrayList()",
        "snippet": "    public void testReflectionHierarchyArrayList() {}",
        "begin_line": 324,
        "end_line": 324,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionHierarchy()",
        "snippet": "    public void testReflectionHierarchy() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));\n        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));\n        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));\n        assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));\n        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));\n        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));\n        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, List.class));\n        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));\n        \n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));\n        assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, List.class));\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));\n        assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));\n        this.validateEmptyToStringStyleRegistry();\n    }",
        "begin_line": 334,
        "end_line": 359,
        "comment": "",
        "child_ranges": [
            "(line 335,col 9)-(line 335,col 68)",
            "(line 336,col 9)-(line 336,col 50)",
            "(line 337,col 9)-(line 337,col 83)",
            "(line 338,col 9)-(line 338,col 89)",
            "(line 339,col 9)-(line 339,col 96)",
            "(line 340,col 9)-(line 340,col 108)",
            "(line 341,col 9)-(line 341,col 102)",
            "(line 342,col 9)-(line 342,col 110)",
            "(line 343,col 9)-(line 343,col 108)",
            "(line 344,col 9)-(line 344,col 126)",
            "(line 346,col 9)-(line 346,col 68)",
            "(line 347,col 9)-(line 347,col 43)",
            "(line 348,col 9)-(line 348,col 87)",
            "(line 349,col 9)-(line 349,col 87)",
            "(line 350,col 9)-(line 350,col 93)",
            "(line 351,col 9)-(line 351,col 100)",
            "(line 352,col 9)-(line 352,col 125)",
            "(line 353,col 9)-(line 353,col 106)",
            "(line 354,col 9)-(line 354,col 114)",
            "(line 355,col 9)-(line 355,col 112)",
            "(line 356,col 9)-(line 356,col 130)",
            "(line 357,col 9)-(line 357,col 126)",
            "(line 358,col 9)-(line 358,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testInnerClassReflection()",
        "snippet": "    public void testInnerClassReflection() {\n        Outer outer = new Outer();\n        assertEquals(toBaseString(outer) + \"[inner=\" + toBaseString(outer.inner) + \"[]]\", outer.toString());\n    }",
        "begin_line": 371,
        "end_line": 374,
        "comment": "",
        "child_ranges": [
            "(line 372,col 9)-(line 372,col 34)",
            "(line 373,col 9)-(line 373,col 108)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.Outer.Inner.toString()",
        "snippet": "            public String toString() {\n                return ToStringBuilder.reflectionToString(this);\n            }",
        "begin_line": 379,
        "end_line": 381,
        "comment": "",
        "child_ranges": [
            "(line 380,col 17)-(line 380,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.Outer.toString()",
        "snippet": "        public String toString() {\n            return ToStringBuilder.reflectionToString(this);\n        }",
        "begin_line": 383,
        "end_line": 385,
        "comment": "",
        "child_ranges": [
            "(line 384,col 13)-(line 384,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionArrayCycle()",
        "snippet": "    public void testReflectionArrayCycle() throws Exception {\n        Object[] objects = new Object[1];\n        objects[0] = objects;\n        assertEquals(\n            this.toBaseString(objects) + \"[{\" + this.toBaseString(objects) + \"}]\",\n            ToStringBuilder.reflectionToString(objects));\n        this.validateEmptyToStringStyleRegistry();\n    }",
        "begin_line": 393,
        "end_line": 400,
        "comment": "\n     * Test an array element pointing to its container.\n     ",
        "child_ranges": [
            "(line 394,col 9)-(line 394,col 41)",
            "(line 395,col 9)-(line 395,col 29)",
            "(line 396,col 9)-(line 398,col 57)",
            "(line 399,col 9)-(line 399,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionArrayCycleLevel2()",
        "snippet": "    public void testReflectionArrayCycleLevel2() throws Exception {\n        Object[] objects = new Object[1];\n        Object[] objectsLevel2 = new Object[1];\n        objects[0] = objectsLevel2;\n        objectsLevel2[0] = (Object) objects;\n        assertEquals(\n            this.toBaseString(objects) + \"[{{\" + this.toBaseString(objects) + \"}}]\",\n            ToStringBuilder.reflectionToString(objects));\n        assertEquals(\n            this.toBaseString(objectsLevel2) + \"[{{\" + this.toBaseString(objectsLevel2) + \"}}]\",\n            ToStringBuilder.reflectionToString(objectsLevel2));\n        this.validateEmptyToStringStyleRegistry();\n    }",
        "begin_line": 405,
        "end_line": 417,
        "comment": "\n     * Test an array element pointing to its container.\n     ",
        "child_ranges": [
            "(line 406,col 9)-(line 406,col 41)",
            "(line 407,col 9)-(line 407,col 47)",
            "(line 408,col 9)-(line 408,col 35)",
            "(line 409,col 9)-(line 409,col 44)",
            "(line 410,col 9)-(line 412,col 57)",
            "(line 413,col 9)-(line 415,col 63)",
            "(line 416,col 9)-(line 416,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionArrayArrayCycle()",
        "snippet": "    public void testReflectionArrayArrayCycle() throws Exception {\n        Object[][] objects = new Object[2][2];\n        objects[0][0] = objects;\n        objects[0][1] = objects;\n        objects[1][0] = objects;\n        objects[1][1] = objects;\n        String basicToString = this.toBaseString(objects);\n        assertEquals(\n            basicToString\n                + \"[{{\"\n                + basicToString\n                + \",\"\n                + basicToString\n                + \"},{\"\n                + basicToString\n                + \",\"\n                + basicToString\n                + \"}}]\",\n            ToStringBuilder.reflectionToString(objects));\n        this.validateEmptyToStringStyleRegistry();\n    }",
        "begin_line": 419,
        "end_line": 439,
        "comment": "",
        "child_ranges": [
            "(line 420,col 9)-(line 420,col 46)",
            "(line 421,col 9)-(line 421,col 32)",
            "(line 422,col 9)-(line 422,col 32)",
            "(line 423,col 9)-(line 423,col 32)",
            "(line 424,col 9)-(line 424,col 32)",
            "(line 425,col 9)-(line 425,col 58)",
            "(line 426,col 9)-(line 437,col 57)",
            "(line 438,col 9)-(line 438,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.ReflectionTestCycleA.toString()",
        "snippet": "        public String toString() {\n            return ToStringBuilder.reflectionToString(this);\n        }",
        "begin_line": 447,
        "end_line": 449,
        "comment": "",
        "child_ranges": [
            "(line 448,col 13)-(line 448,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.ReflectionTestCycleB.toString()",
        "snippet": "        public String toString() {\n            return ToStringBuilder.reflectionToString(this);\n        }",
        "begin_line": 458,
        "end_line": 460,
        "comment": "",
        "child_ranges": [
            "(line 459,col 13)-(line 459,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.SimpleReflectionTestFixture.SimpleReflectionTestFixture()",
        "snippet": "        public SimpleReflectionTestFixture() {\n        }",
        "begin_line": 469,
        "end_line": 470,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.SimpleReflectionTestFixture.SimpleReflectionTestFixture(java.lang.Object)",
        "snippet": "        public SimpleReflectionTestFixture(Object o) {\n            this.o = o;\n        }",
        "begin_line": 472,
        "end_line": 474,
        "comment": "",
        "child_ranges": [
            "(line 473,col 13)-(line 473,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.SimpleReflectionTestFixture.toString()",
        "snippet": "        public String toString() {\n            return ToStringBuilder.reflectionToString(this);\n        }",
        "begin_line": 476,
        "end_line": 478,
        "comment": "",
        "child_ranges": [
            "(line 477,col 13)-(line 477,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.SelfInstanceVarReflectionTestFixture.SelfInstanceVarReflectionTestFixture()",
        "snippet": "        public SelfInstanceVarReflectionTestFixture() {\n            this.typeIsSelf = this;\n        }",
        "begin_line": 484,
        "end_line": 486,
        "comment": "",
        "child_ranges": [
            "(line 485,col 13)-(line 485,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.SelfInstanceVarReflectionTestFixture.toString()",
        "snippet": "        public String toString() {\n            return ToStringBuilder.reflectionToString(this);\n        }",
        "begin_line": 488,
        "end_line": 490,
        "comment": "",
        "child_ranges": [
            "(line 489,col 13)-(line 489,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.SelfInstanceTwoVarsReflectionTestFixture.SelfInstanceTwoVarsReflectionTestFixture()",
        "snippet": "        public SelfInstanceTwoVarsReflectionTestFixture() {\n            this.typeIsSelf = this;\n        }",
        "begin_line": 497,
        "end_line": 499,
        "comment": "",
        "child_ranges": [
            "(line 498,col 13)-(line 498,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.SelfInstanceTwoVarsReflectionTestFixture.getOtherType()",
        "snippet": "        public String getOtherType(){\n            return this.otherType;\n        }",
        "begin_line": 501,
        "end_line": 503,
        "comment": "",
        "child_ranges": [
            "(line 502,col 13)-(line 502,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.SelfInstanceTwoVarsReflectionTestFixture.toString()",
        "snippet": "        public String toString() {\n            return ToStringBuilder.reflectionToString(this);\n        }",
        "begin_line": 505,
        "end_line": 507,
        "comment": "",
        "child_ranges": [
            "(line 506,col 13)-(line 506,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testSimpleReflectionObjectCycle()",
        "snippet": "    public void testSimpleReflectionObjectCycle() throws Exception {\n        SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture();\n        simple.o = simple;\n        assertTrue(ToStringStyle.getRegistry().isEmpty());\n        assertEquals(this.toBaseString(simple) + \"[o=\" + this.toBaseString(simple) + \"]\", simple.toString());\n        this.validateEmptyToStringStyleRegistry();\n    }",
        "begin_line": 516,
        "end_line": 522,
        "comment": "\n     * Test an Object pointing to itself, the simplest test.\n     * \n     * @throws Exception\n     ",
        "child_ranges": [
            "(line 517,col 9)-(line 517,col 79)",
            "(line 518,col 9)-(line 518,col 26)",
            "(line 519,col 9)-(line 519,col 58)",
            "(line 520,col 9)-(line 520,col 109)",
            "(line 521,col 9)-(line 521,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testSelfInstanceVarReflectionObjectCycle()",
        "snippet": "    public void testSelfInstanceVarReflectionObjectCycle() throws Exception {\n        SelfInstanceVarReflectionTestFixture test = new SelfInstanceVarReflectionTestFixture();\n        assertTrue(ToStringStyle.getRegistry().isEmpty());\n        assertEquals(this.toBaseString(test) + \"[typeIsSelf=\" + this.toBaseString(test) + \"]\", test.toString());\n        this.validateEmptyToStringStyleRegistry();\n    }",
        "begin_line": 529,
        "end_line": 534,
        "comment": "\n     * Test a class that defines an ivar pointing to itself.\n     * \n     * @throws Exception\n     ",
        "child_ranges": [
            "(line 530,col 9)-(line 530,col 95)",
            "(line 531,col 9)-(line 531,col 58)",
            "(line 532,col 9)-(line 532,col 112)",
            "(line 533,col 9)-(line 533,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testSelfInstanceTwoVarsReflectionObjectCycle()",
        "snippet": "    public void testSelfInstanceTwoVarsReflectionObjectCycle() throws Exception {\n        SelfInstanceTwoVarsReflectionTestFixture test = new SelfInstanceTwoVarsReflectionTestFixture();\n        assertTrue(ToStringStyle.getRegistry().isEmpty());\n        assertEquals(this.toBaseString(test) + \"[typeIsSelf=\" + this.toBaseString(test) + \",otherType=\" + test.getOtherType().toString() + \"]\", test.toString());\n        this.validateEmptyToStringStyleRegistry();\n    }",
        "begin_line": 542,
        "end_line": 547,
        "comment": "\n     * Test a class that defines an ivar pointing to itself.  This test was \n     * created to show that handling cyclical object resulted in a missing endFieldSeparator call.\n     * \n     * @throws Exception\n     ",
        "child_ranges": [
            "(line 543,col 9)-(line 543,col 103)",
            "(line 544,col 9)-(line 544,col 58)",
            "(line 545,col 9)-(line 545,col 161)",
            "(line 546,col 9)-(line 546,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionObjectCycle()",
        "snippet": "    public void testReflectionObjectCycle() throws Exception {\n        ReflectionTestCycleA a = new ReflectionTestCycleA();\n        ReflectionTestCycleB b = new ReflectionTestCycleB();\n        a.b = b;\n        b.a = a;\n        assertEquals(\n            this.toBaseString(a) + \"[b=\" + this.toBaseString(b) + \"[a=\" + this.toBaseString(a) + \"]]\",\n            a.toString());\n        this.validateEmptyToStringStyleRegistry();\n    }",
        "begin_line": 555,
        "end_line": 564,
        "comment": "\n     * Test Objects pointing to each other.\n     * \n     * @throws Exception\n     ",
        "child_ranges": [
            "(line 556,col 9)-(line 556,col 60)",
            "(line 557,col 9)-(line 557,col 60)",
            "(line 558,col 9)-(line 558,col 16)",
            "(line 559,col 9)-(line 559,col 16)",
            "(line 560,col 9)-(line 562,col 26)",
            "(line 563,col 9)-(line 563,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionArrayAndObjectCycle()",
        "snippet": "    public void testReflectionArrayAndObjectCycle() throws Exception {\n        Object[] objects = new Object[1];\n        SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture(objects);\n        objects[0] = (Object) simple;\n        assertEquals(\n            this.toBaseString(objects)\n                + \"[{\"\n                + this.toBaseString(simple)\n                + \"[o=\"\n                + this.toBaseString(objects)\n                + \"]\"\n                + \"}]\",\n            ToStringBuilder.reflectionToString(objects));\n        assertEquals(\n            this.toBaseString(simple)\n                + \"[o={\"\n                + this.toBaseString(simple)\n                + \"}]\",\n            ToStringBuilder.reflectionToString(simple));\n        this.validateEmptyToStringStyleRegistry();\n    }",
        "begin_line": 572,
        "end_line": 592,
        "comment": "\n     * Test a nasty combination of arrays and Objects pointing to each other.\n     * objects[0] -> SimpleReflectionTestFixture[ o -> objects ]\n     * \n     * @throws Exception\n     ",
        "child_ranges": [
            "(line 573,col 9)-(line 573,col 41)",
            "(line 574,col 9)-(line 574,col 86)",
            "(line 575,col 9)-(line 575,col 37)",
            "(line 576,col 9)-(line 584,col 57)",
            "(line 585,col 9)-(line 590,col 56)",
            "(line 591,col 9)-(line 591,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.validateEmptyToStringStyleRegistry()",
        "snippet": "    void validateEmptyToStringStyleRegistry() {\n       if (!ToStringStyle.getRegistry().isEmpty()) {\n           System.out.println(ToStringStyle.getRegistry());\n       }\n       \n        assertTrue(ToStringStyle.getRegistry().isEmpty());        \n    }",
        "begin_line": 594,
        "end_line": 600,
        "comment": "",
        "child_ranges": [
            "(line 595,col 8)-(line 597,col 8)",
            "(line 599,col 9)-(line 599,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testAppendSuper()",
        "snippet": "    public void testAppendSuper() {\n        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").toString());\n        \n        assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").append(\"a\", \"hello\").toString());\n        assertEquals(baseStr + \"[<null>,a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").append(\"a\", \"hello\").toString());\n        assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(null).append(\"a\", \"hello\").toString());\n    }",
        "begin_line": 603,
        "end_line": 610,
        "comment": "",
        "child_ranges": [
            "(line 604,col 9)-(line 604,col 105)",
            "(line 605,col 9)-(line 605,col 117)",
            "(line 607,col 9)-(line 607,col 133)",
            "(line 608,col 9)-(line 608,col 146)",
            "(line 609,col 9)-(line 609,col 121)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testAppendToString()",
        "snippet": "    public void testAppendToString() {\n        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).appendToString(\"Integer@8888[]\").toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).appendToString(\"Integer@8888[<null>]\").toString());\n        \n        assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendToString(\"Integer@8888[]\").append(\"a\", \"hello\").toString());\n        assertEquals(baseStr + \"[<null>,a=hello]\", new ToStringBuilder(base).appendToString(\"Integer@8888[<null>]\").append(\"a\", \"hello\").toString());\n        assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendToString(null).append(\"a\", \"hello\").toString());\n    }",
        "begin_line": 612,
        "end_line": 619,
        "comment": "",
        "child_ranges": [
            "(line 613,col 9)-(line 613,col 108)",
            "(line 614,col 9)-(line 614,col 120)",
            "(line 616,col 9)-(line 616,col 136)",
            "(line 617,col 9)-(line 617,col 149)",
            "(line 618,col 9)-(line 618,col 124)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testObject()",
        "snippet": "    public void testObject() {\n        Integer i3 = new Integer(3);\n        Integer i4 = new Integer(4);\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) null).toString());\n        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(i3).toString());\n        assertEquals(baseStr + \"[a=<null>]\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\n        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", i3).toString());\n        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\n        assertEquals(baseStr + \"[a=<Integer>]\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\n        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", new ArrayList(), false).toString());\n        assertEquals(baseStr + \"[a=[]]\", new ToStringBuilder(base).append(\"a\", new ArrayList(), true).toString());\n        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", new HashMap(), false).toString());\n        assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", new HashMap(), true).toString());\n        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], false).toString());\n        assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).toString());\n    }",
        "begin_line": 621,
        "end_line": 636,
        "comment": "",
        "child_ranges": [
            "(line 622,col 9)-(line 622,col 36)",
            "(line 623,col 9)-(line 623,col 36)",
            "(line 624,col 9)-(line 624,col 103)",
            "(line 625,col 9)-(line 625,col 87)",
            "(line 626,col 9)-(line 626,col 110)",
            "(line 627,col 9)-(line 627,col 94)",
            "(line 628,col 9)-(line 628,col 114)",
            "(line 629,col 9)-(line 629,col 109)",
            "(line 630,col 9)-(line 630,col 121)",
            "(line 631,col 9)-(line 631,col 114)",
            "(line 632,col 9)-(line 632,col 119)",
            "(line 633,col 9)-(line 633,col 112)",
            "(line 634,col 9)-(line 634,col 128)",
            "(line 635,col 9)-(line 635,col 121)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testLong()",
        "snippet": "    public void testLong() {\n        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(3L).toString());\n        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", 3L).toString());\n        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", 3L).append(\"b\", 4L).toString());\n    }",
        "begin_line": 638,
        "end_line": 642,
        "comment": "",
        "child_ranges": [
            "(line 639,col 9)-(line 639,col 87)",
            "(line 640,col 9)-(line 640,col 94)",
            "(line 641,col 9)-(line 641,col 114)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testInt()",
        "snippet": "    public void testInt() {\n        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append((int) 3).toString());\n        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", (int) 3).toString());\n        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", (int) 3).append(\"b\", (int) 4).toString());\n    }",
        "begin_line": 644,
        "end_line": 648,
        "comment": "",
        "child_ranges": [
            "(line 645,col 9)-(line 645,col 92)",
            "(line 646,col 9)-(line 646,col 99)",
            "(line 647,col 9)-(line 647,col 124)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testShort()",
        "snippet": "    public void testShort() {\n        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append((short) 3).toString());\n        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", (short) 3).toString());\n        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", (short) 3).append(\"b\", (short) 4).toString());\n    }",
        "begin_line": 650,
        "end_line": 654,
        "comment": "",
        "child_ranges": [
            "(line 651,col 9)-(line 651,col 94)",
            "(line 652,col 9)-(line 652,col 101)",
            "(line 653,col 9)-(line 653,col 128)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testChar()",
        "snippet": "    public void testChar() {\n        assertEquals(baseStr + \"[A]\", new ToStringBuilder(base).append((char) 65).toString());\n        assertEquals(baseStr + \"[a=A]\", new ToStringBuilder(base).append(\"a\", (char) 65).toString());\n        assertEquals(baseStr + \"[a=A,b=B]\", new ToStringBuilder(base).append(\"a\", (char) 65).append(\"b\", (char) 66).toString());\n    }",
        "begin_line": 656,
        "end_line": 660,
        "comment": "",
        "child_ranges": [
            "(line 657,col 9)-(line 657,col 94)",
            "(line 658,col 9)-(line 658,col 101)",
            "(line 659,col 9)-(line 659,col 128)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testByte()",
        "snippet": "    public void testByte() {\n        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append((byte) 3).toString());\n        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", (byte) 3).toString());\n        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", (byte) 3).append(\"b\", (byte) 4).toString());\n    }",
        "begin_line": 662,
        "end_line": 666,
        "comment": "",
        "child_ranges": [
            "(line 663,col 9)-(line 663,col 93)",
            "(line 664,col 9)-(line 664,col 100)",
            "(line 665,col 9)-(line 665,col 126)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testDouble()",
        "snippet": "    public void testDouble() {\n        assertEquals(baseStr + \"[3.2]\", new ToStringBuilder(base).append((double) 3.2).toString());\n        assertEquals(baseStr + \"[a=3.2]\", new ToStringBuilder(base).append(\"a\", (double) 3.2).toString());\n        assertEquals(baseStr + \"[a=3.2,b=4.3]\", new ToStringBuilder(base).append(\"a\", (double) 3.2).append(\"b\", (double) 4.3).toString());\n    }",
        "begin_line": 668,
        "end_line": 672,
        "comment": "",
        "child_ranges": [
            "(line 669,col 9)-(line 669,col 99)",
            "(line 670,col 9)-(line 670,col 106)",
            "(line 671,col 9)-(line 671,col 138)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testFloat()",
        "snippet": "    public void testFloat() {\n        assertEquals(baseStr + \"[3.2]\", new ToStringBuilder(base).append((float) 3.2).toString());\n        assertEquals(baseStr + \"[a=3.2]\", new ToStringBuilder(base).append(\"a\", (float) 3.2).toString());\n        assertEquals(baseStr + \"[a=3.2,b=4.3]\", new ToStringBuilder(base).append(\"a\", (float) 3.2).append(\"b\", (float) 4.3).toString());\n    }",
        "begin_line": 674,
        "end_line": 678,
        "comment": "",
        "child_ranges": [
            "(line 675,col 9)-(line 675,col 98)",
            "(line 676,col 9)-(line 676,col 105)",
            "(line 677,col 9)-(line 677,col 136)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testBoolean()",
        "snippet": "    public void testBoolean() {\n        assertEquals(baseStr + \"[true]\", new ToStringBuilder(base).append(true).toString());\n        assertEquals(baseStr + \"[a=true]\", new ToStringBuilder(base).append(\"a\", true).toString());\n        assertEquals(baseStr + \"[a=true,b=false]\", new ToStringBuilder(base).append(\"a\", true).append(\"b\", false).toString());\n    }",
        "begin_line": 680,
        "end_line": 684,
        "comment": "",
        "child_ranges": [
            "(line 681,col 9)-(line 681,col 92)",
            "(line 682,col 9)-(line 682,col 99)",
            "(line 683,col 9)-(line 683,col 126)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testObjectArray()",
        "snippet": "    public void testObjectArray() {\n        Object[] array = new Object[] {null, base, new int[] {3, 6}};\n        assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 687,
        "end_line": 694,
        "comment": "",
        "child_ranges": [
            "(line 688,col 9)-(line 688,col 69)",
            "(line 689,col 9)-(line 689,col 105)",
            "(line 690,col 9)-(line 690,col 114)",
            "(line 691,col 9)-(line 691,col 21)",
            "(line 692,col 9)-(line 692,col 95)",
            "(line 693,col 9)-(line 693,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testLongArray()",
        "snippet": "    public void testLongArray() {\n        long[] array = new long[] {1, 2, -3, 4};\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 696,
        "end_line": 703,
        "comment": "",
        "child_ranges": [
            "(line 697,col 9)-(line 697,col 48)",
            "(line 698,col 9)-(line 698,col 99)",
            "(line 699,col 9)-(line 699,col 108)",
            "(line 700,col 9)-(line 700,col 21)",
            "(line 701,col 9)-(line 701,col 95)",
            "(line 702,col 9)-(line 702,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testIntArray()",
        "snippet": "    public void testIntArray() {\n        int[] array = new int[] {1, 2, -3, 4};\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 705,
        "end_line": 712,
        "comment": "",
        "child_ranges": [
            "(line 706,col 9)-(line 706,col 46)",
            "(line 707,col 9)-(line 707,col 99)",
            "(line 708,col 9)-(line 708,col 108)",
            "(line 709,col 9)-(line 709,col 21)",
            "(line 710,col 9)-(line 710,col 95)",
            "(line 711,col 9)-(line 711,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testShortArray()",
        "snippet": "    public void testShortArray() {\n        short[] array = new short[] {1, 2, -3, 4};\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 714,
        "end_line": 721,
        "comment": "",
        "child_ranges": [
            "(line 715,col 9)-(line 715,col 50)",
            "(line 716,col 9)-(line 716,col 99)",
            "(line 717,col 9)-(line 717,col 108)",
            "(line 718,col 9)-(line 718,col 21)",
            "(line 719,col 9)-(line 719,col 95)",
            "(line 720,col 9)-(line 720,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testByteArray()",
        "snippet": "    public void testByteArray() {\n        byte[] array = new byte[] {1, 2, -3, 4};\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 723,
        "end_line": 730,
        "comment": "",
        "child_ranges": [
            "(line 724,col 9)-(line 724,col 48)",
            "(line 725,col 9)-(line 725,col 99)",
            "(line 726,col 9)-(line 726,col 108)",
            "(line 727,col 9)-(line 727,col 21)",
            "(line 728,col 9)-(line 728,col 95)",
            "(line 729,col 9)-(line 729,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testCharArray()",
        "snippet": "    public void testCharArray() {\n        char[] array = new char[] {'A', '2', '_', 'D'};\n        assertEquals(baseStr + \"[{A,2,_,D}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{A,2,_,D}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 732,
        "end_line": 739,
        "comment": "",
        "child_ranges": [
            "(line 733,col 9)-(line 733,col 55)",
            "(line 734,col 9)-(line 734,col 98)",
            "(line 735,col 9)-(line 735,col 107)",
            "(line 736,col 9)-(line 736,col 21)",
            "(line 737,col 9)-(line 737,col 95)",
            "(line 738,col 9)-(line 738,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testDoubleArray()",
        "snippet": "    public void testDoubleArray() {\n        double[] array = new double[] {1.0, 2.9876, -3.00001, 4.3};\n        assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 741,
        "end_line": 748,
        "comment": "",
        "child_ranges": [
            "(line 742,col 9)-(line 742,col 67)",
            "(line 743,col 9)-(line 743,col 114)",
            "(line 744,col 9)-(line 744,col 123)",
            "(line 745,col 9)-(line 745,col 21)",
            "(line 746,col 9)-(line 746,col 95)",
            "(line 747,col 9)-(line 747,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testFloatArray()",
        "snippet": "    public void testFloatArray() {\n        float[] array = new float[] {1.0f, 2.9876f, -3.00001f, 4.3f};\n        assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 750,
        "end_line": 757,
        "comment": "",
        "child_ranges": [
            "(line 751,col 9)-(line 751,col 69)",
            "(line 752,col 9)-(line 752,col 114)",
            "(line 753,col 9)-(line 753,col 123)",
            "(line 754,col 9)-(line 754,col 21)",
            "(line 755,col 9)-(line 755,col 95)",
            "(line 756,col 9)-(line 756,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testBooleanArray()",
        "snippet": "    public void testBooleanArray() {\n        boolean[] array = new boolean[] {true, false, false};\n        assertEquals(baseStr + \"[{true,false,false}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{true,false,false}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 759,
        "end_line": 766,
        "comment": "",
        "child_ranges": [
            "(line 760,col 9)-(line 760,col 61)",
            "(line 761,col 9)-(line 761,col 107)",
            "(line 762,col 9)-(line 762,col 116)",
            "(line 763,col 9)-(line 763,col 21)",
            "(line 764,col 9)-(line 764,col 95)",
            "(line 765,col 9)-(line 765,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testLongArrayArray()",
        "snippet": "    public void testLongArrayArray() {\n        long[][] array = new long[][] {{1, 2}, null, {5}};\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 768,
        "end_line": 775,
        "comment": "",
        "child_ranges": [
            "(line 769,col 9)-(line 769,col 58)",
            "(line 770,col 9)-(line 770,col 107)",
            "(line 771,col 9)-(line 771,col 116)",
            "(line 772,col 9)-(line 772,col 21)",
            "(line 773,col 9)-(line 773,col 95)",
            "(line 774,col 9)-(line 774,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testIntArrayArray()",
        "snippet": "    public void testIntArrayArray() {\n        int[][] array = new int[][] {{1, 2}, null, {5}};\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 777,
        "end_line": 784,
        "comment": "",
        "child_ranges": [
            "(line 778,col 9)-(line 778,col 56)",
            "(line 779,col 9)-(line 779,col 107)",
            "(line 780,col 9)-(line 780,col 116)",
            "(line 781,col 9)-(line 781,col 21)",
            "(line 782,col 9)-(line 782,col 95)",
            "(line 783,col 9)-(line 783,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testShortArrayArray()",
        "snippet": "    public void testShortArrayArray() {\n        short[][] array = new short[][] {{1, 2}, null, {5}};\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 786,
        "end_line": 793,
        "comment": "",
        "child_ranges": [
            "(line 787,col 9)-(line 787,col 60)",
            "(line 788,col 9)-(line 788,col 107)",
            "(line 789,col 9)-(line 789,col 116)",
            "(line 790,col 9)-(line 790,col 21)",
            "(line 791,col 9)-(line 791,col 95)",
            "(line 792,col 9)-(line 792,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testByteArrayArray()",
        "snippet": "    public void testByteArrayArray() {\n        byte[][] array = new byte[][] {{1, 2}, null, {5}};\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 795,
        "end_line": 802,
        "comment": "",
        "child_ranges": [
            "(line 796,col 9)-(line 796,col 58)",
            "(line 797,col 9)-(line 797,col 107)",
            "(line 798,col 9)-(line 798,col 116)",
            "(line 799,col 9)-(line 799,col 21)",
            "(line 800,col 9)-(line 800,col 95)",
            "(line 801,col 9)-(line 801,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testCharArrayArray()",
        "snippet": "    public void testCharArrayArray() {\n        char[][] array = new char[][] {{'A', 'B'}, null, {'p'}};\n        assertEquals(baseStr + \"[{{A,B},<null>,{p}}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{{A,B},<null>,{p}}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 804,
        "end_line": 811,
        "comment": "",
        "child_ranges": [
            "(line 805,col 9)-(line 805,col 64)",
            "(line 806,col 9)-(line 806,col 107)",
            "(line 807,col 9)-(line 807,col 116)",
            "(line 808,col 9)-(line 808,col 21)",
            "(line 809,col 9)-(line 809,col 95)",
            "(line 810,col 9)-(line 810,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testDoubleArrayArray()",
        "snippet": "    public void testDoubleArrayArray() {\n        double[][] array = new double[][] {{1.0, 2.29686}, null, {Double.NaN}};\n        assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 813,
        "end_line": 820,
        "comment": "",
        "child_ranges": [
            "(line 814,col 9)-(line 814,col 79)",
            "(line 815,col 9)-(line 815,col 117)",
            "(line 816,col 9)-(line 816,col 126)",
            "(line 817,col 9)-(line 817,col 21)",
            "(line 818,col 9)-(line 818,col 95)",
            "(line 819,col 9)-(line 819,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testFloatArrayArray()",
        "snippet": "    public void testFloatArrayArray() {\n        float[][] array = new float[][] {{1.0f, 2.29686f}, null, {Float.NaN}};\n        assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 822,
        "end_line": 829,
        "comment": "",
        "child_ranges": [
            "(line 823,col 9)-(line 823,col 78)",
            "(line 824,col 9)-(line 824,col 117)",
            "(line 825,col 9)-(line 825,col 126)",
            "(line 826,col 9)-(line 826,col 21)",
            "(line 827,col 9)-(line 827,col 95)",
            "(line 828,col 9)-(line 828,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testBooleanArrayArray()",
        "snippet": "    public void testBooleanArrayArray() {\n        boolean[][] array = new boolean[][] {{true, false}, null, {false}};\n        assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 831,
        "end_line": 838,
        "comment": "",
        "child_ranges": [
            "(line 832,col 9)-(line 832,col 75)",
            "(line 833,col 9)-(line 833,col 118)",
            "(line 834,col 9)-(line 834,col 127)",
            "(line 835,col 9)-(line 835,col 21)",
            "(line 836,col 9)-(line 836,col 95)",
            "(line 837,col 9)-(line 837,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testObjectCycle()",
        "snippet": "    public void testObjectCycle() {\n        ObjectCycle a = new ObjectCycle();\n        ObjectCycle b = new ObjectCycle();\n        a.obj = b;\n        b.obj = a;\n       \n        String expected = toBaseString(a) + \"[\" + toBaseString(b) + \"[\" + toBaseString(a) + \"]]\";\n        assertEquals(expected, a.toString());\n        validateEmptyToStringStyleRegistry();\n    }",
        "begin_line": 840,
        "end_line": 849,
        "comment": "",
        "child_ranges": [
            "(line 841,col 9)-(line 841,col 42)",
            "(line 842,col 9)-(line 842,col 42)",
            "(line 843,col 9)-(line 843,col 18)",
            "(line 844,col 9)-(line 844,col 18)",
            "(line 846,col 9)-(line 846,col 97)",
            "(line 847,col 9)-(line 847,col 45)",
            "(line 848,col 9)-(line 848,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.ObjectCycle.toString()",
        "snippet": "        public String toString() {\n            return new ToStringBuilder(this).append(obj).toString();\n        }",
        "begin_line": 854,
        "end_line": 856,
        "comment": "",
        "child_ranges": [
            "(line 855,col 13)-(line 855,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testSimpleReflectionStatics()",
        "snippet": "    public void testSimpleReflectionStatics() {\n        SimpleReflectionStaticFieldsFixture instance1 = new SimpleReflectionStaticFieldsFixture();\n        assertEquals(\n            this.toBaseString(instance1) + \"[staticString=staticString,staticInt=12345]\",\n            ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class));\n        assertEquals(\n            this.toBaseString(instance1) + \"[staticString=staticString,staticInt=12345]\",\n            ReflectionToStringBuilder.toString(instance1, null, true, true, SimpleReflectionStaticFieldsFixture.class));\n        assertEquals(\n            this.toBaseString(instance1) + \"[staticString=staticString,staticInt=12345]\",\n            this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));\n        assertEquals(\n            this.toBaseString(instance1) + \"[staticString=staticString,staticInt=12345]\",\n            this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));\n    }",
        "begin_line": 859,
        "end_line": 873,
        "comment": "",
        "child_ranges": [
            "(line 860,col 9)-(line 860,col 98)",
            "(line 861,col 9)-(line 863,col 121)",
            "(line 864,col 9)-(line 866,col 120)",
            "(line 867,col 9)-(line 869,col 98)",
            "(line 870,col 9)-(line 872,col 98)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionStatics()",
        "snippet": "    public void testReflectionStatics() {\n        ReflectionStaticFieldsFixture instance1 = new ReflectionStaticFieldsFixture();\n        assertEquals(\n            this.toBaseString(instance1) + \"[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]\",\n            ReflectionToStringBuilder.toString(instance1, null, false, true, ReflectionStaticFieldsFixture.class));\n        assertEquals(\n            this.toBaseString(instance1) + \"[staticString=staticString,staticInt=12345,staticTransientString=staticTransientString,staticTransientInt=54321,instanceString=instanceString,instanceInt=67890,transientString=transientString,transientInt=98765]\",\n            ReflectionToStringBuilder.toString(instance1, null, true, true, ReflectionStaticFieldsFixture.class));\n        assertEquals(\n            this.toBaseString(instance1) + \"[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]\",\n            this.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class));\n        assertEquals(\n            this.toBaseString(instance1) + \"[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]\",\n            this.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class));\n    }",
        "begin_line": 878,
        "end_line": 892,
        "comment": "\n     * Tests ReflectionToStringBuilder.toString() for statics.\n     ",
        "child_ranges": [
            "(line 879,col 9)-(line 879,col 86)",
            "(line 880,col 9)-(line 882,col 115)",
            "(line 883,col 9)-(line 885,col 114)",
            "(line 886,col 9)-(line 888,col 92)",
            "(line 889,col 9)-(line 891,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testInheritedReflectionStatics()",
        "snippet": "    public void testInheritedReflectionStatics() {\n        InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture();\n        assertEquals(\n            this.toBaseString(instance1) + \"[staticString2=staticString2,staticInt2=67890]\",\n            ReflectionToStringBuilder.toString(instance1, null, false, true, InheritedReflectionStaticFieldsFixture.class));\n        assertEquals(\n            this.toBaseString(instance1) + \"[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]\",\n            ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class));\n        assertEquals(\n            this.toBaseString(instance1) + \"[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]\",\n            this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));\n        assertEquals(\n            this.toBaseString(instance1) + \"[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]\",\n            this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));\n    }",
        "begin_line": 897,
        "end_line": 911,
        "comment": "\n     * Tests ReflectionToStringBuilder.toString() for statics.\n     ",
        "child_ranges": [
            "(line 898,col 9)-(line 898,col 104)",
            "(line 899,col 9)-(line 901,col 124)",
            "(line 902,col 9)-(line 904,col 121)",
            "(line 905,col 9)-(line 907,col 98)",
            "(line 908,col 9)-(line 910,col 98)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.toStringWithStatics(java.lang.Object, org.apache.commons.lang.builder.ToStringStyle, java.lang.Class)",
        "snippet": "    public Object toStringWithStatics(Object object, ToStringStyle style, Class reflectUpToClass) {\n        return ReflectionToStringBuilder.toString(object, style, false, true, reflectUpToClass);\n    }",
        "begin_line": 938,
        "end_line": 940,
        "comment": "\n     * <p>This method uses reflection to build a suitable\n     * <code>toString</code> value which includes static fields.</p>\n     *\n     * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n     * fields. This means that it will throw a security exception if run\n     * under a security manager, if the permissions are not set up correctly.\n     * It is also not as efficient as testing explicitly. </p>\n     *\n     * <p>Transient fields are not output.</p>\n     *\n     * <p>Superclass fields will be appended up to and including the specified superclass. \n     * A null superclass is treated as <code>java.lang.Object</code>.</p>\n     *\n     * <p>If the style is <code>null</code>, the default\n     * <code>ToStringStyle</code> is used.</p>\n     * \n     * @param object  the Object to be output\n     * @param style  the style of the <code>toString</code> to create,\n     *  may be <code>null</code>\n     * @param reflectUpToClass  the superclass to reflect up to (inclusive),\n     *  may be <code>null</code>\n     * @return the String result\n     * @throws IllegalArgumentException if the Object is <code>null</code>\n     ",
        "child_ranges": [
            "(line 939,col 9)-(line 939,col 96)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionNull()",
        "snippet": "    public void testReflectionNull() {\n        assertEquals(\"<null>\", ReflectionToStringBuilder.toString(null));\n    }",
        "begin_line": 972,
        "end_line": 974,
        "comment": "",
        "child_ranges": [
            "(line 973,col 9)-(line 973,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.MultiLineTestObject.toString()",
        "snippet": "        public String toString() {\n            return new ToStringBuilder(this).append(\"testInt\", i).toString();\n        }",
        "begin_line": 982,
        "end_line": 984,
        "comment": "",
        "child_ranges": [
            "(line 983,col 13)-(line 983,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringBuilderTest.testAppendToStringUsingMultiLineStyle()",
        "snippet": "    public void testAppendToStringUsingMultiLineStyle() {\n        MultiLineTestObject obj = new MultiLineTestObject();\n        ToStringBuilder testBuilder = new ToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE)\n                                          .appendToString(obj.toString());\n        assertEquals(testBuilder.toString().indexOf(\"testInt=31337\"), -1);\n    }",
        "begin_line": 987,
        "end_line": 992,
        "comment": "",
        "child_ranges": [
            "(line 988,col 9)-(line 988,col 60)",
            "(line 989,col 9)-(line 990,col 74)",
            "(line 991,col 9)-(line 991,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/NoFieldNamesToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest.NoFieldNamesToStringStyleTest(java.lang.String)",
        "snippet": "    public NoFieldNamesToStringStyleTest(String name) {\n        super(name);\n    }",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/NoFieldNamesToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/NoFieldNamesToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(NoFieldNamesToStringStyleTest.class);\n        suite.setName(\"NoFieldNamesToStringStyle Tests\");\n        return suite;\n    }",
        "begin_line": 48,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 77)",
            "(line 50,col 9)-(line 50,col 57)",
            "(line 51,col 9)-(line 51,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/NoFieldNamesToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        super.setUp();\n        ToStringBuilder.setDefaultStyle(ToStringStyle.NO_FIELD_NAMES_STYLE);\n    }",
        "begin_line": 54,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 22)",
            "(line 56,col 9)-(line 56,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/NoFieldNamesToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        super.tearDown();\n        ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);\n    }",
        "begin_line": 59,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 25)",
            "(line 61,col 9)-(line 61,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/NoFieldNamesToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest.testBlank()",
        "snippet": "    public void testBlank() {\n        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).toString());\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/NoFieldNamesToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest.testAppendSuper()",
        "snippet": "    public void testAppendSuper() {\n        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").toString());\n        \n        assertEquals(baseStr + \"[hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").append(\"a\", \"hello\").toString());\n        assertEquals(baseStr + \"[<null>,hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").append(\"a\", \"hello\").toString());\n        assertEquals(baseStr + \"[hello]\", new ToStringBuilder(base).appendSuper(null).append(\"a\", \"hello\").toString());\n    }",
        "begin_line": 70,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 105)",
            "(line 72,col 9)-(line 72,col 117)",
            "(line 74,col 9)-(line 74,col 131)",
            "(line 75,col 9)-(line 75,col 144)",
            "(line 76,col 9)-(line 76,col 119)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/NoFieldNamesToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest.testObject()",
        "snippet": "    public void testObject() {\n        Integer i3 = new Integer(3);\n        Integer i4 = new Integer(4);\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) null).toString());\n        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(i3).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\n        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(\"a\", i3).toString());\n        assertEquals(baseStr + \"[3,4]\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\n        assertEquals(baseStr + \"[<Integer>]\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\n        assertEquals(baseStr + \"[<size=0>]\", new ToStringBuilder(base).append(\"a\", new ArrayList(), false).toString());\n        assertEquals(baseStr + \"[[]]\", new ToStringBuilder(base).append(\"a\", new ArrayList(), true).toString());\n        assertEquals(baseStr + \"[<size=0>]\", new ToStringBuilder(base).append(\"a\", new HashMap(), false).toString());\n        assertEquals(baseStr + \"[{}]\", new ToStringBuilder(base).append(\"a\", new HashMap(), true).toString());\n        assertEquals(baseStr + \"[<size=0>]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], false).toString());\n        assertEquals(baseStr + \"[{}]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).toString());\n    }",
        "begin_line": 79,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 36)",
            "(line 81,col 9)-(line 81,col 36)",
            "(line 82,col 9)-(line 82,col 103)",
            "(line 83,col 9)-(line 83,col 87)",
            "(line 84,col 9)-(line 84,col 108)",
            "(line 85,col 9)-(line 85,col 92)",
            "(line 86,col 9)-(line 86,col 110)",
            "(line 87,col 9)-(line 87,col 107)",
            "(line 88,col 9)-(line 88,col 119)",
            "(line 89,col 9)-(line 89,col 112)",
            "(line 90,col 9)-(line 90,col 117)",
            "(line 91,col 9)-(line 91,col 110)",
            "(line 92,col 9)-(line 92,col 126)",
            "(line 93,col 9)-(line 93,col 119)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/NoFieldNamesToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest.testPerson()",
        "snippet": "    public void testPerson() {\n        Person p = new Person();\n        p.name = \"Ron Paul\";\n        p.age = 72;\n        p.smoker = false;\n        String pBaseStr = p.getClass().getName() + \"@\" + Integer.toHexString(System.identityHashCode(p));\n        assertEquals(pBaseStr + \"[Ron Paul,72,false]\", new ToStringBuilder(p).append(\"name\", p.name).append(\"age\", p.age).append(\"smoker\", p.smoker).toString());\n    }",
        "begin_line": 96,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 32)",
            "(line 98,col 9)-(line 98,col 28)",
            "(line 99,col 9)-(line 99,col 19)",
            "(line 100,col 9)-(line 100,col 25)",
            "(line 101,col 9)-(line 101,col 105)",
            "(line 102,col 9)-(line 102,col 161)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/NoFieldNamesToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest.testLong()",
        "snippet": "    public void testLong() {\n        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(3L).toString());\n        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(\"a\", 3L).toString());\n        assertEquals(baseStr + \"[3,4]\", new ToStringBuilder(base).append(\"a\", 3L).append(\"b\", 4L).toString());\n    }",
        "begin_line": 105,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 87)",
            "(line 107,col 9)-(line 107,col 92)",
            "(line 108,col 9)-(line 108,col 110)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/NoFieldNamesToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest.testObjectArray()",
        "snippet": "    public void testObjectArray() {\n        Object[] array = new Object[] {null, base, new int[] {3, 6}};\n        assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 111,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 69)",
            "(line 113,col 9)-(line 113,col 105)",
            "(line 114,col 9)-(line 114,col 114)",
            "(line 115,col 9)-(line 115,col 21)",
            "(line 116,col 9)-(line 116,col 95)",
            "(line 117,col 9)-(line 117,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/NoFieldNamesToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest.testLongArray()",
        "snippet": "    public void testLongArray() {\n        long[] array = new long[] {1, 2, -3, 4};\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 120,
        "end_line": 127,
        "comment": "",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 48)",
            "(line 122,col 9)-(line 122,col 99)",
            "(line 123,col 9)-(line 123,col 108)",
            "(line 124,col 9)-(line 124,col 21)",
            "(line 125,col 9)-(line 125,col 95)",
            "(line 126,col 9)-(line 126,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/NoFieldNamesToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest.testLongArrayArray()",
        "snippet": "    public void testLongArrayArray() {\n        long[][] array = new long[][] {{1, 2}, null, {5}};\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 129,
        "end_line": 136,
        "comment": "",
        "child_ranges": [
            "(line 130,col 9)-(line 130,col 58)",
            "(line 131,col 9)-(line 131,col 107)",
            "(line 132,col 9)-(line 132,col 116)",
            "(line 133,col 9)-(line 133,col 21)",
            "(line 134,col 9)-(line 134,col 95)",
            "(line 135,col 9)-(line 135,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringStyleTest.ToStringStyleTest(java.lang.String)",
        "snippet": "    public ToStringStyleTest(String name) {\n        super(name);\n    }",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringStyleTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringStyleTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(ToStringStyleTest.class);\n        suite.setName(\"ToStringStyle Tests\");\n        return suite;\n    }",
        "begin_line": 40,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 65)",
            "(line 42,col 9)-(line 42,col 45)",
            "(line 43,col 9)-(line 43,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringStyleTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        super.setUp();\n    }",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringStyleTest.testSetArrayStart()",
        "snippet": "    public void testSetArrayStart() {\n        ToStringStyle style = new ToStringStyleImpl();\n        style.setArrayStart(null);\n        assertEquals(\"\", style.getArrayStart());\n    }",
        "begin_line": 54,
        "end_line": 58,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 54)",
            "(line 56,col 9)-(line 56,col 34)",
            "(line 57,col 9)-(line 57,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringStyleTest.testSetArrayEnd()",
        "snippet": "    public void testSetArrayEnd() {\n        ToStringStyle style = new ToStringStyleImpl();\n        style.setArrayEnd(null);\n        assertEquals(\"\", style.getArrayEnd());\n    }",
        "begin_line": 60,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 54)",
            "(line 62,col 9)-(line 62,col 32)",
            "(line 63,col 9)-(line 63,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringStyleTest.testSetArraySeparator()",
        "snippet": "    public void testSetArraySeparator() {\n        ToStringStyle style = new ToStringStyleImpl();\n        style.setArraySeparator(null);\n        assertEquals(\"\", style.getArraySeparator());\n    }",
        "begin_line": 66,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 54)",
            "(line 68,col 9)-(line 68,col 38)",
            "(line 69,col 9)-(line 69,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringStyleTest.testSetContentStart()",
        "snippet": "    public void testSetContentStart() {\n        ToStringStyle style = new ToStringStyleImpl();\n        style.setContentStart(null);\n        assertEquals(\"\", style.getContentStart());\n    }",
        "begin_line": 72,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 54)",
            "(line 74,col 9)-(line 74,col 36)",
            "(line 75,col 9)-(line 75,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringStyleTest.testSetContentEnd()",
        "snippet": "    public void testSetContentEnd() {\n        ToStringStyle style = new ToStringStyleImpl();\n        style.setContentEnd(null);\n        assertEquals(\"\", style.getContentEnd());\n    }",
        "begin_line": 78,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 54)",
            "(line 80,col 9)-(line 80,col 34)",
            "(line 81,col 9)-(line 81,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringStyleTest.testSetFieldNameValueSeparator()",
        "snippet": "    public void testSetFieldNameValueSeparator() {\n        ToStringStyle style = new ToStringStyleImpl();\n        style.setFieldNameValueSeparator(null);\n        assertEquals(\"\", style.getFieldNameValueSeparator());\n    }",
        "begin_line": 84,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 54)",
            "(line 86,col 9)-(line 86,col 47)",
            "(line 87,col 9)-(line 87,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringStyleTest.testSetFieldSeparator()",
        "snippet": "    public void testSetFieldSeparator() {\n        ToStringStyle style = new ToStringStyleImpl();\n        style.setFieldSeparator(null);\n        assertEquals(\"\", style.getFieldSeparator());\n    }",
        "begin_line": 90,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 54)",
            "(line 92,col 9)-(line 92,col 38)",
            "(line 93,col 9)-(line 93,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringStyleTest.testSetNullText()",
        "snippet": "    public void testSetNullText() {\n        ToStringStyle style = new ToStringStyleImpl();\n        style.setNullText(null);\n        assertEquals(\"\", style.getNullText());\n    }",
        "begin_line": 96,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 54)",
            "(line 98,col 9)-(line 98,col 32)",
            "(line 99,col 9)-(line 99,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringStyleTest.testSetSizeStartText()",
        "snippet": "    public void testSetSizeStartText() {\n        ToStringStyle style = new ToStringStyleImpl();\n        style.setSizeStartText(null);\n        assertEquals(\"\", style.getSizeStartText());\n    }",
        "begin_line": 102,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 54)",
            "(line 104,col 9)-(line 104,col 37)",
            "(line 105,col 9)-(line 105,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringStyleTest.testSetSizeEndText()",
        "snippet": "    public void testSetSizeEndText() {\n        ToStringStyle style = new ToStringStyleImpl();\n        style.setSizeEndText(null);\n        assertEquals(\"\", style.getSizeEndText());\n    }",
        "begin_line": 108,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 54)",
            "(line 110,col 9)-(line 110,col 35)",
            "(line 111,col 9)-(line 111,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringStyleTest.testSetSummaryObjectStartText()",
        "snippet": "    public void testSetSummaryObjectStartText() {\n        ToStringStyle style = new ToStringStyleImpl();\n        style.setSummaryObjectStartText(null);\n        assertEquals(\"\", style.getSummaryObjectStartText());\n    }",
        "begin_line": 114,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 54)",
            "(line 116,col 9)-(line 116,col 46)",
            "(line 117,col 9)-(line 117,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.ToStringStyleTest.testSetSummaryObjectEndText()",
        "snippet": "    public void testSetSummaryObjectEndText() {\n        ToStringStyle style = new ToStringStyleImpl();\n        style.setSummaryObjectEndText(null);\n        assertEquals(\"\", style.getSummaryObjectEndText());\n    }",
        "begin_line": 120,
        "end_line": 124,
        "comment": "",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 54)",
            "(line 122,col 9)-(line 122,col 44)",
            "(line 123,col 9)-(line 123,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.BuilderTestSuite",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/BuilderTestSuite.java",
        "signature": "org.apache.commons.lang.builder.BuilderTestSuite.BuilderTestSuite(java.lang.String)",
        "snippet": "    public BuilderTestSuite(String name) {\n        super(name);\n    }",
        "begin_line": 34,
        "end_line": 36,
        "comment": "\n     * Construct a new instance.\n     ",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.BuilderTestSuite",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/BuilderTestSuite.java",
        "signature": "org.apache.commons.lang.builder.BuilderTestSuite.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 41,
        "end_line": 43,
        "comment": "\n     * Command-line interface.\n     ",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.BuilderTestSuite",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/BuilderTestSuite.java",
        "signature": "org.apache.commons.lang.builder.BuilderTestSuite.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite();\n        suite.setName(\"Commons-Lang-Builder Tests\");\n        suite.addTestSuite(CompareToBuilderTest.class);\n        suite.addTestSuite(EqualsBuilderTest.class);\n        suite.addTestSuite(HashCodeBuilderTest.class);\n        suite.addTestSuite(HashCodeBuilderAndEqualsBuilderTest.class);\n        suite.addTestSuite(ToStringBuilderTest.class);\n        suite.addTestSuite(DefaultToStringStyleTest.class);\n        suite.addTestSuite(NoFieldNamesToStringStyleTest.class);\n        suite.addTestSuite(MultiLineToStringStyleTest.class);\n        suite.addTestSuite(ReflectionToStringBuilderExcludeTest.class);\n        suite.addTestSuite(SimpleToStringStyleTest.class);\n        suite.addTestSuite(StandardToStringStyleTest.class);\n        suite.addTestSuite(ToStringStyleTest.class);\n        return suite;\n    }",
        "begin_line": 48,
        "end_line": 64,
        "comment": "\n     * Get the suite of tests\n     ",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 42)",
            "(line 50,col 9)-(line 50,col 52)",
            "(line 51,col 9)-(line 51,col 55)",
            "(line 52,col 9)-(line 52,col 52)",
            "(line 53,col 9)-(line 53,col 54)",
            "(line 54,col 9)-(line 54,col 70)",
            "(line 55,col 9)-(line 55,col 54)",
            "(line 56,col 9)-(line 56,col 59)",
            "(line 57,col 9)-(line 57,col 64)",
            "(line 58,col 9)-(line 58,col 61)",
            "(line 59,col 9)-(line 59,col 71)",
            "(line 60,col 9)-(line 60,col 58)",
            "(line 61,col 9)-(line 61,col 60)",
            "(line 62,col 9)-(line 62,col 52)",
            "(line 63,col 9)-(line 63,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.EqualsBuilderTest(java.lang.String)",
        "snippet": "    public EqualsBuilderTest(String name) {\n        super(name);\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(EqualsBuilderTest.class);\n        suite.setName(\"EqualsBuilder Tests\");\n        return suite;\n    }",
        "begin_line": 46,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 65)",
            "(line 48,col 9)-(line 48,col 45)",
            "(line 49,col 9)-(line 49,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        super.setUp();\n    }",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        super.tearDown();\n    }",
        "begin_line": 56,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.TestObject.TestObject()",
        "snippet": "        public TestObject() {\n        }",
        "begin_line": 64,
        "end_line": 65,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.TestObject.TestObject(int)",
        "snippet": "        public TestObject(int a) {\n            this.a = a;\n        }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 67,col 13)-(line 67,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.TestObject.equals(java.lang.Object)",
        "snippet": "        public boolean equals(Object o) {\n            if (o == null) { return false; }\n            if (o == this) { return true; }\n            if (o.getClass() != getClass()) {\n                return false;\n            }\n\n            TestObject rhs = (TestObject) o;\n            return (a == rhs.a);\n        }",
        "begin_line": 69,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 70,col 13)-(line 70,col 44)",
            "(line 71,col 13)-(line 71,col 43)",
            "(line 72,col 13)-(line 74,col 13)",
            "(line 76,col 13)-(line 76,col 44)",
            "(line 77,col 13)-(line 77,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.TestObject.setA(int)",
        "snippet": "        public void setA(int a) {\n            this.a = a;\n        }",
        "begin_line": 80,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 81,col 13)-(line 81,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.TestObject.getA()",
        "snippet": "        public int getA() {\n            return a;\n        }",
        "begin_line": 84,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 85,col 13)-(line 85,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.TestSubObject.TestSubObject()",
        "snippet": "        public TestSubObject() {\n            super(0);\n        }",
        "begin_line": 91,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 92,col 13)-(line 92,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.TestSubObject.TestSubObject(int, int)",
        "snippet": "        public TestSubObject(int a, int b) {\n            super(a);\n            this.b = b;\n        }",
        "begin_line": 94,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 95,col 13)-(line 95,col 21)",
            "(line 96,col 13)-(line 96,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.TestSubObject.equals(java.lang.Object)",
        "snippet": "        public boolean equals(Object o) {\n            if (o == null) { return false; }\n            if (o == this) { return true; }\n            if (o.getClass() != getClass()) {\n                return false;\n            }\n\n            TestSubObject rhs = (TestSubObject) o;\n            return super.equals(o) && (b == rhs.b);\n        }",
        "begin_line": 98,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 99,col 13)-(line 99,col 44)",
            "(line 100,col 13)-(line 100,col 43)",
            "(line 101,col 13)-(line 103,col 13)",
            "(line 105,col 13)-(line 105,col 50)",
            "(line 106,col 13)-(line 106,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.TestSubObject.setB(int)",
        "snippet": "        public void setB(int b) {\n            this.b = b;\n        }",
        "begin_line": 109,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 110,col 13)-(line 110,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.TestSubObject.getB()",
        "snippet": "        public int getB() {\n            return b;\n        }",
        "begin_line": 113,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 114,col 13)-(line 114,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.TestEmptySubObject.TestEmptySubObject(int)",
        "snippet": "        public TestEmptySubObject(int a) {\n            super(a);\n        }",
        "begin_line": 119,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 120,col 13)-(line 120,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.TestTSubObject.TestTSubObject(int, int)",
        "snippet": "        public TestTSubObject(int a, int t) {\n            super(a);\n            this.t = t;\n        }",
        "begin_line": 126,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 127,col 13)-(line 127,col 21)",
            "(line 128,col 13)-(line 128,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.TestTTSubObject.TestTTSubObject(int, int, int)",
        "snippet": "        public TestTTSubObject(int a, int t, int tt) {\n            super(a, t);\n            this.tt = tt;\n        }",
        "begin_line": 134,
        "end_line": 137,
        "comment": "",
        "child_ranges": [
            "(line 135,col 13)-(line 135,col 24)",
            "(line 136,col 13)-(line 136,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.TestTTLeafObject.TestTTLeafObject(int, int, int, int)",
        "snippet": "        public TestTTLeafObject(int a, int t, int tt, int leafValue) {\n            super(a, t, tt);\n            this.leafValue = leafValue;\n        }",
        "begin_line": 142,
        "end_line": 145,
        "comment": "",
        "child_ranges": [
            "(line 143,col 13)-(line 143,col 28)",
            "(line 144,col 13)-(line 144,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.TestTSubObject2.TestTSubObject2(int, int)",
        "snippet": "        public TestTSubObject2(int a, int t) {\n            super(a);\n        }",
        "begin_line": 150,
        "end_line": 152,
        "comment": "",
        "child_ranges": [
            "(line 151,col 13)-(line 151,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.TestTSubObject2.getT()",
        "snippet": "        public int getT() {\n            return t;\n        }",
        "begin_line": 153,
        "end_line": 155,
        "comment": "",
        "child_ranges": [
            "(line 154,col 13)-(line 154,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.TestTSubObject2.setT(int)",
        "snippet": "        public void setT(int t) {\n            this.t = t;\n        }",
        "begin_line": 156,
        "end_line": 158,
        "comment": "",
        "child_ranges": [
            "(line 157,col 13)-(line 157,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testReflectionEquals()",
        "snippet": "    public void testReflectionEquals() {\n        TestObject o1 = new TestObject(4);\n        TestObject o2 = new TestObject(5);\n        assertTrue(EqualsBuilder.reflectionEquals(o1, o1));\n        assertTrue(!EqualsBuilder.reflectionEquals(o1, o2));\n        o2.setA(4);\n        assertTrue(EqualsBuilder.reflectionEquals(o1, o2));\n\n        assertTrue(!EqualsBuilder.reflectionEquals(o1, this));\n\n        assertTrue(!EqualsBuilder.reflectionEquals(o1, null));\n        assertTrue(!EqualsBuilder.reflectionEquals(null, o2));\n        assertTrue(EqualsBuilder.reflectionEquals((Object) null, (Object) null));\n    }",
        "begin_line": 161,
        "end_line": 174,
        "comment": "",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 42)",
            "(line 163,col 9)-(line 163,col 42)",
            "(line 164,col 9)-(line 164,col 59)",
            "(line 165,col 9)-(line 165,col 60)",
            "(line 166,col 9)-(line 166,col 19)",
            "(line 167,col 9)-(line 167,col 59)",
            "(line 169,col 9)-(line 169,col 62)",
            "(line 171,col 9)-(line 171,col 62)",
            "(line 172,col 9)-(line 172,col 62)",
            "(line 173,col 9)-(line 173,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testReflectionHierarchyEquals()",
        "snippet": "    public void testReflectionHierarchyEquals() {\n        testReflectionHierarchyEquals(false);\n        testReflectionHierarchyEquals(true);\n        // Transients\n        assertTrue(EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 4), true));\n        assertTrue(EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 4), false));\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 0, 0, 4), new TestTTLeafObject(1, 2, 3, 4), true));\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 0), true));\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestTTLeafObject(0, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 4), true));\n    }",
        "begin_line": 176,
        "end_line": 185,
        "comment": "",
        "child_ranges": [
            "(line 177,col 9)-(line 177,col 45)",
            "(line 178,col 9)-(line 178,col 44)",
            "(line 180,col 9)-(line 180,col 125)",
            "(line 181,col 9)-(line 181,col 126)",
            "(line 182,col 9)-(line 182,col 126)",
            "(line 183,col 9)-(line 183,col 126)",
            "(line 184,col 9)-(line 184,col 126)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testReflectionHierarchyEquals(boolean)",
        "snippet": "    public void testReflectionHierarchyEquals(boolean testTransients) {\n        TestObject to1 = new TestObject(4);\n        TestObject to1Bis = new TestObject(4);\n        TestObject to1Ter = new TestObject(4);\n        TestObject to2 = new TestObject(5);\n        TestEmptySubObject teso = new TestEmptySubObject(4);\n        TestTSubObject ttso = new TestTSubObject(4, 1);\n        TestTTSubObject tttso = new TestTTSubObject(4, 1, 2);\n        TestTTLeafObject ttlo = new TestTTLeafObject(4, 1, 2, 3);\n        TestSubObject tso1 = new TestSubObject(1, 4);\n        TestSubObject tso1bis = new TestSubObject(1, 4);\n        TestSubObject tso1ter = new TestSubObject(1, 4);\n        TestSubObject tso2 = new TestSubObject(2, 5);\n\n        testReflectionEqualsEquivalenceRelationship(to1, to1Bis, to1Ter, to2, new TestObject(), testTransients);\n        testReflectionEqualsEquivalenceRelationship(tso1, tso1bis, tso1ter, tso2, new TestSubObject(), testTransients);\n\n        // More sanity checks:\n\n        // same values\n        assertTrue(EqualsBuilder.reflectionEquals(ttlo, ttlo, testTransients));\n        assertTrue(EqualsBuilder.reflectionEquals(new TestSubObject(1, 10), new TestSubObject(1, 10), testTransients));\n        // same super values, diff sub values\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(1, 10), new TestSubObject(1, 11), testTransients));\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(1, 11), new TestSubObject(1, 10), testTransients));\n        // diff super values, same sub values\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(0, 10), new TestSubObject(1, 10), testTransients));\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(1, 10), new TestSubObject(0, 10), testTransients));\n\n        // mix super and sub types: equals\n        assertTrue(EqualsBuilder.reflectionEquals(to1, teso, testTransients));\n        assertTrue(EqualsBuilder.reflectionEquals(teso, to1, testTransients));\n\n        assertTrue(EqualsBuilder.reflectionEquals(to1, ttso, false)); // Force testTransients = false for this assert\n        assertTrue(EqualsBuilder.reflectionEquals(ttso, to1, false)); // Force testTransients = false for this assert\n\n        assertTrue(EqualsBuilder.reflectionEquals(to1, tttso, false)); // Force testTransients = false for this assert\n        assertTrue(EqualsBuilder.reflectionEquals(tttso, to1, false)); // Force testTransients = false for this assert\n\n        assertTrue(EqualsBuilder.reflectionEquals(ttso, tttso, false)); // Force testTransients = false for this assert\n        assertTrue(EqualsBuilder.reflectionEquals(tttso, ttso, false)); // Force testTransients = false for this assert\n\n        // mix super and sub types: NOT equals\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestObject(0), new TestEmptySubObject(1), testTransients));\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestEmptySubObject(1), new TestObject(0), testTransients));\n\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestObject(0), new TestTSubObject(1, 1), testTransients));\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestTSubObject(1, 1), new TestObject(0), testTransients));\n\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestObject(1), new TestSubObject(0, 10), testTransients));\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(0, 10), new TestObject(1), testTransients));\n\n        assertTrue(!EqualsBuilder.reflectionEquals(to1, ttlo));\n        assertTrue(!EqualsBuilder.reflectionEquals(tso1, this));\n    }",
        "begin_line": 187,
        "end_line": 241,
        "comment": "",
        "child_ranges": [
            "(line 188,col 9)-(line 188,col 43)",
            "(line 189,col 9)-(line 189,col 46)",
            "(line 190,col 9)-(line 190,col 46)",
            "(line 191,col 9)-(line 191,col 43)",
            "(line 192,col 9)-(line 192,col 60)",
            "(line 193,col 9)-(line 193,col 55)",
            "(line 194,col 9)-(line 194,col 61)",
            "(line 195,col 9)-(line 195,col 65)",
            "(line 196,col 9)-(line 196,col 53)",
            "(line 197,col 9)-(line 197,col 56)",
            "(line 198,col 9)-(line 198,col 56)",
            "(line 199,col 9)-(line 199,col 53)",
            "(line 201,col 9)-(line 201,col 112)",
            "(line 202,col 9)-(line 202,col 119)",
            "(line 207,col 9)-(line 207,col 79)",
            "(line 208,col 9)-(line 208,col 119)",
            "(line 210,col 9)-(line 210,col 120)",
            "(line 211,col 9)-(line 211,col 120)",
            "(line 213,col 9)-(line 213,col 120)",
            "(line 214,col 9)-(line 214,col 120)",
            "(line 217,col 9)-(line 217,col 78)",
            "(line 218,col 9)-(line 218,col 78)",
            "(line 220,col 9)-(line 220,col 69)",
            "(line 221,col 9)-(line 221,col 69)",
            "(line 223,col 9)-(line 223,col 70)",
            "(line 224,col 9)-(line 224,col 70)",
            "(line 226,col 9)-(line 226,col 71)",
            "(line 227,col 9)-(line 227,col 71)",
            "(line 230,col 9)-(line 230,col 114)",
            "(line 231,col 9)-(line 231,col 114)",
            "(line 233,col 9)-(line 233,col 113)",
            "(line 234,col 9)-(line 234,col 113)",
            "(line 236,col 9)-(line 236,col 113)",
            "(line 237,col 9)-(line 237,col 113)",
            "(line 239,col 9)-(line 239,col 63)",
            "(line 240,col 9)-(line 240,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testReflectionEqualsEquivalenceRelationship(org.apache.commons.lang.builder.EqualsBuilderTest.TestObject, org.apache.commons.lang.builder.EqualsBuilderTest.TestObject, org.apache.commons.lang.builder.EqualsBuilderTest.TestObject, org.apache.commons.lang.builder.EqualsBuilderTest.TestObject, org.apache.commons.lang.builder.EqualsBuilderTest.TestObject, boolean)",
        "snippet": "    public void testReflectionEqualsEquivalenceRelationship(\n        TestObject to,\n        TestObject toBis,\n        TestObject toTer,\n        TestObject to2,\n        TestObject oToChange,\n        boolean testTransients) {\n\n        // reflection test\n        assertTrue(EqualsBuilder.reflectionEquals(to, to, testTransients));\n        assertTrue(EqualsBuilder.reflectionEquals(to2, to2, testTransients));\n\n        // symmetry test\n        assertTrue(EqualsBuilder.reflectionEquals(to, toBis, testTransients) && EqualsBuilder.reflectionEquals(toBis, to, testTransients));\n\n        // transitive test\n        assertTrue(\n            EqualsBuilder.reflectionEquals(to, toBis, testTransients)\n                && EqualsBuilder.reflectionEquals(toBis, toTer, testTransients)\n                && EqualsBuilder.reflectionEquals(to, toTer, testTransients));\n\n        // consistency test\n        oToChange.setA(to.getA());\n        if (oToChange instanceof TestSubObject) {\n            ((TestSubObject) oToChange).setB(((TestSubObject) to).getB());\n        }\n        assertTrue(EqualsBuilder.reflectionEquals(oToChange, to, testTransients));\n        assertTrue(EqualsBuilder.reflectionEquals(oToChange, to, testTransients));\n        oToChange.setA(to.getA() + 1);\n        if (oToChange instanceof TestSubObject) {\n            ((TestSubObject) oToChange).setB(((TestSubObject) to).getB() + 1);\n        }\n        assertTrue(!EqualsBuilder.reflectionEquals(oToChange, to, testTransients));\n        assertTrue(!EqualsBuilder.reflectionEquals(oToChange, to, testTransients));\n\n        // non-null reference test\n        assertTrue(!EqualsBuilder.reflectionEquals(to, null, testTransients));\n        assertTrue(!EqualsBuilder.reflectionEquals(to2, null, testTransients));\n        assertTrue(!EqualsBuilder.reflectionEquals(null, to, testTransients));\n        assertTrue(!EqualsBuilder.reflectionEquals(null, to2, testTransients));\n        assertTrue(EqualsBuilder.reflectionEquals((Object) null, (Object) null, testTransients));\n    }",
        "begin_line": 258,
        "end_line": 299,
        "comment": "\n     * Equivalence relationship tests inspired by \"Effective Java\":\n     * <ul>\n     * <li>reflection</li>\n     * <li>symmetry</li>\n     * <li>transitive</li>\n     * <li>consistency</li>\n     * <li>non-null reference</li>\n     * </ul>\n     * @param to a TestObject\n     * @param toBis a TestObject, equal to to and toTer\n     * @param toTer Left hand side, equal to to and toBis\n     * @param to2 a different TestObject\n     * @param oToChange a TestObject that will be changed\n     ",
        "child_ranges": [
            "(line 267,col 9)-(line 267,col 75)",
            "(line 268,col 9)-(line 268,col 77)",
            "(line 271,col 9)-(line 271,col 139)",
            "(line 274,col 9)-(line 277,col 78)",
            "(line 280,col 9)-(line 280,col 34)",
            "(line 281,col 9)-(line 283,col 9)",
            "(line 284,col 9)-(line 284,col 82)",
            "(line 285,col 9)-(line 285,col 82)",
            "(line 286,col 9)-(line 286,col 38)",
            "(line 287,col 9)-(line 289,col 9)",
            "(line 290,col 9)-(line 290,col 83)",
            "(line 291,col 9)-(line 291,col 83)",
            "(line 294,col 9)-(line 294,col 78)",
            "(line 295,col 9)-(line 295,col 79)",
            "(line 296,col 9)-(line 296,col 78)",
            "(line 297,col 9)-(line 297,col 79)",
            "(line 298,col 9)-(line 298,col 97)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testSuper()",
        "snippet": "    public void testSuper() {\n        TestObject o1 = new TestObject(4);\n        TestObject o2 = new TestObject(5);\n        assertEquals(true, new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals());\n        assertEquals(false, new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals());\n        assertEquals(false, new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals());\n        assertEquals(false, new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals());\n    }",
        "begin_line": 301,
        "end_line": 308,
        "comment": "",
        "child_ranges": [
            "(line 302,col 9)-(line 302,col 42)",
            "(line 303,col 9)-(line 303,col 42)",
            "(line 304,col 9)-(line 304,col 92)",
            "(line 305,col 9)-(line 305,col 94)",
            "(line 306,col 9)-(line 306,col 93)",
            "(line 307,col 9)-(line 307,col 94)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testObject()",
        "snippet": "    public void testObject() {\n        TestObject o1 = new TestObject(4);\n        TestObject o2 = new TestObject(5);\n        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n        o2.setA(4);\n        assertTrue(new EqualsBuilder().append(o1, o2).isEquals());\n\n        assertTrue(!new EqualsBuilder().append(o1, this).isEquals());\n        \n        assertTrue(!new EqualsBuilder().append(o1, null).isEquals());\n        assertTrue(!new EqualsBuilder().append(null, o2).isEquals());\n        assertTrue(new EqualsBuilder().append((Object) null, (Object) null).isEquals());\n    }",
        "begin_line": 310,
        "end_line": 323,
        "comment": "",
        "child_ranges": [
            "(line 311,col 9)-(line 311,col 42)",
            "(line 312,col 9)-(line 312,col 42)",
            "(line 313,col 9)-(line 313,col 66)",
            "(line 314,col 9)-(line 314,col 67)",
            "(line 315,col 9)-(line 315,col 19)",
            "(line 316,col 9)-(line 316,col 66)",
            "(line 318,col 9)-(line 318,col 69)",
            "(line 320,col 9)-(line 320,col 69)",
            "(line 321,col 9)-(line 321,col 69)",
            "(line 322,col 9)-(line 322,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testLong()",
        "snippet": "    public void testLong() {\n        long o1 = 1L;\n        long o2 = 2L;\n        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n    }",
        "begin_line": 325,
        "end_line": 330,
        "comment": "",
        "child_ranges": [
            "(line 326,col 9)-(line 326,col 21)",
            "(line 327,col 9)-(line 327,col 21)",
            "(line 328,col 9)-(line 328,col 66)",
            "(line 329,col 9)-(line 329,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testInt()",
        "snippet": "    public void testInt() {\n        int o1 = 1;\n        int o2 = 2;\n        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n    }",
        "begin_line": 332,
        "end_line": 337,
        "comment": "",
        "child_ranges": [
            "(line 333,col 9)-(line 333,col 19)",
            "(line 334,col 9)-(line 334,col 19)",
            "(line 335,col 9)-(line 335,col 66)",
            "(line 336,col 9)-(line 336,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testShort()",
        "snippet": "    public void testShort() {\n        short o1 = 1;\n        short o2 = 2;\n        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n    }",
        "begin_line": 339,
        "end_line": 344,
        "comment": "",
        "child_ranges": [
            "(line 340,col 9)-(line 340,col 21)",
            "(line 341,col 9)-(line 341,col 21)",
            "(line 342,col 9)-(line 342,col 66)",
            "(line 343,col 9)-(line 343,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testChar()",
        "snippet": "    public void testChar() {\n        char o1 = 1;\n        char o2 = 2;\n        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n    }",
        "begin_line": 346,
        "end_line": 351,
        "comment": "",
        "child_ranges": [
            "(line 347,col 9)-(line 347,col 20)",
            "(line 348,col 9)-(line 348,col 20)",
            "(line 349,col 9)-(line 349,col 66)",
            "(line 350,col 9)-(line 350,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testByte()",
        "snippet": "    public void testByte() {\n        byte o1 = 1;\n        byte o2 = 2;\n        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n    }",
        "begin_line": 353,
        "end_line": 358,
        "comment": "",
        "child_ranges": [
            "(line 354,col 9)-(line 354,col 20)",
            "(line 355,col 9)-(line 355,col 20)",
            "(line 356,col 9)-(line 356,col 66)",
            "(line 357,col 9)-(line 357,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testDouble()",
        "snippet": "    public void testDouble() {\n        double o1 = 1;\n        double o2 = 2;\n        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, Double.NaN).isEquals());\n        assertTrue(new EqualsBuilder().append(Double.NaN, Double.NaN).isEquals());\n        assertTrue(new EqualsBuilder().append(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY).isEquals());\n    }",
        "begin_line": 360,
        "end_line": 368,
        "comment": "",
        "child_ranges": [
            "(line 361,col 9)-(line 361,col 22)",
            "(line 362,col 9)-(line 362,col 22)",
            "(line 363,col 9)-(line 363,col 66)",
            "(line 364,col 9)-(line 364,col 67)",
            "(line 365,col 9)-(line 365,col 75)",
            "(line 366,col 9)-(line 366,col 82)",
            "(line 367,col 9)-(line 367,col 110)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testFloat()",
        "snippet": "    public void testFloat() {\n        float o1 = 1;\n        float o2 = 2;\n        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, Float.NaN).isEquals());\n        assertTrue(new EqualsBuilder().append(Float.NaN, Float.NaN).isEquals());\n        assertTrue(new EqualsBuilder().append(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY).isEquals());\n    }",
        "begin_line": 370,
        "end_line": 378,
        "comment": "",
        "child_ranges": [
            "(line 371,col 9)-(line 371,col 21)",
            "(line 372,col 9)-(line 372,col 21)",
            "(line 373,col 9)-(line 373,col 66)",
            "(line 374,col 9)-(line 374,col 67)",
            "(line 375,col 9)-(line 375,col 74)",
            "(line 376,col 9)-(line 376,col 80)",
            "(line 377,col 9)-(line 377,col 108)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testBigDecimal()",
        "snippet": "    public void testBigDecimal() {\n        BigDecimal o1 = new BigDecimal(\"2.0\");\n        BigDecimal o2 = new BigDecimal(\"2.00\");\n        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n        assertTrue(new EqualsBuilder().append(o1, o2).isEquals());\n    }",
        "begin_line": 381,
        "end_line": 386,
        "comment": " https://issues.apache.org/jira/browse/LANG-393",
        "child_ranges": [
            "(line 382,col 9)-(line 382,col 46)",
            "(line 383,col 9)-(line 383,col 47)",
            "(line 384,col 9)-(line 384,col 66)",
            "(line 385,col 9)-(line 385,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testAccessors()",
        "snippet": "    public void testAccessors() {\n        EqualsBuilder equalsBuilder = new EqualsBuilder();\n        assertTrue(equalsBuilder.isEquals());\n        equalsBuilder.setEquals(true);\n        assertTrue(equalsBuilder.isEquals());\n        equalsBuilder.setEquals(false);\n        assertFalse(equalsBuilder.isEquals());\n    }",
        "begin_line": 388,
        "end_line": 395,
        "comment": "",
        "child_ranges": [
            "(line 389,col 9)-(line 389,col 58)",
            "(line 390,col 9)-(line 390,col 45)",
            "(line 391,col 9)-(line 391,col 38)",
            "(line 392,col 9)-(line 392,col 45)",
            "(line 393,col 9)-(line 393,col 39)",
            "(line 394,col 9)-(line 394,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testBoolean()",
        "snippet": "    public void testBoolean() {\n        boolean o1 = true;\n        boolean o2 = false;\n        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n    }",
        "begin_line": 397,
        "end_line": 402,
        "comment": "",
        "child_ranges": [
            "(line 398,col 9)-(line 398,col 26)",
            "(line 399,col 9)-(line 399,col 27)",
            "(line 400,col 9)-(line 400,col 66)",
            "(line 401,col 9)-(line 401,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testObjectArray()",
        "snippet": "    public void testObjectArray() {\n        TestObject[] obj1 = new TestObject[3];\n        obj1[0] = new TestObject(4);\n        obj1[1] = new TestObject(5);\n        obj1[2] = null;\n        TestObject[] obj2 = new TestObject[3];\n        obj2[0] = new TestObject(4);\n        obj2[1] = new TestObject(5);\n        obj2[2] = null;\n        \n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj2, obj2).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[1].setA(6);\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[1].setA(5);\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[2] = obj1[1];\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[2] = null;\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n                       \n        obj2 = null;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1 = null;\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 404,
        "end_line": 430,
        "comment": "",
        "child_ranges": [
            "(line 405,col 9)-(line 405,col 46)",
            "(line 406,col 9)-(line 406,col 36)",
            "(line 407,col 9)-(line 407,col 36)",
            "(line 408,col 9)-(line 408,col 23)",
            "(line 409,col 9)-(line 409,col 46)",
            "(line 410,col 9)-(line 410,col 36)",
            "(line 411,col 9)-(line 411,col 36)",
            "(line 412,col 9)-(line 412,col 23)",
            "(line 414,col 9)-(line 414,col 70)",
            "(line 415,col 9)-(line 415,col 70)",
            "(line 416,col 9)-(line 416,col 70)",
            "(line 417,col 9)-(line 417,col 24)",
            "(line 418,col 9)-(line 418,col 71)",
            "(line 419,col 9)-(line 419,col 24)",
            "(line 420,col 9)-(line 420,col 70)",
            "(line 421,col 9)-(line 421,col 26)",
            "(line 422,col 9)-(line 422,col 71)",
            "(line 423,col 9)-(line 423,col 23)",
            "(line 424,col 9)-(line 424,col 70)",
            "(line 426,col 9)-(line 426,col 20)",
            "(line 427,col 9)-(line 427,col 71)",
            "(line 428,col 9)-(line 428,col 20)",
            "(line 429,col 9)-(line 429,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testLongArray()",
        "snippet": "    public void testLongArray() {\n        long[] obj1 = new long[2];\n        obj1[0] = 5L;\n        obj1[1] = 6L;\n        long[] obj2 = new long[2];\n        obj2[0] = 5L;\n        obj2[1] = 6L;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n\n        obj2 = null;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1 = null;\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 432,
        "end_line": 448,
        "comment": "",
        "child_ranges": [
            "(line 433,col 9)-(line 433,col 34)",
            "(line 434,col 9)-(line 434,col 21)",
            "(line 435,col 9)-(line 435,col 21)",
            "(line 436,col 9)-(line 436,col 34)",
            "(line 437,col 9)-(line 437,col 21)",
            "(line 438,col 9)-(line 438,col 21)",
            "(line 439,col 9)-(line 439,col 70)",
            "(line 440,col 9)-(line 440,col 70)",
            "(line 441,col 9)-(line 441,col 20)",
            "(line 442,col 9)-(line 442,col 71)",
            "(line 444,col 9)-(line 444,col 20)",
            "(line 445,col 9)-(line 445,col 71)",
            "(line 446,col 9)-(line 446,col 20)",
            "(line 447,col 9)-(line 447,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testIntArray()",
        "snippet": "    public void testIntArray() {\n        int[] obj1 = new int[2];\n        obj1[0] = 5;\n        obj1[1] = 6;\n        int[] obj2 = new int[2];\n        obj2[0] = 5;\n        obj2[1] = 6;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n\n        obj2 = null;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1 = null;\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 450,
        "end_line": 466,
        "comment": "",
        "child_ranges": [
            "(line 451,col 9)-(line 451,col 32)",
            "(line 452,col 9)-(line 452,col 20)",
            "(line 453,col 9)-(line 453,col 20)",
            "(line 454,col 9)-(line 454,col 32)",
            "(line 455,col 9)-(line 455,col 20)",
            "(line 456,col 9)-(line 456,col 20)",
            "(line 457,col 9)-(line 457,col 70)",
            "(line 458,col 9)-(line 458,col 70)",
            "(line 459,col 9)-(line 459,col 20)",
            "(line 460,col 9)-(line 460,col 71)",
            "(line 462,col 9)-(line 462,col 20)",
            "(line 463,col 9)-(line 463,col 71)",
            "(line 464,col 9)-(line 464,col 20)",
            "(line 465,col 9)-(line 465,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testShortArray()",
        "snippet": "    public void testShortArray() {\n        short[] obj1 = new short[2];\n        obj1[0] = 5;\n        obj1[1] = 6;\n        short[] obj2 = new short[2];\n        obj2[0] = 5;\n        obj2[1] = 6;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n\n        obj2 = null;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1 = null;\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 468,
        "end_line": 484,
        "comment": "",
        "child_ranges": [
            "(line 469,col 9)-(line 469,col 36)",
            "(line 470,col 9)-(line 470,col 20)",
            "(line 471,col 9)-(line 471,col 20)",
            "(line 472,col 9)-(line 472,col 36)",
            "(line 473,col 9)-(line 473,col 20)",
            "(line 474,col 9)-(line 474,col 20)",
            "(line 475,col 9)-(line 475,col 70)",
            "(line 476,col 9)-(line 476,col 70)",
            "(line 477,col 9)-(line 477,col 20)",
            "(line 478,col 9)-(line 478,col 71)",
            "(line 480,col 9)-(line 480,col 20)",
            "(line 481,col 9)-(line 481,col 71)",
            "(line 482,col 9)-(line 482,col 20)",
            "(line 483,col 9)-(line 483,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testCharArray()",
        "snippet": "    public void testCharArray() {\n        char[] obj1 = new char[2];\n        obj1[0] = 5;\n        obj1[1] = 6;\n        char[] obj2 = new char[2];\n        obj2[0] = 5;\n        obj2[1] = 6;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n\n        obj2 = null;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1 = null;\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 486,
        "end_line": 502,
        "comment": "",
        "child_ranges": [
            "(line 487,col 9)-(line 487,col 34)",
            "(line 488,col 9)-(line 488,col 20)",
            "(line 489,col 9)-(line 489,col 20)",
            "(line 490,col 9)-(line 490,col 34)",
            "(line 491,col 9)-(line 491,col 20)",
            "(line 492,col 9)-(line 492,col 20)",
            "(line 493,col 9)-(line 493,col 70)",
            "(line 494,col 9)-(line 494,col 70)",
            "(line 495,col 9)-(line 495,col 20)",
            "(line 496,col 9)-(line 496,col 71)",
            "(line 498,col 9)-(line 498,col 20)",
            "(line 499,col 9)-(line 499,col 71)",
            "(line 500,col 9)-(line 500,col 20)",
            "(line 501,col 9)-(line 501,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testByteArray()",
        "snippet": "    public void testByteArray() {\n        byte[] obj1 = new byte[2];\n        obj1[0] = 5;\n        obj1[1] = 6;\n        byte[] obj2 = new byte[2];\n        obj2[0] = 5;\n        obj2[1] = 6;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n\n        obj2 = null;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1 = null;\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 504,
        "end_line": 520,
        "comment": "",
        "child_ranges": [
            "(line 505,col 9)-(line 505,col 34)",
            "(line 506,col 9)-(line 506,col 20)",
            "(line 507,col 9)-(line 507,col 20)",
            "(line 508,col 9)-(line 508,col 34)",
            "(line 509,col 9)-(line 509,col 20)",
            "(line 510,col 9)-(line 510,col 20)",
            "(line 511,col 9)-(line 511,col 70)",
            "(line 512,col 9)-(line 512,col 70)",
            "(line 513,col 9)-(line 513,col 20)",
            "(line 514,col 9)-(line 514,col 71)",
            "(line 516,col 9)-(line 516,col 20)",
            "(line 517,col 9)-(line 517,col 71)",
            "(line 518,col 9)-(line 518,col 20)",
            "(line 519,col 9)-(line 519,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testDoubleArray()",
        "snippet": "    public void testDoubleArray() {\n        double[] obj1 = new double[2];\n        obj1[0] = 5;\n        obj1[1] = 6;\n        double[] obj2 = new double[2];\n        obj2[0] = 5;\n        obj2[1] = 6;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n\n        obj2 = null;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1 = null;\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 522,
        "end_line": 538,
        "comment": "",
        "child_ranges": [
            "(line 523,col 9)-(line 523,col 38)",
            "(line 524,col 9)-(line 524,col 20)",
            "(line 525,col 9)-(line 525,col 20)",
            "(line 526,col 9)-(line 526,col 38)",
            "(line 527,col 9)-(line 527,col 20)",
            "(line 528,col 9)-(line 528,col 20)",
            "(line 529,col 9)-(line 529,col 70)",
            "(line 530,col 9)-(line 530,col 70)",
            "(line 531,col 9)-(line 531,col 20)",
            "(line 532,col 9)-(line 532,col 71)",
            "(line 534,col 9)-(line 534,col 20)",
            "(line 535,col 9)-(line 535,col 71)",
            "(line 536,col 9)-(line 536,col 20)",
            "(line 537,col 9)-(line 537,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testFloatArray()",
        "snippet": "    public void testFloatArray() {\n        float[] obj1 = new float[2];\n        obj1[0] = 5;\n        obj1[1] = 6;\n        float[] obj2 = new float[2];\n        obj2[0] = 5;\n        obj2[1] = 6;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n\n        obj2 = null;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1 = null;\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 540,
        "end_line": 556,
        "comment": "",
        "child_ranges": [
            "(line 541,col 9)-(line 541,col 36)",
            "(line 542,col 9)-(line 542,col 20)",
            "(line 543,col 9)-(line 543,col 20)",
            "(line 544,col 9)-(line 544,col 36)",
            "(line 545,col 9)-(line 545,col 20)",
            "(line 546,col 9)-(line 546,col 20)",
            "(line 547,col 9)-(line 547,col 70)",
            "(line 548,col 9)-(line 548,col 70)",
            "(line 549,col 9)-(line 549,col 20)",
            "(line 550,col 9)-(line 550,col 71)",
            "(line 552,col 9)-(line 552,col 20)",
            "(line 553,col 9)-(line 553,col 71)",
            "(line 554,col 9)-(line 554,col 20)",
            "(line 555,col 9)-(line 555,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testBooleanArray()",
        "snippet": "    public void testBooleanArray() {\n        boolean[] obj1 = new boolean[2];\n        obj1[0] = true;\n        obj1[1] = false;\n        boolean[] obj2 = new boolean[2];\n        obj2[0] = true;\n        obj2[1] = false;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[1] = true;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n\n        obj2 = null;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1 = null;\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 558,
        "end_line": 574,
        "comment": "",
        "child_ranges": [
            "(line 559,col 9)-(line 559,col 40)",
            "(line 560,col 9)-(line 560,col 23)",
            "(line 561,col 9)-(line 561,col 24)",
            "(line 562,col 9)-(line 562,col 40)",
            "(line 563,col 9)-(line 563,col 23)",
            "(line 564,col 9)-(line 564,col 24)",
            "(line 565,col 9)-(line 565,col 70)",
            "(line 566,col 9)-(line 566,col 70)",
            "(line 567,col 9)-(line 567,col 23)",
            "(line 568,col 9)-(line 568,col 71)",
            "(line 570,col 9)-(line 570,col 20)",
            "(line 571,col 9)-(line 571,col 71)",
            "(line 572,col 9)-(line 572,col 20)",
            "(line 573,col 9)-(line 573,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testMultiLongArray()",
        "snippet": "    public void testMultiLongArray() {\n        long[][] array1 = new long[2][2];\n        long[][] array2 = new long[2][2];\n        for (int i = 0; i < array1.length; ++i) {\n            for (int j = 0; j < array1[0].length; j++) {\n                array1[i][j] = (i + 1) * (j + 1);\n                array2[i][j] = (i + 1) * (j + 1);\n            }\n        }\n        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n        array1[1][1] = 0;\n        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n    }",
        "begin_line": 576,
        "end_line": 589,
        "comment": "",
        "child_ranges": [
            "(line 577,col 9)-(line 577,col 41)",
            "(line 578,col 9)-(line 578,col 41)",
            "(line 579,col 9)-(line 584,col 9)",
            "(line 585,col 9)-(line 585,col 74)",
            "(line 586,col 9)-(line 586,col 74)",
            "(line 587,col 9)-(line 587,col 25)",
            "(line 588,col 9)-(line 588,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testMultiIntArray()",
        "snippet": "    public void testMultiIntArray() {\n        int[][] array1 = new int[2][2];\n        int[][] array2 = new int[2][2];\n        for (int i = 0; i < array1.length; ++i) {\n            for (int j = 0; j < array1[0].length; j++) {\n                array1[i][j] = (i + 1) * (j + 1);\n                array2[i][j] = (i + 1) * (j + 1);\n            }\n        }\n        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n        array1[1][1] = 0;\n        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n    }",
        "begin_line": 591,
        "end_line": 604,
        "comment": "",
        "child_ranges": [
            "(line 592,col 9)-(line 592,col 39)",
            "(line 593,col 9)-(line 593,col 39)",
            "(line 594,col 9)-(line 599,col 9)",
            "(line 600,col 9)-(line 600,col 74)",
            "(line 601,col 9)-(line 601,col 74)",
            "(line 602,col 9)-(line 602,col 25)",
            "(line 603,col 9)-(line 603,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testMultiShortArray()",
        "snippet": "    public void testMultiShortArray() {\n        short[][] array1 = new short[2][2];\n        short[][] array2 = new short[2][2];\n        for (short i = 0; i < array1.length; ++i) {\n            for (short j = 0; j < array1[0].length; j++) {\n                array1[i][j] = i;\n                array2[i][j] = i;\n            }\n        }\n        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n        array1[1][1] = 0;\n        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n    }",
        "begin_line": 606,
        "end_line": 619,
        "comment": "",
        "child_ranges": [
            "(line 607,col 9)-(line 607,col 43)",
            "(line 608,col 9)-(line 608,col 43)",
            "(line 609,col 9)-(line 614,col 9)",
            "(line 615,col 9)-(line 615,col 74)",
            "(line 616,col 9)-(line 616,col 74)",
            "(line 617,col 9)-(line 617,col 25)",
            "(line 618,col 9)-(line 618,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testMultiCharArray()",
        "snippet": "    public void testMultiCharArray() {\n        char[][] array1 = new char[2][2];\n        char[][] array2 = new char[2][2];\n        for (char i = 0; i < array1.length; ++i) {\n            for (char j = 0; j < array1[0].length; j++) {\n                array1[i][j] = i;\n                array2[i][j] = i;\n            }\n        }\n        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n        array1[1][1] = 0;\n        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n    }",
        "begin_line": 621,
        "end_line": 634,
        "comment": "",
        "child_ranges": [
            "(line 622,col 9)-(line 622,col 41)",
            "(line 623,col 9)-(line 623,col 41)",
            "(line 624,col 9)-(line 629,col 9)",
            "(line 630,col 9)-(line 630,col 74)",
            "(line 631,col 9)-(line 631,col 74)",
            "(line 632,col 9)-(line 632,col 25)",
            "(line 633,col 9)-(line 633,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testMultiByteArray()",
        "snippet": "    public void testMultiByteArray() {\n        byte[][] array1 = new byte[2][2];\n        byte[][] array2 = new byte[2][2];\n        for (byte i = 0; i < array1.length; ++i) {\n            for (byte j = 0; j < array1[0].length; j++) {\n                array1[i][j] = i;\n                array2[i][j] = i;\n            }\n        }\n        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n        array1[1][1] = 0;\n        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n    }",
        "begin_line": 636,
        "end_line": 649,
        "comment": "",
        "child_ranges": [
            "(line 637,col 9)-(line 637,col 41)",
            "(line 638,col 9)-(line 638,col 41)",
            "(line 639,col 9)-(line 644,col 9)",
            "(line 645,col 9)-(line 645,col 74)",
            "(line 646,col 9)-(line 646,col 74)",
            "(line 647,col 9)-(line 647,col 25)",
            "(line 648,col 9)-(line 648,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testMultiFloatArray()",
        "snippet": "    public void testMultiFloatArray() {\n        float[][] array1 = new float[2][2];\n        float[][] array2 = new float[2][2];\n        for (int i = 0; i < array1.length; ++i) {\n            for (int j = 0; j < array1[0].length; j++) {\n                array1[i][j] = (i + 1) * (j + 1);\n                array2[i][j] = (i + 1) * (j + 1);\n            }\n        }\n        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n        array1[1][1] = 0;\n        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n    }",
        "begin_line": 650,
        "end_line": 663,
        "comment": "",
        "child_ranges": [
            "(line 651,col 9)-(line 651,col 43)",
            "(line 652,col 9)-(line 652,col 43)",
            "(line 653,col 9)-(line 658,col 9)",
            "(line 659,col 9)-(line 659,col 74)",
            "(line 660,col 9)-(line 660,col 74)",
            "(line 661,col 9)-(line 661,col 25)",
            "(line 662,col 9)-(line 662,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testMultiDoubleArray()",
        "snippet": "    public void testMultiDoubleArray() {\n        double[][] array1 = new double[2][2];\n        double[][] array2 = new double[2][2];\n        for (int i = 0; i < array1.length; ++i) {\n            for (int j = 0; j < array1[0].length; j++) {\n                array1[i][j] = (i + 1) * (j + 1);\n                array2[i][j] = (i + 1) * (j + 1);\n            }\n        }\n        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n        array1[1][1] = 0;\n        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n    }",
        "begin_line": 665,
        "end_line": 678,
        "comment": "",
        "child_ranges": [
            "(line 666,col 9)-(line 666,col 45)",
            "(line 667,col 9)-(line 667,col 45)",
            "(line 668,col 9)-(line 673,col 9)",
            "(line 674,col 9)-(line 674,col 74)",
            "(line 675,col 9)-(line 675,col 74)",
            "(line 676,col 9)-(line 676,col 25)",
            "(line 677,col 9)-(line 677,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testMultiBooleanArray()",
        "snippet": "    public void testMultiBooleanArray() {\n        boolean[][] array1 = new boolean[2][2];\n        boolean[][] array2 = new boolean[2][2];\n        for (int i = 0; i < array1.length; ++i) {\n            for (int j = 0; j < array1[0].length; j++) {\n                array1[i][j] = (i == 1) || (j == 1);\n                array2[i][j] = (i == 1) || (j == 1);\n            }\n        }\n        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n        array1[1][1] = false;\n        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n        \n        // compare 1 dim to 2.\n        boolean[] array3 = new boolean[]{true, true};\n        assertFalse(new EqualsBuilder().append(array1, array3).isEquals());\n        assertFalse(new EqualsBuilder().append(array3, array1).isEquals());\n        assertFalse(new EqualsBuilder().append(array2, array3).isEquals());\n        assertFalse(new EqualsBuilder().append(array3, array2).isEquals());\n    }",
        "begin_line": 680,
        "end_line": 700,
        "comment": "",
        "child_ranges": [
            "(line 681,col 9)-(line 681,col 47)",
            "(line 682,col 9)-(line 682,col 47)",
            "(line 683,col 9)-(line 688,col 9)",
            "(line 689,col 9)-(line 689,col 74)",
            "(line 690,col 9)-(line 690,col 74)",
            "(line 691,col 9)-(line 691,col 29)",
            "(line 692,col 9)-(line 692,col 75)",
            "(line 695,col 9)-(line 695,col 53)",
            "(line 696,col 9)-(line 696,col 75)",
            "(line 697,col 9)-(line 697,col 75)",
            "(line 698,col 9)-(line 698,col 75)",
            "(line 699,col 9)-(line 699,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testRaggedArray()",
        "snippet": "    public void testRaggedArray() {\n        long array1[][] = new long[2][];\n        long array2[][] = new long[2][];\n        for (int i = 0; i < array1.length; ++i) {\n            array1[i] = new long[2];\n            array2[i] = new long[2];\n            for (int j = 0; j < array1[i].length; ++j) {\n                array1[i][j] = (i + 1) * (j + 1);\n                array2[i][j] = (i + 1) * (j + 1);\n            }\n        }\n        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n        array1[1][1] = 0;\n        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n    }",
        "begin_line": 702,
        "end_line": 717,
        "comment": "",
        "child_ranges": [
            "(line 703,col 9)-(line 703,col 40)",
            "(line 704,col 9)-(line 704,col 40)",
            "(line 705,col 9)-(line 712,col 9)",
            "(line 713,col 9)-(line 713,col 74)",
            "(line 714,col 9)-(line 714,col 74)",
            "(line 715,col 9)-(line 715,col 25)",
            "(line 716,col 9)-(line 716,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testMixedArray()",
        "snippet": "    public void testMixedArray() {\n        Object array1[] = new Object[2];\n        Object array2[] = new Object[2];\n        for (int i = 0; i < array1.length; ++i) {\n            array1[i] = new long[2];\n            array2[i] = new long[2];\n            for (int j = 0; j < 2; ++j) {\n                ((long[]) array1[i])[j] = (i + 1) * (j + 1);\n                ((long[]) array2[i])[j] = (i + 1) * (j + 1);\n            }\n        }\n        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n        ((long[]) array1[1])[1] = 0;\n        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n    }",
        "begin_line": 719,
        "end_line": 734,
        "comment": "",
        "child_ranges": [
            "(line 720,col 9)-(line 720,col 40)",
            "(line 721,col 9)-(line 721,col 40)",
            "(line 722,col 9)-(line 729,col 9)",
            "(line 730,col 9)-(line 730,col 74)",
            "(line 731,col 9)-(line 731,col 74)",
            "(line 732,col 9)-(line 732,col 36)",
            "(line 733,col 9)-(line 733,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testObjectArrayHiddenByObject()",
        "snippet": "    public void testObjectArrayHiddenByObject() {\n        TestObject[] array1 = new TestObject[2];\n        array1[0] = new TestObject(4);\n        array1[1] = new TestObject(5);\n        TestObject[] array2 = new TestObject[2];\n        array2[0] = new TestObject(4);\n        array2[1] = new TestObject(5);\n        Object obj1 = array1;\n        Object obj2 = array2;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n        array1[1].setA(6);\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 736,
        "end_line": 751,
        "comment": "",
        "child_ranges": [
            "(line 737,col 9)-(line 737,col 48)",
            "(line 738,col 9)-(line 738,col 38)",
            "(line 739,col 9)-(line 739,col 38)",
            "(line 740,col 9)-(line 740,col 48)",
            "(line 741,col 9)-(line 741,col 38)",
            "(line 742,col 9)-(line 742,col 38)",
            "(line 743,col 9)-(line 743,col 29)",
            "(line 744,col 9)-(line 744,col 29)",
            "(line 745,col 9)-(line 745,col 70)",
            "(line 746,col 9)-(line 746,col 72)",
            "(line 747,col 9)-(line 747,col 70)",
            "(line 748,col 9)-(line 748,col 72)",
            "(line 749,col 9)-(line 749,col 26)",
            "(line 750,col 9)-(line 750,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testLongArrayHiddenByObject()",
        "snippet": "    public void testLongArrayHiddenByObject() {\n        long[] array1 = new long[2];\n        array1[0] = 5L;\n        array1[1] = 6L;\n        long[] array2 = new long[2];\n        array2[0] = 5L;\n        array2[1] = 6L;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n        array1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 753,
        "end_line": 768,
        "comment": "",
        "child_ranges": [
            "(line 754,col 9)-(line 754,col 36)",
            "(line 755,col 9)-(line 755,col 23)",
            "(line 756,col 9)-(line 756,col 23)",
            "(line 757,col 9)-(line 757,col 36)",
            "(line 758,col 9)-(line 758,col 23)",
            "(line 759,col 9)-(line 759,col 23)",
            "(line 760,col 9)-(line 760,col 29)",
            "(line 761,col 9)-(line 761,col 29)",
            "(line 762,col 9)-(line 762,col 70)",
            "(line 763,col 9)-(line 763,col 72)",
            "(line 764,col 9)-(line 764,col 70)",
            "(line 765,col 9)-(line 765,col 72)",
            "(line 766,col 9)-(line 766,col 22)",
            "(line 767,col 9)-(line 767,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testIntArrayHiddenByObject()",
        "snippet": "    public void testIntArrayHiddenByObject() {\n        int[] array1 = new int[2];\n        array1[0] = 5;\n        array1[1] = 6;\n        int[] array2 = new int[2];\n        array2[0] = 5;\n        array2[1] = 6;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n        array1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 770,
        "end_line": 785,
        "comment": "",
        "child_ranges": [
            "(line 771,col 9)-(line 771,col 34)",
            "(line 772,col 9)-(line 772,col 22)",
            "(line 773,col 9)-(line 773,col 22)",
            "(line 774,col 9)-(line 774,col 34)",
            "(line 775,col 9)-(line 775,col 22)",
            "(line 776,col 9)-(line 776,col 22)",
            "(line 777,col 9)-(line 777,col 29)",
            "(line 778,col 9)-(line 778,col 29)",
            "(line 779,col 9)-(line 779,col 70)",
            "(line 780,col 9)-(line 780,col 72)",
            "(line 781,col 9)-(line 781,col 70)",
            "(line 782,col 9)-(line 782,col 72)",
            "(line 783,col 9)-(line 783,col 22)",
            "(line 784,col 9)-(line 784,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testShortArrayHiddenByObject()",
        "snippet": "    public void testShortArrayHiddenByObject() {\n        short[] array1 = new short[2];\n        array1[0] = 5;\n        array1[1] = 6;\n        short[] array2 = new short[2];\n        array2[0] = 5;\n        array2[1] = 6;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n        array1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 787,
        "end_line": 802,
        "comment": "",
        "child_ranges": [
            "(line 788,col 9)-(line 788,col 38)",
            "(line 789,col 9)-(line 789,col 22)",
            "(line 790,col 9)-(line 790,col 22)",
            "(line 791,col 9)-(line 791,col 38)",
            "(line 792,col 9)-(line 792,col 22)",
            "(line 793,col 9)-(line 793,col 22)",
            "(line 794,col 9)-(line 794,col 29)",
            "(line 795,col 9)-(line 795,col 29)",
            "(line 796,col 9)-(line 796,col 70)",
            "(line 797,col 9)-(line 797,col 72)",
            "(line 798,col 9)-(line 798,col 70)",
            "(line 799,col 9)-(line 799,col 72)",
            "(line 800,col 9)-(line 800,col 22)",
            "(line 801,col 9)-(line 801,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testCharArrayHiddenByObject()",
        "snippet": "    public void testCharArrayHiddenByObject() {\n        char[] array1 = new char[2];\n        array1[0] = 5;\n        array1[1] = 6;\n        char[] array2 = new char[2];\n        array2[0] = 5;\n        array2[1] = 6;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n        array1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 804,
        "end_line": 819,
        "comment": "",
        "child_ranges": [
            "(line 805,col 9)-(line 805,col 36)",
            "(line 806,col 9)-(line 806,col 22)",
            "(line 807,col 9)-(line 807,col 22)",
            "(line 808,col 9)-(line 808,col 36)",
            "(line 809,col 9)-(line 809,col 22)",
            "(line 810,col 9)-(line 810,col 22)",
            "(line 811,col 9)-(line 811,col 29)",
            "(line 812,col 9)-(line 812,col 29)",
            "(line 813,col 9)-(line 813,col 70)",
            "(line 814,col 9)-(line 814,col 72)",
            "(line 815,col 9)-(line 815,col 70)",
            "(line 816,col 9)-(line 816,col 72)",
            "(line 817,col 9)-(line 817,col 22)",
            "(line 818,col 9)-(line 818,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testByteArrayHiddenByObject()",
        "snippet": "    public void testByteArrayHiddenByObject() {\n        byte[] array1 = new byte[2];\n        array1[0] = 5;\n        array1[1] = 6;\n        byte[] array2 = new byte[2];\n        array2[0] = 5;\n        array2[1] = 6;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n        array1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 821,
        "end_line": 836,
        "comment": "",
        "child_ranges": [
            "(line 822,col 9)-(line 822,col 36)",
            "(line 823,col 9)-(line 823,col 22)",
            "(line 824,col 9)-(line 824,col 22)",
            "(line 825,col 9)-(line 825,col 36)",
            "(line 826,col 9)-(line 826,col 22)",
            "(line 827,col 9)-(line 827,col 22)",
            "(line 828,col 9)-(line 828,col 29)",
            "(line 829,col 9)-(line 829,col 29)",
            "(line 830,col 9)-(line 830,col 70)",
            "(line 831,col 9)-(line 831,col 72)",
            "(line 832,col 9)-(line 832,col 70)",
            "(line 833,col 9)-(line 833,col 72)",
            "(line 834,col 9)-(line 834,col 22)",
            "(line 835,col 9)-(line 835,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testDoubleArrayHiddenByObject()",
        "snippet": "    public void testDoubleArrayHiddenByObject() {\n        double[] array1 = new double[2];\n        array1[0] = 5;\n        array1[1] = 6;\n        double[] array2 = new double[2];\n        array2[0] = 5;\n        array2[1] = 6;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n        array1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 838,
        "end_line": 853,
        "comment": "",
        "child_ranges": [
            "(line 839,col 9)-(line 839,col 40)",
            "(line 840,col 9)-(line 840,col 22)",
            "(line 841,col 9)-(line 841,col 22)",
            "(line 842,col 9)-(line 842,col 40)",
            "(line 843,col 9)-(line 843,col 22)",
            "(line 844,col 9)-(line 844,col 22)",
            "(line 845,col 9)-(line 845,col 29)",
            "(line 846,col 9)-(line 846,col 29)",
            "(line 847,col 9)-(line 847,col 70)",
            "(line 848,col 9)-(line 848,col 72)",
            "(line 849,col 9)-(line 849,col 70)",
            "(line 850,col 9)-(line 850,col 72)",
            "(line 851,col 9)-(line 851,col 22)",
            "(line 852,col 9)-(line 852,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testFloatArrayHiddenByObject()",
        "snippet": "    public void testFloatArrayHiddenByObject() {\n        float[] array1 = new float[2];\n        array1[0] = 5;\n        array1[1] = 6;\n        float[] array2 = new float[2];\n        array2[0] = 5;\n        array2[1] = 6;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n        array1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 855,
        "end_line": 870,
        "comment": "",
        "child_ranges": [
            "(line 856,col 9)-(line 856,col 38)",
            "(line 857,col 9)-(line 857,col 22)",
            "(line 858,col 9)-(line 858,col 22)",
            "(line 859,col 9)-(line 859,col 38)",
            "(line 860,col 9)-(line 860,col 22)",
            "(line 861,col 9)-(line 861,col 22)",
            "(line 862,col 9)-(line 862,col 29)",
            "(line 863,col 9)-(line 863,col 29)",
            "(line 864,col 9)-(line 864,col 70)",
            "(line 865,col 9)-(line 865,col 72)",
            "(line 866,col 9)-(line 866,col 70)",
            "(line 867,col 9)-(line 867,col 72)",
            "(line 868,col 9)-(line 868,col 22)",
            "(line 869,col 9)-(line 869,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testBooleanArrayHiddenByObject()",
        "snippet": "    public void testBooleanArrayHiddenByObject() {\n        boolean[] array1 = new boolean[2];\n        array1[0] = true;\n        array1[1] = false;\n        boolean[] array2 = new boolean[2];\n        array2[0] = true;\n        array2[1] = false;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n        array1[1] = true;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 872,
        "end_line": 887,
        "comment": "",
        "child_ranges": [
            "(line 873,col 9)-(line 873,col 42)",
            "(line 874,col 9)-(line 874,col 25)",
            "(line 875,col 9)-(line 875,col 26)",
            "(line 876,col 9)-(line 876,col 42)",
            "(line 877,col 9)-(line 877,col 25)",
            "(line 878,col 9)-(line 878,col 26)",
            "(line 879,col 9)-(line 879,col 29)",
            "(line 880,col 9)-(line 880,col 29)",
            "(line 881,col 9)-(line 881,col 70)",
            "(line 882,col 9)-(line 882,col 72)",
            "(line 883,col 9)-(line 883,col 70)",
            "(line 884,col 9)-(line 884,col 72)",
            "(line 885,col 9)-(line 885,col 25)",
            "(line 886,col 9)-(line 886,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.TestACanEqualB.TestACanEqualB(int)",
        "snippet": "        public TestACanEqualB(int a) {\n            this.a = a;\n        }",
        "begin_line": 892,
        "end_line": 894,
        "comment": "",
        "child_ranges": [
            "(line 893,col 13)-(line 893,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.TestACanEqualB.equals(java.lang.Object)",
        "snippet": "        public boolean equals(Object o) {\n            if (o == this)\n                return true;\n            if (o instanceof TestACanEqualB)\n                return this.a == ((TestACanEqualB) o).getA();\n            if (o instanceof TestBCanEqualA)\n                return this.a == ((TestBCanEqualA) o).getB();\n            return false;\n        }",
        "begin_line": 896,
        "end_line": 904,
        "comment": "",
        "child_ranges": [
            "(line 897,col 13)-(line 898,col 28)",
            "(line 899,col 13)-(line 900,col 61)",
            "(line 901,col 13)-(line 902,col 61)",
            "(line 903,col 13)-(line 903,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.TestACanEqualB.getA()",
        "snippet": "        public int getA() {\n            return this.a;\n        }",
        "begin_line": 906,
        "end_line": 908,
        "comment": "",
        "child_ranges": [
            "(line 907,col 13)-(line 907,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.TestBCanEqualA.TestBCanEqualA(int)",
        "snippet": "        public TestBCanEqualA(int b) {\n            this.b = b;\n        }",
        "begin_line": 914,
        "end_line": 916,
        "comment": "",
        "child_ranges": [
            "(line 915,col 13)-(line 915,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.TestBCanEqualA.equals(java.lang.Object)",
        "snippet": "        public boolean equals(Object o) {\n            if (o == this)\n                return true;\n            if (o instanceof TestACanEqualB)\n                return this.b == ((TestACanEqualB) o).getA();\n            if (o instanceof TestBCanEqualA)\n                return this.b == ((TestBCanEqualA) o).getB();\n            return false;\n        }",
        "begin_line": 918,
        "end_line": 926,
        "comment": "",
        "child_ranges": [
            "(line 919,col 13)-(line 920,col 28)",
            "(line 921,col 13)-(line 922,col 61)",
            "(line 923,col 13)-(line 924,col 61)",
            "(line 925,col 13)-(line 925,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.TestBCanEqualA.getB()",
        "snippet": "        public int getB() {\n            return this.b;\n        }",
        "begin_line": 928,
        "end_line": 930,
        "comment": "",
        "child_ranges": [
            "(line 929,col 13)-(line 929,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testUnrelatedClasses()",
        "snippet": "    public void testUnrelatedClasses() {\n        Object[] x = new Object[]{new TestACanEqualB(1)};\n        Object[] y = new Object[]{new TestBCanEqualA(1)};\n\n        // sanity checks:\n        assertTrue(Arrays.equals(x, x));\n        assertTrue(Arrays.equals(y, y));\n        assertTrue(Arrays.equals(x, y));\n        assertTrue(Arrays.equals(y, x));\n        // real tests:\n        assertTrue(x[0].equals(x[0]));\n        assertTrue(y[0].equals(y[0]));\n        assertTrue(x[0].equals(y[0]));\n        assertTrue(y[0].equals(x[0]));\n        assertTrue(new EqualsBuilder().append(x, x).isEquals());\n        assertTrue(new EqualsBuilder().append(y, y).isEquals());\n        assertTrue(new EqualsBuilder().append(x, y).isEquals());\n        assertTrue(new EqualsBuilder().append(y, x).isEquals());\n    }",
        "begin_line": 938,
        "end_line": 956,
        "comment": "\n     * Tests two instances of classes that can be equal and that are not \"related\". The two classes are not subclasses\n     * of each other and do not share a parent aside from Object.\n     * See http://issues.apache.org/bugzilla/show_bug.cgi?id=33069\n     ",
        "child_ranges": [
            "(line 939,col 9)-(line 939,col 57)",
            "(line 940,col 9)-(line 940,col 57)",
            "(line 943,col 9)-(line 943,col 40)",
            "(line 944,col 9)-(line 944,col 40)",
            "(line 945,col 9)-(line 945,col 40)",
            "(line 946,col 9)-(line 946,col 40)",
            "(line 948,col 9)-(line 948,col 38)",
            "(line 949,col 9)-(line 949,col 38)",
            "(line 950,col 9)-(line 950,col 38)",
            "(line 951,col 9)-(line 951,col 38)",
            "(line 952,col 9)-(line 952,col 64)",
            "(line 953,col 9)-(line 953,col 64)",
            "(line 954,col 9)-(line 954,col 64)",
            "(line 955,col 9)-(line 955,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testNpeForNullElement()",
        "snippet": "    public void testNpeForNullElement() {\n        Object[] x1 = new Object[] { new Integer(1), null, new Integer(3) };\n        Object[] x2 = new Object[] { new Integer(1), new Integer(2), new Integer(3) };\n\n        // causes an NPE in 2.0 according to:\n        // http://issues.apache.org/bugzilla/show_bug.cgi?id=33067\n        new EqualsBuilder().append(x1, x2);\n    }",
        "begin_line": 961,
        "end_line": 968,
        "comment": "\n     * Test from http://issues.apache.org/bugzilla/show_bug.cgi?id=33067\n     ",
        "child_ranges": [
            "(line 962,col 9)-(line 962,col 76)",
            "(line 963,col 9)-(line 963,col 86)",
            "(line 967,col 9)-(line 967,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.testReflectionEqualsExcludeFields()",
        "snippet": "    public void testReflectionEqualsExcludeFields() throws Exception {\n        TestObjectWithMultipleFields x1 = new TestObjectWithMultipleFields(1, 2, 3);\n        TestObjectWithMultipleFields x2 = new TestObjectWithMultipleFields(1, 3, 4);\n\n        // not equal when including all fields\n        assertTrue(!EqualsBuilder.reflectionEquals(x1, x2));\n\n        // doesn't barf on null, empty array, or non-existent field, but still tests as not equal\n        assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, (String[]) null));\n        assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] {}));\n        assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] {\"xxx\"}));\n\n        // not equal if only one of the differing fields excluded\n        assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] {\"two\"}));\n        assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] {\"three\"}));\n\n        // equal if both differing fields excluded\n        assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] {\"two\", \"three\"}));\n\n        // still equal as long as both differing fields are among excluded\n        assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] {\"one\", \"two\", \"three\"}));\n        assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] {\"one\", \"two\", \"three\", \"xxx\"}));\n    }",
        "begin_line": 970,
        "end_line": 992,
        "comment": "",
        "child_ranges": [
            "(line 971,col 9)-(line 971,col 84)",
            "(line 972,col 9)-(line 972,col 84)",
            "(line 975,col 9)-(line 975,col 60)",
            "(line 978,col 9)-(line 978,col 77)",
            "(line 979,col 9)-(line 979,col 77)",
            "(line 980,col 9)-(line 980,col 82)",
            "(line 983,col 9)-(line 983,col 82)",
            "(line 984,col 9)-(line 984,col 84)",
            "(line 987,col 9)-(line 987,col 90)",
            "(line 990,col 9)-(line 990,col 97)",
            "(line 991,col 9)-(line 991,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.EqualsBuilderTest.TestObjectWithMultipleFields.TestObjectWithMultipleFields(int, int, int)",
        "snippet": "        public TestObjectWithMultipleFields(int one, int two, int three) {\n            this.one = new TestObject(one);\n            this.two = new TestObject(two);\n            this.three = new TestObject(three);\n        }",
        "begin_line": 999,
        "end_line": 1003,
        "comment": "",
        "child_ranges": [
            "(line 1000,col 13)-(line 1000,col 43)",
            "(line 1001,col 13)-(line 1001,col 43)",
            "(line 1002,col 13)-(line 1002,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.SimpleToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/SimpleToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.SimpleToStringStyleTest.SimpleToStringStyleTest(java.lang.String)",
        "snippet": "    public SimpleToStringStyleTest(String name) {\n        super(name);\n    }",
        "begin_line": 39,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.SimpleToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/SimpleToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.SimpleToStringStyleTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.SimpleToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/SimpleToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.SimpleToStringStyleTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(SimpleToStringStyleTest.class);\n        suite.setName(\"SimpleToStringStyle Tests\");\n        return suite;\n    }",
        "begin_line": 47,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 71)",
            "(line 49,col 9)-(line 49,col 51)",
            "(line 50,col 9)-(line 50,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.SimpleToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/SimpleToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.SimpleToStringStyleTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        super.setUp();\n        ToStringBuilder.setDefaultStyle(ToStringStyle.SIMPLE_STYLE);\n    }",
        "begin_line": 53,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 22)",
            "(line 55,col 9)-(line 55,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.SimpleToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/SimpleToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.SimpleToStringStyleTest.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        super.tearDown();\n        ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);\n    }",
        "begin_line": 58,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 25)",
            "(line 60,col 9)-(line 60,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.SimpleToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/SimpleToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.SimpleToStringStyleTest.testBlank()",
        "snippet": "    public void testBlank() {\n        assertEquals(\"\", new ToStringBuilder(base).toString());\n    }",
        "begin_line": 65,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.SimpleToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/SimpleToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.SimpleToStringStyleTest.testAppendSuper()",
        "snippet": "    public void testAppendSuper() {\n        assertEquals(\"\", new ToStringBuilder(base).appendSuper(\"\").toString());\n        assertEquals(\"<null>\", new ToStringBuilder(base).appendSuper(\"<null>\").toString());\n        \n        assertEquals(\"hello\", new ToStringBuilder(base).appendSuper(\"\").append(\"a\", \"hello\").toString());\n        assertEquals(\"<null>,hello\", new ToStringBuilder(base).appendSuper(\"<null>\").append(\"a\", \"hello\").toString());\n        assertEquals(\"hello\", new ToStringBuilder(base).appendSuper(null).append(\"a\", \"hello\").toString());\n    }",
        "begin_line": 69,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 79)",
            "(line 71,col 9)-(line 71,col 91)",
            "(line 73,col 9)-(line 73,col 105)",
            "(line 74,col 9)-(line 74,col 118)",
            "(line 75,col 9)-(line 75,col 107)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.SimpleToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/SimpleToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.SimpleToStringStyleTest.testObject()",
        "snippet": "    public void testObject() {\n        Integer i3 = new Integer(3);\n        Integer i4 = new Integer(4);\n        assertEquals(\"<null>\", new ToStringBuilder(base).append((Object) null).toString());\n        assertEquals(\"3\", new ToStringBuilder(base).append(i3).toString());\n        assertEquals(\"<null>\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\n        assertEquals(\"3\", new ToStringBuilder(base).append(\"a\", i3).toString());\n        assertEquals(\"3,4\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\n        assertEquals(\"<Integer>\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\n        assertEquals(\"<size=0>\", new ToStringBuilder(base).append(\"a\", new ArrayList(), false).toString());\n        assertEquals(\"[]\", new ToStringBuilder(base).append(\"a\", new ArrayList(), true).toString());\n        assertEquals(\"<size=0>\", new ToStringBuilder(base).append(\"a\", new HashMap(), false).toString());\n        assertEquals(\"{}\", new ToStringBuilder(base).append(\"a\", new HashMap(), true).toString());\n        assertEquals(\"<size=0>\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], false).toString());\n        assertEquals(\"{}\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).toString());\n    }",
        "begin_line": 78,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 36)",
            "(line 80,col 9)-(line 80,col 36)",
            "(line 81,col 9)-(line 81,col 91)",
            "(line 82,col 9)-(line 82,col 75)",
            "(line 83,col 9)-(line 83,col 96)",
            "(line 84,col 9)-(line 84,col 80)",
            "(line 85,col 9)-(line 85,col 98)",
            "(line 86,col 9)-(line 86,col 95)",
            "(line 87,col 9)-(line 87,col 107)",
            "(line 88,col 9)-(line 88,col 100)",
            "(line 89,col 9)-(line 89,col 105)",
            "(line 90,col 9)-(line 90,col 98)",
            "(line 91,col 9)-(line 91,col 114)",
            "(line 92,col 9)-(line 92,col 107)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.SimpleToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/SimpleToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.SimpleToStringStyleTest.testPerson()",
        "snippet": "    public void testPerson() {\n        Person p = new Person();\n        p.name = \"Jane Q. Public\";\n        p.age = 47;\n        p.smoker = false;\n        assertEquals(\"Jane Q. Public,47,false\", new ToStringBuilder(p).append(\"name\", p.name).append(\"age\", p.age).append(\"smoker\", p.smoker).toString());\n    }",
        "begin_line": 95,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 32)",
            "(line 97,col 9)-(line 97,col 34)",
            "(line 98,col 9)-(line 98,col 19)",
            "(line 99,col 9)-(line 99,col 25)",
            "(line 100,col 9)-(line 100,col 154)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.SimpleToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/SimpleToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.SimpleToStringStyleTest.testLong()",
        "snippet": "    public void testLong() {\n        assertEquals(\"3\", new ToStringBuilder(base).append(3L).toString());\n        assertEquals(\"3\", new ToStringBuilder(base).append(\"a\", 3L).toString());\n        assertEquals(\"3,4\", new ToStringBuilder(base).append(\"a\", 3L).append(\"b\", 4L).toString());\n    }",
        "begin_line": 103,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 75)",
            "(line 105,col 9)-(line 105,col 80)",
            "(line 106,col 9)-(line 106,col 98)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.SimpleToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/SimpleToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.SimpleToStringStyleTest.testObjectArray()",
        "snippet": "    public void testObjectArray() {\n        Object[] array = new Object[] {null, base, new int[] {3, 6}};\n        assertEquals(\"{<null>,5,{3,6}}\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(\"{<null>,5,{3,6}}\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(\"<null>\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(\"<null>\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 109,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 69)",
            "(line 111,col 9)-(line 111,col 93)",
            "(line 112,col 9)-(line 112,col 102)",
            "(line 113,col 9)-(line 113,col 21)",
            "(line 114,col 9)-(line 114,col 83)",
            "(line 115,col 9)-(line 115,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.SimpleToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/SimpleToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.SimpleToStringStyleTest.testLongArray()",
        "snippet": "    public void testLongArray() {\n        long[] array = new long[] {1, 2, -3, 4};\n        assertEquals(\"{1,2,-3,4}\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(\"{1,2,-3,4}\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(\"<null>\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(\"<null>\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 118,
        "end_line": 125,
        "comment": "",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 48)",
            "(line 120,col 9)-(line 120,col 87)",
            "(line 121,col 9)-(line 121,col 96)",
            "(line 122,col 9)-(line 122,col 21)",
            "(line 123,col 9)-(line 123,col 83)",
            "(line 124,col 9)-(line 124,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.SimpleToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/SimpleToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.SimpleToStringStyleTest.testLongArrayArray()",
        "snippet": "    public void testLongArrayArray() {\n        long[][] array = new long[][] {{1, 2}, null, {5}};\n        assertEquals(\"{{1,2},<null>,{5}}\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(\"{{1,2},<null>,{5}}\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(\"<null>\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(\"<null>\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 127,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 58)",
            "(line 129,col 9)-(line 129,col 95)",
            "(line 130,col 9)-(line 130,col 104)",
            "(line 131,col 9)-(line 131,col 21)",
            "(line 132,col 9)-(line 132,col 83)",
            "(line 133,col 9)-(line 133,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.ReflectionTestCycleA.hashCode()",
        "snippet": "        public int hashCode() {\n            return HashCodeBuilder.reflectionHashCode(this);\n        }",
        "begin_line": 39,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 40,col 13)-(line 40,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.ReflectionTestCycleB.hashCode()",
        "snippet": "        public int hashCode() {\n            return HashCodeBuilder.reflectionHashCode(this);\n        }",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 13)-(line 51,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.HashCodeBuilderTest(java.lang.String)",
        "snippet": "    public HashCodeBuilderTest(String name) {\n        super(name);\n    }",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 59,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(HashCodeBuilderTest.class);\n        suite.setName(\"HashCodeBuilder Tests\");\n        return suite;\n    }",
        "begin_line": 63,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 67)",
            "(line 65,col 9)-(line 65,col 47)",
            "(line 66,col 9)-(line 66,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        super.setUp();\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        super.tearDown();\n    }",
        "begin_line": 73,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.testConstructorEx1()",
        "snippet": "    public void testConstructorEx1() {\n        try {\n            new HashCodeBuilder(0, 0);\n\n        } catch (IllegalArgumentException ex) {\n            return;\n        }\n        fail();\n    }",
        "begin_line": 79,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 85,col 9)",
            "(line 86,col 9)-(line 86,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.testConstructorEx2()",
        "snippet": "    public void testConstructorEx2() {\n        try {\n            new HashCodeBuilder(2, 2);\n\n        } catch (IllegalArgumentException ex) {\n            return;\n        }\n        fail();\n    }",
        "begin_line": 89,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 90,col 9)-(line 95,col 9)",
            "(line 96,col 9)-(line 96,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.TestObject.TestObject(int)",
        "snippet": "        public TestObject(int a) {\n            this.a = a;\n        }",
        "begin_line": 102,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 103,col 13)-(line 103,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.TestObject.equals(java.lang.Object)",
        "snippet": "        public boolean equals(Object o) {\n            if (o == this) {\n                return true;\n            }\n            if (!(o instanceof TestObject)) {\n                return false;\n            }\n            TestObject rhs = (TestObject) o;\n            return (a == rhs.a);\n        }",
        "begin_line": 106,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 107,col 13)-(line 109,col 13)",
            "(line 110,col 13)-(line 112,col 13)",
            "(line 113,col 13)-(line 113,col 44)",
            "(line 114,col 13)-(line 114,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.TestObject.setA(int)",
        "snippet": "        public void setA(int a) {\n            this.a = a;\n        }",
        "begin_line": 117,
        "end_line": 119,
        "comment": "",
        "child_ranges": [
            "(line 118,col 13)-(line 118,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.TestObject.getA()",
        "snippet": "        public int getA() {\n            return a;\n        }",
        "begin_line": 121,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 122,col 13)-(line 122,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.TestSubObject.TestSubObject()",
        "snippet": "        public TestSubObject() {\n            super(0);\n        }",
        "begin_line": 131,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 132,col 13)-(line 132,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.TestSubObject.TestSubObject(int, int, int)",
        "snippet": "        public TestSubObject(int a, int b, int t) {\n            super(a);\n            this.b = b;\n            this.t = t;\n        }",
        "begin_line": 135,
        "end_line": 139,
        "comment": "",
        "child_ranges": [
            "(line 136,col 13)-(line 136,col 21)",
            "(line 137,col 13)-(line 137,col 23)",
            "(line 138,col 13)-(line 138,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.TestSubObject.equals(java.lang.Object)",
        "snippet": "        public boolean equals(Object o) {\n            if (o == this) {\n                return true;\n            }\n            if (!(o instanceof TestSubObject)) {\n                return false;\n            }\n            TestSubObject rhs = (TestSubObject) o;\n            return super.equals(o) && (b == rhs.b);\n        }",
        "begin_line": 141,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 142,col 13)-(line 144,col 13)",
            "(line 145,col 13)-(line 147,col 13)",
            "(line 148,col 13)-(line 148,col 50)",
            "(line 149,col 13)-(line 149,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.testReflectionHashCode()",
        "snippet": "    public void testReflectionHashCode() {\n        assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0)));\n        assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456)));\n    }",
        "begin_line": 153,
        "end_line": 156,
        "comment": "",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 85)",
            "(line 155,col 9)-(line 155,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.testReflectionHierarchyHashCode()",
        "snippet": "    public void testReflectionHierarchyHashCode() {\n        assertEquals(17 * 37 * 37, HashCodeBuilder.reflectionHashCode(new TestSubObject(0, 0, 0)));\n        assertEquals(17 * 37 * 37 * 37, HashCodeBuilder.reflectionHashCode(new TestSubObject(0, 0, 0), true));\n        assertEquals((17 * 37 + 7890) * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestSubObject(123456, 7890,\n                0)));\n        assertEquals(((17 * 37 + 7890) * 37 + 0) * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestSubObject(\n                123456, 7890, 0), true));\n    }",
        "begin_line": 158,
        "end_line": 165,
        "comment": "",
        "child_ranges": [
            "(line 159,col 9)-(line 159,col 99)",
            "(line 160,col 9)-(line 160,col 110)",
            "(line 161,col 9)-(line 162,col 21)",
            "(line 163,col 9)-(line 164,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.testReflectionHierarchyHashCodeEx1()",
        "snippet": "    public void testReflectionHierarchyHashCodeEx1() {\n        try {\n            HashCodeBuilder.reflectionHashCode(0, 0, new TestSubObject(0, 0, 0), true);\n        } catch (IllegalArgumentException ex) {\n            return;\n        }\n        fail();\n    }",
        "begin_line": 167,
        "end_line": 174,
        "comment": "",
        "child_ranges": [
            "(line 168,col 9)-(line 172,col 9)",
            "(line 173,col 9)-(line 173,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.testReflectionHierarchyHashCodeEx2()",
        "snippet": "    public void testReflectionHierarchyHashCodeEx2() {\n        try {\n            HashCodeBuilder.reflectionHashCode(2, 2, new TestSubObject(0, 0, 0), true);\n        } catch (IllegalArgumentException ex) {\n            return;\n        }\n        fail();\n    }",
        "begin_line": 176,
        "end_line": 183,
        "comment": "",
        "child_ranges": [
            "(line 177,col 9)-(line 181,col 9)",
            "(line 182,col 9)-(line 182,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.testReflectionHashCodeEx1()",
        "snippet": "    public void testReflectionHashCodeEx1() {\n        try {\n            HashCodeBuilder.reflectionHashCode(0, 0, new TestObject(0), true);\n        } catch (IllegalArgumentException ex) {\n            return;\n        }\n        fail();\n    }",
        "begin_line": 185,
        "end_line": 192,
        "comment": "",
        "child_ranges": [
            "(line 186,col 9)-(line 190,col 9)",
            "(line 191,col 9)-(line 191,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.testReflectionHashCodeEx2()",
        "snippet": "    public void testReflectionHashCodeEx2() {\n        try {\n            HashCodeBuilder.reflectionHashCode(2, 2, new TestObject(0), true);\n        } catch (IllegalArgumentException ex) {\n            return;\n        }\n        fail();\n    }",
        "begin_line": 194,
        "end_line": 201,
        "comment": "",
        "child_ranges": [
            "(line 195,col 9)-(line 199,col 9)",
            "(line 200,col 9)-(line 200,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.testReflectionHashCodeEx3()",
        "snippet": "    public void testReflectionHashCodeEx3() {\n        try {\n            HashCodeBuilder.reflectionHashCode(13, 19, null, true);\n        } catch (IllegalArgumentException ex) {\n            return;\n        }\n        fail();\n    }",
        "begin_line": 203,
        "end_line": 210,
        "comment": "",
        "child_ranges": [
            "(line 204,col 9)-(line 208,col 9)",
            "(line 209,col 9)-(line 209,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.testSuper()",
        "snippet": "    public void testSuper() {\n        Object obj = new Object();\n        assertEquals(17 * 37 + (19 * 41 + obj.hashCode()), new HashCodeBuilder(17, 37).appendSuper(\n                new HashCodeBuilder(19, 41).append(obj).toHashCode()).toHashCode());\n    }",
        "begin_line": 212,
        "end_line": 216,
        "comment": "",
        "child_ranges": [
            "(line 213,col 9)-(line 213,col 34)",
            "(line 214,col 9)-(line 215,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.testObject()",
        "snippet": "    public void testObject() {\n        Object obj = null;\n        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj = new Object();\n        assertEquals(17 * 37 + obj.hashCode(), new HashCodeBuilder(17, 37).append(obj).toHashCode());\n    }",
        "begin_line": 218,
        "end_line": 223,
        "comment": "",
        "child_ranges": [
            "(line 219,col 9)-(line 219,col 26)",
            "(line 220,col 9)-(line 220,col 84)",
            "(line 221,col 9)-(line 221,col 27)",
            "(line 222,col 9)-(line 222,col 101)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.testLong()",
        "snippet": "    public void testLong() {\n        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((long) 0L).toHashCode());\n        assertEquals(17 * 37 + (int) (123456789L ^ (123456789L >> 32)), new HashCodeBuilder(17, 37).append(\n                (long) 123456789L).toHashCode());\n    }",
        "begin_line": 225,
        "end_line": 229,
        "comment": "",
        "child_ranges": [
            "(line 226,col 9)-(line 226,col 90)",
            "(line 227,col 9)-(line 228,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.testInt()",
        "snippet": "    public void testInt() {\n        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((int) 0).toHashCode());\n        assertEquals(17 * 37 + 123456, new HashCodeBuilder(17, 37).append((int) 123456).toHashCode());\n    }",
        "begin_line": 231,
        "end_line": 234,
        "comment": "",
        "child_ranges": [
            "(line 232,col 9)-(line 232,col 88)",
            "(line 233,col 9)-(line 233,col 102)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.testShort()",
        "snippet": "    public void testShort() {\n        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((short) 0).toHashCode());\n        assertEquals(17 * 37 + 12345, new HashCodeBuilder(17, 37).append((short) 12345).toHashCode());\n    }",
        "begin_line": 236,
        "end_line": 239,
        "comment": "",
        "child_ranges": [
            "(line 237,col 9)-(line 237,col 90)",
            "(line 238,col 9)-(line 238,col 102)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.testChar()",
        "snippet": "    public void testChar() {\n        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((char) 0).toHashCode());\n        assertEquals(17 * 37 + 1234, new HashCodeBuilder(17, 37).append((char) 1234).toHashCode());\n    }",
        "begin_line": 241,
        "end_line": 244,
        "comment": "",
        "child_ranges": [
            "(line 242,col 9)-(line 242,col 89)",
            "(line 243,col 9)-(line 243,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.testByte()",
        "snippet": "    public void testByte() {\n        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((byte) 0).toHashCode());\n        assertEquals(17 * 37 + 123, new HashCodeBuilder(17, 37).append((byte) 123).toHashCode());\n    }",
        "begin_line": 246,
        "end_line": 249,
        "comment": "",
        "child_ranges": [
            "(line 247,col 9)-(line 247,col 89)",
            "(line 248,col 9)-(line 248,col 97)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.testDouble()",
        "snippet": "    public void testDouble() {\n        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((double) 0d).toHashCode());\n        double d = 1234567.89;\n        long l = Double.doubleToLongBits(d);\n        assertEquals(17 * 37 + (int) (l ^ (l >> 32)), new HashCodeBuilder(17, 37).append(d).toHashCode());\n    }",
        "begin_line": 251,
        "end_line": 256,
        "comment": "",
        "child_ranges": [
            "(line 252,col 9)-(line 252,col 92)",
            "(line 253,col 9)-(line 253,col 30)",
            "(line 254,col 9)-(line 254,col 44)",
            "(line 255,col 9)-(line 255,col 106)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.testFloat()",
        "snippet": "    public void testFloat() {\n        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((float) 0f).toHashCode());\n        float f = 1234.89f;\n        int i = Float.floatToIntBits(f);\n        assertEquals(17 * 37 + i, new HashCodeBuilder(17, 37).append(f).toHashCode());\n    }",
        "begin_line": 258,
        "end_line": 263,
        "comment": "",
        "child_ranges": [
            "(line 259,col 9)-(line 259,col 91)",
            "(line 260,col 9)-(line 260,col 27)",
            "(line 261,col 9)-(line 261,col 40)",
            "(line 262,col 9)-(line 262,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.testBoolean()",
        "snippet": "    public void testBoolean() {\n        assertEquals(17 * 37 + 0, new HashCodeBuilder(17, 37).append(true).toHashCode());\n        assertEquals(17 * 37 + 1, new HashCodeBuilder(17, 37).append(false).toHashCode());\n    }",
        "begin_line": 265,
        "end_line": 268,
        "comment": "",
        "child_ranges": [
            "(line 266,col 9)-(line 266,col 89)",
            "(line 267,col 9)-(line 267,col 90)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.testObjectArray()",
        "snippet": "    public void testObjectArray() {\n        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((Object[]) null).toHashCode());\n        Object[] obj = new Object[2];\n        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[0] = new Object();\n        assertEquals((17 * 37 + obj[0].hashCode()) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[1] = new Object();\n        assertEquals((17 * 37 + obj[0].hashCode()) * 37 + obj[1].hashCode(), new HashCodeBuilder(17, 37).append(obj)\n                .toHashCode());\n    }",
        "begin_line": 270,
        "end_line": 279,
        "comment": "",
        "child_ranges": [
            "(line 271,col 9)-(line 271,col 96)",
            "(line 272,col 9)-(line 272,col 37)",
            "(line 273,col 9)-(line 273,col 91)",
            "(line 274,col 9)-(line 274,col 30)",
            "(line 275,col 9)-(line 275,col 111)",
            "(line 276,col 9)-(line 276,col 30)",
            "(line 277,col 9)-(line 278,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.testObjectArrayAsObject()",
        "snippet": "    public void testObjectArrayAsObject() {\n        Object[] obj = new Object[2];\n        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n        obj[0] = new Object();\n        assertEquals((17 * 37 + obj[0].hashCode()) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n        obj[1] = new Object();\n        assertEquals((17 * 37 + obj[0].hashCode()) * 37 + obj[1].hashCode(), new HashCodeBuilder(17, 37).append(\n                (Object) obj).toHashCode());\n    }",
        "begin_line": 281,
        "end_line": 289,
        "comment": "",
        "child_ranges": [
            "(line 282,col 9)-(line 282,col 37)",
            "(line 283,col 9)-(line 283,col 100)",
            "(line 284,col 9)-(line 284,col 30)",
            "(line 285,col 9)-(line 285,col 120)",
            "(line 286,col 9)-(line 286,col 30)",
            "(line 287,col 9)-(line 288,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.testLongArray()",
        "snippet": "    public void testLongArray() {\n        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((long[]) null).toHashCode());\n        long[] obj = new long[2];\n        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[0] = 5L;\n        int h1 = (int) (5L ^ (5L >> 32));\n        assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[1] = 6L;\n        int h2 = (int) (6L ^ (6L >> 32));\n        assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n    }",
        "begin_line": 291,
        "end_line": 301,
        "comment": "",
        "child_ranges": [
            "(line 292,col 9)-(line 292,col 94)",
            "(line 293,col 9)-(line 293,col 33)",
            "(line 294,col 9)-(line 294,col 91)",
            "(line 295,col 9)-(line 295,col 20)",
            "(line 296,col 9)-(line 296,col 41)",
            "(line 297,col 9)-(line 297,col 96)",
            "(line 298,col 9)-(line 298,col 20)",
            "(line 299,col 9)-(line 299,col 41)",
            "(line 300,col 9)-(line 300,col 101)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.testLongArrayAsObject()",
        "snippet": "    public void testLongArrayAsObject() {\n        long[] obj = new long[2];\n        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n        obj[0] = 5L;\n        int h1 = (int) (5L ^ (5L >> 32));\n        assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n        obj[1] = 6L;\n        int h2 = (int) (6L ^ (6L >> 32));\n        assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n    }",
        "begin_line": 303,
        "end_line": 312,
        "comment": "",
        "child_ranges": [
            "(line 304,col 9)-(line 304,col 33)",
            "(line 305,col 9)-(line 305,col 100)",
            "(line 306,col 9)-(line 306,col 20)",
            "(line 307,col 9)-(line 307,col 41)",
            "(line 308,col 9)-(line 308,col 105)",
            "(line 309,col 9)-(line 309,col 20)",
            "(line 310,col 9)-(line 310,col 41)",
            "(line 311,col 9)-(line 311,col 110)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.testIntArray()",
        "snippet": "    public void testIntArray() {\n        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((int[]) null).toHashCode());\n        int[] obj = new int[2];\n        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[0] = 5;\n        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[1] = 6;\n        assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n    }",
        "begin_line": 314,
        "end_line": 322,
        "comment": "",
        "child_ranges": [
            "(line 315,col 9)-(line 315,col 93)",
            "(line 316,col 9)-(line 316,col 31)",
            "(line 317,col 9)-(line 317,col 91)",
            "(line 318,col 9)-(line 318,col 19)",
            "(line 319,col 9)-(line 319,col 95)",
            "(line 320,col 9)-(line 320,col 19)",
            "(line 321,col 9)-(line 321,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.testIntArrayAsObject()",
        "snippet": "    public void testIntArrayAsObject() {\n        int[] obj = new int[2];\n        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n        obj[0] = 5;\n        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n        obj[1] = 6;\n        assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n    }",
        "begin_line": 324,
        "end_line": 331,
        "comment": "",
        "child_ranges": [
            "(line 325,col 9)-(line 325,col 31)",
            "(line 326,col 9)-(line 326,col 100)",
            "(line 327,col 9)-(line 327,col 19)",
            "(line 328,col 9)-(line 328,col 104)",
            "(line 329,col 9)-(line 329,col 19)",
            "(line 330,col 9)-(line 330,col 108)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.testShortArray()",
        "snippet": "    public void testShortArray() {\n        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((short[]) null).toHashCode());\n        short[] obj = new short[2];\n        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[0] = (short) 5;\n        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[1] = (short) 6;\n        assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n    }",
        "begin_line": 333,
        "end_line": 341,
        "comment": "",
        "child_ranges": [
            "(line 334,col 9)-(line 334,col 95)",
            "(line 335,col 9)-(line 335,col 35)",
            "(line 336,col 9)-(line 336,col 91)",
            "(line 337,col 9)-(line 337,col 27)",
            "(line 338,col 9)-(line 338,col 95)",
            "(line 339,col 9)-(line 339,col 27)",
            "(line 340,col 9)-(line 340,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.testShortArrayAsObject()",
        "snippet": "    public void testShortArrayAsObject() {\n        short[] obj = new short[2];\n        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n        obj[0] = (short) 5;\n        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n        obj[1] = (short) 6;\n        assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n    }",
        "begin_line": 343,
        "end_line": 350,
        "comment": "",
        "child_ranges": [
            "(line 344,col 9)-(line 344,col 35)",
            "(line 345,col 9)-(line 345,col 100)",
            "(line 346,col 9)-(line 346,col 27)",
            "(line 347,col 9)-(line 347,col 104)",
            "(line 348,col 9)-(line 348,col 27)",
            "(line 349,col 9)-(line 349,col 108)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.testCharArray()",
        "snippet": "    public void testCharArray() {\n        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((char[]) null).toHashCode());\n        char[] obj = new char[2];\n        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[0] = (char) 5;\n        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[1] = (char) 6;\n        assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n    }",
        "begin_line": 352,
        "end_line": 360,
        "comment": "",
        "child_ranges": [
            "(line 353,col 9)-(line 353,col 94)",
            "(line 354,col 9)-(line 354,col 33)",
            "(line 355,col 9)-(line 355,col 91)",
            "(line 356,col 9)-(line 356,col 26)",
            "(line 357,col 9)-(line 357,col 95)",
            "(line 358,col 9)-(line 358,col 26)",
            "(line 359,col 9)-(line 359,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.testCharArrayAsObject()",
        "snippet": "    public void testCharArrayAsObject() {\n        char[] obj = new char[2];\n        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n        obj[0] = (char) 5;\n        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n        obj[1] = (char) 6;\n        assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n    }",
        "begin_line": 362,
        "end_line": 369,
        "comment": "",
        "child_ranges": [
            "(line 363,col 9)-(line 363,col 33)",
            "(line 364,col 9)-(line 364,col 100)",
            "(line 365,col 9)-(line 365,col 26)",
            "(line 366,col 9)-(line 366,col 104)",
            "(line 367,col 9)-(line 367,col 26)",
            "(line 368,col 9)-(line 368,col 108)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.testByteArray()",
        "snippet": "    public void testByteArray() {\n        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((byte[]) null).toHashCode());\n        byte[] obj = new byte[2];\n        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[0] = (byte) 5;\n        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[1] = (byte) 6;\n        assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n    }",
        "begin_line": 371,
        "end_line": 379,
        "comment": "",
        "child_ranges": [
            "(line 372,col 9)-(line 372,col 94)",
            "(line 373,col 9)-(line 373,col 33)",
            "(line 374,col 9)-(line 374,col 91)",
            "(line 375,col 9)-(line 375,col 26)",
            "(line 376,col 9)-(line 376,col 95)",
            "(line 377,col 9)-(line 377,col 26)",
            "(line 378,col 9)-(line 378,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.testByteArrayAsObject()",
        "snippet": "    public void testByteArrayAsObject() {\n        byte[] obj = new byte[2];\n        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n        obj[0] = (byte) 5;\n        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n        obj[1] = (byte) 6;\n        assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n    }",
        "begin_line": 381,
        "end_line": 388,
        "comment": "",
        "child_ranges": [
            "(line 382,col 9)-(line 382,col 33)",
            "(line 383,col 9)-(line 383,col 100)",
            "(line 384,col 9)-(line 384,col 26)",
            "(line 385,col 9)-(line 385,col 104)",
            "(line 386,col 9)-(line 386,col 26)",
            "(line 387,col 9)-(line 387,col 108)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.testDoubleArray()",
        "snippet": "    public void testDoubleArray() {\n        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((double[]) null).toHashCode());\n        double[] obj = new double[2];\n        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[0] = 5.4d;\n        long l1 = Double.doubleToLongBits(5.4d);\n        int h1 = (int) (l1 ^ (l1 >> 32));\n        assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[1] = 6.3d;\n        long l2 = Double.doubleToLongBits(6.3d);\n        int h2 = (int) (l2 ^ (l2 >> 32));\n        assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n    }",
        "begin_line": 390,
        "end_line": 402,
        "comment": "",
        "child_ranges": [
            "(line 391,col 9)-(line 391,col 96)",
            "(line 392,col 9)-(line 392,col 37)",
            "(line 393,col 9)-(line 393,col 91)",
            "(line 394,col 9)-(line 394,col 22)",
            "(line 395,col 9)-(line 395,col 48)",
            "(line 396,col 9)-(line 396,col 41)",
            "(line 397,col 9)-(line 397,col 96)",
            "(line 398,col 9)-(line 398,col 22)",
            "(line 399,col 9)-(line 399,col 48)",
            "(line 400,col 9)-(line 400,col 41)",
            "(line 401,col 9)-(line 401,col 101)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.testDoubleArrayAsObject()",
        "snippet": "    public void testDoubleArrayAsObject() {\n        double[] obj = new double[2];\n        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n        obj[0] = 5.4d;\n        long l1 = Double.doubleToLongBits(5.4d);\n        int h1 = (int) (l1 ^ (l1 >> 32));\n        assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n        obj[1] = 6.3d;\n        long l2 = Double.doubleToLongBits(6.3d);\n        int h2 = (int) (l2 ^ (l2 >> 32));\n        assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n    }",
        "begin_line": 404,
        "end_line": 415,
        "comment": "",
        "child_ranges": [
            "(line 405,col 9)-(line 405,col 37)",
            "(line 406,col 9)-(line 406,col 100)",
            "(line 407,col 9)-(line 407,col 22)",
            "(line 408,col 9)-(line 408,col 48)",
            "(line 409,col 9)-(line 409,col 41)",
            "(line 410,col 9)-(line 410,col 105)",
            "(line 411,col 9)-(line 411,col 22)",
            "(line 412,col 9)-(line 412,col 48)",
            "(line 413,col 9)-(line 413,col 41)",
            "(line 414,col 9)-(line 414,col 110)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.testFloatArray()",
        "snippet": "    public void testFloatArray() {\n        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((float[]) null).toHashCode());\n        float[] obj = new float[2];\n        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[0] = 5.4f;\n        int h1 = Float.floatToIntBits(5.4f);\n        assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[1] = 6.3f;\n        int h2 = Float.floatToIntBits(6.3f);\n        assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n    }",
        "begin_line": 417,
        "end_line": 427,
        "comment": "",
        "child_ranges": [
            "(line 418,col 9)-(line 418,col 95)",
            "(line 419,col 9)-(line 419,col 35)",
            "(line 420,col 9)-(line 420,col 91)",
            "(line 421,col 9)-(line 421,col 22)",
            "(line 422,col 9)-(line 422,col 44)",
            "(line 423,col 9)-(line 423,col 96)",
            "(line 424,col 9)-(line 424,col 22)",
            "(line 425,col 9)-(line 425,col 44)",
            "(line 426,col 9)-(line 426,col 101)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.testFloatArrayAsObject()",
        "snippet": "    public void testFloatArrayAsObject() {\n        float[] obj = new float[2];\n        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n        obj[0] = 5.4f;\n        int h1 = Float.floatToIntBits(5.4f);\n        assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n        obj[1] = 6.3f;\n        int h2 = Float.floatToIntBits(6.3f);\n        assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n    }",
        "begin_line": 429,
        "end_line": 438,
        "comment": "",
        "child_ranges": [
            "(line 430,col 9)-(line 430,col 35)",
            "(line 431,col 9)-(line 431,col 100)",
            "(line 432,col 9)-(line 432,col 22)",
            "(line 433,col 9)-(line 433,col 44)",
            "(line 434,col 9)-(line 434,col 105)",
            "(line 435,col 9)-(line 435,col 22)",
            "(line 436,col 9)-(line 436,col 44)",
            "(line 437,col 9)-(line 437,col 110)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.testBooleanArray()",
        "snippet": "    public void testBooleanArray() {\n        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((boolean[]) null).toHashCode());\n        boolean[] obj = new boolean[2];\n        assertEquals((17 * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[0] = true;\n        assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[1] = false;\n        assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n    }",
        "begin_line": 440,
        "end_line": 448,
        "comment": "",
        "child_ranges": [
            "(line 441,col 9)-(line 441,col 97)",
            "(line 442,col 9)-(line 442,col 39)",
            "(line 443,col 9)-(line 443,col 99)",
            "(line 444,col 9)-(line 444,col 22)",
            "(line 445,col 9)-(line 445,col 99)",
            "(line 446,col 9)-(line 446,col 23)",
            "(line 447,col 9)-(line 447,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.testBooleanArrayAsObject()",
        "snippet": "    public void testBooleanArrayAsObject() {\n        boolean[] obj = new boolean[2];\n        assertEquals((17 * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n        obj[0] = true;\n        assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n        obj[1] = false;\n        assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n    }",
        "begin_line": 450,
        "end_line": 457,
        "comment": "",
        "child_ranges": [
            "(line 451,col 9)-(line 451,col 39)",
            "(line 452,col 9)-(line 452,col 108)",
            "(line 453,col 9)-(line 453,col 22)",
            "(line 454,col 9)-(line 454,col 108)",
            "(line 455,col 9)-(line 455,col 23)",
            "(line 456,col 9)-(line 456,col 108)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.testBooleanMultiArray()",
        "snippet": "    public void testBooleanMultiArray() {\n        boolean[][] obj = new boolean[2][];\n        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[0] = new boolean[0];\n        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[0] = new boolean[1];\n        assertEquals((17 * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[0] = new boolean[2];\n        assertEquals(((17 * 37 + 1) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[0][0] = true;\n        assertEquals(((17 * 37 + 0) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[1] = new boolean[1];\n        assertEquals((((17 * 37 + 0) * 37 + 1) * 37 + 1), new HashCodeBuilder(17, 37).append(obj).toHashCode());\n    }",
        "begin_line": 459,
        "end_line": 472,
        "comment": "",
        "child_ranges": [
            "(line 460,col 9)-(line 460,col 43)",
            "(line 461,col 9)-(line 461,col 91)",
            "(line 462,col 9)-(line 462,col 32)",
            "(line 463,col 9)-(line 463,col 84)",
            "(line 464,col 9)-(line 464,col 32)",
            "(line 465,col 9)-(line 465,col 95)",
            "(line 466,col 9)-(line 466,col 32)",
            "(line 467,col 9)-(line 467,col 106)",
            "(line 468,col 9)-(line 468,col 25)",
            "(line 469,col 9)-(line 469,col 106)",
            "(line 470,col 9)-(line 470,col 32)",
            "(line 471,col 9)-(line 471,col 112)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.testReflectionHashCodeExcludeFields()",
        "snippet": "    public void testReflectionHashCodeExcludeFields() throws Exception {\n        TestObjectWithMultipleFields x = new TestObjectWithMultipleFields(1, 2, 3);\n\n        assertEquals((((17 * 37 + 1) * 37 + 2) * 37 + 3), HashCodeBuilder.reflectionHashCode(x));\n\n        assertEquals((((17 * 37 + 1) * 37 + 2) * 37 + 3), HashCodeBuilder.reflectionHashCode(x, (String[]) null));\n        assertEquals((((17 * 37 + 1) * 37 + 2) * 37 + 3), HashCodeBuilder.reflectionHashCode(x, new String[]{}));\n        assertEquals((((17 * 37 + 1) * 37 + 2) * 37 + 3), HashCodeBuilder.reflectionHashCode(x, new String[]{\"xxx\"}));\n\n        assertEquals(((17 * 37 + 1) * 37 + 3), HashCodeBuilder.reflectionHashCode(x, new String[]{\"two\"}));\n        assertEquals(((17 * 37 + 1) * 37 + 2), HashCodeBuilder.reflectionHashCode(x, new String[]{\"three\"}));\n\n        assertEquals((17 * 37 + 1), HashCodeBuilder.reflectionHashCode(x, new String[]{\"two\", \"three\"}));\n\n        assertEquals(17, HashCodeBuilder.reflectionHashCode(x, new String[]{\"one\", \"two\", \"three\"}));\n        assertEquals(17, HashCodeBuilder.reflectionHashCode(x, new String[]{\"one\", \"two\", \"three\", \"xxx\"}));\n    }",
        "begin_line": 474,
        "end_line": 490,
        "comment": "",
        "child_ranges": [
            "(line 475,col 9)-(line 475,col 83)",
            "(line 477,col 9)-(line 477,col 97)",
            "(line 479,col 9)-(line 479,col 114)",
            "(line 480,col 9)-(line 480,col 113)",
            "(line 481,col 9)-(line 481,col 118)",
            "(line 483,col 9)-(line 483,col 107)",
            "(line 484,col 9)-(line 484,col 109)",
            "(line 486,col 9)-(line 486,col 105)",
            "(line 488,col 9)-(line 488,col 101)",
            "(line 489,col 9)-(line 489,col 108)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.TestObjectWithMultipleFields.TestObjectWithMultipleFields(int, int, int)",
        "snippet": "        public TestObjectWithMultipleFields(int one, int two, int three) {\n            this.one = one;\n            this.two = two;\n            this.three = three;\n        }",
        "begin_line": 499,
        "end_line": 503,
        "comment": "",
        "child_ranges": [
            "(line 500,col 13)-(line 500,col 27)",
            "(line 501,col 13)-(line 501,col 27)",
            "(line 502,col 13)-(line 502,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilderTest.testReflectionObjectCycle()",
        "snippet": "    public void testReflectionObjectCycle() {\n        ReflectionTestCycleA a = new ReflectionTestCycleA();\n        ReflectionTestCycleB b = new ReflectionTestCycleB();\n        a.b = b;\n        b.a = a;\n        \n        // Used to caused:\n        // java.lang.StackOverflowError\n        // at java.lang.ClassLoader.getCallerClassLoader(Native Method)\n        // at java.lang.Class.getDeclaredFields(Class.java:992)\n        // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:373)\n        // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)\n        // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)\n        // at\n        // org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)\n        // at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)\n        // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)\n        // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)\n        // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)\n        // at\n        // org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)\n        // at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)\n\n        a.hashCode();\n        b.hashCode();\n    }",
        "begin_line": 509,
        "end_line": 534,
        "comment": "\n     * Test Objects pointing to each other.\n     ",
        "child_ranges": [
            "(line 510,col 9)-(line 510,col 60)",
            "(line 511,col 9)-(line 511,col 60)",
            "(line 512,col 9)-(line 512,col 16)",
            "(line 513,col 9)-(line 513,col 16)",
            "(line 532,col 9)-(line 532,col 21)",
            "(line 533,col 9)-(line 533,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.DefaultToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/DefaultToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.DefaultToStringStyleTest.DefaultToStringStyleTest(java.lang.String)",
        "snippet": "    public DefaultToStringStyleTest(String name) {\n        super(name);\n    }",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.DefaultToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/DefaultToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.DefaultToStringStyleTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.DefaultToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/DefaultToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.DefaultToStringStyleTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(DefaultToStringStyleTest.class);\n        suite.setName(\"DefaultToStringStyle Tests\");\n        return suite;\n    }",
        "begin_line": 48,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 72)",
            "(line 50,col 9)-(line 50,col 52)",
            "(line 51,col 9)-(line 51,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.DefaultToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/DefaultToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.DefaultToStringStyleTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        super.setUp();\n        ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);\n    }",
        "begin_line": 54,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 22)",
            "(line 56,col 9)-(line 56,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.DefaultToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/DefaultToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.DefaultToStringStyleTest.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        super.tearDown();\n        ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);\n    }",
        "begin_line": 59,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 25)",
            "(line 61,col 9)-(line 61,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.DefaultToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/DefaultToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.DefaultToStringStyleTest.testBlank()",
        "snippet": "    public void testBlank() {\n        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).toString());\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.DefaultToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/DefaultToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.DefaultToStringStyleTest.testAppendSuper()",
        "snippet": "    public void testAppendSuper() {\n        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").toString());\n        \n        assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").append(\"a\", \"hello\").toString());\n        assertEquals(baseStr + \"[<null>,a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").append(\"a\", \"hello\").toString());\n        assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(null).append(\"a\", \"hello\").toString());\n    }",
        "begin_line": 70,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 105)",
            "(line 72,col 9)-(line 72,col 117)",
            "(line 74,col 9)-(line 74,col 133)",
            "(line 75,col 9)-(line 75,col 146)",
            "(line 76,col 9)-(line 76,col 121)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.DefaultToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/DefaultToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.DefaultToStringStyleTest.testObject()",
        "snippet": "    public void testObject() {\n        Integer i3 = new Integer(3);\n        Integer i4 = new Integer(4);\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) null).toString());\n        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(i3).toString());\n        assertEquals(baseStr + \"[a=<null>]\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\n        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", i3).toString());\n        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\n        assertEquals(baseStr + \"[a=<Integer>]\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\n        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", new ArrayList(), false).toString());\n        assertEquals(baseStr + \"[a=[]]\", new ToStringBuilder(base).append(\"a\", new ArrayList(), true).toString());\n        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", new HashMap(), false).toString());\n        assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", new HashMap(), true).toString());\n        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], false).toString());\n        assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).toString());\n    }",
        "begin_line": 79,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 36)",
            "(line 81,col 9)-(line 81,col 36)",
            "(line 82,col 9)-(line 82,col 103)",
            "(line 83,col 9)-(line 83,col 87)",
            "(line 84,col 9)-(line 84,col 110)",
            "(line 85,col 9)-(line 85,col 94)",
            "(line 86,col 9)-(line 86,col 114)",
            "(line 87,col 9)-(line 87,col 109)",
            "(line 88,col 9)-(line 88,col 121)",
            "(line 89,col 9)-(line 89,col 114)",
            "(line 90,col 9)-(line 90,col 119)",
            "(line 91,col 9)-(line 91,col 112)",
            "(line 92,col 9)-(line 92,col 128)",
            "(line 93,col 9)-(line 93,col 121)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.DefaultToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/DefaultToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.DefaultToStringStyleTest.testPerson()",
        "snippet": "    public void testPerson() {\n        Person p = new Person();\n        p.name = \"John Doe\";\n        p.age = 33;\n        p.smoker = false;\n        String pBaseStr = p.getClass().getName() + \"@\" + Integer.toHexString(System.identityHashCode(p));\n        assertEquals(pBaseStr + \"[name=John Doe,age=33,smoker=false]\", new ToStringBuilder(p).append(\"name\", p.name).append(\"age\", p.age).append(\"smoker\", p.smoker).toString());\n    }",
        "begin_line": 96,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 32)",
            "(line 98,col 9)-(line 98,col 28)",
            "(line 99,col 9)-(line 99,col 19)",
            "(line 100,col 9)-(line 100,col 25)",
            "(line 101,col 9)-(line 101,col 105)",
            "(line 102,col 9)-(line 102,col 177)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.DefaultToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/DefaultToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.DefaultToStringStyleTest.testLong()",
        "snippet": "    public void testLong() {\n        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(3L).toString());\n        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", 3L).toString());\n        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", 3L).append(\"b\", 4L).toString());\n    }",
        "begin_line": 105,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 87)",
            "(line 107,col 9)-(line 107,col 94)",
            "(line 108,col 9)-(line 108,col 114)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.DefaultToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/DefaultToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.DefaultToStringStyleTest.testObjectArray()",
        "snippet": "    public void testObjectArray() {\n        Object[] array = new Object[] {null, base, new int[] {3, 6}};\n        assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 111,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 69)",
            "(line 113,col 9)-(line 113,col 105)",
            "(line 114,col 9)-(line 114,col 114)",
            "(line 115,col 9)-(line 115,col 21)",
            "(line 116,col 9)-(line 116,col 95)",
            "(line 117,col 9)-(line 117,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.DefaultToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/DefaultToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.DefaultToStringStyleTest.testLongArray()",
        "snippet": "    public void testLongArray() {\n        long[] array = new long[] {1, 2, -3, 4};\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 120,
        "end_line": 127,
        "comment": "",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 48)",
            "(line 122,col 9)-(line 122,col 99)",
            "(line 123,col 9)-(line 123,col 108)",
            "(line 124,col 9)-(line 124,col 21)",
            "(line 125,col 9)-(line 125,col 95)",
            "(line 126,col 9)-(line 126,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.DefaultToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/DefaultToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.DefaultToStringStyleTest.testLongArrayArray()",
        "snippet": "    public void testLongArrayArray() {\n        long[][] array = new long[][] {{1, 2}, null, {5}};\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 129,
        "end_line": 136,
        "comment": "",
        "child_ranges": [
            "(line 130,col 9)-(line 130,col 58)",
            "(line 131,col 9)-(line 131,col 107)",
            "(line 132,col 9)-(line 132,col 116)",
            "(line 133,col 9)-(line 133,col 21)",
            "(line 134,col 9)-(line 134,col 95)",
            "(line 135,col 9)-(line 135,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.CompareToBuilderTest(java.lang.String)",
        "snippet": "  public CompareToBuilderTest(String name) {\n    super(name);\n  }",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 5)-(line 36,col 16)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.main(java.lang.String[])",
        "snippet": "     public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(CompareToBuilderTest.class);\n        suite.setName(\"CompareToBuilder Tests\");\n        return suite;\n    }",
        "begin_line": 42,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 68)",
            "(line 44,col 9)-(line 44,col 48)",
            "(line 45,col 9)-(line 45,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        super.setUp();\n    }",
        "begin_line": 48,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        super.tearDown();\n    }",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.TestObject.TestObject(int)",
        "snippet": "        public TestObject(int a) {\n            this.a = a;\n        }",
        "begin_line": 60,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 61,col 13)-(line 61,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.TestObject.equals(java.lang.Object)",
        "snippet": "        public boolean equals(Object o) {\n            if (o == this) {\n                return true;\n            }\n            if (!(o instanceof TestObject)) {\n                return false;\n            }\n            TestObject rhs = (TestObject) o;\n            return (a == rhs.a);\n        }",
        "begin_line": 63,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 64,col 13)-(line 66,col 13)",
            "(line 67,col 13)-(line 69,col 13)",
            "(line 70,col 13)-(line 70,col 44)",
            "(line 71,col 13)-(line 71,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.TestObject.setA(int)",
        "snippet": "        public void setA(int a) {\n            this.a = a;\n        }",
        "begin_line": 74,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 75,col 13)-(line 75,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.TestObject.getA()",
        "snippet": "        public int getA() {\n            return a;\n        }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 79,col 13)-(line 79,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.TestObject.compareTo(java.lang.Object)",
        "snippet": "        public int compareTo(Object o) {\n            TestObject rhs = (TestObject) o;\n            return (a < rhs.a) ? -1 : (a > rhs.a) ? +1 : 0;\n        }",
        "begin_line": 81,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 82,col 13)-(line 82,col 44)",
            "(line 83,col 13)-(line 83,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.TestSubObject.TestSubObject()",
        "snippet": "        public TestSubObject() {\n            super(0);\n        }",
        "begin_line": 89,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 90,col 13)-(line 90,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.TestSubObject.TestSubObject(int, int)",
        "snippet": "        public TestSubObject(int a, int b) {\n            super(a);\n            this.b = b;\n        }",
        "begin_line": 92,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 93,col 13)-(line 93,col 21)",
            "(line 94,col 13)-(line 94,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.TestSubObject.equals(java.lang.Object)",
        "snippet": "        public boolean equals(Object o) {\n            if (o == this) {\n                return true;\n            }\n            if (!(o instanceof TestSubObject)) {\n                return false;\n            }\n            TestSubObject rhs = (TestSubObject) o;\n            return super.equals(o) && (b == rhs.b);\n        }",
        "begin_line": 96,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 97,col 13)-(line 99,col 13)",
            "(line 100,col 13)-(line 102,col 13)",
            "(line 103,col 13)-(line 103,col 50)",
            "(line 104,col 13)-(line 104,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.TestTransientSubObject.TestTransientSubObject(int, int)",
        "snippet": "        public TestTransientSubObject(int a, int t) {\n            super(a);\n            this.t = t;\n        }",
        "begin_line": 110,
        "end_line": 113,
        "comment": "",
        "child_ranges": [
            "(line 111,col 13)-(line 111,col 21)",
            "(line 112,col 13)-(line 112,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testReflectionCompare()",
        "snippet": "    public void testReflectionCompare() {\n        TestObject o1 = new TestObject(4);\n        TestObject o2 = new TestObject(4);\n        assertTrue(CompareToBuilder.reflectionCompare(o1, o1) == 0);\n        assertTrue(CompareToBuilder.reflectionCompare(o1, o2) == 0);\n        o2.setA(5);\n        assertTrue(CompareToBuilder.reflectionCompare(o1, o2) < 0);\n        assertTrue(CompareToBuilder.reflectionCompare(o2, o1) > 0);\n    }",
        "begin_line": 116,
        "end_line": 124,
        "comment": "",
        "child_ranges": [
            "(line 117,col 9)-(line 117,col 42)",
            "(line 118,col 9)-(line 118,col 42)",
            "(line 119,col 9)-(line 119,col 68)",
            "(line 120,col 9)-(line 120,col 68)",
            "(line 121,col 9)-(line 121,col 19)",
            "(line 122,col 9)-(line 122,col 67)",
            "(line 123,col 9)-(line 123,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testReflectionCompareEx1()",
        "snippet": "    public void testReflectionCompareEx1() {\n        TestObject o1 = new TestObject(4);\n        try {\n            CompareToBuilder.reflectionCompare(o1, null);\n        } catch (NullPointerException ex) {\n            return;\n        }\n        fail();\n    }",
        "begin_line": 126,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 42)",
            "(line 128,col 9)-(line 132,col 9)",
            "(line 133,col 9)-(line 133,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testReflectionCompareEx2()",
        "snippet": "    public void testReflectionCompareEx2() {\n        TestObject o1 = new TestObject(4);\n        Object o2 = new Object();\n        try {\n            CompareToBuilder.reflectionCompare(o1, o2);\n            fail();\n        } catch (ClassCastException ex) {}\n    }",
        "begin_line": 136,
        "end_line": 143,
        "comment": "",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 42)",
            "(line 138,col 9)-(line 138,col 33)",
            "(line 139,col 9)-(line 142,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testReflectionHierarchyCompare()",
        "snippet": "    public void testReflectionHierarchyCompare() {\n        testReflectionHierarchyCompare(false, null);\n    }",
        "begin_line": 145,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 146,col 9)-(line 146,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testReflectionHierarchyCompareExcludeFields()",
        "snippet": "    public void testReflectionHierarchyCompareExcludeFields() {\n        String[] excludeFields = new String[] { \"b\" };\n        testReflectionHierarchyCompare(true, excludeFields);\n        \n        TestSubObject x;\n        TestSubObject y;\n        TestSubObject z;\n        \n        x = new TestSubObject(1, 1);\n        y = new TestSubObject(2, 1);\n        z = new TestSubObject(3, 1);\n        assertXYZCompareOrder(x, y, z, true, excludeFields);\n\n        x = new TestSubObject(1, 3);\n        y = new TestSubObject(2, 2);\n        z = new TestSubObject(3, 1);\n        assertXYZCompareOrder(x, y, z, true, excludeFields);\n    }",
        "begin_line": 149,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 150,col 9)-(line 150,col 54)",
            "(line 151,col 9)-(line 151,col 60)",
            "(line 153,col 9)-(line 153,col 24)",
            "(line 154,col 9)-(line 154,col 24)",
            "(line 155,col 9)-(line 155,col 24)",
            "(line 157,col 9)-(line 157,col 36)",
            "(line 158,col 9)-(line 158,col 36)",
            "(line 159,col 9)-(line 159,col 36)",
            "(line 160,col 9)-(line 160,col 60)",
            "(line 162,col 9)-(line 162,col 36)",
            "(line 163,col 9)-(line 163,col 36)",
            "(line 164,col 9)-(line 164,col 36)",
            "(line 165,col 9)-(line 165,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testReflectionHierarchyCompareTransients()",
        "snippet": "    public void testReflectionHierarchyCompareTransients() {\n        testReflectionHierarchyCompare(true, null);\n\n        TestTransientSubObject x;\n        TestTransientSubObject y;\n        TestTransientSubObject z;\n\n        x = new TestTransientSubObject(1, 1);\n        y = new TestTransientSubObject(2, 2);\n        z = new TestTransientSubObject(3, 3);\n        assertXYZCompareOrder(x, y, z, true, null);\n        \n        x = new TestTransientSubObject(1, 1);\n        y = new TestTransientSubObject(1, 2);\n        z = new TestTransientSubObject(1, 3);\n        assertXYZCompareOrder(x, y, z, true, null);  \n    }",
        "begin_line": 168,
        "end_line": 184,
        "comment": "",
        "child_ranges": [
            "(line 169,col 9)-(line 169,col 51)",
            "(line 171,col 9)-(line 171,col 33)",
            "(line 172,col 9)-(line 172,col 33)",
            "(line 173,col 9)-(line 173,col 33)",
            "(line 175,col 9)-(line 175,col 45)",
            "(line 176,col 9)-(line 176,col 45)",
            "(line 177,col 9)-(line 177,col 45)",
            "(line 178,col 9)-(line 178,col 51)",
            "(line 180,col 9)-(line 180,col 45)",
            "(line 181,col 9)-(line 181,col 45)",
            "(line 182,col 9)-(line 182,col 45)",
            "(line 183,col 9)-(line 183,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.assertXYZCompareOrder(java.lang.Object, java.lang.Object, java.lang.Object, boolean, java.lang.String[])",
        "snippet": "    private void assertXYZCompareOrder(Object x, Object y, Object z, boolean testTransients, String[] excludeFields) {\n        assertTrue(0 == CompareToBuilder.reflectionCompare(x, x, testTransients, null, excludeFields));\n        assertTrue(0 == CompareToBuilder.reflectionCompare(y, y, testTransients, null, excludeFields));\n        assertTrue(0 == CompareToBuilder.reflectionCompare(z, z, testTransients, null, excludeFields));\n        \n        assertTrue(0 > CompareToBuilder.reflectionCompare(x, y, testTransients, null, excludeFields));\n        assertTrue(0 > CompareToBuilder.reflectionCompare(x, z, testTransients, null, excludeFields));\n        assertTrue(0 > CompareToBuilder.reflectionCompare(y, z, testTransients, null, excludeFields));\n        \n        assertTrue(0 < CompareToBuilder.reflectionCompare(y, x, testTransients, null, excludeFields));\n        assertTrue(0 < CompareToBuilder.reflectionCompare(z, x, testTransients, null, excludeFields));\n        assertTrue(0 < CompareToBuilder.reflectionCompare(z, y, testTransients, null, excludeFields));\n    }",
        "begin_line": 186,
        "end_line": 198,
        "comment": "",
        "child_ranges": [
            "(line 187,col 9)-(line 187,col 103)",
            "(line 188,col 9)-(line 188,col 103)",
            "(line 189,col 9)-(line 189,col 103)",
            "(line 191,col 9)-(line 191,col 102)",
            "(line 192,col 9)-(line 192,col 102)",
            "(line 193,col 9)-(line 193,col 102)",
            "(line 195,col 9)-(line 195,col 102)",
            "(line 196,col 9)-(line 196,col 102)",
            "(line 197,col 9)-(line 197,col 102)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testReflectionHierarchyCompare(boolean, java.lang.String[])",
        "snippet": "    public void testReflectionHierarchyCompare(boolean testTransients, String[] excludeFields) {\n        TestObject to1 = new TestObject(1);\n        TestObject to2 = new TestObject(2);\n        TestObject to3 = new TestObject(3);\n        TestSubObject tso1 = new TestSubObject(1, 1);\n        TestSubObject tso2 = new TestSubObject(2, 2);\n        TestSubObject tso3 = new TestSubObject(3, 3);\n        \n        assertReflectionCompareContract(to1, to1, to1, false, excludeFields);\n        assertReflectionCompareContract(to1, to2, to3, false, excludeFields);\n        assertReflectionCompareContract(tso1, tso1, tso1, false, excludeFields);\n        assertReflectionCompareContract(tso1, tso2, tso3, false, excludeFields);\n        assertReflectionCompareContract(\"1\", \"2\", \"3\", false, excludeFields);\n        \n        assertTrue(0 != CompareToBuilder.reflectionCompare(tso1, new TestSubObject(1, 0), testTransients));\n        assertTrue(0 != CompareToBuilder.reflectionCompare(tso1, new TestSubObject(0, 1), testTransients));\n\n        // root class\n        assertXYZCompareOrder(to1, to2, to3, true, null);\n        // subclass  \n        assertXYZCompareOrder(tso1, tso2, tso3, true, null);  \n    }",
        "begin_line": 200,
        "end_line": 221,
        "comment": "",
        "child_ranges": [
            "(line 201,col 9)-(line 201,col 43)",
            "(line 202,col 9)-(line 202,col 43)",
            "(line 203,col 9)-(line 203,col 43)",
            "(line 204,col 9)-(line 204,col 53)",
            "(line 205,col 9)-(line 205,col 53)",
            "(line 206,col 9)-(line 206,col 53)",
            "(line 208,col 9)-(line 208,col 77)",
            "(line 209,col 9)-(line 209,col 77)",
            "(line 210,col 9)-(line 210,col 80)",
            "(line 211,col 9)-(line 211,col 80)",
            "(line 212,col 9)-(line 212,col 77)",
            "(line 214,col 9)-(line 214,col 107)",
            "(line 215,col 9)-(line 215,col 107)",
            "(line 218,col 9)-(line 218,col 57)",
            "(line 220,col 9)-(line 220,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.assertReflectionCompareContract(java.lang.Object, java.lang.Object, java.lang.Object, boolean, java.lang.String[])",
        "snippet": "    public void assertReflectionCompareContract(Object x, Object y, Object z, boolean testTransients, String[] excludeFields) {\n\n        // signum\n        assertTrue(reflectionCompareSignum(x, y, testTransients, excludeFields) == -reflectionCompareSignum(y, x, testTransients, excludeFields));\n        \n        // transitive\n        if (CompareToBuilder.reflectionCompare(x, y, testTransients, null, excludeFields) > 0 \n                && CompareToBuilder.reflectionCompare(y, z, testTransients, null, excludeFields) > 0){\n            assertTrue(CompareToBuilder.reflectionCompare(x, z, testTransients, null, excludeFields) > 0);\n        }\n        \n        // un-named\n        if (CompareToBuilder.reflectionCompare(x, y, testTransients, null, excludeFields) == 0) {\n            assertTrue(reflectionCompareSignum(x, z, testTransients, excludeFields) == -reflectionCompareSignum(y, z, testTransients, excludeFields));\n        }\n        \n        // strongly recommended but not strictly required\n        assertTrue((CompareToBuilder.reflectionCompare(x, y, testTransients) ==0 ) == EqualsBuilder.reflectionEquals(x, y, testTransients));\n    }",
        "begin_line": 232,
        "end_line": 250,
        "comment": "\n     * See \"Effective Java\" under \"Consider Implementing Comparable\".\n     *  \n     * @param x an object to compare \n     * @param y an object to compare\n     * @param z an object to compare\n     * @param testTransients Whether to include transients in the comparison\n     * @param excludeFields fields to exclude\n     ",
        "child_ranges": [
            "(line 235,col 9)-(line 235,col 146)",
            "(line 238,col 9)-(line 241,col 9)",
            "(line 244,col 9)-(line 246,col 9)",
            "(line 249,col 9)-(line 249,col 140)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.reflectionCompareSignum(java.lang.Object, java.lang.Object, boolean, java.lang.String[])",
        "snippet": "    private int reflectionCompareSignum(Object lhs, Object rhs, boolean testTransients, String[] excludeFields) {\n        return BigInteger.valueOf(CompareToBuilder.reflectionCompare(lhs, rhs, testTransients)).signum();\n    }",
        "begin_line": 262,
        "end_line": 264,
        "comment": "\n     * Returns the signum of the result of comparing x and y with\n     * <code>CompareToBuilder.reflectionCompare</code>\n     * \n     * @param lhs The \"left-hand-side\" of the comparison.\n     * @param rhs The \"right-hand-side\" of the comparison.\n     * @param testTransients Whether to include transients in the comparison\n     * @param excludeFields fields to exclude\n     * @return int The signum\n     ",
        "child_ranges": [
            "(line 263,col 9)-(line 263,col 105)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testAppendSuper()",
        "snippet": "    public void testAppendSuper() {\n        TestObject o1 = new TestObject(4);\n        TestObject o2 = new TestObject(5);\n        assertTrue(new CompareToBuilder().appendSuper(0).append(o1, o1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().appendSuper(0).append(o1, o2).toComparison() < 0);\n        assertTrue(new CompareToBuilder().appendSuper(0).append(o2, o1).toComparison() > 0);\n        \n        assertTrue(new CompareToBuilder().appendSuper(-1).append(o1, o1).toComparison() < 0);\n        assertTrue(new CompareToBuilder().appendSuper(-1).append(o1, o2).toComparison() < 0);\n        \n        assertTrue(new CompareToBuilder().appendSuper(1).append(o1, o1).toComparison() > 0);\n        assertTrue(new CompareToBuilder().appendSuper(1).append(o1, o2).toComparison() > 0);\n    }",
        "begin_line": 266,
        "end_line": 278,
        "comment": "",
        "child_ranges": [
            "(line 267,col 9)-(line 267,col 42)",
            "(line 268,col 9)-(line 268,col 42)",
            "(line 269,col 9)-(line 269,col 93)",
            "(line 270,col 9)-(line 270,col 92)",
            "(line 271,col 9)-(line 271,col 92)",
            "(line 273,col 9)-(line 273,col 93)",
            "(line 274,col 9)-(line 274,col 93)",
            "(line 276,col 9)-(line 276,col 92)",
            "(line 277,col 9)-(line 277,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testObject()",
        "snippet": "    public void testObject() {\n        TestObject o1 = new TestObject(4);\n        TestObject o2 = new TestObject(4);\n        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() == 0);\n        o2.setA(5);\n        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);\n        \n        assertTrue(new CompareToBuilder().append(o1, null).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append((Object) null, (Object) null).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(null, o1).toComparison() < 0);\n    }",
        "begin_line": 280,
        "end_line": 292,
        "comment": "",
        "child_ranges": [
            "(line 281,col 9)-(line 281,col 42)",
            "(line 282,col 9)-(line 282,col 42)",
            "(line 283,col 9)-(line 283,col 78)",
            "(line 284,col 9)-(line 284,col 78)",
            "(line 285,col 9)-(line 285,col 19)",
            "(line 286,col 9)-(line 286,col 77)",
            "(line 287,col 9)-(line 287,col 77)",
            "(line 289,col 9)-(line 289,col 79)",
            "(line 290,col 9)-(line 290,col 100)",
            "(line 291,col 9)-(line 291,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testObjectEx2()",
        "snippet": "    public void testObjectEx2() {\n        TestObject o1 = new TestObject(4);\n        Object o2 = new Object();\n        try {\n            new CompareToBuilder().append(o1, o2);\n            fail();\n        } catch (ClassCastException ex) {}\n    }",
        "begin_line": 294,
        "end_line": 301,
        "comment": "",
        "child_ranges": [
            "(line 295,col 9)-(line 295,col 42)",
            "(line 296,col 9)-(line 296,col 33)",
            "(line 297,col 9)-(line 300,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testObjectComparator()",
        "snippet": "    public void testObjectComparator() {\n        String o1 = \"Fred\";\n        String o2 = \"Fred\";\n        assertTrue(new CompareToBuilder().append(o1, o1, String.CASE_INSENSITIVE_ORDER).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(o1, o2, String.CASE_INSENSITIVE_ORDER).toComparison() == 0);\n        o2 = \"FRED\";\n        assertTrue(new CompareToBuilder().append(o1, o2, String.CASE_INSENSITIVE_ORDER).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(o2, o1, String.CASE_INSENSITIVE_ORDER).toComparison() == 0);\n        o2 = \"FREDA\";\n        assertTrue(new CompareToBuilder().append(o1, o2, String.CASE_INSENSITIVE_ORDER).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(o2, o1, String.CASE_INSENSITIVE_ORDER).toComparison() > 0);\n        \n        assertTrue(new CompareToBuilder().append(o1, null, String.CASE_INSENSITIVE_ORDER).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append((Object) null, (Object) null, String.CASE_INSENSITIVE_ORDER).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(null, o1, String.CASE_INSENSITIVE_ORDER).toComparison() < 0);\n    }",
        "begin_line": 303,
        "end_line": 318,
        "comment": "",
        "child_ranges": [
            "(line 304,col 9)-(line 304,col 27)",
            "(line 305,col 9)-(line 305,col 27)",
            "(line 306,col 9)-(line 306,col 109)",
            "(line 307,col 9)-(line 307,col 109)",
            "(line 308,col 9)-(line 308,col 20)",
            "(line 309,col 9)-(line 309,col 109)",
            "(line 310,col 9)-(line 310,col 109)",
            "(line 311,col 9)-(line 311,col 21)",
            "(line 312,col 9)-(line 312,col 108)",
            "(line 313,col 9)-(line 313,col 108)",
            "(line 315,col 9)-(line 315,col 110)",
            "(line 316,col 9)-(line 316,col 131)",
            "(line 317,col 9)-(line 317,col 110)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testObjectComparatorNull()",
        "snippet": "    public void testObjectComparatorNull() {\n        String o1 = \"Fred\";\n        String o2 = \"Fred\";\n        assertTrue(new CompareToBuilder().append(o1, o1, null).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(o1, o2, null).toComparison() == 0);\n        o2 = \"Zebra\";\n        assertTrue(new CompareToBuilder().append(o1, o2, null).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(o2, o1, null).toComparison() > 0);\n        \n        assertTrue(new CompareToBuilder().append(o1, null, null).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append((Object) null, (Object) null, null).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(null, o1, null).toComparison() < 0);\n    }",
        "begin_line": 320,
        "end_line": 332,
        "comment": "",
        "child_ranges": [
            "(line 321,col 9)-(line 321,col 27)",
            "(line 322,col 9)-(line 322,col 27)",
            "(line 323,col 9)-(line 323,col 84)",
            "(line 324,col 9)-(line 324,col 84)",
            "(line 325,col 9)-(line 325,col 21)",
            "(line 326,col 9)-(line 326,col 83)",
            "(line 327,col 9)-(line 327,col 83)",
            "(line 329,col 9)-(line 329,col 85)",
            "(line 330,col 9)-(line 330,col 106)",
            "(line 331,col 9)-(line 331,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testLong()",
        "snippet": "    public void testLong() {\n        long o1 = 1L;\n        long o2 = 2L;\n        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(o1, Long.MAX_VALUE).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(Long.MAX_VALUE, o1).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(o1, Long.MIN_VALUE).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(Long.MIN_VALUE, o1).toComparison() < 0);\n    }",
        "begin_line": 334,
        "end_line": 344,
        "comment": "",
        "child_ranges": [
            "(line 335,col 9)-(line 335,col 21)",
            "(line 336,col 9)-(line 336,col 21)",
            "(line 337,col 9)-(line 337,col 78)",
            "(line 338,col 9)-(line 338,col 77)",
            "(line 339,col 9)-(line 339,col 77)",
            "(line 340,col 9)-(line 340,col 89)",
            "(line 341,col 9)-(line 341,col 89)",
            "(line 342,col 9)-(line 342,col 89)",
            "(line 343,col 9)-(line 343,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testInt()",
        "snippet": "    public void testInt() {\n        int o1 = 1;\n        int o2 = 2;\n        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(o1, Integer.MAX_VALUE).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(Integer.MAX_VALUE, o1).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(o1, Integer.MIN_VALUE).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(Integer.MIN_VALUE, o1).toComparison() < 0);\n    }",
        "begin_line": 346,
        "end_line": 356,
        "comment": "",
        "child_ranges": [
            "(line 347,col 9)-(line 347,col 19)",
            "(line 348,col 9)-(line 348,col 19)",
            "(line 349,col 9)-(line 349,col 78)",
            "(line 350,col 9)-(line 350,col 77)",
            "(line 351,col 9)-(line 351,col 77)",
            "(line 352,col 9)-(line 352,col 92)",
            "(line 353,col 9)-(line 353,col 92)",
            "(line 354,col 9)-(line 354,col 92)",
            "(line 355,col 9)-(line 355,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testShort()",
        "snippet": "    public void testShort() {\n        short o1 = 1;\n        short o2 = 2;\n        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(o1, Short.MAX_VALUE).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(Short.MAX_VALUE, o1).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(o1, Short.MIN_VALUE).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(Short.MIN_VALUE, o1).toComparison() < 0);\n    }",
        "begin_line": 358,
        "end_line": 368,
        "comment": "",
        "child_ranges": [
            "(line 359,col 9)-(line 359,col 21)",
            "(line 360,col 9)-(line 360,col 21)",
            "(line 361,col 9)-(line 361,col 78)",
            "(line 362,col 9)-(line 362,col 77)",
            "(line 363,col 9)-(line 363,col 77)",
            "(line 364,col 9)-(line 364,col 90)",
            "(line 365,col 9)-(line 365,col 90)",
            "(line 366,col 9)-(line 366,col 90)",
            "(line 367,col 9)-(line 367,col 90)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testChar()",
        "snippet": "    public void testChar() {\n        char o1 = 1;\n        char o2 = 2;\n        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(o1, Character.MAX_VALUE).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(Character.MAX_VALUE, o1).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(o1, Character.MIN_VALUE).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(Character.MIN_VALUE, o1).toComparison() < 0);\n    }",
        "begin_line": 370,
        "end_line": 380,
        "comment": "",
        "child_ranges": [
            "(line 371,col 9)-(line 371,col 20)",
            "(line 372,col 9)-(line 372,col 20)",
            "(line 373,col 9)-(line 373,col 78)",
            "(line 374,col 9)-(line 374,col 77)",
            "(line 375,col 9)-(line 375,col 77)",
            "(line 376,col 9)-(line 376,col 94)",
            "(line 377,col 9)-(line 377,col 94)",
            "(line 378,col 9)-(line 378,col 94)",
            "(line 379,col 9)-(line 379,col 94)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testByte()",
        "snippet": "    public void testByte() {\n        byte o1 = 1;\n        byte o2 = 2;\n        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(o1, Byte.MAX_VALUE).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(Byte.MAX_VALUE, o1).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(o1, Byte.MIN_VALUE).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(Byte.MIN_VALUE, o1).toComparison() < 0);\n    }",
        "begin_line": 382,
        "end_line": 392,
        "comment": "",
        "child_ranges": [
            "(line 383,col 9)-(line 383,col 20)",
            "(line 384,col 9)-(line 384,col 20)",
            "(line 385,col 9)-(line 385,col 78)",
            "(line 386,col 9)-(line 386,col 77)",
            "(line 387,col 9)-(line 387,col 77)",
            "(line 388,col 9)-(line 388,col 89)",
            "(line 389,col 9)-(line 389,col 89)",
            "(line 390,col 9)-(line 390,col 89)",
            "(line 391,col 9)-(line 391,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testDouble()",
        "snippet": "    public void testDouble() {\n        double o1 = 1;\n        double o2 = 2;\n        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(o1, Double.MAX_VALUE).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(Double.MAX_VALUE, o1).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(o1, Double.MIN_VALUE).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(Double.MIN_VALUE, o1).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(Double.NaN, Double.NaN).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(Double.NaN, Double.MAX_VALUE).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(Double.POSITIVE_INFINITY, Double.MAX_VALUE).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(Double.NEGATIVE_INFINITY, Double.MIN_VALUE).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(o1, Double.NaN).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(Double.NaN, o1).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(-0.0, 0.0).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(0.0, -0.0).toComparison() > 0);\n    }",
        "begin_line": 394,
        "end_line": 412,
        "comment": "",
        "child_ranges": [
            "(line 395,col 9)-(line 395,col 22)",
            "(line 396,col 9)-(line 396,col 22)",
            "(line 397,col 9)-(line 397,col 78)",
            "(line 398,col 9)-(line 398,col 77)",
            "(line 399,col 9)-(line 399,col 77)",
            "(line 400,col 9)-(line 400,col 91)",
            "(line 401,col 9)-(line 401,col 91)",
            "(line 402,col 9)-(line 402,col 91)",
            "(line 403,col 9)-(line 403,col 91)",
            "(line 404,col 9)-(line 404,col 94)",
            "(line 405,col 9)-(line 405,col 99)",
            "(line 406,col 9)-(line 406,col 113)",
            "(line 407,col 9)-(line 407,col 113)",
            "(line 408,col 9)-(line 408,col 85)",
            "(line 409,col 9)-(line 409,col 85)",
            "(line 410,col 9)-(line 410,col 80)",
            "(line 411,col 9)-(line 411,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testFloat()",
        "snippet": "    public void testFloat() {\n        float o1 = 1;\n        float o2 = 2;\n        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(o1, Float.MAX_VALUE).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(Float.MAX_VALUE, o1).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(o1, Float.MIN_VALUE).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(Float.MIN_VALUE, o1).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(Float.NaN, Float.NaN).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(Float.NaN, Float.MAX_VALUE).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(Float.POSITIVE_INFINITY, Float.MAX_VALUE).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(Float.NEGATIVE_INFINITY, Float.MIN_VALUE).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(o1, Float.NaN).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(Float.NaN, o1).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(-0.0, 0.0).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(0.0, -0.0).toComparison() > 0);\n    }",
        "begin_line": 414,
        "end_line": 432,
        "comment": "",
        "child_ranges": [
            "(line 415,col 9)-(line 415,col 21)",
            "(line 416,col 9)-(line 416,col 21)",
            "(line 417,col 9)-(line 417,col 78)",
            "(line 418,col 9)-(line 418,col 77)",
            "(line 419,col 9)-(line 419,col 77)",
            "(line 420,col 9)-(line 420,col 90)",
            "(line 421,col 9)-(line 421,col 90)",
            "(line 422,col 9)-(line 422,col 90)",
            "(line 423,col 9)-(line 423,col 90)",
            "(line 424,col 9)-(line 424,col 92)",
            "(line 425,col 9)-(line 425,col 97)",
            "(line 426,col 9)-(line 426,col 111)",
            "(line 427,col 9)-(line 427,col 111)",
            "(line 428,col 9)-(line 428,col 84)",
            "(line 429,col 9)-(line 429,col 84)",
            "(line 430,col 9)-(line 430,col 80)",
            "(line 431,col 9)-(line 431,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testBoolean()",
        "snippet": "    public void testBoolean() {\n        boolean o1 = true;\n        boolean o2 = false;\n        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(o2, o2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() < 0);\n    }",
        "begin_line": 434,
        "end_line": 441,
        "comment": "",
        "child_ranges": [
            "(line 435,col 9)-(line 435,col 26)",
            "(line 436,col 9)-(line 436,col 27)",
            "(line 437,col 9)-(line 437,col 78)",
            "(line 438,col 9)-(line 438,col 78)",
            "(line 439,col 9)-(line 439,col 77)",
            "(line 440,col 9)-(line 440,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testObjectArray()",
        "snippet": "    public void testObjectArray() {\n        TestObject[] obj1 = new TestObject[2];\n        obj1[0] = new TestObject(4);\n        obj1[1] = new TestObject(5);\n        TestObject[] obj2 = new TestObject[2];\n        obj2[0] = new TestObject(4);\n        obj2[1] = new TestObject(5);\n        TestObject[] obj3 = new TestObject[3];\n        obj3[0] = new TestObject(4);\n        obj3[1] = new TestObject(5);\n        obj3[2] = new TestObject(6);\n        \n        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n        \n        obj1[1] = new TestObject(7);\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n\n        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append((Object[]) null, (Object[]) null).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\n    }",
        "begin_line": 443,
        "end_line": 467,
        "comment": "",
        "child_ranges": [
            "(line 444,col 9)-(line 444,col 46)",
            "(line 445,col 9)-(line 445,col 36)",
            "(line 446,col 9)-(line 446,col 36)",
            "(line 447,col 9)-(line 447,col 46)",
            "(line 448,col 9)-(line 448,col 36)",
            "(line 449,col 9)-(line 449,col 36)",
            "(line 450,col 9)-(line 450,col 46)",
            "(line 451,col 9)-(line 451,col 36)",
            "(line 452,col 9)-(line 452,col 36)",
            "(line 453,col 9)-(line 453,col 36)",
            "(line 455,col 9)-(line 455,col 82)",
            "(line 456,col 9)-(line 456,col 82)",
            "(line 457,col 9)-(line 457,col 81)",
            "(line 458,col 9)-(line 458,col 81)",
            "(line 460,col 9)-(line 460,col 36)",
            "(line 461,col 9)-(line 461,col 81)",
            "(line 462,col 9)-(line 462,col 81)",
            "(line 464,col 9)-(line 464,col 81)",
            "(line 465,col 9)-(line 465,col 104)",
            "(line 466,col 9)-(line 466,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testLongArray()",
        "snippet": "    public void testLongArray() {\n        long[] obj1 = new long[2];\n        obj1[0] = 5L;\n        obj1[1] = 6L;\n        long[] obj2 = new long[2];\n        obj2[0] = 5L;\n        obj2[1] = 6L;\n        long[] obj3 = new long[3];\n        obj3[0] = 5L;\n        obj3[1] = 6L;\n        obj3[2] = 7L;\n        \n        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n\n        obj1[1] = 7;\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n\n        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append((long[]) null, (long[]) null).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\n    }",
        "begin_line": 469,
        "end_line": 493,
        "comment": "",
        "child_ranges": [
            "(line 470,col 9)-(line 470,col 34)",
            "(line 471,col 9)-(line 471,col 21)",
            "(line 472,col 9)-(line 472,col 21)",
            "(line 473,col 9)-(line 473,col 34)",
            "(line 474,col 9)-(line 474,col 21)",
            "(line 475,col 9)-(line 475,col 21)",
            "(line 476,col 9)-(line 476,col 34)",
            "(line 477,col 9)-(line 477,col 21)",
            "(line 478,col 9)-(line 478,col 21)",
            "(line 479,col 9)-(line 479,col 21)",
            "(line 481,col 9)-(line 481,col 82)",
            "(line 482,col 9)-(line 482,col 82)",
            "(line 483,col 9)-(line 483,col 81)",
            "(line 484,col 9)-(line 484,col 81)",
            "(line 486,col 9)-(line 486,col 20)",
            "(line 487,col 9)-(line 487,col 81)",
            "(line 488,col 9)-(line 488,col 81)",
            "(line 490,col 9)-(line 490,col 81)",
            "(line 491,col 9)-(line 491,col 100)",
            "(line 492,col 9)-(line 492,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testIntArray()",
        "snippet": "    public void testIntArray() {\n        int[] obj1 = new int[2];\n        obj1[0] = 5;\n        obj1[1] = 6;\n        int[] obj2 = new int[2];\n        obj2[0] = 5;\n        obj2[1] = 6;\n        int[] obj3 = new int[3];\n        obj3[0] = 5;\n        obj3[1] = 6;\n        obj3[2] = 7;\n\n        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n\n        obj1[1] = 7;\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n\n        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append((int[]) null, (int[]) null).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\n    }",
        "begin_line": 495,
        "end_line": 519,
        "comment": "",
        "child_ranges": [
            "(line 496,col 9)-(line 496,col 32)",
            "(line 497,col 9)-(line 497,col 20)",
            "(line 498,col 9)-(line 498,col 20)",
            "(line 499,col 9)-(line 499,col 32)",
            "(line 500,col 9)-(line 500,col 20)",
            "(line 501,col 9)-(line 501,col 20)",
            "(line 502,col 9)-(line 502,col 32)",
            "(line 503,col 9)-(line 503,col 20)",
            "(line 504,col 9)-(line 504,col 20)",
            "(line 505,col 9)-(line 505,col 20)",
            "(line 507,col 9)-(line 507,col 82)",
            "(line 508,col 9)-(line 508,col 82)",
            "(line 509,col 9)-(line 509,col 81)",
            "(line 510,col 9)-(line 510,col 81)",
            "(line 512,col 9)-(line 512,col 20)",
            "(line 513,col 9)-(line 513,col 81)",
            "(line 514,col 9)-(line 514,col 81)",
            "(line 516,col 9)-(line 516,col 81)",
            "(line 517,col 9)-(line 517,col 98)",
            "(line 518,col 9)-(line 518,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testShortArray()",
        "snippet": "    public void testShortArray() {\n        short[] obj1 = new short[2];\n        obj1[0] = 5;\n        obj1[1] = 6;\n        short[] obj2 = new short[2];\n        obj2[0] = 5;\n        obj2[1] = 6;\n        short[] obj3 = new short[3];\n        obj3[0] = 5;\n        obj3[1] = 6;\n        obj3[2] = 7;\n\n        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n\n        obj1[1] = 7;\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n\n        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append((short[]) null, (short[]) null).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\n    }",
        "begin_line": 521,
        "end_line": 545,
        "comment": "",
        "child_ranges": [
            "(line 522,col 9)-(line 522,col 36)",
            "(line 523,col 9)-(line 523,col 20)",
            "(line 524,col 9)-(line 524,col 20)",
            "(line 525,col 9)-(line 525,col 36)",
            "(line 526,col 9)-(line 526,col 20)",
            "(line 527,col 9)-(line 527,col 20)",
            "(line 528,col 9)-(line 528,col 36)",
            "(line 529,col 9)-(line 529,col 20)",
            "(line 530,col 9)-(line 530,col 20)",
            "(line 531,col 9)-(line 531,col 20)",
            "(line 533,col 9)-(line 533,col 82)",
            "(line 534,col 9)-(line 534,col 82)",
            "(line 535,col 9)-(line 535,col 81)",
            "(line 536,col 9)-(line 536,col 81)",
            "(line 538,col 9)-(line 538,col 20)",
            "(line 539,col 9)-(line 539,col 81)",
            "(line 540,col 9)-(line 540,col 81)",
            "(line 542,col 9)-(line 542,col 81)",
            "(line 543,col 9)-(line 543,col 102)",
            "(line 544,col 9)-(line 544,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testCharArray()",
        "snippet": "    public void testCharArray() {\n        char[] obj1 = new char[2];\n        obj1[0] = 5;\n        obj1[1] = 6;\n        char[] obj2 = new char[2];\n        obj2[0] = 5;\n        obj2[1] = 6;\n        char[] obj3 = new char[3];\n        obj3[0] = 5;\n        obj3[1] = 6;\n        obj3[2] = 7;\n\n        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n\n        obj1[1] = 7;\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n\n        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append((char[]) null, (char[]) null).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\n    }",
        "begin_line": 547,
        "end_line": 571,
        "comment": "",
        "child_ranges": [
            "(line 548,col 9)-(line 548,col 34)",
            "(line 549,col 9)-(line 549,col 20)",
            "(line 550,col 9)-(line 550,col 20)",
            "(line 551,col 9)-(line 551,col 34)",
            "(line 552,col 9)-(line 552,col 20)",
            "(line 553,col 9)-(line 553,col 20)",
            "(line 554,col 9)-(line 554,col 34)",
            "(line 555,col 9)-(line 555,col 20)",
            "(line 556,col 9)-(line 556,col 20)",
            "(line 557,col 9)-(line 557,col 20)",
            "(line 559,col 9)-(line 559,col 82)",
            "(line 560,col 9)-(line 560,col 82)",
            "(line 561,col 9)-(line 561,col 81)",
            "(line 562,col 9)-(line 562,col 81)",
            "(line 564,col 9)-(line 564,col 20)",
            "(line 565,col 9)-(line 565,col 81)",
            "(line 566,col 9)-(line 566,col 81)",
            "(line 568,col 9)-(line 568,col 81)",
            "(line 569,col 9)-(line 569,col 100)",
            "(line 570,col 9)-(line 570,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testByteArray()",
        "snippet": "    public void testByteArray() {\n        byte[] obj1 = new byte[2];\n        obj1[0] = 5;\n        obj1[1] = 6;\n        byte[] obj2 = new byte[2];\n        obj2[0] = 5;\n        obj2[1] = 6;\n        byte[] obj3 = new byte[3];\n        obj3[0] = 5;\n        obj3[1] = 6;\n        obj3[2] = 7;\n\n        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n\n        obj1[1] = 7;\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n\n        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append((byte[]) null, (byte[]) null).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\n    }",
        "begin_line": 573,
        "end_line": 597,
        "comment": "",
        "child_ranges": [
            "(line 574,col 9)-(line 574,col 34)",
            "(line 575,col 9)-(line 575,col 20)",
            "(line 576,col 9)-(line 576,col 20)",
            "(line 577,col 9)-(line 577,col 34)",
            "(line 578,col 9)-(line 578,col 20)",
            "(line 579,col 9)-(line 579,col 20)",
            "(line 580,col 9)-(line 580,col 34)",
            "(line 581,col 9)-(line 581,col 20)",
            "(line 582,col 9)-(line 582,col 20)",
            "(line 583,col 9)-(line 583,col 20)",
            "(line 585,col 9)-(line 585,col 82)",
            "(line 586,col 9)-(line 586,col 82)",
            "(line 587,col 9)-(line 587,col 81)",
            "(line 588,col 9)-(line 588,col 81)",
            "(line 590,col 9)-(line 590,col 20)",
            "(line 591,col 9)-(line 591,col 81)",
            "(line 592,col 9)-(line 592,col 81)",
            "(line 594,col 9)-(line 594,col 81)",
            "(line 595,col 9)-(line 595,col 100)",
            "(line 596,col 9)-(line 596,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testDoubleArray()",
        "snippet": "    public void testDoubleArray() {\n        double[] obj1 = new double[2];\n        obj1[0] = 5;\n        obj1[1] = 6;\n        double[] obj2 = new double[2];\n        obj2[0] = 5;\n        obj2[1] = 6;\n        double[] obj3 = new double[3];\n        obj3[0] = 5;\n        obj3[1] = 6;\n        obj3[2] = 7;\n\n        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n\n        obj1[1] = 7;\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n\n        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append((double[]) null, (double[]) null).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\n    }",
        "begin_line": 599,
        "end_line": 623,
        "comment": "",
        "child_ranges": [
            "(line 600,col 9)-(line 600,col 38)",
            "(line 601,col 9)-(line 601,col 20)",
            "(line 602,col 9)-(line 602,col 20)",
            "(line 603,col 9)-(line 603,col 38)",
            "(line 604,col 9)-(line 604,col 20)",
            "(line 605,col 9)-(line 605,col 20)",
            "(line 606,col 9)-(line 606,col 38)",
            "(line 607,col 9)-(line 607,col 20)",
            "(line 608,col 9)-(line 608,col 20)",
            "(line 609,col 9)-(line 609,col 20)",
            "(line 611,col 9)-(line 611,col 82)",
            "(line 612,col 9)-(line 612,col 82)",
            "(line 613,col 9)-(line 613,col 81)",
            "(line 614,col 9)-(line 614,col 81)",
            "(line 616,col 9)-(line 616,col 20)",
            "(line 617,col 9)-(line 617,col 81)",
            "(line 618,col 9)-(line 618,col 81)",
            "(line 620,col 9)-(line 620,col 81)",
            "(line 621,col 9)-(line 621,col 104)",
            "(line 622,col 9)-(line 622,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testFloatArray()",
        "snippet": "    public void testFloatArray() {\n        float[] obj1 = new float[2];\n        obj1[0] = 5;\n        obj1[1] = 6;\n        float[] obj2 = new float[2];\n        obj2[0] = 5;\n        obj2[1] = 6;\n        float[] obj3 = new float[3];\n        obj3[0] = 5;\n        obj3[1] = 6;\n        obj3[2] = 7;\n\n        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n\n        obj1[1] = 7;\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n\n        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append((float[]) null, (float[]) null).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\n    }",
        "begin_line": 625,
        "end_line": 649,
        "comment": "",
        "child_ranges": [
            "(line 626,col 9)-(line 626,col 36)",
            "(line 627,col 9)-(line 627,col 20)",
            "(line 628,col 9)-(line 628,col 20)",
            "(line 629,col 9)-(line 629,col 36)",
            "(line 630,col 9)-(line 630,col 20)",
            "(line 631,col 9)-(line 631,col 20)",
            "(line 632,col 9)-(line 632,col 36)",
            "(line 633,col 9)-(line 633,col 20)",
            "(line 634,col 9)-(line 634,col 20)",
            "(line 635,col 9)-(line 635,col 20)",
            "(line 637,col 9)-(line 637,col 82)",
            "(line 638,col 9)-(line 638,col 82)",
            "(line 639,col 9)-(line 639,col 81)",
            "(line 640,col 9)-(line 640,col 81)",
            "(line 642,col 9)-(line 642,col 20)",
            "(line 643,col 9)-(line 643,col 81)",
            "(line 644,col 9)-(line 644,col 81)",
            "(line 646,col 9)-(line 646,col 81)",
            "(line 647,col 9)-(line 647,col 102)",
            "(line 648,col 9)-(line 648,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testBooleanArray()",
        "snippet": "    public void testBooleanArray() {\n        boolean[] obj1 = new boolean[2];\n        obj1[0] = true;\n        obj1[1] = false;\n        boolean[] obj2 = new boolean[2];\n        obj2[0] = true;\n        obj2[1] = false;\n        boolean[] obj3 = new boolean[3];\n        obj3[0] = true;\n        obj3[1] = false;\n        obj3[2] = true;\n\n        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n\n        obj1[1] = true;\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n\n        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append((boolean[]) null, (boolean[]) null).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\n    }",
        "begin_line": 651,
        "end_line": 675,
        "comment": "",
        "child_ranges": [
            "(line 652,col 9)-(line 652,col 40)",
            "(line 653,col 9)-(line 653,col 23)",
            "(line 654,col 9)-(line 654,col 24)",
            "(line 655,col 9)-(line 655,col 40)",
            "(line 656,col 9)-(line 656,col 23)",
            "(line 657,col 9)-(line 657,col 24)",
            "(line 658,col 9)-(line 658,col 40)",
            "(line 659,col 9)-(line 659,col 23)",
            "(line 660,col 9)-(line 660,col 24)",
            "(line 661,col 9)-(line 661,col 23)",
            "(line 663,col 9)-(line 663,col 82)",
            "(line 664,col 9)-(line 664,col 82)",
            "(line 665,col 9)-(line 665,col 81)",
            "(line 666,col 9)-(line 666,col 81)",
            "(line 668,col 9)-(line 668,col 23)",
            "(line 669,col 9)-(line 669,col 81)",
            "(line 670,col 9)-(line 670,col 81)",
            "(line 672,col 9)-(line 672,col 81)",
            "(line 673,col 9)-(line 673,col 106)",
            "(line 674,col 9)-(line 674,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testMultiLongArray()",
        "snippet": "    public void testMultiLongArray() {\n        long[][] array1 = new long[2][2];\n        long[][] array2 = new long[2][2];\n        long[][] array3 = new long[2][3];\n        for (int i = 0; i < array1.length; ++i) {\n            for (int j = 0; j < array1[0].length; j++) {\n                array1[i][j] = (i + 1) * (j + 1);\n                array2[i][j] = (i + 1) * (j + 1);\n                array3[i][j] = (i + 1) * (j + 1);\n            }\n        }\n        array3[1][2] = 100;\n        array3[1][2] = 100;\n        \n        assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);\n        array1[1][1] = 200;\n        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\n    }",
        "begin_line": 677,
        "end_line": 698,
        "comment": "",
        "child_ranges": [
            "(line 678,col 9)-(line 678,col 41)",
            "(line 679,col 9)-(line 679,col 41)",
            "(line 680,col 9)-(line 680,col 41)",
            "(line 681,col 9)-(line 687,col 9)",
            "(line 688,col 9)-(line 688,col 27)",
            "(line 689,col 9)-(line 689,col 27)",
            "(line 691,col 9)-(line 691,col 86)",
            "(line 692,col 9)-(line 692,col 86)",
            "(line 693,col 9)-(line 693,col 85)",
            "(line 694,col 9)-(line 694,col 85)",
            "(line 695,col 9)-(line 695,col 27)",
            "(line 696,col 9)-(line 696,col 85)",
            "(line 697,col 9)-(line 697,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testMultiIntArray()",
        "snippet": "    public void testMultiIntArray() {\n        int[][] array1 = new int[2][2];\n        int[][] array2 = new int[2][2];\n        int[][] array3 = new int[2][3];\n        for (int i = 0; i < array1.length; ++i) {\n            for (int j = 0; j < array1[0].length; j++) {\n                array1[i][j] = (i + 1) * (j + 1);\n                array2[i][j] = (i + 1) * (j + 1);\n                array3[i][j] = (i + 1) * (j + 1);\n            }\n        }\n        array3[1][2] = 100;\n        array3[1][2] = 100;\n        \n        assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);\n        array1[1][1] = 200;\n        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\n    }",
        "begin_line": 700,
        "end_line": 721,
        "comment": "",
        "child_ranges": [
            "(line 701,col 9)-(line 701,col 39)",
            "(line 702,col 9)-(line 702,col 39)",
            "(line 703,col 9)-(line 703,col 39)",
            "(line 704,col 9)-(line 710,col 9)",
            "(line 711,col 9)-(line 711,col 27)",
            "(line 712,col 9)-(line 712,col 27)",
            "(line 714,col 9)-(line 714,col 86)",
            "(line 715,col 9)-(line 715,col 86)",
            "(line 716,col 9)-(line 716,col 85)",
            "(line 717,col 9)-(line 717,col 85)",
            "(line 718,col 9)-(line 718,col 27)",
            "(line 719,col 9)-(line 719,col 85)",
            "(line 720,col 9)-(line 720,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testMultiShortArray()",
        "snippet": "    public void testMultiShortArray() {\n        short[][] array1 = new short[2][2];\n        short[][] array2 = new short[2][2];\n        short[][] array3 = new short[2][3];\n        for (short i = 0; i < array1.length; ++i) {\n            for (short j = 0; j < array1[0].length; j++) {\n                array1[i][j] = (short)((i + 1) * (j + 1));\n                array2[i][j] = (short)((i + 1) * (j + 1));\n                array3[i][j] = (short)((i + 1) * (j + 1));\n            }\n        }\n        array3[1][2] = 100;\n        array3[1][2] = 100;\n        \n        assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);\n        array1[1][1] = 200;\n        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\n    }",
        "begin_line": 723,
        "end_line": 744,
        "comment": "",
        "child_ranges": [
            "(line 724,col 9)-(line 724,col 43)",
            "(line 725,col 9)-(line 725,col 43)",
            "(line 726,col 9)-(line 726,col 43)",
            "(line 727,col 9)-(line 733,col 9)",
            "(line 734,col 9)-(line 734,col 27)",
            "(line 735,col 9)-(line 735,col 27)",
            "(line 737,col 9)-(line 737,col 86)",
            "(line 738,col 9)-(line 738,col 86)",
            "(line 739,col 9)-(line 739,col 85)",
            "(line 740,col 9)-(line 740,col 85)",
            "(line 741,col 9)-(line 741,col 27)",
            "(line 742,col 9)-(line 742,col 85)",
            "(line 743,col 9)-(line 743,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testMultiCharArray()",
        "snippet": "    public void testMultiCharArray() {\n        char[][] array1 = new char[2][2];\n        char[][] array2 = new char[2][2];\n        char[][] array3 = new char[2][3];\n        for (short i = 0; i < array1.length; ++i) {\n            for (short j = 0; j < array1[0].length; j++) {\n                array1[i][j] = (char)((i + 1) * (j + 1));\n                array2[i][j] = (char)((i + 1) * (j + 1));\n                array3[i][j] = (char)((i + 1) * (j + 1));\n            }\n        }\n        array3[1][2] = 100;\n        array3[1][2] = 100;\n        \n        assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);\n        array1[1][1] = 200;\n        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\n    }",
        "begin_line": 746,
        "end_line": 767,
        "comment": "",
        "child_ranges": [
            "(line 747,col 9)-(line 747,col 41)",
            "(line 748,col 9)-(line 748,col 41)",
            "(line 749,col 9)-(line 749,col 41)",
            "(line 750,col 9)-(line 756,col 9)",
            "(line 757,col 9)-(line 757,col 27)",
            "(line 758,col 9)-(line 758,col 27)",
            "(line 760,col 9)-(line 760,col 86)",
            "(line 761,col 9)-(line 761,col 86)",
            "(line 762,col 9)-(line 762,col 85)",
            "(line 763,col 9)-(line 763,col 85)",
            "(line 764,col 9)-(line 764,col 27)",
            "(line 765,col 9)-(line 765,col 85)",
            "(line 766,col 9)-(line 766,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testMultiByteArray()",
        "snippet": "    public void testMultiByteArray() {\n        byte[][] array1 = new byte[2][2];\n        byte[][] array2 = new byte[2][2];\n        byte[][] array3 = new byte[2][3];\n        for (byte i = 0; i < array1.length; ++i) {\n            for (byte j = 0; j < array1[0].length; j++) {\n                array1[i][j] = (byte)((i + 1) * (j + 1));\n                array2[i][j] = (byte)((i + 1) * (j + 1));\n                array3[i][j] = (byte)((i + 1) * (j + 1));\n            }\n        }\n        array3[1][2] = 100;\n        array3[1][2] = 100;\n        \n        assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);\n        array1[1][1] = 127;\n        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\n    }",
        "begin_line": 769,
        "end_line": 790,
        "comment": "",
        "child_ranges": [
            "(line 770,col 9)-(line 770,col 41)",
            "(line 771,col 9)-(line 771,col 41)",
            "(line 772,col 9)-(line 772,col 41)",
            "(line 773,col 9)-(line 779,col 9)",
            "(line 780,col 9)-(line 780,col 27)",
            "(line 781,col 9)-(line 781,col 27)",
            "(line 783,col 9)-(line 783,col 86)",
            "(line 784,col 9)-(line 784,col 86)",
            "(line 785,col 9)-(line 785,col 85)",
            "(line 786,col 9)-(line 786,col 85)",
            "(line 787,col 9)-(line 787,col 27)",
            "(line 788,col 9)-(line 788,col 85)",
            "(line 789,col 9)-(line 789,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testMultiFloatArray()",
        "snippet": "    public void testMultiFloatArray() {\n        float[][] array1 = new float[2][2];\n        float[][] array2 = new float[2][2];\n        float[][] array3 = new float[2][3];\n        for (int i = 0; i < array1.length; ++i) {\n            for (int j = 0; j < array1[0].length; j++) {\n                array1[i][j] = ((i + 1) * (j + 1));\n                array2[i][j] = ((i + 1) * (j + 1));\n                array3[i][j] = ((i + 1) * (j + 1));\n            }\n        }\n        array3[1][2] = 100;\n        array3[1][2] = 100;\n        \n        assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);\n        array1[1][1] = 127;\n        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\n    }",
        "begin_line": 792,
        "end_line": 813,
        "comment": "",
        "child_ranges": [
            "(line 793,col 9)-(line 793,col 43)",
            "(line 794,col 9)-(line 794,col 43)",
            "(line 795,col 9)-(line 795,col 43)",
            "(line 796,col 9)-(line 802,col 9)",
            "(line 803,col 9)-(line 803,col 27)",
            "(line 804,col 9)-(line 804,col 27)",
            "(line 806,col 9)-(line 806,col 86)",
            "(line 807,col 9)-(line 807,col 86)",
            "(line 808,col 9)-(line 808,col 85)",
            "(line 809,col 9)-(line 809,col 85)",
            "(line 810,col 9)-(line 810,col 27)",
            "(line 811,col 9)-(line 811,col 85)",
            "(line 812,col 9)-(line 812,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testMultiDoubleArray()",
        "snippet": "    public void testMultiDoubleArray() {\n        double[][] array1 = new double[2][2];\n        double[][] array2 = new double[2][2];\n        double[][] array3 = new double[2][3];\n        for (int i = 0; i < array1.length; ++i) {\n            for (int j = 0; j < array1[0].length; j++) {\n                array1[i][j] = ((i + 1) * (j + 1));\n                array2[i][j] = ((i + 1) * (j + 1));\n                array3[i][j] = ((i + 1) * (j + 1));\n            }\n        }\n        array3[1][2] = 100;\n        array3[1][2] = 100;\n        \n        assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);\n        array1[1][1] = 127;\n        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\n    }",
        "begin_line": 815,
        "end_line": 836,
        "comment": "",
        "child_ranges": [
            "(line 816,col 9)-(line 816,col 45)",
            "(line 817,col 9)-(line 817,col 45)",
            "(line 818,col 9)-(line 818,col 45)",
            "(line 819,col 9)-(line 825,col 9)",
            "(line 826,col 9)-(line 826,col 27)",
            "(line 827,col 9)-(line 827,col 27)",
            "(line 829,col 9)-(line 829,col 86)",
            "(line 830,col 9)-(line 830,col 86)",
            "(line 831,col 9)-(line 831,col 85)",
            "(line 832,col 9)-(line 832,col 85)",
            "(line 833,col 9)-(line 833,col 27)",
            "(line 834,col 9)-(line 834,col 85)",
            "(line 835,col 9)-(line 835,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testMultiBooleanArray()",
        "snippet": "    public void testMultiBooleanArray() {\n        boolean[][] array1 = new boolean[2][2];\n        boolean[][] array2 = new boolean[2][2];\n        boolean[][] array3 = new boolean[2][3];\n        for (int i = 0; i < array1.length; ++i) {\n            for (int j = 0; j < array1[0].length; j++) {\n                array1[i][j] = ((i == 1) ^ (j == 1));\n                array2[i][j] = ((i == 1) ^ (j == 1));\n                array3[i][j] = ((i == 1) ^ (j == 1));\n            }\n        }\n        array3[1][2] = false;\n        array3[1][2] = false;\n        \n        assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);\n        array1[1][1] = true;\n        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\n    }",
        "begin_line": 838,
        "end_line": 859,
        "comment": "",
        "child_ranges": [
            "(line 839,col 9)-(line 839,col 47)",
            "(line 840,col 9)-(line 840,col 47)",
            "(line 841,col 9)-(line 841,col 47)",
            "(line 842,col 9)-(line 848,col 9)",
            "(line 849,col 9)-(line 849,col 29)",
            "(line 850,col 9)-(line 850,col 29)",
            "(line 852,col 9)-(line 852,col 86)",
            "(line 853,col 9)-(line 853,col 86)",
            "(line 854,col 9)-(line 854,col 85)",
            "(line 855,col 9)-(line 855,col 85)",
            "(line 856,col 9)-(line 856,col 28)",
            "(line 857,col 9)-(line 857,col 85)",
            "(line 858,col 9)-(line 858,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testRaggedArray()",
        "snippet": "    public void testRaggedArray() {\n        long array1[][] = new long[2][];\n        long array2[][] = new long[2][];\n        long array3[][] = new long[3][];\n        for (int i = 0; i < array1.length; ++i) {\n            array1[i] = new long[2];\n            array2[i] = new long[2];\n            array3[i] = new long[3];\n            for (int j = 0; j < array1[i].length; ++j) {\n                array1[i][j] = (i + 1) * (j + 1);\n                array2[i][j] = (i + 1) * (j + 1);\n                array3[i][j] = (i + 1) * (j + 1);\n            }\n        }\n        array3[1][2] = 100;\n        array3[1][2] = 100;\n        \n        \n        assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);\n        array1[1][1] = 200;\n        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\n    }",
        "begin_line": 861,
        "end_line": 886,
        "comment": "",
        "child_ranges": [
            "(line 862,col 9)-(line 862,col 40)",
            "(line 863,col 9)-(line 863,col 40)",
            "(line 864,col 9)-(line 864,col 40)",
            "(line 865,col 9)-(line 874,col 9)",
            "(line 875,col 9)-(line 875,col 27)",
            "(line 876,col 9)-(line 876,col 27)",
            "(line 879,col 9)-(line 879,col 86)",
            "(line 880,col 9)-(line 880,col 86)",
            "(line 881,col 9)-(line 881,col 85)",
            "(line 882,col 9)-(line 882,col 85)",
            "(line 883,col 9)-(line 883,col 27)",
            "(line 884,col 9)-(line 884,col 85)",
            "(line 885,col 9)-(line 885,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testMixedArray()",
        "snippet": "    public void testMixedArray() {\n        Object array1[] = new Object[2];\n        Object array2[] = new Object[2];\n        Object array3[] = new Object[2];\n        for (int i = 0; i < array1.length; ++i) {\n            array1[i] = new long[2];\n            array2[i] = new long[2];\n            array3[i] = new long[3];\n            for (int j = 0; j < 2; ++j) {\n                ((long[]) array1[i])[j] = (i + 1) * (j + 1);\n                ((long[]) array2[i])[j] = (i + 1) * (j + 1);\n                ((long[]) array3[i])[j] = (i + 1) * (j + 1);\n            }\n        }\n        ((long[]) array3[0])[2] = 1;\n        ((long[]) array3[1])[2] = 1;\n        assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);\n        ((long[]) array1[1])[1] = 200;\n        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\n    }",
        "begin_line": 888,
        "end_line": 911,
        "comment": "",
        "child_ranges": [
            "(line 889,col 9)-(line 889,col 40)",
            "(line 890,col 9)-(line 890,col 40)",
            "(line 891,col 9)-(line 891,col 40)",
            "(line 892,col 9)-(line 901,col 9)",
            "(line 902,col 9)-(line 902,col 36)",
            "(line 903,col 9)-(line 903,col 36)",
            "(line 904,col 9)-(line 904,col 86)",
            "(line 905,col 9)-(line 905,col 86)",
            "(line 906,col 9)-(line 906,col 85)",
            "(line 907,col 9)-(line 907,col 85)",
            "(line 908,col 9)-(line 908,col 38)",
            "(line 909,col 9)-(line 909,col 85)",
            "(line 910,col 9)-(line 910,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testObjectArrayHiddenByObject()",
        "snippet": "    public void testObjectArrayHiddenByObject() {\n        TestObject[] array1 = new TestObject[2];\n        array1[0] = new TestObject(4);\n        array1[1] = new TestObject(5);\n        TestObject[] array2 = new TestObject[2];\n        array2[0] = new TestObject(4);\n        array2[1] = new TestObject(5);\n        TestObject[] array3 = new TestObject[3];\n        array3[0] = new TestObject(4);\n        array3[1] = new TestObject(5);\n        array3[2] = new TestObject(6);\n        \n        Object obj1 = array1;\n        Object obj2 = array2;\n        Object obj3 = array3;\n        \n        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n\n        array1[1] = new TestObject(7);\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n    }",
        "begin_line": 913,
        "end_line": 937,
        "comment": "",
        "child_ranges": [
            "(line 914,col 9)-(line 914,col 48)",
            "(line 915,col 9)-(line 915,col 38)",
            "(line 916,col 9)-(line 916,col 38)",
            "(line 917,col 9)-(line 917,col 48)",
            "(line 918,col 9)-(line 918,col 38)",
            "(line 919,col 9)-(line 919,col 38)",
            "(line 920,col 9)-(line 920,col 48)",
            "(line 921,col 9)-(line 921,col 38)",
            "(line 922,col 9)-(line 922,col 38)",
            "(line 923,col 9)-(line 923,col 38)",
            "(line 925,col 9)-(line 925,col 29)",
            "(line 926,col 9)-(line 926,col 29)",
            "(line 927,col 9)-(line 927,col 29)",
            "(line 929,col 9)-(line 929,col 82)",
            "(line 930,col 9)-(line 930,col 82)",
            "(line 931,col 9)-(line 931,col 81)",
            "(line 932,col 9)-(line 932,col 81)",
            "(line 934,col 9)-(line 934,col 38)",
            "(line 935,col 9)-(line 935,col 81)",
            "(line 936,col 9)-(line 936,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testLongArrayHiddenByObject()",
        "snippet": "    public void testLongArrayHiddenByObject() {\n        long[] array1 = new long[2];\n        array1[0] = 5L;\n        array1[1] = 6L;\n        long[] array2 = new long[2];\n        array2[0] = 5L;\n        array2[1] = 6L;\n        long[] array3 = new long[3];\n        array3[0] = 5L;\n        array3[1] = 6L;\n        array3[2] = 7L;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        Object obj3 = array3;\n        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n\n        array1[1] = 7;\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n    }",
        "begin_line": 939,
        "end_line": 961,
        "comment": "",
        "child_ranges": [
            "(line 940,col 9)-(line 940,col 36)",
            "(line 941,col 9)-(line 941,col 23)",
            "(line 942,col 9)-(line 942,col 23)",
            "(line 943,col 9)-(line 943,col 36)",
            "(line 944,col 9)-(line 944,col 23)",
            "(line 945,col 9)-(line 945,col 23)",
            "(line 946,col 9)-(line 946,col 36)",
            "(line 947,col 9)-(line 947,col 23)",
            "(line 948,col 9)-(line 948,col 23)",
            "(line 949,col 9)-(line 949,col 23)",
            "(line 950,col 9)-(line 950,col 29)",
            "(line 951,col 9)-(line 951,col 29)",
            "(line 952,col 9)-(line 952,col 29)",
            "(line 953,col 9)-(line 953,col 82)",
            "(line 954,col 9)-(line 954,col 82)",
            "(line 955,col 9)-(line 955,col 81)",
            "(line 956,col 9)-(line 956,col 81)",
            "(line 958,col 9)-(line 958,col 22)",
            "(line 959,col 9)-(line 959,col 81)",
            "(line 960,col 9)-(line 960,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testIntArrayHiddenByObject()",
        "snippet": "    public void testIntArrayHiddenByObject() {\n        int[] array1 = new int[2];\n        array1[0] = 5;\n        array1[1] = 6;\n        int[] array2 = new int[2];\n        array2[0] = 5;\n        array2[1] = 6;\n        int[] array3 = new int[3];\n        array3[0] = 5;\n        array3[1] = 6;\n        array3[2] = 7;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        Object obj3 = array3;\n        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n\n        array1[1] = 7;\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n    }",
        "begin_line": 963,
        "end_line": 985,
        "comment": "",
        "child_ranges": [
            "(line 964,col 9)-(line 964,col 34)",
            "(line 965,col 9)-(line 965,col 22)",
            "(line 966,col 9)-(line 966,col 22)",
            "(line 967,col 9)-(line 967,col 34)",
            "(line 968,col 9)-(line 968,col 22)",
            "(line 969,col 9)-(line 969,col 22)",
            "(line 970,col 9)-(line 970,col 34)",
            "(line 971,col 9)-(line 971,col 22)",
            "(line 972,col 9)-(line 972,col 22)",
            "(line 973,col 9)-(line 973,col 22)",
            "(line 974,col 9)-(line 974,col 29)",
            "(line 975,col 9)-(line 975,col 29)",
            "(line 976,col 9)-(line 976,col 29)",
            "(line 977,col 9)-(line 977,col 82)",
            "(line 978,col 9)-(line 978,col 82)",
            "(line 979,col 9)-(line 979,col 81)",
            "(line 980,col 9)-(line 980,col 81)",
            "(line 982,col 9)-(line 982,col 22)",
            "(line 983,col 9)-(line 983,col 81)",
            "(line 984,col 9)-(line 984,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testShortArrayHiddenByObject()",
        "snippet": "    public void testShortArrayHiddenByObject() {\n        short[] array1 = new short[2];\n        array1[0] = 5;\n        array1[1] = 6;\n        short[] array2 = new short[2];\n        array2[0] = 5;\n        array2[1] = 6;\n        short[] array3 = new short[3];\n        array3[0] = 5;\n        array3[1] = 6;\n        array3[2] = 7;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        Object obj3 = array3;\n        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n\n        array1[1] = 7;\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n    }",
        "begin_line": 987,
        "end_line": 1009,
        "comment": "",
        "child_ranges": [
            "(line 988,col 9)-(line 988,col 38)",
            "(line 989,col 9)-(line 989,col 22)",
            "(line 990,col 9)-(line 990,col 22)",
            "(line 991,col 9)-(line 991,col 38)",
            "(line 992,col 9)-(line 992,col 22)",
            "(line 993,col 9)-(line 993,col 22)",
            "(line 994,col 9)-(line 994,col 38)",
            "(line 995,col 9)-(line 995,col 22)",
            "(line 996,col 9)-(line 996,col 22)",
            "(line 997,col 9)-(line 997,col 22)",
            "(line 998,col 9)-(line 998,col 29)",
            "(line 999,col 9)-(line 999,col 29)",
            "(line 1000,col 9)-(line 1000,col 29)",
            "(line 1001,col 9)-(line 1001,col 82)",
            "(line 1002,col 9)-(line 1002,col 82)",
            "(line 1003,col 9)-(line 1003,col 81)",
            "(line 1004,col 9)-(line 1004,col 81)",
            "(line 1006,col 9)-(line 1006,col 22)",
            "(line 1007,col 9)-(line 1007,col 81)",
            "(line 1008,col 9)-(line 1008,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testCharArrayHiddenByObject()",
        "snippet": "    public void testCharArrayHiddenByObject() {\n        char[] array1 = new char[2];\n        array1[0] = 5;\n        array1[1] = 6;\n        char[] array2 = new char[2];\n        array2[0] = 5;\n        array2[1] = 6;\n        char[] array3 = new char[3];\n        array3[0] = 5;\n        array3[1] = 6;\n        array3[2] = 7;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        Object obj3 = array3;\n        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n\n        array1[1] = 7;\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n    }",
        "begin_line": 1011,
        "end_line": 1033,
        "comment": "",
        "child_ranges": [
            "(line 1012,col 9)-(line 1012,col 36)",
            "(line 1013,col 9)-(line 1013,col 22)",
            "(line 1014,col 9)-(line 1014,col 22)",
            "(line 1015,col 9)-(line 1015,col 36)",
            "(line 1016,col 9)-(line 1016,col 22)",
            "(line 1017,col 9)-(line 1017,col 22)",
            "(line 1018,col 9)-(line 1018,col 36)",
            "(line 1019,col 9)-(line 1019,col 22)",
            "(line 1020,col 9)-(line 1020,col 22)",
            "(line 1021,col 9)-(line 1021,col 22)",
            "(line 1022,col 9)-(line 1022,col 29)",
            "(line 1023,col 9)-(line 1023,col 29)",
            "(line 1024,col 9)-(line 1024,col 29)",
            "(line 1025,col 9)-(line 1025,col 82)",
            "(line 1026,col 9)-(line 1026,col 82)",
            "(line 1027,col 9)-(line 1027,col 81)",
            "(line 1028,col 9)-(line 1028,col 81)",
            "(line 1030,col 9)-(line 1030,col 22)",
            "(line 1031,col 9)-(line 1031,col 81)",
            "(line 1032,col 9)-(line 1032,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testByteArrayHiddenByObject()",
        "snippet": "    public void testByteArrayHiddenByObject() {\n        byte[] array1 = new byte[2];\n        array1[0] = 5;\n        array1[1] = 6;\n        byte[] array2 = new byte[2];\n        array2[0] = 5;\n        array2[1] = 6;\n        byte[] array3 = new byte[3];\n        array3[0] = 5;\n        array3[1] = 6;\n        array3[2] = 7;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        Object obj3 = array3;\n        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n\n        array1[1] = 7;\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n    }",
        "begin_line": 1035,
        "end_line": 1057,
        "comment": "",
        "child_ranges": [
            "(line 1036,col 9)-(line 1036,col 36)",
            "(line 1037,col 9)-(line 1037,col 22)",
            "(line 1038,col 9)-(line 1038,col 22)",
            "(line 1039,col 9)-(line 1039,col 36)",
            "(line 1040,col 9)-(line 1040,col 22)",
            "(line 1041,col 9)-(line 1041,col 22)",
            "(line 1042,col 9)-(line 1042,col 36)",
            "(line 1043,col 9)-(line 1043,col 22)",
            "(line 1044,col 9)-(line 1044,col 22)",
            "(line 1045,col 9)-(line 1045,col 22)",
            "(line 1046,col 9)-(line 1046,col 29)",
            "(line 1047,col 9)-(line 1047,col 29)",
            "(line 1048,col 9)-(line 1048,col 29)",
            "(line 1049,col 9)-(line 1049,col 82)",
            "(line 1050,col 9)-(line 1050,col 82)",
            "(line 1051,col 9)-(line 1051,col 81)",
            "(line 1052,col 9)-(line 1052,col 81)",
            "(line 1054,col 9)-(line 1054,col 22)",
            "(line 1055,col 9)-(line 1055,col 81)",
            "(line 1056,col 9)-(line 1056,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testDoubleArrayHiddenByObject()",
        "snippet": "    public void testDoubleArrayHiddenByObject() {\n        double[] array1 = new double[2];\n        array1[0] = 5;\n        array1[1] = 6;\n        double[] array2 = new double[2];\n        array2[0] = 5;\n        array2[1] = 6;\n        double[] array3 = new double[3];\n        array3[0] = 5;\n        array3[1] = 6;\n        array3[2] = 7;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        Object obj3 = array3;\n        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n\n        array1[1] = 7;\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n    }",
        "begin_line": 1059,
        "end_line": 1081,
        "comment": "",
        "child_ranges": [
            "(line 1060,col 9)-(line 1060,col 40)",
            "(line 1061,col 9)-(line 1061,col 22)",
            "(line 1062,col 9)-(line 1062,col 22)",
            "(line 1063,col 9)-(line 1063,col 40)",
            "(line 1064,col 9)-(line 1064,col 22)",
            "(line 1065,col 9)-(line 1065,col 22)",
            "(line 1066,col 9)-(line 1066,col 40)",
            "(line 1067,col 9)-(line 1067,col 22)",
            "(line 1068,col 9)-(line 1068,col 22)",
            "(line 1069,col 9)-(line 1069,col 22)",
            "(line 1070,col 9)-(line 1070,col 29)",
            "(line 1071,col 9)-(line 1071,col 29)",
            "(line 1072,col 9)-(line 1072,col 29)",
            "(line 1073,col 9)-(line 1073,col 82)",
            "(line 1074,col 9)-(line 1074,col 82)",
            "(line 1075,col 9)-(line 1075,col 81)",
            "(line 1076,col 9)-(line 1076,col 81)",
            "(line 1078,col 9)-(line 1078,col 22)",
            "(line 1079,col 9)-(line 1079,col 81)",
            "(line 1080,col 9)-(line 1080,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testFloatArrayHiddenByObject()",
        "snippet": "    public void testFloatArrayHiddenByObject() {\n        float[] array1 = new float[2];\n        array1[0] = 5;\n        array1[1] = 6;\n        float[] array2 = new float[2];\n        array2[0] = 5;\n        array2[1] = 6;\n        float[] array3 = new float[3];\n        array3[0] = 5;\n        array3[1] = 6;\n        array3[2] = 7;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        Object obj3 = array3;\n        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n\n        array1[1] = 7;\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n    }",
        "begin_line": 1083,
        "end_line": 1105,
        "comment": "",
        "child_ranges": [
            "(line 1084,col 9)-(line 1084,col 38)",
            "(line 1085,col 9)-(line 1085,col 22)",
            "(line 1086,col 9)-(line 1086,col 22)",
            "(line 1087,col 9)-(line 1087,col 38)",
            "(line 1088,col 9)-(line 1088,col 22)",
            "(line 1089,col 9)-(line 1089,col 22)",
            "(line 1090,col 9)-(line 1090,col 38)",
            "(line 1091,col 9)-(line 1091,col 22)",
            "(line 1092,col 9)-(line 1092,col 22)",
            "(line 1093,col 9)-(line 1093,col 22)",
            "(line 1094,col 9)-(line 1094,col 29)",
            "(line 1095,col 9)-(line 1095,col 29)",
            "(line 1096,col 9)-(line 1096,col 29)",
            "(line 1097,col 9)-(line 1097,col 82)",
            "(line 1098,col 9)-(line 1098,col 82)",
            "(line 1099,col 9)-(line 1099,col 81)",
            "(line 1100,col 9)-(line 1100,col 81)",
            "(line 1102,col 9)-(line 1102,col 22)",
            "(line 1103,col 9)-(line 1103,col 81)",
            "(line 1104,col 9)-(line 1104,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang.builder.CompareToBuilderTest.testBooleanArrayHiddenByObject()",
        "snippet": "    public void testBooleanArrayHiddenByObject() {\n        boolean[] array1 = new boolean[2];\n        array1[0] = true;\n        array1[1] = false;\n        boolean[] array2 = new boolean[2];\n        array2[0] = true;\n        array2[1] = false;\n        boolean[] array3 = new boolean[3];\n        array3[0] = true;\n        array3[1] = false;\n        array3[2] = true;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        Object obj3 = array3;\n        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n\n        array1[1] = true;\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n    }",
        "begin_line": 1107,
        "end_line": 1129,
        "comment": "",
        "child_ranges": [
            "(line 1108,col 9)-(line 1108,col 42)",
            "(line 1109,col 9)-(line 1109,col 25)",
            "(line 1110,col 9)-(line 1110,col 26)",
            "(line 1111,col 9)-(line 1111,col 42)",
            "(line 1112,col 9)-(line 1112,col 25)",
            "(line 1113,col 9)-(line 1113,col 26)",
            "(line 1114,col 9)-(line 1114,col 42)",
            "(line 1115,col 9)-(line 1115,col 25)",
            "(line 1116,col 9)-(line 1116,col 26)",
            "(line 1117,col 9)-(line 1117,col 25)",
            "(line 1118,col 9)-(line 1118,col 29)",
            "(line 1119,col 9)-(line 1119,col 29)",
            "(line 1120,col 9)-(line 1120,col 29)",
            "(line 1121,col 9)-(line 1121,col 82)",
            "(line 1122,col 9)-(line 1122,col 82)",
            "(line 1123,col 9)-(line 1123,col 81)",
            "(line 1124,col 9)-(line 1124,col 81)",
            "(line 1126,col 9)-(line 1126,col 25)",
            "(line 1127,col 9)-(line 1127,col 81)",
            "(line 1128,col 9)-(line 1128,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/StandardToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyleTest.StandardToStringStyleTest(java.lang.String)",
        "snippet": "    public StandardToStringStyleTest(String name) {\n        super(name);\n    }",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/StandardToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyleTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 59,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/StandardToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyleTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(StandardToStringStyleTest.class);\n        suite.setName(\"StandardToStringStyle Tests\");\n        return suite;\n    }",
        "begin_line": 63,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 73)",
            "(line 65,col 9)-(line 65,col 53)",
            "(line 66,col 9)-(line 66,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/StandardToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyleTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        super.setUp();\n        ToStringBuilder.setDefaultStyle(STYLE);\n    }",
        "begin_line": 69,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 22)",
            "(line 71,col 9)-(line 71,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/StandardToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyleTest.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        super.tearDown();\n        ToStringBuilder.setDefaultStyle(STYLE);\n    }",
        "begin_line": 74,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 25)",
            "(line 76,col 9)-(line 76,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/StandardToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyleTest.testBlank()",
        "snippet": "    public void testBlank() {\n        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).toString());\n    }",
        "begin_line": 81,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/StandardToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyleTest.testAppendSuper()",
        "snippet": "    public void testAppendSuper() {\n        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").toString());\n        assertEquals(baseStr + \"[%NULL%]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[%NULL%]\").toString());\n        \n        assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").append(\"a\", \"hello\").toString());\n        assertEquals(baseStr + \"[%NULL%,a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[%NULL%]\").append(\"a\", \"hello\").toString());\n        assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(null).append(\"a\", \"hello\").toString());\n    }",
        "begin_line": 85,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 105)",
            "(line 87,col 9)-(line 87,col 117)",
            "(line 89,col 9)-(line 89,col 133)",
            "(line 90,col 9)-(line 90,col 146)",
            "(line 91,col 9)-(line 91,col 121)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/StandardToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyleTest.testObject()",
        "snippet": "    public void testObject() {\n        Integer i3 = new Integer(3);\n        Integer i4 = new Integer(4);\n        assertEquals(baseStr + \"[%NULL%]\", new ToStringBuilder(base).append((Object) null).toString());\n        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(i3).toString());\n        assertEquals(baseStr + \"[a=%NULL%]\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\n        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", i3).toString());\n        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\n        assertEquals(baseStr + \"[a=%Integer%]\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\n        assertEquals(baseStr + \"[a=%SIZE=0%]\", new ToStringBuilder(base).append(\"a\", new ArrayList(), false).toString());\n        assertEquals(baseStr + \"[a=[]]\", new ToStringBuilder(base).append(\"a\", new ArrayList(), true).toString());\n        assertEquals(baseStr + \"[a=%SIZE=0%]\", new ToStringBuilder(base).append(\"a\", new HashMap(), false).toString());\n        assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", new HashMap(), true).toString());\n        assertEquals(baseStr + \"[a=%SIZE=0%]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], false).toString());\n        assertEquals(baseStr + \"[a=[]]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).toString());\n    }",
        "begin_line": 94,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 36)",
            "(line 96,col 9)-(line 96,col 36)",
            "(line 97,col 9)-(line 97,col 103)",
            "(line 98,col 9)-(line 98,col 87)",
            "(line 99,col 9)-(line 99,col 110)",
            "(line 100,col 9)-(line 100,col 94)",
            "(line 101,col 9)-(line 101,col 114)",
            "(line 102,col 9)-(line 102,col 109)",
            "(line 103,col 9)-(line 103,col 121)",
            "(line 104,col 9)-(line 104,col 114)",
            "(line 105,col 9)-(line 105,col 119)",
            "(line 106,col 9)-(line 106,col 112)",
            "(line 107,col 9)-(line 107,col 128)",
            "(line 108,col 9)-(line 108,col 121)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/StandardToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyleTest.testPerson()",
        "snippet": "    public void testPerson() {\n        Person p = new Person();\n        p.name = \"Suzy Queue\";\n        p.age = 19;\n        p.smoker = false;\n        String pBaseStr = \"ToStringStyleTest.Person\";\n        assertEquals(pBaseStr + \"[name=Suzy Queue,age=19,smoker=false]\", new ToStringBuilder(p).append(\"name\", p.name).append(\"age\", p.age).append(\"smoker\", p.smoker).toString());\n    }",
        "begin_line": 111,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 32)",
            "(line 113,col 9)-(line 113,col 30)",
            "(line 114,col 9)-(line 114,col 19)",
            "(line 115,col 9)-(line 115,col 25)",
            "(line 116,col 9)-(line 116,col 53)",
            "(line 117,col 9)-(line 117,col 179)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/StandardToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyleTest.testLong()",
        "snippet": "    public void testLong() {\n        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(3L).toString());\n        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", 3L).toString());\n        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", 3L).append(\"b\", 4L).toString());\n    }",
        "begin_line": 120,
        "end_line": 124,
        "comment": "",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 87)",
            "(line 122,col 9)-(line 122,col 94)",
            "(line 123,col 9)-(line 123,col 114)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/StandardToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyleTest.testObjectArray()",
        "snippet": "    public void testObjectArray() {\n        Object[] array = new Object[] {null, base, new int[] {3, 6}};\n        assertEquals(baseStr + \"[[%NULL%, 5, [3, 6]]]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[[%NULL%, 5, [3, 6]]]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[%NULL%]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[%NULL%]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 126,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 69)",
            "(line 128,col 9)-(line 128,col 108)",
            "(line 129,col 9)-(line 129,col 117)",
            "(line 130,col 9)-(line 130,col 21)",
            "(line 131,col 9)-(line 131,col 95)",
            "(line 132,col 9)-(line 132,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/StandardToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyleTest.testLongArray()",
        "snippet": "    public void testLongArray() {\n        long[] array = new long[] {1, 2, -3, 4};\n        assertEquals(baseStr + \"[[1, 2, -3, 4]]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[[1, 2, -3, 4]]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[%NULL%]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[%NULL%]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 135,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 136,col 9)-(line 136,col 48)",
            "(line 137,col 9)-(line 137,col 102)",
            "(line 138,col 9)-(line 138,col 111)",
            "(line 139,col 9)-(line 139,col 21)",
            "(line 140,col 9)-(line 140,col 95)",
            "(line 141,col 9)-(line 141,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/StandardToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyleTest.testLongArrayArray()",
        "snippet": "    public void testLongArrayArray() {\n        long[][] array = new long[][] {{1, 2}, null, {5}};\n        assertEquals(baseStr + \"[[[1, 2], %NULL%, [5]]]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[[[1, 2], %NULL%, [5]]]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[%NULL%]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[%NULL%]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 144,
        "end_line": 151,
        "comment": "",
        "child_ranges": [
            "(line 145,col 9)-(line 145,col 58)",
            "(line 146,col 9)-(line 146,col 110)",
            "(line 147,col 9)-(line 147,col 119)",
            "(line 148,col 9)-(line 148,col 21)",
            "(line 149,col 9)-(line 149,col 95)",
            "(line 150,col 9)-(line 150,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ShortPrefixToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ShortPrefixToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.ShortPrefixToStringStyleTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        super.setUp();\n        ToStringBuilder.setDefaultStyle(ToStringStyle.SHORT_PREFIX_STYLE);\n    }",
        "begin_line": 37,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 22)",
            "(line 39,col 9)-(line 39,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ShortPrefixToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ShortPrefixToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.ShortPrefixToStringStyleTest.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        super.tearDown();\n        ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);\n    }",
        "begin_line": 42,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 25)",
            "(line 44,col 9)-(line 44,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ShortPrefixToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ShortPrefixToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.ShortPrefixToStringStyleTest.testBlank()",
        "snippet": "    public void testBlank() {\n        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).toString());\n    }",
        "begin_line": 49,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ShortPrefixToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ShortPrefixToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.ShortPrefixToStringStyleTest.testAppendSuper()",
        "snippet": "    public void testAppendSuper() {\n        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").toString());\n        \n        assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").append(\"a\", \"hello\").toString());\n        assertEquals(baseStr + \"[<null>,a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").append(\"a\", \"hello\").toString());\n        assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(null).append(\"a\", \"hello\").toString());\n    }",
        "begin_line": 53,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 105)",
            "(line 55,col 9)-(line 55,col 117)",
            "(line 57,col 9)-(line 57,col 133)",
            "(line 58,col 9)-(line 58,col 146)",
            "(line 59,col 9)-(line 59,col 121)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ShortPrefixToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ShortPrefixToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.ShortPrefixToStringStyleTest.testObject()",
        "snippet": "    public void testObject() {\n        Integer i3 = new Integer(3);\n        Integer i4 = new Integer(4);\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) null).toString());\n        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(i3).toString());\n        assertEquals(baseStr + \"[a=<null>]\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\n        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", i3).toString());\n        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\n        assertEquals(baseStr + \"[a=<Integer>]\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\n        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", new ArrayList(), false).toString());\n        assertEquals(baseStr + \"[a=[]]\", new ToStringBuilder(base).append(\"a\", new ArrayList(), true).toString());\n        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", new HashMap(), false).toString());\n        assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", new HashMap(), true).toString());\n        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], false).toString());\n        assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).toString());\n    }",
        "begin_line": 62,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 36)",
            "(line 64,col 9)-(line 64,col 36)",
            "(line 65,col 9)-(line 65,col 103)",
            "(line 66,col 9)-(line 66,col 87)",
            "(line 67,col 9)-(line 67,col 110)",
            "(line 68,col 9)-(line 68,col 94)",
            "(line 69,col 9)-(line 69,col 114)",
            "(line 70,col 9)-(line 70,col 109)",
            "(line 71,col 9)-(line 71,col 121)",
            "(line 72,col 9)-(line 72,col 114)",
            "(line 73,col 9)-(line 73,col 119)",
            "(line 74,col 9)-(line 74,col 112)",
            "(line 75,col 9)-(line 75,col 128)",
            "(line 76,col 9)-(line 76,col 121)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ShortPrefixToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ShortPrefixToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.ShortPrefixToStringStyleTest.testPerson()",
        "snippet": "    public void testPerson() {}",
        "begin_line": 79,
        "end_line": 79,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.builder.ShortPrefixToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ShortPrefixToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.ShortPrefixToStringStyleTest.testLong()",
        "snippet": "    public void testLong() {\n        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(3L).toString());\n        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", 3L).toString());\n        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", 3L).append(\"b\", 4L).toString());\n    }",
        "begin_line": 90,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 87)",
            "(line 92,col 9)-(line 92,col 94)",
            "(line 93,col 9)-(line 93,col 114)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ShortPrefixToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ShortPrefixToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.ShortPrefixToStringStyleTest.testObjectArray()",
        "snippet": "    public void testObjectArray() {\n        Object[] array = new Object[] {null, base, new int[] {3, 6}};\n        assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 96,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 69)",
            "(line 98,col 9)-(line 98,col 105)",
            "(line 99,col 9)-(line 99,col 114)",
            "(line 100,col 9)-(line 100,col 21)",
            "(line 101,col 9)-(line 101,col 95)",
            "(line 102,col 9)-(line 102,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ShortPrefixToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ShortPrefixToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.ShortPrefixToStringStyleTest.testLongArray()",
        "snippet": "    public void testLongArray() {\n        long[] array = new long[] {1, 2, -3, 4};\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 105,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 48)",
            "(line 107,col 9)-(line 107,col 99)",
            "(line 108,col 9)-(line 108,col 108)",
            "(line 109,col 9)-(line 109,col 21)",
            "(line 110,col 9)-(line 110,col 95)",
            "(line 111,col 9)-(line 111,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.builder.ShortPrefixToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/builder/ShortPrefixToStringStyleTest.java",
        "signature": "org.apache.commons.lang.builder.ShortPrefixToStringStyleTest.testLongArrayArray()",
        "snippet": "    public void testLongArrayArray() {\n        long[][] array = new long[][] {{1, 2}, null, {5}};\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 114,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 58)",
            "(line 116,col 9)-(line 116,col 107)",
            "(line 117,col 9)-(line 117,col 116)",
            "(line 118,col 9)-(line 118,col 21)",
            "(line 119,col 9)-(line 119,col 95)",
            "(line 120,col 9)-(line 120,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken3Enum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken3Enum.java",
        "signature": "org.apache.commons.lang.enums.Broken3Enum.Broken3Enum(java.lang.String)",
        "snippet": "    private Broken3Enum(String color) {\n        super(color);\n    }",
        "begin_line": 34,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken3Enum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken3Enum.java",
        "signature": "org.apache.commons.lang.enums.Broken3Enum.getEnum(java.lang.String)",
        "snippet": "    public static Broken3Enum getEnum(String color) {\n        return (Broken3Enum) getEnum(Broken3Enum.class, color);\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken3Enum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken3Enum.java",
        "signature": "org.apache.commons.lang.enums.Broken3Enum.getEnumMap()",
        "snippet": "    public static Map getEnumMap() {\n        return getEnumMap(Broken3Enum.class);\n    }",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken3Enum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken3Enum.java",
        "signature": "org.apache.commons.lang.enums.Broken3Enum.getEnumList()",
        "snippet": "    public static List getEnumList() {\n        return getEnumList(Broken3Enum.class);\n    }",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken3Enum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken3Enum.java",
        "signature": "org.apache.commons.lang.enums.Broken3Enum.iterator()",
        "snippet": "    public static Iterator iterator() {\n        return iterator(Broken3Enum.class);\n    }",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.NestReferenced",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/NestReferenced.java",
        "signature": "org.apache.commons.lang.enums.NestReferenced.NestReferenced()",
        "snippet": "    public NestReferenced() {\n        super();\n    }",
        "begin_line": 39,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 16)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.NestReferenced",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/NestReferenced.java",
        "signature": "org.apache.commons.lang.enums.NestReferenced.ColorEnum.ColorEnum(java.lang.String)",
        "snippet": "        private ColorEnum(String color) {\n            super(color);\n        }",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 13)-(line 51,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.NestReferenced",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/NestReferenced.java",
        "signature": "org.apache.commons.lang.enums.NestReferenced.ColorEnum.getEnum(java.lang.String)",
        "snippet": "        public static ColorEnum getEnum(String color) {\n            return (ColorEnum) getEnum(ColorEnum.class, color);\n        }",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 55,col 13)-(line 55,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.NestReferenced",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/NestReferenced.java",
        "signature": "org.apache.commons.lang.enums.NestReferenced.ColorEnum.getEnumMap()",
        "snippet": "        public static Map getEnumMap() {\n            return getEnumMap(ColorEnum.class);\n        }",
        "begin_line": 58,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 59,col 13)-(line 59,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.NestReferenced",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/NestReferenced.java",
        "signature": "org.apache.commons.lang.enums.NestReferenced.ColorEnum.getEnumList()",
        "snippet": "        public static List getEnumList() {\n            return getEnumList(ColorEnum.class);\n        }",
        "begin_line": 62,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 63,col 13)-(line 63,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.NestReferenced",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/NestReferenced.java",
        "signature": "org.apache.commons.lang.enums.NestReferenced.ColorEnum.iterator()",
        "snippet": "        public static Iterator iterator() {\n            return iterator(ColorEnum.class);\n        }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 67,col 13)-(line 67,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.ColorEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/ColorEnum.java",
        "signature": "org.apache.commons.lang.enums.ColorEnum.ColorEnum(java.lang.String)",
        "snippet": "    private ColorEnum(String color) {\n        super(color);\n    }",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.ColorEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/ColorEnum.java",
        "signature": "org.apache.commons.lang.enums.ColorEnum.getEnum(java.lang.String)",
        "snippet": "    public static ColorEnum getEnum(String color) {\n        return (ColorEnum) getEnum(ColorEnum.class, color);\n    }",
        "begin_line": 39,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.ColorEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/ColorEnum.java",
        "signature": "org.apache.commons.lang.enums.ColorEnum.getEnumMap()",
        "snippet": "    public static Map getEnumMap() {\n        return getEnumMap(ColorEnum.class);\n    }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.ColorEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/ColorEnum.java",
        "signature": "org.apache.commons.lang.enums.ColorEnum.getEnumList()",
        "snippet": "    public static List getEnumList() {\n        return getEnumList(ColorEnum.class);\n    }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.ColorEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/ColorEnum.java",
        "signature": "org.apache.commons.lang.enums.ColorEnum.iterator()",
        "snippet": "    public static Iterator iterator() {\n        return iterator(ColorEnum.class);\n    }",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken3OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken3OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken3OperationEnum.PlusOperation.PlusOperation()",
        "snippet": "        private PlusOperation() {\n            super(\"Plus\");\n        }",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 45,col 13)-(line 45,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken3OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken3OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken3OperationEnum.PlusOperation.eval(int, int)",
        "snippet": "        public int eval(int a, int b) {\n            return (a + b);\n        }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 13)-(line 48,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken3OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken3OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken3OperationEnum.MinusOperation.MinusOperation()",
        "snippet": "        private MinusOperation() {\n            super(\"Minus\");\n        }",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 54,col 13)-(line 54,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken3OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken3OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken3OperationEnum.MinusOperation.eval(int, int)",
        "snippet": "        public int eval(int a, int b) {\n            return (a - b);\n        }",
        "begin_line": 56,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 57,col 13)-(line 57,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken3OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken3OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken3OperationEnum.Broken3OperationEnum(java.lang.String)",
        "snippet": "    private Broken3OperationEnum(String name) {\n        super(name);\n    }",
        "begin_line": 61,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken3OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken3OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken3OperationEnum.getEnumClass()",
        "snippet": "    public final Class getEnumClass() {\n        return Enum.class;\n    }",
        "begin_line": 65,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken3OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken3OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken3OperationEnum.eval(int, int)",
        "snippet": "    public abstract int eval(int a, int b);",
        "begin_line": 69,
        "end_line": 69,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken3OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken3OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken3OperationEnum.getEnum(java.lang.String)",
        "snippet": "    public static Broken3OperationEnum getEnum(String name) {\n        return (Broken3OperationEnum) getEnum(Broken3OperationEnum.class, name);\n    }",
        "begin_line": 71,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken3OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken3OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken3OperationEnum.getEnumMap()",
        "snippet": "    public static Map getEnumMap() {\n        return getEnumMap(Broken3OperationEnum.class);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken3OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken3OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken3OperationEnum.getEnumList()",
        "snippet": "    public static List getEnumList() {\n        return getEnumList(Broken3OperationEnum.class);\n    }",
        "begin_line": 79,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken3OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken3OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken3OperationEnum.iterator()",
        "snippet": "    public static Iterator iterator() {\n        return iterator(Broken3OperationEnum.class);\n    }",
        "begin_line": 83,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumEqualsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumEqualsTest.java",
        "signature": "org.apache.commons.lang.enums.EnumEqualsTest.EnumEqualsTest(java.lang.String)",
        "snippet": "    public EnumEqualsTest(String name) {\n        super(name);\n    }",
        "begin_line": 34,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumEqualsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumEqualsTest.java",
        "signature": "org.apache.commons.lang.enums.EnumEqualsTest.setUp()",
        "snippet": "    public void setUp() {\n    }",
        "begin_line": 38,
        "end_line": 39,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumEqualsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumEqualsTest.java",
        "signature": "org.apache.commons.lang.enums.EnumEqualsTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(EnumEqualsTest.class);\n        suite.setName(\"Enum equals Tests\");\n        return suite;\n    }",
        "begin_line": 41,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 62)",
            "(line 43,col 9)-(line 43,col 43)",
            "(line 44,col 9)-(line 44,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumEqualsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumEqualsTest.java",
        "signature": "org.apache.commons.lang.enums.EnumEqualsTest.CarColorEnum.CarColorEnum(java.lang.String)",
        "snippet": "        private CarColorEnum(String enumAsString) {\n            super(enumAsString);\n        }",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 56,col 13)-(line 56,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumEqualsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumEqualsTest.java",
        "signature": "org.apache.commons.lang.enums.EnumEqualsTest.TrafficlightColorEnum.TrafficlightColorEnum(java.lang.String)",
        "snippet": "        private TrafficlightColorEnum(String enumAsString) {\n            super(enumAsString);\n        }",
        "begin_line": 65,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 66,col 13)-(line 66,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumEqualsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumEqualsTest.java",
        "signature": "org.apache.commons.lang.enums.EnumEqualsTest.TotallyUnrelatedClass.TotallyUnrelatedClass(java.lang.String)",
        "snippet": "        public TotallyUnrelatedClass(final String name) {\n            this.name = name;\n        }",
        "begin_line": 73,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 74,col 13)-(line 74,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumEqualsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumEqualsTest.java",
        "signature": "org.apache.commons.lang.enums.EnumEqualsTest.TotallyUnrelatedClass.getName()",
        "snippet": "        public String getName() {\n            return name;\n        }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 78,col 13)-(line 78,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumEqualsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumEqualsTest.java",
        "signature": "org.apache.commons.lang.enums.EnumEqualsTest.testEquals()",
        "snippet": "    public void testEquals() {\n        assertEquals(false, CarColorEnum.RED.equals(TrafficlightColorEnum.RED));\n        assertEquals(false, CarColorEnum.YELLOW.equals(TrafficlightColorEnum.YELLOW));\n        \n        assertEquals(false, TrafficlightColorEnum.RED.equals(new TotallyUnrelatedClass(\"red\")));\n        assertEquals(false, CarColorEnum.RED.equals(new TotallyUnrelatedClass(\"red\")));\n        \n        assertEquals(false, TrafficlightColorEnum.RED.equals(new TotallyUnrelatedClass(\"some\")));\n        assertEquals(false, CarColorEnum.RED.equals(new TotallyUnrelatedClass(\"some\")));\n    }",
        "begin_line": 83,
        "end_line": 92,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 80)",
            "(line 85,col 9)-(line 85,col 86)",
            "(line 87,col 9)-(line 87,col 96)",
            "(line 88,col 9)-(line 88,col 87)",
            "(line 90,col 9)-(line 90,col 97)",
            "(line 91,col 9)-(line 91,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumEqualsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumEqualsTest.java",
        "signature": "org.apache.commons.lang.enums.EnumEqualsTest.testEquals_classloader_equal()",
        "snippet": "    public void testEquals_classloader_equal() throws Exception {\n        ClassLoader cl = ColorEnum.class.getClassLoader();\n        if (cl instanceof URLClassLoader) {\n            URLClassLoader urlCL = (URLClassLoader) cl;\n            URLClassLoader urlCL1 = new URLClassLoader(urlCL.getURLs(), null);\n            URLClassLoader urlCL2 = new URLClassLoader(urlCL.getURLs(), null);\n            Class otherEnumClass1 = urlCL1.loadClass(\"org.apache.commons.lang.enums.ColorEnum\");\n            Class otherEnumClass2 = urlCL2.loadClass(\"org.apache.commons.lang.enums.ColorEnum\");\n            Object blue1 = otherEnumClass1.getDeclaredField(\"BLUE\").get(null);\n            Object blue2 = otherEnumClass2.getDeclaredField(\"BLUE\").get(null);\n            assertEquals(true, blue1.equals(blue2));\n        }\n    }",
        "begin_line": 94,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 58)",
            "(line 96,col 9)-(line 105,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumEqualsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumEqualsTest.java",
        "signature": "org.apache.commons.lang.enums.EnumEqualsTest.testEquals_classloader_different()",
        "snippet": "    public void testEquals_classloader_different() throws Exception {\n        ClassLoader cl = ColorEnum.class.getClassLoader();\n        if (cl instanceof URLClassLoader) {\n            URLClassLoader urlCL = (URLClassLoader) cl;\n            URLClassLoader urlCL1 = new URLClassLoader(urlCL.getURLs(), null);\n            URLClassLoader urlCL2 = new URLClassLoader(urlCL.getURLs(), null);\n            Class otherEnumClass1 = urlCL1.loadClass(\"org.apache.commons.lang.enums.ColorEnum\");\n            Class otherEnumClass2 = urlCL2.loadClass(\"org.apache.commons.lang.enums.ColorEnum\");\n            Object blue1 = otherEnumClass1.getDeclaredField(\"BLUE\").get(null);\n            Object blue2 = otherEnumClass2.getDeclaredField(\"RED\").get(null);\n            assertEquals(false, blue1.equals(blue2));\n        }\n    }",
        "begin_line": 108,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 58)",
            "(line 110,col 9)-(line 119,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumEqualsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumEqualsTest.java",
        "signature": "org.apache.commons.lang.enums.EnumEqualsTest.testCompareTo()",
        "snippet": "    public void testCompareTo() {\n        try {\n            CarColorEnum.RED.compareTo(TrafficlightColorEnum.RED);\n            fail();\n        } catch (ClassCastException ex) {}\n        try {\n            CarColorEnum.YELLOW.compareTo(TrafficlightColorEnum.YELLOW);\n            fail();\n        } catch (ClassCastException ex) {}\n        try {\n            TrafficlightColorEnum.RED.compareTo(new TotallyUnrelatedClass(\"red\"));\n            fail();\n        } catch (ClassCastException ex) {}\n        try {\n            CarColorEnum.RED.compareTo(new TotallyUnrelatedClass(\"red\"));\n            fail();\n        } catch (ClassCastException ex) {}\n        try {\n            TrafficlightColorEnum.RED.compareTo(new TotallyUnrelatedClass(\"some\"));\n            fail();\n        } catch (ClassCastException ex) {}\n        try {\n            CarColorEnum.RED.compareTo(new TotallyUnrelatedClass(\"some\"));\n            fail();\n        } catch (ClassCastException ex) {}\n    }",
        "begin_line": 123,
        "end_line": 148,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 124,col 9)-(line 127,col 42)",
            "(line 128,col 9)-(line 131,col 42)",
            "(line 132,col 9)-(line 135,col 42)",
            "(line 136,col 9)-(line 139,col 42)",
            "(line 140,col 9)-(line 143,col 42)",
            "(line 144,col 9)-(line 147,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken2OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken2OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken2OperationEnum.PlusOperation.PlusOperation()",
        "snippet": "        private PlusOperation() {\n            super(\"Plus\");\n        }",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 45,col 13)-(line 45,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken2OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken2OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken2OperationEnum.PlusOperation.eval(int, int)",
        "snippet": "        public int eval(int a, int b) {\n            return (a + b);\n        }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 13)-(line 48,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken2OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken2OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken2OperationEnum.MinusOperation.MinusOperation()",
        "snippet": "        private MinusOperation() {\n            super(\"Minus\");\n        }",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 54,col 13)-(line 54,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken2OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken2OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken2OperationEnum.MinusOperation.eval(int, int)",
        "snippet": "        public int eval(int a, int b) {\n            return (a - b);\n        }",
        "begin_line": 56,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 57,col 13)-(line 57,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken2OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken2OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken2OperationEnum.Broken2OperationEnum(java.lang.String)",
        "snippet": "    private Broken2OperationEnum(String name) {\n        super(name);\n    }",
        "begin_line": 61,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken2OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken2OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken2OperationEnum.getEnumClass()",
        "snippet": "    public final Class getEnumClass() {\n        return ColorEnum.class;\n    }",
        "begin_line": 65,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken2OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken2OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken2OperationEnum.eval(int, int)",
        "snippet": "    public abstract int eval(int a, int b);",
        "begin_line": 69,
        "end_line": 69,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken2OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken2OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken2OperationEnum.getEnum(java.lang.String)",
        "snippet": "    public static Broken2OperationEnum getEnum(String name) {\n        return (Broken2OperationEnum) getEnum(Broken2OperationEnum.class, name);\n    }",
        "begin_line": 71,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken2OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken2OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken2OperationEnum.getEnumMap()",
        "snippet": "    public static Map getEnumMap() {\n        return getEnumMap(Broken2OperationEnum.class);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken2OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken2OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken2OperationEnum.getEnumList()",
        "snippet": "    public static List getEnumList() {\n        return getEnumList(Broken2OperationEnum.class);\n    }",
        "begin_line": 79,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken2OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken2OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken2OperationEnum.iterator()",
        "snippet": "    public static Iterator iterator() {\n        return iterator(Broken2OperationEnum.class);\n    }",
        "begin_line": 83,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Extended2Enum",
        "child_classes": [
            "org.apache.commons.lang.enum.Extended3Enum",
            "org.apache.commons.lang.enums.Extended3Enum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Extended2Enum.java",
        "signature": "org.apache.commons.lang.enums.Extended2Enum.Extended2Enum(java.lang.String)",
        "snippet": "    protected Extended2Enum(String color) {\n        super(color);\n    }",
        "begin_line": 34,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Extended2Enum",
        "child_classes": [
            "org.apache.commons.lang.enum.Extended3Enum",
            "org.apache.commons.lang.enums.Extended3Enum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Extended2Enum.java",
        "signature": "org.apache.commons.lang.enums.Extended2Enum.getEnum(java.lang.String)",
        "snippet": "    public static Extended1Enum getEnum(String name) {\n        return (Extended1Enum) getEnum(Extended2Enum.class, name);\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Extended2Enum",
        "child_classes": [
            "org.apache.commons.lang.enum.Extended3Enum",
            "org.apache.commons.lang.enums.Extended3Enum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Extended2Enum.java",
        "signature": "org.apache.commons.lang.enums.Extended2Enum.getEnumMap()",
        "snippet": "    public static Map getEnumMap() {\n        return getEnumMap(Extended2Enum.class);\n    }",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Extended2Enum",
        "child_classes": [
            "org.apache.commons.lang.enum.Extended3Enum",
            "org.apache.commons.lang.enums.Extended3Enum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Extended2Enum.java",
        "signature": "org.apache.commons.lang.enums.Extended2Enum.getEnumList()",
        "snippet": "    public static List getEnumList() {\n        return getEnumList(Extended2Enum.class);\n    }",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Extended2Enum",
        "child_classes": [
            "org.apache.commons.lang.enum.Extended3Enum",
            "org.apache.commons.lang.enums.Extended3Enum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Extended2Enum.java",
        "signature": "org.apache.commons.lang.enums.Extended2Enum.iterator()",
        "snippet": "    public static Iterator iterator() {\n        return iterator(Extended2Enum.class);\n    }",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Extended3Enum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/Extended3Enum.java",
        "signature": "org.apache.commons.lang.enums.Extended3Enum.Extended3Enum(java.lang.String)",
        "snippet": "    protected Extended3Enum(String name) {\n        super(name);\n    }",
        "begin_line": 34,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Extended3Enum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/Extended3Enum.java",
        "signature": "org.apache.commons.lang.enums.Extended3Enum.getEnum(java.lang.String)",
        "snippet": "    public static Extended1Enum getEnum(String name) {\n        return (Extended1Enum) Enum.getEnum(Extended3Enum.class, name);\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Extended3Enum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/Extended3Enum.java",
        "signature": "org.apache.commons.lang.enums.Extended3Enum.getEnumMap()",
        "snippet": "    public static Map getEnumMap() {\n        return Enum.getEnumMap(Extended3Enum.class);\n    }",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Extended3Enum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/Extended3Enum.java",
        "signature": "org.apache.commons.lang.enums.Extended3Enum.getEnumList()",
        "snippet": "    public static List getEnumList() {\n        return Enum.getEnumList(Extended3Enum.class);\n    }",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Extended3Enum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/Extended3Enum.java",
        "signature": "org.apache.commons.lang.enums.Extended3Enum.iterator()",
        "snippet": "    public static Iterator iterator() {\n        return Enum.iterator(Extended3Enum.class);\n    }",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken1Enum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken1Enum.java",
        "signature": "org.apache.commons.lang.enums.Broken1Enum.Broken1Enum(java.lang.String)",
        "snippet": "    private Broken1Enum(String color) {\n        super(color);\n    }",
        "begin_line": 34,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken1Enum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken1Enum.java",
        "signature": "org.apache.commons.lang.enums.Broken1Enum.getEnum(java.lang.String)",
        "snippet": "    public static Broken1Enum getEnum(String color) {\n        return (Broken1Enum) getEnum(Broken1Enum.class, color);\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken1Enum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken1Enum.java",
        "signature": "org.apache.commons.lang.enums.Broken1Enum.getEnumMap()",
        "snippet": "    public static Map getEnumMap() {\n        return getEnumMap(Broken1Enum.class);\n    }",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken1Enum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken1Enum.java",
        "signature": "org.apache.commons.lang.enums.Broken1Enum.getEnumList()",
        "snippet": "    public static List getEnumList() {\n        return getEnumList(Broken1Enum.class);\n    }",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken1Enum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken1Enum.java",
        "signature": "org.apache.commons.lang.enums.Broken1Enum.iterator()",
        "snippet": "    public static Iterator iterator() {\n        return iterator(Broken1Enum.class);\n    }",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Extended1Enum",
        "child_classes": [
            "org.apache.commons.lang.enums.Extended2Enum",
            "org.apache.commons.lang.enum.Extended3Enum",
            "org.apache.commons.lang.enum.Extended2Enum",
            "org.apache.commons.lang.enums.Extended3Enum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Extended1Enum.java",
        "signature": "org.apache.commons.lang.enums.Extended1Enum.Extended1Enum(java.lang.String)",
        "snippet": "    protected Extended1Enum(String name) {\n        super(name);\n    }",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Extended1Enum",
        "child_classes": [
            "org.apache.commons.lang.enums.Extended2Enum",
            "org.apache.commons.lang.enum.Extended3Enum",
            "org.apache.commons.lang.enum.Extended2Enum",
            "org.apache.commons.lang.enums.Extended3Enum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Extended1Enum.java",
        "signature": "org.apache.commons.lang.enums.Extended1Enum.getEnum(java.lang.String)",
        "snippet": "    public static Extended1Enum getEnum(String name) {\n        return (Extended1Enum) getEnum(Extended1Enum.class, name);\n    }",
        "begin_line": 39,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Extended1Enum",
        "child_classes": [
            "org.apache.commons.lang.enums.Extended2Enum",
            "org.apache.commons.lang.enum.Extended3Enum",
            "org.apache.commons.lang.enum.Extended2Enum",
            "org.apache.commons.lang.enums.Extended3Enum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Extended1Enum.java",
        "signature": "org.apache.commons.lang.enums.Extended1Enum.getEnumMap()",
        "snippet": "    public static Map getEnumMap() {\n        return getEnumMap(Extended1Enum.class);\n    }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Extended1Enum",
        "child_classes": [
            "org.apache.commons.lang.enums.Extended2Enum",
            "org.apache.commons.lang.enum.Extended3Enum",
            "org.apache.commons.lang.enum.Extended2Enum",
            "org.apache.commons.lang.enums.Extended3Enum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Extended1Enum.java",
        "signature": "org.apache.commons.lang.enums.Extended1Enum.getEnumList()",
        "snippet": "    public static List getEnumList() {\n        return getEnumList(Extended1Enum.class);\n    }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Extended1Enum",
        "child_classes": [
            "org.apache.commons.lang.enums.Extended2Enum",
            "org.apache.commons.lang.enum.Extended3Enum",
            "org.apache.commons.lang.enum.Extended2Enum",
            "org.apache.commons.lang.enums.Extended3Enum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Extended1Enum.java",
        "signature": "org.apache.commons.lang.enums.Extended1Enum.iterator()",
        "snippet": "    public static Iterator iterator() {\n        return iterator(Extended1Enum.class);\n    }",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.ValuedEnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/ValuedEnumTest.java",
        "signature": "org.apache.commons.lang.enums.ValuedEnumTest.ValuedEnumTest(java.lang.String)",
        "snippet": "    public ValuedEnumTest(String name) {\n        super(name);\n    }",
        "begin_line": 39,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.ValuedEnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/ValuedEnumTest.java",
        "signature": "org.apache.commons.lang.enums.ValuedEnumTest.setUp()",
        "snippet": "    public void setUp() {\n    }",
        "begin_line": 43,
        "end_line": 44,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.enums.ValuedEnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/ValuedEnumTest.java",
        "signature": "org.apache.commons.lang.enums.ValuedEnumTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(ValuedEnumTest.class);\n        suite.setName(\"ValuedEnum Tests\");\n        return suite;\n    }",
        "begin_line": 46,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 62)",
            "(line 48,col 9)-(line 48,col 42)",
            "(line 49,col 9)-(line 49,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.ValuedEnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/ValuedEnumTest.java",
        "signature": "org.apache.commons.lang.enums.ValuedEnumTest.testName()",
        "snippet": "    public void testName() {\n        assertEquals(\"Red\", ValuedColorEnum.RED.getName());\n        assertEquals(\"Green\", ValuedColorEnum.GREEN.getName());\n        assertEquals(\"Blue\", ValuedColorEnum.BLUE.getName());\n    }",
        "begin_line": 52,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 59)",
            "(line 54,col 9)-(line 54,col 63)",
            "(line 55,col 9)-(line 55,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.ValuedEnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/ValuedEnumTest.java",
        "signature": "org.apache.commons.lang.enums.ValuedEnumTest.testValue()",
        "snippet": "    public void testValue() {\n        assertEquals(1, ValuedColorEnum.RED.getValue());\n        assertEquals(2, ValuedColorEnum.GREEN.getValue());\n        assertEquals(3, ValuedColorEnum.BLUE.getValue());\n    }",
        "begin_line": 58,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 56)",
            "(line 60,col 9)-(line 60,col 58)",
            "(line 61,col 9)-(line 61,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.ValuedEnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/ValuedEnumTest.java",
        "signature": "org.apache.commons.lang.enums.ValuedEnumTest.testCompareTo()",
        "snippet": "    public void testCompareTo() {\n        assertTrue(ValuedColorEnum.BLUE.compareTo(ValuedColorEnum.BLUE) == 0);\n        assertTrue(ValuedColorEnum.RED.compareTo(ValuedColorEnum.BLUE) < 0);\n        assertTrue(ValuedColorEnum.BLUE.compareTo(ValuedColorEnum.RED) > 0);\n    }",
        "begin_line": 64,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 78)",
            "(line 66,col 9)-(line 66,col 76)",
            "(line 67,col 9)-(line 67,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.ValuedEnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/ValuedEnumTest.java",
        "signature": "org.apache.commons.lang.enums.ValuedEnumTest.testCompareTo_classloader_equal()",
        "snippet": "    public void testCompareTo_classloader_equal() throws Exception {\n        ClassLoader cl = ValuedColorEnum.class.getClassLoader();\n        if (cl instanceof URLClassLoader) {\n            URLClassLoader urlCL = (URLClassLoader) cl;\n            URLClassLoader urlCL1 = new URLClassLoader(urlCL.getURLs(), null);\n            URLClassLoader urlCL2 = new URLClassLoader(urlCL.getURLs(), null);\n            Class otherEnumClass1 = urlCL1.loadClass(\"org.apache.commons.lang.enums.ValuedColorEnum\");\n            Class otherEnumClass2 = urlCL2.loadClass(\"org.apache.commons.lang.enums.ValuedColorEnum\");\n            Object blue1 = otherEnumClass1.getDeclaredField(\"BLUE\").get(null);\n            Object blue2 = otherEnumClass2.getDeclaredField(\"BLUE\").get(null);\n            assertTrue(((Comparable) blue1).compareTo(blue2) == 0);\n        }\n    }",
        "begin_line": 70,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 64)",
            "(line 72,col 9)-(line 81,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.ValuedEnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/ValuedEnumTest.java",
        "signature": "org.apache.commons.lang.enums.ValuedEnumTest.testCompareTo_classloader_different()",
        "snippet": "    public void testCompareTo_classloader_different() throws Exception {\n        ClassLoader cl = ValuedColorEnum.class.getClassLoader();\n        if (cl instanceof URLClassLoader) {\n            URLClassLoader urlCL = (URLClassLoader) cl;\n            URLClassLoader urlCL1 = new URLClassLoader(urlCL.getURLs(), null);\n            URLClassLoader urlCL2 = new URLClassLoader(urlCL.getURLs(), null);\n            Class otherEnumClass1 = urlCL1.loadClass(\"org.apache.commons.lang.enums.ValuedColorEnum\");\n            Class otherEnumClass2 = urlCL2.loadClass(\"org.apache.commons.lang.enums.ValuedColorEnum\");\n            Object blue1 = otherEnumClass1.getDeclaredField(\"BLUE\").get(null);\n            Object blue2 = otherEnumClass2.getDeclaredField(\"RED\").get(null);\n            assertTrue(((Comparable) blue1).compareTo(blue2) != 0);\n        }\n    }",
        "begin_line": 84,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 64)",
            "(line 86,col 9)-(line 95,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.ValuedEnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/ValuedEnumTest.java",
        "signature": "org.apache.commons.lang.enums.ValuedEnumTest.testCompareTo_nonEnumType()",
        "snippet": "    public void testCompareTo_nonEnumType() {\n        try {\n            ValuedColorEnum.BLUE.compareTo(new TotallyUnrelatedClass(ValuedColorEnum.BLUE.getValue()));\n            fail();\n        } catch (ClassCastException ex) {\n            // expected\n        }\n    }",
        "begin_line": 98,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 99,col 9)-(line 104,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.ValuedEnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/ValuedEnumTest.java",
        "signature": "org.apache.commons.lang.enums.ValuedEnumTest.testCompareTo_otherEnumType()",
        "snippet": "    public void testCompareTo_otherEnumType() {\n        try {\n            ValuedColorEnum.BLUE.compareTo(ValuedLanguageEnum.ENGLISH);\n            fail();\n        } catch (ClassCastException ex) {\n            // expected\n        }\n    }",
        "begin_line": 107,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 108,col 9)-(line 113,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.ValuedEnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/ValuedEnumTest.java",
        "signature": "org.apache.commons.lang.enums.ValuedEnumTest.testCompareTo_otherType()",
        "snippet": "    public void testCompareTo_otherType() {\n        try {\n            ValuedColorEnum.BLUE.compareTo(\"Blue\");\n            fail();\n        } catch (ClassCastException ex) {\n            // expected\n        }\n    }",
        "begin_line": 116,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 117,col 9)-(line 122,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.ValuedEnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/ValuedEnumTest.java",
        "signature": "org.apache.commons.lang.enums.ValuedEnumTest.testCompareTo_null()",
        "snippet": "    public void testCompareTo_null() {\n        try {\n            ValuedColorEnum.BLUE.compareTo(null);\n            fail();\n        } catch (NullPointerException ex) {\n            // expected\n        }\n    }",
        "begin_line": 125,
        "end_line": 132,
        "comment": "",
        "child_ranges": [
            "(line 126,col 9)-(line 131,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.ValuedEnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/ValuedEnumTest.java",
        "signature": "org.apache.commons.lang.enums.ValuedEnumTest.testEquals()",
        "snippet": "    public void testEquals() {\n        assertSame(ValuedColorEnum.RED, ValuedColorEnum.RED);\n        assertSame(ValuedColorEnum.getEnum(\"Red\"), ValuedColorEnum.RED);\n    }",
        "begin_line": 134,
        "end_line": 137,
        "comment": "",
        "child_ranges": [
            "(line 135,col 9)-(line 135,col 61)",
            "(line 136,col 9)-(line 136,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.ValuedEnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/ValuedEnumTest.java",
        "signature": "org.apache.commons.lang.enums.ValuedEnumTest.testEquals_classloader_equal()",
        "snippet": "    public void testEquals_classloader_equal() throws Exception {\n        ClassLoader cl = ValuedColorEnum.class.getClassLoader();\n        if (cl instanceof URLClassLoader) {\n            URLClassLoader urlCL = (URLClassLoader) cl;\n            URLClassLoader urlCL1 = new URLClassLoader(urlCL.getURLs(), null);\n            URLClassLoader urlCL2 = new URLClassLoader(urlCL.getURLs(), null);\n            Class otherEnumClass1 = urlCL1.loadClass(\"org.apache.commons.lang.enums.ValuedColorEnum\");\n            Class otherEnumClass2 = urlCL2.loadClass(\"org.apache.commons.lang.enums.ValuedColorEnum\");\n            Object blue1 = otherEnumClass1.getDeclaredField(\"BLUE\").get(null);\n            Object blue2 = otherEnumClass2.getDeclaredField(\"BLUE\").get(null);\n            assertEquals(true, blue1.equals(blue2));\n        }\n    }",
        "begin_line": 139,
        "end_line": 151,
        "comment": "",
        "child_ranges": [
            "(line 140,col 9)-(line 140,col 64)",
            "(line 141,col 9)-(line 150,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.ValuedEnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/ValuedEnumTest.java",
        "signature": "org.apache.commons.lang.enums.ValuedEnumTest.testEquals_classloader_different()",
        "snippet": "    public void testEquals_classloader_different() throws Exception {\n        ClassLoader cl = ValuedColorEnum.class.getClassLoader();\n        if (cl instanceof URLClassLoader) {\n            URLClassLoader urlCL = (URLClassLoader) cl;\n            URLClassLoader urlCL1 = new URLClassLoader(urlCL.getURLs(), null);\n            URLClassLoader urlCL2 = new URLClassLoader(urlCL.getURLs(), null);\n            Class otherEnumClass1 = urlCL1.loadClass(\"org.apache.commons.lang.enums.ValuedColorEnum\");\n            Class otherEnumClass2 = urlCL2.loadClass(\"org.apache.commons.lang.enums.ValuedColorEnum\");\n            Object blue1 = otherEnumClass1.getDeclaredField(\"BLUE\").get(null);\n            Object blue2 = otherEnumClass2.getDeclaredField(\"RED\").get(null);\n            assertEquals(false, blue1.equals(blue2));\n        }\n    }",
        "begin_line": 153,
        "end_line": 165,
        "comment": "",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 64)",
            "(line 155,col 9)-(line 164,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.ValuedEnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/ValuedEnumTest.java",
        "signature": "org.apache.commons.lang.enums.ValuedEnumTest.testToString()",
        "snippet": "    public void testToString() {\n        String toString = ValuedColorEnum.RED.toString();\n        assertEquals(\"ValuedColorEnum[Red=1]\", toString);\n        assertSame(toString, ValuedColorEnum.RED.toString());\n    }",
        "begin_line": 167,
        "end_line": 171,
        "comment": "",
        "child_ranges": [
            "(line 168,col 9)-(line 168,col 57)",
            "(line 169,col 9)-(line 169,col 57)",
            "(line 170,col 9)-(line 170,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.ValuedEnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/ValuedEnumTest.java",
        "signature": "org.apache.commons.lang.enums.ValuedEnumTest.testIterator()",
        "snippet": "    public void testIterator() {\n        Iterator it = ValuedColorEnum.iterator();\n        assertSame(ValuedColorEnum.RED, it.next());\n        assertSame(ValuedColorEnum.GREEN, it.next());\n        assertSame(ValuedColorEnum.BLUE, it.next());\n    }",
        "begin_line": 173,
        "end_line": 178,
        "comment": "",
        "child_ranges": [
            "(line 174,col 9)-(line 174,col 49)",
            "(line 175,col 9)-(line 175,col 51)",
            "(line 176,col 9)-(line 176,col 53)",
            "(line 177,col 9)-(line 177,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.ValuedEnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/ValuedEnumTest.java",
        "signature": "org.apache.commons.lang.enums.ValuedEnumTest.testList()",
        "snippet": "    public void testList() {\n        List list = ValuedColorEnum.getEnumList();\n        \n        assertNotNull(list);\n        \n        assertEquals( list.size(),\n                     ValuedColorEnum.getEnumMap().keySet().size());\n        \n        Iterator it = list.iterator();\n        assertSame(ValuedColorEnum.RED, it.next());\n        assertSame(ValuedColorEnum.GREEN, it.next());\n        assertSame(ValuedColorEnum.BLUE, it.next());\n    }",
        "begin_line": 180,
        "end_line": 192,
        "comment": "",
        "child_ranges": [
            "(line 181,col 9)-(line 181,col 50)",
            "(line 183,col 9)-(line 183,col 28)",
            "(line 185,col 9)-(line 186,col 67)",
            "(line 188,col 9)-(line 188,col 38)",
            "(line 189,col 9)-(line 189,col 51)",
            "(line 190,col 9)-(line 190,col 53)",
            "(line 191,col 9)-(line 191,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.ValuedEnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/ValuedEnumTest.java",
        "signature": "org.apache.commons.lang.enums.ValuedEnumTest.testMap()",
        "snippet": "    public void testMap() {\n        Map map = ValuedColorEnum.getEnumMap();\n        \n        assertNotNull(map);\n        \n        assertEquals( map.keySet().size(),\n                     ValuedColorEnum.getEnumList().size());\n                     \n        assertTrue(map.containsValue(ValuedColorEnum.RED));\n        assertTrue(map.containsValue(ValuedColorEnum.GREEN));\n        assertTrue(map.containsValue(ValuedColorEnum.BLUE));\n        assertSame(ValuedColorEnum.RED, map.get(\"Red\"));\n        assertSame(ValuedColorEnum.GREEN, map.get(\"Green\"));\n        assertSame(ValuedColorEnum.BLUE, map.get(\"Blue\"));\n    }",
        "begin_line": 194,
        "end_line": 208,
        "comment": "",
        "child_ranges": [
            "(line 195,col 9)-(line 195,col 47)",
            "(line 197,col 9)-(line 197,col 27)",
            "(line 199,col 9)-(line 200,col 59)",
            "(line 202,col 9)-(line 202,col 59)",
            "(line 203,col 9)-(line 203,col 61)",
            "(line 204,col 9)-(line 204,col 60)",
            "(line 205,col 9)-(line 205,col 56)",
            "(line 206,col 9)-(line 206,col 60)",
            "(line 207,col 9)-(line 207,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.ValuedEnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/ValuedEnumTest.java",
        "signature": "org.apache.commons.lang.enums.ValuedEnumTest.testGet()",
        "snippet": "    public void testGet() {\n        assertSame(ValuedColorEnum.RED, ValuedColorEnum.getEnum(\"Red\"));\n        assertSame(ValuedColorEnum.GREEN, ValuedColorEnum.getEnum(\"Green\"));\n        assertSame(ValuedColorEnum.BLUE, ValuedColorEnum.getEnum(\"Blue\"));\n        assertSame(null, ValuedColorEnum.getEnum(\"Pink\"));\n    }",
        "begin_line": 210,
        "end_line": 215,
        "comment": "",
        "child_ranges": [
            "(line 211,col 9)-(line 211,col 72)",
            "(line 212,col 9)-(line 212,col 76)",
            "(line 213,col 9)-(line 213,col 74)",
            "(line 214,col 9)-(line 214,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.ValuedEnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/ValuedEnumTest.java",
        "signature": "org.apache.commons.lang.enums.ValuedEnumTest.testGetValue()",
        "snippet": "    public void testGetValue() {\n        assertSame(ValuedColorEnum.RED, ValuedColorEnum.getEnum(1));\n        assertSame(ValuedColorEnum.GREEN, ValuedColorEnum.getEnum(2));\n        assertSame(ValuedColorEnum.BLUE, ValuedColorEnum.getEnum(3));\n        assertSame(null, ValuedColorEnum.getEnum(4));\n    }",
        "begin_line": 217,
        "end_line": 222,
        "comment": "",
        "child_ranges": [
            "(line 218,col 9)-(line 218,col 68)",
            "(line 219,col 9)-(line 219,col 70)",
            "(line 220,col 9)-(line 220,col 69)",
            "(line 221,col 9)-(line 221,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.ValuedEnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/ValuedEnumTest.java",
        "signature": "org.apache.commons.lang.enums.ValuedEnumTest.testSerialization()",
        "snippet": "    public void testSerialization() {\n        assertSame(ValuedColorEnum.RED, SerializationUtils.clone(ValuedColorEnum.RED));\n        assertSame(ValuedColorEnum.GREEN, SerializationUtils.clone(ValuedColorEnum.GREEN));\n        assertSame(ValuedColorEnum.BLUE, SerializationUtils.clone(ValuedColorEnum.BLUE));\n    }",
        "begin_line": 224,
        "end_line": 228,
        "comment": "",
        "child_ranges": [
            "(line 225,col 9)-(line 225,col 87)",
            "(line 226,col 9)-(line 226,col 91)",
            "(line 227,col 9)-(line 227,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.ValuedEnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/ValuedEnumTest.java",
        "signature": "org.apache.commons.lang.enums.ValuedEnumTest.TotallyUnrelatedClass.TotallyUnrelatedClass(int)",
        "snippet": "        public TotallyUnrelatedClass(final int value) {\n            this.value = value;\n        }",
        "begin_line": 234,
        "end_line": 236,
        "comment": "",
        "child_ranges": [
            "(line 235,col 13)-(line 235,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.ValuedEnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/ValuedEnumTest.java",
        "signature": "org.apache.commons.lang.enums.ValuedEnumTest.TotallyUnrelatedClass.getValue()",
        "snippet": "        public int getValue() {\n            return value;\n        }",
        "begin_line": 238,
        "end_line": 240,
        "comment": "",
        "child_ranges": [
            "(line 239,col 13)-(line 239,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumUtilsTest.java",
        "signature": "org.apache.commons.lang.enums.EnumUtilsTest.EnumUtilsTest(java.lang.String)",
        "snippet": "    public EnumUtilsTest(String name) {\n        super(name);\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumUtilsTest.java",
        "signature": "org.apache.commons.lang.enums.EnumUtilsTest.setUp()",
        "snippet": "    public void setUp() {\n    }",
        "begin_line": 42,
        "end_line": 43,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumUtilsTest.java",
        "signature": "org.apache.commons.lang.enums.EnumUtilsTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(EnumUtilsTest.class);\n        suite.setName(\"EnumUtils Tests\");\n        return suite;\n    }",
        "begin_line": 45,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 61)",
            "(line 47,col 9)-(line 47,col 41)",
            "(line 48,col 9)-(line 48,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumUtilsTest.java",
        "signature": "org.apache.commons.lang.enums.EnumUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new EnumUtils());\n        Constructor[] cons = EnumUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(EnumUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(EnumUtils.class.getModifiers()));\n    }",
        "begin_line": 52,
        "end_line": 59,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 39)",
            "(line 54,col 9)-(line 54,col 71)",
            "(line 55,col 9)-(line 55,col 37)",
            "(line 56,col 9)-(line 56,col 70)",
            "(line 57,col 9)-(line 57,col 78)",
            "(line 58,col 9)-(line 58,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumUtilsTest.java",
        "signature": "org.apache.commons.lang.enums.EnumUtilsTest.testIterator()",
        "snippet": "    public void testIterator() {\n        Iterator it = EnumUtils.iterator(ColorEnum.class);\n        assertSame(ColorEnum.RED, it.next());\n        assertSame(ColorEnum.GREEN, it.next());\n        assertSame(ColorEnum.BLUE, it.next());\n        it = EnumUtils.iterator(DummyEnum.class);\n        assertEquals(false, it.hasNext());\n    }",
        "begin_line": 62,
        "end_line": 69,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 58)",
            "(line 64,col 9)-(line 64,col 45)",
            "(line 65,col 9)-(line 65,col 47)",
            "(line 66,col 9)-(line 66,col 46)",
            "(line 67,col 9)-(line 67,col 49)",
            "(line 68,col 9)-(line 68,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumUtilsTest.java",
        "signature": "org.apache.commons.lang.enums.EnumUtilsTest.testIteratorEx()",
        "snippet": "    public void testIteratorEx() {\n        try {\n            EnumUtils.iterator(null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            EnumUtils.iterator(Object.class);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 71,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 75,col 48)",
            "(line 76,col 9)-(line 79,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumUtilsTest.java",
        "signature": "org.apache.commons.lang.enums.EnumUtilsTest.testList()",
        "snippet": "    public void testList() {\n        List list = EnumUtils.getEnumList(ColorEnum.class);\n        Iterator it = list.iterator();\n        assertSame(ColorEnum.RED, it.next());\n        assertSame(ColorEnum.GREEN, it.next());\n        assertSame(ColorEnum.BLUE, it.next());\n        list = EnumUtils.getEnumList(DummyEnum.class);\n        assertEquals(0, list.size());\n    }",
        "begin_line": 83,
        "end_line": 91,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 59)",
            "(line 85,col 9)-(line 85,col 38)",
            "(line 86,col 9)-(line 86,col 45)",
            "(line 87,col 9)-(line 87,col 47)",
            "(line 88,col 9)-(line 88,col 46)",
            "(line 89,col 9)-(line 89,col 54)",
            "(line 90,col 9)-(line 90,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumUtilsTest.java",
        "signature": "org.apache.commons.lang.enums.EnumUtilsTest.testListEx()",
        "snippet": "    public void testListEx() {\n        try {\n            EnumUtils.getEnumList(null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            EnumUtils.getEnumList(Object.class);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 93,
        "end_line": 102,
        "comment": "",
        "child_ranges": [
            "(line 94,col 9)-(line 97,col 48)",
            "(line 98,col 9)-(line 101,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumUtilsTest.java",
        "signature": "org.apache.commons.lang.enums.EnumUtilsTest.testMap()",
        "snippet": "    public void testMap() {\n        Map map = EnumUtils.getEnumMap(ColorEnum.class);\n        assertTrue(map.containsValue(ColorEnum.RED));\n        assertTrue(map.containsValue(ColorEnum.GREEN));\n        assertTrue(map.containsValue(ColorEnum.BLUE));\n        assertSame(ColorEnum.RED, map.get(\"Red\"));\n        assertSame(ColorEnum.GREEN, map.get(\"Green\"));\n        assertSame(ColorEnum.BLUE, map.get(\"Blue\"));\n        map = EnumUtils.getEnumMap(DummyEnum.class);\n        assertEquals(0, map.size());\n    }",
        "begin_line": 105,
        "end_line": 115,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 56)",
            "(line 107,col 9)-(line 107,col 53)",
            "(line 108,col 9)-(line 108,col 55)",
            "(line 109,col 9)-(line 109,col 54)",
            "(line 110,col 9)-(line 110,col 50)",
            "(line 111,col 9)-(line 111,col 54)",
            "(line 112,col 9)-(line 112,col 52)",
            "(line 113,col 9)-(line 113,col 52)",
            "(line 114,col 9)-(line 114,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumUtilsTest.java",
        "signature": "org.apache.commons.lang.enums.EnumUtilsTest.testMapEx()",
        "snippet": "    public void testMapEx() {\n        try {\n            EnumUtils.getEnumMap(null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            EnumUtils.getEnumMap(Object.class);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 117,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 118,col 9)-(line 121,col 48)",
            "(line 122,col 9)-(line 125,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumUtilsTest.java",
        "signature": "org.apache.commons.lang.enums.EnumUtilsTest.testGet()",
        "snippet": "    public void testGet() {\n        assertSame(ColorEnum.RED, EnumUtils.getEnum(ColorEnum.class, \"Red\"));\n        assertSame(ColorEnum.GREEN, EnumUtils.getEnum(ColorEnum.class, \"Green\"));\n        assertSame(ColorEnum.BLUE, EnumUtils.getEnum(ColorEnum.class, \"Blue\"));\n        assertSame(null, EnumUtils.getEnum(ColorEnum.class, \"Pink\"));\n        assertSame(null, EnumUtils.getEnum(DummyEnum.class, \"Pink\"));\n    }",
        "begin_line": 129,
        "end_line": 135,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 130,col 9)-(line 130,col 77)",
            "(line 131,col 9)-(line 131,col 81)",
            "(line 132,col 9)-(line 132,col 79)",
            "(line 133,col 9)-(line 133,col 69)",
            "(line 134,col 9)-(line 134,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumUtilsTest.java",
        "signature": "org.apache.commons.lang.enums.EnumUtilsTest.testGetEx()",
        "snippet": "    public void testGetEx() {\n        try {\n            EnumUtils.getEnum(null, \"\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            EnumUtils.getEnum(Object.class, \"Red\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 137,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 138,col 9)-(line 141,col 48)",
            "(line 142,col 9)-(line 145,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumUtilsTest.java",
        "signature": "org.apache.commons.lang.enums.EnumUtilsTest.testGetValue()",
        "snippet": "    public void testGetValue() {\n        assertSame(ValuedColorEnum.RED, EnumUtils.getEnum(ValuedColorEnum.class, 1));\n        assertSame(ValuedColorEnum.GREEN, EnumUtils.getEnum(ValuedColorEnum.class, 2));\n        assertSame(ValuedColorEnum.BLUE, EnumUtils.getEnum(ValuedColorEnum.class, 3));\n        assertSame(null, EnumUtils.getEnum(ValuedColorEnum.class, 4));\n        assertSame(null, EnumUtils.getEnum(DummyEnum.class, 5));\n    }",
        "begin_line": 149,
        "end_line": 155,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 150,col 9)-(line 150,col 85)",
            "(line 151,col 9)-(line 151,col 87)",
            "(line 152,col 9)-(line 152,col 86)",
            "(line 153,col 9)-(line 153,col 70)",
            "(line 154,col 9)-(line 154,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumUtilsTest.java",
        "signature": "org.apache.commons.lang.enums.EnumUtilsTest.testGetValueEx()",
        "snippet": "    public void testGetValueEx() {\n        try {\n            EnumUtils.getEnum(null, 0);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            EnumUtils.getEnum(Object.class, 2);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 157,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 158,col 9)-(line 161,col 48)",
            "(line 162,col 9)-(line 165,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Nest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/Nest.java",
        "signature": "org.apache.commons.lang.enums.Nest.Nest()",
        "snippet": "    public Nest() {\n        super();\n    }",
        "begin_line": 34,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 16)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Nest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/Nest.java",
        "signature": "org.apache.commons.lang.enums.Nest.ColorEnum.ColorEnum(java.lang.String)",
        "snippet": "        private ColorEnum(String color) {\n            super(color);\n        }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 13)-(line 44,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Nest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/Nest.java",
        "signature": "org.apache.commons.lang.enums.Nest.ColorEnum.getEnum(java.lang.String)",
        "snippet": "        public static ColorEnum getEnum(String color) {\n            return (ColorEnum) getEnum(ColorEnum.class, color);\n        }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 13)-(line 48,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Nest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/Nest.java",
        "signature": "org.apache.commons.lang.enums.Nest.ColorEnum.getEnumMap()",
        "snippet": "        public static Map getEnumMap() {\n            return getEnumMap(ColorEnum.class);\n        }",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 52,col 13)-(line 52,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Nest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/Nest.java",
        "signature": "org.apache.commons.lang.enums.Nest.ColorEnum.getEnumList()",
        "snippet": "        public static List getEnumList() {\n            return getEnumList(ColorEnum.class);\n        }",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 56,col 13)-(line 56,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Nest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/Nest.java",
        "signature": "org.apache.commons.lang.enums.Nest.ColorEnum.iterator()",
        "snippet": "        public static Iterator iterator() {\n            return iterator(ColorEnum.class);\n        }",
        "begin_line": 59,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 60,col 13)-(line 60,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.DummyEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/DummyEnum.java",
        "signature": "org.apache.commons.lang.enums.DummyEnum.DummyEnum(java.lang.String)",
        "snippet": "    private DummyEnum(String name) {\n        super(name);\n    }",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken5OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken5OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken5OperationEnum.PlusOperation.PlusOperation()",
        "snippet": "        private PlusOperation() {\n            super(\"Plus\");\n        }",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 45,col 13)-(line 45,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken5OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken5OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken5OperationEnum.PlusOperation.eval(int, int)",
        "snippet": "        public int eval(int a, int b) {\n            return (a + b);\n        }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 13)-(line 48,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken5OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken5OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken5OperationEnum.MinusOperation.MinusOperation()",
        "snippet": "        private MinusOperation() {\n            super(\"Minus\");\n        }",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 54,col 13)-(line 54,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken5OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken5OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken5OperationEnum.MinusOperation.eval(int, int)",
        "snippet": "        public int eval(int a, int b) {\n            return (a - b);\n        }",
        "begin_line": 56,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 57,col 13)-(line 57,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken5OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken5OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken5OperationEnum.Broken5OperationEnum(java.lang.String)",
        "snippet": "    private Broken5OperationEnum(String name) {\n        super(name);\n    }",
        "begin_line": 61,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken5OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken5OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken5OperationEnum.getEnumClass()",
        "snippet": "    public final Class getEnumClass() {\n        return String.class;\n    }",
        "begin_line": 65,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken5OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken5OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken5OperationEnum.eval(int, int)",
        "snippet": "    public abstract int eval(int a, int b);",
        "begin_line": 69,
        "end_line": 69,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken5OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken5OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken5OperationEnum.getEnum(java.lang.String)",
        "snippet": "    public static Broken5OperationEnum getEnum(String name) {\n        return (Broken5OperationEnum) getEnum(Broken5OperationEnum.class, name);\n    }",
        "begin_line": 71,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken5OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken5OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken5OperationEnum.getEnumMap()",
        "snippet": "    public static Map getEnumMap() {\n        return getEnumMap(Broken5OperationEnum.class);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken5OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken5OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken5OperationEnum.getEnumList()",
        "snippet": "    public static List getEnumList() {\n        return getEnumList(Broken5OperationEnum.class);\n    }",
        "begin_line": 79,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken5OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken5OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken5OperationEnum.iterator()",
        "snippet": "    public static Iterator iterator() {\n        return iterator(Broken5OperationEnum.class);\n    }",
        "begin_line": 83,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken2Enum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken2Enum.java",
        "signature": "org.apache.commons.lang.enums.Broken2Enum.Broken2Enum(java.lang.String)",
        "snippet": "    private Broken2Enum(String color) {\n        super(color);\n    }",
        "begin_line": 34,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken2Enum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken2Enum.java",
        "signature": "org.apache.commons.lang.enums.Broken2Enum.getEnum(java.lang.String)",
        "snippet": "    public static Broken2Enum getEnum(String color) {\n        return (Broken2Enum) getEnum(Broken2Enum.class, color);\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken2Enum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken2Enum.java",
        "signature": "org.apache.commons.lang.enums.Broken2Enum.getEnumMap()",
        "snippet": "    public static Map getEnumMap() {\n        return getEnumMap(Broken2Enum.class);\n    }",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken2Enum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken2Enum.java",
        "signature": "org.apache.commons.lang.enums.Broken2Enum.getEnumList()",
        "snippet": "    public static List getEnumList() {\n        return getEnumList(Broken2Enum.class);\n    }",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken2Enum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken2Enum.java",
        "signature": "org.apache.commons.lang.enums.Broken2Enum.iterator()",
        "snippet": "    public static Iterator iterator() {\n        return iterator(Broken2Enum.class);\n    }",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.EnumTest(java.lang.String)",
        "snippet": "    public EnumTest(String name) {\n        super(name);\n    }",
        "begin_line": 48,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.setUp()",
        "snippet": "    public void setUp() {\n    }",
        "begin_line": 52,
        "end_line": 53,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(EnumTest.class);\n        suite.setName(\"Enum Tests\");\n        return suite;\n    }",
        "begin_line": 55,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 56)",
            "(line 57,col 9)-(line 57,col 36)",
            "(line 58,col 9)-(line 58,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.testName()",
        "snippet": "    public void testName() {\n        assertEquals(\"Red\", ColorEnum.RED.getName());\n        assertEquals(\"Green\", ColorEnum.GREEN.getName());\n        assertEquals(\"Blue\", ColorEnum.BLUE.getName());\n    }",
        "begin_line": 61,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 53)",
            "(line 63,col 9)-(line 63,col 57)",
            "(line 64,col 9)-(line 64,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.testCompareTo()",
        "snippet": "    public void testCompareTo() {\n        assertTrue(ColorEnum.BLUE.compareTo(ColorEnum.BLUE) == 0);\n        assertTrue(ColorEnum.RED.compareTo(ColorEnum.BLUE) > 0);\n        assertTrue(ColorEnum.BLUE.compareTo(ColorEnum.RED) < 0);\n        try {\n            ColorEnum.RED.compareTo(null);\n            fail();\n        } catch (NullPointerException ex) {}\n        try {\n            ColorEnum.RED.compareTo(new Object());\n            fail();\n        } catch (ClassCastException ex) {}\n    }",
        "begin_line": 67,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 66)",
            "(line 69,col 9)-(line 69,col 64)",
            "(line 70,col 9)-(line 70,col 64)",
            "(line 71,col 9)-(line 74,col 44)",
            "(line 75,col 9)-(line 78,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.testEquals()",
        "snippet": "    public void testEquals() {\n        assertSame(ColorEnum.RED, ColorEnum.RED);\n        assertSame(ColorEnum.getEnum(\"Red\"), ColorEnum.RED);\n        assertEquals(false, ColorEnum.RED.equals(null));\n        assertEquals(true, ColorEnum.RED.equals(ColorEnum.RED));\n        assertEquals(true, ColorEnum.RED.equals(ColorEnum.getEnum(\"Red\")));\n    }",
        "begin_line": 81,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 49)",
            "(line 83,col 9)-(line 83,col 60)",
            "(line 84,col 9)-(line 84,col 56)",
            "(line 85,col 9)-(line 85,col 64)",
            "(line 86,col 9)-(line 86,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.testHashCode()",
        "snippet": "    public void testHashCode() {\n        assertEquals(ColorEnum.RED.hashCode(), ColorEnum.RED.hashCode());\n        assertEquals(7 + ColorEnum.class.hashCode() + 3 * \"Red\".hashCode(), ColorEnum.RED.hashCode());\n    }",
        "begin_line": 89,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 73)",
            "(line 91,col 9)-(line 91,col 102)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.testToString()",
        "snippet": "    public void testToString() {\n        String toString = ColorEnum.RED.toString();\n        assertEquals(\"ColorEnum[Red]\", toString);\n        assertSame(toString, ColorEnum.RED.toString());\n    }",
        "begin_line": 94,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 51)",
            "(line 96,col 9)-(line 96,col 49)",
            "(line 97,col 9)-(line 97,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.testIterator()",
        "snippet": "    public void testIterator() {\n        Iterator it = ColorEnum.iterator();\n        assertSame(ColorEnum.RED, it.next());\n        assertSame(ColorEnum.GREEN, it.next());\n        assertSame(ColorEnum.BLUE, it.next());\n    }",
        "begin_line": 100,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 43)",
            "(line 102,col 9)-(line 102,col 45)",
            "(line 103,col 9)-(line 103,col 47)",
            "(line 104,col 9)-(line 104,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.testList()",
        "snippet": "    public void testList() {\n        List list = new ArrayList(ColorEnum.getEnumList());\n        \n        assertNotNull(list);\n        \n        assertEquals( list.size(),\n                        ColorEnum.getEnumMap().keySet().size());\n        \n        Iterator it = list.iterator();\n        assertSame(ColorEnum.RED, it.next());\n        assertSame(ColorEnum.GREEN, it.next());\n        assertSame(ColorEnum.BLUE, it.next());\n    }",
        "begin_line": 107,
        "end_line": 119,
        "comment": "",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 59)",
            "(line 110,col 9)-(line 110,col 28)",
            "(line 112,col 9)-(line 113,col 64)",
            "(line 115,col 9)-(line 115,col 38)",
            "(line 116,col 9)-(line 116,col 45)",
            "(line 117,col 9)-(line 117,col 47)",
            "(line 118,col 9)-(line 118,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.testMap()",
        "snippet": "    public void testMap() {\n        Map map = new HashMap(ColorEnum.getEnumMap());\n        \n        assertNotNull(map);\n        assertTrue(map.containsValue(ColorEnum.RED));\n        assertTrue(map.containsValue(ColorEnum.GREEN));\n        assertTrue(map.containsValue(ColorEnum.BLUE));\n        assertSame(ColorEnum.RED, map.get(\"Red\"));\n        assertSame(ColorEnum.GREEN, map.get(\"Green\"));\n        assertSame(ColorEnum.BLUE, map.get(\"Blue\"));\n        assertEquals( map.keySet().size(),\n                        ColorEnum.getEnumList().size());\n    }",
        "begin_line": 121,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 122,col 9)-(line 122,col 54)",
            "(line 124,col 9)-(line 124,col 27)",
            "(line 125,col 9)-(line 125,col 53)",
            "(line 126,col 9)-(line 126,col 55)",
            "(line 127,col 9)-(line 127,col 54)",
            "(line 128,col 9)-(line 128,col 50)",
            "(line 129,col 9)-(line 129,col 54)",
            "(line 130,col 9)-(line 130,col 52)",
            "(line 131,col 9)-(line 132,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.testGet()",
        "snippet": "    public void testGet() {\n        assertSame(ColorEnum.RED, ColorEnum.getEnum(\"Red\"));\n        assertSame(ColorEnum.GREEN, ColorEnum.getEnum(\"Green\"));\n        assertSame(ColorEnum.BLUE, ColorEnum.getEnum(\"Blue\"));\n        assertSame(null, ColorEnum.getEnum(\"Pink\"));\n    }",
        "begin_line": 135,
        "end_line": 140,
        "comment": "",
        "child_ranges": [
            "(line 136,col 9)-(line 136,col 60)",
            "(line 137,col 9)-(line 137,col 64)",
            "(line 138,col 9)-(line 138,col 62)",
            "(line 139,col 9)-(line 139,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.testSerialization()",
        "snippet": "    public void testSerialization() {\n        int hashCode = ColorEnum.RED.hashCode();\n        assertSame(ColorEnum.RED, SerializationUtils.clone(ColorEnum.RED));\n        assertEquals(hashCode, SerializationUtils.clone(ColorEnum.RED).hashCode());\n        assertSame(ColorEnum.GREEN, SerializationUtils.clone(ColorEnum.GREEN));\n        assertSame(ColorEnum.BLUE, SerializationUtils.clone(ColorEnum.BLUE));\n    }",
        "begin_line": 142,
        "end_line": 148,
        "comment": "",
        "child_ranges": [
            "(line 143,col 9)-(line 143,col 48)",
            "(line 144,col 9)-(line 144,col 75)",
            "(line 145,col 9)-(line 145,col 83)",
            "(line 146,col 9)-(line 146,col 79)",
            "(line 147,col 9)-(line 147,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.testBroken1()",
        "snippet": "    public void testBroken1() {\n        try {\n            Broken1Enum.RED.getName();\n            fail();\n        } catch (ExceptionInInitializerError ex) {\n            assertTrue(ex.getException() instanceof IllegalArgumentException);\n        }\n    }",
        "begin_line": 150,
        "end_line": 157,
        "comment": "",
        "child_ranges": [
            "(line 151,col 9)-(line 156,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.testBroken2()",
        "snippet": "    public void testBroken2() {\n        try {\n            Broken2Enum.RED.getName();\n            fail();\n        } catch (ExceptionInInitializerError ex) {\n            assertTrue(ex.getException() instanceof IllegalArgumentException);\n        }\n    }",
        "begin_line": 159,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 160,col 9)-(line 165,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.testBroken3()",
        "snippet": "    public void testBroken3() {\n        try {\n            Broken3Enum.RED.getName();\n            fail();\n        } catch (ExceptionInInitializerError ex) {\n            assertTrue(ex.getException() instanceof IllegalArgumentException);\n        }\n    }",
        "begin_line": 168,
        "end_line": 175,
        "comment": "",
        "child_ranges": [
            "(line 169,col 9)-(line 174,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.testBroken1Operation()",
        "snippet": "    public void testBroken1Operation() {\n        try {\n            Broken1OperationEnum.PLUS.getName();\n            fail();\n        } catch (ExceptionInInitializerError ex) {\n            assertTrue(ex.getException() instanceof IllegalArgumentException);\n        }\n    }",
        "begin_line": 177,
        "end_line": 184,
        "comment": "",
        "child_ranges": [
            "(line 178,col 9)-(line 183,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.testBroken2Operation()",
        "snippet": "    public void testBroken2Operation() {\n        try {\n            Broken2OperationEnum.PLUS.getName();\n            fail();\n        } catch (ExceptionInInitializerError ex) {\n            assertTrue(ex.getException() instanceof IllegalArgumentException);\n        }\n    }",
        "begin_line": 186,
        "end_line": 193,
        "comment": "",
        "child_ranges": [
            "(line 187,col 9)-(line 192,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.testBroken3Operation()",
        "snippet": "    public void testBroken3Operation() {\n        try {\n            Broken3OperationEnum.PLUS.getName();\n            fail();\n        } catch (ExceptionInInitializerError ex) {\n            assertTrue(ex.getException() instanceof IllegalArgumentException);\n        }\n    }",
        "begin_line": 195,
        "end_line": 202,
        "comment": "",
        "child_ranges": [
            "(line 196,col 9)-(line 201,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.testBroken4Operation()",
        "snippet": "    public void testBroken4Operation() {\n        try {\n            Broken4OperationEnum.PLUS.getName();\n            fail();\n        } catch (ExceptionInInitializerError ex) {\n            assertTrue(ex.getException() instanceof IllegalArgumentException);\n        }\n    }",
        "begin_line": 204,
        "end_line": 211,
        "comment": "",
        "child_ranges": [
            "(line 205,col 9)-(line 210,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.testBroken5Operation()",
        "snippet": "    public void testBroken5Operation() {\n        try {\n            Broken5OperationEnum.PLUS.getName();\n            fail();\n        } catch (ExceptionInInitializerError ex) {\n            assertTrue(ex.getException() instanceof IllegalArgumentException);\n        }\n    }",
        "begin_line": 213,
        "end_line": 220,
        "comment": "",
        "child_ranges": [
            "(line 214,col 9)-(line 219,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.testOperationGet()",
        "snippet": "    public void testOperationGet() {\n        assertSame(OperationEnum.PLUS, OperationEnum.getEnum(\"Plus\"));\n        assertSame(OperationEnum.MINUS, OperationEnum.getEnum(\"Minus\"));\n        assertSame(null, OperationEnum.getEnum(\"Pink\"));\n    }",
        "begin_line": 222,
        "end_line": 226,
        "comment": "",
        "child_ranges": [
            "(line 223,col 9)-(line 223,col 70)",
            "(line 224,col 9)-(line 224,col 72)",
            "(line 225,col 9)-(line 225,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.testOperationSerialization()",
        "snippet": "    public void testOperationSerialization() {\n        assertSame(OperationEnum.PLUS, SerializationUtils.clone(OperationEnum.PLUS));\n        assertSame(OperationEnum.MINUS, SerializationUtils.clone(OperationEnum.MINUS));\n    }",
        "begin_line": 228,
        "end_line": 231,
        "comment": "",
        "child_ranges": [
            "(line 229,col 9)-(line 229,col 85)",
            "(line 230,col 9)-(line 230,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.testOperationToString()",
        "snippet": "    public void testOperationToString() {\n        assertEquals(\"OperationEnum[Plus]\", OperationEnum.PLUS.toString());\n    }",
        "begin_line": 233,
        "end_line": 235,
        "comment": "",
        "child_ranges": [
            "(line 234,col 9)-(line 234,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.testOperationList()",
        "snippet": "    public void testOperationList() {\n        List list = OperationEnum.getEnumList();\n        assertNotNull(list);\n        assertEquals(2, list.size());\n        assertEquals(list.size(), OperationEnum.getEnumMap().keySet().size());\n        \n        Iterator it = list.iterator();\n        assertSame(OperationEnum.PLUS, it.next());\n        assertSame(OperationEnum.MINUS, it.next());\n    }",
        "begin_line": 237,
        "end_line": 246,
        "comment": "",
        "child_ranges": [
            "(line 238,col 9)-(line 238,col 48)",
            "(line 239,col 9)-(line 239,col 28)",
            "(line 240,col 9)-(line 240,col 37)",
            "(line 241,col 9)-(line 241,col 78)",
            "(line 243,col 9)-(line 243,col 38)",
            "(line 244,col 9)-(line 244,col 50)",
            "(line 245,col 9)-(line 245,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.testOperationMap()",
        "snippet": "    public void testOperationMap() {\n        Map map = OperationEnum.getEnumMap();\n        assertNotNull(map);\n        assertEquals(map.keySet().size(), OperationEnum.getEnumList().size());\n        \n        assertTrue(map.containsValue(OperationEnum.PLUS));\n        assertTrue(map.containsValue(OperationEnum.MINUS));\n        assertSame(OperationEnum.PLUS, map.get(\"Plus\"));\n        assertSame(OperationEnum.MINUS, map.get(\"Minus\"));\n    }",
        "begin_line": 248,
        "end_line": 257,
        "comment": "",
        "child_ranges": [
            "(line 249,col 9)-(line 249,col 45)",
            "(line 250,col 9)-(line 250,col 27)",
            "(line 251,col 9)-(line 251,col 78)",
            "(line 253,col 9)-(line 253,col 58)",
            "(line 254,col 9)-(line 254,col 59)",
            "(line 255,col 9)-(line 255,col 56)",
            "(line 256,col 9)-(line 256,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.testOperationCalculation()",
        "snippet": "    public void testOperationCalculation() {\n        assertEquals(3, OperationEnum.PLUS.eval(1, 2));\n        assertEquals(-1, OperationEnum.MINUS.eval(1, 2));\n    }",
        "begin_line": 259,
        "end_line": 262,
        "comment": "",
        "child_ranges": [
            "(line 260,col 9)-(line 260,col 55)",
            "(line 261,col 9)-(line 261,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.testExtended1Get()",
        "snippet": "    public void testExtended1Get() {\n        assertSame(Extended1Enum.ALPHA, Extended1Enum.getEnum(\"Alpha\"));\n        assertSame(Extended1Enum.BETA, Extended1Enum.getEnum(\"Beta\"));\n        assertSame(null, Extended1Enum.getEnum(\"Gamma\"));\n        assertSame(null, Extended1Enum.getEnum(\"Delta\"));\n    }",
        "begin_line": 265,
        "end_line": 270,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 266,col 9)-(line 266,col 72)",
            "(line 267,col 9)-(line 267,col 70)",
            "(line 268,col 9)-(line 268,col 57)",
            "(line 269,col 9)-(line 269,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.testExtended2Get()",
        "snippet": "    public void testExtended2Get() {\n        assertSame(Extended1Enum.ALPHA, Extended2Enum.ALPHA);\n        assertSame(Extended1Enum.BETA, Extended2Enum.BETA);\n        \n        assertSame(Extended2Enum.ALPHA, Extended2Enum.getEnum(\"Alpha\"));\n        assertSame(Extended2Enum.BETA, Extended2Enum.getEnum(\"Beta\"));\n        assertSame(Extended2Enum.GAMMA, Extended2Enum.getEnum(\"Gamma\"));\n        assertSame(null, Extended2Enum.getEnum(\"Delta\"));\n    }",
        "begin_line": 272,
        "end_line": 280,
        "comment": "",
        "child_ranges": [
            "(line 273,col 9)-(line 273,col 61)",
            "(line 274,col 9)-(line 274,col 59)",
            "(line 276,col 9)-(line 276,col 72)",
            "(line 277,col 9)-(line 277,col 70)",
            "(line 278,col 9)-(line 278,col 72)",
            "(line 279,col 9)-(line 279,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.testExtended3Get()",
        "snippet": "    public void testExtended3Get() {\n        assertSame(Extended2Enum.ALPHA, Extended3Enum.ALPHA);\n        assertSame(Extended2Enum.BETA, Extended3Enum.BETA);\n        assertSame(Extended2Enum.GAMMA, Extended3Enum.GAMMA);\n        \n        assertSame(Extended3Enum.ALPHA, Extended3Enum.getEnum(\"Alpha\"));\n        assertSame(Extended3Enum.BETA, Extended3Enum.getEnum(\"Beta\"));\n        assertSame(Extended3Enum.GAMMA, Extended3Enum.getEnum(\"Gamma\"));\n        assertSame(Extended3Enum.DELTA, Extended3Enum.getEnum(\"Delta\"));\n    }",
        "begin_line": 282,
        "end_line": 291,
        "comment": "",
        "child_ranges": [
            "(line 283,col 9)-(line 283,col 61)",
            "(line 284,col 9)-(line 284,col 59)",
            "(line 285,col 9)-(line 285,col 61)",
            "(line 287,col 9)-(line 287,col 72)",
            "(line 288,col 9)-(line 288,col 70)",
            "(line 289,col 9)-(line 289,col 72)",
            "(line 290,col 9)-(line 290,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.testExtendedSerialization()",
        "snippet": "    public void testExtendedSerialization() {\n        assertSame(Extended1Enum.ALPHA, SerializationUtils.clone(Extended1Enum.ALPHA));\n        assertSame(Extended1Enum.BETA, SerializationUtils.clone(Extended1Enum.BETA));\n        assertSame(Extended2Enum.GAMMA, SerializationUtils.clone(Extended2Enum.GAMMA));\n        assertSame(Extended3Enum.DELTA, SerializationUtils.clone(Extended3Enum.DELTA));\n    }",
        "begin_line": 293,
        "end_line": 298,
        "comment": "",
        "child_ranges": [
            "(line 294,col 9)-(line 294,col 87)",
            "(line 295,col 9)-(line 295,col 85)",
            "(line 296,col 9)-(line 296,col 87)",
            "(line 297,col 9)-(line 297,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.testExtendedToString()",
        "snippet": "    public void testExtendedToString() {\n        assertEquals(\"Extended1Enum[Alpha]\", Extended1Enum.ALPHA.toString());\n        assertEquals(\"Extended1Enum[Beta]\", Extended1Enum.BETA.toString());\n        \n        assertEquals(\"Extended1Enum[Alpha]\", Extended2Enum.ALPHA.toString());\n        assertEquals(\"Extended1Enum[Beta]\", Extended2Enum.BETA.toString());\n        assertEquals(\"Extended2Enum[Gamma]\", Extended2Enum.GAMMA.toString());\n        \n        assertEquals(\"Extended1Enum[Alpha]\", Extended3Enum.ALPHA.toString());\n        assertEquals(\"Extended1Enum[Beta]\", Extended3Enum.BETA.toString());\n        assertEquals(\"Extended2Enum[Gamma]\", Extended3Enum.GAMMA.toString());\n        assertEquals(\"Extended3Enum[Delta]\", Extended3Enum.DELTA.toString());\n    }",
        "begin_line": 300,
        "end_line": 312,
        "comment": "",
        "child_ranges": [
            "(line 301,col 9)-(line 301,col 77)",
            "(line 302,col 9)-(line 302,col 75)",
            "(line 304,col 9)-(line 304,col 77)",
            "(line 305,col 9)-(line 305,col 75)",
            "(line 306,col 9)-(line 306,col 77)",
            "(line 308,col 9)-(line 308,col 77)",
            "(line 309,col 9)-(line 309,col 75)",
            "(line 310,col 9)-(line 310,col 77)",
            "(line 311,col 9)-(line 311,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.testExtended1List()",
        "snippet": "    public void testExtended1List() {\n        List list = Extended1Enum.getEnumList();\n        assertNotNull(list);\n        assertEquals(2, list.size());\n        assertEquals(list.size(), Extended1Enum.getEnumMap().keySet().size());\n        \n        Iterator it = list.iterator();\n        assertSame(Extended1Enum.ALPHA, it.next());\n        assertSame(Extended1Enum.BETA, it.next());\n    }",
        "begin_line": 314,
        "end_line": 323,
        "comment": "",
        "child_ranges": [
            "(line 315,col 9)-(line 315,col 48)",
            "(line 316,col 9)-(line 316,col 28)",
            "(line 317,col 9)-(line 317,col 37)",
            "(line 318,col 9)-(line 318,col 78)",
            "(line 320,col 9)-(line 320,col 38)",
            "(line 321,col 9)-(line 321,col 51)",
            "(line 322,col 9)-(line 322,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.testExtended2List()",
        "snippet": "    public void testExtended2List() {\n        List list = Extended2Enum.getEnumList();\n        assertNotNull(list);\n        assertEquals(3, list.size());\n        assertEquals(list.size(), Extended2Enum.getEnumMap().keySet().size());\n        \n        Iterator it = list.iterator();\n        assertSame(Extended2Enum.ALPHA, it.next());\n        assertSame(Extended2Enum.BETA, it.next());\n        assertSame(Extended2Enum.GAMMA, it.next());\n    }",
        "begin_line": 325,
        "end_line": 335,
        "comment": "",
        "child_ranges": [
            "(line 326,col 9)-(line 326,col 48)",
            "(line 327,col 9)-(line 327,col 28)",
            "(line 328,col 9)-(line 328,col 37)",
            "(line 329,col 9)-(line 329,col 78)",
            "(line 331,col 9)-(line 331,col 38)",
            "(line 332,col 9)-(line 332,col 51)",
            "(line 333,col 9)-(line 333,col 50)",
            "(line 334,col 9)-(line 334,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.testExtended3List()",
        "snippet": "    public void testExtended3List() {\n        List list = Extended3Enum.getEnumList();\n        assertNotNull(list);\n        assertEquals(4, list.size());\n        assertEquals(list.size(), Extended3Enum.getEnumMap().keySet().size());\n        \n        Iterator it = list.iterator();\n        assertSame(Extended3Enum.ALPHA, it.next());\n        assertSame(Extended3Enum.BETA, it.next());\n        assertSame(Extended3Enum.GAMMA, it.next());\n        assertSame(Extended3Enum.DELTA, it.next());\n    }",
        "begin_line": 337,
        "end_line": 348,
        "comment": "",
        "child_ranges": [
            "(line 338,col 9)-(line 338,col 48)",
            "(line 339,col 9)-(line 339,col 28)",
            "(line 340,col 9)-(line 340,col 37)",
            "(line 341,col 9)-(line 341,col 78)",
            "(line 343,col 9)-(line 343,col 38)",
            "(line 344,col 9)-(line 344,col 51)",
            "(line 345,col 9)-(line 345,col 50)",
            "(line 346,col 9)-(line 346,col 51)",
            "(line 347,col 9)-(line 347,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.testExtended1Map()",
        "snippet": "    public void testExtended1Map() {\n        Map map = Extended1Enum.getEnumMap();\n        assertNotNull(map);\n        assertEquals(map.keySet().size(), Extended1Enum.getEnumList().size());\n        \n        assertTrue(map.containsValue(Extended1Enum.ALPHA));\n        assertTrue(map.containsValue(Extended1Enum.BETA));\n        assertSame(Extended1Enum.ALPHA, map.get(\"Alpha\"));\n        assertSame(Extended1Enum.BETA, map.get(\"Beta\"));\n    }",
        "begin_line": 350,
        "end_line": 359,
        "comment": "",
        "child_ranges": [
            "(line 351,col 9)-(line 351,col 45)",
            "(line 352,col 9)-(line 352,col 27)",
            "(line 353,col 9)-(line 353,col 78)",
            "(line 355,col 9)-(line 355,col 59)",
            "(line 356,col 9)-(line 356,col 58)",
            "(line 357,col 9)-(line 357,col 58)",
            "(line 358,col 9)-(line 358,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.testExtended2Map()",
        "snippet": "    public void testExtended2Map() {\n        Map map = Extended2Enum.getEnumMap();\n        assertNotNull(map);\n        assertEquals(map.keySet().size(), Extended2Enum.getEnumList().size());\n        \n        assertTrue(map.containsValue(Extended2Enum.ALPHA));\n        assertTrue(map.containsValue(Extended2Enum.BETA));\n        assertTrue(map.containsValue(Extended2Enum.GAMMA));\n        assertSame(Extended2Enum.ALPHA, map.get(\"Alpha\"));\n        assertSame(Extended2Enum.BETA, map.get(\"Beta\"));\n        assertSame(Extended2Enum.GAMMA, map.get(\"Gamma\"));\n    }",
        "begin_line": 361,
        "end_line": 372,
        "comment": "",
        "child_ranges": [
            "(line 362,col 9)-(line 362,col 45)",
            "(line 363,col 9)-(line 363,col 27)",
            "(line 364,col 9)-(line 364,col 78)",
            "(line 366,col 9)-(line 366,col 59)",
            "(line 367,col 9)-(line 367,col 58)",
            "(line 368,col 9)-(line 368,col 59)",
            "(line 369,col 9)-(line 369,col 58)",
            "(line 370,col 9)-(line 370,col 56)",
            "(line 371,col 9)-(line 371,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.testExtended3Map()",
        "snippet": "    public void testExtended3Map() {\n        Map map = Extended3Enum.getEnumMap();\n        assertNotNull(map);\n        assertEquals(map.keySet().size(), Extended3Enum.getEnumList().size());\n        \n        assertTrue(map.containsValue(Extended3Enum.ALPHA));\n        assertTrue(map.containsValue(Extended3Enum.BETA));\n        assertTrue(map.containsValue(Extended3Enum.GAMMA));\n        assertTrue(map.containsValue(Extended3Enum.DELTA));\n        assertSame(Extended3Enum.ALPHA, map.get(\"Alpha\"));\n        assertSame(Extended3Enum.BETA, map.get(\"Beta\"));\n        assertSame(Extended3Enum.GAMMA, map.get(\"Gamma\"));\n        assertSame(Extended3Enum.DELTA, map.get(\"Delta\"));\n    }",
        "begin_line": 374,
        "end_line": 387,
        "comment": "",
        "child_ranges": [
            "(line 375,col 9)-(line 375,col 45)",
            "(line 376,col 9)-(line 376,col 27)",
            "(line 377,col 9)-(line 377,col 78)",
            "(line 379,col 9)-(line 379,col 59)",
            "(line 380,col 9)-(line 380,col 58)",
            "(line 381,col 9)-(line 381,col 59)",
            "(line 382,col 9)-(line 382,col 59)",
            "(line 383,col 9)-(line 383,col 58)",
            "(line 384,col 9)-(line 384,col 56)",
            "(line 385,col 9)-(line 385,col 58)",
            "(line 386,col 9)-(line 386,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.testNested()",
        "snippet": "    public void testNested() {\n        List list = new ArrayList(Nest.ColorEnum.getEnumList());\n        assertEquals(3, list.size());  // all is well\n        Iterator it = list.iterator();\n        assertSame(Nest.ColorEnum.RED, it.next());\n        assertSame(Nest.ColorEnum.GREEN, it.next());\n        assertSame(Nest.ColorEnum.BLUE, it.next());\n        // This nesting works because the enum constants are defined in the SAME\n        // class as the getEnumList(). It just acts as a normal enum.\n    }",
        "begin_line": 390,
        "end_line": 399,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 391,col 9)-(line 391,col 64)",
            "(line 392,col 9)-(line 392,col 37)",
            "(line 393,col 9)-(line 393,col 38)",
            "(line 394,col 9)-(line 394,col 50)",
            "(line 395,col 9)-(line 395,col 52)",
            "(line 396,col 9)-(line 396,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.testNestedBroken()",
        "snippet": "    public void testNestedBroken() {\n        List list = new ArrayList(NestBroken.ColorEnum.getEnumList());\n        try {\n            assertEquals(0, list.size());  // no enums!!! \n            // this is BROKEN because the enum constants are defined in a DIFFERENT\n            // class from getEnumList(). Once NestBroken class is referenced,\n            // and thus class loaded with its enum constants, the getEnumList works:\n        } catch (AssertionFailedError ex) {\n            // this actually works and isn't broken on Linux SunJDK1.4.1, so...\n            assertEquals(3, list.size());\n        }\n        new NestBroken();\n        list = new ArrayList(NestBroken.ColorEnum.getEnumList());\n        assertEquals(3, list.size());  // all is well!!!\n        Iterator it = list.iterator();\n        assertSame(NestBroken.RED, it.next());\n        assertSame(NestBroken.GREEN, it.next());\n        assertSame(NestBroken.BLUE, it.next());\n    }",
        "begin_line": 401,
        "end_line": 419,
        "comment": "",
        "child_ranges": [
            "(line 402,col 9)-(line 402,col 70)",
            "(line 403,col 9)-(line 411,col 9)",
            "(line 412,col 9)-(line 412,col 25)",
            "(line 413,col 9)-(line 413,col 65)",
            "(line 414,col 9)-(line 414,col 37)",
            "(line 415,col 9)-(line 415,col 38)",
            "(line 416,col 9)-(line 416,col 46)",
            "(line 417,col 9)-(line 417,col 48)",
            "(line 418,col 9)-(line 418,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.testNestedLinked()",
        "snippet": "    public void testNestedLinked() {\n        List list = new ArrayList(NestLinked.ColorEnum.getEnumList());\n        assertEquals(3, list.size());  // all is well\n        Iterator it = list.iterator();\n        assertSame(NestLinked.RED, it.next());\n        assertSame(NestLinked.GREEN, it.next());\n        assertSame(NestLinked.BLUE, it.next());\n        // This nesting works because a static block in the enum class forces a\n        // class load of the outer class which defines the enum constants.\n    }",
        "begin_line": 421,
        "end_line": 430,
        "comment": "",
        "child_ranges": [
            "(line 422,col 9)-(line 422,col 70)",
            "(line 423,col 9)-(line 423,col 37)",
            "(line 424,col 9)-(line 424,col 38)",
            "(line 425,col 9)-(line 425,col 46)",
            "(line 426,col 9)-(line 426,col 48)",
            "(line 427,col 9)-(line 427,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.testNestedReferenced()",
        "snippet": "    public void testNestedReferenced() {\n        List list = new ArrayList(NestReferenced.ColorEnum.getEnumList());\n        assertEquals(3, list.size());  // all is well\n        Iterator it = list.iterator();\n        assertSame(NestReferenced.RED, it.next());\n        assertSame(NestReferenced.GREEN, it.next());\n        assertSame(NestReferenced.BLUE, it.next());\n        // This nesting works because the enum constants are actually defined in\n        // the SAME class as the getEnumList(). The references in the outer class\n        // are just extra references.\n    }",
        "begin_line": 432,
        "end_line": 442,
        "comment": "",
        "child_ranges": [
            "(line 433,col 9)-(line 433,col 74)",
            "(line 434,col 9)-(line 434,col 37)",
            "(line 435,col 9)-(line 435,col 38)",
            "(line 436,col 9)-(line 436,col 50)",
            "(line 437,col 9)-(line 437,col 52)",
            "(line 438,col 9)-(line 438,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.testColorEnumEqualsWithDifferentClassLoaders()",
        "snippet": "    public void testColorEnumEqualsWithDifferentClassLoaders() {}",
        "begin_line": 444,
        "end_line": 444,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "testWithDifferentClassLoaders(ColorEnum)",
        "snippet": "    void testWithDifferentClassLoaders(ColorEnum colorEnum) throws ClassNotFoundException, SecurityException,\n            NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {\n        // Sanity checks:\n        assertTrue(colorEnum.equals(colorEnum));\n        assertNotNull(ColorEnum.class.getClassLoader());\n        // set up:\n        ClassLoader myClassLoader = EnumTest.class.getClassLoader();\n        if (!(myClassLoader instanceof URLClassLoader)) {\n            fail(\"EnumTest ClassLoader = \" + (myClassLoader == null ? null : myClassLoader.getClass().getName()));\n        }\n        ClassLoader classLoader = URLClassLoader.newInstance( ((URLClassLoader)myClassLoader).getURLs(), null);\n        Object enumObjectFromOtherClassLoader = this.getColorEnum(classLoader, colorEnum.getName());\n\n        // the real test, part 1.\n        try {\n            ColorEnum testCase = (ColorEnum) enumObjectFromOtherClassLoader;\n            fail(\"Should have thrown a ClassCastException for \" + testCase);\n        } catch (ClassCastException e) {\n            // normal.\n        }\n\n        // the real test, part 2.\n        assertEquals(\"The two objects should match even though they are from different class loaders\", colorEnum,\n                enumObjectFromOtherClassLoader);\n\n        // the real test, part 3 - testing equals(Object)\n        int falseCount = 0;\n        for (Iterator iter = ColorEnum.iterator(); iter.hasNext();) {\n            ColorEnum element = (ColorEnum) iter.next();\n            if (!colorEnum.equals(element)) {\n                falseCount++;\n                assertFalse(enumObjectFromOtherClassLoader.equals(element));\n            }\n        }\n        assertEquals(ColorEnum.getEnumList().size() - 1, falseCount);\n\n        // the real test, part 4 - testing compareTo(Object) == 0\n        falseCount = 0;\n        for (Iterator iter = ColorEnum.iterator(); iter.hasNext();) {\n            ColorEnum element = (ColorEnum) iter.next();\n            if (!colorEnum.equals(element)) {\n                falseCount++;\n                assertFalse( ((Comparable)enumObjectFromOtherClassLoader).compareTo(element) == 0);\n            }\n        }\n        assertEquals(ColorEnum.getEnumList().size() - 1, falseCount);\n    }",
        "begin_line": 453,
        "end_line": 499,
        "comment": "",
        "child_ranges": [
            "(line 456,col 9)-(line 456,col 48)",
            "(line 457,col 9)-(line 457,col 56)",
            "(line 459,col 9)-(line 459,col 68)",
            "(line 460,col 9)-(line 462,col 9)",
            "(line 463,col 9)-(line 463,col 111)",
            "(line 464,col 9)-(line 464,col 100)",
            "(line 467,col 9)-(line 472,col 9)",
            "(line 475,col 9)-(line 476,col 48)",
            "(line 479,col 9)-(line 479,col 27)",
            "(line 480,col 9)-(line 486,col 9)",
            "(line 487,col 9)-(line 487,col 69)",
            "(line 490,col 9)-(line 490,col 23)",
            "(line 491,col 9)-(line 497,col 9)",
            "(line 498,col 9)-(line 498,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.getColorEnum(java.lang.ClassLoader, java.lang.String)",
        "snippet": "    Object getColorEnum(ClassLoader classLoader, String color) throws ClassNotFoundException, SecurityException,\n            NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {\n        // Sanity check:\n        ColorEnum.RED.equals(ColorEnum.RED);\n        assertNotNull(ColorEnum.class.getClassLoader());\n        // set up:\n        assertNotNull(classLoader);\n        assertFalse(classLoader.equals(ColorEnum.class.getClassLoader()));\n        Class otherColorEnumClass = null;\n        try {\n            otherColorEnumClass = classLoader.loadClass(ENUMS_CLASS_NAME);\n        } catch (ClassNotFoundException e) {\n            // Dump some information to help debug class loader issues under different JREs, Ant, Eclipse.\n            System.err.println(\"Could not load \" + ENUMS_CLASS_NAME + \" from the class loader \" + classLoader);\n            URLClassLoader urlCl = (URLClassLoader) classLoader;\n            URL[] urls = urlCl.getURLs();\n            System.err.println(\"Class loader has \" + urls.length + \" URLs:\");\n            for (int i = 0; i < urls.length; i++) {\n                System.err.println(\"URL[\" + i + \"] = \" + urls[i]);\n            }\n            e.printStackTrace();\n            throw e;\n        }\n        assertNotNull(otherColorEnumClass);\n        assertNotNull(otherColorEnumClass.getClassLoader());\n        assertTrue(classLoader.equals(otherColorEnumClass.getClassLoader()));\n        assertFalse(otherColorEnumClass.getClassLoader().equals(ColorEnum.class.getClassLoader()));\n        Method method = otherColorEnumClass.getMethod(\"getEnum\", new Class[]{String.class});\n        Object enumObject = method.invoke(otherColorEnumClass, new Object[]{color});\n        assertNotNull(enumObject);\n        assertFalse(ColorEnum.class.equals(enumObject.getClass()));\n        assertFalse(ColorEnum.class == enumObject.getClass());\n        return enumObject;\n    }",
        "begin_line": 501,
        "end_line": 534,
        "comment": "",
        "child_ranges": [
            "(line 504,col 9)-(line 504,col 44)",
            "(line 505,col 9)-(line 505,col 56)",
            "(line 507,col 9)-(line 507,col 35)",
            "(line 508,col 9)-(line 508,col 74)",
            "(line 509,col 9)-(line 509,col 41)",
            "(line 510,col 9)-(line 523,col 9)",
            "(line 524,col 9)-(line 524,col 43)",
            "(line 525,col 9)-(line 525,col 60)",
            "(line 526,col 9)-(line 526,col 77)",
            "(line 527,col 9)-(line 527,col 99)",
            "(line 528,col 9)-(line 528,col 92)",
            "(line 529,col 9)-(line 529,col 84)",
            "(line 530,col 9)-(line 530,col 34)",
            "(line 531,col 9)-(line 531,col 67)",
            "(line 532,col 9)-(line 532,col 62)",
            "(line 533,col 9)-(line 533,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "org.apache.commons.lang.enums.EnumTest.testEqualsToWrongInstance()",
        "snippet": "    public void testEqualsToWrongInstance() {\n        for (Iterator iter = ColorEnum.iterator(); iter.hasNext();) {\n            ColorEnum element = (ColorEnum) iter.next();\n            this.testEqualsToWrongInstance(element);\n        }\n    }",
        "begin_line": 536,
        "end_line": 541,
        "comment": "",
        "child_ranges": [
            "(line 537,col 9)-(line 540,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTest.java",
        "signature": "testEqualsToWrongInstance(ColorEnum)",
        "snippet": "    void testEqualsToWrongInstance(ColorEnum colorEnum) {\n        assertEquals(false, colorEnum.equals(\"test\"));\n        assertEquals(false, colorEnum.equals(new Integer(1)));\n        assertEquals(false, colorEnum.equals(new Boolean(true)));\n        assertEquals(false, colorEnum.equals(new StringBuffer(\"test\")));\n        assertEquals(false, colorEnum.equals(new Object()));\n        assertEquals(false, colorEnum.equals(null));\n        assertEquals(false, colorEnum.equals(\"\"));\n        assertEquals(false, colorEnum.equals(ColorEnum.getEnum(null)));\n        assertEquals(false, colorEnum.equals(ColorEnum.getEnum(\"\")));\n        assertEquals(false, colorEnum.equals(ColorEnum.getEnum(\"This ColorEnum does not exist.\")));\n    }",
        "begin_line": 543,
        "end_line": 554,
        "comment": "",
        "child_ranges": [
            "(line 544,col 9)-(line 544,col 54)",
            "(line 545,col 9)-(line 545,col 62)",
            "(line 546,col 9)-(line 546,col 65)",
            "(line 547,col 9)-(line 547,col 72)",
            "(line 548,col 9)-(line 548,col 60)",
            "(line 549,col 9)-(line 549,col 52)",
            "(line 550,col 9)-(line 550,col 50)",
            "(line 551,col 9)-(line 551,col 71)",
            "(line 552,col 9)-(line 552,col 69)",
            "(line 553,col 9)-(line 553,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.NestBroken",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/NestBroken.java",
        "signature": "org.apache.commons.lang.enums.NestBroken.NestBroken()",
        "snippet": "    public NestBroken() {\n        super();\n    }",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 16)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.NestBroken",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/NestBroken.java",
        "signature": "org.apache.commons.lang.enums.NestBroken.ColorEnum.ColorEnum(java.lang.String)",
        "snippet": "        private ColorEnum(String color) {\n            super(color);\n        }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 13)-(line 48,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.NestBroken",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/NestBroken.java",
        "signature": "org.apache.commons.lang.enums.NestBroken.ColorEnum.getEnum(java.lang.String)",
        "snippet": "        public static ColorEnum getEnum(String color) {\n            return (ColorEnum) getEnum(ColorEnum.class, color);\n        }",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 52,col 13)-(line 52,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.NestBroken",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/NestBroken.java",
        "signature": "org.apache.commons.lang.enums.NestBroken.ColorEnum.getEnumMap()",
        "snippet": "        public static Map getEnumMap() {\n            return getEnumMap(ColorEnum.class);\n        }",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 56,col 13)-(line 56,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.NestBroken",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/NestBroken.java",
        "signature": "org.apache.commons.lang.enums.NestBroken.ColorEnum.getEnumList()",
        "snippet": "        public static List getEnumList() {\n            return getEnumList(ColorEnum.class);\n        }",
        "begin_line": 59,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 60,col 13)-(line 60,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.NestBroken",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/NestBroken.java",
        "signature": "org.apache.commons.lang.enums.NestBroken.ColorEnum.iterator()",
        "snippet": "        public static Iterator iterator() {\n            return iterator(ColorEnum.class);\n        }",
        "begin_line": 63,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 64,col 13)-(line 64,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.OperationEnum.PlusOperation.PlusOperation()",
        "snippet": "        private PlusOperation() {\n            super(\"Plus\");\n        }",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 45,col 13)-(line 45,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.OperationEnum.PlusOperation.eval(int, int)",
        "snippet": "        public int eval(int a, int b) {\n            return (a + b);\n        }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 13)-(line 48,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.OperationEnum.MinusOperation.MinusOperation()",
        "snippet": "        private MinusOperation() {\n            super(\"Minus\");\n        }",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 54,col 13)-(line 54,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.OperationEnum.MinusOperation.eval(int, int)",
        "snippet": "        public int eval(int a, int b) {\n            return (a - b);\n        }",
        "begin_line": 56,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 57,col 13)-(line 57,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.OperationEnum.OperationEnum(java.lang.String)",
        "snippet": "    private OperationEnum(String name) {\n        super(name);\n    }",
        "begin_line": 61,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.OperationEnum.getEnumClass()",
        "snippet": "    public final Class getEnumClass() {\n        return OperationEnum.class;\n    }",
        "begin_line": 65,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.OperationEnum.eval(int, int)",
        "snippet": "    public abstract int eval(int a, int b);",
        "begin_line": 69,
        "end_line": 69,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.enums.OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.OperationEnum.getEnum(java.lang.String)",
        "snippet": "    public static OperationEnum getEnum(String name) {\n        return (OperationEnum) getEnum(OperationEnum.class, name);\n    }",
        "begin_line": 71,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.OperationEnum.getEnumMap()",
        "snippet": "    public static Map getEnumMap() {\n        return getEnumMap(OperationEnum.class);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.OperationEnum.getEnumList()",
        "snippet": "    public static List getEnumList() {\n        return getEnumList(OperationEnum.class);\n    }",
        "begin_line": 79,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.OperationEnum.iterator()",
        "snippet": "    public static Iterator iterator() {\n        return iterator(OperationEnum.class);\n    }",
        "begin_line": 83,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken4OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken4OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken4OperationEnum.PlusOperation.PlusOperation()",
        "snippet": "        private PlusOperation() {\n            super(\"Plus\");\n        }",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 45,col 13)-(line 45,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken4OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken4OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken4OperationEnum.PlusOperation.eval(int, int)",
        "snippet": "        public int eval(int a, int b) {\n            return (a + b);\n        }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 13)-(line 48,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken4OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken4OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken4OperationEnum.MinusOperation.MinusOperation()",
        "snippet": "        private MinusOperation() {\n            super(\"Minus\");\n        }",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 54,col 13)-(line 54,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken4OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken4OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken4OperationEnum.MinusOperation.eval(int, int)",
        "snippet": "        public int eval(int a, int b) {\n            return (a - b);\n        }",
        "begin_line": 56,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 57,col 13)-(line 57,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken4OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken4OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken4OperationEnum.Broken4OperationEnum(java.lang.String)",
        "snippet": "    private Broken4OperationEnum(String name) {\n        super(name);\n    }",
        "begin_line": 61,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken4OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken4OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken4OperationEnum.getEnumClass()",
        "snippet": "    public final Class getEnumClass() {\n        return ValuedEnum.class;\n    }",
        "begin_line": 65,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken4OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken4OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken4OperationEnum.eval(int, int)",
        "snippet": "    public abstract int eval(int a, int b);",
        "begin_line": 69,
        "end_line": 69,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken4OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken4OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken4OperationEnum.getEnum(java.lang.String)",
        "snippet": "    public static Broken4OperationEnum getEnum(String name) {\n        return (Broken4OperationEnum) getEnum(Broken4OperationEnum.class, name);\n    }",
        "begin_line": 71,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken4OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken4OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken4OperationEnum.getEnumMap()",
        "snippet": "    public static Map getEnumMap() {\n        return getEnumMap(Broken4OperationEnum.class);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken4OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken4OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken4OperationEnum.getEnumList()",
        "snippet": "    public static List getEnumList() {\n        return getEnumList(Broken4OperationEnum.class);\n    }",
        "begin_line": 79,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken4OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken4OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken4OperationEnum.iterator()",
        "snippet": "    public static Iterator iterator() {\n        return iterator(Broken4OperationEnum.class);\n    }",
        "begin_line": 83,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.NestLinked",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/NestLinked.java",
        "signature": "org.apache.commons.lang.enums.NestLinked.NestLinked()",
        "snippet": "    public NestLinked() {\n        super();\n    }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 16)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.NestLinked",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/NestLinked.java",
        "signature": "org.apache.commons.lang.enums.NestLinked.ColorEnum.ColorEnum(java.lang.String)",
        "snippet": "        private ColorEnum(String color) {\n            super(color);\n        }",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 55,col 13)-(line 55,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.NestLinked",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/NestLinked.java",
        "signature": "org.apache.commons.lang.enums.NestLinked.ColorEnum.getEnum(java.lang.String)",
        "snippet": "        public static ColorEnum getEnum(String color) {\n            return (ColorEnum) getEnum(ColorEnum.class, color);\n        }",
        "begin_line": 58,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 59,col 13)-(line 59,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.NestLinked",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/NestLinked.java",
        "signature": "org.apache.commons.lang.enums.NestLinked.ColorEnum.getEnumMap()",
        "snippet": "        public static Map getEnumMap() {\n            return getEnumMap(ColorEnum.class);\n        }",
        "begin_line": 62,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 63,col 13)-(line 63,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.NestLinked",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/NestLinked.java",
        "signature": "org.apache.commons.lang.enums.NestLinked.ColorEnum.getEnumList()",
        "snippet": "        public static List getEnumList() {\n            return getEnumList(ColorEnum.class);\n        }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 67,col 13)-(line 67,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.NestLinked",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/NestLinked.java",
        "signature": "org.apache.commons.lang.enums.NestLinked.ColorEnum.iterator()",
        "snippet": "        public static Iterator iterator() {\n            return iterator(ColorEnum.class);\n        }",
        "begin_line": 70,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 71,col 13)-(line 71,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.ValuedLanguageEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/ValuedLanguageEnum.java",
        "signature": "org.apache.commons.lang.enums.ValuedLanguageEnum.ValuedLanguageEnum(java.lang.String, int)",
        "snippet": "    private ValuedLanguageEnum(String color, int value) {\n        super(color, value);\n    }",
        "begin_line": 34,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.ValuedLanguageEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/ValuedLanguageEnum.java",
        "signature": "org.apache.commons.lang.enums.ValuedLanguageEnum.getEnum(java.lang.String)",
        "snippet": "    public static ValuedLanguageEnum getEnum(String color) {\n        return (ValuedLanguageEnum) getEnum(ValuedLanguageEnum.class, color);\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.ValuedLanguageEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/ValuedLanguageEnum.java",
        "signature": "org.apache.commons.lang.enums.ValuedLanguageEnum.getEnum(int)",
        "snippet": "    public static ValuedLanguageEnum getEnum(int value) {\n        return (ValuedLanguageEnum) getEnum(ValuedLanguageEnum.class, value);\n    }",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.ValuedLanguageEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/ValuedLanguageEnum.java",
        "signature": "org.apache.commons.lang.enums.ValuedLanguageEnum.getEnumMap()",
        "snippet": "    public static Map getEnumMap() {\n        return getEnumMap(ValuedLanguageEnum.class);\n    }",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.ValuedLanguageEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/ValuedLanguageEnum.java",
        "signature": "org.apache.commons.lang.enums.ValuedLanguageEnum.getEnumList()",
        "snippet": "    public static List getEnumList() {\n        return getEnumList(ValuedLanguageEnum.class);\n    }",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.ValuedLanguageEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/ValuedLanguageEnum.java",
        "signature": "org.apache.commons.lang.enums.ValuedLanguageEnum.iterator()",
        "snippet": "    public static Iterator iterator() {\n        return iterator(ValuedLanguageEnum.class);\n    }",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTestSuite",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTestSuite.java",
        "signature": "org.apache.commons.lang.enums.EnumTestSuite.EnumTestSuite(java.lang.String)",
        "snippet": "    public EnumTestSuite(String name) {\n        super(name);\n    }",
        "begin_line": 35,
        "end_line": 37,
        "comment": "\n     * Construct a new instance.\n     ",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTestSuite",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTestSuite.java",
        "signature": "org.apache.commons.lang.enums.EnumTestSuite.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 42,
        "end_line": 44,
        "comment": "\n     * Command-line interface.\n     ",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.EnumTestSuite",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/EnumTestSuite.java",
        "signature": "org.apache.commons.lang.enums.EnumTestSuite.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite();\n        suite.setName(\"Commons-Lang-Enum Tests\");\n        suite.addTest(EnumTest.suite());\n        suite.addTest(EnumEqualsTest.suite());\n        suite.addTest(EnumUtilsTest.suite());\n        suite.addTest(ValuedEnumTest.suite());\n        return suite;\n    }",
        "begin_line": 49,
        "end_line": 57,
        "comment": "\n     * Get the suite of tests\n     ",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 42)",
            "(line 51,col 9)-(line 51,col 49)",
            "(line 52,col 9)-(line 52,col 40)",
            "(line 53,col 9)-(line 53,col 46)",
            "(line 54,col 9)-(line 54,col 45)",
            "(line 55,col 9)-(line 55,col 46)",
            "(line 56,col 9)-(line 56,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.ValuedColorEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/ValuedColorEnum.java",
        "signature": "org.apache.commons.lang.enums.ValuedColorEnum.ValuedColorEnum(java.lang.String, int)",
        "snippet": "    private ValuedColorEnum(String color, int value) {\n        super(color, value);\n    }",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.ValuedColorEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/ValuedColorEnum.java",
        "signature": "org.apache.commons.lang.enums.ValuedColorEnum.getEnum(java.lang.String)",
        "snippet": "    public static ValuedColorEnum getEnum(String color) {\n        return (ValuedColorEnum) getEnum(ValuedColorEnum.class, color);\n    }",
        "begin_line": 39,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.ValuedColorEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/ValuedColorEnum.java",
        "signature": "org.apache.commons.lang.enums.ValuedColorEnum.getEnum(int)",
        "snippet": "    public static ValuedColorEnum getEnum(int value) {\n        return (ValuedColorEnum) getEnum(ValuedColorEnum.class, value);\n    }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.ValuedColorEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/ValuedColorEnum.java",
        "signature": "org.apache.commons.lang.enums.ValuedColorEnum.getEnumMap()",
        "snippet": "    public static Map getEnumMap() {\n        return getEnumMap(ValuedColorEnum.class);\n    }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.ValuedColorEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/ValuedColorEnum.java",
        "signature": "org.apache.commons.lang.enums.ValuedColorEnum.getEnumList()",
        "snippet": "    public static List getEnumList() {\n        return getEnumList(ValuedColorEnum.class);\n    }",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.ValuedColorEnum",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/enums/ValuedColorEnum.java",
        "signature": "org.apache.commons.lang.enums.ValuedColorEnum.iterator()",
        "snippet": "    public static Iterator iterator() {\n        return iterator(ValuedColorEnum.class);\n    }",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken1OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken1OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken1OperationEnum.PlusOperation.PlusOperation()",
        "snippet": "        private PlusOperation() {\n            super(\"Plus\");\n        }",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 45,col 13)-(line 45,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken1OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken1OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken1OperationEnum.PlusOperation.eval(int, int)",
        "snippet": "        public int eval(int a, int b) {\n            return (a + b);\n        }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 13)-(line 48,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken1OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken1OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken1OperationEnum.MinusOperation.MinusOperation()",
        "snippet": "        private MinusOperation() {\n            super(\"Minus\");\n        }",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 54,col 13)-(line 54,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken1OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken1OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken1OperationEnum.MinusOperation.eval(int, int)",
        "snippet": "        public int eval(int a, int b) {\n            return (a - b);\n        }",
        "begin_line": 56,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 57,col 13)-(line 57,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken1OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken1OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken1OperationEnum.Broken1OperationEnum(java.lang.String)",
        "snippet": "    private Broken1OperationEnum(String name) {\n        super(name);\n    }",
        "begin_line": 61,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken1OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken1OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken1OperationEnum.getEnumClass()",
        "snippet": "    public final Class getEnumClass() {\n        return null;\n    }",
        "begin_line": 65,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken1OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken1OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken1OperationEnum.eval(int, int)",
        "snippet": "    public abstract int eval(int a, int b);",
        "begin_line": 69,
        "end_line": 69,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken1OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken1OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken1OperationEnum.getEnum(java.lang.String)",
        "snippet": "    public static Broken1OperationEnum getEnum(String name) {\n        return (Broken1OperationEnum) getEnum(Broken1OperationEnum.class, name);\n    }",
        "begin_line": 71,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken1OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken1OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken1OperationEnum.getEnumMap()",
        "snippet": "    public static Map getEnumMap() {\n        return getEnumMap(Broken1OperationEnum.class);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken1OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken1OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken1OperationEnum.getEnumList()",
        "snippet": "    public static List getEnumList() {\n        return getEnumList(Broken1OperationEnum.class);\n    }",
        "begin_line": 79,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.enums.Broken1OperationEnum",
        "child_classes": [
            "org.apache.commons.lang.enum.Broken1OperationEnum"
        ],
        "src_path": "src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java",
        "signature": "org.apache.commons.lang.enums.Broken1OperationEnum.iterator()",
        "snippet": "    public static Iterator iterator() {\n        return iterator(Broken1OperationEnum.class);\n    }",
        "begin_line": 83,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableFloatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableFloatTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableFloatTest.MutableFloatTest(java.lang.String)",
        "snippet": "    public MutableFloatTest(String testName) {\n        super(testName);\n    }",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableFloatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableFloatTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableFloatTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableFloatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableFloatTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableFloatTest.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(MutableFloatTest.class);\n    }",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableFloatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableFloatTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableFloatTest.testConstructors()",
        "snippet": "    public void testConstructors() {\n        assertEquals(0f, new MutableFloat().floatValue(), 0.0001f);\n        \n        assertEquals(1f, new MutableFloat(1f).floatValue(), 0.0001f);\n        \n        assertEquals(2f, new MutableFloat(new Float(2f)).floatValue(), 0.0001f);\n        assertEquals(3f, new MutableFloat(new MutableFloat(3f)).floatValue(), 0.0001f);\n        try {\n            new MutableFloat(null);\n            fail();\n        } catch (NullPointerException ex) {}\n    }",
        "begin_line": 45,
        "end_line": 56,
        "comment": " ----------------------------------------------------------------",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 67)",
            "(line 48,col 9)-(line 48,col 69)",
            "(line 50,col 9)-(line 50,col 80)",
            "(line 51,col 9)-(line 51,col 87)",
            "(line 52,col 9)-(line 55,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableFloatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableFloatTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableFloatTest.testGetSet()",
        "snippet": "    public void testGetSet() {\n        final MutableFloat mutNum = new MutableFloat(0f);\n        assertEquals(0f, new MutableFloat().floatValue(), 0.0001f);\n        assertEquals(new Float(0), new MutableFloat().getValue());\n        \n        mutNum.setValue(1);\n        assertEquals(1f, mutNum.floatValue(), 0.0001f);\n        assertEquals(new Float(1f), mutNum.getValue());\n        \n        mutNum.setValue(new Float(2f));\n        assertEquals(2f, mutNum.floatValue(), 0.0001f);\n        assertEquals(new Float(2f), mutNum.getValue());\n        \n        mutNum.setValue(new MutableFloat(3f));\n        assertEquals(3f, mutNum.floatValue(), 0.0001f);\n        assertEquals(new Float(3f), mutNum.getValue());\n        try {\n            mutNum.setValue(null);\n            fail();\n        } catch (NullPointerException ex) {}\n        try {\n            mutNum.setValue(\"0\");\n            fail();\n        } catch (ClassCastException ex) {}\n    }",
        "begin_line": 58,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 57)",
            "(line 60,col 9)-(line 60,col 67)",
            "(line 61,col 9)-(line 61,col 66)",
            "(line 63,col 9)-(line 63,col 27)",
            "(line 64,col 9)-(line 64,col 55)",
            "(line 65,col 9)-(line 65,col 55)",
            "(line 67,col 9)-(line 67,col 39)",
            "(line 68,col 9)-(line 68,col 55)",
            "(line 69,col 9)-(line 69,col 55)",
            "(line 71,col 9)-(line 71,col 46)",
            "(line 72,col 9)-(line 72,col 55)",
            "(line 73,col 9)-(line 73,col 55)",
            "(line 74,col 9)-(line 77,col 44)",
            "(line 78,col 9)-(line 81,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableFloatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableFloatTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableFloatTest.testNanInfinite()",
        "snippet": "    public void testNanInfinite() {\n        MutableFloat mutNum = new MutableFloat(Float.NaN);\n        assertEquals(true, mutNum.isNaN());\n        \n        mutNum = new MutableFloat(Float.POSITIVE_INFINITY);\n        assertEquals(true, mutNum.isInfinite());\n        \n        mutNum = new MutableFloat(Float.NEGATIVE_INFINITY);\n        assertEquals(true, mutNum.isInfinite());\n    }",
        "begin_line": 84,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 58)",
            "(line 86,col 9)-(line 86,col 43)",
            "(line 88,col 9)-(line 88,col 59)",
            "(line 89,col 9)-(line 89,col 48)",
            "(line 91,col 9)-(line 91,col 59)",
            "(line 92,col 9)-(line 92,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableFloatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableFloatTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableFloatTest.testEquals()",
        "snippet": "    public void testEquals() {\n        final MutableFloat mutNumA = new MutableFloat(0f);\n        final MutableFloat mutNumB = new MutableFloat(0f);\n        final MutableFloat mutNumC = new MutableFloat(1f);\n\n        assertEquals(true, mutNumA.equals(mutNumA));\n        assertEquals(true, mutNumA.equals(mutNumB));\n        assertEquals(true, mutNumB.equals(mutNumA));\n        assertEquals(true, mutNumB.equals(mutNumB));\n        assertEquals(false, mutNumA.equals(mutNumC));\n        assertEquals(false, mutNumB.equals(mutNumC));\n        assertEquals(true, mutNumC.equals(mutNumC));\n        assertEquals(false, mutNumA.equals(null));\n        assertEquals(false, mutNumA.equals(new Float(0f)));\n        assertEquals(false, mutNumA.equals(\"0\"));\n    }",
        "begin_line": 95,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 58)",
            "(line 97,col 9)-(line 97,col 58)",
            "(line 98,col 9)-(line 98,col 58)",
            "(line 100,col 9)-(line 100,col 52)",
            "(line 101,col 9)-(line 101,col 52)",
            "(line 102,col 9)-(line 102,col 52)",
            "(line 103,col 9)-(line 103,col 52)",
            "(line 104,col 9)-(line 104,col 53)",
            "(line 105,col 9)-(line 105,col 53)",
            "(line 106,col 9)-(line 106,col 52)",
            "(line 107,col 9)-(line 107,col 50)",
            "(line 108,col 9)-(line 108,col 59)",
            "(line 109,col 9)-(line 109,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableFloatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableFloatTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableFloatTest.testHashCode()",
        "snippet": "    public void testHashCode() {\n        final MutableFloat mutNumA = new MutableFloat(0f);\n        final MutableFloat mutNumB = new MutableFloat(0f);\n        final MutableFloat mutNumC = new MutableFloat(1f);\n\n        assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());\n        assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());\n        assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());\n        assertEquals(true, mutNumA.hashCode() == new Float(0f).hashCode());\n    }",
        "begin_line": 112,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 58)",
            "(line 114,col 9)-(line 114,col 58)",
            "(line 115,col 9)-(line 115,col 58)",
            "(line 117,col 9)-(line 117,col 69)",
            "(line 118,col 9)-(line 118,col 69)",
            "(line 119,col 9)-(line 119,col 70)",
            "(line 120,col 9)-(line 120,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableFloatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableFloatTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableFloatTest.testCompareTo()",
        "snippet": "    public void testCompareTo() {\n        final MutableFloat mutNum = new MutableFloat(0f);\n\n        assertEquals(0, mutNum.compareTo(new MutableFloat(0f)));\n        assertEquals(+1, mutNum.compareTo(new MutableFloat(-1f)));\n        assertEquals(-1, mutNum.compareTo(new MutableFloat(1f)));\n        try {\n            mutNum.compareTo(null);\n            fail();\n        } catch (NullPointerException ex) {}\n        try {\n            mutNum.compareTo(new Float(0f));\n            fail();\n        } catch (ClassCastException ex) {}\n        try {\n            mutNum.compareTo(\"0\");\n            fail();\n        } catch (ClassCastException ex) {}\n    }",
        "begin_line": 123,
        "end_line": 141,
        "comment": "",
        "child_ranges": [
            "(line 124,col 9)-(line 124,col 57)",
            "(line 126,col 9)-(line 126,col 64)",
            "(line 127,col 9)-(line 127,col 66)",
            "(line 128,col 9)-(line 128,col 65)",
            "(line 129,col 9)-(line 132,col 44)",
            "(line 133,col 9)-(line 136,col 42)",
            "(line 137,col 9)-(line 140,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableFloatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableFloatTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableFloatTest.testPrimitiveValues()",
        "snippet": "    public void testPrimitiveValues() {\n        MutableFloat mutNum = new MutableFloat(1.7F);\n        \n        assertEquals( 1, mutNum.intValue() );\n        assertEquals( 1.7, mutNum.doubleValue(), 0.00001 );\n        assertEquals( (byte) 1, mutNum.byteValue() );\n        assertEquals( (short) 1, mutNum.shortValue() );\n        assertEquals( 1, mutNum.intValue() );\n        assertEquals( 1L, mutNum.longValue() );\n    }",
        "begin_line": 143,
        "end_line": 152,
        "comment": "",
        "child_ranges": [
            "(line 144,col 9)-(line 144,col 53)",
            "(line 146,col 9)-(line 146,col 45)",
            "(line 147,col 9)-(line 147,col 59)",
            "(line 148,col 9)-(line 148,col 53)",
            "(line 149,col 9)-(line 149,col 55)",
            "(line 150,col 9)-(line 150,col 45)",
            "(line 151,col 9)-(line 151,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableFloatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableFloatTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableFloatTest.testToFloat()",
        "snippet": "    public void testToFloat() {\n        assertEquals(new Float(0f), new MutableFloat(0f).toFloat());\n        assertEquals(new Float(12.3f), new MutableFloat(12.3f).toFloat());\n    }",
        "begin_line": 154,
        "end_line": 157,
        "comment": "",
        "child_ranges": [
            "(line 155,col 9)-(line 155,col 68)",
            "(line 156,col 9)-(line 156,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableFloatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableFloatTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableFloatTest.testIncrement()",
        "snippet": "    public void testIncrement() {\n        MutableFloat mutNum = new MutableFloat(1);\n        mutNum.increment();\n        \n        assertEquals(2, mutNum.intValue());\n        assertEquals(2L, mutNum.longValue());\n    }",
        "begin_line": 159,
        "end_line": 165,
        "comment": "",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 50)",
            "(line 161,col 9)-(line 161,col 27)",
            "(line 163,col 9)-(line 163,col 43)",
            "(line 164,col 9)-(line 164,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableFloatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableFloatTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableFloatTest.testDecrement()",
        "snippet": "    public void testDecrement() {\n        MutableFloat mutNum = new MutableFloat(1);\n        mutNum.decrement();\n        \n        assertEquals(0, mutNum.intValue());\n        assertEquals(0L, mutNum.longValue());\n    }",
        "begin_line": 167,
        "end_line": 173,
        "comment": "",
        "child_ranges": [
            "(line 168,col 9)-(line 168,col 50)",
            "(line 169,col 9)-(line 169,col 27)",
            "(line 171,col 9)-(line 171,col 43)",
            "(line 172,col 9)-(line 172,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableFloatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableFloatTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableFloatTest.testAddValuePrimitive()",
        "snippet": "    public void testAddValuePrimitive() {\n        MutableFloat mutNum = new MutableFloat(1);\n        mutNum.add(1.1f);\n        \n        assertEquals(2.1f, mutNum.floatValue(), 0.01f);\n    }",
        "begin_line": 175,
        "end_line": 180,
        "comment": "",
        "child_ranges": [
            "(line 176,col 9)-(line 176,col 50)",
            "(line 177,col 9)-(line 177,col 25)",
            "(line 179,col 9)-(line 179,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableFloatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableFloatTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableFloatTest.testAddValueObject()",
        "snippet": "    public void testAddValueObject() {\n        MutableFloat mutNum = new MutableFloat(1);\n        mutNum.add(new Float(1.1f));\n        \n        assertEquals(2.1f, mutNum.floatValue(), 0.01f);\n    }",
        "begin_line": 182,
        "end_line": 187,
        "comment": "",
        "child_ranges": [
            "(line 183,col 9)-(line 183,col 50)",
            "(line 184,col 9)-(line 184,col 36)",
            "(line 186,col 9)-(line 186,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableFloatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableFloatTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableFloatTest.testSubtractValuePrimitive()",
        "snippet": "    public void testSubtractValuePrimitive() {\n        MutableFloat mutNum = new MutableFloat(1);\n        mutNum.subtract(0.9f);\n        \n        assertEquals(0.1f, mutNum.floatValue(), 0.01f);\n    }",
        "begin_line": 189,
        "end_line": 194,
        "comment": "",
        "child_ranges": [
            "(line 190,col 9)-(line 190,col 50)",
            "(line 191,col 9)-(line 191,col 30)",
            "(line 193,col 9)-(line 193,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableFloatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableFloatTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableFloatTest.testSubtractValueObject()",
        "snippet": "    public void testSubtractValueObject() {\n        MutableFloat mutNum = new MutableFloat(1);\n        mutNum.subtract(new Float(0.9f));\n        \n        assertEquals(0.1f, mutNum.floatValue(), 0.01f);\n    }",
        "begin_line": 196,
        "end_line": 201,
        "comment": "",
        "child_ranges": [
            "(line 197,col 9)-(line 197,col 50)",
            "(line 198,col 9)-(line 198,col 41)",
            "(line 200,col 9)-(line 200,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableFloatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableFloatTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableFloatTest.testToString()",
        "snippet": "    public void testToString() {\n        assertEquals(\"0.0\", new MutableFloat(0f).toString());\n        assertEquals(\"10.0\", new MutableFloat(10f).toString());\n        assertEquals(\"-123.0\", new MutableFloat(-123f).toString());\n    }",
        "begin_line": 203,
        "end_line": 207,
        "comment": "",
        "child_ranges": [
            "(line 204,col 9)-(line 204,col 61)",
            "(line 205,col 9)-(line 205,col 63)",
            "(line 206,col 9)-(line 206,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableByteTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableByteTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableByteTest.MutableByteTest(java.lang.String)",
        "snippet": "    public MutableByteTest(String testName) {\n        super(testName);\n    }",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableByteTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableByteTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableByteTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableByteTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableByteTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableByteTest.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(MutableByteTest.class);\n    }",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableByteTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableByteTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableByteTest.testConstructors()",
        "snippet": "    public void testConstructors() {\n        assertEquals((byte) 0, new MutableByte().byteValue());\n        \n        assertEquals((byte) 1, new MutableByte((byte) 1).byteValue());\n        \n        assertEquals((byte) 2, new MutableByte(new Byte((byte) 2)).byteValue());\n        assertEquals((byte) 3, new MutableByte(new MutableByte((byte) 3)).byteValue());\n        try {\n            new MutableByte(null);\n            fail();\n        } catch (NullPointerException ex) {}\n    }",
        "begin_line": 45,
        "end_line": 56,
        "comment": " ----------------------------------------------------------------",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 62)",
            "(line 48,col 9)-(line 48,col 70)",
            "(line 50,col 9)-(line 50,col 80)",
            "(line 51,col 9)-(line 51,col 87)",
            "(line 52,col 9)-(line 55,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableByteTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableByteTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableByteTest.testGetSet()",
        "snippet": "    public void testGetSet() {\n        final MutableByte mutNum = new MutableByte((byte) 0);\n        assertEquals((byte) 0, new MutableByte().byteValue());\n        assertEquals(new Byte((byte) 0), new MutableByte().getValue());\n        \n        mutNum.setValue((byte) 1);\n        assertEquals((byte) 1, mutNum.byteValue());\n        assertEquals(new Byte((byte) 1), mutNum.getValue());\n        \n        mutNum.setValue(new Byte((byte) 2));\n        assertEquals((byte) 2, mutNum.byteValue());\n        assertEquals(new Byte((byte) 2), mutNum.getValue());\n        \n        mutNum.setValue(new MutableByte((byte) 3));\n        assertEquals((byte) 3, mutNum.byteValue());\n        assertEquals(new Byte((byte) 3), mutNum.getValue());\n        try {\n            mutNum.setValue(null);\n            fail();\n        } catch (NullPointerException ex) {}\n        try {\n            mutNum.setValue(\"0\");\n            fail();\n        } catch (ClassCastException ex) {}\n    }",
        "begin_line": 58,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 61)",
            "(line 60,col 9)-(line 60,col 62)",
            "(line 61,col 9)-(line 61,col 71)",
            "(line 63,col 9)-(line 63,col 34)",
            "(line 64,col 9)-(line 64,col 51)",
            "(line 65,col 9)-(line 65,col 60)",
            "(line 67,col 9)-(line 67,col 44)",
            "(line 68,col 9)-(line 68,col 51)",
            "(line 69,col 9)-(line 69,col 60)",
            "(line 71,col 9)-(line 71,col 51)",
            "(line 72,col 9)-(line 72,col 51)",
            "(line 73,col 9)-(line 73,col 60)",
            "(line 74,col 9)-(line 77,col 44)",
            "(line 78,col 9)-(line 81,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableByteTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableByteTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableByteTest.testEquals()",
        "snippet": "    public void testEquals() {\n        final MutableByte mutNumA = new MutableByte((byte) 0);\n        final MutableByte mutNumB = new MutableByte((byte) 0);\n        final MutableByte mutNumC = new MutableByte((byte) 1);\n\n        assertEquals(true, mutNumA.equals(mutNumA));\n        assertEquals(true, mutNumA.equals(mutNumB));\n        assertEquals(true, mutNumB.equals(mutNumA));\n        assertEquals(true, mutNumB.equals(mutNumB));\n        assertEquals(false, mutNumA.equals(mutNumC));\n        assertEquals(false, mutNumB.equals(mutNumC));\n        assertEquals(true, mutNumC.equals(mutNumC));\n        assertEquals(false, mutNumA.equals(null));\n        assertEquals(false, mutNumA.equals(new Byte((byte) 0)));\n        assertEquals(false, mutNumA.equals(\"0\"));\n    }",
        "begin_line": 84,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 62)",
            "(line 86,col 9)-(line 86,col 62)",
            "(line 87,col 9)-(line 87,col 62)",
            "(line 89,col 9)-(line 89,col 52)",
            "(line 90,col 9)-(line 90,col 52)",
            "(line 91,col 9)-(line 91,col 52)",
            "(line 92,col 9)-(line 92,col 52)",
            "(line 93,col 9)-(line 93,col 53)",
            "(line 94,col 9)-(line 94,col 53)",
            "(line 95,col 9)-(line 95,col 52)",
            "(line 96,col 9)-(line 96,col 50)",
            "(line 97,col 9)-(line 97,col 64)",
            "(line 98,col 9)-(line 98,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableByteTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableByteTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableByteTest.testHashCode()",
        "snippet": "    public void testHashCode() {\n        final MutableByte mutNumA = new MutableByte((byte) 0);\n        final MutableByte mutNumB = new MutableByte((byte) 0);\n        final MutableByte mutNumC = new MutableByte((byte) 1);\n\n        assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());\n        assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());\n        assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());\n        assertEquals(true, mutNumA.hashCode() == new Byte((byte) 0).hashCode());\n    }",
        "begin_line": 101,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 62)",
            "(line 103,col 9)-(line 103,col 62)",
            "(line 104,col 9)-(line 104,col 62)",
            "(line 106,col 9)-(line 106,col 69)",
            "(line 107,col 9)-(line 107,col 69)",
            "(line 108,col 9)-(line 108,col 70)",
            "(line 109,col 9)-(line 109,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableByteTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableByteTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableByteTest.testCompareTo()",
        "snippet": "    public void testCompareTo() {\n        final MutableByte mutNum = new MutableByte((byte) 0);\n\n        assertEquals((byte) 0, mutNum.compareTo(new MutableByte((byte) 0)));\n        assertEquals((byte) +1, mutNum.compareTo(new MutableByte((byte) -1)));\n        assertEquals((byte) -1, mutNum.compareTo(new MutableByte((byte) 1)));\n        try {\n            mutNum.compareTo(null);\n            fail();\n        } catch (NullPointerException ex) {}\n        try {\n            mutNum.compareTo(new Byte((byte) 0));\n            fail();\n        } catch (ClassCastException ex) {}\n        try {\n            mutNum.compareTo(\"0\");\n            fail();\n        } catch (ClassCastException ex) {}\n    }",
        "begin_line": 112,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 61)",
            "(line 115,col 9)-(line 115,col 76)",
            "(line 116,col 9)-(line 116,col 78)",
            "(line 117,col 9)-(line 117,col 77)",
            "(line 118,col 9)-(line 121,col 44)",
            "(line 122,col 9)-(line 125,col 42)",
            "(line 126,col 9)-(line 129,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableByteTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableByteTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableByteTest.testPrimitiveValues()",
        "snippet": "    public void testPrimitiveValues() {\n        MutableByte mutNum = new MutableByte( (byte) 1 );\n        \n        assertEquals( 1.0F, mutNum.floatValue(), 0 );\n        assertEquals( 1.0, mutNum.doubleValue(), 0 );\n        assertEquals( (byte) 1, mutNum.byteValue() );\n        assertEquals( (short) 1, mutNum.shortValue() );\n        assertEquals( 1, mutNum.intValue() );\n        assertEquals( 1L, mutNum.longValue() );\n    }",
        "begin_line": 132,
        "end_line": 141,
        "comment": "",
        "child_ranges": [
            "(line 133,col 9)-(line 133,col 57)",
            "(line 135,col 9)-(line 135,col 53)",
            "(line 136,col 9)-(line 136,col 53)",
            "(line 137,col 9)-(line 137,col 53)",
            "(line 138,col 9)-(line 138,col 55)",
            "(line 139,col 9)-(line 139,col 45)",
            "(line 140,col 9)-(line 140,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableByteTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableByteTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableByteTest.testToByte()",
        "snippet": "    public void testToByte() {\n        assertEquals(new Byte((byte) 0), new MutableByte((byte) 0).toByte());\n        assertEquals(new Byte((byte) 123), new MutableByte((byte) 123).toByte());\n    }",
        "begin_line": 143,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 144,col 9)-(line 144,col 77)",
            "(line 145,col 9)-(line 145,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableByteTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableByteTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableByteTest.testIncrement()",
        "snippet": "    public void testIncrement() {\n        MutableByte mutNum = new MutableByte((byte) 1);\n        mutNum.increment();\n        \n        assertEquals(2, mutNum.intValue());\n        assertEquals(2L, mutNum.longValue());\n    }",
        "begin_line": 148,
        "end_line": 154,
        "comment": "",
        "child_ranges": [
            "(line 149,col 9)-(line 149,col 55)",
            "(line 150,col 9)-(line 150,col 27)",
            "(line 152,col 9)-(line 152,col 43)",
            "(line 153,col 9)-(line 153,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableByteTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableByteTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableByteTest.testDecrement()",
        "snippet": "    public void testDecrement() {\n        MutableByte mutNum = new MutableByte((byte) 1);\n        mutNum.decrement();\n        \n        assertEquals(0, mutNum.intValue());\n        assertEquals(0L, mutNum.longValue());\n    }",
        "begin_line": 156,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 55)",
            "(line 158,col 9)-(line 158,col 27)",
            "(line 160,col 9)-(line 160,col 43)",
            "(line 161,col 9)-(line 161,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableByteTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableByteTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableByteTest.testAddValuePrimitive()",
        "snippet": "    public void testAddValuePrimitive() {\n        MutableByte mutNum = new MutableByte((byte) 1);\n        mutNum.add((byte)1);\n        \n        assertEquals((byte) 2, mutNum.byteValue());\n    }",
        "begin_line": 164,
        "end_line": 169,
        "comment": "",
        "child_ranges": [
            "(line 165,col 9)-(line 165,col 55)",
            "(line 166,col 9)-(line 166,col 28)",
            "(line 168,col 9)-(line 168,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableByteTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableByteTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableByteTest.testAddValueObject()",
        "snippet": "    public void testAddValueObject() {\n        MutableByte mutNum = new MutableByte((byte) 1);\n        mutNum.add(new Integer(1));\n        \n        assertEquals((byte) 2, mutNum.byteValue());\n    }",
        "begin_line": 171,
        "end_line": 176,
        "comment": "",
        "child_ranges": [
            "(line 172,col 9)-(line 172,col 55)",
            "(line 173,col 9)-(line 173,col 35)",
            "(line 175,col 9)-(line 175,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableByteTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableByteTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableByteTest.testSubtractValuePrimitive()",
        "snippet": "    public void testSubtractValuePrimitive() {\n        MutableByte mutNum = new MutableByte((byte) 1);\n        mutNum.subtract((byte) 1);\n        \n        assertEquals((byte) 0, mutNum.byteValue());\n    }",
        "begin_line": 178,
        "end_line": 183,
        "comment": "",
        "child_ranges": [
            "(line 179,col 9)-(line 179,col 55)",
            "(line 180,col 9)-(line 180,col 34)",
            "(line 182,col 9)-(line 182,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableByteTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableByteTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableByteTest.testSubtractValueObject()",
        "snippet": "    public void testSubtractValueObject() {\n        MutableByte mutNum = new MutableByte((byte) 1);\n        mutNum.subtract(new Integer(1));\n        \n        assertEquals((byte) 0, mutNum.byteValue());\n    }",
        "begin_line": 185,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 186,col 9)-(line 186,col 55)",
            "(line 187,col 9)-(line 187,col 40)",
            "(line 189,col 9)-(line 189,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableByteTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableByteTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableByteTest.testToString()",
        "snippet": "    public void testToString() {\n        assertEquals(\"0\", new MutableByte((byte) 0).toString());\n        assertEquals(\"10\", new MutableByte((byte) 10).toString());\n        assertEquals(\"-123\", new MutableByte((byte) -123).toString());\n    }",
        "begin_line": 192,
        "end_line": 196,
        "comment": "",
        "child_ranges": [
            "(line 193,col 9)-(line 193,col 64)",
            "(line 194,col 9)-(line 194,col 66)",
            "(line 195,col 9)-(line 195,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableIntTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableIntTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableIntTest.MutableIntTest(java.lang.String)",
        "snippet": "    public MutableIntTest(String testName) {\n        super(testName);\n    }",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableIntTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableIntTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableIntTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableIntTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableIntTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableIntTest.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(MutableIntTest.class);\n    }",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableIntTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableIntTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableIntTest.testConstructors()",
        "snippet": "    public void testConstructors() {\n        assertEquals(0, new MutableInt().intValue());\n        \n        assertEquals(1, new MutableInt(1).intValue());\n        \n        assertEquals(2, new MutableInt(new Integer(2)).intValue());\n        assertEquals(3, new MutableInt(new MutableLong(3)).intValue());\n        try {\n            new MutableInt(null);\n            fail();\n        } catch (NullPointerException ex) {}\n    }",
        "begin_line": 45,
        "end_line": 56,
        "comment": " ----------------------------------------------------------------",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 53)",
            "(line 48,col 9)-(line 48,col 54)",
            "(line 50,col 9)-(line 50,col 67)",
            "(line 51,col 9)-(line 51,col 71)",
            "(line 52,col 9)-(line 55,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableIntTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableIntTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableIntTest.testGetSet()",
        "snippet": "    public void testGetSet() {\n        final MutableInt mutNum = new MutableInt(0);\n        assertEquals(0, new MutableInt().intValue());\n        assertEquals(new Integer(0), new MutableInt().getValue());\n        \n        mutNum.setValue(1);\n        assertEquals(1, mutNum.intValue());\n        assertEquals(new Integer(1), mutNum.getValue());\n        \n        mutNum.setValue(new Integer(2));\n        assertEquals(2, mutNum.intValue());\n        assertEquals(new Integer(2), mutNum.getValue());\n        \n        mutNum.setValue(new MutableLong(3));\n        assertEquals(3, mutNum.intValue());\n        assertEquals(new Integer(3), mutNum.getValue());\n        try {\n            mutNum.setValue(null);\n            fail();\n        } catch (NullPointerException ex) {}\n        try {\n            mutNum.setValue(\"0\");\n            fail();\n        } catch (ClassCastException ex) {}\n    }",
        "begin_line": 58,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 52)",
            "(line 60,col 9)-(line 60,col 53)",
            "(line 61,col 9)-(line 61,col 66)",
            "(line 63,col 9)-(line 63,col 27)",
            "(line 64,col 9)-(line 64,col 43)",
            "(line 65,col 9)-(line 65,col 56)",
            "(line 67,col 9)-(line 67,col 40)",
            "(line 68,col 9)-(line 68,col 43)",
            "(line 69,col 9)-(line 69,col 56)",
            "(line 71,col 9)-(line 71,col 44)",
            "(line 72,col 9)-(line 72,col 43)",
            "(line 73,col 9)-(line 73,col 56)",
            "(line 74,col 9)-(line 77,col 44)",
            "(line 78,col 9)-(line 81,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableIntTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableIntTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableIntTest.testEquals()",
        "snippet": "    public void testEquals() {\n        this.testEquals(new MutableInt(0), new MutableInt(0), new MutableInt(1));\n        // Should Numbers be supported? GaryG July-21-2005.\n        //this.testEquals(mutNumA, new Integer(0), mutNumC);\n    }",
        "begin_line": 84,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableIntTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableIntTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableIntTest.testEquals(java.lang.Number, java.lang.Number, java.lang.Number)",
        "snippet": "    void testEquals(final Number numA, final Number numB, final Number numC) {\n        assertEquals(true, numA.equals(numA));\n        assertEquals(true, numA.equals(numB));\n        assertEquals(true, numB.equals(numA));\n        assertEquals(true, numB.equals(numB));\n        assertEquals(false, numA.equals(numC));\n        assertEquals(false, numB.equals(numC));\n        assertEquals(true, numC.equals(numC));\n        assertEquals(false, numA.equals(null));\n        assertEquals(false, numA.equals(new Integer(0)));\n        assertEquals(false, numA.equals(\"0\"));\n    }",
        "begin_line": 95,
        "end_line": 106,
        "comment": "\n     * @param numA must not be a 0 Integer; must not equal numC.\n     * @param numB must equal numA; must not equal numC.\n     * @param numC must not equal numA; must not equal numC.\n     ",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 46)",
            "(line 97,col 9)-(line 97,col 46)",
            "(line 98,col 9)-(line 98,col 46)",
            "(line 99,col 9)-(line 99,col 46)",
            "(line 100,col 9)-(line 100,col 47)",
            "(line 101,col 9)-(line 101,col 47)",
            "(line 102,col 9)-(line 102,col 46)",
            "(line 103,col 9)-(line 103,col 47)",
            "(line 104,col 9)-(line 104,col 57)",
            "(line 105,col 9)-(line 105,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableIntTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableIntTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableIntTest.testHashCode()",
        "snippet": "    public void testHashCode() {\n        final MutableInt mutNumA = new MutableInt(0);\n        final MutableInt mutNumB = new MutableInt(0);\n        final MutableInt mutNumC = new MutableInt(1);\n\n        assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());\n        assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());\n        assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());\n        assertEquals(true, mutNumA.hashCode() == new Integer(0).hashCode());\n    }",
        "begin_line": 108,
        "end_line": 117,
        "comment": "",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 53)",
            "(line 110,col 9)-(line 110,col 53)",
            "(line 111,col 9)-(line 111,col 53)",
            "(line 113,col 9)-(line 113,col 69)",
            "(line 114,col 9)-(line 114,col 69)",
            "(line 115,col 9)-(line 115,col 70)",
            "(line 116,col 9)-(line 116,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableIntTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableIntTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableIntTest.testCompareTo()",
        "snippet": "    public void testCompareTo() {\n        final MutableInt mutNum = new MutableInt(0);\n\n        assertEquals(0, mutNum.compareTo(new MutableInt(0)));\n        assertEquals(+1, mutNum.compareTo(new MutableInt(-1)));\n        assertEquals(-1, mutNum.compareTo(new MutableInt(1)));\n        try {\n            mutNum.compareTo(null);\n            fail();\n        } catch (NullPointerException ex) {}\n        try {\n            mutNum.compareTo(new Integer(0));\n            fail();\n        } catch (ClassCastException ex) {}\n        try {\n            mutNum.compareTo(\"0\");\n            fail();\n        } catch (ClassCastException ex) {}\n    }",
        "begin_line": 119,
        "end_line": 137,
        "comment": "",
        "child_ranges": [
            "(line 120,col 9)-(line 120,col 52)",
            "(line 122,col 9)-(line 122,col 61)",
            "(line 123,col 9)-(line 123,col 63)",
            "(line 124,col 9)-(line 124,col 62)",
            "(line 125,col 9)-(line 128,col 44)",
            "(line 129,col 9)-(line 132,col 42)",
            "(line 133,col 9)-(line 136,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableIntTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableIntTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableIntTest.testPrimitiveValues()",
        "snippet": "    public void testPrimitiveValues() {\n        MutableInt mutNum = new MutableInt(1);\n        \n        assertEquals( (byte) 1, mutNum.byteValue() );\n        assertEquals( (short) 1, mutNum.shortValue() );\n        assertEquals( 1.0F, mutNum.floatValue(), 0 );\n        assertEquals( 1.0, mutNum.doubleValue(), 0 );\n        assertEquals( 1L, mutNum.longValue() );\n    }",
        "begin_line": 139,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 140,col 9)-(line 140,col 46)",
            "(line 142,col 9)-(line 142,col 53)",
            "(line 143,col 9)-(line 143,col 55)",
            "(line 144,col 9)-(line 144,col 53)",
            "(line 145,col 9)-(line 145,col 53)",
            "(line 146,col 9)-(line 146,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableIntTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableIntTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableIntTest.testToInteger()",
        "snippet": "    public void testToInteger() {\n        assertEquals(new Integer(0), new MutableInt(0).toInteger());\n        assertEquals(new Integer(123), new MutableInt(123).toInteger());\n    }",
        "begin_line": 149,
        "end_line": 152,
        "comment": "",
        "child_ranges": [
            "(line 150,col 9)-(line 150,col 68)",
            "(line 151,col 9)-(line 151,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableIntTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableIntTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableIntTest.testIncrement()",
        "snippet": "    public void testIncrement() {\n        MutableInt mutNum = new MutableInt(1);\n        mutNum.increment();\n        \n        assertEquals(2, mutNum.intValue());\n        assertEquals(2L, mutNum.longValue());\n    }",
        "begin_line": 154,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 155,col 9)-(line 155,col 46)",
            "(line 156,col 9)-(line 156,col 27)",
            "(line 158,col 9)-(line 158,col 43)",
            "(line 159,col 9)-(line 159,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableIntTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableIntTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableIntTest.testDecrement()",
        "snippet": "    public void testDecrement() {\n        MutableInt mutNum = new MutableInt(1);\n        mutNum.decrement();\n        \n        assertEquals(0, mutNum.intValue());\n        assertEquals(0L, mutNum.longValue());\n    }",
        "begin_line": 162,
        "end_line": 168,
        "comment": "",
        "child_ranges": [
            "(line 163,col 9)-(line 163,col 46)",
            "(line 164,col 9)-(line 164,col 27)",
            "(line 166,col 9)-(line 166,col 43)",
            "(line 167,col 9)-(line 167,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableIntTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableIntTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableIntTest.testAddValuePrimitive()",
        "snippet": "    public void testAddValuePrimitive() {\n        MutableInt mutNum = new MutableInt(1);\n        mutNum.add(1);\n        \n        assertEquals(2, mutNum.intValue());\n        assertEquals(2L, mutNum.longValue());\n    }",
        "begin_line": 170,
        "end_line": 176,
        "comment": "",
        "child_ranges": [
            "(line 171,col 9)-(line 171,col 46)",
            "(line 172,col 9)-(line 172,col 22)",
            "(line 174,col 9)-(line 174,col 43)",
            "(line 175,col 9)-(line 175,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableIntTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableIntTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableIntTest.testAddValueObject()",
        "snippet": "    public void testAddValueObject() {\n        MutableInt mutNum = new MutableInt(1);\n        mutNum.add(new Integer(1));\n        \n        assertEquals(2, mutNum.intValue());\n        assertEquals(2L, mutNum.longValue());\n    }",
        "begin_line": 178,
        "end_line": 184,
        "comment": "",
        "child_ranges": [
            "(line 179,col 9)-(line 179,col 46)",
            "(line 180,col 9)-(line 180,col 35)",
            "(line 182,col 9)-(line 182,col 43)",
            "(line 183,col 9)-(line 183,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableIntTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableIntTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableIntTest.testSubtractValuePrimitive()",
        "snippet": "    public void testSubtractValuePrimitive() {\n        MutableInt mutNum = new MutableInt(1);\n        mutNum.subtract(1);\n        \n        assertEquals(0, mutNum.intValue());\n        assertEquals(0L, mutNum.longValue());\n    }",
        "begin_line": 186,
        "end_line": 192,
        "comment": "",
        "child_ranges": [
            "(line 187,col 9)-(line 187,col 46)",
            "(line 188,col 9)-(line 188,col 27)",
            "(line 190,col 9)-(line 190,col 43)",
            "(line 191,col 9)-(line 191,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableIntTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableIntTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableIntTest.testSubtractValueObject()",
        "snippet": "    public void testSubtractValueObject() {\n        MutableInt mutNum = new MutableInt(1);\n        mutNum.subtract(new Integer(1));\n        \n        assertEquals(0, mutNum.intValue());\n        assertEquals(0L, mutNum.longValue());\n    }",
        "begin_line": 194,
        "end_line": 200,
        "comment": "",
        "child_ranges": [
            "(line 195,col 9)-(line 195,col 46)",
            "(line 196,col 9)-(line 196,col 40)",
            "(line 198,col 9)-(line 198,col 43)",
            "(line 199,col 9)-(line 199,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableIntTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableIntTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableIntTest.testToString()",
        "snippet": "    public void testToString() {\n        assertEquals(\"0\", new MutableInt(0).toString());\n        assertEquals(\"10\", new MutableInt(10).toString());\n        assertEquals(\"-123\", new MutableInt(-123).toString());\n    }",
        "begin_line": 202,
        "end_line": 206,
        "comment": "",
        "child_ranges": [
            "(line 203,col 9)-(line 203,col 56)",
            "(line 204,col 9)-(line 204,col 58)",
            "(line 205,col 9)-(line 205,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableShortTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableShortTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableShortTest.MutableShortTest(java.lang.String)",
        "snippet": "    public MutableShortTest(String testName) {\n        super(testName);\n    }",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableShortTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableShortTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableShortTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableShortTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableShortTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableShortTest.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(MutableShortTest.class);\n    }",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableShortTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableShortTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableShortTest.testConstructors()",
        "snippet": "    public void testConstructors() {\n        assertEquals((short) 0, new MutableShort().shortValue());\n        \n        assertEquals((short) 1, new MutableShort((short) 1).shortValue());\n        \n        assertEquals((short) 2, new MutableShort(new Short((short) 2)).shortValue());\n        assertEquals((short) 3, new MutableShort(new MutableShort((short) 3)).shortValue());\n        try {\n            new MutableShort(null);\n            fail();\n        } catch (NullPointerException ex) {}\n    }",
        "begin_line": 45,
        "end_line": 56,
        "comment": " ----------------------------------------------------------------",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 65)",
            "(line 48,col 9)-(line 48,col 74)",
            "(line 50,col 9)-(line 50,col 85)",
            "(line 51,col 9)-(line 51,col 92)",
            "(line 52,col 9)-(line 55,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableShortTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableShortTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableShortTest.testGetSet()",
        "snippet": "    public void testGetSet() {\n        final MutableShort mutNum = new MutableShort((short) 0);\n        assertEquals((short) 0, new MutableShort().shortValue());\n        assertEquals(new Short((short) 0), new MutableShort().getValue());\n        \n        mutNum.setValue((short) 1);\n        assertEquals((short) 1, mutNum.shortValue());\n        assertEquals(new Short((short) 1), mutNum.getValue());\n        \n        mutNum.setValue(new Short((short) 2));\n        assertEquals((short) 2, mutNum.shortValue());\n        assertEquals(new Short((short) 2), mutNum.getValue());\n        \n        mutNum.setValue(new MutableShort((short) 3));\n        assertEquals((short) 3, mutNum.shortValue());\n        assertEquals(new Short((short) 3), mutNum.getValue());\n        try {\n            mutNum.setValue(null);\n            fail();\n        } catch (NullPointerException ex) {}\n        try {\n            mutNum.setValue(\"0\");\n            fail();\n        } catch (ClassCastException ex) {}\n    }",
        "begin_line": 58,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 64)",
            "(line 60,col 9)-(line 60,col 65)",
            "(line 61,col 9)-(line 61,col 74)",
            "(line 63,col 9)-(line 63,col 35)",
            "(line 64,col 9)-(line 64,col 53)",
            "(line 65,col 9)-(line 65,col 62)",
            "(line 67,col 9)-(line 67,col 46)",
            "(line 68,col 9)-(line 68,col 53)",
            "(line 69,col 9)-(line 69,col 62)",
            "(line 71,col 9)-(line 71,col 53)",
            "(line 72,col 9)-(line 72,col 53)",
            "(line 73,col 9)-(line 73,col 62)",
            "(line 74,col 9)-(line 77,col 44)",
            "(line 78,col 9)-(line 81,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableShortTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableShortTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableShortTest.testEquals()",
        "snippet": "    public void testEquals() {\n        final MutableShort mutNumA = new MutableShort((short) 0);\n        final MutableShort mutNumB = new MutableShort((short) 0);\n        final MutableShort mutNumC = new MutableShort((short) 1);\n\n        assertEquals(true, mutNumA.equals(mutNumA));\n        assertEquals(true, mutNumA.equals(mutNumB));\n        assertEquals(true, mutNumB.equals(mutNumA));\n        assertEquals(true, mutNumB.equals(mutNumB));\n        assertEquals(false, mutNumA.equals(mutNumC));\n        assertEquals(false, mutNumB.equals(mutNumC));\n        assertEquals(true, mutNumC.equals(mutNumC));\n        assertEquals(false, mutNumA.equals(null));\n        assertEquals(false, mutNumA.equals(new Short((short) 0)));\n        assertEquals(false, mutNumA.equals(\"0\"));\n    }",
        "begin_line": 84,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 65)",
            "(line 86,col 9)-(line 86,col 65)",
            "(line 87,col 9)-(line 87,col 65)",
            "(line 89,col 9)-(line 89,col 52)",
            "(line 90,col 9)-(line 90,col 52)",
            "(line 91,col 9)-(line 91,col 52)",
            "(line 92,col 9)-(line 92,col 52)",
            "(line 93,col 9)-(line 93,col 53)",
            "(line 94,col 9)-(line 94,col 53)",
            "(line 95,col 9)-(line 95,col 52)",
            "(line 96,col 9)-(line 96,col 50)",
            "(line 97,col 9)-(line 97,col 66)",
            "(line 98,col 9)-(line 98,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableShortTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableShortTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableShortTest.testHashCode()",
        "snippet": "    public void testHashCode() {\n        final MutableShort mutNumA = new MutableShort((short) 0);\n        final MutableShort mutNumB = new MutableShort((short) 0);\n        final MutableShort mutNumC = new MutableShort((short) 1);\n\n        assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());\n        assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());\n        assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());\n        assertEquals(true, mutNumA.hashCode() == new Short((short) 0).hashCode());\n    }",
        "begin_line": 101,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 65)",
            "(line 103,col 9)-(line 103,col 65)",
            "(line 104,col 9)-(line 104,col 65)",
            "(line 106,col 9)-(line 106,col 69)",
            "(line 107,col 9)-(line 107,col 69)",
            "(line 108,col 9)-(line 108,col 70)",
            "(line 109,col 9)-(line 109,col 82)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableShortTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableShortTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableShortTest.testCompareTo()",
        "snippet": "    public void testCompareTo() {\n        final MutableShort mutNum = new MutableShort((short) 0);\n\n        assertEquals((short) 0, mutNum.compareTo(new MutableShort((short) 0)));\n        assertEquals((short) +1, mutNum.compareTo(new MutableShort((short) -1)));\n        assertEquals((short) -1, mutNum.compareTo(new MutableShort((short) 1)));\n        try {\n            mutNum.compareTo(null);\n            fail();\n        } catch (NullPointerException ex) {}\n        try {\n            mutNum.compareTo(new Short((short) 0));\n            fail();\n        } catch (ClassCastException ex) {}\n        try {\n            mutNum.compareTo(\"0\");\n            fail();\n        } catch (ClassCastException ex) {}\n    }",
        "begin_line": 112,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 64)",
            "(line 115,col 9)-(line 115,col 79)",
            "(line 116,col 9)-(line 116,col 81)",
            "(line 117,col 9)-(line 117,col 80)",
            "(line 118,col 9)-(line 121,col 44)",
            "(line 122,col 9)-(line 125,col 42)",
            "(line 126,col 9)-(line 129,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableShortTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableShortTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableShortTest.testPrimitiveValues()",
        "snippet": "    public void testPrimitiveValues() {\n        MutableShort mutNum = new MutableShort( (short) 1 );\n        \n        assertEquals( 1.0F, mutNum.floatValue(), 0 );\n        assertEquals( 1.0, mutNum.doubleValue(), 0 );\n        assertEquals( (byte) 1, mutNum.byteValue() );\n        assertEquals( (short) 1, mutNum.shortValue() );\n        assertEquals( 1, mutNum.intValue() );\n        assertEquals( 1L, mutNum.longValue() );\n    }",
        "begin_line": 132,
        "end_line": 141,
        "comment": "",
        "child_ranges": [
            "(line 133,col 9)-(line 133,col 60)",
            "(line 135,col 9)-(line 135,col 53)",
            "(line 136,col 9)-(line 136,col 53)",
            "(line 137,col 9)-(line 137,col 53)",
            "(line 138,col 9)-(line 138,col 55)",
            "(line 139,col 9)-(line 139,col 45)",
            "(line 140,col 9)-(line 140,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableShortTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableShortTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableShortTest.testToShort()",
        "snippet": "    public void testToShort() {\n        assertEquals(new Short((short) 0), new MutableShort((short) 0).toShort());\n        assertEquals(new Short((short) 123), new MutableShort((short) 123).toShort());\n    }",
        "begin_line": 143,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 144,col 9)-(line 144,col 82)",
            "(line 145,col 9)-(line 145,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableShortTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableShortTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableShortTest.testIncrement()",
        "snippet": "    public void testIncrement() {\n        MutableShort mutNum = new MutableShort((short) 1);\n        mutNum.increment();\n        \n        assertEquals(2, mutNum.intValue());\n        assertEquals(2L, mutNum.longValue());\n    }",
        "begin_line": 148,
        "end_line": 154,
        "comment": "",
        "child_ranges": [
            "(line 149,col 9)-(line 149,col 58)",
            "(line 150,col 9)-(line 150,col 27)",
            "(line 152,col 9)-(line 152,col 43)",
            "(line 153,col 9)-(line 153,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableShortTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableShortTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableShortTest.testDecrement()",
        "snippet": "    public void testDecrement() {\n        MutableShort mutNum = new MutableShort((short) 1);\n        mutNum.decrement();\n        \n        assertEquals(0, mutNum.intValue());\n        assertEquals(0L, mutNum.longValue());\n    }",
        "begin_line": 156,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 58)",
            "(line 158,col 9)-(line 158,col 27)",
            "(line 160,col 9)-(line 160,col 43)",
            "(line 161,col 9)-(line 161,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableShortTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableShortTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableShortTest.testAddValuePrimitive()",
        "snippet": "    public void testAddValuePrimitive() {\n        MutableShort mutNum = new MutableShort((short) 1);\n        mutNum.add((short) 1);\n        \n        assertEquals((short) 2, mutNum.shortValue());\n    }",
        "begin_line": 164,
        "end_line": 169,
        "comment": "",
        "child_ranges": [
            "(line 165,col 9)-(line 165,col 58)",
            "(line 166,col 9)-(line 166,col 30)",
            "(line 168,col 9)-(line 168,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableShortTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableShortTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableShortTest.testAddValueObject()",
        "snippet": "    public void testAddValueObject() {\n        MutableShort mutNum = new MutableShort((short) 1);\n        mutNum.add(new Short((short) 1));\n        \n        assertEquals((short) 2, mutNum.shortValue());\n    }",
        "begin_line": 171,
        "end_line": 176,
        "comment": "",
        "child_ranges": [
            "(line 172,col 9)-(line 172,col 58)",
            "(line 173,col 9)-(line 173,col 41)",
            "(line 175,col 9)-(line 175,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableShortTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableShortTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableShortTest.testSubtractValuePrimitive()",
        "snippet": "    public void testSubtractValuePrimitive() {\n        MutableShort mutNum = new MutableShort((short) 1);\n        mutNum.subtract((short) 1);\n        \n        assertEquals((short) 0, mutNum.shortValue());\n    }",
        "begin_line": 178,
        "end_line": 183,
        "comment": "",
        "child_ranges": [
            "(line 179,col 9)-(line 179,col 58)",
            "(line 180,col 9)-(line 180,col 35)",
            "(line 182,col 9)-(line 182,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableShortTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableShortTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableShortTest.testSubtractValueObject()",
        "snippet": "    public void testSubtractValueObject() {\n        MutableShort mutNum = new MutableShort((short) 1);\n        mutNum.subtract(new Short((short) 1));\n        \n        assertEquals((short) 0, mutNum.shortValue());\n    }",
        "begin_line": 185,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 186,col 9)-(line 186,col 58)",
            "(line 187,col 9)-(line 187,col 46)",
            "(line 189,col 9)-(line 189,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableShortTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableShortTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableShortTest.testToString()",
        "snippet": "    public void testToString() {\n        assertEquals(\"0\", new MutableShort((short) 0).toString());\n        assertEquals(\"10\", new MutableShort((short) 10).toString());\n        assertEquals(\"-123\", new MutableShort((short) -123).toString());\n    }",
        "begin_line": 192,
        "end_line": 196,
        "comment": "",
        "child_ranges": [
            "(line 193,col 9)-(line 193,col 66)",
            "(line 194,col 9)-(line 194,col 68)",
            "(line 195,col 9)-(line 195,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableObjectTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableObjectTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableObjectTest.MutableObjectTest(java.lang.String)",
        "snippet": "    public MutableObjectTest(String testName) {\n        super(testName);\n    }",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableObjectTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableObjectTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableObjectTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableObjectTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableObjectTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableObjectTest.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(MutableObjectTest.class);\n    }",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableObjectTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableObjectTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableObjectTest.testConstructors()",
        "snippet": "    public void testConstructors() {\n        assertEquals(null, new MutableObject().getValue());\n        \n        Integer i = new Integer(6);\n        assertSame(i, new MutableObject(i).getValue());\n        assertSame(\"HI\", new MutableObject(\"HI\").getValue());\n        assertSame(null, new MutableObject(null).getValue());\n    }",
        "begin_line": 45,
        "end_line": 52,
        "comment": " ----------------------------------------------------------------",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 59)",
            "(line 48,col 9)-(line 48,col 35)",
            "(line 49,col 9)-(line 49,col 55)",
            "(line 50,col 9)-(line 50,col 61)",
            "(line 51,col 9)-(line 51,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableObjectTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableObjectTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableObjectTest.testGetSet()",
        "snippet": "    public void testGetSet() {\n        final MutableObject mutNum = new MutableObject();\n        assertEquals(null, new MutableObject().getValue());\n        \n        mutNum.setValue(\"HELLO\");\n        assertSame(\"HELLO\", mutNum.getValue());\n        \n        mutNum.setValue(null);\n        assertSame(null, mutNum.getValue());\n    }",
        "begin_line": 54,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 57)",
            "(line 56,col 9)-(line 56,col 59)",
            "(line 58,col 9)-(line 58,col 33)",
            "(line 59,col 9)-(line 59,col 47)",
            "(line 61,col 9)-(line 61,col 30)",
            "(line 62,col 9)-(line 62,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableObjectTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableObjectTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableObjectTest.testEquals()",
        "snippet": "    public void testEquals() {\n        final MutableObject mutNumA = new MutableObject(\"ALPHA\");\n        final MutableObject mutNumB = new MutableObject(\"ALPHA\");\n        final MutableObject mutNumC = new MutableObject(\"BETA\");\n        final MutableObject mutNumD = new MutableObject(null);\n\n        assertEquals(true, mutNumA.equals(mutNumA));\n        assertEquals(true, mutNumA.equals(mutNumB));\n        assertEquals(true, mutNumB.equals(mutNumA));\n        assertEquals(true, mutNumB.equals(mutNumB));\n        assertEquals(false, mutNumA.equals(mutNumC));\n        assertEquals(false, mutNumB.equals(mutNumC));\n        assertEquals(true, mutNumC.equals(mutNumC));\n        assertEquals(false, mutNumA.equals(mutNumD));\n        assertEquals(true, mutNumD.equals(mutNumD));\n        \n        assertEquals(false, mutNumA.equals(null));\n        assertEquals(false, mutNumA.equals(new Object()));\n        assertEquals(false, mutNumA.equals(\"0\"));\n    }",
        "begin_line": 65,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 65)",
            "(line 67,col 9)-(line 67,col 65)",
            "(line 68,col 9)-(line 68,col 64)",
            "(line 69,col 9)-(line 69,col 62)",
            "(line 71,col 9)-(line 71,col 52)",
            "(line 72,col 9)-(line 72,col 52)",
            "(line 73,col 9)-(line 73,col 52)",
            "(line 74,col 9)-(line 74,col 52)",
            "(line 75,col 9)-(line 75,col 53)",
            "(line 76,col 9)-(line 76,col 53)",
            "(line 77,col 9)-(line 77,col 52)",
            "(line 78,col 9)-(line 78,col 53)",
            "(line 79,col 9)-(line 79,col 52)",
            "(line 81,col 9)-(line 81,col 50)",
            "(line 82,col 9)-(line 82,col 58)",
            "(line 83,col 9)-(line 83,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableObjectTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableObjectTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableObjectTest.testHashCode()",
        "snippet": "    public void testHashCode() {\n        final MutableObject mutNumA = new MutableObject(\"ALPHA\");\n        final MutableObject mutNumB = new MutableObject(\"ALPHA\");\n        final MutableObject mutNumC = new MutableObject(\"BETA\");\n        final MutableObject mutNumD = new MutableObject(null);\n\n        assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());\n        assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());\n        assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());\n        assertEquals(false, mutNumA.hashCode() == mutNumD.hashCode());\n        assertEquals(true, mutNumA.hashCode() == \"ALPHA\".hashCode());\n        assertEquals(0, mutNumD.hashCode());\n    }",
        "begin_line": 86,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 65)",
            "(line 88,col 9)-(line 88,col 65)",
            "(line 89,col 9)-(line 89,col 64)",
            "(line 90,col 9)-(line 90,col 62)",
            "(line 92,col 9)-(line 92,col 69)",
            "(line 93,col 9)-(line 93,col 69)",
            "(line 94,col 9)-(line 94,col 70)",
            "(line 95,col 9)-(line 95,col 70)",
            "(line 96,col 9)-(line 96,col 69)",
            "(line 97,col 9)-(line 97,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableObjectTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableObjectTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableObjectTest.testToString()",
        "snippet": "    public void testToString() {\n        assertEquals(\"HI\", new MutableObject(\"HI\").toString());\n        assertEquals(\"10.0\", new MutableObject(new Double(10)).toString());\n        assertEquals(\"null\", new MutableObject(null).toString());\n    }",
        "begin_line": 100,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 63)",
            "(line 102,col 9)-(line 102,col 75)",
            "(line 103,col 9)-(line 103,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableBooleanTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableBooleanTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableBooleanTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableBooleanTest.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(MutableBooleanTest.class);\n    }",
        "begin_line": 39,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableBooleanTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableBooleanTest.MutableBooleanTest(java.lang.String)",
        "snippet": "    public MutableBooleanTest(String testName) {\n        super(testName);\n    }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableBooleanTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableBooleanTest.testCompareTo()",
        "snippet": "    public void testCompareTo() {\n        final MutableBoolean mutBool = new MutableBoolean(false);\n\n        assertEquals(0, mutBool.compareTo(new MutableBoolean(false)));\n        assertEquals(-1, mutBool.compareTo(new MutableBoolean(true)));\n        mutBool.setValue(true);\n        assertEquals(+1, mutBool.compareTo(new MutableBoolean(false)));\n        assertEquals(0, mutBool.compareTo(new MutableBoolean(true)));\n\n        try {\n            mutBool.compareTo(null);\n            fail();\n        } catch (NullPointerException ex) {\n        }\n        try {\n            mutBool.compareTo(Boolean.FALSE);\n            fail();\n        } catch (ClassCastException ex) {\n        }\n        try {\n            mutBool.compareTo(\"false\");\n            fail();\n        } catch (ClassCastException ex) {\n        }\n    }",
        "begin_line": 47,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 65)",
            "(line 50,col 9)-(line 50,col 70)",
            "(line 51,col 9)-(line 51,col 70)",
            "(line 52,col 9)-(line 52,col 31)",
            "(line 53,col 9)-(line 53,col 71)",
            "(line 54,col 9)-(line 54,col 69)",
            "(line 56,col 9)-(line 60,col 9)",
            "(line 61,col 9)-(line 65,col 9)",
            "(line 66,col 9)-(line 70,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableBooleanTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableBooleanTest.testConstructors()",
        "snippet": "    public void testConstructors() {\n        assertEquals(false, new MutableBoolean().booleanValue());\n\n        assertEquals(true, new MutableBoolean(true).booleanValue());\n        assertEquals(false, new MutableBoolean(false).booleanValue());\n\n        assertEquals(true, new MutableBoolean(Boolean.TRUE).booleanValue());\n        assertEquals(false, new MutableBoolean(Boolean.FALSE).booleanValue());\n\n        try {\n            new MutableBoolean(null);\n            fail();\n        } catch (NullPointerException ex) {\n        }\n    }",
        "begin_line": 74,
        "end_line": 88,
        "comment": " ----------------------------------------------------------------",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 65)",
            "(line 77,col 9)-(line 77,col 68)",
            "(line 78,col 9)-(line 78,col 70)",
            "(line 80,col 9)-(line 80,col 76)",
            "(line 81,col 9)-(line 81,col 78)",
            "(line 83,col 9)-(line 87,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableBooleanTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableBooleanTest.testEquals()",
        "snippet": "    public void testEquals() {\n        final MutableBoolean mutBoolA = new MutableBoolean(false);\n        final MutableBoolean mutBoolB = new MutableBoolean(false);\n        final MutableBoolean mutBoolC = new MutableBoolean(true);\n\n        assertEquals(true, mutBoolA.equals(mutBoolA));\n        assertEquals(true, mutBoolA.equals(mutBoolB));\n        assertEquals(true, mutBoolB.equals(mutBoolA));\n        assertEquals(true, mutBoolB.equals(mutBoolB));\n        assertEquals(false, mutBoolA.equals(mutBoolC));\n        assertEquals(false, mutBoolB.equals(mutBoolC));\n        assertEquals(true, mutBoolC.equals(mutBoolC));\n        assertEquals(false, mutBoolA.equals(null));\n        assertEquals(false, mutBoolA.equals(Boolean.FALSE));\n        assertEquals(false, mutBoolA.equals(\"false\"));\n    }",
        "begin_line": 90,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 66)",
            "(line 92,col 9)-(line 92,col 66)",
            "(line 93,col 9)-(line 93,col 65)",
            "(line 95,col 9)-(line 95,col 54)",
            "(line 96,col 9)-(line 96,col 54)",
            "(line 97,col 9)-(line 97,col 54)",
            "(line 98,col 9)-(line 98,col 54)",
            "(line 99,col 9)-(line 99,col 55)",
            "(line 100,col 9)-(line 100,col 55)",
            "(line 101,col 9)-(line 101,col 54)",
            "(line 102,col 9)-(line 102,col 51)",
            "(line 103,col 9)-(line 103,col 60)",
            "(line 104,col 9)-(line 104,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableBooleanTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableBooleanTest.testGetSet()",
        "snippet": "    public void testGetSet() {\n        final MutableBoolean mutBool = new MutableBoolean(false);\n        assertEquals(false, new MutableBoolean().booleanValue());\n\n        mutBool.setValue(Boolean.TRUE);\n        assertEquals(true, mutBool.booleanValue());\n\n        mutBool.setValue(false);\n        assertEquals(false, mutBool.booleanValue());\n\n        mutBool.setValue(true);\n        assertEquals(true, mutBool.booleanValue());\n\n        try {\n            mutBool.setValue(null);\n            fail();\n        } catch (NullPointerException ex) {\n        }\n        try {\n            mutBool.setValue(\"false\");\n            fail();\n        } catch (ClassCastException ex) {\n        }\n    }",
        "begin_line": 107,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 65)",
            "(line 109,col 9)-(line 109,col 65)",
            "(line 111,col 9)-(line 111,col 39)",
            "(line 112,col 9)-(line 112,col 51)",
            "(line 114,col 9)-(line 114,col 32)",
            "(line 115,col 9)-(line 115,col 52)",
            "(line 117,col 9)-(line 117,col 31)",
            "(line 118,col 9)-(line 118,col 51)",
            "(line 120,col 9)-(line 124,col 9)",
            "(line 125,col 9)-(line 129,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableBooleanTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableBooleanTest.testHashCode()",
        "snippet": "    public void testHashCode() {\n        final MutableBoolean mutBoolA = new MutableBoolean(false);\n        final MutableBoolean mutBoolB = new MutableBoolean(false);\n        final MutableBoolean mutBoolC = new MutableBoolean(true);\n\n        assertEquals(true, mutBoolA.hashCode() == mutBoolA.hashCode());\n        assertEquals(true, mutBoolA.hashCode() == mutBoolB.hashCode());\n        assertEquals(false, mutBoolA.hashCode() == mutBoolC.hashCode());\n        assertEquals(true, mutBoolA.hashCode() == Boolean.FALSE.hashCode());\n        assertEquals(true, mutBoolC.hashCode() == Boolean.TRUE.hashCode());\n    }",
        "begin_line": 132,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 133,col 9)-(line 133,col 66)",
            "(line 134,col 9)-(line 134,col 66)",
            "(line 135,col 9)-(line 135,col 65)",
            "(line 137,col 9)-(line 137,col 71)",
            "(line 138,col 9)-(line 138,col 71)",
            "(line 139,col 9)-(line 139,col 72)",
            "(line 140,col 9)-(line 140,col 76)",
            "(line 141,col 9)-(line 141,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableBooleanTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableBooleanTest.testToString()",
        "snippet": "    public void testToString() {\n        assertEquals(Boolean.FALSE.toString(), new MutableBoolean(false).toString());\n        assertEquals(Boolean.TRUE.toString(), new MutableBoolean(true).toString());\n    }",
        "begin_line": 144,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 145,col 9)-(line 145,col 85)",
            "(line 146,col 9)-(line 146,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableLongTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableLongTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableLongTest.MutableLongTest(java.lang.String)",
        "snippet": "    public MutableLongTest(String testName) {\n        super(testName);\n    }",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableLongTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableLongTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableLongTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableLongTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableLongTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableLongTest.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(MutableLongTest.class);\n    }",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableLongTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableLongTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableLongTest.testConstructors()",
        "snippet": "    public void testConstructors() {\n        assertEquals(0, new MutableLong().longValue());\n        \n        assertEquals(1, new MutableLong(1).longValue());\n        \n        assertEquals(2, new MutableLong(new Long(2)).longValue());\n        assertEquals(3, new MutableLong(new MutableLong(3)).longValue());\n        try {\n            new MutableLong(null);\n            fail();\n        } catch (NullPointerException ex) {}\n    }",
        "begin_line": 45,
        "end_line": 56,
        "comment": " ----------------------------------------------------------------",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 55)",
            "(line 48,col 9)-(line 48,col 56)",
            "(line 50,col 9)-(line 50,col 66)",
            "(line 51,col 9)-(line 51,col 73)",
            "(line 52,col 9)-(line 55,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableLongTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableLongTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableLongTest.testGetSet()",
        "snippet": "    public void testGetSet() {\n        final MutableLong mutNum = new MutableLong(0);\n        assertEquals(0, new MutableLong().longValue());\n        assertEquals(new Long(0), new MutableLong().getValue());\n        \n        mutNum.setValue(1);\n        assertEquals(1, mutNum.longValue());\n        assertEquals(new Long(1), mutNum.getValue());\n        \n        mutNum.setValue(new Long(2));\n        assertEquals(2, mutNum.longValue());\n        assertEquals(new Long(2), mutNum.getValue());\n        \n        mutNum.setValue(new MutableLong(3));\n        assertEquals(3, mutNum.longValue());\n        assertEquals(new Long(3), mutNum.getValue());\n        try {\n            mutNum.setValue(null);\n            fail();\n        } catch (NullPointerException ex) {}\n        try {\n            mutNum.setValue(\"0\");\n            fail();\n        } catch (ClassCastException ex) {}\n    }",
        "begin_line": 58,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 54)",
            "(line 60,col 9)-(line 60,col 55)",
            "(line 61,col 9)-(line 61,col 64)",
            "(line 63,col 9)-(line 63,col 27)",
            "(line 64,col 9)-(line 64,col 44)",
            "(line 65,col 9)-(line 65,col 53)",
            "(line 67,col 9)-(line 67,col 37)",
            "(line 68,col 9)-(line 68,col 44)",
            "(line 69,col 9)-(line 69,col 53)",
            "(line 71,col 9)-(line 71,col 44)",
            "(line 72,col 9)-(line 72,col 44)",
            "(line 73,col 9)-(line 73,col 53)",
            "(line 74,col 9)-(line 77,col 44)",
            "(line 78,col 9)-(line 81,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableLongTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableLongTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableLongTest.testEquals()",
        "snippet": "    public void testEquals() {\n        final MutableLong mutNumA = new MutableLong(0);\n        final MutableLong mutNumB = new MutableLong(0);\n        final MutableLong mutNumC = new MutableLong(1);\n\n        assertEquals(true, mutNumA.equals(mutNumA));\n        assertEquals(true, mutNumA.equals(mutNumB));\n        assertEquals(true, mutNumB.equals(mutNumA));\n        assertEquals(true, mutNumB.equals(mutNumB));\n        assertEquals(false, mutNumA.equals(mutNumC));\n        assertEquals(false, mutNumB.equals(mutNumC));\n        assertEquals(true, mutNumC.equals(mutNumC));\n        assertEquals(false, mutNumA.equals(null));\n        assertEquals(false, mutNumA.equals(new Long(0)));\n        assertEquals(false, mutNumA.equals(\"0\"));\n    }",
        "begin_line": 84,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 55)",
            "(line 86,col 9)-(line 86,col 55)",
            "(line 87,col 9)-(line 87,col 55)",
            "(line 89,col 9)-(line 89,col 52)",
            "(line 90,col 9)-(line 90,col 52)",
            "(line 91,col 9)-(line 91,col 52)",
            "(line 92,col 9)-(line 92,col 52)",
            "(line 93,col 9)-(line 93,col 53)",
            "(line 94,col 9)-(line 94,col 53)",
            "(line 95,col 9)-(line 95,col 52)",
            "(line 96,col 9)-(line 96,col 50)",
            "(line 97,col 9)-(line 97,col 57)",
            "(line 98,col 9)-(line 98,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableLongTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableLongTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableLongTest.testHashCode()",
        "snippet": "    public void testHashCode() {\n        final MutableLong mutNumA = new MutableLong(0);\n        final MutableLong mutNumB = new MutableLong(0);\n        final MutableLong mutNumC = new MutableLong(1);\n\n        assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());\n        assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());\n        assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());\n        assertEquals(true, mutNumA.hashCode() == new Long(0).hashCode());\n    }",
        "begin_line": 101,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 55)",
            "(line 103,col 9)-(line 103,col 55)",
            "(line 104,col 9)-(line 104,col 55)",
            "(line 106,col 9)-(line 106,col 69)",
            "(line 107,col 9)-(line 107,col 69)",
            "(line 108,col 9)-(line 108,col 70)",
            "(line 109,col 9)-(line 109,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableLongTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableLongTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableLongTest.testCompareTo()",
        "snippet": "    public void testCompareTo() {\n        final MutableLong mutNum = new MutableLong(0);\n\n        assertEquals(0, mutNum.compareTo(new MutableLong(0)));\n        assertEquals(+1, mutNum.compareTo(new MutableLong(-1)));\n        assertEquals(-1, mutNum.compareTo(new MutableLong(1)));\n        try {\n            mutNum.compareTo(null);\n            fail();\n        } catch (NullPointerException ex) {}\n        try {\n            mutNum.compareTo(new Long(0));\n            fail();\n        } catch (ClassCastException ex) {}\n        try {\n            mutNum.compareTo(\"0\");\n            fail();\n        } catch (ClassCastException ex) {}\n    }",
        "begin_line": 112,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 54)",
            "(line 115,col 9)-(line 115,col 62)",
            "(line 116,col 9)-(line 116,col 64)",
            "(line 117,col 9)-(line 117,col 63)",
            "(line 118,col 9)-(line 121,col 44)",
            "(line 122,col 9)-(line 125,col 42)",
            "(line 126,col 9)-(line 129,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableLongTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableLongTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableLongTest.testPrimitiveValues()",
        "snippet": "    public void testPrimitiveValues() {\n        MutableLong mutNum = new MutableLong(1L);\n\n        assertEquals( 1.0F, mutNum.floatValue(), 0 );\n        assertEquals( 1.0, mutNum.doubleValue(), 0 );\n        assertEquals( (byte) 1, mutNum.byteValue() );\n        assertEquals( (short) 1, mutNum.shortValue() );\n        assertEquals( 1, mutNum.intValue() );\n        assertEquals( 1L, mutNum.longValue() );\n    }",
        "begin_line": 132,
        "end_line": 141,
        "comment": "",
        "child_ranges": [
            "(line 133,col 9)-(line 133,col 49)",
            "(line 135,col 9)-(line 135,col 53)",
            "(line 136,col 9)-(line 136,col 53)",
            "(line 137,col 9)-(line 137,col 53)",
            "(line 138,col 9)-(line 138,col 55)",
            "(line 139,col 9)-(line 139,col 45)",
            "(line 140,col 9)-(line 140,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableLongTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableLongTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableLongTest.testToLong()",
        "snippet": "    public void testToLong() {\n        assertEquals(new Long(0L), new MutableLong(0L).toLong());\n        assertEquals(new Long(123L), new MutableLong(123L).toLong());\n    }",
        "begin_line": 143,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 144,col 9)-(line 144,col 65)",
            "(line 145,col 9)-(line 145,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableLongTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableLongTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableLongTest.testIncrement()",
        "snippet": "    public void testIncrement() {\n        MutableLong mutNum = new MutableLong(1);\n        mutNum.increment();\n        \n        assertEquals(2, mutNum.intValue());\n        assertEquals(2L, mutNum.longValue());\n    }",
        "begin_line": 148,
        "end_line": 154,
        "comment": "",
        "child_ranges": [
            "(line 149,col 9)-(line 149,col 48)",
            "(line 150,col 9)-(line 150,col 27)",
            "(line 152,col 9)-(line 152,col 43)",
            "(line 153,col 9)-(line 153,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableLongTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableLongTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableLongTest.testDecrement()",
        "snippet": "    public void testDecrement() {\n        MutableLong mutNum = new MutableLong(1);\n        mutNum.decrement();\n        \n        assertEquals(0, mutNum.intValue());\n        assertEquals(0L, mutNum.longValue());\n    }",
        "begin_line": 156,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 48)",
            "(line 158,col 9)-(line 158,col 27)",
            "(line 160,col 9)-(line 160,col 43)",
            "(line 161,col 9)-(line 161,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableLongTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableLongTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableLongTest.testAddValuePrimitive()",
        "snippet": "    public void testAddValuePrimitive() {\n        MutableLong mutNum = new MutableLong(1);\n        mutNum.add(1);\n        \n        assertEquals(2, mutNum.intValue());\n        assertEquals(2L, mutNum.longValue());\n    }",
        "begin_line": 164,
        "end_line": 170,
        "comment": "",
        "child_ranges": [
            "(line 165,col 9)-(line 165,col 48)",
            "(line 166,col 9)-(line 166,col 22)",
            "(line 168,col 9)-(line 168,col 43)",
            "(line 169,col 9)-(line 169,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableLongTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableLongTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableLongTest.testAddValueObject()",
        "snippet": "    public void testAddValueObject() {\n        MutableLong mutNum = new MutableLong(1);\n        mutNum.add(new Long(1));\n        \n        assertEquals(2, mutNum.intValue());\n        assertEquals(2L, mutNum.longValue());\n    }",
        "begin_line": 172,
        "end_line": 178,
        "comment": "",
        "child_ranges": [
            "(line 173,col 9)-(line 173,col 48)",
            "(line 174,col 9)-(line 174,col 32)",
            "(line 176,col 9)-(line 176,col 43)",
            "(line 177,col 9)-(line 177,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableLongTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableLongTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableLongTest.testSubtractValuePrimitive()",
        "snippet": "    public void testSubtractValuePrimitive() {\n        MutableLong mutNum = new MutableLong(1);\n        mutNum.subtract(1);\n        \n        assertEquals(0, mutNum.intValue());\n        assertEquals(0L, mutNum.longValue());\n    }",
        "begin_line": 180,
        "end_line": 186,
        "comment": "",
        "child_ranges": [
            "(line 181,col 9)-(line 181,col 48)",
            "(line 182,col 9)-(line 182,col 27)",
            "(line 184,col 9)-(line 184,col 43)",
            "(line 185,col 9)-(line 185,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableLongTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableLongTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableLongTest.testSubtractValueObject()",
        "snippet": "    public void testSubtractValueObject() {\n        MutableLong mutNum = new MutableLong(1);\n        mutNum.subtract(new Long(1));\n        \n        assertEquals(0, mutNum.intValue());\n        assertEquals(0L, mutNum.longValue());\n    }",
        "begin_line": 188,
        "end_line": 194,
        "comment": "",
        "child_ranges": [
            "(line 189,col 9)-(line 189,col 48)",
            "(line 190,col 9)-(line 190,col 37)",
            "(line 192,col 9)-(line 192,col 43)",
            "(line 193,col 9)-(line 193,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableLongTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableLongTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableLongTest.testToString()",
        "snippet": "    public void testToString() {\n        assertEquals(\"0\", new MutableLong(0).toString());\n        assertEquals(\"10\", new MutableLong(10).toString());\n        assertEquals(\"-123\", new MutableLong(-123).toString());\n    }",
        "begin_line": 196,
        "end_line": 200,
        "comment": "",
        "child_ranges": [
            "(line 197,col 9)-(line 197,col 57)",
            "(line 198,col 9)-(line 198,col 59)",
            "(line 199,col 9)-(line 199,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableDoubleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableDoubleTest.MutableDoubleTest(java.lang.String)",
        "snippet": "    public MutableDoubleTest(String testName) {\n        super(testName);\n    }",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableDoubleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableDoubleTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableDoubleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableDoubleTest.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(MutableDoubleTest.class);\n    }",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableDoubleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableDoubleTest.testConstructors()",
        "snippet": "    public void testConstructors() {\n        assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d);\n        \n        assertEquals(1d, new MutableDouble(1d).doubleValue(), 0.0001d);\n        \n        assertEquals(2d, new MutableDouble(new Double(2d)).doubleValue(), 0.0001d);\n        assertEquals(3d, new MutableDouble(new MutableDouble(3d)).doubleValue(), 0.0001d);\n        try {\n            new MutableDouble(null);\n            fail();\n        } catch (NullPointerException ex) {}\n    }",
        "begin_line": 45,
        "end_line": 56,
        "comment": " ----------------------------------------------------------------",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 69)",
            "(line 48,col 9)-(line 48,col 71)",
            "(line 50,col 9)-(line 50,col 83)",
            "(line 51,col 9)-(line 51,col 90)",
            "(line 52,col 9)-(line 55,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableDoubleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableDoubleTest.testGetSet()",
        "snippet": "    public void testGetSet() {\n        final MutableDouble mutNum = new MutableDouble(0d);\n        assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d);\n        assertEquals(new Double(0), new MutableDouble().getValue());\n        \n        mutNum.setValue(1);\n        assertEquals(1d, mutNum.doubleValue(), 0.0001d);\n        assertEquals(new Double(1d), mutNum.getValue());\n        \n        mutNum.setValue(new Double(2d));\n        assertEquals(2d, mutNum.doubleValue(), 0.0001d);\n        assertEquals(new Double(2d), mutNum.getValue());\n        \n        mutNum.setValue(new MutableDouble(3d));\n        assertEquals(3d, mutNum.doubleValue(), 0.0001d);\n        assertEquals(new Double(3d), mutNum.getValue());\n        try {\n            mutNum.setValue(null);\n            fail();\n        } catch (NullPointerException ex) {}\n        try {\n            mutNum.setValue(\"0\");\n            fail();\n        } catch (ClassCastException ex) {}\n    }",
        "begin_line": 58,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 59)",
            "(line 60,col 9)-(line 60,col 69)",
            "(line 61,col 9)-(line 61,col 68)",
            "(line 63,col 9)-(line 63,col 27)",
            "(line 64,col 9)-(line 64,col 56)",
            "(line 65,col 9)-(line 65,col 56)",
            "(line 67,col 9)-(line 67,col 40)",
            "(line 68,col 9)-(line 68,col 56)",
            "(line 69,col 9)-(line 69,col 56)",
            "(line 71,col 9)-(line 71,col 47)",
            "(line 72,col 9)-(line 72,col 56)",
            "(line 73,col 9)-(line 73,col 56)",
            "(line 74,col 9)-(line 77,col 44)",
            "(line 78,col 9)-(line 81,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableDoubleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableDoubleTest.testNanInfinite()",
        "snippet": "    public void testNanInfinite() {\n        MutableDouble mutNum = new MutableDouble(Double.NaN);\n        assertEquals(true, mutNum.isNaN());\n        \n        mutNum = new MutableDouble(Double.POSITIVE_INFINITY);\n        assertEquals(true, mutNum.isInfinite());\n        \n        mutNum = new MutableDouble(Double.NEGATIVE_INFINITY);\n        assertEquals(true, mutNum.isInfinite());\n    }",
        "begin_line": 84,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 61)",
            "(line 86,col 9)-(line 86,col 43)",
            "(line 88,col 9)-(line 88,col 61)",
            "(line 89,col 9)-(line 89,col 48)",
            "(line 91,col 9)-(line 91,col 61)",
            "(line 92,col 9)-(line 92,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableDoubleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableDoubleTest.testEquals()",
        "snippet": "    public void testEquals() {\n        final MutableDouble mutNumA = new MutableDouble(0d);\n        final MutableDouble mutNumB = new MutableDouble(0d);\n        final MutableDouble mutNumC = new MutableDouble(1d);\n\n        assertEquals(true, mutNumA.equals(mutNumA));\n        assertEquals(true, mutNumA.equals(mutNumB));\n        assertEquals(true, mutNumB.equals(mutNumA));\n        assertEquals(true, mutNumB.equals(mutNumB));\n        assertEquals(false, mutNumA.equals(mutNumC));\n        assertEquals(false, mutNumB.equals(mutNumC));\n        assertEquals(true, mutNumC.equals(mutNumC));\n        assertEquals(false, mutNumA.equals(null));\n        assertEquals(false, mutNumA.equals(new Double(0d)));\n        assertEquals(false, mutNumA.equals(\"0\"));\n    }",
        "begin_line": 95,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 60)",
            "(line 97,col 9)-(line 97,col 60)",
            "(line 98,col 9)-(line 98,col 60)",
            "(line 100,col 9)-(line 100,col 52)",
            "(line 101,col 9)-(line 101,col 52)",
            "(line 102,col 9)-(line 102,col 52)",
            "(line 103,col 9)-(line 103,col 52)",
            "(line 104,col 9)-(line 104,col 53)",
            "(line 105,col 9)-(line 105,col 53)",
            "(line 106,col 9)-(line 106,col 52)",
            "(line 107,col 9)-(line 107,col 50)",
            "(line 108,col 9)-(line 108,col 60)",
            "(line 109,col 9)-(line 109,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableDoubleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableDoubleTest.testHashCode()",
        "snippet": "    public void testHashCode() {\n        final MutableDouble mutNumA = new MutableDouble(0d);\n        final MutableDouble mutNumB = new MutableDouble(0d);\n        final MutableDouble mutNumC = new MutableDouble(1d);\n\n        assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());\n        assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());\n        assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());\n        assertEquals(true, mutNumA.hashCode() == new Double(0d).hashCode());\n    }",
        "begin_line": 112,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 60)",
            "(line 114,col 9)-(line 114,col 60)",
            "(line 115,col 9)-(line 115,col 60)",
            "(line 117,col 9)-(line 117,col 69)",
            "(line 118,col 9)-(line 118,col 69)",
            "(line 119,col 9)-(line 119,col 70)",
            "(line 120,col 9)-(line 120,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableDoubleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableDoubleTest.testCompareTo()",
        "snippet": "    public void testCompareTo() {\n        final MutableDouble mutNum = new MutableDouble(0d);\n\n        assertEquals(0, mutNum.compareTo(new MutableDouble(0d)));\n        assertEquals(+1, mutNum.compareTo(new MutableDouble(-1d)));\n        assertEquals(-1, mutNum.compareTo(new MutableDouble(1d)));\n        try {\n            mutNum.compareTo(null);\n            fail();\n        } catch (NullPointerException ex) {}\n        try {\n            mutNum.compareTo(new Double(0d));\n            fail();\n        } catch (ClassCastException ex) {}\n        try {\n            mutNum.compareTo(\"0\");\n            fail();\n        } catch (ClassCastException ex) {}\n    }",
        "begin_line": 123,
        "end_line": 141,
        "comment": "",
        "child_ranges": [
            "(line 124,col 9)-(line 124,col 59)",
            "(line 126,col 9)-(line 126,col 65)",
            "(line 127,col 9)-(line 127,col 67)",
            "(line 128,col 9)-(line 128,col 66)",
            "(line 129,col 9)-(line 132,col 44)",
            "(line 133,col 9)-(line 136,col 42)",
            "(line 137,col 9)-(line 140,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableDoubleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableDoubleTest.testPrimitiveValues()",
        "snippet": "    public void testPrimitiveValues() {\n        MutableDouble mutNum = new MutableDouble(1.7);\n        \n        assertEquals( 1.7F, mutNum.floatValue(), 0 );\n        assertEquals( 1.7, mutNum.doubleValue(), 0 );\n        assertEquals( (byte) 1, mutNum.byteValue() );\n        assertEquals( (short) 1, mutNum.shortValue() );\n        assertEquals( 1, mutNum.intValue() );\n        assertEquals( 1L, mutNum.longValue() );\n    }",
        "begin_line": 143,
        "end_line": 152,
        "comment": "",
        "child_ranges": [
            "(line 144,col 9)-(line 144,col 54)",
            "(line 146,col 9)-(line 146,col 53)",
            "(line 147,col 9)-(line 147,col 53)",
            "(line 148,col 9)-(line 148,col 53)",
            "(line 149,col 9)-(line 149,col 55)",
            "(line 150,col 9)-(line 150,col 45)",
            "(line 151,col 9)-(line 151,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableDoubleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableDoubleTest.testToDouble()",
        "snippet": "    public void testToDouble() {\n        assertEquals(new Double(0d), new MutableDouble(0d).toDouble());\n        assertEquals(new Double(12.3d), new MutableDouble(12.3d).toDouble());\n    }",
        "begin_line": 154,
        "end_line": 157,
        "comment": "",
        "child_ranges": [
            "(line 155,col 9)-(line 155,col 71)",
            "(line 156,col 9)-(line 156,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableDoubleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableDoubleTest.testIncrement()",
        "snippet": "    public void testIncrement() {\n        MutableDouble mutNum = new MutableDouble(1);\n        mutNum.increment();\n        \n        assertEquals(2, mutNum.intValue());\n        assertEquals(2L, mutNum.longValue());\n    }",
        "begin_line": 159,
        "end_line": 165,
        "comment": "",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 52)",
            "(line 161,col 9)-(line 161,col 27)",
            "(line 163,col 9)-(line 163,col 43)",
            "(line 164,col 9)-(line 164,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableDoubleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableDoubleTest.testDecrement()",
        "snippet": "    public void testDecrement() {\n        MutableDouble mutNum = new MutableDouble(1);\n        mutNum.decrement();\n        \n        assertEquals(0, mutNum.intValue());\n        assertEquals(0L, mutNum.longValue());\n    }",
        "begin_line": 167,
        "end_line": 173,
        "comment": "",
        "child_ranges": [
            "(line 168,col 9)-(line 168,col 52)",
            "(line 169,col 9)-(line 169,col 27)",
            "(line 171,col 9)-(line 171,col 43)",
            "(line 172,col 9)-(line 172,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableDoubleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableDoubleTest.testAddValuePrimitive()",
        "snippet": "    public void testAddValuePrimitive() {\n        MutableDouble mutNum = new MutableDouble(1);\n        mutNum.add(1.1d);\n        \n        assertEquals(2.1d, mutNum.doubleValue(), 0.01d);\n    }",
        "begin_line": 175,
        "end_line": 180,
        "comment": "",
        "child_ranges": [
            "(line 176,col 9)-(line 176,col 52)",
            "(line 177,col 9)-(line 177,col 25)",
            "(line 179,col 9)-(line 179,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableDoubleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableDoubleTest.testAddValueObject()",
        "snippet": "    public void testAddValueObject() {\n        MutableDouble mutNum = new MutableDouble(1);\n        mutNum.add(new Double(1.1d));\n        \n        assertEquals(2.1d, mutNum.doubleValue(), 0.01d);\n    }",
        "begin_line": 182,
        "end_line": 187,
        "comment": "",
        "child_ranges": [
            "(line 183,col 9)-(line 183,col 52)",
            "(line 184,col 9)-(line 184,col 37)",
            "(line 186,col 9)-(line 186,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableDoubleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableDoubleTest.testSubtractValuePrimitive()",
        "snippet": "    public void testSubtractValuePrimitive() {\n        MutableDouble mutNum = new MutableDouble(1);\n        mutNum.subtract(0.9d);\n        \n        assertEquals(0.1d, mutNum.doubleValue(), 0.01d);\n    }",
        "begin_line": 189,
        "end_line": 194,
        "comment": "",
        "child_ranges": [
            "(line 190,col 9)-(line 190,col 52)",
            "(line 191,col 9)-(line 191,col 30)",
            "(line 193,col 9)-(line 193,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableDoubleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableDoubleTest.testSubtractValueObject()",
        "snippet": "    public void testSubtractValueObject() {\n        MutableDouble mutNum = new MutableDouble(1);\n        mutNum.subtract(new Double(0.9d));\n        \n        assertEquals(0.1d, mutNum.doubleValue(), 0.01d);\n    }",
        "begin_line": 196,
        "end_line": 201,
        "comment": "",
        "child_ranges": [
            "(line 197,col 9)-(line 197,col 52)",
            "(line 198,col 9)-(line 198,col 42)",
            "(line 200,col 9)-(line 200,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableDoubleTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java",
        "signature": "org.apache.commons.lang.mutable.MutableDoubleTest.testToString()",
        "snippet": "    public void testToString() {\n        assertEquals(\"0.0\", new MutableDouble(0d).toString());\n        assertEquals(\"10.0\", new MutableDouble(10d).toString());\n        assertEquals(\"-123.0\", new MutableDouble(-123d).toString());\n    }",
        "begin_line": 203,
        "end_line": 207,
        "comment": "",
        "child_ranges": [
            "(line 204,col 9)-(line 204,col 62)",
            "(line 205,col 9)-(line 205,col 64)",
            "(line 206,col 9)-(line 206,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableTestSuite",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableTestSuite.java",
        "signature": "org.apache.commons.lang.mutable.MutableTestSuite.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableTestSuite",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableTestSuite.java",
        "signature": "org.apache.commons.lang.mutable.MutableTestSuite.MutableTestSuite(java.lang.String)",
        "snippet": "    public MutableTestSuite(String name) {\n        super(name);\n    }",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.mutable.MutableTestSuite",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/mutable/MutableTestSuite.java",
        "signature": "org.apache.commons.lang.mutable.MutableTestSuite.suite()",
        "snippet": "    public static Test suite() {\n        final TestSuite suite = new TestSuite();\n\n        suite.addTest(MutableBooleanTest.suite());\n        suite.addTest(MutableByteTest.suite());\n        suite.addTest(MutableShortTest.suite());\n        suite.addTest(MutableIntTest.suite());\n        suite.addTest(MutableLongTest.suite());\n        suite.addTest(MutableFloatTest.suite());\n        suite.addTest(MutableDoubleTest.suite());\n        suite.addTest(MutableObjectTest.suite());\n\n        return suite;\n    }",
        "begin_line": 40,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 48)",
            "(line 43,col 9)-(line 43,col 50)",
            "(line 44,col 9)-(line 44,col 47)",
            "(line 45,col 9)-(line 45,col 48)",
            "(line 46,col 9)-(line 46,col 46)",
            "(line 47,col 9)-(line 47,col 47)",
            "(line 48,col 9)-(line 48,col 48)",
            "(line 49,col 9)-(line 49,col 49)",
            "(line 50,col 9)-(line 50,col 49)",
            "(line 52,col 9)-(line 52,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.RangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/RangeTest.java",
        "signature": "org.apache.commons.lang.math.RangeTest.RangeTestFixture.RangeTestFixture(byte, byte)",
        "snippet": "        RangeTestFixture(byte min, byte max) {\n            super();\n            this.min = min;\n            this.max = max;\n        }",
        "begin_line": 39,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 40,col 13)-(line 40,col 20)",
            "(line 41,col 13)-(line 41,col 27)",
            "(line 42,col 13)-(line 42,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.RangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/RangeTest.java",
        "signature": "org.apache.commons.lang.math.RangeTest.RangeTestFixture.containsNumber(java.lang.Number)",
        "snippet": "        public boolean containsNumber(Number number) {\n            if (number.byteValue() >= min && number.byteValue() <= max) {\n                return true;\n            }\n            return false;\n        }",
        "begin_line": 45,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 46,col 13)-(line 48,col 13)",
            "(line 49,col 13)-(line 49,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.RangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/RangeTest.java",
        "signature": "org.apache.commons.lang.math.RangeTest.RangeTestFixture.getMaximumNumber()",
        "snippet": "        public Number getMaximumNumber() {\n            return new Byte(max);\n        }",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 53,col 13)-(line 53,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.RangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/RangeTest.java",
        "signature": "org.apache.commons.lang.math.RangeTest.RangeTestFixture.getMinimumNumber()",
        "snippet": "        public Number getMinimumNumber() {\n            return new Byte(min);\n        }",
        "begin_line": 56,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 57,col 13)-(line 57,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.RangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/RangeTest.java",
        "signature": "org.apache.commons.lang.math.RangeTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(RangeTest.class);\n        suite.setName(\"Range Tests\");\n        return suite;\n    }",
        "begin_line": 61,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 57)",
            "(line 63,col 9)-(line 63,col 37)",
            "(line 64,col 9)-(line 64,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.RangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/RangeTest.java",
        "signature": "org.apache.commons.lang.math.RangeTest.RangeTest(java.lang.String)",
        "snippet": "    public RangeTest(String name) {\n        super(name);\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.RangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/RangeTest.java",
        "signature": "org.apache.commons.lang.math.RangeTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        super.setUp();\n    }",
        "begin_line": 71,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.RangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/RangeTest.java",
        "signature": "org.apache.commons.lang.math.RangeTest.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        super.tearDown();\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.RangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/RangeTest.java",
        "signature": "org.apache.commons.lang.math.RangeTest.testEqualsObject()",
        "snippet": "    public void testEqualsObject() {\n        RangeTestFixture r1 = new RangeTestFixture((byte) 0, (byte) 5);\n        RangeTestFixture r2 = new RangeTestFixture((byte) 0, (byte) 5);\n        RangeTestFixture r3 = new RangeTestFixture((byte) 0, (byte) 10);\n\n        assertEquals(r1, r1);\n        assertEquals(r1, r2);\n        assertEquals(r2, r2);\n        assertTrue(r1.equals(r1));\n        assertTrue(r2.equals(r2));\n        assertTrue(r3.equals(r3));\n        assertFalse(r2.equals(r3));\n        assertFalse(r2.equals(null));\n        assertFalse(r2.equals(\"Ni!\"));\n    }",
        "begin_line": 82,
        "end_line": 96,
        "comment": "\n     * Test method for 'org.apache.commons.lang.math.Range.equals(Object)'\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 71)",
            "(line 84,col 9)-(line 84,col 71)",
            "(line 85,col 9)-(line 85,col 72)",
            "(line 87,col 9)-(line 87,col 29)",
            "(line 88,col 9)-(line 88,col 29)",
            "(line 89,col 9)-(line 89,col 29)",
            "(line 90,col 9)-(line 90,col 34)",
            "(line 91,col 9)-(line 91,col 34)",
            "(line 92,col 9)-(line 92,col 34)",
            "(line 93,col 9)-(line 93,col 35)",
            "(line 94,col 9)-(line 94,col 37)",
            "(line 95,col 9)-(line 95,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.RangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/RangeTest.java",
        "signature": "org.apache.commons.lang.math.RangeTest.testHashCode()",
        "snippet": "    public void testHashCode() {\n        RangeTestFixture r1 = new RangeTestFixture((byte) 0, (byte) 5);\n        RangeTestFixture r2 = new RangeTestFixture((byte) 0, (byte) 5);\n        RangeTestFixture r3 = new RangeTestFixture((byte) 0, (byte) 10);\n\n        assertEquals(r1.hashCode(), r2.hashCode());\n        assertFalse(r1.hashCode() == r3.hashCode());\n    }",
        "begin_line": 101,
        "end_line": 108,
        "comment": "\n     * Test method for 'org.apache.commons.lang.math.Range.hashCode()'\n     ",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 71)",
            "(line 103,col 9)-(line 103,col 71)",
            "(line 104,col 9)-(line 104,col 72)",
            "(line 106,col 9)-(line 106,col 51)",
            "(line 107,col 9)-(line 107,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.RangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/RangeTest.java",
        "signature": "org.apache.commons.lang.math.RangeTest.testToString()",
        "snippet": "    public void testToString() {\n        RangeTestFixture r1 = new RangeTestFixture((byte) 0, (byte) 5);\n        assertNotNull(r1.toString());\n        assertNotNull(r1.toString());\n        RangeTestFixture r2 = new RangeTestFixture((byte) 0, (byte) 5);\n        assertNotNull(r2.toString());\n        assertNotNull(r2.toString());\n        RangeTestFixture r3 = new RangeTestFixture((byte) 0, (byte) 10);\n        assertNotNull(r3.toString());\n        assertNotNull(r3.toString());\n    }",
        "begin_line": 113,
        "end_line": 123,
        "comment": "\n     * Test method for 'org.apache.commons.lang.math.Range.toString()'\n     ",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 71)",
            "(line 115,col 9)-(line 115,col 37)",
            "(line 116,col 9)-(line 116,col 37)",
            "(line 117,col 9)-(line 117,col 71)",
            "(line 118,col 9)-(line 118,col 37)",
            "(line 119,col 9)-(line 119,col 37)",
            "(line 120,col 9)-(line 120,col 72)",
            "(line 121,col 9)-(line 121,col 37)",
            "(line 122,col 9)-(line 122,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.FractionTest(java.lang.String)",
        "snippet": "    public FractionTest(String name) {\n        super(name);\n    }",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(FractionTest.class);\n        suite.setName(\"Fraction Tests\");\n        return suite;\n    }",
        "begin_line": 40,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 60)",
            "(line 42,col 9)-(line 42,col 40)",
            "(line 43,col 9)-(line 43,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.setUp()",
        "snippet": "    public void setUp() {\n    }",
        "begin_line": 46,
        "end_line": 47,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testConstants()",
        "snippet": "    public void testConstants() {\n        assertEquals(0, Fraction.ZERO.getNumerator());\n        assertEquals(1, Fraction.ZERO.getDenominator());\n        \n        assertEquals(1, Fraction.ONE.getNumerator());\n        assertEquals(1, Fraction.ONE.getDenominator());\n        \n        assertEquals(1, Fraction.ONE_HALF.getNumerator());\n        assertEquals(2, Fraction.ONE_HALF.getDenominator());\n        \n        assertEquals(1, Fraction.ONE_THIRD.getNumerator());\n        assertEquals(3, Fraction.ONE_THIRD.getDenominator());\n        \n        assertEquals(2, Fraction.TWO_THIRDS.getNumerator());\n        assertEquals(3, Fraction.TWO_THIRDS.getDenominator());\n        \n        assertEquals(1, Fraction.ONE_QUARTER.getNumerator());\n        assertEquals(4, Fraction.ONE_QUARTER.getDenominator());\n        \n        assertEquals(2, Fraction.TWO_QUARTERS.getNumerator());\n        assertEquals(4, Fraction.TWO_QUARTERS.getDenominator());\n        \n        assertEquals(3, Fraction.THREE_QUARTERS.getNumerator());\n        assertEquals(4, Fraction.THREE_QUARTERS.getDenominator());\n        \n        assertEquals(1, Fraction.ONE_FIFTH.getNumerator());\n        assertEquals(5, Fraction.ONE_FIFTH.getDenominator());\n        \n        assertEquals(2, Fraction.TWO_FIFTHS.getNumerator());\n        assertEquals(5, Fraction.TWO_FIFTHS.getDenominator());\n        \n        assertEquals(3, Fraction.THREE_FIFTHS.getNumerator());\n        assertEquals(5, Fraction.THREE_FIFTHS.getDenominator());\n        \n        assertEquals(4, Fraction.FOUR_FIFTHS.getNumerator());\n        assertEquals(5, Fraction.FOUR_FIFTHS.getDenominator());\n    }",
        "begin_line": 51,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 54)",
            "(line 53,col 9)-(line 53,col 56)",
            "(line 55,col 9)-(line 55,col 53)",
            "(line 56,col 9)-(line 56,col 55)",
            "(line 58,col 9)-(line 58,col 58)",
            "(line 59,col 9)-(line 59,col 60)",
            "(line 61,col 9)-(line 61,col 59)",
            "(line 62,col 9)-(line 62,col 61)",
            "(line 64,col 9)-(line 64,col 60)",
            "(line 65,col 9)-(line 65,col 62)",
            "(line 67,col 9)-(line 67,col 61)",
            "(line 68,col 9)-(line 68,col 63)",
            "(line 70,col 9)-(line 70,col 62)",
            "(line 71,col 9)-(line 71,col 64)",
            "(line 73,col 9)-(line 73,col 64)",
            "(line 74,col 9)-(line 74,col 66)",
            "(line 76,col 9)-(line 76,col 59)",
            "(line 77,col 9)-(line 77,col 61)",
            "(line 79,col 9)-(line 79,col 60)",
            "(line 80,col 9)-(line 80,col 62)",
            "(line 82,col 9)-(line 82,col 62)",
            "(line 83,col 9)-(line 83,col 64)",
            "(line 85,col 9)-(line 85,col 61)",
            "(line 86,col 9)-(line 86,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testFactory_int_int()",
        "snippet": "    public void testFactory_int_int() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getFraction(0, 1);\n        assertEquals(0, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f = Fraction.getFraction(0, 2);\n        assertEquals(0, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        // normal\n        f = Fraction.getFraction(1, 1);\n        assertEquals(1, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f = Fraction.getFraction(2, 1);\n        assertEquals(2, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f = Fraction.getFraction(23, 345);\n        assertEquals(23, f.getNumerator());\n        assertEquals(345, f.getDenominator());\n        \n        // improper\n        f = Fraction.getFraction(22, 7);\n        assertEquals(22, f.getNumerator());\n        assertEquals(7, f.getDenominator());\n        \n        // negatives\n        f = Fraction.getFraction(-6, 10);\n        assertEquals(-6, f.getNumerator());\n        assertEquals(10, f.getDenominator());\n        \n        f = Fraction.getFraction(6, -10);\n        assertEquals(-6, f.getNumerator());\n        assertEquals(10, f.getDenominator());\n        \n        f = Fraction.getFraction(-6, -10);\n        assertEquals(6, f.getNumerator());\n        assertEquals(10, f.getDenominator());\n        \n        // zero denominator\n        try {\n            f = Fraction.getFraction(1, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getFraction(2, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getFraction(-3, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        // very large: can't represent as unsimplified fraction, although\n        try {\n            f = Fraction.getFraction(4, Integer.MIN_VALUE);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        try {\n            f = Fraction.getFraction(1, Integer.MIN_VALUE);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n    }",
        "begin_line": 89,
        "end_line": 157,
        "comment": "",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 26)",
            "(line 93,col 9)-(line 93,col 39)",
            "(line 94,col 9)-(line 94,col 42)",
            "(line 95,col 9)-(line 95,col 44)",
            "(line 97,col 9)-(line 97,col 39)",
            "(line 98,col 9)-(line 98,col 42)",
            "(line 99,col 9)-(line 99,col 44)",
            "(line 102,col 9)-(line 102,col 39)",
            "(line 103,col 9)-(line 103,col 42)",
            "(line 104,col 9)-(line 104,col 44)",
            "(line 106,col 9)-(line 106,col 39)",
            "(line 107,col 9)-(line 107,col 42)",
            "(line 108,col 9)-(line 108,col 44)",
            "(line 110,col 9)-(line 110,col 42)",
            "(line 111,col 9)-(line 111,col 43)",
            "(line 112,col 9)-(line 112,col 46)",
            "(line 115,col 9)-(line 115,col 40)",
            "(line 116,col 9)-(line 116,col 43)",
            "(line 117,col 9)-(line 117,col 44)",
            "(line 120,col 9)-(line 120,col 41)",
            "(line 121,col 9)-(line 121,col 43)",
            "(line 122,col 9)-(line 122,col 45)",
            "(line 124,col 9)-(line 124,col 41)",
            "(line 125,col 9)-(line 125,col 43)",
            "(line 126,col 9)-(line 126,col 45)",
            "(line 128,col 9)-(line 128,col 42)",
            "(line 129,col 9)-(line 129,col 42)",
            "(line 130,col 9)-(line 130,col 45)",
            "(line 133,col 9)-(line 136,col 43)",
            "(line 138,col 9)-(line 141,col 43)",
            "(line 143,col 9)-(line 146,col 43)",
            "(line 149,col 9)-(line 152,col 43)",
            "(line 153,col 9)-(line 156,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testFactory_int_int_int()",
        "snippet": "    public void testFactory_int_int_int() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getFraction(0, 0, 2);\n        assertEquals(0, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        f = Fraction.getFraction(2, 0, 2);\n        assertEquals(4, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        f = Fraction.getFraction(0, 1, 2);\n        assertEquals(1, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        // normal\n        f = Fraction.getFraction(1, 1, 2);\n        assertEquals(3, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        // negatives\n        try {\n            f = Fraction.getFraction(1, -6, -10);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        try {\n            f = Fraction.getFraction(1, -6, -10);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        try {\n            f = Fraction.getFraction(1, -6, -10);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        // negative whole\n        f = Fraction.getFraction(-1, 6, 10);\n        assertEquals(-16, f.getNumerator());\n        assertEquals(10, f.getDenominator());\n        \n        try {\n            f = Fraction.getFraction(-1, -6, 10);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        try {\n            f = Fraction.getFraction(-1, 6, -10);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getFraction(-1, -6, -10);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        // zero denominator\n        try {\n            f = Fraction.getFraction(0, 1, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getFraction(1, 2, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getFraction(-1, -3, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getFraction(Integer.MAX_VALUE, 1, 2); \n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getFraction(-Integer.MAX_VALUE, 1, 2);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        // very large\n        f = Fraction.getFraction(-1, 0, Integer.MAX_VALUE);\n        assertEquals(-Integer.MAX_VALUE, f.getNumerator());\n        assertEquals(Integer.MAX_VALUE, f.getDenominator());\n\n        try {\n            // negative denominators not allowed in this constructor.\n            f = Fraction.getFraction(0, 4, Integer.MIN_VALUE);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        try {\n            f = Fraction.getFraction(1, 1, Integer.MAX_VALUE);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        try {\n            f = Fraction.getFraction(-1, 2, Integer.MAX_VALUE);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n    }",
        "begin_line": 159,
        "end_line": 260,
        "comment": "",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 26)",
            "(line 163,col 9)-(line 163,col 42)",
            "(line 164,col 9)-(line 164,col 42)",
            "(line 165,col 9)-(line 165,col 44)",
            "(line 167,col 9)-(line 167,col 42)",
            "(line 168,col 9)-(line 168,col 42)",
            "(line 169,col 9)-(line 169,col 44)",
            "(line 171,col 9)-(line 171,col 42)",
            "(line 172,col 9)-(line 172,col 42)",
            "(line 173,col 9)-(line 173,col 44)",
            "(line 176,col 9)-(line 176,col 42)",
            "(line 177,col 9)-(line 177,col 42)",
            "(line 178,col 9)-(line 178,col 44)",
            "(line 181,col 9)-(line 184,col 43)",
            "(line 186,col 9)-(line 189,col 43)",
            "(line 191,col 9)-(line 194,col 43)",
            "(line 197,col 9)-(line 197,col 44)",
            "(line 198,col 9)-(line 198,col 44)",
            "(line 199,col 9)-(line 199,col 45)",
            "(line 201,col 9)-(line 204,col 43)",
            "(line 206,col 9)-(line 209,col 43)",
            "(line 211,col 9)-(line 214,col 43)",
            "(line 217,col 9)-(line 220,col 43)",
            "(line 222,col 9)-(line 225,col 43)",
            "(line 227,col 9)-(line 230,col 43)",
            "(line 232,col 9)-(line 235,col 43)",
            "(line 237,col 9)-(line 240,col 43)",
            "(line 243,col 9)-(line 243,col 59)",
            "(line 244,col 9)-(line 244,col 59)",
            "(line 245,col 9)-(line 245,col 60)",
            "(line 247,col 9)-(line 251,col 43)",
            "(line 252,col 9)-(line 255,col 43)",
            "(line 256,col 9)-(line 259,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testReducedFactory_int_int()",
        "snippet": "    public void testReducedFactory_int_int() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        assertEquals(0, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        assertEquals(1, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f = Fraction.getReducedFraction(2, 1);\n        assertEquals(2, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        assertEquals(22, f.getNumerator());\n        assertEquals(7, f.getDenominator());\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        assertEquals(-3, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f = Fraction.getReducedFraction(6, -10);\n        assertEquals(-3, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        assertEquals(3, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        assertEquals(0, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f = Fraction.getReducedFraction(2, 2);\n        assertEquals(1, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f = Fraction.getReducedFraction(2, 4);\n        assertEquals(1, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        f = Fraction.getReducedFraction(15, 10);\n        assertEquals(3, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        f = Fraction.getReducedFraction(121, 22);\n        assertEquals(11, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        assertEquals(1, f.getNumerator());\n        assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}      \n    }",
        "begin_line": 261,
        "end_line": 344,
        "comment": "",
        "child_ranges": [
            "(line 262,col 9)-(line 262,col 26)",
            "(line 265,col 9)-(line 265,col 46)",
            "(line 266,col 9)-(line 266,col 42)",
            "(line 267,col 9)-(line 267,col 44)",
            "(line 270,col 9)-(line 270,col 46)",
            "(line 271,col 9)-(line 271,col 42)",
            "(line 272,col 9)-(line 272,col 44)",
            "(line 274,col 9)-(line 274,col 46)",
            "(line 275,col 9)-(line 275,col 42)",
            "(line 276,col 9)-(line 276,col 44)",
            "(line 279,col 9)-(line 279,col 47)",
            "(line 280,col 9)-(line 280,col 43)",
            "(line 281,col 9)-(line 281,col 44)",
            "(line 284,col 9)-(line 284,col 48)",
            "(line 285,col 9)-(line 285,col 43)",
            "(line 286,col 9)-(line 286,col 44)",
            "(line 288,col 9)-(line 288,col 48)",
            "(line 289,col 9)-(line 289,col 43)",
            "(line 290,col 9)-(line 290,col 44)",
            "(line 292,col 9)-(line 292,col 49)",
            "(line 293,col 9)-(line 293,col 42)",
            "(line 294,col 9)-(line 294,col 44)",
            "(line 297,col 9)-(line 300,col 43)",
            "(line 302,col 9)-(line 305,col 43)",
            "(line 307,col 9)-(line 310,col 43)",
            "(line 313,col 9)-(line 313,col 46)",
            "(line 314,col 9)-(line 314,col 42)",
            "(line 315,col 9)-(line 315,col 44)",
            "(line 317,col 9)-(line 317,col 46)",
            "(line 318,col 9)-(line 318,col 42)",
            "(line 319,col 9)-(line 319,col 44)",
            "(line 321,col 9)-(line 321,col 46)",
            "(line 322,col 9)-(line 322,col 42)",
            "(line 323,col 9)-(line 323,col 44)",
            "(line 325,col 9)-(line 325,col 48)",
            "(line 326,col 9)-(line 326,col 42)",
            "(line 327,col 9)-(line 327,col 44)",
            "(line 329,col 9)-(line 329,col 49)",
            "(line 330,col 9)-(line 330,col 43)",
            "(line 331,col 9)-(line 331,col 44)",
            "(line 335,col 9)-(line 335,col 63)",
            "(line 336,col 9)-(line 336,col 42)",
            "(line 337,col 9)-(line 337,col 67)",
            "(line 340,col 9)-(line 343,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testFactory_double()",
        "snippet": "    public void testFactory_double() {\n        Fraction f = null;\n        \n        try {\n            f = Fraction.getFraction(Double.NaN);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getFraction(Double.POSITIVE_INFINITY);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getFraction(Double.NEGATIVE_INFINITY);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getFraction((double) Integer.MAX_VALUE + 1);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        // zero\n        f = Fraction.getFraction(0.0d);\n        assertEquals(0, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        // one\n        f = Fraction.getFraction(1.0d);\n        assertEquals(1, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        // one half\n        f = Fraction.getFraction(0.5d);\n        assertEquals(1, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        // negative\n        f = Fraction.getFraction(-0.875d);\n        assertEquals(-7, f.getNumerator());\n        assertEquals(8, f.getDenominator());\n        \n        // over 1\n        f = Fraction.getFraction(1.25d);\n        assertEquals(5, f.getNumerator());\n        assertEquals(4, f.getDenominator());\n        \n        // two thirds\n        f = Fraction.getFraction(0.66666d);\n        assertEquals(2, f.getNumerator());\n        assertEquals(3, f.getDenominator());\n        \n        // small\n        f = Fraction.getFraction(1.0d/10001d);\n        assertEquals(0, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        // normal\n        Fraction f2 = null;\n        for (int i = 1; i <= 100; i++) {  // denominator\n            for (int j = 1; j <= i; j++) {  // numerator\n                try {\n                    f = Fraction.getFraction((double) j / (double) i);\n                } catch (ArithmeticException ex) {\n                    System.err.println(j + \" \" + i);\n                    throw ex;\n                }\n                f2 = Fraction.getReducedFraction(j, i);\n                assertEquals(f2.getNumerator(), f.getNumerator());\n                assertEquals(f2.getDenominator(), f.getDenominator());\n            }\n        }\n        // save time by skipping some tests!  (\n        for (int i = 1001; i <= 10000; i+=SKIP) {  // denominator\n            for (int j = 1; j <= i; j++) {  // numerator\n                try {\n                    f = Fraction.getFraction((double) j / (double) i);\n                } catch (ArithmeticException ex) {\n                    System.err.println(j + \" \" + i);\n                    throw ex;\n                }\n                f2 = Fraction.getReducedFraction(j, i);\n                assertEquals(f2.getNumerator(), f.getNumerator());\n                assertEquals(f2.getDenominator(), f.getDenominator());\n            }\n        }\n    }",
        "begin_line": 346,
        "end_line": 433,
        "comment": "",
        "child_ranges": [
            "(line 347,col 9)-(line 347,col 26)",
            "(line 349,col 9)-(line 352,col 43)",
            "(line 354,col 9)-(line 357,col 43)",
            "(line 359,col 9)-(line 362,col 43)",
            "(line 364,col 9)-(line 367,col 43)",
            "(line 370,col 9)-(line 370,col 39)",
            "(line 371,col 9)-(line 371,col 42)",
            "(line 372,col 9)-(line 372,col 44)",
            "(line 375,col 9)-(line 375,col 39)",
            "(line 376,col 9)-(line 376,col 42)",
            "(line 377,col 9)-(line 377,col 44)",
            "(line 380,col 9)-(line 380,col 39)",
            "(line 381,col 9)-(line 381,col 42)",
            "(line 382,col 9)-(line 382,col 44)",
            "(line 385,col 9)-(line 385,col 42)",
            "(line 386,col 9)-(line 386,col 43)",
            "(line 387,col 9)-(line 387,col 44)",
            "(line 390,col 9)-(line 390,col 40)",
            "(line 391,col 9)-(line 391,col 42)",
            "(line 392,col 9)-(line 392,col 44)",
            "(line 395,col 9)-(line 395,col 43)",
            "(line 396,col 9)-(line 396,col 42)",
            "(line 397,col 9)-(line 397,col 44)",
            "(line 400,col 9)-(line 400,col 46)",
            "(line 401,col 9)-(line 401,col 42)",
            "(line 402,col 9)-(line 402,col 44)",
            "(line 405,col 9)-(line 405,col 27)",
            "(line 406,col 9)-(line 418,col 9)",
            "(line 420,col 9)-(line 432,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testFactory_String()",
        "snippet": "    public void testFactory_String() {\n        try {\n            Fraction.getFraction(null);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 435,
        "end_line": 440,
        "comment": "",
        "child_ranges": [
            "(line 436,col 9)-(line 439,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testFactory_String_double()",
        "snippet": "    public void testFactory_String_double() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(\"0.0\");\n        assertEquals(0, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f = Fraction.getFraction(\"0.2\");\n        assertEquals(1, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f = Fraction.getFraction(\"0.5\");\n        assertEquals(1, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        f = Fraction.getFraction(\"0.66666\");\n        assertEquals(2, f.getNumerator());\n        assertEquals(3, f.getDenominator());\n        \n        try {\n            f = Fraction.getFraction(\"2.3R\");\n            fail(\"Expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n        \n        try {\n            f = Fraction.getFraction(\"2147483648\"); // too big\n            fail(\"Expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n        \n        try {\n            f = Fraction.getFraction(\".\");\n            fail(\"Expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n    }",
        "begin_line": 443,
        "end_line": 476,
        "comment": "",
        "child_ranges": [
            "(line 444,col 9)-(line 444,col 26)",
            "(line 446,col 9)-(line 446,col 40)",
            "(line 447,col 9)-(line 447,col 42)",
            "(line 448,col 9)-(line 448,col 44)",
            "(line 450,col 9)-(line 450,col 40)",
            "(line 451,col 9)-(line 451,col 42)",
            "(line 452,col 9)-(line 452,col 44)",
            "(line 454,col 9)-(line 454,col 40)",
            "(line 455,col 9)-(line 455,col 42)",
            "(line 456,col 9)-(line 456,col 44)",
            "(line 458,col 9)-(line 458,col 44)",
            "(line 459,col 9)-(line 459,col 42)",
            "(line 460,col 9)-(line 460,col 44)",
            "(line 462,col 9)-(line 465,col 45)",
            "(line 467,col 9)-(line 470,col 45)",
            "(line 472,col 9)-(line 475,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testFactory_String_proper()",
        "snippet": "    public void testFactory_String_proper() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(\"0 0/1\");\n        assertEquals(0, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f = Fraction.getFraction(\"1 1/5\");\n        assertEquals(6, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f = Fraction.getFraction(\"7 1/2\");\n        assertEquals(15, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        f = Fraction.getFraction(\"1 2/4\");\n        assertEquals(6, f.getNumerator());\n        assertEquals(4, f.getDenominator());\n        \n        f = Fraction.getFraction(\"-7 1/2\");\n        assertEquals(-15, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        f = Fraction.getFraction(\"-1 2/4\");\n        assertEquals(-6, f.getNumerator());\n        assertEquals(4, f.getDenominator());\n        \n        try {\n            f = Fraction.getFraction(\"2 3\");\n            fail(\"expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n        \n        try {\n            f = Fraction.getFraction(\"a 3\");\n            fail(\"expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n        \n        try {\n            f = Fraction.getFraction(\"2 b/4\");\n            fail(\"expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n        \n        try {\n            f = Fraction.getFraction(\"2 \");\n            fail(\"expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n\n        try {\n            f = Fraction.getFraction(\" 3\");\n            fail(\"expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n        \n        try {\n            f = Fraction.getFraction(\" \");\n            fail(\"expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n    }",
        "begin_line": 478,
        "end_line": 534,
        "comment": "",
        "child_ranges": [
            "(line 479,col 9)-(line 479,col 26)",
            "(line 481,col 9)-(line 481,col 42)",
            "(line 482,col 9)-(line 482,col 42)",
            "(line 483,col 9)-(line 483,col 44)",
            "(line 485,col 9)-(line 485,col 42)",
            "(line 486,col 9)-(line 486,col 42)",
            "(line 487,col 9)-(line 487,col 44)",
            "(line 489,col 9)-(line 489,col 42)",
            "(line 490,col 9)-(line 490,col 43)",
            "(line 491,col 9)-(line 491,col 44)",
            "(line 493,col 9)-(line 493,col 42)",
            "(line 494,col 9)-(line 494,col 42)",
            "(line 495,col 9)-(line 495,col 44)",
            "(line 497,col 9)-(line 497,col 43)",
            "(line 498,col 9)-(line 498,col 44)",
            "(line 499,col 9)-(line 499,col 44)",
            "(line 501,col 9)-(line 501,col 43)",
            "(line 502,col 9)-(line 502,col 43)",
            "(line 503,col 9)-(line 503,col 44)",
            "(line 505,col 9)-(line 508,col 45)",
            "(line 510,col 9)-(line 513,col 45)",
            "(line 515,col 9)-(line 518,col 45)",
            "(line 520,col 9)-(line 523,col 45)",
            "(line 525,col 9)-(line 528,col 45)",
            "(line 530,col 9)-(line 533,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testFactory_String_improper()",
        "snippet": "    public void testFactory_String_improper() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(\"0/1\");\n        assertEquals(0, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f = Fraction.getFraction(\"1/5\");\n        assertEquals(1, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f = Fraction.getFraction(\"1/2\");\n        assertEquals(1, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        f = Fraction.getFraction(\"2/3\");\n        assertEquals(2, f.getNumerator());\n        assertEquals(3, f.getDenominator());\n        \n        f = Fraction.getFraction(\"7/3\");\n        assertEquals(7, f.getNumerator());\n        assertEquals(3, f.getDenominator());\n        \n        f = Fraction.getFraction(\"2/4\");\n        assertEquals(2, f.getNumerator());\n        assertEquals(4, f.getDenominator());\n        \n        try {\n            f = Fraction.getFraction(\"2/d\");\n            fail(\"expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n        \n        try {\n            f = Fraction.getFraction(\"2e/3\");\n            fail(\"expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n        \n        try {\n            f = Fraction.getFraction(\"2/\");\n            fail(\"expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n        \n        try {\n            f = Fraction.getFraction(\"/\");\n            fail(\"expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n    }",
        "begin_line": 536,
        "end_line": 582,
        "comment": "",
        "child_ranges": [
            "(line 537,col 9)-(line 537,col 26)",
            "(line 539,col 9)-(line 539,col 40)",
            "(line 540,col 9)-(line 540,col 42)",
            "(line 541,col 9)-(line 541,col 44)",
            "(line 543,col 9)-(line 543,col 40)",
            "(line 544,col 9)-(line 544,col 42)",
            "(line 545,col 9)-(line 545,col 44)",
            "(line 547,col 9)-(line 547,col 40)",
            "(line 548,col 9)-(line 548,col 42)",
            "(line 549,col 9)-(line 549,col 44)",
            "(line 551,col 9)-(line 551,col 40)",
            "(line 552,col 9)-(line 552,col 42)",
            "(line 553,col 9)-(line 553,col 44)",
            "(line 555,col 9)-(line 555,col 40)",
            "(line 556,col 9)-(line 556,col 42)",
            "(line 557,col 9)-(line 557,col 44)",
            "(line 559,col 9)-(line 559,col 40)",
            "(line 560,col 9)-(line 560,col 42)",
            "(line 561,col 9)-(line 561,col 44)",
            "(line 563,col 9)-(line 566,col 45)",
            "(line 568,col 9)-(line 571,col 45)",
            "(line 573,col 9)-(line 576,col 45)",
            "(line 578,col 9)-(line 581,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testGets()",
        "snippet": "    public void testGets() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(3, 5, 6);\n        assertEquals(23, f.getNumerator());\n        assertEquals(3, f.getProperWhole());\n        assertEquals(5, f.getProperNumerator());\n        assertEquals(6, f.getDenominator());\n        \n        f = Fraction.getFraction(-3, 5, 6);\n        assertEquals(-23, f.getNumerator());\n        assertEquals(-3, f.getProperWhole());\n        assertEquals(5, f.getProperNumerator());\n        assertEquals(6, f.getDenominator());\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1);\n        assertEquals(Integer.MIN_VALUE, f.getNumerator());\n        assertEquals(Integer.MIN_VALUE, f.getProperWhole());\n        assertEquals(0, f.getProperNumerator());\n        assertEquals(1, f.getDenominator());\n    }",
        "begin_line": 584,
        "end_line": 604,
        "comment": "",
        "child_ranges": [
            "(line 585,col 9)-(line 585,col 26)",
            "(line 587,col 9)-(line 587,col 42)",
            "(line 588,col 9)-(line 588,col 43)",
            "(line 589,col 9)-(line 589,col 44)",
            "(line 590,col 9)-(line 590,col 48)",
            "(line 591,col 9)-(line 591,col 44)",
            "(line 593,col 9)-(line 593,col 43)",
            "(line 594,col 9)-(line 594,col 44)",
            "(line 595,col 9)-(line 595,col 45)",
            "(line 596,col 9)-(line 596,col 48)",
            "(line 597,col 9)-(line 597,col 44)",
            "(line 599,col 9)-(line 599,col 58)",
            "(line 600,col 9)-(line 600,col 58)",
            "(line 601,col 9)-(line 601,col 60)",
            "(line 602,col 9)-(line 602,col 48)",
            "(line 603,col 9)-(line 603,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testConversions()",
        "snippet": "    public void testConversions() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(3, 7, 8);\n        assertEquals(3, f.intValue());\n        assertEquals(3L, f.longValue());\n        assertEquals(3.875f, f.floatValue(), 0.00001f);\n        assertEquals(3.875d, f.doubleValue(), 0.00001d);\n    }",
        "begin_line": 606,
        "end_line": 614,
        "comment": "",
        "child_ranges": [
            "(line 607,col 9)-(line 607,col 26)",
            "(line 609,col 9)-(line 609,col 42)",
            "(line 610,col 9)-(line 610,col 38)",
            "(line 611,col 9)-(line 611,col 40)",
            "(line 612,col 9)-(line 612,col 55)",
            "(line 613,col 9)-(line 613,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testReduce()",
        "snippet": "    public void testReduce() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        assertEquals(2, result.getNumerator());\n        assertEquals(3, result.getDenominator());\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        assertEquals(2, result.getNumerator());\n        assertEquals(3, result.getDenominator());\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        assertEquals(-2, result.getNumerator());\n        assertEquals(3, result.getDenominator());\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        assertEquals(-2, result.getNumerator());\n        assertEquals(3, result.getDenominator());\n        assertSame(f, result);\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        assertEquals(2, result.getNumerator());\n        assertEquals(3, result.getDenominator());\n        assertSame(f, result);\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        assertEquals(0, result.getNumerator());\n        assertEquals(1, result.getDenominator());\n        assertSame(f, result);\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        assertEquals(0, result.getNumerator());\n        assertEquals(1, result.getDenominator());\n        assertSame(result, Fraction.ZERO);\n    }",
        "begin_line": 616,
        "end_line": 657,
        "comment": "",
        "child_ranges": [
            "(line 617,col 9)-(line 617,col 26)",
            "(line 619,col 9)-(line 619,col 41)",
            "(line 620,col 9)-(line 620,col 37)",
            "(line 621,col 9)-(line 621,col 47)",
            "(line 622,col 9)-(line 622,col 49)",
            "(line 624,col 9)-(line 624,col 41)",
            "(line 625,col 9)-(line 625,col 28)",
            "(line 626,col 9)-(line 626,col 47)",
            "(line 627,col 9)-(line 627,col 49)",
            "(line 629,col 9)-(line 629,col 40)",
            "(line 630,col 9)-(line 630,col 28)",
            "(line 631,col 9)-(line 631,col 48)",
            "(line 632,col 9)-(line 632,col 49)",
            "(line 634,col 9)-(line 634,col 40)",
            "(line 635,col 9)-(line 635,col 28)",
            "(line 636,col 9)-(line 636,col 48)",
            "(line 637,col 9)-(line 637,col 49)",
            "(line 638,col 9)-(line 638,col 30)",
            "(line 640,col 9)-(line 640,col 39)",
            "(line 641,col 9)-(line 641,col 28)",
            "(line 642,col 9)-(line 642,col 47)",
            "(line 643,col 9)-(line 643,col 49)",
            "(line 644,col 9)-(line 644,col 30)",
            "(line 646,col 9)-(line 646,col 39)",
            "(line 647,col 9)-(line 647,col 28)",
            "(line 648,col 9)-(line 648,col 47)",
            "(line 649,col 9)-(line 649,col 49)",
            "(line 650,col 9)-(line 650,col 30)",
            "(line 652,col 9)-(line 652,col 41)",
            "(line 653,col 9)-(line 653,col 28)",
            "(line 654,col 9)-(line 654,col 47)",
            "(line 655,col 9)-(line 655,col 49)",
            "(line 656,col 9)-(line 656,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testInvert()",
        "snippet": "    public void testInvert() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        f = f.invert();\n        assertEquals(75, f.getNumerator());\n        assertEquals(50, f.getDenominator());\n        \n        f = Fraction.getFraction(4, 3);\n        f = f.invert();\n        assertEquals(3, f.getNumerator());\n        assertEquals(4, f.getDenominator());\n        \n        f = Fraction.getFraction(-15, 47);\n        f = f.invert();\n        assertEquals(-47, f.getNumerator());\n        assertEquals(15, f.getDenominator());\n        \n        f = Fraction.getFraction(0, 3);\n        try {\n            f = f.invert();\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        // large values\n        f = Fraction.getFraction(Integer.MIN_VALUE, 1);\n        try {\n            f = f.invert();\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        f = Fraction.getFraction(Integer.MAX_VALUE, 1);\n        f = f.invert();\n        assertEquals(1, f.getNumerator());\n        assertEquals(Integer.MAX_VALUE, f.getDenominator());\n    }",
        "begin_line": 659,
        "end_line": 694,
        "comment": "",
        "child_ranges": [
            "(line 660,col 9)-(line 660,col 26)",
            "(line 662,col 9)-(line 662,col 41)",
            "(line 663,col 9)-(line 663,col 23)",
            "(line 664,col 9)-(line 664,col 43)",
            "(line 665,col 9)-(line 665,col 45)",
            "(line 667,col 9)-(line 667,col 39)",
            "(line 668,col 9)-(line 668,col 23)",
            "(line 669,col 9)-(line 669,col 42)",
            "(line 670,col 9)-(line 670,col 44)",
            "(line 672,col 9)-(line 672,col 42)",
            "(line 673,col 9)-(line 673,col 23)",
            "(line 674,col 9)-(line 674,col 44)",
            "(line 675,col 9)-(line 675,col 45)",
            "(line 677,col 9)-(line 677,col 39)",
            "(line 678,col 9)-(line 681,col 43)",
            "(line 684,col 9)-(line 684,col 55)",
            "(line 685,col 9)-(line 688,col 43)",
            "(line 690,col 9)-(line 690,col 55)",
            "(line 691,col 9)-(line 691,col 23)",
            "(line 692,col 9)-(line 692,col 42)",
            "(line 693,col 9)-(line 693,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testNegate()",
        "snippet": "    public void testNegate() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        f = f.negate();\n        assertEquals(-50, f.getNumerator());\n        assertEquals(75, f.getDenominator());\n        \n        f = Fraction.getFraction(-50, 75);\n        f = f.negate();\n        assertEquals(50, f.getNumerator());\n        assertEquals(75, f.getDenominator());\n\n        // large values\n        f = Fraction.getFraction(Integer.MAX_VALUE-1, Integer.MAX_VALUE);\n        f = f.negate();\n        assertEquals(Integer.MIN_VALUE+2, f.getNumerator());\n        assertEquals(Integer.MAX_VALUE, f.getDenominator());\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 1);\n        try {\n            f = f.negate();\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n    }",
        "begin_line": 696,
        "end_line": 720,
        "comment": "",
        "child_ranges": [
            "(line 697,col 9)-(line 697,col 26)",
            "(line 699,col 9)-(line 699,col 41)",
            "(line 700,col 9)-(line 700,col 23)",
            "(line 701,col 9)-(line 701,col 44)",
            "(line 702,col 9)-(line 702,col 45)",
            "(line 704,col 9)-(line 704,col 42)",
            "(line 705,col 9)-(line 705,col 23)",
            "(line 706,col 9)-(line 706,col 43)",
            "(line 707,col 9)-(line 707,col 45)",
            "(line 710,col 9)-(line 710,col 73)",
            "(line 711,col 9)-(line 711,col 23)",
            "(line 712,col 9)-(line 712,col 60)",
            "(line 713,col 9)-(line 713,col 60)",
            "(line 715,col 9)-(line 715,col 55)",
            "(line 716,col 9)-(line 719,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testAbs()",
        "snippet": "    public void testAbs() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        f = f.abs();\n        assertEquals(50, f.getNumerator());\n        assertEquals(75, f.getDenominator());\n        \n        f = Fraction.getFraction(-50, 75);\n        f = f.abs();\n        assertEquals(50, f.getNumerator());\n        assertEquals(75, f.getDenominator());\n\n        f = Fraction.getFraction(Integer.MAX_VALUE, 1);\n        f = f.abs();\n        assertEquals(Integer.MAX_VALUE, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n\n        f = Fraction.getFraction(Integer.MAX_VALUE, -1);\n        f = f.abs();\n        assertEquals(Integer.MAX_VALUE, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 1);\n        try {\n            f = f.abs();\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n    }",
        "begin_line": 722,
        "end_line": 750,
        "comment": "",
        "child_ranges": [
            "(line 723,col 9)-(line 723,col 26)",
            "(line 725,col 9)-(line 725,col 41)",
            "(line 726,col 9)-(line 726,col 20)",
            "(line 727,col 9)-(line 727,col 43)",
            "(line 728,col 9)-(line 728,col 45)",
            "(line 730,col 9)-(line 730,col 42)",
            "(line 731,col 9)-(line 731,col 20)",
            "(line 732,col 9)-(line 732,col 43)",
            "(line 733,col 9)-(line 733,col 45)",
            "(line 735,col 9)-(line 735,col 55)",
            "(line 736,col 9)-(line 736,col 20)",
            "(line 737,col 9)-(line 737,col 58)",
            "(line 738,col 9)-(line 738,col 44)",
            "(line 740,col 9)-(line 740,col 56)",
            "(line 741,col 9)-(line 741,col 20)",
            "(line 742,col 9)-(line 742,col 58)",
            "(line 743,col 9)-(line 743,col 44)",
            "(line 745,col 9)-(line 745,col 55)",
            "(line 746,col 9)-(line 749,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testPow()",
        "snippet": "    public void testPow() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(3, 5);\n        assertEquals(Fraction.ONE, f.pow(0));\n        \n        f = Fraction.getFraction(3, 5);\n        assertSame(f, f.pow(1));\n        assertEquals(f, f.pow(1));\n\n        f = Fraction.getFraction(3, 5);\n        f = f.pow(2);\n        assertEquals(9, f.getNumerator());\n        assertEquals(25, f.getDenominator());\n        \n        f = Fraction.getFraction(3, 5);\n        f = f.pow(3);\n        assertEquals(27, f.getNumerator());\n        assertEquals(125, f.getDenominator());\n        \n        f = Fraction.getFraction(3, 5);\n        f = f.pow(-1);\n        assertEquals(5, f.getNumerator());\n        assertEquals(3, f.getDenominator());\n        \n        f = Fraction.getFraction(3, 5);\n        f = f.pow(-2);\n        assertEquals(25, f.getNumerator());\n        assertEquals(9, f.getDenominator());\n        \n        // check unreduced fractions stay that way.\n        f = Fraction.getFraction(6, 10);\n        assertEquals(Fraction.ONE, f.pow(0));\n        \n        f = Fraction.getFraction(6, 10);\n        assertEquals(f, f.pow(1));\n        assertFalse(f.pow(1).equals(Fraction.getFraction(3,5)));\n\n        f = Fraction.getFraction(6, 10);\n        f = f.pow(2);\n        assertEquals(9, f.getNumerator());\n        assertEquals(25, f.getDenominator());\n        \n        f = Fraction.getFraction(6, 10);\n        f = f.pow(3);\n        assertEquals(27, f.getNumerator());\n        assertEquals(125, f.getDenominator());\n        \n        f = Fraction.getFraction(6, 10);\n        f = f.pow(-1);\n        assertEquals(10, f.getNumerator());\n        assertEquals(6, f.getDenominator());\n        \n        f = Fraction.getFraction(6, 10);\n        f = f.pow(-2);\n        assertEquals(25, f.getNumerator());\n        assertEquals(9, f.getDenominator());\n        \n        // zero to any positive power is still zero.\n        f = Fraction.getFraction(0, 1231);\n        f = f.pow(1);\n        assertTrue(0==f.compareTo(Fraction.ZERO));\n        assertEquals(0, f.getNumerator());\n        assertEquals(1231, f.getDenominator());\n        f = f.pow(2);\n        assertTrue(0==f.compareTo(Fraction.ZERO));\n        assertEquals(0, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n\n        // zero to negative powers should throw an exception\n        try {\n            f = f.pow(-1);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        try {\n            f = f.pow(Integer.MIN_VALUE);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        // one to any power is still one.\n        f = Fraction.getFraction(1, 1);\n        f = f.pow(0);\n        assertEquals(f, Fraction.ONE);\n        f = f.pow(1);\n        assertEquals(f, Fraction.ONE);\n        f = f.pow(-1);\n        assertEquals(f, Fraction.ONE);\n        f = f.pow(Integer.MAX_VALUE);\n        assertEquals(f, Fraction.ONE);\n        f = f.pow(Integer.MIN_VALUE);\n        assertEquals(f, Fraction.ONE);\n\n        f = Fraction.getFraction(Integer.MAX_VALUE, 1);\n        try {\n            f = f.pow(2);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        // Numerator growing too negative during the pow operation.\n        f = Fraction.getFraction(Integer.MIN_VALUE, 1);\n        try {\n            f = f.pow(3);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        f = Fraction.getFraction(65536, 1);\n        try {\n            f = f.pow(2);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n    }",
        "begin_line": 752,
        "end_line": 862,
        "comment": "",
        "child_ranges": [
            "(line 753,col 9)-(line 753,col 26)",
            "(line 755,col 9)-(line 755,col 39)",
            "(line 756,col 9)-(line 756,col 45)",
            "(line 758,col 9)-(line 758,col 39)",
            "(line 759,col 9)-(line 759,col 32)",
            "(line 760,col 9)-(line 760,col 34)",
            "(line 762,col 9)-(line 762,col 39)",
            "(line 763,col 9)-(line 763,col 21)",
            "(line 764,col 9)-(line 764,col 42)",
            "(line 765,col 9)-(line 765,col 45)",
            "(line 767,col 9)-(line 767,col 39)",
            "(line 768,col 9)-(line 768,col 21)",
            "(line 769,col 9)-(line 769,col 43)",
            "(line 770,col 9)-(line 770,col 46)",
            "(line 772,col 9)-(line 772,col 39)",
            "(line 773,col 9)-(line 773,col 22)",
            "(line 774,col 9)-(line 774,col 42)",
            "(line 775,col 9)-(line 775,col 44)",
            "(line 777,col 9)-(line 777,col 39)",
            "(line 778,col 9)-(line 778,col 22)",
            "(line 779,col 9)-(line 779,col 43)",
            "(line 780,col 9)-(line 780,col 44)",
            "(line 783,col 9)-(line 783,col 40)",
            "(line 784,col 9)-(line 784,col 45)",
            "(line 786,col 9)-(line 786,col 40)",
            "(line 787,col 9)-(line 787,col 34)",
            "(line 788,col 9)-(line 788,col 64)",
            "(line 790,col 9)-(line 790,col 40)",
            "(line 791,col 9)-(line 791,col 21)",
            "(line 792,col 9)-(line 792,col 42)",
            "(line 793,col 9)-(line 793,col 45)",
            "(line 795,col 9)-(line 795,col 40)",
            "(line 796,col 9)-(line 796,col 21)",
            "(line 797,col 9)-(line 797,col 43)",
            "(line 798,col 9)-(line 798,col 46)",
            "(line 800,col 9)-(line 800,col 40)",
            "(line 801,col 9)-(line 801,col 22)",
            "(line 802,col 9)-(line 802,col 43)",
            "(line 803,col 9)-(line 803,col 44)",
            "(line 805,col 9)-(line 805,col 40)",
            "(line 806,col 9)-(line 806,col 22)",
            "(line 807,col 9)-(line 807,col 43)",
            "(line 808,col 9)-(line 808,col 44)",
            "(line 811,col 9)-(line 811,col 42)",
            "(line 812,col 9)-(line 812,col 21)",
            "(line 813,col 9)-(line 813,col 50)",
            "(line 814,col 9)-(line 814,col 42)",
            "(line 815,col 9)-(line 815,col 47)",
            "(line 816,col 9)-(line 816,col 21)",
            "(line 817,col 9)-(line 817,col 50)",
            "(line 818,col 9)-(line 818,col 42)",
            "(line 819,col 9)-(line 819,col 44)",
            "(line 822,col 9)-(line 825,col 43)",
            "(line 826,col 9)-(line 829,col 43)",
            "(line 832,col 9)-(line 832,col 39)",
            "(line 833,col 9)-(line 833,col 21)",
            "(line 834,col 9)-(line 834,col 38)",
            "(line 835,col 9)-(line 835,col 21)",
            "(line 836,col 9)-(line 836,col 38)",
            "(line 837,col 9)-(line 837,col 22)",
            "(line 838,col 9)-(line 838,col 38)",
            "(line 839,col 9)-(line 839,col 37)",
            "(line 840,col 9)-(line 840,col 38)",
            "(line 841,col 9)-(line 841,col 37)",
            "(line 842,col 9)-(line 842,col 38)",
            "(line 844,col 9)-(line 844,col 55)",
            "(line 845,col 9)-(line 848,col 43)",
            "(line 851,col 9)-(line 851,col 55)",
            "(line 852,col 9)-(line 855,col 43)",
            "(line 857,col 9)-(line 857,col 43)",
            "(line 858,col 9)-(line 861,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testAdd()",
        "snippet": "    public void testAdd() {\n        Fraction f = null;\n        Fraction f1 = null;\n        Fraction f2 = null;\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(1, 5);\n        f = f1.add(f2);\n        assertEquals(4, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(2, 5);\n        f = f1.add(f2);\n        assertEquals(1, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(3, 5);\n        f = f1.add(f2);\n        assertEquals(6, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(-4, 5);\n        f = f1.add(f2);\n        assertEquals(-1, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1);\n        f2 = Fraction.ONE;\n        f = f1.add(f2);\n        assertEquals(Integer.MAX_VALUE, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(1, 2);\n        f = f1.add(f2);\n        assertEquals(11, f.getNumerator());\n        assertEquals(10, f.getDenominator());\n        \n        f1 = Fraction.getFraction(3, 8);\n        f2 = Fraction.getFraction(1, 6);\n        f = f1.add(f2);\n        assertEquals(13, f.getNumerator());\n        assertEquals(24, f.getDenominator());\n        \n        f1 = Fraction.getFraction(0, 5);\n        f2 = Fraction.getFraction(1, 5);\n        f = f1.add(f2);\n        assertSame(f2, f);\n        f = f2.add(f1);\n        assertSame(f2, f);\n        \n        f1 = Fraction.getFraction(-1, 13*13*2*2);\n        f2 = Fraction.getFraction(-2, 13*17*2);\n        f = f1.add(f2);\n        assertEquals(13*13*17*2*2, f.getDenominator());\n        assertEquals(-17 - 2*13*2, f.getNumerator());\n        \n        try {\n            f.add(null);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {}\n        \n        // if this fraction is added naively, it will overflow.\n        // check that it doesn't.\n        f1 = Fraction.getFraction(1,32768*3);\n        f2 = Fraction.getFraction(1,59049);\n        f = f1.add(f2);\n        assertEquals(52451, f.getNumerator());\n        assertEquals(1934917632, f.getDenominator());\n\n        f1 = Fraction.getFraction(Integer.MIN_VALUE, 3);\n        f2 = Fraction.ONE_THIRD;\n        f = f1.add(f2);\n        assertEquals(Integer.MIN_VALUE+1, f.getNumerator());\n        assertEquals(3, f.getDenominator());\n        \n        f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1);\n        f2 = Fraction.ONE;\n        f = f1.add(f2);\n        assertEquals(Integer.MAX_VALUE, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        try {\n            f = f.add(Fraction.ONE); // should overflow\n            fail(\"expecting ArithmeticException but got: \" + f.toString());\n        } catch (ArithmeticException ex) {}\n        \n        // denominator should not be a multiple of 2 or 3 to trigger overflow\n        f1 = Fraction.getFraction(Integer.MIN_VALUE, 5);\n        f2 = Fraction.getFraction(-1,5);\n        try {\n            f = f1.add(f2); // should overflow\n            fail(\"expecting ArithmeticException but got: \" + f.toString());\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f= Fraction.getFraction(-Integer.MAX_VALUE, 1);\n            f = f.add(f);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n            \n        try {\n            f= Fraction.getFraction(-Integer.MAX_VALUE, 1);\n            f = f.add(f);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n            \n        f1 = Fraction.getFraction(3,327680);\n        f2 = Fraction.getFraction(2,59049);\n        try {\n            f = f1.add(f2); // should overflow\n            fail(\"expecting ArithmeticException but got: \" + f.toString());\n        } catch (ArithmeticException ex) {}\n    }",
        "begin_line": 864,
        "end_line": 980,
        "comment": "",
        "child_ranges": [
            "(line 865,col 9)-(line 865,col 26)",
            "(line 866,col 9)-(line 866,col 27)",
            "(line 867,col 9)-(line 867,col 27)",
            "(line 869,col 9)-(line 869,col 40)",
            "(line 870,col 9)-(line 870,col 40)",
            "(line 871,col 9)-(line 871,col 23)",
            "(line 872,col 9)-(line 872,col 42)",
            "(line 873,col 9)-(line 873,col 44)",
            "(line 875,col 9)-(line 875,col 40)",
            "(line 876,col 9)-(line 876,col 40)",
            "(line 877,col 9)-(line 877,col 23)",
            "(line 878,col 9)-(line 878,col 42)",
            "(line 879,col 9)-(line 879,col 44)",
            "(line 881,col 9)-(line 881,col 40)",
            "(line 882,col 9)-(line 882,col 40)",
            "(line 883,col 9)-(line 883,col 23)",
            "(line 884,col 9)-(line 884,col 42)",
            "(line 885,col 9)-(line 885,col 44)",
            "(line 887,col 9)-(line 887,col 40)",
            "(line 888,col 9)-(line 888,col 41)",
            "(line 889,col 9)-(line 889,col 23)",
            "(line 890,col 9)-(line 890,col 43)",
            "(line 891,col 9)-(line 891,col 44)",
            "(line 893,col 9)-(line 893,col 60)",
            "(line 894,col 9)-(line 894,col 26)",
            "(line 895,col 9)-(line 895,col 23)",
            "(line 896,col 9)-(line 896,col 58)",
            "(line 897,col 9)-(line 897,col 44)",
            "(line 899,col 9)-(line 899,col 40)",
            "(line 900,col 9)-(line 900,col 40)",
            "(line 901,col 9)-(line 901,col 23)",
            "(line 902,col 9)-(line 902,col 43)",
            "(line 903,col 9)-(line 903,col 45)",
            "(line 905,col 9)-(line 905,col 40)",
            "(line 906,col 9)-(line 906,col 40)",
            "(line 907,col 9)-(line 907,col 23)",
            "(line 908,col 9)-(line 908,col 43)",
            "(line 909,col 9)-(line 909,col 45)",
            "(line 911,col 9)-(line 911,col 40)",
            "(line 912,col 9)-(line 912,col 40)",
            "(line 913,col 9)-(line 913,col 23)",
            "(line 914,col 9)-(line 914,col 26)",
            "(line 915,col 9)-(line 915,col 23)",
            "(line 916,col 9)-(line 916,col 26)",
            "(line 918,col 9)-(line 918,col 49)",
            "(line 919,col 9)-(line 919,col 47)",
            "(line 920,col 9)-(line 920,col 23)",
            "(line 921,col 9)-(line 921,col 55)",
            "(line 922,col 9)-(line 922,col 53)",
            "(line 924,col 9)-(line 927,col 48)",
            "(line 931,col 9)-(line 931,col 45)",
            "(line 932,col 9)-(line 932,col 43)",
            "(line 933,col 9)-(line 933,col 23)",
            "(line 934,col 9)-(line 934,col 46)",
            "(line 935,col 9)-(line 935,col 53)",
            "(line 937,col 9)-(line 937,col 56)",
            "(line 938,col 9)-(line 938,col 32)",
            "(line 939,col 9)-(line 939,col 23)",
            "(line 940,col 9)-(line 940,col 60)",
            "(line 941,col 9)-(line 941,col 44)",
            "(line 943,col 9)-(line 943,col 60)",
            "(line 944,col 9)-(line 944,col 26)",
            "(line 945,col 9)-(line 945,col 23)",
            "(line 946,col 9)-(line 946,col 58)",
            "(line 947,col 9)-(line 947,col 44)",
            "(line 949,col 9)-(line 952,col 43)",
            "(line 955,col 9)-(line 955,col 56)",
            "(line 956,col 9)-(line 956,col 40)",
            "(line 957,col 9)-(line 960,col 43)",
            "(line 962,col 9)-(line 966,col 43)",
            "(line 968,col 9)-(line 972,col 43)",
            "(line 974,col 9)-(line 974,col 44)",
            "(line 975,col 9)-(line 975,col 43)",
            "(line 976,col 9)-(line 979,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testSubtract()",
        "snippet": "    public void testSubtract() {\n        Fraction f = null;\n        Fraction f1 = null;\n        Fraction f2 = null;\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(1, 5);\n        f = f1.subtract(f2);\n        assertEquals(2, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f1 = Fraction.getFraction(7, 5);\n        f2 = Fraction.getFraction(2, 5);\n        f = f1.subtract(f2);\n        assertEquals(1, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(3, 5);\n        f = f1.subtract(f2);\n        assertEquals(0, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(-4, 5);\n        f = f1.subtract(f2);\n        assertEquals(7, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f1 = Fraction.getFraction(0, 5);\n        f2 = Fraction.getFraction(4, 5);\n        f = f1.subtract(f2);\n        assertEquals(-4, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f1 = Fraction.getFraction(0, 5);\n        f2 = Fraction.getFraction(-4, 5);\n        f = f1.subtract(f2);\n        assertEquals(4, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(1, 2);\n        f = f1.subtract(f2);\n        assertEquals(1, f.getNumerator());\n        assertEquals(10, f.getDenominator());\n        \n        f1 = Fraction.getFraction(0, 5);\n        f2 = Fraction.getFraction(1, 5);\n        f = f2.subtract(f1);\n        assertSame(f2, f);\n        \n        try {\n            f.subtract(null);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {}\n        \n        // if this fraction is subtracted naively, it will overflow.\n        // check that it doesn't.\n        f1 = Fraction.getFraction(1,32768*3);\n        f2 = Fraction.getFraction(1,59049);\n        f = f1.subtract(f2);\n        assertEquals(-13085, f.getNumerator());\n        assertEquals(1934917632, f.getDenominator());\n\n        f1 = Fraction.getFraction(Integer.MIN_VALUE, 3);\n        f2 = Fraction.ONE_THIRD.negate();\n        f = f1.subtract(f2);\n        assertEquals(Integer.MIN_VALUE+1, f.getNumerator());\n        assertEquals(3, f.getDenominator());\n        \n        f1 = Fraction.getFraction(Integer.MAX_VALUE, 1);\n        f2 = Fraction.ONE;\n        f = f1.subtract(f2);\n        assertEquals(Integer.MAX_VALUE-1, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n\n        try {\n            f1 = Fraction.getFraction(1, Integer.MAX_VALUE);\n            f2 = Fraction.getFraction(1, Integer.MAX_VALUE - 1);\n            f = f1.subtract(f2);\n            fail(\"expecting ArithmeticException\");  //should overflow\n        } catch (ArithmeticException ex) {}\n            \n        // denominator should not be a multiple of 2 or 3 to trigger overflow\n        f1 = Fraction.getFraction(Integer.MIN_VALUE, 5);\n        f2 = Fraction.getFraction(1,5);\n        try {\n            f = f1.subtract(f2); // should overflow\n            fail(\"expecting ArithmeticException but got: \" + f.toString());\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f= Fraction.getFraction(Integer.MIN_VALUE, 1);\n            f = f.subtract(Fraction.ONE);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n            \n        try {\n            f= Fraction.getFraction(Integer.MAX_VALUE, 1);\n            f = f.subtract(Fraction.ONE.negate());\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n            \n        f1 = Fraction.getFraction(3,327680);\n        f2 = Fraction.getFraction(2,59049);\n        try {\n            f = f1.subtract(f2); // should overflow\n            fail(\"expecting ArithmeticException but got: \" + f.toString());\n        } catch (ArithmeticException ex) {}\n    }",
        "begin_line": 982,
        "end_line": 1092,
        "comment": "",
        "child_ranges": [
            "(line 983,col 9)-(line 983,col 26)",
            "(line 984,col 9)-(line 984,col 27)",
            "(line 985,col 9)-(line 985,col 27)",
            "(line 987,col 9)-(line 987,col 40)",
            "(line 988,col 9)-(line 988,col 40)",
            "(line 989,col 9)-(line 989,col 28)",
            "(line 990,col 9)-(line 990,col 42)",
            "(line 991,col 9)-(line 991,col 44)",
            "(line 993,col 9)-(line 993,col 40)",
            "(line 994,col 9)-(line 994,col 40)",
            "(line 995,col 9)-(line 995,col 28)",
            "(line 996,col 9)-(line 996,col 42)",
            "(line 997,col 9)-(line 997,col 44)",
            "(line 999,col 9)-(line 999,col 40)",
            "(line 1000,col 9)-(line 1000,col 40)",
            "(line 1001,col 9)-(line 1001,col 28)",
            "(line 1002,col 9)-(line 1002,col 42)",
            "(line 1003,col 9)-(line 1003,col 44)",
            "(line 1005,col 9)-(line 1005,col 40)",
            "(line 1006,col 9)-(line 1006,col 41)",
            "(line 1007,col 9)-(line 1007,col 28)",
            "(line 1008,col 9)-(line 1008,col 42)",
            "(line 1009,col 9)-(line 1009,col 44)",
            "(line 1011,col 9)-(line 1011,col 40)",
            "(line 1012,col 9)-(line 1012,col 40)",
            "(line 1013,col 9)-(line 1013,col 28)",
            "(line 1014,col 9)-(line 1014,col 43)",
            "(line 1015,col 9)-(line 1015,col 44)",
            "(line 1017,col 9)-(line 1017,col 40)",
            "(line 1018,col 9)-(line 1018,col 41)",
            "(line 1019,col 9)-(line 1019,col 28)",
            "(line 1020,col 9)-(line 1020,col 42)",
            "(line 1021,col 9)-(line 1021,col 44)",
            "(line 1023,col 9)-(line 1023,col 40)",
            "(line 1024,col 9)-(line 1024,col 40)",
            "(line 1025,col 9)-(line 1025,col 28)",
            "(line 1026,col 9)-(line 1026,col 42)",
            "(line 1027,col 9)-(line 1027,col 45)",
            "(line 1029,col 9)-(line 1029,col 40)",
            "(line 1030,col 9)-(line 1030,col 40)",
            "(line 1031,col 9)-(line 1031,col 28)",
            "(line 1032,col 9)-(line 1032,col 26)",
            "(line 1034,col 9)-(line 1037,col 48)",
            "(line 1041,col 9)-(line 1041,col 45)",
            "(line 1042,col 9)-(line 1042,col 43)",
            "(line 1043,col 9)-(line 1043,col 28)",
            "(line 1044,col 9)-(line 1044,col 47)",
            "(line 1045,col 9)-(line 1045,col 53)",
            "(line 1047,col 9)-(line 1047,col 56)",
            "(line 1048,col 9)-(line 1048,col 41)",
            "(line 1049,col 9)-(line 1049,col 28)",
            "(line 1050,col 9)-(line 1050,col 60)",
            "(line 1051,col 9)-(line 1051,col 44)",
            "(line 1053,col 9)-(line 1053,col 56)",
            "(line 1054,col 9)-(line 1054,col 26)",
            "(line 1055,col 9)-(line 1055,col 28)",
            "(line 1056,col 9)-(line 1056,col 60)",
            "(line 1057,col 9)-(line 1057,col 44)",
            "(line 1059,col 9)-(line 1064,col 43)",
            "(line 1067,col 9)-(line 1067,col 56)",
            "(line 1068,col 9)-(line 1068,col 39)",
            "(line 1069,col 9)-(line 1072,col 43)",
            "(line 1074,col 9)-(line 1078,col 43)",
            "(line 1080,col 9)-(line 1084,col 43)",
            "(line 1086,col 9)-(line 1086,col 44)",
            "(line 1087,col 9)-(line 1087,col 43)",
            "(line 1088,col 9)-(line 1091,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testMultiply()",
        "snippet": "    public void testMultiply() {\n        Fraction f = null;\n        Fraction f1 = null;\n        Fraction f2 = null;\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(2, 5);\n        f = f1.multiplyBy(f2);\n        assertEquals(6, f.getNumerator());\n        assertEquals(25, f.getDenominator());\n        \n        f1 = Fraction.getFraction(6, 10);\n        f2 = Fraction.getFraction(6, 10);\n        f = f1.multiplyBy(f2);\n        assertEquals(9, f.getNumerator());\n        assertEquals(25, f.getDenominator());\n        f = f.multiplyBy(f2);\n        assertEquals(27, f.getNumerator());\n        assertEquals(125, f.getDenominator());\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(-2, 5);\n        f = f1.multiplyBy(f2);\n        assertEquals(-6, f.getNumerator());\n        assertEquals(25, f.getDenominator());\n        \n        f1 = Fraction.getFraction(-3, 5);\n        f2 = Fraction.getFraction(-2, 5);\n        f = f1.multiplyBy(f2);\n        assertEquals(6, f.getNumerator());\n        assertEquals(25, f.getDenominator());\n        \n        \n        f1 = Fraction.getFraction(0, 5);\n        f2 = Fraction.getFraction(2, 7);\n        f = f1.multiplyBy(f2);\n        assertSame(Fraction.ZERO, f);\n        \n        f1 = Fraction.getFraction(2, 7);\n        f2 = Fraction.ONE;\n        f = f1.multiplyBy(f2);\n        assertEquals(2, f.getNumerator());\n        assertEquals(7, f.getDenominator());\n        \n        f1 = Fraction.getFraction(Integer.MAX_VALUE, 1);\n        f2 = Fraction.getFraction(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        f = f1.multiplyBy(f2);\n        assertEquals(Integer.MIN_VALUE, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n\n        try {\n            f.multiplyBy(null);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {}\n        \n        try {\n            f1 = Fraction.getFraction(1, Integer.MAX_VALUE);\n            f = f1.multiplyBy(f1);  // should overflow\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n            \n        try {\n            f1 = Fraction.getFraction(1, -Integer.MAX_VALUE);\n            f = f1.multiplyBy(f1);  // should overflow\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n    }",
        "begin_line": 1094,
        "end_line": 1160,
        "comment": "",
        "child_ranges": [
            "(line 1095,col 9)-(line 1095,col 26)",
            "(line 1096,col 9)-(line 1096,col 27)",
            "(line 1097,col 9)-(line 1097,col 27)",
            "(line 1099,col 9)-(line 1099,col 40)",
            "(line 1100,col 9)-(line 1100,col 40)",
            "(line 1101,col 9)-(line 1101,col 30)",
            "(line 1102,col 9)-(line 1102,col 42)",
            "(line 1103,col 9)-(line 1103,col 45)",
            "(line 1105,col 9)-(line 1105,col 41)",
            "(line 1106,col 9)-(line 1106,col 41)",
            "(line 1107,col 9)-(line 1107,col 30)",
            "(line 1108,col 9)-(line 1108,col 42)",
            "(line 1109,col 9)-(line 1109,col 45)",
            "(line 1110,col 9)-(line 1110,col 29)",
            "(line 1111,col 9)-(line 1111,col 43)",
            "(line 1112,col 9)-(line 1112,col 46)",
            "(line 1114,col 9)-(line 1114,col 40)",
            "(line 1115,col 9)-(line 1115,col 41)",
            "(line 1116,col 9)-(line 1116,col 30)",
            "(line 1117,col 9)-(line 1117,col 43)",
            "(line 1118,col 9)-(line 1118,col 45)",
            "(line 1120,col 9)-(line 1120,col 41)",
            "(line 1121,col 9)-(line 1121,col 41)",
            "(line 1122,col 9)-(line 1122,col 30)",
            "(line 1123,col 9)-(line 1123,col 42)",
            "(line 1124,col 9)-(line 1124,col 45)",
            "(line 1127,col 9)-(line 1127,col 40)",
            "(line 1128,col 9)-(line 1128,col 40)",
            "(line 1129,col 9)-(line 1129,col 30)",
            "(line 1130,col 9)-(line 1130,col 37)",
            "(line 1132,col 9)-(line 1132,col 40)",
            "(line 1133,col 9)-(line 1133,col 26)",
            "(line 1134,col 9)-(line 1134,col 30)",
            "(line 1135,col 9)-(line 1135,col 42)",
            "(line 1136,col 9)-(line 1136,col 44)",
            "(line 1138,col 9)-(line 1138,col 56)",
            "(line 1139,col 9)-(line 1139,col 72)",
            "(line 1140,col 9)-(line 1140,col 30)",
            "(line 1141,col 9)-(line 1141,col 58)",
            "(line 1142,col 9)-(line 1142,col 44)",
            "(line 1144,col 9)-(line 1147,col 48)",
            "(line 1149,col 9)-(line 1153,col 43)",
            "(line 1155,col 9)-(line 1159,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testDivide()",
        "snippet": "    public void testDivide() {\n        Fraction f = null;\n        Fraction f1 = null;\n        Fraction f2 = null;\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(2, 5);\n        f = f1.divideBy(f2);\n        assertEquals(3, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.ZERO;\n        try {\n            f = f1.divideBy(f2);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        f1 = Fraction.getFraction(0, 5);\n        f2 = Fraction.getFraction(2, 7);\n        f = f1.divideBy(f2);\n        assertSame(Fraction.ZERO, f);\n        \n        f1 = Fraction.getFraction(2, 7);\n        f2 = Fraction.ONE;\n        f = f1.divideBy(f2);\n        assertEquals(2, f.getNumerator());\n        assertEquals(7, f.getDenominator());\n        \n        f1 = Fraction.getFraction(1, Integer.MAX_VALUE);\n        f = f1.divideBy(f1);  \n        assertEquals(1, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f1 = Fraction.getFraction(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        f2 = Fraction.getFraction(1, Integer.MAX_VALUE);\n        f = f1.divideBy(f2);\n        assertEquals(Integer.MIN_VALUE, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n\n        try {\n            f.divideBy(null);\n            fail(\"IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {}\n        \n        try {\n            f1 = Fraction.getFraction(1, Integer.MAX_VALUE);\n            f = f1.divideBy(f1.invert());  // should overflow\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        try {\n            f1 = Fraction.getFraction(1, -Integer.MAX_VALUE);\n            f = f1.divideBy(f1.invert());  // should overflow\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n    }",
        "begin_line": 1162,
        "end_line": 1217,
        "comment": "",
        "child_ranges": [
            "(line 1163,col 9)-(line 1163,col 26)",
            "(line 1164,col 9)-(line 1164,col 27)",
            "(line 1165,col 9)-(line 1165,col 27)",
            "(line 1167,col 9)-(line 1167,col 40)",
            "(line 1168,col 9)-(line 1168,col 40)",
            "(line 1169,col 9)-(line 1169,col 28)",
            "(line 1170,col 9)-(line 1170,col 42)",
            "(line 1171,col 9)-(line 1171,col 44)",
            "(line 1173,col 9)-(line 1173,col 40)",
            "(line 1174,col 9)-(line 1174,col 27)",
            "(line 1175,col 9)-(line 1178,col 43)",
            "(line 1180,col 9)-(line 1180,col 40)",
            "(line 1181,col 9)-(line 1181,col 40)",
            "(line 1182,col 9)-(line 1182,col 28)",
            "(line 1183,col 9)-(line 1183,col 37)",
            "(line 1185,col 9)-(line 1185,col 40)",
            "(line 1186,col 9)-(line 1186,col 26)",
            "(line 1187,col 9)-(line 1187,col 28)",
            "(line 1188,col 9)-(line 1188,col 42)",
            "(line 1189,col 9)-(line 1189,col 44)",
            "(line 1191,col 9)-(line 1191,col 56)",
            "(line 1192,col 9)-(line 1192,col 28)",
            "(line 1193,col 9)-(line 1193,col 42)",
            "(line 1194,col 9)-(line 1194,col 44)",
            "(line 1196,col 9)-(line 1196,col 72)",
            "(line 1197,col 9)-(line 1197,col 56)",
            "(line 1198,col 9)-(line 1198,col 28)",
            "(line 1199,col 9)-(line 1199,col 58)",
            "(line 1200,col 9)-(line 1200,col 44)",
            "(line 1202,col 9)-(line 1205,col 48)",
            "(line 1207,col 9)-(line 1211,col 43)",
            "(line 1212,col 9)-(line 1216,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testEquals()",
        "snippet": "    public void testEquals() {\n        Fraction f1 = null;\n        Fraction f2 = null;\n        \n        f1 = Fraction.getFraction(3, 5);\n        assertEquals(false, f1.equals(null));\n        assertEquals(false, f1.equals(new Object()));\n        assertEquals(false, f1.equals(new Integer(6)));\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(2, 5);\n        assertEquals(false, f1.equals(f2));\n        assertEquals(true, f1.equals(f1));\n        assertEquals(true, f2.equals(f2));\n        \n        f2 = Fraction.getFraction(3, 5);\n        assertEquals(true, f1.equals(f2));\n        \n        f2 = Fraction.getFraction(6, 10);\n        assertEquals(false, f1.equals(f2));\n    }",
        "begin_line": 1219,
        "end_line": 1239,
        "comment": "",
        "child_ranges": [
            "(line 1220,col 9)-(line 1220,col 27)",
            "(line 1221,col 9)-(line 1221,col 27)",
            "(line 1223,col 9)-(line 1223,col 40)",
            "(line 1224,col 9)-(line 1224,col 45)",
            "(line 1225,col 9)-(line 1225,col 53)",
            "(line 1226,col 9)-(line 1226,col 55)",
            "(line 1228,col 9)-(line 1228,col 40)",
            "(line 1229,col 9)-(line 1229,col 40)",
            "(line 1230,col 9)-(line 1230,col 43)",
            "(line 1231,col 9)-(line 1231,col 42)",
            "(line 1232,col 9)-(line 1232,col 42)",
            "(line 1234,col 9)-(line 1234,col 40)",
            "(line 1235,col 9)-(line 1235,col 42)",
            "(line 1237,col 9)-(line 1237,col 41)",
            "(line 1238,col 9)-(line 1238,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testHashCode()",
        "snippet": "    public void testHashCode() {\n        Fraction f1 = Fraction.getFraction(3, 5);\n        Fraction f2 = Fraction.getFraction(3, 5);\n        \n        assertTrue(f1.hashCode() == f2.hashCode());\n        \n        f2 = Fraction.getFraction(2, 5);\n        assertTrue(f1.hashCode() != f2.hashCode());\n        \n        f2 = Fraction.getFraction(6, 10);\n        assertTrue(f1.hashCode() != f2.hashCode());\n    }",
        "begin_line": 1241,
        "end_line": 1252,
        "comment": "",
        "child_ranges": [
            "(line 1242,col 9)-(line 1242,col 49)",
            "(line 1243,col 9)-(line 1243,col 49)",
            "(line 1245,col 9)-(line 1245,col 51)",
            "(line 1247,col 9)-(line 1247,col 40)",
            "(line 1248,col 9)-(line 1248,col 51)",
            "(line 1250,col 9)-(line 1250,col 41)",
            "(line 1251,col 9)-(line 1251,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testCompareTo()",
        "snippet": "    public void testCompareTo() {\n        Fraction f1 = null;\n        Fraction f2 = null;\n        \n        f1 = Fraction.getFraction(3, 5);\n        assertTrue(f1.compareTo(f1) == 0);\n        \n        try {\n            f1.compareTo(null);\n            fail(\"expecting NullPointerException\");\n        } catch (NullPointerException ex) {}\n        \n        try {\n            f1.compareTo(new Object());\n            fail(\"expecting ClassCastException\");\n        } catch (ClassCastException ex) {}\n        \n        f2 = Fraction.getFraction(2, 5);\n        assertTrue(f1.compareTo(f2) > 0);\n        assertTrue(f2.compareTo(f2) == 0);\n        \n        f2 = Fraction.getFraction(4, 5);\n        assertTrue(f1.compareTo(f2) < 0);\n        assertTrue(f2.compareTo(f2) == 0);\n        \n        f2 = Fraction.getFraction(3, 5);\n        assertTrue(f1.compareTo(f2) == 0);\n        assertTrue(f2.compareTo(f2) == 0);\n        \n        f2 = Fraction.getFraction(6, 10);\n        assertTrue(f1.compareTo(f2) == 0);\n        assertTrue(f2.compareTo(f2) == 0);\n\n        f2 = Fraction.getFraction(-1, 1, Integer.MAX_VALUE);\n        assertTrue(f1.compareTo(f2) > 0);\n        assertTrue(f2.compareTo(f2) == 0);\n\n    }",
        "begin_line": 1254,
        "end_line": 1291,
        "comment": "",
        "child_ranges": [
            "(line 1255,col 9)-(line 1255,col 27)",
            "(line 1256,col 9)-(line 1256,col 27)",
            "(line 1258,col 9)-(line 1258,col 40)",
            "(line 1259,col 9)-(line 1259,col 42)",
            "(line 1261,col 9)-(line 1264,col 44)",
            "(line 1266,col 9)-(line 1269,col 42)",
            "(line 1271,col 9)-(line 1271,col 40)",
            "(line 1272,col 9)-(line 1272,col 41)",
            "(line 1273,col 9)-(line 1273,col 42)",
            "(line 1275,col 9)-(line 1275,col 40)",
            "(line 1276,col 9)-(line 1276,col 41)",
            "(line 1277,col 9)-(line 1277,col 42)",
            "(line 1279,col 9)-(line 1279,col 40)",
            "(line 1280,col 9)-(line 1280,col 42)",
            "(line 1281,col 9)-(line 1281,col 42)",
            "(line 1283,col 9)-(line 1283,col 41)",
            "(line 1284,col 9)-(line 1284,col 42)",
            "(line 1285,col 9)-(line 1285,col 42)",
            "(line 1287,col 9)-(line 1287,col 60)",
            "(line 1288,col 9)-(line 1288,col 41)",
            "(line 1289,col 9)-(line 1289,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testToString()",
        "snippet": "    public void testToString() {\n        Fraction f = null;\n\n        f = Fraction.getFraction(3, 5);\n        String str = f.toString();\n        assertEquals(\"3/5\", str);\n        assertSame(str, f.toString());\n        \n        f = Fraction.getFraction(7, 5);\n        assertEquals(\"7/5\", f.toString());        \n        \n        f = Fraction.getFraction(4, 2);\n        assertEquals(\"4/2\", f.toString());        \n        \n        f = Fraction.getFraction(0, 2);\n        assertEquals(\"0/2\", f.toString());        \n        \n        f = Fraction.getFraction(2, 2);\n        assertEquals(\"2/2\", f.toString());        \n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1);\n        assertEquals(\"-2147483648/1\", f.toString());        \n\n        f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE);\n        assertEquals(\"-2147483648/2147483647\", f.toString());\n    }",
        "begin_line": 1293,
        "end_line": 1318,
        "comment": "",
        "child_ranges": [
            "(line 1294,col 9)-(line 1294,col 26)",
            "(line 1296,col 9)-(line 1296,col 39)",
            "(line 1297,col 9)-(line 1297,col 34)",
            "(line 1298,col 9)-(line 1298,col 33)",
            "(line 1299,col 9)-(line 1299,col 38)",
            "(line 1301,col 9)-(line 1301,col 39)",
            "(line 1302,col 9)-(line 1302,col 42)",
            "(line 1304,col 9)-(line 1304,col 39)",
            "(line 1305,col 9)-(line 1305,col 42)",
            "(line 1307,col 9)-(line 1307,col 39)",
            "(line 1308,col 9)-(line 1308,col 42)",
            "(line 1310,col 9)-(line 1310,col 39)",
            "(line 1311,col 9)-(line 1311,col 42)",
            "(line 1313,col 9)-(line 1313,col 58)",
            "(line 1314,col 9)-(line 1314,col 52)",
            "(line 1316,col 9)-(line 1316,col 59)",
            "(line 1317,col 9)-(line 1317,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FractionTest.java",
        "signature": "org.apache.commons.lang.math.FractionTest.testToProperString()",
        "snippet": "    public void testToProperString() {\n        Fraction f = null;\n\n        f = Fraction.getFraction(3, 5);\n        String str = f.toProperString();\n        assertEquals(\"3/5\", str);\n        assertSame(str, f.toProperString());\n        \n        f = Fraction.getFraction(7, 5);\n        assertEquals(\"1 2/5\", f.toProperString());        \n        \n        f = Fraction.getFraction(14, 10);\n        assertEquals(\"1 4/10\", f.toProperString());        \n        \n        f = Fraction.getFraction(4, 2);\n        assertEquals(\"2\", f.toProperString());        \n        \n        f = Fraction.getFraction(0, 2);\n        assertEquals(\"0\", f.toProperString());        \n        \n        f = Fraction.getFraction(2, 2);\n        assertEquals(\"1\", f.toProperString());        \n        \n        f = Fraction.getFraction(-7, 5);\n        assertEquals(\"-1 2/5\", f.toProperString());        \n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1);\n        assertEquals(\"-2147483648\", f.toProperString());        \n\n        f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE);\n        assertEquals(\"-1 1/2147483647\", f.toProperString());\n\n        assertEquals(\"-1\", Fraction.getFraction(-1).toProperString());\n    }",
        "begin_line": 1320,
        "end_line": 1353,
        "comment": "",
        "child_ranges": [
            "(line 1321,col 9)-(line 1321,col 26)",
            "(line 1323,col 9)-(line 1323,col 39)",
            "(line 1324,col 9)-(line 1324,col 40)",
            "(line 1325,col 9)-(line 1325,col 33)",
            "(line 1326,col 9)-(line 1326,col 44)",
            "(line 1328,col 9)-(line 1328,col 39)",
            "(line 1329,col 9)-(line 1329,col 50)",
            "(line 1331,col 9)-(line 1331,col 41)",
            "(line 1332,col 9)-(line 1332,col 51)",
            "(line 1334,col 9)-(line 1334,col 39)",
            "(line 1335,col 9)-(line 1335,col 46)",
            "(line 1337,col 9)-(line 1337,col 39)",
            "(line 1338,col 9)-(line 1338,col 46)",
            "(line 1340,col 9)-(line 1340,col 39)",
            "(line 1341,col 9)-(line 1341,col 46)",
            "(line 1343,col 9)-(line 1343,col 40)",
            "(line 1344,col 9)-(line 1344,col 51)",
            "(line 1346,col 9)-(line 1346,col 58)",
            "(line 1347,col 9)-(line 1347,col 56)",
            "(line 1349,col 9)-(line 1349,col 59)",
            "(line 1350,col 9)-(line 1350,col 60)",
            "(line 1352,col 9)-(line 1352,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.LongRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/LongRangeTest.java",
        "signature": "org.apache.commons.lang.math.LongRangeTest.LongRangeTest(java.lang.String)",
        "snippet": "    public LongRangeTest(String name) {\n        super(name);\n    }",
        "begin_line": 34,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.LongRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/LongRangeTest.java",
        "signature": "org.apache.commons.lang.math.LongRangeTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(LongRangeTest.class);\n        suite.setName(\"LongRange Tests\");\n        return suite;\n    }",
        "begin_line": 38,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 61)",
            "(line 40,col 9)-(line 40,col 41)",
            "(line 41,col 9)-(line 41,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.LongRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/LongRangeTest.java",
        "signature": "org.apache.commons.lang.math.LongRangeTest.setUp()",
        "snippet": "    public void setUp() {\n        super.setUp();\n        tenToTwenty = new LongRange(long10, long20);\n        otherRange = new NumberRange(ten, twenty);\n    }",
        "begin_line": 44,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 22)",
            "(line 46,col 9)-(line 46,col 52)",
            "(line 47,col 9)-(line 47,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.LongRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/LongRangeTest.java",
        "signature": "org.apache.commons.lang.math.LongRangeTest.createRange(java.lang.Integer, java.lang.Integer)",
        "snippet": "    protected Range createRange(Integer integer1, Integer integer2) {\n        return new LongRange(integer1, integer2);\n    }",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.LongRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/LongRangeTest.java",
        "signature": "org.apache.commons.lang.math.LongRangeTest.createRange(java.lang.Integer)",
        "snippet": "    protected Range createRange(Integer integer) {\n        return new NumberRange(integer);\n    }",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.LongRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/LongRangeTest.java",
        "signature": "org.apache.commons.lang.math.LongRangeTest.testConstructor1a()",
        "snippet": "    public void testConstructor1a() {\n        LongRange nr = new LongRange(8L);\n        assertEquals(long8, nr.getMinimumNumber());\n        assertEquals(long8, nr.getMaximumNumber());\n    }",
        "begin_line": 59,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 41)",
            "(line 61,col 9)-(line 61,col 51)",
            "(line 62,col 9)-(line 62,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.LongRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/LongRangeTest.java",
        "signature": "org.apache.commons.lang.math.LongRangeTest.testConstructor1b()",
        "snippet": "    public void testConstructor1b() {\n        LongRange nr = new LongRange(long8);\n        assertSame(long8, nr.getMinimumNumber());\n        assertSame(long8, nr.getMaximumNumber());\n        \n        Range r = new LongRange(nonComparableNumber);\n        \n        try {\n            new LongRange(null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 65,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 44)",
            "(line 67,col 9)-(line 67,col 49)",
            "(line 68,col 9)-(line 68,col 49)",
            "(line 70,col 9)-(line 70,col 53)",
            "(line 72,col 9)-(line 75,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.LongRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/LongRangeTest.java",
        "signature": "org.apache.commons.lang.math.LongRangeTest.testConstructor2a()",
        "snippet": "    public void testConstructor2a() {\n        LongRange nr = new LongRange(8L, 10L);\n        assertEquals(long8, nr.getMinimumNumber());\n        assertEquals(long10, nr.getMaximumNumber());\n        \n        nr = new LongRange(10L, 8L);\n        assertEquals(long8, nr.getMinimumNumber());\n        assertEquals(long10, nr.getMaximumNumber());\n    }",
        "begin_line": 78,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 46)",
            "(line 80,col 9)-(line 80,col 51)",
            "(line 81,col 9)-(line 81,col 52)",
            "(line 83,col 9)-(line 83,col 36)",
            "(line 84,col 9)-(line 84,col 51)",
            "(line 85,col 9)-(line 85,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.LongRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/LongRangeTest.java",
        "signature": "org.apache.commons.lang.math.LongRangeTest.testConstructor2b()",
        "snippet": "    public void testConstructor2b() {\n        LongRange nr = new LongRange(long8, long10);\n        assertSame(long8, nr.getMinimumNumber());\n        assertSame(long10, nr.getMaximumNumber());\n        \n        nr = new LongRange(long10, long8);\n        assertSame(long8, nr.getMinimumNumber());\n        assertSame(long10, nr.getMaximumNumber());\n        \n        nr = new LongRange(long8, long10);\n        assertSame(long8, nr.getMinimumNumber());\n        assertEquals(long10, nr.getMaximumNumber());\n        \n        // not null\n        try {\n            new LongRange(long8, null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            new LongRange(null, long8);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            new LongRange(null, null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 88,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 52)",
            "(line 90,col 9)-(line 90,col 49)",
            "(line 91,col 9)-(line 91,col 50)",
            "(line 93,col 9)-(line 93,col 42)",
            "(line 94,col 9)-(line 94,col 49)",
            "(line 95,col 9)-(line 95,col 50)",
            "(line 97,col 9)-(line 97,col 42)",
            "(line 98,col 9)-(line 98,col 49)",
            "(line 99,col 9)-(line 99,col 52)",
            "(line 102,col 9)-(line 105,col 48)",
            "(line 106,col 9)-(line 109,col 48)",
            "(line 110,col 9)-(line 113,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.LongRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/LongRangeTest.java",
        "signature": "org.apache.commons.lang.math.LongRangeTest.testContainsNumber()",
        "snippet": "    public void testContainsNumber() {\n        assertEquals(false, tenToTwenty.containsNumber(null));\n        assertEquals(true, tenToTwenty.containsNumber(nonComparableNumber));\n        \n        assertEquals(false, tenToTwenty.containsNumber(five));\n        assertEquals(true, tenToTwenty.containsNumber(ten));\n        assertEquals(true, tenToTwenty.containsNumber(fifteen));\n        assertEquals(true, tenToTwenty.containsNumber(twenty));\n        assertEquals(false, tenToTwenty.containsNumber(twentyFive));\n        \n        assertEquals(false, tenToTwenty.containsNumber(long8));\n        assertEquals(true, tenToTwenty.containsNumber(long10));\n        assertEquals(true, tenToTwenty.containsNumber(long12));\n        assertEquals(true, tenToTwenty.containsNumber(long20));\n        assertEquals(false, tenToTwenty.containsNumber(long21));\n        \n        assertEquals(false, tenToTwenty.containsNumber(double8));\n        assertEquals(true, tenToTwenty.containsNumber(double10));\n        assertEquals(true, tenToTwenty.containsNumber(double12));\n        assertEquals(true, tenToTwenty.containsNumber(double20));\n        assertEquals(false, tenToTwenty.containsNumber(double21));\n        \n        assertEquals(false, tenToTwenty.containsNumber(float8));\n        assertEquals(true, tenToTwenty.containsNumber(float10));\n        assertEquals(true, tenToTwenty.containsNumber(float12));\n        assertEquals(true, tenToTwenty.containsNumber(float20));\n        assertEquals(false, tenToTwenty.containsNumber(float21));\n    }",
        "begin_line": 118,
        "end_line": 145,
        "comment": "",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 62)",
            "(line 120,col 9)-(line 120,col 76)",
            "(line 122,col 9)-(line 122,col 62)",
            "(line 123,col 9)-(line 123,col 60)",
            "(line 124,col 9)-(line 124,col 64)",
            "(line 125,col 9)-(line 125,col 63)",
            "(line 126,col 9)-(line 126,col 68)",
            "(line 128,col 9)-(line 128,col 63)",
            "(line 129,col 9)-(line 129,col 63)",
            "(line 130,col 9)-(line 130,col 63)",
            "(line 131,col 9)-(line 131,col 63)",
            "(line 132,col 9)-(line 132,col 64)",
            "(line 134,col 9)-(line 134,col 65)",
            "(line 135,col 9)-(line 135,col 65)",
            "(line 136,col 9)-(line 136,col 65)",
            "(line 137,col 9)-(line 137,col 65)",
            "(line 138,col 9)-(line 138,col 66)",
            "(line 140,col 9)-(line 140,col 64)",
            "(line 141,col 9)-(line 141,col 64)",
            "(line 142,col 9)-(line 142,col 64)",
            "(line 143,col 9)-(line 143,col 64)",
            "(line 144,col 9)-(line 144,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.LongRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/LongRangeTest.java",
        "signature": "org.apache.commons.lang.math.LongRangeTest.testContainsLongBig()",
        "snippet": "    public void testContainsLongBig() {\n        LongRange big = new LongRange(Long.MAX_VALUE, Long.MAX_VALUE- 2);\n        assertEquals(true, big.containsLong(Long.MAX_VALUE - 1));\n        assertEquals(false, big.containsLong(Long.MAX_VALUE - 3));\n    }",
        "begin_line": 147,
        "end_line": 151,
        "comment": "",
        "child_ranges": [
            "(line 148,col 9)-(line 148,col 73)",
            "(line 149,col 9)-(line 149,col 65)",
            "(line 150,col 9)-(line 150,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.LongRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/LongRangeTest.java",
        "signature": "org.apache.commons.lang.math.LongRangeTest.testToArray()",
        "snippet": "    public void testToArray() {\n        long[] threeItems = new LongRange(3, 5).toArray();\n        assertTrue(Arrays.equals(new long[]{3, 4, 5}, threeItems));\n        long[] oneItem = new LongRange(4).toArray();\n        assertTrue(Arrays.equals(new long[]{4}, oneItem));\n    }",
        "begin_line": 153,
        "end_line": 158,
        "comment": "",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 58)",
            "(line 155,col 9)-(line 155,col 67)",
            "(line 156,col 9)-(line 156,col 52)",
            "(line 157,col 9)-(line 157,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.MathTestSuite",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/MathTestSuite.java",
        "signature": "org.apache.commons.lang.math.MathTestSuite.MathTestSuite(java.lang.String)",
        "snippet": "    public MathTestSuite(String name) {\n        super(name);\n    }",
        "begin_line": 34,
        "end_line": 36,
        "comment": "\n     * Construct a new instance.\n     ",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.MathTestSuite",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/MathTestSuite.java",
        "signature": "org.apache.commons.lang.math.MathTestSuite.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 41,
        "end_line": 43,
        "comment": "\n     * Command-line interface.\n     ",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.MathTestSuite",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/MathTestSuite.java",
        "signature": "org.apache.commons.lang.math.MathTestSuite.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite();\n        suite.setName(\"Commons-Lang-Math Tests\");\n        suite.addTest(DoubleRangeTest.suite());\n        suite.addTest(FloatRangeTest.suite());\n        suite.addTest(FractionTest.suite());\n        suite.addTest(IntRangeTest.suite());\n        suite.addTest(LongRangeTest.suite());\n        suite.addTest(NumberRangeTest.suite());\n        suite.addTest(NumberUtilsTest.suite());\n        suite.addTest(RandomUtilsTest.suite());\n        suite.addTest(RangeTest.suite());\n        return suite;\n    }",
        "begin_line": 48,
        "end_line": 61,
        "comment": "\n     * Get the suite of tests\n     ",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 42)",
            "(line 50,col 9)-(line 50,col 49)",
            "(line 51,col 9)-(line 51,col 47)",
            "(line 52,col 9)-(line 52,col 46)",
            "(line 53,col 9)-(line 53,col 44)",
            "(line 54,col 9)-(line 54,col 44)",
            "(line 55,col 9)-(line 55,col 45)",
            "(line 56,col 9)-(line 56,col 47)",
            "(line 57,col 9)-(line 57,col 47)",
            "(line 58,col 9)-(line 58,col 47)",
            "(line 59,col 9)-(line 59,col 41)",
            "(line 60,col 9)-(line 60,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberRangeTest.java",
        "signature": "org.apache.commons.lang.math.NumberRangeTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(NumberRangeTest.class);\n        suite.setName(\"NumberRange Tests\");\n        return suite;\n    }",
        "begin_line": 35,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 63)",
            "(line 37,col 9)-(line 37,col 43)",
            "(line 38,col 9)-(line 38,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberRangeTest.java",
        "signature": "org.apache.commons.lang.math.NumberRangeTest.NumberRangeTest(java.lang.String)",
        "snippet": "    public NumberRangeTest(String name) {\n        super(name);\n    }",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberRangeTest.java",
        "signature": "org.apache.commons.lang.math.NumberRangeTest.checkConstructorException(java.lang.Number)",
        "snippet": "    void checkConstructorException(Number num) {\n        try {\n            new NumberRange(num);\n            fail(\"Expected an IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // Expected.\n        }\n    }",
        "begin_line": 45,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 51,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberRangeTest.java",
        "signature": "org.apache.commons.lang.math.NumberRangeTest.checkConstructorException(java.lang.Number, java.lang.Number)",
        "snippet": "    void checkConstructorException(Number num1, Number num2) {\n        try {\n            new NumberRange(num1, num2);\n            fail(\"Expected an IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // Expected.\n        }\n    }",
        "begin_line": 54,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 60,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberRangeTest.java",
        "signature": "org.apache.commons.lang.math.NumberRangeTest.createRange(java.lang.Integer)",
        "snippet": "    protected Range createRange(Integer integer) {\n        return new NumberRange(integer);\n    }",
        "begin_line": 63,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberRangeTest.java",
        "signature": "org.apache.commons.lang.math.NumberRangeTest.createRange(java.lang.Integer, java.lang.Integer)",
        "snippet": "    protected Range createRange(Integer integer1, Integer integer2) {\n        return new NumberRange(integer1, integer2);\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberRangeTest.java",
        "signature": "org.apache.commons.lang.math.NumberRangeTest.setUp()",
        "snippet": "    public void setUp() {\n        super.setUp();\n        tenToTwenty = new NumberRange(ten, twenty);\n        otherRange = new IntRange(ten, twenty);\n    }",
        "begin_line": 73,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 22)",
            "(line 75,col 9)-(line 75,col 51)",
            "(line 76,col 9)-(line 76,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberRangeTest.java",
        "signature": "org.apache.commons.lang.math.NumberRangeTest.testConstructor1()",
        "snippet": "    public void testConstructor1() {\n        NumberRange nr = new NumberRange(five);\n        assertSame(five, nr.getMinimumNumber());\n        assertSame(five, nr.getMaximumNumber());\n    }",
        "begin_line": 82,
        "end_line": 86,
        "comment": "\n     * Tests non-exceptional conditions for the one argument constructor.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 47)",
            "(line 84,col 9)-(line 84,col 48)",
            "(line 85,col 9)-(line 85,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberRangeTest.java",
        "signature": "org.apache.commons.lang.math.NumberRangeTest.testConstructor1Exceptions()",
        "snippet": "    public void testConstructor1Exceptions() {\n        this.checkConstructorException(null);\n        this.checkConstructorException(nonComparableNumber);\n        this.checkConstructorException(new Float(Float.NaN));\n        this.checkConstructorException(new Double(Double.NaN));\n    }",
        "begin_line": 91,
        "end_line": 96,
        "comment": "\n     * Tests exceptional conditions for the one argument constructor.\n     ",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 45)",
            "(line 93,col 9)-(line 93,col 60)",
            "(line 94,col 9)-(line 94,col 61)",
            "(line 95,col 9)-(line 95,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberRangeTest.java",
        "signature": "org.apache.commons.lang.math.NumberRangeTest.testConstructor2()",
        "snippet": "    public void testConstructor2() {\n        NumberRange nr = new NumberRange(five, ten);\n        assertSame(five, nr.getMinimumNumber());\n        assertSame(ten, nr.getMaximumNumber());\n\n        nr = new NumberRange(ten, five);\n        assertSame(five, nr.getMinimumNumber());\n        assertSame(ten, nr.getMaximumNumber());\n    }",
        "begin_line": 101,
        "end_line": 109,
        "comment": "\n     * Tests non-exceptional conditions for the two argument constructor.\n     ",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 52)",
            "(line 103,col 9)-(line 103,col 48)",
            "(line 104,col 9)-(line 104,col 47)",
            "(line 106,col 9)-(line 106,col 40)",
            "(line 107,col 9)-(line 107,col 48)",
            "(line 108,col 9)-(line 108,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberRangeTest.java",
        "signature": "org.apache.commons.lang.math.NumberRangeTest.testConstructor2Exceptions()",
        "snippet": "    public void testConstructor2Exceptions() {\n        this.checkConstructorException(null, null);\n\n        this.checkConstructorException(new Float(12.2f), new Double(12.2));\n        this.checkConstructorException(new Float(Float.NaN), new Double(12.2));\n        this.checkConstructorException(new Double(Double.NaN), new Double(12.2));\n        this.checkConstructorException(new Double(12.2), new Double(Double.NaN));\n        this.checkConstructorException(new Double(Double.NaN), new Double(Double.NaN));\n        this.checkConstructorException(null, new Double(12.2));\n        this.checkConstructorException(new Double(12.2), null);\n\n        this.checkConstructorException(new Double(12.2f), new Float(12.2));\n        this.checkConstructorException(new Double(Double.NaN), new Float(12.2));\n        this.checkConstructorException(new Float(Float.NaN), new Float(12.2));\n        this.checkConstructorException(new Float(12.2), new Float(Float.NaN));\n        this.checkConstructorException(new Float(Float.NaN), new Float(Float.NaN));\n        this.checkConstructorException(null, new Float(12.2));\n        this.checkConstructorException(new Float(12.2), null);\n\n        this.checkConstructorException(nonComparableNumber, nonComparableNumber);\n        this.checkConstructorException(null, nonComparableNumber);\n        this.checkConstructorException(nonComparableNumber, null);\n        this.checkConstructorException(new Float(12.2), nonComparableNumber);\n        this.checkConstructorException(nonComparableNumber, new Float(12.2));\n    }",
        "begin_line": 114,
        "end_line": 138,
        "comment": "\n     * Tests exceptional conditions for the two argument constructor.\n     ",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 51)",
            "(line 117,col 9)-(line 117,col 75)",
            "(line 118,col 9)-(line 118,col 79)",
            "(line 119,col 9)-(line 119,col 81)",
            "(line 120,col 9)-(line 120,col 81)",
            "(line 121,col 9)-(line 121,col 87)",
            "(line 122,col 9)-(line 122,col 63)",
            "(line 123,col 9)-(line 123,col 63)",
            "(line 125,col 9)-(line 125,col 75)",
            "(line 126,col 9)-(line 126,col 80)",
            "(line 127,col 9)-(line 127,col 78)",
            "(line 128,col 9)-(line 128,col 78)",
            "(line 129,col 9)-(line 129,col 83)",
            "(line 130,col 9)-(line 130,col 62)",
            "(line 131,col 9)-(line 131,col 62)",
            "(line 133,col 9)-(line 133,col 81)",
            "(line 134,col 9)-(line 134,col 66)",
            "(line 135,col 9)-(line 135,col 66)",
            "(line 136,col 9)-(line 136,col 77)",
            "(line 137,col 9)-(line 137,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberRangeTest.java",
        "signature": "org.apache.commons.lang.math.NumberRangeTest.testContainsLongBig()",
        "snippet": "    public void testContainsLongBig() {\n        // original NumberRange class failed this test\n        NumberRange big = new NumberRange(new Long(Long.MAX_VALUE), new Long(Long.MAX_VALUE - 2));\n        assertEquals(true, big.containsLong(Long.MAX_VALUE - 1));\n        assertEquals(false, big.containsLong(Long.MAX_VALUE - 3));\n    }",
        "begin_line": 142,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 144,col 9)-(line 144,col 98)",
            "(line 145,col 9)-(line 145,col 65)",
            "(line 146,col 9)-(line 146,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberRangeTest.java",
        "signature": "org.apache.commons.lang.math.NumberRangeTest.testContainsNumber()",
        "snippet": "    public void testContainsNumber() {\n        assertEquals(false, tenToTwenty.containsNumber(null));\n        assertEquals(false, tenToTwenty.containsNumber(five));\n        assertEquals(true, tenToTwenty.containsNumber(ten));\n        assertEquals(true, tenToTwenty.containsNumber(fifteen));\n        assertEquals(true, tenToTwenty.containsNumber(twenty));\n        assertEquals(false, tenToTwenty.containsNumber(twentyFive));\n\n        try {\n            tenToTwenty.containsNumber(long21);\n            fail();\n        } catch (IllegalArgumentException ex) {\n        }\n    }",
        "begin_line": 149,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 150,col 9)-(line 150,col 62)",
            "(line 151,col 9)-(line 151,col 62)",
            "(line 152,col 9)-(line 152,col 60)",
            "(line 153,col 9)-(line 153,col 64)",
            "(line 154,col 9)-(line 154,col 63)",
            "(line 155,col 9)-(line 155,col 68)",
            "(line 157,col 9)-(line 161,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.AbstractRangeTest",
        "child_classes": [
            "org.apache.commons.lang.math.FloatRangeTest",
            "org.apache.commons.lang.math.NumberRangeTest",
            "org.apache.commons.lang.math.DoubleRangeTest",
            "org.apache.commons.lang.math.LongRangeTest",
            "org.apache.commons.lang.math.IntRangeTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/math/AbstractRangeTest.java",
        "signature": "org.apache.commons.lang.math.AbstractRangeTest.InnerNumber.doubleValue()",
        "snippet": "        public double doubleValue() {\n            return 12d;\n        }",
        "begin_line": 57,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 58,col 13)-(line 58,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.AbstractRangeTest",
        "child_classes": [
            "org.apache.commons.lang.math.FloatRangeTest",
            "org.apache.commons.lang.math.NumberRangeTest",
            "org.apache.commons.lang.math.DoubleRangeTest",
            "org.apache.commons.lang.math.LongRangeTest",
            "org.apache.commons.lang.math.IntRangeTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/math/AbstractRangeTest.java",
        "signature": "org.apache.commons.lang.math.AbstractRangeTest.InnerNumber.floatValue()",
        "snippet": "        public float floatValue() {\n            return 12f;\n        }",
        "begin_line": 60,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 61,col 13)-(line 61,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.AbstractRangeTest",
        "child_classes": [
            "org.apache.commons.lang.math.FloatRangeTest",
            "org.apache.commons.lang.math.NumberRangeTest",
            "org.apache.commons.lang.math.DoubleRangeTest",
            "org.apache.commons.lang.math.LongRangeTest",
            "org.apache.commons.lang.math.IntRangeTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/math/AbstractRangeTest.java",
        "signature": "org.apache.commons.lang.math.AbstractRangeTest.InnerNumber.intValue()",
        "snippet": "        public int intValue() {\n            return 12;\n        }",
        "begin_line": 63,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 64,col 13)-(line 64,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.AbstractRangeTest",
        "child_classes": [
            "org.apache.commons.lang.math.FloatRangeTest",
            "org.apache.commons.lang.math.NumberRangeTest",
            "org.apache.commons.lang.math.DoubleRangeTest",
            "org.apache.commons.lang.math.LongRangeTest",
            "org.apache.commons.lang.math.IntRangeTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/math/AbstractRangeTest.java",
        "signature": "org.apache.commons.lang.math.AbstractRangeTest.InnerNumber.longValue()",
        "snippet": "        public long longValue() {\n            return 12L;\n        }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 67,col 13)-(line 67,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.AbstractRangeTest",
        "child_classes": [
            "org.apache.commons.lang.math.FloatRangeTest",
            "org.apache.commons.lang.math.NumberRangeTest",
            "org.apache.commons.lang.math.DoubleRangeTest",
            "org.apache.commons.lang.math.LongRangeTest",
            "org.apache.commons.lang.math.IntRangeTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/math/AbstractRangeTest.java",
        "signature": "org.apache.commons.lang.math.AbstractRangeTest.AbstractRangeTest(java.lang.String)",
        "snippet": "    public AbstractRangeTest(String name) {\n        super(name);\n    }",
        "begin_line": 74,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.AbstractRangeTest",
        "child_classes": [
            "org.apache.commons.lang.math.FloatRangeTest",
            "org.apache.commons.lang.math.NumberRangeTest",
            "org.apache.commons.lang.math.DoubleRangeTest",
            "org.apache.commons.lang.math.LongRangeTest",
            "org.apache.commons.lang.math.IntRangeTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/math/AbstractRangeTest.java",
        "signature": "org.apache.commons.lang.math.AbstractRangeTest.setUp()",
        "snippet": "    public void setUp() {\n        five = new Integer(5);\n        ten = new Integer(10);\n        twelve = new Integer(12);\n        fifteen = new Integer(15);\n        twenty = new Integer(20);\n        twentyFive = new Integer(25);\n        long8 = new Long(8);\n        long10 = new Long(10);\n        long12 = new Long(12);\n        long20 = new Long(20);\n        long21 = new Long(21);\n        double8 = new Double(8);\n        double10 = new Double(10);\n        double12 = new Double(12);\n        double20 = new Double(20);\n        double21 = new Double(21);\n        float8 = new Float(8);\n        float10 = new Float(10);\n        float12 = new Float(12);\n        float20 = new Float(20);\n        float21 = new Float(21);\n    }",
        "begin_line": 78,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 30)",
            "(line 80,col 9)-(line 80,col 30)",
            "(line 81,col 9)-(line 81,col 33)",
            "(line 82,col 9)-(line 82,col 34)",
            "(line 83,col 9)-(line 83,col 33)",
            "(line 84,col 9)-(line 84,col 37)",
            "(line 85,col 9)-(line 85,col 28)",
            "(line 86,col 9)-(line 86,col 30)",
            "(line 87,col 9)-(line 87,col 30)",
            "(line 88,col 9)-(line 88,col 30)",
            "(line 89,col 9)-(line 89,col 30)",
            "(line 90,col 9)-(line 90,col 32)",
            "(line 91,col 9)-(line 91,col 34)",
            "(line 92,col 9)-(line 92,col 34)",
            "(line 93,col 9)-(line 93,col 34)",
            "(line 94,col 9)-(line 94,col 34)",
            "(line 95,col 9)-(line 95,col 30)",
            "(line 96,col 9)-(line 96,col 32)",
            "(line 97,col 9)-(line 97,col 32)",
            "(line 98,col 9)-(line 98,col 32)",
            "(line 99,col 9)-(line 99,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.AbstractRangeTest",
        "child_classes": [
            "org.apache.commons.lang.math.FloatRangeTest",
            "org.apache.commons.lang.math.NumberRangeTest",
            "org.apache.commons.lang.math.DoubleRangeTest",
            "org.apache.commons.lang.math.LongRangeTest",
            "org.apache.commons.lang.math.IntRangeTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/math/AbstractRangeTest.java",
        "signature": "org.apache.commons.lang.math.AbstractRangeTest.testGetMinimum()",
        "snippet": "    public void testGetMinimum() {\n        assertEquals(10L, tenToTwenty.getMinimumLong());\n        assertEquals(10, tenToTwenty.getMinimumInteger());\n        assertEquals(10d, tenToTwenty.getMinimumDouble(), 0.00001d);\n        assertEquals(10f, tenToTwenty.getMinimumFloat(), 0.00001f);\n    }",
        "begin_line": 104,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 56)",
            "(line 106,col 9)-(line 106,col 58)",
            "(line 107,col 9)-(line 107,col 68)",
            "(line 108,col 9)-(line 108,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.AbstractRangeTest",
        "child_classes": [
            "org.apache.commons.lang.math.FloatRangeTest",
            "org.apache.commons.lang.math.NumberRangeTest",
            "org.apache.commons.lang.math.DoubleRangeTest",
            "org.apache.commons.lang.math.LongRangeTest",
            "org.apache.commons.lang.math.IntRangeTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/math/AbstractRangeTest.java",
        "signature": "org.apache.commons.lang.math.AbstractRangeTest.testGetMaximum()",
        "snippet": "    public void testGetMaximum() {\n        assertEquals(20L, tenToTwenty.getMaximumLong());\n        assertEquals(20, tenToTwenty.getMaximumInteger());\n        assertEquals(20d, tenToTwenty.getMaximumDouble(), 0.00001d);\n        assertEquals(20f, tenToTwenty.getMaximumFloat(), 0.00001f);\n    }",
        "begin_line": 111,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 56)",
            "(line 113,col 9)-(line 113,col 58)",
            "(line 114,col 9)-(line 114,col 68)",
            "(line 115,col 9)-(line 115,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.AbstractRangeTest",
        "child_classes": [
            "org.apache.commons.lang.math.FloatRangeTest",
            "org.apache.commons.lang.math.NumberRangeTest",
            "org.apache.commons.lang.math.DoubleRangeTest",
            "org.apache.commons.lang.math.LongRangeTest",
            "org.apache.commons.lang.math.IntRangeTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/math/AbstractRangeTest.java",
        "signature": "org.apache.commons.lang.math.AbstractRangeTest.testContainsLong()",
        "snippet": "    public void testContainsLong() {\n        assertEquals(false, tenToTwenty.containsLong(null));\n        assertEquals(true, tenToTwenty.containsLong(nonComparableNumber));\n        \n        assertEquals(false, tenToTwenty.containsLong(five));\n        assertEquals(true, tenToTwenty.containsLong(ten));\n        assertEquals(true, tenToTwenty.containsLong(fifteen));\n        assertEquals(true, tenToTwenty.containsLong(twenty));\n        assertEquals(false, tenToTwenty.containsLong(twentyFive));\n        \n        assertEquals(false, tenToTwenty.containsLong(long8));\n        assertEquals(true, tenToTwenty.containsLong(long10));\n        assertEquals(true, tenToTwenty.containsLong(long12));\n        assertEquals(true, tenToTwenty.containsLong(long20));\n        assertEquals(false, tenToTwenty.containsLong(long21));\n        \n        assertEquals(false, tenToTwenty.containsLong(double8));\n        assertEquals(true, tenToTwenty.containsLong(double10));\n        assertEquals(true, tenToTwenty.containsLong(double12));\n        assertEquals(true, tenToTwenty.containsLong(double20));\n        assertEquals(false, tenToTwenty.containsLong(double21));\n        \n        assertEquals(false, tenToTwenty.containsLong(float8));\n        assertEquals(true, tenToTwenty.containsLong(float10));\n        assertEquals(true, tenToTwenty.containsLong(float12));\n        assertEquals(true, tenToTwenty.containsLong(float20));\n        assertEquals(false, tenToTwenty.containsLong(float21));\n        \n        assertEquals(false, tenToTwenty.containsLong(9L));\n        assertEquals(true, tenToTwenty.containsLong(10L));\n        assertEquals(true, tenToTwenty.containsLong(15L));\n        assertEquals(true, tenToTwenty.containsLong(20L));\n        assertEquals(false, tenToTwenty.containsLong(21L));\n    }",
        "begin_line": 120,
        "end_line": 153,
        "comment": "",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 60)",
            "(line 122,col 9)-(line 122,col 74)",
            "(line 124,col 9)-(line 124,col 60)",
            "(line 125,col 9)-(line 125,col 58)",
            "(line 126,col 9)-(line 126,col 62)",
            "(line 127,col 9)-(line 127,col 61)",
            "(line 128,col 9)-(line 128,col 66)",
            "(line 130,col 9)-(line 130,col 61)",
            "(line 131,col 9)-(line 131,col 61)",
            "(line 132,col 9)-(line 132,col 61)",
            "(line 133,col 9)-(line 133,col 61)",
            "(line 134,col 9)-(line 134,col 62)",
            "(line 136,col 9)-(line 136,col 63)",
            "(line 137,col 9)-(line 137,col 63)",
            "(line 138,col 9)-(line 138,col 63)",
            "(line 139,col 9)-(line 139,col 63)",
            "(line 140,col 9)-(line 140,col 64)",
            "(line 142,col 9)-(line 142,col 62)",
            "(line 143,col 9)-(line 143,col 62)",
            "(line 144,col 9)-(line 144,col 62)",
            "(line 145,col 9)-(line 145,col 62)",
            "(line 146,col 9)-(line 146,col 63)",
            "(line 148,col 9)-(line 148,col 58)",
            "(line 149,col 9)-(line 149,col 58)",
            "(line 150,col 9)-(line 150,col 58)",
            "(line 151,col 9)-(line 151,col 58)",
            "(line 152,col 9)-(line 152,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.AbstractRangeTest",
        "child_classes": [
            "org.apache.commons.lang.math.FloatRangeTest",
            "org.apache.commons.lang.math.NumberRangeTest",
            "org.apache.commons.lang.math.DoubleRangeTest",
            "org.apache.commons.lang.math.LongRangeTest",
            "org.apache.commons.lang.math.IntRangeTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/math/AbstractRangeTest.java",
        "signature": "org.apache.commons.lang.math.AbstractRangeTest.testContainsInteger()",
        "snippet": "    public void testContainsInteger() {\n        assertEquals(false, tenToTwenty.containsInteger(null));\n        assertEquals(true, tenToTwenty.containsInteger(nonComparableNumber));\n        \n        assertEquals(false, tenToTwenty.containsInteger(five));\n        assertEquals(true, tenToTwenty.containsInteger(ten));\n        assertEquals(true, tenToTwenty.containsInteger(fifteen));\n        assertEquals(true, tenToTwenty.containsInteger(twenty));\n        assertEquals(false, tenToTwenty.containsInteger(twentyFive));\n        \n        assertEquals(false, tenToTwenty.containsInteger(long8));\n        assertEquals(true, tenToTwenty.containsInteger(long10));\n        assertEquals(true, tenToTwenty.containsInteger(long12));\n        assertEquals(true, tenToTwenty.containsInteger(long20));\n        assertEquals(false, tenToTwenty.containsInteger(long21));\n        \n        assertEquals(false, tenToTwenty.containsInteger(double8));\n        assertEquals(true, tenToTwenty.containsInteger(double10));\n        assertEquals(true, tenToTwenty.containsInteger(double12));\n        assertEquals(true, tenToTwenty.containsInteger(double20));\n        assertEquals(false, tenToTwenty.containsInteger(double21));\n        \n        assertEquals(false, tenToTwenty.containsInteger(float8));\n        assertEquals(true, tenToTwenty.containsInteger(float10));\n        assertEquals(true, tenToTwenty.containsInteger(float12));\n        assertEquals(true, tenToTwenty.containsInteger(float20));\n        assertEquals(false, tenToTwenty.containsInteger(float21));\n        \n        assertEquals(false, tenToTwenty.containsInteger(9));\n        assertEquals(true, tenToTwenty.containsInteger(10));\n        assertEquals(true, tenToTwenty.containsInteger(15));\n        assertEquals(true, tenToTwenty.containsInteger(20));\n        assertEquals(false, tenToTwenty.containsInteger(21));\n    }",
        "begin_line": 155,
        "end_line": 188,
        "comment": "",
        "child_ranges": [
            "(line 156,col 9)-(line 156,col 63)",
            "(line 157,col 9)-(line 157,col 77)",
            "(line 159,col 9)-(line 159,col 63)",
            "(line 160,col 9)-(line 160,col 61)",
            "(line 161,col 9)-(line 161,col 65)",
            "(line 162,col 9)-(line 162,col 64)",
            "(line 163,col 9)-(line 163,col 69)",
            "(line 165,col 9)-(line 165,col 64)",
            "(line 166,col 9)-(line 166,col 64)",
            "(line 167,col 9)-(line 167,col 64)",
            "(line 168,col 9)-(line 168,col 64)",
            "(line 169,col 9)-(line 169,col 65)",
            "(line 171,col 9)-(line 171,col 66)",
            "(line 172,col 9)-(line 172,col 66)",
            "(line 173,col 9)-(line 173,col 66)",
            "(line 174,col 9)-(line 174,col 66)",
            "(line 175,col 9)-(line 175,col 67)",
            "(line 177,col 9)-(line 177,col 65)",
            "(line 178,col 9)-(line 178,col 65)",
            "(line 179,col 9)-(line 179,col 65)",
            "(line 180,col 9)-(line 180,col 65)",
            "(line 181,col 9)-(line 181,col 66)",
            "(line 183,col 9)-(line 183,col 60)",
            "(line 184,col 9)-(line 184,col 60)",
            "(line 185,col 9)-(line 185,col 60)",
            "(line 186,col 9)-(line 186,col 60)",
            "(line 187,col 9)-(line 187,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.AbstractRangeTest",
        "child_classes": [
            "org.apache.commons.lang.math.FloatRangeTest",
            "org.apache.commons.lang.math.NumberRangeTest",
            "org.apache.commons.lang.math.DoubleRangeTest",
            "org.apache.commons.lang.math.LongRangeTest",
            "org.apache.commons.lang.math.IntRangeTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/math/AbstractRangeTest.java",
        "signature": "org.apache.commons.lang.math.AbstractRangeTest.testContainsDouble()",
        "snippet": "    public void testContainsDouble() {\n        assertEquals(false, tenToTwenty.containsDouble(null));\n        assertEquals(true, tenToTwenty.containsDouble(nonComparableNumber));\n        \n        assertEquals(false, tenToTwenty.containsDouble(five));\n        assertEquals(true, tenToTwenty.containsDouble(ten));\n        assertEquals(true, tenToTwenty.containsDouble(fifteen));\n        assertEquals(true, tenToTwenty.containsDouble(twenty));\n        assertEquals(false, tenToTwenty.containsDouble(twentyFive));\n        \n        assertEquals(false, tenToTwenty.containsDouble(long8));\n        assertEquals(true, tenToTwenty.containsDouble(long10));\n        assertEquals(true, tenToTwenty.containsDouble(long12));\n        assertEquals(true, tenToTwenty.containsDouble(long20));\n        assertEquals(false, tenToTwenty.containsDouble(long21));\n        \n        assertEquals(false, tenToTwenty.containsDouble(double8));\n        assertEquals(true, tenToTwenty.containsDouble(double10));\n        assertEquals(true, tenToTwenty.containsDouble(double12));\n        assertEquals(true, tenToTwenty.containsDouble(double20));\n        assertEquals(false, tenToTwenty.containsDouble(double21));\n        \n        assertEquals(false, tenToTwenty.containsDouble(float8));\n        assertEquals(true, tenToTwenty.containsDouble(float10));\n        assertEquals(true, tenToTwenty.containsDouble(float12));\n        assertEquals(true, tenToTwenty.containsDouble(float20));\n        assertEquals(false, tenToTwenty.containsDouble(float21));\n        \n        assertEquals(false, tenToTwenty.containsDouble(9d));\n        assertEquals(true, tenToTwenty.containsDouble(10d));\n        assertEquals(true, tenToTwenty.containsDouble(15d));\n        assertEquals(true, tenToTwenty.containsDouble(20d));\n        assertEquals(false, tenToTwenty.containsDouble(21d));\n    }",
        "begin_line": 190,
        "end_line": 223,
        "comment": "",
        "child_ranges": [
            "(line 191,col 9)-(line 191,col 62)",
            "(line 192,col 9)-(line 192,col 76)",
            "(line 194,col 9)-(line 194,col 62)",
            "(line 195,col 9)-(line 195,col 60)",
            "(line 196,col 9)-(line 196,col 64)",
            "(line 197,col 9)-(line 197,col 63)",
            "(line 198,col 9)-(line 198,col 68)",
            "(line 200,col 9)-(line 200,col 63)",
            "(line 201,col 9)-(line 201,col 63)",
            "(line 202,col 9)-(line 202,col 63)",
            "(line 203,col 9)-(line 203,col 63)",
            "(line 204,col 9)-(line 204,col 64)",
            "(line 206,col 9)-(line 206,col 65)",
            "(line 207,col 9)-(line 207,col 65)",
            "(line 208,col 9)-(line 208,col 65)",
            "(line 209,col 9)-(line 209,col 65)",
            "(line 210,col 9)-(line 210,col 66)",
            "(line 212,col 9)-(line 212,col 64)",
            "(line 213,col 9)-(line 213,col 64)",
            "(line 214,col 9)-(line 214,col 64)",
            "(line 215,col 9)-(line 215,col 64)",
            "(line 216,col 9)-(line 216,col 65)",
            "(line 218,col 9)-(line 218,col 60)",
            "(line 219,col 9)-(line 219,col 60)",
            "(line 220,col 9)-(line 220,col 60)",
            "(line 221,col 9)-(line 221,col 60)",
            "(line 222,col 9)-(line 222,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.AbstractRangeTest",
        "child_classes": [
            "org.apache.commons.lang.math.FloatRangeTest",
            "org.apache.commons.lang.math.NumberRangeTest",
            "org.apache.commons.lang.math.DoubleRangeTest",
            "org.apache.commons.lang.math.LongRangeTest",
            "org.apache.commons.lang.math.IntRangeTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/math/AbstractRangeTest.java",
        "signature": "org.apache.commons.lang.math.AbstractRangeTest.testContainsFloat()",
        "snippet": "    public void testContainsFloat() {\n        assertEquals(false, tenToTwenty.containsFloat(null));\n        assertEquals(true, tenToTwenty.containsFloat(nonComparableNumber));\n        \n        assertEquals(false, tenToTwenty.containsFloat(five));\n        assertEquals(true, tenToTwenty.containsFloat(ten));\n        assertEquals(true, tenToTwenty.containsFloat(fifteen));\n        assertEquals(true, tenToTwenty.containsFloat(twenty));\n        assertEquals(false, tenToTwenty.containsFloat(twentyFive));\n        \n        assertEquals(false, tenToTwenty.containsFloat(long8));\n        assertEquals(true, tenToTwenty.containsFloat(long10));\n        assertEquals(true, tenToTwenty.containsFloat(long12));\n        assertEquals(true, tenToTwenty.containsFloat(long20));\n        assertEquals(false, tenToTwenty.containsFloat(long21));\n        \n        assertEquals(false, tenToTwenty.containsFloat(double8));\n        assertEquals(true, tenToTwenty.containsFloat(double10));\n        assertEquals(true, tenToTwenty.containsFloat(double12));\n        assertEquals(true, tenToTwenty.containsFloat(double20));\n        assertEquals(false, tenToTwenty.containsFloat(double21));\n        \n        assertEquals(false, tenToTwenty.containsFloat(float8));\n        assertEquals(true, tenToTwenty.containsFloat(float10));\n        assertEquals(true, tenToTwenty.containsFloat(float12));\n        assertEquals(true, tenToTwenty.containsFloat(float20));\n        assertEquals(false, tenToTwenty.containsFloat(float21));\n        \n        assertEquals(false, tenToTwenty.containsFloat(9f));\n        assertEquals(true, tenToTwenty.containsFloat(10f));\n        assertEquals(true, tenToTwenty.containsFloat(15f));\n        assertEquals(true, tenToTwenty.containsFloat(20f));\n        assertEquals(false, tenToTwenty.containsFloat(21f));\n    }",
        "begin_line": 225,
        "end_line": 258,
        "comment": "",
        "child_ranges": [
            "(line 226,col 9)-(line 226,col 61)",
            "(line 227,col 9)-(line 227,col 75)",
            "(line 229,col 9)-(line 229,col 61)",
            "(line 230,col 9)-(line 230,col 59)",
            "(line 231,col 9)-(line 231,col 63)",
            "(line 232,col 9)-(line 232,col 62)",
            "(line 233,col 9)-(line 233,col 67)",
            "(line 235,col 9)-(line 235,col 62)",
            "(line 236,col 9)-(line 236,col 62)",
            "(line 237,col 9)-(line 237,col 62)",
            "(line 238,col 9)-(line 238,col 62)",
            "(line 239,col 9)-(line 239,col 63)",
            "(line 241,col 9)-(line 241,col 64)",
            "(line 242,col 9)-(line 242,col 64)",
            "(line 243,col 9)-(line 243,col 64)",
            "(line 244,col 9)-(line 244,col 64)",
            "(line 245,col 9)-(line 245,col 65)",
            "(line 247,col 9)-(line 247,col 63)",
            "(line 248,col 9)-(line 248,col 63)",
            "(line 249,col 9)-(line 249,col 63)",
            "(line 250,col 9)-(line 250,col 63)",
            "(line 251,col 9)-(line 251,col 64)",
            "(line 253,col 9)-(line 253,col 59)",
            "(line 254,col 9)-(line 254,col 59)",
            "(line 255,col 9)-(line 255,col 59)",
            "(line 256,col 9)-(line 256,col 59)",
            "(line 257,col 9)-(line 257,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.AbstractRangeTest",
        "child_classes": [
            "org.apache.commons.lang.math.FloatRangeTest",
            "org.apache.commons.lang.math.NumberRangeTest",
            "org.apache.commons.lang.math.DoubleRangeTest",
            "org.apache.commons.lang.math.LongRangeTest",
            "org.apache.commons.lang.math.IntRangeTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/math/AbstractRangeTest.java",
        "signature": "org.apache.commons.lang.math.AbstractRangeTest.testContainsRange()",
        "snippet": "    public void testContainsRange() {\n        assertEquals(false, tenToTwenty.containsRange(null));\n        assertEquals(false, tenToTwenty.containsRange(createRange(five, five)));\n        assertEquals(false, tenToTwenty.containsRange(createRange(five, ten)));\n        assertEquals(false, tenToTwenty.containsRange(createRange(five, twelve)));\n        assertEquals(false, tenToTwenty.containsRange(createRange(five, fifteen)));\n        assertEquals(false, tenToTwenty.containsRange(createRange(five, twenty)));\n        assertEquals(false, tenToTwenty.containsRange(createRange(five, twentyFive)));\n        \n        assertEquals(true, tenToTwenty.containsRange(createRange(ten, ten)));\n        assertEquals(true, tenToTwenty.containsRange(createRange(ten, twelve)));\n        assertEquals(true, tenToTwenty.containsRange(createRange(ten, fifteen)));\n        assertEquals(true, tenToTwenty.containsRange(createRange(ten, twenty)));\n        assertEquals(false, tenToTwenty.containsRange(createRange(ten, twentyFive)));\n        \n        assertEquals(true, tenToTwenty.containsRange(createRange(twelve, twelve)));\n        assertEquals(true, tenToTwenty.containsRange(createRange(twelve, fifteen)));\n        assertEquals(true, tenToTwenty.containsRange(createRange(twelve, twenty)));\n        assertEquals(false, tenToTwenty.containsRange(createRange(twelve, twentyFive)));\n        \n        assertEquals(true, tenToTwenty.containsRange(createRange(fifteen, fifteen)));\n        assertEquals(true, tenToTwenty.containsRange(createRange(fifteen, twenty)));\n        assertEquals(false, tenToTwenty.containsRange(createRange(fifteen, twentyFive)));\n        \n        assertEquals(true, tenToTwenty.containsRange(createRange(twenty, twenty)));\n        assertEquals(false, tenToTwenty.containsRange(createRange(twenty, twentyFive)));\n        \n        assertEquals(false, tenToTwenty.containsRange(createRange(twentyFive, twentyFive)));\n    }",
        "begin_line": 262,
        "end_line": 290,
        "comment": "",
        "child_ranges": [
            "(line 263,col 9)-(line 263,col 61)",
            "(line 264,col 9)-(line 264,col 80)",
            "(line 265,col 9)-(line 265,col 79)",
            "(line 266,col 9)-(line 266,col 82)",
            "(line 267,col 9)-(line 267,col 83)",
            "(line 268,col 9)-(line 268,col 82)",
            "(line 269,col 9)-(line 269,col 86)",
            "(line 271,col 9)-(line 271,col 77)",
            "(line 272,col 9)-(line 272,col 80)",
            "(line 273,col 9)-(line 273,col 81)",
            "(line 274,col 9)-(line 274,col 80)",
            "(line 275,col 9)-(line 275,col 85)",
            "(line 277,col 9)-(line 277,col 83)",
            "(line 278,col 9)-(line 278,col 84)",
            "(line 279,col 9)-(line 279,col 83)",
            "(line 280,col 9)-(line 280,col 88)",
            "(line 282,col 9)-(line 282,col 85)",
            "(line 283,col 9)-(line 283,col 84)",
            "(line 284,col 9)-(line 284,col 89)",
            "(line 286,col 9)-(line 286,col 83)",
            "(line 287,col 9)-(line 287,col 88)",
            "(line 289,col 9)-(line 289,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.AbstractRangeTest",
        "child_classes": [
            "org.apache.commons.lang.math.FloatRangeTest",
            "org.apache.commons.lang.math.NumberRangeTest",
            "org.apache.commons.lang.math.DoubleRangeTest",
            "org.apache.commons.lang.math.LongRangeTest",
            "org.apache.commons.lang.math.IntRangeTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/math/AbstractRangeTest.java",
        "signature": "org.apache.commons.lang.math.AbstractRangeTest.testOverlapsRange()",
        "snippet": "    public void testOverlapsRange() {\n        assertEquals(false, tenToTwenty.overlapsRange(null));\n        assertEquals(false, tenToTwenty.overlapsRange(createRange(five, five)));\n        assertEquals(true, tenToTwenty.overlapsRange(createRange(five, ten)));\n        assertEquals(true, tenToTwenty.overlapsRange(createRange(five, twelve)));\n        assertEquals(true, tenToTwenty.overlapsRange(createRange(five, fifteen)));\n        assertEquals(true, tenToTwenty.overlapsRange(createRange(five, twenty)));\n        assertEquals(true, tenToTwenty.overlapsRange(createRange(five, twentyFive)));\n        \n        assertEquals(true, tenToTwenty.overlapsRange(createRange(ten, ten)));\n        assertEquals(true, tenToTwenty.overlapsRange(createRange(ten, twelve)));\n        assertEquals(true, tenToTwenty.overlapsRange(createRange(ten, fifteen)));\n        assertEquals(true, tenToTwenty.overlapsRange(createRange(ten, twenty)));\n        assertEquals(true, tenToTwenty.overlapsRange(createRange(ten, twentyFive)));\n        \n        assertEquals(true, tenToTwenty.overlapsRange(createRange(twelve, twelve)));\n        assertEquals(true, tenToTwenty.overlapsRange(createRange(twelve, fifteen)));\n        assertEquals(true, tenToTwenty.overlapsRange(createRange(twelve, twenty)));\n        assertEquals(true, tenToTwenty.overlapsRange(createRange(twelve, twentyFive)));\n        \n        assertEquals(true, tenToTwenty.overlapsRange(createRange(fifteen, fifteen)));\n        assertEquals(true, tenToTwenty.overlapsRange(createRange(fifteen, twenty)));\n        assertEquals(true, tenToTwenty.overlapsRange(createRange(fifteen, twentyFive)));\n        \n        assertEquals(true, tenToTwenty.overlapsRange(createRange(twenty, twenty)));\n        assertEquals(true, tenToTwenty.overlapsRange(createRange(twenty, twentyFive)));\n        \n        assertEquals(false, tenToTwenty.overlapsRange(createRange(twentyFive, twentyFive)));\n    }",
        "begin_line": 292,
        "end_line": 320,
        "comment": "",
        "child_ranges": [
            "(line 293,col 9)-(line 293,col 61)",
            "(line 294,col 9)-(line 294,col 80)",
            "(line 295,col 9)-(line 295,col 78)",
            "(line 296,col 9)-(line 296,col 81)",
            "(line 297,col 9)-(line 297,col 82)",
            "(line 298,col 9)-(line 298,col 81)",
            "(line 299,col 9)-(line 299,col 85)",
            "(line 301,col 9)-(line 301,col 77)",
            "(line 302,col 9)-(line 302,col 80)",
            "(line 303,col 9)-(line 303,col 81)",
            "(line 304,col 9)-(line 304,col 80)",
            "(line 305,col 9)-(line 305,col 84)",
            "(line 307,col 9)-(line 307,col 83)",
            "(line 308,col 9)-(line 308,col 84)",
            "(line 309,col 9)-(line 309,col 83)",
            "(line 310,col 9)-(line 310,col 87)",
            "(line 312,col 9)-(line 312,col 85)",
            "(line 313,col 9)-(line 313,col 84)",
            "(line 314,col 9)-(line 314,col 88)",
            "(line 316,col 9)-(line 316,col 83)",
            "(line 317,col 9)-(line 317,col 87)",
            "(line 319,col 9)-(line 319,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.AbstractRangeTest",
        "child_classes": [
            "org.apache.commons.lang.math.FloatRangeTest",
            "org.apache.commons.lang.math.NumberRangeTest",
            "org.apache.commons.lang.math.DoubleRangeTest",
            "org.apache.commons.lang.math.LongRangeTest",
            "org.apache.commons.lang.math.IntRangeTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/math/AbstractRangeTest.java",
        "signature": "org.apache.commons.lang.math.AbstractRangeTest.testEquals()",
        "snippet": "    public void testEquals() {\n        assertEquals(false, tenToTwenty.equals(createRange(ten, fifteen)));\n        assertEquals(false, tenToTwenty.equals(createRange(ten, twentyFive)));\n        \n        assertEquals(false, tenToTwenty.equals(createRange(fifteen, twenty)));\n        assertEquals(false, tenToTwenty.equals(createRange(five, twenty)));\n        \n        assertEquals(false, tenToTwenty.equals(createRange(five, ten)));\n        assertEquals(false, tenToTwenty.equals(createRange(ten)));\n\n        assertEquals(true, tenToTwenty.equals(tenToTwenty));\n        assertEquals(true, tenToTwenty.equals(createRange(ten, twenty)));\n        assertEquals(true, tenToTwenty.equals(createRange(twenty, ten)));\n        \n        assertEquals(false, tenToTwenty.equals(null));\n        assertEquals(false, tenToTwenty.equals(new Object()));\n        assertEquals(false, tenToTwenty.equals(otherRange));\n    }",
        "begin_line": 324,
        "end_line": 341,
        "comment": "",
        "child_ranges": [
            "(line 325,col 9)-(line 325,col 75)",
            "(line 326,col 9)-(line 326,col 78)",
            "(line 328,col 9)-(line 328,col 78)",
            "(line 329,col 9)-(line 329,col 75)",
            "(line 331,col 9)-(line 331,col 72)",
            "(line 332,col 9)-(line 332,col 66)",
            "(line 334,col 9)-(line 334,col 60)",
            "(line 335,col 9)-(line 335,col 73)",
            "(line 336,col 9)-(line 336,col 73)",
            "(line 338,col 9)-(line 338,col 54)",
            "(line 339,col 9)-(line 339,col 62)",
            "(line 340,col 9)-(line 340,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.AbstractRangeTest",
        "child_classes": [
            "org.apache.commons.lang.math.FloatRangeTest",
            "org.apache.commons.lang.math.NumberRangeTest",
            "org.apache.commons.lang.math.DoubleRangeTest",
            "org.apache.commons.lang.math.LongRangeTest",
            "org.apache.commons.lang.math.IntRangeTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/math/AbstractRangeTest.java",
        "signature": "org.apache.commons.lang.math.AbstractRangeTest.testHashCode()",
        "snippet": "    public void testHashCode() {\n        assertEquals(tenToTwenty.hashCode(), tenToTwenty.hashCode());\n        assertTrue(tenToTwenty.hashCode() != 0);\n    }",
        "begin_line": 343,
        "end_line": 346,
        "comment": "",
        "child_ranges": [
            "(line 344,col 9)-(line 344,col 69)",
            "(line 345,col 9)-(line 345,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.AbstractRangeTest",
        "child_classes": [
            "org.apache.commons.lang.math.FloatRangeTest",
            "org.apache.commons.lang.math.NumberRangeTest",
            "org.apache.commons.lang.math.DoubleRangeTest",
            "org.apache.commons.lang.math.LongRangeTest",
            "org.apache.commons.lang.math.IntRangeTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/math/AbstractRangeTest.java",
        "signature": "org.apache.commons.lang.math.AbstractRangeTest.testToString()",
        "snippet": "    public void testToString() {\n        String str = tenToTwenty.toString();\n        assertEquals(\"Range[10,20]\", str);\n        assertSame(str, tenToTwenty.toString());\n        assertEquals(\"Range[-20,-10]\", createRange(new Integer(-20), new Integer(-10)).toString());\n    }",
        "begin_line": 348,
        "end_line": 353,
        "comment": "",
        "child_ranges": [
            "(line 349,col 9)-(line 349,col 44)",
            "(line 350,col 9)-(line 350,col 42)",
            "(line 351,col 9)-(line 351,col 48)",
            "(line 352,col 9)-(line 352,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.AbstractRangeTest",
        "child_classes": [
            "org.apache.commons.lang.math.FloatRangeTest",
            "org.apache.commons.lang.math.NumberRangeTest",
            "org.apache.commons.lang.math.DoubleRangeTest",
            "org.apache.commons.lang.math.LongRangeTest",
            "org.apache.commons.lang.math.IntRangeTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/math/AbstractRangeTest.java",
        "signature": "org.apache.commons.lang.math.AbstractRangeTest.createRange(java.lang.Integer)",
        "snippet": "    protected abstract Range createRange(Integer integer);",
        "begin_line": 356,
        "end_line": 356,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.math.AbstractRangeTest",
        "child_classes": [
            "org.apache.commons.lang.math.FloatRangeTest",
            "org.apache.commons.lang.math.NumberRangeTest",
            "org.apache.commons.lang.math.DoubleRangeTest",
            "org.apache.commons.lang.math.LongRangeTest",
            "org.apache.commons.lang.math.IntRangeTest"
        ],
        "src_path": "src/test/org/apache/commons/lang/math/AbstractRangeTest.java",
        "signature": "org.apache.commons.lang.math.AbstractRangeTest.createRange(java.lang.Integer, java.lang.Integer)",
        "snippet": "    protected abstract Range createRange(Integer integer1, Integer integer2);",
        "begin_line": 357,
        "end_line": 357,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.math.IEEE754rUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java",
        "signature": "org.apache.commons.lang.math.IEEE754rUtilsTest.testLang381()",
        "snippet": "    public void testLang381() {\n        assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01);\n        assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01);\n        assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN)));\n        assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01);\n        assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01);\n        assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN)));\n\n        double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN };\n        assertEquals(42.0, IEEE754rUtils.max(a), 0.01);\n        assertEquals(1.2, IEEE754rUtils.min(a), 0.01);\n\n        double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN };\n        assertEquals(42.0, IEEE754rUtils.max(b), 0.01);\n        assertEquals(1.2, IEEE754rUtils.min(b), 0.01);\n\n        float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN };\n        assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01);\n        assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01);\n\n        float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN };\n        assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01);\n        assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01);\n    }",
        "begin_line": 28,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 73)",
            "(line 30,col 9)-(line 30,col 73)",
            "(line 31,col 9)-(line 31,col 88)",
            "(line 32,col 9)-(line 32,col 75)",
            "(line 33,col 9)-(line 33,col 75)",
            "(line 34,col 9)-(line 34,col 84)",
            "(line 36,col 9)-(line 36,col 83)",
            "(line 37,col 9)-(line 37,col 55)",
            "(line 38,col 9)-(line 38,col 54)",
            "(line 40,col 9)-(line 40,col 95)",
            "(line 41,col 9)-(line 41,col 55)",
            "(line 42,col 9)-(line 42,col 54)",
            "(line 44,col 9)-(line 44,col 84)",
            "(line 45,col 9)-(line 45,col 56)",
            "(line 46,col 9)-(line 46,col 57)",
            "(line 48,col 9)-(line 48,col 95)",
            "(line 49,col 9)-(line 49,col 56)",
            "(line 50,col 9)-(line 50,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FloatRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FloatRangeTest.java",
        "signature": "org.apache.commons.lang.math.FloatRangeTest.FloatRangeTest(java.lang.String)",
        "snippet": "    public FloatRangeTest(String name) {\n        super(name);\n    }",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FloatRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FloatRangeTest.java",
        "signature": "org.apache.commons.lang.math.FloatRangeTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(FloatRangeTest.class);\n        suite.setName(\"FloatRange Tests\");\n        return suite;\n    }",
        "begin_line": 36,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 62)",
            "(line 38,col 9)-(line 38,col 42)",
            "(line 39,col 9)-(line 39,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FloatRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FloatRangeTest.java",
        "signature": "org.apache.commons.lang.math.FloatRangeTest.setUp()",
        "snippet": "    public void setUp() {\n        super.setUp();\n        tenToTwenty = new FloatRange(float10, float20);\n        otherRange = new NumberRange(ten, twenty);\n    }",
        "begin_line": 42,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 22)",
            "(line 44,col 9)-(line 44,col 55)",
            "(line 45,col 9)-(line 45,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FloatRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FloatRangeTest.java",
        "signature": "org.apache.commons.lang.math.FloatRangeTest.createRange(java.lang.Integer, java.lang.Integer)",
        "snippet": "    protected Range createRange(Integer integer1, Integer integer2) {\n        return new FloatRange(integer1, integer2);\n    }",
        "begin_line": 48,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FloatRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FloatRangeTest.java",
        "signature": "org.apache.commons.lang.math.FloatRangeTest.createRange(java.lang.Integer)",
        "snippet": "    protected Range createRange(Integer integer) {\n        return new NumberRange(integer);\n    }",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FloatRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FloatRangeTest.java",
        "signature": "org.apache.commons.lang.math.FloatRangeTest.testConstructor1a()",
        "snippet": "    public void testConstructor1a() {\n        FloatRange nr = new FloatRange(8f);\n        assertEquals(float8, nr.getMinimumNumber());\n        assertEquals(float8, nr.getMaximumNumber());\n        \n        try {\n            new FloatRange(Float.NaN);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 57,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 58,col 9)-(line 58,col 43)",
            "(line 59,col 9)-(line 59,col 52)",
            "(line 60,col 9)-(line 60,col 52)",
            "(line 62,col 9)-(line 65,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FloatRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FloatRangeTest.java",
        "signature": "org.apache.commons.lang.math.FloatRangeTest.testConstructor1b()",
        "snippet": "    public void testConstructor1b() {\n        FloatRange nr = new FloatRange(float8);\n        assertSame(float8, nr.getMinimumNumber());\n        assertSame(float8, nr.getMaximumNumber());\n        \n        Range r = new FloatRange(nonComparableNumber);\n        \n        try {\n            new FloatRange(null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            new FloatRange(new Double(Double.NaN));\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 68,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 47)",
            "(line 70,col 9)-(line 70,col 50)",
            "(line 71,col 9)-(line 71,col 50)",
            "(line 73,col 9)-(line 73,col 54)",
            "(line 75,col 9)-(line 78,col 48)",
            "(line 79,col 9)-(line 82,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FloatRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FloatRangeTest.java",
        "signature": "org.apache.commons.lang.math.FloatRangeTest.testConstructor2a()",
        "snippet": "    public void testConstructor2a() {\n        FloatRange nr = new FloatRange(8f, 10f);\n        assertEquals(float8, nr.getMinimumNumber());\n        assertEquals(float10, nr.getMaximumNumber());\n        \n        nr = new FloatRange(10f, 8f);\n        assertEquals(float8, nr.getMinimumNumber());\n        assertEquals(float10, nr.getMaximumNumber());\n        \n        try {\n            new FloatRange(Float.NaN, 8f);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 85,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 48)",
            "(line 87,col 9)-(line 87,col 52)",
            "(line 88,col 9)-(line 88,col 53)",
            "(line 90,col 9)-(line 90,col 37)",
            "(line 91,col 9)-(line 91,col 52)",
            "(line 92,col 9)-(line 92,col 53)",
            "(line 94,col 9)-(line 97,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FloatRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FloatRangeTest.java",
        "signature": "org.apache.commons.lang.math.FloatRangeTest.testConstructor2b()",
        "snippet": "    public void testConstructor2b() {\n        FloatRange nr = new FloatRange(float8, float10);\n        assertSame(float8, nr.getMinimumNumber());\n        assertSame(float10, nr.getMaximumNumber());\n        \n        nr = new FloatRange(float10, float8);\n        assertSame(float8, nr.getMinimumNumber());\n        assertSame(float10, nr.getMaximumNumber());\n        \n        nr = new FloatRange(float8, float10);\n        assertSame(float8, nr.getMinimumNumber());\n        assertEquals(float10, nr.getMaximumNumber());\n        \n        // not null\n        try {\n            new FloatRange(float8, null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            new FloatRange(null, float8);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            new FloatRange(null, null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        \n        try {\n            new FloatRange(new Double(Double.NaN), float10);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 100,
        "end_line": 131,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 56)",
            "(line 102,col 9)-(line 102,col 50)",
            "(line 103,col 9)-(line 103,col 51)",
            "(line 105,col 9)-(line 105,col 45)",
            "(line 106,col 9)-(line 106,col 50)",
            "(line 107,col 9)-(line 107,col 51)",
            "(line 109,col 9)-(line 109,col 45)",
            "(line 110,col 9)-(line 110,col 50)",
            "(line 111,col 9)-(line 111,col 53)",
            "(line 114,col 9)-(line 117,col 48)",
            "(line 118,col 9)-(line 121,col 48)",
            "(line 122,col 9)-(line 125,col 48)",
            "(line 127,col 9)-(line 130,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FloatRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FloatRangeTest.java",
        "signature": "org.apache.commons.lang.math.FloatRangeTest.testContainsNumber()",
        "snippet": "    public void testContainsNumber() {\n        assertEquals(false, tenToTwenty.containsNumber(null));\n        assertEquals(true, tenToTwenty.containsNumber(nonComparableNumber));\n        \n        assertEquals(false, tenToTwenty.containsNumber(five));\n        assertEquals(true, tenToTwenty.containsNumber(ten));\n        assertEquals(true, tenToTwenty.containsNumber(fifteen));\n        assertEquals(true, tenToTwenty.containsNumber(twenty));\n        assertEquals(false, tenToTwenty.containsNumber(twentyFive));\n        \n        assertEquals(false, tenToTwenty.containsNumber(long8));\n        assertEquals(true, tenToTwenty.containsNumber(long10));\n        assertEquals(true, tenToTwenty.containsNumber(long12));\n        assertEquals(true, tenToTwenty.containsNumber(long20));\n        assertEquals(false, tenToTwenty.containsNumber(long21));\n        \n        assertEquals(false, tenToTwenty.containsNumber(double8));\n        assertEquals(true, tenToTwenty.containsNumber(double10));\n        assertEquals(true, tenToTwenty.containsNumber(double12));\n        assertEquals(true, tenToTwenty.containsNumber(double20));\n        assertEquals(false, tenToTwenty.containsNumber(double21));\n        \n        assertEquals(false, tenToTwenty.containsNumber(float8));\n        assertEquals(true, tenToTwenty.containsNumber(float10));\n        assertEquals(true, tenToTwenty.containsNumber(float12));\n        assertEquals(true, tenToTwenty.containsNumber(float20));\n        assertEquals(false, tenToTwenty.containsNumber(float21));\n    }",
        "begin_line": 135,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 136,col 9)-(line 136,col 62)",
            "(line 137,col 9)-(line 137,col 76)",
            "(line 139,col 9)-(line 139,col 62)",
            "(line 140,col 9)-(line 140,col 60)",
            "(line 141,col 9)-(line 141,col 64)",
            "(line 142,col 9)-(line 142,col 63)",
            "(line 143,col 9)-(line 143,col 68)",
            "(line 145,col 9)-(line 145,col 63)",
            "(line 146,col 9)-(line 146,col 63)",
            "(line 147,col 9)-(line 147,col 63)",
            "(line 148,col 9)-(line 148,col 63)",
            "(line 149,col 9)-(line 149,col 64)",
            "(line 151,col 9)-(line 151,col 65)",
            "(line 152,col 9)-(line 152,col 65)",
            "(line 153,col 9)-(line 153,col 65)",
            "(line 154,col 9)-(line 154,col 65)",
            "(line 155,col 9)-(line 155,col 66)",
            "(line 157,col 9)-(line 157,col 64)",
            "(line 158,col 9)-(line 158,col 64)",
            "(line 159,col 9)-(line 159,col 64)",
            "(line 160,col 9)-(line 160,col 64)",
            "(line 161,col 9)-(line 161,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.FloatRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/FloatRangeTest.java",
        "signature": "org.apache.commons.lang.math.FloatRangeTest.testToString()",
        "snippet": "    public void testToString() {\n        String str = tenToTwenty.toString();\n        assertEquals(\"Range[10.0,20.0]\", str);\n        assertSame(str, tenToTwenty.toString());\n        assertEquals(\"Range[-20.0,-10.0]\", createRange(new Integer(-20), new Integer(-10)).toString());\n    }",
        "begin_line": 164,
        "end_line": 169,
        "comment": "",
        "child_ranges": [
            "(line 165,col 9)-(line 165,col 44)",
            "(line 166,col 9)-(line 166,col 46)",
            "(line 167,col 9)-(line 167,col 48)",
            "(line 168,col 9)-(line 168,col 103)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.NumberUtilsTest(java.lang.String)",
        "snippet": "    public NumberUtilsTest(String name) {\n        super(name);\n    }",
        "begin_line": 45,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }",
        "begin_line": 49,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(NumberUtilsTest.class);\n        suite.setName(\"NumberUtils Tests\");\n        return suite;\n    }",
        "begin_line": 53,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 63)",
            "(line 55,col 9)-(line 55,col 43)",
            "(line 56,col 9)-(line 56,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new NumberUtils());\n        Constructor[] cons = NumberUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(NumberUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(NumberUtils.class.getModifiers()));\n    }",
        "begin_line": 60,
        "end_line": 67,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 41)",
            "(line 62,col 9)-(line 62,col 73)",
            "(line 63,col 9)-(line 63,col 37)",
            "(line 64,col 9)-(line 64,col 70)",
            "(line 65,col 9)-(line 65,col 80)",
            "(line 66,col 9)-(line 66,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testDeprecatedStringToIntString()",
        "snippet": "    public void testDeprecatedStringToIntString() {\n        assertTrue(\"stringToInt(String) 1 failed\", NumberUtils.stringToInt(\"12345\") == 12345);\n        assertTrue(\"stringToInt(String) 2 failed\", NumberUtils.stringToInt(\"abc\") == 0);\n        assertTrue(\"stringToInt(empty) failed\", NumberUtils.stringToInt(\"\") == 0);\n        assertTrue(\"stringToInt(null) failed\", NumberUtils.stringToInt(null) == 0);\n    }",
        "begin_line": 74,
        "end_line": 79,
        "comment": "\n     * Test for {@link NumberUtils#stringToInt(String)}.\n     ",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 94)",
            "(line 76,col 9)-(line 76,col 88)",
            "(line 77,col 9)-(line 77,col 82)",
            "(line 78,col 9)-(line 78,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testToIntString()",
        "snippet": "    public void testToIntString() {\n        assertTrue(\"toInt(String) 1 failed\", NumberUtils.toInt(\"12345\") == 12345);\n        assertTrue(\"toInt(String) 2 failed\", NumberUtils.toInt(\"abc\") == 0);\n        assertTrue(\"toInt(empty) failed\", NumberUtils.toInt(\"\") == 0);\n        assertTrue(\"toInt(null) failed\", NumberUtils.toInt(null) == 0);\n    }",
        "begin_line": 84,
        "end_line": 89,
        "comment": "\n     * Test for {@link NumberUtils#toInt(String)}.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 82)",
            "(line 86,col 9)-(line 86,col 76)",
            "(line 87,col 9)-(line 87,col 70)",
            "(line 88,col 9)-(line 88,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testDeprecatedStringToIntStringI()",
        "snippet": "    public void testDeprecatedStringToIntStringI() {\n        assertTrue(\"stringToInt(String,int) 1 failed\", NumberUtils.stringToInt(\"12345\", 5) == 12345);\n        assertTrue(\"stringToInt(String,int) 2 failed\", NumberUtils.stringToInt(\"1234.5\", 5) == 5);\n    }",
        "begin_line": 94,
        "end_line": 97,
        "comment": "\n     * Test for {@link NumberUtils#stringToInt(String, int)}.\n     ",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 101)",
            "(line 96,col 9)-(line 96,col 98)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testToIntStringI()",
        "snippet": "    public void testToIntStringI() {\n        assertTrue(\"toInt(String,int) 1 failed\", NumberUtils.toInt(\"12345\", 5) == 12345);\n        assertTrue(\"toInt(String,int) 2 failed\", NumberUtils.toInt(\"1234.5\", 5) == 5);\n    }",
        "begin_line": 102,
        "end_line": 105,
        "comment": "\n     * Test for {@link NumberUtils#toInt(String, int)}.\n     ",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 89)",
            "(line 104,col 9)-(line 104,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testToLongString()",
        "snippet": "    public void testToLongString() {\n        assertTrue(\"toLong(String) 1 failed\", NumberUtils.toLong(\"12345\") == 12345l);\n        assertTrue(\"toLong(String) 2 failed\", NumberUtils.toLong(\"abc\") == 0l);\n        assertTrue(\"toLong(String) 3 failed\", NumberUtils.toLong(\"1L\") == 0l);\n        assertTrue(\"toLong(String) 4 failed\", NumberUtils.toLong(\"1l\") == 0l);\n        assertTrue(\"toLong(Long.MAX_VALUE) failed\", NumberUtils.toLong(Long.MAX_VALUE+\"\") == Long.MAX_VALUE);\n        assertTrue(\"toLong(Long.MIN_VALUE) failed\", NumberUtils.toLong(Long.MIN_VALUE+\"\") == Long.MIN_VALUE);\n        assertTrue(\"toLong(empty) failed\", NumberUtils.toLong(\"\") == 0l);\n        assertTrue(\"toLong(null) failed\", NumberUtils.toLong(null) == 0l);\n    }",
        "begin_line": 110,
        "end_line": 119,
        "comment": "\n     * Test for {@link NumberUtils#toLong(String)}.\n     ",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 85)",
            "(line 112,col 9)-(line 112,col 79)",
            "(line 113,col 9)-(line 113,col 78)",
            "(line 114,col 9)-(line 114,col 78)",
            "(line 115,col 9)-(line 115,col 109)",
            "(line 116,col 9)-(line 116,col 109)",
            "(line 117,col 9)-(line 117,col 73)",
            "(line 118,col 9)-(line 118,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testToLongStringL()",
        "snippet": "    public void testToLongStringL() {\n        assertTrue(\"toLong(String,long) 1 failed\", NumberUtils.toLong(\"12345\", 5l) == 12345l);\n        assertTrue(\"toLong(String,long) 2 failed\", NumberUtils.toLong(\"1234.5\", 5l) == 5l);\n    }",
        "begin_line": 124,
        "end_line": 127,
        "comment": "\n     * Test for {@link NumberUtils#toLong(String, long)}.\n     ",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 94)",
            "(line 126,col 9)-(line 126,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testToFloatString()",
        "snippet": "    public void testToFloatString() {\n        assertTrue(\"toFloat(String) 1 failed\", NumberUtils.toFloat(\"-1.2345\") == -1.2345f);\n        assertTrue(\"toFloat(String) 2 failed\", NumberUtils.toFloat(\"1.2345\") == 1.2345f);\n        assertTrue(\"toFloat(String) 3 failed\", NumberUtils.toFloat(\"abc\") == 0.0f);\n        assertTrue(\"toFloat(Float.MAX_VALUE) failed\", NumberUtils.toFloat(Float.MAX_VALUE+\"\") ==  Float.MAX_VALUE);\n        assertTrue(\"toFloat(Float.MIN_VALUE) failed\", NumberUtils.toFloat(Float.MIN_VALUE+\"\") == Float.MIN_VALUE);\n        assertTrue(\"toFloat(empty) failed\", NumberUtils.toFloat(\"\") == 0.0f);\n        assertTrue(\"toFloat(null) failed\", NumberUtils.toFloat(null) == 0.0f);\n    }",
        "begin_line": 132,
        "end_line": 140,
        "comment": "\n     * Test for {@link NumberUtils#toFloat(String)}.\n     ",
        "child_ranges": [
            "(line 133,col 9)-(line 133,col 91)",
            "(line 134,col 9)-(line 134,col 89)",
            "(line 135,col 9)-(line 135,col 83)",
            "(line 136,col 9)-(line 136,col 115)",
            "(line 137,col 9)-(line 137,col 114)",
            "(line 138,col 9)-(line 138,col 77)",
            "(line 139,col 9)-(line 139,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testToFloatStringF()",
        "snippet": "    public void testToFloatStringF() {\n        assertTrue(\"toFloat(String,int) 1 failed\", NumberUtils.toFloat(\"1.2345\", 5.1f) == 1.2345f);\n        assertTrue(\"toFloat(String,int) 2 failed\", NumberUtils.toFloat(\"a\", 5.0f) == 5.0f);\n    }",
        "begin_line": 145,
        "end_line": 148,
        "comment": "\n     * Test for {@link NumberUtils#toFloat(String, float)}.\n     ",
        "child_ranges": [
            "(line 146,col 9)-(line 146,col 99)",
            "(line 147,col 9)-(line 147,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testStringToDoubleString()",
        "snippet": "    public void testStringToDoubleString() {\n        assertTrue(\"toDouble(String) 1 failed\", NumberUtils.toDouble(\"-1.2345\") == -1.2345d);\n        assertTrue(\"toDouble(String) 2 failed\", NumberUtils.toDouble(\"1.2345\") == 1.2345d);\n        assertTrue(\"toDouble(String) 3 failed\", NumberUtils.toDouble(\"abc\") == 0.0d);\n        assertTrue(\"toDouble(Double.MAX_VALUE) failed\", NumberUtils.toDouble(Double.MAX_VALUE+\"\") == Double.MAX_VALUE);\n        assertTrue(\"toDouble(Double.MIN_VALUE) failed\", NumberUtils.toDouble(Double.MIN_VALUE+\"\") == Double.MIN_VALUE);\n        assertTrue(\"toDouble(empty) failed\", NumberUtils.toDouble(\"\") == 0.0d);\n        assertTrue(\"toDouble(null) failed\", NumberUtils.toDouble(null) == 0.0d);\n    }",
        "begin_line": 153,
        "end_line": 161,
        "comment": "\n     * Test for {@link NumberUtils#toDouble(String)}.\n     ",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 93)",
            "(line 155,col 9)-(line 155,col 91)",
            "(line 156,col 9)-(line 156,col 85)",
            "(line 157,col 9)-(line 157,col 119)",
            "(line 158,col 9)-(line 158,col 119)",
            "(line 159,col 9)-(line 159,col 79)",
            "(line 160,col 9)-(line 160,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testStringToDoubleStringD()",
        "snippet": "    public void testStringToDoubleStringD() {\n        assertTrue(\"toDouble(String,int) 1 failed\", NumberUtils.toDouble(\"1.2345\", 5.1d) == 1.2345d);\n        assertTrue(\"toDouble(String,int) 2 failed\", NumberUtils.toDouble(\"a\", 5.0d) == 5.0d);\n    }",
        "begin_line": 166,
        "end_line": 169,
        "comment": "\n     * Test for {@link NumberUtils#toDouble(String, double)}.\n     ",
        "child_ranges": [
            "(line 167,col 9)-(line 167,col 101)",
            "(line 168,col 9)-(line 168,col 93)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testCreateNumber()",
        "snippet": "    public void testCreateNumber() {\n        // a lot of things can go wrong\n        assertEquals(\"createNumber(String) 1 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));\n        assertEquals(\"createNumber(String) 2 failed\", new Integer(\"12345\"), NumberUtils.createNumber(\"12345\"));\n        assertEquals(\"createNumber(String) 3 failed\", new Double(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));\n        assertEquals(\"createNumber(String) 3 failed\", new Double(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));\n        assertEquals(\"createNumber(String) 4 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));\n        assertEquals(\"createNumber(String) 4 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));\n        assertEquals(\"createNumber(String) 5 failed\", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));\n        assertEquals(\"createNumber(String) 6 failed\", new Long(12345), NumberUtils.createNumber(\"12345L\"));\n        assertEquals(\"createNumber(String) 6 failed\", new Long(12345), NumberUtils.createNumber(\"12345l\"));\n        assertEquals(\"createNumber(String) 7 failed\", new Float(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));\n        assertEquals(\"createNumber(String) 8 failed\", new Integer(\"-12345\"), NumberUtils.createNumber(\"-12345\"));\n        assertTrue(\"createNumber(String) 9 failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());\n        assertTrue(\"createNumber(String) 10 failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());\n        assertEquals(\"createNumber(String) 11 failed\", new Double(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));\n        assertEquals(\"createNumber(String) 12 failed\", new Float(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));\n        assertEquals(\"createNumber(String) 13 failed\", new Double(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));\n        assertEquals(\"createNumber(String) 14 failed\", new Double(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));\n        assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));\n        assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {\n            assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));\n        }\n        assertEquals(\"createNumber(String) 16 failed\", new Long(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));\n        assertEquals(\"createNumber(String) 17 failed\", new Long(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));\n        assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));\n    }",
        "begin_line": 171,
        "end_line": 206,
        "comment": "",
        "child_ranges": [
            "(line 173,col 9)-(line 173,col 111)",
            "(line 174,col 9)-(line 174,col 111)",
            "(line 175,col 9)-(line 175,col 113)",
            "(line 176,col 9)-(line 176,col 113)",
            "(line 177,col 9)-(line 177,col 112)",
            "(line 178,col 9)-(line 178,col 112)",
            "(line 179,col 9)-(line 180,col 41)",
            "(line 181,col 9)-(line 181,col 107)",
            "(line 182,col 9)-(line 182,col 107)",
            "(line 183,col 9)-(line 183,col 113)",
            "(line 184,col 9)-(line 184,col 113)",
            "(line 185,col 9)-(line 185,col 109)",
            "(line 186,col 9)-(line 186,col 112)",
            "(line 187,col 9)-(line 187,col 115)",
            "(line 188,col 9)-(line 188,col 112)",
            "(line 189,col 9)-(line 189,col 117)",
            "(line 190,col 9)-(line 190,col 117)",
            "(line 191,col 9)-(line 191,col 88)",
            "(line 192,col 9)-(line 193,col 56)",
            "(line 196,col 9)-(line 199,col 9)",
            "(line 200,col 9)-(line 201,col 63)",
            "(line 202,col 9)-(line 203,col 57)",
            "(line 204,col 9)-(line 205,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testCreateFloat()",
        "snippet": "    public void testCreateFloat() {\n        assertEquals(\"createFloat(String) failed\", new Float(\"1234.5\"), NumberUtils.createFloat(\"1234.5\"));\n        assertEquals(\"createFloat(null) failed\", null, NumberUtils.createFloat(null));\n        this.testCreateFloatFailure(\"\");\n        this.testCreateFloatFailure(\" \");\n        this.testCreateFloatFailure(\"\\b\\t\\n\\f\\r\");\n        // Funky whitespaces\n        this.testCreateFloatFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n    }",
        "begin_line": 208,
        "end_line": 216,
        "comment": "",
        "child_ranges": [
            "(line 209,col 9)-(line 209,col 107)",
            "(line 210,col 9)-(line 210,col 86)",
            "(line 211,col 9)-(line 211,col 40)",
            "(line 212,col 9)-(line 212,col 41)",
            "(line 213,col 9)-(line 213,col 50)",
            "(line 215,col 9)-(line 215,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testCreateFloatFailure(java.lang.String)",
        "snippet": "    protected void testCreateFloatFailure(String str) {\n        try {\n            Float value = NumberUtils.createFloat(str);\n            fail(\"createFloat(blank) failed: \" + value);\n        } catch (NumberFormatException ex) {\n            // empty\n        }\n    }",
        "begin_line": 218,
        "end_line": 225,
        "comment": "",
        "child_ranges": [
            "(line 219,col 9)-(line 224,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testCreateDouble()",
        "snippet": "    public void testCreateDouble() {\n        assertEquals(\"createDouble(String) failed\", new Double(\"1234.5\"), NumberUtils.createDouble(\"1234.5\"));\n        assertEquals(\"createDouble(null) failed\", null, NumberUtils.createDouble(null));\n        this.testCreateDoubleFailure(\"\");\n        this.testCreateDoubleFailure(\" \");\n        this.testCreateDoubleFailure(\"\\b\\t\\n\\f\\r\");\n        // Funky whitespaces\n        this.testCreateDoubleFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n    }",
        "begin_line": 227,
        "end_line": 235,
        "comment": "",
        "child_ranges": [
            "(line 228,col 9)-(line 228,col 110)",
            "(line 229,col 9)-(line 229,col 88)",
            "(line 230,col 9)-(line 230,col 41)",
            "(line 231,col 9)-(line 231,col 42)",
            "(line 232,col 9)-(line 232,col 51)",
            "(line 234,col 9)-(line 234,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testCreateDoubleFailure(java.lang.String)",
        "snippet": "    protected void testCreateDoubleFailure(String str) {\n        try {\n            Double value = NumberUtils.createDouble(str);\n            fail(\"createDouble(blank) failed: \" + value);\n        } catch (NumberFormatException ex) {\n            // empty\n        }\n    }",
        "begin_line": 237,
        "end_line": 244,
        "comment": "",
        "child_ranges": [
            "(line 238,col 9)-(line 243,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testCreateInteger()",
        "snippet": "    public void testCreateInteger() {\n        assertEquals(\"createInteger(String) failed\", new Integer(\"12345\"), NumberUtils.createInteger(\"12345\"));\n        assertEquals(\"createInteger(null) failed\", null, NumberUtils.createInteger(null));\n        this.testCreateIntegerFailure(\"\");\n        this.testCreateIntegerFailure(\" \");\n        this.testCreateIntegerFailure(\"\\b\\t\\n\\f\\r\");\n        // Funky whitespaces\n        this.testCreateIntegerFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n    }",
        "begin_line": 246,
        "end_line": 254,
        "comment": "",
        "child_ranges": [
            "(line 247,col 9)-(line 247,col 111)",
            "(line 248,col 9)-(line 248,col 90)",
            "(line 249,col 9)-(line 249,col 42)",
            "(line 250,col 9)-(line 250,col 43)",
            "(line 251,col 9)-(line 251,col 52)",
            "(line 253,col 9)-(line 253,col 90)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testCreateIntegerFailure(java.lang.String)",
        "snippet": "    protected void testCreateIntegerFailure(String str) {\n        try {\n            Integer value = NumberUtils.createInteger(str);\n            fail(\"createInteger(blank) failed: \" + value);\n        } catch (NumberFormatException ex) {\n            // empty\n        }\n    }",
        "begin_line": 256,
        "end_line": 263,
        "comment": "",
        "child_ranges": [
            "(line 257,col 9)-(line 262,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testCreateLong()",
        "snippet": "    public void testCreateLong() {\n        assertEquals(\"createLong(String) failed\", new Long(\"12345\"), NumberUtils.createLong(\"12345\"));\n        assertEquals(\"createLong(null) failed\", null, NumberUtils.createLong(null));\n        this.testCreateLongFailure(\"\");\n        this.testCreateLongFailure(\" \");\n        this.testCreateLongFailure(\"\\b\\t\\n\\f\\r\");\n        // Funky whitespaces\n        this.testCreateLongFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n    }",
        "begin_line": 265,
        "end_line": 273,
        "comment": "",
        "child_ranges": [
            "(line 266,col 9)-(line 266,col 102)",
            "(line 267,col 9)-(line 267,col 84)",
            "(line 268,col 9)-(line 268,col 39)",
            "(line 269,col 9)-(line 269,col 40)",
            "(line 270,col 9)-(line 270,col 49)",
            "(line 272,col 9)-(line 272,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testCreateLongFailure(java.lang.String)",
        "snippet": "    protected void testCreateLongFailure(String str) {\n        try {\n            Long value = NumberUtils.createLong(str);\n            fail(\"createLong(blank) failed: \" + value);\n        } catch (NumberFormatException ex) {\n            // empty\n        }\n    }",
        "begin_line": 275,
        "end_line": 282,
        "comment": "",
        "child_ranges": [
            "(line 276,col 9)-(line 281,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testCreateBigInteger()",
        "snippet": "    public void testCreateBigInteger() {\n        assertEquals(\"createBigInteger(String) failed\", new BigInteger(\"12345\"), NumberUtils.createBigInteger(\"12345\"));\n        assertEquals(\"createBigInteger(null) failed\", null, NumberUtils.createBigInteger(null));\n        this.testCreateBigIntegerFailure(\"\");\n        this.testCreateBigIntegerFailure(\" \");\n        this.testCreateBigIntegerFailure(\"\\b\\t\\n\\f\\r\");\n        // Funky whitespaces\n        this.testCreateBigIntegerFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n    }",
        "begin_line": 284,
        "end_line": 292,
        "comment": "",
        "child_ranges": [
            "(line 285,col 9)-(line 285,col 120)",
            "(line 286,col 9)-(line 286,col 96)",
            "(line 287,col 9)-(line 287,col 45)",
            "(line 288,col 9)-(line 288,col 46)",
            "(line 289,col 9)-(line 289,col 55)",
            "(line 291,col 9)-(line 291,col 93)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testCreateBigIntegerFailure(java.lang.String)",
        "snippet": "    protected void testCreateBigIntegerFailure(String str) {\n        try {\n            BigInteger value = NumberUtils.createBigInteger(str);\n            fail(\"createBigInteger(blank) failed: \" + value);\n        } catch (NumberFormatException ex) {\n            // empty\n        }\n    }",
        "begin_line": 294,
        "end_line": 301,
        "comment": "",
        "child_ranges": [
            "(line 295,col 9)-(line 300,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testCreateBigDecimal()",
        "snippet": "    public void testCreateBigDecimal() {\n        assertEquals(\"createBigDecimal(String) failed\", new BigDecimal(\"1234.5\"), NumberUtils.createBigDecimal(\"1234.5\"));\n        assertEquals(\"createBigDecimal(null) failed\", null, NumberUtils.createBigDecimal(null));\n        this.testCreateBigDecimalFailure(\"\");\n        this.testCreateBigDecimalFailure(\" \");\n        this.testCreateBigDecimalFailure(\"\\b\\t\\n\\f\\r\");\n        // Funky whitespaces\n        this.testCreateBigDecimalFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n    }",
        "begin_line": 303,
        "end_line": 311,
        "comment": "",
        "child_ranges": [
            "(line 304,col 9)-(line 304,col 122)",
            "(line 305,col 9)-(line 305,col 96)",
            "(line 306,col 9)-(line 306,col 45)",
            "(line 307,col 9)-(line 307,col 46)",
            "(line 308,col 9)-(line 308,col 55)",
            "(line 310,col 9)-(line 310,col 93)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testCreateBigDecimalFailure(java.lang.String)",
        "snippet": "    protected void testCreateBigDecimalFailure(String str) {\n        try {\n            BigDecimal value = NumberUtils.createBigDecimal(str);\n            fail(\"createBigDecimal(blank) failed: \" + value);\n        } catch (NumberFormatException ex) {\n            // empty\n        }\n    }",
        "begin_line": 313,
        "end_line": 320,
        "comment": "",
        "child_ranges": [
            "(line 314,col 9)-(line 319,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMinLong()",
        "snippet": "    public void testMinLong() {\n        final long[] l = null;\n        try {\n            NumberUtils.min(l);\n            fail(\"No exception was thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        try {\n            NumberUtils.min(new long[0]);\n            fail(\"No exception was thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        assertEquals(\n            \"min(long[]) failed for array length 1\",\n            5,\n            NumberUtils.min(new long[] { 5 }));\n\n        assertEquals(\n            \"min(long[]) failed for array length 2\",\n            6,\n            NumberUtils.min(new long[] { 6, 9 }));\n\n        assertEquals(-10, NumberUtils.min(new long[] { -10, -5, 0, 5, 10 }));\n        assertEquals(-10, NumberUtils.min(new long[] { -5, 0, -10, 5, 10 }));\n    }",
        "begin_line": 324,
        "end_line": 348,
        "comment": " ----------------------------------------------------------------------",
        "child_ranges": [
            "(line 325,col 9)-(line 325,col 30)",
            "(line 326,col 9)-(line 329,col 48)",
            "(line 331,col 9)-(line 334,col 48)",
            "(line 336,col 9)-(line 339,col 47)",
            "(line 341,col 9)-(line 344,col 50)",
            "(line 346,col 9)-(line 346,col 77)",
            "(line 347,col 9)-(line 347,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMinInt()",
        "snippet": "    public void testMinInt() {\n        final int[] i = null;\n        try {\n            NumberUtils.min(i);\n            fail(\"No exception was thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        try {\n            NumberUtils.min(new int[0]);\n            fail(\"No exception was thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        assertEquals(\n            \"min(int[]) failed for array length 1\",\n            5,\n            NumberUtils.min(new int[] { 5 }));\n\n        assertEquals(\n            \"min(int[]) failed for array length 2\",\n            6,\n            NumberUtils.min(new int[] { 6, 9 }));\n\n        assertEquals(-10, NumberUtils.min(new int[] { -10, -5, 0, 5, 10 }));\n        assertEquals(-10, NumberUtils.min(new int[] { -5, 0, -10, 5, 10 }));\n    }",
        "begin_line": 350,
        "end_line": 374,
        "comment": "",
        "child_ranges": [
            "(line 351,col 9)-(line 351,col 29)",
            "(line 352,col 9)-(line 355,col 48)",
            "(line 357,col 9)-(line 360,col 48)",
            "(line 362,col 9)-(line 365,col 46)",
            "(line 367,col 9)-(line 370,col 49)",
            "(line 372,col 9)-(line 372,col 76)",
            "(line 373,col 9)-(line 373,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMinShort()",
        "snippet": "    public void testMinShort() {\n        final short[] s = null;\n        try {\n            NumberUtils.min(s);\n            fail(\"No exception was thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        try {\n            NumberUtils.min(new short[0]);\n            fail(\"No exception was thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        assertEquals(\n            \"min(short[]) failed for array length 1\",\n            5,\n            NumberUtils.min(new short[] { 5 }));\n\n        assertEquals(\n            \"min(short[]) failed for array length 2\",\n            6,\n            NumberUtils.min(new short[] { 6, 9 }));\n\n        assertEquals(-10, NumberUtils.min(new short[] { -10, -5, 0, 5, 10 }));\n        assertEquals(-10, NumberUtils.min(new short[] { -5, 0, -10, 5, 10 }));\n    }",
        "begin_line": 376,
        "end_line": 400,
        "comment": "",
        "child_ranges": [
            "(line 377,col 9)-(line 377,col 31)",
            "(line 378,col 9)-(line 381,col 48)",
            "(line 383,col 9)-(line 386,col 48)",
            "(line 388,col 9)-(line 391,col 48)",
            "(line 393,col 9)-(line 396,col 51)",
            "(line 398,col 9)-(line 398,col 78)",
            "(line 399,col 9)-(line 399,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMinByte()",
        "snippet": "    public void testMinByte() {\n        final byte[] b = null;\n        try {\n            NumberUtils.min(b);\n            fail(\"No exception was thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        try {\n            NumberUtils.min(new byte[0]);\n            fail(\"No exception was thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        assertEquals(\n            \"min(byte[]) failed for array length 1\",\n            5,\n            NumberUtils.min(new byte[] { 5 }));\n\n        assertEquals(\n            \"min(byte[]) failed for array length 2\",\n            6,\n            NumberUtils.min(new byte[] { 6, 9 }));\n\n        assertEquals(-10, NumberUtils.min(new byte[] { -10, -5, 0, 5, 10 }));\n        assertEquals(-10, NumberUtils.min(new byte[] { -5, 0, -10, 5, 10 }));\n    }",
        "begin_line": 402,
        "end_line": 426,
        "comment": "",
        "child_ranges": [
            "(line 403,col 9)-(line 403,col 30)",
            "(line 404,col 9)-(line 407,col 48)",
            "(line 409,col 9)-(line 412,col 48)",
            "(line 414,col 9)-(line 417,col 47)",
            "(line 419,col 9)-(line 422,col 50)",
            "(line 424,col 9)-(line 424,col 77)",
            "(line 425,col 9)-(line 425,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMinDouble()",
        "snippet": "    public void testMinDouble() {\n        final double[] d = null;\n        try {\n            NumberUtils.min(d);\n            fail(\"No exception was thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        try {\n            NumberUtils.min(new double[0]);\n            fail(\"No exception was thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        assertEquals(\n            \"min(double[]) failed for array length 1\",\n            5.12,\n            NumberUtils.min(new double[] { 5.12 }),\n            0);\n\n        assertEquals(\n            \"min(double[]) failed for array length 2\",\n            6.23,\n            NumberUtils.min(new double[] { 6.23, 9.34 }),\n            0);\n\n        assertEquals(\n            \"min(double[]) failed for array length 5\",\n            -10.45,\n            NumberUtils.min(new double[] { -10.45, -5.56, 0, 5.67, 10.78 }),\n            0);\n        assertEquals(-10, NumberUtils.min(new double[] { -10, -5, 0, 5, 10 }), 0.0001);\n        assertEquals(-10, NumberUtils.min(new double[] { -5, 0, -10, 5, 10 }), 0.0001);\n    }",
        "begin_line": 428,
        "end_line": 459,
        "comment": "",
        "child_ranges": [
            "(line 429,col 9)-(line 429,col 32)",
            "(line 430,col 9)-(line 433,col 48)",
            "(line 435,col 9)-(line 438,col 48)",
            "(line 440,col 9)-(line 444,col 15)",
            "(line 446,col 9)-(line 450,col 15)",
            "(line 452,col 9)-(line 456,col 15)",
            "(line 457,col 9)-(line 457,col 87)",
            "(line 458,col 9)-(line 458,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMinFloat()",
        "snippet": "    public void testMinFloat() {\n        final float[] f = null;\n        try {\n            NumberUtils.min(f);\n            fail(\"No exception was thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        try {\n            NumberUtils.min(new float[0]);\n            fail(\"No exception was thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        assertEquals(\n            \"min(float[]) failed for array length 1\",\n            5.9f,\n            NumberUtils.min(new float[] { 5.9f }),\n            0);\n\n        assertEquals(\n            \"min(float[]) failed for array length 2\",\n            6.8f,\n            NumberUtils.min(new float[] { 6.8f, 9.7f }),\n            0);\n\n        assertEquals(\n            \"min(float[]) failed for array length 5\",\n            -10.6f,\n            NumberUtils.min(new float[] { -10.6f, -5.5f, 0, 5.4f, 10.3f }),\n            0);\n        assertEquals(-10, NumberUtils.min(new float[] { -10, -5, 0, 5, 10 }), 0.0001f);\n        assertEquals(-10, NumberUtils.min(new float[] { -5, 0, -10, 5, 10 }), 0.0001f);\n    }",
        "begin_line": 461,
        "end_line": 492,
        "comment": "",
        "child_ranges": [
            "(line 462,col 9)-(line 462,col 31)",
            "(line 463,col 9)-(line 466,col 48)",
            "(line 468,col 9)-(line 471,col 48)",
            "(line 473,col 9)-(line 477,col 15)",
            "(line 479,col 9)-(line 483,col 15)",
            "(line 485,col 9)-(line 489,col 15)",
            "(line 490,col 9)-(line 490,col 87)",
            "(line 491,col 9)-(line 491,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMaxLong()",
        "snippet": "    public void testMaxLong() {\n        final long[] l = null;\n        try {\n            NumberUtils.max(l);\n            fail(\"No exception was thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        try {\n            NumberUtils.max(new long[0]);\n            fail(\"No exception was thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        assertEquals(\n            \"max(long[]) failed for array length 1\",\n            5,\n            NumberUtils.max(new long[] { 5 }));\n\n        assertEquals(\n            \"max(long[]) failed for array length 2\",\n            9,\n            NumberUtils.max(new long[] { 6, 9 }));\n\n        assertEquals(\n            \"max(long[]) failed for array length 5\",\n            10,\n            NumberUtils.max(new long[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new long[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new long[] { -5, 0, 10, 5, -10 }));\n    }",
        "begin_line": 494,
        "end_line": 522,
        "comment": "",
        "child_ranges": [
            "(line 495,col 9)-(line 495,col 30)",
            "(line 496,col 9)-(line 499,col 48)",
            "(line 501,col 9)-(line 504,col 48)",
            "(line 506,col 9)-(line 509,col 47)",
            "(line 511,col 9)-(line 514,col 50)",
            "(line 516,col 9)-(line 519,col 63)",
            "(line 520,col 9)-(line 520,col 76)",
            "(line 521,col 9)-(line 521,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMaxInt()",
        "snippet": "    public void testMaxInt() {\n        final int[] i = null;\n        try {\n            NumberUtils.max(i);\n            fail(\"No exception was thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        try {\n            NumberUtils.max(new int[0]);\n            fail(\"No exception was thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        assertEquals(\n            \"max(int[]) failed for array length 1\",\n            5,\n            NumberUtils.max(new int[] { 5 }));\n\n        assertEquals(\n            \"max(int[]) failed for array length 2\",\n            9,\n            NumberUtils.max(new int[] { 6, 9 }));\n\n        assertEquals(\n            \"max(int[]) failed for array length 5\",\n            10,\n            NumberUtils.max(new int[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new int[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new int[] { -5, 0, 10, 5, -10 }));\n    }",
        "begin_line": 524,
        "end_line": 552,
        "comment": "",
        "child_ranges": [
            "(line 525,col 9)-(line 525,col 29)",
            "(line 526,col 9)-(line 529,col 48)",
            "(line 531,col 9)-(line 534,col 48)",
            "(line 536,col 9)-(line 539,col 46)",
            "(line 541,col 9)-(line 544,col 49)",
            "(line 546,col 9)-(line 549,col 62)",
            "(line 550,col 9)-(line 550,col 75)",
            "(line 551,col 9)-(line 551,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMaxShort()",
        "snippet": "    public void testMaxShort() {\n        final short[] s = null;\n        try {\n            NumberUtils.max(s);\n            fail(\"No exception was thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        try {\n            NumberUtils.max(new short[0]);\n            fail(\"No exception was thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        assertEquals(\n            \"max(short[]) failed for array length 1\",\n            5,\n            NumberUtils.max(new short[] { 5 }));\n\n        assertEquals(\n            \"max(short[]) failed for array length 2\",\n            9,\n            NumberUtils.max(new short[] { 6, 9 }));\n\n        assertEquals(\n            \"max(short[]) failed for array length 5\",\n            10,\n            NumberUtils.max(new short[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new short[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new short[] { -5, 0, 10, 5, -10 }));\n    }",
        "begin_line": 554,
        "end_line": 582,
        "comment": "",
        "child_ranges": [
            "(line 555,col 9)-(line 555,col 31)",
            "(line 556,col 9)-(line 559,col 48)",
            "(line 561,col 9)-(line 564,col 48)",
            "(line 566,col 9)-(line 569,col 48)",
            "(line 571,col 9)-(line 574,col 51)",
            "(line 576,col 9)-(line 579,col 64)",
            "(line 580,col 9)-(line 580,col 77)",
            "(line 581,col 9)-(line 581,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMaxByte()",
        "snippet": "    public void testMaxByte() {\n        final byte[] b = null;\n        try {\n            NumberUtils.max(b);\n            fail(\"No exception was thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        try {\n            NumberUtils.max(new byte[0]);\n            fail(\"No exception was thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        assertEquals(\n            \"max(byte[]) failed for array length 1\",\n            5,\n            NumberUtils.max(new byte[] { 5 }));\n\n        assertEquals(\n            \"max(byte[]) failed for array length 2\",\n            9,\n            NumberUtils.max(new byte[] { 6, 9 }));\n\n        assertEquals(\n            \"max(byte[]) failed for array length 5\",\n            10,\n            NumberUtils.max(new byte[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new byte[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new byte[] { -5, 0, 10, 5, -10 }));\n    }",
        "begin_line": 584,
        "end_line": 612,
        "comment": "",
        "child_ranges": [
            "(line 585,col 9)-(line 585,col 30)",
            "(line 586,col 9)-(line 589,col 48)",
            "(line 591,col 9)-(line 594,col 48)",
            "(line 596,col 9)-(line 599,col 47)",
            "(line 601,col 9)-(line 604,col 50)",
            "(line 606,col 9)-(line 609,col 63)",
            "(line 610,col 9)-(line 610,col 76)",
            "(line 611,col 9)-(line 611,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMaxDouble()",
        "snippet": "    public void testMaxDouble() {\n        final double[] d = null;\n        try {\n            NumberUtils.max(d);\n            fail(\"No exception was thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        try {\n            NumberUtils.max(new double[0]);\n            fail(\"No exception was thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        assertEquals(\n            \"max(double[]) failed for array length 1\",\n            5.1f,\n            NumberUtils.max(new double[] { 5.1f }),\n            0);\n\n        assertEquals(\n            \"max(double[]) failed for array length 2\",\n            9.2f,\n            NumberUtils.max(new double[] { 6.3f, 9.2f }),\n            0);\n\n        assertEquals(\n            \"max(double[]) failed for float length 5\",\n            10.4f,\n            NumberUtils.max(new double[] { -10.5f, -5.6f, 0, 5.7f, 10.4f }),\n            0);\n        assertEquals(10, NumberUtils.max(new double[] { -10, -5, 0, 5, 10 }), 0.0001);\n        assertEquals(10, NumberUtils.max(new double[] { -5, 0, 10, 5, -10 }), 0.0001);\n    }",
        "begin_line": 614,
        "end_line": 645,
        "comment": "",
        "child_ranges": [
            "(line 615,col 9)-(line 615,col 32)",
            "(line 616,col 9)-(line 619,col 48)",
            "(line 621,col 9)-(line 624,col 48)",
            "(line 626,col 9)-(line 630,col 15)",
            "(line 632,col 9)-(line 636,col 15)",
            "(line 638,col 9)-(line 642,col 15)",
            "(line 643,col 9)-(line 643,col 86)",
            "(line 644,col 9)-(line 644,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMaxFloat()",
        "snippet": "    public void testMaxFloat() {\n        final float[] f = null;\n        try {\n            NumberUtils.max(f);\n            fail(\"No exception was thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        try {\n            NumberUtils.max(new float[0]);\n            fail(\"No exception was thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        assertEquals(\n            \"max(float[]) failed for array length 1\",\n            5.1f,\n            NumberUtils.max(new float[] { 5.1f }),\n            0);\n\n        assertEquals(\n            \"max(float[]) failed for array length 2\",\n            9.2f,\n            NumberUtils.max(new float[] { 6.3f, 9.2f }),\n            0);\n\n        assertEquals(\n            \"max(float[]) failed for float length 5\",\n            10.4f,\n            NumberUtils.max(new float[] { -10.5f, -5.6f, 0, 5.7f, 10.4f }),\n            0);\n        assertEquals(10, NumberUtils.max(new float[] { -10, -5, 0, 5, 10 }), 0.0001f);\n        assertEquals(10, NumberUtils.max(new float[] { -5, 0, 10, 5, -10 }), 0.0001f);\n    }",
        "begin_line": 647,
        "end_line": 678,
        "comment": "",
        "child_ranges": [
            "(line 648,col 9)-(line 648,col 31)",
            "(line 649,col 9)-(line 652,col 48)",
            "(line 654,col 9)-(line 657,col 48)",
            "(line 659,col 9)-(line 663,col 15)",
            "(line 665,col 9)-(line 669,col 15)",
            "(line 671,col 9)-(line 675,col 15)",
            "(line 676,col 9)-(line 676,col 86)",
            "(line 677,col 9)-(line 677,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMinimumLong()",
        "snippet": "    public void testMinimumLong() {\n        assertEquals(\"minimum(long,long,long) 1 failed\", 12345L, NumberUtils.min(12345L, 12345L + 1L, 12345L + 2L));\n        assertEquals(\"minimum(long,long,long) 2 failed\", 12345L, NumberUtils.min(12345L + 1L, 12345L, 12345 + 2L));\n        assertEquals(\"minimum(long,long,long) 3 failed\", 12345L, NumberUtils.min(12345L + 1L, 12345L + 2L, 12345L));\n        assertEquals(\"minimum(long,long,long) 4 failed\", 12345L, NumberUtils.min(12345L + 1L, 12345L, 12345L));\n        assertEquals(\"minimum(long,long,long) 5 failed\", 12345L, NumberUtils.min(12345L, 12345L, 12345L));\n    }",
        "begin_line": 680,
        "end_line": 686,
        "comment": "",
        "child_ranges": [
            "(line 681,col 9)-(line 681,col 116)",
            "(line 682,col 9)-(line 682,col 115)",
            "(line 683,col 9)-(line 683,col 116)",
            "(line 684,col 9)-(line 684,col 111)",
            "(line 685,col 9)-(line 685,col 106)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMinimumInt()",
        "snippet": "    public void testMinimumInt() {\n        assertEquals(\"minimum(int,int,int) 1 failed\", 12345, NumberUtils.min(12345, 12345 + 1, 12345 + 2));\n        assertEquals(\"minimum(int,int,int) 2 failed\", 12345, NumberUtils.min(12345 + 1, 12345, 12345 + 2));\n        assertEquals(\"minimum(int,int,int) 3 failed\", 12345, NumberUtils.min(12345 + 1, 12345 + 2, 12345));\n        assertEquals(\"minimum(int,int,int) 4 failed\", 12345, NumberUtils.min(12345 + 1, 12345, 12345));\n        assertEquals(\"minimum(int,int,int) 5 failed\", 12345, NumberUtils.min(12345, 12345, 12345));\n    }",
        "begin_line": 688,
        "end_line": 694,
        "comment": "",
        "child_ranges": [
            "(line 689,col 9)-(line 689,col 107)",
            "(line 690,col 9)-(line 690,col 107)",
            "(line 691,col 9)-(line 691,col 107)",
            "(line 692,col 9)-(line 692,col 103)",
            "(line 693,col 9)-(line 693,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMinimumShort()",
        "snippet": "    public void testMinimumShort() {\n        short low = 1234;\n        short mid = 1234 + 1;\n        short high = 1234 + 2;\n        assertEquals(\"minimum(short,short,short) 1 failed\", low, NumberUtils.min(low, mid, high));\n        assertEquals(\"minimum(short,short,short) 1 failed\", low, NumberUtils.min(mid, low, high));\n        assertEquals(\"minimum(short,short,short) 1 failed\", low, NumberUtils.min(mid, high, low));\n        assertEquals(\"minimum(short,short,short) 1 failed\", low, NumberUtils.min(low, mid, low));\n    }",
        "begin_line": 696,
        "end_line": 704,
        "comment": "",
        "child_ranges": [
            "(line 697,col 9)-(line 697,col 25)",
            "(line 698,col 9)-(line 698,col 29)",
            "(line 699,col 9)-(line 699,col 30)",
            "(line 700,col 9)-(line 700,col 98)",
            "(line 701,col 9)-(line 701,col 98)",
            "(line 702,col 9)-(line 702,col 98)",
            "(line 703,col 9)-(line 703,col 97)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMinimumByte()",
        "snippet": "    public void testMinimumByte() {\n        byte low = 123;\n        byte mid = 123 + 1;\n        byte high = 123 + 2;\n        assertEquals(\"minimum(byte,byte,byte) 1 failed\", low, NumberUtils.min(low, mid, high));\n        assertEquals(\"minimum(byte,byte,byte) 1 failed\", low, NumberUtils.min(mid, low, high));\n        assertEquals(\"minimum(byte,byte,byte) 1 failed\", low, NumberUtils.min(mid, high, low));\n        assertEquals(\"minimum(byte,byte,byte) 1 failed\", low, NumberUtils.min(low, mid, low));\n    }",
        "begin_line": 706,
        "end_line": 714,
        "comment": "",
        "child_ranges": [
            "(line 707,col 9)-(line 707,col 23)",
            "(line 708,col 9)-(line 708,col 27)",
            "(line 709,col 9)-(line 709,col 28)",
            "(line 710,col 9)-(line 710,col 95)",
            "(line 711,col 9)-(line 711,col 95)",
            "(line 712,col 9)-(line 712,col 95)",
            "(line 713,col 9)-(line 713,col 94)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMinimumDouble()",
        "snippet": "    public void testMinimumDouble() {\n        double low = 12.3;\n        double mid = 12.3 + 1;\n        double high = 12.3 + 2;\n        assertEquals(low, NumberUtils.min(low, mid, high), 0.0001);\n        assertEquals(low, NumberUtils.min(mid, low, high), 0.0001);\n        assertEquals(low, NumberUtils.min(mid, high, low), 0.0001);\n        assertEquals(low, NumberUtils.min(low, mid, low), 0.0001);\n        assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001);\n    }",
        "begin_line": 716,
        "end_line": 725,
        "comment": "",
        "child_ranges": [
            "(line 717,col 9)-(line 717,col 26)",
            "(line 718,col 9)-(line 718,col 30)",
            "(line 719,col 9)-(line 719,col 31)",
            "(line 720,col 9)-(line 720,col 67)",
            "(line 721,col 9)-(line 721,col 67)",
            "(line 722,col 9)-(line 722,col 67)",
            "(line 723,col 9)-(line 723,col 66)",
            "(line 724,col 9)-(line 724,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMinimumFloat()",
        "snippet": "    public void testMinimumFloat() {\n        float low = 12.3f;\n        float mid = 12.3f + 1;\n        float high = 12.3f + 2;\n        assertEquals(low, NumberUtils.min(low, mid, high), 0.0001f);\n        assertEquals(low, NumberUtils.min(mid, low, high), 0.0001f);\n        assertEquals(low, NumberUtils.min(mid, high, low), 0.0001f);\n        assertEquals(low, NumberUtils.min(low, mid, low), 0.0001f);\n        assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001f);\n    }",
        "begin_line": 727,
        "end_line": 736,
        "comment": "",
        "child_ranges": [
            "(line 728,col 9)-(line 728,col 26)",
            "(line 729,col 9)-(line 729,col 30)",
            "(line 730,col 9)-(line 730,col 31)",
            "(line 731,col 9)-(line 731,col 68)",
            "(line 732,col 9)-(line 732,col 68)",
            "(line 733,col 9)-(line 733,col 68)",
            "(line 734,col 9)-(line 734,col 67)",
            "(line 735,col 9)-(line 735,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMaximumLong()",
        "snippet": "    public void testMaximumLong() {\n        assertEquals(\"maximum(long,long,long) 1 failed\", 12345L, NumberUtils.max(12345L, 12345L - 1L, 12345L - 2L));\n        assertEquals(\"maximum(long,long,long) 2 failed\", 12345L, NumberUtils.max(12345L - 1L, 12345L, 12345L - 2L));\n        assertEquals(\"maximum(long,long,long) 3 failed\", 12345L, NumberUtils.max(12345L - 1L, 12345L - 2L, 12345L));\n        assertEquals(\"maximum(long,long,long) 4 failed\", 12345L, NumberUtils.max(12345L - 1L, 12345L, 12345L));\n        assertEquals(\"maximum(long,long,long) 5 failed\", 12345L, NumberUtils.max(12345L, 12345L, 12345L));\n    }",
        "begin_line": 738,
        "end_line": 744,
        "comment": "",
        "child_ranges": [
            "(line 739,col 9)-(line 739,col 116)",
            "(line 740,col 9)-(line 740,col 116)",
            "(line 741,col 9)-(line 741,col 116)",
            "(line 742,col 9)-(line 742,col 111)",
            "(line 743,col 9)-(line 743,col 106)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMaximumInt()",
        "snippet": "    public void testMaximumInt() {\n        assertEquals(\"maximum(int,int,int) 1 failed\", 12345, NumberUtils.max(12345, 12345 - 1, 12345 - 2));\n        assertEquals(\"maximum(int,int,int) 2 failed\", 12345, NumberUtils.max(12345 - 1, 12345, 12345 - 2));\n        assertEquals(\"maximum(int,int,int) 3 failed\", 12345, NumberUtils.max(12345 - 1, 12345 - 2, 12345));\n        assertEquals(\"maximum(int,int,int) 4 failed\", 12345, NumberUtils.max(12345 - 1, 12345, 12345));\n        assertEquals(\"maximum(int,int,int) 5 failed\", 12345, NumberUtils.max(12345, 12345, 12345));\n    }",
        "begin_line": 746,
        "end_line": 752,
        "comment": "",
        "child_ranges": [
            "(line 747,col 9)-(line 747,col 107)",
            "(line 748,col 9)-(line 748,col 107)",
            "(line 749,col 9)-(line 749,col 107)",
            "(line 750,col 9)-(line 750,col 103)",
            "(line 751,col 9)-(line 751,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMaximumShort()",
        "snippet": "    public void testMaximumShort() {\n        short low = 1234;\n        short mid = 1234 + 1;\n        short high = 1234 + 2;\n        assertEquals(\"maximum(short,short,short) 1 failed\", high, NumberUtils.max(low, mid, high));\n        assertEquals(\"maximum(short,short,short) 1 failed\", high, NumberUtils.max(mid, low, high));\n        assertEquals(\"maximum(short,short,short) 1 failed\", high, NumberUtils.max(mid, high, low));\n        assertEquals(\"maximum(short,short,short) 1 failed\", high, NumberUtils.max(high, mid, high));\n    }",
        "begin_line": 754,
        "end_line": 762,
        "comment": "",
        "child_ranges": [
            "(line 755,col 9)-(line 755,col 25)",
            "(line 756,col 9)-(line 756,col 29)",
            "(line 757,col 9)-(line 757,col 30)",
            "(line 758,col 9)-(line 758,col 99)",
            "(line 759,col 9)-(line 759,col 99)",
            "(line 760,col 9)-(line 760,col 99)",
            "(line 761,col 9)-(line 761,col 100)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMaximumByte()",
        "snippet": "    public void testMaximumByte() {\n        byte low = 123;\n        byte mid = 123 + 1;\n        byte high = 123 + 2;\n        assertEquals(\"maximum(byte,byte,byte) 1 failed\", high, NumberUtils.max(low, mid, high));\n        assertEquals(\"maximum(byte,byte,byte) 1 failed\", high, NumberUtils.max(mid, low, high));\n        assertEquals(\"maximum(byte,byte,byte) 1 failed\", high, NumberUtils.max(mid, high, low));\n        assertEquals(\"maximum(byte,byte,byte) 1 failed\", high, NumberUtils.max(high, mid, high));\n    }",
        "begin_line": 764,
        "end_line": 772,
        "comment": "",
        "child_ranges": [
            "(line 765,col 9)-(line 765,col 23)",
            "(line 766,col 9)-(line 766,col 27)",
            "(line 767,col 9)-(line 767,col 28)",
            "(line 768,col 9)-(line 768,col 96)",
            "(line 769,col 9)-(line 769,col 96)",
            "(line 770,col 9)-(line 770,col 96)",
            "(line 771,col 9)-(line 771,col 97)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMaximumDouble()",
        "snippet": "    public void testMaximumDouble() {\n        double low = 12.3;\n        double mid = 12.3 + 1;\n        double high = 12.3 + 2;\n        assertEquals(high, NumberUtils.max(low, mid, high), 0.0001);\n        assertEquals(high, NumberUtils.max(mid, low, high), 0.0001);\n        assertEquals(high, NumberUtils.max(mid, high, low), 0.0001);\n        assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001);\n        assertEquals(high, NumberUtils.max(high, mid, high), 0.0001);\n    }",
        "begin_line": 774,
        "end_line": 783,
        "comment": "",
        "child_ranges": [
            "(line 775,col 9)-(line 775,col 26)",
            "(line 776,col 9)-(line 776,col 30)",
            "(line 777,col 9)-(line 777,col 31)",
            "(line 778,col 9)-(line 778,col 68)",
            "(line 779,col 9)-(line 779,col 68)",
            "(line 780,col 9)-(line 780,col 68)",
            "(line 781,col 9)-(line 781,col 66)",
            "(line 782,col 9)-(line 782,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMaximumFloat()",
        "snippet": "    public void testMaximumFloat() {\n        float low = 12.3f;\n        float mid = 12.3f + 1;\n        float high = 12.3f + 2;\n        assertEquals(high, NumberUtils.max(low, mid, high), 0.0001f);\n        assertEquals(high, NumberUtils.max(mid, low, high), 0.0001f);\n        assertEquals(high, NumberUtils.max(mid, high, low), 0.0001f);\n        assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001f);\n        assertEquals(high, NumberUtils.max(high, mid, high), 0.0001f);\n    }",
        "begin_line": 785,
        "end_line": 794,
        "comment": "",
        "child_ranges": [
            "(line 786,col 9)-(line 786,col 26)",
            "(line 787,col 9)-(line 787,col 30)",
            "(line 788,col 9)-(line 788,col 31)",
            "(line 789,col 9)-(line 789,col 69)",
            "(line 790,col 9)-(line 790,col 69)",
            "(line 791,col 9)-(line 791,col 69)",
            "(line 792,col 9)-(line 792,col 67)",
            "(line 793,col 9)-(line 793,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testCompareDouble()",
        "snippet": "    public void testCompareDouble() {\n        assertTrue(NumberUtils.compare(Double.NaN, Double.NaN) == 0);\n        assertTrue(NumberUtils.compare(Double.NaN, Double.POSITIVE_INFINITY) == +1);\n        assertTrue(NumberUtils.compare(Double.NaN, Double.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(Double.NaN, 1.2d) == +1);\n        assertTrue(NumberUtils.compare(Double.NaN, 0.0d) == +1);\n        assertTrue(NumberUtils.compare(Double.NaN, -0.0d) == +1);\n        assertTrue(NumberUtils.compare(Double.NaN, -1.2d) == +1);\n        assertTrue(NumberUtils.compare(Double.NaN, -Double.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(Double.NaN, Double.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.NaN) == -1);\n        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY) == 0);\n        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, 1.2d) == +1);\n        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, 0.0d) == +1);\n        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, -0.0d) == +1);\n        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, -1.2d) == +1);\n        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, -Double.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.NaN) == -1);\n        assertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.MAX_VALUE) == 0);\n        assertTrue(NumberUtils.compare(Double.MAX_VALUE, 1.2d) == +1);\n        assertTrue(NumberUtils.compare(Double.MAX_VALUE, 0.0d) == +1);\n        assertTrue(NumberUtils.compare(Double.MAX_VALUE, -0.0d) == +1);\n        assertTrue(NumberUtils.compare(Double.MAX_VALUE, -1.2d) == +1);\n        assertTrue(NumberUtils.compare(Double.MAX_VALUE, -Double.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(1.2d, Double.NaN) == -1);\n        assertTrue(NumberUtils.compare(1.2d, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(1.2d, Double.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(1.2d, 1.2d) == 0);\n        assertTrue(NumberUtils.compare(1.2d, 0.0d) == +1);\n        assertTrue(NumberUtils.compare(1.2d, -0.0d) == +1);\n        assertTrue(NumberUtils.compare(1.2d, -1.2d) == +1);\n        assertTrue(NumberUtils.compare(1.2d, -Double.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(1.2d, Double.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(0.0d, Double.NaN) == -1);\n        assertTrue(NumberUtils.compare(0.0d, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(0.0d, Double.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(0.0d, 1.2d) == -1);\n        assertTrue(NumberUtils.compare(0.0d, 0.0d) == 0);\n        assertTrue(NumberUtils.compare(0.0d, -0.0d) == +1);\n        assertTrue(NumberUtils.compare(0.0d, -1.2d) == +1);\n        assertTrue(NumberUtils.compare(0.0d, -Double.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(0.0d, Double.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(-0.0d, Double.NaN) == -1);\n        assertTrue(NumberUtils.compare(-0.0d, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(-0.0d, Double.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(-0.0d, 1.2d) == -1);\n        assertTrue(NumberUtils.compare(-0.0d, 0.0d) == -1);\n        assertTrue(NumberUtils.compare(-0.0d, -0.0d) == 0);\n        assertTrue(NumberUtils.compare(-0.0d, -1.2d) == +1);\n        assertTrue(NumberUtils.compare(-0.0d, -Double.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(-0.0d, Double.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(-1.2d, Double.NaN) == -1);\n        assertTrue(NumberUtils.compare(-1.2d, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(-1.2d, Double.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(-1.2d, 1.2d) == -1);\n        assertTrue(NumberUtils.compare(-1.2d, 0.0d) == -1);\n        assertTrue(NumberUtils.compare(-1.2d, -0.0d) == -1);\n        assertTrue(NumberUtils.compare(-1.2d, -1.2d) == 0);\n        assertTrue(NumberUtils.compare(-1.2d, -Double.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(-1.2d, Double.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.NaN) == -1);\n        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, 1.2d) == -1);\n        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, 0.0d) == -1);\n        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, -0.0d) == -1);\n        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, -1.2d) == -1);\n        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, -Double.MAX_VALUE) == 0);\n        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.NaN) == -1);\n        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, 1.2d) == -1);\n        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, 0.0d) == -1);\n        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, -0.0d) == -1);\n        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, -1.2d) == -1);\n        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, -Double.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY) == 0);\n    }",
        "begin_line": 796,
        "end_line": 886,
        "comment": "",
        "child_ranges": [
            "(line 797,col 9)-(line 797,col 69)",
            "(line 798,col 9)-(line 798,col 84)",
            "(line 799,col 9)-(line 799,col 76)",
            "(line 800,col 9)-(line 800,col 64)",
            "(line 801,col 9)-(line 801,col 64)",
            "(line 802,col 9)-(line 802,col 65)",
            "(line 803,col 9)-(line 803,col 65)",
            "(line 804,col 9)-(line 804,col 77)",
            "(line 805,col 9)-(line 805,col 84)",
            "(line 807,col 9)-(line 807,col 84)",
            "(line 808,col 9)-(line 808,col 97)",
            "(line 809,col 9)-(line 809,col 90)",
            "(line 810,col 9)-(line 810,col 78)",
            "(line 811,col 9)-(line 811,col 78)",
            "(line 812,col 9)-(line 812,col 79)",
            "(line 813,col 9)-(line 813,col 79)",
            "(line 814,col 9)-(line 814,col 91)",
            "(line 815,col 9)-(line 815,col 98)",
            "(line 817,col 9)-(line 817,col 76)",
            "(line 818,col 9)-(line 818,col 90)",
            "(line 819,col 9)-(line 819,col 81)",
            "(line 820,col 9)-(line 820,col 70)",
            "(line 821,col 9)-(line 821,col 70)",
            "(line 822,col 9)-(line 822,col 71)",
            "(line 823,col 9)-(line 823,col 71)",
            "(line 824,col 9)-(line 824,col 83)",
            "(line 825,col 9)-(line 825,col 90)",
            "(line 827,col 9)-(line 827,col 64)",
            "(line 828,col 9)-(line 828,col 78)",
            "(line 829,col 9)-(line 829,col 70)",
            "(line 830,col 9)-(line 830,col 57)",
            "(line 831,col 9)-(line 831,col 58)",
            "(line 832,col 9)-(line 832,col 59)",
            "(line 833,col 9)-(line 833,col 59)",
            "(line 834,col 9)-(line 834,col 71)",
            "(line 835,col 9)-(line 835,col 78)",
            "(line 837,col 9)-(line 837,col 64)",
            "(line 838,col 9)-(line 838,col 78)",
            "(line 839,col 9)-(line 839,col 70)",
            "(line 840,col 9)-(line 840,col 58)",
            "(line 841,col 9)-(line 841,col 57)",
            "(line 842,col 9)-(line 842,col 59)",
            "(line 843,col 9)-(line 843,col 59)",
            "(line 844,col 9)-(line 844,col 71)",
            "(line 845,col 9)-(line 845,col 78)",
            "(line 847,col 9)-(line 847,col 65)",
            "(line 848,col 9)-(line 848,col 79)",
            "(line 849,col 9)-(line 849,col 71)",
            "(line 850,col 9)-(line 850,col 59)",
            "(line 851,col 9)-(line 851,col 59)",
            "(line 852,col 9)-(line 852,col 59)",
            "(line 853,col 9)-(line 853,col 60)",
            "(line 854,col 9)-(line 854,col 72)",
            "(line 855,col 9)-(line 855,col 79)",
            "(line 857,col 9)-(line 857,col 65)",
            "(line 858,col 9)-(line 858,col 79)",
            "(line 859,col 9)-(line 859,col 71)",
            "(line 860,col 9)-(line 860,col 59)",
            "(line 861,col 9)-(line 861,col 59)",
            "(line 862,col 9)-(line 862,col 60)",
            "(line 863,col 9)-(line 863,col 59)",
            "(line 864,col 9)-(line 864,col 72)",
            "(line 865,col 9)-(line 865,col 79)",
            "(line 867,col 9)-(line 867,col 77)",
            "(line 868,col 9)-(line 868,col 91)",
            "(line 869,col 9)-(line 869,col 83)",
            "(line 870,col 9)-(line 870,col 71)",
            "(line 871,col 9)-(line 871,col 71)",
            "(line 872,col 9)-(line 872,col 72)",
            "(line 873,col 9)-(line 873,col 72)",
            "(line 874,col 9)-(line 874,col 83)",
            "(line 875,col 9)-(line 875,col 91)",
            "(line 877,col 9)-(line 877,col 84)",
            "(line 878,col 9)-(line 878,col 98)",
            "(line 879,col 9)-(line 879,col 90)",
            "(line 880,col 9)-(line 880,col 78)",
            "(line 881,col 9)-(line 881,col 78)",
            "(line 882,col 9)-(line 882,col 79)",
            "(line 883,col 9)-(line 883,col 79)",
            "(line 884,col 9)-(line 884,col 91)",
            "(line 885,col 9)-(line 885,col 97)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testCompareFloat()",
        "snippet": "    public void testCompareFloat() {\n        assertTrue(NumberUtils.compare(Float.NaN, Float.NaN) == 0);\n        assertTrue(NumberUtils.compare(Float.NaN, Float.POSITIVE_INFINITY) == +1);\n        assertTrue(NumberUtils.compare(Float.NaN, Float.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(Float.NaN, 1.2f) == +1);\n        assertTrue(NumberUtils.compare(Float.NaN, 0.0f) == +1);\n        assertTrue(NumberUtils.compare(Float.NaN, -0.0f) == +1);\n        assertTrue(NumberUtils.compare(Float.NaN, -1.2f) == +1);\n        assertTrue(NumberUtils.compare(Float.NaN, -Float.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(Float.NaN, Float.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.NaN) == -1);\n        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY) == 0);\n        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, 1.2f) == +1);\n        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, 0.0f) == +1);\n        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, -0.0f) == +1);\n        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, -1.2f) == +1);\n        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, -Float.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.NaN) == -1);\n        assertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.MAX_VALUE) == 0);\n        assertTrue(NumberUtils.compare(Float.MAX_VALUE, 1.2f) == +1);\n        assertTrue(NumberUtils.compare(Float.MAX_VALUE, 0.0f) == +1);\n        assertTrue(NumberUtils.compare(Float.MAX_VALUE, -0.0f) == +1);\n        assertTrue(NumberUtils.compare(Float.MAX_VALUE, -1.2f) == +1);\n        assertTrue(NumberUtils.compare(Float.MAX_VALUE, -Float.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(1.2f, Float.NaN) == -1);\n        assertTrue(NumberUtils.compare(1.2f, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(1.2f, Float.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(1.2f, 1.2f) == 0);\n        assertTrue(NumberUtils.compare(1.2f, 0.0f) == +1);\n        assertTrue(NumberUtils.compare(1.2f, -0.0f) == +1);\n        assertTrue(NumberUtils.compare(1.2f, -1.2f) == +1);\n        assertTrue(NumberUtils.compare(1.2f, -Float.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(1.2f, Float.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(0.0f, Float.NaN) == -1);\n        assertTrue(NumberUtils.compare(0.0f, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(0.0f, Float.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(0.0f, 1.2f) == -1);\n        assertTrue(NumberUtils.compare(0.0f, 0.0f) == 0);\n        assertTrue(NumberUtils.compare(0.0f, -0.0f) == +1);\n        assertTrue(NumberUtils.compare(0.0f, -1.2f) == +1);\n        assertTrue(NumberUtils.compare(0.0f, -Float.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(0.0f, Float.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(-0.0f, Float.NaN) == -1);\n        assertTrue(NumberUtils.compare(-0.0f, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(-0.0f, Float.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(-0.0f, 1.2f) == -1);\n        assertTrue(NumberUtils.compare(-0.0f, 0.0f) == -1);\n        assertTrue(NumberUtils.compare(-0.0f, -0.0f) == 0);\n        assertTrue(NumberUtils.compare(-0.0f, -1.2f) == +1);\n        assertTrue(NumberUtils.compare(-0.0f, -Float.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(-0.0f, Float.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(-1.2f, Float.NaN) == -1);\n        assertTrue(NumberUtils.compare(-1.2f, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(-1.2f, Float.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(-1.2f, 1.2f) == -1);\n        assertTrue(NumberUtils.compare(-1.2f, 0.0f) == -1);\n        assertTrue(NumberUtils.compare(-1.2f, -0.0f) == -1);\n        assertTrue(NumberUtils.compare(-1.2f, -1.2f) == 0);\n        assertTrue(NumberUtils.compare(-1.2f, -Float.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(-1.2f, Float.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.NaN) == -1);\n        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, 1.2f) == -1);\n        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, 0.0f) == -1);\n        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, -0.0f) == -1);\n        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, -1.2f) == -1);\n        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, -Float.MAX_VALUE) == 0);\n        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.NaN) == -1);\n        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, 1.2f) == -1);\n        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, 0.0f) == -1);\n        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, -0.0f) == -1);\n        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, -1.2f) == -1);\n        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, -Float.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY) == 0);\n    }",
        "begin_line": 888,
        "end_line": 978,
        "comment": "",
        "child_ranges": [
            "(line 889,col 9)-(line 889,col 67)",
            "(line 890,col 9)-(line 890,col 82)",
            "(line 891,col 9)-(line 891,col 74)",
            "(line 892,col 9)-(line 892,col 63)",
            "(line 893,col 9)-(line 893,col 63)",
            "(line 894,col 9)-(line 894,col 64)",
            "(line 895,col 9)-(line 895,col 64)",
            "(line 896,col 9)-(line 896,col 75)",
            "(line 897,col 9)-(line 897,col 82)",
            "(line 899,col 9)-(line 899,col 82)",
            "(line 900,col 9)-(line 900,col 95)",
            "(line 901,col 9)-(line 901,col 88)",
            "(line 902,col 9)-(line 902,col 77)",
            "(line 903,col 9)-(line 903,col 77)",
            "(line 904,col 9)-(line 904,col 78)",
            "(line 905,col 9)-(line 905,col 78)",
            "(line 906,col 9)-(line 906,col 89)",
            "(line 907,col 9)-(line 907,col 96)",
            "(line 909,col 9)-(line 909,col 74)",
            "(line 910,col 9)-(line 910,col 88)",
            "(line 911,col 9)-(line 911,col 79)",
            "(line 912,col 9)-(line 912,col 69)",
            "(line 913,col 9)-(line 913,col 69)",
            "(line 914,col 9)-(line 914,col 70)",
            "(line 915,col 9)-(line 915,col 70)",
            "(line 916,col 9)-(line 916,col 81)",
            "(line 917,col 9)-(line 917,col 88)",
            "(line 919,col 9)-(line 919,col 63)",
            "(line 920,col 9)-(line 920,col 77)",
            "(line 921,col 9)-(line 921,col 69)",
            "(line 922,col 9)-(line 922,col 57)",
            "(line 923,col 9)-(line 923,col 58)",
            "(line 924,col 9)-(line 924,col 59)",
            "(line 925,col 9)-(line 925,col 59)",
            "(line 926,col 9)-(line 926,col 70)",
            "(line 927,col 9)-(line 927,col 77)",
            "(line 929,col 9)-(line 929,col 63)",
            "(line 930,col 9)-(line 930,col 77)",
            "(line 931,col 9)-(line 931,col 69)",
            "(line 932,col 9)-(line 932,col 58)",
            "(line 933,col 9)-(line 933,col 57)",
            "(line 934,col 9)-(line 934,col 59)",
            "(line 935,col 9)-(line 935,col 59)",
            "(line 936,col 9)-(line 936,col 70)",
            "(line 937,col 9)-(line 937,col 77)",
            "(line 939,col 9)-(line 939,col 64)",
            "(line 940,col 9)-(line 940,col 78)",
            "(line 941,col 9)-(line 941,col 70)",
            "(line 942,col 9)-(line 942,col 59)",
            "(line 943,col 9)-(line 943,col 59)",
            "(line 944,col 9)-(line 944,col 59)",
            "(line 945,col 9)-(line 945,col 60)",
            "(line 946,col 9)-(line 946,col 71)",
            "(line 947,col 9)-(line 947,col 78)",
            "(line 949,col 9)-(line 949,col 64)",
            "(line 950,col 9)-(line 950,col 78)",
            "(line 951,col 9)-(line 951,col 70)",
            "(line 952,col 9)-(line 952,col 59)",
            "(line 953,col 9)-(line 953,col 59)",
            "(line 954,col 9)-(line 954,col 60)",
            "(line 955,col 9)-(line 955,col 59)",
            "(line 956,col 9)-(line 956,col 71)",
            "(line 957,col 9)-(line 957,col 78)",
            "(line 959,col 9)-(line 959,col 75)",
            "(line 960,col 9)-(line 960,col 89)",
            "(line 961,col 9)-(line 961,col 81)",
            "(line 962,col 9)-(line 962,col 70)",
            "(line 963,col 9)-(line 963,col 70)",
            "(line 964,col 9)-(line 964,col 71)",
            "(line 965,col 9)-(line 965,col 71)",
            "(line 966,col 9)-(line 966,col 81)",
            "(line 967,col 9)-(line 967,col 89)",
            "(line 969,col 9)-(line 969,col 82)",
            "(line 970,col 9)-(line 970,col 96)",
            "(line 971,col 9)-(line 971,col 88)",
            "(line 972,col 9)-(line 972,col 77)",
            "(line 973,col 9)-(line 973,col 77)",
            "(line 974,col 9)-(line 974,col 78)",
            "(line 975,col 9)-(line 975,col 78)",
            "(line 976,col 9)-(line 976,col 89)",
            "(line 977,col 9)-(line 977,col 95)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testIsDigits()",
        "snippet": "    public void testIsDigits() {\n        assertEquals(\"isDigits(null) failed\", false, NumberUtils.isDigits(null));\n        assertEquals(\"isDigits('') failed\", false, NumberUtils.isDigits(\"\"));\n        assertEquals(\"isDigits(String) failed\", true, NumberUtils.isDigits(\"12345\"));\n        assertEquals(\"isDigits(String) neg 1 failed\", false, NumberUtils.isDigits(\"1234.5\"));\n        assertEquals(\"isDigits(String) neg 3 failed\", false, NumberUtils.isDigits(\"1ab\"));\n        assertEquals(\"isDigits(String) neg 4 failed\", false, NumberUtils.isDigits(\"abc\"));\n    }",
        "begin_line": 980,
        "end_line": 987,
        "comment": "",
        "child_ranges": [
            "(line 981,col 9)-(line 981,col 81)",
            "(line 982,col 9)-(line 982,col 77)",
            "(line 983,col 9)-(line 983,col 85)",
            "(line 984,col 9)-(line 984,col 93)",
            "(line 985,col 9)-(line 985,col 90)",
            "(line 986,col 9)-(line 986,col 90)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testIsNumber()",
        "snippet": "    public void testIsNumber() {\n        String val = \"12345\";\n        assertTrue(\"isNumber(String) 1 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 1 failed\", checkCreateNumber(val));\n        val = \"1234.5\";\n        assertTrue(\"isNumber(String) 2 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 2 failed\", checkCreateNumber(val));\n        val = \".12345\";\n        assertTrue(\"isNumber(String) 3 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 3 failed\", checkCreateNumber(val));\n        val = \"1234E5\";\n        assertTrue(\"isNumber(String) 4 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 4 failed\", checkCreateNumber(val));\n        val = \"1234E+5\";\n        assertTrue(\"isNumber(String) 5 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 5 failed\", checkCreateNumber(val));\n        val = \"1234E-5\";\n        assertTrue(\"isNumber(String) 6 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 6 failed\", checkCreateNumber(val));\n        val = \"123.4E5\";\n        assertTrue(\"isNumber(String) 7 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 7 failed\", checkCreateNumber(val));\n        val = \"-1234\";\n        assertTrue(\"isNumber(String) 8 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 8 failed\", checkCreateNumber(val));\n        val = \"-1234.5\";\n        assertTrue(\"isNumber(String) 9 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 9 failed\", checkCreateNumber(val));\n        val = \"-.12345\";\n        assertTrue(\"isNumber(String) 10 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 10 failed\", checkCreateNumber(val));\n        val = \"-1234E5\";\n        assertTrue(\"isNumber(String) 11 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 11 failed\", checkCreateNumber(val));\n        val = \"0\";\n        assertTrue(\"isNumber(String) 12 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 12 failed\", checkCreateNumber(val));\n        val = \"-0\";\n        assertTrue(\"isNumber(String) 13 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 13 failed\", checkCreateNumber(val));\n        val = \"01234\";\n        assertTrue(\"isNumber(String) 14 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 14 failed\", checkCreateNumber(val));\n        val = \"-01234\";\n        assertTrue(\"isNumber(String) 15 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 15 failed\", checkCreateNumber(val));\n        val = \"0xABC123\";\n        assertTrue(\"isNumber(String) 16 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 16 failed\", checkCreateNumber(val));\n        val = \"0x0\";\n        assertTrue(\"isNumber(String) 17 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 17 failed\", checkCreateNumber(val));\n        val = \"123.4E21D\";\n        assertTrue(\"isNumber(String) 19 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 19 failed\", checkCreateNumber(val));\n        val = \"-221.23F\";\n        assertTrue(\"isNumber(String) 20 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 20 failed\", checkCreateNumber(val));\n        val = \"22338L\";\n        assertTrue(\"isNumber(String) 21 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 21 failed\", checkCreateNumber(val));\n        val = null;\n        assertTrue(\"isNumber(String) 1 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 1 Neg failed\", !checkCreateNumber(val));\n        val = \"\";\n        assertTrue(\"isNumber(String) 2 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 2 Neg failed\", !checkCreateNumber(val));\n        val = \"--2.3\";\n        assertTrue(\"isNumber(String) 3 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 3 Neg failed\", !checkCreateNumber(val));\n        val = \".12.3\";\n        assertTrue(\"isNumber(String) 4 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 4 Neg failed\", !checkCreateNumber(val));\n        val = \"-123E\";\n        assertTrue(\"isNumber(String) 5 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 5 Neg failed\", !checkCreateNumber(val));\n        val = \"-123E+-212\";\n        assertTrue(\"isNumber(String) 6 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 6 Neg failed\", !checkCreateNumber(val));\n        val = \"-123E2.12\";\n        assertTrue(\"isNumber(String) 7 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 7 Neg failed\", !checkCreateNumber(val));\n        val = \"0xGF\";\n        assertTrue(\"isNumber(String) 8 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 8 Neg failed\", !checkCreateNumber(val));\n        val = \"0xFAE-1\";\n        assertTrue(\"isNumber(String) 9 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 9 Neg failed\", !checkCreateNumber(val));\n        val = \".\";\n        assertTrue(\"isNumber(String) 10 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 10 Neg failed\", !checkCreateNumber(val));\n        val = \"-0ABC123\";\n        assertTrue(\"isNumber(String) 11 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 11 Neg failed\", !checkCreateNumber(val));\n        val = \"123.4E-D\";\n        assertTrue(\"isNumber(String) 12 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 12 Neg failed\", !checkCreateNumber(val));\n        val = \"123.4ED\";\n        assertTrue(\"isNumber(String) 13 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 13 Neg failed\", !checkCreateNumber(val));\n        val = \"1234E5l\";\n        assertTrue(\"isNumber(String) 14 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 14 Neg failed\", !checkCreateNumber(val));\n        val = \"11a\";\n        assertTrue(\"isNumber(String) 15 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 15 Neg failed\", !checkCreateNumber(val)); \n        val = \"1a\";\n        assertTrue(\"isNumber(String) 16 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 16 Neg failed\", !checkCreateNumber(val)); \n        val = \"a\";\n        assertTrue(\"isNumber(String) 17 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 17 Neg failed\", !checkCreateNumber(val)); \n        val = \"11g\";\n        assertTrue(\"isNumber(String) 18 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 18 Neg failed\", !checkCreateNumber(val)); \n        val = \"11z\";\n        assertTrue(\"isNumber(String) 19 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 19 Neg failed\", !checkCreateNumber(val)); \n        val = \"11def\";\n        assertTrue(\"isNumber(String) 20 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 20 Neg failed\", !checkCreateNumber(val)); \n        val = \"11d11\";\n        assertTrue(\"isNumber(String) 21 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 21 Neg failed\", !checkCreateNumber(val)); \n        val = \"11 11\";\n        assertTrue(\"isNumber(String) 22 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 22 Neg failed\", !checkCreateNumber(val));\n        val = \" 1111\";\n        assertTrue(\"isNumber(String) 23 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 23 Neg failed\", !checkCreateNumber(val));\n        val = \"1111 \";\n        assertTrue(\"isNumber(String) 24 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 24 Neg failed\", !checkCreateNumber(val));\n\n    }",
        "begin_line": 993,
        "end_line": 1127,
        "comment": "\n     * Tests isNumber(String) and tests that createNumber(String) returns\n     * a valid number iff isNumber(String) returns false.\n     ",
        "child_ranges": [
            "(line 994,col 9)-(line 994,col 29)",
            "(line 995,col 9)-(line 995,col 75)",
            "(line 996,col 9)-(line 996,col 93)",
            "(line 997,col 9)-(line 997,col 23)",
            "(line 998,col 9)-(line 998,col 75)",
            "(line 999,col 9)-(line 999,col 93)",
            "(line 1000,col 9)-(line 1000,col 23)",
            "(line 1001,col 9)-(line 1001,col 75)",
            "(line 1002,col 9)-(line 1002,col 93)",
            "(line 1003,col 9)-(line 1003,col 23)",
            "(line 1004,col 9)-(line 1004,col 75)",
            "(line 1005,col 9)-(line 1005,col 93)",
            "(line 1006,col 9)-(line 1006,col 24)",
            "(line 1007,col 9)-(line 1007,col 75)",
            "(line 1008,col 9)-(line 1008,col 93)",
            "(line 1009,col 9)-(line 1009,col 24)",
            "(line 1010,col 9)-(line 1010,col 75)",
            "(line 1011,col 9)-(line 1011,col 93)",
            "(line 1012,col 9)-(line 1012,col 24)",
            "(line 1013,col 9)-(line 1013,col 75)",
            "(line 1014,col 9)-(line 1014,col 93)",
            "(line 1015,col 9)-(line 1015,col 22)",
            "(line 1016,col 9)-(line 1016,col 75)",
            "(line 1017,col 9)-(line 1017,col 93)",
            "(line 1018,col 9)-(line 1018,col 24)",
            "(line 1019,col 9)-(line 1019,col 75)",
            "(line 1020,col 9)-(line 1020,col 93)",
            "(line 1021,col 9)-(line 1021,col 24)",
            "(line 1022,col 9)-(line 1022,col 76)",
            "(line 1023,col 9)-(line 1023,col 94)",
            "(line 1024,col 9)-(line 1024,col 24)",
            "(line 1025,col 9)-(line 1025,col 76)",
            "(line 1026,col 9)-(line 1026,col 94)",
            "(line 1027,col 9)-(line 1027,col 18)",
            "(line 1028,col 9)-(line 1028,col 76)",
            "(line 1029,col 9)-(line 1029,col 94)",
            "(line 1030,col 9)-(line 1030,col 19)",
            "(line 1031,col 9)-(line 1031,col 76)",
            "(line 1032,col 9)-(line 1032,col 94)",
            "(line 1033,col 9)-(line 1033,col 22)",
            "(line 1034,col 9)-(line 1034,col 76)",
            "(line 1035,col 9)-(line 1035,col 94)",
            "(line 1036,col 9)-(line 1036,col 23)",
            "(line 1037,col 9)-(line 1037,col 76)",
            "(line 1038,col 9)-(line 1038,col 94)",
            "(line 1039,col 9)-(line 1039,col 25)",
            "(line 1040,col 9)-(line 1040,col 76)",
            "(line 1041,col 9)-(line 1041,col 94)",
            "(line 1042,col 9)-(line 1042,col 20)",
            "(line 1043,col 9)-(line 1043,col 76)",
            "(line 1044,col 9)-(line 1044,col 94)",
            "(line 1045,col 9)-(line 1045,col 26)",
            "(line 1046,col 9)-(line 1046,col 76)",
            "(line 1047,col 9)-(line 1047,col 94)",
            "(line 1048,col 9)-(line 1048,col 25)",
            "(line 1049,col 9)-(line 1049,col 76)",
            "(line 1050,col 9)-(line 1050,col 94)",
            "(line 1051,col 9)-(line 1051,col 23)",
            "(line 1052,col 9)-(line 1052,col 76)",
            "(line 1053,col 9)-(line 1053,col 94)",
            "(line 1054,col 9)-(line 1054,col 19)",
            "(line 1055,col 9)-(line 1055,col 80)",
            "(line 1056,col 9)-(line 1056,col 98)",
            "(line 1057,col 9)-(line 1057,col 17)",
            "(line 1058,col 9)-(line 1058,col 80)",
            "(line 1059,col 9)-(line 1059,col 98)",
            "(line 1060,col 9)-(line 1060,col 22)",
            "(line 1061,col 9)-(line 1061,col 80)",
            "(line 1062,col 9)-(line 1062,col 98)",
            "(line 1063,col 9)-(line 1063,col 22)",
            "(line 1064,col 9)-(line 1064,col 80)",
            "(line 1065,col 9)-(line 1065,col 98)",
            "(line 1066,col 9)-(line 1066,col 22)",
            "(line 1067,col 9)-(line 1067,col 80)",
            "(line 1068,col 9)-(line 1068,col 98)",
            "(line 1069,col 9)-(line 1069,col 27)",
            "(line 1070,col 9)-(line 1070,col 80)",
            "(line 1071,col 9)-(line 1071,col 98)",
            "(line 1072,col 9)-(line 1072,col 26)",
            "(line 1073,col 9)-(line 1073,col 80)",
            "(line 1074,col 9)-(line 1074,col 98)",
            "(line 1075,col 9)-(line 1075,col 21)",
            "(line 1076,col 9)-(line 1076,col 80)",
            "(line 1077,col 9)-(line 1077,col 98)",
            "(line 1078,col 9)-(line 1078,col 24)",
            "(line 1079,col 9)-(line 1079,col 80)",
            "(line 1080,col 9)-(line 1080,col 98)",
            "(line 1081,col 9)-(line 1081,col 18)",
            "(line 1082,col 9)-(line 1082,col 81)",
            "(line 1083,col 9)-(line 1083,col 99)",
            "(line 1084,col 9)-(line 1084,col 25)",
            "(line 1085,col 9)-(line 1085,col 81)",
            "(line 1086,col 9)-(line 1086,col 99)",
            "(line 1087,col 9)-(line 1087,col 25)",
            "(line 1088,col 9)-(line 1088,col 81)",
            "(line 1089,col 9)-(line 1089,col 99)",
            "(line 1090,col 9)-(line 1090,col 24)",
            "(line 1091,col 9)-(line 1091,col 81)",
            "(line 1092,col 9)-(line 1092,col 99)",
            "(line 1093,col 9)-(line 1093,col 24)",
            "(line 1094,col 9)-(line 1094,col 81)",
            "(line 1095,col 9)-(line 1095,col 99)",
            "(line 1096,col 9)-(line 1096,col 20)",
            "(line 1097,col 9)-(line 1097,col 81)",
            "(line 1098,col 9)-(line 1098,col 99)",
            "(line 1099,col 9)-(line 1099,col 19)",
            "(line 1100,col 9)-(line 1100,col 81)",
            "(line 1101,col 9)-(line 1101,col 99)",
            "(line 1102,col 9)-(line 1102,col 18)",
            "(line 1103,col 9)-(line 1103,col 81)",
            "(line 1104,col 9)-(line 1104,col 99)",
            "(line 1105,col 9)-(line 1105,col 20)",
            "(line 1106,col 9)-(line 1106,col 81)",
            "(line 1107,col 9)-(line 1107,col 99)",
            "(line 1108,col 9)-(line 1108,col 20)",
            "(line 1109,col 9)-(line 1109,col 81)",
            "(line 1110,col 9)-(line 1110,col 99)",
            "(line 1111,col 9)-(line 1111,col 22)",
            "(line 1112,col 9)-(line 1112,col 81)",
            "(line 1113,col 9)-(line 1113,col 99)",
            "(line 1114,col 9)-(line 1114,col 22)",
            "(line 1115,col 9)-(line 1115,col 81)",
            "(line 1116,col 9)-(line 1116,col 99)",
            "(line 1117,col 9)-(line 1117,col 22)",
            "(line 1118,col 9)-(line 1118,col 81)",
            "(line 1119,col 9)-(line 1119,col 99)",
            "(line 1120,col 9)-(line 1120,col 22)",
            "(line 1121,col 9)-(line 1121,col 81)",
            "(line 1122,col 9)-(line 1122,col 99)",
            "(line 1123,col 9)-(line 1123,col 22)",
            "(line 1124,col 9)-(line 1124,col 81)",
            "(line 1125,col 9)-(line 1125,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.checkCreateNumber(java.lang.String)",
        "snippet": "    private boolean checkCreateNumber(String val) {\n        try {\n            Object obj = NumberUtils.createNumber(val);\n            if (obj == null) {\n                return false;\n            }\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n       }\n    }",
        "begin_line": 1129,
        "end_line": 1139,
        "comment": "",
        "child_ranges": [
            "(line 1130,col 9)-(line 1138,col 8)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testConstants()",
        "snippet": "    public void testConstants() {\n        assertTrue(NumberUtils.LONG_ZERO instanceof Long);\n        assertTrue(NumberUtils.LONG_ONE instanceof Long);\n        assertTrue(NumberUtils.LONG_MINUS_ONE instanceof Long);\n        assertTrue(NumberUtils.INTEGER_ZERO instanceof Integer);\n        assertTrue(NumberUtils.INTEGER_ONE instanceof Integer);\n        assertTrue(NumberUtils.INTEGER_MINUS_ONE instanceof Integer);\n        assertTrue(NumberUtils.SHORT_ZERO instanceof Short);\n        assertTrue(NumberUtils.SHORT_ONE instanceof Short);\n        assertTrue(NumberUtils.SHORT_MINUS_ONE instanceof Short);\n        assertTrue(NumberUtils.BYTE_ZERO instanceof Byte);\n        assertTrue(NumberUtils.BYTE_ONE instanceof Byte);\n        assertTrue(NumberUtils.BYTE_MINUS_ONE instanceof Byte);\n        assertTrue(NumberUtils.DOUBLE_ZERO instanceof Double);\n        assertTrue(NumberUtils.DOUBLE_ONE instanceof Double);\n        assertTrue(NumberUtils.DOUBLE_MINUS_ONE instanceof Double);\n        assertTrue(NumberUtils.FLOAT_ZERO instanceof Float);\n        assertTrue(NumberUtils.FLOAT_ONE instanceof Float);\n        assertTrue(NumberUtils.FLOAT_MINUS_ONE instanceof Float);\n        \n        assertTrue(NumberUtils.LONG_ZERO.longValue() == 0);\n        assertTrue(NumberUtils.LONG_ONE.longValue() == 1);\n        assertTrue(NumberUtils.LONG_MINUS_ONE.longValue() == -1);\n        assertTrue(NumberUtils.INTEGER_ZERO.intValue() == 0);\n        assertTrue(NumberUtils.INTEGER_ONE.intValue() == 1);\n        assertTrue(NumberUtils.INTEGER_MINUS_ONE.intValue() == -1);\n        assertTrue(NumberUtils.SHORT_ZERO.shortValue() == 0);\n        assertTrue(NumberUtils.SHORT_ONE.shortValue() == 1);\n        assertTrue(NumberUtils.SHORT_MINUS_ONE.shortValue() == -1);\n        assertTrue(NumberUtils.BYTE_ZERO.byteValue() == 0);\n        assertTrue(NumberUtils.BYTE_ONE.byteValue() == 1);\n        assertTrue(NumberUtils.BYTE_MINUS_ONE.byteValue() == -1);\n        assertTrue(NumberUtils.DOUBLE_ZERO.doubleValue() == 0.0d);\n        assertTrue(NumberUtils.DOUBLE_ONE.doubleValue() == 1.0d);\n        assertTrue(NumberUtils.DOUBLE_MINUS_ONE.doubleValue() == -1.0d);\n        assertTrue(NumberUtils.FLOAT_ZERO.floatValue() == 0.0f);\n        assertTrue(NumberUtils.FLOAT_ONE.floatValue() == 1.0f);\n        assertTrue(NumberUtils.FLOAT_MINUS_ONE.floatValue() == -1.0f);\n    }",
        "begin_line": 1141,
        "end_line": 1179,
        "comment": "",
        "child_ranges": [
            "(line 1142,col 9)-(line 1142,col 58)",
            "(line 1143,col 9)-(line 1143,col 57)",
            "(line 1144,col 9)-(line 1144,col 63)",
            "(line 1145,col 9)-(line 1145,col 64)",
            "(line 1146,col 9)-(line 1146,col 63)",
            "(line 1147,col 9)-(line 1147,col 69)",
            "(line 1148,col 9)-(line 1148,col 60)",
            "(line 1149,col 9)-(line 1149,col 59)",
            "(line 1150,col 9)-(line 1150,col 65)",
            "(line 1151,col 9)-(line 1151,col 58)",
            "(line 1152,col 9)-(line 1152,col 57)",
            "(line 1153,col 9)-(line 1153,col 63)",
            "(line 1154,col 9)-(line 1154,col 62)",
            "(line 1155,col 9)-(line 1155,col 61)",
            "(line 1156,col 9)-(line 1156,col 67)",
            "(line 1157,col 9)-(line 1157,col 60)",
            "(line 1158,col 9)-(line 1158,col 59)",
            "(line 1159,col 9)-(line 1159,col 65)",
            "(line 1161,col 9)-(line 1161,col 59)",
            "(line 1162,col 9)-(line 1162,col 58)",
            "(line 1163,col 9)-(line 1163,col 65)",
            "(line 1164,col 9)-(line 1164,col 61)",
            "(line 1165,col 9)-(line 1165,col 60)",
            "(line 1166,col 9)-(line 1166,col 67)",
            "(line 1167,col 9)-(line 1167,col 61)",
            "(line 1168,col 9)-(line 1168,col 60)",
            "(line 1169,col 9)-(line 1169,col 67)",
            "(line 1170,col 9)-(line 1170,col 59)",
            "(line 1171,col 9)-(line 1171,col 58)",
            "(line 1172,col 9)-(line 1172,col 65)",
            "(line 1173,col 9)-(line 1173,col 66)",
            "(line 1174,col 9)-(line 1174,col 65)",
            "(line 1175,col 9)-(line 1175,col 72)",
            "(line 1176,col 9)-(line 1176,col 64)",
            "(line 1177,col 9)-(line 1177,col 63)",
            "(line 1178,col 9)-(line 1178,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testLang300()",
        "snippet": "    public void testLang300() {\n        NumberUtils.createNumber(\"-1l\");\n        NumberUtils.createNumber(\"01l\");\n        NumberUtils.createNumber(\"1l\");\n    }",
        "begin_line": 1181,
        "end_line": 1185,
        "comment": "",
        "child_ranges": [
            "(line 1182,col 9)-(line 1182,col 40)",
            "(line 1183,col 9)-(line 1183,col 40)",
            "(line 1184,col 9)-(line 1184,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testLang381()",
        "snippet": "    public void testLang381() {\n        assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN)));\n        assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN)));\n        assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN)));\n        assertTrue(Float.isNaN(NumberUtils.max(1.2f, 2.5f, Float.NaN)));\n\n        double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN };\n        assertTrue(Double.isNaN(NumberUtils.max(a)));\n        assertTrue(Double.isNaN(NumberUtils.min(a)));\n\n        double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN };\n        assertTrue(Double.isNaN(NumberUtils.max(b)));\n        assertTrue(Double.isNaN(NumberUtils.min(b)));\n\n        float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN };\n        assertTrue(Float.isNaN(NumberUtils.max(aF)));\n\n        float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN };\n        assertTrue(Float.isNaN(NumberUtils.max(bF)));\n    }",
        "begin_line": 1187,
        "end_line": 1206,
        "comment": "",
        "child_ranges": [
            "(line 1188,col 9)-(line 1188,col 72)",
            "(line 1189,col 9)-(line 1189,col 72)",
            "(line 1190,col 9)-(line 1190,col 72)",
            "(line 1191,col 9)-(line 1191,col 72)",
            "(line 1193,col 9)-(line 1193,col 83)",
            "(line 1194,col 9)-(line 1194,col 53)",
            "(line 1195,col 9)-(line 1195,col 53)",
            "(line 1197,col 9)-(line 1197,col 95)",
            "(line 1198,col 9)-(line 1198,col 53)",
            "(line 1199,col 9)-(line 1199,col 53)",
            "(line 1201,col 9)-(line 1201,col 84)",
            "(line 1202,col 9)-(line 1202,col 53)",
            "(line 1204,col 9)-(line 1204,col 95)",
            "(line 1205,col 9)-(line 1205,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.DoubleRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/DoubleRangeTest.java",
        "signature": "org.apache.commons.lang.math.DoubleRangeTest.DoubleRangeTest(java.lang.String)",
        "snippet": "    public DoubleRangeTest(String name) {\n        super(name);\n    }",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.DoubleRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/DoubleRangeTest.java",
        "signature": "org.apache.commons.lang.math.DoubleRangeTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(DoubleRangeTest.class);\n        suite.setName(\"DoubleRange Tests\");\n        return suite;\n    }",
        "begin_line": 36,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 63)",
            "(line 38,col 9)-(line 38,col 43)",
            "(line 39,col 9)-(line 39,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.DoubleRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/DoubleRangeTest.java",
        "signature": "org.apache.commons.lang.math.DoubleRangeTest.setUp()",
        "snippet": "    public void setUp() {\n        super.setUp();\n        tenToTwenty = new DoubleRange(double10, double20);\n        otherRange = new NumberRange(ten, twenty);\n    }",
        "begin_line": 42,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 22)",
            "(line 44,col 9)-(line 44,col 58)",
            "(line 45,col 9)-(line 45,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.DoubleRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/DoubleRangeTest.java",
        "signature": "org.apache.commons.lang.math.DoubleRangeTest.createRange(java.lang.Integer, java.lang.Integer)",
        "snippet": "    protected Range createRange(Integer integer1, Integer integer2) {\n        return new DoubleRange(integer1, integer2);\n    }",
        "begin_line": 48,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.DoubleRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/DoubleRangeTest.java",
        "signature": "org.apache.commons.lang.math.DoubleRangeTest.createRange(java.lang.Integer)",
        "snippet": "    protected Range createRange(Integer integer) {\n        return new NumberRange(integer);\n    }",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.DoubleRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/DoubleRangeTest.java",
        "signature": "org.apache.commons.lang.math.DoubleRangeTest.testConstructor1a()",
        "snippet": "    public void testConstructor1a() {\n        DoubleRange nr = new DoubleRange(8d);\n        assertEquals(double8, nr.getMinimumNumber());\n        assertEquals(double8, nr.getMaximumNumber());\n        \n        try {\n            new DoubleRange(Double.NaN);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 57,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 58,col 9)-(line 58,col 45)",
            "(line 59,col 9)-(line 59,col 53)",
            "(line 60,col 9)-(line 60,col 53)",
            "(line 62,col 9)-(line 65,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.DoubleRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/DoubleRangeTest.java",
        "signature": "org.apache.commons.lang.math.DoubleRangeTest.testConstructor1b()",
        "snippet": "    public void testConstructor1b() {\n        DoubleRange nr = new DoubleRange(double8);\n        assertSame(double8, nr.getMinimumNumber());\n        assertSame(double8, nr.getMaximumNumber());\n        \n        Range r = new DoubleRange(nonComparableNumber);\n        \n        try {\n            new DoubleRange(null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            new DoubleRange(new Double(Double.NaN));\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 68,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 50)",
            "(line 70,col 9)-(line 70,col 51)",
            "(line 71,col 9)-(line 71,col 51)",
            "(line 73,col 9)-(line 73,col 55)",
            "(line 75,col 9)-(line 78,col 48)",
            "(line 79,col 9)-(line 82,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.DoubleRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/DoubleRangeTest.java",
        "signature": "org.apache.commons.lang.math.DoubleRangeTest.testConstructor2a()",
        "snippet": "    public void testConstructor2a() {\n        DoubleRange nr = new DoubleRange(8d, 10d);\n        assertEquals(double8, nr.getMinimumNumber());\n        assertEquals(double10, nr.getMaximumNumber());\n        \n        nr = new DoubleRange(10d, 8d);\n        assertEquals(double8, nr.getMinimumNumber());\n        assertEquals(double10, nr.getMaximumNumber());\n        \n        try {\n            new DoubleRange(Double.NaN, 8d);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 85,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 50)",
            "(line 87,col 9)-(line 87,col 53)",
            "(line 88,col 9)-(line 88,col 54)",
            "(line 90,col 9)-(line 90,col 38)",
            "(line 91,col 9)-(line 91,col 53)",
            "(line 92,col 9)-(line 92,col 54)",
            "(line 94,col 9)-(line 97,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.DoubleRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/DoubleRangeTest.java",
        "signature": "org.apache.commons.lang.math.DoubleRangeTest.testConstructor2b()",
        "snippet": "    public void testConstructor2b() {\n        DoubleRange nr = new DoubleRange(double8, double10);\n        assertSame(double8, nr.getMinimumNumber());\n        assertSame(double10, nr.getMaximumNumber());\n        \n        nr = new DoubleRange(double10, double8);\n        assertSame(double8, nr.getMinimumNumber());\n        assertSame(double10, nr.getMaximumNumber());\n        \n        nr = new DoubleRange(double8, double10);\n        assertSame(double8, nr.getMinimumNumber());\n        assertEquals(double10, nr.getMaximumNumber());\n        \n        // not null\n        try {\n            new DoubleRange(double8, null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            new DoubleRange(null, double8);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            new DoubleRange(null, null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        \n        try {\n            new DoubleRange(new Double(Double.NaN), double10);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 100,
        "end_line": 131,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 60)",
            "(line 102,col 9)-(line 102,col 51)",
            "(line 103,col 9)-(line 103,col 52)",
            "(line 105,col 9)-(line 105,col 48)",
            "(line 106,col 9)-(line 106,col 51)",
            "(line 107,col 9)-(line 107,col 52)",
            "(line 109,col 9)-(line 109,col 48)",
            "(line 110,col 9)-(line 110,col 51)",
            "(line 111,col 9)-(line 111,col 54)",
            "(line 114,col 9)-(line 117,col 48)",
            "(line 118,col 9)-(line 121,col 48)",
            "(line 122,col 9)-(line 125,col 48)",
            "(line 127,col 9)-(line 130,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.DoubleRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/DoubleRangeTest.java",
        "signature": "org.apache.commons.lang.math.DoubleRangeTest.testContainsNumber()",
        "snippet": "    public void testContainsNumber() {\n        assertEquals(false, tenToTwenty.containsNumber(null));\n        assertEquals(true, tenToTwenty.containsNumber(nonComparableNumber));\n        \n        assertEquals(false, tenToTwenty.containsNumber(five));\n        assertEquals(true, tenToTwenty.containsNumber(ten));\n        assertEquals(true, tenToTwenty.containsNumber(fifteen));\n        assertEquals(true, tenToTwenty.containsNumber(twenty));\n        assertEquals(false, tenToTwenty.containsNumber(twentyFive));\n        \n        assertEquals(false, tenToTwenty.containsNumber(long8));\n        assertEquals(true, tenToTwenty.containsNumber(long10));\n        assertEquals(true, tenToTwenty.containsNumber(long12));\n        assertEquals(true, tenToTwenty.containsNumber(long20));\n        assertEquals(false, tenToTwenty.containsNumber(long21));\n        \n        assertEquals(false, tenToTwenty.containsNumber(double8));\n        assertEquals(true, tenToTwenty.containsNumber(double10));\n        assertEquals(true, tenToTwenty.containsNumber(double12));\n        assertEquals(true, tenToTwenty.containsNumber(double20));\n        assertEquals(false, tenToTwenty.containsNumber(double21));\n        \n        assertEquals(false, tenToTwenty.containsNumber(float8));\n        assertEquals(true, tenToTwenty.containsNumber(float10));\n        assertEquals(true, tenToTwenty.containsNumber(float12));\n        assertEquals(true, tenToTwenty.containsNumber(float20));\n        assertEquals(false, tenToTwenty.containsNumber(float21));\n    }",
        "begin_line": 135,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 136,col 9)-(line 136,col 62)",
            "(line 137,col 9)-(line 137,col 76)",
            "(line 139,col 9)-(line 139,col 62)",
            "(line 140,col 9)-(line 140,col 60)",
            "(line 141,col 9)-(line 141,col 64)",
            "(line 142,col 9)-(line 142,col 63)",
            "(line 143,col 9)-(line 143,col 68)",
            "(line 145,col 9)-(line 145,col 63)",
            "(line 146,col 9)-(line 146,col 63)",
            "(line 147,col 9)-(line 147,col 63)",
            "(line 148,col 9)-(line 148,col 63)",
            "(line 149,col 9)-(line 149,col 64)",
            "(line 151,col 9)-(line 151,col 65)",
            "(line 152,col 9)-(line 152,col 65)",
            "(line 153,col 9)-(line 153,col 65)",
            "(line 154,col 9)-(line 154,col 65)",
            "(line 155,col 9)-(line 155,col 66)",
            "(line 157,col 9)-(line 157,col 64)",
            "(line 158,col 9)-(line 158,col 64)",
            "(line 159,col 9)-(line 159,col 64)",
            "(line 160,col 9)-(line 160,col 64)",
            "(line 161,col 9)-(line 161,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.DoubleRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/DoubleRangeTest.java",
        "signature": "org.apache.commons.lang.math.DoubleRangeTest.testToString()",
        "snippet": "    public void testToString() {\n        String str = tenToTwenty.toString();\n        assertEquals(\"Range[10.0,20.0]\", str);\n        assertSame(str, tenToTwenty.toString());\n        assertEquals(\"Range[-20.0,-10.0]\", createRange(new Integer(-20), new Integer(-10)).toString());\n    }",
        "begin_line": 164,
        "end_line": 169,
        "comment": "",
        "child_ranges": [
            "(line 165,col 9)-(line 165,col 44)",
            "(line 166,col 9)-(line 166,col 46)",
            "(line 167,col 9)-(line 167,col 48)",
            "(line 168,col 9)-(line 168,col 103)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.IntRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/IntRangeTest.java",
        "signature": "org.apache.commons.lang.math.IntRangeTest.IntRangeTest(java.lang.String)",
        "snippet": "    public IntRangeTest(String name) {\n        super(name);\n    }",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.IntRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/IntRangeTest.java",
        "signature": "org.apache.commons.lang.math.IntRangeTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(IntRangeTest.class);\n        suite.setName(\"IntRange Tests\");\n        return suite;\n    }",
        "begin_line": 40,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 60)",
            "(line 42,col 9)-(line 42,col 40)",
            "(line 43,col 9)-(line 43,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.IntRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/IntRangeTest.java",
        "signature": "org.apache.commons.lang.math.IntRangeTest.setUp()",
        "snippet": "    public void setUp() {\n        super.setUp();\n        tenToTwenty = new IntRange(ten, twenty);\n        otherRange = new NumberRange(ten, twenty);\n    }",
        "begin_line": 46,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 22)",
            "(line 48,col 9)-(line 48,col 48)",
            "(line 49,col 9)-(line 49,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.IntRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/IntRangeTest.java",
        "signature": "org.apache.commons.lang.math.IntRangeTest.createRange(java.lang.Integer, java.lang.Integer)",
        "snippet": "    protected Range createRange(Integer integer1, Integer integer2) {\n        return new IntRange(integer1, integer2);\n    }",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.IntRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/IntRangeTest.java",
        "signature": "org.apache.commons.lang.math.IntRangeTest.createRange(java.lang.Integer)",
        "snippet": "    protected Range createRange(Integer integer) {\n        return new NumberRange(integer);\n    }",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.IntRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/IntRangeTest.java",
        "signature": "org.apache.commons.lang.math.IntRangeTest.testConstructor1a()",
        "snippet": "    public void testConstructor1a() {\n        IntRange nr = new IntRange(5);\n        assertEquals(five, nr.getMinimumNumber());\n        assertEquals(five, nr.getMaximumNumber());\n    }",
        "begin_line": 61,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 38)",
            "(line 63,col 9)-(line 63,col 50)",
            "(line 64,col 9)-(line 64,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.IntRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/IntRangeTest.java",
        "signature": "org.apache.commons.lang.math.IntRangeTest.testConstructor1b()",
        "snippet": "    public void testConstructor1b() {\n        IntRange nr = new IntRange(five);\n        assertSame(five, nr.getMinimumNumber());\n        assertSame(five, nr.getMaximumNumber());\n        \n        Range r = new IntRange(nonComparableNumber);\n        \n        try {\n            new IntRange(null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 67,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 41)",
            "(line 69,col 9)-(line 69,col 48)",
            "(line 70,col 9)-(line 70,col 48)",
            "(line 72,col 9)-(line 72,col 52)",
            "(line 74,col 9)-(line 77,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.IntRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/IntRangeTest.java",
        "signature": "org.apache.commons.lang.math.IntRangeTest.testConstructor2a()",
        "snippet": "    public void testConstructor2a() {\n        IntRange nr = new IntRange(5, 10);\n        assertEquals(five, nr.getMinimumNumber());\n        assertEquals(ten, nr.getMaximumNumber());\n        \n        nr = new IntRange(5, 10);\n        assertEquals(five, nr.getMinimumNumber());\n        assertEquals(ten, nr.getMaximumNumber());\n    }",
        "begin_line": 80,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 42)",
            "(line 82,col 9)-(line 82,col 50)",
            "(line 83,col 9)-(line 83,col 49)",
            "(line 85,col 9)-(line 85,col 33)",
            "(line 86,col 9)-(line 86,col 50)",
            "(line 87,col 9)-(line 87,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.IntRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/IntRangeTest.java",
        "signature": "org.apache.commons.lang.math.IntRangeTest.testConstructor2b()",
        "snippet": "    public void testConstructor2b() {\n        IntRange nr = new IntRange(five, ten);\n        assertSame(five, nr.getMinimumNumber());\n        assertSame(ten, nr.getMaximumNumber());\n        \n        nr = new IntRange(ten, five);\n        assertSame(five, nr.getMinimumNumber());\n        assertSame(ten, nr.getMaximumNumber());\n        \n        nr = new IntRange(five, long10);\n        assertSame(five, nr.getMinimumNumber());\n        assertEquals(ten, nr.getMaximumNumber());\n        \n        // test non Integer, for full coverage\n        Long fiveL = new Long(5L);\n        Long tenL = new Long(10L);\n        nr = new IntRange(fiveL, tenL);\n        assertEquals(five, nr.getMinimumNumber());\n        assertEquals(ten, nr.getMaximumNumber());\n        nr = new IntRange(tenL, fiveL);\n        assertEquals(five, nr.getMinimumNumber());\n        assertEquals(ten, nr.getMaximumNumber());\n        \n        // not null\n        try {\n            new IntRange(five, null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            new IntRange(null, five);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            new IntRange(null, null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 90,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 46)",
            "(line 92,col 9)-(line 92,col 48)",
            "(line 93,col 9)-(line 93,col 47)",
            "(line 95,col 9)-(line 95,col 37)",
            "(line 96,col 9)-(line 96,col 48)",
            "(line 97,col 9)-(line 97,col 47)",
            "(line 99,col 9)-(line 99,col 40)",
            "(line 100,col 9)-(line 100,col 48)",
            "(line 101,col 9)-(line 101,col 49)",
            "(line 104,col 9)-(line 104,col 34)",
            "(line 105,col 9)-(line 105,col 34)",
            "(line 106,col 9)-(line 106,col 39)",
            "(line 107,col 9)-(line 107,col 50)",
            "(line 108,col 9)-(line 108,col 49)",
            "(line 109,col 9)-(line 109,col 39)",
            "(line 110,col 9)-(line 110,col 50)",
            "(line 111,col 9)-(line 111,col 49)",
            "(line 114,col 9)-(line 117,col 48)",
            "(line 118,col 9)-(line 121,col 48)",
            "(line 122,col 9)-(line 125,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.IntRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/IntRangeTest.java",
        "signature": "org.apache.commons.lang.math.IntRangeTest.testContainsNumber()",
        "snippet": "    public void testContainsNumber() {\n        assertEquals(false, tenToTwenty.containsNumber(null));\n        assertEquals(true, tenToTwenty.containsNumber(nonComparableNumber));\n        \n        assertEquals(false, tenToTwenty.containsNumber(five));\n        assertEquals(true, tenToTwenty.containsNumber(ten));\n        assertEquals(true, tenToTwenty.containsNumber(fifteen));\n        assertEquals(true, tenToTwenty.containsNumber(twenty));\n        assertEquals(false, tenToTwenty.containsNumber(twentyFive));\n        \n        assertEquals(false, tenToTwenty.containsNumber(long8));\n        assertEquals(true, tenToTwenty.containsNumber(long10));\n        assertEquals(true, tenToTwenty.containsNumber(long12));\n        assertEquals(true, tenToTwenty.containsNumber(long20));\n        assertEquals(false, tenToTwenty.containsNumber(long21));\n        \n        assertEquals(false, tenToTwenty.containsNumber(double8));\n        assertEquals(true, tenToTwenty.containsNumber(double10));\n        assertEquals(true, tenToTwenty.containsNumber(double12));\n        assertEquals(true, tenToTwenty.containsNumber(double20));\n        assertEquals(false, tenToTwenty.containsNumber(double21));\n        \n        assertEquals(false, tenToTwenty.containsNumber(float8));\n        assertEquals(true, tenToTwenty.containsNumber(float10));\n        assertEquals(true, tenToTwenty.containsNumber(float12));\n        assertEquals(true, tenToTwenty.containsNumber(float20));\n        assertEquals(false, tenToTwenty.containsNumber(float21));\n    }",
        "begin_line": 130,
        "end_line": 157,
        "comment": "",
        "child_ranges": [
            "(line 131,col 9)-(line 131,col 62)",
            "(line 132,col 9)-(line 132,col 76)",
            "(line 134,col 9)-(line 134,col 62)",
            "(line 135,col 9)-(line 135,col 60)",
            "(line 136,col 9)-(line 136,col 64)",
            "(line 137,col 9)-(line 137,col 63)",
            "(line 138,col 9)-(line 138,col 68)",
            "(line 140,col 9)-(line 140,col 63)",
            "(line 141,col 9)-(line 141,col 63)",
            "(line 142,col 9)-(line 142,col 63)",
            "(line 143,col 9)-(line 143,col 63)",
            "(line 144,col 9)-(line 144,col 64)",
            "(line 146,col 9)-(line 146,col 65)",
            "(line 147,col 9)-(line 147,col 65)",
            "(line 148,col 9)-(line 148,col 65)",
            "(line 149,col 9)-(line 149,col 65)",
            "(line 150,col 9)-(line 150,col 66)",
            "(line 152,col 9)-(line 152,col 64)",
            "(line 153,col 9)-(line 153,col 64)",
            "(line 154,col 9)-(line 154,col 64)",
            "(line 155,col 9)-(line 155,col 64)",
            "(line 156,col 9)-(line 156,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.IntRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/IntRangeTest.java",
        "signature": "org.apache.commons.lang.math.IntRangeTest.testContainsIntegerBig()",
        "snippet": "    public void testContainsIntegerBig() {\n        IntRange big = new IntRange(Integer.MAX_VALUE, Integer.MAX_VALUE- 2);\n        assertEquals(true, big.containsInteger(Integer.MAX_VALUE - 1));\n        assertEquals(false, big.containsInteger(Integer.MAX_VALUE - 3));\n    }",
        "begin_line": 159,
        "end_line": 163,
        "comment": "",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 77)",
            "(line 161,col 9)-(line 161,col 71)",
            "(line 162,col 9)-(line 162,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.IntRangeTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/IntRangeTest.java",
        "signature": "org.apache.commons.lang.math.IntRangeTest.testToArray()",
        "snippet": "    public void testToArray() {\n        int[] threeItems = new IntRange(3, 5).toArray();\n        assertTrue(Arrays.equals(new int[]{3, 4, 5}, threeItems));\n        int[] oneItem = new IntRange(4).toArray();\n        assertTrue(Arrays.equals(new int[]{4}, oneItem));\n    }",
        "begin_line": 165,
        "end_line": 170,
        "comment": "",
        "child_ranges": [
            "(line 166,col 9)-(line 166,col 56)",
            "(line 167,col 9)-(line 167,col 66)",
            "(line 168,col 9)-(line 168,col 50)",
            "(line 169,col 9)-(line 169,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.RandomUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/RandomUtilsTest.java",
        "signature": "org.apache.commons.lang.math.RandomUtilsTest.RandomUtilsTest(java.lang.String)",
        "snippet": "    public RandomUtilsTest(String name) {\n        super(name);\n    }",
        "begin_line": 34,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.RandomUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/RandomUtilsTest.java",
        "signature": "org.apache.commons.lang.math.RandomUtilsTest.setUp()",
        "snippet": "    public void setUp() {\n    }",
        "begin_line": 38,
        "end_line": 39,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.math.RandomUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/RandomUtilsTest.java",
        "signature": "org.apache.commons.lang.math.RandomUtilsTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(RandomUtilsTest.class);\n        suite.setName(\"RandomUtils Tests\");\n        return suite;\n    }",
        "begin_line": 41,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 63)",
            "(line 43,col 9)-(line 43,col 43)",
            "(line 44,col 9)-(line 44,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.RandomUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/RandomUtilsTest.java",
        "signature": "org.apache.commons.lang.math.RandomUtilsTest.testNextInt()",
        "snippet": "    public void testNextInt() {\n        tstNextInt(null);\n        \n        assertTrue (RandomUtils.nextInt() >= 0);\n    }",
        "begin_line": 48,
        "end_line": 52,
        "comment": " test distribution of nextInt() ",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 25)",
            "(line 51,col 9)-(line 51,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.RandomUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/RandomUtilsTest.java",
        "signature": "org.apache.commons.lang.math.RandomUtilsTest.testNextInt2()",
        "snippet": "    public void testNextInt2() {\n        Random rnd = new Random();\n        rnd.setSeed(System.currentTimeMillis());\n        tstNextInt(rnd);\n    } ",
        "begin_line": 55,
        "end_line": 59,
        "comment": " test distribution of nextInt(Random) ",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 34)",
            "(line 57,col 9)-(line 57,col 48)",
            "(line 58,col 9)-(line 58,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.RandomUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/RandomUtilsTest.java",
        "signature": "org.apache.commons.lang.math.RandomUtilsTest.testJvmRandomNextInt()",
        "snippet": "    public void testJvmRandomNextInt() {\n        tstNextInt(RandomUtils.JVM_RANDOM);\n    } ",
        "begin_line": 62,
        "end_line": 64,
        "comment": " test distribution of JVMRandom.nextInt() ",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.RandomUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/RandomUtilsTest.java",
        "signature": "org.apache.commons.lang.math.RandomUtilsTest.tstNextInt(java.util.Random)",
        "snippet": "    private void tstNextInt(Random rnd) {\n        int bound = 0;\n        int result = 0;\n        // test boundary condition: n = Integer.MAX_VALUE;\n        bound = Integer.MAX_VALUE;\n        if (rnd == null) {\n            result = RandomUtils.nextInt(bound);\n        } else {\n            result = RandomUtils.nextInt(rnd,bound);\n        }      \n        assertTrue(\"result less than bound\",result < bound);\n        assertTrue(\"result non-negative\",result >= 0);\n        \n        // test uniformity -- use Chi-Square test at .01 level\n        bound = 4;\n        int[] expected = new int[] {250,250,250,250};\n        int[] observed = new int[] {0,0,0,0};\n        for (int i = 0; i < 1000; i ++) {\n            if (rnd == null) {\n                result = RandomUtils.nextInt(bound);\n            } else {\n                result = RandomUtils.nextInt(rnd,bound);\n            }     \n            assertTrue(result < bound);\n            assertTrue(result >= 0);\n            observed[result]++;\n        } \n        /* Use ChiSquare dist with df = 4-1 = 3, alpha = .001\n         * Change to 11.34 for alpha = .01   \n         */\n        assertTrue(\n            \"chi-square test -- will fail about 1 in 1000 times\",\n            chiSquare(expected,observed) < 16.27);                                                            \n    }  ",
        "begin_line": 73,
        "end_line": 106,
        "comment": " \n     * Generate 1000 values for nextInt(bound) and compare\n     * the observed frequency counts to expected counts using\n     * a chi-square test.\n     * @param rnd Random to use if not null\n     ",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 22)",
            "(line 75,col 9)-(line 75,col 23)",
            "(line 77,col 9)-(line 77,col 34)",
            "(line 78,col 9)-(line 82,col 9)",
            "(line 83,col 9)-(line 83,col 60)",
            "(line 84,col 9)-(line 84,col 54)",
            "(line 87,col 9)-(line 87,col 18)",
            "(line 88,col 9)-(line 88,col 53)",
            "(line 89,col 9)-(line 89,col 45)",
            "(line 90,col 9)-(line 99,col 9)",
            "(line 103,col 9)-(line 105,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.RandomUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/RandomUtilsTest.java",
        "signature": "org.apache.commons.lang.math.RandomUtilsTest.testNextLong()",
        "snippet": "    public void testNextLong() {\n        tstNextLong(null);\n    }",
        "begin_line": 109,
        "end_line": 111,
        "comment": " test distribution of nextLong() ",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.RandomUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/RandomUtilsTest.java",
        "signature": "org.apache.commons.lang.math.RandomUtilsTest.testNextLong2()",
        "snippet": "    public void testNextLong2() {\n        Random rnd = new Random();\n        rnd.setSeed(System.currentTimeMillis());\n        tstNextLong(rnd);\n    }",
        "begin_line": 116,
        "end_line": 120,
        "comment": " test distribution of nextLong(Random) BROKEN\n     *  contract of nextLong(Random) is different from\n     * nextLong() ",
        "child_ranges": [
            "(line 117,col 9)-(line 117,col 34)",
            "(line 118,col 9)-(line 118,col 48)",
            "(line 119,col 9)-(line 119,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.RandomUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/RandomUtilsTest.java",
        "signature": "org.apache.commons.lang.math.RandomUtilsTest.tstNextLong(java.util.Random)",
        "snippet": "    private void tstNextLong(Random rnd) {\n        int[] expected = new int[] {500,500};\n        int[] observed = new int[] {0,0};\n        long result = 0;\n        long midPoint = Long.MAX_VALUE/2;\n        for (int i = 0; i < 1000; i ++) {\n            if (rnd == null) {\n                result = Math.abs(RandomUtils.nextLong());\n            } else {\n                result = Math.abs(RandomUtils.nextLong(rnd));\n            }  \n            if (result < midPoint) {\n                observed[0]++;\n            } else {\n                observed[1]++;\n            }\n        }\n        /* Use ChiSquare dist with df = 2-1 = 1, alpha = .001\n         * Change to 6.64 for alpha = .01  \n         */ \n        assertTrue(\n            \"chi-square test -- will fail about 1 in 1000 times\",\n            chiSquare(expected,observed) < 10.83); \n    }",
        "begin_line": 128,
        "end_line": 151,
        "comment": " \n     * Generate 1000 values for nextLong and check that\n     * p(value < long.MAXVALUE/2) ~ 0.5. Use chi-square test\n     * with df = 2-1 = 1  \n     * @param rnd Random to use if not null\n     ",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 45)",
            "(line 130,col 9)-(line 130,col 41)",
            "(line 131,col 9)-(line 131,col 24)",
            "(line 132,col 9)-(line 132,col 41)",
            "(line 133,col 9)-(line 144,col 9)",
            "(line 148,col 9)-(line 150,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.RandomUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/RandomUtilsTest.java",
        "signature": "org.apache.commons.lang.math.RandomUtilsTest.testNextBoolean()",
        "snippet": "    public void testNextBoolean() {\n        tstNextBoolean(null);\n    }",
        "begin_line": 155,
        "end_line": 157,
        "comment": " test distribution of nextBoolean() ",
        "child_ranges": [
            "(line 156,col 9)-(line 156,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.RandomUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/RandomUtilsTest.java",
        "signature": "org.apache.commons.lang.math.RandomUtilsTest.testNextBoolean2()",
        "snippet": "    public void testNextBoolean2() {\n        Random rnd = new Random();\n        rnd.setSeed(System.currentTimeMillis());\n        tstNextBoolean(rnd);\n    }",
        "begin_line": 160,
        "end_line": 164,
        "comment": " test distribution of nextBoolean(Random) ",
        "child_ranges": [
            "(line 161,col 9)-(line 161,col 34)",
            "(line 162,col 9)-(line 162,col 48)",
            "(line 163,col 9)-(line 163,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.RandomUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/RandomUtilsTest.java",
        "signature": "org.apache.commons.lang.math.RandomUtilsTest.tstNextBoolean(java.util.Random)",
        "snippet": "    private void tstNextBoolean(Random rnd) {\n        int[] expected = new int[] {500,500};\n        int[] observed = new int[] {0,0};\n        boolean result = false;\n        for (int i = 0; i < 1000; i ++) {\n            if (rnd == null) {\n                result = RandomUtils.nextBoolean();\n            } else {\n                result = RandomUtils.nextBoolean(rnd);\n            }     \n            if (result) {\n                observed[0]++;\n            } else {\n                observed[1]++;\n            }\n        }\n        /* Use ChiSquare dist with df = 2-1 = 1, alpha = .001\n         * Change to 6.64 for alpha = .01 \n         */\n        assertTrue(\n            \"chi-square test -- will fail about 1 in 1000 times\",\n            chiSquare(expected,observed) < 10.83 );  \n    }",
        "begin_line": 172,
        "end_line": 194,
        "comment": " \n     * Generate 1000 values for nextBoolean and check that\n     * p(value = false) ~ 0.5. Use chi-square test\n     * with df = 2-1 = 1  \n     * @param rnd Random to use if not null\n     ",
        "child_ranges": [
            "(line 173,col 9)-(line 173,col 45)",
            "(line 174,col 9)-(line 174,col 41)",
            "(line 175,col 9)-(line 175,col 31)",
            "(line 176,col 9)-(line 187,col 9)",
            "(line 191,col 9)-(line 193,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.RandomUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/RandomUtilsTest.java",
        "signature": "org.apache.commons.lang.math.RandomUtilsTest.testNextFloat()",
        "snippet": "    public void testNextFloat() {\n        tstNextFloat(null);\n    }",
        "begin_line": 197,
        "end_line": 199,
        "comment": " test distribution of nextFloat() ",
        "child_ranges": [
            "(line 198,col 9)-(line 198,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.RandomUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/RandomUtilsTest.java",
        "signature": "org.apache.commons.lang.math.RandomUtilsTest.testNextFloat2()",
        "snippet": "    public void testNextFloat2() {\n        Random rnd = new Random();\n        rnd.setSeed(System.currentTimeMillis());\n        tstNextFloat(rnd);\n    }",
        "begin_line": 202,
        "end_line": 206,
        "comment": " test distribution of nextFloat(Random) ",
        "child_ranges": [
            "(line 203,col 9)-(line 203,col 34)",
            "(line 204,col 9)-(line 204,col 48)",
            "(line 205,col 9)-(line 205,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.RandomUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/RandomUtilsTest.java",
        "signature": "org.apache.commons.lang.math.RandomUtilsTest.tstNextFloat(java.util.Random)",
        "snippet": "    private void tstNextFloat(Random rnd) {\n        int[] expected = new int[] {500,500};\n        int[] observed = new int[] {0,0};\n        float result = 0;\n        for (int i = 0; i < 1000; i ++) {\n            if (rnd == null) {\n                result = RandomUtils.nextFloat();\n            } else {\n                result = RandomUtils.nextFloat(rnd);\n            }     \n            if (result < 0.5) {\n                observed[0]++;\n            } else {\n                observed[1]++;\n            }\n        }\n        /* Use ChiSquare dist with df = 2-1 = 1, alpha = .001\n         * Change to 6.64 for alpha = .01 \n         */\n        assertTrue(\n            \"chi-square test -- will fail about 1 in 1000 times\",\n            chiSquare(expected,observed) < 10.83);  \n    }",
        "begin_line": 214,
        "end_line": 236,
        "comment": " \n     * Generate 1000 values for nextFloat and check that\n     * p(value < 0.5) ~ 0.5. Use chi-square test\n     * with df = 2-1 = 1  \n     * @param rnd Random to use if not null\n     ",
        "child_ranges": [
            "(line 215,col 9)-(line 215,col 45)",
            "(line 216,col 9)-(line 216,col 41)",
            "(line 217,col 9)-(line 217,col 25)",
            "(line 218,col 9)-(line 229,col 9)",
            "(line 233,col 9)-(line 235,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.RandomUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/RandomUtilsTest.java",
        "signature": "org.apache.commons.lang.math.RandomUtilsTest.testNextDouble()",
        "snippet": "    public void testNextDouble() {\n        tstNextDouble(null);\n    }",
        "begin_line": 239,
        "end_line": 241,
        "comment": " test distribution of nextDouble() ",
        "child_ranges": [
            "(line 240,col 9)-(line 240,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.RandomUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/RandomUtilsTest.java",
        "signature": "org.apache.commons.lang.math.RandomUtilsTest.testNextDouble2()",
        "snippet": "    public void testNextDouble2() {\n        Random rnd = new Random();\n        rnd.setSeed(System.currentTimeMillis());\n        tstNextDouble(rnd);\n    }",
        "begin_line": 244,
        "end_line": 248,
        "comment": " test distribution of nextDouble(Random) ",
        "child_ranges": [
            "(line 245,col 9)-(line 245,col 34)",
            "(line 246,col 9)-(line 246,col 48)",
            "(line 247,col 9)-(line 247,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.RandomUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/RandomUtilsTest.java",
        "signature": "org.apache.commons.lang.math.RandomUtilsTest.tstNextDouble(java.util.Random)",
        "snippet": "    private void tstNextDouble(Random rnd) {\n        int[] expected = new int[] {500,500};\n        int[] observed = new int[] {0,0};\n        double result = 0;\n        for (int i = 0; i < 1000; i ++) {\n            if (rnd == null) {\n                result = RandomUtils.nextDouble();\n            } else {\n                result = RandomUtils.nextDouble(rnd);\n            }     \n            if (result < 0.5) {\n                observed[0]++;\n            } else {\n                observed[1]++;\n            }\n        }\n        /* Use ChiSquare dist with df = 2-1 = 1, alpha = .001\n         * Change to 6.64 for alpha = .01 \n         */\n        assertTrue(\n            \"chi-square test -- will fail about 1 in 1000 times\",\n            chiSquare(expected,observed) < 10.83);  \n    }",
        "begin_line": 256,
        "end_line": 278,
        "comment": " \n     * Generate 1000 values for nextFloat and check that\n     * p(value < 0.5) ~ 0.5. Use chi-square test\n     * with df = 2-1 = 1  \n     * @param rnd Random to use if not null\n     ",
        "child_ranges": [
            "(line 257,col 9)-(line 257,col 45)",
            "(line 258,col 9)-(line 258,col 41)",
            "(line 259,col 9)-(line 259,col 26)",
            "(line 260,col 9)-(line 271,col 9)",
            "(line 275,col 9)-(line 277,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.RandomUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/RandomUtilsTest.java",
        "signature": "org.apache.commons.lang.math.RandomUtilsTest.testUnimplementedMethods()",
        "snippet": "    public void testUnimplementedMethods() {\n\n        try {\n            RandomUtils.JVM_RANDOM.setSeed(1000);\n            fail(\"expecting UnsupportedOperationException\");\n        } catch (UnsupportedOperationException ex) {\n            // empty\n        }\n\n        try {\n            RandomUtils.JVM_RANDOM.nextGaussian();\n            fail(\"expecting UnsupportedOperationException\");\n        } catch (UnsupportedOperationException ex) {\n            // empty\n        }\n\n        try {\n            RandomUtils.JVM_RANDOM.nextBytes(null);\n            fail(\"expecting UnsupportedOperationException\");\n        } catch (UnsupportedOperationException ex) {\n            // empty\n        }\n\n    }",
        "begin_line": 281,
        "end_line": 304,
        "comment": " make sure that unimplemented methods fail ",
        "child_ranges": [
            "(line 283,col 9)-(line 288,col 9)",
            "(line 290,col 9)-(line 295,col 9)",
            "(line 297,col 9)-(line 302,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.RandomUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/RandomUtilsTest.java",
        "signature": "org.apache.commons.lang.math.RandomUtilsTest.testIllegalArguments()",
        "snippet": "    public void testIllegalArguments() {\n\n        try {\n            RandomUtils.JVM_RANDOM.nextInt(-1);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // empty\n        }\n\n        try {\n            JVMRandom.nextLong( -1L );\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // empty\n        }\n\n    }",
        "begin_line": 307,
        "end_line": 323,
        "comment": " make sure that illegal arguments fail ",
        "child_ranges": [
            "(line 309,col 9)-(line 314,col 9)",
            "(line 316,col 9)-(line 321,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.RandomUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/RandomUtilsTest.java",
        "signature": "org.apache.commons.lang.math.RandomUtilsTest.chiSquare(int[], int[])",
        "snippet": "    private double chiSquare(int[] expected, int[] observed) {\n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i< observed.length; i++) {\n            dev = (double)(observed[i] - expected[i]);\n            sumSq += dev*dev/(double)expected[i];\n        }\n        return sumSq;\n    }           ",
        "begin_line": 330,
        "end_line": 338,
        "comment": "\n     * Computes Chi-Square statistic given observed and expected counts\n     * @param observed array of observed frequency counts\n     * @param expected array of expected frequency counts\n     ",
        "child_ranges": [
            "(line 331,col 9)-(line 331,col 28)",
            "(line 332,col 9)-(line 332,col 26)",
            "(line 333,col 9)-(line 336,col 9)",
            "(line 337,col 9)-(line 337,col 21)"
        ]
    }
]