[
    {
        "src_path": "src/java/org/apache/commons/lang/NotImplementedException.java",
        "class_name": "org.apache.commons.lang.NotImplementedException",
        "signature": "org.apache.commons.lang.NotImplementedException.NotImplementedException()",
        "snippet": "    public NotImplementedException() {\n        super(DEFAULT_MESSAGE);\n    }",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\n     * Constructs a new <code>NotImplementedException</code> with default message.\n     * \n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NotImplementedException.java",
        "class_name": "org.apache.commons.lang.NotImplementedException",
        "signature": "org.apache.commons.lang.NotImplementedException.NotImplementedException(java.lang.String)",
        "snippet": "    public NotImplementedException(String msg) {\n        super(msg == null ? DEFAULT_MESSAGE : msg);\n    }",
        "begin_line": 91,
        "end_line": 93,
        "comment": "\n     * Constructs a new <code>NotImplementedException</code> with specified\n     * detail message.\n     *\n     * @param msg  the error message.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NotImplementedException.java",
        "class_name": "org.apache.commons.lang.NotImplementedException",
        "signature": "org.apache.commons.lang.NotImplementedException.NotImplementedException(java.lang.Throwable)",
        "snippet": "    public NotImplementedException(Throwable cause) {\n        super(DEFAULT_MESSAGE);\n        this.cause = cause;\n    }",
        "begin_line": 102,
        "end_line": 105,
        "comment": "\n     * Constructs a new <code>NotImplementedException</code> with specified\n     * nested <code>Throwable</code> and default message.\n     *\n     * @param cause  the exception that caused this exception to be thrown\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NotImplementedException.java",
        "class_name": "org.apache.commons.lang.NotImplementedException",
        "signature": "org.apache.commons.lang.NotImplementedException.NotImplementedException(java.lang.String, java.lang.Throwable)",
        "snippet": "    public NotImplementedException(String msg, Throwable cause) {\n        super(msg == null ? DEFAULT_MESSAGE : msg);\n        this.cause = cause;\n    }",
        "begin_line": 115,
        "end_line": 118,
        "comment": "\n     * Constructs a new <code>NotImplementedException</code> with specified\n     * detail message and nested <code>Throwable</code>.\n     *\n     * @param msg  the error message\n     * @param cause  the exception that caused this exception to be thrown\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NotImplementedException.java",
        "class_name": "org.apache.commons.lang.NotImplementedException",
        "signature": "org.apache.commons.lang.NotImplementedException.NotImplementedException(java.lang.Class)",
        "snippet": "    public NotImplementedException(Class clazz) {\n        super(clazz == null ? DEFAULT_MESSAGE : DEFAULT_MESSAGE + \" in \" + clazz);\n    }",
        "begin_line": 126,
        "end_line": 128,
        "comment": "\n     * Constructs a new <code>NotImplementedException</code> referencing the specified class.\n     * \n     * @param clazz\n     *            the <code>Class</code> that has not implemented the method\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NotImplementedException.java",
        "class_name": "org.apache.commons.lang.NotImplementedException",
        "signature": "org.apache.commons.lang.NotImplementedException.getCause()",
        "snippet": "    public Throwable getCause() {\n        return cause;\n    }",
        "begin_line": 137,
        "end_line": 139,
        "comment": "\n     * Gets the root cause of this exception.\n     * @return the root cause of this exception.\n     * \n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NotImplementedException.java",
        "class_name": "org.apache.commons.lang.NotImplementedException",
        "signature": "org.apache.commons.lang.NotImplementedException.getMessage()",
        "snippet": "    public String getMessage() {\n        if (super.getMessage() != null) {\n            return super.getMessage();\n        } else if (cause != null) {\n            return cause.toString();\n        } else {\n            return null;\n        }\n    }",
        "begin_line": 147,
        "end_line": 155,
        "comment": "\n     * Gets the combined the error message of this and any nested errors.\n     *\n     * @return the error message\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NotImplementedException.java",
        "class_name": "org.apache.commons.lang.NotImplementedException",
        "signature": "org.apache.commons.lang.NotImplementedException.getMessage(int)",
        "snippet": "    public String getMessage(int index) {\n        if (index == 0) {\n            return super.getMessage();\n        }\n        return delegate.getMessage(index);\n    }",
        "begin_line": 168,
        "end_line": 173,
        "comment": "\n     * Returns the error message of the <code>Throwable</code> in the chain\n     * of <code>Throwable</code>s at the specified index, numbered from 0.\n     *\n     * @param index  the index of the <code>Throwable</code> in the chain\n     * @return the error message, or null if the <code>Throwable</code> at the\n     *  specified index in the chain does not contain a message\n     * @throws IndexOutOfBoundsException if the <code>index</code> argument is\n     *  negative or not less than the count of <code>Throwable</code>s in the chain\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NotImplementedException.java",
        "class_name": "org.apache.commons.lang.NotImplementedException",
        "signature": "org.apache.commons.lang.NotImplementedException.getMessages()",
        "snippet": "    public String[] getMessages() {\n        return delegate.getMessages();\n    }",
        "begin_line": 183,
        "end_line": 185,
        "comment": "\n     * Returns the error message of this and any nested <code>Throwable</code> objects.\n     * Each throwable returns a message, a null string is included in the array if\n     * there is no message for a particular <code>Throwable</code>.\n     *\n     * @return the error messages\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NotImplementedException.java",
        "class_name": "org.apache.commons.lang.NotImplementedException",
        "signature": "org.apache.commons.lang.NotImplementedException.getThrowable(int)",
        "snippet": "    public Throwable getThrowable(int index) {\n        return delegate.getThrowable(index);\n    }",
        "begin_line": 196,
        "end_line": 198,
        "comment": "\n     * Returns the <code>Throwable</code> in the chain by index.\n     *\n     * @param index  the index to retrieve\n     * @return the <code>Throwable</code>\n     * @throws IndexOutOfBoundsException if the <code>index</code> argument is\n     *  negative or not less than the count of <code>Throwable</code>s in the chain\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NotImplementedException.java",
        "class_name": "org.apache.commons.lang.NotImplementedException",
        "signature": "org.apache.commons.lang.NotImplementedException.getThrowableCount()",
        "snippet": "    public int getThrowableCount() {\n        return delegate.getThrowableCount();\n    }",
        "begin_line": 207,
        "end_line": 209,
        "comment": "\n     * Returns the number of nested <code>Throwable</code>s represented by\n     * this <code>Nestable</code>, including this <code>Nestable</code>.\n     *\n     * @return the throwable count\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NotImplementedException.java",
        "class_name": "org.apache.commons.lang.NotImplementedException",
        "signature": "org.apache.commons.lang.NotImplementedException.getThrowables()",
        "snippet": "    public Throwable[] getThrowables() {\n        return delegate.getThrowables();\n    }",
        "begin_line": 219,
        "end_line": 221,
        "comment": "\n     * Returns this <code>Nestable</code> and any nested <code>Throwable</code>s\n     * in an array of <code>Throwable</code>s, one element for each\n     * <code>Throwable</code>.\n     *\n     * @return the <code>Throwable</code>s\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NotImplementedException.java",
        "class_name": "org.apache.commons.lang.NotImplementedException",
        "signature": "org.apache.commons.lang.NotImplementedException.indexOfThrowable(java.lang.Class)",
        "snippet": "    public int indexOfThrowable(Class type) {\n        return delegate.indexOfThrowable(type, 0);\n    }",
        "begin_line": 232,
        "end_line": 234,
        "comment": "\n     * Returns the index of the first occurrence of the specified type.\n     * If there is no match, <code>-1</code> is returned.\n     *\n     * @param type  the type to search for\n     * @return index of the first occurrence of the type in the chain, or -1 if\n     *  the type is not found\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NotImplementedException.java",
        "class_name": "org.apache.commons.lang.NotImplementedException",
        "signature": "org.apache.commons.lang.NotImplementedException.indexOfThrowable(java.lang.Class, int)",
        "snippet": "    public int indexOfThrowable(Class type, int fromIndex) {\n        return delegate.indexOfThrowable(type, fromIndex);\n    }",
        "begin_line": 248,
        "end_line": 250,
        "comment": "\n     * Returns the index of the first occurrence of the specified type starting\n     * from the specified index. If there is no match, <code>-1</code> is returned.\n     *\n     * @param type  the type to search for\n     * @param fromIndex  the index of the starting position in the chain to be searched\n     * @return index of the first occurrence of the type in the chain, or -1 if\n     *  the type is not found\n     * @throws IndexOutOfBoundsException if the <code>fromIndex</code> argument\n     *  is negative or not less than the count of <code>Throwable</code>s in the chain\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NotImplementedException.java",
        "class_name": "org.apache.commons.lang.NotImplementedException",
        "signature": "org.apache.commons.lang.NotImplementedException.printStackTrace()",
        "snippet": "    public void printStackTrace() {\n        delegate.printStackTrace();\n    }",
        "begin_line": 258,
        "end_line": 260,
        "comment": "\n     * Prints the stack trace of this exception.\n     * Includes information from the exception, if any, which caused this exception.\n     * \n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NotImplementedException.java",
        "class_name": "org.apache.commons.lang.NotImplementedException",
        "signature": "org.apache.commons.lang.NotImplementedException.printStackTrace(java.io.PrintStream)",
        "snippet": "    public void printStackTrace(PrintStream out) {\n        delegate.printStackTrace(out);\n    }",
        "begin_line": 269,
        "end_line": 271,
        "comment": "\n     * Prints the stack trace of this exception to the specified stream.\n     * Includes information from the exception, if any, which caused this exception.\n     *\n     * @param out  the stream to write to\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NotImplementedException.java",
        "class_name": "org.apache.commons.lang.NotImplementedException",
        "signature": "org.apache.commons.lang.NotImplementedException.printStackTrace(java.io.PrintWriter)",
        "snippet": "    public void printStackTrace(PrintWriter out) {\n        delegate.printStackTrace(out);\n    }",
        "begin_line": 280,
        "end_line": 282,
        "comment": "\n     * Prints the stack trace of this exception to the specified writer.\n     * Includes information from the exception, if any, which caused this exception.\n     *\n     * @param out  the writer to write to\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NotImplementedException.java",
        "class_name": "org.apache.commons.lang.NotImplementedException",
        "signature": "org.apache.commons.lang.NotImplementedException.printPartialStackTrace(java.io.PrintWriter)",
        "snippet": "    public final void printPartialStackTrace(PrintWriter out) {\n        super.printStackTrace(out);\n    }",
        "begin_line": 291,
        "end_line": 293,
        "comment": "\n     * Prints the stack trace for this exception only (root cause not included)\n     * using the specified writer.\n     * \n     * @param out  the writer to write to\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.ArrayUtils()",
        "snippet": "    public ArrayUtils() {\n      super();\n    }",
        "begin_line": 143,
        "end_line": 145,
        "comment": "\n     * <p>ArrayUtils instances should NOT be constructed in standard programming.\n     * Instead, the class should be used as <code>ArrayUtils.clone(new int[] {2})</code>.</p>\n     *\n     * <p>This constructor is public to permit tools that require a JavaBean instance\n     * to operate.</p>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.toString(java.lang.Object)",
        "snippet": "    public static String toString(Object array) {\n        return toString(array, \"{}\");\n    }",
        "begin_line": 160,
        "end_line": 162,
        "comment": "\n     * <p>Outputs an array as a String, treating <code>null</code> as an empty array.</p>\n     *\n     * <p>Multi-dimensional arrays are handled correctly, including\n     * multi-dimensional primitive arrays.</p>\n     *\n     * <p>The format is that of Java source code, for example <code>{a,b}</code>.</p>\n     * \n     * @param array  the array to get a toString for, may be <code>null</code>\n     * @return a String representation of the array, '{}' if null array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.toString(java.lang.Object, java.lang.String)",
        "snippet": "    public static String toString(Object array, String stringIfNull) {\n        if (array == null) {\n            return stringIfNull;\n        }\n        return new ToStringBuilder(array, ToStringStyle.SIMPLE_STYLE).append(array).toString();\n    }",
        "begin_line": 176,
        "end_line": 181,
        "comment": "\n     * <p>Outputs an array as a String handling <code>null</code>s.</p>\n     *\n     * <p>Multi-dimensional arrays are handled correctly, including\n     * multi-dimensional primitive arrays.</p>\n     *\n     * <p>The format is that of Java source code, for example <code>{a,b}</code>.</p>\n     * \n     * @param array  the array to get a toString for, may be <code>null</code>\n     * @param stringIfNull  the String to return if the array is <code>null</code>\n     * @return a String representation of the array\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.hashCode(java.lang.Object)",
        "snippet": "    public static int hashCode(Object array) {\n        return new HashCodeBuilder().append(array).toHashCode();\n    }",
        "begin_line": 191,
        "end_line": 193,
        "comment": "\n     * <p>Get a hashCode for an array handling multi-dimensional arrays correctly.</p>\n     * \n     * <p>Multi-dimensional primitive arrays are also handled correctly by this method.</p>\n     * \n     * @param array  the array to get a hashCode for, may be <code>null</code>\n     * @return a hashCode for the array, zero if null array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.isEquals(java.lang.Object, java.lang.Object)",
        "snippet": "    public static boolean isEquals(Object array1, Object array2) {\n        return new EqualsBuilder().append(array1, array2).isEquals();\n    }",
        "begin_line": 205,
        "end_line": 207,
        "comment": "\n     * <p>Compares two arrays, using equals(), handling multi-dimensional arrays\n     * correctly.</p>\n     * \n     * <p>Multi-dimensional primitive arrays are also handled correctly by this method.</p>\n     * \n     * @param array1  the left hand array to compare, may be <code>null</code>\n     * @param array2  the right hand array to compare, may be <code>null</code>\n     * @return <code>true</code> if the arrays are equal\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.toMap(java.lang.Object[])",
        "snippet": "    public static Map toMap(Object[] array) {\n        if (array == null) {\n            return null;\n        }\n        final Map map = new HashMap((int) (array.length * 1.5));\n        for (int i = 0; i < array.length; i++) {\n            Object object = array[i];\n            if (object instanceof Map.Entry) {\n                Map.Entry entry = (Map.Entry) object;\n                map.put(entry.getKey(), entry.getValue());\n            } else if (object instanceof Object[]) {\n                Object[] entry = (Object[]) object;\n                if (entry.length < 2) {\n                    throw new IllegalArgumentException(\"Array element \" + i + \", '\"\n                        + object\n                        + \"', has a length less than 2\");\n                }\n                map.put(entry[0], entry[1]);\n            } else {\n                throw new IllegalArgumentException(\"Array element \" + i + \", '\"\n                        + object\n                        + \"', is neither of type Map.Entry nor an Array\");\n            }\n        }\n        return map;\n    }",
        "begin_line": 236,
        "end_line": 261,
        "comment": "\n     * <p>Converts the given array into a {@link java.util.Map}. Each element of the array\n     * must be either a {@link java.util.Map.Entry} or an Array, containing at least two\n     * elements, where the first element is used as key and the second as\n     * value.</p>\n     *\n     * <p>This method can be used to initialize:</p>\n     * <pre>\n     * // Create a Map mapping colors.\n     * Map colorMap = MapUtils.toMap(new String[][] {{\n     *     {\"RED\", \"#FF0000\"},\n     *     {\"GREEN\", \"#00FF00\"},\n     *     {\"BLUE\", \"#0000FF\"}});\n     * </pre>\n     * \n     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n     *\n     * @param array  an array whose elements are either a {@link java.util.Map.Entry} or\n     *  an Array containing at least two elements, may be <code>null</code>\n     * @return a <code>Map</code> that was created from the array\n     * @throws IllegalArgumentException  if one element of this Array is\n     *  itself an Array containing less then two elements\n     * @throws IllegalArgumentException  if the array contains elements other\n     *  than {@link java.util.Map.Entry} and an Array\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.clone(java.lang.Object[])",
        "snippet": "    public static Object[] clone(Object[] array) {\n        if (array == null) {\n            return null;\n        }\n        return (Object[]) array.clone();\n    }",
        "begin_line": 277,
        "end_line": 282,
        "comment": "\n     * <p>Shallow clones an array returning a typecast result and handling\n     * <code>null</code>.</p>\n     *\n     * <p>The objects in the array are not cloned, thus there is no special\n     * handling for multi-dimensional arrays.</p>\n     * \n     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n     * \n     * @param array  the array to shallow clone, may be <code>null</code>\n     * @return the cloned array, <code>null</code> if <code>null</code> input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.clone(long[])",
        "snippet": "    public static long[] clone(long[] array) {\n        if (array == null) {\n            return null;\n        }\n        return (long[]) array.clone();\n    }",
        "begin_line": 293,
        "end_line": 298,
        "comment": "\n     * <p>Clones an array returning a typecast result and handling\n     * <code>null</code>.</p>\n     *\n     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n     * \n     * @param array  the array to clone, may be <code>null</code>\n     * @return the cloned array, <code>null</code> if <code>null</code> input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.clone(int[])",
        "snippet": "    public static int[] clone(int[] array) {\n        if (array == null) {\n            return null;\n        }\n        return (int[]) array.clone();\n    }",
        "begin_line": 309,
        "end_line": 314,
        "comment": "\n     * <p>Clones an array returning a typecast result and handling\n     * <code>null</code>.</p>\n     *\n     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n     * \n     * @param array  the array to clone, may be <code>null</code>\n     * @return the cloned array, <code>null</code> if <code>null</code> input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.clone(short[])",
        "snippet": "    public static short[] clone(short[] array) {\n        if (array == null) {\n            return null;\n        }\n        return (short[]) array.clone();\n    }",
        "begin_line": 325,
        "end_line": 330,
        "comment": "\n     * <p>Clones an array returning a typecast result and handling\n     * <code>null</code>.</p>\n     *\n     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n     * \n     * @param array  the array to clone, may be <code>null</code>\n     * @return the cloned array, <code>null</code> if <code>null</code> input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.clone(char[])",
        "snippet": "    public static char[] clone(char[] array) {\n        if (array == null) {\n            return null;\n        }\n        return (char[]) array.clone();\n    }",
        "begin_line": 341,
        "end_line": 346,
        "comment": "\n     * <p>Clones an array returning a typecast result and handling\n     * <code>null</code>.</p>\n     *\n     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n     * \n     * @param array  the array to clone, may be <code>null</code>\n     * @return the cloned array, <code>null</code> if <code>null</code> input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.clone(byte[])",
        "snippet": "    public static byte[] clone(byte[] array) {\n        if (array == null) {\n            return null;\n        }\n        return (byte[]) array.clone();\n    }",
        "begin_line": 357,
        "end_line": 362,
        "comment": "\n     * <p>Clones an array returning a typecast result and handling\n     * <code>null</code>.</p>\n     *\n     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n     * \n     * @param array  the array to clone, may be <code>null</code>\n     * @return the cloned array, <code>null</code> if <code>null</code> input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.clone(double[])",
        "snippet": "    public static double[] clone(double[] array) {\n        if (array == null) {\n            return null;\n        }\n        return (double[]) array.clone();\n    }",
        "begin_line": 373,
        "end_line": 378,
        "comment": "\n     * <p>Clones an array returning a typecast result and handling\n     * <code>null</code>.</p>\n     *\n     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n     * \n     * @param array  the array to clone, may be <code>null</code>\n     * @return the cloned array, <code>null</code> if <code>null</code> input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.clone(float[])",
        "snippet": "    public static float[] clone(float[] array) {\n        if (array == null) {\n            return null;\n        }\n        return (float[]) array.clone();\n    }",
        "begin_line": 389,
        "end_line": 394,
        "comment": "\n     * <p>Clones an array returning a typecast result and handling\n     * <code>null</code>.</p>\n     *\n     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n     * \n     * @param array  the array to clone, may be <code>null</code>\n     * @return the cloned array, <code>null</code> if <code>null</code> input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.clone(boolean[])",
        "snippet": "    public static boolean[] clone(boolean[] array) {\n        if (array == null) {\n            return null;\n        }\n        return (boolean[]) array.clone();\n    }",
        "begin_line": 405,
        "end_line": 410,
        "comment": "\n     * <p>Clones an array returning a typecast result and handling\n     * <code>null</code>.</p>\n     *\n     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n     * \n     * @param array  the array to clone, may be <code>null</code>\n     * @return the cloned array, <code>null</code> if <code>null</code> input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.subarray(java.lang.Object[], int, int)",
        "snippet": "    public static Object[] subarray(Object[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array == null) {\n            return null;\n        }\n        if (startIndexInclusive < 0) {\n            startIndexInclusive = 0;\n        }\n        if (endIndexExclusive > array.length) {\n            endIndexExclusive = array.length;\n        }\n        int newSize = endIndexExclusive - startIndexInclusive;\n        Class type = array.getClass().getComponentType();\n        if (newSize <= 0) {\n            return (Object[]) Array.newInstance(type, 0);\n        }\n        Object[] subarray = (Object[]) Array.newInstance(type, newSize);\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
        "begin_line": 441,
        "end_line": 459,
        "comment": "\n     * <p>Produces a new array containing the elements between\n     * the start and end indices.</p>\n     *\n     * <p>The start index is inclusive, the end index exclusive.\n     * Null array input produces null output.</p>\n     *\n     * <p>The component type of the subarray is always the same as\n     * that of the input array. Thus, if the input is an array of type\n     * <code>Date</code>, the following usage is envisaged:</p>\n     *\n     * <pre>\n     * Date[] someDates = (Date[])ArrayUtils.subarray(allDates, 2, 5);\n     * </pre>\n     *\n     * @param array  the array\n     * @param startIndexInclusive  the starting index. Undervalue (&lt;0)\n     *      is promoted to 0, overvalue (&gt;array.length) results\n     *      in an empty array.\n     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n     *      returned subarray. Undervalue (&lt; startIndex) produces\n     *      empty array, overvalue (&gt;array.length) is demoted to\n     *      array length.\n     * @return a new array containing the elements between\n     *      the start and end indices.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.subarray(long[], int, int)",
        "snippet": "    public static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array == null) {\n            return null;\n        }\n        if (startIndexInclusive < 0) {\n            startIndexInclusive = 0;\n        }\n        if (endIndexExclusive > array.length) {\n            endIndexExclusive = array.length;\n        }\n        int newSize = endIndexExclusive - startIndexInclusive;\n        if (newSize <= 0) {\n            return EMPTY_LONG_ARRAY;\n        }\n\n        long[] subarray = new long[newSize];\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
        "begin_line": 480,
        "end_line": 498,
        "comment": "\n     * <p>Produces a new <code>long</code> array containing the elements\n     * between the start and end indices.</p>\n     *\n     * <p>The start index is inclusive, the end index exclusive.\n     * Null array input produces null output.</p>\n     *\n     * @param array  the array\n     * @param startIndexInclusive  the starting index. Undervalue (&lt;0)\n     *      is promoted to 0, overvalue (&gt;array.length) results\n     *      in an empty array.\n     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n     *      returned subarray. Undervalue (&lt; startIndex) produces\n     *      empty array, overvalue (&gt;array.length) is demoted to\n     *      array length.\n     * @return a new array containing the elements between\n     *      the start and end indices.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.subarray(int[], int, int)",
        "snippet": "    public static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array == null) {\n            return null;\n        }\n        if (startIndexInclusive < 0) {\n            startIndexInclusive = 0;\n        }\n        if (endIndexExclusive > array.length) {\n            endIndexExclusive = array.length;\n        }\n        int newSize = endIndexExclusive - startIndexInclusive;\n        if (newSize <= 0) {\n            return EMPTY_INT_ARRAY;\n        }\n\n        int[] subarray = new int[newSize];\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
        "begin_line": 519,
        "end_line": 537,
        "comment": "\n     * <p>Produces a new <code>int</code> array containing the elements\n     * between the start and end indices.</p>\n     *\n     * <p>The start index is inclusive, the end index exclusive.\n     * Null array input produces null output.</p>\n     *\n     * @param array  the array\n     * @param startIndexInclusive  the starting index. Undervalue (&lt;0)\n     *      is promoted to 0, overvalue (&gt;array.length) results\n     *      in an empty array.\n     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n     *      returned subarray. Undervalue (&lt; startIndex) produces\n     *      empty array, overvalue (&gt;array.length) is demoted to\n     *      array length.\n     * @return a new array containing the elements between\n     *      the start and end indices.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.subarray(short[], int, int)",
        "snippet": "    public static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array == null) {\n            return null;\n        }\n        if (startIndexInclusive < 0) {\n            startIndexInclusive = 0;\n        }\n        if (endIndexExclusive > array.length) {\n            endIndexExclusive = array.length;\n        }\n        int newSize = endIndexExclusive - startIndexInclusive;\n        if (newSize <= 0) {\n            return EMPTY_SHORT_ARRAY;\n        }\n\n        short[] subarray = new short[newSize];\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
        "begin_line": 558,
        "end_line": 576,
        "comment": "\n     * <p>Produces a new <code>short</code> array containing the elements\n     * between the start and end indices.</p>\n     *\n     * <p>The start index is inclusive, the end index exclusive.\n     * Null array input produces null output.</p>\n     *\n     * @param array  the array\n     * @param startIndexInclusive  the starting index. Undervalue (&lt;0)\n     *      is promoted to 0, overvalue (&gt;array.length) results\n     *      in an empty array.\n     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n     *      returned subarray. Undervalue (&lt; startIndex) produces\n     *      empty array, overvalue (&gt;array.length) is demoted to\n     *      array length.\n     * @return a new array containing the elements between\n     *      the start and end indices.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.subarray(char[], int, int)",
        "snippet": "    public static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array == null) {\n            return null;\n        }\n        if (startIndexInclusive < 0) {\n            startIndexInclusive = 0;\n        }\n        if (endIndexExclusive > array.length) {\n            endIndexExclusive = array.length;\n        }\n        int newSize = endIndexExclusive - startIndexInclusive;\n        if (newSize <= 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n\n        char[] subarray = new char[newSize];\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
        "begin_line": 597,
        "end_line": 615,
        "comment": "\n     * <p>Produces a new <code>char</code> array containing the elements\n     * between the start and end indices.</p>\n     *\n     * <p>The start index is inclusive, the end index exclusive.\n     * Null array input produces null output.</p>\n     *\n     * @param array  the array\n     * @param startIndexInclusive  the starting index. Undervalue (&lt;0)\n     *      is promoted to 0, overvalue (&gt;array.length) results\n     *      in an empty array.\n     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n     *      returned subarray. Undervalue (&lt; startIndex) produces\n     *      empty array, overvalue (&gt;array.length) is demoted to\n     *      array length.\n     * @return a new array containing the elements between\n     *      the start and end indices.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.subarray(byte[], int, int)",
        "snippet": "    public static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array == null) {\n            return null;\n        }\n        if (startIndexInclusive < 0) {\n            startIndexInclusive = 0;\n        }\n        if (endIndexExclusive > array.length) {\n            endIndexExclusive = array.length;\n        }\n        int newSize = endIndexExclusive - startIndexInclusive;\n        if (newSize <= 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n\n        byte[] subarray = new byte[newSize];\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
        "begin_line": 636,
        "end_line": 654,
        "comment": "\n     * <p>Produces a new <code>byte</code> array containing the elements\n     * between the start and end indices.</p>\n     *\n     * <p>The start index is inclusive, the end index exclusive.\n     * Null array input produces null output.</p>\n     *\n     * @param array  the array\n     * @param startIndexInclusive  the starting index. Undervalue (&lt;0)\n     *      is promoted to 0, overvalue (&gt;array.length) results\n     *      in an empty array.\n     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n     *      returned subarray. Undervalue (&lt; startIndex) produces\n     *      empty array, overvalue (&gt;array.length) is demoted to\n     *      array length.\n     * @return a new array containing the elements between\n     *      the start and end indices.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.subarray(double[], int, int)",
        "snippet": "    public static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array == null) {\n            return null;\n        }\n        if (startIndexInclusive < 0) {\n            startIndexInclusive = 0;\n        }\n        if (endIndexExclusive > array.length) {\n            endIndexExclusive = array.length;\n        }\n        int newSize = endIndexExclusive - startIndexInclusive;\n        if (newSize <= 0) {\n            return EMPTY_DOUBLE_ARRAY;\n        }\n\n        double[] subarray = new double[newSize];\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
        "begin_line": 675,
        "end_line": 693,
        "comment": "\n     * <p>Produces a new <code>double</code> array containing the elements\n     * between the start and end indices.</p>\n     *\n     * <p>The start index is inclusive, the end index exclusive.\n     * Null array input produces null output.</p>\n     *\n     * @param array  the array\n     * @param startIndexInclusive  the starting index. Undervalue (&lt;0)\n     *      is promoted to 0, overvalue (&gt;array.length) results\n     *      in an empty array.\n     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n     *      returned subarray. Undervalue (&lt; startIndex) produces\n     *      empty array, overvalue (&gt;array.length) is demoted to\n     *      array length.\n     * @return a new array containing the elements between\n     *      the start and end indices.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.subarray(float[], int, int)",
        "snippet": "    public static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array == null) {\n            return null;\n        }\n        if (startIndexInclusive < 0) {\n            startIndexInclusive = 0;\n        }\n        if (endIndexExclusive > array.length) {\n            endIndexExclusive = array.length;\n        }\n        int newSize = endIndexExclusive - startIndexInclusive;\n        if (newSize <= 0) {\n            return EMPTY_FLOAT_ARRAY;\n        }\n\n        float[] subarray = new float[newSize];\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
        "begin_line": 714,
        "end_line": 732,
        "comment": "\n     * <p>Produces a new <code>float</code> array containing the elements\n     * between the start and end indices.</p>\n     *\n     * <p>The start index is inclusive, the end index exclusive.\n     * Null array input produces null output.</p>\n     *\n     * @param array  the array\n     * @param startIndexInclusive  the starting index. Undervalue (&lt;0)\n     *      is promoted to 0, overvalue (&gt;array.length) results\n     *      in an empty array.\n     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n     *      returned subarray. Undervalue (&lt; startIndex) produces\n     *      empty array, overvalue (&gt;array.length) is demoted to\n     *      array length.\n     * @return a new array containing the elements between\n     *      the start and end indices.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.subarray(boolean[], int, int)",
        "snippet": "    public static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array == null) {\n            return null;\n        }\n        if (startIndexInclusive < 0) {\n            startIndexInclusive = 0;\n        }\n        if (endIndexExclusive > array.length) {\n            endIndexExclusive = array.length;\n        }\n        int newSize = endIndexExclusive - startIndexInclusive;\n        if (newSize <= 0) {\n            return EMPTY_BOOLEAN_ARRAY;\n        }\n\n        boolean[] subarray = new boolean[newSize];\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }",
        "begin_line": 753,
        "end_line": 771,
        "comment": "\n     * <p>Produces a new <code>boolean</code> array containing the elements\n     * between the start and end indices.</p>\n     *\n     * <p>The start index is inclusive, the end index exclusive.\n     * Null array input produces null output.</p>\n     *\n     * @param array  the array\n     * @param startIndexInclusive  the starting index. Undervalue (&lt;0)\n     *      is promoted to 0, overvalue (&gt;array.length) results\n     *      in an empty array.\n     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n     *      returned subarray. Undervalue (&lt; startIndex) produces\n     *      empty array, overvalue (&gt;array.length) is demoted to\n     *      array length.\n     * @return a new array containing the elements between\n     *      the start and end indices.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.isSameLength(java.lang.Object[], java.lang.Object[])",
        "snippet": "    public static boolean isSameLength(Object[] array1, Object[] array2) {\n        if ((array1 == null && array2 != null && array2.length > 0) ||\n            (array2 == null && array1 != null && array1.length > 0) ||\n            (array1 != null && array2 != null && array1.length != array2.length)) {\n                return false;\n        }\n        return true;\n    }",
        "begin_line": 786,
        "end_line": 793,
        "comment": "\n     * <p>Checks whether two arrays are the same length, treating\n     * <code>null</code> arrays as length <code>0</code>.\n     *\n     * <p>Any multi-dimensional aspects of the arrays are ignored.</p>\n     * \n     * @param array1 the first array, may be <code>null</code>\n     * @param array2 the second array, may be <code>null</code>\n     * @return <code>true</code> if length of arrays matches, treating\n     *  <code>null</code> as an empty array\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.isSameLength(long[], long[])",
        "snippet": "    public static boolean isSameLength(long[] array1, long[] array2) {\n        if ((array1 == null && array2 != null && array2.length > 0) ||\n            (array2 == null && array1 != null && array1.length > 0) ||\n            (array1 != null && array2 != null && array1.length != array2.length)) {\n                return false;\n        }\n        return true;\n    }",
        "begin_line": 804,
        "end_line": 811,
        "comment": "\n     * <p>Checks whether two arrays are the same length, treating\n     * <code>null</code> arrays as length <code>0</code>.</p>\n     * \n     * @param array1 the first array, may be <code>null</code>\n     * @param array2 the second array, may be <code>null</code>\n     * @return <code>true</code> if length of arrays matches, treating\n     *  <code>null</code> as an empty array\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.isSameLength(int[], int[])",
        "snippet": "    public static boolean isSameLength(int[] array1, int[] array2) {\n        if ((array1 == null && array2 != null && array2.length > 0) ||\n            (array2 == null && array1 != null && array1.length > 0) ||\n            (array1 != null && array2 != null && array1.length != array2.length)) {\n                return false;\n        }\n        return true;\n    }",
        "begin_line": 822,
        "end_line": 829,
        "comment": "\n     * <p>Checks whether two arrays are the same length, treating\n     * <code>null</code> arrays as length <code>0</code>.</p>\n     * \n     * @param array1 the first array, may be <code>null</code>\n     * @param array2 the second array, may be <code>null</code>\n     * @return <code>true</code> if length of arrays matches, treating\n     *  <code>null</code> as an empty array\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.isSameLength(short[], short[])",
        "snippet": "    public static boolean isSameLength(short[] array1, short[] array2) {\n        if ((array1 == null && array2 != null && array2.length > 0) ||\n            (array2 == null && array1 != null && array1.length > 0) ||\n            (array1 != null && array2 != null && array1.length != array2.length)) {\n                return false;\n        }\n        return true;\n    }",
        "begin_line": 840,
        "end_line": 847,
        "comment": "\n     * <p>Checks whether two arrays are the same length, treating\n     * <code>null</code> arrays as length <code>0</code>.</p>\n     * \n     * @param array1 the first array, may be <code>null</code>\n     * @param array2 the second array, may be <code>null</code>\n     * @return <code>true</code> if length of arrays matches, treating\n     *  <code>null</code> as an empty array\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.isSameLength(char[], char[])",
        "snippet": "    public static boolean isSameLength(char[] array1, char[] array2) {\n        if ((array1 == null && array2 != null && array2.length > 0) ||\n            (array2 == null && array1 != null && array1.length > 0) ||\n            (array1 != null && array2 != null && array1.length != array2.length)) {\n                return false;\n        }\n        return true;\n    }",
        "begin_line": 858,
        "end_line": 865,
        "comment": "\n     * <p>Checks whether two arrays are the same length, treating\n     * <code>null</code> arrays as length <code>0</code>.</p>\n     * \n     * @param array1 the first array, may be <code>null</code>\n     * @param array2 the second array, may be <code>null</code>\n     * @return <code>true</code> if length of arrays matches, treating\n     *  <code>null</code> as an empty array\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.isSameLength(byte[], byte[])",
        "snippet": "    public static boolean isSameLength(byte[] array1, byte[] array2) {\n        if ((array1 == null && array2 != null && array2.length > 0) ||\n            (array2 == null && array1 != null && array1.length > 0) ||\n            (array1 != null && array2 != null && array1.length != array2.length)) {\n                return false;\n        }\n        return true;\n    }",
        "begin_line": 876,
        "end_line": 883,
        "comment": "\n     * <p>Checks whether two arrays are the same length, treating\n     * <code>null</code> arrays as length <code>0</code>.</p>\n     * \n     * @param array1 the first array, may be <code>null</code>\n     * @param array2 the second array, may be <code>null</code>\n     * @return <code>true</code> if length of arrays matches, treating\n     *  <code>null</code> as an empty array\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.isSameLength(double[], double[])",
        "snippet": "    public static boolean isSameLength(double[] array1, double[] array2) {\n        if ((array1 == null && array2 != null && array2.length > 0) ||\n            (array2 == null && array1 != null && array1.length > 0) ||\n            (array1 != null && array2 != null && array1.length != array2.length)) {\n                return false;\n        }\n        return true;\n    }",
        "begin_line": 894,
        "end_line": 901,
        "comment": "\n     * <p>Checks whether two arrays are the same length, treating\n     * <code>null</code> arrays as length <code>0</code>.</p>\n     * \n     * @param array1 the first array, may be <code>null</code>\n     * @param array2 the second array, may be <code>null</code>\n     * @return <code>true</code> if length of arrays matches, treating\n     *  <code>null</code> as an empty array\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.isSameLength(float[], float[])",
        "snippet": "    public static boolean isSameLength(float[] array1, float[] array2) {\n        if ((array1 == null && array2 != null && array2.length > 0) ||\n            (array2 == null && array1 != null && array1.length > 0) ||\n            (array1 != null && array2 != null && array1.length != array2.length)) {\n                return false;\n        }\n        return true;\n    }",
        "begin_line": 912,
        "end_line": 919,
        "comment": "\n     * <p>Checks whether two arrays are the same length, treating\n     * <code>null</code> arrays as length <code>0</code>.</p>\n     * \n     * @param array1 the first array, may be <code>null</code>\n     * @param array2 the second array, may be <code>null</code>\n     * @return <code>true</code> if length of arrays matches, treating\n     *  <code>null</code> as an empty array\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.isSameLength(boolean[], boolean[])",
        "snippet": "    public static boolean isSameLength(boolean[] array1, boolean[] array2) {\n        if ((array1 == null && array2 != null && array2.length > 0) ||\n            (array2 == null && array1 != null && array1.length > 0) ||\n            (array1 != null && array2 != null && array1.length != array2.length)) {\n                return false;\n        }\n        return true;\n    }",
        "begin_line": 930,
        "end_line": 937,
        "comment": "\n     * <p>Checks whether two arrays are the same length, treating\n     * <code>null</code> arrays as length <code>0</code>.</p>\n     * \n     * @param array1 the first array, may be <code>null</code>\n     * @param array2 the second array, may be <code>null</code>\n     * @return <code>true</code> if length of arrays matches, treating\n     *  <code>null</code> as an empty array\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.getLength(java.lang.Object)",
        "snippet": "    public static int getLength(Object array) {\n        if (array == null) {\n            return 0;\n        }\n        return Array.getLength(array);\n    }",
        "begin_line": 960,
        "end_line": 965,
        "comment": "\n     * <p>Returns the length of the specified array.\n     * This method can deal with <code>Object</code> arrays and with primitive arrays.</p>\n     *\n     * <p>If the input array is <code>null</code>, <code>0</code> is returned.</p>\n     *\n     * <pre>\n     * ArrayUtils.getLength(null)            = 0\n     * ArrayUtils.getLength([])              = 0\n     * ArrayUtils.getLength([null])          = 1\n     * ArrayUtils.getLength([true, false])   = 2\n     * ArrayUtils.getLength([1, 2, 3])       = 3\n     * ArrayUtils.getLength([\"a\", \"b\", \"c\"]) = 3\n     * </pre>\n     *\n     * @param array  the array to retrieve the length from, may be null\n     * @return The length of the array, or <code>0</code> if the array is <code>null</code>\n     * @throws IllegalArgumentException if the object arguement is not an array.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.isSameType(java.lang.Object, java.lang.Object)",
        "snippet": "    public static boolean isSameType(Object array1, Object array2) {\n        if (array1 == null || array2 == null) {\n            throw new IllegalArgumentException(\"The Array must not be null\");\n        }\n        return array1.getClass().getName().equals(array2.getClass().getName());\n    }",
        "begin_line": 976,
        "end_line": 981,
        "comment": "\n     * <p>Checks whether two arrays are the same type taking into account\n     * multi-dimensional arrays.</p>\n     * \n     * @param array1 the first array, must not be <code>null</code>\n     * @param array2 the second array, must not be <code>null</code>\n     * @return <code>true</code> if type of arrays matches\n     * @throws IllegalArgumentException if either array is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.reverse(java.lang.Object[])",
        "snippet": "    public static void reverse(Object[] array) {\n        if (array == null) {\n            return;\n        }\n        int i = 0;\n        int j = array.length - 1;\n        Object tmp;\n        while (j > i) {\n            tmp = array[j];\n            array[j] = array[i];\n            array[i] = tmp;\n            j--;\n            i++;\n        }\n    }",
        "begin_line": 994,
        "end_line": 1008,
        "comment": " \n     * <p>Reverses the order of the given array.</p>\n     *\n     * <p>There is no special handling for multi-dimensional arrays.</p>\n     *\n     * <p>This method does nothing for a <code>null</code> input array.</p>\n     * \n     * @param array  the array to reverse, may be <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.reverse(long[])",
        "snippet": "    public static void reverse(long[] array) {\n        if (array == null) {\n            return;\n        }\n        int i = 0;\n        int j = array.length - 1;\n        long tmp;\n        while (j > i) {\n            tmp = array[j];\n            array[j] = array[i];\n            array[i] = tmp;\n            j--;\n            i++;\n        }\n    }",
        "begin_line": 1017,
        "end_line": 1031,
        "comment": "\n     * <p>Reverses the order of the given array.</p>\n     * \n     * <p>This method does nothing for a <code>null</code> input array.</p>\n     * \n     * @param array  the array to reverse, may be <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.reverse(int[])",
        "snippet": "    public static void reverse(int[] array) {\n        if (array == null) {\n            return;\n        }\n        int i = 0;\n        int j = array.length - 1;\n        int tmp;\n        while (j > i) {\n            tmp = array[j];\n            array[j] = array[i];\n            array[i] = tmp;\n            j--;\n            i++;\n        }\n    }",
        "begin_line": 1040,
        "end_line": 1054,
        "comment": "\n     * <p>Reverses the order of the given array.</p>\n     * \n     * <p>This method does nothing for a <code>null</code> input array.</p>\n     * \n     * @param array  the array to reverse, may be <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.reverse(short[])",
        "snippet": "    public static void reverse(short[] array) {\n        if (array == null) {\n            return;\n        }\n        int i = 0;\n        int j = array.length - 1;\n        short tmp;\n        while (j > i) {\n            tmp = array[j];\n            array[j] = array[i];\n            array[i] = tmp;\n            j--;\n            i++;\n        }\n    }",
        "begin_line": 1063,
        "end_line": 1077,
        "comment": "\n     * <p>Reverses the order of the given array.</p>\n     * \n     * <p>This method does nothing for a <code>null</code> input array.</p>\n     * \n     * @param array  the array to reverse, may be <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.reverse(char[])",
        "snippet": "    public static void reverse(char[] array) {\n        if (array == null) {\n            return;\n        }\n        int i = 0;\n        int j = array.length - 1;\n        char tmp;\n        while (j > i) {\n            tmp = array[j];\n            array[j] = array[i];\n            array[i] = tmp;\n            j--;\n            i++;\n        }\n    }",
        "begin_line": 1086,
        "end_line": 1100,
        "comment": "\n     * <p>Reverses the order of the given array.</p>\n     * \n     * <p>This method does nothing for a <code>null</code> input array.</p>\n     * \n     * @param array  the array to reverse, may be <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.reverse(byte[])",
        "snippet": "    public static void reverse(byte[] array) {\n        if (array == null) {\n            return;\n        }\n        int i = 0;\n        int j = array.length - 1;\n        byte tmp;\n        while (j > i) {\n            tmp = array[j];\n            array[j] = array[i];\n            array[i] = tmp;\n            j--;\n            i++;\n        }\n    }",
        "begin_line": 1109,
        "end_line": 1123,
        "comment": "\n     * <p>Reverses the order of the given array.</p>\n     * \n     * <p>This method does nothing for a <code>null</code> input array.</p>\n     * \n     * @param array  the array to reverse, may be <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.reverse(double[])",
        "snippet": "    public static void reverse(double[] array) {\n        if (array == null) {\n            return;\n        }\n        int i = 0;\n        int j = array.length - 1;\n        double tmp;\n        while (j > i) {\n            tmp = array[j];\n            array[j] = array[i];\n            array[i] = tmp;\n            j--;\n            i++;\n        }\n    }",
        "begin_line": 1132,
        "end_line": 1146,
        "comment": "\n     * <p>Reverses the order of the given array.</p>\n     * \n     * <p>This method does nothing for a <code>null</code> input array.</p>\n     * \n     * @param array  the array to reverse, may be <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.reverse(float[])",
        "snippet": "    public static void reverse(float[] array) {\n        if (array == null) {\n            return;\n        }\n        int i = 0;\n        int j = array.length - 1;\n        float tmp;\n        while (j > i) {\n            tmp = array[j];\n            array[j] = array[i];\n            array[i] = tmp;\n            j--;\n            i++;\n        }\n    }",
        "begin_line": 1155,
        "end_line": 1169,
        "comment": "\n     * <p>Reverses the order of the given array.</p>\n     * \n     * <p>This method does nothing for a <code>null</code> input array.</p>\n     * \n     * @param array  the array to reverse, may be <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.reverse(boolean[])",
        "snippet": "    public static void reverse(boolean[] array) {\n        if (array == null) {\n            return;\n        }\n        int i = 0;\n        int j = array.length - 1;\n        boolean tmp;\n        while (j > i) {\n            tmp = array[j];\n            array[j] = array[i];\n            array[i] = tmp;\n            j--;\n            i++;\n        }\n    }",
        "begin_line": 1178,
        "end_line": 1192,
        "comment": "\n     * <p>Reverses the order of the given array.</p>\n     * \n     * <p>This method does nothing for a <code>null</code> input array.</p>\n     * \n     * @param array  the array to reverse, may be <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.indexOf(java.lang.Object[], java.lang.Object)",
        "snippet": "    public static int indexOf(Object[] array, Object objectToFind) {\n        return indexOf(array, objectToFind, 0);\n    }",
        "begin_line": 1209,
        "end_line": 1211,
        "comment": "\n     * <p>Finds the index of the given object in the array.</p>\n     *\n     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n     * \n     * @param array  the array to search through for the object, may be <code>null</code>\n     * @param objectToFind  the object to find, may be <code>null</code>\n     * @return the index of the object within the array, \n     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.indexOf(java.lang.Object[], java.lang.Object, int)",
        "snippet": "    public static int indexOf(Object[] array, Object objectToFind, int startIndex) {\n        if (array == null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex < 0) {\n            startIndex = 0;\n        }\n        if (objectToFind == null) {\n            for (int i = startIndex; i < array.length; i++) {\n                if (array[i] == null) {\n                    return i;\n                }\n            }\n        } else {\n            for (int i = startIndex; i < array.length; i++) {\n                if (objectToFind.equals(array[i])) {\n                    return i;\n                }\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
        "begin_line": 1227,
        "end_line": 1248,
        "comment": "\n     * <p>Finds the index of the given object in the array starting at the given index.</p>\n     *\n     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n     *\n     * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n     * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>\n     * \n     * @param array  the array to search through for the object, may be <code>null</code>\n     * @param objectToFind  the object to find, may be <code>null</code>\n     * @param startIndex  the index to start searching at\n     * @return the index of the object within the array starting at the index,\n     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.lastIndexOf(java.lang.Object[], java.lang.Object)",
        "snippet": "    public static int lastIndexOf(Object[] array, Object objectToFind) {\n        return lastIndexOf(array, objectToFind, Integer.MAX_VALUE);\n    }",
        "begin_line": 1260,
        "end_line": 1262,
        "comment": "\n     * <p>Finds the last index of the given object within the array.</p>\n     *\n     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n     * \n     * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n     * @param objectToFind  the object to find, may be <code>null</code>\n     * @return the last index of the object within the array,\n     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.lastIndexOf(java.lang.Object[], java.lang.Object, int)",
        "snippet": "    public static int lastIndexOf(Object[] array, Object objectToFind, int startIndex) {\n        if (array == null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex < 0) {\n            return INDEX_NOT_FOUND;\n        } else if (startIndex >= array.length) {\n            startIndex = array.length - 1;\n        }\n        if (objectToFind == null) {\n            for (int i = startIndex; i >= 0; i--) {\n                if (array[i] == null) {\n                    return i;\n                }\n            }\n        } else {\n            for (int i = startIndex; i >= 0; i--) {\n                if (objectToFind.equals(array[i])) {\n                    return i;\n                }\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
        "begin_line": 1278,
        "end_line": 1301,
        "comment": "\n     * <p>Finds the last index of the given object in the array starting at the given index.</p>\n     *\n     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n     *\n     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than\n     * the array length will search from the end of the array.</p>\n     * \n     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n     * @param objectToFind  the object to find, may be <code>null</code>\n     * @param startIndex  the start index to travers backwards from\n     * @return the last index of the object within the array,\n     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.contains(java.lang.Object[], java.lang.Object)",
        "snippet": "    public static boolean contains(Object[] array, Object objectToFind) {\n        return indexOf(array, objectToFind) != INDEX_NOT_FOUND;\n    }",
        "begin_line": 1312,
        "end_line": 1314,
        "comment": "\n     * <p>Checks if the object is in the given array.</p>\n     *\n     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n     * \n     * @param array  the array to search through\n     * @param objectToFind  the object to find\n     * @return <code>true</code> if the array contains the object\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.indexOf(long[], long)",
        "snippet": "    public static int indexOf(long[] array, long valueToFind) {\n        return indexOf(array, valueToFind, 0);\n    }",
        "begin_line": 1328,
        "end_line": 1330,
        "comment": "\n     * <p>Finds the index of the given value in the array.</p>\n     *\n     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n     * \n     * @param array  the array to search through for the object, may be <code>null</code>\n     * @param valueToFind  the value to find\n     * @return the index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.indexOf(long[], long, int)",
        "snippet": "    public static int indexOf(long[] array, long valueToFind, int startIndex) {\n        if (array == null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex < 0) {\n            startIndex = 0;\n        }\n        for (int i = startIndex; i < array.length; i++) {\n            if (valueToFind == array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
        "begin_line": 1346,
        "end_line": 1359,
        "comment": "\n     * <p>Finds the index of the given value in the array starting at the given index.</p>\n     *\n     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n     *\n     * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n     * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>\n     * \n     * @param array  the array to search through for the object, may be <code>null</code>\n     * @param valueToFind  the value to find\n     * @param startIndex  the index to start searching at\n     * @return the index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.lastIndexOf(long[], long)",
        "snippet": "    public static int lastIndexOf(long[] array, long valueToFind) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n    }",
        "begin_line": 1371,
        "end_line": 1373,
        "comment": "\n     * <p>Finds the last index of the given value within the array.</p>\n     *\n     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n     * \n     * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n     * @param valueToFind  the object to find\n     * @return the last index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.lastIndexOf(long[], long, int)",
        "snippet": "    public static int lastIndexOf(long[] array, long valueToFind, int startIndex) {\n        if (array == null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex < 0) {\n            return INDEX_NOT_FOUND;\n        } else if (startIndex >= array.length) {\n            startIndex = array.length - 1;\n        }\n        for (int i = startIndex; i >= 0; i--) {\n            if (valueToFind == array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
        "begin_line": 1389,
        "end_line": 1404,
        "comment": "\n     * <p>Finds the last index of the given value in the array starting at the given index.</p>\n     *\n     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n     *\n     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the\n     * array length will search from the end of the array.</p>\n     * \n     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n     * @param valueToFind  the value to find\n     * @param startIndex  the start index to travers backwards from\n     * @return the last index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.contains(long[], long)",
        "snippet": "    public static boolean contains(long[] array, long valueToFind) {\n        return indexOf(array, valueToFind) != INDEX_NOT_FOUND;\n    }",
        "begin_line": 1415,
        "end_line": 1417,
        "comment": "\n     * <p>Checks if the value is in the given array.</p>\n     *\n     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n     * \n     * @param array  the array to search through\n     * @param valueToFind  the value to find\n     * @return <code>true</code> if the array contains the object\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.indexOf(int[], int)",
        "snippet": "    public static int indexOf(int[] array, int valueToFind) {\n        return indexOf(array, valueToFind, 0);\n    }",
        "begin_line": 1431,
        "end_line": 1433,
        "comment": "\n     * <p>Finds the index of the given value in the array.</p>\n     *\n     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n     * \n     * @param array  the array to search through for the object, may be <code>null</code>\n     * @param valueToFind  the value to find\n     * @return the index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.indexOf(int[], int, int)",
        "snippet": "    public static int indexOf(int[] array, int valueToFind, int startIndex) {\n        if (array == null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex < 0) {\n            startIndex = 0;\n        }\n        for (int i = startIndex; i < array.length; i++) {\n            if (valueToFind == array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
        "begin_line": 1449,
        "end_line": 1462,
        "comment": "\n     * <p>Finds the index of the given value in the array starting at the given index.</p>\n     *\n     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n     *\n     * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n     * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>\n     * \n     * @param array  the array to search through for the object, may be <code>null</code>\n     * @param valueToFind  the value to find\n     * @param startIndex  the index to start searching at\n     * @return the index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.lastIndexOf(int[], int)",
        "snippet": "    public static int lastIndexOf(int[] array, int valueToFind) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n    }",
        "begin_line": 1474,
        "end_line": 1476,
        "comment": "\n     * <p>Finds the last index of the given value within the array.</p>\n     *\n     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n     * \n     * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n     * @param valueToFind  the object to find\n     * @return the last index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.lastIndexOf(int[], int, int)",
        "snippet": "    public static int lastIndexOf(int[] array, int valueToFind, int startIndex) {\n        if (array == null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex < 0) {\n            return INDEX_NOT_FOUND;\n        } else if (startIndex >= array.length) {\n            startIndex = array.length - 1;\n        }\n        for (int i = startIndex; i >= 0; i--) {\n            if (valueToFind == array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
        "begin_line": 1492,
        "end_line": 1507,
        "comment": "\n     * <p>Finds the last index of the given value in the array starting at the given index.</p>\n     *\n     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n     *\n     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the\n     * array length will search from the end of the array.</p>\n     * \n     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n     * @param valueToFind  the value to find\n     * @param startIndex  the start index to travers backwards from\n     * @return the last index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.contains(int[], int)",
        "snippet": "    public static boolean contains(int[] array, int valueToFind) {\n        return indexOf(array, valueToFind) != INDEX_NOT_FOUND;\n    }",
        "begin_line": 1518,
        "end_line": 1520,
        "comment": "\n     * <p>Checks if the value is in the given array.</p>\n     *\n     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n     * \n     * @param array  the array to search through\n     * @param valueToFind  the value to find\n     * @return <code>true</code> if the array contains the object\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.indexOf(short[], short)",
        "snippet": "    public static int indexOf(short[] array, short valueToFind) {\n        return indexOf(array, valueToFind, 0);\n    }",
        "begin_line": 1534,
        "end_line": 1536,
        "comment": "\n     * <p>Finds the index of the given value in the array.</p>\n     *\n     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n     * \n     * @param array  the array to search through for the object, may be <code>null</code>\n     * @param valueToFind  the value to find\n     * @return the index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.indexOf(short[], short, int)",
        "snippet": "    public static int indexOf(short[] array, short valueToFind, int startIndex) {\n        if (array == null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex < 0) {\n            startIndex = 0;\n        }\n        for (int i = startIndex; i < array.length; i++) {\n            if (valueToFind == array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
        "begin_line": 1552,
        "end_line": 1565,
        "comment": "\n     * <p>Finds the index of the given value in the array starting at the given index.</p>\n     *\n     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n     *\n     * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n     * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>\n     * \n     * @param array  the array to search through for the object, may be <code>null</code>\n     * @param valueToFind  the value to find\n     * @param startIndex  the index to start searching at\n     * @return the index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.lastIndexOf(short[], short)",
        "snippet": "    public static int lastIndexOf(short[] array, short valueToFind) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n    }",
        "begin_line": 1577,
        "end_line": 1579,
        "comment": "\n     * <p>Finds the last index of the given value within the array.</p>\n     *\n     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n     * \n     * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n     * @param valueToFind  the object to find\n     * @return the last index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.lastIndexOf(short[], short, int)",
        "snippet": "    public static int lastIndexOf(short[] array, short valueToFind, int startIndex) {\n        if (array == null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex < 0) {\n            return INDEX_NOT_FOUND;\n        } else if (startIndex >= array.length) {\n            startIndex = array.length - 1;\n        }\n        for (int i = startIndex; i >= 0; i--) {\n            if (valueToFind == array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
        "begin_line": 1595,
        "end_line": 1610,
        "comment": "\n     * <p>Finds the last index of the given value in the array starting at the given index.</p>\n     *\n     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n     *\n     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the \n     * array length will search from the end of the array.</p>\n     * \n     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n     * @param valueToFind  the value to find\n     * @param startIndex  the start index to travers backwards from\n     * @return the last index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.contains(short[], short)",
        "snippet": "    public static boolean contains(short[] array, short valueToFind) {\n        return indexOf(array, valueToFind) != INDEX_NOT_FOUND;\n    }",
        "begin_line": 1621,
        "end_line": 1623,
        "comment": "\n     * <p>Checks if the value is in the given array.</p>\n     *\n     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n     * \n     * @param array  the array to search through\n     * @param valueToFind  the value to find\n     * @return <code>true</code> if the array contains the object\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.indexOf(char[], char)",
        "snippet": "    public static int indexOf(char[] array, char valueToFind) {\n        return indexOf(array, valueToFind, 0);\n    }",
        "begin_line": 1638,
        "end_line": 1640,
        "comment": "\n     * <p>Finds the index of the given value in the array.</p>\n     *\n     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n     * \n     * @param array  the array to search through for the object, may be <code>null</code>\n     * @param valueToFind  the value to find\n     * @return the index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.indexOf(char[], char, int)",
        "snippet": "    public static int indexOf(char[] array, char valueToFind, int startIndex) {\n        if (array == null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex < 0) {\n            startIndex = 0;\n        }\n        for (int i = startIndex; i < array.length; i++) {\n            if (valueToFind == array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
        "begin_line": 1657,
        "end_line": 1670,
        "comment": "\n     * <p>Finds the index of the given value in the array starting at the given index.</p>\n     *\n     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n     *\n     * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n     * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>\n     * \n     * @param array  the array to search through for the object, may be <code>null</code>\n     * @param valueToFind  the value to find\n     * @param startIndex  the index to start searching at\n     * @return the index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.lastIndexOf(char[], char)",
        "snippet": "    public static int lastIndexOf(char[] array, char valueToFind) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n    }",
        "begin_line": 1683,
        "end_line": 1685,
        "comment": "\n     * <p>Finds the last index of the given value within the array.</p>\n     *\n     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n     * \n     * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n     * @param valueToFind  the object to find\n     * @return the last index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.lastIndexOf(char[], char, int)",
        "snippet": "    public static int lastIndexOf(char[] array, char valueToFind, int startIndex) {\n        if (array == null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex < 0) {\n            return INDEX_NOT_FOUND;\n        } else if (startIndex >= array.length) {\n            startIndex = array.length - 1;\n        }\n        for (int i = startIndex; i >= 0; i--) {\n            if (valueToFind == array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
        "begin_line": 1702,
        "end_line": 1717,
        "comment": "\n     * <p>Finds the last index of the given value in the array starting at the given index.</p>\n     *\n     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n     *\n     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the\n     * array length will search from the end of the array.</p>\n     * \n     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n     * @param valueToFind  the value to find\n     * @param startIndex  the start index to travers backwards from\n     * @return the last index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.contains(char[], char)",
        "snippet": "    public static boolean contains(char[] array, char valueToFind) {\n        return indexOf(array, valueToFind) != INDEX_NOT_FOUND;\n    }",
        "begin_line": 1729,
        "end_line": 1731,
        "comment": "\n     * <p>Checks if the value is in the given array.</p>\n     *\n     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n     * \n     * @param array  the array to search through\n     * @param valueToFind  the value to find\n     * @return <code>true</code> if the array contains the object\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.indexOf(byte[], byte)",
        "snippet": "    public static int indexOf(byte[] array, byte valueToFind) {\n        return indexOf(array, valueToFind, 0);\n    }",
        "begin_line": 1745,
        "end_line": 1747,
        "comment": "\n     * <p>Finds the index of the given value in the array.</p>\n     *\n     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n     * \n     * @param array  the array to search through for the object, may be <code>null</code>\n     * @param valueToFind  the value to find\n     * @return the index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.indexOf(byte[], byte, int)",
        "snippet": "    public static int indexOf(byte[] array, byte valueToFind, int startIndex) {\n        if (array == null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex < 0) {\n            startIndex = 0;\n        }\n        for (int i = startIndex; i < array.length; i++) {\n            if (valueToFind == array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
        "begin_line": 1763,
        "end_line": 1776,
        "comment": "\n     * <p>Finds the index of the given value in the array starting at the given index.</p>\n     *\n     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n     *\n     * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n     * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>\n     * \n     * @param array  the array to search through for the object, may be <code>null</code>\n     * @param valueToFind  the value to find\n     * @param startIndex  the index to start searching at\n     * @return the index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.lastIndexOf(byte[], byte)",
        "snippet": "    public static int lastIndexOf(byte[] array, byte valueToFind) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n    }",
        "begin_line": 1788,
        "end_line": 1790,
        "comment": "\n     * <p>Finds the last index of the given value within the array.</p>\n     *\n     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n     * \n     * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n     * @param valueToFind  the object to find\n     * @return the last index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.lastIndexOf(byte[], byte, int)",
        "snippet": "    public static int lastIndexOf(byte[] array, byte valueToFind, int startIndex) {\n        if (array == null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex < 0) {\n            return INDEX_NOT_FOUND;\n        } else if (startIndex >= array.length) {\n            startIndex = array.length - 1;\n        }\n        for (int i = startIndex; i >= 0; i--) {\n            if (valueToFind == array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
        "begin_line": 1806,
        "end_line": 1821,
        "comment": "\n     * <p>Finds the last index of the given value in the array starting at the given index.</p>\n     *\n     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n     *\n     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the \n     * array length will search from the end of the array.</p>\n     * \n     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n     * @param valueToFind  the value to find\n     * @param startIndex  the start index to travers backwards from\n     * @return the last index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.contains(byte[], byte)",
        "snippet": "    public static boolean contains(byte[] array, byte valueToFind) {\n        return indexOf(array, valueToFind) != INDEX_NOT_FOUND;\n    }",
        "begin_line": 1832,
        "end_line": 1834,
        "comment": "\n     * <p>Checks if the value is in the given array.</p>\n     *\n     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n     * \n     * @param array  the array to search through\n     * @param valueToFind  the value to find\n     * @return <code>true</code> if the array contains the object\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.indexOf(double[], double)",
        "snippet": "    public static int indexOf(double[] array, double valueToFind) {\n        return indexOf(array, valueToFind, 0);\n    }",
        "begin_line": 1848,
        "end_line": 1850,
        "comment": "\n     * <p>Finds the index of the given value in the array.</p>\n     *\n     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n     * \n     * @param array  the array to search through for the object, may be <code>null</code>\n     * @param valueToFind  the value to find\n     * @return the index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.indexOf(double[], double, double)",
        "snippet": "    public static int indexOf(double[] array, double valueToFind, double tolerance) {\n        return indexOf(array, valueToFind, 0, tolerance);\n    }",
        "begin_line": 1865,
        "end_line": 1867,
        "comment": "\n     * <p>Finds the index of the given value within a given tolerance in the array.\n     * This method will return the index of the first value which falls between the region\n     * defined by valueToFind - tolerance and valueToFind + tolerance.</p>\n     *\n     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n     * \n     * @param array  the array to search through for the object, may be <code>null</code>\n     * @param valueToFind  the value to find\n     * @param tolerance tolerance of the search\n     * @return the index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.indexOf(double[], double, int)",
        "snippet": "    public static int indexOf(double[] array, double valueToFind, int startIndex) {\n        if (ArrayUtils.isEmpty(array)) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex < 0) {\n            startIndex = 0;\n        }\n        for (int i = startIndex; i < array.length; i++) {\n            if (valueToFind == array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
        "begin_line": 1883,
        "end_line": 1896,
        "comment": "\n     * <p>Finds the index of the given value in the array starting at the given index.</p>\n     *\n     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n     *\n     * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n     * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>\n     * \n     * @param array  the array to search through for the object, may be <code>null</code>\n     * @param valueToFind  the value to find\n     * @param startIndex  the index to start searching at\n     * @return the index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.indexOf(double[], double, int, double)",
        "snippet": "    public static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance) {\n        if (ArrayUtils.isEmpty(array)) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex < 0) {\n            startIndex = 0;\n        }\n        double min = valueToFind - tolerance;\n        double max = valueToFind + tolerance;\n        for (int i = startIndex; i < array.length; i++) {\n            if (array[i] >= min && array[i] <= max) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
        "begin_line": 1915,
        "end_line": 1930,
        "comment": "\n     * <p>Finds the index of the given value in the array starting at the given index.\n     * This method will return the index of the first value which falls between the region\n     * defined by valueToFind - tolerance and valueToFind + tolerance.</p>\n     *\n     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n     *\n     * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n     * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>\n     * \n     * @param array  the array to search through for the object, may be <code>null</code>\n     * @param valueToFind  the value to find\n     * @param startIndex  the index to start searching at\n     * @param tolerance tolerance of the search\n     * @return the index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.lastIndexOf(double[], double)",
        "snippet": "    public static int lastIndexOf(double[] array, double valueToFind) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n    }",
        "begin_line": 1942,
        "end_line": 1944,
        "comment": "\n     * <p>Finds the last index of the given value within the array.</p>\n     *\n     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n     * \n     * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n     * @param valueToFind  the object to find\n     * @return the last index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.lastIndexOf(double[], double, double)",
        "snippet": "    public static int lastIndexOf(double[] array, double valueToFind, double tolerance) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE, tolerance);\n    }",
        "begin_line": 1959,
        "end_line": 1961,
        "comment": "\n     * <p>Finds the last index of the given value within a given tolerance in the array.\n     * This method will return the index of the last value which falls between the region\n     * defined by valueToFind - tolerance and valueToFind + tolerance.</p>\n     *\n     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n     * \n     * @param array  the array to search through for the object, may be <code>null</code>\n     * @param valueToFind  the value to find\n     * @param tolerance tolerance of the search\n     * @return the index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.lastIndexOf(double[], double, int)",
        "snippet": "    public static int lastIndexOf(double[] array, double valueToFind, int startIndex) {\n        if (ArrayUtils.isEmpty(array)) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex < 0) {\n            return INDEX_NOT_FOUND;\n        } else if (startIndex >= array.length) {\n            startIndex = array.length - 1;\n        }\n        for (int i = startIndex; i >= 0; i--) {\n            if (valueToFind == array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
        "begin_line": 1977,
        "end_line": 1992,
        "comment": "\n     * <p>Finds the last index of the given value in the array starting at the given index.</p>\n     *\n     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n     *\n     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the \n     * array length will search from the end of the array.</p>\n     * \n     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n     * @param valueToFind  the value to find\n     * @param startIndex  the start index to travers backwards from\n     * @return the last index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.lastIndexOf(double[], double, int, double)",
        "snippet": "    public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance) {\n        if (ArrayUtils.isEmpty(array)) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex < 0) {\n            return INDEX_NOT_FOUND;\n        } else if (startIndex >= array.length) {\n            startIndex = array.length - 1;\n        }\n        double min = valueToFind - tolerance;\n        double max = valueToFind + tolerance;\n        for (int i = startIndex; i >= 0; i--) {\n            if (array[i] >= min && array[i] <= max) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
        "begin_line": 2011,
        "end_line": 2028,
        "comment": "\n     * <p>Finds the last index of the given value in the array starting at the given index.\n     * This method will return the index of the last value which falls between the region\n     * defined by valueToFind - tolerance and valueToFind + tolerance.</p>\n     *\n     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n     *\n     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the \n     * array length will search from the end of the array.</p>\n     * \n     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n     * @param valueToFind  the value to find\n     * @param startIndex  the start index to travers backwards from\n     * @param tolerance  search for value within plus/minus this amount\n     * @return the last index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.contains(double[], double)",
        "snippet": "    public static boolean contains(double[] array, double valueToFind) {\n        return indexOf(array, valueToFind) != INDEX_NOT_FOUND;\n    }",
        "begin_line": 2039,
        "end_line": 2041,
        "comment": "\n     * <p>Checks if the value is in the given array.</p>\n     *\n     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n     * \n     * @param array  the array to search through\n     * @param valueToFind  the value to find\n     * @return <code>true</code> if the array contains the object\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.contains(double[], double, double)",
        "snippet": "    public static boolean contains(double[] array, double valueToFind, double tolerance) {\n        return indexOf(array, valueToFind, 0, tolerance) != INDEX_NOT_FOUND;\n    }",
        "begin_line": 2056,
        "end_line": 2058,
        "comment": "\n     * <p>Checks if a value falling within the given tolerance is in the\n     * given array.  If the array contains a value within the inclusive range \n     * defined by (value - tolerance) to (value + tolerance).</p>\n     *\n     * <p>The method returns <code>false</code> if a <code>null</code> array\n     * is passed in.</p>\n     *\n     * @param array  the array to search\n     * @param valueToFind  the value to find\n     * @param tolerance  the array contains the tolerance of the search\n     * @return true if value falling within tolerance is in array\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.indexOf(float[], float)",
        "snippet": "    public static int indexOf(float[] array, float valueToFind) {\n        return indexOf(array, valueToFind, 0);\n    }",
        "begin_line": 2072,
        "end_line": 2074,
        "comment": "\n     * <p>Finds the index of the given value in the array.</p>\n     *\n     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n     * \n     * @param array  the array to search through for the object, may be <code>null</code>\n     * @param valueToFind  the value to find\n     * @return the index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.indexOf(float[], float, int)",
        "snippet": "    public static int indexOf(float[] array, float valueToFind, int startIndex) {\n        if (ArrayUtils.isEmpty(array)) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex < 0) {\n            startIndex = 0;\n        }\n        for (int i = startIndex; i < array.length; i++) {\n            if (valueToFind == array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
        "begin_line": 2090,
        "end_line": 2103,
        "comment": "\n     * <p>Finds the index of the given value in the array starting at the given index.</p>\n     *\n     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n     *\n     * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n     * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>\n     * \n     * @param array  the array to search through for the object, may be <code>null</code>\n     * @param valueToFind  the value to find\n     * @param startIndex  the index to start searching at\n     * @return the index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.lastIndexOf(float[], float)",
        "snippet": "    public static int lastIndexOf(float[] array, float valueToFind) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n    }",
        "begin_line": 2115,
        "end_line": 2117,
        "comment": "\n     * <p>Finds the last index of the given value within the array.</p>\n     *\n     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n     * \n     * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n     * @param valueToFind  the object to find\n     * @return the last index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.lastIndexOf(float[], float, int)",
        "snippet": "    public static int lastIndexOf(float[] array, float valueToFind, int startIndex) {\n        if (ArrayUtils.isEmpty(array)) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex < 0) {\n            return INDEX_NOT_FOUND;\n        } else if (startIndex >= array.length) {\n            startIndex = array.length - 1;\n        }\n        for (int i = startIndex; i >= 0; i--) {\n            if (valueToFind == array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
        "begin_line": 2133,
        "end_line": 2148,
        "comment": "\n     * <p>Finds the last index of the given value in the array starting at the given index.</p>\n     *\n     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n     *\n     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the \n     * array length will search from the end of the array.</p>\n     * \n     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n     * @param valueToFind  the value to find\n     * @param startIndex  the start index to travers backwards from\n     * @return the last index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.contains(float[], float)",
        "snippet": "    public static boolean contains(float[] array, float valueToFind) {\n        return indexOf(array, valueToFind) != INDEX_NOT_FOUND;\n    }",
        "begin_line": 2159,
        "end_line": 2161,
        "comment": "\n     * <p>Checks if the value is in the given array.</p>\n     *\n     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n     * \n     * @param array  the array to search through\n     * @param valueToFind  the value to find\n     * @return <code>true</code> if the array contains the object\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.indexOf(boolean[], boolean)",
        "snippet": "    public static int indexOf(boolean[] array, boolean valueToFind) {\n        return indexOf(array, valueToFind, 0);\n    }",
        "begin_line": 2175,
        "end_line": 2177,
        "comment": "\n     * <p>Finds the index of the given value in the array.</p>\n     *\n     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n     * \n     * @param array  the array to search through for the object, may be <code>null</code>\n     * @param valueToFind  the value to find\n     * @return the index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.indexOf(boolean[], boolean, int)",
        "snippet": "    public static int indexOf(boolean[] array, boolean valueToFind, int startIndex) {\n        if (ArrayUtils.isEmpty(array)) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex < 0) {\n            startIndex = 0;\n        }\n        for (int i = startIndex; i < array.length; i++) {\n            if (valueToFind == array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
        "begin_line": 2194,
        "end_line": 2207,
        "comment": "\n     * <p>Finds the index of the given value in the array starting at the given index.</p>\n     *\n     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n     *\n     * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n     * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>\n     * \n     * @param array  the array to search through for the object, may be <code>null</code>\n     * @param valueToFind  the value to find\n     * @param startIndex  the index to start searching at\n     * @return the index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code>\n     *  array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.lastIndexOf(boolean[], boolean)",
        "snippet": "    public static int lastIndexOf(boolean[] array, boolean valueToFind) {\n        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n    }",
        "begin_line": 2220,
        "end_line": 2222,
        "comment": "\n     * <p>Finds the last index of the given value within the array.</p>\n     *\n     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) if \n     * <code>null</code> array input.</p>\n     * \n     * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n     * @param valueToFind  the object to find\n     * @return the last index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.lastIndexOf(boolean[], boolean, int)",
        "snippet": "    public static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex) {\n        if (ArrayUtils.isEmpty(array)) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex < 0) {\n            return INDEX_NOT_FOUND;\n        } else if (startIndex >= array.length) {\n            startIndex = array.length - 1;\n        }\n        for (int i = startIndex; i >= 0; i--) {\n            if (valueToFind == array[i]) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }",
        "begin_line": 2238,
        "end_line": 2253,
        "comment": "\n     * <p>Finds the last index of the given value in the array starting at the given index.</p>\n     *\n     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n     *\n     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than \n     * the array length will search from the end of the array.</p>\n     * \n     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n     * @param valueToFind  the value to find\n     * @param startIndex  the start index to travers backwards from\n     * @return the last index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.contains(boolean[], boolean)",
        "snippet": "    public static boolean contains(boolean[] array, boolean valueToFind) {\n        return indexOf(array, valueToFind) != INDEX_NOT_FOUND;\n    }",
        "begin_line": 2264,
        "end_line": 2266,
        "comment": "\n     * <p>Checks if the value is in the given array.</p>\n     *\n     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n     * \n     * @param array  the array to search through\n     * @param valueToFind  the value to find\n     * @return <code>true</code> if the array contains the object\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.toPrimitive(java.lang.Character[])",
        "snippet": "    public static char[] toPrimitive(Character[] array) {\n        if (array == null) {\n            return null;\n        } else if (array.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        final char[] result = new char[array.length];\n        for (int i = 0; i < array.length; i++) {\n            result[i] = array[i].charValue();\n        }\n        return result;\n    }",
        "begin_line": 2282,
        "end_line": 2293,
        "comment": "\n     * <p>Converts an array of object Characters to primitives.</p>\n     *\n     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n     * \n     * @param array  a <code>Character</code> array, may be <code>null</code>\n     * @return a <code>char</code> array, <code>null</code> if null array input\n     * @throws NullPointerException if array content is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.toPrimitive(java.lang.Character[], char)",
        "snippet": "    public static char[] toPrimitive(Character[] array, char valueForNull) {\n        if (array == null) {\n            return null;\n        } else if (array.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        final char[] result = new char[array.length];\n        for (int i = 0; i < array.length; i++) {\n            Character b = array[i];\n            result[i] = (b == null ? valueForNull : b.charValue());\n        }\n        return result;\n    }",
        "begin_line": 2304,
        "end_line": 2316,
        "comment": "\n     * <p>Converts an array of object Character to primitives handling <code>null</code>.</p>\n     * \n     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n     * \n     * @param array  a <code>Character</code> array, may be <code>null</code>\n     * @param valueForNull  the value to insert if <code>null</code> found\n     * @return a <code>char</code> array, <code>null</code> if null array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.toObject(char[])",
        "snippet": "    public static Character[] toObject(char[] array) {\n        if (array == null) {\n            return null;\n        } else if (array.length == 0) {\n            return EMPTY_CHARACTER_OBJECT_ARRAY;\n        }\n        final Character[] result = new Character[array.length];\n        for (int i = 0; i < array.length; i++) {\n            result[i] = new Character(array[i]);\n        }\n        return result;\n     }    ",
        "begin_line": 2326,
        "end_line": 2337,
        "comment": "\n     * <p>Converts an array of primitive chars to objects.</p>\n     *\n     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n     * \n     * @param array a <code>char</code> array\n     * @return a <code>Character</code> array, <code>null</code> if null array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.toPrimitive(java.lang.Long[])",
        "snippet": "    public static long[] toPrimitive(Long[] array) {\n        if (array == null) {\n            return null;\n        } else if (array.length == 0) {\n            return EMPTY_LONG_ARRAY;\n        }\n        final long[] result = new long[array.length];\n        for (int i = 0; i < array.length; i++) {\n            result[i] = array[i].longValue();\n        }\n        return result;\n    }",
        "begin_line": 2350,
        "end_line": 2361,
        "comment": "\n     * <p>Converts an array of object Longs to primitives.</p>\n     *\n     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n     * \n     * @param array  a <code>Long</code> array, may be <code>null</code>\n     * @return a <code>long</code> array, <code>null</code> if null array input\n     * @throws NullPointerException if array content is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.toPrimitive(java.lang.Long[], long)",
        "snippet": "    public static long[] toPrimitive(Long[] array, long valueForNull) {\n        if (array == null) {\n            return null;\n        } else if (array.length == 0) {\n            return EMPTY_LONG_ARRAY;\n        }\n        final long[] result = new long[array.length];\n        for (int i = 0; i < array.length; i++) {\n            Long b = array[i];\n            result[i] = (b == null ? valueForNull : b.longValue());\n        }\n        return result;\n    }",
        "begin_line": 2372,
        "end_line": 2384,
        "comment": "\n     * <p>Converts an array of object Long to primitives handling <code>null</code>.</p>\n     * \n     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n     * \n     * @param array  a <code>Long</code> array, may be <code>null</code>\n     * @param valueForNull  the value to insert if <code>null</code> found\n     * @return a <code>long</code> array, <code>null</code> if null array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.toObject(long[])",
        "snippet": "    public static Long[] toObject(long[] array) {\n        if (array == null) {\n            return null;\n        } else if (array.length == 0) {\n            return EMPTY_LONG_OBJECT_ARRAY;\n        }\n        final Long[] result = new Long[array.length];\n        for (int i = 0; i < array.length; i++) {\n            result[i] = new Long(array[i]);\n        }\n        return result;\n    }",
        "begin_line": 2394,
        "end_line": 2405,
        "comment": "\n     * <p>Converts an array of primitive longs to objects.</p>\n     *\n     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n     * \n     * @param array  a <code>long</code> array\n     * @return a <code>Long</code> array, <code>null</code> if null array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.toPrimitive(java.lang.Integer[])",
        "snippet": "    public static int[] toPrimitive(Integer[] array) {\n        if (array == null) {\n            return null;\n        } else if (array.length == 0) {\n            return EMPTY_INT_ARRAY;\n        }\n        final int[] result = new int[array.length];\n        for (int i = 0; i < array.length; i++) {\n            result[i] = array[i].intValue();\n        }\n        return result;\n    }",
        "begin_line": 2418,
        "end_line": 2429,
        "comment": "\n     * <p>Converts an array of object Integers to primitives.</p>\n     *\n     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n     * \n     * @param array  a <code>Integer</code> array, may be <code>null</code>\n     * @return an <code>int</code> array, <code>null</code> if null array input\n     * @throws NullPointerException if array content is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.toPrimitive(java.lang.Integer[], int)",
        "snippet": "    public static int[] toPrimitive(Integer[] array, int valueForNull) {\n        if (array == null) {\n            return null;\n        } else if (array.length == 0) {\n            return EMPTY_INT_ARRAY;\n        }\n        final int[] result = new int[array.length];\n        for (int i = 0; i < array.length; i++) {\n            Integer b = array[i];\n            result[i] = (b == null ? valueForNull : b.intValue());\n        }\n        return result;\n    }",
        "begin_line": 2440,
        "end_line": 2452,
        "comment": "\n     * <p>Converts an array of object Integer to primitives handling <code>null</code>.</p>\n     * \n     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n     * \n     * @param array  a <code>Integer</code> array, may be <code>null</code>\n     * @param valueForNull  the value to insert if <code>null</code> found\n     * @return an <code>int</code> array, <code>null</code> if null array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.toObject(int[])",
        "snippet": "    public static Integer[] toObject(int[] array) {\n        if (array == null) {\n            return null;\n        } else if (array.length == 0) {\n            return EMPTY_INTEGER_OBJECT_ARRAY;\n        }\n        final Integer[] result = new Integer[array.length];\n        for (int i = 0; i < array.length; i++) {\n            result[i] = new Integer(array[i]);\n        }\n        return result;\n    }",
        "begin_line": 2462,
        "end_line": 2473,
        "comment": "\n     * <p>Converts an array of primitive ints to objects.</p>\n     *\n     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n     * \n     * @param array  an <code>int</code> array\n     * @return an <code>Integer</code> array, <code>null</code> if null array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.toPrimitive(java.lang.Short[])",
        "snippet": "    public static short[] toPrimitive(Short[] array) {\n        if (array == null) {\n            return null;\n        } else if (array.length == 0) {\n            return EMPTY_SHORT_ARRAY;\n        }\n        final short[] result = new short[array.length];\n        for (int i = 0; i < array.length; i++) {\n            result[i] = array[i].shortValue();\n        }\n        return result;\n    }",
        "begin_line": 2486,
        "end_line": 2497,
        "comment": "\n     * <p>Converts an array of object Shorts to primitives.</p>\n     *\n     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n     * \n     * @param array  a <code>Short</code> array, may be <code>null</code>\n     * @return a <code>byte</code> array, <code>null</code> if null array input\n     * @throws NullPointerException if array content is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.toPrimitive(java.lang.Short[], short)",
        "snippet": "    public static short[] toPrimitive(Short[] array, short valueForNull) {\n        if (array == null) {\n            return null;\n        } else if (array.length == 0) {\n            return EMPTY_SHORT_ARRAY;\n        }\n        final short[] result = new short[array.length];\n        for (int i = 0; i < array.length; i++) {\n            Short b = array[i];\n            result[i] = (b == null ? valueForNull : b.shortValue());\n        }\n        return result;\n    }",
        "begin_line": 2508,
        "end_line": 2520,
        "comment": "\n     * <p>Converts an array of object Short to primitives handling <code>null</code>.</p>\n     * \n     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n     * \n     * @param array  a <code>Short</code> array, may be <code>null</code>\n     * @param valueForNull  the value to insert if <code>null</code> found\n     * @return a <code>byte</code> array, <code>null</code> if null array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.toObject(short[])",
        "snippet": "    public static Short[] toObject(short[] array) {\n        if (array == null) {\n            return null;\n        } else if (array.length == 0) {\n            return EMPTY_SHORT_OBJECT_ARRAY;\n        }\n        final Short[] result = new Short[array.length];\n        for (int i = 0; i < array.length; i++) {\n            result[i] = new Short(array[i]);\n        }\n        return result;\n    }    ",
        "begin_line": 2530,
        "end_line": 2541,
        "comment": "\n     * <p>Converts an array of primitive shorts to objects.</p>\n     *\n     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n     * \n     * @param array  a <code>short</code> array\n     * @return a <code>Short</code> array, <code>null</code> if null array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.toPrimitive(java.lang.Byte[])",
        "snippet": "    public static byte[] toPrimitive(Byte[] array) {\n        if (array == null) {\n            return null;\n        } else if (array.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        final byte[] result = new byte[array.length];\n        for (int i = 0; i < array.length; i++) {\n            result[i] = array[i].byteValue();\n        }\n        return result;\n    }",
        "begin_line": 2554,
        "end_line": 2565,
        "comment": "\n     * <p>Converts an array of object Bytes to primitives.</p>\n     *\n     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n     * \n     * @param array  a <code>Byte</code> array, may be <code>null</code>\n     * @return a <code>byte</code> array, <code>null</code> if null array input\n     * @throws NullPointerException if array content is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.toPrimitive(java.lang.Byte[], byte)",
        "snippet": "    public static byte[] toPrimitive(Byte[] array, byte valueForNull) {\n        if (array == null) {\n            return null;\n        } else if (array.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        final byte[] result = new byte[array.length];\n        for (int i = 0; i < array.length; i++) {\n            Byte b = array[i];\n            result[i] = (b == null ? valueForNull : b.byteValue());\n        }\n        return result;\n    }",
        "begin_line": 2576,
        "end_line": 2588,
        "comment": "\n     * <p>Converts an array of object Bytes to primitives handling <code>null</code>.</p>\n     * \n     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n     * \n     * @param array  a <code>Byte</code> array, may be <code>null</code>\n     * @param valueForNull  the value to insert if <code>null</code> found\n     * @return a <code>byte</code> array, <code>null</code> if null array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.toObject(byte[])",
        "snippet": "    public static Byte[] toObject(byte[] array) {\n        if (array == null) {\n            return null;\n        } else if (array.length == 0) {\n            return EMPTY_BYTE_OBJECT_ARRAY;\n        }\n        final Byte[] result = new Byte[array.length];\n        for (int i = 0; i < array.length; i++) {\n            result[i] = new Byte(array[i]);\n        }\n        return result;\n    }  ",
        "begin_line": 2598,
        "end_line": 2609,
        "comment": "\n     * <p>Converts an array of primitive bytes to objects.</p>\n     *\n     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n     * \n     * @param array  a <code>byte</code> array\n     * @return a <code>Byte</code> array, <code>null</code> if null array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.toPrimitive(java.lang.Double[])",
        "snippet": "    public static double[] toPrimitive(Double[] array) {\n        if (array == null) {\n            return null;\n        } else if (array.length == 0) {\n            return EMPTY_DOUBLE_ARRAY;\n        }\n        final double[] result = new double[array.length];\n        for (int i = 0; i < array.length; i++) {\n            result[i] = array[i].doubleValue();\n        }\n        return result;\n    }",
        "begin_line": 2622,
        "end_line": 2633,
        "comment": "\n     * <p>Converts an array of object Doubles to primitives.</p>\n     *\n     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n     * \n     * @param array  a <code>Double</code> array, may be <code>null</code>\n     * @return a <code>double</code> array, <code>null</code> if null array input\n     * @throws NullPointerException if array content is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.toPrimitive(java.lang.Double[], double)",
        "snippet": "    public static double[] toPrimitive(Double[] array, double valueForNull) {\n        if (array == null) {\n            return null;\n        } else if (array.length == 0) {\n            return EMPTY_DOUBLE_ARRAY;\n        }\n        final double[] result = new double[array.length];\n        for (int i = 0; i < array.length; i++) {\n            Double b = array[i];\n            result[i] = (b == null ? valueForNull : b.doubleValue());\n        }\n        return result;\n    }",
        "begin_line": 2644,
        "end_line": 2656,
        "comment": "\n     * <p>Converts an array of object Doubles to primitives handling <code>null</code>.</p>\n     * \n     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n     * \n     * @param array  a <code>Double</code> array, may be <code>null</code>\n     * @param valueForNull  the value to insert if <code>null</code> found\n     * @return a <code>double</code> array, <code>null</code> if null array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.toObject(double[])",
        "snippet": "    public static Double[] toObject(double[] array) {\n        if (array == null) {\n            return null;\n        } else if (array.length == 0) {\n            return EMPTY_DOUBLE_OBJECT_ARRAY;\n        }\n        final Double[] result = new Double[array.length];\n        for (int i = 0; i < array.length; i++) {\n            result[i] = new Double(array[i]);\n        }\n        return result;\n    }",
        "begin_line": 2666,
        "end_line": 2677,
        "comment": "\n     * <p>Converts an array of primitive doubles to objects.</p>\n     *\n     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n     * \n     * @param array  a <code>double</code> array\n     * @return a <code>Double</code> array, <code>null</code> if null array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.toPrimitive(java.lang.Float[])",
        "snippet": "    public static float[] toPrimitive(Float[] array) {\n        if (array == null) {\n            return null;\n        } else if (array.length == 0) {\n            return EMPTY_FLOAT_ARRAY;\n        }\n        final float[] result = new float[array.length];\n        for (int i = 0; i < array.length; i++) {\n            result[i] = array[i].floatValue();\n        }\n        return result;\n    }",
        "begin_line": 2690,
        "end_line": 2701,
        "comment": "\n     * <p>Converts an array of object Floats to primitives.</p>\n     *\n     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n     * \n     * @param array  a <code>Float</code> array, may be <code>null</code>\n     * @return a <code>float</code> array, <code>null</code> if null array input\n     * @throws NullPointerException if array content is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.toPrimitive(java.lang.Float[], float)",
        "snippet": "    public static float[] toPrimitive(Float[] array, float valueForNull) {\n        if (array == null) {\n            return null;\n        } else if (array.length == 0) {\n            return EMPTY_FLOAT_ARRAY;\n        }\n        final float[] result = new float[array.length];\n        for (int i = 0; i < array.length; i++) {\n            Float b = array[i];\n            result[i] = (b == null ? valueForNull : b.floatValue());\n        }\n        return result;\n    }",
        "begin_line": 2712,
        "end_line": 2724,
        "comment": "\n     * <p>Converts an array of object Floats to primitives handling <code>null</code>.</p>\n     * \n     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n     * \n     * @param array  a <code>Float</code> array, may be <code>null</code>\n     * @param valueForNull  the value to insert if <code>null</code> found\n     * @return a <code>float</code> array, <code>null</code> if null array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.toObject(float[])",
        "snippet": "    public static Float[] toObject(float[] array) {\n        if (array == null) {\n            return null;\n        } else if (array.length == 0) {\n            return EMPTY_FLOAT_OBJECT_ARRAY;\n        }\n        final Float[] result = new Float[array.length];\n        for (int i = 0; i < array.length; i++) {\n            result[i] = new Float(array[i]);\n        }\n        return result;\n    }",
        "begin_line": 2734,
        "end_line": 2745,
        "comment": "\n     * <p>Converts an array of primitive floats to objects.</p>\n     *\n     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n     * \n     * @param array  a <code>float</code> array\n     * @return a <code>Float</code> array, <code>null</code> if null array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.toPrimitive(java.lang.Boolean[])",
        "snippet": "    public static boolean[] toPrimitive(Boolean[] array) {\n        if (array == null) {\n            return null;\n        } else if (array.length == 0) {\n            return EMPTY_BOOLEAN_ARRAY;\n        }\n        final boolean[] result = new boolean[array.length];\n        for (int i = 0; i < array.length; i++) {\n            result[i] = array[i].booleanValue();\n        }\n        return result;\n    }",
        "begin_line": 2758,
        "end_line": 2769,
        "comment": "\n     * <p>Converts an array of object Booleans to primitives.</p>\n     *\n     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n     * \n     * @param array  a <code>Boolean</code> array, may be <code>null</code>\n     * @return a <code>boolean</code> array, <code>null</code> if null array input\n     * @throws NullPointerException if array content is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.toPrimitive(java.lang.Boolean[], boolean)",
        "snippet": "    public static boolean[] toPrimitive(Boolean[] array, boolean valueForNull) {\n        if (array == null) {\n            return null;\n        } else if (array.length == 0) {\n            return EMPTY_BOOLEAN_ARRAY;\n        }\n        final boolean[] result = new boolean[array.length];\n        for (int i = 0; i < array.length; i++) {\n            Boolean b = array[i];\n            result[i] = (b == null ? valueForNull : b.booleanValue());\n        }\n        return result;\n    }",
        "begin_line": 2780,
        "end_line": 2792,
        "comment": "\n     * <p>Converts an array of object Booleans to primitives handling <code>null</code>.</p>\n     * \n     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n     * \n     * @param array  a <code>Boolean</code> array, may be <code>null</code>\n     * @param valueForNull  the value to insert if <code>null</code> found\n     * @return a <code>boolean</code> array, <code>null</code> if null array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.toObject(boolean[])",
        "snippet": "    public static Boolean[] toObject(boolean[] array) {\n        if (array == null) {\n            return null;\n        } else if (array.length == 0) {\n            return EMPTY_BOOLEAN_OBJECT_ARRAY;\n        }\n        final Boolean[] result = new Boolean[array.length];\n        for (int i = 0; i < array.length; i++) {\n            result[i] = (array[i] ? Boolean.TRUE : Boolean.FALSE);\n        }\n        return result;\n    }",
        "begin_line": 2802,
        "end_line": 2813,
        "comment": "\n     * <p>Converts an array of primitive booleans to objects.</p>\n     *\n     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n     * \n     * @param array  a <code>boolean</code> array\n     * @return a <code>Boolean</code> array, <code>null</code> if null array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.isEmpty(java.lang.Object[])",
        "snippet": "    public static boolean isEmpty(Object[] array) {\n        if (array == null || array.length == 0) {\n            return true;\n        }\n        return false;\n    }",
        "begin_line": 2823,
        "end_line": 2828,
        "comment": "\n     * <p>Checks if an array of Objects is empty or <code>null</code>.</p>\n     *\n     * @param array  the array to test\n     * @return <code>true</code> if the array is empty or <code>null</code>\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.isEmpty(long[])",
        "snippet": "    public static boolean isEmpty(long[] array) {\n        if (array == null || array.length == 0) {\n            return true;\n        }\n        return false;\n    }",
        "begin_line": 2837,
        "end_line": 2842,
        "comment": "\n     * <p>Checks if an array of primitive longs is empty or <code>null</code>.</p>\n     *\n     * @param array  the array to test\n     * @return <code>true</code> if the array is empty or <code>null</code>\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.isEmpty(int[])",
        "snippet": "    public static boolean isEmpty(int[] array) {\n        if (array == null || array.length == 0) {\n            return true;\n        }\n        return false;\n    }",
        "begin_line": 2851,
        "end_line": 2856,
        "comment": "\n     * <p>Checks if an array of primitive ints is empty or <code>null</code>.</p>\n     *\n     * @param array  the array to test\n     * @return <code>true</code> if the array is empty or <code>null</code>\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.isEmpty(short[])",
        "snippet": "    public static boolean isEmpty(short[] array) {\n        if (array == null || array.length == 0) {\n            return true;\n        }\n        return false;\n    }",
        "begin_line": 2865,
        "end_line": 2870,
        "comment": "\n     * <p>Checks if an array of primitive shorts is empty or <code>null</code>.</p>\n     *\n     * @param array  the array to test\n     * @return <code>true</code> if the array is empty or <code>null</code>\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.isEmpty(char[])",
        "snippet": "    public static boolean isEmpty(char[] array) {\n        if (array == null || array.length == 0) {\n            return true;\n        }\n        return false;\n    }",
        "begin_line": 2879,
        "end_line": 2884,
        "comment": "\n     * <p>Checks if an array of primitive chars is empty or <code>null</code>.</p>\n     *\n     * @param array  the array to test\n     * @return <code>true</code> if the array is empty or <code>null</code>\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.isEmpty(byte[])",
        "snippet": "    public static boolean isEmpty(byte[] array) {\n        if (array == null || array.length == 0) {\n            return true;\n        }\n        return false;\n    }",
        "begin_line": 2893,
        "end_line": 2898,
        "comment": "\n     * <p>Checks if an array of primitive bytes is empty or <code>null</code>.</p>\n     *\n     * @param array  the array to test\n     * @return <code>true</code> if the array is empty or <code>null</code>\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.isEmpty(double[])",
        "snippet": "    public static boolean isEmpty(double[] array) {\n        if (array == null || array.length == 0) {\n            return true;\n        }\n        return false;\n    }",
        "begin_line": 2907,
        "end_line": 2912,
        "comment": "\n     * <p>Checks if an array of primitive doubles is empty or <code>null</code>.</p>\n     *\n     * @param array  the array to test\n     * @return <code>true</code> if the array is empty or <code>null</code>\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.isEmpty(float[])",
        "snippet": "    public static boolean isEmpty(float[] array) {\n        if (array == null || array.length == 0) {\n            return true;\n        }\n        return false;\n    }",
        "begin_line": 2921,
        "end_line": 2926,
        "comment": "\n     * <p>Checks if an array of primitive floats is empty or <code>null</code>.</p>\n     *\n     * @param array  the array to test\n     * @return <code>true</code> if the array is empty or <code>null</code>\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.isEmpty(boolean[])",
        "snippet": "    public static boolean isEmpty(boolean[] array) {\n        if (array == null || array.length == 0) {\n            return true;\n        }\n        return false;\n    }",
        "begin_line": 2935,
        "end_line": 2940,
        "comment": "\n     * <p>Checks if an array of primitive booleans is empty or <code>null</code>.</p>\n     *\n     * @param array  the array to test\n     * @return <code>true</code> if the array is empty or <code>null</code>\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.addAll(java.lang.Object[], java.lang.Object[])",
        "snippet": "    public static Object[] addAll(Object[] array1, Object[] array2) {\n        if (array1 == null) {\n            return clone(array2);\n        } else if (array2 == null) {\n            return clone(array1);\n        }\n        Object[] joinedArray = (Object[]) Array.newInstance(array1.getClass().getComponentType(),\n                                                            array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
        "begin_line": 2963,
        "end_line": 2974,
        "comment": "\n     * <p>Adds all the elements of the given arrays into a new array.</p>\n     * <p>The new array contains all of the element of <code>array1</code> followed\n     * by all of the elements <code>array2</code>. When an array is returned, it is always\n     * a new array.</p>\n     *\n     * <pre>\n     * ArrayUtils.addAll(null, null)     = null\n     * ArrayUtils.addAll(array1, null)   = cloned copy of array1\n     * ArrayUtils.addAll(null, array2)   = cloned copy of array2\n     * ArrayUtils.addAll([], [])         = []\n     * ArrayUtils.addAll([null], [null]) = [null, null]\n     * ArrayUtils.addAll([\"a\", \"b\", \"c\"], [\"1\", \"2\", \"3\"]) = [\"a\", \"b\", \"c\", \"1\", \"2\", \"3\"]\n     * </pre>\n     *\n     * @param array1  the first array whose elements are added to the new array, may be <code>null</code>\n     * @param array2  the second array whose elements are added to the new array, may be <code>null</code>\n     * @return The new array, <code>null</code> if <code>null</code> array inputs. \n     *      The type of the new array is the type of the first array.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.addAll(boolean[], boolean[])",
        "snippet": "    public static boolean[] addAll(boolean[] array1, boolean[] array2) {\n        if (array1 == null) {\n            return clone(array2);\n        } else if (array2 == null) {\n            return clone(array1);\n        }\n        boolean[] joinedArray = new boolean[array1.length + array2.length];\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
        "begin_line": 2993,
        "end_line": 3003,
        "comment": "\n     * <p>Adds all the elements of the given arrays into a new array.</p>\n     * <p>The new array contains all of the element of <code>array1</code> followed\n     * by all of the elements <code>array2</code>. When an array is returned, it is always\n     * a new array.</p>\n     *\n     * <pre>\n     * ArrayUtils.addAll(array1, null)   = cloned copy of array1\n     * ArrayUtils.addAll(null, array2)   = cloned copy of array2\n     * ArrayUtils.addAll([], [])         = []\n     * </pre>\n     *\n     * @param array1  the first array whose elements are added to the new array.\n     * @param array2  the second array whose elements are added to the new array.\n     * @return The new boolean[] array.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.addAll(char[], char[])",
        "snippet": "    public static char[] addAll(char[] array1, char[] array2) {\n        if (array1 == null) {\n            return clone(array2);\n        } else if (array2 == null) {\n            return clone(array1);\n        }\n        char[] joinedArray = new char[array1.length + array2.length];\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
        "begin_line": 3022,
        "end_line": 3032,
        "comment": "\n     * <p>Adds all the elements of the given arrays into a new array.</p>\n     * <p>The new array contains all of the element of <code>array1</code> followed\n     * by all of the elements <code>array2</code>. When an array is returned, it is always\n     * a new array.</p>\n     *\n     * <pre>\n     * ArrayUtils.addAll(array1, null)   = cloned copy of array1\n     * ArrayUtils.addAll(null, array2)   = cloned copy of array2\n     * ArrayUtils.addAll([], [])         = []\n     * </pre>\n     *\n     * @param array1  the first array whose elements are added to the new array.\n     * @param array2  the second array whose elements are added to the new array.\n     * @return The new char[] array.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.addAll(byte[], byte[])",
        "snippet": "    public static byte[] addAll(byte[] array1, byte[] array2) {\n        if (array1 == null) {\n            return clone(array2);\n        } else if (array2 == null) {\n            return clone(array1);\n        }\n        byte[] joinedArray = new byte[array1.length + array2.length];\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
        "begin_line": 3051,
        "end_line": 3061,
        "comment": "\n     * <p>Adds all the elements of the given arrays into a new array.</p>\n     * <p>The new array contains all of the element of <code>array1</code> followed\n     * by all of the elements <code>array2</code>. When an array is returned, it is always\n     * a new array.</p>\n     *\n     * <pre>\n     * ArrayUtils.addAll(array1, null)   = cloned copy of array1\n     * ArrayUtils.addAll(null, array2)   = cloned copy of array2\n     * ArrayUtils.addAll([], [])         = []\n     * </pre>\n     *\n     * @param array1  the first array whose elements are added to the new array.\n     * @param array2  the second array whose elements are added to the new array.\n     * @return The new byte[] array.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.addAll(short[], short[])",
        "snippet": "    public static short[] addAll(short[] array1, short[] array2) {\n        if (array1 == null) {\n            return clone(array2);\n        } else if (array2 == null) {\n            return clone(array1);\n        }\n        short[] joinedArray = new short[array1.length + array2.length];\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
        "begin_line": 3080,
        "end_line": 3090,
        "comment": "\n     * <p>Adds all the elements of the given arrays into a new array.</p>\n     * <p>The new array contains all of the element of <code>array1</code> followed\n     * by all of the elements <code>array2</code>. When an array is returned, it is always\n     * a new array.</p>\n     *\n     * <pre>\n     * ArrayUtils.addAll(array1, null)   = cloned copy of array1\n     * ArrayUtils.addAll(null, array2)   = cloned copy of array2\n     * ArrayUtils.addAll([], [])         = []\n     * </pre>\n     *\n     * @param array1  the first array whose elements are added to the new array.\n     * @param array2  the second array whose elements are added to the new array.\n     * @return The new short[] array.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.addAll(int[], int[])",
        "snippet": "    public static int[] addAll(int[] array1, int[] array2) {\n        if (array1 == null) {\n            return clone(array2);\n        } else if (array2 == null) {\n            return clone(array1);\n        }\n        int[] joinedArray = new int[array1.length + array2.length];\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
        "begin_line": 3109,
        "end_line": 3119,
        "comment": "\n     * <p>Adds all the elements of the given arrays into a new array.</p>\n     * <p>The new array contains all of the element of <code>array1</code> followed\n     * by all of the elements <code>array2</code>. When an array is returned, it is always\n     * a new array.</p>\n     *\n     * <pre>\n     * ArrayUtils.addAll(array1, null)   = cloned copy of array1\n     * ArrayUtils.addAll(null, array2)   = cloned copy of array2\n     * ArrayUtils.addAll([], [])         = []\n     * </pre>\n     *\n     * @param array1  the first array whose elements are added to the new array.\n     * @param array2  the second array whose elements are added to the new array.\n     * @return The new int[] array.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.addAll(long[], long[])",
        "snippet": "    public static long[] addAll(long[] array1, long[] array2) {\n        if (array1 == null) {\n            return clone(array2);\n        } else if (array2 == null) {\n            return clone(array1);\n        }\n        long[] joinedArray = new long[array1.length + array2.length];\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
        "begin_line": 3138,
        "end_line": 3148,
        "comment": "\n     * <p>Adds all the elements of the given arrays into a new array.</p>\n     * <p>The new array contains all of the element of <code>array1</code> followed\n     * by all of the elements <code>array2</code>. When an array is returned, it is always\n     * a new array.</p>\n     *\n     * <pre>\n     * ArrayUtils.addAll(array1, null)   = cloned copy of array1\n     * ArrayUtils.addAll(null, array2)   = cloned copy of array2\n     * ArrayUtils.addAll([], [])         = []\n     * </pre>\n     *\n     * @param array1  the first array whose elements are added to the new array.\n     * @param array2  the second array whose elements are added to the new array.\n     * @return The new long[] array.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.addAll(float[], float[])",
        "snippet": "    public static float[] addAll(float[] array1, float[] array2) {\n        if (array1 == null) {\n            return clone(array2);\n        } else if (array2 == null) {\n            return clone(array1);\n        }\n        float[] joinedArray = new float[array1.length + array2.length];\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
        "begin_line": 3167,
        "end_line": 3177,
        "comment": "\n     * <p>Adds all the elements of the given arrays into a new array.</p>\n     * <p>The new array contains all of the element of <code>array1</code> followed\n     * by all of the elements <code>array2</code>. When an array is returned, it is always\n     * a new array.</p>\n     *\n     * <pre>\n     * ArrayUtils.addAll(array1, null)   = cloned copy of array1\n     * ArrayUtils.addAll(null, array2)   = cloned copy of array2\n     * ArrayUtils.addAll([], [])         = []\n     * </pre>\n     *\n     * @param array1  the first array whose elements are added to the new array.\n     * @param array2  the second array whose elements are added to the new array.\n     * @return The new float[] array.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.addAll(double[], double[])",
        "snippet": "    public static double[] addAll(double[] array1, double[] array2) {\n        if (array1 == null) {\n            return clone(array2);\n        } else if (array2 == null) {\n            return clone(array1);\n        }\n        double[] joinedArray = new double[array1.length + array2.length];\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
        "begin_line": 3196,
        "end_line": 3206,
        "comment": "\n     * <p>Adds all the elements of the given arrays into a new array.</p>\n     * <p>The new array contains all of the element of <code>array1</code> followed\n     * by all of the elements <code>array2</code>. When an array is returned, it is always\n     * a new array.</p>\n     *\n     * <pre>\n     * ArrayUtils.addAll(array1, null)   = cloned copy of array1\n     * ArrayUtils.addAll(null, array2)   = cloned copy of array2\n     * ArrayUtils.addAll([], [])         = []\n     * </pre>\n     *\n     * @param array1  the first array whose elements are added to the new array.\n     * @param array2  the second array whose elements are added to the new array.\n     * @return The new double[] array.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.add(java.lang.Object[], java.lang.Object)",
        "snippet": "    public static Object[] add(Object[] array, Object element) {\n        Class type = (array != null ? array.getClass() : (element != null ? element.getClass() : Object.class));\n        Object[] newArray = (Object[]) copyArrayGrow1(array, type);\n        newArray[newArray.length - 1] = element;\n        return newArray;\n    }",
        "begin_line": 3231,
        "end_line": 3236,
        "comment": "\n     * <p>Copies the given array and adds the given element at the end of the new array.</p>\n     *\n     * <p>The new array contains the same elements of the input\n     * array plus the given element in the last position. The component type of \n     * the new array is the same as that of the input array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     * \n     * <pre>\n     * ArrayUtils.add(null, null)      = [null]\n     * ArrayUtils.add(null, \"a\")       = [\"a\"]\n     * ArrayUtils.add([\"a\"], null)     = [\"a\", null]\n     * ArrayUtils.add([\"a\"], \"b\")      = [\"a\", \"b\"]\n     * ArrayUtils.add([\"a\", \"b\"], \"c\") = [\"a\", \"b\", \"c\"]\n     * </pre>\n     * \n     * @param array  the array to \"add\" the element to, may be <code>null</code>\n     * @param element  the object to add\n     * @return A new array containing the existing elements plus the new element\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.add(boolean[], boolean)",
        "snippet": "    public static boolean[] add(boolean[] array, boolean element) {\n        boolean[] newArray = (boolean[])copyArrayGrow1(array, Boolean.TYPE);\n        newArray[newArray.length - 1] = element;\n        return newArray;\n    }",
        "begin_line": 3259,
        "end_line": 3263,
        "comment": "\n     * <p>Copies the given array and adds the given element at the end of the new array.</p>\n     *\n     * <p>The new array contains the same elements of the input\n     * array plus the given element in the last position. The component type of \n     * the new array is the same as that of the input array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     * \n     * <pre>\n     * ArrayUtils.add(null, true)          = [true]\n     * ArrayUtils.add([true], false)       = [true, false]\n     * ArrayUtils.add([true, false], true) = [true, false, true]\n     * </pre>\n     * \n     * @param array  the array to copy and add the element to, may be <code>null</code>\n     * @param element  the object to add at the last index of the new array\n     * @return A new array containing the existing elements plus the new element\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.add(byte[], byte)",
        "snippet": "    public static byte[] add(byte[] array, byte element) {\n        byte[] newArray = (byte[])copyArrayGrow1(array, Byte.TYPE);\n        newArray[newArray.length - 1] = element;\n        return newArray;\n    }",
        "begin_line": 3286,
        "end_line": 3290,
        "comment": "\n     * <p>Copies the given array and adds the given element at the end of the new array.</p>\n     *\n     * <p>The new array contains the same elements of the input\n     * array plus the given element in the last position. The component type of \n     * the new array is the same as that of the input array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     * \n     * <pre>\n     * ArrayUtils.add(null, 0)   = [0]\n     * ArrayUtils.add([1], 0)    = [1, 0]\n     * ArrayUtils.add([1, 0], 1) = [1, 0, 1]\n     * </pre>\n     * \n     * @param array  the array to copy and add the element to, may be <code>null</code>\n     * @param element  the object to add at the last index of the new array\n     * @return A new array containing the existing elements plus the new element\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.add(char[], char)",
        "snippet": "    public static char[] add(char[] array, char element) {\n        char[] newArray = (char[])copyArrayGrow1(array, Character.TYPE);\n        newArray[newArray.length - 1] = element;\n        return newArray;\n    }",
        "begin_line": 3313,
        "end_line": 3317,
        "comment": "\n     * <p>Copies the given array and adds the given element at the end of the new array.</p>\n     *\n     * <p>The new array contains the same elements of the input\n     * array plus the given element in the last position. The component type of \n     * the new array is the same as that of the input array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     * \n     * <pre>\n     * ArrayUtils.add(null, '0')       = ['0']\n     * ArrayUtils.add(['1'], '0')      = ['1', '0']\n     * ArrayUtils.add(['1', '0'], '1') = ['1', '0', '1']\n     * </pre>\n     * \n     * @param array  the array to copy and add the element to, may be <code>null</code>\n     * @param element  the object to add at the last index of the new array\n     * @return A new array containing the existing elements plus the new element\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.add(double[], double)",
        "snippet": "    public static double[] add(double[] array, double element) {\n        double[] newArray = (double[])copyArrayGrow1(array, Double.TYPE);\n        newArray[newArray.length - 1] = element;\n        return newArray;\n    }",
        "begin_line": 3340,
        "end_line": 3344,
        "comment": "\n     * <p>Copies the given array and adds the given element at the end of the new array.</p>\n     *\n     * <p>The new array contains the same elements of the input\n     * array plus the given element in the last position. The component type of \n     * the new array is the same as that of the input array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     * \n     * <pre>\n     * ArrayUtils.add(null, 0)   = [0]\n     * ArrayUtils.add([1], 0)    = [1, 0]\n     * ArrayUtils.add([1, 0], 1) = [1, 0, 1]\n     * </pre>\n     * \n     * @param array  the array to copy and add the element to, may be <code>null</code>\n     * @param element  the object to add at the last index of the new array\n     * @return A new array containing the existing elements plus the new element\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.add(float[], float)",
        "snippet": "    public static float[] add(float[] array, float element) {\n        float[] newArray = (float[])copyArrayGrow1(array, Float.TYPE);\n        newArray[newArray.length - 1] = element;\n        return newArray;\n    }",
        "begin_line": 3367,
        "end_line": 3371,
        "comment": "\n     * <p>Copies the given array and adds the given element at the end of the new array.</p>\n     *\n     * <p>The new array contains the same elements of the input\n     * array plus the given element in the last position. The component type of \n     * the new array is the same as that of the input array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     * \n     * <pre>\n     * ArrayUtils.add(null, 0)   = [0]\n     * ArrayUtils.add([1], 0)    = [1, 0]\n     * ArrayUtils.add([1, 0], 1) = [1, 0, 1]\n     * </pre>\n     * \n     * @param array  the array to copy and add the element to, may be <code>null</code>\n     * @param element  the object to add at the last index of the new array\n     * @return A new array containing the existing elements plus the new element\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.add(int[], int)",
        "snippet": "    public static int[] add(int[] array, int element) {\n        int[] newArray = (int[])copyArrayGrow1(array, Integer.TYPE);\n        newArray[newArray.length - 1] = element;\n        return newArray;\n    }",
        "begin_line": 3394,
        "end_line": 3398,
        "comment": "\n     * <p>Copies the given array and adds the given element at the end of the new array.</p>\n     *\n     * <p>The new array contains the same elements of the input\n     * array plus the given element in the last position. The component type of \n     * the new array is the same as that of the input array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     * \n     * <pre>\n     * ArrayUtils.add(null, 0)   = [0]\n     * ArrayUtils.add([1], 0)    = [1, 0]\n     * ArrayUtils.add([1, 0], 1) = [1, 0, 1]\n     * </pre>\n     * \n     * @param array  the array to copy and add the element to, may be <code>null</code>\n     * @param element  the object to add at the last index of the new array\n     * @return A new array containing the existing elements plus the new element\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.add(long[], long)",
        "snippet": "    public static long[] add(long[] array, long element) {\n        long[] newArray = (long[])copyArrayGrow1(array, Long.TYPE);\n        newArray[newArray.length - 1] = element;\n        return newArray;\n    }",
        "begin_line": 3421,
        "end_line": 3425,
        "comment": "\n     * <p>Copies the given array and adds the given element at the end of the new array.</p>\n     *\n     * <p>The new array contains the same elements of the input\n     * array plus the given element in the last position. The component type of \n     * the new array is the same as that of the input array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     * \n     * <pre>\n     * ArrayUtils.add(null, 0)   = [0]\n     * ArrayUtils.add([1], 0)    = [1, 0]\n     * ArrayUtils.add([1, 0], 1) = [1, 0, 1]\n     * </pre>\n     * \n     * @param array  the array to copy and add the element to, may be <code>null</code>\n     * @param element  the object to add at the last index of the new array\n     * @return A new array containing the existing elements plus the new element\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.add(short[], short)",
        "snippet": "    public static short[] add(short[] array, short element) {\n        short[] newArray = (short[])copyArrayGrow1(array, Short.TYPE);\n        newArray[newArray.length - 1] = element;\n        return newArray;\n    }",
        "begin_line": 3448,
        "end_line": 3452,
        "comment": "\n     * <p>Copies the given array and adds the given element at the end of the new array.</p>\n     *\n     * <p>The new array contains the same elements of the input\n     * array plus the given element in the last position. The component type of \n     * the new array is the same as that of the input array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     * \n     * <pre>\n     * ArrayUtils.add(null, 0)   = [0]\n     * ArrayUtils.add([1], 0)    = [1, 0]\n     * ArrayUtils.add([1, 0], 1) = [1, 0, 1]\n     * </pre>\n     * \n     * @param array  the array to copy and add the element to, may be <code>null</code>\n     * @param element  the object to add at the last index of the new array\n     * @return A new array containing the existing elements plus the new element\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.copyArrayGrow1(java.lang.Object, java.lang.Class)",
        "snippet": "    private static Object copyArrayGrow1(Object array, Class newArrayComponentType) {\n        if (array != null) {\n            int arrayLength = Array.getLength(array);\n            Object newArray = Array.newInstance(array.getClass().getComponentType(), arrayLength + 1);\n            System.arraycopy(array, 0, newArray, 0, arrayLength);\n            return newArray;\n        }\n        return Array.newInstance(newArrayComponentType, 1);\n    }",
        "begin_line": 3463,
        "end_line": 3471,
        "comment": "\n     * Returns a copy of the given array of size 1 greater than the argument. \n     * The last value of the array is left to the default value.\n     * \n     * @param array The array to copy, must not be <code>null</code>.\n     * @param newArrayComponentType If <code>array</code> is <code>null</code>, create a \n     * size 1 array of this type.\n     * @return A new copy of the array of size 1 greater than the input.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.add(java.lang.Object[], int, java.lang.Object)",
        "snippet": "    public static Object[] add(Object[] array, int index, Object element) {\n        Class clss = null;\n        if(array != null) {\n            clss = array.getClass().getComponentType();\n        } else\n        if(element != null) {\n            clss = element.getClass();\n        } else {\n            return new Object[] { null };\n        }\n        return (Object[]) add( array, index, element, clss );\n    }",
        "begin_line": 3501,
        "end_line": 3512,
        "comment": "\n     * <p>Inserts the specified element at the specified position in the array. \n     * Shifts the element currently at that position (if any) and any subsequent\n     * elements to the right (adds one to their indices).</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array plus the given element on the specified position. The component \n     * type of the returned array is always the same as that of the input \n     * array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     * \n     * <pre>\n     * ArrayUtils.add(null, 0, null)      = [null]\n     * ArrayUtils.add(null, 0, \"a\")       = [\"a\"]\n     * ArrayUtils.add([\"a\"], 1, null)     = [\"a\", null]\n     * ArrayUtils.add([\"a\"], 1, \"b\")      = [\"a\", \"b\"]\n     * ArrayUtils.add([\"a\", \"b\"], 3, \"c\") = [\"a\", \"b\", \"c\"]\n     * </pre>\n     * \n     * @param array  the array to add the element to, may be <code>null</code>\n     * @param index  the position of the new object\n     * @param element  the object to add\n     * @return A new array containing the existing elements and the new element\n     * @throws IndexOutOfBoundsException if the index is out of range \n     * (index < 0 || index > array.length).\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.add(boolean[], int, boolean)",
        "snippet": "    public static boolean[] add(boolean[] array, int index, boolean element) {\n        return (boolean[]) add( array, index, BooleanUtils.toBooleanObject(element), Boolean.TYPE );\n    }",
        "begin_line": 3541,
        "end_line": 3543,
        "comment": "\n     * <p>Inserts the specified element at the specified position in the array. \n     * Shifts the element currently at that position (if any) and any subsequent\n     * elements to the right (adds one to their indices).</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array plus the given element on the specified position. The component \n     * type of the returned array is always the same as that of the input \n     * array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     * \n     * <pre>\n     * ArrayUtils.add(null, 0, true)          = [true]\n     * ArrayUtils.add([true], 0, false)       = [false, true]\n     * ArrayUtils.add([false], 1, true)       = [false, true]\n     * ArrayUtils.add([true, false], 1, true) = [true, true, false]\n     * </pre>\n     * \n     * @param array  the array to add the element to, may be <code>null</code>\n     * @param index  the position of the new object\n     * @param element  the object to add\n     * @return A new array containing the existing elements and the new element\n     * @throws IndexOutOfBoundsException if the index is out of range \n     * (index < 0 || index > array.length).\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.add(char[], int, char)",
        "snippet": "    public static char[] add(char[] array, int index, char element) {\n        return (char[]) add( array, index, new Character(element), Character.TYPE );\n    }",
        "begin_line": 3573,
        "end_line": 3575,
        "comment": "\n     * <p>Inserts the specified element at the specified position in the array. \n     * Shifts the element currently at that position (if any) and any subsequent\n     * elements to the right (adds one to their indices).</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array plus the given element on the specified position. The component \n     * type of the returned array is always the same as that of the input \n     * array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     * \n     * <pre>\n     * ArrayUtils.add(null, 0, 'a')            = ['a']\n     * ArrayUtils.add(['a'], 0, 'b')           = ['b', 'a']\n     * ArrayUtils.add(['a', 'b'], 0, 'c')      = ['c', 'a', 'b']\n     * ArrayUtils.add(['a', 'b'], 1, 'k')      = ['a', 'k', 'b']\n     * ArrayUtils.add(['a', 'b', 'c'], 1, 't') = ['a', 't', 'b', 'c']\n     * </pre>\n     * \n     * @param array  the array to add the element to, may be <code>null</code>\n     * @param index  the position of the new object\n     * @param element  the object to add\n     * @return A new array containing the existing elements and the new element\n     * @throws IndexOutOfBoundsException if the index is out of range \n     * (index < 0 || index > array.length).\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.add(byte[], int, byte)",
        "snippet": "    public static byte[] add(byte[] array, int index, byte element) {\n        return (byte[]) add( array, index, new Byte(element), Byte.TYPE );\n    }",
        "begin_line": 3604,
        "end_line": 3606,
        "comment": "\n     * <p>Inserts the specified element at the specified position in the array. \n     * Shifts the element currently at that position (if any) and any subsequent\n     * elements to the right (adds one to their indices).</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array plus the given element on the specified position. The component \n     * type of the returned array is always the same as that of the input \n     * array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     * \n     * <pre>\n     * ArrayUtils.add([1], 0, 2)         = [2, 1]\n     * ArrayUtils.add([2, 6], 2, 3)      = [2, 6, 3]\n     * ArrayUtils.add([2, 6], 0, 1)      = [1, 2, 6]\n     * ArrayUtils.add([2, 6, 3], 2, 1)   = [2, 6, 1, 3]\n     * </pre>\n     * \n     * @param array  the array to add the element to, may be <code>null</code>\n     * @param index  the position of the new object\n     * @param element  the object to add\n     * @return A new array containing the existing elements and the new element\n     * @throws IndexOutOfBoundsException if the index is out of range \n     * (index < 0 || index > array.length).\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.add(short[], int, short)",
        "snippet": "    public static short[] add(short[] array, int index, short element) {\n        return (short[]) add( array, index, new Short(element), Short.TYPE );\n    }",
        "begin_line": 3635,
        "end_line": 3637,
        "comment": "\n     * <p>Inserts the specified element at the specified position in the array. \n     * Shifts the element currently at that position (if any) and any subsequent\n     * elements to the right (adds one to their indices).</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array plus the given element on the specified position. The component \n     * type of the returned array is always the same as that of the input \n     * array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     * \n     * <pre>\n     * ArrayUtils.add([1], 0, 2)         = [2, 1]\n     * ArrayUtils.add([2, 6], 2, 10)     = [2, 6, 10]\n     * ArrayUtils.add([2, 6], 0, -4)     = [-4, 2, 6]\n     * ArrayUtils.add([2, 6, 3], 2, 1)   = [2, 6, 1, 3]\n     * </pre>\n     * \n     * @param array  the array to add the element to, may be <code>null</code>\n     * @param index  the position of the new object\n     * @param element  the object to add\n     * @return A new array containing the existing elements and the new element\n     * @throws IndexOutOfBoundsException if the index is out of range \n     * (index < 0 || index > array.length).\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.add(int[], int, int)",
        "snippet": "    public static int[] add(int[] array, int index, int element) {\n        return (int[]) add( array, index, new Integer(element), Integer.TYPE );\n    }",
        "begin_line": 3666,
        "end_line": 3668,
        "comment": "\n     * <p>Inserts the specified element at the specified position in the array. \n     * Shifts the element currently at that position (if any) and any subsequent\n     * elements to the right (adds one to their indices).</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array plus the given element on the specified position. The component \n     * type of the returned array is always the same as that of the input \n     * array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     * \n     * <pre>\n     * ArrayUtils.add([1], 0, 2)         = [2, 1]\n     * ArrayUtils.add([2, 6], 2, 10)     = [2, 6, 10]\n     * ArrayUtils.add([2, 6], 0, -4)     = [-4, 2, 6]\n     * ArrayUtils.add([2, 6, 3], 2, 1)   = [2, 6, 1, 3]\n     * </pre>\n     * \n     * @param array  the array to add the element to, may be <code>null</code>\n     * @param index  the position of the new object\n     * @param element  the object to add\n     * @return A new array containing the existing elements and the new element\n     * @throws IndexOutOfBoundsException if the index is out of range \n     * (index < 0 || index > array.length).\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.add(long[], int, long)",
        "snippet": "    public static long[] add(long[] array, int index, long element) {\n        return (long[]) add( array, index, new Long(element), Long.TYPE );\n    }",
        "begin_line": 3697,
        "end_line": 3699,
        "comment": "\n     * <p>Inserts the specified element at the specified position in the array. \n     * Shifts the element currently at that position (if any) and any subsequent\n     * elements to the right (adds one to their indices).</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array plus the given element on the specified position. The component \n     * type of the returned array is always the same as that of the input \n     * array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     * \n     * <pre>\n     * ArrayUtils.add([1L], 0, 2L)           = [2L, 1L]\n     * ArrayUtils.add([2L, 6L], 2, 10L)      = [2L, 6L, 10L]\n     * ArrayUtils.add([2L, 6L], 0, -4L)      = [-4L, 2L, 6L]\n     * ArrayUtils.add([2L, 6L, 3L], 2, 1L)   = [2L, 6L, 1L, 3L]\n     * </pre>\n     * \n     * @param array  the array to add the element to, may be <code>null</code>\n     * @param index  the position of the new object\n     * @param element  the object to add\n     * @return A new array containing the existing elements and the new element\n     * @throws IndexOutOfBoundsException if the index is out of range \n     * (index < 0 || index > array.length).\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.add(float[], int, float)",
        "snippet": "    public static float[] add(float[] array, int index, float element) {\n        return (float[]) add( array, index, new Float(element), Float.TYPE );\n    }",
        "begin_line": 3728,
        "end_line": 3730,
        "comment": "\n     * <p>Inserts the specified element at the specified position in the array. \n     * Shifts the element currently at that position (if any) and any subsequent\n     * elements to the right (adds one to their indices).</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array plus the given element on the specified position. The component \n     * type of the returned array is always the same as that of the input \n     * array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     * \n     * <pre>\n     * ArrayUtils.add([1.1f], 0, 2.2f)               = [2.2f, 1.1f]\n     * ArrayUtils.add([2.3f, 6.4f], 2, 10.5f)        = [2.3f, 6.4f, 10.5f]\n     * ArrayUtils.add([2.6f, 6.7f], 0, -4.8f)        = [-4.8f, 2.6f, 6.7f]\n     * ArrayUtils.add([2.9f, 6.0f, 0.3f], 2, 1.0f)   = [2.9f, 6.0f, 1.0f, 0.3f]\n     * </pre>\n     * \n     * @param array  the array to add the element to, may be <code>null</code>\n     * @param index  the position of the new object\n     * @param element  the object to add\n     * @return A new array containing the existing elements and the new element\n     * @throws IndexOutOfBoundsException if the index is out of range \n     * (index < 0 || index > array.length).\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.add(double[], int, double)",
        "snippet": "    public static double[] add(double[] array, int index, double element) {\n        return (double[]) add( array, index, new Double(element), Double.TYPE );\n    }",
        "begin_line": 3759,
        "end_line": 3761,
        "comment": "\n     * <p>Inserts the specified element at the specified position in the array. \n     * Shifts the element currently at that position (if any) and any subsequent\n     * elements to the right (adds one to their indices).</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array plus the given element on the specified position. The component \n     * type of the returned array is always the same as that of the input \n     * array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     * \n     * <pre>\n     * ArrayUtils.add([1.1], 0, 2.2)              = [2.2, 1.1]\n     * ArrayUtils.add([2.3, 6.4], 2, 10.5)        = [2.3, 6.4, 10.5]\n     * ArrayUtils.add([2.6, 6.7], 0, -4.8)        = [-4.8, 2.6, 6.7]\n     * ArrayUtils.add([2.9, 6.0, 0.3], 2, 1.0)    = [2.9, 6.0, 1.0, 0.3]\n     * </pre>\n     * \n     * @param array  the array to add the element to, may be <code>null</code>\n     * @param index  the position of the new object\n     * @param element  the object to add\n     * @return A new array containing the existing elements and the new element\n     * @throws IndexOutOfBoundsException if the index is out of range \n     * (index < 0 || index > array.length).\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.add(java.lang.Object, int, java.lang.Object, java.lang.Class)",
        "snippet": "    private static Object add(Object array, int index, Object element, Class clss) {\n        if (array == null) {\n            if (index != 0) {\n                throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: 0\");\n            }\n            Object joinedArray = Array.newInstance(clss, 1);\n            Array.set(joinedArray, 0, element);\n            return joinedArray;\n        }\n        int length = Array.getLength(array);\n        if (index > length || index < 0) {\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + length);\n        }\n        Object result = Array.newInstance(clss, length + 1);\n        System.arraycopy(array, 0, result, 0, index);\n        Array.set(result, index, element);\n        if (index < length) {\n            System.arraycopy(array, index, result, index + 1, length - index);\n        }\n        return result;\n    }",
        "begin_line": 3774,
        "end_line": 3794,
        "comment": "\n     * Underlying implementation of add(array, index, element) methods. \n     * The last parameter is the class, which may not equal element.getClass \n     * for primitives.\n     *\n     * @param array  the array to add the element to, may be <code>null</code>\n     * @param index  the position of the new object\n     * @param element  the object to add\n     * @param clss the type of the element being added\n     * @return A new array containing the existing elements and the new element\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.remove(java.lang.Object[], int)",
        "snippet": "    public static Object[] remove(Object[] array, int index) {\n        return (Object[]) remove((Object) array, index);\n    }",
        "begin_line": 3824,
        "end_line": 3826,
        "comment": "\n     * <p>Removes the element at the specified position from the specified array.\n     * All subsequent elements are shifted to the left (substracts one from\n     * their indices).</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array except the element on the specified position. The component \n     * type of the returned array is always the same as that of the input \n     * array.</p>\n     *\n     * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException\n     * will be thrown, because in that case no valid index can be specified.</p>\n     *\n     * <pre>\n     * ArrayUtils.remove([\"a\"], 0)           = []\n     * ArrayUtils.remove([\"a\", \"b\"], 0)      = [\"b\"]\n     * ArrayUtils.remove([\"a\", \"b\"], 1)      = [\"a\"]\n     * ArrayUtils.remove([\"a\", \"b\", \"c\"], 1) = [\"a\", \"c\"]\n     * </pre>\n     * \n     * @param array  the array to remove the element from, may not be <code>null</code>\n     * @param index  the position of the element to be removed\n     * @return A new array containing the existing elements except the element\n     *         at the specified position.\n     * @throws IndexOutOfBoundsException if the index is out of range \n     * (index < 0 || index >= array.length), or if the array is <code>null</code>.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.removeElement(java.lang.Object[], java.lang.Object)",
        "snippet": "    public static Object[] removeElement(Object[] array, Object element) {\n        int index = indexOf(array, element);\n        if (index == INDEX_NOT_FOUND) {\n            return clone(array);\n        } \n        return remove(array, index);\n    }",
        "begin_line": 3853,
        "end_line": 3859,
        "comment": "\n     * <p>Removes the first occurrence of the specified element from the\n     * specified array. All subsequent elements are shifted to the left \n     * (substracts one from their indices). If the array doesn't contains\n     * such an element, no elements are removed from the array.</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array except the first occurrence of the specified element. The component \n     * type of the returned array is always the same as that of the input \n     * array.</p>\n     *\n     * <pre>\n     * ArrayUtils.removeElement(null, \"a\")            = null\n     * ArrayUtils.removeElement([], \"a\")              = []\n     * ArrayUtils.removeElement([\"a\"], \"b\")           = [\"a\"]\n     * ArrayUtils.removeElement([\"a\", \"b\"], \"a\")      = [\"b\"]\n     * ArrayUtils.removeElement([\"a\", \"b\", \"a\"], \"a\") = [\"b\", \"a\"]\n     * </pre>\n     * \n     * @param array  the array to remove the element from, may be <code>null</code>\n     * @param element  the element to be removed\n     * @return A new array containing the existing elements except the first\n     *         occurrence of the specified element.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.remove(boolean[], int)",
        "snippet": "    public static boolean[] remove(boolean[] array, int index) {\n        return (boolean[]) remove((Object) array, index);\n    }",
        "begin_line": 3889,
        "end_line": 3891,
        "comment": "\n     * <p>Removes the element at the specified position from the specified array.\n     * All subsequent elements are shifted to the left (substracts one from\n     * their indices).</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array except the element on the specified position. The component \n     * type of the returned array is always the same as that of the input \n     * array.</p>\n     *\n     * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException\n     * will be thrown, because in that case no valid index can be specified.</p>\n     *\n     * <pre>\n     * ArrayUtils.remove([true], 0)              = []\n     * ArrayUtils.remove([true, false], 0)       = [false]\n     * ArrayUtils.remove([true, false], 1)       = [true]\n     * ArrayUtils.remove([true, true, false], 1) = [true, false]\n     * </pre>\n     * \n     * @param array  the array to remove the element from, may not be <code>null</code>\n     * @param index  the position of the element to be removed\n     * @return A new array containing the existing elements except the element\n     *         at the specified position.\n     * @throws IndexOutOfBoundsException if the index is out of range \n     * (index < 0 || index >= array.length), or if the array is <code>null</code>.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.removeElement(boolean[], boolean)",
        "snippet": "    public static boolean[] removeElement(boolean[] array, boolean element) {\n        int index = indexOf(array, element);\n        if (index == INDEX_NOT_FOUND) {\n            return clone(array);\n        } \n        return remove(array, index);\n    }",
        "begin_line": 3918,
        "end_line": 3924,
        "comment": "\n     * <p>Removes the first occurrence of the specified element from the\n     * specified array. All subsequent elements are shifted to the left \n     * (substracts one from their indices). If the array doesn't contains\n     * such an element, no elements are removed from the array.</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array except the first occurrence of the specified element. The component \n     * type of the returned array is always the same as that of the input \n     * array.</p>\n     *\n     * <pre>\n     * ArrayUtils.removeElement(null, true)                = null\n     * ArrayUtils.removeElement([], true)                  = []\n     * ArrayUtils.removeElement([true], false)             = [true]\n     * ArrayUtils.removeElement([true, false], false)      = [true]\n     * ArrayUtils.removeElement([true, false, true], true) = [false, true]\n     * </pre>\n     * \n     * @param array  the array to remove the element from, may be <code>null</code>\n     * @param element  the element to be removed\n     * @return A new array containing the existing elements except the first\n     *         occurrence of the specified element.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.remove(byte[], int)",
        "snippet": "    public static byte[] remove(byte[] array, int index) {\n        return (byte[]) remove((Object) array, index);\n    }",
        "begin_line": 3954,
        "end_line": 3956,
        "comment": "\n     * <p>Removes the element at the specified position from the specified array.\n     * All subsequent elements are shifted to the left (substracts one from\n     * their indices).</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array except the element on the specified position. The component \n     * type of the returned array is always the same as that of the input \n     * array.</p>\n     *\n     * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException\n     * will be thrown, because in that case no valid index can be specified.</p>\n     *\n     * <pre>\n     * ArrayUtils.remove([1], 0)          = []\n     * ArrayUtils.remove([1, 0], 0)       = [0]\n     * ArrayUtils.remove([1, 0], 1)       = [1]\n     * ArrayUtils.remove([1, 0, 1], 1)    = [1, 1]\n     * </pre>\n     * \n     * @param array  the array to remove the element from, may not be <code>null</code>\n     * @param index  the position of the element to be removed\n     * @return A new array containing the existing elements except the element\n     *         at the specified position.\n     * @throws IndexOutOfBoundsException if the index is out of range \n     * (index < 0 || index >= array.length), or if the array is <code>null</code>.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.removeElement(byte[], byte)",
        "snippet": "    public static byte[] removeElement(byte[] array, byte element) {\n        int index = indexOf(array, element);\n        if (index == INDEX_NOT_FOUND) {\n            return clone(array);\n        } \n        return remove(array, index);\n    }",
        "begin_line": 3983,
        "end_line": 3989,
        "comment": "\n     * <p>Removes the first occurrence of the specified element from the\n     * specified array. All subsequent elements are shifted to the left \n     * (substracts one from their indices). If the array doesn't contains\n     * such an element, no elements are removed from the array.</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array except the first occurrence of the specified element. The component \n     * type of the returned array is always the same as that of the input \n     * array.</p>\n     *\n     * <pre>\n     * ArrayUtils.removeElement(null, 1)        = null\n     * ArrayUtils.removeElement([], 1)          = []\n     * ArrayUtils.removeElement([1], 0)         = [1]\n     * ArrayUtils.removeElement([1, 0], 0)      = [1]\n     * ArrayUtils.removeElement([1, 0, 1], 1)   = [0, 1]\n     * </pre>\n     * \n     * @param array  the array to remove the element from, may be <code>null</code>\n     * @param element  the element to be removed\n     * @return A new array containing the existing elements except the first\n     *         occurrence of the specified element.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.remove(char[], int)",
        "snippet": "    public static char[] remove(char[] array, int index) {\n        return (char[]) remove((Object) array, index);\n    }",
        "begin_line": 4019,
        "end_line": 4021,
        "comment": "\n     * <p>Removes the element at the specified position from the specified array.\n     * All subsequent elements are shifted to the left (substracts one from\n     * their indices).</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array except the element on the specified position. The component \n     * type of the returned array is always the same as that of the input \n     * array.</p>\n     *\n     * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException\n     * will be thrown, because in that case no valid index can be specified.</p>\n     *\n     * <pre>\n     * ArrayUtils.remove(['a'], 0)           = []\n     * ArrayUtils.remove(['a', 'b'], 0)      = ['b']\n     * ArrayUtils.remove(['a', 'b'], 1)      = ['a']\n     * ArrayUtils.remove(['a', 'b', 'c'], 1) = ['a', 'c']\n     * </pre>\n     * \n     * @param array  the array to remove the element from, may not be <code>null</code>\n     * @param index  the position of the element to be removed\n     * @return A new array containing the existing elements except the element\n     *         at the specified position.\n     * @throws IndexOutOfBoundsException if the index is out of range \n     * (index < 0 || index >= array.length), or if the array is <code>null</code>.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.removeElement(char[], char)",
        "snippet": "    public static char[] removeElement(char[] array, char element) {\n        int index = indexOf(array, element);\n        if (index == INDEX_NOT_FOUND) {\n            return clone(array);\n        } \n        return remove(array, index);\n    }",
        "begin_line": 4048,
        "end_line": 4054,
        "comment": "\n     * <p>Removes the first occurrence of the specified element from the\n     * specified array. All subsequent elements are shifted to the left \n     * (substracts one from their indices). If the array doesn't contains\n     * such an element, no elements are removed from the array.</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array except the first occurrence of the specified element. The component \n     * type of the returned array is always the same as that of the input \n     * array.</p>\n     *\n     * <pre>\n     * ArrayUtils.removeElement(null, 'a')            = null\n     * ArrayUtils.removeElement([], 'a')              = []\n     * ArrayUtils.removeElement(['a'], 'b')           = ['a']\n     * ArrayUtils.removeElement(['a', 'b'], 'a')      = ['b']\n     * ArrayUtils.removeElement(['a', 'b', 'a'], 'a') = ['b', 'a']\n     * </pre>\n     * \n     * @param array  the array to remove the element from, may be <code>null</code>\n     * @param element  the element to be removed\n     * @return A new array containing the existing elements except the first\n     *         occurrence of the specified element.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.remove(double[], int)",
        "snippet": "    public static double[] remove(double[] array, int index) {\n        return (double[]) remove((Object) array, index);\n    }",
        "begin_line": 4084,
        "end_line": 4086,
        "comment": "\n     * <p>Removes the element at the specified position from the specified array.\n     * All subsequent elements are shifted to the left (substracts one from\n     * their indices).</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array except the element on the specified position. The component \n     * type of the returned array is always the same as that of the input \n     * array.</p>\n     *\n     * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException\n     * will be thrown, because in that case no valid index can be specified.</p>\n     *\n     * <pre>\n     * ArrayUtils.remove([1.1], 0)           = []\n     * ArrayUtils.remove([2.5, 6.0], 0)      = [6.0]\n     * ArrayUtils.remove([2.5, 6.0], 1)      = [2.5]\n     * ArrayUtils.remove([2.5, 6.0, 3.8], 1) = [2.5, 3.8]\n     * </pre>\n     * \n     * @param array  the array to remove the element from, may not be <code>null</code>\n     * @param index  the position of the element to be removed\n     * @return A new array containing the existing elements except the element\n     *         at the specified position.\n     * @throws IndexOutOfBoundsException if the index is out of range \n     * (index < 0 || index >= array.length), or if the array is <code>null</code>.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.removeElement(double[], double)",
        "snippet": "    public static double[] removeElement(double[] array, double element) {\n        int index = indexOf(array, element);\n        if (index == INDEX_NOT_FOUND) {\n            return clone(array);\n        } \n        return remove(array, index);\n    }",
        "begin_line": 4113,
        "end_line": 4119,
        "comment": "\n     * <p>Removes the first occurrence of the specified element from the\n     * specified array. All subsequent elements are shifted to the left \n     * (substracts one from their indices). If the array doesn't contains\n     * such an element, no elements are removed from the array.</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array except the first occurrence of the specified element. The component \n     * type of the returned array is always the same as that of the input \n     * array.</p>\n     *\n     * <pre>\n     * ArrayUtils.removeElement(null, 1.1)            = null\n     * ArrayUtils.removeElement([], 1.1)              = []\n     * ArrayUtils.removeElement([1.1], 1.2)           = [1.1]\n     * ArrayUtils.removeElement([1.1, 2.3], 1.1)      = [2.3]\n     * ArrayUtils.removeElement([1.1, 2.3, 1.1], 1.1) = [2.3, 1.1]\n     * </pre>\n     * \n     * @param array  the array to remove the element from, may be <code>null</code>\n     * @param element  the element to be removed\n     * @return A new array containing the existing elements except the first\n     *         occurrence of the specified element.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.remove(float[], int)",
        "snippet": "    public static float[] remove(float[] array, int index) {\n        return (float[]) remove((Object) array, index);\n    }",
        "begin_line": 4149,
        "end_line": 4151,
        "comment": "\n     * <p>Removes the element at the specified position from the specified array.\n     * All subsequent elements are shifted to the left (substracts one from\n     * their indices).</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array except the element on the specified position. The component \n     * type of the returned array is always the same as that of the input \n     * array.</p>\n     *\n     * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException\n     * will be thrown, because in that case no valid index can be specified.</p>\n     *\n     * <pre>\n     * ArrayUtils.remove([1.1], 0)           = []\n     * ArrayUtils.remove([2.5, 6.0], 0)      = [6.0]\n     * ArrayUtils.remove([2.5, 6.0], 1)      = [2.5]\n     * ArrayUtils.remove([2.5, 6.0, 3.8], 1) = [2.5, 3.8]\n     * </pre>\n     * \n     * @param array  the array to remove the element from, may not be <code>null</code>\n     * @param index  the position of the element to be removed\n     * @return A new array containing the existing elements except the element\n     *         at the specified position.\n     * @throws IndexOutOfBoundsException if the index is out of range \n     * (index < 0 || index >= array.length), or if the array is <code>null</code>.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.removeElement(float[], float)",
        "snippet": "    public static float[] removeElement(float[] array, float element) {\n        int index = indexOf(array, element);\n        if (index == INDEX_NOT_FOUND) {\n            return clone(array);\n        } \n        return remove(array, index);\n    }",
        "begin_line": 4178,
        "end_line": 4184,
        "comment": "\n     * <p>Removes the first occurrence of the specified element from the\n     * specified array. All subsequent elements are shifted to the left \n     * (substracts one from their indices). If the array doesn't contains\n     * such an element, no elements are removed from the array.</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array except the first occurrence of the specified element. The component \n     * type of the returned array is always the same as that of the input \n     * array.</p>\n     *\n     * <pre>\n     * ArrayUtils.removeElement(null, 1.1)            = null\n     * ArrayUtils.removeElement([], 1.1)              = []\n     * ArrayUtils.removeElement([1.1], 1.2)           = [1.1]\n     * ArrayUtils.removeElement([1.1, 2.3], 1.1)      = [2.3]\n     * ArrayUtils.removeElement([1.1, 2.3, 1.1], 1.1) = [2.3, 1.1]\n     * </pre>\n     * \n     * @param array  the array to remove the element from, may be <code>null</code>\n     * @param element  the element to be removed\n     * @return A new array containing the existing elements except the first\n     *         occurrence of the specified element.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.remove(int[], int)",
        "snippet": "    public static int[] remove(int[] array, int index) {\n        return (int[]) remove((Object) array, index);\n    }",
        "begin_line": 4214,
        "end_line": 4216,
        "comment": "\n     * <p>Removes the element at the specified position from the specified array.\n     * All subsequent elements are shifted to the left (substracts one from\n     * their indices).</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array except the element on the specified position. The component \n     * type of the returned array is always the same as that of the input \n     * array.</p>\n     *\n     * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException\n     * will be thrown, because in that case no valid index can be specified.</p>\n     *\n     * <pre>\n     * ArrayUtils.remove([1], 0)         = []\n     * ArrayUtils.remove([2, 6], 0)      = [6]\n     * ArrayUtils.remove([2, 6], 1)      = [2]\n     * ArrayUtils.remove([2, 6, 3], 1)   = [2, 3]\n     * </pre>\n     * \n     * @param array  the array to remove the element from, may not be <code>null</code>\n     * @param index  the position of the element to be removed\n     * @return A new array containing the existing elements except the element\n     *         at the specified position.\n     * @throws IndexOutOfBoundsException if the index is out of range \n     * (index < 0 || index >= array.length), or if the array is <code>null</code>.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.removeElement(int[], int)",
        "snippet": "    public static int[] removeElement(int[] array, int element) {\n        int index = indexOf(array, element);\n        if (index == INDEX_NOT_FOUND) {\n            return clone(array);\n        } \n        return remove(array, index);\n    }",
        "begin_line": 4243,
        "end_line": 4249,
        "comment": "\n     * <p>Removes the first occurrence of the specified element from the\n     * specified array. All subsequent elements are shifted to the left \n     * (substracts one from their indices). If the array doesn't contains\n     * such an element, no elements are removed from the array.</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array except the first occurrence of the specified element. The component \n     * type of the returned array is always the same as that of the input \n     * array.</p>\n     *\n     * <pre>\n     * ArrayUtils.removeElement(null, 1)      = null\n     * ArrayUtils.removeElement([], 1)        = []\n     * ArrayUtils.removeElement([1], 2)       = [1]\n     * ArrayUtils.removeElement([1, 3], 1)    = [3]\n     * ArrayUtils.removeElement([1, 3, 1], 1) = [3, 1]\n     * </pre>\n     * \n     * @param array  the array to remove the element from, may be <code>null</code>\n     * @param element  the element to be removed\n     * @return A new array containing the existing elements except the first\n     *         occurrence of the specified element.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.remove(long[], int)",
        "snippet": "    public static long[] remove(long[] array, int index) {\n        return (long[]) remove((Object) array, index);\n    }",
        "begin_line": 4279,
        "end_line": 4281,
        "comment": "\n     * <p>Removes the element at the specified position from the specified array.\n     * All subsequent elements are shifted to the left (substracts one from\n     * their indices).</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array except the element on the specified position. The component \n     * type of the returned array is always the same as that of the input \n     * array.</p>\n     *\n     * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException\n     * will be thrown, because in that case no valid index can be specified.</p>\n     *\n     * <pre>\n     * ArrayUtils.remove([1], 0)         = []\n     * ArrayUtils.remove([2, 6], 0)      = [6]\n     * ArrayUtils.remove([2, 6], 1)      = [2]\n     * ArrayUtils.remove([2, 6, 3], 1)   = [2, 3]\n     * </pre>\n     * \n     * @param array  the array to remove the element from, may not be <code>null</code>\n     * @param index  the position of the element to be removed\n     * @return A new array containing the existing elements except the element\n     *         at the specified position.\n     * @throws IndexOutOfBoundsException if the index is out of range \n     * (index < 0 || index >= array.length), or if the array is <code>null</code>.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.removeElement(long[], long)",
        "snippet": "    public static long[] removeElement(long[] array, long element) {\n        int index = indexOf(array, element);\n        if (index == INDEX_NOT_FOUND) {\n            return clone(array);\n        } \n        return remove(array, index);\n    }",
        "begin_line": 4308,
        "end_line": 4314,
        "comment": "\n     * <p>Removes the first occurrence of the specified element from the\n     * specified array. All subsequent elements are shifted to the left \n     * (substracts one from their indices). If the array doesn't contains\n     * such an element, no elements are removed from the array.</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array except the first occurrence of the specified element. The component \n     * type of the returned array is always the same as that of the input \n     * array.</p>\n     *\n     * <pre>\n     * ArrayUtils.removeElement(null, 1)      = null\n     * ArrayUtils.removeElement([], 1)        = []\n     * ArrayUtils.removeElement([1], 2)       = [1]\n     * ArrayUtils.removeElement([1, 3], 1)    = [3]\n     * ArrayUtils.removeElement([1, 3, 1], 1) = [3, 1]\n     * </pre>\n     * \n     * @param array  the array to remove the element from, may be <code>null</code>\n     * @param element  the element to be removed\n     * @return A new array containing the existing elements except the first\n     *         occurrence of the specified element.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.remove(short[], int)",
        "snippet": "    public static short[] remove(short[] array, int index) {\n        return (short[]) remove((Object) array, index);\n    }",
        "begin_line": 4344,
        "end_line": 4346,
        "comment": "\n     * <p>Removes the element at the specified position from the specified array.\n     * All subsequent elements are shifted to the left (substracts one from\n     * their indices).</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array except the element on the specified position. The component \n     * type of the returned array is always the same as that of the input \n     * array.</p>\n     *\n     * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException\n     * will be thrown, because in that case no valid index can be specified.</p>\n     *\n     * <pre>\n     * ArrayUtils.remove([1], 0)         = []\n     * ArrayUtils.remove([2, 6], 0)      = [6]\n     * ArrayUtils.remove([2, 6], 1)      = [2]\n     * ArrayUtils.remove([2, 6, 3], 1)   = [2, 3]\n     * </pre>\n     * \n     * @param array  the array to remove the element from, may not be <code>null</code>\n     * @param index  the position of the element to be removed\n     * @return A new array containing the existing elements except the element\n     *         at the specified position.\n     * @throws IndexOutOfBoundsException if the index is out of range \n     * (index < 0 || index >= array.length), or if the array is <code>null</code>.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.removeElement(short[], short)",
        "snippet": "    public static short[] removeElement(short[] array, short element) {\n        int index = indexOf(array, element);\n        if (index == INDEX_NOT_FOUND) {\n            return clone(array);\n        } \n        return remove(array, index);\n    }",
        "begin_line": 4373,
        "end_line": 4379,
        "comment": "\n     * <p>Removes the first occurrence of the specified element from the\n     * specified array. All subsequent elements are shifted to the left \n     * (substracts one from their indices). If the array doesn't contains\n     * such an element, no elements are removed from the array.</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array except the first occurrence of the specified element. The component \n     * type of the returned array is always the same as that of the input \n     * array.</p>\n     *\n     * <pre>\n     * ArrayUtils.removeElement(null, 1)      = null\n     * ArrayUtils.removeElement([], 1)        = []\n     * ArrayUtils.removeElement([1], 2)       = [1]\n     * ArrayUtils.removeElement([1, 3], 1)    = [3]\n     * ArrayUtils.removeElement([1, 3, 1], 1) = [3, 1]\n     * </pre>\n     * \n     * @param array  the array to remove the element from, may be <code>null</code>\n     * @param element  the element to be removed\n     * @return A new array containing the existing elements except the first\n     *         occurrence of the specified element.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ArrayUtils.java",
        "class_name": "org.apache.commons.lang.ArrayUtils",
        "signature": "org.apache.commons.lang.ArrayUtils.remove(java.lang.Object, int)",
        "snippet": "    private static Object remove(Object array, int index) {\n        int length = getLength(array);\n        if (index < 0 || index >= length) {\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + length);\n        }\n        \n        Object result = Array.newInstance(array.getClass().getComponentType(), length - 1);\n        System.arraycopy(array, 0, result, 0, index);\n        if (index < length - 1) {\n            System.arraycopy(array, index + 1, result, index, length - index - 1);\n        }\n        \n        return result;\n    }",
        "begin_line": 4402,
        "end_line": 4415,
        "comment": "\n     * <p>Removes the element at the specified position from the specified array.\n     * All subsequent elements are shifted to the left (substracts one from\n     * their indices).</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array except the element on the specified position. The component \n     * type of the returned array is always the same as that of the input \n     * array.</p>\n     *\n     * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException\n     * will be thrown, because in that case no valid index can be specified.</p>\n     * \n     * @param array  the array to remove the element from, may not be <code>null</code>\n     * @param index  the position of the element to be removed\n     * @return A new array containing the existing elements except the element\n     *         at the specified position.\n     * @throws IndexOutOfBoundsException if the index is out of range \n     * (index < 0 || index >= array.length), or if the array is <code>null</code>.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/SerializationException.java",
        "class_name": "org.apache.commons.lang.SerializationException",
        "signature": "org.apache.commons.lang.SerializationException.SerializationException()",
        "snippet": "    public SerializationException() {\n        super();\n    }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "\n     * <p>Constructs a new <code>SerializationException</code> without specified\n     * detail message.</p>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/SerializationException.java",
        "class_name": "org.apache.commons.lang.SerializationException",
        "signature": "org.apache.commons.lang.SerializationException.SerializationException(java.lang.String)",
        "snippet": "    public SerializationException(String msg) {\n        super(msg);\n    }",
        "begin_line": 53,
        "end_line": 55,
        "comment": "\n     * <p>Constructs a new <code>SerializationException</code> with specified\n     * detail message.</p>\n     *\n     * @param msg  The error message.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/SerializationException.java",
        "class_name": "org.apache.commons.lang.SerializationException",
        "signature": "org.apache.commons.lang.SerializationException.SerializationException(java.lang.Throwable)",
        "snippet": "    public SerializationException(Throwable cause) {\n        super(cause);\n    }",
        "begin_line": 64,
        "end_line": 66,
        "comment": "\n     * <p>Constructs a new <code>SerializationException</code> with specified\n     * nested <code>Throwable</code>.</p>\n     *\n     * @param cause  The <code>Exception</code> or <code>Error</code>\n     *  that caused this exception to be thrown.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/SerializationException.java",
        "class_name": "org.apache.commons.lang.SerializationException",
        "signature": "org.apache.commons.lang.SerializationException.SerializationException(java.lang.String, java.lang.Throwable)",
        "snippet": "    public SerializationException(String msg, Throwable cause) {\n        super(msg, cause);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * <p>Constructs a new <code>SerializationException</code> with specified\n     * detail message and nested <code>Throwable</code>.</p>\n     *\n     * @param msg    The error message.\n     * @param cause  The <code>Exception</code> or <code>Error</code>\n     *  that caused this exception to be thrown.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.StringUtils()",
        "snippet": "    public StringUtils() {\n        super();\n    }",
        "begin_line": 160,
        "end_line": 162,
        "comment": "\n     * <p><code>StringUtils</code> instances should NOT be constructed in\n     * standard programming. Instead, the class should be used as\n     * <code>StringUtils.trim(\" foo \");</code>.</p>\n     *\n     * <p>This constructor is public to permit tools that require a JavaBean\n     * instance to operate.</p>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.isEmpty(java.lang.String)",
        "snippet": "    public static boolean isEmpty(String str) {\n        return str == null || str.length() == 0;\n    }",
        "begin_line": 184,
        "end_line": 186,
        "comment": "\n     * <p>Checks if a String is empty (\"\") or null.</p>\n     *\n     * <pre>\n     * StringUtils.isEmpty(null)      = true\n     * StringUtils.isEmpty(\"\")        = true\n     * StringUtils.isEmpty(\" \")       = false\n     * StringUtils.isEmpty(\"bob\")     = false\n     * StringUtils.isEmpty(\"  bob  \") = false\n     * </pre>\n     *\n     * <p>NOTE: This method changed in Lang version 2.0.\n     * It no longer trims the String.\n     * That functionality is available in isBlank().</p>\n     *\n     * @param str  the String to check, may be null\n     * @return <code>true</code> if the String is empty or null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.isNotEmpty(java.lang.String)",
        "snippet": "    public static boolean isNotEmpty(String str) {\n        return !StringUtils.isEmpty(str);\n    }",
        "begin_line": 202,
        "end_line": 204,
        "comment": "\n     * <p>Checks if a String is not empty (\"\") and not null.</p>\n     *\n     * <pre>\n     * StringUtils.isNotEmpty(null)      = false\n     * StringUtils.isNotEmpty(\"\")        = false\n     * StringUtils.isNotEmpty(\" \")       = true\n     * StringUtils.isNotEmpty(\"bob\")     = true\n     * StringUtils.isNotEmpty(\"  bob  \") = true\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @return <code>true</code> if the String is not empty and not null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.isBlank(java.lang.String)",
        "snippet": "    public static boolean isBlank(String str) {\n        int strLen;\n        if (str == null || (strLen = str.length()) == 0) {\n            return true;\n        }\n        for (int i = 0; i < strLen; i++) {\n            if ((Character.isWhitespace(str.charAt(i)) == false)) {\n                return false;\n            }\n        }\n        return true;\n    }",
        "begin_line": 221,
        "end_line": 232,
        "comment": "\n     * <p>Checks if a String is whitespace, empty (\"\") or null.</p>\n     *\n     * <pre>\n     * StringUtils.isBlank(null)      = true\n     * StringUtils.isBlank(\"\")        = true\n     * StringUtils.isBlank(\" \")       = true\n     * StringUtils.isBlank(\"bob\")     = false\n     * StringUtils.isBlank(\"  bob  \") = false\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @return <code>true</code> if the String is null, empty or whitespace\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.isNotBlank(java.lang.String)",
        "snippet": "    public static boolean isNotBlank(String str) {\n        return !StringUtils.isBlank(str);\n    }",
        "begin_line": 250,
        "end_line": 252,
        "comment": "\n     * <p>Checks if a String is not empty (\"\"), not null and not whitespace only.</p>\n     *\n     * <pre>\n     * StringUtils.isNotBlank(null)      = false\n     * StringUtils.isNotBlank(\"\")        = false\n     * StringUtils.isNotBlank(\" \")       = false\n     * StringUtils.isNotBlank(\"bob\")     = true\n     * StringUtils.isNotBlank(\"  bob  \") = true\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @return <code>true</code> if the String is\n     *  not empty and not null and not whitespace\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.clean(java.lang.String)",
        "snippet": "    public static String clean(String str) {\n        return str == null ? EMPTY : str.trim();\n    }",
        "begin_line": 275,
        "end_line": 277,
        "comment": "\n     * <p>Removes control characters (char &lt;= 32) from both\n     * ends of this String, handling <code>null</code> by returning\n     * an empty String (\"\").</p>\n     *\n     * <pre>\n     * StringUtils.clean(null)          = \"\"\n     * StringUtils.clean(\"\")            = \"\"\n     * StringUtils.clean(\"abc\")         = \"abc\"\n     * StringUtils.clean(\"    abc    \") = \"abc\"\n     * StringUtils.clean(\"     \")       = \"\"\n     * </pre>\n     *\n     * @see java.lang.String#trim()\n     * @param str  the String to clean, may be null\n     * @return the trimmed text, never <code>null</code>\n     * @deprecated Use the clearer named {@link #trimToEmpty(String)}.\n     *             Method will be removed in Commons Lang 3.0.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.trim(java.lang.String)",
        "snippet": "    public static String trim(String str) {\n        return str == null ? null : str.trim();\n    }",
        "begin_line": 302,
        "end_line": 304,
        "comment": "\n     * <p>Removes control characters (char &lt;= 32) from both\n     * ends of this String, handling <code>null</code> by returning\n     * <code>null</code>.</p>\n     *\n     * <p>The String is trimmed using {@link String#trim()}.\n     * Trim removes start and end characters &lt;= 32.\n     * To strip whitespace use {@link #strip(String)}.</p>\n     *\n     * <p>To trim your choice of characters, use the\n     * {@link #strip(String, String)} methods.</p>\n     *\n     * <pre>\n     * StringUtils.trim(null)          = null\n     * StringUtils.trim(\"\")            = \"\"\n     * StringUtils.trim(\"     \")       = \"\"\n     * StringUtils.trim(\"abc\")         = \"abc\"\n     * StringUtils.trim(\"    abc    \") = \"abc\"\n     * </pre>\n     *\n     * @param str  the String to be trimmed, may be null\n     * @return the trimmed string, <code>null</code> if null String input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.trimToNull(java.lang.String)",
        "snippet": "    public static String trimToNull(String str) {\n        String ts = trim(str);\n        return isEmpty(ts) ? null : ts;\n    }",
        "begin_line": 328,
        "end_line": 331,
        "comment": "\n     * <p>Removes control characters (char &lt;= 32) from both\n     * ends of this String returning <code>null</code> if the String is\n     * empty (\"\") after the trim or if it is <code>null</code>.\n     *\n     * <p>The String is trimmed using {@link String#trim()}.\n     * Trim removes start and end characters &lt;= 32.\n     * To strip whitespace use {@link #stripToNull(String)}.</p>\n     *\n     * <pre>\n     * StringUtils.trimToNull(null)          = null\n     * StringUtils.trimToNull(\"\")            = null\n     * StringUtils.trimToNull(\"     \")       = null\n     * StringUtils.trimToNull(\"abc\")         = \"abc\"\n     * StringUtils.trimToNull(\"    abc    \") = \"abc\"\n     * </pre>\n     *\n     * @param str  the String to be trimmed, may be null\n     * @return the trimmed String,\n     *  <code>null</code> if only chars &lt;= 32, empty or null String input\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.trimToEmpty(java.lang.String)",
        "snippet": "    public static String trimToEmpty(String str) {\n        return str == null ? EMPTY : str.trim();\n    }",
        "begin_line": 354,
        "end_line": 356,
        "comment": "\n     * <p>Removes control characters (char &lt;= 32) from both\n     * ends of this String returning an empty String (\"\") if the String\n     * is empty (\"\") after the trim or if it is <code>null</code>.\n     *\n     * <p>The String is trimmed using {@link String#trim()}.\n     * Trim removes start and end characters &lt;= 32.\n     * To strip whitespace use {@link #stripToEmpty(String)}.</p>\n     *\n     * <pre>\n     * StringUtils.trimToEmpty(null)          = \"\"\n     * StringUtils.trimToEmpty(\"\")            = \"\"\n     * StringUtils.trimToEmpty(\"     \")       = \"\"\n     * StringUtils.trimToEmpty(\"abc\")         = \"abc\"\n     * StringUtils.trimToEmpty(\"    abc    \") = \"abc\"\n     * </pre>\n     *\n     * @param str  the String to be trimmed, may be null\n     * @return the trimmed String, or an empty String if <code>null</code> input\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.strip(java.lang.String)",
        "snippet": "    public static String strip(String str) {\n        return strip(str, null);\n    }",
        "begin_line": 382,
        "end_line": 384,
        "comment": "\n     * <p>Strips whitespace from the start and end of a String.</p>\n     *\n     * <p>This is similar to {@link #trim(String)} but removes whitespace.\n     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.strip(null)     = null\n     * StringUtils.strip(\"\")       = \"\"\n     * StringUtils.strip(\"   \")    = \"\"\n     * StringUtils.strip(\"abc\")    = \"abc\"\n     * StringUtils.strip(\"  abc\")  = \"abc\"\n     * StringUtils.strip(\"abc  \")  = \"abc\"\n     * StringUtils.strip(\" abc \")  = \"abc\"\n     * StringUtils.strip(\" ab c \") = \"ab c\"\n     * </pre>\n     *\n     * @param str  the String to remove whitespace from, may be null\n     * @return the stripped String, <code>null</code> if null String input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.stripToNull(java.lang.String)",
        "snippet": "    public static String stripToNull(String str) {\n        if (str == null) {\n            return null;\n        }\n        str = strip(str, null);\n        return str.length() == 0 ? null : str;\n    }",
        "begin_line": 409,
        "end_line": 415,
        "comment": "\n     * <p>Strips whitespace from the start and end of a String  returning\n     * <code>null</code> if the String is empty (\"\") after the strip.</p>\n     *\n     * <p>This is similar to {@link #trimToNull(String)} but removes whitespace.\n     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <pre>\n     * StringUtils.stripToNull(null)     = null\n     * StringUtils.stripToNull(\"\")       = null\n     * StringUtils.stripToNull(\"   \")    = null\n     * StringUtils.stripToNull(\"abc\")    = \"abc\"\n     * StringUtils.stripToNull(\"  abc\")  = \"abc\"\n     * StringUtils.stripToNull(\"abc  \")  = \"abc\"\n     * StringUtils.stripToNull(\" abc \")  = \"abc\"\n     * StringUtils.stripToNull(\" ab c \") = \"ab c\"\n     * </pre>\n     *\n     * @param str  the String to be stripped, may be null\n     * @return the stripped String,\n     *  <code>null</code> if whitespace, empty or null String input\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.stripToEmpty(java.lang.String)",
        "snippet": "    public static String stripToEmpty(String str) {\n        return str == null ? EMPTY : strip(str, null);\n    }",
        "begin_line": 439,
        "end_line": 441,
        "comment": "\n     * <p>Strips whitespace from the start and end of a String  returning\n     * an empty String if <code>null</code> input.</p>\n     *\n     * <p>This is similar to {@link #trimToEmpty(String)} but removes whitespace.\n     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <pre>\n     * StringUtils.stripToEmpty(null)     = \"\"\n     * StringUtils.stripToEmpty(\"\")       = \"\"\n     * StringUtils.stripToEmpty(\"   \")    = \"\"\n     * StringUtils.stripToEmpty(\"abc\")    = \"abc\"\n     * StringUtils.stripToEmpty(\"  abc\")  = \"abc\"\n     * StringUtils.stripToEmpty(\"abc  \")  = \"abc\"\n     * StringUtils.stripToEmpty(\" abc \")  = \"abc\"\n     * StringUtils.stripToEmpty(\" ab c \") = \"ab c\"\n     * </pre>\n     *\n     * @param str  the String to be stripped, may be null\n     * @return the trimmed String, or an empty String if <code>null</code> input\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.strip(java.lang.String, java.lang.String)",
        "snippet": "    public static String strip(String str, String stripChars) {\n        if (isEmpty(str)) {\n            return str;\n        }\n        str = stripStart(str, stripChars);\n        return stripEnd(str, stripChars);\n    }",
        "begin_line": 469,
        "end_line": 475,
        "comment": "\n     * <p>Strips any of a set of characters from the start and end of a String.\n     * This is similar to {@link String#trim()} but allows the characters\n     * to be stripped to be controlled.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * An empty string (\"\") input returns the empty string.</p>\n     *\n     * <p>If the stripChars String is <code>null</code>, whitespace is\n     * stripped as defined by {@link Character#isWhitespace(char)}.\n     * Alternatively use {@link #strip(String)}.</p>\n     *\n     * <pre>\n     * StringUtils.strip(null, *)          = null\n     * StringUtils.strip(\"\", *)            = \"\"\n     * StringUtils.strip(\"abc\", null)      = \"abc\"\n     * StringUtils.strip(\"  abc\", null)    = \"abc\"\n     * StringUtils.strip(\"abc  \", null)    = \"abc\"\n     * StringUtils.strip(\" abc \", null)    = \"abc\"\n     * StringUtils.strip(\"  abcyx\", \"xyz\") = \"  abc\"\n     * </pre>\n     *\n     * @param str  the String to remove characters from, may be null\n     * @param stripChars  the characters to remove, null treated as whitespace\n     * @return the stripped String, <code>null</code> if null String input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.stripStart(java.lang.String, java.lang.String)",
        "snippet": "    public static String stripStart(String str, String stripChars) {\n        int strLen;\n        if (str == null || (strLen = str.length()) == 0) {\n            return str;\n        }\n        int start = 0;\n        if (stripChars == null) {\n            while ((start != strLen) && Character.isWhitespace(str.charAt(start))) {\n                start++;\n            }\n        } else if (stripChars.length() == 0) {\n            return str;\n        } else {\n            while ((start != strLen) && (stripChars.indexOf(str.charAt(start)) != -1)) {\n                start++;\n            }\n        }\n        return str.substring(start);\n    }",
        "begin_line": 501,
        "end_line": 519,
        "comment": "\n     * <p>Strips any of a set of characters from the start of a String.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * An empty string (\"\") input returns the empty string.</p>\n     *\n     * <p>If the stripChars String is <code>null</code>, whitespace is\n     * stripped as defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <pre>\n     * StringUtils.stripStart(null, *)          = null\n     * StringUtils.stripStart(\"\", *)            = \"\"\n     * StringUtils.stripStart(\"abc\", \"\")        = \"abc\"\n     * StringUtils.stripStart(\"abc\", null)      = \"abc\"\n     * StringUtils.stripStart(\"  abc\", null)    = \"abc\"\n     * StringUtils.stripStart(\"abc  \", null)    = \"abc  \"\n     * StringUtils.stripStart(\" abc \", null)    = \"abc \"\n     * StringUtils.stripStart(\"yxabc  \", \"xyz\") = \"abc  \"\n     * </pre>\n     *\n     * @param str  the String to remove characters from, may be null\n     * @param stripChars  the characters to remove, null treated as whitespace\n     * @return the stripped String, <code>null</code> if null String input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.stripEnd(java.lang.String, java.lang.String)",
        "snippet": "    public static String stripEnd(String str, String stripChars) {\n        int end;\n        if (str == null || (end = str.length()) == 0) {\n            return str;\n        }\n\n        if (stripChars == null) {\n            while ((end != 0) && Character.isWhitespace(str.charAt(end - 1))) {\n                end--;\n            }\n        } else if (stripChars.length() == 0) {\n            return str;\n        } else {\n            while ((end != 0) && (stripChars.indexOf(str.charAt(end - 1)) != -1)) {\n                end--;\n            }\n        }\n        return str.substring(0, end);\n    }",
        "begin_line": 545,
        "end_line": 563,
        "comment": "\n     * <p>Strips any of a set of characters from the end of a String.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * An empty string (\"\") input returns the empty string.</p>\n     *\n     * <p>If the stripChars String is <code>null</code>, whitespace is\n     * stripped as defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <pre>\n     * StringUtils.stripEnd(null, *)          = null\n     * StringUtils.stripEnd(\"\", *)            = \"\"\n     * StringUtils.stripEnd(\"abc\", \"\")        = \"abc\"\n     * StringUtils.stripEnd(\"abc\", null)      = \"abc\"\n     * StringUtils.stripEnd(\"  abc\", null)    = \"  abc\"\n     * StringUtils.stripEnd(\"abc  \", null)    = \"abc\"\n     * StringUtils.stripEnd(\" abc \", null)    = \" abc\"\n     * StringUtils.stripEnd(\"  abcyx\", \"xyz\") = \"  abc\"\n     * </pre>\n     *\n     * @param str  the String to remove characters from, may be null\n     * @param stripChars  the characters to remove, null treated as whitespace\n     * @return the stripped String, <code>null</code> if null String input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.stripAll(java.lang.String[])",
        "snippet": "    public static String[] stripAll(String[] strs) {\n        return stripAll(strs, null);\n    }",
        "begin_line": 586,
        "end_line": 588,
        "comment": "\n     * <p>Strips whitespace from the start and end of every String in an array.\n     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <p>A new array is returned each time, except for length zero.\n     * A <code>null</code> array will return <code>null</code>.\n     * An empty array will return itself.\n     * A <code>null</code> array entry will be ignored.</p>\n     *\n     * <pre>\n     * StringUtils.stripAll(null)             = null\n     * StringUtils.stripAll([])               = []\n     * StringUtils.stripAll([\"abc\", \"  abc\"]) = [\"abc\", \"abc\"]\n     * StringUtils.stripAll([\"abc  \", null])  = [\"abc\", null]\n     * </pre>\n     *\n     * @param strs  the array to remove whitespace from, may be null\n     * @return the stripped Strings, <code>null</code> if null array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.stripAll(java.lang.String[], java.lang.String)",
        "snippet": "    public static String[] stripAll(String[] strs, String stripChars) {\n        int strsLen;\n        if (strs == null || (strsLen = strs.length) == 0) {\n            return strs;\n        }\n        String[] newArr = new String[strsLen];\n        for (int i = 0; i < strsLen; i++) {\n            newArr[i] = strip(strs[i], stripChars);\n        }\n        return newArr;\n    }",
        "begin_line": 615,
        "end_line": 625,
        "comment": "\n     * <p>Strips any of a set of characters from the start and end of every\n     * String in an array.</p>\n     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <p>A new array is returned each time, except for length zero.\n     * A <code>null</code> array will return <code>null</code>.\n     * An empty array will return itself.\n     * A <code>null</code> array entry will be ignored.\n     * A <code>null</code> stripChars will strip whitespace as defined by\n     * {@link Character#isWhitespace(char)}.</p>\n     *\n     * <pre>\n     * StringUtils.stripAll(null, *)                = null\n     * StringUtils.stripAll([], *)                  = []\n     * StringUtils.stripAll([\"abc\", \"  abc\"], null) = [\"abc\", \"abc\"]\n     * StringUtils.stripAll([\"abc  \", null], null)  = [\"abc\", null]\n     * StringUtils.stripAll([\"abc  \", null], \"yz\")  = [\"abc  \", null]\n     * StringUtils.stripAll([\"yabcz\", null], \"yz\")  = [\"abc\", null]\n     * </pre>\n     *\n     * @param strs  the array to remove characters from, may be null\n     * @param stripChars  the characters to remove, null treated as whitespace\n     * @return the stripped Strings, <code>null</code> if null array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.equals(java.lang.String, java.lang.String)",
        "snippet": "    public static boolean equals(String str1, String str2) {\n        return str1 == null ? str2 == null : str1.equals(str2);\n    }",
        "begin_line": 649,
        "end_line": 651,
        "comment": "\n     * <p>Compares two Strings, returning <code>true</code> if they are equal.</p>\n     *\n     * <p><code>null</code>s are handled without exceptions. Two <code>null</code>\n     * references are considered to be equal. The comparison is case sensitive.</p>\n     *\n     * <pre>\n     * StringUtils.equals(null, null)   = true\n     * StringUtils.equals(null, \"abc\")  = false\n     * StringUtils.equals(\"abc\", null)  = false\n     * StringUtils.equals(\"abc\", \"abc\") = true\n     * StringUtils.equals(\"abc\", \"ABC\") = false\n     * </pre>\n     *\n     * @see java.lang.String#equals(Object)\n     * @param str1  the first String, may be null\n     * @param str2  the second String, may be null\n     * @return <code>true</code> if the Strings are equal, case sensitive, or\n     *  both <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.equalsIgnoreCase(java.lang.String, java.lang.String)",
        "snippet": "    public static boolean equalsIgnoreCase(String str1, String str2) {\n        return str1 == null ? str2 == null : str1.equalsIgnoreCase(str2);\n    }",
        "begin_line": 674,
        "end_line": 676,
        "comment": "\n     * <p>Compares two Strings, returning <code>true</code> if they are equal ignoring\n     * the case.</p>\n     *\n     * <p><code>null</code>s are handled without exceptions. Two <code>null</code>\n     * references are considered equal. Comparison is case insensitive.</p>\n     *\n     * <pre>\n     * StringUtils.equalsIgnoreCase(null, null)   = true\n     * StringUtils.equalsIgnoreCase(null, \"abc\")  = false\n     * StringUtils.equalsIgnoreCase(\"abc\", null)  = false\n     * StringUtils.equalsIgnoreCase(\"abc\", \"abc\") = true\n     * StringUtils.equalsIgnoreCase(\"abc\", \"ABC\") = true\n     * </pre>\n     *\n     * @see java.lang.String#equalsIgnoreCase(String)\n     * @param str1  the first String, may be null\n     * @param str2  the second String, may be null\n     * @return <code>true</code> if the Strings are equal, case insensitive, or\n     *  both <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.indexOf(java.lang.String, char)",
        "snippet": "    public static int indexOf(String str, char searchChar) {\n        if (isEmpty(str)) {\n            return -1;\n        }\n        return str.indexOf(searchChar);\n    }",
        "begin_line": 699,
        "end_line": 704,
        "comment": "\n     * <p>Finds the first index within a String, handling <code>null</code>.\n     * This method uses {@link String#indexOf(int)}.</p>\n     *\n     * <p>A <code>null</code> or empty (\"\") String will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *)         = -1\n     * StringUtils.indexOf(\"\", *)           = -1\n     * StringUtils.indexOf(\"aabaabaa\", 'a') = 0\n     * StringUtils.indexOf(\"aabaabaa\", 'b') = 2\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChar  the character to find\n     * @return the first index of the search character,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.indexOf(java.lang.String, char, int)",
        "snippet": "    public static int indexOf(String str, char searchChar, int startPos) {\n        if (isEmpty(str)) {\n            return -1;\n        }\n        return str.indexOf(searchChar, startPos);\n    }",
        "begin_line": 731,
        "end_line": 736,
        "comment": "\n     * <p>Finds the first index within a String from a start position,\n     * handling <code>null</code>.\n     * This method uses {@link String#indexOf(int, int)}.</p>\n     *\n     * <p>A <code>null</code> or empty (\"\") String will return <code>-1</code>.\n     * A negative start position is treated as zero.\n     * A start position greater than the string length returns <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *, *)          = -1\n     * StringUtils.indexOf(\"\", *, *)            = -1\n     * StringUtils.indexOf(\"aabaabaa\", 'b', 0)  = 2\n     * StringUtils.indexOf(\"aabaabaa\", 'b', 3)  = 5\n     * StringUtils.indexOf(\"aabaabaa\", 'b', 9)  = -1\n     * StringUtils.indexOf(\"aabaabaa\", 'b', -1) = 2\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChar  the character to find\n     * @param startPos  the start position, negative treated as zero\n     * @return the first index of the search character,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.indexOf(java.lang.String, java.lang.String)",
        "snippet": "    public static int indexOf(String str, String searchStr) {\n        if (str == null || searchStr == null) {\n            return -1;\n        }\n        return str.indexOf(searchStr);\n    }",
        "begin_line": 760,
        "end_line": 765,
        "comment": "\n     * <p>Finds the first index within a String, handling <code>null</code>.\n     * This method uses {@link String#indexOf(String)}.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *)          = -1\n     * StringUtils.indexOf(*, null)          = -1\n     * StringUtils.indexOf(\"\", \"\")           = 0\n     * StringUtils.indexOf(\"aabaabaa\", \"a\")  = 0\n     * StringUtils.indexOf(\"aabaabaa\", \"b\")  = 2\n     * StringUtils.indexOf(\"aabaabaa\", \"ab\") = 1\n     * StringUtils.indexOf(\"aabaabaa\", \"\")   = 0\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @return the first index of the search String,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.ordinalIndexOf(java.lang.String, java.lang.String, int)",
        "snippet": "    public static int ordinalIndexOf(String str, String searchStr, int ordinal) {\n        if (str == null || searchStr == null || ordinal <= 0) {\n            return INDEX_NOT_FOUND;\n        }\n        if (searchStr.length() == 0) {\n            return 0;\n        }\n        int found = 0;\n        int index = INDEX_NOT_FOUND;\n        do {\n            index = str.indexOf(searchStr, index + 1);\n            if (index < 0) {\n                return index;\n            }\n            found++;\n        } while (found < ordinal);\n        return index;\n    }",
        "begin_line": 794,
        "end_line": 811,
        "comment": "\n     * <p>Finds the n-th index within a String, handling <code>null</code>.\n     * This method uses {@link String#indexOf(String)}.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.ordinalIndexOf(null, *, *)          = -1\n     * StringUtils.ordinalIndexOf(*, null, *)          = -1\n     * StringUtils.ordinalIndexOf(\"\", \"\", *)           = 0\n     * StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", 1)  = 0\n     * StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", 2)  = 1\n     * StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", 1)  = 2\n     * StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", 2)  = 5\n     * StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", 1) = 1\n     * StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", 2) = 4\n     * StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", 1)   = 0\n     * StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", 2)   = 0\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @param ordinal  the n-th <code>searchStr</code> to find\n     * @return the n-th index of the search String,\n     *  <code>-1</code> (<code>INDEX_NOT_FOUND</code>) if no match or <code>null</code> string input\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.indexOf(java.lang.String, java.lang.String, int)",
        "snippet": "    public static int indexOf(String str, String searchStr, int startPos) {\n        if (str == null || searchStr == null) {\n            return -1;\n        }\n        // JDK1.2/JDK1.3 have a bug, when startPos > str.length for \"\", hence\n        if (searchStr.length() == 0 && startPos >= str.length()) {\n            return str.length();\n        }\n        return str.indexOf(searchStr, startPos);\n    }",
        "begin_line": 844,
        "end_line": 853,
        "comment": "\n     * <p>Finds the first index within a String, handling <code>null</code>.\n     * This method uses {@link String#indexOf(String, int)}.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A negative start position is treated as zero.\n     * An empty (\"\") search String always matches.\n     * A start position greater than the string length only matches\n     * an empty search String.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *, *)          = -1\n     * StringUtils.indexOf(*, null, *)          = -1\n     * StringUtils.indexOf(\"\", \"\", 0)           = 0\n     * StringUtils.indexOf(\"aabaabaa\", \"a\", 0)  = 0\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", 0)  = 2\n     * StringUtils.indexOf(\"aabaabaa\", \"ab\", 0) = 1\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", 3)  = 5\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", 9)  = -1\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", -1) = 2\n     * StringUtils.indexOf(\"aabaabaa\", \"\", 2)   = 2\n     * StringUtils.indexOf(\"abc\", \"\", 9)        = 3\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @param startPos  the start position, negative treated as zero\n     * @return the first index of the search String,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.lastIndexOf(java.lang.String, char)",
        "snippet": "    public static int lastIndexOf(String str, char searchChar) {\n        if (isEmpty(str)) {\n            return -1;\n        }\n        return str.lastIndexOf(searchChar);\n    }",
        "begin_line": 876,
        "end_line": 881,
        "comment": "\n     * <p>Finds the last index within a String, handling <code>null</code>.\n     * This method uses {@link String#lastIndexOf(int)}.</p>\n     *\n     * <p>A <code>null</code> or empty (\"\") String will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.lastIndexOf(null, *)         = -1\n     * StringUtils.lastIndexOf(\"\", *)           = -1\n     * StringUtils.lastIndexOf(\"aabaabaa\", 'a') = 7\n     * StringUtils.lastIndexOf(\"aabaabaa\", 'b') = 5\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChar  the character to find\n     * @return the last index of the search character,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.lastIndexOf(java.lang.String, char, int)",
        "snippet": "    public static int lastIndexOf(String str, char searchChar, int startPos) {\n        if (isEmpty(str)) {\n            return -1;\n        }\n        return str.lastIndexOf(searchChar, startPos);\n    }",
        "begin_line": 910,
        "end_line": 915,
        "comment": "\n     * <p>Finds the last index within a String from a start position,\n     * handling <code>null</code>.\n     * This method uses {@link String#lastIndexOf(int, int)}.</p>\n     *\n     * <p>A <code>null</code> or empty (\"\") String will return <code>-1</code>.\n     * A negative start position returns <code>-1</code>.\n     * A start position greater than the string length searches the whole string.</p>\n     *\n     * <pre>\n     * StringUtils.lastIndexOf(null, *, *)          = -1\n     * StringUtils.lastIndexOf(\"\", *,  *)           = -1\n     * StringUtils.lastIndexOf(\"aabaabaa\", 'b', 8)  = 5\n     * StringUtils.lastIndexOf(\"aabaabaa\", 'b', 4)  = 2\n     * StringUtils.lastIndexOf(\"aabaabaa\", 'b', 0)  = -1\n     * StringUtils.lastIndexOf(\"aabaabaa\", 'b', 9)  = 5\n     * StringUtils.lastIndexOf(\"aabaabaa\", 'b', -1) = -1\n     * StringUtils.lastIndexOf(\"aabaabaa\", 'a', 0)  = 0\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChar  the character to find\n     * @param startPos  the start position\n     * @return the last index of the search character,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.lastIndexOf(java.lang.String, java.lang.String)",
        "snippet": "    public static int lastIndexOf(String str, String searchStr) {\n        if (str == null || searchStr == null) {\n            return -1;\n        }\n        return str.lastIndexOf(searchStr);\n    }",
        "begin_line": 939,
        "end_line": 944,
        "comment": "\n     * <p>Finds the last index within a String, handling <code>null</code>.\n     * This method uses {@link String#lastIndexOf(String)}.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.lastIndexOf(null, *)          = -1\n     * StringUtils.lastIndexOf(*, null)          = -1\n     * StringUtils.lastIndexOf(\"\", \"\")           = 0\n     * StringUtils.lastIndexOf(\"aabaabaa\", \"a\")  = 0\n     * StringUtils.lastIndexOf(\"aabaabaa\", \"b\")  = 2\n     * StringUtils.lastIndexOf(\"aabaabaa\", \"ab\") = 1\n     * StringUtils.lastIndexOf(\"aabaabaa\", \"\")   = 8\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @return the last index of the search String,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.lastIndexOf(java.lang.String, java.lang.String, int)",
        "snippet": "    public static int lastIndexOf(String str, String searchStr, int startPos) {\n        if (str == null || searchStr == null) {\n            return -1;\n        }\n        return str.lastIndexOf(searchStr, startPos);\n    }",
        "begin_line": 974,
        "end_line": 979,
        "comment": "\n     * <p>Finds the first index within a String, handling <code>null</code>.\n     * This method uses {@link String#lastIndexOf(String, int)}.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A negative start position returns <code>-1</code>.\n     * An empty (\"\") search String always matches unless the start position is negative.\n     * A start position greater than the string length searches the whole string.</p>\n     *\n     * <pre>\n     * StringUtils.lastIndexOf(null, *, *)          = -1\n     * StringUtils.lastIndexOf(*, null, *)          = -1\n     * StringUtils.lastIndexOf(\"aabaabaa\", \"a\", 8)  = 7\n     * StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 8)  = 5\n     * StringUtils.lastIndexOf(\"aabaabaa\", \"ab\", 8) = 4\n     * StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 9)  = 5\n     * StringUtils.lastIndexOf(\"aabaabaa\", \"b\", -1) = -1\n     * StringUtils.lastIndexOf(\"aabaabaa\", \"a\", 0)  = 0\n     * StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 0)  = -1\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @param startPos  the start position, negative treated as zero\n     * @return the first index of the search String,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.contains(java.lang.String, char)",
        "snippet": "    public static boolean contains(String str, char searchChar) {\n        if (isEmpty(str)) {\n            return false;\n        }\n        return str.indexOf(searchChar) >= 0;\n    }",
        "begin_line": 1002,
        "end_line": 1007,
        "comment": "\n     * <p>Checks if String contains a search character, handling <code>null</code>.\n     * This method uses {@link String#indexOf(int)}.</p>\n     *\n     * <p>A <code>null</code> or empty (\"\") String will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.contains(null, *)    = false\n     * StringUtils.contains(\"\", *)      = false\n     * StringUtils.contains(\"abc\", 'a') = true\n     * StringUtils.contains(\"abc\", 'z') = false\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChar  the character to find\n     * @return true if the String contains the search character,\n     *  false if not or <code>null</code> string input\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.contains(java.lang.String, java.lang.String)",
        "snippet": "    public static boolean contains(String str, String searchStr) {\n        if (str == null || searchStr == null) {\n            return false;\n        }\n        return str.indexOf(searchStr) >= 0;\n    }",
        "begin_line": 1030,
        "end_line": 1035,
        "comment": "\n     * <p>Checks if String contains a search String, handling <code>null</code>.\n     * This method uses {@link String#indexOf(int)}.</p>\n     *\n     * <p>A <code>null</code> String will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.contains(null, *)     = false\n     * StringUtils.contains(*, null)     = false\n     * StringUtils.contains(\"\", \"\")      = true\n     * StringUtils.contains(\"abc\", \"\")   = true\n     * StringUtils.contains(\"abc\", \"a\")  = true\n     * StringUtils.contains(\"abc\", \"z\")  = false\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @return true if the String contains the search String,\n     *  false if not or <code>null</code> string input\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.containsIgnoreCase(java.lang.String, java.lang.String)",
        "snippet": "    public static boolean containsIgnoreCase(String str, String searchStr) {\n        if (str == null || searchStr == null) {\n            return false;\n        }\n        return contains(str.toUpperCase(), searchStr.toUpperCase());\n    }",
        "begin_line": 1060,
        "end_line": 1065,
        "comment": "\n     * <p>Checks if String contains a search String irrespective of case,\n     * handling <code>null</code>. This method uses\n     * {@link #contains(String, String)}.</p>\n     *\n     * <p>A <code>null</code> String will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.contains(null, *) = false\n     * StringUtils.contains(*, null) = false\n     * StringUtils.contains(\"\", \"\") = true\n     * StringUtils.contains(\"abc\", \"\") = true\n     * StringUtils.contains(\"abc\", \"a\") = true\n     * StringUtils.contains(\"abc\", \"z\") = false\n     * StringUtils.contains(\"abc\", \"A\") = true\n     * StringUtils.contains(\"abc\", \"Z\") = false\n     * </pre>\n     *\n     * @param str the String to check, may be null\n     * @param searchStr the String to find, may be null\n     * @return true if the String contains the search String irrespective of\n     * case or false if not or <code>null</code> string input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.indexOfAny(java.lang.String, char[])",
        "snippet": "    public static int indexOfAny(String str, char[] searchChars) {\n        if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n            return -1;\n        }\n        for (int i = 0; i < str.length(); i++) {\n            char ch = str.charAt(i);\n            for (int j = 0; j < searchChars.length; j++) {\n                if (searchChars[j] == ch) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }",
        "begin_line": 1091,
        "end_line": 1104,
        "comment": "\n     * <p>Search a String to find the first index of any\n     * character in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAny(null, *)                = -1\n     * StringUtils.indexOfAny(\"\", *)                  = -1\n     * StringUtils.indexOfAny(*, null)                = -1\n     * StringUtils.indexOfAny(*, [])                  = -1\n     * StringUtils.indexOfAny(\"zzabyycdxx\",['z','a']) = 0\n     * StringUtils.indexOfAny(\"zzabyycdxx\",['b','y']) = 3\n     * StringUtils.indexOfAny(\"aba\", ['z'])           = -1\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.indexOfAny(java.lang.String, java.lang.String)",
        "snippet": "    public static int indexOfAny(String str, String searchChars) {\n        if (isEmpty(str) || isEmpty(searchChars)) {\n            return -1;\n        }\n        return indexOfAny(str, searchChars.toCharArray());\n    }",
        "begin_line": 1128,
        "end_line": 1133,
        "comment": "\n     * <p>Search a String to find the first index of any\n     * character in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> search string will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAny(null, *)            = -1\n     * StringUtils.indexOfAny(\"\", *)              = -1\n     * StringUtils.indexOfAny(*, null)            = -1\n     * StringUtils.indexOfAny(*, \"\")              = -1\n     * StringUtils.indexOfAny(\"zzabyycdxx\", \"za\") = 0\n     * StringUtils.indexOfAny(\"zzabyycdxx\", \"by\") = 3\n     * StringUtils.indexOfAny(\"aba\",\"z\")          = -1\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.indexOfAnyBut(java.lang.String, char[])",
        "snippet": "    public static int indexOfAnyBut(String str, char[] searchChars) {\n        if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n            return -1;\n        }\n        outer : for (int i = 0; i < str.length(); i++) {\n            char ch = str.charAt(i);\n            for (int j = 0; j < searchChars.length; j++) {\n                if (searchChars[j] == ch) {\n                    continue outer;\n                }\n            }\n            return i;\n        }\n        return -1;\n    }",
        "begin_line": 1159,
        "end_line": 1173,
        "comment": "\n     * <p>Search a String to find the first index of any\n     * character not in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAnyBut(null, *)           = -1\n     * StringUtils.indexOfAnyBut(\"\", *)             = -1\n     * StringUtils.indexOfAnyBut(*, null)           = -1\n     * StringUtils.indexOfAnyBut(*, [])             = -1\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\",'za') = 3\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", '')  = 0\n     * StringUtils.indexOfAnyBut(\"aba\", 'ab')       = -1\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.indexOfAnyBut(java.lang.String, java.lang.String)",
        "snippet": "    public static int indexOfAnyBut(String str, String searchChars) {\n        if (isEmpty(str) || isEmpty(searchChars)) {\n            return -1;\n        }\n        for (int i = 0; i < str.length(); i++) {\n            if (searchChars.indexOf(str.charAt(i)) < 0) {\n                return i;\n            }\n        }\n        return -1;\n    }",
        "begin_line": 1197,
        "end_line": 1207,
        "comment": "\n     * <p>Search a String to find the first index of any\n     * character not in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> search string will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAnyBut(null, *)            = -1\n     * StringUtils.indexOfAnyBut(\"\", *)              = -1\n     * StringUtils.indexOfAnyBut(*, null)            = -1\n     * StringUtils.indexOfAnyBut(*, \"\")              = -1\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"za\") = 3\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"\")   = 0\n     * StringUtils.indexOfAnyBut(\"aba\",\"ab\")         = -1\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.containsOnly(java.lang.String, char[])",
        "snippet": "    public static boolean containsOnly(String str, char[] valid) {\n        // All these pre-checks are to maintain API with an older version\n        if ((valid == null) || (str == null)) {\n            return false;\n        }\n        if (str.length() == 0) {\n            return true;\n        }\n        if (valid.length == 0) {\n            return false;\n        }\n        return indexOfAnyBut(str, valid) == -1;\n    }",
        "begin_line": 1232,
        "end_line": 1244,
        "comment": "\n     * <p>Checks if the String contains only certain characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>false</code>.\n     * A <code>null</code> valid character array will return <code>false</code>.\n     * An empty String (\"\") always returns <code>true</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsOnly(null, *)       = false\n     * StringUtils.containsOnly(*, null)       = false\n     * StringUtils.containsOnly(\"\", *)         = true\n     * StringUtils.containsOnly(\"ab\", '')      = false\n     * StringUtils.containsOnly(\"abab\", 'abc') = true\n     * StringUtils.containsOnly(\"ab1\", 'abc')  = false\n     * StringUtils.containsOnly(\"abz\", 'abc')  = false\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param valid  an array of valid chars, may be null\n     * @return true if it only contains valid chars and is non-null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.containsOnly(java.lang.String, java.lang.String)",
        "snippet": "    public static boolean containsOnly(String str, String validChars) {\n        if (str == null || validChars == null) {\n            return false;\n        }\n        return containsOnly(str, validChars.toCharArray());\n    }",
        "begin_line": 1268,
        "end_line": 1273,
        "comment": "\n     * <p>Checks if the String contains only certain characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>false</code>.\n     * A <code>null</code> valid character String will return <code>false</code>.\n     * An empty String (\"\") always returns <code>true</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsOnly(null, *)       = false\n     * StringUtils.containsOnly(*, null)       = false\n     * StringUtils.containsOnly(\"\", *)         = true\n     * StringUtils.containsOnly(\"ab\", \"\")      = false\n     * StringUtils.containsOnly(\"abab\", \"abc\") = true\n     * StringUtils.containsOnly(\"ab1\", \"abc\")  = false\n     * StringUtils.containsOnly(\"abz\", \"abc\")  = false\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param validChars  a String of valid chars, may be null\n     * @return true if it only contains valid chars and is non-null\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.containsNone(java.lang.String, char[])",
        "snippet": "    public static boolean containsNone(String str, char[] invalidChars) {\n        if (str == null || invalidChars == null) {\n            return true;\n        }\n        int strSize = str.length();\n        int validSize = invalidChars.length;\n        for (int i = 0; i < strSize; i++) {\n            char ch = str.charAt(i);\n            for (int j = 0; j < validSize; j++) {\n                if (invalidChars[j] == ch) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }",
        "begin_line": 1299,
        "end_line": 1314,
        "comment": "\n     * <p>Checks that the String does not contain certain characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>true</code>.\n     * A <code>null</code> invalid character array will return <code>true</code>.\n     * An empty String (\"\") always returns true.</p>\n     *\n     * <pre>\n     * StringUtils.containsNone(null, *)       = true\n     * StringUtils.containsNone(*, null)       = true\n     * StringUtils.containsNone(\"\", *)         = true\n     * StringUtils.containsNone(\"ab\", '')      = true\n     * StringUtils.containsNone(\"abab\", 'xyz') = true\n     * StringUtils.containsNone(\"ab1\", 'xyz')  = true\n     * StringUtils.containsNone(\"abz\", 'xyz')  = false\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param invalidChars  an array of invalid chars, may be null\n     * @return true if it contains none of the invalid chars, or is null\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.containsNone(java.lang.String, java.lang.String)",
        "snippet": "    public static boolean containsNone(String str, String invalidChars) {\n        if (str == null || invalidChars == null) {\n            return true;\n        }\n        return containsNone(str, invalidChars.toCharArray());\n    }",
        "begin_line": 1338,
        "end_line": 1343,
        "comment": "\n     * <p>Checks that the String does not contain certain characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>true</code>.\n     * A <code>null</code> invalid character array will return <code>true</code>.\n     * An empty String (\"\") always returns true.</p>\n     *\n     * <pre>\n     * StringUtils.containsNone(null, *)       = true\n     * StringUtils.containsNone(*, null)       = true\n     * StringUtils.containsNone(\"\", *)         = true\n     * StringUtils.containsNone(\"ab\", \"\")      = true\n     * StringUtils.containsNone(\"abab\", \"xyz\") = true\n     * StringUtils.containsNone(\"ab1\", \"xyz\")  = true\n     * StringUtils.containsNone(\"abz\", \"xyz\")  = false\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param invalidChars  a String of invalid chars, may be null\n     * @return true if it contains none of the invalid chars, or is null\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.indexOfAny(java.lang.String, java.lang.String[])",
        "snippet": "    public static int indexOfAny(String str, String[] searchStrs) {\n        if ((str == null) || (searchStrs == null)) {\n            return -1;\n        }\n        int sz = searchStrs.length;\n\n        // String's can't have a MAX_VALUEth index.\n        int ret = Integer.MAX_VALUE;\n\n        int tmp = 0;\n        for (int i = 0; i < sz; i++) {\n            String search = searchStrs[i];\n            if (search == null) {\n                continue;\n            }\n            tmp = str.indexOf(search);\n            if (tmp == -1) {\n                continue;\n            }\n\n            if (tmp < ret) {\n                ret = tmp;\n            }\n        }\n\n        return (ret == Integer.MAX_VALUE) ? -1 : ret;\n    }",
        "begin_line": 1373,
        "end_line": 1399,
        "comment": "\n     * <p>Find the first index of any of a set of potential substrings.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> or zero length search array will return <code>-1</code>.\n     * A <code>null</code> search array entry will be ignored, but a search\n     * array containing \"\" will return <code>0</code> if <code>str</code> is not\n     * null. This method uses {@link String#indexOf(String)}.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAny(null, *)                     = -1\n     * StringUtils.indexOfAny(*, null)                     = -1\n     * StringUtils.indexOfAny(*, [])                       = -1\n     * StringUtils.indexOfAny(\"zzabyycdxx\", [\"ab\",\"cd\"])   = 2\n     * StringUtils.indexOfAny(\"zzabyycdxx\", [\"cd\",\"ab\"])   = 2\n     * StringUtils.indexOfAny(\"zzabyycdxx\", [\"mn\",\"op\"])   = -1\n     * StringUtils.indexOfAny(\"zzabyycdxx\", [\"zab\",\"aby\"]) = 1\n     * StringUtils.indexOfAny(\"zzabyycdxx\", [\"\"])          = 0\n     * StringUtils.indexOfAny(\"\", [\"\"])                    = 0\n     * StringUtils.indexOfAny(\"\", [\"a\"])                   = -1\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStrs  the Strings to search for, may be null\n     * @return the first index of any of the searchStrs in str, -1 if no match\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.lastIndexOfAny(java.lang.String, java.lang.String[])",
        "snippet": "    public static int lastIndexOfAny(String str, String[] searchStrs) {\n        if ((str == null) || (searchStrs == null)) {\n            return -1;\n        }\n        int sz = searchStrs.length;\n        int ret = -1;\n        int tmp = 0;\n        for (int i = 0; i < sz; i++) {\n            String search = searchStrs[i];\n            if (search == null) {\n                continue;\n            }\n            tmp = str.lastIndexOf(search);\n            if (tmp > ret) {\n                ret = tmp;\n            }\n        }\n        return ret;\n    }",
        "begin_line": 1426,
        "end_line": 1444,
        "comment": "\n     * <p>Find the latest index of any of a set of potential substrings.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> search array will return <code>-1</code>.\n     * A <code>null</code> or zero length search array entry will be ignored,\n     * but a search array containing \"\" will return the length of <code>str</code>\n     * if <code>str</code> is not null. This method uses {@link String#indexOf(String)}</p>\n     *\n     * <pre>\n     * StringUtils.lastIndexOfAny(null, *)                   = -1\n     * StringUtils.lastIndexOfAny(*, null)                   = -1\n     * StringUtils.lastIndexOfAny(*, [])                     = -1\n     * StringUtils.lastIndexOfAny(*, [null])                 = -1\n     * StringUtils.lastIndexOfAny(\"zzabyycdxx\", [\"ab\",\"cd\"]) = 6\n     * StringUtils.lastIndexOfAny(\"zzabyycdxx\", [\"cd\",\"ab\"]) = 6\n     * StringUtils.lastIndexOfAny(\"zzabyycdxx\", [\"mn\",\"op\"]) = -1\n     * StringUtils.lastIndexOfAny(\"zzabyycdxx\", [\"mn\",\"op\"]) = -1\n     * StringUtils.lastIndexOfAny(\"zzabyycdxx\", [\"mn\",\"\"])   = 10\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStrs  the Strings to search for, may be null\n     * @return the last index of any of the Strings, -1 if no match\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.substring(java.lang.String, int)",
        "snippet": "    public static String substring(String str, int start) {\n        if (str == null) {\n            return null;\n        }\n\n        // handle negatives, which means last n characters\n        if (start < 0) {\n            start = str.length() + start; // remember start is negative\n        }\n\n        if (start < 0) {\n            start = 0;\n        }\n        if (start > str.length()) {\n            return EMPTY;\n        }\n\n        return str.substring(start);\n    }",
        "begin_line": 1472,
        "end_line": 1490,
        "comment": "\n     * <p>Gets a substring from the specified String avoiding exceptions.</p>\n     *\n     * <p>A negative start position can be used to start <code>n</code>\n     * characters from the end of the String.</p>\n     *\n     * <p>A <code>null</code> String will return <code>null</code>.\n     * An empty (\"\") String will return \"\".</p>\n     *\n     * <pre>\n     * StringUtils.substring(null, *)   = null\n     * StringUtils.substring(\"\", *)     = \"\"\n     * StringUtils.substring(\"abc\", 0)  = \"abc\"\n     * StringUtils.substring(\"abc\", 2)  = \"c\"\n     * StringUtils.substring(\"abc\", 4)  = \"\"\n     * StringUtils.substring(\"abc\", -2) = \"bc\"\n     * StringUtils.substring(\"abc\", -4) = \"abc\"\n     * </pre>\n     *\n     * @param str  the String to get the substring from, may be null\n     * @param start  the position to start from, negative means\n     *  count back from the end of the String by this many characters\n     * @return substring from start position, <code>null</code> if null String input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.substring(java.lang.String, int, int)",
        "snippet": "    public static String substring(String str, int start, int end) {\n        if (str == null) {\n            return null;\n        }\n\n        // handle negatives\n        if (end < 0) {\n            end = str.length() + end; // remember end is negative\n        }\n        if (start < 0) {\n            start = str.length() + start; // remember start is negative\n        }\n\n        // check length next\n        if (end > str.length()) {\n            end = str.length();\n        }\n\n        // if start is greater than end, return \"\"\n        if (start > end) {\n            return EMPTY;\n        }\n\n        if (start < 0) {\n            start = 0;\n        }\n        if (end < 0) {\n            end = 0;\n        }\n\n        return str.substring(start, end);\n    }",
        "begin_line": 1527,
        "end_line": 1558,
        "comment": "\n     * <p>Gets a substring from the specified String avoiding exceptions.</p>\n     *\n     * <p>A negative start position can be used to start/end <code>n</code>\n     * characters from the end of the String.</p>\n     *\n     * <p>The returned substring starts with the character in the <code>start</code>\n     * position and ends before the <code>end</code> position. All position counting is\n     * zero-based -- i.e., to start at the beginning of the string use\n     * <code>start = 0</code>. Negative start and end positions can be used to\n     * specify offsets relative to the end of the String.</p>\n     *\n     * <p>If <code>start</code> is not strictly to the left of <code>end</code>, \"\"\n     * is returned.</p>\n     *\n     * <pre>\n     * StringUtils.substring(null, *, *)    = null\n     * StringUtils.substring(\"\", * ,  *)    = \"\";\n     * StringUtils.substring(\"abc\", 0, 2)   = \"ab\"\n     * StringUtils.substring(\"abc\", 2, 0)   = \"\"\n     * StringUtils.substring(\"abc\", 2, 4)   = \"c\"\n     * StringUtils.substring(\"abc\", 4, 6)   = \"\"\n     * StringUtils.substring(\"abc\", 2, 2)   = \"\"\n     * StringUtils.substring(\"abc\", -2, -1) = \"b\"\n     * StringUtils.substring(\"abc\", -4, 2)  = \"ab\"\n     * </pre>\n     *\n     * @param str  the String to get the substring from, may be null\n     * @param start  the position to start from, negative means\n     *  count back from the end of the String by this many characters\n     * @param end  the position to end at (exclusive), negative means\n     *  count back from the end of the String by this many characters\n     * @return substring from start position to end positon,\n     *  <code>null</code> if null String input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.left(java.lang.String, int)",
        "snippet": "    public static String left(String str, int len) {\n        if (str == null) {\n            return null;\n        }\n        if (len < 0) {\n            return EMPTY;\n        }\n        if (str.length() <= len) {\n            return str;\n        } else {\n            return str.substring(0, len);\n        }\n    }",
        "begin_line": 1582,
        "end_line": 1594,
        "comment": "\n     * <p>Gets the leftmost <code>len</code> characters of a String.</p>\n     *\n     * <p>If <code>len</code> characters are not available, or the\n     * String is <code>null</code>, the String will be returned without\n     * an exception. An exception is thrown if len is negative.</p>\n     *\n     * <pre>\n     * StringUtils.left(null, *)    = null\n     * StringUtils.left(*, -ve)     = \"\"\n     * StringUtils.left(\"\", *)      = \"\"\n     * StringUtils.left(\"abc\", 0)   = \"\"\n     * StringUtils.left(\"abc\", 2)   = \"ab\"\n     * StringUtils.left(\"abc\", 4)   = \"abc\"\n     * </pre>\n     *\n     * @param str  the String to get the leftmost characters from, may be null\n     * @param len  the length of the required String, must be zero or positive\n     * @return the leftmost characters, <code>null</code> if null String input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.right(java.lang.String, int)",
        "snippet": "    public static String right(String str, int len) {\n        if (str == null) {\n            return null;\n        }\n        if (len < 0) {\n            return EMPTY;\n        }\n        if (str.length() <= len) {\n            return str;\n        } else {\n            return str.substring(str.length() - len);\n        }\n    }",
        "begin_line": 1616,
        "end_line": 1628,
        "comment": "\n     * <p>Gets the rightmost <code>len</code> characters of a String.</p>\n     *\n     * <p>If <code>len</code> characters are not available, or the String\n     * is <code>null</code>, the String will be returned without an\n     * an exception. An exception is thrown if len is negative.</p>\n     *\n     * <pre>\n     * StringUtils.right(null, *)    = null\n     * StringUtils.right(*, -ve)     = \"\"\n     * StringUtils.right(\"\", *)      = \"\"\n     * StringUtils.right(\"abc\", 0)   = \"\"\n     * StringUtils.right(\"abc\", 2)   = \"bc\"\n     * StringUtils.right(\"abc\", 4)   = \"abc\"\n     * </pre>\n     *\n     * @param str  the String to get the rightmost characters from, may be null\n     * @param len  the length of the required String, must be zero or positive\n     * @return the rightmost characters, <code>null</code> if null String input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.mid(java.lang.String, int, int)",
        "snippet": "    public static String mid(String str, int pos, int len) {\n        if (str == null) {\n            return null;\n        }\n        if (len < 0 || pos > str.length()) {\n            return EMPTY;\n        }\n        if (pos < 0) {\n            pos = 0;\n        }\n        if (str.length() <= (pos + len)) {\n            return str.substring(pos);\n        } else {\n            return str.substring(pos, pos + len);\n        }\n    }",
        "begin_line": 1654,
        "end_line": 1669,
        "comment": "\n     * <p>Gets <code>len</code> characters from the middle of a String.</p>\n     *\n     * <p>If <code>len</code> characters are not available, the remainder\n     * of the String will be returned without an exception. If the\n     * String is <code>null</code>, <code>null</code> will be returned.\n     * An exception is thrown if len is negative.</p>\n     *\n     * <pre>\n     * StringUtils.mid(null, *, *)    = null\n     * StringUtils.mid(*, *, -ve)     = \"\"\n     * StringUtils.mid(\"\", 0, *)      = \"\"\n     * StringUtils.mid(\"abc\", 0, 2)   = \"ab\"\n     * StringUtils.mid(\"abc\", 0, 4)   = \"abc\"\n     * StringUtils.mid(\"abc\", 2, 4)   = \"c\"\n     * StringUtils.mid(\"abc\", 4, 2)   = \"\"\n     * StringUtils.mid(\"abc\", -2, 2)  = \"ab\"\n     * </pre>\n     *\n     * @param str  the String to get the characters from, may be null\n     * @param pos  the position to start from, negative treated as zero\n     * @param len  the length of the required String, must be zero or positive\n     * @return the middle characters, <code>null</code> if null String input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.substringBefore(java.lang.String, java.lang.String)",
        "snippet": "    public static String substringBefore(String str, String separator) {\n        if (isEmpty(str) || separator == null) {\n            return str;\n        }\n        if (separator.length() == 0) {\n            return EMPTY;\n        }\n        int pos = str.indexOf(separator);\n        if (pos == -1) {\n            return str;\n        }\n        return str.substring(0, pos);\n    }",
        "begin_line": 1698,
        "end_line": 1710,
        "comment": "\n     * <p>Gets the substring before the first occurrence of a separator.\n     * The separator is not returned.</p>\n     *\n     * <p>A <code>null</code> string input will return <code>null</code>.\n     * An empty (\"\") string input will return the empty string.\n     * A <code>null</code> separator will return the input string.</p>\n     *\n     * <pre>\n     * StringUtils.substringBefore(null, *)      = null\n     * StringUtils.substringBefore(\"\", *)        = \"\"\n     * StringUtils.substringBefore(\"abc\", \"a\")   = \"\"\n     * StringUtils.substringBefore(\"abcba\", \"b\") = \"a\"\n     * StringUtils.substringBefore(\"abc\", \"c\")   = \"ab\"\n     * StringUtils.substringBefore(\"abc\", \"d\")   = \"abc\"\n     * StringUtils.substringBefore(\"abc\", \"\")    = \"\"\n     * StringUtils.substringBefore(\"abc\", null)  = \"abc\"\n     * </pre>\n     *\n     * @param str  the String to get a substring from, may be null\n     * @param separator  the String to search for, may be null\n     * @return the substring before the first occurrence of the separator,\n     *  <code>null</code> if null String input\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.substringAfter(java.lang.String, java.lang.String)",
        "snippet": "    public static String substringAfter(String str, String separator) {\n        if (isEmpty(str)) {\n            return str;\n        }\n        if (separator == null) {\n            return EMPTY;\n        }\n        int pos = str.indexOf(separator);\n        if (pos == -1) {\n            return EMPTY;\n        }\n        return str.substring(pos + separator.length());\n    }",
        "begin_line": 1738,
        "end_line": 1750,
        "comment": "\n     * <p>Gets the substring after the first occurrence of a separator.\n     * The separator is not returned.</p>\n     *\n     * <p>A <code>null</code> string input will return <code>null</code>.\n     * An empty (\"\") string input will return the empty string.\n     * A <code>null</code> separator will return the empty string if the\n     * input string is not <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.substringAfter(null, *)      = null\n     * StringUtils.substringAfter(\"\", *)        = \"\"\n     * StringUtils.substringAfter(*, null)      = \"\"\n     * StringUtils.substringAfter(\"abc\", \"a\")   = \"bc\"\n     * StringUtils.substringAfter(\"abcba\", \"b\") = \"cba\"\n     * StringUtils.substringAfter(\"abc\", \"c\")   = \"\"\n     * StringUtils.substringAfter(\"abc\", \"d\")   = \"\"\n     * StringUtils.substringAfter(\"abc\", \"\")    = \"abc\"\n     * </pre>\n     *\n     * @param str  the String to get a substring from, may be null\n     * @param separator  the String to search for, may be null\n     * @return the substring after the first occurrence of the separator,\n     *  <code>null</code> if null String input\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.substringBeforeLast(java.lang.String, java.lang.String)",
        "snippet": "    public static String substringBeforeLast(String str, String separator) {\n        if (isEmpty(str) || isEmpty(separator)) {\n            return str;\n        }\n        int pos = str.lastIndexOf(separator);\n        if (pos == -1) {\n            return str;\n        }\n        return str.substring(0, pos);\n    }",
        "begin_line": 1777,
        "end_line": 1786,
        "comment": "\n     * <p>Gets the substring before the last occurrence of a separator.\n     * The separator is not returned.</p>\n     *\n     * <p>A <code>null</code> string input will return <code>null</code>.\n     * An empty (\"\") string input will return the empty string.\n     * An empty or <code>null</code> separator will return the input string.</p>\n     *\n     * <pre>\n     * StringUtils.substringBeforeLast(null, *)      = null\n     * StringUtils.substringBeforeLast(\"\", *)        = \"\"\n     * StringUtils.substringBeforeLast(\"abcba\", \"b\") = \"abc\"\n     * StringUtils.substringBeforeLast(\"abc\", \"c\")   = \"ab\"\n     * StringUtils.substringBeforeLast(\"a\", \"a\")     = \"\"\n     * StringUtils.substringBeforeLast(\"a\", \"z\")     = \"a\"\n     * StringUtils.substringBeforeLast(\"a\", null)    = \"a\"\n     * StringUtils.substringBeforeLast(\"a\", \"\")      = \"a\"\n     * </pre>\n     *\n     * @param str  the String to get a substring from, may be null\n     * @param separator  the String to search for, may be null\n     * @return the substring before the last occurrence of the separator,\n     *  <code>null</code> if null String input\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.substringAfterLast(java.lang.String, java.lang.String)",
        "snippet": "    public static String substringAfterLast(String str, String separator) {\n        if (isEmpty(str)) {\n            return str;\n        }\n        if (isEmpty(separator)) {\n            return EMPTY;\n        }\n        int pos = str.lastIndexOf(separator);\n        if (pos == -1 || pos == (str.length() - separator.length())) {\n            return EMPTY;\n        }\n        return str.substring(pos + separator.length());\n    }",
        "begin_line": 1815,
        "end_line": 1827,
        "comment": "\n     * <p>Gets the substring after the last occurrence of a separator.\n     * The separator is not returned.</p>\n     *\n     * <p>A <code>null</code> string input will return <code>null</code>.\n     * An empty (\"\") string input will return the empty string.\n     * An empty or <code>null</code> separator will return the empty string if\n     * the input string is not <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.substringAfterLast(null, *)      = null\n     * StringUtils.substringAfterLast(\"\", *)        = \"\"\n     * StringUtils.substringAfterLast(*, \"\")        = \"\"\n     * StringUtils.substringAfterLast(*, null)      = \"\"\n     * StringUtils.substringAfterLast(\"abc\", \"a\")   = \"bc\"\n     * StringUtils.substringAfterLast(\"abcba\", \"b\") = \"a\"\n     * StringUtils.substringAfterLast(\"abc\", \"c\")   = \"\"\n     * StringUtils.substringAfterLast(\"a\", \"a\")     = \"\"\n     * StringUtils.substringAfterLast(\"a\", \"z\")     = \"\"\n     * </pre>\n     *\n     * @param str  the String to get a substring from, may be null\n     * @param separator  the String to search for, may be null\n     * @return the substring after the last occurrence of the separator,\n     *  <code>null</code> if null String input\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.substringBetween(java.lang.String, java.lang.String)",
        "snippet": "    public static String substringBetween(String str, String tag) {\n        return substringBetween(str, tag, tag);\n    }",
        "begin_line": 1852,
        "end_line": 1854,
        "comment": "\n     * <p>Gets the String that is nested in between two instances of the\n     * same String.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * A <code>null</code> tag returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.substringBetween(null, *)            = null\n     * StringUtils.substringBetween(\"\", \"\")             = \"\"\n     * StringUtils.substringBetween(\"\", \"tag\")          = null\n     * StringUtils.substringBetween(\"tagabctag\", null)  = null\n     * StringUtils.substringBetween(\"tagabctag\", \"\")    = \"\"\n     * StringUtils.substringBetween(\"tagabctag\", \"tag\") = \"abc\"\n     * </pre>\n     *\n     * @param str  the String containing the substring, may be null\n     * @param tag  the String before and after the substring, may be null\n     * @return the substring, <code>null</code> if no match\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.substringBetween(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    public static String substringBetween(String str, String open, String close) {\n        if (str == null || open == null || close == null) {\n            return null;\n        }\n        int start = str.indexOf(open);\n        if (start != -1) {\n            int end = str.indexOf(close, start + open.length());\n            if (end != -1) {\n                return str.substring(start + open.length(), end);\n            }\n        }\n        return null;\n    }",
        "begin_line": 1881,
        "end_line": 1893,
        "comment": "\n     * <p>Gets the String that is nested in between two Strings.\n     * Only the first match is returned.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * A <code>null</code> open/close returns <code>null</code> (no match).\n     * An empty (\"\") open/close returns an empty string.</p>\n     *\n     * <pre>\n     * StringUtils.substringBetween(null, *, *)          = null\n     * StringUtils.substringBetween(\"\", \"\", \"\")          = \"\"\n     * StringUtils.substringBetween(\"\", \"\", \"tag\")       = null\n     * StringUtils.substringBetween(\"\", \"tag\", \"tag\")    = null\n     * StringUtils.substringBetween(\"yabcz\", null, null) = null\n     * StringUtils.substringBetween(\"yabcz\", \"\", \"\")     = \"\"\n     * StringUtils.substringBetween(\"yabcz\", \"y\", \"z\")   = \"abc\"\n     * StringUtils.substringBetween(\"yabczyabcz\", \"y\", \"z\")   = \"abc\"\n     * </pre>\n     *\n     * @param str  the String containing the substring, may be null\n     * @param open  the String before the substring, may be null\n     * @param close  the String after the substring, may be null\n     * @return the substring, <code>null</code> if no match\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.getNestedString(java.lang.String, java.lang.String)",
        "snippet": "    public static String getNestedString(String str, String tag) {\n        return substringBetween(str, tag, tag);\n    }",
        "begin_line": 1919,
        "end_line": 1921,
        "comment": "\n     * <p>Gets the String that is nested in between two instances of the\n     * same String.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * A <code>null</code> tag returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.getNestedString(null, *)            = null\n     * StringUtils.getNestedString(\"\", \"\")             = \"\"\n     * StringUtils.getNestedString(\"\", \"tag\")          = null\n     * StringUtils.getNestedString(\"tagabctag\", null)  = null\n     * StringUtils.getNestedString(\"tagabctag\", \"\")    = \"\"\n     * StringUtils.getNestedString(\"tagabctag\", \"tag\") = \"abc\"\n     * </pre>\n     *\n     * @param str  the String containing nested-string, may be null\n     * @param tag  the String before and after nested-string, may be null\n     * @return the nested String, <code>null</code> if no match\n     * @deprecated Use the better named {@link #substringBetween(String, String)}.\n     *             Method will be removed in Commons Lang 3.0.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.getNestedString(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    public static String getNestedString(String str, String open, String close) {\n        return substringBetween(str, open, close);\n    }",
        "begin_line": 1949,
        "end_line": 1951,
        "comment": "\n     * <p>Gets the String that is nested in between two Strings.\n     * Only the first match is returned.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * A <code>null</code> open/close returns <code>null</code> (no match).\n     * An empty (\"\") open/close returns an empty string.</p>\n     *\n     * <pre>\n     * StringUtils.getNestedString(null, *, *)          = null\n     * StringUtils.getNestedString(\"\", \"\", \"\")          = \"\"\n     * StringUtils.getNestedString(\"\", \"\", \"tag\")       = null\n     * StringUtils.getNestedString(\"\", \"tag\", \"tag\")    = null\n     * StringUtils.getNestedString(\"yabcz\", null, null) = null\n     * StringUtils.getNestedString(\"yabcz\", \"\", \"\")     = \"\"\n     * StringUtils.getNestedString(\"yabcz\", \"y\", \"z\")   = \"abc\"\n     * StringUtils.getNestedString(\"yabczyabcz\", \"y\", \"z\")   = \"abc\"\n     * </pre>\n     *\n     * @param str  the String containing nested-string, may be null\n     * @param open  the String before nested-string, may be null\n     * @param close  the String after nested-string, may be null\n     * @return the nested String, <code>null</code> if no match\n     * @deprecated Use the better named {@link #substringBetween(String, String, String)}.\n     *             Method will be removed in Commons Lang 3.0.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.split(java.lang.String)",
        "snippet": "    public static String[] split(String str) {\n        return split(str, null, -1);\n    }",
        "begin_line": 1977,
        "end_line": 1979,
        "comment": "\n     * <p>Splits the provided text into an array, using whitespace as the\n     * separator.\n     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as one separator.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.split(null)       = null\n     * StringUtils.split(\"\")         = []\n     * StringUtils.split(\"abc def\")  = [\"abc\", \"def\"]\n     * StringUtils.split(\"abc  def\") = [\"abc\", \"def\"]\n     * StringUtils.split(\" abc \")    = [\"abc\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.split(java.lang.String, char)",
        "snippet": "    public static String[] split(String str, char separatorChar) {\n        return splitWorker(str, separatorChar, false);\n    }",
        "begin_line": 2007,
        "end_line": 2009,
        "comment": "\n     * <p>Splits the provided text into an array, separator specified.\n     * This is an alternative to using StringTokenizer.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as one separator.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.split(null, *)         = null\n     * StringUtils.split(\"\", *)           = []\n     * StringUtils.split(\"a.b.c\", '.')    = [\"a\", \"b\", \"c\"]\n     * StringUtils.split(\"a..b.c\", '.')   = [\"a\", \"b\", \"c\"]\n     * StringUtils.split(\"a:b:c\", '.')    = [\"a:b:c\"]\n     * StringUtils.split(\"a\\tb\\nc\", null) = [\"a\", \"b\", \"c\"]\n     * StringUtils.split(\"a b c\", ' ')    = [\"a\", \"b\", \"c\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @param separatorChar  the character used as the delimiter,\n     *  <code>null</code> splits on whitespace\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.split(java.lang.String, java.lang.String)",
        "snippet": "    public static String[] split(String str, String separatorChars) {\n        return splitWorker(str, separatorChars, -1, false);\n    }",
        "begin_line": 2036,
        "end_line": 2038,
        "comment": "\n     * <p>Splits the provided text into an array, separators specified.\n     * This is an alternative to using StringTokenizer.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as one separator.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * A <code>null</code> separatorChars splits on whitespace.</p>\n     *\n     * <pre>\n     * StringUtils.split(null, *)         = null\n     * StringUtils.split(\"\", *)           = []\n     * StringUtils.split(\"abc def\", null) = [\"abc\", \"def\"]\n     * StringUtils.split(\"abc def\", \" \")  = [\"abc\", \"def\"]\n     * StringUtils.split(\"abc  def\", \" \") = [\"abc\", \"def\"]\n     * StringUtils.split(\"ab:cd:ef\", \":\") = [\"ab\", \"cd\", \"ef\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @param separatorChars  the characters used as the delimiters,\n     *  <code>null</code> splits on whitespace\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.split(java.lang.String, java.lang.String, int)",
        "snippet": "    public static String[] split(String str, String separatorChars, int max) {\n        return splitWorker(str, separatorChars, max, false);\n    }",
        "begin_line": 2070,
        "end_line": 2072,
        "comment": "\n     * <p>Splits the provided text into an array with a maximum length,\n     * separators specified.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as one separator.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * A <code>null</code> separatorChars splits on whitespace.</p>\n     *\n     * <p>If more than <code>max</code> delimited substrings are found, the last\n     * returned string includes all characters after the first <code>max - 1</code>\n     * returned strings (including separator characters).</p>\n     *\n     * <pre>\n     * StringUtils.split(null, *, *)            = null\n     * StringUtils.split(\"\", *, *)              = []\n     * StringUtils.split(\"ab de fg\", null, 0)   = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.split(\"ab   de fg\", null, 0) = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.split(\"ab:cd:ef\", \":\", 0)    = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.split(\"ab:cd:ef\", \":\", 2)    = [\"ab\", \"cd:ef\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @param separatorChars  the characters used as the delimiters,\n     *  <code>null</code> splits on whitespace\n     * @param max  the maximum number of elements to include in the\n     *  array. A zero or negative value implies no limit\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.splitByWholeSeparator(java.lang.String, java.lang.String)",
        "snippet": "    public static String[] splitByWholeSeparator(String str, String separator) {\n        return splitByWholeSeparator( str, separator, -1 ) ;\n    }",
        "begin_line": 2097,
        "end_line": 2099,
        "comment": "\n     * <p>Splits the provided text into an array, separator string specified.</p>\n     *\n     * <p>The separator(s) will not be included in the returned String array.\n     * Adjacent separators are treated as one separator.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * A <code>null</code> separator splits on whitespace.</p>\n     *\n     * <pre>\n     * StringUtils.splitByWholeSeparator(null, *)               = null\n     * StringUtils.splitByWholeSeparator(\"\", *)                 = []\n     * StringUtils.splitByWholeSeparator(\"ab de fg\", null)      = [\"ab\", \"de\", \"fg\"]\n     * StringUtils.splitByWholeSeparator(\"ab   de fg\", null)    = [\"ab\", \"de\", \"fg\"]\n     * StringUtils.splitByWholeSeparator(\"ab:cd:ef\", \":\")       = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.splitByWholeSeparator(\"ab-!-cd-!-ef\", \"-!-\") = [\"ab\", \"cd\", \"ef\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @param separator  String containing the String to be used as a delimiter,\n     *  <code>null</code> splits on whitespace\n     * @return an array of parsed Strings, <code>null</code> if null String was input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.splitByWholeSeparator(java.lang.String, java.lang.String, int)",
        "snippet": "    public static String[] splitByWholeSeparator( String str, String separator, int max ) {\n        if (str == null) {\n            return null;\n        }\n\n        int len = str.length() ;\n\n        if (len == 0) {\n            return ArrayUtils.EMPTY_STRING_ARRAY;\n        }\n\n        if ( ( separator == null ) || ( \"\".equals( separator ) ) ) {\n            // Split on whitespace.\n            return split( str, null, max ) ;\n        }\n\n\n        int separatorLength = separator.length() ;\n\n        ArrayList substrings = new ArrayList() ;\n        int numberOfSubstrings = 0 ;\n        int beg = 0 ;\n        int end = 0 ;\n        while ( end < len ) {\n            end = str.indexOf( separator, beg ) ;\n\n            if ( end > -1 ) {\n                if ( end > beg ) {\n                    numberOfSubstrings += 1 ;\n\n                    if ( numberOfSubstrings == max ) {\n                        end = len ;\n                        substrings.add( str.substring( beg ) ) ;\n                    } else {\n                        // The following is OK, because String.substring( beg, end ) excludes\n                        // the character at the position 'end'.\n                        substrings.add( str.substring( beg, end ) ) ;\n\n                        // Set the starting point for the next search.\n                        // The following is equivalent to beg = end + (separatorLength - 1) + 1,\n                        // which is the right calculation:\n                        beg = end + separatorLength ;\n                    }\n                } else {\n                    // We found a consecutive occurrence of the separator, so skip it.\n                    beg = end + separatorLength ;\n                }\n            } else {\n                // String.substring( beg ) goes from 'beg' to the end of the String.\n                substrings.add( str.substring( beg ) ) ;\n                end = len ;\n            }\n        }\n\n        return (String[]) substrings.toArray( new String[substrings.size()] ) ;\n    }",
        "begin_line": 2128,
        "end_line": 2183,
        "comment": "\n     * <p>Splits the provided text into an array, separator string specified.\n     * Returns a maximum of <code>max</code> substrings.</p>\n     *\n     * <p>The separator(s) will not be included in the returned String array.\n     * Adjacent separators are treated as one separator.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * A <code>null</code> separator splits on whitespace.</p>\n     *\n     * <pre>\n     * StringUtils.splitByWholeSeparator(null, *, *)               = null\n     * StringUtils.splitByWholeSeparator(\"\", *, *)                 = []\n     * StringUtils.splitByWholeSeparator(\"ab de fg\", null, 0)      = [\"ab\", \"de\", \"fg\"]\n     * StringUtils.splitByWholeSeparator(\"ab   de fg\", null, 0)    = [\"ab\", \"de\", \"fg\"]\n     * StringUtils.splitByWholeSeparator(\"ab:cd:ef\", \":\", 2)       = [\"ab\", \"cd:ef\"]\n     * StringUtils.splitByWholeSeparator(\"ab-!-cd-!-ef\", \"-!-\", 5) = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.splitByWholeSeparator(\"ab-!-cd-!-ef\", \"-!-\", 2) = [\"ab\", \"cd-!-ef\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @param separator  String containing the String to be used as a delimiter,\n     *  <code>null</code> splits on whitespace\n     * @param max  the maximum number of elements to include in the returned\n     *  array. A zero or negative value implies no limit.\n     * @return an array of parsed Strings, <code>null</code> if null String was input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.splitPreserveAllTokens(java.lang.String)",
        "snippet": "    public static String[] splitPreserveAllTokens(String str) {\n        return splitWorker(str, null, -1, true);\n    }",
        "begin_line": 2211,
        "end_line": 2213,
        "comment": "\n     * <p>Splits the provided text into an array, using whitespace as the\n     * separator, preserving all tokens, including empty tokens created by \n     * adjacent separators. This is an alternative to using StringTokenizer.\n     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as separators for empty tokens.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.splitPreserveAllTokens(null)       = null\n     * StringUtils.splitPreserveAllTokens(\"\")         = []\n     * StringUtils.splitPreserveAllTokens(\"abc def\")  = [\"abc\", \"def\"]\n     * StringUtils.splitPreserveAllTokens(\"abc  def\") = [\"abc\", \"\", \"def\"]\n     * StringUtils.splitPreserveAllTokens(\" abc \")    = [\"\", \"abc\", \"\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be <code>null</code>\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.splitPreserveAllTokens(java.lang.String, char)",
        "snippet": "    public static String[] splitPreserveAllTokens(String str, char separatorChar) {\n        return splitWorker(str, separatorChar, true);\n    }",
        "begin_line": 2247,
        "end_line": 2249,
        "comment": "\n     * <p>Splits the provided text into an array, separator specified,\n     * preserving all tokens, including empty tokens created by adjacent\n     * separators. This is an alternative to using StringTokenizer.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as separators for empty tokens.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.splitPreserveAllTokens(null, *)         = null\n     * StringUtils.splitPreserveAllTokens(\"\", *)           = []\n     * StringUtils.splitPreserveAllTokens(\"a.b.c\", '.')    = [\"a\", \"b\", \"c\"]\n     * StringUtils.splitPreserveAllTokens(\"a..b.c\", '.')   = [\"a\", \"\", \"b\", \"c\"]\n     * StringUtils.splitPreserveAllTokens(\"a:b:c\", '.')    = [\"a:b:c\"]\n     * StringUtils.splitPreserveAllTokens(\"a\\tb\\nc\", null) = [\"a\", \"b\", \"c\"]\n     * StringUtils.splitPreserveAllTokens(\"a b c\", ' ')    = [\"a\", \"b\", \"c\"]\n     * StringUtils.splitPreserveAllTokens(\"a b c \", ' ')   = [\"a\", \"b\", \"c\", \"\"]\n     * StringUtils.splitPreserveAllTokens(\"a b c  \", ' ')   = [\"a\", \"b\", \"c\", \"\", \"\"]\n     * StringUtils.splitPreserveAllTokens(\" a b c\", ' ')   = [\"\", a\", \"b\", \"c\"]\n     * StringUtils.splitPreserveAllTokens(\"  a b c\", ' ')  = [\"\", \"\", a\", \"b\", \"c\"]\n     * StringUtils.splitPreserveAllTokens(\" a b c \", ' ')  = [\"\", a\", \"b\", \"c\", \"\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be <code>null</code>\n     * @param separatorChar  the character used as the delimiter,\n     *  <code>null</code> splits on whitespace\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.splitWorker(java.lang.String, char, boolean)",
        "snippet": "    private static String[] splitWorker(String str, char separatorChar, boolean preserveAllTokens) {\n        // Performance tuned for 2.0 (JDK1.4)\n\n        if (str == null) {\n            return null;\n        }\n        int len = str.length();\n        if (len == 0) {\n            return ArrayUtils.EMPTY_STRING_ARRAY;\n        }\n        List list = new ArrayList();\n        int i = 0, start = 0;\n        boolean match = false;\n        boolean lastMatch = false;\n        while (i < len) {\n            if (str.charAt(i) == separatorChar) {\n                if (match || preserveAllTokens) {\n                    list.add(str.substring(start, i));\n                    match = false;\n                    lastMatch = true;\n                }\n                start = ++i;\n                continue;\n            } else {\n                lastMatch = false;\n            }\n            match = true;\n            i++;\n        }\n        if (match || (preserveAllTokens && lastMatch)) {\n            list.add(str.substring(start, i));\n        }\n        return (String[]) list.toArray(new String[list.size()]);\n    }",
        "begin_line": 2263,
        "end_line": 2296,
        "comment": "\n     * Performs the logic for the <code>split</code> and \n     * <code>splitPreserveAllTokens</code> methods that do not return a\n     * maximum array length.\n     *\n     * @param str  the String to parse, may be <code>null</code>\n     * @param separatorChar the separate character\n     * @param preserveAllTokens if <code>true</code>, adjacent separators are\n     * treated as empty token separators; if <code>false</code>, adjacent\n     * separators are treated as one separator.\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.splitPreserveAllTokens(java.lang.String, java.lang.String)",
        "snippet": "    public static String[] splitPreserveAllTokens(String str, String separatorChars) {\n        return splitWorker(str, separatorChars, -1, true);\n    }",
        "begin_line": 2331,
        "end_line": 2333,
        "comment": "\n     * <p>Splits the provided text into an array, separators specified, \n     * preserving all tokens, including empty tokens created by adjacent\n     * separators. This is an alternative to using StringTokenizer.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as separators for empty tokens.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * A <code>null</code> separatorChars splits on whitespace.</p>\n     *\n     * <pre>\n     * StringUtils.splitPreserveAllTokens(null, *)           = null\n     * StringUtils.splitPreserveAllTokens(\"\", *)             = []\n     * StringUtils.splitPreserveAllTokens(\"abc def\", null)   = [\"abc\", \"def\"]\n     * StringUtils.splitPreserveAllTokens(\"abc def\", \" \")    = [\"abc\", \"def\"]\n     * StringUtils.splitPreserveAllTokens(\"abc  def\", \" \")   = [\"abc\", \"\", def\"]\n     * StringUtils.splitPreserveAllTokens(\"ab:cd:ef\", \":\")   = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\"ab:cd:ef:\", \":\")  = [\"ab\", \"cd\", \"ef\", \"\"]\n     * StringUtils.splitPreserveAllTokens(\"ab:cd:ef::\", \":\") = [\"ab\", \"cd\", \"ef\", \"\", \"\"]\n     * StringUtils.splitPreserveAllTokens(\"ab::cd:ef\", \":\")  = [\"ab\", \"\", cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\":cd:ef\", \":\")     = [\"\", cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\"::cd:ef\", \":\")    = [\"\", \"\", cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\":cd:ef:\", \":\")    = [\"\", cd\", \"ef\", \"\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be <code>null</code>\n     * @param separatorChars  the characters used as the delimiters,\n     *  <code>null</code> splits on whitespace\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.splitPreserveAllTokens(java.lang.String, java.lang.String, int)",
        "snippet": "    public static String[] splitPreserveAllTokens(String str, String separatorChars, int max) {\n        return splitWorker(str, separatorChars, max, true);\n    }",
        "begin_line": 2371,
        "end_line": 2373,
        "comment": "\n     * <p>Splits the provided text into an array with a maximum length,\n     * separators specified, preserving all tokens, including empty tokens \n     * created by adjacent separators.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as separators for empty tokens.\n     * Adjacent separators are treated as one separator.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * A <code>null</code> separatorChars splits on whitespace.</p>\n     *\n     * <p>If more than <code>max</code> delimited substrings are found, the last\n     * returned string includes all characters after the first <code>max - 1</code>\n     * returned strings (including separator characters).</p>\n     *\n     * <pre>\n     * StringUtils.splitPreserveAllTokens(null, *, *)            = null\n     * StringUtils.splitPreserveAllTokens(\"\", *, *)              = []\n     * StringUtils.splitPreserveAllTokens(\"ab de fg\", null, 0)   = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 0) = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\"ab:cd:ef\", \":\", 0)    = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\"ab:cd:ef\", \":\", 2)    = [\"ab\", \"cd:ef\"]\n     * StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 2) = [\"ab\", \"  de fg\"]\n     * StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 3) = [\"ab\", \"\", \" de fg\"]\n     * StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 4) = [\"ab\", \"\", \"\", \"de fg\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be <code>null</code>\n     * @param separatorChars  the characters used as the delimiters,\n     *  <code>null</code> splits on whitespace\n     * @param max  the maximum number of elements to include in the\n     *  array. A zero or negative value implies no limit\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.splitWorker(java.lang.String, java.lang.String, int, boolean)",
        "snippet": "    private static String[] splitWorker(String str, String separatorChars, int max, boolean preserveAllTokens) {\n        // Performance tuned for 2.0 (JDK1.4)\n        // Direct code is quicker than StringTokenizer.\n        // Also, StringTokenizer uses isSpace() not isWhitespace()\n\n        if (str == null) {\n            return null;\n        }\n        int len = str.length();\n        if (len == 0) {\n            return ArrayUtils.EMPTY_STRING_ARRAY;\n        }\n        List list = new ArrayList();\n        int sizePlus1 = 1;\n        int i = 0, start = 0;\n        boolean match = false;\n        boolean lastMatch = false;\n        if (separatorChars == null) {\n            // Null separator means use whitespace\n            while (i < len) {\n                if (Character.isWhitespace(str.charAt(i))) {\n                    if (match || preserveAllTokens) {\n                        lastMatch = true;\n                        if (sizePlus1++ == max) {\n                            i = len;\n                            lastMatch = false;\n                        }\n                        list.add(str.substring(start, i));\n                        match = false;\n                    }\n                    start = ++i;\n                    continue;\n                } else {\n                    lastMatch = false;\n                }\n                match = true;\n                i++;\n            }\n        } else if (separatorChars.length() == 1) {\n            // Optimise 1 character case\n            char sep = separatorChars.charAt(0);\n            while (i < len) {\n                if (str.charAt(i) == sep) {\n                    if (match || preserveAllTokens) {\n                        lastMatch = true;\n                        if (sizePlus1++ == max) {\n                            i = len;\n                            lastMatch = false;\n                        }\n                        list.add(str.substring(start, i));\n                        match = false;\n                    }\n                    start = ++i;\n                    continue;\n                } else {\n                    lastMatch = false;\n                }\n                match = true;\n                i++;\n            }\n        } else {\n            // standard case\n            while (i < len) {\n                if (separatorChars.indexOf(str.charAt(i)) >= 0) {\n                    if (match || preserveAllTokens) {\n                        lastMatch = true;\n                        if (sizePlus1++ == max) {\n                            i = len;\n                            lastMatch = false;\n                        }\n                        list.add(str.substring(start, i));\n                        match = false;\n                    }\n                    start = ++i;\n                    continue;\n                } else {\n                    lastMatch = false;\n                }\n                match = true;\n                i++;\n            }\n        }\n        if (match || (preserveAllTokens && lastMatch)) {\n            list.add(str.substring(start, i));\n        }\n        return (String[]) list.toArray(new String[list.size()]);\n    }",
        "begin_line": 2389,
        "end_line": 2475,
        "comment": "\n     * Performs the logic for the <code>split</code> and \n     * <code>splitPreserveAllTokens</code> methods that return a maximum array \n     * length.\n     *\n     * @param str  the String to parse, may be <code>null</code>\n     * @param separatorChars the separate character\n     * @param max  the maximum number of elements to include in the\n     *  array. A zero or negative value implies no limit.\n     * @param preserveAllTokens if <code>true</code>, adjacent separators are\n     * treated as empty token separators; if <code>false</code>, adjacent\n     * separators are treated as one separator.\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.concatenate(java.lang.Object[])",
        "snippet": "    public static String concatenate(Object[] array) {\n        return join(array, null);\n    }",
        "begin_line": 2497,
        "end_line": 2499,
        "comment": "\n     * <p>Concatenates elements of an array into a single String.\n     * Null objects or empty strings within the array are represented by\n     * empty strings.</p>\n     *\n     * <pre>\n     * StringUtils.concatenate(null)            = null\n     * StringUtils.concatenate([])              = \"\"\n     * StringUtils.concatenate([null])          = \"\"\n     * StringUtils.concatenate([\"a\", \"b\", \"c\"]) = \"abc\"\n     * StringUtils.concatenate([null, \"\", \"a\"]) = \"a\"\n     * </pre>\n     *\n     * @param array  the array of values to concatenate, may be null\n     * @return the concatenated String, <code>null</code> if null array input\n     * @deprecated Use the better named {@link #join(Object[])} instead.\n     *             Method will be removed in Commons Lang 3.0.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.join(java.lang.Object[])",
        "snippet": "    public static String join(Object[] array) {\n        return join(array, null);\n    }",
        "begin_line": 2521,
        "end_line": 2523,
        "comment": "\n     * <p>Joins the elements of the provided array into a single String\n     * containing the provided list of elements.</p>\n     *\n     * <p>No separator is added to the joined String.\n     * Null objects or empty strings within the array are represented by\n     * empty strings.</p>\n     *\n     * <pre>\n     * StringUtils.join(null)            = null\n     * StringUtils.join([])              = \"\"\n     * StringUtils.join([null])          = \"\"\n     * StringUtils.join([\"a\", \"b\", \"c\"]) = \"abc\"\n     * StringUtils.join([null, \"\", \"a\"]) = \"a\"\n     * </pre>\n     *\n     * @param array  the array of values to join together, may be null\n     * @return the joined String, <code>null</code> if null array input\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.join(java.lang.Object[], char)",
        "snippet": "    public static String join(Object[] array, char separator) {\n        if (array == null) {\n            return null;\n        }\n\n        return join(array, separator, 0, array.length);\n    }",
        "begin_line": 2547,
        "end_line": 2553,
        "comment": "\n     * <p>Joins the elements of the provided array into a single String\n     * containing the provided list of elements.</p>\n     *\n     * <p>No delimiter is added before or after the list.\n     * Null objects or empty strings within the array are represented by\n     * empty strings.</p>\n     *\n     * <pre>\n     * StringUtils.join(null, *)               = null\n     * StringUtils.join([], *)                 = \"\"\n     * StringUtils.join([null], *)             = \"\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], ';')  = \"a;b;c\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], null) = \"abc\"\n     * StringUtils.join([null, \"\", \"a\"], ';')  = \";;a\"\n     * </pre>\n     *\n     * @param array  the array of values to join together, may be null\n     * @param separator  the separator character to use\n     * @return the joined String, <code>null</code> if null array input\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.join(java.lang.Object[], char, int, int)",
        "snippet": "    public static String join(Object[] array, char separator, int startIndex, int endIndex) {\n        if (array == null) {\n            return null;\n        }\n        int bufSize = (endIndex - startIndex);\n        if (bufSize <= 0) {\n            return EMPTY;\n        }\n\n        bufSize *= ((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + 1);\n        StringBuffer buf = new StringBuffer(bufSize);\n\n        for (int i = startIndex; i < endIndex; i++) {\n            if (i > startIndex) {\n                buf.append(separator);\n            }\n            if (array[i] != null) {\n                buf.append(array[i]);\n            }\n        }\n        return buf.toString();\n    }",
        "begin_line": 2581,
        "end_line": 2602,
        "comment": "\n     * <p>Joins the elements of the provided array into a single String\n     * containing the provided list of elements.</p>\n     *\n     * <p>No delimiter is added before or after the list.\n     * Null objects or empty strings within the array are represented by\n     * empty strings.</p>\n     *\n     * <pre>\n     * StringUtils.join(null, *)               = null\n     * StringUtils.join([], *)                 = \"\"\n     * StringUtils.join([null], *)             = \"\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], ';')  = \"a;b;c\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], null) = \"abc\"\n     * StringUtils.join([null, \"\", \"a\"], ';')  = \";;a\"\n     * </pre>\n     *\n     * @param array  the array of values to join together, may be null\n     * @param separator  the separator character to use\n     * @param startIndex the first index to start joining from.  It is\n     * an error to pass in an end index past the end of the array\n     * @param endIndex the index to stop joining from (exclusive). It is\n     * an error to pass in an end index past the end of the array\n     * @return the joined String, <code>null</code> if null array input\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.join(java.lang.Object[], java.lang.String)",
        "snippet": "    public static String join(Object[] array, String separator) {\n        if (array == null) {\n            return null;\n        }\n        return join(array, separator, 0, array.length);\n    }",
        "begin_line": 2628,
        "end_line": 2633,
        "comment": "\n     * <p>Joins the elements of the provided array into a single String\n     * containing the provided list of elements.</p>\n     *\n     * <p>No delimiter is added before or after the list.\n     * A <code>null</code> separator is the same as an empty String (\"\").\n     * Null objects or empty strings within the array are represented by\n     * empty strings.</p>\n     *\n     * <pre>\n     * StringUtils.join(null, *)                = null\n     * StringUtils.join([], *)                  = \"\"\n     * StringUtils.join([null], *)              = \"\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], \"--\")  = \"a--b--c\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], null)  = \"abc\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], \"\")    = \"abc\"\n     * StringUtils.join([null, \"\", \"a\"], ',')   = \",,a\"\n     * </pre>\n     *\n     * @param array  the array of values to join together, may be null\n     * @param separator  the separator character to use, null treated as \"\"\n     * @return the joined String, <code>null</code> if null array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.join(java.lang.Object[], java.lang.String, int, int)",
        "snippet": "    public static String join(Object[] array, String separator, int startIndex, int endIndex) {\n        if (array == null) {\n            return null;\n        }\n        if (separator == null) {\n            separator = EMPTY;\n        }\n\n        // endIndex - startIndex > 0:   Len = NofStrings *(len(firstString) + len(separator))\n        //           (Assuming that all Strings are roughly equally long)\n        int bufSize = (endIndex - startIndex);\n        if (bufSize <= 0) {\n            return EMPTY;\n        }\n\n        bufSize *= ((array[startIndex] == null ? 16 : array[startIndex].toString().length())\n                        + separator.length());\n\n        StringBuffer buf = new StringBuffer(bufSize);\n\n        for (int i = startIndex; i < endIndex; i++) {\n            if (i > startIndex) {\n                buf.append(separator);\n            }\n            if (array[i] != null) {\n                buf.append(array[i]);\n            }\n        }\n        return buf.toString();\n    }",
        "begin_line": 2662,
        "end_line": 2691,
        "comment": "\n     * <p>Joins the elements of the provided array into a single String\n     * containing the provided list of elements.</p>\n     *\n     * <p>No delimiter is added before or after the list.\n     * A <code>null</code> separator is the same as an empty String (\"\").\n     * Null objects or empty strings within the array are represented by\n     * empty strings.</p>\n     *\n     * <pre>\n     * StringUtils.join(null, *)                = null\n     * StringUtils.join([], *)                  = \"\"\n     * StringUtils.join([null], *)              = \"\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], \"--\")  = \"a--b--c\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], null)  = \"abc\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], \"\")    = \"abc\"\n     * StringUtils.join([null, \"\", \"a\"], ',')   = \",,a\"\n     * </pre>\n     *\n     * @param array  the array of values to join together, may be null\n     * @param separator  the separator character to use, null treated as \"\"\n     * @param startIndex the first index to start joining from.  It is\n     * an error to pass in an end index past the end of the array\n     * @param endIndex the index to stop joining from (exclusive). It is\n     * an error to pass in an end index past the end of the array\n     * @return the joined String, <code>null</code> if null array input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.join(java.util.Iterator, char)",
        "snippet": "    public static String join(Iterator iterator, char separator) {\n\n        // handle null, zero and one elements before building a buffer\n        if (iterator == null) {\n            return null;\n        }\n        if (!iterator.hasNext()) {\n            return EMPTY;\n        }\n        Object first = iterator.next();\n        if (!iterator.hasNext()) {\n            return ObjectUtils.toString(first);\n        }\n\n        // two or more elements\n        StringBuffer buf = new StringBuffer(256); // Java default is 16, probably too small\n        if (first != null) {\n            buf.append(first);\n        }\n\n        while (iterator.hasNext()) {\n            buf.append(separator);\n            Object obj = iterator.next();\n            if (obj != null) {\n                buf.append(obj);\n            }\n        }\n\n        return buf.toString();\n    }",
        "begin_line": 2707,
        "end_line": 2736,
        "comment": "\n     * <p>Joins the elements of the provided <code>Iterator</code> into\n     * a single String containing the provided elements.</p>\n     *\n     * <p>No delimiter is added before or after the list. Null objects or empty\n     * strings within the iteration are represented by empty strings.</p>\n     *\n     * <p>See the examples here: {@link #join(Object[],char)}. </p>\n     *\n     * @param iterator  the <code>Iterator</code> of values to join together, may be null\n     * @param separator  the separator character to use\n     * @return the joined String, <code>null</code> if null iterator input\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.join(java.util.Iterator, java.lang.String)",
        "snippet": "    public static String join(Iterator iterator, String separator) {\n\n        // handle null, zero and one elements before building a buffer\n        if (iterator == null) {\n            return null;\n        }\n        if (!iterator.hasNext()) {\n            return EMPTY;\n        }\n        Object first = iterator.next();\n        if (!iterator.hasNext()) {\n            return ObjectUtils.toString(first);\n        }\n\n        // two or more elements\n        StringBuffer buf = new StringBuffer(256); // Java default is 16, probably too small\n        if (first != null) {\n            buf.append(first);\n        }\n\n        while (iterator.hasNext()) {\n            if (separator != null) {\n                buf.append(separator);\n            }\n            Object obj = iterator.next();\n            if (obj != null) {\n                buf.append(obj);\n            }\n        }\n        return buf.toString();\n    }",
        "begin_line": 2751,
        "end_line": 2781,
        "comment": "\n     * <p>Joins the elements of the provided <code>Iterator</code> into\n     * a single String containing the provided elements.</p>\n     *\n     * <p>No delimiter is added before or after the list.\n     * A <code>null</code> separator is the same as an empty String (\"\").</p>\n     *\n     * <p>See the examples here: {@link #join(Object[],String)}. </p>\n     *\n     * @param iterator  the <code>Iterator</code> of values to join together, may be null\n     * @param separator  the separator character to use, null treated as \"\"\n     * @return the joined String, <code>null</code> if null iterator input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.join(java.util.Collection, char)",
        "snippet": "    public static String join(Collection collection, char separator) {\n        if (collection == null) {\n            return null;\n        }\n        return join(collection.iterator(), separator);\n    }",
        "begin_line": 2797,
        "end_line": 2802,
        "comment": "\n     * <p>Joins the elements of the provided <code>Collection</code> into\n     * a single String containing the provided elements.</p>\n     *\n     * <p>No delimiter is added before or after the list. Null objects or empty\n     * strings within the iteration are represented by empty strings.</p>\n     *\n     * <p>See the examples here: {@link #join(Object[],char)}. </p>\n     *\n     * @param collection  the <code>Collection</code> of values to join together, may be null\n     * @param separator  the separator character to use\n     * @return the joined String, <code>null</code> if null iterator input\n     * @since 2.3\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.join(java.util.Collection, java.lang.String)",
        "snippet": "    public static String join(Collection collection, String separator) {\n        if (collection == null) {\n            return null;\n        }\n        return join(collection.iterator(), separator);\n    }",
        "begin_line": 2818,
        "end_line": 2823,
        "comment": "\n     * <p>Joins the elements of the provided <code>Collection</code> into\n     * a single String containing the provided elements.</p>\n     *\n     * <p>No delimiter is added before or after the list.\n     * A <code>null</code> separator is the same as an empty String (\"\").</p>\n     *\n     * <p>See the examples here: {@link #join(Object[],String)}. </p>\n     *\n     * @param collection  the <code>Collection</code> of values to join together, may be null\n     * @param separator  the separator character to use, null treated as \"\"\n     * @return the joined String, <code>null</code> if null iterator input\n     * @since 2.3\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.deleteSpaces(java.lang.String)",
        "snippet": "    public static String deleteSpaces(String str) {\n        if (str == null) {\n            return null;\n        }\n        return CharSetUtils.delete(str, \" \\t\\r\\n\\b\");\n    }",
        "begin_line": 2853,
        "end_line": 2858,
        "comment": "\n     * <p>Deletes all 'space' characters from a String as defined by\n     * {@link Character#isSpace(char)}.</p>\n     *\n     * <p>This is the only StringUtils method that uses the\n     * <code>isSpace</code> definition. You are advised to use\n     * {@link #deleteWhitespace(String)} instead as whitespace is much\n     * better localized.</p>\n     *\n     * <pre>\n     * StringUtils.deleteSpaces(null)           = null\n     * StringUtils.deleteSpaces(\"\")             = \"\"\n     * StringUtils.deleteSpaces(\"abc\")          = \"abc\"\n     * StringUtils.deleteSpaces(\" \\t  abc \\n \") = \"abc\"\n     * StringUtils.deleteSpaces(\"ab  c\")        = \"abc\"\n     * StringUtils.deleteSpaces(\"a\\nb\\tc     \") = \"abc\"\n     * </pre>\n     *\n     * <p>Spaces are defined as <code>{' ', '\\t', '\\r', '\\n', '\\b'}</code>\n     * in line with the deprecated <code>isSpace</code> method.</p>\n     *\n     * @param str  the String to delete spaces from, may be null\n     * @return the String without 'spaces', <code>null</code> if null String input\n     * @deprecated Use the better localized {@link #deleteWhitespace(String)}.\n     *             Method will be removed in Commons Lang 3.0.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.deleteWhitespace(java.lang.String)",
        "snippet": "    public static String deleteWhitespace(String str) {\n        if (isEmpty(str)) {\n            return str;\n        }\n        int sz = str.length();\n        char[] chs = new char[sz];\n        int count = 0;\n        for (int i = 0; i < sz; i++) {\n            if (!Character.isWhitespace(str.charAt(i))) {\n                chs[count++] = str.charAt(i);\n            }\n        }\n        if (count == sz) {\n            return str;\n        }\n        return new String(chs, 0, count);\n    }",
        "begin_line": 2874,
        "end_line": 2890,
        "comment": "\n     * <p>Deletes all whitespaces from a String as defined by\n     * {@link Character#isWhitespace(char)}.</p>\n     *\n     * <pre>\n     * StringUtils.deleteWhitespace(null)         = null\n     * StringUtils.deleteWhitespace(\"\")           = \"\"\n     * StringUtils.deleteWhitespace(\"abc\")        = \"abc\"\n     * StringUtils.deleteWhitespace(\"   ab  c  \") = \"abc\"\n     * </pre>\n     *\n     * @param str  the String to delete whitespace from, may be null\n     * @return the String without whitespaces, <code>null</code> if null String input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.removeStart(java.lang.String, java.lang.String)",
        "snippet": "    public static String removeStart(String str, String remove) {\n        if (isEmpty(str) || isEmpty(remove)) {\n            return str;\n        }\n        if (str.startsWith(remove)){\n            return str.substring(remove.length());\n        }\n        return str;\n    }",
        "begin_line": 2918,
        "end_line": 2926,
        "comment": "\n     * <p>Removes a substring only if it is at the begining of a source string,\n     * otherwise returns the source string.</p>\n     *\n     * <p>A <code>null</code> source string will return <code>null</code>.\n     * An empty (\"\") source string will return the empty string.\n     * A <code>null</code> search string will return the source string.</p>\n     *\n     * <pre>\n     * StringUtils.removeStart(null, *)      = null\n     * StringUtils.removeStart(\"\", *)        = \"\"\n     * StringUtils.removeStart(*, null)      = *\n     * StringUtils.removeStart(\"www.domain.com\", \"www.\")   = \"domain.com\"\n     * StringUtils.removeStart(\"domain.com\", \"www.\")       = \"domain.com\"\n     * StringUtils.removeStart(\"www.domain.com\", \"domain\") = \"www.domain.com\"\n     * StringUtils.removeStart(\"abc\", \"\")    = \"abc\"\n     * </pre>\n     *\n     * @param str  the source String to search, may be null\n     * @param remove  the String to search for and remove, may be null\n     * @return the substring with the string removed if found,\n     *  <code>null</code> if null String input\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.removeEnd(java.lang.String, java.lang.String)",
        "snippet": "    public static String removeEnd(String str, String remove) {\n        if (isEmpty(str) || isEmpty(remove)) {\n            return str;\n        }\n        if (str.endsWith(remove)) {\n            return str.substring(0, str.length() - remove.length());\n        }\n        return str;\n    }",
        "begin_line": 2952,
        "end_line": 2960,
        "comment": "\n     * <p>Removes a substring only if it is at the end of a source string,\n     * otherwise returns the source string.</p>\n     *\n     * <p>A <code>null</code> source string will return <code>null</code>.\n     * An empty (\"\") source string will return the empty string.\n     * A <code>null</code> search string will return the source string.</p>\n     *\n     * <pre>\n     * StringUtils.removeEnd(null, *)      = null\n     * StringUtils.removeEnd(\"\", *)        = \"\"\n     * StringUtils.removeEnd(*, null)      = *\n     * StringUtils.removeEnd(\"www.domain.com\", \".com.\")  = \"www.domain.com.\"\n     * StringUtils.removeEnd(\"www.domain.com\", \".com\")   = \"www.domain\"\n     * StringUtils.removeEnd(\"www.domain.com\", \"domain\") = \"www.domain.com\"\n     * StringUtils.removeEnd(\"abc\", \"\")    = \"abc\"\n     * </pre>\n     *\n     * @param str  the source String to search, may be null\n     * @param remove  the String to search for and remove, may be null\n     * @return the substring with the string removed if found,\n     *  <code>null</code> if null String input\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.remove(java.lang.String, java.lang.String)",
        "snippet": "    public static String remove(String str, String remove) {\n        if (isEmpty(str) || isEmpty(remove)) {\n            return str;\n        }\n        return replace(str, remove, \"\", -1);\n    }",
        "begin_line": 2985,
        "end_line": 2990,
        "comment": "\n     * <p>Removes all occurances of a substring from within the source string.</p>\n     *\n     * <p>A <code>null</code> source string will return <code>null</code>.\n     * An empty (\"\") source string will return the empty string.\n     * A <code>null</code> remove string will return the source string.\n     * An empty (\"\") remove string will return the source string.</p>\n     *\n     * <pre>\n     * StringUtils.remove(null, *)        = null\n     * StringUtils.remove(\"\", *)          = \"\"\n     * StringUtils.remove(*, null)        = *\n     * StringUtils.remove(*, \"\")          = *\n     * StringUtils.remove(\"queued\", \"ue\") = \"qd\"\n     * StringUtils.remove(\"queued\", \"zz\") = \"queued\"\n     * </pre>\n     *\n     * @param str  the source String to search, may be null\n     * @param remove  the String to search for and remove, may be null\n     * @return the substring with the string removed if found,\n     *  <code>null</code> if null String input\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.remove(java.lang.String, char)",
        "snippet": "    public static String remove(String str, char remove) {\n        if (isEmpty(str) || str.indexOf(remove) == -1) {\n            return str;\n        }\n        char[] chars = str.toCharArray();\n        int pos = 0;\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] != remove) {\n                chars[pos++] = chars[i];\n            }\n        }\n        return new String(chars, 0, pos);\n    }",
        "begin_line": 3011,
        "end_line": 3023,
        "comment": "\n     * <p>Removes all occurances of a character from within the source string.</p>\n     *\n     * <p>A <code>null</code> source string will return <code>null</code>.\n     * An empty (\"\") source string will return the empty string.</p>\n     *\n     * <pre>\n     * StringUtils.remove(null, *)       = null\n     * StringUtils.remove(\"\", *)         = \"\"\n     * StringUtils.remove(\"queued\", 'u') = \"qeed\"\n     * StringUtils.remove(\"queued\", 'z') = \"queued\"\n     * </pre>\n     *\n     * @param str  the source String to search, may be null\n     * @param remove  the char to search for and remove, may be null\n     * @return the substring with the char removed if found,\n     *  <code>null</code> if null String input\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.replaceOnce(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    public static String replaceOnce(String text, String repl, String with) {\n        return replace(text, repl, with, 1);\n    }",
        "begin_line": 3050,
        "end_line": 3052,
        "comment": "\n     * <p>Replaces a String with another String inside a larger String, once.</p>\n     *\n     * <p>A <code>null</code> reference passed to this method is a no-op.</p>\n     *\n     * <pre>\n     * StringUtils.replaceOnce(null, *, *)        = null\n     * StringUtils.replaceOnce(\"\", *, *)          = \"\"\n     * StringUtils.replaceOnce(\"any\", null, *)    = \"any\"\n     * StringUtils.replaceOnce(\"any\", *, null)    = \"any\"\n     * StringUtils.replaceOnce(\"any\", \"\", *)      = \"any\"\n     * StringUtils.replaceOnce(\"aba\", \"a\", null)  = \"aba\"\n     * StringUtils.replaceOnce(\"aba\", \"a\", \"\")    = \"ba\"\n     * StringUtils.replaceOnce(\"aba\", \"a\", \"z\")   = \"zba\"\n     * </pre>\n     *\n     * @see #replace(String text, String repl, String with, int max)\n     * @param text  text to search and replace in, may be null\n     * @param repl  the String to search for, may be null\n     * @param with  the String to replace with, may be null\n     * @return the text with any replacements processed,\n     *  <code>null</code> if null String input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.replace(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    public static String replace(String text, String repl, String with) {\n        return replace(text, repl, with, -1);\n    }",
        "begin_line": 3077,
        "end_line": 3079,
        "comment": "\n     * <p>Replaces all occurrences of a String within another String.</p>\n     *\n     * <p>A <code>null</code> reference passed to this method is a no-op.</p>\n     *\n     * <pre>\n     * StringUtils.replace(null, *, *)        = null\n     * StringUtils.replace(\"\", *, *)          = \"\"\n     * StringUtils.replace(\"any\", null, *)    = \"any\"\n     * StringUtils.replace(\"any\", *, null)    = \"any\"\n     * StringUtils.replace(\"any\", \"\", *)      = \"any\"\n     * StringUtils.replace(\"aba\", \"a\", null)  = \"aba\"\n     * StringUtils.replace(\"aba\", \"a\", \"\")    = \"b\"\n     * StringUtils.replace(\"aba\", \"a\", \"z\")   = \"zbz\"\n     * </pre>\n     *\n     * @see #replace(String text, String repl, String with, int max)\n     * @param text  text to search and replace in, may be null\n     * @param repl  the String to search for, may be null\n     * @param with  the String to replace with, may be null\n     * @return the text with any replacements processed,\n     *  <code>null</code> if null String input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.replace(java.lang.String, java.lang.String, java.lang.String, int)",
        "snippet": "    public static String replace(String text, String repl, String with, int max) {\n        if (isEmpty(text) || isEmpty(repl) || with == null || max == 0) {\n            return text;\n        }\n        int start = 0;\n        int end = text.indexOf(repl, start);\n        if (end == -1) {\n            return text;\n        }\n        int replLength = repl.length();\n        int increase = with.length() - replLength;\n        increase = (increase < 0 ? 0 : increase);\n        increase *= (max < 0 ? 16 : (max > 64 ? 64 : max));\n        StringBuffer buf = new StringBuffer(text.length() + increase);\n        while (end != -1) {\n            buf.append(text.substring(start, end)).append(with);\n            start = end + replLength;\n            if (--max == 0) {\n                break;\n            }\n            end = text.indexOf(repl, start);\n        }\n        buf.append(text.substring(start));\n        return buf.toString();\n    }",
        "begin_line": 3109,
        "end_line": 3133,
        "comment": "\n     * <p>Replaces a String with another String inside a larger String,\n     * for the first <code>max</code> values of the search String.</p>\n     *\n     * <p>A <code>null</code> reference passed to this method is a no-op.</p>\n     *\n     * <pre>\n     * StringUtils.replace(null, *, *, *)         = null\n     * StringUtils.replace(\"\", *, *, *)           = \"\"\n     * StringUtils.replace(\"any\", null, *, *)     = \"any\"\n     * StringUtils.replace(\"any\", *, null, *)     = \"any\"\n     * StringUtils.replace(\"any\", \"\", *, *)       = \"any\"\n     * StringUtils.replace(\"any\", *, *, 0)        = \"any\"\n     * StringUtils.replace(\"abaa\", \"a\", null, -1) = \"abaa\"\n     * StringUtils.replace(\"abaa\", \"a\", \"\", -1)   = \"b\"\n     * StringUtils.replace(\"abaa\", \"a\", \"z\", 0)   = \"abaa\"\n     * StringUtils.replace(\"abaa\", \"a\", \"z\", 1)   = \"zbaa\"\n     * StringUtils.replace(\"abaa\", \"a\", \"z\", 2)   = \"zbza\"\n     * StringUtils.replace(\"abaa\", \"a\", \"z\", -1)  = \"zbzz\"\n     * </pre>\n     *\n     * @param text  text to search and replace in, may be null\n     * @param repl  the String to search for, may be null\n     * @param with  the String to replace with, may be null\n     * @param max  maximum number of values to replace, or <code>-1</code> if no maximum\n     * @return the text with any replacements processed,\n     *  <code>null</code> if null String input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.replaceChars(java.lang.String, char, char)",
        "snippet": "    public static String replaceChars(String str, char searchChar, char replaceChar) {\n        if (str == null) {\n            return null;\n        }\n        return str.replace(searchChar, replaceChar);\n    }",
        "begin_line": 3157,
        "end_line": 3162,
        "comment": "\n     * <p>Replaces all occurrences of a character in a String with another.\n     * This is a null-safe version of {@link String#replace(char, char)}.</p>\n     *\n     * <p>A <code>null</code> string input returns <code>null</code>.\n     * An empty (\"\") string input returns an empty string.</p>\n     *\n     * <pre>\n     * StringUtils.replaceChars(null, *, *)        = null\n     * StringUtils.replaceChars(\"\", *, *)          = \"\"\n     * StringUtils.replaceChars(\"abcba\", 'b', 'y') = \"aycya\"\n     * StringUtils.replaceChars(\"abcba\", 'z', 'y') = \"abcba\"\n     * </pre>\n     *\n     * @param str  String to replace characters in, may be null\n     * @param searchChar  the character to search for, may be null\n     * @param replaceChar  the character to replace, may be null\n     * @return modified String, <code>null</code> if null string input\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.replaceChars(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    public static String replaceChars(String str, String searchChars, String replaceChars) {\n        if (isEmpty(str) || isEmpty(searchChars)) {\n            return str;\n        }\n        if (replaceChars == null) {\n            replaceChars = \"\";\n        }\n        boolean modified = false;\n        int replaceCharsLength = replaceChars.length();\n        int strLength = str.length();\n        StringBuffer buf = new StringBuffer(strLength);\n        for (int i = 0; i < strLength; i++) {\n            char ch = str.charAt(i);\n            int index = searchChars.indexOf(ch);\n            if (index >= 0) {\n                modified = true;\n                if (index < replaceCharsLength) {\n                    buf.append(replaceChars.charAt(index));\n                }\n            } else {\n                buf.append(ch);\n            }\n        }\n        if (modified) {\n            return buf.toString();\n        } else {\n            return str;\n        }\n    }",
        "begin_line": 3200,
        "end_line": 3228,
        "comment": "\n     * <p>Replaces multiple characters in a String in one go.\n     * This method can also be used to delete characters.</p>\n     *\n     * <p>For example:<br />\n     * <code>replaceChars(&quot;hello&quot;, &quot;ho&quot;, &quot;jy&quot;) = jelly</code>.</p>\n     *\n     * <p>A <code>null</code> string input returns <code>null</code>.\n     * An empty (\"\") string input returns an empty string.\n     * A null or empty set of search characters returns the input string.</p>\n     *\n     * <p>The length of the search characters should normally equal the length\n     * of the replace characters.\n     * If the search characters is longer, then the extra search characters\n     * are deleted.\n     * If the search characters is shorter, then the extra replace characters\n     * are ignored.</p>\n     *\n     * <pre>\n     * StringUtils.replaceChars(null, *, *)           = null\n     * StringUtils.replaceChars(\"\", *, *)             = \"\"\n     * StringUtils.replaceChars(\"abc\", null, *)       = \"abc\"\n     * StringUtils.replaceChars(\"abc\", \"\", *)         = \"abc\"\n     * StringUtils.replaceChars(\"abc\", \"b\", null)     = \"ac\"\n     * StringUtils.replaceChars(\"abc\", \"b\", \"\")       = \"ac\"\n     * StringUtils.replaceChars(\"abcba\", \"bc\", \"yz\")  = \"ayzya\"\n     * StringUtils.replaceChars(\"abcba\", \"bc\", \"y\")   = \"ayya\"\n     * StringUtils.replaceChars(\"abcba\", \"bc\", \"yzx\") = \"ayzya\"\n     * </pre>\n     *\n     * @param str  String to replace characters in, may be null\n     * @param searchChars  a set of characters to search for, may be null\n     * @param replaceChars  a set of characters to replace, may be null\n     * @return modified String, <code>null</code> if null string input\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.overlayString(java.lang.String, java.lang.String, int, int)",
        "snippet": "    public static String overlayString(String text, String overlay, int start, int end) {\n        return new StringBuffer(start + overlay.length() + text.length() - end + 1)\n            .append(text.substring(0, start))\n            .append(overlay)\n            .append(text.substring(end))\n            .toString();\n    }",
        "begin_line": 3257,
        "end_line": 3263,
        "comment": "\n     * <p>Overlays part of a String with another String.</p>\n     *\n     * <pre>\n     * StringUtils.overlayString(null, *, *, *)           = NullPointerException\n     * StringUtils.overlayString(*, null, *, *)           = NullPointerException\n     * StringUtils.overlayString(\"\", \"abc\", 0, 0)         = \"abc\"\n     * StringUtils.overlayString(\"abcdef\", null, 2, 4)    = \"abef\"\n     * StringUtils.overlayString(\"abcdef\", \"\", 2, 4)      = \"abef\"\n     * StringUtils.overlayString(\"abcdef\", \"zzzz\", 2, 4)  = \"abzzzzef\"\n     * StringUtils.overlayString(\"abcdef\", \"zzzz\", 4, 2)  = \"abcdzzzzcdef\"\n     * StringUtils.overlayString(\"abcdef\", \"zzzz\", -1, 4) = IndexOutOfBoundsException\n     * StringUtils.overlayString(\"abcdef\", \"zzzz\", 2, 8)  = IndexOutOfBoundsException\n     * </pre>\n     *\n     * @param text  the String to do overlaying in, may be null\n     * @param overlay  the String to overlay, may be null\n     * @param start  the position to start overlaying at, must be valid\n     * @param end  the position to stop overlaying before, must be valid\n     * @return overlayed String, <code>null</code> if null String input\n     * @throws NullPointerException if text or overlay is null\n     * @throws IndexOutOfBoundsException if either position is invalid\n     * @deprecated Use better named {@link #overlay(String, String, int, int)} instead.\n     *             Method will be removed in Commons Lang 3.0.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.overlay(java.lang.String, java.lang.String, int, int)",
        "snippet": "    public static String overlay(String str, String overlay, int start, int end) {\n        if (str == null) {\n            return null;\n        }\n        if (overlay == null) {\n            overlay = EMPTY;\n        }\n        int len = str.length();\n        if (start < 0) {\n            start = 0;\n        }\n        if (start > len) {\n            start = len;\n        }\n        if (end < 0) {\n            end = 0;\n        }\n        if (end > len) {\n            end = len;\n        }\n        if (start > end) {\n            int temp = start;\n            start = end;\n            end = temp;\n        }\n        return new StringBuffer(len + start - end + overlay.length() + 1)\n            .append(str.substring(0, start))\n            .append(overlay)\n            .append(str.substring(end))\n            .toString();\n    }",
        "begin_line": 3294,
        "end_line": 3324,
        "comment": "\n     * <p>Overlays part of a String with another String.</p>\n     *\n     * <p>A <code>null</code> string input returns <code>null</code>.\n     * A negative index is treated as zero.\n     * An index greater than the string length is treated as the string length.\n     * The start index is always the smaller of the two indices.</p>\n     *\n     * <pre>\n     * StringUtils.overlay(null, *, *, *)            = null\n     * StringUtils.overlay(\"\", \"abc\", 0, 0)          = \"abc\"\n     * StringUtils.overlay(\"abcdef\", null, 2, 4)     = \"abef\"\n     * StringUtils.overlay(\"abcdef\", \"\", 2, 4)       = \"abef\"\n     * StringUtils.overlay(\"abcdef\", \"\", 4, 2)       = \"abef\"\n     * StringUtils.overlay(\"abcdef\", \"zzzz\", 2, 4)   = \"abzzzzef\"\n     * StringUtils.overlay(\"abcdef\", \"zzzz\", 4, 2)   = \"abzzzzef\"\n     * StringUtils.overlay(\"abcdef\", \"zzzz\", -1, 4)  = \"zzzzef\"\n     * StringUtils.overlay(\"abcdef\", \"zzzz\", 2, 8)   = \"abzzzz\"\n     * StringUtils.overlay(\"abcdef\", \"zzzz\", -2, -3) = \"zzzzabcdef\"\n     * StringUtils.overlay(\"abcdef\", \"zzzz\", 8, 10)  = \"abcdefzzzz\"\n     * </pre>\n     *\n     * @param str  the String to do overlaying in, may be null\n     * @param overlay  the String to overlay, may be null\n     * @param start  the position to start overlaying at\n     * @param end  the position to stop overlaying before\n     * @return overlayed String, <code>null</code> if null String input\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.chomp(java.lang.String)",
        "snippet": "    public static String chomp(String str) {\n        if (isEmpty(str)) {\n            return str;\n        }\n\n        if (str.length() == 1) {\n            char ch = str.charAt(0);\n            if (ch == CharUtils.CR || ch == CharUtils.LF) {\n                return EMPTY;\n            } else {\n                return str;\n            }\n        }\n\n        int lastIdx = str.length() - 1;\n        char last = str.charAt(lastIdx);\n\n        if (last == CharUtils.LF) {\n            if (str.charAt(lastIdx - 1) == CharUtils.CR) {\n                lastIdx--;\n            }\n        } else if (last != CharUtils.CR) {\n            lastIdx++;\n        }\n        return str.substring(0, lastIdx);\n    }",
        "begin_line": 3353,
        "end_line": 3378,
        "comment": "\n     * <p>Removes one newline from end of a String if it's there,\n     * otherwise leave it alone.  A newline is &quot;<code>\\n</code>&quot;,\n     * &quot;<code>\\r</code>&quot;, or &quot;<code>\\r\\n</code>&quot;.</p>\n     *\n     * <p>NOTE: This method changed in 2.0.\n     * It now more closely matches Perl chomp.</p>\n     *\n     * <pre>\n     * StringUtils.chomp(null)          = null\n     * StringUtils.chomp(\"\")            = \"\"\n     * StringUtils.chomp(\"abc \\r\")      = \"abc \"\n     * StringUtils.chomp(\"abc\\n\")       = \"abc\"\n     * StringUtils.chomp(\"abc\\r\\n\")     = \"abc\"\n     * StringUtils.chomp(\"abc\\r\\n\\r\\n\") = \"abc\\r\\n\"\n     * StringUtils.chomp(\"abc\\n\\r\")     = \"abc\\n\"\n     * StringUtils.chomp(\"abc\\n\\rabc\")  = \"abc\\n\\rabc\"\n     * StringUtils.chomp(\"\\r\")          = \"\"\n     * StringUtils.chomp(\"\\n\")          = \"\"\n     * StringUtils.chomp(\"\\r\\n\")        = \"\"\n     * </pre>\n     *\n     * @param str  the String to chomp a newline from, may be null\n     * @return String without newline, <code>null</code> if null String input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.chomp(java.lang.String, java.lang.String)",
        "snippet": "    public static String chomp(String str, String separator) {\n        if (isEmpty(str) || separator == null) {\n            return str;\n        }\n        if (str.endsWith(separator)) {\n            return str.substring(0, str.length() - separator.length());\n        }\n        return str;\n    }",
        "begin_line": 3406,
        "end_line": 3414,
        "comment": "\n     * <p>Removes <code>separator</code> from the end of\n     * <code>str</code> if it's there, otherwise leave it alone.</p>\n     *\n     * <p>NOTE: This method changed in version 2.0.\n     * It now more closely matches Perl chomp.\n     * For the previous behavior, use {@link #substringBeforeLast(String, String)}.\n     * This method uses {@link String#endsWith(String)}.</p>\n     *\n     * <pre>\n     * StringUtils.chomp(null, *)         = null\n     * StringUtils.chomp(\"\", *)           = \"\"\n     * StringUtils.chomp(\"foobar\", \"bar\") = \"foo\"\n     * StringUtils.chomp(\"foobar\", \"baz\") = \"foobar\"\n     * StringUtils.chomp(\"foo\", \"foo\")    = \"\"\n     * StringUtils.chomp(\"foo \", \"foo\")   = \"foo \"\n     * StringUtils.chomp(\" foo\", \"foo\")   = \" \"\n     * StringUtils.chomp(\"foo\", \"foooo\")  = \"foo\"\n     * StringUtils.chomp(\"foo\", \"\")       = \"foo\"\n     * StringUtils.chomp(\"foo\", null)     = \"foo\"\n     * </pre>\n     *\n     * @param str  the String to chomp from, may be null\n     * @param separator  separator String, may be null\n     * @return String without trailing separator, <code>null</code> if null String input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.chompLast(java.lang.String)",
        "snippet": "    public static String chompLast(String str) {\n        return chompLast(str, \"\\n\");\n    }",
        "begin_line": 3426,
        "end_line": 3428,
        "comment": "\n     * <p>Remove any &quot;\\n&quot; if and only if it is at the end\n     * of the supplied String.</p>\n     *\n     * @param str  the String to chomp from, must not be null\n     * @return String without chomped ending\n     * @throws NullPointerException if str is <code>null</code>\n     * @deprecated Use {@link #chomp(String)} instead.\n     *             Method will be removed in Commons Lang 3.0.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.chompLast(java.lang.String, java.lang.String)",
        "snippet": "    public static String chompLast(String str, String sep) {\n        if (str.length() == 0) {\n            return str;\n        }\n        String sub = str.substring(str.length() - sep.length());\n        if (sep.equals(sub)) {\n            return str.substring(0, str.length() - sep.length());\n        } else {\n            return str;\n        }\n    }",
        "begin_line": 3440,
        "end_line": 3450,
        "comment": "\n     * <p>Remove a value if and only if the String ends with that value.</p>\n     *\n     * @param str  the String to chomp from, must not be null\n     * @param sep  the String to chomp, must not be null\n     * @return String without chomped ending\n     * @throws NullPointerException if str or sep is <code>null</code>\n     * @deprecated Use {@link #chomp(String,String)} instead.\n     *             Method will be removed in Commons Lang 3.0.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.getChomp(java.lang.String, java.lang.String)",
        "snippet": "    public static String getChomp(String str, String sep) {\n        int idx = str.lastIndexOf(sep);\n        if (idx == str.length() - sep.length()) {\n            return sep;\n        } else if (idx != -1) {\n            return str.substring(idx);\n        } else {\n            return EMPTY;\n        }\n    }",
        "begin_line": 3464,
        "end_line": 3473,
        "comment": "\n     * <p>Remove everything and return the last value of a supplied String, and\n     * everything after it from a String.</p>\n     *\n     * @param str  the String to chomp from, must not be null\n     * @param sep  the String to chomp, must not be null\n     * @return String chomped\n     * @throws NullPointerException if str or sep is <code>null</code>\n     * @deprecated Use {@link #substringAfterLast(String, String)} instead\n     *             (although this doesn't include the separator)\n     *             Method will be removed in Commons Lang 3.0.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.prechomp(java.lang.String, java.lang.String)",
        "snippet": "    public static String prechomp(String str, String sep) {\n        int idx = str.indexOf(sep);\n        if (idx != -1) {\n            return str.substring(idx + sep.length());\n        } else {\n            return str;\n        }\n    }",
        "begin_line": 3486,
        "end_line": 3493,
        "comment": "\n     * <p>Remove the first value of a supplied String, and everything before it\n     * from a String.</p>\n     *\n     * @param str  the String to chomp from, must not be null\n     * @param sep  the String to chomp, must not be null\n     * @return String without chomped beginning\n     * @throws NullPointerException if str or sep is <code>null</code>\n     * @deprecated Use {@link #substringAfter(String,String)} instead.\n     *             Method will be removed in Commons Lang 3.0.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.getPrechomp(java.lang.String, java.lang.String)",
        "snippet": "    public static String getPrechomp(String str, String sep) {\n        int idx = str.indexOf(sep);\n        if (idx != -1) {\n            return str.substring(0, idx + sep.length());\n        } else {\n            return EMPTY;\n        }\n    }",
        "begin_line": 3507,
        "end_line": 3514,
        "comment": "\n     * <p>Remove and return everything before the first value of a\n     * supplied String from another String.</p>\n     *\n     * @param str  the String to chomp from, must not be null\n     * @param sep  the String to chomp, must not be null\n     * @return String prechomped\n     * @throws NullPointerException if str or sep is <code>null</code>\n     * @deprecated Use {@link #substringBefore(String,String)} instead\n     *             (although this doesn't include the separator).\n     *             Method will be removed in Commons Lang 3.0.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.chop(java.lang.String)",
        "snippet": "    public static String chop(String str) {\n        if (str == null) {\n            return null;\n        }\n        int strLen = str.length();\n        if (strLen < 2) {\n            return EMPTY;\n        }\n        int lastIdx = strLen - 1;\n        String ret = str.substring(0, lastIdx);\n        char last = str.charAt(lastIdx);\n        if (last == CharUtils.LF) {\n            if (ret.charAt(lastIdx - 1) == CharUtils.CR) {\n                return ret.substring(0, lastIdx - 1);\n            }\n        }\n        return ret;\n    }",
        "begin_line": 3541,
        "end_line": 3558,
        "comment": "\n     * <p>Remove the last character from a String.</p>\n     *\n     * <p>If the String ends in <code>\\r\\n</code>, then remove both\n     * of them.</p>\n     *\n     * <pre>\n     * StringUtils.chop(null)          = null\n     * StringUtils.chop(\"\")            = \"\"\n     * StringUtils.chop(\"abc \\r\")      = \"abc \"\n     * StringUtils.chop(\"abc\\n\")       = \"abc\"\n     * StringUtils.chop(\"abc\\r\\n\")     = \"abc\"\n     * StringUtils.chop(\"abc\")         = \"ab\"\n     * StringUtils.chop(\"abc\\nabc\")    = \"abc\\nab\"\n     * StringUtils.chop(\"a\")           = \"\"\n     * StringUtils.chop(\"\\r\")          = \"\"\n     * StringUtils.chop(\"\\n\")          = \"\"\n     * StringUtils.chop(\"\\r\\n\")        = \"\"\n     * </pre>\n     *\n     * @param str  the String to chop last character from, may be null\n     * @return String without last character, <code>null</code> if null String input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.chopNewline(java.lang.String)",
        "snippet": "    public static String chopNewline(String str) {\n        int lastIdx = str.length() - 1;\n        if (lastIdx <= 0) {\n            return EMPTY;\n        }\n        char last = str.charAt(lastIdx);\n        if (last == CharUtils.LF) {\n            if (str.charAt(lastIdx - 1) == CharUtils.CR) {\n                lastIdx--;\n            }\n        } else {\n            lastIdx++;\n        }\n        return str.substring(0, lastIdx);\n    }",
        "begin_line": 3570,
        "end_line": 3584,
        "comment": "\n     * <p>Removes <code>\\n</code> from end of a String if it's there.\n     * If a <code>\\r</code> precedes it, then remove that too.</p>\n     *\n     * @param str  the String to chop a newline from, must not be null\n     * @return String without newline\n     * @throws NullPointerException if str is <code>null</code>\n     * @deprecated Use {@link #chomp(String)} instead.\n     *             Method will be removed in Commons Lang 3.0.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.escape(java.lang.String)",
        "snippet": "    public static String escape(String str) {\n        return StringEscapeUtils.escapeJava(str);\n    }",
        "begin_line": 3604,
        "end_line": 3606,
        "comment": "\n     * <p>Escapes any values it finds into their String form.</p>\n     *\n     * <p>So a tab becomes the characters <code>'\\\\'</code> and\n     * <code>'t'</code>.</p>\n     *\n     * <p>As of Lang 2.0, this calls {@link StringEscapeUtils#escapeJava(String)}\n     * behind the scenes.\n     * </p>\n     * @see StringEscapeUtils#escapeJava(java.lang.String)\n     * @param str String to escape values in\n     * @return String with escaped values\n     * @throws NullPointerException if str is <code>null</code>\n     * @deprecated Use {@link StringEscapeUtils#escapeJava(String)}\n     *             This method will be removed in Commons Lang 3.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.repeat(java.lang.String, int)",
        "snippet": "    public static String repeat(String str, int repeat) {\n        // Performance tuned for 2.0 (JDK1.4)\n\n        if (str == null) {\n            return null;\n        }\n        if (repeat <= 0) {\n            return EMPTY;\n        }\n        int inputLength = str.length();\n        if (repeat == 1 || inputLength == 0) {\n            return str;\n        }\n        if (inputLength == 1 && repeat <= PAD_LIMIT) {\n            return padding(repeat, str.charAt(0));\n        }\n\n        int outputLength = inputLength * repeat;\n        switch (inputLength) {\n            case 1 :\n                char ch = str.charAt(0);\n                char[] output1 = new char[outputLength];\n                for (int i = repeat - 1; i >= 0; i--) {\n                    output1[i] = ch;\n                }\n                return new String(output1);\n            case 2 :\n                char ch0 = str.charAt(0);\n                char ch1 = str.charAt(1);\n                char[] output2 = new char[outputLength];\n                for (int i = repeat * 2 - 2; i >= 0; i--, i--) {\n                    output2[i] = ch0;\n                    output2[i + 1] = ch1;\n                }\n                return new String(output2);\n            default :\n                StringBuffer buf = new StringBuffer(outputLength);\n                for (int i = 0; i < repeat; i++) {\n                    buf.append(str);\n                }\n                return buf.toString();\n        }\n    }",
        "begin_line": 3628,
        "end_line": 3670,
        "comment": "\n     * <p>Repeat a String <code>repeat</code> times to form a\n     * new String.</p>\n     *\n     * <pre>\n     * StringUtils.repeat(null, 2) = null\n     * StringUtils.repeat(\"\", 0)   = \"\"\n     * StringUtils.repeat(\"\", 2)   = \"\"\n     * StringUtils.repeat(\"a\", 3)  = \"aaa\"\n     * StringUtils.repeat(\"ab\", 2) = \"abab\"\n     * StringUtils.repeat(\"a\", -2) = \"\"\n     * </pre>\n     *\n     * @param str  the String to repeat, may be null\n     * @param repeat  number of times to repeat str, negative treated as zero\n     * @return a new String consisting of the original String repeated,\n     *  <code>null</code> if null String input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.padding(int, char)",
        "snippet": "    private static String padding(int repeat, char padChar) throws IndexOutOfBoundsException {\n        if (repeat < 0) {\n            throw new IndexOutOfBoundsException(\"Cannot pad a negative amount: \" + repeat);\n        }\n        final char[] buf = new char[repeat];\n        for (int i = 0; i < buf.length; i++) {\n            buf[i] = padChar;\n        }\n        return new String(buf);\n    }",
        "begin_line": 3695,
        "end_line": 3704,
        "comment": "\n     * <p>Returns padding using the specified delimiter repeated\n     * to a given length.</p>\n     *\n     * <pre>\n     * StringUtils.padding(0, 'e')  = \"\"\n     * StringUtils.padding(3, 'e')  = \"eee\"\n     * StringUtils.padding(-2, 'e') = IndexOutOfBoundsException\n     * </pre>\n     *\n     * <p>Note: this method doesn't not support padding with\n     * <a href=\"http://www.unicode.org/glossary/#supplementary_character\">Unicode Supplementary Characters</a>\n     * as they require a pair of <code>char</code>s to be represented.\n     * If you are needing to support full I18N of your applications\n     * consider using {@link #repeat(String, int)} instead. \n     * </p>\n     *\n     * @param repeat  number of times to repeat delim\n     * @param padChar  character to repeat\n     * @return String with repeated character\n     * @throws IndexOutOfBoundsException if <code>repeat &lt; 0</code>\n     * @see #repeat(String, int)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.rightPad(java.lang.String, int)",
        "snippet": "    public static String rightPad(String str, int size) {\n        return rightPad(str, size, ' ');\n    }",
        "begin_line": 3725,
        "end_line": 3727,
        "comment": "\n     * <p>Right pad a String with spaces (' ').</p>\n     *\n     * <p>The String is padded to the size of <code>size</code>.</p>\n     *\n     * <pre>\n     * StringUtils.rightPad(null, *)   = null\n     * StringUtils.rightPad(\"\", 3)     = \"   \"\n     * StringUtils.rightPad(\"bat\", 3)  = \"bat\"\n     * StringUtils.rightPad(\"bat\", 5)  = \"bat  \"\n     * StringUtils.rightPad(\"bat\", 1)  = \"bat\"\n     * StringUtils.rightPad(\"bat\", -1) = \"bat\"\n     * </pre>\n     *\n     * @param str  the String to pad out, may be null\n     * @param size  the size to pad to\n     * @return right padded String or original String if no padding is necessary,\n     *  <code>null</code> if null String input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.rightPad(java.lang.String, int, char)",
        "snippet": "    public static String rightPad(String str, int size, char padChar) {\n        if (str == null) {\n            return null;\n        }\n        int pads = size - str.length();\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(padding(pads, padChar));\n    }",
        "begin_line": 3750,
        "end_line": 3762,
        "comment": "\n     * <p>Right pad a String with a specified character.</p>\n     *\n     * <p>The String is padded to the size of <code>size</code>.</p>\n     *\n     * <pre>\n     * StringUtils.rightPad(null, *, *)     = null\n     * StringUtils.rightPad(\"\", 3, 'z')     = \"zzz\"\n     * StringUtils.rightPad(\"bat\", 3, 'z')  = \"bat\"\n     * StringUtils.rightPad(\"bat\", 5, 'z')  = \"batzz\"\n     * StringUtils.rightPad(\"bat\", 1, 'z')  = \"bat\"\n     * StringUtils.rightPad(\"bat\", -1, 'z') = \"bat\"\n     * </pre>\n     *\n     * @param str  the String to pad out, may be null\n     * @param size  the size to pad to\n     * @param padChar  the character to pad with\n     * @return right padded String or original String if no padding is necessary,\n     *  <code>null</code> if null String input\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.rightPad(java.lang.String, int, java.lang.String)",
        "snippet": "    public static String rightPad(String str, int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = \" \";\n        }\n        int padLen = padStr.length();\n        int strLen = str.length();\n        int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return rightPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return str.concat(padStr);\n        } else if (pads < padLen) {\n            return str.concat(padStr.substring(0, pads));\n        } else {\n            char[] padding = new char[pads];\n            char[] padChars = padStr.toCharArray();\n            for (int i = 0; i < pads; i++) {\n                padding[i] = padChars[i % padLen];\n            }\n            return str.concat(new String(padding));\n        }\n    }",
        "begin_line": 3787,
        "end_line": 3816,
        "comment": "\n     * <p>Right pad a String with a specified String.</p>\n     *\n     * <p>The String is padded to the size of <code>size</code>.</p>\n     *\n     * <pre>\n     * StringUtils.rightPad(null, *, *)      = null\n     * StringUtils.rightPad(\"\", 3, \"z\")      = \"zzz\"\n     * StringUtils.rightPad(\"bat\", 3, \"yz\")  = \"bat\"\n     * StringUtils.rightPad(\"bat\", 5, \"yz\")  = \"batyz\"\n     * StringUtils.rightPad(\"bat\", 8, \"yz\")  = \"batyzyzy\"\n     * StringUtils.rightPad(\"bat\", 1, \"yz\")  = \"bat\"\n     * StringUtils.rightPad(\"bat\", -1, \"yz\") = \"bat\"\n     * StringUtils.rightPad(\"bat\", 5, null)  = \"bat  \"\n     * StringUtils.rightPad(\"bat\", 5, \"\")    = \"bat  \"\n     * </pre>\n     *\n     * @param str  the String to pad out, may be null\n     * @param size  the size to pad to\n     * @param padStr  the String to pad with, null or empty treated as single space\n     * @return right padded String or original String if no padding is necessary,\n     *  <code>null</code> if null String input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.leftPad(java.lang.String, int)",
        "snippet": "    public static String leftPad(String str, int size) {\n        return leftPad(str, size, ' ');\n    }",
        "begin_line": 3837,
        "end_line": 3839,
        "comment": "\n     * <p>Left pad a String with spaces (' ').</p>\n     *\n     * <p>The String is padded to the size of <code>size<code>.</p>\n     *\n     * <pre>\n     * StringUtils.leftPad(null, *)   = null\n     * StringUtils.leftPad(\"\", 3)     = \"   \"\n     * StringUtils.leftPad(\"bat\", 3)  = \"bat\"\n     * StringUtils.leftPad(\"bat\", 5)  = \"  bat\"\n     * StringUtils.leftPad(\"bat\", 1)  = \"bat\"\n     * StringUtils.leftPad(\"bat\", -1) = \"bat\"\n     * </pre>\n     *\n     * @param str  the String to pad out, may be null\n     * @param size  the size to pad to\n     * @return left padded String or original String if no padding is necessary,\n     *  <code>null</code> if null String input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.leftPad(java.lang.String, int, char)",
        "snippet": "    public static String leftPad(String str, int size, char padChar) {\n        if (str == null) {\n            return null;\n        }\n        int pads = size - str.length();\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return leftPad(str, size, String.valueOf(padChar));\n        }\n        return padding(pads, padChar).concat(str);\n    }",
        "begin_line": 3862,
        "end_line": 3874,
        "comment": "\n     * <p>Left pad a String with a specified character.</p>\n     *\n     * <p>Pad to a size of <code>size</code>.</p>\n     *\n     * <pre>\n     * StringUtils.leftPad(null, *, *)     = null\n     * StringUtils.leftPad(\"\", 3, 'z')     = \"zzz\"\n     * StringUtils.leftPad(\"bat\", 3, 'z')  = \"bat\"\n     * StringUtils.leftPad(\"bat\", 5, 'z')  = \"zzbat\"\n     * StringUtils.leftPad(\"bat\", 1, 'z')  = \"bat\"\n     * StringUtils.leftPad(\"bat\", -1, 'z') = \"bat\"\n     * </pre>\n     *\n     * @param str  the String to pad out, may be null\n     * @param size  the size to pad to\n     * @param padChar  the character to pad with\n     * @return left padded String or original String if no padding is necessary,\n     *  <code>null</code> if null String input\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.leftPad(java.lang.String, int, java.lang.String)",
        "snippet": "    public static String leftPad(String str, int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = \" \";\n        }\n        int padLen = padStr.length();\n        int strLen = str.length();\n        int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            char[] padding = new char[pads];\n            char[] padChars = padStr.toCharArray();\n            for (int i = 0; i < pads; i++) {\n                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
        "begin_line": 3899,
        "end_line": 3928,
        "comment": "\n     * <p>Left pad a String with a specified String.</p>\n     *\n     * <p>Pad to a size of <code>size</code>.</p>\n     *\n     * <pre>\n     * StringUtils.leftPad(null, *, *)      = null\n     * StringUtils.leftPad(\"\", 3, \"z\")      = \"zzz\"\n     * StringUtils.leftPad(\"bat\", 3, \"yz\")  = \"bat\"\n     * StringUtils.leftPad(\"bat\", 5, \"yz\")  = \"yzbat\"\n     * StringUtils.leftPad(\"bat\", 8, \"yz\")  = \"yzyzybat\"\n     * StringUtils.leftPad(\"bat\", 1, \"yz\")  = \"bat\"\n     * StringUtils.leftPad(\"bat\", -1, \"yz\") = \"bat\"\n     * StringUtils.leftPad(\"bat\", 5, null)  = \"  bat\"\n     * StringUtils.leftPad(\"bat\", 5, \"\")    = \"  bat\"\n     * </pre>\n     *\n     * @param str  the String to pad out, may be null\n     * @param size  the size to pad to\n     * @param padStr  the String to pad with, null or empty treated as single space\n     * @return left padded String or original String if no padding is necessary,\n     *  <code>null</code> if null String input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.center(java.lang.String, int)",
        "snippet": "    public static String center(String str, int size) {\n        return center(str, size, ' ');\n    }",
        "begin_line": 3955,
        "end_line": 3957,
        "comment": "\n     * <p>Centers a String in a larger String of size <code>size</code>\n     * using the space character (' ').<p>\n     *\n     * <p>If the size is less than the String length, the String is returned.\n     * A <code>null</code> String returns <code>null</code>.\n     * A negative size is treated as zero.</p>\n     *\n     * <p>Equivalent to <code>center(str, size, \" \")</code>.</p>\n     *\n     * <pre>\n     * StringUtils.center(null, *)   = null\n     * StringUtils.center(\"\", 4)     = \"    \"\n     * StringUtils.center(\"ab\", -1)  = \"ab\"\n     * StringUtils.center(\"ab\", 4)   = \" ab \"\n     * StringUtils.center(\"abcd\", 2) = \"abcd\"\n     * StringUtils.center(\"a\", 4)    = \" a  \"\n     * </pre>\n     *\n     * @param str  the String to center, may be null\n     * @param size  the int size of new String, negative treated as zero\n     * @return centered String, <code>null</code> if null String input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.center(java.lang.String, int, char)",
        "snippet": "    public static String center(String str, int size, char padChar) {\n        if (str == null || size <= 0) {\n            return str;\n        }\n        int strLen = str.length();\n        int pads = size - strLen;\n        if (pads <= 0) {\n            return str;\n        }\n        str = leftPad(str, strLen + pads / 2, padChar);\n        str = rightPad(str, size, padChar);\n        return str;\n    }",
        "begin_line": 3983,
        "end_line": 3995,
        "comment": "\n     * <p>Centers a String in a larger String of size <code>size</code>.\n     * Uses a supplied character as the value to pad the String with.</p>\n     *\n     * <p>If the size is less than the String length, the String is returned.\n     * A <code>null</code> String returns <code>null</code>.\n     * A negative size is treated as zero.</p>\n     *\n     * <pre>\n     * StringUtils.center(null, *, *)     = null\n     * StringUtils.center(\"\", 4, ' ')     = \"    \"\n     * StringUtils.center(\"ab\", -1, ' ')  = \"ab\"\n     * StringUtils.center(\"ab\", 4, ' ')   = \" ab\"\n     * StringUtils.center(\"abcd\", 2, ' ') = \"abcd\"\n     * StringUtils.center(\"a\", 4, ' ')    = \" a  \"\n     * StringUtils.center(\"a\", 4, 'y')    = \"yayy\"\n     * </pre>\n     *\n     * @param str  the String to center, may be null\n     * @param size  the int size of new String, negative treated as zero\n     * @param padChar  the character to pad the new String with\n     * @return centered String, <code>null</code> if null String input\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.center(java.lang.String, int, java.lang.String)",
        "snippet": "    public static String center(String str, int size, String padStr) {\n        if (str == null || size <= 0) {\n            return str;\n        }\n        if (isEmpty(padStr)) {\n            padStr = \" \";\n        }\n        int strLen = str.length();\n        int pads = size - strLen;\n        if (pads <= 0) {\n            return str;\n        }\n        str = leftPad(str, strLen + pads / 2, padStr);\n        str = rightPad(str, size, padStr);\n        return str;\n    }",
        "begin_line": 4023,
        "end_line": 4038,
        "comment": "\n     * <p>Centers a String in a larger String of size <code>size</code>.\n     * Uses a supplied String as the value to pad the String with.</p>\n     *\n     * <p>If the size is less than the String length, the String is returned.\n     * A <code>null</code> String returns <code>null</code>.\n     * A negative size is treated as zero.</p>\n     *\n     * <pre>\n     * StringUtils.center(null, *, *)     = null\n     * StringUtils.center(\"\", 4, \" \")     = \"    \"\n     * StringUtils.center(\"ab\", -1, \" \")  = \"ab\"\n     * StringUtils.center(\"ab\", 4, \" \")   = \" ab\"\n     * StringUtils.center(\"abcd\", 2, \" \") = \"abcd\"\n     * StringUtils.center(\"a\", 4, \" \")    = \" a  \"\n     * StringUtils.center(\"a\", 4, \"yz\")   = \"yayz\"\n     * StringUtils.center(\"abc\", 7, null) = \"  abc  \"\n     * StringUtils.center(\"abc\", 7, \"\")   = \"  abc  \"\n     * </pre>\n     *\n     * @param str  the String to center, may be null\n     * @param size  the int size of new String, negative treated as zero\n     * @param padStr  the String to pad the new String with, must not be null or empty\n     * @return centered String, <code>null</code> if null String input\n     * @throws IllegalArgumentException if padStr is <code>null</code> or empty\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.upperCase(java.lang.String)",
        "snippet": "    public static String upperCase(String str) {\n        if (str == null) {\n            return null;\n        }\n        return str.toUpperCase();\n    }",
        "begin_line": 4056,
        "end_line": 4061,
        "comment": "\n     * <p>Converts a String to upper case as per {@link String#toUpperCase()}.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.upperCase(null)  = null\n     * StringUtils.upperCase(\"\")    = \"\"\n     * StringUtils.upperCase(\"aBc\") = \"ABC\"\n     * </pre>\n     *\n     * @param str  the String to upper case, may be null\n     * @return the upper cased String, <code>null</code> if null String input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.lowerCase(java.lang.String)",
        "snippet": "    public static String lowerCase(String str) {\n        if (str == null) {\n            return null;\n        }\n        return str.toLowerCase();\n    }",
        "begin_line": 4077,
        "end_line": 4082,
        "comment": "\n     * <p>Converts a String to lower case as per {@link String#toLowerCase()}.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.lowerCase(null)  = null\n     * StringUtils.lowerCase(\"\")    = \"\"\n     * StringUtils.lowerCase(\"aBc\") = \"abc\"\n     * </pre>\n     *\n     * @param str  the String to lower case, may be null\n     * @return the lower cased String, <code>null</code> if null String input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.capitalize(java.lang.String)",
        "snippet": "    public static String capitalize(String str) {\n        int strLen;\n        if (str == null || (strLen = str.length()) == 0) {\n            return str;\n        }\n        return new StringBuffer(strLen)\n            .append(Character.toTitleCase(str.charAt(0)))\n            .append(str.substring(1))\n            .toString();\n    }",
        "begin_line": 4104,
        "end_line": 4113,
        "comment": "\n     * <p>Capitalizes a String changing the first letter to title case as\n     * per {@link Character#toTitleCase(char)}. No other letters are changed.</p>\n     *\n     * <p>For a word based algorithm, see {@link WordUtils#capitalize(String)}.\n     * A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.capitalize(null)  = null\n     * StringUtils.capitalize(\"\")    = \"\"\n     * StringUtils.capitalize(\"cat\") = \"Cat\"\n     * StringUtils.capitalize(\"cAt\") = \"CAt\"\n     * </pre>\n     *\n     * @param str  the String to capitalize, may be null\n     * @return the capitalized String, <code>null</code> if null String input\n     * @see WordUtils#capitalize(String)\n     * @see #uncapitalize(String)\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.capitalise(java.lang.String)",
        "snippet": "    public static String capitalise(String str) {\n        return capitalize(str);\n    }",
        "begin_line": 4124,
        "end_line": 4126,
        "comment": "\n     * <p>Capitalizes a String changing the first letter to title case as\n     * per {@link Character#toTitleCase(char)}. No other letters are changed.</p>\n     *\n     * @param str  the String to capitalize, may be null\n     * @return the capitalized String, <code>null</code> if null String input\n     * @deprecated Use the standardly named {@link #capitalize(String)}.\n     *             Method will be removed in Commons Lang 3.0.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.uncapitalize(java.lang.String)",
        "snippet": "    public static String uncapitalize(String str) {\n        int strLen;\n        if (str == null || (strLen = str.length()) == 0) {\n            return str;\n        }\n        return new StringBuffer(strLen)\n            .append(Character.toLowerCase(str.charAt(0)))\n            .append(str.substring(1))\n            .toString();\n    }",
        "begin_line": 4148,
        "end_line": 4157,
        "comment": "\n     * <p>Uncapitalizes a String changing the first letter to title case as\n     * per {@link Character#toLowerCase(char)}. No other letters are changed.</p>\n     *\n     * <p>For a word based algorithm, see {@link WordUtils#uncapitalize(String)}.\n     * A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.uncapitalize(null)  = null\n     * StringUtils.uncapitalize(\"\")    = \"\"\n     * StringUtils.uncapitalize(\"Cat\") = \"cat\"\n     * StringUtils.uncapitalize(\"CAT\") = \"cAT\"\n     * </pre>\n     *\n     * @param str  the String to uncapitalize, may be null\n     * @return the uncapitalized String, <code>null</code> if null String input\n     * @see WordUtils#uncapitalize(String)\n     * @see #capitalize(String)\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.uncapitalise(java.lang.String)",
        "snippet": "    public static String uncapitalise(String str) {\n        return uncapitalize(str);\n    }",
        "begin_line": 4168,
        "end_line": 4170,
        "comment": "\n     * <p>Uncapitalizes a String changing the first letter to title case as\n     * per {@link Character#toLowerCase(char)}. No other letters are changed.</p>\n     *\n     * @param str  the String to uncapitalize, may be null\n     * @return the uncapitalized String, <code>null</code> if null String input\n     * @deprecated Use the standardly named {@link #uncapitalize(String)}.\n     *             Method will be removed in Commons Lang 3.0.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.swapCase(java.lang.String)",
        "snippet": "    public static String swapCase(String str) {\n        int strLen;\n        if (str == null || (strLen = str.length()) == 0) {\n            return str;\n        }\n        StringBuffer buffer = new StringBuffer(strLen);\n\n        char ch = 0;\n        for (int i = 0; i < strLen; i++) {\n            ch = str.charAt(i);\n            if (Character.isUpperCase(ch)) {\n                ch = Character.toLowerCase(ch);\n            } else if (Character.isTitleCase(ch)) {\n                ch = Character.toLowerCase(ch);\n            } else if (Character.isLowerCase(ch)) {\n                ch = Character.toUpperCase(ch);\n            }\n            buffer.append(ch);\n        }\n        return buffer.toString();\n    }",
        "begin_line": 4199,
        "end_line": 4219,
        "comment": "\n     * <p>Swaps the case of a String changing upper and title case to\n     * lower case, and lower case to upper case.</p>\n     *\n     * <ul>\n     *  <li>Upper case character converts to Lower case</li>\n     *  <li>Title case character converts to Lower case</li>\n     *  <li>Lower case character converts to Upper case</li>\n     * </ul>\n     *\n     * <p>For a word based algorithm, see {@link WordUtils#swapCase(String)}.\n     * A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.swapCase(null)                 = null\n     * StringUtils.swapCase(\"\")                   = \"\"\n     * StringUtils.swapCase(\"The dog has a BONE\") = \"tHE DOG HAS A bone\"\n     * </pre>\n     *\n     * <p>NOTE: This method changed in Lang version 2.0.\n     * It no longer performs a word based algorithm.\n     * If you only use ASCII, you will notice no change.\n     * That functionality is available in WordUtils.</p>\n     *\n     * @param str  the String to swap case, may be null\n     * @return the changed String, <code>null</code> if null String input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.capitaliseAllWords(java.lang.String)",
        "snippet": "    public static String capitaliseAllWords(String str) {\n        return WordUtils.capitalize(str);\n    }",
        "begin_line": 4233,
        "end_line": 4235,
        "comment": "\n     * <p>Capitalizes all the whitespace separated words in a String.\n     * Only the first letter of each word is changed.</p>\n     *\n     * <p>Whitespace is defined by {@link Character#isWhitespace(char)}.\n     * A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * @param str  the String to capitalize, may be null\n     * @return capitalized String, <code>null</code> if null String input\n     * @deprecated Use the relocated {@link WordUtils#capitalize(String)}.\n     *             Method will be removed in Commons Lang 3.0.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.countMatches(java.lang.String, java.lang.String)",
        "snippet": "    public static int countMatches(String str, String sub) {\n        if (isEmpty(str) || isEmpty(sub)) {\n            return 0;\n        }\n        int count = 0;\n        int idx = 0;\n        while ((idx = str.indexOf(sub, idx)) != -1) {\n            count++;\n            idx += sub.length();\n        }\n        return count;\n    }",
        "begin_line": 4258,
        "end_line": 4269,
        "comment": "\n     * <p>Counts how many times the substring appears in the larger String.</p>\n     *\n     * <p>A <code>null</code> or empty (\"\") String input returns <code>0</code>.</p>\n     *\n     * <pre>\n     * StringUtils.countMatches(null, *)       = 0\n     * StringUtils.countMatches(\"\", *)         = 0\n     * StringUtils.countMatches(\"abba\", null)  = 0\n     * StringUtils.countMatches(\"abba\", \"\")    = 0\n     * StringUtils.countMatches(\"abba\", \"a\")   = 2\n     * StringUtils.countMatches(\"abba\", \"ab\")  = 1\n     * StringUtils.countMatches(\"abba\", \"xxx\") = 0\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param sub  the substring to count, may be null\n     * @return the number of occurrences, 0 if either String is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.isAlpha(java.lang.String)",
        "snippet": "    public static boolean isAlpha(String str) {\n        if (str == null) {\n            return false;\n        }\n        int sz = str.length();\n        for (int i = 0; i < sz; i++) {\n            if (Character.isLetter(str.charAt(i)) == false) {\n                return false;\n            }\n        }\n        return true;\n    }",
        "begin_line": 4291,
        "end_line": 4302,
        "comment": "\n     * <p>Checks if the String contains only unicode letters.</p>\n     *\n     * <p><code>null</code> will return <code>false</code>.\n     * An empty String (\"\") will return <code>true</code>.</p>\n     *\n     * <pre>\n     * StringUtils.isAlpha(null)   = false\n     * StringUtils.isAlpha(\"\")     = true\n     * StringUtils.isAlpha(\"  \")   = false\n     * StringUtils.isAlpha(\"abc\")  = true\n     * StringUtils.isAlpha(\"ab2c\") = false\n     * StringUtils.isAlpha(\"ab-c\") = false\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @return <code>true</code> if only contains letters, and is non-null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.isAlphaSpace(java.lang.String)",
        "snippet": "    public static boolean isAlphaSpace(String str) {\n        if (str == null) {\n            return false;\n        }\n        int sz = str.length();\n        for (int i = 0; i < sz; i++) {\n            if ((Character.isLetter(str.charAt(i)) == false) && (str.charAt(i) != ' ')) {\n                return false;\n            }\n        }\n        return true;\n    }",
        "begin_line": 4325,
        "end_line": 4336,
        "comment": "\n     * <p>Checks if the String contains only unicode letters and\n     * space (' ').</p>\n     *\n     * <p><code>null</code> will return <code>false</code>\n     * An empty String (\"\") will return <code>true</code>.</p>\n     *\n     * <pre>\n     * StringUtils.isAlphaSpace(null)   = false\n     * StringUtils.isAlphaSpace(\"\")     = true\n     * StringUtils.isAlphaSpace(\"  \")   = true\n     * StringUtils.isAlphaSpace(\"abc\")  = true\n     * StringUtils.isAlphaSpace(\"ab c\") = true\n     * StringUtils.isAlphaSpace(\"ab2c\") = false\n     * StringUtils.isAlphaSpace(\"ab-c\") = false\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @return <code>true</code> if only contains letters and space,\n     *  and is non-null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.isAlphanumeric(java.lang.String)",
        "snippet": "    public static boolean isAlphanumeric(String str) {\n        if (str == null) {\n            return false;\n        }\n        int sz = str.length();\n        for (int i = 0; i < sz; i++) {\n            if (Character.isLetterOrDigit(str.charAt(i)) == false) {\n                return false;\n            }\n        }\n        return true;\n    }",
        "begin_line": 4358,
        "end_line": 4369,
        "comment": "\n     * <p>Checks if the String contains only unicode letters or digits.</p>\n     *\n     * <p><code>null</code> will return <code>false</code>.\n     * An empty String (\"\") will return <code>true</code>.</p>\n     *\n     * <pre>\n     * StringUtils.isAlphanumeric(null)   = false\n     * StringUtils.isAlphanumeric(\"\")     = true\n     * StringUtils.isAlphanumeric(\"  \")   = false\n     * StringUtils.isAlphanumeric(\"abc\")  = true\n     * StringUtils.isAlphanumeric(\"ab c\") = false\n     * StringUtils.isAlphanumeric(\"ab2c\") = true\n     * StringUtils.isAlphanumeric(\"ab-c\") = false\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @return <code>true</code> if only contains letters or digits,\n     *  and is non-null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.isAlphanumericSpace(java.lang.String)",
        "snippet": "    public static boolean isAlphanumericSpace(String str) {\n        if (str == null) {\n            return false;\n        }\n        int sz = str.length();\n        for (int i = 0; i < sz; i++) {\n            if ((Character.isLetterOrDigit(str.charAt(i)) == false) && (str.charAt(i) != ' ')) {\n                return false;\n            }\n        }\n        return true;\n    }",
        "begin_line": 4392,
        "end_line": 4403,
        "comment": "\n     * <p>Checks if the String contains only unicode letters, digits\n     * or space (<code>' '</code>).</p>\n     *\n     * <p><code>null</code> will return <code>false</code>.\n     * An empty String (\"\") will return <code>true</code>.</p>\n     *\n     * <pre>\n     * StringUtils.isAlphanumeric(null)   = false\n     * StringUtils.isAlphanumeric(\"\")     = true\n     * StringUtils.isAlphanumeric(\"  \")   = true\n     * StringUtils.isAlphanumeric(\"abc\")  = true\n     * StringUtils.isAlphanumeric(\"ab c\") = true\n     * StringUtils.isAlphanumeric(\"ab2c\") = true\n     * StringUtils.isAlphanumeric(\"ab-c\") = false\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @return <code>true</code> if only contains letters, digits or space,\n     *  and is non-null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.isAsciiPrintable(java.lang.String)",
        "snippet": "    public static boolean isAsciiPrintable(String str) {\n        if (str == null) {\n            return false;\n        }\n        int sz = str.length();\n        for (int i = 0; i < sz; i++) {\n            if (CharUtils.isAsciiPrintable(str.charAt(i)) == false) {\n                return false;\n            }\n        }\n        return true;\n    }",
        "begin_line": 4430,
        "end_line": 4441,
        "comment": "\n     * <p>Checks if the string contains only ASCII printable characters.</p>\n     * \n     * <p><code>null</code> will return <code>false</code>.\n     * An empty String (\"\") will return <code>true</code>.</p>\n     * \n     * <pre>\n     * StringUtils.isAsciiPrintable(null)     = false\n     * StringUtils.isAsciiPrintable(\"\")       = true\n     * StringUtils.isAsciiPrintable(\" \")      = true\n     * StringUtils.isAsciiPrintable(\"Ceki\")   = true\n     * StringUtils.isAsciiPrintable(\"ab2c\")   = true\n     * StringUtils.isAsciiPrintable(\"!ab-c~\") = true\n     * StringUtils.isAsciiPrintable(\"\\u0020\") = true\n     * StringUtils.isAsciiPrintable(\"\\u0021\") = true\n     * StringUtils.isAsciiPrintable(\"\\u007e\") = true\n     * StringUtils.isAsciiPrintable(\"\\u007f\") = false\n     * StringUtils.isAsciiPrintable(\"Ceki G\\u00fclc\\u00fc\") = false\n     * </pre>\n     *\n     * @param str the string to check, may be null\n     * @return <code>true</code> if every character is in the range\n     *  32 thru 126\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.isNumeric(java.lang.String)",
        "snippet": "    public static boolean isNumeric(String str) {\n        if (str == null) {\n            return false;\n        }\n        int sz = str.length();\n        for (int i = 0; i < sz; i++) {\n            if (Character.isDigit(str.charAt(i)) == false) {\n                return false;\n            }\n        }\n        return true;\n    }",
        "begin_line": 4464,
        "end_line": 4475,
        "comment": "\n     * <p>Checks if the String contains only unicode digits.\n     * A decimal point is not a unicode digit and returns false.</p>\n     *\n     * <p><code>null</code> will return <code>false</code>.\n     * An empty String (\"\") will return <code>true</code>.</p>\n     *\n     * <pre>\n     * StringUtils.isNumeric(null)   = false\n     * StringUtils.isNumeric(\"\")     = true\n     * StringUtils.isNumeric(\"  \")   = false\n     * StringUtils.isNumeric(\"123\")  = true\n     * StringUtils.isNumeric(\"12 3\") = false\n     * StringUtils.isNumeric(\"ab2c\") = false\n     * StringUtils.isNumeric(\"12-3\") = false\n     * StringUtils.isNumeric(\"12.3\") = false\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @return <code>true</code> if only contains digits, and is non-null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.isNumericSpace(java.lang.String)",
        "snippet": "    public static boolean isNumericSpace(String str) {\n        if (str == null) {\n            return false;\n        }\n        int sz = str.length();\n        for (int i = 0; i < sz; i++) {\n            if ((Character.isDigit(str.charAt(i)) == false) && (str.charAt(i) != ' ')) {\n                return false;\n            }\n        }\n        return true;\n    }",
        "begin_line": 4500,
        "end_line": 4511,
        "comment": "\n     * <p>Checks if the String contains only unicode digits or space\n     * (<code>' '</code>).\n     * A decimal point is not a unicode digit and returns false.</p>\n     *\n     * <p><code>null</code> will return <code>false</code>.\n     * An empty String (\"\") will return <code>true</code>.</p>\n     *\n     * <pre>\n     * StringUtils.isNumeric(null)   = false\n     * StringUtils.isNumeric(\"\")     = true\n     * StringUtils.isNumeric(\"  \")   = true\n     * StringUtils.isNumeric(\"123\")  = true\n     * StringUtils.isNumeric(\"12 3\") = true\n     * StringUtils.isNumeric(\"ab2c\") = false\n     * StringUtils.isNumeric(\"12-3\") = false\n     * StringUtils.isNumeric(\"12.3\") = false\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @return <code>true</code> if only contains digits or space,\n     *  and is non-null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.isWhitespace(java.lang.String)",
        "snippet": "    public static boolean isWhitespace(String str) {\n        if (str == null) {\n            return false;\n        }\n        int sz = str.length();\n        for (int i = 0; i < sz; i++) {\n            if ((Character.isWhitespace(str.charAt(i)) == false)) {\n                return false;\n            }\n        }\n        return true;\n    }",
        "begin_line": 4532,
        "end_line": 4543,
        "comment": "\n     * <p>Checks if the String contains only whitespace.</p>\n     *\n     * <p><code>null</code> will return <code>false</code>.\n     * An empty String (\"\") will return <code>true</code>.</p>\n     *\n     * <pre>\n     * StringUtils.isWhitespace(null)   = false\n     * StringUtils.isWhitespace(\"\")     = true\n     * StringUtils.isWhitespace(\"  \")   = true\n     * StringUtils.isWhitespace(\"abc\")  = false\n     * StringUtils.isWhitespace(\"ab2c\") = false\n     * StringUtils.isWhitespace(\"ab-c\") = false\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @return <code>true</code> if only contains whitespace, and is non-null\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.defaultString(java.lang.String)",
        "snippet": "    public static String defaultString(String str) {\n        return str == null ? EMPTY : str;\n    }",
        "begin_line": 4563,
        "end_line": 4565,
        "comment": "\n     * <p>Returns either the passed in String,\n     * or if the String is <code>null</code>, an empty String (\"\").</p>\n     *\n     * <pre>\n     * StringUtils.defaultString(null)  = \"\"\n     * StringUtils.defaultString(\"\")    = \"\"\n     * StringUtils.defaultString(\"bat\") = \"bat\"\n     * </pre>\n     *\n     * @see ObjectUtils#toString(Object)\n     * @see String#valueOf(Object)\n     * @param str  the String to check, may be null\n     * @return the passed in String, or the empty String if it\n     *  was <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.defaultString(java.lang.String, java.lang.String)",
        "snippet": "    public static String defaultString(String str, String defaultStr) {\n        return str == null ? defaultStr : str;\n    }",
        "begin_line": 4584,
        "end_line": 4586,
        "comment": "\n     * <p>Returns either the passed in String, or if the String is\n     * <code>null</code>, the value of <code>defaultStr</code>.</p>\n     *\n     * <pre>\n     * StringUtils.defaultString(null, \"NULL\")  = \"NULL\"\n     * StringUtils.defaultString(\"\", \"NULL\")    = \"\"\n     * StringUtils.defaultString(\"bat\", \"NULL\") = \"bat\"\n     * </pre>\n     *\n     * @see ObjectUtils#toString(Object,String)\n     * @see String#valueOf(Object)\n     * @param str  the String to check, may be null\n     * @param defaultStr  the default String to return\n     *  if the input is <code>null</code>, may be null\n     * @return the passed in String, or the default if it was <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.defaultIfEmpty(java.lang.String, java.lang.String)",
        "snippet": "    public static String defaultIfEmpty(String str, String defaultStr) {\n        return StringUtils.isEmpty(str) ? defaultStr : str;\n    }",
        "begin_line": 4604,
        "end_line": 4606,
        "comment": "\n     * <p>Returns either the passed in String, or if the String is\n     * empty or <code>null</code>, the value of <code>defaultStr</code>.</p>\n     *\n     * <pre>\n     * StringUtils.defaultIfEmpty(null, \"NULL\")  = \"NULL\"\n     * StringUtils.defaultIfEmpty(\"\", \"NULL\")    = \"NULL\"\n     * StringUtils.defaultIfEmpty(\"bat\", \"NULL\") = \"bat\"\n     * </pre>\n     *\n     * @see StringUtils#defaultString(String, String)\n     * @param str  the String to check, may be null\n     * @param defaultStr  the default String to return\n     *  if the input is empty (\"\") or <code>null</code>, may be null\n     * @return the passed in String, or the default\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.reverse(java.lang.String)",
        "snippet": "    public static String reverse(String str) {\n        if (str == null) {\n            return null;\n        }\n        return new StringBuffer(str).reverse().toString();\n    }",
        "begin_line": 4624,
        "end_line": 4629,
        "comment": "\n     * <p>Reverses a String as per {@link StringBuffer#reverse()}.</p>\n     *\n     * <p>A <code>null</code> String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.reverse(null)  = null\n     * StringUtils.reverse(\"\")    = \"\"\n     * StringUtils.reverse(\"bat\") = \"tab\"\n     * </pre>\n     *\n     * @param str  the String to reverse, may be null\n     * @return the reversed String, <code>null</code> if null String input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.reverseDelimited(java.lang.String, char)",
        "snippet": "    public static String reverseDelimited(String str, char separatorChar) {\n        if (str == null) {\n            return null;\n        }\n        // could implement manually, but simple way is to reuse other,\n        // probably slower, methods.\n        String[] strs = split(str, separatorChar);\n        ArrayUtils.reverse(strs);\n        return join(strs, separatorChar);\n    }",
        "begin_line": 4650,
        "end_line": 4659,
        "comment": "\n     * <p>Reverses a String that is delimited by a specific character.</p>\n     *\n     * <p>The Strings between the delimiters are not reversed.\n     * Thus java.lang.String becomes String.lang.java (if the delimiter\n     * is <code>'.'</code>).</p>\n     *\n     * <pre>\n     * StringUtils.reverseDelimited(null, *)      = null\n     * StringUtils.reverseDelimited(\"\", *)        = \"\"\n     * StringUtils.reverseDelimited(\"a.b.c\", 'x') = \"a.b.c\"\n     * StringUtils.reverseDelimited(\"a.b.c\", \".\") = \"c.b.a\"\n     * </pre>\n     *\n     * @param str  the String to reverse, may be null\n     * @param separatorChar  the separator character to use\n     * @return the reversed String, <code>null</code> if null String input\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.reverseDelimitedString(java.lang.String, java.lang.String)",
        "snippet": "    public static String reverseDelimitedString(String str, String separatorChars) {\n        if (str == null) {\n            return null;\n        }\n        // could implement manually, but simple way is to reuse other,\n        // probably slower, methods.\n        String[] strs = split(str, separatorChars);\n        ArrayUtils.reverse(strs);\n        if (separatorChars == null) {\n            return join(strs, ' ');\n        }\n        return join(strs, separatorChars);\n    }",
        "begin_line": 4683,
        "end_line": 4695,
        "comment": "\n     * <p>Reverses a String that is delimited by a specific character.</p>\n     *\n     * <p>The Strings between the delimiters are not reversed.\n     * Thus java.lang.String becomes String.lang.java (if the delimiter\n     * is <code>\".\"</code>).</p>\n     *\n     * <pre>\n     * StringUtils.reverseDelimitedString(null, *)       = null\n     * StringUtils.reverseDelimitedString(\"\",*)          = \"\"\n     * StringUtils.reverseDelimitedString(\"a.b.c\", null) = \"a.b.c\"\n     * StringUtils.reverseDelimitedString(\"a.b.c\", \".\")  = \"c.b.a\"\n     * </pre>\n     *\n     * @param str  the String to reverse, may be null\n     * @param separatorChars  the separator characters to use, null treated as whitespace\n     * @return the reversed String, <code>null</code> if null String input\n     * @deprecated Use {@link #reverseDelimited(String, char)} instead.\n     *      This method is broken as the join doesn't know which char to use.\n     *      Method will be removed in Commons Lang 3.0.\n     *\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.abbreviate(java.lang.String, int)",
        "snippet": "    public static String abbreviate(String str, int maxWidth) {\n        return abbreviate(str, 0, maxWidth);\n    }",
        "begin_line": 4731,
        "end_line": 4733,
        "comment": "\n     * <p>Abbreviates a String using ellipses. This will turn\n     * \"Now is the time for all good men\" into \"Now is the time for...\"</p>\n     *\n     * <p>Specifically:\n     * <ul>\n     *   <li>If <code>str</code> is less than <code>maxWidth</code> characters\n     *       long, return it.</li>\n     *   <li>Else abbreviate it to <code>(substring(str, 0, max-3) + \"...\")</code>.</li>\n     *   <li>If <code>maxWidth</code> is less than <code>4</code>, throw an\n     *       <code>IllegalArgumentException</code>.</li>\n     *   <li>In no case will it return a String of length greater than\n     *       <code>maxWidth</code>.</li>\n     * </ul>\n     * </p>\n     *\n     * <pre>\n     * StringUtils.abbreviate(null, *)      = null\n     * StringUtils.abbreviate(\"\", 4)        = \"\"\n     * StringUtils.abbreviate(\"abcdefg\", 6) = \"abc...\"\n     * StringUtils.abbreviate(\"abcdefg\", 7) = \"abcdefg\"\n     * StringUtils.abbreviate(\"abcdefg\", 8) = \"abcdefg\"\n     * StringUtils.abbreviate(\"abcdefg\", 4) = \"a...\"\n     * StringUtils.abbreviate(\"abcdefg\", 3) = IllegalArgumentException\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param maxWidth  maximum length of result String, must be at least 4\n     * @return abbreviated String, <code>null</code> if null String input\n     * @throws IllegalArgumentException if the width is too small\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.abbreviate(java.lang.String, int, int)",
        "snippet": "    public static String abbreviate(String str, int offset, int maxWidth) {\n        if (str == null) {\n            return null;\n        }\n        if (maxWidth < 4) {\n            throw new IllegalArgumentException(\"Minimum abbreviation width is 4\");\n        }\n        if (str.length() <= maxWidth) {\n            return str;\n        }\n        if (offset > str.length()) {\n            offset = str.length();\n        }\n        if ((str.length() - offset) < (maxWidth - 3)) {\n            offset = str.length() - (maxWidth - 3);\n        }\n        if (offset <= 4) {\n            return str.substring(0, maxWidth - 3) + \"...\";\n        }\n        if (maxWidth < 7) {\n            throw new IllegalArgumentException(\"Minimum abbreviation width with offset is 7\");\n        }\n        if ((offset + (maxWidth - 3)) < str.length()) {\n            return \"...\" + abbreviate(str.substring(offset), maxWidth - 3);\n        }\n        return \"...\" + str.substring(str.length() - (maxWidth - 3));\n    }",
        "begin_line": 4770,
        "end_line": 4796,
        "comment": "\n     * <p>Abbreviates a String using ellipses. This will turn\n     * \"Now is the time for all good men\" into \"...is the time for...\"</p>\n     *\n     * <p>Works like <code>abbreviate(String, int)</code>, but allows you to specify\n     * a \"left edge\" offset.  Note that this left edge is not necessarily going to\n     * be the leftmost character in the result, or the first character following the\n     * ellipses, but it will appear somewhere in the result.\n     *\n     * <p>In no case will it return a String of length greater than\n     * <code>maxWidth</code>.</p>\n     *\n     * <pre>\n     * StringUtils.abbreviate(null, *, *)                = null\n     * StringUtils.abbreviate(\"\", 0, 4)                  = \"\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", -1, 10) = \"abcdefg...\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 0, 10)  = \"abcdefg...\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 1, 10)  = \"abcdefg...\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 4, 10)  = \"abcdefg...\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 5, 10)  = \"...fghi...\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 6, 10)  = \"...ghij...\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 8, 10)  = \"...ijklmno\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 10, 10) = \"...ijklmno\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 12, 10) = \"...ijklmno\"\n     * StringUtils.abbreviate(\"abcdefghij\", 0, 3)        = IllegalArgumentException\n     * StringUtils.abbreviate(\"abcdefghij\", 5, 6)        = IllegalArgumentException\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param offset  left edge of source String\n     * @param maxWidth  maximum length of result String, must be at least 4\n     * @return abbreviated String, <code>null</code> if null String input\n     * @throws IllegalArgumentException if the width is too small\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.difference(java.lang.String, java.lang.String)",
        "snippet": "    public static String difference(String str1, String str2) {\n        if (str1 == null) {\n            return str2;\n        }\n        if (str2 == null) {\n            return str1;\n        }\n        int at = indexOfDifference(str1, str2);\n        if (at == -1) {\n            return EMPTY;\n        }\n        return str2.substring(at);\n    }",
        "begin_line": 4825,
        "end_line": 4837,
        "comment": "\n     * <p>Compares two Strings, and returns the portion where they differ.\n     * (More precisely, return the remainder of the second String,\n     * starting from where it's different from the first.)</p>\n     *\n     * <p>For example,\n     * <code>difference(\"i am a machine\", \"i am a robot\") -> \"robot\"</code>.</p>\n     *\n     * <pre>\n     * StringUtils.difference(null, null) = null\n     * StringUtils.difference(\"\", \"\") = \"\"\n     * StringUtils.difference(\"\", \"abc\") = \"abc\"\n     * StringUtils.difference(\"abc\", \"\") = \"\"\n     * StringUtils.difference(\"abc\", \"abc\") = \"\"\n     * StringUtils.difference(\"ab\", \"abxyz\") = \"xyz\"\n     * StringUtils.difference(\"abcde\", \"abxyz\") = \"xyz\"\n     * StringUtils.difference(\"abcde\", \"xyz\") = \"xyz\"\n     * </pre>\n     *\n     * @param str1  the first String, may be null\n     * @param str2  the second String, may be null\n     * @return the portion of str2 where it differs from str1; returns the\n     * empty String if they are equal\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.indexOfDifference(java.lang.String, java.lang.String)",
        "snippet": "    public static int indexOfDifference(String str1, String str2) {\n        if (str1 == str2) {\n            return -1;\n        }\n        if (str1 == null || str2 == null) {\n            return 0;\n        }\n        int i;\n        for (i = 0; i < str1.length() && i < str2.length(); ++i) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                break;\n            }\n        }\n        if (i < str2.length() || i < str1.length()) {\n            return i;\n        }\n        return -1;\n    }",
        "begin_line": 4862,
        "end_line": 4879,
        "comment": "\n     * <p>Compares two Strings, and returns the index at which the\n     * Strings begin to differ.</p>\n     *\n     * <p>For example,\n     * <code>indexOfDifference(\"i am a machine\", \"i am a robot\") -> 7</code></p>\n     *\n     * <pre>\n     * StringUtils.indexOfDifference(null, null) = -1\n     * StringUtils.indexOfDifference(\"\", \"\") = -1\n     * StringUtils.indexOfDifference(\"\", \"abc\") = 0\n     * StringUtils.indexOfDifference(\"abc\", \"\") = 0\n     * StringUtils.indexOfDifference(\"abc\", \"abc\") = -1\n     * StringUtils.indexOfDifference(\"ab\", \"abxyz\") = 2\n     * StringUtils.indexOfDifference(\"abcde\", \"abxyz\") = 2\n     * StringUtils.indexOfDifference(\"abcde\", \"xyz\") = 0\n     * </pre>\n     *\n     * @param str1  the first String, may be null\n     * @param str2  the second String, may be null\n     * @return the index where str2 and str1 begin to differ; -1 if they are equal\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringUtils.java",
        "class_name": "org.apache.commons.lang.StringUtils",
        "signature": "org.apache.commons.lang.StringUtils.getLevenshteinDistance(java.lang.String, java.lang.String)",
        "snippet": "    public static int getLevenshteinDistance(String s, String t) {\n        if (s == null || t == null) {\n            throw new IllegalArgumentException(\"Strings must not be null\");\n        }\n\n        /*\n           The difference between this impl. and the previous is that, rather \n           than creating and retaining a matrix of size s.length()+1 by t.length()+1, \n           we maintain two single-dimensional arrays of length s.length()+1.  The first, d,\n           is the 'current working' distance array that maintains the newest distance cost\n           counts as we iterate through the characters of String s.  Each time we increment\n           the index of String t we are comparing, d is copied to p, the second int[].  Doing so\n           allows us to retain the previous cost counts as required by the algorithm (taking \n           the minimum of the cost count to the left, up one, and diagonally up and to the left\n           of the current cost count being calculated).  (Note that the arrays aren't really \n           copied anymore, just switched...this is clearly much better than cloning an array \n           or doing a System.arraycopy() each time  through the outer loop.)\n\n           Effectively, the difference between the two implementations is this one does not \n           cause an out of memory condition when calculating the LD over two very large strings.\n         */\n\n        int n = s.length(); // length of s\n        int m = t.length(); // length of t\n\n        if (n == 0) {\n            return m;\n        } else if (m == 0) {\n            return n;\n        }\n\n        int p[] = new int[n+1]; //'previous' cost array, horizontally\n        int d[] = new int[n+1]; // cost array, horizontally\n        int _d[]; //placeholder to assist in swapping p and d\n\n        // indexes into strings s and t\n        int i; // iterates through s\n        int j; // iterates through t\n\n        char t_j; // jth character of t\n\n        int cost; // cost\n\n        for (i = 0; i<=n; i++) {\n            p[i] = i;\n        }\n\n        for (j = 1; j<=m; j++) {\n            t_j = t.charAt(j-1);\n            d[0] = j;\n\n            for (i=1; i<=n; i++) {\n                cost = s.charAt(i-1)==t_j ? 0 : 1;\n                // minimum of cell to the left+1, to the top+1, diagonally left and up +cost\n                d[i] = Math.min(Math.min(d[i-1]+1, p[i]+1),  p[i-1]+cost);\n            }\n\n            // copy current distance counts to 'previous row' distance counts\n            _d = p;\n            p = d;\n            d = _d;\n        }\n\n        // our last action in the above loop was to switch d and p, so p now \n        // actually has the most recent cost counts\n        return p[n];\n    }",
        "begin_line": 4917,
        "end_line": 4983,
        "comment": "\n     * <p>Find the Levenshtein distance between two Strings.</p>\n     *\n     * <p>This is the number of changes needed to change one String into\n     * another, where each change is a single character modification (deletion,\n     * insertion or substitution).</p>\n     *\n     * <p>The previous implementation of the Levenshtein distance algorithm\n     * was from <a href=\"http://www.merriampark.com/ld.htm\">http://www.merriampark.com/ld.htm</a></p>\n     *\n     * <p>Chas Emerick has written an implementation in Java, which avoids an OutOfMemoryError\n     * which can occur when my Java implementation is used with very large strings.<br>\n     * This implementation of the Levenshtein distance algorithm\n     * is from <a href=\"http://www.merriampark.com/ldjava.htm\">http://www.merriampark.com/ldjava.htm</a></p>\n     *\n     * <pre>\n     * StringUtils.getLevenshteinDistance(null, *)             = IllegalArgumentException\n     * StringUtils.getLevenshteinDistance(*, null)             = IllegalArgumentException\n     * StringUtils.getLevenshteinDistance(\"\",\"\")               = 0\n     * StringUtils.getLevenshteinDistance(\"\",\"a\")              = 1\n     * StringUtils.getLevenshteinDistance(\"aaapppp\", \"\")       = 7\n     * StringUtils.getLevenshteinDistance(\"frog\", \"fog\")       = 1\n     * StringUtils.getLevenshteinDistance(\"fly\", \"ant\")        = 3\n     * StringUtils.getLevenshteinDistance(\"elephant\", \"hippo\") = 7\n     * StringUtils.getLevenshteinDistance(\"hippo\", \"elephant\") = 7\n     * StringUtils.getLevenshteinDistance(\"hippo\", \"zzzzzzzz\") = 8\n     * StringUtils.getLevenshteinDistance(\"hello\", \"hallo\")    = 1\n     * </pre>\n     *\n     * @param s  the first String, must not be null\n     * @param t  the second String, must not be null\n     * @return result distance\n     * @throws IllegalArgumentException if either String input <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "class_name": "org.apache.commons.lang.StringEscapeUtils",
        "signature": "org.apache.commons.lang.StringEscapeUtils.StringEscapeUtils()",
        "snippet": "    public StringEscapeUtils() {\n      super();\n    }",
        "begin_line": 53,
        "end_line": 55,
        "comment": "\n     * <p><code>StringEscapeUtils</code> instances should NOT be constructed in\n     * standard programming.</p>\n     *\n     * <p>Instead, the class should be used as:\n     * <pre>StringEscapeUtils.escapeJava(\"foo\");</pre></p>\n     *\n     * <p>This constructor is public to permit tools that require a JavaBean\n     * instance to operate.</p>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "class_name": "org.apache.commons.lang.StringEscapeUtils",
        "signature": "org.apache.commons.lang.StringEscapeUtils.escapeJava(java.lang.String)",
        "snippet": "    public static String escapeJava(String str) {\n        return escapeJavaStyleString(str, false);\n    }",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\n     * <p>Escapes the characters in a <code>String</code> using Java String rules.</p>\n     *\n     * <p>Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) </p>\n     *\n     * <p>So a tab becomes the characters <code>'\\\\'</code> and\n     * <code>'t'</code>.</p>\n     *\n     * <p>The only difference between Java strings and JavaScript strings\n     * is that in JavaScript, a single quote must be escaped.</p>\n     *\n     * <p>Example:\n     * <pre>\n     * input string: He didn't say, \"Stop!\"\n     * output string: He didn't say, \\\"Stop!\\\"\n     * </pre>\n     * </p>\n     *\n     * @param str  String to escape values in, may be null\n     * @return String with escaped values, <code>null</code> if null string input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "class_name": "org.apache.commons.lang.StringEscapeUtils",
        "signature": "org.apache.commons.lang.StringEscapeUtils.escapeJava(java.io.Writer, java.lang.String)",
        "snippet": "    public static void escapeJava(Writer out, String str) throws IOException {\n        escapeJavaStyleString(out, str, false);\n    }",
        "begin_line": 96,
        "end_line": 98,
        "comment": "\n     * <p>Escapes the characters in a <code>String</code> using Java String rules to\n     * a <code>Writer</code>.</p>\n     * \n     * <p>A <code>null</code> string input has no effect.</p>\n     * \n     * @see #escapeJava(java.lang.String)\n     * @param out  Writer to write escaped string into\n     * @param str  String to escape values in, may be null\n     * @throws IllegalArgumentException if the Writer is <code>null</code>\n     * @throws IOException if error occurs on underlying Writer\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "class_name": "org.apache.commons.lang.StringEscapeUtils",
        "signature": "org.apache.commons.lang.StringEscapeUtils.escapeJavaScript(java.lang.String)",
        "snippet": "    public static String escapeJavaScript(String str) {\n        return escapeJavaStyleString(str, true);\n    }",
        "begin_line": 121,
        "end_line": 123,
        "comment": "\n     * <p>Escapes the characters in a <code>String</code> using JavaScript String rules.</p>\n     * <p>Escapes any values it finds into their JavaScript String form.\n     * Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) </p>\n     *\n     * <p>So a tab becomes the characters <code>'\\\\'</code> and\n     * <code>'t'</code>.</p>\n     *\n     * <p>The only difference between Java strings and JavaScript strings\n     * is that in JavaScript, a single quote must be escaped.</p>\n     *\n     * <p>Example:\n     * <pre>\n     * input string: He didn't say, \"Stop!\"\n     * output string: He didn\\'t say, \\\"Stop!\\\"\n     * </pre>\n     * </p>\n     *\n     * @param str  String to escape values in, may be null\n     * @return String with escaped values, <code>null</code> if null string input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "class_name": "org.apache.commons.lang.StringEscapeUtils",
        "signature": "org.apache.commons.lang.StringEscapeUtils.escapeJavaScript(java.io.Writer, java.lang.String)",
        "snippet": "    public static void escapeJavaScript(Writer out, String str) throws IOException {\n        escapeJavaStyleString(out, str, true);\n    }",
        "begin_line": 137,
        "end_line": 139,
        "comment": "\n     * <p>Escapes the characters in a <code>String</code> using JavaScript String rules\n     * to a <code>Writer</code>.</p>\n     * \n     * <p>A <code>null</code> string input has no effect.</p>\n     * \n     * @see #escapeJavaScript(java.lang.String)\n     * @param out  Writer to write escaped string into\n     * @param str  String to escape values in, may be null\n     * @throws IllegalArgumentException if the Writer is <code>null</code>\n     * @throws IOException if error occurs on underlying Writer\n     *",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "class_name": "org.apache.commons.lang.StringEscapeUtils",
        "signature": "org.apache.commons.lang.StringEscapeUtils.escapeJavaStyleString(java.lang.String, boolean)",
        "snippet": "    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {\n        if (str == null) {\n            return null;\n        }\n        try {\n            StringWriter writer = new StringWriter(str.length() * 2);\n            escapeJavaStyleString(writer, str, escapeSingleQuotes);\n            return writer.toString();\n        } catch (IOException ioe) {\n            // this should never ever happen while writing to a StringWriter\n            ioe.printStackTrace();\n            return null;\n        }\n    }",
        "begin_line": 148,
        "end_line": 161,
        "comment": "\n     * <p>Worker method for the {@link #escapeJavaScript(String)} method.</p>\n     * \n     * @param str String to escape values in, may be null\n     * @param escapeSingleQuotes escapes single quotes if <code>true</code>\n     * @return the escaped string\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "class_name": "org.apache.commons.lang.StringEscapeUtils",
        "signature": "org.apache.commons.lang.StringEscapeUtils.escapeJavaStyleString(java.io.Writer, java.lang.String, boolean)",
        "snippet": "    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (str == null) {\n            return;\n        }\n        int sz;\n        sz = str.length();\n        for (int i = 0; i < sz; i++) {\n            char ch = str.charAt(i);\n\n            // handle unicode\n            if (ch > 0xfff) {\n                out.write(\"\\\\u\" + hex(ch));\n            } else if (ch > 0xff) {\n                out.write(\"\\\\u0\" + hex(ch));\n            } else if (ch > 0x7f) {\n                out.write(\"\\\\u00\" + hex(ch));\n            } else if (ch < 32) {\n                switch (ch) {\n                    case '\\b':\n                        out.write('\\\\');\n                        out.write('b');\n                        break;\n                    case '\\n':\n                        out.write('\\\\');\n                        out.write('n');\n                        break;\n                    case '\\t':\n                        out.write('\\\\');\n                        out.write('t');\n                        break;\n                    case '\\f':\n                        out.write('\\\\');\n                        out.write('f');\n                        break;\n                    case '\\r':\n                        out.write('\\\\');\n                        out.write('r');\n                        break;\n                    default :\n                        if (ch > 0xf) {\n                            out.write(\"\\\\u00\" + hex(ch));\n                        } else {\n                            out.write(\"\\\\u000\" + hex(ch));\n                        }\n                        break;\n                }\n            } else {\n                switch (ch) {\n                    case '\\'':\n                        if (escapeSingleQuote) {\n                          out.write('\\\\');\n                        }\n                        out.write('\\'');\n                        break;\n                    case '\"':\n                        out.write('\\\\');\n                        out.write('\"');\n                        break;\n                    case '\\\\':\n                        out.write('\\\\');\n                        out.write('\\\\');\n                        break;\n                    default :\n                        out.write(ch);\n                        break;\n                }\n            }\n        }\n    }",
        "begin_line": 171,
        "end_line": 242,
        "comment": "\n     * <p>Worker method for the {@link #escapeJavaScript(String)} method.</p>\n     * \n     * @param out write to receieve the escaped string\n     * @param str String to escape values in, may be null\n     * @param escapeSingleQuote escapes single quotes if <code>true</code>\n     * @throws IOException if an IOException occurs\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "class_name": "org.apache.commons.lang.StringEscapeUtils",
        "signature": "org.apache.commons.lang.StringEscapeUtils.hex(char)",
        "snippet": "    private static String hex(char ch) {\n        return Integer.toHexString(ch).toUpperCase();\n    }",
        "begin_line": 251,
        "end_line": 253,
        "comment": "\n     * <p>Returns an upper case hexadecimal <code>String</code> for the given\n     * character.</p>\n     * \n     * @param ch The character to convert.\n     * @return An upper case hexadecimal <code>String</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "class_name": "org.apache.commons.lang.StringEscapeUtils",
        "signature": "org.apache.commons.lang.StringEscapeUtils.unescapeJava(java.lang.String)",
        "snippet": "    public static String unescapeJava(String str) {\n        if (str == null) {\n            return null;\n        }\n        try {\n            StringWriter writer = new StringWriter(str.length());\n            unescapeJava(writer, str);\n            return writer.toString();\n        } catch (IOException ioe) {\n            // this should never ever happen while writing to a StringWriter\n            ioe.printStackTrace();\n            return null;\n        }\n    }",
        "begin_line": 264,
        "end_line": 277,
        "comment": "\n     * <p>Unescapes any Java literals found in the <code>String</code>.\n     * For example, it will turn a sequence of <code>'\\'</code> and\n     * <code>'n'</code> into a newline character, unless the <code>'\\'</code>\n     * is preceded by another <code>'\\'</code>.</p>\n     * \n     * @param str  the <code>String</code> to unescape, may be null\n     * @return a new unescaped <code>String</code>, <code>null</code> if null string input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "class_name": "org.apache.commons.lang.StringEscapeUtils",
        "signature": "org.apache.commons.lang.StringEscapeUtils.unescapeJava(java.io.Writer, java.lang.String)",
        "snippet": "    public static void unescapeJava(Writer out, String str) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (str == null) {\n            return;\n        }\n        int sz = str.length();\n        StringBuffer unicode = new StringBuffer(4);\n        boolean hadSlash = false;\n        boolean inUnicode = false;\n        for (int i = 0; i < sz; i++) {\n            char ch = str.charAt(i);\n            if (inUnicode) {\n                // if in unicode, then we're reading unicode\n                // values in somehow\n                unicode.append(ch);\n                if (unicode.length() == 4) {\n                    // unicode now contains the four hex digits\n                    // which represents our unicode character\n                    try {\n                        int value = Integer.parseInt(unicode.toString(), 16);\n                        out.write((char) value);\n                        unicode.setLength(0);\n                        inUnicode = false;\n                        hadSlash = false;\n                    } catch (NumberFormatException nfe) {\n                        throw new NestableRuntimeException(\"Unable to parse unicode value: \" + unicode, nfe);\n                    }\n                }\n                continue;\n            }\n            if (hadSlash) {\n                // handle an escaped value\n                hadSlash = false;\n                switch (ch) {\n                    case '\\\\':\n                        out.write('\\\\');\n                        break;\n                    case '\\'':\n                        out.write('\\'');\n                        break;\n                    case '\\\"':\n                        out.write('\"');\n                        break;\n                    case 'r':\n                        out.write('\\r');\n                        break;\n                    case 'f':\n                        out.write('\\f');\n                        break;\n                    case 't':\n                        out.write('\\t');\n                        break;\n                    case 'n':\n                        out.write('\\n');\n                        break;\n                    case 'b':\n                        out.write('\\b');\n                        break;\n                    case 'u':\n                        {\n                            // uh-oh, we're in unicode country....\n                            inUnicode = true;\n                            break;\n                        }\n                    default :\n                        out.write(ch);\n                        break;\n                }\n                continue;\n            } else if (ch == '\\\\') {\n                hadSlash = true;\n                continue;\n            }\n            out.write(ch);\n        }\n        if (hadSlash) {\n            // then we're in the weird case of a \\ at the end of the\n            // string, let's output it anyway.\n            out.write('\\\\');\n        }\n    }",
        "begin_line": 294,
        "end_line": 376,
        "comment": "\n     * <p>Unescapes any Java literals found in the <code>String</code> to a\n     * <code>Writer</code>.</p>\n     *\n     * <p>For example, it will turn a sequence of <code>'\\'</code> and\n     * <code>'n'</code> into a newline character, unless the <code>'\\'</code>\n     * is preceded by another <code>'\\'</code>.</p>\n     * \n     * <p>A <code>null</code> string input has no effect.</p>\n     * \n     * @param out  the <code>Writer</code> used to output unescaped characters\n     * @param str  the <code>String</code> to unescape, may be null\n     * @throws IllegalArgumentException if the Writer is <code>null</code>\n     * @throws IOException if error occurs on underlying Writer\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "class_name": "org.apache.commons.lang.StringEscapeUtils",
        "signature": "org.apache.commons.lang.StringEscapeUtils.unescapeJavaScript(java.lang.String)",
        "snippet": "    public static String unescapeJavaScript(String str) {\n        return unescapeJava(str);\n    }",
        "begin_line": 389,
        "end_line": 391,
        "comment": "\n     * <p>Unescapes any JavaScript literals found in the <code>String</code>.</p>\n     *\n     * <p>For example, it will turn a sequence of <code>'\\'</code> and <code>'n'</code>\n     * into a newline character, unless the <code>'\\'</code> is preceded by another\n     * <code>'\\'</code>.</p>\n     *\n     * @see #unescapeJava(String)\n     * @param str  the <code>String</code> to unescape, may be null\n     * @return A new unescaped <code>String</code>, <code>null</code> if null string input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "class_name": "org.apache.commons.lang.StringEscapeUtils",
        "signature": "org.apache.commons.lang.StringEscapeUtils.unescapeJavaScript(java.io.Writer, java.lang.String)",
        "snippet": "    public static void unescapeJavaScript(Writer out, String str) throws IOException {\n        unescapeJava(out, str);\n    }",
        "begin_line": 409,
        "end_line": 411,
        "comment": "\n     * <p>Unescapes any JavaScript literals found in the <code>String</code> to a\n     * <code>Writer</code>.</p>\n     *\n     * <p>For example, it will turn a sequence of <code>'\\'</code> and <code>'n'</code>\n     * into a newline character, unless the <code>'\\'</code> is preceded by another\n     * <code>'\\'</code>.</p>\n     *\n     * <p>A <code>null</code> string input has no effect.</p>\n     * \n     * @see #unescapeJava(Writer,String)\n     * @param out  the <code>Writer</code> used to output unescaped characters\n     * @param str  the <code>String</code> to unescape, may be null\n     * @throws IllegalArgumentException if the Writer is <code>null</code>\n     * @throws IOException if error occurs on underlying Writer\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "class_name": "org.apache.commons.lang.StringEscapeUtils",
        "signature": "org.apache.commons.lang.StringEscapeUtils.escapeHtml(java.lang.String)",
        "snippet": "    public static String escapeHtml(String str) {\n        if (str == null) {\n            return null;\n        }\n        try {\n            StringWriter writer = new StringWriter ((int)(str.length() * 1.5));\n            escapeHtml(writer, str);\n            return writer.toString();\n        } catch (IOException e) {\n            //assert false;\n            //should be impossible\n            e.printStackTrace();\n            return null;\n        }\n    }",
        "begin_line": 441,
        "end_line": 455,
        "comment": "\n     * <p>Escapes the characters in a <code>String</code> using HTML entities.</p>\n     *\n     * <p>\n     * For example:\n     * </p> \n     * <p><code>\"bread\" & \"butter\"</code></p>\n     * becomes:\n     * <p>\n     * <code>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</code>.\n     * </p>\n     *\n     * <p>Supports all known HTML 4.0 entities, including funky accents.\n     * Note that the commonly used apostrophe escape character (&amp;apos;)\n     * is not a legal entity and so is not supported). </p>\n     *\n     * @param str  the <code>String</code> to escape, may be null\n     * @return a new escaped <code>String</code>, <code>null</code> if null string input\n     * \n     * @see #unescapeHtml(String)\n     * @see <a href=\"http://hotwired.lycos.com/webmonkey/reference/special_characters/\">ISO Entities</a>\n     * @see <a href=\"http://www.w3.org/TR/REC-html32#latin1\">HTML 3.2 Character Entities for ISO Latin-1</a>\n     * @see <a href=\"http://www.w3.org/TR/REC-html40/sgml/entities.html\">HTML 4.0 Character entity references</a>\n     * @see <a href=\"http://www.w3.org/TR/html401/charset.html#h-5.3\">HTML 4.01 Character References</a>\n     * @see <a href=\"http://www.w3.org/TR/html401/charset.html#code-position\">HTML 4.01 Code positions</a>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "class_name": "org.apache.commons.lang.StringEscapeUtils",
        "signature": "org.apache.commons.lang.StringEscapeUtils.escapeHtml(java.io.Writer, java.lang.String)",
        "snippet": "    public static void escapeHtml(Writer writer, String string) throws IOException {\n        if (writer == null ) {\n            throw new IllegalArgumentException (\"The Writer must not be null.\");\n        }\n        if (string == null) {\n            return;\n        }\n        Entities.HTML40.escape(writer, string);\n    }",
        "begin_line": 486,
        "end_line": 494,
        "comment": "\n     * <p>Escapes the characters in a <code>String</code> using HTML entities and writes\n     * them to a <code>Writer</code>.</p>\n     *\n     * <p>\n     * For example:\n     * </p> \n     * <code>\"bread\" & \"butter\"</code>\n     * <p>becomes:</p>\n     * <code>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</code>.\n     *\n     * <p>Supports all known HTML 4.0 entities, including funky accents.\n     * Note that the commonly used apostrophe escape character (&amp;apos;)\n     * is not a legal entity and so is not supported). </p>\n     *\n     * @param writer  the writer receiving the escaped string, not null\n     * @param string  the <code>String</code> to escape, may be null\n     * @throws IllegalArgumentException if the writer is null\n     * @throws IOException when <code>Writer</code> passed throws the exception from\n     *                                       calls to the {@link Writer#write(int)} methods.\n     * \n     * @see #escapeHtml(String)\n     * @see #unescapeHtml(String)\n     * @see <a href=\"http://hotwired.lycos.com/webmonkey/reference/special_characters/\">ISO Entities</a>\n     * @see <a href=\"http://www.w3.org/TR/REC-html32#latin1\">HTML 3.2 Character Entities for ISO Latin-1</a>\n     * @see <a href=\"http://www.w3.org/TR/REC-html40/sgml/entities.html\">HTML 4.0 Character entity references</a>\n     * @see <a href=\"http://www.w3.org/TR/html401/charset.html#h-5.3\">HTML 4.01 Character References</a>\n     * @see <a href=\"http://www.w3.org/TR/html401/charset.html#code-position\">HTML 4.01 Code positions</a>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "class_name": "org.apache.commons.lang.StringEscapeUtils",
        "signature": "org.apache.commons.lang.StringEscapeUtils.unescapeHtml(java.lang.String)",
        "snippet": "    public static String unescapeHtml(String str) {\n        if (str == null) {\n            return null;\n        }\n        try {\n            StringWriter writer = new StringWriter ((int)(str.length() * 1.5));\n            unescapeHtml(writer, str);\n            return writer.toString();\n        } catch (IOException e) {\n            //assert false;\n            //should be impossible\n            e.printStackTrace();\n            return null;\n        }\n    }",
        "begin_line": 513,
        "end_line": 527,
        "comment": "\n     * <p>Unescapes a string containing entity escapes to a string\n     * containing the actual Unicode characters corresponding to the\n     * escapes. Supports HTML 4.0 entities.</p>\n     *\n     * <p>For example, the string \"&amp;lt;Fran&amp;ccedil;ais&amp;gt;\"\n     * will become \"&lt;Fran&ccedil;ais&gt;\"</p>\n     *\n     * <p>If an entity is unrecognized, it is left alone, and inserted\n     * verbatim into the result string. e.g. \"&amp;gt;&amp;zzzz;x\" will\n     * become \"&gt;&amp;zzzz;x\".</p>\n     *\n     * @param str  the <code>String</code> to unescape, may be null\n     * @return a new unescaped <code>String</code>, <code>null</code> if null string input\n     * @see #escapeHtml(Writer, String)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "class_name": "org.apache.commons.lang.StringEscapeUtils",
        "signature": "org.apache.commons.lang.StringEscapeUtils.unescapeHtml(java.io.Writer, java.lang.String)",
        "snippet": "    public static void unescapeHtml(Writer writer, String string) throws IOException {\n        if (writer == null ) {\n            throw new IllegalArgumentException (\"The Writer must not be null.\");\n        }\n        if (string == null) {\n            return;\n        }\n        Entities.HTML40.unescape(writer, string);\n    }",
        "begin_line": 547,
        "end_line": 555,
        "comment": "\n     * <p>Unescapes a string containing entity escapes to a string\n     * containing the actual Unicode characters corresponding to the\n     * escapes. Supports HTML 4.0 entities.</p>\n     *\n     * <p>For example, the string \"&amp;lt;Fran&amp;ccedil;ais&amp;gt;\"\n     * will become \"&lt;Fran&ccedil;ais&gt;\"</p>\n     *\n     * <p>If an entity is unrecognized, it is left alone, and inserted\n     * verbatim into the result string. e.g. \"&amp;gt;&amp;zzzz;x\" will\n     * become \"&gt;&amp;zzzz;x\".</p>\n     *\n     * @param writer  the writer receiving the unescaped string, not null\n     * @param string  the <code>String</code> to unescape, may be null\n     * @throws IllegalArgumentException if the writer is null\n     * @throws IOException if an IOException occurs\n     * @see #escapeHtml(String)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "class_name": "org.apache.commons.lang.StringEscapeUtils",
        "signature": "org.apache.commons.lang.StringEscapeUtils.escapeXml(java.io.Writer, java.lang.String)",
        "snippet": "    public static void escapeXml(Writer writer, String str) throws IOException {\n        if (writer == null ) {\n            throw new IllegalArgumentException (\"The Writer must not be null.\");\n        }\n        if (str == null) {\n            return;\n        }\n        Entities.XML.escape(writer, str);\n    }",
        "begin_line": 577,
        "end_line": 585,
        "comment": "\n     * <p>Escapes the characters in a <code>String</code> using XML entities.</p>\n     *\n     * <p>For example: <tt>\"bread\" & \"butter\"</tt> =>\n     * <tt>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</tt>.\n     * </p>\n     *\n     * <p>Supports only the five basic XML entities (gt, lt, quot, amp, apos).\n     * Does not support DTDs or external entities.</p>\n     *\n     * <p>Note that unicode characters greater than 0x7f are currently escaped to \n     *    their numerical \\\\u equivalent. This may change in future releases. </p>\n     *\n     * @param writer  the writer receiving the unescaped string, not null\n     * @param str  the <code>String</code> to escape, may be null\n     * @throws IllegalArgumentException if the writer is null\n     * @throws IOException if there is a problem writing\n     * @see #unescapeXml(java.lang.String)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "class_name": "org.apache.commons.lang.StringEscapeUtils",
        "signature": "org.apache.commons.lang.StringEscapeUtils.escapeXml(java.lang.String)",
        "snippet": "    public static String escapeXml(String str) {\n        if (str == null) {\n            return null;\n        }\n        return Entities.XML.escape(str);\n    }",
        "begin_line": 604,
        "end_line": 609,
        "comment": "\n     * <p>Escapes the characters in a <code>String</code> using XML entities.</p>\n     *\n     * <p>For example: <tt>\"bread\" & \"butter\"</tt> =>\n     * <tt>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</tt>.\n     * </p>\n     *\n     * <p>Supports only the five basic XML entities (gt, lt, quot, amp, apos).\n     * Does not support DTDs or external entities.</p>\n     *\n     * <p>Note that unicode characters greater than 0x7f are currently escaped to \n     *    their numerical \\\\u equivalent. This may change in future releases. </p>\n     *\n     * @param str  the <code>String</code> to escape, may be null\n     * @return a new escaped <code>String</code>, <code>null</code> if null string input\n     * @see #unescapeXml(java.lang.String)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "class_name": "org.apache.commons.lang.StringEscapeUtils",
        "signature": "org.apache.commons.lang.StringEscapeUtils.unescapeXml(java.io.Writer, java.lang.String)",
        "snippet": "    public static void unescapeXml(Writer writer, String str) throws IOException {\n        if (writer == null ) {\n            throw new IllegalArgumentException (\"The Writer must not be null.\");\n        }\n        if (str == null) {\n            return;\n        }\n        Entities.XML.unescape(writer, str);\n    }",
        "begin_line": 629,
        "end_line": 637,
        "comment": "\n     * <p>Unescapes a string containing XML entity escapes to a string\n     * containing the actual Unicode characters corresponding to the\n     * escapes.</p>\n     *\n     * <p>Supports only the five basic XML entities (gt, lt, quot, amp, apos).\n     * Does not support DTDs or external entities.</p>\n     *\n     * <p>Note that numerical \\\\u unicode codes are unescaped to their respective \n     *    unicode characters. This may change in future releases. </p>\n     *\n     * @param writer  the writer receiving the unescaped string, not null\n     * @param str  the <code>String</code> to unescape, may be null\n     * @throws IllegalArgumentException if the writer is null\n     * @throws IOException if there is a problem writing\n     * @see #escapeXml(String)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "class_name": "org.apache.commons.lang.StringEscapeUtils",
        "signature": "org.apache.commons.lang.StringEscapeUtils.unescapeXml(java.lang.String)",
        "snippet": "    public static String unescapeXml(String str) {\n        if (str == null) {\n            return null;\n        }\n        return Entities.XML.unescape(str);\n    }",
        "begin_line": 654,
        "end_line": 659,
        "comment": "\n     * <p>Unescapes a string containing XML entity escapes to a string\n     * containing the actual Unicode characters corresponding to the\n     * escapes.</p>\n     *\n     * <p>Supports only the five basic XML entities (gt, lt, quot, amp, apos).\n     * Does not support DTDs or external entities.</p>\n     *\n     * <p>Note that numerical \\\\u unicode codes are unescaped to their respective \n     *    unicode characters. This may change in future releases. </p>\n     *\n     * @param str  the <code>String</code> to unescape, may be null\n     * @return a new unescaped <code>String</code>, <code>null</code> if null string input\n     * @see #escapeXml(String)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "class_name": "org.apache.commons.lang.StringEscapeUtils",
        "signature": "org.apache.commons.lang.StringEscapeUtils.escapeSql(java.lang.String)",
        "snippet": "    public static String escapeSql(String str) {\n        if (str == null) {\n            return null;\n        }\n        return StringUtils.replace(str, \"'\", \"''\");\n    }",
        "begin_line": 680,
        "end_line": 685,
        "comment": "\n     * <p>Escapes the characters in a <code>String</code> to be suitable to pass to\n     * an SQL query.</p>\n     *\n     * <p>For example,\n     * <pre>statement.executeQuery(\"SELECT * FROM MOVIES WHERE TITLE='\" + \n     *   StringEscapeUtils.escapeSql(\"McHale's Navy\") + \n     *   \"'\");</pre>\n     * </p>\n     *\n     * <p>At present, this method only turns single-quotes into doubled single-quotes\n     * (<code>\"McHale's Navy\"</code> => <code>\"McHale''s Navy\"</code>). It does not\n     * handle the cases of percent (%) or underscore (_) for use in LIKE clauses.</p>\n     *\n     * see http://www.jguru.com/faq/view.jsp?EID=8881\n     * @param str  the string to escape, may be null\n     * @return a new String, escaped for SQL, <code>null</code> if null string input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.fillWithHtml40Entities(org.apache.commons.lang.Entities)",
        "snippet": "    static void fillWithHtml40Entities(Entities entities) {\n        entities.addEntities(BASIC_ARRAY);\n        entities.addEntities(ISO8859_1_ARRAY);\n        entities.addEntities(HTML40_ARRAY);\n    }",
        "begin_line": 387,
        "end_line": 391,
        "comment": "\n     * <p>Fills the specified entities instance with HTML 40 entities.</p>\n     * \n     * @param entities the instance to be filled.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.EntityMap.add(java.lang.String, int)",
        "snippet": "        void add(String name, int value);",
        "begin_line": 400,
        "end_line": 400,
        "comment": "\n         * <p>Add an entry to this entity map.</p>\n         * \n         * @param name the entity name\n         * @param value the entity value\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.EntityMap.name(int)",
        "snippet": "        String name(int value);",
        "begin_line": 408,
        "end_line": 408,
        "comment": "\n         * <p>Returns the name of the entity identified by the specified value.</p>\n         * \n         * @param value the value to locate\n         * @return entity name associated with the specified value\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.EntityMap.value(java.lang.String)",
        "snippet": "        int value(String name);",
        "begin_line": 416,
        "end_line": 416,
        "comment": "\n         * <p>Returns the value of the entity identified by the specified name.</p>\n         * \n         * @param name the name to locate\n         * @return entity value associated with the specified name\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.PrimitiveEntityMap.add(java.lang.String, int)",
        "snippet": "        public void add(String name, int value) {\n            mapNameToValue.put(name, new Integer(value));\n            mapValueToName.put(value, name);\n        }",
        "begin_line": 426,
        "end_line": 429,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang.Entities.EntityMap": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.PrimitiveEntityMap.name(int)",
        "snippet": "        public String name(int value) {\n            return (String) mapValueToName.get(value);\n        }",
        "begin_line": 434,
        "end_line": 436,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang.Entities.EntityMap": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.PrimitiveEntityMap.value(java.lang.String)",
        "snippet": "        public int value(String name) {\n            Object value = mapNameToValue.get(name);\n            if (value == null) {\n                return -1;\n            }\n            return ((Integer) value).intValue();\n        }",
        "begin_line": 441,
        "end_line": 447,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang.Entities.EntityMap": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.MapIntMap.add(java.lang.String, int)",
        "snippet": "        public void add(String name, int value) {\n            mapNameToValue.put(name, new Integer(value));\n            mapValueToName.put(new Integer(value), name);\n        }",
        "begin_line": 458,
        "end_line": 461,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang.Entities.EntityMap": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.MapIntMap.name(int)",
        "snippet": "        public String name(int value) {\n            return (String) mapValueToName.get(new Integer(value));\n        }",
        "begin_line": 466,
        "end_line": 468,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang.Entities.EntityMap": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.MapIntMap.value(java.lang.String)",
        "snippet": "        public int value(String name) {\n            Object value = mapNameToValue.get(name);\n            if (value == null) {\n                return -1;\n            }\n            return ((Integer) value).intValue();\n        }",
        "begin_line": 473,
        "end_line": 479,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang.Entities.EntityMap": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.HashEntityMap.HashEntityMap()",
        "snippet": "        public HashEntityMap() {\n            mapNameToValue = new HashMap();\n            mapValueToName = new HashMap();\n        }",
        "begin_line": 486,
        "end_line": 489,
        "comment": "\n         * Constructs a new instance of <code>HashEntityMap</code>.\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.TreeEntityMap.TreeEntityMap()",
        "snippet": "        public TreeEntityMap() {\n            mapNameToValue = new TreeMap();\n            mapValueToName = new TreeMap();\n        }",
        "begin_line": 496,
        "end_line": 499,
        "comment": "\n       * Constructs a new instance of <code>TreeEntityMap</code>.\n       ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.LookupEntityMap.name(int)",
        "snippet": "        public String name(int value) {\n            if (value < LOOKUP_TABLE_SIZE) {\n                return lookupTable()[value];\n            }\n            return super.name(value);\n        }",
        "begin_line": 509,
        "end_line": 514,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang.Entities.PrimitiveEntityMap": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.LookupEntityMap.lookupTable()",
        "snippet": "        private String[] lookupTable() {\n            if (lookupTable == null) {\n                createLookupTable();\n            }\n            return lookupTable;\n        }",
        "begin_line": 522,
        "end_line": 527,
        "comment": "\n         * <p>Returns the lookup table for this entity map. The lookup table is created if it has not been \n         * previously.</p>\n         * \n         * @return the lookup table\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.LookupEntityMap.createLookupTable()",
        "snippet": "        private void createLookupTable() {\n            lookupTable = new String[LOOKUP_TABLE_SIZE];\n            for (int i = 0; i < LOOKUP_TABLE_SIZE; ++i) {\n                lookupTable[i] = super.name(i);\n            }\n        }",
        "begin_line": 532,
        "end_line": 537,
        "comment": "\n         * <p>Creates an entity lookup table of LOOKUP_TABLE_SIZE elements, initialized with entity names.</p>\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.ArrayEntityMap.ArrayEntityMap()",
        "snippet": "        public ArrayEntityMap() {\n            names = new String[growBy];\n            values = new int[growBy];\n        }",
        "begin_line": 549,
        "end_line": 552,
        "comment": "\n         * Constructs a new instance of <code>ArrayEntityMap</code>.\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.ArrayEntityMap.ArrayEntityMap(int)",
        "snippet": "        public ArrayEntityMap(int growBy) {\n            this.growBy = growBy;\n            names = new String[growBy];\n            values = new int[growBy];\n        }",
        "begin_line": 560,
        "end_line": 564,
        "comment": "\n         * Constructs a new instance of <code>ArrayEntityMap</code>\n         * specifying the size by which the array should grow.\n         * \n         * @param growBy array will be initialized to and will grow by this amount\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.ArrayEntityMap.add(java.lang.String, int)",
        "snippet": "        public void add(String name, int value) {\n            ensureCapacity(size + 1);\n            names[size] = name;\n            values[size] = value;\n            size++;\n        }",
        "begin_line": 569,
        "end_line": 574,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang.Entities.EntityMap": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.ArrayEntityMap.ensureCapacity(int)",
        "snippet": "        protected void ensureCapacity(int capacity) {\n            if (capacity > names.length) {\n                int newSize = Math.max(capacity, size + growBy);\n                String[] newNames = new String[newSize];\n                System.arraycopy(names, 0, newNames, 0, size);\n                names = newNames;\n                int[] newValues = new int[newSize];\n                System.arraycopy(values, 0, newValues, 0, size);\n                values = newValues;\n            }\n        }",
        "begin_line": 581,
        "end_line": 591,
        "comment": "\n         * Verifies the capacity of the entity array, adjusting the size if necessary.\n         * \n         * @param capacity size the array should be\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.ArrayEntityMap.name(int)",
        "snippet": "        public String name(int value) {\n            for (int i = 0; i < size; ++i) {\n                if (values[i] == value) {\n                    return names[i];\n                }\n            }\n            return null;\n        }",
        "begin_line": 596,
        "end_line": 603,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang.Entities.EntityMap": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.ArrayEntityMap.value(java.lang.String)",
        "snippet": "        public int value(String name) {\n            for (int i = 0; i < size; ++i) {\n                if (names[i].equals(name)) {\n                    return values[i];\n                }\n            }\n            return -1;\n        }",
        "begin_line": 608,
        "end_line": 615,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang.Entities.EntityMap": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.BinaryEntityMap.BinaryEntityMap()",
        "snippet": "        public BinaryEntityMap() {\n          super();\n        }",
        "begin_line": 623,
        "end_line": 625,
        "comment": "\n         * Constructs a new instance of <code>BinaryEntityMap</code>.\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.BinaryEntityMap.BinaryEntityMap(int)",
        "snippet": "        public BinaryEntityMap(int growBy) {\n            super(growBy);\n        }",
        "begin_line": 633,
        "end_line": 635,
        "comment": "\n         * Constructs a new instance of <code>ArrayEntityMap</code>\n         * specifying the size by which the underlying array should grow.\n         * \n         * @param growBy array will be initialized to and will grow by this amount\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.BinaryEntityMap.binarySearch(int)",
        "snippet": "        private int binarySearch(int key) {\n            int low = 0;\n            int high = size - 1;\n\n            while (low <= high) {\n                int mid = (low + high) >> 1;\n                int midVal = values[mid];\n\n                if (midVal < key) {\n                    low = mid + 1;\n                } else if (midVal > key) {\n                    high = mid - 1;\n                } else {\n                    return mid; // key found\n                }\n            }\n            return -(low + 1);  // key not found.\n        }",
        "begin_line": 644,
        "end_line": 661,
        "comment": "\n         * Performs a binary search of the entity array for the specified key.\n         * This method is based on code in {@link java.util.Arrays}.\n         * \n         * @param key the key to be found\n         * @return the index of the entity array matching the specified key\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.BinaryEntityMap.add(java.lang.String, int)",
        "snippet": "        public void add(String name, int value) {\n            ensureCapacity(size + 1);\n            int insertAt = binarySearch(value);\n            if (insertAt > 0) {\n                return;    // note: this means you can't insert the same value twice\n            }\n            insertAt = -(insertAt + 1);  // binarySearch returns it negative and off-by-one\n            System.arraycopy(values, insertAt, values, insertAt + 1, size - insertAt);\n            values[insertAt] = value;\n            System.arraycopy(names, insertAt, names, insertAt + 1, size - insertAt);\n            names[insertAt] = name;\n            size++;\n        }",
        "begin_line": 666,
        "end_line": 678,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang.Entities.ArrayEntityMap": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.BinaryEntityMap.name(int)",
        "snippet": "        public String name(int value) {\n            int index = binarySearch(value);\n            if (index < 0) {\n                return null;\n            }\n            return names[index];\n        }",
        "begin_line": 683,
        "end_line": 689,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang.Entities.ArrayEntityMap": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.addEntities(java.lang.String[][])",
        "snippet": "    public void addEntities(String[][] entityArray) {\n        for (int i = 0; i < entityArray.length; ++i) {\n            addEntity(entityArray[i][0], Integer.parseInt(entityArray[i][1]));\n        }\n    }",
        "begin_line": 700,
        "end_line": 704,
        "comment": "\n     * <p>Adds entities to this entity.</p>\n     * \n     * @param entityArray array of entities to be added\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.addEntity(java.lang.String, int)",
        "snippet": "    public void addEntity(String name, int value) {\n        map.add(name, value);\n    }",
        "begin_line": 712,
        "end_line": 714,
        "comment": "\n     * <p>Add an entity to this entity.</p>\n     * \n     * @param name name of the entity\n     * @param value vale of the entity\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.entityName(int)",
        "snippet": "    public String entityName(int value) {\n        return map.name(value);\n    }",
        "begin_line": 722,
        "end_line": 724,
        "comment": "\n     * <p>Returns the name of the entity identified by the specified value.</p>\n     * \n     * @param value the value to locate\n     * @return entity name associated with the specified value\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.entityValue(java.lang.String)",
        "snippet": "    public int entityValue(String name) {\n        return map.value(name);\n    }",
        "begin_line": 732,
        "end_line": 734,
        "comment": "\n     * <p>Returns the value of the entity identified by the specified name.</p>\n     * \n     * @param name the name to locate\n     * @return entity value associated with the specified name\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.escape(java.lang.String)",
        "snippet": "    public String escape(String str) {\n        //todo: rewrite to use a Writer\n        StringBuffer buf = new StringBuffer(str.length() * 2);\n        int i;\n        for (i = 0; i < str.length(); ++i) {\n            char ch = str.charAt(i);\n            String entityName = this.entityName(ch);\n            if (entityName == null) {\n                if (ch > 0x7F) {\n                    int intValue = ch;\n                    buf.append(\"&#\");\n                    buf.append(intValue);\n                    buf.append(';');\n                } else {\n                    buf.append(ch);\n                }\n            } else {\n                buf.append('&');\n                buf.append(entityName);\n                buf.append(';');\n            }\n        }\n        return buf.toString();\n    }",
        "begin_line": 745,
        "end_line": 768,
        "comment": "\n     * <p>Escapes the characters in a <code>String</code>.</p>\n     *\n     * <p>For example, if you have called addEntity(&quot;foo&quot;, 0xA1),\n     * escape(&quot;\\u00A1&quot;) will return &quot;&amp;foo;&quot;</p>\n     *\n     * @param str The <code>String</code> to escape.\n     * @return A new escaped <code>String</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.escape(java.io.Writer, java.lang.String)",
        "snippet": "    public void escape(Writer writer, String str) throws IOException {\n        int len = str.length();\n        for (int i = 0; i < len; i++) {\n            char c = str.charAt(i);\n            String entityName = this.entityName(c);\n            if (entityName == null) {\n                if (c > 0x7F) {\n                    writer.write(\"&#\");\n                    writer.write(Integer.toString(c, 10));\n                    writer.write(';');\n                } else {\n                    writer.write(c);\n                }\n            } else {\n                writer.write('&');\n                writer.write(entityName);\n                writer.write(';');\n            }\n        }\n    }",
        "begin_line": 783,
        "end_line": 802,
        "comment": "\n     * <p>Escapes the characters in the <code>String</code> passed and writes the result\n     * to the <code>Writer</code> passed. </p>\n     * \n     * @param writer The <code>Writer</code> to write the results of the escaping to.\n     *                            Assumed to be a non-null value.\n     * @param str The <code>String</code> to escape. Assumed to be a non-null value.\n     * @throws IOException when <code>Writer</code> passed throws the exception from\n     *                                       calls to the {@link Writer#write(int)} methods.\n     *                                       \n     * @see #escape(String)\n     * @see Writer\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.unescape(java.lang.String)",
        "snippet": "    public String unescape(String str) {\n        int firstAmp = str.indexOf('&');\n        if (firstAmp < 0) {\n            return str;\n        }\n\n        StringBuffer buf = new StringBuffer(str.length());\n        buf.append(str.substring(0, firstAmp));\n        for (int i = firstAmp; i < str.length(); ++i) {\n            char ch = str.charAt(i);\n            if (ch == '&') {\n                int semi = str.indexOf(';', i + 1);\n                if (semi == -1) {\n                    buf.append(ch);\n                    continue;\n                }\n                int amph = str.indexOf('&', i + 1);\n                if( amph != -1 && amph < semi ) {\n                    // Then the text looks like &...&...;\n                    buf.append(ch);\n                    continue;\n                }\n                String entityName = str.substring(i + 1, semi);\n                int entityValue;\n                if (entityName.length() == 0) {\n                    entityValue = -1;\n                } else if (entityName.charAt(0) == '#') {\n                    if (entityName.length() == 1) {\n                        entityValue = -1;\n                    } else {\n                        char charAt1 = entityName.charAt(1);\n                        try {\n                            if (charAt1 == 'x' || charAt1=='X') {\n                                entityValue = Integer.valueOf(entityName.substring(2), 16).intValue();\n                            } else {\n                                entityValue = Integer.parseInt(entityName.substring(1));\n                            }\n                            if (entityValue > 0xFFFF) {\n                                entityValue = -1;\n                            }\n                        } catch (NumberFormatException ex) {\n                            entityValue = -1;\n                        }\n                    }\n                } else {\n                    entityValue = this.entityValue(entityName);\n                }\n                if (entityValue == -1) {\n                    buf.append('&');\n                    buf.append(entityName);\n                    buf.append(';');\n                } else {\n                    buf.append((char) (entityValue));\n                }\n                i = semi;\n            } else {\n                buf.append(ch);\n            }\n        }\n        return buf.toString();\n    }",
        "begin_line": 813,
        "end_line": 873,
        "comment": "\n     * <p>Unescapes the entities in a <code>String</code>.</p>\n     *\n     * <p>For example, if you have called addEntity(&quot;foo&quot;, 0xA1),\n     * unescape(&quot;&amp;foo;&quot;) will return &quot;\\u00A1&quot;</p>\n     *\n     * @param str The <code>String</code> to escape.\n     * @return A new escaped <code>String</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.unescape(java.io.Writer, java.lang.String)",
        "snippet": "    public void unescape(Writer writer, String string) throws IOException {\n        int firstAmp = string.indexOf('&');\n        if (firstAmp < 0) {\n            writer.write(string);\n            return;\n        }\n\n        writer.write(string, 0, firstAmp);\n        int len = string.length();\n        for (int i = firstAmp; i < len; i++) {\n            char c = string.charAt(i);\n            if (c == '&') {\n                int nextIdx = i+1;\n                int semiColonIdx = string.indexOf(';', nextIdx);\n                if (semiColonIdx == -1) {\n                    writer.write(c);\n                    continue;\n                }\n                int amphersandIdx = string.indexOf('&', i + 1);\n                if( amphersandIdx != -1 && amphersandIdx < semiColonIdx ) {\n                    // Then the text looks like &...&...;\n                    writer.write(c);\n                    continue;\n                }\n                String entityContent = string.substring(nextIdx, semiColonIdx);\n                int entityValue = -1;\n                int entityContentLen = entityContent.length();\n                if (entityContentLen > 0) {\n                    if (entityContent.charAt(0) == '#') { //escaped value content is an integer (decimal or hexidecimal)\n                        if (entityContentLen > 1) {  \n                            char isHexChar = entityContent.charAt(1);\n                            try {\n                                switch (isHexChar) {\n                                    case 'X' :\n                                    case 'x' : {\n                                        entityValue = Integer.parseInt(entityContent.substring(2), 16);\n                                        break;\n                                    }\n                                    default : {\n                                        entityValue = Integer.parseInt(entityContent.substring(1), 10);\n                                    }\n                                }\n                                if (entityValue > 0xFFFF) {\n                                    entityValue = -1;\n                                }\n                            } catch (NumberFormatException e) {\n                                entityValue = -1;\n                            }\n                        }\n                    } else { //escaped value content is an entity name\n                        entityValue = this.entityValue(entityContent);\n                    }\n                }\n                \n                if (entityValue == -1) {\n                    writer.write('&');\n                    writer.write(entityContent);\n                    writer.write(';');\n                } else {\n                    writer.write(entityValue);\n                }\n                i = semiColonIdx; //move index up to the semi-colon                \n            } else {\n                writer.write(c);\n            }\n        }\n    }",
        "begin_line": 887,
        "end_line": 953,
        "comment": "\n     * <p>Unescapes the escaped entities in the <code>String</code> passed and\n     * writes the result to the <code>Writer</code> passed.</p>\n     * \n     * @param writer The <code>Writer</code> to write the results to; assumed to be non-null.\n     * @param string The <code>String</code> to write the results to; assumed to be non-null.\n     * @throws IOException when <code>Writer</code> passed throws the exception from\n     *                                       calls to the {@link Writer#write(int)} methods.\n     *                                       \n     * @see #escape(String)\n     * @see Writer\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BitField.java",
        "class_name": "org.apache.commons.lang.BitField",
        "signature": "org.apache.commons.lang.BitField.BitField(int)",
        "snippet": "    public BitField(int mask) {\n        _mask = mask;\n        int count = 0;\n        int bit_pattern = mask;\n\n        if (bit_pattern != 0) {\n            while ((bit_pattern & 1) == 0) {\n                count++;\n                bit_pattern >>= 1;\n            }\n        }\n        _shift_count = count;\n    }",
        "begin_line": 44,
        "end_line": 56,
        "comment": "\n     * <p>Creates a BitField instance.</p>\n     *\n     * @param mask the mask specifying which bits apply to this\n     *  BitField. Bits that are set in this mask are the bits\n     *  that this BitField operates on\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BitField.java",
        "class_name": "org.apache.commons.lang.BitField",
        "signature": "org.apache.commons.lang.BitField.getValue(int)",
        "snippet": "    public int getValue(int holder) {\n        return getRawValue(holder) >> _shift_count;\n    }",
        "begin_line": 72,
        "end_line": 74,
        "comment": "\n     * <p>Obtains the value for the specified BitField, appropriately\n     * shifted right.</p>\n     *\n     * <p>Many users of a BitField will want to treat the specified\n     * bits as an int value, and will not want to be aware that the\n     * value is stored as a BitField (and so shifted left so many\n     * bits).</p>\n     *\n     * @see #setValue(int,int)\n     * @param holder the int data containing the bits we're interested\n     *  in\n     * @return the selected bits, shifted right appropriately\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BitField.java",
        "class_name": "org.apache.commons.lang.BitField",
        "signature": "org.apache.commons.lang.BitField.getShortValue(short)",
        "snippet": "    public short getShortValue(short holder) {\n        return (short) getValue(holder);\n    }",
        "begin_line": 90,
        "end_line": 92,
        "comment": "\n     * <p>Obtains the value for the specified BitField, appropriately\n     * shifted right, as a short.</p>\n     *\n     * <p>Many users of a BitField will want to treat the specified\n     * bits as an int value, and will not want to be aware that the\n     * value is stored as a BitField (and so shifted left so many\n     * bits).</p>\n     *\n     * @see #setShortValue(short,short)\n     * @param holder the short data containing the bits we're\n     *  interested in\n     * @return the selected bits, shifted right appropriately\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BitField.java",
        "class_name": "org.apache.commons.lang.BitField",
        "signature": "org.apache.commons.lang.BitField.getRawValue(int)",
        "snippet": "    public int getRawValue(int holder) {\n        return holder & _mask;\n    }",
        "begin_line": 101,
        "end_line": 103,
        "comment": "\n     * <p>Obtains the value for the specified BitField, unshifted.</p>\n     *\n     * @param holder the int data containing the bits we're\n     *  interested in\n     * @return the selected bits\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BitField.java",
        "class_name": "org.apache.commons.lang.BitField",
        "signature": "org.apache.commons.lang.BitField.getShortRawValue(short)",
        "snippet": "    public short getShortRawValue(short holder) {\n        return (short) getRawValue(holder);\n    }",
        "begin_line": 112,
        "end_line": 114,
        "comment": "\n     * <p>Obtains the value for the specified BitField, unshifted.</p>\n     *\n     * @param holder the short data containing the bits we're\n     *  interested in\n     * @return the selected bits\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BitField.java",
        "class_name": "org.apache.commons.lang.BitField",
        "signature": "org.apache.commons.lang.BitField.isSet(int)",
        "snippet": "    public boolean isSet(int holder) {\n        return (holder & _mask) != 0;\n    }",
        "begin_line": 129,
        "end_line": 131,
        "comment": "\n     * <p>Returns whether the field is set or not.</p>\n     *\n     * <p>This is most commonly used for a single-bit field, which is\n     * often used to represent a boolean value; the results of using\n     * it for a multi-bit field is to determine whether *any* of its\n     * bits are set.</p>\n     *\n     * @param holder the int data containing the bits we're interested\n     *  in\n     * @return <code>true</code> if any of the bits are set,\n     *  else <code>false</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BitField.java",
        "class_name": "org.apache.commons.lang.BitField",
        "signature": "org.apache.commons.lang.BitField.isAllSet(int)",
        "snippet": "    public boolean isAllSet(int holder) {\n        return (holder & _mask) == _mask;\n    }",
        "begin_line": 145,
        "end_line": 147,
        "comment": "\n     * <p>Returns whether all of the bits are set or not.</p>\n     *\n     * <p>This is a stricter test than {@link #isSet(int)},\n     * in that all of the bits in a multi-bit set must be set\n     * for this method to return <code>true</code>.</p>\n     *\n     * @param holder the int data containing the bits we're\n     *  interested in\n     * @return <code>true</code> if all of the bits are set,\n     *  else <code>false</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BitField.java",
        "class_name": "org.apache.commons.lang.BitField",
        "signature": "org.apache.commons.lang.BitField.setValue(int, int)",
        "snippet": "    public int setValue(int holder, int value) {\n        return (holder & ~_mask) | ((value << _shift_count) & _mask);\n    }",
        "begin_line": 159,
        "end_line": 161,
        "comment": "\n     * <p>Replaces the bits with new values.</p>\n     *\n     * @see #getValue(int)\n     * @param holder the int data containing the bits we're\n     *  interested in\n     * @param value the new value for the specified bits\n     * @return the value of holder with the bits from the value\n     *  parameter replacing the old bits\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BitField.java",
        "class_name": "org.apache.commons.lang.BitField",
        "signature": "org.apache.commons.lang.BitField.setShortValue(short, short)",
        "snippet": "    public short setShortValue(short holder, short value) {\n        return (short) setValue(holder, value);\n    }",
        "begin_line": 173,
        "end_line": 175,
        "comment": "\n     * <p>Replaces the bits with new values.</p>\n     *\n     * @see #getShortValue(short)\n     * @param holder the short data containing the bits we're\n     *  interested in\n     * @param value the new value for the specified bits\n     * @return the value of holder with the bits from the value\n     *  parameter replacing the old bits\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BitField.java",
        "class_name": "org.apache.commons.lang.BitField",
        "signature": "org.apache.commons.lang.BitField.clear(int)",
        "snippet": "    public int clear(int holder) {\n        return holder & ~_mask;\n    }",
        "begin_line": 185,
        "end_line": 187,
        "comment": "\n     * <p>Clears the bits.</p>\n     *\n     * @param holder the int data containing the bits we're\n     *  interested in\n     * @return the value of holder with the specified bits cleared\n     *  (set to <code>0</code>)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BitField.java",
        "class_name": "org.apache.commons.lang.BitField",
        "signature": "org.apache.commons.lang.BitField.clearShort(short)",
        "snippet": "    public short clearShort(short holder) {\n        return (short) clear(holder);\n    }",
        "begin_line": 197,
        "end_line": 199,
        "comment": "\n     * <p>Clears the bits.</p>\n     *\n     * @param holder the short data containing the bits we're\n     *  interested in\n     * @return the value of holder with the specified bits cleared\n     *  (set to <code>0</code>)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BitField.java",
        "class_name": "org.apache.commons.lang.BitField",
        "signature": "org.apache.commons.lang.BitField.clearByte(byte)",
        "snippet": "    public byte clearByte(byte holder) {\n        return (byte) clear(holder);\n    }",
        "begin_line": 210,
        "end_line": 212,
        "comment": "\n     * <p>Clears the bits.</p>\n     *\n     * @param holder the byte data containing the bits we're\n     *  interested in\n     *\n     * @return the value of holder with the specified bits cleared\n     *  (set to <code>0</code>)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BitField.java",
        "class_name": "org.apache.commons.lang.BitField",
        "signature": "org.apache.commons.lang.BitField.set(int)",
        "snippet": "    public int set(int holder) {\n        return holder | _mask;\n    }",
        "begin_line": 222,
        "end_line": 224,
        "comment": "\n     * <p>Sets the bits.</p>\n     *\n     * @param holder the int data containing the bits we're\n     *  interested in\n     * @return the value of holder with the specified bits set\n     *  to <code>1</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BitField.java",
        "class_name": "org.apache.commons.lang.BitField",
        "signature": "org.apache.commons.lang.BitField.setShort(short)",
        "snippet": "    public short setShort(short holder) {\n        return (short) set(holder);\n    }",
        "begin_line": 234,
        "end_line": 236,
        "comment": "\n     * <p>Sets the bits.</p>\n     *\n     * @param holder the short data containing the bits we're\n     *  interested in\n     * @return the value of holder with the specified bits set\n     *  to <code>1</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BitField.java",
        "class_name": "org.apache.commons.lang.BitField",
        "signature": "org.apache.commons.lang.BitField.setByte(byte)",
        "snippet": "    public byte setByte(byte holder) {\n        return (byte) set(holder);\n    }",
        "begin_line": 247,
        "end_line": 249,
        "comment": "\n     * <p>Sets the bits.</p>\n     *\n     * @param holder the byte data containing the bits we're\n     *  interested in\n     *\n     * @return the value of holder with the specified bits set\n     *  to <code>1</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BitField.java",
        "class_name": "org.apache.commons.lang.BitField",
        "signature": "org.apache.commons.lang.BitField.setBoolean(int, boolean)",
        "snippet": "    public int setBoolean(int holder, boolean flag) {\n        return flag ? set(holder) : clear(holder);\n    }",
        "begin_line": 260,
        "end_line": 262,
        "comment": "\n     * <p>Sets a boolean BitField.</p>\n     *\n     * @param holder the int data containing the bits we're\n     *  interested in\n     * @param flag indicating whether to set or clear the bits\n     * @return the value of holder with the specified bits set or\n     *         cleared\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BitField.java",
        "class_name": "org.apache.commons.lang.BitField",
        "signature": "org.apache.commons.lang.BitField.setShortBoolean(short, boolean)",
        "snippet": "    public short setShortBoolean(short holder, boolean flag) {\n        return flag ? setShort(holder) : clearShort(holder);\n    }",
        "begin_line": 273,
        "end_line": 275,
        "comment": "\n     * <p>Sets a boolean BitField.</p>\n     *\n     * @param holder the short data containing the bits we're\n     *  interested in\n     * @param flag indicating whether to set or clear the bits\n     * @return the value of holder with the specified bits set or\n     *  cleared\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BitField.java",
        "class_name": "org.apache.commons.lang.BitField",
        "signature": "org.apache.commons.lang.BitField.setByteBoolean(byte, boolean)",
        "snippet": "    public byte setByteBoolean(byte holder, boolean flag) {\n        return flag ? setByte(holder) : clearByte(holder);\n    }",
        "begin_line": 286,
        "end_line": 288,
        "comment": "\n     * <p>Sets a boolean BitField.</p>\n     *\n     * @param holder the byte data containing the bits we're\n     *  interested in\n     * @param flag indicating whether to set or clear the bits\n     * @return the value of holder with the specified bits set or\n     *  cleared\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/RandomStringUtils.java",
        "class_name": "org.apache.commons.lang.RandomStringUtils",
        "signature": "org.apache.commons.lang.RandomStringUtils.RandomStringUtils()",
        "snippet": "    public RandomStringUtils() {\n      super();\n    }",
        "begin_line": 55,
        "end_line": 57,
        "comment": "\n     * <p><code>RandomStringUtils</code> instances should NOT be constructed in\n     * standard programming. Instead, the class should be used as\n     * <code>RandomStringUtils.random(5);</code>.</p>\n     *\n     * <p>This constructor is public to permit tools that require a JavaBean instance\n     * to operate.</p>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/RandomStringUtils.java",
        "class_name": "org.apache.commons.lang.RandomStringUtils",
        "signature": "org.apache.commons.lang.RandomStringUtils.random(int)",
        "snippet": "    public static String random(int count) {\n        return random(count, false, false);\n    }",
        "begin_line": 70,
        "end_line": 72,
        "comment": "\n     * <p>Creates a random string whose length is the number of characters\n     * specified.</p>\n     *\n     * <p>Characters will be chosen from the set of all characters.</p>\n     *\n     * @param count  the length of random string to create\n     * @return the random string\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/RandomStringUtils.java",
        "class_name": "org.apache.commons.lang.RandomStringUtils",
        "signature": "org.apache.commons.lang.RandomStringUtils.randomAscii(int)",
        "snippet": "    public static String randomAscii(int count) {\n        return random(count, 32, 127, false, false);\n    }",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\n     * <p>Creates a random string whose length is the number of characters\n     * specified.</p>\n     *\n     * <p>Characters will be chosen from the set of characters whose\n     * ASCII value is between <code>32</code> and <code>126</code> (inclusive).</p>\n     *\n     * @param count  the length of random string to create\n     * @return the random string\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/RandomStringUtils.java",
        "class_name": "org.apache.commons.lang.RandomStringUtils",
        "signature": "org.apache.commons.lang.RandomStringUtils.randomAlphabetic(int)",
        "snippet": "    public static String randomAlphabetic(int count) {\n        return random(count, true, false);\n    }",
        "begin_line": 98,
        "end_line": 100,
        "comment": "\n     * <p>Creates a random string whose length is the number of characters\n     * specified.</p>\n     *\n     * <p>Characters will be chosen from the set of alphabetic\n     * characters.</p>\n     *\n     * @param count  the length of random string to create\n     * @return the random string\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/RandomStringUtils.java",
        "class_name": "org.apache.commons.lang.RandomStringUtils",
        "signature": "org.apache.commons.lang.RandomStringUtils.randomAlphanumeric(int)",
        "snippet": "    public static String randomAlphanumeric(int count) {\n        return random(count, true, true);\n    }",
        "begin_line": 112,
        "end_line": 114,
        "comment": "\n     * <p>Creates a random string whose length is the number of characters\n     * specified.</p>\n     *\n     * <p>Characters will be chosen from the set of alpha-numeric\n     * characters.</p>\n     *\n     * @param count  the length of random string to create\n     * @return the random string\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/RandomStringUtils.java",
        "class_name": "org.apache.commons.lang.RandomStringUtils",
        "signature": "org.apache.commons.lang.RandomStringUtils.randomNumeric(int)",
        "snippet": "    public static String randomNumeric(int count) {\n        return random(count, false, true);\n    }",
        "begin_line": 126,
        "end_line": 128,
        "comment": "\n     * <p>Creates a random string whose length is the number of characters\n     * specified.</p>\n     *\n     * <p>Characters will be chosen from the set of numeric\n     * characters.</p>\n     *\n     * @param count  the length of random string to create\n     * @return the random string\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/RandomStringUtils.java",
        "class_name": "org.apache.commons.lang.RandomStringUtils",
        "signature": "org.apache.commons.lang.RandomStringUtils.random(int, boolean, boolean)",
        "snippet": "    public static String random(int count, boolean letters, boolean numbers) {\n        return random(count, 0, 0, letters, numbers);\n    }",
        "begin_line": 144,
        "end_line": 146,
        "comment": "\n     * <p>Creates a random string whose length is the number of characters\n     * specified.</p>\n     *\n     * <p>Characters will be chosen from the set of alpha-numeric\n     * characters as indicated by the arguments.</p>\n     *\n     * @param count  the length of random string to create\n     * @param letters  if <code>true</code>, generated string will include\n     *  alphabetic characters\n     * @param numbers  if <code>true</code>, generated string will include\n     *  numeric characters\n     * @return the random string\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/RandomStringUtils.java",
        "class_name": "org.apache.commons.lang.RandomStringUtils",
        "signature": "org.apache.commons.lang.RandomStringUtils.random(int, int, int, boolean, boolean)",
        "snippet": "    public static String random(int count, int start, int end, boolean letters, boolean numbers) {\n        return random(count, start, end, letters, numbers, null, RANDOM);\n    }",
        "begin_line": 164,
        "end_line": 166,
        "comment": "\n     * <p>Creates a random string whose length is the number of characters\n     * specified.</p>\n     *\n     * <p>Characters will be chosen from the set of alpha-numeric\n     * characters as indicated by the arguments.</p>\n     *\n     * @param count  the length of random string to create\n     * @param start  the position in set of chars to start at\n     * @param end  the position in set of chars to end before\n     * @param letters  if <code>true</code>, generated string will include\n     *  alphabetic characters\n     * @param numbers  if <code>true</code>, generated string will include\n     *  numeric characters\n     * @return the random string\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/RandomStringUtils.java",
        "class_name": "org.apache.commons.lang.RandomStringUtils",
        "signature": "org.apache.commons.lang.RandomStringUtils.random(int, int, int, boolean, boolean, char[])",
        "snippet": "    public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars) {\n        return random(count, start, end, letters, numbers, chars, RANDOM);\n    }",
        "begin_line": 188,
        "end_line": 190,
        "comment": "\n     * <p>Creates a random string based on a variety of options, using\n     * default source of randomness.</p>\n     *\n     * <p>This method has exactly the same semantics as\n     * {@link #random(int,int,int,boolean,boolean,char[],Random)}, but\n     * instead of using an externally supplied source of randomness, it uses\n     * the internal static {@link Random} instance.</p>\n     *\n     * @param count  the length of random string to create\n     * @param start  the position in set of chars to start at\n     * @param end  the position in set of chars to end before\n     * @param letters  only allow letters?\n     * @param numbers  only allow numbers?\n     * @param chars  the set of chars to choose randoms from.\n     *  If <code>null</code>, then it will use the set of all chars.\n     * @return the random string\n     * @throws ArrayIndexOutOfBoundsException if there are not\n     *  <code>(end - start) + 1</code> characters in the set array.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/RandomStringUtils.java",
        "class_name": "org.apache.commons.lang.RandomStringUtils",
        "signature": "org.apache.commons.lang.RandomStringUtils.random(int, int, int, boolean, boolean, char[], java.util.Random)",
        "snippet": "    public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                char[] chars, Random random) {\n        if (count == 0) {\n            return \"\";\n        } else if (count < 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n        if ((start == 0) && (end == 0)) {\n            end = 'z' + 1;\n            start = ' ';\n            if (!letters && !numbers) {\n                start = 0;\n                end = Integer.MAX_VALUE;\n            }\n        }\n\n        char[] buffer = new char[count];\n        int gap = end - start;\n\n        while (count-- != 0) {\n            char ch;\n            if (chars == null) {\n                ch = (char) (random.nextInt(gap) + start);\n            } else {\n                ch = chars[random.nextInt(gap) + start];\n            }\n            if ((letters && Character.isLetter(ch))\n                || (numbers && Character.isDigit(ch))\n                || (!letters && !numbers)) \n            {\n                if(ch >= 56320 && ch <= 57343) {\n                    if(count == 0) {\n                        count++;\n                    } else {\n                        // low surrogate, insert high surrogate after putting it in\n                        buffer[count] = ch;\n                        count--;\n                        buffer[count] = (char) (55296 + random.nextInt(128));\n                    }\n                } else if(ch >= 55296 && ch <= 56191) {\n                    if(count == 0) {\n                        count++;\n                    } else {\n                        // high surrogate, insert low surrogate before putting it in\n                        buffer[count] = (char) (56320 + random.nextInt(128));\n                        count--;\n                        buffer[count] = ch;\n                    }\n                } else if(ch >= 56192 && ch <= 56319) {\n                    // private high surrogate, no effing clue, so skip it\n                    count++;\n                } else {\n                    buffer[count] = ch;\n                }\n            } else {\n                count++;\n            }\n        }\n        return new String(buffer);\n    }",
        "begin_line": 225,
        "end_line": 284,
        "comment": "\n     * <p>Creates a random string based on a variety of options, using\n     * supplied source of randomness.</p>\n     *\n     * <p>If start and end are both <code>0</code>, start and end are set\n     * to <code>' '</code> and <code>'z'</code>, the ASCII printable\n     * characters, will be used, unless letters and numbers are both\n     * <code>false</code>, in which case, start and end are set to\n     * <code>0</code> and <code>Integer.MAX_VALUE</code>.\n     *\n     * <p>If set is not <code>null</code>, characters between start and\n     * end are chosen.</p>\n     *\n     * <p>This method accepts a user-supplied {@link Random}\n     * instance to use as a source of randomness. By seeding a single \n     * {@link Random} instance with a fixed seed and using it for each call,\n     * the same random sequence of strings can be generated repeatedly\n     * and predictably.</p>\n     *\n     * @param count  the length of random string to create\n     * @param start  the position in set of chars to start at\n     * @param end  the position in set of chars to end before\n     * @param letters  only allow letters?\n     * @param numbers  only allow numbers?\n     * @param chars  the set of chars to choose randoms from.\n     *  If <code>null</code>, then it will use the set of all chars.\n     * @param random  a source of randomness.\n     * @return the random string\n     * @throws ArrayIndexOutOfBoundsException if there are not\n     *  <code>(end - start) + 1</code> characters in the set array.\n     * @throws IllegalArgumentException if <code>count</code> &lt; 0.\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/RandomStringUtils.java",
        "class_name": "org.apache.commons.lang.RandomStringUtils",
        "signature": "org.apache.commons.lang.RandomStringUtils.random(int, java.lang.String)",
        "snippet": "    public static String random(int count, String chars) {\n        if (chars == null) {\n            return random(count, 0, 0, false, false, null, RANDOM);\n        }\n        return random(count, chars.toCharArray());\n    }",
        "begin_line": 299,
        "end_line": 304,
        "comment": "\n     * <p>Creates a random string whose length is the number of characters\n     * specified.</p>\n     *\n     * <p>Characters will be chosen from the set of characters\n     * specified.</p>\n     *\n     * @param count  the length of random string to create\n     * @param chars  the String containing the set of characters to use,\n     *  may be null\n     * @return the random string\n     * @throws IllegalArgumentException if <code>count</code> &lt; 0.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/RandomStringUtils.java",
        "class_name": "org.apache.commons.lang.RandomStringUtils",
        "signature": "org.apache.commons.lang.RandomStringUtils.random(int, char[])",
        "snippet": "    public static String random(int count, char[] chars) {\n        if (chars == null) {\n            return random(count, 0, 0, false, false, null, RANDOM);\n        }\n        return random(count, 0, chars.length, false, false, chars, RANDOM);\n    }",
        "begin_line": 318,
        "end_line": 323,
        "comment": "\n     * <p>Creates a random string whose length is the number of characters\n     * specified.</p>\n     *\n     * <p>Characters will be chosen from the set of characters specified.</p>\n     *\n     * @param count  the length of random string to create\n     * @param chars  the character array containing the set of characters to use,\n     *  may be null\n     * @return the random string\n     * @throws IllegalArgumentException if <code>count</code> &lt; 0.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharSetUtils.java",
        "class_name": "org.apache.commons.lang.CharSetUtils",
        "signature": "org.apache.commons.lang.CharSetUtils.CharSetUtils()",
        "snippet": "    public CharSetUtils() {\n      super();\n    }",
        "begin_line": 42,
        "end_line": 44,
        "comment": "\n     * <p>CharSetUtils instances should NOT be constructed in standard programming.\n     * Instead, the class should be used as <code>CharSetUtils.evaluateSet(null);</code>.</p>\n     *\n     * <p>This constructor is public to permit tools that require a JavaBean instance\n     * to operate.</p>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharSetUtils.java",
        "class_name": "org.apache.commons.lang.CharSetUtils",
        "signature": "org.apache.commons.lang.CharSetUtils.evaluateSet(java.lang.String[])",
        "snippet": "    public static CharSet evaluateSet(String[] set) {\n        if (set == null) {\n            return null;\n        }\n        return new CharSet(set); \n    }",
        "begin_line": 69,
        "end_line": 74,
        "comment": "\n     * <p>Creates a <code>CharSet</code> instance which allows a certain amount of\n     * set logic to be performed.</p>\n     * <p>The syntax is:</p>\n     * <ul>\n     *  <li>&quot;aeio&quot; which implies 'a','e',..</li>\n     *  <li>&quot;^e&quot; implies not e.</li>\n     *  <li>&quot;ej-m&quot; implies e,j-&gt;m. e,j,k,l,m.</li>\n     * </ul>\n     * \n     * <pre>\n     * CharSetUtils.evaluateSet(null)    = null\n     * CharSetUtils.evaluateSet([])      = CharSet matching nothing\n     * CharSetUtils.evaluateSet([\"a-e\"]) = CharSet matching a,b,c,d,e\n     * </pre>\n     *\n     * @param set  the set, may be null\n     * @return a CharSet instance, <code>null</code> if null input\n     * @deprecated Use {@link CharSet#getInstance(String)}.\n     *             Method will be removed in Commons Lang 3.0.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharSetUtils.java",
        "class_name": "org.apache.commons.lang.CharSetUtils",
        "signature": "org.apache.commons.lang.CharSetUtils.squeeze(java.lang.String, java.lang.String)",
        "snippet": "    public static String squeeze(String str, String set) {\n        if (StringUtils.isEmpty(str) || StringUtils.isEmpty(set)) {\n            return str;\n        }\n        String[] strs = new String[1];\n        strs[0] = set;\n        return squeeze(str, strs);\n    }",
        "begin_line": 96,
        "end_line": 103,
        "comment": "\n     * <p>Squeezes any repetitions of a character that is mentioned in the\n     * supplied set.</p>\n     *\n     * <pre>\n     * CharSetUtils.squeeze(null, *)        = null\n     * CharSetUtils.squeeze(\"\", *)          = \"\"\n     * CharSetUtils.squeeze(*, null)        = *\n     * CharSetUtils.squeeze(*, \"\")          = *\n     * CharSetUtils.squeeze(\"hello\", \"k-p\") = \"helo\"\n     * CharSetUtils.squeeze(\"hello\", \"a-e\") = \"hello\"\n     * </pre>\n     *\n     * @see #evaluateSet(java.lang.String[]) for set-syntax.\n     * @param str  the string to squeeze, may be null\n     * @param set  the character set to use for manipulation, may be null\n     * @return modified String, <code>null</code> if null string input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharSetUtils.java",
        "class_name": "org.apache.commons.lang.CharSetUtils",
        "signature": "org.apache.commons.lang.CharSetUtils.squeeze(java.lang.String, java.lang.String[])",
        "snippet": "    public static String squeeze(String str, String[] set) {\n        if (StringUtils.isEmpty(str) || ArrayUtils.isEmpty(set)) {\n            return str;\n        }\n        CharSet chars = evaluateSet(set);\n        StringBuffer buffer = new StringBuffer(str.length());\n        char[] chrs = str.toCharArray();\n        int sz = chrs.length;\n        char lastChar = ' ';\n        char ch = ' ';\n        for (int i = 0; i < sz; i++) {\n            ch = chrs[i];\n            if (chars.contains(ch)) {\n                if ((ch == lastChar) && (i != 0)) {\n                    continue;\n                }\n            }\n            buffer.append(ch);\n            lastChar = ch;\n        }\n        return buffer.toString();\n    }",
        "begin_line": 119,
        "end_line": 140,
        "comment": "\n     * <p>Squeezes any repetitions of a character that is mentioned in the\n     * supplied set.</p>\n     *\n     * <p>An example is:</p>\n     * <ul>\n     *   <li>squeeze(&quot;hello&quot;, {&quot;el&quot;}) => &quot;helo&quot;</li>\n     * </ul>\n     * \n     * @see #evaluateSet(java.lang.String[]) for set-syntax.\n     * @param str  the string to squeeze, may be null\n     * @param set  the character set to use for manipulation, may be null\n     * @return modified String, <code>null</code> if null string input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharSetUtils.java",
        "class_name": "org.apache.commons.lang.CharSetUtils",
        "signature": "org.apache.commons.lang.CharSetUtils.count(java.lang.String, java.lang.String)",
        "snippet": "    public static int count(String str, String set) {\n        if (StringUtils.isEmpty(str) || StringUtils.isEmpty(set)) {\n            return 0;\n        }\n        String[] strs = new String[1];\n        strs[0] = set;\n        return count(str, strs);\n    }",
        "begin_line": 162,
        "end_line": 169,
        "comment": "\n     * <p>Takes an argument in set-syntax, see evaluateSet,\n     * and returns the number of characters present in the specified string.</p>\n     *\n     * <pre>\n     * CharSetUtils.count(null, *)        = 0\n     * CharSetUtils.count(\"\", *)          = 0\n     * CharSetUtils.count(*, null)        = 0\n     * CharSetUtils.count(*, \"\")          = 0\n     * CharSetUtils.count(\"hello\", \"k-p\") = 3\n     * CharSetUtils.count(\"hello\", \"a-e\") = 1\n     * </pre>\n     *\n     * @see #evaluateSet(java.lang.String[]) for set-syntax.\n     * @param str  String to count characters in, may be null\n     * @param set  String set of characters to count, may be null\n     * @return character count, zero if null string input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharSetUtils.java",
        "class_name": "org.apache.commons.lang.CharSetUtils",
        "signature": "org.apache.commons.lang.CharSetUtils.count(java.lang.String, java.lang.String[])",
        "snippet": "    public static int count(String str, String[] set) {\n        if (StringUtils.isEmpty(str) || ArrayUtils.isEmpty(set)) {\n            return 0;\n        }\n        CharSet chars = evaluateSet(set);\n        int count = 0;\n        char[] chrs = str.toCharArray();\n        int sz = chrs.length;\n        for(int i=0; i<sz; i++) {\n            if(chars.contains(chrs[i])) {\n                count++;\n            }\n        }\n        return count;\n    }",
        "begin_line": 185,
        "end_line": 199,
        "comment": "\n     * <p>Takes an argument in set-syntax, see evaluateSet,\n     * and returns the number of characters present in the specified string.</p>\n     *\n     * <p>An example would be:</p>\n     * <ul>\n     *  <li>count(&quot;hello&quot;, {&quot;c-f&quot;, &quot;o&quot;}) returns 2.</li>\n     * </ul>\n     *\n     * @see #evaluateSet(java.lang.String[]) for set-syntax.\n     * @param str  String to count characters in, may be null\n     * @param set  String[] set of characters to count, may be null\n     * @return character count, zero if null string input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharSetUtils.java",
        "class_name": "org.apache.commons.lang.CharSetUtils",
        "signature": "org.apache.commons.lang.CharSetUtils.keep(java.lang.String, java.lang.String)",
        "snippet": "    public static String keep(String str, String set) {\n        if (str == null) {\n            return null;\n        }\n        if (str.length() == 0 || StringUtils.isEmpty(set)) {\n            return \"\";\n        }\n        String[] strs = new String[1];\n        strs[0] = set;\n        return keep(str, strs);\n    }",
        "begin_line": 222,
        "end_line": 232,
        "comment": "\n     * <p>Takes an argument in set-syntax, see evaluateSet,\n     * and keeps any of characters present in the specified string.</p>\n     *\n     * <pre>\n     * CharSetUtils.keep(null, *)        = null\n     * CharSetUtils.keep(\"\", *)          = \"\"\n     * CharSetUtils.keep(*, null)        = \"\"\n     * CharSetUtils.keep(*, \"\")          = \"\"\n     * CharSetUtils.keep(\"hello\", \"hl\")  = \"hll\"\n     * CharSetUtils.keep(\"hello\", \"le\")  = \"ell\"\n     * </pre>\n     *\n     * @see #evaluateSet(java.lang.String[]) for set-syntax.\n     * @param str  String to keep characters from, may be null\n     * @param set  String set of characters to keep, may be null\n     * @return modified String, <code>null</code> if null string input\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharSetUtils.java",
        "class_name": "org.apache.commons.lang.CharSetUtils",
        "signature": "org.apache.commons.lang.CharSetUtils.keep(java.lang.String, java.lang.String[])",
        "snippet": "    public static String keep(String str, String[] set) {\n        if (str == null) {\n            return null;\n        }\n        if (str.length() == 0 || ArrayUtils.isEmpty(set)) {\n            return \"\";\n        }\n        return modify(str, set, true);\n    }",
        "begin_line": 250,
        "end_line": 258,
        "comment": "\n     * <p>Takes an argument in set-syntax, see evaluateSet,\n     * and keeps any of characters present in the specified string.</p>\n     *\n     * <p>An example would be:</p>\n     * <ul>\n     *  <li>keep(&quot;hello&quot;, {&quot;c-f&quot;, &quot;o&quot;})\n     *   returns &quot;eo&quot;</li>\n     * </ul>\n     *\n     * @see #evaluateSet(java.lang.String[]) for set-syntax.\n     * @param str  String to keep characters from, may be null\n     * @param set  String[] set of characters to keep, may be null\n     * @return modified String, <code>null</code> if null string input\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharSetUtils.java",
        "class_name": "org.apache.commons.lang.CharSetUtils",
        "signature": "org.apache.commons.lang.CharSetUtils.delete(java.lang.String, java.lang.String)",
        "snippet": "    public static String delete(String str, String set) {\n        if (StringUtils.isEmpty(str) || StringUtils.isEmpty(set)) {\n            return str;\n        }\n        String[] strs = new String[1];\n        strs[0] = set;\n        return delete(str, strs);\n    }",
        "begin_line": 280,
        "end_line": 287,
        "comment": "\n     * <p>Takes an argument in set-syntax, see evaluateSet,\n     * and deletes any of characters present in the specified string.</p>\n     *\n     * <pre>\n     * CharSetUtils.delete(null, *)        = null\n     * CharSetUtils.delete(\"\", *)          = \"\"\n     * CharSetUtils.delete(*, null)        = *\n     * CharSetUtils.delete(*, \"\")          = *\n     * CharSetUtils.delete(\"hello\", \"hl\")  = \"eo\"\n     * CharSetUtils.delete(\"hello\", \"le\")  = \"ho\"\n     * </pre>\n     *\n     * @see #evaluateSet(java.lang.String[]) for set-syntax.\n     * @param str  String to delete characters from, may be null\n     * @param set  String set of characters to delete, may be null\n     * @return modified String, <code>null</code> if null string input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharSetUtils.java",
        "class_name": "org.apache.commons.lang.CharSetUtils",
        "signature": "org.apache.commons.lang.CharSetUtils.delete(java.lang.String, java.lang.String[])",
        "snippet": "    public static String delete(String str, String[] set) {\n        if (StringUtils.isEmpty(str) || ArrayUtils.isEmpty(set)) {\n            return str;\n        }\n        return modify(str, set, false);\n    }",
        "begin_line": 304,
        "end_line": 309,
        "comment": "\n     * <p>Takes an argument in set-syntax, see evaluateSet,\n     * and deletes any of characters present in the specified string.</p>\n     *\n     * <p>An example would be:</p>\n     * <ul>\n     *  <li>delete(&quot;hello&quot;, {&quot;c-f&quot;, &quot;o&quot;}) returns\n     *   &quot;hll&quot;</li>\n     * </ul>\n     *\n     * @see #evaluateSet(java.lang.String[]) for set-syntax.\n     * @param str  String to delete characters from, may be null\n     * @param set  String[] set of characters to delete, may be null\n     * @return modified String, <code>null</code> if null string input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharSetUtils.java",
        "class_name": "org.apache.commons.lang.CharSetUtils",
        "signature": "org.apache.commons.lang.CharSetUtils.modify(java.lang.String, java.lang.String[], boolean)",
        "snippet": "    private static String modify(String str, String[] set, boolean expect) {\n        CharSet chars = evaluateSet(set);\n        StringBuffer buffer = new StringBuffer(str.length());\n        char[] chrs = str.toCharArray();\n        int sz = chrs.length;\n        for(int i=0; i<sz; i++) {\n            if(chars.contains(chrs[i]) == expect) {\n                buffer.append(chrs[i]);\n            }\n        }\n        return buffer.toString();\n    }",
        "begin_line": 320,
        "end_line": 331,
        "comment": "\n     * Implementation of delete and keep\n     *\n     * @param str String to modify characters within\n     * @param set String[] set of characters to modify\n     * @param expect whether to evaluate on match, or non-match\n     * @return modified String\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharSetUtils.java",
        "class_name": "org.apache.commons.lang.CharSetUtils",
        "signature": "org.apache.commons.lang.CharSetUtils.translate(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    public static String translate(String str, String searchChars, String replaceChars) {\n        if (StringUtils.isEmpty(str)) {\n            return str;\n        }\n        StringBuffer buffer = new StringBuffer(str.length());\n        char[] chrs = str.toCharArray();\n        char[] withChrs = replaceChars.toCharArray();\n        int sz = chrs.length;\n        int withMax = replaceChars.length() - 1;\n        for(int i=0; i<sz; i++) {\n            int idx = searchChars.indexOf(chrs[i]);\n            if(idx != -1) {\n                if(idx > withMax) {\n                    idx = withMax;\n                }\n                buffer.append(withChrs[idx]);\n            } else {\n                buffer.append(chrs[i]);\n            }\n        }\n        return buffer.toString();\n    }",
        "begin_line": 367,
        "end_line": 388,
        "comment": "\n     * <p>Translate characters in a String.\n     * This is a multi character search and replace routine.</p>\n     *\n     * <p>An example is:</p>\n     * <ul>\n     *   <li>translate(&quot;hello&quot;, &quot;ho&quot;, &quot;jy&quot;)\n     *    =&gt; jelly</li>\n     * </ul>\n     *\n     * <p>If the length of characters to search for is greater than the\n     * length of characters to replace, then the last character is \n     * used.</p>\n     * \n     * <pre>\n     * CharSetUtils.translate(null, *, *) = null\n     * CharSetUtils.translate(\"\", *, *)   = \"\"\n     * </pre>\n     *\n     * @param str  String to replace characters in, may be null\n     * @param searchChars   a set of characters to search for, must not be null\n     * @param replaceChars  a set of characters to replace, must not be null or empty (&quot;&quot;)\n     * @return translated String, <code>null</code> if null string input\n     * @throws NullPointerException if <code>searchChars</code> or <code>replaceChars</code> \n     *  is <code>null</code>\n     * @throws ArrayIndexOutOfBoundsException if <code>replaceChars</code> is empty (&quot;&quot;)\n     * @deprecated Use {@link StringUtils#replaceChars(String, String, String)}.\n     *             Method will be removed in Commons Lang 3.0.\n     *  NOTE: StringUtils#replaceChars behaves differently when 'searchChars' is longer\n     *  than 'replaceChars'. CharSetUtils#translate will use the last char of the replacement\n     *  string whereas StringUtils#replaceChars will delete\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ObjectUtils.java",
        "class_name": "org.apache.commons.lang.ObjectUtils",
        "signature": "org.apache.commons.lang.ObjectUtils.ObjectUtils()",
        "snippet": "    public ObjectUtils() {\n        super();\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * <p><code>ObjectUtils</code> instances should NOT be constructed in\n     * standard programming. Instead, the class should be used as\n     * <code>ObjectUtils.defaultIfNull(\"a\",\"b\");</code>.</p>\n     *\n     * <p>This constructor is public to permit tools that require a JavaBean instance\n     * to operate.</p>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ObjectUtils.java",
        "class_name": "org.apache.commons.lang.ObjectUtils",
        "signature": "org.apache.commons.lang.ObjectUtils.defaultIfNull(java.lang.Object, java.lang.Object)",
        "snippet": "    public static Object defaultIfNull(Object object, Object defaultValue) {\n        return object != null ? object : defaultValue;\n    }",
        "begin_line": 88,
        "end_line": 90,
        "comment": "\n     * <p>Returns a default value if the object passed is\n     * <code>null</code>.</p>\n     * \n     * <pre>\n     * ObjectUtils.defaultIfNull(null, null)      = null\n     * ObjectUtils.defaultIfNull(null, \"\")        = \"\"\n     * ObjectUtils.defaultIfNull(null, \"zz\")      = \"zz\"\n     * ObjectUtils.defaultIfNull(\"abc\", *)        = \"abc\"\n     * ObjectUtils.defaultIfNull(Boolean.TRUE, *) = Boolean.TRUE\n     * </pre>\n     *\n     * @param object  the <code>Object</code> to test, may be <code>null</code>\n     * @param defaultValue  the default value to return, may be <code>null</code>\n     * @return <code>object</code> if it is not <code>null</code>, defaultValue otherwise\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ObjectUtils.java",
        "class_name": "org.apache.commons.lang.ObjectUtils",
        "signature": "org.apache.commons.lang.ObjectUtils.equals(java.lang.Object, java.lang.Object)",
        "snippet": "    public static boolean equals(Object object1, Object object2) {\n        if (object1 == object2) {\n            return true;\n        }\n        if ((object1 == null) || (object2 == null)) {\n            return false;\n        }\n        return object1.equals(object2);\n    }",
        "begin_line": 111,
        "end_line": 119,
        "comment": "\n     * <p>Compares two objects for equality, where either one or both\n     * objects may be <code>null</code>.</p>\n     *\n     * <pre>\n     * ObjectUtils.equals(null, null)                  = true\n     * ObjectUtils.equals(null, \"\")                    = false\n     * ObjectUtils.equals(\"\", null)                    = false\n     * ObjectUtils.equals(\"\", \"\")                      = true\n     * ObjectUtils.equals(Boolean.TRUE, null)          = false\n     * ObjectUtils.equals(Boolean.TRUE, \"true\")        = false\n     * ObjectUtils.equals(Boolean.TRUE, Boolean.TRUE)  = true\n     * ObjectUtils.equals(Boolean.TRUE, Boolean.FALSE) = false\n     * </pre>\n     *\n     * @param object1  the first object, may be <code>null</code>\n     * @param object2  the second object, may be <code>null</code>\n     * @return <code>true</code> if the values of both objects are the same\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ObjectUtils.java",
        "class_name": "org.apache.commons.lang.ObjectUtils",
        "signature": "org.apache.commons.lang.ObjectUtils.hashCode(java.lang.Object)",
        "snippet": "    public static int hashCode(Object obj) {\n        return (obj == null) ? 0 : obj.hashCode();\n    }",
        "begin_line": 134,
        "end_line": 136,
        "comment": "\n     * <p>Gets the hash code of an object returning zero when the\n     * object is <code>null</code>.</p>\n     *\n     * <pre>\n     * ObjectUtils.hashCode(null)   = 0\n     * ObjectUtils.hashCode(obj)    = obj.hashCode()\n     * </pre>\n     *\n     * @param obj  the object to obtain the hash code of, may be <code>null</code>\n     * @return the hash code of the object, or zero if null\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ObjectUtils.java",
        "class_name": "org.apache.commons.lang.ObjectUtils",
        "signature": "org.apache.commons.lang.ObjectUtils.identityToString(java.lang.Object)",
        "snippet": "    public static String identityToString(Object object) {\n        if (object == null) {\n            return null;\n        }\n        return appendIdentityToString(null, object).toString();\n    }",
        "begin_line": 156,
        "end_line": 161,
        "comment": "\n     * <p>Gets the toString that would be produced by <code>Object</code>\n     * if a class did not override toString itself. <code>null</code>\n     * will return <code>null</code>.</p>\n     *\n     * <pre>\n     * ObjectUtils.identityToString(null)         = null\n     * ObjectUtils.identityToString(\"\")           = \"java.lang.String@1e23\"\n     * ObjectUtils.identityToString(Boolean.TRUE) = \"java.lang.Boolean@7fa\"\n     * </pre>\n     *\n     * @param object  the object to create a toString for, may be\n     *  <code>null</code>\n     * @return the default toString text, or <code>null</code> if\n     *  <code>null</code> passed in\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ObjectUtils.java",
        "class_name": "org.apache.commons.lang.ObjectUtils",
        "signature": "org.apache.commons.lang.ObjectUtils.appendIdentityToString(java.lang.StringBuffer, java.lang.Object)",
        "snippet": "    public static StringBuffer appendIdentityToString(StringBuffer buffer, Object object) {\n        if (object == null) {\n            return null;\n        }\n        if (buffer == null) {\n            buffer = new StringBuffer();\n        }\n        return buffer\n            .append(object.getClass().getName())\n            .append('@')\n            .append(Integer.toHexString(System.identityHashCode(object)));\n    }",
        "begin_line": 181,
        "end_line": 192,
        "comment": "\n     * <p>Appends the toString that would be produced by <code>Object</code>\n     * if a class did not override toString itself. <code>null</code>\n     * will return <code>null</code>.</p>\n     *\n     * <pre>\n     * ObjectUtils.appendIdentityToString(*, null)            = null\n     * ObjectUtils.appendIdentityToString(null, \"\")           = \"java.lang.String@1e23\"\n     * ObjectUtils.appendIdentityToString(null, Boolean.TRUE) = \"java.lang.Boolean@7fa\"\n     * ObjectUtils.appendIdentityToString(buf, Boolean.TRUE)  = buf.append(\"java.lang.Boolean@7fa\")\n     * </pre>\n     *\n     * @param buffer  the buffer to append to, may be <code>null</code>\n     * @param object  the object to create a toString for, may be <code>null</code>\n     * @return the default toString text, or <code>null</code> if\n     *  <code>null</code> passed in\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ObjectUtils.java",
        "class_name": "org.apache.commons.lang.ObjectUtils",
        "signature": "org.apache.commons.lang.ObjectUtils.toString(java.lang.Object)",
        "snippet": "    public static String toString(Object obj) {\n        return obj == null ? \"\" : obj.toString();\n    }",
        "begin_line": 213,
        "end_line": 215,
        "comment": "\n     * <p>Gets the <code>toString</code> of an <code>Object</code> returning\n     * an empty string (\"\") if <code>null</code> input.</p>\n     * \n     * <pre>\n     * ObjectUtils.toString(null)         = \"\"\n     * ObjectUtils.toString(\"\")           = \"\"\n     * ObjectUtils.toString(\"bat\")        = \"bat\"\n     * ObjectUtils.toString(Boolean.TRUE) = \"true\"\n     * </pre>\n     * \n     * @see StringUtils#defaultString(String)\n     * @see String#valueOf(Object)\n     * @param obj  the Object to <code>toString</code>, may be null\n     * @return the passed in Object's toString, or nullStr if <code>null</code> input\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ObjectUtils.java",
        "class_name": "org.apache.commons.lang.ObjectUtils",
        "signature": "org.apache.commons.lang.ObjectUtils.toString(java.lang.Object, java.lang.String)",
        "snippet": "    public static String toString(Object obj, String nullStr) {\n        return obj == null ? nullStr : obj.toString();\n    }",
        "begin_line": 236,
        "end_line": 238,
        "comment": "\n     * <p>Gets the <code>toString</code> of an <code>Object</code> returning\n     * a specified text if <code>null</code> input.</p>\n     * \n     * <pre>\n     * ObjectUtils.toString(null, null)           = null\n     * ObjectUtils.toString(null, \"null\")         = \"null\"\n     * ObjectUtils.toString(\"\", \"null\")           = \"\"\n     * ObjectUtils.toString(\"bat\", \"null\")        = \"bat\"\n     * ObjectUtils.toString(Boolean.TRUE, \"null\") = \"true\"\n     * </pre>\n     * \n     * @see StringUtils#defaultString(String,String)\n     * @see String#valueOf(Object)\n     * @param obj  the Object to <code>toString</code>, may be null\n     * @param nullStr  the String to return if <code>null</code> input, may be null\n     * @return the passed in Object's toString, or nullStr if <code>null</code> input\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ObjectUtils.java",
        "class_name": "org.apache.commons.lang.ObjectUtils",
        "signature": "org.apache.commons.lang.ObjectUtils.Null.Null()",
        "snippet": "        Null() {\n            super();\n        }",
        "begin_line": 267,
        "end_line": 269,
        "comment": "\n         * Restricted constructor - singleton.\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ObjectUtils.java",
        "class_name": "org.apache.commons.lang.ObjectUtils",
        "signature": "org.apache.commons.lang.ObjectUtils.Null.readResolve()",
        "snippet": "        private Object readResolve() {\n            return ObjectUtils.NULL;\n        }",
        "begin_line": 276,
        "end_line": 278,
        "comment": "\n         * <p>Ensure singleton.</p>\n         * \n         * @return the singleton value\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ObjectUtils.java",
        "class_name": "org.apache.commons.lang.ObjectUtils",
        "signature": "org.apache.commons.lang.ObjectUtils.min(java.lang.Comparable, java.lang.Comparable)",
        "snippet": "    public static Object min( Comparable c1, Comparable c2 ) {\n        if ( c1 != null && c2 != null ) {\n            return c1.compareTo( c2 ) < 1 ? c1 : c2;\n        }\n        else {\n            return c1 != null ? c1 : c2;\n        }                              \n    }",
        "begin_line": 295,
        "end_line": 302,
        "comment": "\n     * Null safe comparison of Comparables.\n     * \n     * @param c1\n     * @param c2\n     * @return\n     *  <ul>\n     *   <li>If both objects are non-null and unequal, the lesser object.\n     *   <li>If both objects are non-null and equal, c1.\n     *   <li>If one of the comparables is null, the non-null object.\n     *   <li>If both the comparables are null, null is returned.\n     *  </ul>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ObjectUtils.java",
        "class_name": "org.apache.commons.lang.ObjectUtils",
        "signature": "org.apache.commons.lang.ObjectUtils.max(java.lang.Comparable, java.lang.Comparable)",
        "snippet": "    public static Object max( Comparable c1, Comparable c2 ) {\n        if ( c1 != null && c2 != null ) {\n            return c1.compareTo( c2 ) >= 0 ? c1 : c2;\n        }\n        else {\n            return c1 != null ? c1 : c2;\n        }                              \n    }",
        "begin_line": 317,
        "end_line": 324,
        "comment": "\n     * Null safe comparison of Comparables.\n     * \n     * @param c1\n     * @param c2\n     * @return\n     *  <ul>\n     *   <li>If both objects are non-null and unequal, the greater object.\n     *   <li>If both objects are non-null and equal, c1.\n     *   <li>If one of the comparables is null, the non-null object.\n     *   <li>If both the comparables are null, null is returned.\n     *  </ul>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/UnhandledException.java",
        "class_name": "org.apache.commons.lang.UnhandledException",
        "signature": "org.apache.commons.lang.UnhandledException.UnhandledException(java.lang.Throwable)",
        "snippet": "    public UnhandledException(Throwable cause) {\n        super(cause);\n    }",
        "begin_line": 59,
        "end_line": 61,
        "comment": "\n     * Constructs the exception using a cause.\n     *\n     * @param cause  the underlying cause\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/UnhandledException.java",
        "class_name": "org.apache.commons.lang.UnhandledException",
        "signature": "org.apache.commons.lang.UnhandledException.UnhandledException(java.lang.String, java.lang.Throwable)",
        "snippet": "    public UnhandledException(String message, Throwable cause) {\n        super(message, cause);\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Constructs the exception using a message and cause.\n     *\n     * @param message  the message to use\n     * @param cause  the underlying cause\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NumberRange.java",
        "class_name": "org.apache.commons.lang.NumberRange",
        "signature": "org.apache.commons.lang.NumberRange.NumberRange(java.lang.Number)",
        "snippet": "    public NumberRange(Number num) {\n        if (num == null) {\n            throw new NullPointerException(\"The number must not be null\");\n        }\n\n        this.min = num;\n        this.max = num;\n    }",
        "begin_line": 52,
        "end_line": 59,
        "comment": "\n     * <p>Constructs a new <code>NumberRange</code> using\n     * <code>number</code> as both the minimum and maximum in\n     * this range.</p>\n     *\n     * @param num the number to use for this range\n     * @throws NullPointerException if the number is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NumberRange.java",
        "class_name": "org.apache.commons.lang.NumberRange",
        "signature": "org.apache.commons.lang.NumberRange.NumberRange(java.lang.Number, java.lang.Number)",
        "snippet": "    public NumberRange(Number min, Number max) {\n        if (min == null) {\n            throw new NullPointerException(\"The minimum value must not be null\");\n        } else if (max == null) {\n            throw new NullPointerException(\"The maximum value must not be null\");\n        }\n\n        if (max.doubleValue() < min.doubleValue()) {\n            this.min = this.max = min;\n        } else {\n            this.min = min;\n            this.max = max;\n        }\n    }",
        "begin_line": 73,
        "end_line": 86,
        "comment": "\n     * <p>Constructs a new <code>NumberRange</code> with the specified\n     * minimum and maximum numbers.</p>\n     * \n     * <p><em>If the maximum is less than the minimum, the range will be constructed\n     * from the minimum value to the minimum value, not what you would expect!.</em></p>\n     *\n     * @param min the minimum number in this range\n     * @param max the maximum number in this range\n     * @throws NullPointerException if either the minimum or maximum number is\n     *  <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NumberRange.java",
        "class_name": "org.apache.commons.lang.NumberRange",
        "signature": "org.apache.commons.lang.NumberRange.getMinimum()",
        "snippet": "    public Number getMinimum() {\n        return min;\n    }",
        "begin_line": 93,
        "end_line": 95,
        "comment": "\n     * <p>Returns the minimum number in this range.</p>\n     *\n     * @return the minimum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NumberRange.java",
        "class_name": "org.apache.commons.lang.NumberRange",
        "signature": "org.apache.commons.lang.NumberRange.getMaximum()",
        "snippet": "    public Number getMaximum() {\n        return max;\n    }",
        "begin_line": 102,
        "end_line": 104,
        "comment": "\n     * <p>Returns the maximum number in this range.</p>\n     *\n     * @return the maximum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NumberRange.java",
        "class_name": "org.apache.commons.lang.NumberRange",
        "signature": "org.apache.commons.lang.NumberRange.includesNumber(java.lang.Number)",
        "snippet": "    public boolean includesNumber(Number number) {\n        if (number == null) {\n            return false;\n        } else {\n            return !(min.doubleValue() > number.doubleValue()) &&\n                !(max.doubleValue() < number.doubleValue());\n        }\n    }",
        "begin_line": 114,
        "end_line": 121,
        "comment": "\n     * <p>Tests whether the specified <code>number</code> occurs within\n     * this range using <code>double</code> comparison.</p>\n     *\n     * @param number the number to test\n     * @return <code>true</code> if the specified number occurs within this\n     *  range; otherwise, <code>false</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NumberRange.java",
        "class_name": "org.apache.commons.lang.NumberRange",
        "signature": "org.apache.commons.lang.NumberRange.includesRange(org.apache.commons.lang.NumberRange)",
        "snippet": "    public boolean includesRange(NumberRange range) {\n        if (range == null) {\n            return false;\n        } else {\n            return includesNumber(range.min) && includesNumber(range.max);\n        }\n    }",
        "begin_line": 131,
        "end_line": 137,
        "comment": "\n     * <p>Tests whether the specified range occurs entirely within this\n     * range using <code>double</code> comparison.</p>\n     *\n     * @param range the range to test\n     * @return <code>true</code> if the specified range occurs entirely within\n     *  this range; otherwise, <code>false</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NumberRange.java",
        "class_name": "org.apache.commons.lang.NumberRange",
        "signature": "org.apache.commons.lang.NumberRange.overlaps(org.apache.commons.lang.NumberRange)",
        "snippet": "    public boolean overlaps(NumberRange range) {\n        if (range == null) {\n            return false;\n        } else {\n            return range.includesNumber(min) || range.includesNumber(max) || \n                includesRange(range);\n        }\n    }",
        "begin_line": 147,
        "end_line": 154,
        "comment": "\n     * <p>Tests whether the specified range overlaps with this range\n     * using <code>double</code> comparison.</p>\n     *\n     * @param range the range to test\n     * @return <code>true</code> if the specified range overlaps with this\n     *  range; otherwise, <code>false</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NumberRange.java",
        "class_name": "org.apache.commons.lang.NumberRange",
        "signature": "org.apache.commons.lang.NumberRange.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        } else if (!(obj instanceof NumberRange)) {\n            return false;\n        } else {\n            NumberRange range = (NumberRange)obj;\n            return min.equals(range.min) && max.equals(range.max);\n        }\n    }",
        "begin_line": 164,
        "end_line": 173,
        "comment": "\n     * <p>Indicates whether some other <code>Object</code> is\n     * &quot;equal&quot; to this one.</p>\n     *\n     * @param obj the reference object with which to compare\n     * @return <code>true</code> if this object is the same as the obj\n     *  argument; <code>false</code> otherwise\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NumberRange.java",
        "class_name": "org.apache.commons.lang.NumberRange",
        "signature": "org.apache.commons.lang.NumberRange.hashCode()",
        "snippet": "    public int hashCode() {\n        int result = 17;\n        result = 37 * result + min.hashCode();\n        result = 37 * result + max.hashCode();\n        return result;\n    }",
        "begin_line": 180,
        "end_line": 185,
        "comment": "\n     * <p>Returns a hash code value for this object.</p>\n     *\n     * @return a hash code value for this object\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NumberRange.java",
        "class_name": "org.apache.commons.lang.NumberRange",
        "signature": "org.apache.commons.lang.NumberRange.toString()",
        "snippet": "    public String toString() {\n        StringBuffer sb = new StringBuffer();\n\n        if (min.doubleValue() < 0) {\n            sb.append('(')\n                .append(min)\n                .append(')');\n        } else {\n            sb.append(min);\n        }\n\n        sb.append('-');\n\n        if (max.doubleValue() < 0) {\n            sb.append('(')\n                .append(max)\n                .append(')');\n        } else {\n            sb.append(max);\n        }\n\n        return sb.toString();\n    }",
        "begin_line": 196,
        "end_line": 218,
        "comment": "\n     * <p>Returns the string representation of this range.</p>\n     *\n     * <p>This string is the string representation of the minimum and\n     * maximum numbers in the range, separated by a hyphen. If a number\n     * is negative, then it is enclosed in parentheses.</p>\n     *\n     * @return the string representation of this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberRange.java",
        "class_name": "org.apache.commons.lang.math.NumberRange",
        "signature": "org.apache.commons.lang.math.NumberRange.NumberRange(java.lang.Number)",
        "snippet": "    public NumberRange(Number num) {\n        if (num == null) {\n            throw new IllegalArgumentException(\"The number must not be null\");\n        }\n        if (num instanceof Comparable == false) {\n            throw new IllegalArgumentException(\"The number must implement Comparable\");\n        }\n        if (num instanceof Double && ((Double) num).isNaN()) {\n            throw new IllegalArgumentException(\"The number must not be NaN\");\n        }\n        if (num instanceof Float && ((Float) num).isNaN()) {\n            throw new IllegalArgumentException(\"The number must not be NaN\");\n        }\n\n        this.min = num;\n        this.max = num;\n    }",
        "begin_line": 66,
        "end_line": 82,
        "comment": "\n     * <p>Constructs a new <code>NumberRange</code> using the specified\n     * number as both the minimum and maximum in this range.</p>\n     *\n     * @param num the number to use for this range\n     * @throws IllegalArgumentException if the number is <code>null</code>\n     * @throws IllegalArgumentException if the number doesn't implement <code>Comparable</code>\n     * @throws IllegalArgumentException if the number is <code>Double.NaN</code> or <code>Float.NaN</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberRange.java",
        "class_name": "org.apache.commons.lang.math.NumberRange",
        "signature": "org.apache.commons.lang.math.NumberRange.NumberRange(java.lang.Number, java.lang.Number)",
        "snippet": "    public NumberRange(Number num1, Number num2) {\n        if (num1 == null || num2 == null) {\n            throw new IllegalArgumentException(\"The numbers must not be null\");\n        }\n        if (num1.getClass() != num2.getClass()) {\n            throw new IllegalArgumentException(\"The numbers must be of the same type\");\n        }\n        if (num1 instanceof Comparable == false) {\n            throw new IllegalArgumentException(\"The numbers must implement Comparable\");\n        }\n        if (num1 instanceof Double) {\n            if (((Double) num1).isNaN() || ((Double) num2).isNaN()) {\n                throw new IllegalArgumentException(\"The number must not be NaN\");\n            }\n        } else if (num1 instanceof Float) {\n            if (((Float) num1).isNaN() || ((Float) num2).isNaN()) {\n                throw new IllegalArgumentException(\"The number must not be NaN\");\n            }\n        }\n        \n        int compare = ((Comparable) num1).compareTo(num2);\n        if (compare == 0) {\n            this.min = num1;\n            this.max = num1;\n        } else if (compare > 0) {\n            this.min = num2;\n            this.max = num1;\n        } else {\n            this.min = num1;\n            this.max = num2;\n        }\n    }",
        "begin_line": 102,
        "end_line": 133,
        "comment": "\n     * <p>Constructs a new <code>NumberRange</code> with the specified\n     * minimum and maximum numbers (both inclusive).</p>\n     * \n     * <p>The arguments may be passed in the order (min,max) or (max,min). The\n     * {@link #getMinimumNumber()} and {@link #getMaximumNumber()} methods will return the\n     * correct value.</p>\n     * \n     * <p>This constructor is designed to be used with two <code>Number</code>\n     * objects of the same type. If two objects of different types are passed in,\n     * an exception is thrown.</p>\n     *\n     * @param num1  first number that defines the edge of the range, inclusive\n     * @param num2  second number that defines the edge of the range, inclusive\n     * @throws IllegalArgumentException if either number is <code>null</code>\n     * @throws IllegalArgumentException if the numbers are of different types\n     * @throws IllegalArgumentException if the numbers don't implement <code>Comparable</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberRange.java",
        "class_name": "org.apache.commons.lang.math.NumberRange",
        "signature": "org.apache.commons.lang.math.NumberRange.getMinimumNumber()",
        "snippet": "    public Number getMinimumNumber() {\n        return min;\n    }",
        "begin_line": 143,
        "end_line": 145,
        "comment": "\n     * <p>Returns the minimum number in this range.</p>\n     *\n     * @return the minimum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberRange.java",
        "class_name": "org.apache.commons.lang.math.NumberRange",
        "signature": "org.apache.commons.lang.math.NumberRange.getMaximumNumber()",
        "snippet": "    public Number getMaximumNumber() {\n        return max;\n    }",
        "begin_line": 152,
        "end_line": 154,
        "comment": "\n     * <p>Returns the maximum number in this range.</p>\n     *\n     * @return the maximum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberRange.java",
        "class_name": "org.apache.commons.lang.math.NumberRange",
        "signature": "org.apache.commons.lang.math.NumberRange.containsNumber(java.lang.Number)",
        "snippet": "    public boolean containsNumber(Number number) {\n        if (number == null) {\n            return false;\n        }\n        if (number.getClass() != min.getClass()) {\n            throw new IllegalArgumentException(\"The number must be of the same type as the range numbers\");\n        }\n        int compareMin = ((Comparable) min).compareTo(number);\n        int compareMax = ((Comparable) max).compareTo(number);\n        return compareMin <= 0 && compareMax >= 0;\n    }",
        "begin_line": 169,
        "end_line": 179,
        "comment": "\n     * <p>Tests whether the specified <code>number</code> occurs within\n     * this range.</p>\n     * \n     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n     *\n     * @param number  the number to test, may be <code>null</code>\n     * @return <code>true</code> if the specified number occurs within this range\n     * @throws IllegalArgumentException if the number is of a different type to the range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberRange.java",
        "class_name": "org.apache.commons.lang.math.NumberRange",
        "signature": "org.apache.commons.lang.math.NumberRange.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (obj instanceof NumberRange == false) {\n            return false;\n        }\n        NumberRange range = (NumberRange) obj;\n        return min.equals(range.min) && max.equals(range.max);\n    }",
        "begin_line": 196,
        "end_line": 205,
        "comment": "\n     * <p>Compares this range to another object to test if they are equal.</p>.\n     * \n     * <p>To be equal, the class, minimum and maximum must be equal.</p>\n     *\n     * @param obj the reference object with which to compare\n     * @return <code>true</code> if this object is equal\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberRange.java",
        "class_name": "org.apache.commons.lang.math.NumberRange",
        "signature": "org.apache.commons.lang.math.NumberRange.hashCode()",
        "snippet": "    public int hashCode() {\n        if (hashCode == 0) {\n            hashCode = 17;\n            hashCode = 37 * hashCode + getClass().hashCode();\n            hashCode = 37 * hashCode + min.hashCode();\n            hashCode = 37 * hashCode + max.hashCode();\n        }\n        return hashCode;\n    }",
        "begin_line": 212,
        "end_line": 220,
        "comment": "\n     * <p>Gets a hashCode for the range.</p>\n     *\n     * @return a hash code value for this object\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberRange.java",
        "class_name": "org.apache.commons.lang.math.NumberRange",
        "signature": "org.apache.commons.lang.math.NumberRange.toString()",
        "snippet": "    public String toString() {\n        if (toString == null) {\n            StringBuffer buf = new StringBuffer(32);\n            buf.append(\"Range[\");\n            buf.append(min);\n            buf.append(',');\n            buf.append(max);\n            buf.append(']');\n            toString = buf.toString();\n        }\n        return toString;\n    }",
        "begin_line": 229,
        "end_line": 240,
        "comment": "\n     * <p>Gets the range as a <code>String</code>.</p>\n     *\n     * <p>The format of the String is 'Range[<i>min</i>,<i>max</i>]'.</p>\n     *\n     * @return the <code>String</code> representation of this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/IntHashMap.java",
        "class_name": "org.apache.commons.lang.IntHashMap",
        "signature": "org.apache.commons.lang.IntHashMap.Entry.Entry(int, int, java.lang.Object, org.apache.commons.lang.IntHashMap.Entry)",
        "snippet": "        protected Entry(int hash, int key, Object value, Entry next) {\n            this.hash = hash;\n            this.key = key;\n            this.value = value;\n            this.next = next;\n        }",
        "begin_line": 83,
        "end_line": 88,
        "comment": "\n         * <p>Create a new entry with the given values.</p>\n         *\n         * @param hash The code used to hash the object with\n         * @param key The key used to enter this in the table\n         * @param value The value for this key\n         * @param next A reference to the next entry in the table\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/IntHashMap.java",
        "class_name": "org.apache.commons.lang.IntHashMap",
        "signature": "org.apache.commons.lang.IntHashMap.IntHashMap()",
        "snippet": "    public IntHashMap() {\n        this(20, 0.75f);\n    }",
        "begin_line": 95,
        "end_line": 97,
        "comment": "\n     * <p>Constructs a new, empty hashtable with a default capacity and load\n     * factor, which is <code>20</code> and <code>0.75</code> respectively.</p>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/IntHashMap.java",
        "class_name": "org.apache.commons.lang.IntHashMap",
        "signature": "org.apache.commons.lang.IntHashMap.IntHashMap(int)",
        "snippet": "    public IntHashMap(int initialCapacity) {\n        this(initialCapacity, 0.75f);\n    }",
        "begin_line": 107,
        "end_line": 109,
        "comment": "\n     * <p>Constructs a new, empty hashtable with the specified initial capacity\n     * and default load factor, which is <code>0.75</code>.</p>\n     *\n     * @param  initialCapacity the initial capacity of the hashtable.\n     * @throws IllegalArgumentException if the initial capacity is less\n     *   than zero.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/IntHashMap.java",
        "class_name": "org.apache.commons.lang.IntHashMap",
        "signature": "org.apache.commons.lang.IntHashMap.IntHashMap(int, float)",
        "snippet": "    public IntHashMap(int initialCapacity, float loadFactor) {\n        super();\n        if (initialCapacity < 0) {\n            throw new IllegalArgumentException(\"Illegal Capacity: \" + initialCapacity);\n        }\n        if (loadFactor <= 0) {\n            throw new IllegalArgumentException(\"Illegal Load: \" + loadFactor);\n        }\n        if (initialCapacity == 0) {\n            initialCapacity = 1;\n        }\n\n        this.loadFactor = loadFactor;\n        table = new Entry[initialCapacity];\n        threshold = (int) (initialCapacity * loadFactor);\n    }",
        "begin_line": 120,
        "end_line": 135,
        "comment": "\n     * <p>Constructs a new, empty hashtable with the specified initial\n     * capacity and the specified load factor.</p>\n     *\n     * @param initialCapacity the initial capacity of the hashtable.\n     * @param loadFactor the load factor of the hashtable.\n     * @throws IllegalArgumentException  if the initial capacity is less\n     *             than zero, or if the load factor is nonpositive.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/IntHashMap.java",
        "class_name": "org.apache.commons.lang.IntHashMap",
        "signature": "org.apache.commons.lang.IntHashMap.size()",
        "snippet": "    public int size() {\n        return count;\n    }",
        "begin_line": 142,
        "end_line": 144,
        "comment": "\n     * <p>Returns the number of keys in this hashtable.</p>\n     *\n     * @return  the number of keys in this hashtable.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/IntHashMap.java",
        "class_name": "org.apache.commons.lang.IntHashMap",
        "signature": "org.apache.commons.lang.IntHashMap.isEmpty()",
        "snippet": "    public boolean isEmpty() {\n        return count == 0;\n    }",
        "begin_line": 152,
        "end_line": 154,
        "comment": "\n     * <p>Tests if this hashtable maps no keys to values.</p>\n     *\n     * @return  <code>true</code> if this hashtable maps no keys to values;\n     *          <code>false</code> otherwise.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/IntHashMap.java",
        "class_name": "org.apache.commons.lang.IntHashMap",
        "signature": "org.apache.commons.lang.IntHashMap.contains(java.lang.Object)",
        "snippet": "    public boolean contains(Object value) {\n        if (value == null) {\n            throw new NullPointerException();\n        }\n\n        Entry tab[] = table;\n        for (int i = tab.length; i-- > 0;) {\n            for (Entry e = tab[i]; e != null; e = e.next) {\n                if (e.value.equals(value)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }",
        "begin_line": 174,
        "end_line": 188,
        "comment": "\n     * <p>Tests if some key maps into the specified value in this hashtable.\n     * This operation is more expensive than the <code>containsKey</code>\n     * method.</p>\n     *\n     * <p>Note that this method is identical in functionality to containsValue,\n     * (which is part of the Map interface in the collections framework).</p>\n     *\n     * @param      value   a value to search for.\n     * @return     <code>true</code> if and only if some key maps to the\n     *             <code>value</code> argument in this hashtable as\n     *             determined by the <tt>equals</tt> method;\n     *             <code>false</code> otherwise.\n     * @throws  NullPointerException  if the value is <code>null</code>.\n     * @see        #containsKey(int)\n     * @see        #containsValue(Object)\n     * @see        java.util.Map\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/IntHashMap.java",
        "class_name": "org.apache.commons.lang.IntHashMap",
        "signature": "org.apache.commons.lang.IntHashMap.containsValue(java.lang.Object)",
        "snippet": "    public boolean containsValue(Object value) {\n        return contains(value);\n    }",
        "begin_line": 202,
        "end_line": 204,
        "comment": "\n     * <p>Returns <code>true</code> if this HashMap maps one or more keys\n     * to this value.</p>\n     *\n     * <p>Note that this method is identical in functionality to contains\n     * (which predates the Map interface).</p>\n     *\n     * @param value value whose presence in this HashMap is to be tested.\n     * @return boolean <code>true</code> if the value is contained\n     * @see    java.util.Map\n     * @since JDK1.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/IntHashMap.java",
        "class_name": "org.apache.commons.lang.IntHashMap",
        "signature": "org.apache.commons.lang.IntHashMap.containsKey(int)",
        "snippet": "    public boolean containsKey(int key) {\n        Entry tab[] = table;\n        int hash = key;\n        int index = (hash & 0x7FFFFFFF) % tab.length;\n        for (Entry e = tab[index]; e != null; e = e.next) {\n            if (e.hash == hash) {\n                return true;\n            }\n        }\n        return false;\n    }",
        "begin_line": 215,
        "end_line": 225,
        "comment": "\n     * <p>Tests if the specified object is a key in this hashtable.</p>\n     *\n     * @param  key  possible key.\n     * @return <code>true</code> if and only if the specified object is a\n     *    key in this hashtable, as determined by the <tt>equals</tt>\n     *    method; <code>false</code> otherwise.\n     * @see #contains(Object)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/IntHashMap.java",
        "class_name": "org.apache.commons.lang.IntHashMap",
        "signature": "org.apache.commons.lang.IntHashMap.get(int)",
        "snippet": "    public Object get(int key) {\n        Entry tab[] = table;\n        int hash = key;\n        int index = (hash & 0x7FFFFFFF) % tab.length;\n        for (Entry e = tab[index]; e != null; e = e.next) {\n            if (e.hash == hash) {\n                return e.value;\n            }\n        }\n        return null;\n    }",
        "begin_line": 236,
        "end_line": 246,
        "comment": "\n     * <p>Returns the value to which the specified key is mapped in this map.</p>\n     *\n     * @param   key   a key in the hashtable.\n     * @return  the value to which the key is mapped in this hashtable;\n     *          <code>null</code> if the key is not mapped to any value in\n     *          this hashtable.\n     * @see     #put(int, Object)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/IntHashMap.java",
        "class_name": "org.apache.commons.lang.IntHashMap",
        "signature": "org.apache.commons.lang.IntHashMap.rehash()",
        "snippet": "    protected void rehash() {\n        int oldCapacity = table.length;\n        Entry oldMap[] = table;\n\n        int newCapacity = oldCapacity * 2 + 1;\n        Entry newMap[] = new Entry[newCapacity];\n\n        threshold = (int) (newCapacity * loadFactor);\n        table = newMap;\n\n        for (int i = oldCapacity; i-- > 0;) {\n            for (Entry old = oldMap[i]; old != null;) {\n                Entry e = old;\n                old = old.next;\n\n                int index = (e.hash & 0x7FFFFFFF) % newCapacity;\n                e.next = newMap[index];\n                newMap[index] = e;\n            }\n        }\n    }",
        "begin_line": 257,
        "end_line": 277,
        "comment": "\n     * <p>Increases the capacity of and internally reorganizes this\n     * hashtable, in order to accommodate and access its entries more\n     * efficiently.</p>\n     *\n     * <p>This method is called automatically when the number of keys\n     * in the hashtable exceeds this hashtable's capacity and load\n     * factor.</p>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/IntHashMap.java",
        "class_name": "org.apache.commons.lang.IntHashMap",
        "signature": "org.apache.commons.lang.IntHashMap.put(int, java.lang.Object)",
        "snippet": "    public Object put(int key, Object value) {\n        // Makes sure the key is not already in the hashtable.\n        Entry tab[] = table;\n        int hash = key;\n        int index = (hash & 0x7FFFFFFF) % tab.length;\n        for (Entry e = tab[index]; e != null; e = e.next) {\n            if (e.hash == hash) {\n                Object old = e.value;\n                e.value = value;\n                return old;\n            }\n        }\n\n        if (count >= threshold) {\n            // Rehash the table if the threshold is exceeded\n            rehash();\n\n            tab = table;\n            index = (hash & 0x7FFFFFFF) % tab.length;\n        }\n\n        // Creates the new entry.\n        Entry e = new Entry(hash, key, value, tab[index]);\n        tab[index] = e;\n        count++;\n        return null;\n    }",
        "begin_line": 294,
        "end_line": 320,
        "comment": "\n     * <p>Maps the specified <code>key</code> to the specified\n     * <code>value</code> in this hashtable. The key cannot be\n     * <code>null</code>. </p>\n     *\n     * <p>The value can be retrieved by calling the <code>get</code> method\n     * with a key that is equal to the original key.</p>\n     *\n     * @param key     the hashtable key.\n     * @param value   the value.\n     * @return the previous value of the specified key in this hashtable,\n     *         or <code>null</code> if it did not have one.\n     * @throws  NullPointerException  if the key is <code>null</code>.\n     * @see     #get(int)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/IntHashMap.java",
        "class_name": "org.apache.commons.lang.IntHashMap",
        "signature": "org.apache.commons.lang.IntHashMap.remove(int)",
        "snippet": "    public Object remove(int key) {\n        Entry tab[] = table;\n        int hash = key;\n        int index = (hash & 0x7FFFFFFF) % tab.length;\n        for (Entry e = tab[index], prev = null; e != null; prev = e, e = e.next) {\n            if (e.hash == hash) {\n                if (prev != null) {\n                    prev.next = e.next;\n                } else {\n                    tab[index] = e.next;\n                }\n                count--;\n                Object oldValue = e.value;\n                e.value = null;\n                return oldValue;\n            }\n        }\n        return null;\n    }",
        "begin_line": 333,
        "end_line": 351,
        "comment": "\n     * <p>Removes the key (and its corresponding value) from this\n     * hashtable.</p>\n     *\n     * <p>This method does nothing if the key is not present in the\n     * hashtable.</p>\n     *\n     * @param   key   the key that needs to be removed.\n     * @return  the value to which the key had been mapped in this hashtable,\n     *          or <code>null</code> if the key did not have a mapping.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/IntHashMap.java",
        "class_name": "org.apache.commons.lang.IntHashMap",
        "signature": "org.apache.commons.lang.IntHashMap.clear()",
        "snippet": "    public synchronized void clear() {\n        Entry tab[] = table;\n        for (int index = tab.length; --index >= 0;) {\n            tab[index] = null;\n        }\n        count = 0;\n    }",
        "begin_line": 356,
        "end_line": 362,
        "comment": "\n     * <p>Clears this hashtable so that it contains no keys.</p>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/SerializationUtils.java",
        "class_name": "org.apache.commons.lang.SerializationUtils",
        "signature": "org.apache.commons.lang.SerializationUtils.SerializationUtils()",
        "snippet": "    public SerializationUtils() {\n        super();\n    }",
        "begin_line": 60,
        "end_line": 62,
        "comment": "\n     * <p>SerializationUtils instances should NOT be constructed in standard programming.\n     * Instead, the class should be used as <code>SerializationUtils.clone(object)</code>.</p>\n     *\n     * <p>This constructor is public to permit tools that require a JavaBean instance\n     * to operate.</p>\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/SerializationUtils.java",
        "class_name": "org.apache.commons.lang.SerializationUtils",
        "signature": "org.apache.commons.lang.SerializationUtils.clone(java.io.Serializable)",
        "snippet": "    public static Object clone(Serializable object) {\n        return deserialize(serialize(object));\n    }",
        "begin_line": 79,
        "end_line": 81,
        "comment": "\n     * <p>Deep clone an <code>Object</code> using serialization.</p>\n     *\n     * <p>This is many times slower than writing clone methods by hand\n     * on all objects in your object graph. However, for complex object\n     * graphs, or for those that don't support deep cloning this can\n     * be a simple alternative implementation. Of course all the objects\n     * must be <code>Serializable</code>.</p>\n     * \n     * @param object  the <code>Serializable</code> object to clone\n     * @return the cloned object\n     * @throws SerializationException (runtime) if the serialization fails\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/SerializationUtils.java",
        "class_name": "org.apache.commons.lang.SerializationUtils",
        "signature": "org.apache.commons.lang.SerializationUtils.serialize(java.io.Serializable, java.io.OutputStream)",
        "snippet": "    public static void serialize(Serializable obj, OutputStream outputStream) {\n        if (outputStream == null) {\n            throw new IllegalArgumentException(\"The OutputStream must not be null\");\n        }\n        ObjectOutputStream out = null;\n        try {\n            // stream closed in the finally\n            out = new ObjectOutputStream(outputStream);\n            out.writeObject(obj);\n            \n        } catch (IOException ex) {\n            throw new SerializationException(ex);\n        } finally {\n            try {\n                if (out != null) {\n                    out.close();\n                }\n            } catch (IOException ex) {\n                // ignore close exception\n            }\n        }\n    }",
        "begin_line": 100,
        "end_line": 121,
        "comment": "\n     * <p>Serializes an <code>Object</code> to the specified stream.</p>\n     *\n     * <p>The stream will be closed once the object is written.\n     * This avoids the need for a finally clause, and maybe also exception\n     * handling, in the application code.</p>\n     * \n     * <p>The stream passed in is not buffered internally within this method.\n     * This is the responsibility of your application if desired.</p>\n     *\n     * @param obj  the object to serialize to bytes, may be null\n     * @param outputStream  the stream to write to, must not be null\n     * @throws IllegalArgumentException if <code>outputStream</code> is <code>null</code>\n     * @throws SerializationException (runtime) if the serialization fails\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/SerializationUtils.java",
        "class_name": "org.apache.commons.lang.SerializationUtils",
        "signature": "org.apache.commons.lang.SerializationUtils.serialize(java.io.Serializable)",
        "snippet": "    public static byte[] serialize(Serializable obj) {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream(512);\n        serialize(obj, baos);\n        return baos.toByteArray();\n    }",
        "begin_line": 131,
        "end_line": 135,
        "comment": "\n     * <p>Serializes an <code>Object</code> to a byte array for\n     * storage/serialization.</p>\n     *\n     * @param obj  the object to serialize to bytes\n     * @return a byte[] with the converted Serializable\n     * @throws SerializationException (runtime) if the serialization fails\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/SerializationUtils.java",
        "class_name": "org.apache.commons.lang.SerializationUtils",
        "signature": "org.apache.commons.lang.SerializationUtils.deserialize(java.io.InputStream)",
        "snippet": "    public static Object deserialize(InputStream inputStream) {\n        if (inputStream == null) {\n            throw new IllegalArgumentException(\"The InputStream must not be null\");\n        }\n        ObjectInputStream in = null;\n        try {\n            // stream closed in the finally\n            in = new ObjectInputStream(inputStream);\n            return in.readObject();\n            \n        } catch (ClassNotFoundException ex) {\n            throw new SerializationException(ex);\n        } catch (IOException ex) {\n            throw new SerializationException(ex);\n        } finally {\n            try {\n                if (in != null) {\n                    in.close();\n                }\n            } catch (IOException ex) {\n                // ignore close exception\n            }\n        }\n    }",
        "begin_line": 154,
        "end_line": 177,
        "comment": "\n     * <p>Deserializes an <code>Object</code> from the specified stream.</p>\n     *\n     * <p>The stream will be closed once the object is written. This\n     * avoids the need for a finally clause, and maybe also exception\n     * handling, in the application code.</p>\n     * \n     * <p>The stream passed in is not buffered internally within this method.\n     * This is the responsibility of your application if desired.</p>\n     *\n     * @param inputStream  the serialized object input stream, must not be null\n     * @return the deserialized object\n     * @throws IllegalArgumentException if <code>inputStream</code> is <code>null</code>\n     * @throws SerializationException (runtime) if the serialization fails\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/SerializationUtils.java",
        "class_name": "org.apache.commons.lang.SerializationUtils",
        "signature": "org.apache.commons.lang.SerializationUtils.deserialize(byte[])",
        "snippet": "    public static Object deserialize(byte[] objectData) {\n        if (objectData == null) {\n            throw new IllegalArgumentException(\"The byte[] must not be null\");\n        }\n        ByteArrayInputStream bais = new ByteArrayInputStream(objectData);\n        return deserialize(bais);\n    }",
        "begin_line": 187,
        "end_line": 193,
        "comment": "\n     * <p>Deserializes a single <code>Object</code> from an array of bytes.</p>\n     *\n     * @param objectData  the serialized object, must not be null\n     * @return the deserialized object\n     * @throws IllegalArgumentException if <code>objectData</code> is <code>null</code>\n     * @throws SerializationException (runtime) if the serialization fails\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ClassUtils.java",
        "class_name": "org.apache.commons.lang.ClassUtils",
        "signature": "org.apache.commons.lang.ClassUtils.ClassUtils()",
        "snippet": "    public ClassUtils() {\n      super();\n    }",
        "begin_line": 102,
        "end_line": 104,
        "comment": "\n     * <p>ClassUtils instances should NOT be constructed in standard programming.\n     * Instead, the class should be used as\n     * <code>ClassUtils.getShortClassName(cls)</code>.</p>\n     *\n     * <p>This constructor is public to permit tools that require a JavaBean\n     * instance to operate.</p>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ClassUtils.java",
        "class_name": "org.apache.commons.lang.ClassUtils",
        "signature": "org.apache.commons.lang.ClassUtils.getShortClassName(java.lang.Object, java.lang.String)",
        "snippet": "    public static String getShortClassName(Object object, String valueIfNull) {\n        if (object == null) {\n            return valueIfNull;\n        }\n        return getShortClassName(object.getClass().getName());\n    }",
        "begin_line": 115,
        "end_line": 120,
        "comment": "\n     * <p>Gets the class name minus the package name for an <code>Object</code>.</p>\n     *\n     * @param object  the class to get the short name for, may be null\n     * @param valueIfNull  the value to return if null\n     * @return the class name of the object without the package name, or the null value\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ClassUtils.java",
        "class_name": "org.apache.commons.lang.ClassUtils",
        "signature": "org.apache.commons.lang.ClassUtils.getShortClassName(java.lang.Class)",
        "snippet": "    public static String getShortClassName(Class cls) {\n        if (cls == null) {\n            return StringUtils.EMPTY;\n        }\n        return getShortClassName(cls.getName());\n    }",
        "begin_line": 128,
        "end_line": 133,
        "comment": "\n     * <p>Gets the class name minus the package name from a <code>Class</code>.</p>\n     *\n     * @param cls  the class to get the short name for.\n     * @return the class name without the package name or an empty string\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ClassUtils.java",
        "class_name": "org.apache.commons.lang.ClassUtils",
        "signature": "org.apache.commons.lang.ClassUtils.getShortClassName(java.lang.String)",
        "snippet": "    public static String getShortClassName(String className) {\n        if (className == null) {\n            return StringUtils.EMPTY;\n        }\n        if (className.length() == 0) {\n            return StringUtils.EMPTY;\n        }\n        char[] chars = className.toCharArray();\n        int lastDot = 0;\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == PACKAGE_SEPARATOR_CHAR) {\n                lastDot = i + 1;\n            } else if (chars[i] == INNER_CLASS_SEPARATOR_CHAR) {  // handle inner classes\n                chars[i] = PACKAGE_SEPARATOR_CHAR;\n            }\n        }\n        return new String(chars, lastDot, chars.length - lastDot);\n    }",
        "begin_line": 143,
        "end_line": 160,
        "comment": "\n     * <p>Gets the class name minus the package name from a String.</p>\n     *\n     * <p>The string passed in is assumed to be a class name - it is not checked.</p>\n     *\n     * @param className  the className to get the short name for\n     * @return the class name of the class without the package name or an empty string\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ClassUtils.java",
        "class_name": "org.apache.commons.lang.ClassUtils",
        "signature": "org.apache.commons.lang.ClassUtils.getPackageName(java.lang.Object, java.lang.String)",
        "snippet": "    public static String getPackageName(Object object, String valueIfNull) {\n        if (object == null) {\n            return valueIfNull;\n        }\n        return getPackageName(object.getClass().getName());\n    }",
        "begin_line": 171,
        "end_line": 176,
        "comment": "\n     * <p>Gets the package name of an <code>Object</code>.</p>\n     *\n     * @param object  the class to get the package name for, may be null\n     * @param valueIfNull  the value to return if null\n     * @return the package name of the object, or the null value\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ClassUtils.java",
        "class_name": "org.apache.commons.lang.ClassUtils",
        "signature": "org.apache.commons.lang.ClassUtils.getPackageName(java.lang.Class)",
        "snippet": "    public static String getPackageName(Class cls) {\n        if (cls == null) {\n            return StringUtils.EMPTY;\n        }\n        return getPackageName(cls.getName());\n    }",
        "begin_line": 184,
        "end_line": 189,
        "comment": "\n     * <p>Gets the package name of a <code>Class</code>.</p>\n     *\n     * @param cls  the class to get the package name for, may be <code>null</code>.\n     * @return the package name or an empty string\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ClassUtils.java",
        "class_name": "org.apache.commons.lang.ClassUtils",
        "signature": "org.apache.commons.lang.ClassUtils.getPackageName(java.lang.String)",
        "snippet": "    public static String getPackageName(String className) {\n        if (className == null) {\n            return StringUtils.EMPTY;\n        }\n        int i = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);\n        if (i == -1) {\n            return StringUtils.EMPTY;\n        }\n        return className.substring(0, i);\n    }",
        "begin_line": 200,
        "end_line": 209,
        "comment": "\n     * <p>Gets the package name from a <code>String</code>.</p>\n     *\n     * <p>The string passed in is assumed to be a class name - it is not checked.</p>\n     * <p>If the class is unpackaged, return an empty string.</p>\n     *\n     * @param className  the className to get the package name for, may be <code>null</code>\n     * @return the package name or an empty string\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ClassUtils.java",
        "class_name": "org.apache.commons.lang.ClassUtils",
        "signature": "org.apache.commons.lang.ClassUtils.getAllSuperclasses(java.lang.Class)",
        "snippet": "    public static List getAllSuperclasses(Class cls) {\n        if (cls == null) {\n            return null;\n        }\n        List classes = new ArrayList();\n        Class superclass = cls.getSuperclass();\n        while (superclass != null) {\n            classes.add(superclass);\n            superclass = superclass.getSuperclass();\n        }\n        return classes;\n    }",
        "begin_line": 220,
        "end_line": 231,
        "comment": "\n     * <p>Gets a <code>List</code> of superclasses for the given class.</p>\n     *\n     * @param cls  the class to look up, may be <code>null</code>\n     * @return the <code>List</code> of superclasses in order going up from this one\n     *  <code>null</code> if null input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ClassUtils.java",
        "class_name": "org.apache.commons.lang.ClassUtils",
        "signature": "org.apache.commons.lang.ClassUtils.getAllInterfaces(java.lang.Class)",
        "snippet": "    public static List getAllInterfaces(Class cls) {\n        if (cls == null) {\n            return null;\n        }\n        List list = new ArrayList();\n        while (cls != null) {\n            Class[] interfaces = cls.getInterfaces();\n            for (int i = 0; i < interfaces.length; i++) {\n                if (list.contains(interfaces[i]) == false) {\n                    list.add(interfaces[i]);\n                }\n                List superInterfaces = getAllInterfaces(interfaces[i]);\n                for (Iterator it = superInterfaces.iterator(); it.hasNext();) {\n                    Class intface = (Class) it.next();\n                    if (list.contains(intface) == false) {\n                        list.add(intface);\n                    }\n                }\n            }\n            cls = cls.getSuperclass();\n        }\n        return list;\n    }",
        "begin_line": 246,
        "end_line": 268,
        "comment": "\n     * <p>Gets a <code>List</code> of all interfaces implemented by the given\n     * class and its superclasses.</p>\n     *\n     * <p>The order is determined by looking through each interface in turn as\n     * declared in the source file and following its hierarchy up. Then each\n     * superclass is considered in the same way. Later duplicates are ignored,\n     * so the order is maintained.</p>\n     *\n     * @param cls  the class to look up, may be <code>null</code>\n     * @return the <code>List</code> of interfaces in order,\n     *  <code>null</code> if null input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ClassUtils.java",
        "class_name": "org.apache.commons.lang.ClassUtils",
        "signature": "org.apache.commons.lang.ClassUtils.convertClassNamesToClasses(java.util.List)",
        "snippet": "    public static List convertClassNamesToClasses(List classNames) {\n        if (classNames == null) {\n            return null;\n        }\n        List classes = new ArrayList(classNames.size());\n        for (Iterator it = classNames.iterator(); it.hasNext();) {\n            String className = (String) it.next();\n            try {\n                classes.add(Class.forName(className));\n            } catch (Exception ex) {\n                classes.add(null);\n            }\n        }\n        return classes;\n    }",
        "begin_line": 284,
        "end_line": 298,
        "comment": "\n     * <p>Given a <code>List</code> of class names, this method converts them into classes.</p>\n     *\n     * <p>A new <code>List</code> is returned. If the class name cannot be found, <code>null</code>\n     * is stored in the <code>List</code>. If the class name in the <code>List</code> is\n     * <code>null</code>, <code>null</code> is stored in the output <code>List</code>.</p>\n     *\n     * @param classNames  the classNames to change\n     * @return a <code>List</code> of Class objects corresponding to the class names,\n     *  <code>null</code> if null input\n     * @throws ClassCastException if classNames contains a non String entry\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ClassUtils.java",
        "class_name": "org.apache.commons.lang.ClassUtils",
        "signature": "org.apache.commons.lang.ClassUtils.convertClassesToClassNames(java.util.List)",
        "snippet": "    public static List convertClassesToClassNames(List classes) {\n        if (classes == null) {\n            return null;\n        }\n        List classNames = new ArrayList(classes.size());\n        for (Iterator it = classes.iterator(); it.hasNext();) {\n            Class cls = (Class) it.next();\n            if (cls == null) {\n                classNames.add(null);\n            } else {\n                classNames.add(cls.getName());\n            }\n        }\n        return classNames;\n    }",
        "begin_line": 312,
        "end_line": 326,
        "comment": "\n     * <p>Given a <code>List</code> of <code>Class</code> objects, this method converts\n     * them into class names.</p>\n     *\n     * <p>A new <code>List</code> is returned. <code>null</code> objects will be copied into\n     * the returned list as <code>null</code>.</p>\n     *\n     * @param classes  the classes to change\n     * @return a <code>List</code> of class names corresponding to the Class objects,\n     *  <code>null</code> if null input\n     * @throws ClassCastException if <code>classes</code> contains a non-<code>Class</code> entry\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ClassUtils.java",
        "class_name": "org.apache.commons.lang.ClassUtils",
        "signature": "org.apache.commons.lang.ClassUtils.isAssignable(java.lang.Class[], java.lang.Class[])",
        "snippet": "    public static boolean isAssignable(Class[] classArray, Class[] toClassArray) {\n        if (ArrayUtils.isSameLength(classArray, toClassArray) == false) {\n            return false;\n        }\n        if (classArray == null) {\n            classArray = ArrayUtils.EMPTY_CLASS_ARRAY;\n        }\n        if (toClassArray == null) {\n            toClassArray = ArrayUtils.EMPTY_CLASS_ARRAY;\n        }\n        for (int i = 0; i < classArray.length; i++) {\n            if (isAssignable(classArray[i], toClassArray[i]) == false) {\n                return false;\n            }\n        }\n        return true;\n    }",
        "begin_line": 361,
        "end_line": 377,
        "comment": "\n     * <p>Checks if an array of Classes can be assigned to another array of Classes.</p>\n     *\n     * <p>This method calls {@link #isAssignable(Class, Class) isAssignable} for each\n     * Class pair in the input arrays. It can be used to check if a set of arguments\n     * (the first parameter) are suitably compatible with a set of method parameter types\n     * (the second parameter).</p>\n     *\n     * <p>Unlike the {@link Class#isAssignableFrom(java.lang.Class)} method, this\n     * method takes into account widenings of primitive classes and\n     * <code>null</code>s.</p>\n     *\n     * <p>Primitive widenings allow an int to be assigned to a <code>long</code>,\n     * <code>float</code> or <code>double</code>. This method returns the correct\n     * result for these cases.</p>\n     *\n     * <p><code>Null</code> may be assigned to any reference type. This method will\n     * return <code>true</code> if <code>null</code> is passed in and the toClass is\n     * non-primitive.</p>\n     *\n     * <p>Specifically, this method tests whether the type represented by the\n     * specified <code>Class</code> parameter can be converted to the type\n     * represented by this <code>Class</code> object via an identity conversion\n     * widening primitive or widening reference conversion. See\n     * <em><a href=\"http://java.sun.com/docs/books/jls/\">The Java Language Specification</a></em>,\n     * sections 5.1.1, 5.1.2 and 5.1.4 for details.</p>\n     *\n     * @param classArray  the array of Classes to check, may be <code>null</code>\n     * @param toClassArray  the array of Classes to try to assign into, may be <code>null</code>\n     * @return <code>true</code> if assignment possible\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ClassUtils.java",
        "class_name": "org.apache.commons.lang.ClassUtils",
        "signature": "org.apache.commons.lang.ClassUtils.isAssignable(java.lang.Class, java.lang.Class)",
        "snippet": "    public static boolean isAssignable(Class cls, Class toClass) {\n        if (toClass == null) {\n            return false;\n        }\n        // have to check for null, as isAssignableFrom doesn't\n        if (cls == null) {\n            return !(toClass.isPrimitive());\n        }\n        if (cls.equals(toClass)) {\n            return true;\n        }\n        if (cls.isPrimitive()) {\n            if (toClass.isPrimitive() == false) {\n                return false;\n            }\n            if (Integer.TYPE.equals(cls)) {\n                return Long.TYPE.equals(toClass)\n                    || Float.TYPE.equals(toClass)\n                    || Double.TYPE.equals(toClass);\n            }\n            if (Long.TYPE.equals(cls)) {\n                return Float.TYPE.equals(toClass)\n                    || Double.TYPE.equals(toClass);\n            }\n            if (Boolean.TYPE.equals(cls)) {\n                return false;\n            }\n            if (Double.TYPE.equals(cls)) {\n                return false;\n            }\n            if (Float.TYPE.equals(cls)) {\n                return Double.TYPE.equals(toClass);\n            }\n            if (Character.TYPE.equals(cls)) {\n                return Integer.TYPE.equals(toClass)\n                    || Long.TYPE.equals(toClass)\n                    || Float.TYPE.equals(toClass)\n                    || Double.TYPE.equals(toClass);\n            }\n            if (Short.TYPE.equals(cls)) {\n                return Integer.TYPE.equals(toClass)\n                    || Long.TYPE.equals(toClass)\n                    || Float.TYPE.equals(toClass)\n                    || Double.TYPE.equals(toClass);\n            }\n            if (Byte.TYPE.equals(cls)) {\n                return Short.TYPE.equals(toClass)\n                    || Integer.TYPE.equals(toClass)\n                    || Long.TYPE.equals(toClass)\n                    || Float.TYPE.equals(toClass)\n                    || Double.TYPE.equals(toClass);\n            }\n            // should never get here\n            return false;\n        }\n        return toClass.isAssignableFrom(cls);\n    }",
        "begin_line": 405,
        "end_line": 461,
        "comment": "\n     * <p>Checks if one <code>Class</code> can be assigned to a variable of\n     * another <code>Class</code>.</p>\n     *\n     * <p>Unlike the {@link Class#isAssignableFrom(java.lang.Class)} method,\n     * this method takes into account widenings of primitive classes and\n     * <code>null</code>s.</p>\n     *\n     * <p>Primitive widenings allow an int to be assigned to a long, float or\n     * double. This method returns the correct result for these cases.</p>\n     *\n     * <p><code>Null</code> may be assigned to any reference type. This method\n     * will return <code>true</code> if <code>null</code> is passed in and the\n     * toClass is non-primitive.</p>\n     *\n     * <p>Specifically, this method tests whether the type represented by the\n     * specified <code>Class</code> parameter can be converted to the type\n     * represented by this <code>Class</code> object via an identity conversion\n     * widening primitive or widening reference conversion. See\n     * <em><a href=\"http://java.sun.com/docs/books/jls/\">The Java Language Specification</a></em>,\n     * sections 5.1.1, 5.1.2 and 5.1.4 for details.</p>\n     *\n     * @param cls  the Class to check, may be null\n     * @param toClass  the Class to try to assign into, returns false if null\n     * @return <code>true</code> if assignment possible\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ClassUtils.java",
        "class_name": "org.apache.commons.lang.ClassUtils",
        "signature": "org.apache.commons.lang.ClassUtils.primitiveToWrapper(java.lang.Class)",
        "snippet": "    public static Class primitiveToWrapper(Class cls) {\n        Class convertedClass = cls;\n        if (cls != null && cls.isPrimitive()) {\n            convertedClass = (Class) primitiveWrapperMap.get(cls);\n        }\n        return convertedClass;\n    }",
        "begin_line": 475,
        "end_line": 481,
        "comment": "\n     * <p>Converts the specified primitive Class object to its corresponding\n     * wrapper Class object.</p>\n     *\n     * <p>NOTE: From v2.2, this method handles <code>Void.TYPE</code>,\n     * returning <code>Void.TYPE</code>.</p>\n     *\n     * @param cls  the class to convert, may be null\n     * @return the wrapper class for <code>cls</code> or <code>cls</code> if\n     * <code>cls</code> is not a primitive. <code>null</code> if null input.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ClassUtils.java",
        "class_name": "org.apache.commons.lang.ClassUtils",
        "signature": "org.apache.commons.lang.ClassUtils.primitivesToWrappers(java.lang.Class[])",
        "snippet": "    public static Class[] primitivesToWrappers(Class[] classes) {\n        if (classes == null) {\n            return null;\n        }\n\n        if (classes.length == 0) {\n            return classes;\n        }\n\n        Class[] convertedClasses = new Class[classes.length];\n        for (int i=0; i < classes.length; i++) {\n            convertedClasses[i] = primitiveToWrapper( classes[i] );\n        }\n        return convertedClasses;\n    }",
        "begin_line": 493,
        "end_line": 507,
        "comment": "\n     * <p>Converts the specified array of primitive Class objects to an array of\n     * its corresponding wrapper Class objects.</p>\n     *\n     * @param classes  the class array to convert, may be null or empty\n     * @return an array which contains for each given class, the wrapper class or\n     * the original class if class is not a primitive. <code>null</code> if null input.\n     * Empty array if an empty array passed in.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ClassUtils.java",
        "class_name": "org.apache.commons.lang.ClassUtils",
        "signature": "org.apache.commons.lang.ClassUtils.isInnerClass(java.lang.Class)",
        "snippet": "    public static boolean isInnerClass(Class cls) {\n        if (cls == null) {\n            return false;\n        }\n        return cls.getName().indexOf(INNER_CLASS_SEPARATOR_CHAR) >= 0;\n    }",
        "begin_line": 518,
        "end_line": 523,
        "comment": "\n     * <p>Is the specified class an inner class or static nested class.</p>\n     *\n     * @param cls  the class to check, may be null\n     * @return <code>true</code> if the class is an inner or static nested class,\n     *  false if not or <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ClassUtils.java",
        "class_name": "org.apache.commons.lang.ClassUtils",
        "signature": "org.apache.commons.lang.ClassUtils.getClass(java.lang.ClassLoader, java.lang.String, boolean)",
        "snippet": "    public static Class getClass(\n            ClassLoader classLoader, String className, boolean initialize) throws ClassNotFoundException {\n        Class clazz;\n        if (abbreviationMap.containsKey(className)) {\n            String clsName = \"[\" + abbreviationMap.get(className);\n            clazz = Class.forName(clsName, initialize, classLoader).getComponentType();\n        } else {\n            clazz = Class.forName(toProperClassName(className), initialize, classLoader);\n        }\n        return clazz;\n    }",
        "begin_line": 538,
        "end_line": 548,
        "comment": "\n     * Returns the class represented by <code>className</code> using the\n     * <code>classLoader</code>.  This implementation supports names like\n     * \"<code>java.lang.String[]</code>\" as well as \"<code>[Ljava.lang.String;</code>\".\n     *\n     * @param classLoader  the class loader to use to load the class\n     * @param className  the class name\n     * @param initialize  whether the class must be initialized\n     * @return the class represented by <code>className</code> using the <code>classLoader</code>\n     * @throws ClassNotFoundException if the class is not found\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ClassUtils.java",
        "class_name": "org.apache.commons.lang.ClassUtils",
        "signature": "org.apache.commons.lang.ClassUtils.getClass(java.lang.ClassLoader, java.lang.String)",
        "snippet": "    public static Class getClass(ClassLoader classLoader, String className) throws ClassNotFoundException {\n        return getClass(classLoader, className, true);\n    }",
        "begin_line": 561,
        "end_line": 563,
        "comment": "\n     * Returns the (initialized) class represented by <code>className</code>\n     * using the <code>classLoader</code>.  This implementation supports names\n     * like \"<code>java.lang.String[]</code>\" as well as\n     * \"<code>[Ljava.lang.String;</code>\".\n     *\n     * @param classLoader  the class loader to use to load the class\n     * @param className  the class name\n     * @return the class represented by <code>className</code> using the <code>classLoader</code>\n     * @throws ClassNotFoundException if the class is not found\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ClassUtils.java",
        "class_name": "org.apache.commons.lang.ClassUtils",
        "signature": "org.apache.commons.lang.ClassUtils.getClass(java.lang.String)",
        "snippet": "    public static Class getClass(String className) throws ClassNotFoundException {\n        return getClass(className, true);\n    }",
        "begin_line": 575,
        "end_line": 577,
        "comment": "\n     * Returns the (initialized )class represented by <code>className</code>\n     * using the current thread's context class loader. This implementation\n     * supports names like \"<code>java.lang.String[]</code>\" as well as\n     * \"<code>[Ljava.lang.String;</code>\".\n     *\n     * @param className  the class name\n     * @return the class represented by <code>className</code> using the current thread's context class loader\n     * @throws ClassNotFoundException if the class is not found\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ClassUtils.java",
        "class_name": "org.apache.commons.lang.ClassUtils",
        "signature": "org.apache.commons.lang.ClassUtils.getClass(java.lang.String, boolean)",
        "snippet": "    public static Class getClass(String className, boolean initialize) throws ClassNotFoundException {\n        ClassLoader contextCL = Thread.currentThread().getContextClassLoader();\n        ClassLoader loader = contextCL == null ? ClassUtils.class.getClassLoader() : contextCL;\n        return getClass(loader, className, initialize );\n    }",
        "begin_line": 590,
        "end_line": 594,
        "comment": "\n     * Returns the class represented by <code>className</code> using the\n     * current thread's context class loader. This implementation supports\n     * names like \"<code>java.lang.String[]</code>\" as well as\n     * \"<code>[Ljava.lang.String;</code>\".\n     *\n     * @param className  the class name\n     * @param initialize  whether the class must be initialized\n     * @return the class represented by <code>className</code> using the current thread's context class loader\n     * @throws ClassNotFoundException if the class is not found\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ClassUtils.java",
        "class_name": "org.apache.commons.lang.ClassUtils",
        "signature": "org.apache.commons.lang.ClassUtils.getPublicMethod(java.lang.Class, java.lang.String, java.lang.Class[])",
        "snippet": "    public static Method getPublicMethod(Class cls, String methodName, Class parameterTypes[]) \n            throws SecurityException, NoSuchMethodException {\n        \n        Method declaredMethod = cls.getMethod(methodName, parameterTypes);\n        if (Modifier.isPublic(declaredMethod.getDeclaringClass().getModifiers())) {\n            return declaredMethod;\n        }\n        \n        List candidateClasses = new ArrayList();\n        candidateClasses.addAll(getAllInterfaces(cls));\n        candidateClasses.addAll(getAllSuperclasses(cls));\n        \n        for (Iterator it = candidateClasses.iterator(); it.hasNext(); ) {\n            Class candidateClass = (Class) it.next();\n            if (!Modifier.isPublic(candidateClass.getModifiers())) {\n                continue;\n            }\n            Method candidateMethod;\n            try {\n                candidateMethod = candidateClass.getMethod(methodName, parameterTypes);\n            } catch (NoSuchMethodException ex) {\n                continue;\n            }\n            if (Modifier.isPublic(candidateMethod.getDeclaringClass().getModifiers())) {\n                return candidateMethod;\n            }\n        }\n        \n        throw new NoSuchMethodException(\"Can't find a public method for \" +\n                methodName + \" \" + ArrayUtils.toString(parameterTypes));\n    }",
        "begin_line": 619,
        "end_line": 649,
        "comment": "\n     * <p>Returns the desired Method much like <code>Class.getMethod</code>, however \n     * it ensures that the returned Method is from a public class or interface and not \n     * from an anonymous inner class. This means that the Method is invokable and \n     * doesn't fall foul of Java bug \n     * <a href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4071957\">4071957</a>).\n     *\n     *  <code><pre>Set set = Collections.unmodifiableSet(...);\n     *  Method method = ClassUtils.getPublicMethod(set.getClass(), \"isEmpty\",  new Class[0]);\n     *  Object result = method.invoke(set, new Object[]);</pre></code>\n     * </p>\n     *\n     * @param cls  the class to check, not null\n     * @param methodName  the name of the method\n     * @param parameterTypes  the list of parameters\n     * @return the method\n     * @throws NullPointerException if the class is null\n     * @throws SecurityException if a a security violation occured\n     * @throws NoSuchMethodException if the method is not found in the given class\n     *  or if the metothod doen't conform with the requirements\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/ClassUtils.java",
        "class_name": "org.apache.commons.lang.ClassUtils",
        "signature": "org.apache.commons.lang.ClassUtils.toProperClassName(java.lang.String)",
        "snippet": "    private static String toProperClassName(String className) {\n        className = StringUtils.deleteWhitespace(className);\n        if (className == null) {\n            throw new NullArgumentException(\"className\");\n        } else if (className.endsWith(\"[]\")) {\n            StringBuffer classNameBuffer = new StringBuffer();\n            while (className.endsWith(\"[]\")) {\n                className = className.substring(0, className.length() - 2);\n                classNameBuffer.append(\"[\");\n            }\n            String abbreviation = (String) abbreviationMap.get(className);\n            if (abbreviation != null) {\n                classNameBuffer.append(abbreviation);\n            } else {\n                classNameBuffer.append(\"L\").append(className).append(\";\");\n            }\n            className = classNameBuffer.toString();\n        }\n        return className;\n    }",
        "begin_line": 658,
        "end_line": 677,
        "comment": "\n     * Converts a class name to a JLS style class name.\n     *\n     * @param className  the class name\n     * @return the converted name\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Validate.java",
        "class_name": "org.apache.commons.lang.Validate",
        "signature": "org.apache.commons.lang.Validate.Validate()",
        "snippet": "    public Validate() {\n      super();\n    }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "\n     * Constructor. This class should not normally be instantiated.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Validate.java",
        "class_name": "org.apache.commons.lang.Validate",
        "signature": "org.apache.commons.lang.Validate.isTrue(boolean, java.lang.String, java.lang.Object)",
        "snippet": "    public static void isTrue(boolean expression, String message, Object value) {\n        if (expression == false) {\n            throw new IllegalArgumentException(message + value);\n        }\n    }",
        "begin_line": 75,
        "end_line": 79,
        "comment": "\n     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n     * if the test result is <code>false</code>.</p>\n     * \n     * <p>This is used when validating according to an arbitrary boolean expression,\n     * such as validating a primitive number or using your own custom validation \n     * expression.</p>\n     *\n     * <pre>\n     * Validate.isTrue( myObject.isOk(), \"The object is not OK: \", myObject);\n     * </pre>\n     *\n     * <p>For performance reasons, the object is passed as a separate parameter and\n     * appended to the message string only in the case of an error.</p>\n     * \n     * @param expression  a boolean expression\n     * @param message  the exception message you would like to see if the\n     *  expression is <code>false</code>\n     * @param value  the value to append to the message in case of error\n     * @throws IllegalArgumentException if expression is <code>false</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Validate.java",
        "class_name": "org.apache.commons.lang.Validate",
        "signature": "org.apache.commons.lang.Validate.isTrue(boolean, java.lang.String, long)",
        "snippet": "    public static void isTrue(boolean expression, String message, long value) {\n        if (expression == false) {\n            throw new IllegalArgumentException(message + value);\n        }\n    }",
        "begin_line": 101,
        "end_line": 105,
        "comment": "\n     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n     * if the test result is <code>false</code>.</p>\n     * \n     * <p>This is used when validating according to an arbitrary boolean expression,\n     * such as validating a primitive number or using your own custom validation \n     * expression.</p>\n     *\n     * <pre>\n     * Validate.isTrue( i > 0, \"The value must be greater than zero: \", i);\n     * </pre>\n     *\n     * <p>For performance reasons, the long value is passed as a separate parameter and\n     * appended to the message string only in the case of an error.</p>\n     * \n     * @param expression  a boolean expression\n     * @param message  the exception message you would like to see if the expression is <code>false</code>\n     * @param value  the value to append to the message in case of error\n     * @throws IllegalArgumentException if expression is <code>false</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Validate.java",
        "class_name": "org.apache.commons.lang.Validate",
        "signature": "org.apache.commons.lang.Validate.isTrue(boolean, java.lang.String, double)",
        "snippet": "    public static void isTrue(boolean expression, String message, double value) {\n        if (expression == false) {\n            throw new IllegalArgumentException(message + value);\n        }\n    }",
        "begin_line": 128,
        "end_line": 132,
        "comment": "\n     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n     * if the test result is <code>false</code>.</p>\n     * \n     * <p>This is used when validating according to an arbitrary boolean expression,\n     * such as validating a primitive number or using your own custom validation \n     * expression.</p>\n     *\n     * <pre>\n     * Validate.isTrue( d > 0.0, \"The value must be greater than zero: \", d);\n     * </pre>\n     *\n     * <p>For performance reasons, the double value is passed as a separate parameter and\n     * appended to the message string only in the case of an error.</p>\n     * \n     * @param expression  a boolean expression\n     * @param message  the exception message you would like to see if the expression\n     *  is <code>false</code>\n     * @param value  the value to append to the message in case of error\n     * @throws IllegalArgumentException if expression is <code>false</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Validate.java",
        "class_name": "org.apache.commons.lang.Validate",
        "signature": "org.apache.commons.lang.Validate.isTrue(boolean, java.lang.String)",
        "snippet": "    public static void isTrue(boolean expression, String message) {\n        if (expression == false) {\n            throw new IllegalArgumentException(message);\n        }\n    }",
        "begin_line": 155,
        "end_line": 159,
        "comment": "\n     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n     * if the test result is <code>false</code>.</p>\n     * \n     * <p>This is used when validating according to an arbitrary boolean expression,\n     * such as validating a primitive number or using your own custom validation \n     * expression.</p>\n     *\n     * <pre>\n     * Validate.isTrue( (i > 0), \"The value must be greater than zero\");\n     * Validate.isTrue( myObject.isOk(), \"The object is not OK\");\n     * </pre>\n     *\n     * <p>For performance reasons, the message string should not involve a string append,\n     * instead use the {@link #isTrue(boolean, String, Object)} method.</p>\n     * \n     * @param expression  a boolean expression\n     * @param message  the exception message you would like to see if the expression\n     *  is <code>false</code>\n     * @throws IllegalArgumentException if expression is <code>false</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Validate.java",
        "class_name": "org.apache.commons.lang.Validate",
        "signature": "org.apache.commons.lang.Validate.isTrue(boolean)",
        "snippet": "    public static void isTrue(boolean expression) {\n        if (expression == false) {\n            throw new IllegalArgumentException(\"The validated expression is false\");\n        }\n    }",
        "begin_line": 179,
        "end_line": 183,
        "comment": "\n     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n     * if the test result is <code>false</code>.</p>\n     * \n     * <p>This is used when validating according to an arbitrary boolean expression,\n     * such as validating a primitive number or using your own custom validation \n     * expression.</p>\n     *\n     * <pre>\n     * Validate.isTrue( i > 0 );\n     * Validate.isTrue( myObject.isOk() );\n     * </pre>\n     *\n     * <p>The message in the exception is 'The validated expression is false'.</p>\n     * \n     * @param expression  a boolean expression\n     * @throws IllegalArgumentException if expression is <code>false</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Validate.java",
        "class_name": "org.apache.commons.lang.Validate",
        "signature": "org.apache.commons.lang.Validate.notNull(java.lang.Object, java.lang.String)",
        "snippet": "    public static void notNull(Object object, String message) {\n        if (object == null) {\n            throw new IllegalArgumentException(message);\n        }\n    }",
        "begin_line": 201,
        "end_line": 205,
        "comment": "\n     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n     * if the argument is <code>null</code>.</p>\n     *\n     * <pre>\n     * Validate.notNull(myObject, \"The object must not be null\");\n     * </pre>\n     * \n     * @param object  the object to check is not <code>null</code>\n     * @param message  the exception message you would like to see\n     *  if the object is <code>null</code>\n     * @throws IllegalArgumentException if the object is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Validate.java",
        "class_name": "org.apache.commons.lang.Validate",
        "signature": "org.apache.commons.lang.Validate.notNull(java.lang.Object)",
        "snippet": "    public static void notNull(Object object) {\n        if (object == null) {\n            throw new IllegalArgumentException(\"The validated object is null\");\n        }\n    }",
        "begin_line": 220,
        "end_line": 224,
        "comment": "\n     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n     * if the argument is <code>null</code>.</p>\n     *\n     * <pre>\n     * Validate.notNull(myObject);\n     * </pre>\n     *\n     * <p>The message in the exception is 'The validated object is null'.</p>\n     * \n     * @param object  the object to check is not <code>null</code>\n     * @throws IllegalArgumentException if the object is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Validate.java",
        "class_name": "org.apache.commons.lang.Validate",
        "signature": "org.apache.commons.lang.Validate.notEmpty(java.lang.Object[], java.lang.String)",
        "snippet": "    public static void notEmpty(Object[] array, String message) {\n        if (array == null || array.length == 0) {\n            throw new IllegalArgumentException(message);\n        }\n    }",
        "begin_line": 241,
        "end_line": 245,
        "comment": "\n     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n     * if the argument array is empty (<code>null</code> or no elements).</p>\n     *\n     * <pre>\n     * Validate.notEmpty(myArray, \"The array must not be empty\");\n     * </pre>\n     * \n     * @param array  the array to check is not empty\n     * @param message  the exception message you would like to see if the array is empty\n     * @throws IllegalArgumentException if the array is empty\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Validate.java",
        "class_name": "org.apache.commons.lang.Validate",
        "signature": "org.apache.commons.lang.Validate.notEmpty(java.lang.Object[])",
        "snippet": "    public static void notEmpty(Object[] array) {\n        if (array == null || array.length == 0) {\n            throw new IllegalArgumentException(\"The validated array is empty\");\n        }\n    }",
        "begin_line": 260,
        "end_line": 264,
        "comment": "\n     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n     * if the argument array is empty (<code>null</code> or no elements).</p>\n     *\n     * <pre>\n     * Validate.notEmpty(myArray);\n     * </pre>\n     *\n     * <p>The message in the exception is 'The validated array is empty'.\n     * \n     * @param array  the array to check is not empty\n     * @throws IllegalArgumentException if the array is empty\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Validate.java",
        "class_name": "org.apache.commons.lang.Validate",
        "signature": "org.apache.commons.lang.Validate.notEmpty(java.util.Collection, java.lang.String)",
        "snippet": "    public static void notEmpty(Collection collection, String message) {\n        if (collection == null || collection.size() == 0) {\n            throw new IllegalArgumentException(message);\n        }\n    }",
        "begin_line": 281,
        "end_line": 285,
        "comment": "\n     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n     * if the argument Collection is empty (<code>null</code> or no elements).</p>\n     *\n     * <pre>\n     * Validate.notEmpty(myCollection, \"The collection must not be empty\");\n     * </pre>\n     * \n     * @param collection  the collection to check is not empty\n     * @param message  the exception message you would like to see if the collection is empty\n     * @throws IllegalArgumentException if the collection is empty\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Validate.java",
        "class_name": "org.apache.commons.lang.Validate",
        "signature": "org.apache.commons.lang.Validate.notEmpty(java.util.Collection)",
        "snippet": "    public static void notEmpty(Collection collection) {\n        if (collection == null || collection.size() == 0) {\n            throw new IllegalArgumentException(\"The validated collection is empty\");\n        }\n    }",
        "begin_line": 300,
        "end_line": 304,
        "comment": "\n     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n     * if the argument Collection is empty (<code>null</code> or no elements).</p>\n     *\n     * <pre>\n     * Validate.notEmpty(myCollection);\n     * </pre>\n     *\n     * <p>The message in the exception is 'The validated collection is empty'.</p>\n     * \n     * @param collection  the collection to check is not empty\n     * @throws IllegalArgumentException if the collection is empty\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Validate.java",
        "class_name": "org.apache.commons.lang.Validate",
        "signature": "org.apache.commons.lang.Validate.notEmpty(java.util.Map, java.lang.String)",
        "snippet": "    public static void notEmpty(Map map, String message) {\n        if (map == null || map.size() == 0) {\n            throw new IllegalArgumentException(message);\n        }\n    }",
        "begin_line": 321,
        "end_line": 325,
        "comment": "\n     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n     * if the argument Map is empty (<code>null</code> or no elements).</p>\n     *\n     * <pre>\n     * Validate.notEmpty(myMap, \"The map must not be empty\");\n     * </pre>\n     * \n     * @param map  the map to check is not empty\n     * @param message  the exception message you would like to see if the map is empty\n     * @throws IllegalArgumentException if the map is empty\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Validate.java",
        "class_name": "org.apache.commons.lang.Validate",
        "signature": "org.apache.commons.lang.Validate.notEmpty(java.util.Map)",
        "snippet": "    public static void notEmpty(Map map) {\n        if (map == null || map.size() == 0) {\n            throw new IllegalArgumentException(\"The validated map is empty\");\n        }\n    }",
        "begin_line": 340,
        "end_line": 344,
        "comment": "\n     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n     * if the argument Map is empty (<code>null</code> or no elements).</p>\n     *\n     * <pre>\n     * Validate.notEmpty(myMap);\n     * </pre>\n     *\n     * <p>The message in the exception is 'The validated map is empty'.</p>\n     * \n     * @param map  the map to check is not empty\n     * @throws IllegalArgumentException if the map is empty\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Validate.java",
        "class_name": "org.apache.commons.lang.Validate",
        "signature": "org.apache.commons.lang.Validate.notEmpty(java.lang.String, java.lang.String)",
        "snippet": "    public static void notEmpty(String string, String message) {\n        if (string == null || string.length() == 0) {\n            throw new IllegalArgumentException(message);\n        }\n    }",
        "begin_line": 361,
        "end_line": 365,
        "comment": "\n     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n     * if the argument String is empty (<code>null</code> or zero length).</p>\n     *\n     * <pre>\n     * Validate.notEmpty(myString, \"The string must not be empty\");\n     * </pre>\n     * \n     * @param string  the string to check is not empty\n     * @param message  the exception message you would like to see if the string is empty\n     * @throws IllegalArgumentException if the string is empty\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Validate.java",
        "class_name": "org.apache.commons.lang.Validate",
        "signature": "org.apache.commons.lang.Validate.notEmpty(java.lang.String)",
        "snippet": "    public static void notEmpty(String string) {\n        if (string == null || string.length() == 0) {\n            throw new IllegalArgumentException(\"The validated string is empty\");\n        }\n    }",
        "begin_line": 380,
        "end_line": 384,
        "comment": "\n     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n     * if the argument String is empty (<code>null</code> or zero length).</p>\n     *\n     * <pre>\n     * Validate.notEmpty(myString);\n     * </pre>\n     *\n     * <p>The message in the exception is 'The validated string is empty'.</p>\n     * \n     * @param string  the string to check is not empty\n     * @throws IllegalArgumentException if the string is empty\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Validate.java",
        "class_name": "org.apache.commons.lang.Validate",
        "signature": "org.apache.commons.lang.Validate.noNullElements(java.lang.Object[], java.lang.String)",
        "snippet": "    public static void noNullElements(Object[] array, String message) {\n        Validate.notNull(array);\n        for (int i = 0; i < array.length; i++) {\n            if (array[i] == null) {\n                throw new IllegalArgumentException(message);\n            }\n        }\n    }",
        "begin_line": 406,
        "end_line": 413,
        "comment": "\n     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n     * if the argument array has <code>null</code> elements or is\n     * <code>null</code>.</p>\n     *\n     * <pre>\n     * Validate.noNullElements(myArray, \"The array must not contain null elements\");\n     * </pre>\n     * \n     * <p>If the array is null then the message in the exception is 'The validated object is null'.</p>\n     *\n     * @param array  the array to check\n     * @param message  the exception message if the array has\n     *  <code>null</code> elements\n     * @throws IllegalArgumentException if the array has <code>null</code>\n     *  elements or is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Validate.java",
        "class_name": "org.apache.commons.lang.Validate",
        "signature": "org.apache.commons.lang.Validate.noNullElements(java.lang.Object[])",
        "snippet": "    public static void noNullElements(Object[] array) {\n        Validate.notNull(array);\n        for (int i = 0; i < array.length; i++) {\n            if (array[i] == null) {\n                throw new IllegalArgumentException(\"The validated array contains null element at index: \" + i);\n            }\n        }\n    }",
        "begin_line": 433,
        "end_line": 440,
        "comment": "\n     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n     * if the argument array has <code>null</code> elements or is\n     * <code>null</code>.</p>\n     *\n     * <pre>\n     * Validate.noNullElements(myArray);\n     * </pre>\n     *\n     * <p>If the array has a null element the message in the exception is\n     * 'The validated array contains null element at index: '.</p>\n     *\n     * <p>If the array is null then the message in the exception is 'The validated object is null'.</p>\n     * \n     * @param array  the array to check\n     * @throws IllegalArgumentException if the array has <code>null</code>\n     *  elements or is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Validate.java",
        "class_name": "org.apache.commons.lang.Validate",
        "signature": "org.apache.commons.lang.Validate.noNullElements(java.util.Collection, java.lang.String)",
        "snippet": "    public static void noNullElements(Collection collection, String message) {\n        Validate.notNull(collection);\n        for (Iterator it = collection.iterator(); it.hasNext();) {\n            if (it.next() == null) {\n                throw new IllegalArgumentException(message);\n            }\n        }\n    }",
        "begin_line": 462,
        "end_line": 469,
        "comment": "\n     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n     * if the argument Collection has <code>null</code> elements or is\n     * <code>null</code>.</p>\n     *\n     * <pre>\n     * Validate.noNullElements(myCollection, \"The collection must not contain null elements\");\n     * </pre>\n     *\n     * <p>If the collection is null then the message in the exception is 'The validated object is null'.</p>\n     * \n     * @param collection  the collection to check\n     * @param message  the exception message if the collection has\n     *  <code>null</code> elements\n     * @throws IllegalArgumentException if the collection has\n     *  <code>null</code> elements or is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Validate.java",
        "class_name": "org.apache.commons.lang.Validate",
        "signature": "org.apache.commons.lang.Validate.noNullElements(java.util.Collection)",
        "snippet": "    public static void noNullElements(Collection collection) {\n        Validate.notNull(collection);\n        int i = 0;\n        for (Iterator it = collection.iterator(); it.hasNext(); i++) {\n            if (it.next() == null) {\n                throw new IllegalArgumentException(\"The validated collection contains null element at index: \" + i);\n            }\n        }\n    }",
        "begin_line": 488,
        "end_line": 496,
        "comment": "\n     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n     * if the argument Collection has <code>null</code> elements or is\n     * <code>null</code>.</p>\n     *\n     * <pre>\n     * Validate.noNullElements(myCollection);\n     * </pre>\n     *\n     * <p>The message in the exception is 'The validated collection contains null element at index: '.</p>\n     *\n     * <p>If the collection is null then the message in the exception is 'The validated object is null'.</p>\n     * \n     * @param collection  the collection to check\n     * @throws IllegalArgumentException if the collection has\n     *  <code>null</code> elements or is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Validate.java",
        "class_name": "org.apache.commons.lang.Validate",
        "signature": "org.apache.commons.lang.Validate.allElementsOfType(java.util.Collection, java.lang.Class, java.lang.String)",
        "snippet": "    public static void allElementsOfType(Collection collection, Class clazz, String message) {\n        Validate.notNull(collection);\n        Validate.notNull(clazz);\n        for (Iterator it = collection.iterator(); it.hasNext(); ) {\n            if (clazz.isInstance(it.next()) == false) {\n                throw new IllegalArgumentException(message);\n            }\n        }\n    }",
        "begin_line": 512,
        "end_line": 520,
        "comment": "\n     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n     * if the argument collection  is <code>null</code> or has elements that\n     * are not of type <code>clazz</code> or a subclass.</p>\n     *\n     * <pre>\n     * Validate.allElementsOfType(collection, String.class, \"Collection has invalid elements\");\n     * </pre>\n     *\n     * @param collection  the collection to check, not null\n     * @param clazz  the <code>Class</code> which the collection's elements are expected to be, not null\n     * @param message  the exception message if the <code>Collection</code> has elements not of type <code>clazz</code>\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/Validate.java",
        "class_name": "org.apache.commons.lang.Validate",
        "signature": "org.apache.commons.lang.Validate.allElementsOfType(java.util.Collection, java.lang.Class)",
        "snippet": "    public static void allElementsOfType(Collection collection, Class clazz) {\n        Validate.notNull(collection);\n        Validate.notNull(clazz);\n        int i = 0;\n        for (Iterator it = collection.iterator(); it.hasNext(); i++) {\n            if (clazz.isInstance(it.next()) == false) {\n                throw new IllegalArgumentException(\"The validated collection contains an element not of type \"\n                    + clazz.getName() + \" at index: \" + i);\n            }\n        }\n    }",
        "begin_line": 542,
        "end_line": 552,
        "comment": "\n     * <p>\n     * Validate an argument, throwing <code>IllegalArgumentException</code> if the argument collection is\n     * <code>null</code> or has elements that are not of type <code>clazz</code> or a subclass.\n     * </p>\n     * \n     * <pre>\n     * Validate.allElementsOfType(collection, String.class);\n     * </pre>\n     * \n     * <p>\n     * The message in the exception is 'The validated collection contains an element not of type clazz at index: '.\n     * </p>\n     * \n     * @param collection\n     *            the collection to check, not null\n     * @param clazz\n     *            the <code>Class</code> which the collection's elements are expected to be, not null\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/IllegalClassException.java",
        "class_name": "org.apache.commons.lang.IllegalClassException",
        "signature": "org.apache.commons.lang.IllegalClassException.IllegalClassException(java.lang.Class, java.lang.Object)",
        "snippet": "    public IllegalClassException(Class expected, Object actual) {\n        super(\n            \"Expected: \"\n                + safeGetClassName(expected)\n                + \", actual: \"\n                + (actual == null ? \"null\" : actual.getClass().getName()));\n    }",
        "begin_line": 61,
        "end_line": 67,
        "comment": "\n     * <p>Instantiates with the expected type, and actual object.</p>\n     * \n     * @param expected  the expected type\n     * @param actual  the actual object\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/IllegalClassException.java",
        "class_name": "org.apache.commons.lang.IllegalClassException",
        "signature": "org.apache.commons.lang.IllegalClassException.IllegalClassException(java.lang.Class, java.lang.Class)",
        "snippet": "    public IllegalClassException(Class expected, Class actual) {\n        super(\n            \"Expected: \"\n                + safeGetClassName(expected)\n                + \", actual: \"\n                + safeGetClassName(actual));\n    }",
        "begin_line": 75,
        "end_line": 81,
        "comment": "\n     * <p>Instantiates with the expected and actual types.</p>\n     * \n     * @param expected  the expected type\n     * @param actual  the actual type\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/IllegalClassException.java",
        "class_name": "org.apache.commons.lang.IllegalClassException",
        "signature": "org.apache.commons.lang.IllegalClassException.IllegalClassException(java.lang.String)",
        "snippet": "    public IllegalClassException(String message) {\n        super(message);\n    }",
        "begin_line": 88,
        "end_line": 90,
        "comment": "\n     * <p>Instantiates with the specified message.</p>\n     * \n     * @param message  the exception message\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/IllegalClassException.java",
        "class_name": "org.apache.commons.lang.IllegalClassException",
        "signature": "org.apache.commons.lang.IllegalClassException.safeGetClassName(java.lang.Class)",
        "snippet": "    private static final String safeGetClassName(Class cls) {\n        return cls == null ? null : cls.getName();\n    }",
        "begin_line": 99,
        "end_line": 101,
        "comment": "\n     * <p>Returns the class name or <code>null</code> if the class is\n     * <code>null</code>.</p>\n     * \n     * @param cls  a <code>Class</code>\n     * @return the name of <code>cls</code>, or <code>null</code> if if <code>cls</code> is <code>null</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharRange.java",
        "class_name": "org.apache.commons.lang.CharRange",
        "signature": "org.apache.commons.lang.CharRange.CharRange(char)",
        "snippet": "    public CharRange(char ch) {\n        this(ch, ch, false);\n    }",
        "begin_line": 57,
        "end_line": 59,
        "comment": "\n     * <p>Constructs a <code>CharRange</code> over a single character.</p>\n     *\n     * @param ch  only character in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharRange.java",
        "class_name": "org.apache.commons.lang.CharRange",
        "signature": "org.apache.commons.lang.CharRange.CharRange(char, boolean)",
        "snippet": "    public CharRange(char ch, boolean negated) {\n        this(ch, ch, negated);\n    }",
        "begin_line": 70,
        "end_line": 72,
        "comment": "\n     * <p>Constructs a <code>CharRange</code> over a single character,\n     * optionally negating the range.</p>\n     *\n     * <p>A negated range includes everything except the specified char.</p>\n     *\n     * @param ch  only character in this range\n     * @param negated  true to express everything except the range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharRange.java",
        "class_name": "org.apache.commons.lang.CharRange",
        "signature": "org.apache.commons.lang.CharRange.CharRange(char, char)",
        "snippet": "    public CharRange(char start, char end) {\n        this(start, end, false);\n    }",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\n     * <p>Constructs a <code>CharRange</code> over a set of characters.</p>\n     *\n     * @param start  first character, inclusive, in this range\n     * @param end  last character, inclusive, in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharRange.java",
        "class_name": "org.apache.commons.lang.CharRange",
        "signature": "org.apache.commons.lang.CharRange.CharRange(char, char, boolean)",
        "snippet": "    public CharRange(char start, char end, boolean negated) {\n        super();\n        if (start > end) {\n            char temp = start;\n            start = end;\n            end = temp;\n        }\n        \n        this.start = start;\n        this.end = end;\n        this.negated = negated;\n    }",
        "begin_line": 98,
        "end_line": 109,
        "comment": "\n     * <p>Constructs a <code>CharRange</code> over a set of characters,\n     * optionally negating the range.</p>\n     *\n     * <p>A negated range includes everything except that defined by the\n     * start and end characters.</p>\n     * \n     * <p>If start and end are in the wrong order, they are reversed.\n     * Thus <code>a-e</code> is the same as <code>e-a</code>.</p>\n     *\n     * @param start  first character, inclusive, in this range\n     * @param end  last character, inclusive, in this range\n     * @param negated  true to express everything except the range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharRange.java",
        "class_name": "org.apache.commons.lang.CharRange",
        "signature": "org.apache.commons.lang.CharRange.getStart()",
        "snippet": "    public char getStart() {\n        return this.start;\n    }",
        "begin_line": 118,
        "end_line": 120,
        "comment": "\n     * <p>Gets the start character for this character range.</p>\n     * \n     * @return the start char (inclusive)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharRange.java",
        "class_name": "org.apache.commons.lang.CharRange",
        "signature": "org.apache.commons.lang.CharRange.getEnd()",
        "snippet": "    public char getEnd() {\n        return this.end;\n    }",
        "begin_line": 127,
        "end_line": 129,
        "comment": "\n     * <p>Gets the end character for this character range.</p>\n     * \n     * @return the end char (inclusive)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharRange.java",
        "class_name": "org.apache.commons.lang.CharRange",
        "signature": "org.apache.commons.lang.CharRange.isNegated()",
        "snippet": "    public boolean isNegated() {\n        return negated;\n    }",
        "begin_line": 139,
        "end_line": 141,
        "comment": "\n     * <p>Is this <code>CharRange</code> negated.</p>\n     * \n     * <p>A negated range includes everything except that defined by the\n     * start and end characters.</p>\n     *\n     * @return <code>true</code> is negated\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharRange.java",
        "class_name": "org.apache.commons.lang.CharRange",
        "signature": "org.apache.commons.lang.CharRange.contains(char)",
        "snippet": "    public boolean contains(char ch) {\n        return (ch >= start && ch <= end) != negated;\n    }",
        "begin_line": 151,
        "end_line": 153,
        "comment": "\n     * <p>Is the character specified contained in this range.</p>\n     *\n     * @param ch  the character to check\n     * @return <code>true</code> if this range contains the input character\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharRange.java",
        "class_name": "org.apache.commons.lang.CharRange",
        "signature": "org.apache.commons.lang.CharRange.contains(org.apache.commons.lang.CharRange)",
        "snippet": "    public boolean contains(CharRange range) {\n        if (range == null) {\n            throw new IllegalArgumentException(\"The Range must not be null\");\n        }\n        if (negated) {\n            if (range.negated) {\n                return start >= range.start && end <= range.end;\n            } else {\n                return range.end < start || range.start > end;\n            }\n        } else {\n            if (range.negated) {\n                return start == 0 && end == Character.MAX_VALUE;\n            } else {\n                return start <= range.start && end >= range.end;\n            }\n        }\n    }",
        "begin_line": 163,
        "end_line": 180,
        "comment": "\n     * <p>Are all the characters of the passed in range contained in\n     * this range.</p>\n     *\n     * @param range  the range to check against\n     * @return <code>true</code> if this range entirely contains the input range\n     * @throws IllegalArgumentException if <code>null</code> input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharRange.java",
        "class_name": "org.apache.commons.lang.CharRange",
        "signature": "org.apache.commons.lang.CharRange.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (obj instanceof CharRange == false) {\n            return false;\n        }\n        CharRange other = (CharRange) obj;\n        return start == other.start && end == other.end && negated == other.negated;\n    }",
        "begin_line": 191,
        "end_line": 200,
        "comment": "\n     * <p>Compares two CharRange objects, returning true if they represent\n     * exactly the same range of characters defined in the same way.</p>\n     * \n     * @param obj  the object to compare to\n     * @return true if equal\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharRange.java",
        "class_name": "org.apache.commons.lang.CharRange",
        "signature": "org.apache.commons.lang.CharRange.hashCode()",
        "snippet": "    public int hashCode() {\n        return 83 + start + 7 * end + (negated ? 1 : 0);\n    }",
        "begin_line": 207,
        "end_line": 209,
        "comment": "\n     * <p>Gets a hashCode compatible with the equals method.</p>\n     * \n     * @return a suitable hashCode\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharRange.java",
        "class_name": "org.apache.commons.lang.CharRange",
        "signature": "org.apache.commons.lang.CharRange.toString()",
        "snippet": "    public String toString() {\n        if (iToString == null) {\n            StringBuffer buf = new StringBuffer(4);\n            if (isNegated()) {\n                buf.append('^');\n            }\n            buf.append(start);\n            if (start != end) {\n                buf.append('-');\n                buf.append(end);\n            }\n            iToString = buf.toString();\n        }\n        return iToString;\n    }",
        "begin_line": 216,
        "end_line": 230,
        "comment": "\n     * <p>Gets a string representation of the character range.</p>\n     * \n     * @return string representation of this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BooleanUtils.java",
        "class_name": "org.apache.commons.lang.BooleanUtils",
        "signature": "org.apache.commons.lang.BooleanUtils.BooleanUtils()",
        "snippet": "    public BooleanUtils() {\n      super();\n    }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "\n     * <p><code>BooleanUtils</code> instances should NOT be constructed in standard programming.\n     * Instead, the class should be used as <code>BooleanUtils.toBooleanObject(true);</code>.</p>\n     *\n     * <p>This constructor is public to permit tools that require a JavaBean instance\n     * to operate.</p>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BooleanUtils.java",
        "class_name": "org.apache.commons.lang.BooleanUtils",
        "signature": "org.apache.commons.lang.BooleanUtils.negate(java.lang.Boolean)",
        "snippet": "    public static Boolean negate(Boolean bool) {\n        if (bool == null) {\n            return null;\n        }\n        return (bool.booleanValue() ? Boolean.FALSE : Boolean.TRUE);\n    }",
        "begin_line": 63,
        "end_line": 68,
        "comment": "\n     * <p>Negates the specified boolean.</p>\n     * \n     * <p>If <code>null</code> is passed in, <code>null</code> will be returned.</p>\n     *\n     * <pre>\n     *   BooleanUtils.negate(Boolean.TRUE)  = Boolean.FALSE;\n     *   BooleanUtils.negate(Boolean.FALSE) = Boolean.TRUE;\n     *   BooleanUtils.negate(null)          = null;\n     * </pre>\n     * \n     * @param bool  the Boolean to negate, may be null\n     * @return the negated Boolean, or <code>null</code> if <code>null</code> input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BooleanUtils.java",
        "class_name": "org.apache.commons.lang.BooleanUtils",
        "signature": "org.apache.commons.lang.BooleanUtils.isTrue(java.lang.Boolean)",
        "snippet": "    public static boolean isTrue(Boolean bool) {\n        if (bool == null) {\n            return false;\n        }\n        return bool.booleanValue() ? true : false;\n    }",
        "begin_line": 85,
        "end_line": 90,
        "comment": "\n     * <p>Is a Boolean value <code>true</code>, handling <code>null</code>.</p>\n     *\n     * <pre>\n     *   BooleanUtils.isTrue(Boolean.TRUE)  = true\n     *   BooleanUtils.isTrue(Boolean.FALSE) = false\n     *   BooleanUtils.isTrue(null)          = false\n     * </pre>\n     *\n     * @param bool  the boolean to convert\n     * @return <code>true</code> only if the input is non-null and true\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BooleanUtils.java",
        "class_name": "org.apache.commons.lang.BooleanUtils",
        "signature": "org.apache.commons.lang.BooleanUtils.isFalse(java.lang.Boolean)",
        "snippet": "    public static boolean isFalse(Boolean bool) {\n        if (bool == null) {\n            return false;\n        }\n        return bool.booleanValue() ? false : true;\n    }",
        "begin_line": 105,
        "end_line": 110,
        "comment": "\n     * <p>Is a Boolean value <code>false</code>, handling <code>null</code>.</p>\n     *\n     * <pre>\n     *   BooleanUtils.isFalse(Boolean.TRUE)  = false\n     *   BooleanUtils.isFalse(Boolean.FALSE) = true\n     *   BooleanUtils.isFalse(null)          = false\n     * </pre>\n     *\n     * @param bool  the boolean to convert\n     * @return <code>true</code> only if the input is non-null and false\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BooleanUtils.java",
        "class_name": "org.apache.commons.lang.BooleanUtils",
        "signature": "org.apache.commons.lang.BooleanUtils.toBooleanObject(boolean)",
        "snippet": "    public static Boolean toBooleanObject(boolean bool) {\n        return bool ? Boolean.TRUE : Boolean.FALSE;\n    }",
        "begin_line": 125,
        "end_line": 127,
        "comment": "\n     * <p>Boolean factory that avoids creating new Boolean objecs all the time.</p>\n     * \n     * <p>This method was added to JDK1.4 but is available here for earlier JDKs.</p>\n     *\n     * <pre>\n     *   BooleanUtils.toBooleanObject(false) = Boolean.FALSE\n     *   BooleanUtils.toBooleanObject(true)  = Boolean.TRUE\n     * </pre>\n     *\n     * @param bool  the boolean to convert\n     * @return Boolean.TRUE or Boolean.FALSE as appropriate\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BooleanUtils.java",
        "class_name": "org.apache.commons.lang.BooleanUtils",
        "signature": "org.apache.commons.lang.BooleanUtils.toBoolean(java.lang.Boolean)",
        "snippet": "    public static boolean toBoolean(Boolean bool) {\n        if (bool == null) {\n            return false;\n        }\n        return bool.booleanValue() ? true : false;\n    }",
        "begin_line": 143,
        "end_line": 148,
        "comment": "\n     * <p>Converts a Boolean to a boolean handling <code>null</code>\n     * by returning <code>false</code>.</p>\n     *\n     * <pre>\n     *   BooleanUtils.toBoolean(Boolean.TRUE)  = true\n     *   BooleanUtils.toBoolean(Boolean.FALSE) = false\n     *   BooleanUtils.toBoolean(null)          = false\n     * </pre>\n     *\n     * @param bool  the boolean to convert\n     * @return <code>true</code> or <code>false</code>, \n     *  <code>null</code> returns <code>false</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BooleanUtils.java",
        "class_name": "org.apache.commons.lang.BooleanUtils",
        "signature": "org.apache.commons.lang.BooleanUtils.toBooleanDefaultIfNull(java.lang.Boolean, boolean)",
        "snippet": "    public static boolean toBooleanDefaultIfNull(Boolean bool, boolean valueIfNull) {\n        if (bool == null) {\n            return valueIfNull;\n        }\n        return bool.booleanValue() ? true : false;\n    }",
        "begin_line": 163,
        "end_line": 168,
        "comment": "\n     * <p>Converts a Boolean to a boolean handling <code>null</code>.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, false) = true\n     *   BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, true) = false\n     *   BooleanUtils.toBooleanDefaultIfNull(null, true)          = true\n     * </pre>\n     *\n     * @param bool  the boolean to convert\n     * @param valueIfNull  the boolean value to return if <code>null</code>\n     * @return <code>true</code> or <code>false</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BooleanUtils.java",
        "class_name": "org.apache.commons.lang.BooleanUtils",
        "signature": "org.apache.commons.lang.BooleanUtils.toBoolean(int)",
        "snippet": "    public static boolean toBoolean(int value) {\n        return value == 0 ? false : true;\n    }",
        "begin_line": 186,
        "end_line": 188,
        "comment": "\n     * <p>Converts an int to a boolean using the convention that <code>zero</code>\n     * is <code>false</code>.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toBoolean(0) = false\n     *   BooleanUtils.toBoolean(1) = true\n     *   BooleanUtils.toBoolean(2) = true\n     * </pre>\n     *\n     * @param value  the int to convert\n     * @return <code>true</code> if non-zero, <code>false</code>\n     *  if zero\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BooleanUtils.java",
        "class_name": "org.apache.commons.lang.BooleanUtils",
        "signature": "org.apache.commons.lang.BooleanUtils.toBooleanObject(int)",
        "snippet": "    public static Boolean toBooleanObject(int value) {\n        return value == 0 ? Boolean.FALSE : Boolean.TRUE;\n    }",
        "begin_line": 204,
        "end_line": 206,
        "comment": "\n     * <p>Converts an int to a Boolean using the convention that <code>zero</code>\n     * is <code>false</code>.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toBoolean(0) = Boolean.FALSE\n     *   BooleanUtils.toBoolean(1) = Boolean.TRUE\n     *   BooleanUtils.toBoolean(2) = Boolean.TRUE\n     * </pre>\n     *\n     * @param value  the int to convert\n     * @return Boolean.TRUE if non-zero, Boolean.FALSE if zero,\n     *  <code>null</code> if <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BooleanUtils.java",
        "class_name": "org.apache.commons.lang.BooleanUtils",
        "signature": "org.apache.commons.lang.BooleanUtils.toBooleanObject(java.lang.Integer)",
        "snippet": "    public static Boolean toBooleanObject(Integer value) {\n        if (value == null) {\n            return null;\n        }\n        return value.intValue() == 0 ? Boolean.FALSE : Boolean.TRUE;\n    }",
        "begin_line": 224,
        "end_line": 229,
        "comment": "\n     * <p>Converts an Integer to a Boolean using the convention that <code>zero</code>\n     * is <code>false</code>.</p>\n     * \n     * <p><code>null</code> will be converted to <code>null</code>.</p>\n     *\n     * <pre>\n     *   BooleanUtils.toBoolean(new Integer(0))    = Boolean.FALSE\n     *   BooleanUtils.toBoolean(new Integer(1))    = Boolean.TRUE\n     *   BooleanUtils.toBoolean(new Integer(null)) = null\n     * </pre>\n     *\n     * @param value  the Integer to convert\n     * @return Boolean.TRUE if non-zero, Boolean.FALSE if zero,\n     *  <code>null</code> if <code>null</code> input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BooleanUtils.java",
        "class_name": "org.apache.commons.lang.BooleanUtils",
        "signature": "org.apache.commons.lang.BooleanUtils.toBoolean(int, int, int)",
        "snippet": "    public static boolean toBoolean(int value, int trueValue, int falseValue) {\n        if (value == trueValue) {\n            return true;\n        } else if (value == falseValue) {\n            return false;\n        }\n        // no match\n        throw new IllegalArgumentException(\"The Integer did not match either specified value\");\n    }",
        "begin_line": 247,
        "end_line": 255,
        "comment": "\n     * <p>Converts an int to a boolean specifying the conversion values.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toBoolean(0, 1, 0) = false\n     *   BooleanUtils.toBoolean(1, 1, 0) = true\n     *   BooleanUtils.toBoolean(2, 1, 2) = false\n     *   BooleanUtils.toBoolean(2, 2, 0) = true\n     * </pre>\n     *\n     * @param value  the Integer to convert\n     * @param trueValue  the value to match for <code>true</code>\n     * @param falseValue  the value to match for <code>false</code>\n     * @return <code>true</code> or <code>false</code>\n     * @throws IllegalArgumentException if no match\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BooleanUtils.java",
        "class_name": "org.apache.commons.lang.BooleanUtils",
        "signature": "org.apache.commons.lang.BooleanUtils.toBoolean(java.lang.Integer, java.lang.Integer, java.lang.Integer)",
        "snippet": "    public static boolean toBoolean(Integer value, Integer trueValue, Integer falseValue) {\n        if (value == null) {\n            if (trueValue == null) {\n                return true;\n            } else if (falseValue == null) {\n                return false;\n            }\n        } else if (value.equals(trueValue)) {\n            return true;\n        } else if (value.equals(falseValue)) {\n            return false;\n        }\n        // no match\n        throw new IllegalArgumentException(\"The Integer did not match either specified value\");\n    }",
        "begin_line": 276,
        "end_line": 290,
        "comment": "\n     * <p>Converts an Integer to a boolean specifying the conversion values.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toBoolean(new Integer(0), new Integer(1), new Integer(0)) = false\n     *   BooleanUtils.toBoolean(new Integer(1), new Integer(1), new Integer(0)) = true\n     *   BooleanUtils.toBoolean(new Integer(2), new Integer(1), new Integer(2)) = false\n     *   BooleanUtils.toBoolean(new Integer(2), new Integer(2), new Integer(0)) = true\n     *   BooleanUtils.toBoolean(null, null, new Integer(0))                     = true\n     * </pre>\n     *\n     * @param value  the Integer to convert\n     * @param trueValue  the value to match for <code>true</code>,\n     *  may be <code>null</code>\n     * @param falseValue  the value to match for <code>false</code>,\n     *  may be <code>null</code>\n     * @return <code>true</code> or <code>false</code>\n     * @throws IllegalArgumentException if no match\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BooleanUtils.java",
        "class_name": "org.apache.commons.lang.BooleanUtils",
        "signature": "org.apache.commons.lang.BooleanUtils.toBooleanObject(int, int, int, int)",
        "snippet": "    public static Boolean toBooleanObject(int value, int trueValue, int falseValue, int nullValue) {\n        if (value == trueValue) {\n            return Boolean.TRUE;\n        } else if (value == falseValue) {\n            return Boolean.FALSE;\n        } else if (value == nullValue) {\n            return null;\n        }\n        // no match\n        throw new IllegalArgumentException(\"The Integer did not match any specified value\");\n    }",
        "begin_line": 308,
        "end_line": 318,
        "comment": "\n     * <p>Converts an int to a Boolean specifying the conversion values.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toBooleanObject(0, 0, 2, 3) = Boolean.TRUE\n     *   BooleanUtils.toBooleanObject(2, 1, 2, 3) = Boolean.FALSE\n     *   BooleanUtils.toBooleanObject(3, 1, 2, 3) = null\n     * </pre>\n     *\n     * @param value  the Integer to convert\n     * @param trueValue  the value to match for <code>true</code>\n     * @param falseValue  the value to match for <code>false</code>\n     * @param nullValue  the value to to match for <code>null</code>\n     * @return Boolean.TRUE, Boolean.FALSE, or <code>null</code>\n     * @throws IllegalArgumentException if no match\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BooleanUtils.java",
        "class_name": "org.apache.commons.lang.BooleanUtils",
        "signature": "org.apache.commons.lang.BooleanUtils.toBooleanObject(java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer)",
        "snippet": "    public static Boolean toBooleanObject(Integer value, Integer trueValue, Integer falseValue, Integer nullValue) {\n        if (value == null) {\n            if (trueValue == null) {\n                return Boolean.TRUE;\n            } else if (falseValue == null) {\n                return Boolean.FALSE;\n            } else if (nullValue == null) {\n                return null;\n            }\n        } else if (value.equals(trueValue)) {\n            return Boolean.TRUE;\n        } else if (value.equals(falseValue)) {\n            return Boolean.FALSE;\n        } else if (value.equals(nullValue)) {\n            return null;\n        }\n        // no match\n        throw new IllegalArgumentException(\"The Integer did not match any specified value\");\n    }",
        "begin_line": 339,
        "end_line": 357,
        "comment": "\n     * <p>Converts an Integer to a Boolean specifying the conversion values.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toBooleanObject(new Integer(0), new Integer(0), new Integer(2), new Integer(3)) = Boolean.TRUE\n     *   BooleanUtils.toBooleanObject(new Integer(2), new Integer(1), new Integer(2), new Integer(3)) = Boolean.FALSE\n     *   BooleanUtils.toBooleanObject(new Integer(3), new Integer(1), new Integer(2), new Integer(3)) = null\n     * </pre>\n     *\n     * @param value  the Integer to convert\n     * @param trueValue  the value to match for <code>true</code>,\n     *  may be <code>null</code>\n     * @param falseValue  the value to match for <code>false</code>,\n     *  may be <code>null</code>\n     * @param nullValue  the value to to match for <code>null</code>,\n     *  may be <code>null</code>\n     * @return Boolean.TRUE, Boolean.FALSE, or <code>null</code>\n     * @throws IllegalArgumentException if no match\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BooleanUtils.java",
        "class_name": "org.apache.commons.lang.BooleanUtils",
        "signature": "org.apache.commons.lang.BooleanUtils.toInteger(boolean)",
        "snippet": "    public static int toInteger(boolean bool) {\n        return bool ? 1 : 0;\n    }",
        "begin_line": 373,
        "end_line": 375,
        "comment": "\n     * <p>Converts a boolean to an int using the convention that\n     * <code>zero</code> is <code>false</code>.</p>\n     *\n     * <pre>\n     *   BooleanUtils.toInteger(true)  = 1\n     *   BooleanUtils.toInteger(false) = 0\n     * </pre>\n     *\n     * @param bool  the boolean to convert\n     * @return one if <code>true</code>, zero if <code>false</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BooleanUtils.java",
        "class_name": "org.apache.commons.lang.BooleanUtils",
        "signature": "org.apache.commons.lang.BooleanUtils.toIntegerObject(boolean)",
        "snippet": "    public static Integer toIntegerObject(boolean bool) {\n        return bool ? NumberUtils.INTEGER_ONE : NumberUtils.INTEGER_ZERO;\n    }",
        "begin_line": 389,
        "end_line": 391,
        "comment": "\n     * <p>Converts a boolean to an Integer using the convention that\n     * <code>zero</code> is <code>false</code>.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toIntegerObject(true)  = new Integer(1)\n     *   BooleanUtils.toIntegerObject(false) = new Integer(0)\n     * </pre>\n     *\n     * @param bool  the boolean to convert\n     * @return one if <code>true</code>, zero if <code>false</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BooleanUtils.java",
        "class_name": "org.apache.commons.lang.BooleanUtils",
        "signature": "org.apache.commons.lang.BooleanUtils.toIntegerObject(java.lang.Boolean)",
        "snippet": "    public static Integer toIntegerObject(Boolean bool) {\n        if (bool == null) {\n            return null;\n        }\n        return bool.booleanValue() ? NumberUtils.INTEGER_ONE : NumberUtils.INTEGER_ZERO;\n    }",
        "begin_line": 407,
        "end_line": 412,
        "comment": "\n     * <p>Converts a Boolean to a Integer using the convention that\n     * <code>zero</code> is <code>false</code>.</p>\n     *\n     * <p><code>null</code> will be converted to <code>null</code>.</p>\n     *\n     * <pre>\n     *   BooleanUtils.toIntegerObject(Boolean.TRUE)  = new Integer(1)\n     *   BooleanUtils.toIntegerObject(Boolean.FALSE) = new Integer(0)\n     * </pre>\n     *\n     * @param bool  the Boolean to convert\n     * @return one if Boolean.TRUE, zero if Boolean.FALSE, <code>null</code> if <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BooleanUtils.java",
        "class_name": "org.apache.commons.lang.BooleanUtils",
        "signature": "org.apache.commons.lang.BooleanUtils.toInteger(boolean, int, int)",
        "snippet": "    public static int toInteger(boolean bool, int trueValue, int falseValue) {\n        return bool ? trueValue : falseValue;\n    }",
        "begin_line": 427,
        "end_line": 429,
        "comment": "\n     * <p>Converts a boolean to an int specifying the conversion values.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toInteger(true, 1, 0)  = 1\n     *   BooleanUtils.toInteger(false, 1, 0) = 0\n     * </pre>\n     *\n     * @param bool  the to convert\n     * @param trueValue  the value to return if <code>true</code>\n     * @param falseValue  the value to return if <code>false</code>\n     * @return the appropriate value\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BooleanUtils.java",
        "class_name": "org.apache.commons.lang.BooleanUtils",
        "signature": "org.apache.commons.lang.BooleanUtils.toInteger(java.lang.Boolean, int, int, int)",
        "snippet": "    public static int toInteger(Boolean bool, int trueValue, int falseValue, int nullValue) {\n        if (bool == null) {\n            return nullValue;\n        }\n        return bool.booleanValue() ? trueValue : falseValue;\n    }",
        "begin_line": 446,
        "end_line": 451,
        "comment": "\n     * <p>Converts a Boolean to an int specifying the conversion values.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toInteger(Boolean.TRUE, 1, 0, 2)  = 1\n     *   BooleanUtils.toInteger(Boolean.FALSE, 1, 0, 2) = 0\n     *   BooleanUtils.toInteger(null, 1, 0, 2)          = 2\n     * </pre>\n     *\n     * @param bool  the Boolean to convert\n     * @param trueValue  the value to return if <code>true</code>\n     * @param falseValue  the value to return if <code>false</code>\n     * @param nullValue  the value to return if <code>null</code>\n     * @return the appropriate value\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BooleanUtils.java",
        "class_name": "org.apache.commons.lang.BooleanUtils",
        "signature": "org.apache.commons.lang.BooleanUtils.toIntegerObject(boolean, java.lang.Integer, java.lang.Integer)",
        "snippet": "    public static Integer toIntegerObject(boolean bool, Integer trueValue, Integer falseValue) {\n        return bool ? trueValue : falseValue;\n    }",
        "begin_line": 468,
        "end_line": 470,
        "comment": "\n     * <p>Converts a boolean to an Integer specifying the conversion values.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toIntegerObject(true, new Integer(1), new Integer(0))  = new Integer(1)\n     *   BooleanUtils.toIntegerObject(false, new Integer(1), new Integer(0)) = new Integer(0)\n     * </pre>\n     *\n     * @param bool  the to convert\n     * @param trueValue  the value to return if <code>true</code>,\n     *  may be <code>null</code>\n     * @param falseValue  the value to return if <code>false</code>,\n     *  may be <code>null</code>\n     * @return the appropriate value\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BooleanUtils.java",
        "class_name": "org.apache.commons.lang.BooleanUtils",
        "signature": "org.apache.commons.lang.BooleanUtils.toIntegerObject(java.lang.Boolean, java.lang.Integer, java.lang.Integer, java.lang.Integer)",
        "snippet": "    public static Integer toIntegerObject(Boolean bool, Integer trueValue, Integer falseValue, Integer nullValue) {\n        if (bool == null) {\n            return nullValue;\n        }\n        return bool.booleanValue() ? trueValue : falseValue;\n    }",
        "begin_line": 490,
        "end_line": 495,
        "comment": "\n     * <p>Converts a Boolean to an Integer specifying the conversion values.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toIntegerObject(Boolean.TRUE, new Integer(1), new Integer(0), new Integer(2))  = new Integer(1)\n     *   BooleanUtils.toIntegerObject(Boolean.FALSE, new Integer(1), new Integer(0), new Integer(2)) = new Integer(0)\n     *   BooleanUtils.toIntegerObject(null, new Integer(1), new Integer(0), new Integer(2))          = new Integer(2)\n     * </pre>\n     *\n     * @param bool  the Boolean to convert\n     * @param trueValue  the value to return if <code>true</code>,\n     *  may be <code>null</code>\n     * @param falseValue  the value to return if <code>false</code>,\n     *  may be <code>null</code>\n     * @param nullValue  the value to return if <code>null</code>,\n     *  may be <code>null</code>\n     * @return the appropriate value\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BooleanUtils.java",
        "class_name": "org.apache.commons.lang.BooleanUtils",
        "signature": "org.apache.commons.lang.BooleanUtils.toBooleanObject(java.lang.String)",
        "snippet": "    public static Boolean toBooleanObject(String str) {\n        if (\"true\".equalsIgnoreCase(str)) {\n            return Boolean.TRUE;\n        } else if (\"false\".equalsIgnoreCase(str)) {\n            return Boolean.FALSE;\n        } else if (\"on\".equalsIgnoreCase(str)) {\n            return Boolean.TRUE;\n        } else if (\"off\".equalsIgnoreCase(str)) {\n            return Boolean.FALSE;\n        } else if (\"yes\".equalsIgnoreCase(str)) {\n            return Boolean.TRUE;\n        } else if (\"no\".equalsIgnoreCase(str)) {\n            return Boolean.FALSE;\n        }\n        // no match\n        return null;\n    }",
        "begin_line": 523,
        "end_line": 539,
        "comment": "\n     * <p>Converts a String to a Boolean.</p>\n     * \n     * <p><code>'true'</code>, <code>'on'</code> or <code>'yes'</code>\n     * (case insensitive) will return <code>true</code>.\n     * <code>'false'</code>, <code>'off'</code> or <code>'no'</code>\n     * (case insensitive) will return <code>false</code>.\n     * Otherwise, <code>null</code> is returned.</p>\n     *\n     * <pre>\n     *   BooleanUtils.toBooleanObject(null)    = null\n     *   BooleanUtils.toBooleanObject(\"true\")  = Boolean.TRUE\n     *   BooleanUtils.toBooleanObject(\"false\") = Boolean.FALSE\n     *   BooleanUtils.toBooleanObject(\"on\")    = Boolean.TRUE\n     *   BooleanUtils.toBooleanObject(\"ON\")    = Boolean.TRUE\n     *   BooleanUtils.toBooleanObject(\"off\")   = Boolean.FALSE\n     *   BooleanUtils.toBooleanObject(\"oFf\")   = Boolean.FALSE\n     *   BooleanUtils.toBooleanObject(\"blue\")  = null\n     * </pre>\n     *\n     * @param str  the String to check\n     * @return the Boolean value of the string,\n     *  <code>null</code> if no match or <code>null</code> input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BooleanUtils.java",
        "class_name": "org.apache.commons.lang.BooleanUtils",
        "signature": "org.apache.commons.lang.BooleanUtils.toBooleanObject(java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    public static Boolean toBooleanObject(String str, String trueString, String falseString, String nullString) {\n        if (str == null) {\n            if (trueString == null) {\n                return Boolean.TRUE;\n            } else if (falseString == null) {\n                return Boolean.FALSE;\n            } else if (nullString == null) {\n                return null;\n            }\n        } else if (str.equals(trueString)) {\n            return Boolean.TRUE;\n        } else if (str.equals(falseString)) {\n            return Boolean.FALSE;\n        } else if (str.equals(nullString)) {\n            return null;\n        }\n        // no match\n        throw new IllegalArgumentException(\"The String did not match any specified value\");\n    }",
        "begin_line": 560,
        "end_line": 578,
        "comment": "\n     * <p>Converts a String to a Boolean throwing an exception if no match.</p>\n     *\n     * <pre>\n     *   BooleanUtils.toBooleanObject(\"true\", \"true\", \"false\", \"null\")  = Boolean.TRUE\n     *   BooleanUtils.toBooleanObject(\"false\", \"true\", \"false\", \"null\") = Boolean.FALSE\n     *   BooleanUtils.toBooleanObject(\"null\", \"true\", \"false\", \"null\")  = null\n     * </pre>\n     *\n     * @param str  the String to check\n     * @param trueString  the String to match for <code>true</code>\n     *  (case sensitive), may be <code>null</code>\n     * @param falseString  the String to match for <code>false</code>\n     *  (case sensitive), may be <code>null</code>\n     * @param nullString  the String to match for <code>null</code>\n     *  (case sensitive), may be <code>null</code>\n     * @return the Boolean value of the string,\n     *  <code>null</code> if no match or <code>null</code> input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BooleanUtils.java",
        "class_name": "org.apache.commons.lang.BooleanUtils",
        "signature": "org.apache.commons.lang.BooleanUtils.toBoolean(java.lang.String)",
        "snippet": "    public static boolean toBoolean(String str) {\n        // Previously used equalsIgnoreCase, which was fast for interned 'true'.\n        // Non interned 'true' matched 15 times slower.\n        // \n        // Optimisation provides same performance as before for interned 'true'.\n        // Similar performance for null, 'false', and other strings not length 2/3/4.\n        // 'true'/'TRUE' match 4 times slower, 'tRUE'/'True' 7 times slower.\n        if (str == \"true\") {\n            return true;\n        }\n        if (str == null) {\n            return false;\n        }\n        switch (str.length()) {\n            case 2: {\n                char ch0 = str.charAt(0);\n                char ch1 = str.charAt(1);\n                return \n                    (ch0 == 'o' || ch0 == 'O') &&\n                    (ch1 == 'n' || ch1 == 'N');\n            }\n            case 3: {\n                char ch = str.charAt(0);\n                if (ch == 'y') {\n                    return \n                        (str.charAt(1) == 'e' || str.charAt(1) == 'E') &&\n                        (str.charAt(2) == 's' || str.charAt(2) == 'S');\n                }\n                if (ch == 'Y') {\n                    return \n                        (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&\n                        (str.charAt(2) == 'S' || str.charAt(2) == 's');\n                }\n            }\n            case 4: {\n                char ch = str.charAt(0);\n                if (ch == 't') {\n                    return \n                        (str.charAt(1) == 'r' || str.charAt(1) == 'R') &&\n                        (str.charAt(2) == 'u' || str.charAt(2) == 'U') &&\n                        (str.charAt(3) == 'e' || str.charAt(3) == 'E');\n                }\n                if (ch == 'T') {\n                    return \n                        (str.charAt(1) == 'R' || str.charAt(1) == 'r') &&\n                        (str.charAt(2) == 'U' || str.charAt(2) == 'u') &&\n                        (str.charAt(3) == 'E' || str.charAt(3) == 'e');\n                }\n            }\n        }\n        return false;\n    }",
        "begin_line": 607,
        "end_line": 658,
        "comment": "\n     * <p>Converts a String to a boolean (optimised for performance).</p>\n     * \n     * <p><code>'true'</code>, <code>'on'</code> or <code>'yes'</code>\n     * (case insensitive) will return <code>true</code>. Otherwise,\n     * <code>false</code> is returned.</p>\n     * \n     * <p>This method performs 4 times faster (JDK1.4) than\n     * <code>Boolean.valueOf(String)</code>. However, this method accepts\n     * 'on' and 'yes' as true values.\n     *\n     * <pre>\n     *   BooleanUtils.toBoolean(null)    = false\n     *   BooleanUtils.toBoolean(\"true\")  = true\n     *   BooleanUtils.toBoolean(\"TRUE\")  = true\n     *   BooleanUtils.toBoolean(\"tRUe\")  = true\n     *   BooleanUtils.toBoolean(\"on\")    = true\n     *   BooleanUtils.toBoolean(\"yes\")   = true\n     *   BooleanUtils.toBoolean(\"false\") = false\n     *   BooleanUtils.toBoolean(\"x gti\") = false\n     * </pre>\n     *\n     * @param str  the String to check\n     * @return the boolean value of the string, <code>false</code> if no match\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BooleanUtils.java",
        "class_name": "org.apache.commons.lang.BooleanUtils",
        "signature": "org.apache.commons.lang.BooleanUtils.toBoolean(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    public static boolean toBoolean(String str, String trueString, String falseString) {\n        if (str == null) {\n            if (trueString == null) {\n                return true;\n            } else if (falseString == null) {\n                return false;\n            }\n        } else if (str.equals(trueString)) {\n            return true;\n        } else if (str.equals(falseString)) {\n            return false;\n        }\n        // no match\n        throw new IllegalArgumentException(\"The String did not match either specified value\");\n    }",
        "begin_line": 689,
        "end_line": 703,
        "comment": "\n     * <p>Converts a String to a Boolean throwing an exception if no match found.</p>\n     * \n     * <p>null is returned if there is no match.</p>\n     *\n     * <pre>\n     *   BooleanUtils.toBoolean(\"true\", \"true\", \"false\")  = true\n     *   BooleanUtils.toBoolean(\"false\", \"true\", \"false\") = false\n     * </pre>\n     *\n     * @param str  the String to check\n     * @param trueString  the String to match for <code>true</code>\n     *  (case sensitive), may be <code>null</code>\n     * @param falseString  the String to match for <code>false</code>\n     *  (case sensitive), may be <code>null</code>\n     * @return the boolean value of the string\n     * @throws IllegalArgumentException if the String doesn't match\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BooleanUtils.java",
        "class_name": "org.apache.commons.lang.BooleanUtils",
        "signature": "org.apache.commons.lang.BooleanUtils.toStringTrueFalse(java.lang.Boolean)",
        "snippet": "    public static String toStringTrueFalse(Boolean bool) {\n        return toString(bool, \"true\", \"false\", null);\n    }",
        "begin_line": 721,
        "end_line": 723,
        "comment": "\n     * <p>Converts a Boolean to a String returning <code>'true'</code>,\n     * <code>'false'</code>, or <code>null</code>.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toStringTrueFalse(Boolean.TRUE)  = \"true\"\n     *   BooleanUtils.toStringTrueFalse(Boolean.FALSE) = \"false\"\n     *   BooleanUtils.toStringTrueFalse(null)          = null;\n     * </pre>\n     *\n     * @param bool  the Boolean to check\n     * @return <code>'true'</code>, <code>'false'</code>,\n     *  or <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BooleanUtils.java",
        "class_name": "org.apache.commons.lang.BooleanUtils",
        "signature": "org.apache.commons.lang.BooleanUtils.toStringOnOff(java.lang.Boolean)",
        "snippet": "    public static String toStringOnOff(Boolean bool) {\n        return toString(bool, \"on\", \"off\", null);\n    }",
        "begin_line": 739,
        "end_line": 741,
        "comment": "\n     * <p>Converts a Boolean to a String returning <code>'on'</code>,\n     * <code>'off'</code>, or <code>null</code>.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toStringOnOff(Boolean.TRUE)  = \"on\"\n     *   BooleanUtils.toStringOnOff(Boolean.FALSE) = \"off\"\n     *   BooleanUtils.toStringOnOff(null)          = null;\n     * </pre>\n     *\n     * @param bool  the Boolean to check\n     * @return <code>'on'</code>, <code>'off'</code>,\n     *  or <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BooleanUtils.java",
        "class_name": "org.apache.commons.lang.BooleanUtils",
        "signature": "org.apache.commons.lang.BooleanUtils.toStringYesNo(java.lang.Boolean)",
        "snippet": "    public static String toStringYesNo(Boolean bool) {\n        return toString(bool, \"yes\", \"no\", null);\n    }",
        "begin_line": 757,
        "end_line": 759,
        "comment": "\n     * <p>Converts a Boolean to a String returning <code>'yes'</code>,\n     * <code>'no'</code>, or <code>null</code>.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toStringYesNo(Boolean.TRUE)  = \"yes\"\n     *   BooleanUtils.toStringYesNo(Boolean.FALSE) = \"no\"\n     *   BooleanUtils.toStringYesNo(null)          = null;\n     * </pre>\n     *\n     * @param bool  the Boolean to check\n     * @return <code>'yes'</code>, <code>'no'</code>,\n     *  or <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BooleanUtils.java",
        "class_name": "org.apache.commons.lang.BooleanUtils",
        "signature": "org.apache.commons.lang.BooleanUtils.toString(java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    public static String toString(Boolean bool, String trueString, String falseString, String nullString) {\n        if (bool == null) {\n            return nullString;\n        }\n        return bool.booleanValue() ? trueString : falseString;\n    }",
        "begin_line": 779,
        "end_line": 784,
        "comment": "\n     * <p>Converts a Boolean to a String returning one of the input Strings.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toString(Boolean.TRUE, \"true\", \"false\", null)   = \"true\"\n     *   BooleanUtils.toString(Boolean.FALSE, \"true\", \"false\", null)  = \"false\"\n     *   BooleanUtils.toString(null, \"true\", \"false\", null)           = null;\n     * </pre>\n     *\n     * @param bool  the Boolean to check\n     * @param trueString  the String to return if <code>true</code>,\n     *  may be <code>null</code>\n     * @param falseString  the String to return if <code>false</code>,\n     *  may be <code>null</code>\n     * @param nullString  the String to return if <code>null</code>,\n     *  may be <code>null</code>\n     * @return one of the three input Strings\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BooleanUtils.java",
        "class_name": "org.apache.commons.lang.BooleanUtils",
        "signature": "org.apache.commons.lang.BooleanUtils.toStringTrueFalse(boolean)",
        "snippet": "    public static String toStringTrueFalse(boolean bool) {\n        return toString(bool, \"true\", \"false\");\n    }",
        "begin_line": 801,
        "end_line": 803,
        "comment": "\n     * <p>Converts a boolean to a String returning <code>'true'</code>\n     * or <code>'false'</code>.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toStringTrueFalse(true)   = \"true\"\n     *   BooleanUtils.toStringTrueFalse(false)  = \"false\"\n     * </pre>\n     *\n     * @param bool  the Boolean to check\n     * @return <code>'true'</code>, <code>'false'</code>,\n     *  or <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BooleanUtils.java",
        "class_name": "org.apache.commons.lang.BooleanUtils",
        "signature": "org.apache.commons.lang.BooleanUtils.toStringOnOff(boolean)",
        "snippet": "    public static String toStringOnOff(boolean bool) {\n        return toString(bool, \"on\", \"off\");\n    }",
        "begin_line": 818,
        "end_line": 820,
        "comment": "\n     * <p>Converts a boolean to a String returning <code>'on'</code>\n     * or <code>'off'</code>.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toStringOnOff(true)   = \"on\"\n     *   BooleanUtils.toStringOnOff(false)  = \"off\"\n     * </pre>\n     *\n     * @param bool  the Boolean to check\n     * @return <code>'on'</code>, <code>'off'</code>,\n     *  or <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BooleanUtils.java",
        "class_name": "org.apache.commons.lang.BooleanUtils",
        "signature": "org.apache.commons.lang.BooleanUtils.toStringYesNo(boolean)",
        "snippet": "    public static String toStringYesNo(boolean bool) {\n        return toString(bool, \"yes\", \"no\");\n    }",
        "begin_line": 835,
        "end_line": 837,
        "comment": "\n     * <p>Converts a boolean to a String returning <code>'yes'</code>\n     * or <code>'no'</code>.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toStringYesNo(true)   = \"yes\"\n     *   BooleanUtils.toStringYesNo(false)  = \"no\"\n     * </pre>\n     *\n     * @param bool  the Boolean to check\n     * @return <code>'yes'</code>, <code>'no'</code>,\n     *  or <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BooleanUtils.java",
        "class_name": "org.apache.commons.lang.BooleanUtils",
        "signature": "org.apache.commons.lang.BooleanUtils.toString(boolean, java.lang.String, java.lang.String)",
        "snippet": "    public static String toString(boolean bool, String trueString, String falseString) {\n        return bool ? trueString : falseString;\n    }",
        "begin_line": 854,
        "end_line": 856,
        "comment": "\n     * <p>Converts a boolean to a String returning one of the input Strings.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toString(true, \"true\", \"false\")   = \"true\"\n     *   BooleanUtils.toString(false, \"true\", \"false\")  = \"false\"\n     * </pre>\n     *\n     * @param bool  the Boolean to check\n     * @param trueString  the String to return if <code>true</code>,\n     *  may be <code>null</code>\n     * @param falseString  the String to return if <code>false</code>,\n     *  may be <code>null</code>\n     * @return one of the two input Strings\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BooleanUtils.java",
        "class_name": "org.apache.commons.lang.BooleanUtils",
        "signature": "org.apache.commons.lang.BooleanUtils.xor(boolean[])",
        "snippet": "    public static boolean xor(boolean[] array) {\n        // Validates input\n        if (array == null) {\n            throw new IllegalArgumentException(\"The Array must not be null\");\n        } else if (array.length == 0) {\n            throw new IllegalArgumentException(\"Array is empty\");\n        }\n\n        // Loops through array, comparing each item\n        int trueCount = 0;\n        for (int i = 0; i < array.length; i++) {\n            // If item is true, and trueCount is < 1, increments count\n            // Else, xor fails\n            if (array[i]) {\n                if (trueCount < 1) {\n                    trueCount++;\n                } else {\n                    return false;\n                }\n            }\n        }\n\n        // Returns true if there was exactly 1 true item\n        return trueCount == 1;\n    }",
        "begin_line": 874,
        "end_line": 898,
        "comment": "\n     * <p>Performs an xor on a set of booleans.</p>\n     *\n     * <pre>\n     *   BooleanUtils.xor(new boolean[] { true, true })   = false\n     *   BooleanUtils.xor(new boolean[] { false, false }) = false\n     *   BooleanUtils.xor(new boolean[] { true, false })  = true\n     * </pre>\n     *\n     * @param array  an array of <code>boolean<code>s\n     * @return <code>true</code> if the xor is successful.\n     * @throws IllegalArgumentException if <code>array</code> is <code>null</code>\n     * @throws IllegalArgumentException if <code>array</code> is empty.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/BooleanUtils.java",
        "class_name": "org.apache.commons.lang.BooleanUtils",
        "signature": "org.apache.commons.lang.BooleanUtils.xor(java.lang.Boolean[])",
        "snippet": "    public static Boolean xor(Boolean[] array) {\n        if (array == null) {\n            throw new IllegalArgumentException(\"The Array must not be null\");\n        } else if (array.length == 0) {\n            throw new IllegalArgumentException(\"Array is empty\");\n        }\n        boolean[] primitive = null;\n        try {\n            primitive = ArrayUtils.toPrimitive(array);\n        } catch (NullPointerException ex) {\n            throw new IllegalArgumentException(\"The array must not contain any null elements\");\n        }\n        return xor(primitive) ? Boolean.TRUE : Boolean.FALSE;\n    }",
        "begin_line": 915,
        "end_line": 928,
        "comment": "\n     * <p>Performs an xor on an array of Booleans.</p>\n     * \n     * <pre>\n     *   BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE })   = Boolean.FALSE\n     *   BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE }) = Boolean.FALSE\n     *   BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE })  = Boolean.TRUE\n     * </pre>\n     *\n     * @param array  an array of <code>Boolean<code>s\n     * @return <code>true</code> if the xor is successful.\n     * @throws IllegalArgumentException if <code>array</code> is <code>null</code>\n     * @throws IllegalArgumentException if <code>array</code> is empty.\n     * @throws IllegalArgumentException if <code>array</code> contains a <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/WordUtils.java",
        "class_name": "org.apache.commons.lang.WordUtils",
        "signature": "org.apache.commons.lang.WordUtils.WordUtils()",
        "snippet": "    public WordUtils() {\n      super();\n    }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "\n     * <p><code>WordUtils</code> instances should NOT be constructed in\n     * standard programming. Instead, the class should be used as\n     * <code>WordUtils.wrap(\"foo bar\", 20);</code>.</p>\n     *\n     * <p>This constructor is public to permit tools that require a JavaBean\n     * instance to operate.</p>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/WordUtils.java",
        "class_name": "org.apache.commons.lang.WordUtils",
        "signature": "org.apache.commons.lang.WordUtils.wrap(java.lang.String, int)",
        "snippet": "    public static String wrap(String str, int wrapLength) {\n        return wrap(str, wrapLength, null, false);\n    }",
        "begin_line": 141,
        "end_line": 143,
        "comment": "\n     * <p>Wraps a single line of text, identifying words by <code>' '</code>.</p>\n     * \n     * <p>New lines will be separated by the system property line separator.\n     * Very long words, such as URLs will <i>not</i> be wrapped.</p>\n     * \n     * <p>Leading spaces on a new line are stripped.\n     * Trailing spaces are not stripped.</p>\n     *\n     * <pre>\n     * WordUtils.wrap(null, *) = null\n     * WordUtils.wrap(\"\", *) = \"\"\n     * </pre>\n     *\n     * @param str  the String to be word wrapped, may be null\n     * @param wrapLength  the column to wrap the words at, less than 1 is treated as 1\n     * @return a line with newlines inserted, <code>null</code> if null input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/WordUtils.java",
        "class_name": "org.apache.commons.lang.WordUtils",
        "signature": "org.apache.commons.lang.WordUtils.wrap(java.lang.String, int, java.lang.String, boolean)",
        "snippet": "    public static String wrap(String str, int wrapLength, String newLineStr, boolean wrapLongWords) {\n        if (str == null) {\n            return null;\n        }\n        if (newLineStr == null) {\n            newLineStr = SystemUtils.LINE_SEPARATOR;\n        }\n        if (wrapLength < 1) {\n            wrapLength = 1;\n        }\n        int inputLineLength = str.length();\n        int offset = 0;\n        StringBuffer wrappedLine = new StringBuffer(inputLineLength + 32);\n        \n        while ((inputLineLength - offset) > wrapLength) {\n            if (str.charAt(offset) == ' ') {\n                offset++;\n                continue;\n            }\n            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);\n\n            if (spaceToWrapAt >= offset) {\n                // normal case\n                wrappedLine.append(str.substring(offset, spaceToWrapAt));\n                wrappedLine.append(newLineStr);\n                offset = spaceToWrapAt + 1;\n                \n            } else {\n                // really long word or URL\n                if (wrapLongWords) {\n                    // wrap really long word one line at a time\n                    wrappedLine.append(str.substring(offset, wrapLength + offset));\n                    wrappedLine.append(newLineStr);\n                    offset += wrapLength;\n                } else {\n                    // do not wrap really long word, just extend beyond limit\n                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);\n                    if (spaceToWrapAt >= 0) {\n                        wrappedLine.append(str.substring(offset, spaceToWrapAt));\n                        wrappedLine.append(newLineStr);\n                        offset = spaceToWrapAt + 1;\n                    } else {\n                        wrappedLine.append(str.substring(offset));\n                        offset = inputLineLength;\n                    }\n                }\n            }\n        }\n\n        // Whatever is left in line is short enough to just pass through\n        wrappedLine.append(str.substring(offset));\n\n        return wrappedLine.toString();\n    }",
        "begin_line": 163,
        "end_line": 216,
        "comment": "\n     * <p>Wraps a single line of text, identifying words by <code>' '</code>.</p>\n     * \n     * <p>Leading spaces on a new line are stripped.\n     * Trailing spaces are not stripped.</p>\n     * \n     * <pre>\n     * WordUtils.wrap(null, *, *, *) = null\n     * WordUtils.wrap(\"\", *, *, *) = \"\"\n     * </pre>\n     *\n     * @param str  the String to be word wrapped, may be null\n     * @param wrapLength  the column to wrap the words at, less than 1 is treated as 1\n     * @param newLineStr  the string to insert for a new line, \n     *  <code>null</code> uses the system property line separator\n     * @param wrapLongWords  true if long words (such as URLs) should be wrapped\n     * @return a line with newlines inserted, <code>null</code> if null input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/WordUtils.java",
        "class_name": "org.apache.commons.lang.WordUtils",
        "signature": "org.apache.commons.lang.WordUtils.capitalize(java.lang.String)",
        "snippet": "    public static String capitalize(String str) {\n        return capitalize(str, null);\n    }",
        "begin_line": 242,
        "end_line": 244,
        "comment": "\n     * <p>Capitalizes all the whitespace separated words in a String.\n     * Only the first letter of each word is changed. To convert the \n     * rest of each word to lowercase at the same time, \n     * use {@link #capitalizeFully(String)}.</p>\n     *\n     * <p>Whitespace is defined by {@link Character#isWhitespace(char)}.\n     * A <code>null</code> input String returns <code>null</code>.\n     * Capitalization uses the unicode title case, normally equivalent to\n     * upper case.</p>\n     *\n     * <pre>\n     * WordUtils.capitalize(null)        = null\n     * WordUtils.capitalize(\"\")          = \"\"\n     * WordUtils.capitalize(\"i am FINE\") = \"I Am FINE\"\n     * </pre>\n     * \n     * @param str  the String to capitalize, may be null\n     * @return capitalized String, <code>null</code> if null String input\n     * @see #uncapitalize(String)\n     * @see #capitalizeFully(String)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/WordUtils.java",
        "class_name": "org.apache.commons.lang.WordUtils",
        "signature": "org.apache.commons.lang.WordUtils.capitalize(java.lang.String, char[])",
        "snippet": "    public static String capitalize(String str, char[] delimiters) {\n        int delimLen = (delimiters == null ? -1 : delimiters.length);\n        if (str == null || str.length() == 0 || delimLen == 0) {\n            return str;\n        }\n        int strLen = str.length();\n        StringBuffer buffer = new StringBuffer(strLen);\n        boolean capitalizeNext = true;\n        for (int i = 0; i < strLen; i++) {\n            char ch = str.charAt(i);\n\n            if (isDelimiter(ch, delimiters)) {\n                buffer.append(ch);\n                capitalizeNext = true;\n            } else if (capitalizeNext) {\n                buffer.append(Character.toTitleCase(ch));\n                capitalizeNext = false;\n            } else {\n                buffer.append(ch);\n            }\n        }\n        return buffer.toString();\n    }",
        "begin_line": 275,
        "end_line": 297,
        "comment": "\n     * <p>Capitalizes all the delimiter separated words in a String.\n     * Only the first letter of each word is changed. To convert the \n     * rest of each word to lowercase at the same time, \n     * use {@link #capitalizeFully(String, char[])}.</p>\n     *\n     * <p>The delimiters represent a set of characters understood to separate words.\n     * The first string character and the first non-delimiter character after a\n     * delimiter will be capitalized. </p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * Capitalization uses the unicode title case, normally equivalent to\n     * upper case.</p>\n     *\n     * <pre>\n     * WordUtils.capitalize(null, *)            = null\n     * WordUtils.capitalize(\"\", *)              = \"\"\n     * WordUtils.capitalize(*, new char[0])     = *\n     * WordUtils.capitalize(\"i am fine\", null)  = \"I Am Fine\"\n     * WordUtils.capitalize(\"i aM.fine\", {'.'}) = \"I aM.Fine\"\n     * </pre>\n     * \n     * @param str  the String to capitalize, may be null\n     * @param delimiters  set of characters to determine capitalization, null means whitespace\n     * @return capitalized String, <code>null</code> if null String input\n     * @see #uncapitalize(String)\n     * @see #capitalizeFully(String)\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/WordUtils.java",
        "class_name": "org.apache.commons.lang.WordUtils",
        "signature": "org.apache.commons.lang.WordUtils.capitalizeFully(java.lang.String)",
        "snippet": "    public static String capitalizeFully(String str) {\n        return capitalizeFully(str, null);\n    }",
        "begin_line": 319,
        "end_line": 321,
        "comment": "\n     * <p>Converts all the whitespace separated words in a String into capitalized words, \n     * that is each word is made up of a titlecase character and then a series of \n     * lowercase characters.  </p>\n     *\n     * <p>Whitespace is defined by {@link Character#isWhitespace(char)}.\n     * A <code>null</code> input String returns <code>null</code>.\n     * Capitalization uses the unicode title case, normally equivalent to\n     * upper case.</p>\n     *\n     * <pre>\n     * WordUtils.capitalizeFully(null)        = null\n     * WordUtils.capitalizeFully(\"\")          = \"\"\n     * WordUtils.capitalizeFully(\"i am FINE\") = \"I Am Fine\"\n     * </pre>\n     * \n     * @param str  the String to capitalize, may be null\n     * @return capitalized String, <code>null</code> if null String input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/WordUtils.java",
        "class_name": "org.apache.commons.lang.WordUtils",
        "signature": "org.apache.commons.lang.WordUtils.capitalizeFully(java.lang.String, char[])",
        "snippet": "    public static String capitalizeFully(String str, char[] delimiters) {\n        int delimLen = (delimiters == null ? -1 : delimiters.length);\n        if (str == null || str.length() == 0 || delimLen == 0) {\n            return str;\n        }\n        str = str.toLowerCase();\n        return capitalize(str, delimiters);\n    }",
        "begin_line": 349,
        "end_line": 356,
        "comment": "\n     * <p>Converts all the delimiter separated words in a String into capitalized words, \n     * that is each word is made up of a titlecase character and then a series of \n     * lowercase characters. </p>\n     *\n     * <p>The delimiters represent a set of characters understood to separate words.\n     * The first string character and the first non-delimiter character after a\n     * delimiter will be capitalized. </p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * Capitalization uses the unicode title case, normally equivalent to\n     * upper case.</p>\n     *\n     * <pre>\n     * WordUtils.capitalizeFully(null, *)            = null\n     * WordUtils.capitalizeFully(\"\", *)              = \"\"\n     * WordUtils.capitalizeFully(*, null)            = *\n     * WordUtils.capitalizeFully(*, new char[0])     = *\n     * WordUtils.capitalizeFully(\"i aM.fine\", {'.'}) = \"I am.Fine\"\n     * </pre>\n     * \n     * @param str  the String to capitalize, may be null\n     * @param delimiters  set of characters to determine capitalization, null means whitespace\n     * @return capitalized String, <code>null</code> if null String input\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/WordUtils.java",
        "class_name": "org.apache.commons.lang.WordUtils",
        "signature": "org.apache.commons.lang.WordUtils.uncapitalize(java.lang.String)",
        "snippet": "    public static String uncapitalize(String str) {\n        return uncapitalize(str, null);\n    }",
        "begin_line": 376,
        "end_line": 378,
        "comment": "\n     * <p>Uncapitalizes all the whitespace separated words in a String.\n     * Only the first letter of each word is changed.</p>\n     *\n     * <p>Whitespace is defined by {@link Character#isWhitespace(char)}.\n     * A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * WordUtils.uncapitalize(null)        = null\n     * WordUtils.uncapitalize(\"\")          = \"\"\n     * WordUtils.uncapitalize(\"I Am FINE\") = \"i am fINE\"\n     * </pre>\n     * \n     * @param str  the String to uncapitalize, may be null\n     * @return uncapitalized String, <code>null</code> if null String input\n     * @see #capitalize(String)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/WordUtils.java",
        "class_name": "org.apache.commons.lang.WordUtils",
        "signature": "org.apache.commons.lang.WordUtils.uncapitalize(java.lang.String, char[])",
        "snippet": "    public static String uncapitalize(String str, char[] delimiters) {\n        int delimLen = (delimiters == null ? -1 : delimiters.length);\n        if (str == null || str.length() == 0 || delimLen == 0) {\n            return str;\n        }\n        int strLen = str.length();\n        StringBuffer buffer = new StringBuffer(strLen);\n        boolean uncapitalizeNext = true;\n        for (int i = 0; i < strLen; i++) {\n            char ch = str.charAt(i);\n\n            if (isDelimiter(ch, delimiters)) {\n                buffer.append(ch);\n                uncapitalizeNext = true;\n            } else if (uncapitalizeNext) {\n                buffer.append(Character.toLowerCase(ch));\n                uncapitalizeNext = false;\n            } else {\n                buffer.append(ch);\n            }\n        }\n        return buffer.toString();\n    }",
        "begin_line": 405,
        "end_line": 427,
        "comment": "\n     * <p>Uncapitalizes all the whitespace separated words in a String.\n     * Only the first letter of each word is changed.</p>\n     *\n     * <p>The delimiters represent a set of characters understood to separate words.\n     * The first string character and the first non-delimiter character after a\n     * delimiter will be uncapitalized. </p>\n     *\n     * <p>Whitespace is defined by {@link Character#isWhitespace(char)}.\n     * A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * WordUtils.uncapitalize(null, *)            = null\n     * WordUtils.uncapitalize(\"\", *)              = \"\"\n     * WordUtils.uncapitalize(*, null)            = *\n     * WordUtils.uncapitalize(*, new char[0])     = *\n     * WordUtils.uncapitalize(\"I AM.FINE\", {'.'}) = \"i AM.fINE\"\n     * </pre>\n     * \n     * @param str  the String to uncapitalize, may be null\n     * @param delimiters  set of characters to determine uncapitalization, null means whitespace\n     * @return uncapitalized String, <code>null</code> if null String input\n     * @see #capitalize(String)\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/WordUtils.java",
        "class_name": "org.apache.commons.lang.WordUtils",
        "signature": "org.apache.commons.lang.WordUtils.swapCase(java.lang.String)",
        "snippet": "    public static String swapCase(String str) {\n        int strLen;\n        if (str == null || (strLen = str.length()) == 0) {\n            return str;\n        }\n        StringBuffer buffer = new StringBuffer(strLen);\n\n        boolean whitespace = true;\n        char ch = 0;\n        char tmp = 0;\n\n        for (int i = 0; i < strLen; i++) {\n            ch = str.charAt(i);\n            if (Character.isUpperCase(ch)) {\n                tmp = Character.toLowerCase(ch);\n            } else if (Character.isTitleCase(ch)) {\n                tmp = Character.toLowerCase(ch);\n            } else if (Character.isLowerCase(ch)) {\n                if (whitespace) {\n                    tmp = Character.toTitleCase(ch);\n                } else {\n                    tmp = Character.toUpperCase(ch);\n                }\n            } else {\n                tmp = ch;\n            }\n            buffer.append(tmp);\n            whitespace = Character.isWhitespace(ch);\n        }\n        return buffer.toString();\n    }",
        "begin_line": 452,
        "end_line": 482,
        "comment": "\n     * <p>Swaps the case of a String using a word based algorithm.</p>\n     * \n     * <ul>\n     *  <li>Upper case character converts to Lower case</li>\n     *  <li>Title case character converts to Lower case</li>\n     *  <li>Lower case character after Whitespace or at start converts to Title case</li>\n     *  <li>Other Lower case character converts to Upper case</li>\n     * </ul>\n     * \n     * <p>Whitespace is defined by {@link Character#isWhitespace(char)}.\n     * A <code>null</code> input String returns <code>null</code>.</p>\n     * \n     * <pre>\n     * StringUtils.swapCase(null)                 = null\n     * StringUtils.swapCase(\"\")                   = \"\"\n     * StringUtils.swapCase(\"The dog has a BONE\") = \"tHE DOG HAS A bone\"\n     * </pre>\n     * \n     * @param str  the String to swap case, may be null\n     * @return the changed String, <code>null</code> if null String input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/WordUtils.java",
        "class_name": "org.apache.commons.lang.WordUtils",
        "signature": "org.apache.commons.lang.WordUtils.initials(java.lang.String)",
        "snippet": "    public static String initials(String str) {\n        return initials(str, null);\n    }",
        "begin_line": 507,
        "end_line": 509,
        "comment": "\n     * <p>Extracts the initial letters from each word in the String.</p>\n     * \n     * <p>The first letter of the string and all first letters after\n     * whitespace are returned as a new string.\n     * Their case is not changed.</p>\n     *\n     * <p>Whitespace is defined by {@link Character#isWhitespace(char)}.\n     * A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * WordUtils.initials(null)             = null\n     * WordUtils.initials(\"\")               = \"\"\n     * WordUtils.initials(\"Ben John Lee\")   = \"BJL\"\n     * WordUtils.initials(\"Ben J.Lee\")      = \"BJ\"\n     * </pre>\n     *\n     * @param str  the String to get initials from, may be null\n     * @return String of initial letters, <code>null</code> if null String input\n     * @see #initials(String,char[])\n     * @since 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/WordUtils.java",
        "class_name": "org.apache.commons.lang.WordUtils",
        "signature": "org.apache.commons.lang.WordUtils.initials(java.lang.String, char[])",
        "snippet": "    public static String initials(String str, char[] delimiters) {\n        if (str == null || str.length() == 0) {\n            return str;\n        }\n        if (delimiters != null && delimiters.length == 0) {\n            return \"\";\n        }\n        int strLen = str.length();\n        char[] buf = new char[strLen / 2 + 1];\n        int count = 0;\n        boolean lastWasGap = true;\n        for (int i = 0; i < strLen; i++) {\n            char ch = str.charAt(i);\n\n            if (isDelimiter(ch, delimiters)) {\n                lastWasGap = true;\n            } else if (lastWasGap) {\n                buf[count++] = ch;\n                lastWasGap = false;\n            } else {\n                // ignore ch\n            }\n        }\n        return new String(buf, 0, count);\n    }",
        "begin_line": 538,
        "end_line": 562,
        "comment": "\n     * <p>Extracts the initial letters from each word in the String.</p>\n     * \n     * <p>The first letter of the string and all first letters after the\n     * defined delimiters are returned as a new string.\n     * Their case is not changed.</p>\n     *\n     * <p>If the delimiters array is null, then Whitespace is used.\n     * Whitespace is defined by {@link Character#isWhitespace(char)}.\n     * A <code>null</code> input String returns <code>null</code>.\n     * An empty delimiter array returns an empty String.</p>\n     *\n     * <pre>\n     * WordUtils.initials(null, *)                = null\n     * WordUtils.initials(\"\", *)                  = \"\"\n     * WordUtils.initials(\"Ben John Lee\", null)   = \"BJL\"\n     * WordUtils.initials(\"Ben J.Lee\", null)      = \"BJ\"\n     * WordUtils.initials(\"Ben J.Lee\", [' ','.']) = \"BJL\"\n     * WordUtils.initials(*, new char[0])         = \"\"\n     * </pre>\n     * \n     * @param str  the String to get initials from, may be null\n     * @param delimiters  set of characters to determine words, null means whitespace\n     * @return String of initial letters, <code>null</code> if null String input\n     * @see #initials(String)\n     * @since 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/WordUtils.java",
        "class_name": "org.apache.commons.lang.WordUtils",
        "signature": "org.apache.commons.lang.WordUtils.isDelimiter(char, char[])",
        "snippet": "    private static boolean isDelimiter(char ch, char[] delimiters) {\n        if (delimiters == null) {\n            return Character.isWhitespace(ch);\n        }\n        for (int i = 0, isize = delimiters.length; i < isize; i++) {\n            if (ch == delimiters[i]) {\n                return true;\n            }\n        }\n        return false;\n    }",
        "begin_line": 572,
        "end_line": 582,
        "comment": "\n     * Is the character a delimiter.\n     *\n     * @param ch  the character to check\n     * @param delimiters  the delimiters\n     * @return true if it is a delimiter\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharUtils.java",
        "class_name": "org.apache.commons.lang.CharUtils",
        "signature": "org.apache.commons.lang.CharUtils.CharUtils()",
        "snippet": "    public CharUtils() {\n      super();\n    }",
        "begin_line": 86,
        "end_line": 88,
        "comment": "\n     * <p><code>CharUtils</code> instances should NOT be constructed in standard programming.\n     * Instead, the class should be used as <code>CharUtils.toString('c');</code>.</p>\n     *\n     * <p>This constructor is public to permit tools that require a JavaBean instance\n     * to operate.</p>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharUtils.java",
        "class_name": "org.apache.commons.lang.CharUtils",
        "signature": "org.apache.commons.lang.CharUtils.toCharacterObject(char)",
        "snippet": "    public static Character toCharacterObject(char ch) {\n        if (ch < CHAR_ARRAY.length) {\n            return CHAR_ARRAY[ch];\n        }\n        return new Character(ch);\n    }",
        "begin_line": 105,
        "end_line": 110,
        "comment": "\n     * <p>Converts the character to a Character.</p>\n     * \n     * <p>For ASCII 7 bit characters, this uses a cache that will return the\n     * same Character object each time.</p>\n     *\n     * <pre>\n     *   CharUtils.toCharacterObject(' ')  = ' '\n     *   CharUtils.toCharacterObject('A')  = 'A'\n     * </pre>\n     *\n     * @param ch  the character to convert\n     * @return a Character of the specified character\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharUtils.java",
        "class_name": "org.apache.commons.lang.CharUtils",
        "signature": "org.apache.commons.lang.CharUtils.toCharacterObject(java.lang.String)",
        "snippet": "    public static Character toCharacterObject(String str) {\n        if (StringUtils.isEmpty(str)) {\n            return null;\n        }\n        return toCharacterObject(str.charAt(0));\n    }",
        "begin_line": 129,
        "end_line": 134,
        "comment": "\n     * <p>Converts the String to a Character using the first character, returning\n     * null for empty Strings.</p>\n     * \n     * <p>For ASCII 7 bit characters, this uses a cache that will return the\n     * same Character object each time.</p>\n     * \n     * <pre>\n     *   CharUtils.toCharacterObject(null) = null\n     *   CharUtils.toCharacterObject(\"\")   = null\n     *   CharUtils.toCharacterObject(\"A\")  = 'A'\n     *   CharUtils.toCharacterObject(\"BA\") = 'B'\n     * </pre>\n     *\n     * @param str  the character to convert\n     * @return the Character value of the first letter of the String\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharUtils.java",
        "class_name": "org.apache.commons.lang.CharUtils",
        "signature": "org.apache.commons.lang.CharUtils.toChar(java.lang.Character)",
        "snippet": "    public static char toChar(Character ch) {\n        if (ch == null) {\n            throw new IllegalArgumentException(\"The Character must not be null\");\n        }\n        return ch.charValue();\n    }",
        "begin_line": 150,
        "end_line": 155,
        "comment": "\n     * <p>Converts the Character to a char throwing an exception for <code>null</code>.</p>\n     * \n     * <pre>\n     *   CharUtils.toChar(null) = IllegalArgumentException\n     *   CharUtils.toChar(' ')  = ' '\n     *   CharUtils.toChar('A')  = 'A'\n     * </pre>\n     *\n     * @param ch  the character to convert\n     * @return the char value of the Character\n     * @throws IllegalArgumentException if the Character is null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharUtils.java",
        "class_name": "org.apache.commons.lang.CharUtils",
        "signature": "org.apache.commons.lang.CharUtils.toChar(java.lang.Character, char)",
        "snippet": "    public static char toChar(Character ch, char defaultValue) {\n        if (ch == null) {\n            return defaultValue;\n        }\n        return ch.charValue();\n    }",
        "begin_line": 170,
        "end_line": 175,
        "comment": "\n     * <p>Converts the Character to a char handling <code>null</code>.</p>\n     * \n     * <pre>\n     *   CharUtils.toChar(null, 'X') = 'X'\n     *   CharUtils.toChar(' ', 'X')  = ' '\n     *   CharUtils.toChar('A', 'X')  = 'A'\n     * </pre>\n     *\n     * @param ch  the character to convert\n     * @param defaultValue  the value to use if the  Character is null\n     * @return the char value of the Character or the default if null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharUtils.java",
        "class_name": "org.apache.commons.lang.CharUtils",
        "signature": "org.apache.commons.lang.CharUtils.toChar(java.lang.String)",
        "snippet": "    public static char toChar(String str) {\n        if (StringUtils.isEmpty(str)) {\n            throw new IllegalArgumentException(\"The String must not be empty\");\n        }\n        return str.charAt(0);\n    }",
        "begin_line": 193,
        "end_line": 198,
        "comment": "\n     * <p>Converts the String to a char using the first character, throwing\n     * an exception on empty Strings.</p>\n     * \n     * <pre>\n     *   CharUtils.toChar(null) = IllegalArgumentException\n     *   CharUtils.toChar(\"\")   = IllegalArgumentException\n     *   CharUtils.toChar(\"A\")  = 'A'\n     *   CharUtils.toChar(\"BA\") = 'B'\n     * </pre>\n     *\n     * @param str  the character to convert\n     * @return the char value of the first letter of the String\n     * @throws IllegalArgumentException if the String is empty\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharUtils.java",
        "class_name": "org.apache.commons.lang.CharUtils",
        "signature": "org.apache.commons.lang.CharUtils.toChar(java.lang.String, char)",
        "snippet": "    public static char toChar(String str, char defaultValue) {\n        if (StringUtils.isEmpty(str)) {\n            return defaultValue;\n        }\n        return str.charAt(0);\n    }",
        "begin_line": 215,
        "end_line": 220,
        "comment": "\n     * <p>Converts the String to a char using the first character, defaulting\n     * the value on empty Strings.</p>\n     * \n     * <pre>\n     *   CharUtils.toChar(null, 'X') = 'X'\n     *   CharUtils.toChar(\"\", 'X')   = 'X'\n     *   CharUtils.toChar(\"A\", 'X')  = 'A'\n     *   CharUtils.toChar(\"BA\", 'X') = 'B'\n     * </pre>\n     *\n     * @param str  the character to convert\n     * @param defaultValue  the value to use if the  Character is null\n     * @return the char value of the first letter of the String or the default if null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharUtils.java",
        "class_name": "org.apache.commons.lang.CharUtils",
        "signature": "org.apache.commons.lang.CharUtils.toIntValue(char)",
        "snippet": "    public static int toIntValue(char ch) {\n        if (isAsciiNumeric(ch) == false) {\n            throw new IllegalArgumentException(\"The character \" + ch + \" is not in the range '0' - '9'\");\n        }\n        return ch - 48;\n    }",
        "begin_line": 238,
        "end_line": 243,
        "comment": "\n     * <p>Converts the character to the Integer it represents, throwing an\n     * exception if the character is not numeric.</p>\n     * \n     * <p>This method coverts the char '1' to the int 1 and so on.</p>\n     *\n     * <pre>\n     *   CharUtils.toIntValue('3')  = 3\n     *   CharUtils.toIntValue('A')  = IllegalArgumentException\n     * </pre>\n     *\n     * @param ch  the character to convert\n     * @return the int value of the character\n     * @throws IllegalArgumentException if the character is not ASCII numeric\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharUtils.java",
        "class_name": "org.apache.commons.lang.CharUtils",
        "signature": "org.apache.commons.lang.CharUtils.toIntValue(char, int)",
        "snippet": "    public static int toIntValue(char ch, int defaultValue) {\n        if (isAsciiNumeric(ch) == false) {\n            return defaultValue;\n        }\n        return ch - 48;\n    }",
        "begin_line": 260,
        "end_line": 265,
        "comment": "\n     * <p>Converts the character to the Integer it represents, throwing an\n     * exception if the character is not numeric.</p>\n     * \n     * <p>This method coverts the char '1' to the int 1 and so on.</p>\n     *\n     * <pre>\n     *   CharUtils.toIntValue('3', -1)  = 3\n     *   CharUtils.toIntValue('A', -1)  = -1\n     * </pre>\n     *\n     * @param ch  the character to convert\n     * @param defaultValue  the default value to use if the character is not numeric\n     * @return the int value of the character\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharUtils.java",
        "class_name": "org.apache.commons.lang.CharUtils",
        "signature": "org.apache.commons.lang.CharUtils.toIntValue(java.lang.Character)",
        "snippet": "    public static int toIntValue(Character ch) {\n        if (ch == null) {\n            throw new IllegalArgumentException(\"The character must not be null\");\n        }\n        return toIntValue(ch.charValue());\n    }",
        "begin_line": 283,
        "end_line": 288,
        "comment": "\n     * <p>Converts the character to the Integer it represents, throwing an\n     * exception if the character is not numeric.</p>\n     * \n     * <p>This method coverts the char '1' to the int 1 and so on.</p>\n     *\n     * <pre>\n     *   CharUtils.toIntValue(null) = IllegalArgumentException\n     *   CharUtils.toIntValue('3')  = 3\n     *   CharUtils.toIntValue('A')  = IllegalArgumentException\n     * </pre>\n     *\n     * @param ch  the character to convert, not null\n     * @return the int value of the character\n     * @throws IllegalArgumentException if the Character is not ASCII numeric or is null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharUtils.java",
        "class_name": "org.apache.commons.lang.CharUtils",
        "signature": "org.apache.commons.lang.CharUtils.toIntValue(java.lang.Character, int)",
        "snippet": "    public static int toIntValue(Character ch, int defaultValue) {\n        if (ch == null) {\n            return defaultValue;\n        }\n        return toIntValue(ch.charValue(), defaultValue);\n    }",
        "begin_line": 306,
        "end_line": 311,
        "comment": "\n     * <p>Converts the character to the Integer it represents, throwing an\n     * exception if the character is not numeric.</p>\n     * \n     * <p>This method coverts the char '1' to the int 1 and so on.</p>\n     *\n     * <pre>\n     *   CharUtils.toIntValue(null, -1) = -1\n     *   CharUtils.toIntValue('3', -1)  = 3\n     *   CharUtils.toIntValue('A', -1)  = -1\n     * </pre>\n     *\n     * @param ch  the character to convert\n     * @param defaultValue  the default value to use if the character is not numeric\n     * @return the int value of the character\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharUtils.java",
        "class_name": "org.apache.commons.lang.CharUtils",
        "signature": "org.apache.commons.lang.CharUtils.toString(char)",
        "snippet": "    public static String toString(char ch) {\n        if (ch < 128) {\n            return CHAR_STRING_ARRAY[ch];\n        }\n        return new String(new char[] {ch});\n    }",
        "begin_line": 328,
        "end_line": 333,
        "comment": "\n     * <p>Converts the character to a String that contains the one character.</p>\n     * \n     * <p>For ASCII 7 bit characters, this uses a cache that will return the\n     * same String object each time.</p>\n     *\n     * <pre>\n     *   CharUtils.toString(' ')  = \" \"\n     *   CharUtils.toString('A')  = \"A\"\n     * </pre>\n     *\n     * @param ch  the character to convert\n     * @return a String containing the one specified character\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharUtils.java",
        "class_name": "org.apache.commons.lang.CharUtils",
        "signature": "org.apache.commons.lang.CharUtils.toString(java.lang.Character)",
        "snippet": "    public static String toString(Character ch) {\n        if (ch == null) {\n            return null;\n        }\n        return toString(ch.charValue());\n    }",
        "begin_line": 352,
        "end_line": 357,
        "comment": "\n     * <p>Converts the character to a String that contains the one character.</p>\n     * \n     * <p>For ASCII 7 bit characters, this uses a cache that will return the\n     * same String object each time.</p>\n     * \n     * <p>If <code>null</code> is passed in, <code>null</code> will be returned.</p>\n     *\n     * <pre>\n     *   CharUtils.toString(null) = null\n     *   CharUtils.toString(' ')  = \" \"\n     *   CharUtils.toString('A')  = \"A\"\n     * </pre>\n     *\n     * @param ch  the character to convert\n     * @return a String containing the one specified character\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharUtils.java",
        "class_name": "org.apache.commons.lang.CharUtils",
        "signature": "org.apache.commons.lang.CharUtils.unicodeEscaped(char)",
        "snippet": "    public static String unicodeEscaped(char ch) {\n        if (ch < 0x10) {\n            return \"\\\\u000\" + Integer.toHexString(ch);\n        } else if (ch < 0x100) {\n            return \"\\\\u00\" + Integer.toHexString(ch);\n        } else if (ch < 0x1000) {\n            return \"\\\\u0\" + Integer.toHexString(ch);\n        }\n        return \"\\\\u\" + Integer.toHexString(ch);\n    }",
        "begin_line": 373,
        "end_line": 382,
        "comment": "\n     * <p>Converts the string to the unicode format '\\u0020'.</p>\n     * \n     * <p>This format is the Java source code format.</p>\n     *\n     * <pre>\n     *   CharUtils.unicodeEscaped(' ') = \"\\u0020\"\n     *   CharUtils.unicodeEscaped('A') = \"\\u0041\"\n     * </pre>\n     * \n     * @param ch  the character to convert\n     * @return the escaped unicode string\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharUtils.java",
        "class_name": "org.apache.commons.lang.CharUtils",
        "signature": "org.apache.commons.lang.CharUtils.unicodeEscaped(java.lang.Character)",
        "snippet": "    public static String unicodeEscaped(Character ch) {\n        if (ch == null) {\n            return null;\n        }\n        return unicodeEscaped(ch.charValue());\n    }",
        "begin_line": 400,
        "end_line": 405,
        "comment": "\n     * <p>Converts the string to the unicode format '\\u0020'.</p>\n     * \n     * <p>This format is the Java source code format.</p>\n     * \n     * <p>If <code>null</code> is passed in, <code>null</code> will be returned.</p>\n     *\n     * <pre>\n     *   CharUtils.unicodeEscaped(null) = null\n     *   CharUtils.unicodeEscaped(' ')  = \"\\u0020\"\n     *   CharUtils.unicodeEscaped('A')  = \"\\u0041\"\n     * </pre>\n     * \n     * @param ch  the character to convert, may be null\n     * @return the escaped unicode string, null if null input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharUtils.java",
        "class_name": "org.apache.commons.lang.CharUtils",
        "signature": "org.apache.commons.lang.CharUtils.isAscii(char)",
        "snippet": "    public static boolean isAscii(char ch) {\n        return ch < 128;\n    }",
        "begin_line": 423,
        "end_line": 425,
        "comment": "\n     * <p>Checks whether the character is ASCII 7 bit.</p>\n     *\n     * <pre>\n     *   CharUtils.isAscii('a')  = true\n     *   CharUtils.isAscii('A')  = true\n     *   CharUtils.isAscii('3')  = true\n     *   CharUtils.isAscii('-')  = true\n     *   CharUtils.isAscii('\\n') = true\n     *   CharUtils.isAscii('&copy;') = false\n     * </pre>\n     * \n     * @param ch  the character to check\n     * @return true if less than 128\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharUtils.java",
        "class_name": "org.apache.commons.lang.CharUtils",
        "signature": "org.apache.commons.lang.CharUtils.isAsciiPrintable(char)",
        "snippet": "    public static boolean isAsciiPrintable(char ch) {\n        return ch >= 32 && ch < 127;\n    }",
        "begin_line": 442,
        "end_line": 444,
        "comment": "\n     * <p>Checks whether the character is ASCII 7 bit printable.</p>\n     *\n     * <pre>\n     *   CharUtils.isAsciiPrintable('a')  = true\n     *   CharUtils.isAsciiPrintable('A')  = true\n     *   CharUtils.isAsciiPrintable('3')  = true\n     *   CharUtils.isAsciiPrintable('-')  = true\n     *   CharUtils.isAsciiPrintable('\\n') = false\n     *   CharUtils.isAsciiPrintable('&copy;') = false\n     * </pre>\n     * \n     * @param ch  the character to check\n     * @return true if between 32 and 126 inclusive\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharUtils.java",
        "class_name": "org.apache.commons.lang.CharUtils",
        "signature": "org.apache.commons.lang.CharUtils.isAsciiControl(char)",
        "snippet": "    public static boolean isAsciiControl(char ch) {\n        return ch < 32 || ch == 127;\n    }",
        "begin_line": 461,
        "end_line": 463,
        "comment": "\n     * <p>Checks whether the character is ASCII 7 bit control.</p>\n     *\n     * <pre>\n     *   CharUtils.isAsciiControl('a')  = false\n     *   CharUtils.isAsciiControl('A')  = false\n     *   CharUtils.isAsciiControl('3')  = false\n     *   CharUtils.isAsciiControl('-')  = false\n     *   CharUtils.isAsciiControl('\\n') = true\n     *   CharUtils.isAsciiControl('&copy;') = false\n     * </pre>\n     * \n     * @param ch  the character to check\n     * @return true if less than 32 or equals 127\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharUtils.java",
        "class_name": "org.apache.commons.lang.CharUtils",
        "signature": "org.apache.commons.lang.CharUtils.isAsciiAlpha(char)",
        "snippet": "    public static boolean isAsciiAlpha(char ch) {\n        return (ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z');\n    }",
        "begin_line": 480,
        "end_line": 482,
        "comment": "\n     * <p>Checks whether the character is ASCII 7 bit alphabetic.</p>\n     *\n     * <pre>\n     *   CharUtils.isAsciiAlpha('a')  = true\n     *   CharUtils.isAsciiAlpha('A')  = true\n     *   CharUtils.isAsciiAlpha('3')  = false\n     *   CharUtils.isAsciiAlpha('-')  = false\n     *   CharUtils.isAsciiAlpha('\\n') = false\n     *   CharUtils.isAsciiAlpha('&copy;') = false\n     * </pre>\n     * \n     * @param ch  the character to check\n     * @return true if between 65 and 90 or 97 and 122 inclusive\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharUtils.java",
        "class_name": "org.apache.commons.lang.CharUtils",
        "signature": "org.apache.commons.lang.CharUtils.isAsciiAlphaUpper(char)",
        "snippet": "    public static boolean isAsciiAlphaUpper(char ch) {\n        return ch >= 'A' && ch <= 'Z';\n    }",
        "begin_line": 499,
        "end_line": 501,
        "comment": "\n     * <p>Checks whether the character is ASCII 7 bit alphabetic upper case.</p>\n     *\n     * <pre>\n     *   CharUtils.isAsciiAlphaUpper('a')  = false\n     *   CharUtils.isAsciiAlphaUpper('A')  = true\n     *   CharUtils.isAsciiAlphaUpper('3')  = false\n     *   CharUtils.isAsciiAlphaUpper('-')  = false\n     *   CharUtils.isAsciiAlphaUpper('\\n') = false\n     *   CharUtils.isAsciiAlphaUpper('&copy;') = false\n     * </pre>\n     * \n     * @param ch  the character to check\n     * @return true if between 65 and 90 inclusive\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharUtils.java",
        "class_name": "org.apache.commons.lang.CharUtils",
        "signature": "org.apache.commons.lang.CharUtils.isAsciiAlphaLower(char)",
        "snippet": "    public static boolean isAsciiAlphaLower(char ch) {\n        return ch >= 'a' && ch <= 'z';\n    }",
        "begin_line": 518,
        "end_line": 520,
        "comment": "\n     * <p>Checks whether the character is ASCII 7 bit alphabetic lower case.</p>\n     *\n     * <pre>\n     *   CharUtils.isAsciiAlphaLower('a')  = true\n     *   CharUtils.isAsciiAlphaLower('A')  = false\n     *   CharUtils.isAsciiAlphaLower('3')  = false\n     *   CharUtils.isAsciiAlphaLower('-')  = false\n     *   CharUtils.isAsciiAlphaLower('\\n') = false\n     *   CharUtils.isAsciiAlphaLower('&copy;') = false\n     * </pre>\n     * \n     * @param ch  the character to check\n     * @return true if between 97 and 122 inclusive\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharUtils.java",
        "class_name": "org.apache.commons.lang.CharUtils",
        "signature": "org.apache.commons.lang.CharUtils.isAsciiNumeric(char)",
        "snippet": "    public static boolean isAsciiNumeric(char ch) {\n        return ch >= '0' && ch <= '9';\n    }",
        "begin_line": 537,
        "end_line": 539,
        "comment": "\n     * <p>Checks whether the character is ASCII 7 bit numeric.</p>\n     *\n     * <pre>\n     *   CharUtils.isAsciiNumeric('a')  = false\n     *   CharUtils.isAsciiNumeric('A')  = false\n     *   CharUtils.isAsciiNumeric('3')  = true\n     *   CharUtils.isAsciiNumeric('-')  = false\n     *   CharUtils.isAsciiNumeric('\\n') = false\n     *   CharUtils.isAsciiNumeric('&copy;') = false\n     * </pre>\n     * \n     * @param ch  the character to check\n     * @return true if between 48 and 57 inclusive\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharUtils.java",
        "class_name": "org.apache.commons.lang.CharUtils",
        "signature": "org.apache.commons.lang.CharUtils.isAsciiAlphanumeric(char)",
        "snippet": "    public static boolean isAsciiAlphanumeric(char ch) {\n        return (ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z') || (ch >= '0' && ch <= '9');\n    }",
        "begin_line": 556,
        "end_line": 558,
        "comment": "\n     * <p>Checks whether the character is ASCII 7 bit numeric.</p>\n     *\n     * <pre>\n     *   CharUtils.isAsciiAlphanumeric('a')  = true\n     *   CharUtils.isAsciiAlphanumeric('A')  = true\n     *   CharUtils.isAsciiAlphanumeric('3')  = true\n     *   CharUtils.isAsciiAlphanumeric('-')  = false\n     *   CharUtils.isAsciiAlphanumeric('\\n') = false\n     *   CharUtils.isAsciiAlphanumeric('&copy;') = false\n     * </pre>\n     * \n     * @param ch  the character to check\n     * @return true if between 48 and 57 or 65 and 90 or 97 and 122 inclusive\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharEncoding.java",
        "class_name": "org.apache.commons.lang.CharEncoding",
        "signature": "org.apache.commons.lang.CharEncoding.isSupported(java.lang.String)",
        "snippet": "    public static boolean isSupported(String name) {\n        if (name == null) {\n            return false;\n        }\n        try {\n            new String(ArrayUtils.EMPTY_BYTE_ARRAY, name);\n        } catch (UnsupportedEncodingException e) {\n            return false;\n        }\n        return true;\n    }",
        "begin_line": 141,
        "end_line": 151,
        "comment": "\n     * <p>\n     * Returns whether the named charset is supported.\n     * </p>\n     * <p>\n     * This is similar to <a\n     * href=\"http://java.sun.com/j2se/1.4.2/docs/api/java/nio/charset/Charset.html#isSupported(java.lang.String)\">\n     * java.nio.charset.Charset.isSupported(String)</a>\n     * </p>\n     * \n     * @param name\n     *            the name of the requested charset; may be either a canonical name or an alias\n     * @return <code>true</code> if, and only if, support for the named charset is available in the current Java\n     *         virtual machine\n     * \n     * @see <a href=\"http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc\">JRE character\n     *      encoding names</a>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NumberUtils.java",
        "class_name": "org.apache.commons.lang.NumberUtils",
        "signature": "org.apache.commons.lang.NumberUtils.NumberUtils()",
        "snippet": "    public NumberUtils() {\n      super();\n    }",
        "begin_line": 46,
        "end_line": 48,
        "comment": "\n     * <p><code>NumberUtils</code> instances should NOT be constructed in standard programming.\n     * Instead, the class should be used as <code>NumberUtils.stringToInt(\"6\");</code>.</p>\n     *\n     * <p>This constructor is public to permit tools that require a JavaBean instance\n     * to operate.</p>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NumberUtils.java",
        "class_name": "org.apache.commons.lang.NumberUtils",
        "signature": "org.apache.commons.lang.NumberUtils.stringToInt(java.lang.String)",
        "snippet": "    public static int stringToInt(String str) {\n        return stringToInt(str, 0);\n    }",
        "begin_line": 60,
        "end_line": 62,
        "comment": "\n     * <p>Convert a <code>String</code> to an <code>int</code>, returning\n     * <code>zero</code> if the conversion fails.</p>\n     * \n     * @param str  the string to convert\n     * @return the int represented by the string, or <code>zero</code> if\n     *  conversion fails\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NumberUtils.java",
        "class_name": "org.apache.commons.lang.NumberUtils",
        "signature": "org.apache.commons.lang.NumberUtils.stringToInt(java.lang.String, int)",
        "snippet": "    public static int stringToInt(String str, int defaultValue) {\n        try {\n            return Integer.parseInt(str);\n        } catch (NumberFormatException nfe) {\n            return defaultValue;\n        }\n    }",
        "begin_line": 72,
        "end_line": 78,
        "comment": "\n     * <p>Convert a <code>String</code> to an <code>int</code>, returning a\n     * default value if the conversion fails.</p>\n     * \n     * @param str  the string to convert\n     * @param defaultValue  the default value\n     * @return the int represented by the string, or the default if conversion fails\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NumberUtils.java",
        "class_name": "org.apache.commons.lang.NumberUtils",
        "signature": "org.apache.commons.lang.NumberUtils.createNumber(java.lang.String)",
        "snippet": "    public static Number createNumber(String val) throws NumberFormatException {\n        if (val == null) {\n            return null;\n        }\n        if (val.length() == 0) {\n            throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n        }\n        if (val.startsWith(\"--\")) {\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear \n            // to be in specification of class. OS X Java parses it to \n            // a wrong value.\n            return null;\n        }\n        if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n            return createInteger(val);\n        }   \n        char lastChar = val.charAt(val.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        int decPos = val.indexOf('.');\n        int expPos = val.indexOf('e') + val.indexOf('E') + 1;\n\n        if (decPos > -1) {\n\n            if (expPos > -1) {\n                if (expPos < decPos) {\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n                }\n                dec = val.substring(decPos + 1, expPos);\n            } else {\n                dec = val.substring(decPos + 1);\n            }\n            mant = val.substring(0, decPos);\n        } else {\n            if (expPos > -1) {\n                mant = val.substring(0, expPos);\n            } else {\n                mant = val;\n            }\n            dec = null;\n        }\n        if (!Character.isDigit(lastChar)) {\n            if (expPos > -1 && expPos < val.length() - 1) {\n                exp = val.substring(expPos + 1, val.length() - 1);\n            } else {\n                exp = null;\n            }\n            //Requesting a specific type..\n            String numeric = val.substring(0, val.length() - 1);\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n            switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    if (dec == null\n                        && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                        try {\n                            return createLong(numeric);\n                        } catch (NumberFormatException nfe) {\n                            //Too big for a long\n                        }\n                        return createBigInteger(numeric);\n\n                    }\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        Float f = NumberUtils.createFloat(numeric);\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            //If it's too big for a float or the float value = 0 and the string\n                            //has non-zeros in it, then float does not have the precision we want\n                            return f;\n                        }\n\n                    } catch (NumberFormatException e) {\n                        // ignore the bad number\n                    }\n                    //Fall through\n                case 'd' :\n                case 'D' :\n                    try {\n                        Double d = NumberUtils.createDouble(numeric);\n                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe) {\n                        // empty catch\n                    }\n                    try {\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) {\n                        // empty catch\n                    }\n                    //Fall through\n                default :\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n\n            }\n        } else {\n            //User doesn't have a preference on the return type, so let's start\n            //small and go from there...\n            if (expPos > -1 && expPos < val.length() - 1) {\n                exp = val.substring(expPos + 1, val.length());\n            } else {\n                exp = null;\n            }\n            if (dec == null && exp == null) {\n                //Must be an int,long,bigint\n                try {\n                    return createInteger(val);\n                } catch (NumberFormatException nfe) {\n                    // empty catch\n                }\n                try {\n                    return createLong(val);\n                } catch (NumberFormatException nfe) {\n                    // empty catch\n                }\n                return createBigInteger(val);\n\n            } else {\n                //Must be a float,double,BigDec\n                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                try {\n                    Float f = createFloat(val);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // empty catch\n                }\n                try {\n                    Double d = createDouble(val);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // empty catch\n                }\n\n                return createBigDecimal(val);\n\n            }\n\n        }\n    }",
        "begin_line": 138,
        "end_line": 286,
        "comment": "\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>First, the value is examined for a type qualifier on the end\n     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts \n     * trying to create successively larger types from the type specified\n     * until one is found that can hold the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it\n     * will be interpreted as a hexadecimal integer.  Values with leading\n     * <code>0</code>'s will not be interpreted as octal.</p>\n     *\n     * @param val String containing a number\n     * @return Number created from the string\n     * @throws NumberFormatException if the value cannot be converted\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NumberUtils.java",
        "class_name": "org.apache.commons.lang.NumberUtils",
        "signature": "org.apache.commons.lang.NumberUtils.isAllZeros(java.lang.String)",
        "snippet": "    private static boolean isAllZeros(String s) {\n        if (s == null) {\n            return true;\n        }\n        for (int i = s.length() - 1; i >= 0; i--) {\n            if (s.charAt(i) != '0') {\n                return false;\n            }\n        }\n        return s.length() > 0;\n    }",
        "begin_line": 296,
        "end_line": 306,
        "comment": "\n     * <p>Utility method for {@link #createNumber(java.lang.String)}.</p>\n     *\n     * <p>Returns <code>true</code> if s is <code>null</code>.</p>\n     * \n     * @param s the String to check\n     * @return if it is all zeros or <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NumberUtils.java",
        "class_name": "org.apache.commons.lang.NumberUtils",
        "signature": "org.apache.commons.lang.NumberUtils.createFloat(java.lang.String)",
        "snippet": "    public static Float createFloat(String val) {\n        return Float.valueOf(val);\n    }",
        "begin_line": 317,
        "end_line": 319,
        "comment": "\n     * <p>Convert a <code>String</code> to a <code>Float</code>.</p>\n     * \n     * @param val  a <code>String</code> to convert\n     * @return converted <code>Float</code>\n     * @throws NumberFormatException if the value cannot be converted\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NumberUtils.java",
        "class_name": "org.apache.commons.lang.NumberUtils",
        "signature": "org.apache.commons.lang.NumberUtils.createDouble(java.lang.String)",
        "snippet": "    public static Double createDouble(String val) {\n        return Double.valueOf(val);\n    }",
        "begin_line": 328,
        "end_line": 330,
        "comment": "\n     * <p>Convert a <code>String</code> to a <code>Double</code>.</p>\n     * \n     * @param val  a <code>String</code> to convert\n     * @return converted <code>Double</code>\n     * @throws NumberFormatException if the value cannot be converted\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NumberUtils.java",
        "class_name": "org.apache.commons.lang.NumberUtils",
        "signature": "org.apache.commons.lang.NumberUtils.createInteger(java.lang.String)",
        "snippet": "    public static Integer createInteger(String val) {\n        // decode() handles 0xAABD and 0777 (hex and octal) as well.\n        return Integer.decode(val);\n    }",
        "begin_line": 340,
        "end_line": 343,
        "comment": "\n     * <p>Convert a <code>String</code> to a <code>Integer</code>, handling\n     * hex and octal notations.</p>\n     * \n     * @param val  a <code>String</code> to convert\n     * @return converted <code>Integer</code>\n     * @throws NumberFormatException if the value cannot be converted\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NumberUtils.java",
        "class_name": "org.apache.commons.lang.NumberUtils",
        "signature": "org.apache.commons.lang.NumberUtils.createLong(java.lang.String)",
        "snippet": "    public static Long createLong(String val) {\n        return Long.valueOf(val);\n    }",
        "begin_line": 352,
        "end_line": 354,
        "comment": "\n     * <p>Convert a <code>String</code> to a <code>Long</code>.</p>\n     * \n     * @param val  a <code>String</code> to convert\n     * @return converted <code>Long</code>\n     * @throws NumberFormatException if the value cannot be converted\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NumberUtils.java",
        "class_name": "org.apache.commons.lang.NumberUtils",
        "signature": "org.apache.commons.lang.NumberUtils.createBigInteger(java.lang.String)",
        "snippet": "    public static BigInteger createBigInteger(String val) {\n        BigInteger bi = new BigInteger(val);\n        return bi;\n    }",
        "begin_line": 363,
        "end_line": 366,
        "comment": "\n     * <p>Convert a <code>String</code> to a <code>BigInteger</code>.</p>\n     * \n     * @param val  a <code>String</code> to convert\n     * @return converted <code>BigInteger</code>\n     * @throws NumberFormatException if the value cannot be converted\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NumberUtils.java",
        "class_name": "org.apache.commons.lang.NumberUtils",
        "signature": "org.apache.commons.lang.NumberUtils.createBigDecimal(java.lang.String)",
        "snippet": "    public static BigDecimal createBigDecimal(String val) {\n        BigDecimal bd = new BigDecimal(val);\n        return bd;\n    }",
        "begin_line": 375,
        "end_line": 378,
        "comment": "\n     * <p>Convert a <code>String</code> to a <code>BigDecimal</code>.</p>\n     * \n     * @param val  a <code>String</code> to convert\n     * @return converted <code>BigDecimal</code>\n     * @throws NumberFormatException if the value cannot be converted\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NumberUtils.java",
        "class_name": "org.apache.commons.lang.NumberUtils",
        "signature": "org.apache.commons.lang.NumberUtils.minimum(long, long, long)",
        "snippet": "    public static long minimum(long a, long b, long c) {\n        if (b < a) {\n            a = b;\n        }\n        if (c < a) {\n            a = c;\n        }\n        return a;\n    }",
        "begin_line": 390,
        "end_line": 398,
        "comment": "\n     * <p>Gets the minimum of three <code>long</code> values.</p>\n     * \n     * @param a  value 1\n     * @param b  value 2\n     * @param c  value 3\n     * @return  the smallest of the values\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NumberUtils.java",
        "class_name": "org.apache.commons.lang.NumberUtils",
        "signature": "org.apache.commons.lang.NumberUtils.minimum(int, int, int)",
        "snippet": "    public static int minimum(int a, int b, int c) {\n        if (b < a) {\n            a = b;\n        }\n        if (c < a) {\n            a = c;\n        }\n        return a;\n    }",
        "begin_line": 408,
        "end_line": 416,
        "comment": "\n     * <p>Gets the minimum of three <code>int</code> values.</p>\n     * \n     * @param a  value 1\n     * @param b  value 2\n     * @param c  value 3\n     * @return  the smallest of the values\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NumberUtils.java",
        "class_name": "org.apache.commons.lang.NumberUtils",
        "signature": "org.apache.commons.lang.NumberUtils.maximum(long, long, long)",
        "snippet": "    public static long maximum(long a, long b, long c) {\n        if (b > a) {\n            a = b;\n        }\n        if (c > a) {\n            a = c;\n        }\n        return a;\n    }",
        "begin_line": 426,
        "end_line": 434,
        "comment": "\n     * <p>Gets the maximum of three <code>long</code> values.</p>\n     * \n     * @param a  value 1\n     * @param b  value 2\n     * @param c  value 3\n     * @return  the largest of the values\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NumberUtils.java",
        "class_name": "org.apache.commons.lang.NumberUtils",
        "signature": "org.apache.commons.lang.NumberUtils.maximum(int, int, int)",
        "snippet": "    public static int maximum(int a, int b, int c) {\n        if (b > a) {\n            a = b;\n        }\n        if (c > a) {\n            a = c;\n        }\n        return a;\n    }",
        "begin_line": 444,
        "end_line": 452,
        "comment": "\n     * <p>Gets the maximum of three <code>int</code> values.</p>\n     * \n     * @param a  value 1\n     * @param b  value 2\n     * @param c  value 3\n     * @return  the largest of the values\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NumberUtils.java",
        "class_name": "org.apache.commons.lang.NumberUtils",
        "signature": "org.apache.commons.lang.NumberUtils.compare(double, double)",
        "snippet": "    public static int compare(double lhs, double rhs) {\n        if (lhs < rhs) {\n            return -1;\n        }\n        if (lhs > rhs) {\n            return +1;\n        }\n        // Need to compare bits to handle 0.0 == -0.0 being true\n        // compare should put -0.0 < +0.0\n        // Two NaNs are also == for compare purposes\n        // where NaN == NaN is false\n        long lhsBits = Double.doubleToLongBits(lhs);\n        long rhsBits = Double.doubleToLongBits(rhs);\n        if (lhsBits == rhsBits) {\n            return 0;\n        }\n        // Something exotic! A comparison to NaN or 0.0 vs -0.0\n        // Fortunately NaN's long is > than everything else\n        // Also negzeros bits < poszero\n        // NAN: 9221120237041090560\n        // MAX: 9218868437227405311\n        // NEGZERO: -9223372036854775808\n        if (lhsBits < rhsBits) {\n            return -1;\n        } else {\n            return +1;\n        }\n    }",
        "begin_line": 490,
        "end_line": 517,
        "comment": "\n     * <p>Compares two <code>doubles</code> for order.</p>\n     *\n     * <p>This method is more comprehensive than the standard Java greater\n     * than, less than and equals operators.</p>\n     * <ul>\n     *  <li>It returns <code>-1</code> if the first value is less than the second.\n     *  <li>It returns <code>+1</code> if the first value is greater than the second.\n     *  <li>It returns <code>0</code> if the values are equal.\n     * </ul>\n     *\n     * <p>\n     * The ordering is as follows, largest to smallest:\n     * <ul>\n     *  <li>NaN\n     *  <li>Positive infinity\n     *  <li>Maximum double\n     *  <li>Normal positive numbers\n     *  <li>+0.0\n     *  <li>-0.0\n     *  <li>Normal negative numbers\n     *  <li>Minimum double (-Double.MAX_VALUE)\n     *  <li>Negative infinity\n     * </ul>\n     * </p>\n     *\n     * <p>Comparing <code>NaN</code> with <code>NaN</code> will\n     * return <code>0</code>.</p>\n     * \n     * @param lhs  the first <code>double</code>\n     * @param rhs  the second <code>double</code>\n     * @return <code>-1</code> if lhs is less, <code>+1</code> if greater,\n     *  <code>0</code> if equal to rhs\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NumberUtils.java",
        "class_name": "org.apache.commons.lang.NumberUtils",
        "signature": "org.apache.commons.lang.NumberUtils.compare(float, float)",
        "snippet": "    public static int compare(float lhs, float rhs) {\n        if (lhs < rhs) {\n            return -1;\n        }\n        if (lhs > rhs) {\n            return +1;\n        }\n        //Need to compare bits to handle 0.0 == -0.0 being true\n        // compare should put -0.0 < +0.0\n        // Two NaNs are also == for compare purposes\n        // where NaN == NaN is false\n        int lhsBits = Float.floatToIntBits(lhs);\n        int rhsBits = Float.floatToIntBits(rhs);\n        if (lhsBits == rhsBits) {\n            return 0;\n        }\n        //Something exotic! A comparison to NaN or 0.0 vs -0.0\n        //Fortunately NaN's int is > than everything else\n        //Also negzeros bits < poszero\n        //NAN: 2143289344\n        //MAX: 2139095039\n        //NEGZERO: -2147483648\n        if (lhsBits < rhsBits) {\n            return -1;\n        } else {\n            return +1;\n        }\n    }",
        "begin_line": 551,
        "end_line": 578,
        "comment": "\n     * <p>Compares two floats for order.</p>\n     *\n     * <p>This method is more comprehensive than the standard Java greater than,\n     * less than and equals operators.</p>\n     * <ul>\n     *  <li>It returns <code>-1</code> if the first value is less than the second.\n     *  <li>It returns <code>+1</code> if the first value is greater than the second.\n     *  <li>It returns <code>0</code> if the values are equal.\n     * </ul>\n     *\n     * <p> The ordering is as follows, largest to smallest:\n     * <ul>\n     * <li>NaN\n     * <li>Positive infinity\n     * <li>Maximum float\n     * <li>Normal positive numbers\n     * <li>+0.0\n     * <li>-0.0\n     * <li>Normal negative numbers\n     * <li>Minimum float (-Float.MAX_VALUE)\n     * <li>Negative infinity\n     * </ul>\n     *\n     * <p>Comparing <code>NaN</code> with <code>NaN</code> will return\n     * <code>0</code>.</p>\n     * \n     * @param lhs  the first <code>float</code>\n     * @param rhs  the second <code>float</code>\n     * @return <code>-1</code> if lhs is less, <code>+1</code> if greater,\n     *  <code>0</code> if equal to rhs\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NumberUtils.java",
        "class_name": "org.apache.commons.lang.NumberUtils",
        "signature": "org.apache.commons.lang.NumberUtils.isDigits(java.lang.String)",
        "snippet": "    public static boolean isDigits(String str) {\n        if ((str == null) || (str.length() == 0)) {\n            return false;\n        }\n        for (int i = 0; i < str.length(); i++) {\n            if (!Character.isDigit(str.charAt(i))) {\n                return false;\n            }\n        }\n        return true;\n    }",
        "begin_line": 592,
        "end_line": 602,
        "comment": "\n     * <p>Checks whether the <code>String</code> contains only\n     * digit characters.</p>\n     *\n     * <p><code>Null</code> and empty String will return\n     * <code>false</code>.</p>\n     *\n     * @param str  the <code>String</code> to check\n     * @return <code>true</code> if str contains only unicode numeric\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NumberUtils.java",
        "class_name": "org.apache.commons.lang.NumberUtils",
        "signature": "org.apache.commons.lang.NumberUtils.isNumber(java.lang.String)",
        "snippet": "    public static boolean isNumber(String str) {\n        if (StringUtils.isEmpty(str)) {\n            return false;\n        }\n        char[] chars = str.toCharArray();\n        int sz = chars.length;\n        boolean hasExp = false;\n        boolean hasDecPoint = false;\n        boolean allowSigns = false;\n        boolean foundDigit = false;\n        // deal with any possible sign up front\n        int start = (chars[0] == '-') ? 1 : 0;\n        if (sz > start + 1) {\n            if (chars[start] == '0' && chars[start + 1] == 'x') {\n                int i = start + 2;\n                if (i == sz) {\n                    return false; // str == \"0x\"\n                }\n                // checking hex (it can't be anything else)\n                for (; i < chars.length; i++) {\n                    if ((chars[i] < '0' || chars[i] > '9')\n                        && (chars[i] < 'a' || chars[i] > 'f')\n                        && (chars[i] < 'A' || chars[i] > 'F')) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n        sz--; // don't want to loop to the last char, check it afterwords\n              // for type qualifiers\n        int i = start;\n        // loop to the next to last char or to the last char if we need another digit to\n        // make a valid number (e.g. chars[0..5] = \"1234E\")\n        while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {\n            if (chars[i] >= '0' && chars[i] <= '9') {\n                foundDigit = true;\n                allowSigns = false;\n\n            } else if (chars[i] == '.') {\n                if (hasDecPoint || hasExp) {\n                    // two decimal points or dec in exponent   \n                    return false;\n                }\n                hasDecPoint = true;\n            } else if (chars[i] == 'e' || chars[i] == 'E') {\n                // we've already taken care of hex.\n                if (hasExp) {\n                    // two E's\n                    return false;\n                }\n                if (!foundDigit) {\n                    return false;\n                }\n                hasExp = true;\n                allowSigns = true;\n            } else if (chars[i] == '+' || chars[i] == '-') {\n                if (!allowSigns) {\n                    return false;\n                }\n                allowSigns = false;\n                foundDigit = false; // we need a digit after the E\n            } else {\n                return false;\n            }\n            i++;\n        }\n        if (i < chars.length) {\n            if (chars[i] >= '0' && chars[i] <= '9') {\n                // no type qualifier, OK\n                return true;\n            }\n            if (chars[i] == 'e' || chars[i] == 'E') {\n                // can't have an E at the last byte\n                return false;\n            }\n            if (!allowSigns\n                && (chars[i] == 'd'\n                    || chars[i] == 'D'\n                    || chars[i] == 'f'\n                    || chars[i] == 'F')) {\n                return foundDigit;\n            }\n            if (chars[i] == 'l'\n                || chars[i] == 'L') {\n                // not allowing L with an exponent\n                return foundDigit && !hasExp;\n            }\n            // last character is illegal\n            return false;\n        }\n        // allowSigns is true iff the val ends in 'E'\n        // found digit it to make sure weird stuff like '.' and '1E-' doesn't pass\n        return !allowSigns && foundDigit;\n    }",
        "begin_line": 617,
        "end_line": 711,
        "comment": "\n     * <p>Checks whether the String a valid Java number.</p>\n     *\n     * <p>Valid numbers include hexadecimal marked with the <code>0x</code>\n     * qualifier, scientific notation and numbers marked with a type\n     * qualifier (e.g. 123L).</p>\n     *\n     * <p><code>Null</code> and empty String will return\n     * <code>false</code>.</p>\n     *\n     * @param str  the <code>String</code> to check\n     * @return <code>true</code> if the string is a correctly formatted number\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.NumberUtils()",
        "snippet": "    public NumberUtils() {\n        super();\n    }",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\n     * <p><code>NumberUtils</code> instances should NOT be constructed in standard programming.\n     * Instead, the class should be used as <code>NumberUtils.stringToInt(\"6\");</code>.</p>\n     *\n     * <p>This constructor is public to permit tools that require a JavaBean instance\n     * to operate.</p>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.stringToInt(java.lang.String)",
        "snippet": "    public static int stringToInt(String str) {\n        return toInt(str);\n    }",
        "begin_line": 107,
        "end_line": 109,
        "comment": "\n     * <p>Convert a <code>String</code> to an <code>int</code>, returning\n     * <code>zero</code> if the conversion fails.</p>\n     *\n     * <p>If the string is <code>null</code>, <code>zero</code> is returned.</p>\n     * \n     * <pre>\n     *   NumberUtils.stringToInt(null) = 0\n     *   NumberUtils.stringToInt(\"\")   = 0\n     *   NumberUtils.stringToInt(\"1\")  = 1\n     * </pre>\n     *\n     * @param str  the string to convert, may be null\n     * @return the int represented by the string, or <code>zero</code> if\n     *  conversion fails\n     * @deprecated Use {@link #toInt(String)}\n     *  This method will be removed in Commons Lang 3.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.toInt(java.lang.String)",
        "snippet": "    public static int toInt(String str) {\n        return toInt(str, 0);\n    }",
        "begin_line": 128,
        "end_line": 130,
        "comment": "\n     * <p>Convert a <code>String</code> to an <code>int</code>, returning\n     * <code>zero</code> if the conversion fails.</p>\n     *\n     * <p>If the string is <code>null</code>, <code>zero</code> is returned.</p>\n     *\n     * <pre>\n     *   NumberUtils.toInt(null) = 0\n     *   NumberUtils.toInt(\"\")   = 0\n     *   NumberUtils.toInt(\"1\")  = 1\n     * </pre>\n     *\n     * @param str  the string to convert, may be null\n     * @return the int represented by the string, or <code>zero</code> if\n     *  conversion fails\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.stringToInt(java.lang.String, int)",
        "snippet": "    public static int stringToInt(String str, int defaultValue) {\n        return toInt(str, defaultValue);\n    }",
        "begin_line": 150,
        "end_line": 152,
        "comment": "\n     * <p>Convert a <code>String</code> to an <code>int</code>, returning a\n     * default value if the conversion fails.</p>\n     *\n     * <p>If the string is <code>null</code>, the default value is returned.</p>\n     * \n     * <pre>\n     *   NumberUtils.stringToInt(null, 1) = 1\n     *   NumberUtils.stringToInt(\"\", 1)   = 1\n     *   NumberUtils.stringToInt(\"1\", 0)  = 1\n     * </pre>\n     *\n     * @param str  the string to convert, may be null\n     * @param defaultValue  the default value\n     * @return the int represented by the string, or the default if conversion fails\n     * @deprecated Use {@link #toInt(String, int)}\n     *  This method will be removed in Commons Lang 3.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.toInt(java.lang.String, int)",
        "snippet": "    public static int toInt(String str, int defaultValue) {\n        if(str == null) {\n            return defaultValue;\n        }\n        try {\n            return Integer.parseInt(str);\n        } catch (NumberFormatException nfe) {\n            return defaultValue;\n        }\n    }",
        "begin_line": 171,
        "end_line": 180,
        "comment": "\n     * <p>Convert a <code>String</code> to an <code>int</code>, returning a\n     * default value if the conversion fails.</p>\n     *\n     * <p>If the string is <code>null</code>, the default value is returned.</p>\n     *\n     * <pre>\n     *   NumberUtils.toInt(null, 1) = 1\n     *   NumberUtils.toInt(\"\", 1)   = 1\n     *   NumberUtils.toInt(\"1\", 0)  = 1\n     * </pre>\n     *\n     * @param str  the string to convert, may be null\n     * @param defaultValue  the default value\n     * @return the int represented by the string, or the default if conversion fails\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.toLong(java.lang.String)",
        "snippet": "    public static long toLong(String str) {\n        return toLong(str, 0L);\n    }",
        "begin_line": 199,
        "end_line": 201,
        "comment": "\n     * <p>Convert a <code>String</code> to a <code>long</code>, returning\n     * <code>zero</code> if the conversion fails.</p>\n     *\n     * <p>If the string is <code>null</code>, <code>zero</code> is returned.</p>\n     *\n     * <pre>\n     *   NumberUtils.toLong(null) = 0L\n     *   NumberUtils.toLong(\"\")   = 0L\n     *   NumberUtils.toLong(\"1\")  = 1L\n     * </pre>\n     *\n     * @param str  the string to convert, may be null\n     * @return the long represented by the string, or <code>0</code> if\n     *  conversion fails\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.toLong(java.lang.String, long)",
        "snippet": "    public static long toLong(String str, long defaultValue) {\n        if (str == null) {\n            return defaultValue;\n        }\n        try {\n            return Long.parseLong(str);\n        } catch (NumberFormatException nfe) {\n            return defaultValue;\n        }\n    }",
        "begin_line": 220,
        "end_line": 229,
        "comment": "\n     * <p>Convert a <code>String</code> to a <code>long</code>, returning a\n     * default value if the conversion fails.</p>\n     *\n     * <p>If the string is <code>null</code>, the default value is returned.</p>\n     *\n     * <pre>\n     *   NumberUtils.toLong(null, 1L) = 1L\n     *   NumberUtils.toLong(\"\", 1L)   = 1L\n     *   NumberUtils.toLong(\"1\", 0L)  = 1L\n     * </pre>\n     *\n     * @param str  the string to convert, may be null\n     * @param defaultValue  the default value\n     * @return the long represented by the string, or the default if conversion fails\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.toFloat(java.lang.String)",
        "snippet": "    public static float toFloat(String str) {\n        return toFloat(str, 0.0f);\n    }",
        "begin_line": 249,
        "end_line": 251,
        "comment": "\n     * <p>Convert a <code>String</code> to a <code>float</code>, returning\n     * <code>0.0f</code> if the conversion fails.</p>\n     *\n     * <p>If the string <code>str</code> is <code>null</code>,\n     * <code>0.0f</code> is returned.</p>\n     *\n     * <pre>\n     *   NumberUtils.toFloat(null)   = 0.0f\n     *   NumberUtils.toFloat(\"\")     = 0.0f\n     *   NumberUtils.toFloat(\"1.5\")  = 1.5f\n     * </pre>\n     *\n     * @param str the string to convert, may be <code>null</code>\n     * @return the float represented by the string, or <code>0.0f</code>\n     *  if conversion fails\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.toFloat(java.lang.String, float)",
        "snippet": "    public static float toFloat(String str, float defaultValue) {\n      if (str == null) {\n          return defaultValue;\n      }     \n      try {\n          return Float.parseFloat(str);\n      } catch (NumberFormatException nfe) {\n          return defaultValue;\n      }\n    }",
        "begin_line": 272,
        "end_line": 281,
        "comment": "\n     * <p>Convert a <code>String</code> to a <code>float</code>, returning a\n     * default value if the conversion fails.</p>\n     *\n     * <p>If the string <code>str</code> is <code>null</code>, the default\n     * value is returned.</p>\n     *\n     * <pre>\n     *   NumberUtils.toFloat(null, 1.1f)   = 1.0f\n     *   NumberUtils.toFloat(\"\", 1.1f)     = 1.1f\n     *   NumberUtils.toFloat(\"1.5\", 0.0f)  = 1.5f\n     * </pre>\n     *\n     * @param str the string to convert, may be <code>null</code>\n     * @param defaultValue the default value\n     * @return the float represented by the string, or defaultValue\n     *  if conversion fails\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.toDouble(java.lang.String)",
        "snippet": "    public static double toDouble(String str) {\n        return toDouble(str, 0.0d);\n    }",
        "begin_line": 301,
        "end_line": 303,
        "comment": "\n     * <p>Convert a <code>String</code> to a <code>double</code>, returning\n     * <code>0.0d</code> if the conversion fails.</p>\n     *\n     * <p>If the string <code>str</code> is <code>null</code>,\n     * <code>0.0d</code> is returned.</p>\n     *\n     * <pre>\n     *   NumberUtils.toDouble(null)   = 0.0d\n     *   NumberUtils.toDouble(\"\")     = 0.0d\n     *   NumberUtils.toDouble(\"1.5\")  = 1.5d\n     * </pre>\n     *\n     * @param str the string to convert, may be <code>null</code>\n     * @return the double represented by the string, or <code>0.0d</code>\n     *  if conversion fails\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.toDouble(java.lang.String, double)",
        "snippet": "    public static double toDouble(String str, double defaultValue) {\n      if (str == null) {\n          return defaultValue;\n      }\n      try {\n          return Double.parseDouble(str);\n      } catch (NumberFormatException nfe) {\n          return defaultValue;\n      }\n    }",
        "begin_line": 324,
        "end_line": 333,
        "comment": "\n     * <p>Convert a <code>String</code> to a <code>double</code>, returning a\n     * default value if the conversion fails.</p>\n     *\n     * <p>If the string <code>str</code> is <code>null</code>, the default\n     * value is returned.</p>\n     *\n     * <pre>\n     *   NumberUtils.toDouble(null, 1.1d)   = 1.1d\n     *   NumberUtils.toDouble(\"\", 1.1d)     = 1.1d\n     *   NumberUtils.toDouble(\"1.5\", 0.0d)  = 1.5d\n     * </pre>\n     *\n     * @param str the string to convert, may be <code>null</code>\n     * @param defaultValue the default value\n     * @return the double represented by the string, or defaultValue\n     *  if conversion fails\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.createNumber(java.lang.String)",
        "snippet": "    public static Number createNumber(String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }  \n        if (str.startsWith(\"--\")) {\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear \n            // to be in specification of class. OS X Java parses it to \n            // a wrong value.\n            return null;\n        }\n        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n            return createInteger(str);\n        }   \n        char lastChar = str.charAt(str.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        int decPos = str.indexOf('.');\n        int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n\n        if (decPos > -1) {\n\n            if (expPos > -1) {\n                if (expPos < decPos) {\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                dec = str.substring(decPos + 1, expPos);\n            } else {\n                dec = str.substring(decPos + 1);\n            }\n            mant = str.substring(0, decPos);\n        } else {\n            if (expPos > -1) {\n                mant = str.substring(0, expPos);\n            } else {\n                mant = str;\n            }\n            dec = null;\n        }\n        if (!Character.isDigit(lastChar)) {\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1, str.length() - 1);\n            } else {\n                exp = null;\n            }\n            //Requesting a specific type..\n            String numeric = str.substring(0, str.length() - 1);\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n            switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    if (dec == null\n                        && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                        try {\n                            return createLong(numeric);\n                        } catch (NumberFormatException nfe) {\n                            //Too big for a long\n                        }\n                        return createBigInteger(numeric);\n\n                    }\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        Float f = NumberUtils.createFloat(numeric);\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            //If it's too big for a float or the float value = 0 and the string\n                            //has non-zeros in it, then float does not have the precision we want\n                            return f;\n                        }\n\n                    } catch (NumberFormatException nfe) {\n                        // ignore the bad number\n                    }\n                    //Fall through\n                case 'd' :\n                case 'D' :\n                    try {\n                        Double d = NumberUtils.createDouble(numeric);\n                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe) {\n                        // ignore the bad number\n                    }\n                    try {\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) {\n                        // ignore the bad number\n                    }\n                    //Fall through\n                default :\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n\n            }\n        } else {\n            //User doesn't have a preference on the return type, so let's start\n            //small and go from there...\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1, str.length());\n            } else {\n                exp = null;\n            }\n            if (dec == null && exp == null) {\n                //Must be an int,long,bigint\n                try {\n                    return createInteger(str);\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                try {\n                    return createLong(str);\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                return createBigInteger(str);\n\n            } else {\n                //Must be a float,double,BigDec\n                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                try {\n                    Float f = createFloat(str);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                try {\n                    Double d = createDouble(str);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n\n                return createBigDecimal(str);\n\n            }\n        }\n    }",
        "begin_line": 397,
        "end_line": 544,
        "comment": "\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>First, the value is examined for a type qualifier on the end\n     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts \n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it\n     * will be interpreted as a hexadecimal integer.  Values with leading\n     * <code>0</code>'s will not be interpreted as octal.</p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string\n     * @throws NumberFormatException if the value cannot be converted\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.isAllZeros(java.lang.String)",
        "snippet": "    private static boolean isAllZeros(String str) {\n        if (str == null) {\n            return true;\n        }\n        for (int i = str.length() - 1; i >= 0; i--) {\n            if (str.charAt(i) != '0') {\n                return false;\n            }\n        }\n        return str.length() > 0;\n    }",
        "begin_line": 554,
        "end_line": 564,
        "comment": "\n     * <p>Utility method for {@link #createNumber(java.lang.String)}.</p>\n     *\n     * <p>Returns <code>true</code> if s is <code>null</code>.</p>\n     * \n     * @param str  the String to check\n     * @return if it is all zeros or <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.createFloat(java.lang.String)",
        "snippet": "    public static Float createFloat(String str) {\n        if (str == null) {\n            return null;\n        }\n        return Float.valueOf(str);\n    }",
        "begin_line": 576,
        "end_line": 581,
        "comment": "\n     * <p>Convert a <code>String</code> to a <code>Float</code>.</p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     * \n     * @param str  a <code>String</code> to convert, may be null\n     * @return converted <code>Float</code>\n     * @throws NumberFormatException if the value cannot be converted\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.createDouble(java.lang.String)",
        "snippet": "    public static Double createDouble(String str) {\n        if (str == null) {\n            return null;\n        }\n        return Double.valueOf(str);\n    }",
        "begin_line": 592,
        "end_line": 597,
        "comment": "\n     * <p>Convert a <code>String</code> to a <code>Double</code>.</p>\n     * \n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * @param str  a <code>String</code> to convert, may be null\n     * @return converted <code>Double</code>\n     * @throws NumberFormatException if the value cannot be converted\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.createInteger(java.lang.String)",
        "snippet": "    public static Integer createInteger(String str) {\n        if (str == null) {\n            return null;\n        }\n        // decode() handles 0xAABD and 0777 (hex and octal) as well.\n        return Integer.decode(str);\n    }",
        "begin_line": 609,
        "end_line": 615,
        "comment": "\n     * <p>Convert a <code>String</code> to a <code>Integer</code>, handling\n     * hex and octal notations.</p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     * \n     * @param str  a <code>String</code> to convert, may be null\n     * @return converted <code>Integer</code>\n     * @throws NumberFormatException if the value cannot be converted\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.createLong(java.lang.String)",
        "snippet": "    public static Long createLong(String str) {\n        if (str == null) {\n            return null;\n        }\n        return Long.valueOf(str);\n    }",
        "begin_line": 626,
        "end_line": 631,
        "comment": "\n     * <p>Convert a <code>String</code> to a <code>Long</code>.</p>\n     * \n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * @param str  a <code>String</code> to convert, may be null\n     * @return converted <code>Long</code>\n     * @throws NumberFormatException if the value cannot be converted\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.createBigInteger(java.lang.String)",
        "snippet": "    public static BigInteger createBigInteger(String str) {\n        if (str == null) {\n            return null;\n        }\n        return new BigInteger(str);\n    }",
        "begin_line": 642,
        "end_line": 647,
        "comment": "\n     * <p>Convert a <code>String</code> to a <code>BigInteger</code>.</p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     * \n     * @param str  a <code>String</code> to convert, may be null\n     * @return converted <code>BigInteger</code>\n     * @throws NumberFormatException if the value cannot be converted\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.createBigDecimal(java.lang.String)",
        "snippet": "    public static BigDecimal createBigDecimal(String str) {\n        if (str == null) {\n            return null;\n        }\n        // handle JDK1.3.1 bug where \"\" throws IndexOutOfBoundsException\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }  \n        return new BigDecimal(str);\n    }",
        "begin_line": 658,
        "end_line": 667,
        "comment": "\n     * <p>Convert a <code>String</code> to a <code>BigDecimal</code>.</p>\n     * \n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * @param str  a <code>String</code> to convert, may be null\n     * @return converted <code>BigDecimal</code>\n     * @throws NumberFormatException if the value cannot be converted\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.equals(byte[], byte[])",
        "snippet": "    public static boolean equals(byte[] array1, byte[] array2) {\n        if (array1 == array2) {\n            return true;\n        }\n        if (array1 == null || array2 == null) {\n            return false;\n        }\n        if (array1.length != array2.length) {\n            return false;\n        }\n\n        for (int i=0; i<array1.length; i++) {\n            if (array1[i] != array2[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    }",
        "begin_line": 678,
        "end_line": 696,
        "comment": "\n     * <p>Whether the contents of two byte[] arrays are equal.</p>\n     * \n     * @param array1  first array to compare\n     * @param array2  second array to compare\n     * @return whether the two arrays are equal\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.equals(short[], short[])",
        "snippet": "    public static boolean equals(short[] array1, short[] array2) {\n        if (array1 == array2) {\n            return true;\n        }\n        if (array1 == null || array2 == null) {\n            return false;\n        }\n        if (array1.length != array2.length) {\n            return false;\n        }\n\n        for (int i=0; i<array1.length; i++) {\n            if (array1[i] != array2[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    }",
        "begin_line": 705,
        "end_line": 723,
        "comment": "\n     * <p>Whether the contents of two short[] arrays are equal.</p>\n     * \n     * @param array1  first array to compare\n     * @param array2  second array to compare\n     * @return whether the two arrays are equal\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.equals(int[], int[])",
        "snippet": "    public static boolean equals(int[] array1, int[] array2) {\n        if (array1 == array2) {\n            return true;\n        }\n        if (array1 == null || array2 == null) {\n            return false;\n        }\n        if (array1.length != array2.length) {\n            return false;\n        }\n\n        for (int i=0; i<array1.length; i++) {\n            if (array1[i] != array2[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    }",
        "begin_line": 732,
        "end_line": 750,
        "comment": "\n     * <p>Whether the contents of two int[] arrays are equal.</p>\n     * \n     * @param array1  first array to compare\n     * @param array2  second array to compare\n     * @return whether the two arrays are equal\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.equals(long[], long[])",
        "snippet": "    public static boolean equals(long[] array1, long[] array2) {\n        if (array1 == array2) {\n            return true;\n        }\n        if (array1 == null || array2 == null) {\n            return false;\n        }\n        if (array1.length != array2.length) {\n            return false;\n        }\n\n        for (int i=0; i<array1.length; i++) {\n            if (array1[i] != array2[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    }",
        "begin_line": 759,
        "end_line": 777,
        "comment": "\n     * <p>Whether the contents of two long[] arrays are equal.</p>\n     * \n     * @param array1  first array to compare\n     * @param array2  second array to compare\n     * @return whether the two arrays are equal\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.equals(float[], float[])",
        "snippet": "    public static boolean equals(float[] array1, float[] array2) {\n        if (array1 == array2) {\n            return true;\n        }\n        if (array1 == null || array2 == null) {\n            return false;\n        }\n        if (array1.length != array2.length) {\n            return false;\n        }\n\n        for (int i=0; i<array1.length; i++) {\n            if (compare(array1[i], array2[i]) != 0) {\n                return false;\n            }\n        }\n\n        return true;\n    }",
        "begin_line": 786,
        "end_line": 804,
        "comment": "\n     * <p>Whether the contents of two float[] arrays are equal.</p>\n     * \n     * @param array1  first array to compare\n     * @param array2  second array to compare\n     * @return whether the two arrays are equal\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.equals(double[], double[])",
        "snippet": "    public static boolean equals(double[] array1, double[] array2) {\n        if (array1 == array2) {\n            return true;\n        }\n        if (array1 == null || array2 == null) {\n            return false;\n        }\n        if (array1.length != array2.length) {\n            return false;\n        }\n\n        for (int i=0; i<array1.length; i++) {\n            if (compare(array1[i], array2[i]) != 0) {\n                return false;\n            }\n        }\n\n        return true;\n    }",
        "begin_line": 813,
        "end_line": 831,
        "comment": "\n     * <p>Whether the contents of two double[] arrays are equal.</p>\n     * \n     * @param array1  first array to compare\n     * @param array2  second array to compare\n     * @return whether the two arrays are equal\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.min(long[])",
        "snippet": "    public static long min(long[] array) {\n        // Validates input\n        if (array == null) {\n            throw new IllegalArgumentException(\"The Array must not be null\");\n        } else if (array.length == 0) {\n            throw new IllegalArgumentException(\"Array cannot be empty.\");\n        }\n    \n        // Finds and returns min\n        long min = array[0];\n        for (int i = 1; i < array.length; i++) {\n            if (array[i] < min) {\n                min = array[i];\n            }\n        }\n    \n        return min;\n    }",
        "begin_line": 843,
        "end_line": 860,
        "comment": "\n     * <p>Returns the minimum value in an array.</p>\n     * \n     * @param array  an array, must not be null or empty\n     * @return the minimum value in the array\n     * @throws IllegalArgumentException if <code>array</code> is <code>null</code>\n     * @throws IllegalArgumentException if <code>array</code> is empty\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.min(int[])",
        "snippet": "    public static int min(int[] array) {\n        // Validates input\n        if (array == null) {\n            throw new IllegalArgumentException(\"The Array must not be null\");\n        } else if (array.length == 0) {\n            throw new IllegalArgumentException(\"Array cannot be empty.\");\n        }\n    \n        // Finds and returns min\n        int min = array[0];\n        for (int j = 1; j < array.length; j++) {\n            if (array[j] < min) {\n                min = array[j];\n            }\n        }\n    \n        return min;\n    }",
        "begin_line": 870,
        "end_line": 887,
        "comment": "\n     * <p>Returns the minimum value in an array.</p>\n     * \n     * @param array  an array, must not be null or empty\n     * @return the minimum value in the array\n     * @throws IllegalArgumentException if <code>array</code> is <code>null</code>\n     * @throws IllegalArgumentException if <code>array</code> is empty\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.min(short[])",
        "snippet": "    public static short min(short[] array) {\n        // Validates input\n        if (array == null) {\n            throw new IllegalArgumentException(\"The Array must not be null\");\n        } else if (array.length == 0) {\n            throw new IllegalArgumentException(\"Array cannot be empty.\");\n        }\n    \n        // Finds and returns min\n        short min = array[0];\n        for (int i = 1; i < array.length; i++) {\n            if (array[i] < min) {\n                min = array[i];\n            }\n        }\n    \n        return min;\n    }",
        "begin_line": 897,
        "end_line": 914,
        "comment": "\n     * <p>Returns the minimum value in an array.</p>\n     * \n     * @param array  an array, must not be null or empty\n     * @return the minimum value in the array\n     * @throws IllegalArgumentException if <code>array</code> is <code>null</code>\n     * @throws IllegalArgumentException if <code>array</code> is empty\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.min(byte[])",
        "snippet": "    public static byte min(byte[] array) {\n        // Validates input\n        if (array == null) {\n            throw new IllegalArgumentException(\"The Array must not be null\");\n        } else if (array.length == 0) {\n            throw new IllegalArgumentException(\"Array cannot be empty.\");\n        }\n    \n        // Finds and returns min\n        byte min = array[0];\n        for (int i = 1; i < array.length; i++) {\n            if (array[i] < min) {\n                min = array[i];\n            }\n        }\n    \n        return min;\n    }",
        "begin_line": 924,
        "end_line": 941,
        "comment": "\n     * <p>Returns the minimum value in an array.</p>\n     * \n     * @param array  an array, must not be null or empty\n     * @return the minimum value in the array\n     * @throws IllegalArgumentException if <code>array</code> is <code>null</code>\n     * @throws IllegalArgumentException if <code>array</code> is empty\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.min(double[])",
        "snippet": "    public static double min(double[] array) {\n        // Validates input\n        if (array == null) {\n            throw new IllegalArgumentException(\"The Array must not be null\");\n        } else if (array.length == 0) {\n            throw new IllegalArgumentException(\"Array cannot be empty.\");\n        }\n    \n        // Finds and returns min\n        double min = array[0];\n        for (int i = 1; i < array.length; i++) {\n            if (array[i] < min) {\n                min = array[i];\n            }\n        }\n    \n        return min;\n    }",
        "begin_line": 951,
        "end_line": 968,
        "comment": "\n     * <p>Returns the minimum value in an array.</p>\n     * \n     * @param array  an array, must not be null or empty\n     * @return the minimum value in the array\n     * @throws IllegalArgumentException if <code>array</code> is <code>null</code>\n     * @throws IllegalArgumentException if <code>array</code> is empty\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.min(float[])",
        "snippet": "    public static float min(float[] array) {\n        // Validates input\n        if (array == null) {\n            throw new IllegalArgumentException(\"The Array must not be null\");\n        } else if (array.length == 0) {\n            throw new IllegalArgumentException(\"Array cannot be empty.\");\n        }\n    \n        // Finds and returns min\n        float min = array[0];\n        for (int i = 1; i < array.length; i++) {\n            if (array[i] < min) {\n                min = array[i];\n            }\n        }\n    \n        return min;\n    }",
        "begin_line": 978,
        "end_line": 995,
        "comment": "\n     * <p>Returns the minimum value in an array.</p>\n     * \n     * @param array  an array, must not be null or empty\n     * @return the minimum value in the array\n     * @throws IllegalArgumentException if <code>array</code> is <code>null</code>\n     * @throws IllegalArgumentException if <code>array</code> is empty\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.max(long[])",
        "snippet": "    public static long max(long[] array) {\n        // Validates input\n        if (array == null) {\n            throw new IllegalArgumentException(\"The Array must not be null\");\n        } else if (array.length == 0) {\n            throw new IllegalArgumentException(\"Array cannot be empty.\");\n        }\n\n        // Finds and returns max\n        long max = array[0];\n        for (int j = 1; j < array.length; j++) {\n            if (array[j] > max) {\n                max = array[j];\n            }\n        }\n\n        return max;\n    }",
        "begin_line": 1007,
        "end_line": 1024,
        "comment": "\n     * <p>Returns the maximum value in an array.</p>\n     * \n     * @param array  an array, must not be null or empty\n     * @return the minimum value in the array\n     * @throws IllegalArgumentException if <code>array</code> is <code>null</code>\n     * @throws IllegalArgumentException if <code>array</code> is empty\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.max(int[])",
        "snippet": "    public static int max(int[] array) {\n        // Validates input\n        if (array == null) {\n            throw new IllegalArgumentException(\"The Array must not be null\");\n        } else if (array.length == 0) {\n            throw new IllegalArgumentException(\"Array cannot be empty.\");\n        }\n    \n        // Finds and returns max\n        int max = array[0];\n        for (int j = 1; j < array.length; j++) {\n            if (array[j] > max) {\n                max = array[j];\n            }\n        }\n    \n        return max;\n    }",
        "begin_line": 1034,
        "end_line": 1051,
        "comment": "\n     * <p>Returns the maximum value in an array.</p>\n     * \n     * @param array  an array, must not be null or empty\n     * @return the minimum value in the array\n     * @throws IllegalArgumentException if <code>array</code> is <code>null</code>\n     * @throws IllegalArgumentException if <code>array</code> is empty\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.max(short[])",
        "snippet": "    public static short max(short[] array) {\n        // Validates input\n        if (array == null) {\n            throw new IllegalArgumentException(\"The Array must not be null\");\n        } else if (array.length == 0) {\n            throw new IllegalArgumentException(\"Array cannot be empty.\");\n        }\n    \n        // Finds and returns max\n        short max = array[0];\n        for (int i = 1; i < array.length; i++) {\n            if (array[i] > max) {\n                max = array[i];\n            }\n        }\n    \n        return max;\n    }",
        "begin_line": 1061,
        "end_line": 1078,
        "comment": "\n     * <p>Returns the maximum value in an array.</p>\n     * \n     * @param array  an array, must not be null or empty\n     * @return the minimum value in the array\n     * @throws IllegalArgumentException if <code>array</code> is <code>null</code>\n     * @throws IllegalArgumentException if <code>array</code> is empty\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.max(byte[])",
        "snippet": "    public static byte max(byte[] array) {\n        // Validates input\n        if (array == null) {\n            throw new IllegalArgumentException(\"The Array must not be null\");\n        } else if (array.length == 0) {\n            throw new IllegalArgumentException(\"Array cannot be empty.\");\n        }\n    \n        // Finds and returns max\n        byte max = array[0];\n        for (int i = 1; i < array.length; i++) {\n            if (array[i] > max) {\n                max = array[i];\n            }\n        }\n    \n        return max;\n    }",
        "begin_line": 1088,
        "end_line": 1105,
        "comment": "\n     * <p>Returns the maximum value in an array.</p>\n     * \n     * @param array  an array, must not be null or empty\n     * @return the minimum value in the array\n     * @throws IllegalArgumentException if <code>array</code> is <code>null</code>\n     * @throws IllegalArgumentException if <code>array</code> is empty\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.max(double[])",
        "snippet": "    public static double max(double[] array) {\n        // Validates input\n        if (array== null) {\n            throw new IllegalArgumentException(\"The Array must not be null\");\n        } else if (array.length == 0) {\n            throw new IllegalArgumentException(\"Array cannot be empty.\");\n        }\n    \n        // Finds and returns max\n        double max = array[0];\n        for (int j = 1; j < array.length; j++) {\n            if (array[j] > max) {\n                max = array[j];\n            }\n        }\n    \n        return max;\n    }",
        "begin_line": 1115,
        "end_line": 1132,
        "comment": "\n     * <p>Returns the maximum value in an array.</p>\n     * \n     * @param array  an array, must not be null or empty\n     * @return the minimum value in the array\n     * @throws IllegalArgumentException if <code>array</code> is <code>null</code>\n     * @throws IllegalArgumentException if <code>array</code> is empty\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.max(float[])",
        "snippet": "    public static float max(float[] array) {\n        // Validates input\n        if (array == null) {\n            throw new IllegalArgumentException(\"The Array must not be null\");\n        } else if (array.length == 0) {\n            throw new IllegalArgumentException(\"Array cannot be empty.\");\n        }\n\n        // Finds and returns max\n        float max = array[0];\n        for (int j = 1; j < array.length; j++) {\n            if (array[j] > max) {\n                max = array[j];\n            }\n        }\n\n        return max;\n    }",
        "begin_line": 1142,
        "end_line": 1159,
        "comment": "\n     * <p>Returns the maximum value in an array.</p>\n     * \n     * @param array  an array, must not be null or empty\n     * @return the minimum value in the array\n     * @throws IllegalArgumentException if <code>array</code> is <code>null</code>\n     * @throws IllegalArgumentException if <code>array</code> is empty\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.min(long, long, long)",
        "snippet": "    public static long min(long a, long b, long c) {\n        if (b < a) {\n            a = b;\n        }\n        if (c < a) {\n            a = c;\n        }\n        return a;\n    }",
        "begin_line": 1171,
        "end_line": 1179,
        "comment": "\n     * <p>Gets the minimum of three <code>long</code> values.</p>\n     * \n     * @param a  value 1\n     * @param b  value 2\n     * @param c  value 3\n     * @return  the smallest of the values\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.min(int, int, int)",
        "snippet": "    public static int min(int a, int b, int c) {\n        if (b < a) {\n            a = b;\n        }\n        if (c < a) {\n            a = c;\n        }\n        return a;\n    }",
        "begin_line": 1189,
        "end_line": 1197,
        "comment": "\n     * <p>Gets the minimum of three <code>int</code> values.</p>\n     * \n     * @param a  value 1\n     * @param b  value 2\n     * @param c  value 3\n     * @return  the smallest of the values\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.min(short, short, short)",
        "snippet": "    public static short min(short a, short b, short c) {\n        if (b < a) {\n            a = b;\n        }\n        if (c < a) {\n            a = c;\n        }\n        return a;\n    }",
        "begin_line": 1207,
        "end_line": 1215,
        "comment": "\n     * <p>Gets the minimum of three <code>short</code> values.</p>\n     * \n     * @param a  value 1\n     * @param b  value 2\n     * @param c  value 3\n     * @return  the smallest of the values\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.min(byte, byte, byte)",
        "snippet": "    public static byte min(byte a, byte b, byte c) {\n        if (b < a) {\n            a = b;\n        }\n        if (c < a) {\n            a = c;\n        }\n        return a;\n    }",
        "begin_line": 1225,
        "end_line": 1233,
        "comment": "\n     * <p>Gets the minimum of three <code>byte</code> values.</p>\n     * \n     * @param a  value 1\n     * @param b  value 2\n     * @param c  value 3\n     * @return  the smallest of the values\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.min(double, double, double)",
        "snippet": "    public static double min(double a, double b, double c) {\n        return Math.min(Math.min(a, b), c);\n    }",
        "begin_line": 1246,
        "end_line": 1248,
        "comment": "\n     * <p>Gets the minimum of three <code>double</code> values.</p>\n     * \n     * <p>If any value is <code>NaN</code>, <code>NaN</code> is\n     * returned. Infinity is handled.</p>\n     * \n     * @param a  value 1\n     * @param b  value 2\n     * @param c  value 3\n     * @return  the smallest of the values\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.min(float, float, float)",
        "snippet": "    public static float min(float a, float b, float c) {\n        return Math.min(Math.min(a, b), c);\n    }",
        "begin_line": 1261,
        "end_line": 1263,
        "comment": "\n     * <p>Gets the minimum of three <code>float</code> values.</p>\n     * \n     * <p>If any value is <code>NaN</code>, <code>NaN</code> is\n     * returned. Infinity is handled.</p>\n     *\n     * @param a  value 1\n     * @param b  value 2\n     * @param c  value 3\n     * @return  the smallest of the values\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.max(long, long, long)",
        "snippet": "    public static long max(long a, long b, long c) {\n        if (b > a) {\n            a = b;\n        }\n        if (c > a) {\n            a = c;\n        }\n        return a;\n    }",
        "begin_line": 1275,
        "end_line": 1283,
        "comment": "\n     * <p>Gets the maximum of three <code>long</code> values.</p>\n     * \n     * @param a  value 1\n     * @param b  value 2\n     * @param c  value 3\n     * @return  the largest of the values\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.max(int, int, int)",
        "snippet": "    public static int max(int a, int b, int c) {\n        if (b > a) {\n            a = b;\n        }\n        if (c > a) {\n            a = c;\n        }\n        return a;\n    }",
        "begin_line": 1293,
        "end_line": 1301,
        "comment": "\n     * <p>Gets the maximum of three <code>int</code> values.</p>\n     * \n     * @param a  value 1\n     * @param b  value 2\n     * @param c  value 3\n     * @return  the largest of the values\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.max(short, short, short)",
        "snippet": "    public static short max(short a, short b, short c) {\n        if (b > a) {\n            a = b;\n        }\n        if (c > a) {\n            a = c;\n        }\n        return a;\n    }",
        "begin_line": 1311,
        "end_line": 1319,
        "comment": "\n     * <p>Gets the maximum of three <code>short</code> values.</p>\n     * \n     * @param a  value 1\n     * @param b  value 2\n     * @param c  value 3\n     * @return  the largest of the values\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.max(byte, byte, byte)",
        "snippet": "    public static byte max(byte a, byte b, byte c) {\n        if (b > a) {\n            a = b;\n        }\n        if (c > a) {\n            a = c;\n        }\n        return a;\n    }",
        "begin_line": 1329,
        "end_line": 1337,
        "comment": "\n     * <p>Gets the maximum of three <code>byte</code> values.</p>\n     * \n     * @param a  value 1\n     * @param b  value 2\n     * @param c  value 3\n     * @return  the largest of the values\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.max(double, double, double)",
        "snippet": "    public static double max(double a, double b, double c) {\n        return Math.max(Math.max(a, b), c);\n    }",
        "begin_line": 1350,
        "end_line": 1352,
        "comment": "\n     * <p>Gets the maximum of three <code>double</code> values.</p>\n     * \n     * <p>If any value is <code>NaN</code>, <code>NaN</code> is\n     * returned. Infinity is handled.</p>\n     *\n     * @param a  value 1\n     * @param b  value 2\n     * @param c  value 3\n     * @return  the largest of the values\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.max(float, float, float)",
        "snippet": "    public static float max(float a, float b, float c) {\n        return Math.max(Math.max(a, b), c);\n    }",
        "begin_line": 1365,
        "end_line": 1367,
        "comment": "\n     * <p>Gets the maximum of three <code>float</code> values.</p>\n     * \n     * <p>If any value is <code>NaN</code>, <code>NaN</code> is\n     * returned. Infinity is handled.</p>\n     *\n     * @param a  value 1\n     * @param b  value 2\n     * @param c  value 3\n     * @return  the largest of the values\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.compare(double, double)",
        "snippet": "    public static int compare(double lhs, double rhs) {\n        if (lhs < rhs) {\n            return -1;\n        }\n        if (lhs > rhs) {\n            return +1;\n        }\n        // Need to compare bits to handle 0.0 == -0.0 being true\n        // compare should put -0.0 < +0.0\n        // Two NaNs are also == for compare purposes\n        // where NaN == NaN is false\n        long lhsBits = Double.doubleToLongBits(lhs);\n        long rhsBits = Double.doubleToLongBits(rhs);\n        if (lhsBits == rhsBits) {\n            return 0;\n        }\n        // Something exotic! A comparison to NaN or 0.0 vs -0.0\n        // Fortunately NaN's long is > than everything else\n        // Also negzeros bits < poszero\n        // NAN: 9221120237041090560\n        // MAX: 9218868437227405311\n        // NEGZERO: -9223372036854775808\n        if (lhsBits < rhsBits) {\n            return -1;\n        } else {\n            return +1;\n        }\n    }",
        "begin_line": 1404,
        "end_line": 1431,
        "comment": "\n     * <p>Compares two <code>doubles</code> for order.</p>\n     *\n     * <p>This method is more comprehensive than the standard Java greater\n     * than, less than and equals operators.</p>\n     * <ul>\n     *  <li>It returns <code>-1</code> if the first value is less than the second.</li>\n     *  <li>It returns <code>+1</code> if the first value is greater than the second.</li>\n     *  <li>It returns <code>0</code> if the values are equal.</li>\n     * </ul>\n     *\n     * <p>\n     * The ordering is as follows, largest to smallest:\n     * <ul>\n     *  <li>NaN\n     *  <li>Positive infinity\n     *  <li>Maximum double\n     *  <li>Normal positive numbers\n     *  <li>+0.0\n     *  <li>-0.0\n     *  <li>Normal negative numbers\n     *  <li>Minimum double (<code>-Double.MAX_VALUE</code>)\n     *  <li>Negative infinity\n     * </ul>\n     * </p>\n     *\n     * <p>Comparing <code>NaN</code> with <code>NaN</code> will\n     * return <code>0</code>.</p>\n     * \n     * @param lhs  the first <code>double</code>\n     * @param rhs  the second <code>double</code>\n     * @return <code>-1</code> if lhs is less, <code>+1</code> if greater,\n     *  <code>0</code> if equal to rhs\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.compare(float, float)",
        "snippet": "    public static int compare(float lhs, float rhs) {\n        if (lhs < rhs) {\n            return -1;\n        }\n        if (lhs > rhs) {\n            return +1;\n        }\n        //Need to compare bits to handle 0.0 == -0.0 being true\n        // compare should put -0.0 < +0.0\n        // Two NaNs are also == for compare purposes\n        // where NaN == NaN is false\n        int lhsBits = Float.floatToIntBits(lhs);\n        int rhsBits = Float.floatToIntBits(rhs);\n        if (lhsBits == rhsBits) {\n            return 0;\n        }\n        //Something exotic! A comparison to NaN or 0.0 vs -0.0\n        //Fortunately NaN's int is > than everything else\n        //Also negzeros bits < poszero\n        //NAN: 2143289344\n        //MAX: 2139095039\n        //NEGZERO: -2147483648\n        if (lhsBits < rhsBits) {\n            return -1;\n        } else {\n            return +1;\n        }\n    }",
        "begin_line": 1465,
        "end_line": 1492,
        "comment": "\n     * <p>Compares two floats for order.</p>\n     *\n     * <p>This method is more comprehensive than the standard Java greater than,\n     * less than and equals operators.</p>\n     * <ul>\n     *  <li>It returns <code>-1</code> if the first value is less than the second.\n     *  <li>It returns <code>+1</code> if the first value is greater than the second.\n     *  <li>It returns <code>0</code> if the values are equal.\n     * </ul>\n     *\n     * <p> The ordering is as follows, largest to smallest:\n     * <ul>\n     * <li>NaN\n     * <li>Positive infinity\n     * <li>Maximum float\n     * <li>Normal positive numbers\n     * <li>+0.0\n     * <li>-0.0\n     * <li>Normal negative numbers\n     * <li>Minimum float (<code>-Float.MAX_VALUE</code>)\n     * <li>Negative infinity\n     * </ul>\n     *\n     * <p>Comparing <code>NaN</code> with <code>NaN</code> will return\n     * <code>0</code>.</p>\n     * \n     * @param lhs  the first <code>float</code>\n     * @param rhs  the second <code>float</code>\n     * @return <code>-1</code> if lhs is less, <code>+1</code> if greater,\n     *  <code>0</code> if equal to rhs\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.isDigits(java.lang.String)",
        "snippet": "    public static boolean isDigits(String str) {\n        if (StringUtils.isEmpty(str)) {\n            return false;\n        }\n        for (int i = 0; i < str.length(); i++) {\n            if (!Character.isDigit(str.charAt(i))) {\n                return false;\n            }\n        }\n        return true;\n    }",
        "begin_line": 1505,
        "end_line": 1515,
        "comment": "\n     * <p>Checks whether the <code>String</code> contains only\n     * digit characters.</p>\n     *\n     * <p><code>Null</code> and empty String will return\n     * <code>false</code>.</p>\n     *\n     * @param str  the <code>String</code> to check\n     * @return <code>true</code> if str contains only unicode numeric\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "class_name": "org.apache.commons.lang.math.NumberUtils",
        "signature": "org.apache.commons.lang.math.NumberUtils.isNumber(java.lang.String)",
        "snippet": "    public static boolean isNumber(String str) {\n        if (StringUtils.isEmpty(str)) {\n            return false;\n        }\n        char[] chars = str.toCharArray();\n        int sz = chars.length;\n        boolean hasExp = false;\n        boolean hasDecPoint = false;\n        boolean allowSigns = false;\n        boolean foundDigit = false;\n        // deal with any possible sign up front\n        int start = (chars[0] == '-') ? 1 : 0;\n        if (sz > start + 1) {\n            if (chars[start] == '0' && chars[start + 1] == 'x') {\n                int i = start + 2;\n                if (i == sz) {\n                    return false; // str == \"0x\"\n                }\n                // checking hex (it can't be anything else)\n                for (; i < chars.length; i++) {\n                    if ((chars[i] < '0' || chars[i] > '9')\n                        && (chars[i] < 'a' || chars[i] > 'f')\n                        && (chars[i] < 'A' || chars[i] > 'F')) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n        sz--; // don't want to loop to the last char, check it afterwords\n              // for type qualifiers\n        int i = start;\n        // loop to the next to last char or to the last char if we need another digit to\n        // make a valid number (e.g. chars[0..5] = \"1234E\")\n        while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {\n            if (chars[i] >= '0' && chars[i] <= '9') {\n                foundDigit = true;\n                allowSigns = false;\n\n            } else if (chars[i] == '.') {\n                if (hasDecPoint || hasExp) {\n                    // two decimal points or dec in exponent   \n                    return false;\n                }\n                hasDecPoint = true;\n            } else if (chars[i] == 'e' || chars[i] == 'E') {\n                // we've already taken care of hex.\n                if (hasExp) {\n                    // two E's\n                    return false;\n                }\n                if (!foundDigit) {\n                    return false;\n                }\n                hasExp = true;\n                allowSigns = true;\n            } else if (chars[i] == '+' || chars[i] == '-') {\n                if (!allowSigns) {\n                    return false;\n                }\n                allowSigns = false;\n                foundDigit = false; // we need a digit after the E\n            } else {\n                return false;\n            }\n            i++;\n        }\n        if (i < chars.length) {\n            if (chars[i] >= '0' && chars[i] <= '9') {\n                // no type qualifier, OK\n                return true;\n            }\n            if (chars[i] == 'e' || chars[i] == 'E') {\n                // can't have an E at the last byte\n                return false;\n            }\n            if (!allowSigns\n                && (chars[i] == 'd'\n                    || chars[i] == 'D'\n                    || chars[i] == 'f'\n                    || chars[i] == 'F')) {\n                return foundDigit;\n            }\n            if (chars[i] == 'l'\n                || chars[i] == 'L') {\n                // not allowing L with an exponent\n                return foundDigit && !hasExp;\n            }\n            // last character is illegal\n            return false;\n        }\n        // allowSigns is true iff the val ends in 'E'\n        // found digit it to make sure weird stuff like '.' and '1E-' doesn't pass\n        return !allowSigns && foundDigit;\n    }",
        "begin_line": 1530,
        "end_line": 1624,
        "comment": "\n     * <p>Checks whether the String a valid Java number.</p>\n     *\n     * <p>Valid numbers include hexadecimal marked with the <code>0x</code>\n     * qualifier, scientific notation and numbers marked with a type\n     * qualifier (e.g. 123L).</p>\n     *\n     * <p><code>Null</code> and empty String will return\n     * <code>false</code>.</p>\n     *\n     * @param str  the <code>String</code> to check\n     * @return <code>true</code> if the string is a correctly formatted number\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/IncompleteArgumentException.java",
        "class_name": "org.apache.commons.lang.IncompleteArgumentException",
        "signature": "org.apache.commons.lang.IncompleteArgumentException.IncompleteArgumentException(java.lang.String)",
        "snippet": "    public IncompleteArgumentException(String argName) {\n        super(argName + \" is incomplete.\");\n    }",
        "begin_line": 62,
        "end_line": 64,
        "comment": "\n     * <p>Instantiates with the specified description.</p>\n     * \n     * @param argName  a description of the incomplete argument\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/IncompleteArgumentException.java",
        "class_name": "org.apache.commons.lang.IncompleteArgumentException",
        "signature": "org.apache.commons.lang.IncompleteArgumentException.IncompleteArgumentException(java.lang.String, java.lang.String[])",
        "snippet": "    public IncompleteArgumentException(String argName, String[] items) {\n        super(\n            argName\n                + \" is missing the following items: \"\n                + safeArrayToString(items));\n    }",
        "begin_line": 72,
        "end_line": 77,
        "comment": "\n     * <p>Instantiates with the specified description.</p>\n     * \n     * @param argName  a description of the incomplete argument\n     * @param items  an array describing the arguments missing\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/IncompleteArgumentException.java",
        "class_name": "org.apache.commons.lang.IncompleteArgumentException",
        "signature": "org.apache.commons.lang.IncompleteArgumentException.safeArrayToString(java.lang.Object[])",
        "snippet": "    private static final String safeArrayToString(Object[] array) {\n        return array == null ? null : Arrays.asList(array).toString();\n    }",
        "begin_line": 85,
        "end_line": 87,
        "comment": "\n     * <p>Converts an array to a string without throwing an exception.</p>\n     * \n     * @param array  an array\n     * @return the array as a string\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/SystemUtils.java",
        "class_name": "org.apache.commons.lang.SystemUtils",
        "signature": "org.apache.commons.lang.SystemUtils.SystemUtils()",
        "snippet": "    public SystemUtils() {\n        super();\n    }",
        "begin_line": 1082,
        "end_line": 1084,
        "comment": "\n     * <p>SystemUtils instances should NOT be constructed in standard\n     * programming. Instead, the class should be used as\n     * <code>SystemUtils.FILE_SEPARATOR</code>.</p>\n     *\n     * <p>This constructor is public to permit tools that require a JavaBean\n     * instance to operate.</p>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/SystemUtils.java",
        "class_name": "org.apache.commons.lang.SystemUtils",
        "signature": "org.apache.commons.lang.SystemUtils.getJavaVersion()",
        "snippet": "    public static float getJavaVersion() {\n        return JAVA_VERSION_FLOAT;\n    }",
        "begin_line": 1100,
        "end_line": 1102,
        "comment": "\n     * <p>Gets the Java version number as a <code>float</code>.</p>\n     *\n     * <p>Example return values:</p>\n     * <ul>\n     *  <li><code>1.2f</code> for JDK 1.2\n     *  <li><code>1.31f</code> for JDK 1.3.1\n     * </ul>\n     * \n     * @return the version, for example 1.31f for JDK 1.3.1\n     * @deprecated Use {@link #JAVA_VERSION_FLOAT} instead.\n     *             Method will be removed in Commons Lang 3.0.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/SystemUtils.java",
        "class_name": "org.apache.commons.lang.SystemUtils",
        "signature": "org.apache.commons.lang.SystemUtils.getJavaVersionAsFloat()",
        "snippet": "    private static float getJavaVersionAsFloat() {\n        if (JAVA_VERSION_TRIMMED == null) {\n            return 0f;\n        }\n        String str = JAVA_VERSION_TRIMMED.substring(0, 3);\n        if (JAVA_VERSION_TRIMMED.length() >= 5) {\n            str = str + JAVA_VERSION_TRIMMED.substring(4, 5);\n        }\n        try {\n            return Float.parseFloat(str);\n        } catch (Exception ex) {\n            return 0;\n        }\n    }",
        "begin_line": 1118,
        "end_line": 1131,
        "comment": "\n     * <p>Gets the Java version number as a <code>float</code>.</p>\n     *\n     * <p>Example return values:</p>\n     * <ul>\n     *  <li><code>1.2f</code> for JDK 1.2\n     *  <li><code>1.31f</code> for JDK 1.3.1\n     * </ul>\n     * \n     * <p>Patch releases are not reported.\n     * Zero is returned if {@link #JAVA_VERSION_TRIMMED} is <code>null</code>.</p>\n     * \n     * @return the version, for example 1.31f for JDK 1.3.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/SystemUtils.java",
        "class_name": "org.apache.commons.lang.SystemUtils",
        "signature": "org.apache.commons.lang.SystemUtils.getJavaVersionAsInt()",
        "snippet": "    private static int getJavaVersionAsInt() {\n        if (JAVA_VERSION_TRIMMED == null) {\n            return 0;\n        }\n        String str = JAVA_VERSION_TRIMMED.substring(0, 1);\n        str = str + JAVA_VERSION_TRIMMED.substring(2, 3);\n        if (JAVA_VERSION_TRIMMED.length() >= 5) {\n            str = str + JAVA_VERSION_TRIMMED.substring(4, 5);\n        } else {\n            str = str + \"0\";\n        }\n        try {\n            return Integer.parseInt(str);\n        } catch (Exception ex) {\n            return 0;\n        }\n    }",
        "begin_line": 1147,
        "end_line": 1163,
        "comment": "\n     * <p>Gets the Java version number as an <code>int</code>.</p>\n     *\n     * <p>Example return values:</p>\n     * <ul>\n     *  <li><code>120</code> for JDK 1.2\n     *  <li><code>131</code> for JDK 1.3.1\n     * </ul>\n     * \n     * <p>Patch releases are not reported.\n     * Zero is returned if {@link #JAVA_VERSION_TRIMMED} is <code>null</code>.</p>\n     * \n     * @return the version, for example 131 for JDK 1.3.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/SystemUtils.java",
        "class_name": "org.apache.commons.lang.SystemUtils",
        "signature": "org.apache.commons.lang.SystemUtils.getJavaVersionTrimmed()",
        "snippet": "    private static String getJavaVersionTrimmed() {\n        if (JAVA_VERSION != null) {\n            for (int i = 0; i < JAVA_VERSION.length(); i++) {\n                char ch = JAVA_VERSION.charAt(i);\n                if (ch >= '0' && ch <= '9') {\n                    return JAVA_VERSION.substring(i);\n                }\n            }\n        }\n        return null;\n    }",
        "begin_line": 1170,
        "end_line": 1180,
        "comment": "\n     * Trims the text of the java version to start with numbers.\n     * \n     * @return the trimmed java version\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/SystemUtils.java",
        "class_name": "org.apache.commons.lang.SystemUtils",
        "signature": "org.apache.commons.lang.SystemUtils.getJavaVersionMatches(java.lang.String)",
        "snippet": "    private static boolean getJavaVersionMatches(String versionPrefix) {\n        if (JAVA_VERSION_TRIMMED == null) {\n            return false;\n        }\n        return JAVA_VERSION_TRIMMED.startsWith(versionPrefix);\n    }    ",
        "begin_line": 1188,
        "end_line": 1193,
        "comment": "\n     * <p>Decides if the java version matches.</p>\n     * \n     * @param versionPrefix  the prefix for the java version\n     * @return true if matches, or false if not or can't determine\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/SystemUtils.java",
        "class_name": "org.apache.commons.lang.SystemUtils",
        "signature": "org.apache.commons.lang.SystemUtils.getOSMatches(java.lang.String)",
        "snippet": "    private static boolean getOSMatches(String osNamePrefix) {\n        if (OS_NAME == null) {\n            return false;\n        }\n        return OS_NAME.startsWith(osNamePrefix);\n    }    ",
        "begin_line": 1201,
        "end_line": 1206,
        "comment": "\n     * <p>Decides if the operating system matches.</p>\n     * \n     * @param osNamePrefix  the prefix for the os name\n     * @return true if matches, or false if not or can't determine\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/SystemUtils.java",
        "class_name": "org.apache.commons.lang.SystemUtils",
        "signature": "org.apache.commons.lang.SystemUtils.getOSMatches(java.lang.String, java.lang.String)",
        "snippet": "    private static boolean getOSMatches(String osNamePrefix, String osVersionPrefix) {\n        if (OS_NAME == null || OS_VERSION == null) {\n            return false;\n        }\n        return OS_NAME.startsWith(osNamePrefix) && OS_VERSION.startsWith(osVersionPrefix);\n    }    ",
        "begin_line": 1215,
        "end_line": 1220,
        "comment": "\n     * <p>Decides if the operating system matches.</p>\n     * \n     * @param osNamePrefix  the prefix for the os name\n     * @param osVersionPrefix  the prefix for the version\n     * @return true if matches, or false if not or can't determine\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/SystemUtils.java",
        "class_name": "org.apache.commons.lang.SystemUtils",
        "signature": "org.apache.commons.lang.SystemUtils.getSystemProperty(java.lang.String)",
        "snippet": "    private static String getSystemProperty(String property) {\n        try {\n            return System.getProperty(property);\n        } catch (SecurityException ex) {\n            // we are not allowed to look at this property\n            System.err.println(\n                \"Caught a SecurityException reading the system property '\" + property \n                + \"'; the SystemUtils property value will default to null.\"\n            );\n            return null;\n        }\n    }",
        "begin_line": 1233,
        "end_line": 1244,
        "comment": "\n     * <p>Gets a System property, defaulting to <code>null</code> if the property\n     * cannot be read.</p>\n     *\n     * <p>If a <code>SecurityException</code> is caught, the return\n     * value is <code>null</code> and a message is written to <code>System.err</code>.</p>\n     * \n     * @param property the system property name\n     * @return the system property value or <code>null</code> if a security problem occurs\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/SystemUtils.java",
        "class_name": "org.apache.commons.lang.SystemUtils",
        "signature": "org.apache.commons.lang.SystemUtils.isJavaVersionAtLeast(float)",
        "snippet": "    public static boolean isJavaVersionAtLeast(float requiredVersion) {\n        return JAVA_VERSION_FLOAT >= requiredVersion;\n    }",
        "begin_line": 1259,
        "end_line": 1261,
        "comment": "\n     * <p>Is the Java version at least the requested version.</p>\n     *\n     * <p>Example input:</p>\n     * <ul>\n     *  <li><code>1.2f</code> to test for JDK 1.2</li>\n     *  <li><code>1.31f</code> to test for JDK 1.3.1</li>\n     * </ul>\n     * \n     * @param requiredVersion  the required version, for example 1.31f\n     * @return <code>true</code> if the actual version is equal or greater\n     *  than the required version\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/SystemUtils.java",
        "class_name": "org.apache.commons.lang.SystemUtils",
        "signature": "org.apache.commons.lang.SystemUtils.isJavaVersionAtLeast(int)",
        "snippet": "    public static boolean isJavaVersionAtLeast(int requiredVersion) {\n        return JAVA_VERSION_INT >= requiredVersion;\n    }",
        "begin_line": 1277,
        "end_line": 1279,
        "comment": "\n     * <p>Is the Java version at least the requested version.</p>\n     *\n     * <p>Example input:</p>\n     * <ul>\n     *  <li><code>120</code> to test for JDK 1.2 or greater</li>\n     *  <li><code>131</code> to test for JDK 1.3.1 or greater</li>\n     * </ul>\n     * \n     * @param requiredVersion  the required version, for example 131\n     * @return <code>true</code> if the actual version is equal or greater\n     *  than the required version\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/SystemUtils.java",
        "class_name": "org.apache.commons.lang.SystemUtils",
        "signature": "org.apache.commons.lang.SystemUtils.isJavaAwtHeadless()",
        "snippet": "    public static boolean isJavaAwtHeadless() {\n        return JAVA_AWT_HEADLESS != null ? JAVA_AWT_HEADLESS.equals(Boolean.TRUE.toString()) : false;\n    }",
        "begin_line": 1291,
        "end_line": 1293,
        "comment": "\n     * Returns whether the {@link #JAVA_AWT_HEADLESS} value is <code>true</code>.\n     *  \n     * @return <code>true</code> if <code>JAVA_AWT_HEADLESS</code> is <code>\"true\"</code>,\n     * <code>false</code> otherwise.\n     * \n     * @see #JAVA_AWT_HEADLESS\n     * @since 2.1\n     * @since Java 1.4\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/SystemUtils.java",
        "class_name": "org.apache.commons.lang.SystemUtils",
        "signature": "org.apache.commons.lang.SystemUtils.getJavaHome()",
        "snippet": "    public static File getJavaHome() {\n        return new File(System.getProperty(JAVA_HOME_KEY));\n    }",
        "begin_line": 1304,
        "end_line": 1306,
        "comment": "\n     * <p>Gets the Java home directory as a <code>File</code>.</p>\n     * \n     * @return a directory\n     * @throws  SecurityException  if a security manager exists and its  \n     *             <code>checkPropertyAccess</code> method doesn't allow\n     *              access to the specified system property.\n     * @see System#getProperty(String)\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/SystemUtils.java",
        "class_name": "org.apache.commons.lang.SystemUtils",
        "signature": "org.apache.commons.lang.SystemUtils.getJavaIoTmpDir()",
        "snippet": "    public static File getJavaIoTmpDir() {\n        return new File(System.getProperty(JAVA_IO_TMPDIR_KEY));\n    }",
        "begin_line": 1318,
        "end_line": 1320,
        "comment": "\n     * <p>Gets the Java IO temporary directory as a <code>File</code>.</p>\n     * \n     * @return a directory\n     * @throws  SecurityException  if a security manager exists and its  \n     *             <code>checkPropertyAccess</code> method doesn't allow\n     *              access to the specified system property.\n     * @see System#getProperty(String)\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/SystemUtils.java",
        "class_name": "org.apache.commons.lang.SystemUtils",
        "signature": "org.apache.commons.lang.SystemUtils.getUserDir()",
        "snippet": "    public static File getUserDir() {\n        return new File(System.getProperty(USER_DIR_KEY));\n    }",
        "begin_line": 1332,
        "end_line": 1334,
        "comment": "\n     * <p>Gets the user directory as a <code>File</code>.</p>\n     * \n     * @return a directory\n     * @throws  SecurityException  if a security manager exists and its  \n     *             <code>checkPropertyAccess</code> method doesn't allow\n     *              access to the specified system property.\n     * @see System#getProperty(String)\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/SystemUtils.java",
        "class_name": "org.apache.commons.lang.SystemUtils",
        "signature": "org.apache.commons.lang.SystemUtils.getUserHome()",
        "snippet": "    public static File getUserHome() {\n        return new File(System.getProperty(USER_HOME_KEY));\n    }",
        "begin_line": 1346,
        "end_line": 1348,
        "comment": "\n     * <p>Gets the user home directory as a <code>File</code>.</p>\n     * \n     * @return a directory\n     * @throws  SecurityException  if a security manager exists and its  \n     *             <code>checkPropertyAccess</code> method doesn't allow\n     *              access to the specified system property.\n     * @see System#getProperty(String)\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharSet.java",
        "class_name": "org.apache.commons.lang.CharSet",
        "signature": "org.apache.commons.lang.CharSet.getInstance(java.lang.String)",
        "snippet": "    public static CharSet getInstance(String setStr) {\n        Object set = COMMON.get(setStr);\n        if (set != null) {\n            return (CharSet) set;\n        }\n        return new CharSet(setStr);\n    }",
        "begin_line": 141,
        "end_line": 147,
        "comment": "\n     * <p>Factory method to create a new CharSet using a special syntax.</p>\n     *\n     * <ul>\n     *  <li><code>null</code> or empty string (\"\")\n     * - set containing no characters</li>\n     *  <li>Single character, such as \"a\"\n     *  - set containing just that character</li>\n     *  <li>Multi character, such as \"a-e\"\n     *  - set containing characters from one character to the other</li>\n     *  <li>Negated, such as \"^a\" or \"^a-e\"\n     *  - set containing all characters except those defined</li>\n     *  <li>Combinations, such as \"abe-g\"\n     *  - set containing all the characters from the individual sets</li>\n     * </ul>\n     *\n     * <p>The matching order is:</p>\n     * <ol>\n     *  <li>Negated multi character range, such as \"^a-e\"\n     *  <li>Ordinary multi character range, such as \"a-e\"\n     *  <li>Negated single character, such as \"^a\"\n     *  <li>Ordinary single character, such as \"a\"\n     * </ol>\n     * <p>Matching works left to right. Once a match is found the\n     * search starts again from the next character.</p>\n     *\n     * <p>If the same range is defined twice using the same syntax, only\n     * one range will be kept.\n     * Thus, \"a-ca-c\" creates only one range of \"a-c\".</p>\n     *\n     * <p>If the start and end of a range are in the wrong order,\n     * they are reversed. Thus \"a-e\" is the same as \"e-a\".\n     * As a result, \"a-ee-a\" would create only one range,\n     * as the \"a-e\" and \"e-a\" are the same.</p>\n     *\n     * <p>The set of characters represented is the union of the specified ranges.</p>\n     *\n     * <p>All CharSet objects returned by this method will be immutable.</p>\n     *\n     * @param setStr  the String describing the set, may be null\n     * @return a CharSet instance\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharSet.java",
        "class_name": "org.apache.commons.lang.CharSet",
        "signature": "org.apache.commons.lang.CharSet.CharSet(java.lang.String)",
        "snippet": "    protected CharSet(String setStr) {\n        super();\n        add(setStr);\n    }",
        "begin_line": 156,
        "end_line": 159,
        "comment": "\n     * <p>Constructs a new CharSet using the set syntax.</p>\n     *\n     * @param setStr  the String describing the set, may be null\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharSet.java",
        "class_name": "org.apache.commons.lang.CharSet",
        "signature": "org.apache.commons.lang.CharSet.CharSet(java.lang.String[])",
        "snippet": "    protected CharSet(String[] set) {\n        super();\n        int sz = set.length;\n        for (int i = 0; i < sz; i++) {\n            add(set[i]);\n        }\n    }",
        "begin_line": 168,
        "end_line": 174,
        "comment": "\n     * <p>Constructs a new CharSet using the set syntax.\n     * Each string is merged in with the set.</p>\n     *\n     * @param set  Strings to merge into the initial set\n     * @throws NullPointerException if set is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharSet.java",
        "class_name": "org.apache.commons.lang.CharSet",
        "signature": "org.apache.commons.lang.CharSet.add(java.lang.String)",
        "snippet": "    protected void add(String str) {\n        if (str == null) {\n            return;\n        }\n\n        int len = str.length();\n        int pos = 0;\n        while (pos < len) {\n            int remainder = (len - pos);\n            if (remainder >= 4 && str.charAt(pos) == '^' && str.charAt(pos + 2) == '-') {\n                // negated range\n                set.add(new CharRange(str.charAt(pos + 1), str.charAt(pos + 3), true));\n                pos += 4;\n            } else if (remainder >= 3 && str.charAt(pos + 1) == '-') {\n                // range\n                set.add(new CharRange(str.charAt(pos), str.charAt(pos + 2)));\n                pos += 3;\n            } else if (remainder >= 2 && str.charAt(pos) == '^') {\n                // negated char\n                set.add(new CharRange(str.charAt(pos + 1), true));\n                pos += 2;\n            } else {\n                // char\n                set.add(new CharRange(str.charAt(pos)));\n                pos += 1;\n            }\n        }\n    }",
        "begin_line": 182,
        "end_line": 209,
        "comment": "\n     * <p>Add a set definition string to the <code>CharSet</code>.</p>\n     *\n     * @param str  set definition string\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharSet.java",
        "class_name": "org.apache.commons.lang.CharSet",
        "signature": "org.apache.commons.lang.CharSet.getCharRanges()",
        "snippet": "    public CharRange[] getCharRanges() {\n        return (CharRange[]) set.toArray(new CharRange[set.size()]);\n    }",
        "begin_line": 218,
        "end_line": 220,
        "comment": "\n     * <p>Gets the internal set as an array of CharRange objects.</p>\n     *\n     * @return an array of immutable CharRange objects\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharSet.java",
        "class_name": "org.apache.commons.lang.CharSet",
        "signature": "org.apache.commons.lang.CharSet.contains(char)",
        "snippet": "    public boolean contains(char ch) {\n        for (Iterator it = set.iterator(); it.hasNext();) {\n            CharRange range = (CharRange) it.next();\n            if (range.contains(ch)) {\n                return true;\n            }\n        }\n        return false;\n    }",
        "begin_line": 230,
        "end_line": 238,
        "comment": "\n     * <p>Does the <code>CharSet</code> contain the specified\n     * character <code>ch</code>.</p>\n     *\n     * @param ch  the character to check for\n     * @return <code>true</code> if the set contains the characters\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharSet.java",
        "class_name": "org.apache.commons.lang.CharSet",
        "signature": "org.apache.commons.lang.CharSet.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (obj instanceof CharSet == false) {\n            return false;\n        }\n        CharSet other = (CharSet) obj;\n        return set.equals(other.set);\n    }",
        "begin_line": 253,
        "end_line": 262,
        "comment": "\n     * <p>Compares two CharSet objects, returning true if they represent\n     * exactly the same set of characters defined in the same way.</p>\n     *\n     * <p>The two sets <code>abc</code> and <code>a-c</code> are <i>not</i>\n     * equal according to this method.</p>\n     *\n     * @param obj  the object to compare to\n     * @return true if equal\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharSet.java",
        "class_name": "org.apache.commons.lang.CharSet",
        "signature": "org.apache.commons.lang.CharSet.hashCode()",
        "snippet": "    public int hashCode() {\n        return 89 + set.hashCode();\n    }",
        "begin_line": 270,
        "end_line": 272,
        "comment": "\n     * <p>Gets a hashCode compatible with the equals method.</p>\n     *\n     * @return a suitable hashCode\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/CharSet.java",
        "class_name": "org.apache.commons.lang.CharSet",
        "signature": "org.apache.commons.lang.CharSet.toString()",
        "snippet": "    public String toString() {\n        return set.toString();\n    }",
        "begin_line": 279,
        "end_line": 281,
        "comment": "\n     * <p>Gets a string representation of the set.</p>\n     *\n     * @return string representation of the set\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/LocaleUtils.java",
        "class_name": "org.apache.commons.lang.LocaleUtils",
        "signature": "org.apache.commons.lang.LocaleUtils.LocaleUtils()",
        "snippet": "    public LocaleUtils() {\n      super();\n    }",
        "begin_line": 62,
        "end_line": 64,
        "comment": "\n     * <p><code>LocaleUtils</code> instances should NOT be constructed in standard programming.\n     * Instead, the class should be used as <code>LocaleUtils.toLocale(\"en_GB\");</code>.</p>\n     *\n     * <p>This constructor is public to permit tools that require a JavaBean instance\n     * to operate.</p>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/LocaleUtils.java",
        "class_name": "org.apache.commons.lang.LocaleUtils",
        "signature": "org.apache.commons.lang.LocaleUtils.toLocale(java.lang.String)",
        "snippet": "    public static Locale toLocale(String str) {\n        if (str == null) {\n            return null;\n        }\n        int len = str.length();\n        if (len != 2 && len != 5 && len < 7) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        char ch0 = str.charAt(0);\n        char ch1 = str.charAt(1);\n        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (len == 2) {\n            return new Locale(str, \"\");\n        } else {\n            if (str.charAt(2) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            char ch3 = str.charAt(3);\n            char ch4 = str.charAt(4);\n            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (len == 5) {\n                return new Locale(str.substring(0, 2), str.substring(3, 5));\n            } else {\n                if (str.charAt(5) != '_') {\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n            }\n        }\n    }",
        "begin_line": 94,
        "end_line": 127,
        "comment": "\n     * <p>Converts a String to a Locale.</p>\n     *\n     * <p>This method takes the string format of a locale and creates the\n     * locale object from it.</p>\n     *\n     * <pre>\n     *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n     *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n     *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n     * </pre>\n     *\n     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n     * Thus, the result from getVariant() may vary depending on your JDK.</p>\n     *\n     * <p>This method validates the input strictly.\n     * The language code must be lowercase.\n     * The country code must be uppercase.\n     * The separator must be an underscore.\n     * The length must be correct.\n     * </p>\n     *\n     * @param str  the locale String to convert, null returns null\n     * @return a Locale, null if null input\n     * @throws IllegalArgumentException if the string is an invalid format\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/LocaleUtils.java",
        "class_name": "org.apache.commons.lang.LocaleUtils",
        "signature": "org.apache.commons.lang.LocaleUtils.localeLookupList(java.util.Locale)",
        "snippet": "    public static List localeLookupList(Locale locale) {\n        return localeLookupList(locale, locale);\n    }",
        "begin_line": 142,
        "end_line": 144,
        "comment": "\n     * <p>Obtains the list of locales to search through when performing\n     * a locale search.</p>\n     *\n     * <pre>\n     * localeLookupList(Locale(\"fr\",\"CA\",\"xxx\"))\n     *   = [Locale(\"fr\",\"CA\",\"xxx\"), Locale(\"fr\",\"CA\"), Locale(\"fr\")]\n     * </pre>\n     *\n     * @param locale  the locale to start from\n     * @return the unmodifiable list of Locale objects, 0 being locale, never null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/LocaleUtils.java",
        "class_name": "org.apache.commons.lang.LocaleUtils",
        "signature": "org.apache.commons.lang.LocaleUtils.localeLookupList(java.util.Locale, java.util.Locale)",
        "snippet": "    public static List localeLookupList(Locale locale, Locale defaultLocale) {\n        List list = new ArrayList(4);\n        if (locale != null) {\n            list.add(locale);\n            if (locale.getVariant().length() > 0) {\n                list.add(new Locale(locale.getLanguage(), locale.getCountry()));\n            }\n            if (locale.getCountry().length() > 0) {\n                list.add(new Locale(locale.getLanguage(), \"\"));\n            }\n            if (list.contains(defaultLocale) == false) {\n                list.add(defaultLocale);\n            }\n        }\n        return Collections.unmodifiableList(list);\n    }",
        "begin_line": 164,
        "end_line": 179,
        "comment": "\n     * <p>Obtains the list of locales to search through when performing\n     * a locale search.</p>\n     *\n     * <pre>\n     * localeLookupList(Locale(\"fr\", \"CA\", \"xxx\"), Locale(\"en\"))\n     *   = [Locale(\"fr\",\"CA\",\"xxx\"), Locale(\"fr\",\"CA\"), Locale(\"fr\"), Locale(\"en\"]\n     * </pre>\n     *\n     * <p>The result list begins with the most specific locale, then the\n     * next more general and so on, finishing with the default locale.\n     * The list will never contain the same locale twice.</p>\n     *\n     * @param locale  the locale to start from, null returns empty list\n     * @param defaultLocale  the default locale to use if no other is found\n     * @return the unmodifiable list of Locale objects, 0 being locale, never null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/LocaleUtils.java",
        "class_name": "org.apache.commons.lang.LocaleUtils",
        "signature": "org.apache.commons.lang.LocaleUtils.availableLocaleList()",
        "snippet": "    public static List availableLocaleList() {\n        return cAvailableLocaleList;\n    }",
        "begin_line": 191,
        "end_line": 193,
        "comment": "\n     * <p>Obtains an unmodifiable list of installed locales.</p>\n     * \n     * <p>This method is a wrapper around {@link Locale#getAvailableLocales()}.\n     * It is more efficient, as the JDK method must create a new array each\n     * time it is called.</p>\n     *\n     * @return the unmodifiable list of available locales\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/LocaleUtils.java",
        "class_name": "org.apache.commons.lang.LocaleUtils",
        "signature": "org.apache.commons.lang.LocaleUtils.availableLocaleSet()",
        "snippet": "    public static Set availableLocaleSet() {\n        Set set = cAvailableLocaleSet;\n        if (set == null) {\n            set = new HashSet(availableLocaleList());\n            set = Collections.unmodifiableSet(set);\n            cAvailableLocaleSet = set;\n        }\n        return set;\n    }",
        "begin_line": 205,
        "end_line": 213,
        "comment": "\n     * <p>Obtains an unmodifiable set of installed locales.</p>\n     * \n     * <p>This method is a wrapper around {@link Locale#getAvailableLocales()}.\n     * It is more efficient, as the JDK method must create a new array each\n     * time it is called.</p>\n     *\n     * @return the unmodifiable set of available locales\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/LocaleUtils.java",
        "class_name": "org.apache.commons.lang.LocaleUtils",
        "signature": "org.apache.commons.lang.LocaleUtils.isAvailableLocale(java.util.Locale)",
        "snippet": "    public static boolean isAvailableLocale(Locale locale) {\n        return cAvailableLocaleSet.contains(locale);\n    }",
        "begin_line": 222,
        "end_line": 224,
        "comment": "\n     * <p>Checks if the locale specified is in the list of available locales.</p>\n     *\n     * @param locale the Locale object to check if it is available\n     * @return true if the locale is a known locale\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/LocaleUtils.java",
        "class_name": "org.apache.commons.lang.LocaleUtils",
        "signature": "org.apache.commons.lang.LocaleUtils.languagesByCountry(java.lang.String)",
        "snippet": "    public static List languagesByCountry(String countryCode) {\n        List langs = (List) cLanguagesByCountry.get(countryCode);  //syncd\n        if (langs == null) {\n            if (countryCode != null) {\n                langs = new ArrayList();\n                List locales = availableLocaleList();\n                for (int i = 0; i < locales.size(); i++) {\n                    Locale locale = (Locale) locales.get(i);\n                    if (countryCode.equals(locale.getCountry()) &&\n                            locale.getVariant().length() == 0) {\n                        langs.add(locale);\n                    }\n                }\n                langs = Collections.unmodifiableList(langs);\n            } else {\n                langs = Collections.EMPTY_LIST;\n            }\n            cLanguagesByCountry.put(countryCode, langs);  //syncd\n        }\n        return langs;\n    }",
        "begin_line": 236,
        "end_line": 256,
        "comment": "\n     * <p>Obtains the list of languages supported for a given country.</p>\n     *\n     * <p>This method takes a country code and searches to find the\n     * languages available for that country. Variant locales are removed.</p>\n     *\n     * @param countryCode  the 2 letter country code, null returns empty\n     * @return an unmodifiable List of Locale objects, never null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/LocaleUtils.java",
        "class_name": "org.apache.commons.lang.LocaleUtils",
        "signature": "org.apache.commons.lang.LocaleUtils.countriesByLanguage(java.lang.String)",
        "snippet": "    public static List countriesByLanguage(String languageCode) {\n        List countries = (List) cCountriesByLanguage.get(languageCode);  //syncd\n        if (countries == null) {\n            if (languageCode != null) {\n                countries = new ArrayList();\n                List locales = availableLocaleList();\n                for (int i = 0; i < locales.size(); i++) {\n                    Locale locale = (Locale) locales.get(i);\n                    if (languageCode.equals(locale.getLanguage()) &&\n                            locale.getCountry().length() != 0 &&\n                            locale.getVariant().length() == 0) {\n                        countries.add(locale);\n                    }\n                }\n                countries = Collections.unmodifiableList(countries);\n            } else {\n                countries = Collections.EMPTY_LIST;\n            }\n            cCountriesByLanguage.put(languageCode, countries);  //syncd\n        }\n        return countries;\n    }",
        "begin_line": 268,
        "end_line": 289,
        "comment": "\n     * <p>Obtains the list of countries supported for a given language.</p>\n     * \n     * <p>This method takes a language code and searches to find the\n     * countries available for that language. Variant locales are removed.</p>\n     *\n     * @param languageCode  the 2 letter language code, null returns empty\n     * @return an unmodifiable List of Locale objects, never null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/NullArgumentException.java",
        "class_name": "org.apache.commons.lang.NullArgumentException",
        "signature": "org.apache.commons.lang.NullArgumentException.NullArgumentException(java.lang.String)",
        "snippet": "    public NullArgumentException(String argName) {\n        super((argName == null ? \"Argument\" : argName) + \" must not be null.\");\n    }",
        "begin_line": 60,
        "end_line": 62,
        "comment": "\n     * <p>Instantiates with the given argument name.</p>\n     *\n     * @param argName  the name of the argument that was <code>null</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enum/EnumUtils.java",
        "class_name": "org.apache.commons.lang.enum.EnumUtils",
        "signature": "EnumUtils.EnumUtils()",
        "snippet": "    public EnumUtils() {\n        super();\n    }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "\n     * Public constructor. This class should not normally be instantiated.\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enum/EnumUtils.java",
        "class_name": "org.apache.commons.lang.enum.EnumUtils",
        "signature": "EnumUtils.getEnum(java.lang.Class, java.lang.String)",
        "snippet": "    public static Enum getEnum(Class enumClass, String name) {\n        return Enum.getEnum(enumClass, name);\n    }",
        "begin_line": 55,
        "end_line": 57,
        "comment": "\n     * <p>Gets an <code>Enum</code> object by class and name.</p>\n     * \n     * @param enumClass  the class of the <code>Enum</code> to get\n     * @param name  the name of the Enum to get, may be <code>null</code>\n     * @return the enum object\n     * @throws IllegalArgumentException if the enum class is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enum/EnumUtils.java",
        "class_name": "org.apache.commons.lang.enum.EnumUtils",
        "signature": "EnumUtils.getEnum(java.lang.Class, int)",
        "snippet": "    public static ValuedEnum getEnum(Class enumClass, int value) {\n        return (ValuedEnum) ValuedEnum.getEnum(enumClass, value);\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * <p>Gets a <code>ValuedEnum</code> object by class and value.</p>\n     * \n     * @param enumClass  the class of the <code>Enum</code> to get\n     * @param value  the value of the <code>Enum</code> to get\n     * @return the enum object, or null if the enum does not exist\n     * @throws IllegalArgumentException if the enum class is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enum/EnumUtils.java",
        "class_name": "org.apache.commons.lang.enum.EnumUtils",
        "signature": "EnumUtils.getEnumMap(java.lang.Class)",
        "snippet": "    public static Map getEnumMap(Class enumClass) {\n        return Enum.getEnumMap(enumClass);\n    }",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\n     * <p>Gets the <code>Map</code> of <code>Enum</code> objects by\n     * name using the <code>Enum</code> class.</p>\n     *\n     * <p>If the requested class has no enum objects an empty\n     * <code>Map</code> is returned. The <code>Map</code> is unmodifiable.</p>\n     * \n     * @param enumClass  the class of the <code>Enum</code> to get\n     * @return the enum object Map\n     * @throws IllegalArgumentException if the enum class is <code>null</code>\n     * @throws IllegalArgumentException if the enum class is not a subclass\n     *  of <code>Enum</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enum/EnumUtils.java",
        "class_name": "org.apache.commons.lang.enum.EnumUtils",
        "signature": "EnumUtils.getEnumList(java.lang.Class)",
        "snippet": "    public static List getEnumList(Class enumClass) {\n        return Enum.getEnumList(enumClass);\n    }",
        "begin_line": 104,
        "end_line": 106,
        "comment": "\n     * <p>Gets the <code>List</code> of <code>Enum</code> objects using\n     * the <code>Enum</code> class.</p>\n     *\n     * <p>The list is in the order that the objects were created\n     * (source code order).</p>\n     *\n     * <p>If the requested class has no enum objects an empty\n     * <code>List</code> is returned. The <code>List</code> is unmodifiable.</p>\n     * \n     * @param enumClass  the class of the Enum to get\n     * @return the enum object Map\n     * @throws IllegalArgumentException if the enum class is <code>null</code>\n     * @throws IllegalArgumentException if the enum class is not a subclass\n     *  of <code>Enum</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enum/EnumUtils.java",
        "class_name": "org.apache.commons.lang.enum.EnumUtils",
        "signature": "EnumUtils.iterator(java.lang.Class)",
        "snippet": "    public static Iterator iterator(Class enumClass) {\n        return Enum.getEnumList(enumClass).iterator();\n    }",
        "begin_line": 124,
        "end_line": 126,
        "comment": "\n     * <p>Gets an <code>Iterator</code> over the <code>Enum</code> objects\n     * in an <code>Enum</code> class.</p>\n     *\n     * <p>The iterator is in the order that the objects were created\n     * (source code order).</p>\n     *\n     * <p>If the requested class has no enum objects an empty\n     * <code>Iterator</code> is returned. The <code>Iterator</code>\n     * is unmodifiable.</p>\n     * \n     * @param enumClass  the class of the <code>Enum</code> to get\n     * @return an <code>Iterator</code> of the <code>Enum</code> objects\n     * @throws IllegalArgumentException if the enum class is <code>null</code>\n     * @throws IllegalArgumentException if the enum class is not a subclass of <code>Enum</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enums/EnumUtils.java",
        "class_name": "org.apache.commons.lang.enums.EnumUtils",
        "signature": "org.apache.commons.lang.enums.EnumUtils.EnumUtils()",
        "snippet": "    public EnumUtils() {\n      super();\n    }",
        "begin_line": 39,
        "end_line": 41,
        "comment": "\n     * Public constructor. This class should not normally be instantiated.\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enums/EnumUtils.java",
        "class_name": "org.apache.commons.lang.enums.EnumUtils",
        "signature": "org.apache.commons.lang.enums.EnumUtils.getEnum(java.lang.Class, java.lang.String)",
        "snippet": "    public static Enum getEnum(Class enumClass, String name) {\n        return Enum.getEnum(enumClass, name);\n    }",
        "begin_line": 51,
        "end_line": 53,
        "comment": "\n     * <p>Gets an <code>Enum</code> object by class and name.</p>\n     * \n     * @param enumClass  the class of the <code>Enum</code> to get\n     * @param name  the name of the Enum to get, may be <code>null</code>\n     * @return the enum object\n     * @throws IllegalArgumentException if the enum class is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enums/EnumUtils.java",
        "class_name": "org.apache.commons.lang.enums.EnumUtils",
        "signature": "org.apache.commons.lang.enums.EnumUtils.getEnum(java.lang.Class, int)",
        "snippet": "    public static ValuedEnum getEnum(Class enumClass, int value) {\n        return (ValuedEnum) ValuedEnum.getEnum(enumClass, value);\n    }",
        "begin_line": 63,
        "end_line": 65,
        "comment": "\n     * <p>Gets a <code>ValuedEnum</code> object by class and value.</p>\n     * \n     * @param enumClass  the class of the <code>Enum</code> to get\n     * @param value  the value of the <code>Enum</code> to get\n     * @return the enum object, or null if the enum does not exist\n     * @throws IllegalArgumentException if the enum class is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enums/EnumUtils.java",
        "class_name": "org.apache.commons.lang.enums.EnumUtils",
        "signature": "org.apache.commons.lang.enums.EnumUtils.getEnumMap(java.lang.Class)",
        "snippet": "    public static Map getEnumMap(Class enumClass) {\n        return Enum.getEnumMap(enumClass);\n    }",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\n     * <p>Gets the <code>Map</code> of <code>Enum</code> objects by\n     * name using the <code>Enum</code> class.</p>\n     *\n     * <p>If the requested class has no enum objects an empty\n     * <code>Map</code> is returned. The <code>Map</code> is unmodifiable.</p>\n     * \n     * @param enumClass  the class of the <code>Enum</code> to get\n     * @return the enum object Map\n     * @throws IllegalArgumentException if the enum class is <code>null</code>\n     * @throws IllegalArgumentException if the enum class is not a subclass\n     *  of <code>Enum</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enums/EnumUtils.java",
        "class_name": "org.apache.commons.lang.enums.EnumUtils",
        "signature": "org.apache.commons.lang.enums.EnumUtils.getEnumList(java.lang.Class)",
        "snippet": "    public static List getEnumList(Class enumClass) {\n        return Enum.getEnumList(enumClass);\n    }",
        "begin_line": 100,
        "end_line": 102,
        "comment": "\n     * <p>Gets the <code>List</code> of <code>Enum</code> objects using\n     * the <code>Enum</code> class.</p>\n     *\n     * <p>The list is in the order that the objects were created\n     * (source code order).</p>\n     *\n     * <p>If the requested class has no enum objects an empty\n     * <code>List</code> is returned. The <code>List</code> is unmodifiable.</p>\n     * \n     * @param enumClass  the class of the Enum to get\n     * @return the enum object Map\n     * @throws IllegalArgumentException if the enum class is <code>null</code>\n     * @throws IllegalArgumentException if the enum class is not a subclass\n     *  of <code>Enum</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enums/EnumUtils.java",
        "class_name": "org.apache.commons.lang.enums.EnumUtils",
        "signature": "org.apache.commons.lang.enums.EnumUtils.iterator(java.lang.Class)",
        "snippet": "    public static Iterator iterator(Class enumClass) {\n        return Enum.getEnumList(enumClass).iterator();\n    }",
        "begin_line": 120,
        "end_line": 122,
        "comment": "\n     * <p>Gets an <code>Iterator</code> over the <code>Enum</code> objects\n     * in an <code>Enum</code> class.</p>\n     *\n     * <p>The iterator is in the order that the objects were created\n     * (source code order).</p>\n     *\n     * <p>If the requested class has no enum objects an empty\n     * <code>Iterator</code> is returned. The <code>Iterator</code>\n     * is unmodifiable.</p>\n     * \n     * @param enumClass  the class of the <code>Enum</code> to get\n     * @return an <code>Iterator</code> of the <code>Enum</code> objects\n     * @throws IllegalArgumentException if the enum class is <code>null</code>\n     * @throws IllegalArgumentException if the enum class is not a subclass of <code>Enum</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enum/Enum.java",
        "class_name": "org.apache.commons.lang.enum.Enum",
        "signature": "Enum.Entry.Entry()",
        "snippet": "        protected Entry() {\n            super();\n        }",
        "begin_line": 301,
        "end_line": 303,
        "comment": "\n         * <p>Restrictive constructor.</p>\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enum/Enum.java",
        "class_name": "org.apache.commons.lang.enum.Enum",
        "signature": "Enum.Enum(java.lang.String)",
        "snippet": "    protected Enum(String name) {\n        super();\n        init(name);\n        iName = name;\n        iHashCode = 7 + getEnumClass().hashCode() + 3 * name.hashCode();\n        // cannot create toString here as subclasses may want to include other data\n    }",
        "begin_line": 316,
        "end_line": 322,
        "comment": "\n     * <p>Constructor to add a new named item to the enumeration.</p>\n     *\n     * @param name  the name of the enum object,\n     *  must not be empty or <code>null</code>\n     * @throws IllegalArgumentException if the name is <code>null</code>\n     *  or an empty string\n     * @throws IllegalArgumentException if the getEnumClass() method returns\n     *  a null or invalid Class\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enum/Enum.java",
        "class_name": "org.apache.commons.lang.enum.Enum",
        "signature": "Enum.init(java.lang.String)",
        "snippet": "    private void init(String name) {\n        if (StringUtils.isEmpty(name)) {\n            throw new IllegalArgumentException(\"The Enum name must not be empty or null\");\n        }\n        \n        Class enumClass = getEnumClass();\n        if (enumClass == null) {\n            throw new IllegalArgumentException(\"getEnumClass() must not be null\");\n        }\n        Class cls = getClass();\n        boolean ok = false;\n        while (cls != null && cls != Enum.class && cls != ValuedEnum.class) {\n            if (cls == enumClass) {\n                ok = true;\n                break;\n            }\n            cls = cls.getSuperclass();\n        }\n        if (ok == false) {\n            throw new IllegalArgumentException(\"getEnumClass() must return a superclass of this class\");\n        }\n        \n        // create entry\n        Entry entry = (Entry) cEnumClasses.get(enumClass);\n        if (entry == null) {\n            entry = createEntry(enumClass);\n            cEnumClasses.put(enumClass, entry);\n        }\n        if (entry.map.containsKey(name)) {\n            throw new IllegalArgumentException(\"The Enum name must be unique, '\" + name + \"' has already been added\");\n        }\n        entry.map.put(name, this);\n        entry.list.add(this);\n    }",
        "begin_line": 331,
        "end_line": 364,
        "comment": "\n     * Initializes the enumeration.\n     * \n     * @param name  the enum name\n     * @throws IllegalArgumentException if the name is null or empty or duplicate\n     * @throws IllegalArgumentException if the enumClass is null or invalid\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enum/Enum.java",
        "class_name": "org.apache.commons.lang.enum.Enum",
        "signature": "Enum.readResolve()",
        "snippet": "    protected Object readResolve() {\n        Entry entry = (Entry) cEnumClasses.get(getEnumClass());\n        if (entry == null) {\n            return null;\n        }\n        return entry.map.get(getName());\n    }",
        "begin_line": 372,
        "end_line": 378,
        "comment": "\n     * <p>Handle the deserialization of the class to ensure that multiple\n     * copies are not wastefully created, or illegal enum types created.</p>\n     *\n     * @return the resolved object\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enum/Enum.java",
        "class_name": "org.apache.commons.lang.enum.Enum",
        "signature": "Enum.getEnum(java.lang.Class, java.lang.String)",
        "snippet": "    protected static Enum getEnum(Class enumClass, String name) {\n        Entry entry = getEntry(enumClass);\n        if (entry == null) {\n            return null;\n        }\n        return (Enum) entry.map.get(name);\n    }",
        "begin_line": 393,
        "end_line": 399,
        "comment": "\n     * <p>Gets an <code>Enum</code> object by class and name.</p>\n     * \n     * @param enumClass  the class of the Enum to get, must not\n     *  be <code>null</code>\n     * @param name  the name of the <code>Enum</code> to get,\n     *  may be <code>null</code>\n     * @return the enum object, or <code>null</code> if the enum does not exist\n     * @throws IllegalArgumentException if the enum class\n     *  is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enum/Enum.java",
        "class_name": "org.apache.commons.lang.enum.Enum",
        "signature": "Enum.getEnumMap(java.lang.Class)",
        "snippet": "    protected static Map getEnumMap(Class enumClass) {\n        Entry entry = getEntry(enumClass);\n        if (entry == null) {\n            return EMPTY_MAP;\n        }\n        return entry.unmodifiableMap;\n    }",
        "begin_line": 414,
        "end_line": 420,
        "comment": "\n     * <p>Gets the <code>Map</code> of <code>Enum</code> objects by\n     * name using the <code>Enum</code> class.</p>\n     *\n     * <p>If the requested class has no enum objects an empty\n     * <code>Map</code> is returned.</p>\n     * \n     * @param enumClass  the class of the <code>Enum</code> to get,\n     *  must not be <code>null</code>\n     * @return the enum object Map\n     * @throws IllegalArgumentException if the enum class is <code>null</code>\n     * @throws IllegalArgumentException if the enum class is not a subclass of Enum\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enum/Enum.java",
        "class_name": "org.apache.commons.lang.enum.Enum",
        "signature": "Enum.getEnumList(java.lang.Class)",
        "snippet": "    protected static List getEnumList(Class enumClass) {\n        Entry entry = getEntry(enumClass);\n        if (entry == null) {\n            return Collections.EMPTY_LIST;\n        }\n        return entry.unmodifiableList;\n    }",
        "begin_line": 436,
        "end_line": 442,
        "comment": "\n     * <p>Gets the <code>List</code> of <code>Enum</code> objects using the\n     * <code>Enum</code> class.</p>\n     *\n     * <p>The list is in the order that the objects were created (source code order).\n     * If the requested class has no enum objects an empty <code>List</code> is\n     * returned.</p>\n     * \n     * @param enumClass  the class of the <code>Enum</code> to get,\n     *  must not be <code>null</code>\n     * @return the enum object Map\n     * @throws IllegalArgumentException if the enum class is <code>null</code>\n     * @throws IllegalArgumentException if the enum class is not a subclass of Enum\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enum/Enum.java",
        "class_name": "org.apache.commons.lang.enum.Enum",
        "signature": "Enum.iterator(java.lang.Class)",
        "snippet": "    protected static Iterator iterator(Class enumClass) {\n        return Enum.getEnumList(enumClass).iterator();\n    }",
        "begin_line": 458,
        "end_line": 460,
        "comment": "\n     * <p>Gets an <code>Iterator</code> over the <code>Enum</code> objects in\n     * an <code>Enum</code> class.</p>\n     *\n     * <p>The <code>Iterator</code> is in the order that the objects were\n     * created (source code order). If the requested class has no enum\n     * objects an empty <code>Iterator</code> is returned.</p>\n     * \n     * @param enumClass  the class of the <code>Enum</code> to get,\n     *  must not be <code>null</code>\n     * @return an iterator of the Enum objects\n     * @throws IllegalArgumentException if the enum class is <code>null</code>\n     * @throws IllegalArgumentException if the enum class is not a subclass of Enum\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enum/Enum.java",
        "class_name": "org.apache.commons.lang.enum.Enum",
        "signature": "Enum.getEntry(java.lang.Class)",
        "snippet": "    private static Entry getEntry(Class enumClass) {\n        if (enumClass == null) {\n            throw new IllegalArgumentException(\"The Enum Class must not be null\");\n        }\n        if (Enum.class.isAssignableFrom(enumClass) == false) {\n            throw new IllegalArgumentException(\"The Class must be a subclass of Enum\");\n        }\n        Entry entry = (Entry) cEnumClasses.get(enumClass);\n        return entry;\n    }",
        "begin_line": 469,
        "end_line": 478,
        "comment": "\n     * <p>Gets an <code>Entry</code> from the map of Enums.</p>\n     * \n     * @param enumClass  the class of the <code>Enum</code> to get\n     * @return the enum entry\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enum/Enum.java",
        "class_name": "org.apache.commons.lang.enum.Enum",
        "signature": "Enum.createEntry(java.lang.Class)",
        "snippet": "    private static Entry createEntry(Class enumClass) {\n        Entry entry = new Entry();\n        Class cls = enumClass.getSuperclass();\n        while (cls != null && cls != Enum.class && cls != ValuedEnum.class) {\n            Entry loopEntry = (Entry) cEnumClasses.get(cls);\n            if (loopEntry != null) {\n                entry.list.addAll(loopEntry.list);\n                entry.map.putAll(loopEntry.map);\n                break;  // stop here, as this will already have had superclasses added\n            }\n            cls = cls.getSuperclass();\n        }\n        return entry;\n    }",
        "begin_line": 488,
        "end_line": 501,
        "comment": "\n     * <p>Creates an <code>Entry</code> for storing the Enums.</p>\n     *\n     * <p>This accounts for subclassed Enums.</p>\n     * \n     * @param enumClass  the class of the <code>Enum</code> to get\n     * @return the enum entry\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enum/Enum.java",
        "class_name": "org.apache.commons.lang.enum.Enum",
        "signature": "Enum.getName()",
        "snippet": "    public final String getName() {\n        return iName;\n    }",
        "begin_line": 509,
        "end_line": 511,
        "comment": "\n     * <p>Retrieve the name of this Enum item, set in the constructor.</p>\n     * \n     * @return the <code>String</code> name of this Enum item\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enum/Enum.java",
        "class_name": "org.apache.commons.lang.enum.Enum",
        "signature": "Enum.getEnumClass()",
        "snippet": "    public Class getEnumClass() {\n        return getClass();\n    }",
        "begin_line": 523,
        "end_line": 525,
        "comment": "\n     * <p>Retrieves the Class of this Enum item, set in the constructor.</p>\n     * \n     * <p>This is normally the same as <code>getClass()</code>, but for\n     * advanced Enums may be different. If overridden, it must return a\n     * constant value.</p>\n     * \n     * @return the <code>Class</code> of the enum\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enum/Enum.java",
        "class_name": "org.apache.commons.lang.enum.Enum",
        "signature": "Enum.equals(java.lang.Object)",
        "snippet": "    public final boolean equals(Object other) {\n        if (other == this) {\n            return true;\n        } else if (other == null) {\n            return false;\n        } else if (other.getClass() == this.getClass()) {\n            // Ok to do a class cast to Enum here since the test above\n            // guarantee both\n            // classes are in the same class loader.\n            return iName.equals(((Enum) other).iName);\n        } else {\n            // This and other are in different class loaders, we must use reflection.\n            if (other.getClass().getName().equals(this.getClass().getName()) == false) {\n                return false;\n            }\n            return iName.equals( getNameInOtherClassLoader(other) );\n        }\n    }",
        "begin_line": 540,
        "end_line": 557,
        "comment": "\n     * <p>Tests for equality.</p>\n     *\n     * <p>Two Enum objects are considered equal\n     * if they have the same class names and the same names.\n     * Identity is tested for first, so this method usually runs fast.</p>\n     * \n     * <p>If the parameter is in a different class loader than this instance,\n     * reflection is used to compare the names.</p>\n     *\n     * @param other  the other object to compare for equality\n     * @return <code>true</code> if the Enums are equal\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enum/Enum.java",
        "class_name": "org.apache.commons.lang.enum.Enum",
        "signature": "Enum.hashCode()",
        "snippet": "    public final int hashCode() {\n        return iHashCode;\n    }",
        "begin_line": 564,
        "end_line": 566,
        "comment": "\n     * <p>Returns a suitable hashCode for the enumeration.</p>\n     *\n     * @return a hashcode based on the name\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enum/Enum.java",
        "class_name": "org.apache.commons.lang.enum.Enum",
        "signature": "Enum.compareTo(java.lang.Object)",
        "snippet": "    public int compareTo(Object other) {\n        if (other == this) {\n            return 0;\n        }\n        if (other.getClass() != this.getClass()) {\n            if (other.getClass().getName().equals(this.getClass().getName())) {\n                return iName.compareTo( getNameInOtherClassLoader(other) );\n            }\n        }\n        return iName.compareTo(((Enum) other).iName);\n    }",
        "begin_line": 584,
        "end_line": 594,
        "comment": "\n     * <p>Tests for order.</p>\n     *\n     * <p>The default ordering is alphabetic by name, but this\n     * can be overridden by subclasses.</p>\n     * \n     * <p>If the parameter is in a different class loader than this instance,\n     * reflection is used to compare the names.</p>\n     *\n     * @see java.lang.Comparable#compareTo(Object)\n     * @param other  the other object to compare to\n     * @return -ve if this is less than the other object, +ve if greater\n     *  than, <code>0</code> of equal\n     * @throws ClassCastException if other is not an Enum\n     * @throws NullPointerException if other is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enum/Enum.java",
        "class_name": "org.apache.commons.lang.enum.Enum",
        "signature": "Enum.getNameInOtherClassLoader(java.lang.Object)",
        "snippet": "    private String getNameInOtherClassLoader(Object other) {\n        try {\n            Method mth = other.getClass().getMethod(\"getName\", null);\n            String name = (String) mth.invoke(other, null);\n            return name;\n        } catch (NoSuchMethodException e) {\n            // ignore - should never happen\n        } catch (IllegalAccessException e) {\n            // ignore - should never happen\n        } catch (InvocationTargetException e) {\n            // ignore - should never happen\n        }\n        throw new IllegalStateException(\"This should not happen\");\n    }",
        "begin_line": 602,
        "end_line": 615,
        "comment": "\n     * <p>Use reflection to return an objects class name.</p>\n     *\n     * @param other The object to determine the class name for\n     * @return The class name\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enum/Enum.java",
        "class_name": "org.apache.commons.lang.enum.Enum",
        "signature": "Enum.toString()",
        "snippet": "    public String toString() {\n        if (iToString == null) {\n            String shortName = ClassUtils.getShortClassName(getEnumClass());\n            iToString = shortName + \"[\" + getName() + \"]\";\n        }\n        return iToString;\n    }",
        "begin_line": 624,
        "end_line": 630,
        "comment": "\n     * <p>Human readable description of this Enum item.</p>\n     * \n     * @return String in the form <code>type[name]</code>, for example:\n     * <code>Color[Red]</code>. Note that the package name is stripped from\n     * the type name.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enums/Enum.java",
        "class_name": "org.apache.commons.lang.enums.Enum",
        "signature": "org.apache.commons.lang.enums.Enum.Entry.Entry()",
        "snippet": "        protected Entry() {\n          super();\n        }",
        "begin_line": 347,
        "end_line": 349,
        "comment": "\n         * <p>Restrictive constructor.</p>\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enums/Enum.java",
        "class_name": "org.apache.commons.lang.enums.Enum",
        "signature": "org.apache.commons.lang.enums.Enum.Enum(java.lang.String)",
        "snippet": "    protected Enum(String name) {\n        super();\n        init(name);\n        iName = name;\n        iHashCode = 7 + getEnumClass().hashCode() + 3 * name.hashCode();\n        // cannot create toString here as subclasses may want to include other data\n    }",
        "begin_line": 362,
        "end_line": 368,
        "comment": "\n     * <p>Constructor to add a new named item to the enumeration.</p>\n     *\n     * @param name  the name of the enum object,\n     *  must not be empty or <code>null</code>\n     * @throws IllegalArgumentException if the name is <code>null</code>\n     *  or an empty string\n     * @throws IllegalArgumentException if the getEnumClass() method returns\n     *  a null or invalid Class\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enums/Enum.java",
        "class_name": "org.apache.commons.lang.enums.Enum",
        "signature": "org.apache.commons.lang.enums.Enum.init(java.lang.String)",
        "snippet": "    private void init(String name) {\n        if (StringUtils.isEmpty(name)) {\n            throw new IllegalArgumentException(\"The Enum name must not be empty or null\");\n        }\n        \n        Class enumClass = getEnumClass();\n        if (enumClass == null) {\n            throw new IllegalArgumentException(\"getEnumClass() must not be null\");\n        }\n        Class cls = getClass();\n        boolean ok = false;\n        while (cls != null && cls != Enum.class && cls != ValuedEnum.class) {\n            if (cls == enumClass) {\n                ok = true;\n                break;\n            }\n            cls = cls.getSuperclass();\n        }\n        if (ok == false) {\n            throw new IllegalArgumentException(\"getEnumClass() must return a superclass of this class\");\n        }\n        \n        // create entry\n        Entry entry = (Entry) cEnumClasses.get(enumClass);\n        if (entry == null) {\n            entry = createEntry(enumClass);\n            cEnumClasses.put(enumClass, entry);\n        }\n        if (entry.map.containsKey(name)) {\n            throw new IllegalArgumentException(\"The Enum name must be unique, '\" + name + \"' has already been added\");\n        }\n        entry.map.put(name, this);\n        entry.list.add(this);\n    }",
        "begin_line": 377,
        "end_line": 410,
        "comment": "\n     * Initializes the enumeration.\n     * \n     * @param name  the enum name\n     * @throws IllegalArgumentException if the name is null or empty or duplicate\n     * @throws IllegalArgumentException if the enumClass is null or invalid\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enums/Enum.java",
        "class_name": "org.apache.commons.lang.enums.Enum",
        "signature": "org.apache.commons.lang.enums.Enum.readResolve()",
        "snippet": "    protected Object readResolve() {\n        Entry entry = (Entry) cEnumClasses.get(getEnumClass());\n        if (entry == null) {\n            return null;\n        }\n        return entry.map.get(getName());\n    }",
        "begin_line": 418,
        "end_line": 424,
        "comment": "\n     * <p>Handle the deserialization of the class to ensure that multiple\n     * copies are not wastefully created, or illegal enum types created.</p>\n     *\n     * @return the resolved object\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enums/Enum.java",
        "class_name": "org.apache.commons.lang.enums.Enum",
        "signature": "org.apache.commons.lang.enums.Enum.getEnum(java.lang.Class, java.lang.String)",
        "snippet": "    protected static Enum getEnum(Class enumClass, String name) {\n        Entry entry = getEntry(enumClass);\n        if (entry == null) {\n            return null;\n        }\n        return (Enum) entry.map.get(name);\n    }",
        "begin_line": 439,
        "end_line": 445,
        "comment": "\n     * <p>Gets an <code>Enum</code> object by class and name.</p>\n     * \n     * @param enumClass  the class of the Enum to get, must not\n     *  be <code>null</code>\n     * @param name  the name of the <code>Enum</code> to get,\n     *  may be <code>null</code>\n     * @return the enum object, or <code>null</code> if the enum does not exist\n     * @throws IllegalArgumentException if the enum class\n     *  is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enums/Enum.java",
        "class_name": "org.apache.commons.lang.enums.Enum",
        "signature": "org.apache.commons.lang.enums.Enum.getEnumMap(java.lang.Class)",
        "snippet": "    protected static Map getEnumMap(Class enumClass) {\n        Entry entry = getEntry(enumClass);\n        if (entry == null) {\n            return EMPTY_MAP;\n        }\n        return entry.unmodifiableMap;\n    }",
        "begin_line": 460,
        "end_line": 466,
        "comment": "\n     * <p>Gets the <code>Map</code> of <code>Enum</code> objects by\n     * name using the <code>Enum</code> class.</p>\n     *\n     * <p>If the requested class has no enum objects an empty\n     * <code>Map</code> is returned.</p>\n     * \n     * @param enumClass  the class of the <code>Enum</code> to get,\n     *  must not be <code>null</code>\n     * @return the enum object Map\n     * @throws IllegalArgumentException if the enum class is <code>null</code>\n     * @throws IllegalArgumentException if the enum class is not a subclass of Enum\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enums/Enum.java",
        "class_name": "org.apache.commons.lang.enums.Enum",
        "signature": "org.apache.commons.lang.enums.Enum.getEnumList(java.lang.Class)",
        "snippet": "    protected static List getEnumList(Class enumClass) {\n        Entry entry = getEntry(enumClass);\n        if (entry == null) {\n            return Collections.EMPTY_LIST;\n        }\n        return entry.unmodifiableList;\n    }",
        "begin_line": 482,
        "end_line": 488,
        "comment": "\n     * <p>Gets the <code>List</code> of <code>Enum</code> objects using the\n     * <code>Enum</code> class.</p>\n     *\n     * <p>The list is in the order that the objects were created (source code order).\n     * If the requested class has no enum objects an empty <code>List</code> is\n     * returned.</p>\n     * \n     * @param enumClass  the class of the <code>Enum</code> to get,\n     *  must not be <code>null</code>\n     * @return the enum object Map\n     * @throws IllegalArgumentException if the enum class is <code>null</code>\n     * @throws IllegalArgumentException if the enum class is not a subclass of Enum\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enums/Enum.java",
        "class_name": "org.apache.commons.lang.enums.Enum",
        "signature": "org.apache.commons.lang.enums.Enum.iterator(java.lang.Class)",
        "snippet": "    protected static Iterator iterator(Class enumClass) {\n        return Enum.getEnumList(enumClass).iterator();\n    }",
        "begin_line": 504,
        "end_line": 506,
        "comment": "\n     * <p>Gets an <code>Iterator</code> over the <code>Enum</code> objects in\n     * an <code>Enum</code> class.</p>\n     *\n     * <p>The <code>Iterator</code> is in the order that the objects were\n     * created (source code order). If the requested class has no enum\n     * objects an empty <code>Iterator</code> is returned.</p>\n     * \n     * @param enumClass  the class of the <code>Enum</code> to get,\n     *  must not be <code>null</code>\n     * @return an iterator of the Enum objects\n     * @throws IllegalArgumentException if the enum class is <code>null</code>\n     * @throws IllegalArgumentException if the enum class is not a subclass of Enum\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enums/Enum.java",
        "class_name": "org.apache.commons.lang.enums.Enum",
        "signature": "org.apache.commons.lang.enums.Enum.getEntry(java.lang.Class)",
        "snippet": "    private static Entry getEntry(Class enumClass) {\n        if (enumClass == null) {\n            throw new IllegalArgumentException(\"The Enum Class must not be null\");\n        }\n        if (Enum.class.isAssignableFrom(enumClass) == false) {\n            throw new IllegalArgumentException(\"The Class must be a subclass of Enum\");\n        }\n        Entry entry = (Entry) cEnumClasses.get(enumClass);\n        return entry;\n    }",
        "begin_line": 515,
        "end_line": 524,
        "comment": "\n     * <p>Gets an <code>Entry</code> from the map of Enums.</p>\n     * \n     * @param enumClass  the class of the <code>Enum</code> to get\n     * @return the enum entry\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enums/Enum.java",
        "class_name": "org.apache.commons.lang.enums.Enum",
        "signature": "org.apache.commons.lang.enums.Enum.createEntry(java.lang.Class)",
        "snippet": "    private static Entry createEntry(Class enumClass) {\n        Entry entry = new Entry();\n        Class cls = enumClass.getSuperclass();\n        while (cls != null && cls != Enum.class && cls != ValuedEnum.class) {\n            Entry loopEntry = (Entry) cEnumClasses.get(cls);\n            if (loopEntry != null) {\n                entry.list.addAll(loopEntry.list);\n                entry.map.putAll(loopEntry.map);\n                break;  // stop here, as this will already have had superclasses added\n            }\n            cls = cls.getSuperclass();\n        }\n        return entry;\n    }",
        "begin_line": 534,
        "end_line": 547,
        "comment": "\n     * <p>Creates an <code>Entry</code> for storing the Enums.</p>\n     *\n     * <p>This accounts for subclassed Enums.</p>\n     * \n     * @param enumClass  the class of the <code>Enum</code> to get\n     * @return the enum entry\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enums/Enum.java",
        "class_name": "org.apache.commons.lang.enums.Enum",
        "signature": "org.apache.commons.lang.enums.Enum.getName()",
        "snippet": "    public final String getName() {\n        return iName;\n    }",
        "begin_line": 555,
        "end_line": 557,
        "comment": "\n     * <p>Retrieve the name of this Enum item, set in the constructor.</p>\n     * \n     * @return the <code>String</code> name of this Enum item\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enums/Enum.java",
        "class_name": "org.apache.commons.lang.enums.Enum",
        "signature": "org.apache.commons.lang.enums.Enum.getEnumClass()",
        "snippet": "    public Class getEnumClass() {\n        return getClass();\n    }",
        "begin_line": 569,
        "end_line": 571,
        "comment": "\n     * <p>Retrieves the Class of this Enum item, set in the constructor.</p>\n     * \n     * <p>This is normally the same as <code>getClass()</code>, but for\n     * advanced Enums may be different. If overridden, it must return a\n     * constant value.</p>\n     * \n     * @return the <code>Class</code> of the enum\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enums/Enum.java",
        "class_name": "org.apache.commons.lang.enums.Enum",
        "signature": "org.apache.commons.lang.enums.Enum.equals(java.lang.Object)",
        "snippet": "    public final boolean equals(Object other) {\n        if (other == this) {\n            return true;\n        } else if (other == null) {\n            return false;\n        } else if (other.getClass() == this.getClass()) {\n            // Ok to do a class cast to Enum here since the test above\n            // guarantee both\n            // classes are in the same class loader.\n            return iName.equals(((Enum) other).iName);\n        } else {\n            // This and other are in different class loaders, we must check indirectly\n            if (other.getClass().getName().equals(this.getClass().getName()) == false) {\n                return false;\n            }\n            return iName.equals( getNameInOtherClassLoader(other) );\n        }\n    }",
        "begin_line": 586,
        "end_line": 603,
        "comment": "\n     * <p>Tests for equality.</p>\n     *\n     * <p>Two Enum objects are considered equal\n     * if they have the same class names and the same names.\n     * Identity is tested for first, so this method usually runs fast.</p>\n     * \n     * <p>If the parameter is in a different class loader than this instance,\n     * reflection is used to compare the names.</p>\n     *\n     * @param other  the other object to compare for equality\n     * @return <code>true</code> if the Enums are equal\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enums/Enum.java",
        "class_name": "org.apache.commons.lang.enums.Enum",
        "signature": "org.apache.commons.lang.enums.Enum.hashCode()",
        "snippet": "    public final int hashCode() {\n        return iHashCode;\n    }",
        "begin_line": 610,
        "end_line": 612,
        "comment": "\n     * <p>Returns a suitable hashCode for the enumeration.</p>\n     *\n     * @return a hashcode based on the name\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enums/Enum.java",
        "class_name": "org.apache.commons.lang.enums.Enum",
        "signature": "org.apache.commons.lang.enums.Enum.compareTo(java.lang.Object)",
        "snippet": "    public int compareTo(Object other) {\n        if (other == this) {\n            return 0;\n        }\n        if (other.getClass() != this.getClass()) {\n            if (other.getClass().getName().equals(this.getClass().getName())) {\n                return iName.compareTo( getNameInOtherClassLoader(other) );\n            }\n            throw new ClassCastException(\n                    \"Different enum class '\" + ClassUtils.getShortClassName(other.getClass()) + \"'\");\n        }\n        return iName.compareTo(((Enum) other).iName);\n    }",
        "begin_line": 630,
        "end_line": 642,
        "comment": "\n     * <p>Tests for order.</p>\n     *\n     * <p>The default ordering is alphabetic by name, but this\n     * can be overridden by subclasses.</p>\n     * \n     * <p>If the parameter is in a different class loader than this instance,\n     * reflection is used to compare the names.</p>\n     *\n     * @see java.lang.Comparable#compareTo(Object)\n     * @param other  the other object to compare to\n     * @return -ve if this is less than the other object, +ve if greater\n     *  than, <code>0</code> of equal\n     * @throws ClassCastException if other is not an Enum\n     * @throws NullPointerException if other is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enums/Enum.java",
        "class_name": "org.apache.commons.lang.enums.Enum",
        "signature": "org.apache.commons.lang.enums.Enum.getNameInOtherClassLoader(java.lang.Object)",
        "snippet": "    private String getNameInOtherClassLoader(Object other) {\n        try {\n            Method mth = other.getClass().getMethod(\"getName\", null);\n            String name = (String) mth.invoke(other, null);\n            return name;\n        } catch (NoSuchMethodException e) {\n            // ignore - should never happen\n        } catch (IllegalAccessException e) {\n            // ignore - should never happen\n        } catch (InvocationTargetException e) {\n            // ignore - should never happen\n        }\n        throw new IllegalStateException(\"This should not happen\");\n    }",
        "begin_line": 650,
        "end_line": 663,
        "comment": "\n     * <p>Use reflection to return an objects class name.</p>\n     *\n     * @param other The object to determine the class name for\n     * @return The class name\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enums/Enum.java",
        "class_name": "org.apache.commons.lang.enums.Enum",
        "signature": "org.apache.commons.lang.enums.Enum.toString()",
        "snippet": "    public String toString() {\n        if (iToString == null) {\n            String shortName = ClassUtils.getShortClassName(getEnumClass());\n            iToString = shortName + \"[\" + getName() + \"]\";\n        }\n        return iToString;\n    }",
        "begin_line": 672,
        "end_line": 678,
        "comment": "\n     * <p>Human readable description of this Enum item.</p>\n     * \n     * @return String in the form <code>type[name]</code>, for example:\n     * <code>Color[Red]</code>. Note that the package name is stripped from\n     * the type name.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enum/ValuedEnum.java",
        "class_name": "org.apache.commons.lang.enum.ValuedEnum",
        "signature": "ValuedEnum.ValuedEnum(java.lang.String, int)",
        "snippet": "    protected ValuedEnum(String name, int value) {\n        super(name);\n        iValue = value;\n    }",
        "begin_line": 125,
        "end_line": 128,
        "comment": "\n     * Constructor for enum item.\n     *\n     * @param name  the name of enum item\n     * @param value  the value of enum item\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enum/ValuedEnum.java",
        "class_name": "org.apache.commons.lang.enum.ValuedEnum",
        "signature": "ValuedEnum.getEnum(java.lang.Class, int)",
        "snippet": "    protected static Enum getEnum(Class enumClass, int value) {\n        if (enumClass == null) {\n            throw new IllegalArgumentException(\"The Enum Class must not be null\");\n        }\n        List list = Enum.getEnumList(enumClass);\n        for (Iterator it = list.iterator(); it.hasNext();) {\n            ValuedEnum enumeration = (ValuedEnum) it.next();\n            if (enumeration.getValue() == value) {\n                return enumeration;\n            }\n        }\n        return null;\n    }",
        "begin_line": 142,
        "end_line": 154,
        "comment": "\n     * <p>Gets an <code>Enum</code> object by class and value.</p>\n     *\n     * <p>This method loops through the list of <code>Enum</code>,\n     * thus if there are many <code>Enum</code>s this will be\n     * slow.</p>\n     * \n     * @param enumClass  the class of the <code>Enum</code> to get\n     * @param value  the value of the <code>Enum</code> to get\n     * @return the enum object, or null if the enum does not exist\n     * @throws IllegalArgumentException if the enum class is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enum/ValuedEnum.java",
        "class_name": "org.apache.commons.lang.enum.ValuedEnum",
        "signature": "ValuedEnum.getValue()",
        "snippet": "    public final int getValue() {\n        return iValue;\n    }",
        "begin_line": 161,
        "end_line": 163,
        "comment": "\n     * <p>Get value of enum item.</p>\n     *\n     * @return the enum item's value.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enum/ValuedEnum.java",
        "class_name": "org.apache.commons.lang.enum.ValuedEnum",
        "signature": "ValuedEnum.compareTo(java.lang.Object)",
        "snippet": "    public int compareTo(Object other) {\n        return iValue - ((ValuedEnum) other).iValue;\n    }",
        "begin_line": 178,
        "end_line": 180,
        "comment": "\n     * <p>Tests for order.</p>\n     *\n     * <p>The default ordering is numeric by value, but this\n     * can be overridden by subclasses.</p>\n     * \n     * @see java.lang.Comparable#compareTo(Object)\n     * @param other  the other object to compare to\n     * @return -ve if this is less than the other object, +ve if greater than,\n     *  <code>0</code> of equal\n     * @throws ClassCastException if other is not an <code>Enum</code>\n     * @throws NullPointerException if other is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enum/ValuedEnum.java",
        "class_name": "org.apache.commons.lang.enum.ValuedEnum",
        "signature": "ValuedEnum.toString()",
        "snippet": "    public String toString() {\n        if (iToString == null) {\n            String shortName = ClassUtils.getShortClassName(getEnumClass());\n            iToString = shortName + \"[\" + getName() + \"=\" + getValue() + \"]\";\n        }\n        return iToString;\n    }",
        "begin_line": 189,
        "end_line": 195,
        "comment": "\n     * <p>Human readable description of this <code>Enum</code> item.</p>\n     *\n     * @return String in the form <code>type[name=value]</code>, for example:\n     *  <code>JavaVersion[Java 1.0=100]</code>. Note that the package name is\n     *  stripped from the type name.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enums/ValuedEnum.java",
        "class_name": "org.apache.commons.lang.enums.ValuedEnum",
        "signature": "org.apache.commons.lang.enums.ValuedEnum.ValuedEnum(java.lang.String, int)",
        "snippet": "    protected ValuedEnum(String name, int value) {\n        super(name);\n        iValue = value;\n    }",
        "begin_line": 130,
        "end_line": 133,
        "comment": "\n     * Constructor for enum item.\n     *\n     * @param name  the name of enum item\n     * @param value  the value of enum item\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enums/ValuedEnum.java",
        "class_name": "org.apache.commons.lang.enums.ValuedEnum",
        "signature": "org.apache.commons.lang.enums.ValuedEnum.getEnum(java.lang.Class, int)",
        "snippet": "    protected static Enum getEnum(Class enumClass, int value) {\n        if (enumClass == null) {\n            throw new IllegalArgumentException(\"The Enum Class must not be null\");\n        }\n        List list = Enum.getEnumList(enumClass);\n        for (Iterator it = list.iterator(); it.hasNext();) {\n            ValuedEnum enumeration = (ValuedEnum) it.next();\n            if (enumeration.getValue() == value) {\n                return enumeration;\n            }\n        }\n        return null;\n    }",
        "begin_line": 147,
        "end_line": 159,
        "comment": "\n     * <p>Gets an <code>Enum</code> object by class and value.</p>\n     *\n     * <p>This method loops through the list of <code>Enum</code>,\n     * thus if there are many <code>Enum</code>s this will be\n     * slow.</p>\n     * \n     * @param enumClass  the class of the <code>Enum</code> to get\n     * @param value  the value of the <code>Enum</code> to get\n     * @return the enum object, or null if the enum does not exist\n     * @throws IllegalArgumentException if the enum class is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enums/ValuedEnum.java",
        "class_name": "org.apache.commons.lang.enums.ValuedEnum",
        "signature": "org.apache.commons.lang.enums.ValuedEnum.getValue()",
        "snippet": "    public final int getValue() {\n        return iValue;\n    }",
        "begin_line": 166,
        "end_line": 168,
        "comment": "\n     * <p>Get value of enum item.</p>\n     *\n     * @return the enum item's value.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enums/ValuedEnum.java",
        "class_name": "org.apache.commons.lang.enums.ValuedEnum",
        "signature": "org.apache.commons.lang.enums.ValuedEnum.compareTo(java.lang.Object)",
        "snippet": "    public int compareTo(Object other) {\n        if (other == this) {\n            return 0;\n        }\n        if (other.getClass() != this.getClass()) {\n            if (other.getClass().getName().equals(this.getClass().getName())) {\n                return iValue - getValueInOtherClassLoader(other);\n            }\n            throw new ClassCastException(\n                    \"Different enum class '\" + ClassUtils.getShortClassName(other.getClass()) + \"'\");\n        }\n        return iValue - ((ValuedEnum) other).iValue;\n    }",
        "begin_line": 187,
        "end_line": 199,
        "comment": "\n     * <p>Tests for order.</p>\n     *\n     * <p>The default ordering is numeric by value, but this\n     * can be overridden by subclasses.</p>\n     *\n     * <p>NOTE: From v2.2 the enums must be of the same type.\n     * If the parameter is in a different class loader than this instance,\n     * reflection is used to compare the values.</p>\n     *\n     * @see java.lang.Comparable#compareTo(Object)\n     * @param other  the other object to compare to\n     * @return -ve if this is less than the other object, +ve if greater than,\n     *  <code>0</code> of equal\n     * @throws ClassCastException if other is not an <code>Enum</code>\n     * @throws NullPointerException if other is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enums/ValuedEnum.java",
        "class_name": "org.apache.commons.lang.enums.ValuedEnum",
        "signature": "org.apache.commons.lang.enums.ValuedEnum.getValueInOtherClassLoader(java.lang.Object)",
        "snippet": "    private int getValueInOtherClassLoader(Object other) {\n        try {\n            Method mth = other.getClass().getMethod(\"getValue\", null);\n            Integer value = (Integer) mth.invoke(other, null);\n            return value.intValue();\n        } catch (NoSuchMethodException e) {\n            // ignore - should never happen\n        } catch (IllegalAccessException e) {\n            // ignore - should never happen\n        } catch (InvocationTargetException e) {\n            // ignore - should never happen\n        }\n        throw new IllegalStateException(\"This should not happen\");\n    }",
        "begin_line": 207,
        "end_line": 220,
        "comment": "\n     * <p>Use reflection to return an objects value.</p>\n     *\n     * @param other  the object to determine the value for\n     * @return the value\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/enums/ValuedEnum.java",
        "class_name": "org.apache.commons.lang.enums.ValuedEnum",
        "signature": "org.apache.commons.lang.enums.ValuedEnum.toString()",
        "snippet": "    public String toString() {\n        if (iToString == null) {\n            String shortName = ClassUtils.getShortClassName(getEnumClass());\n            iToString = shortName + \"[\" + getName() + \"=\" + getValue() + \"]\";\n        }\n        return iToString;\n    }",
        "begin_line": 229,
        "end_line": 235,
        "comment": "\n     * <p>Human readable description of this <code>Enum</code> item.</p>\n     *\n     * @return String in the form <code>type[name=value]</code>, for example:\n     *  <code>JavaVersion[Java 1.0=100]</code>. Note that the package name is\n     *  stripped from the type name.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableException.java",
        "class_name": "org.apache.commons.lang.exception.NestableException",
        "signature": "org.apache.commons.lang.exception.NestableException.NestableException()",
        "snippet": "    public NestableException() {\n        super();\n    }",
        "begin_line": 115,
        "end_line": 117,
        "comment": "\n     * Constructs a new <code>NestableException</code> without specified\n     * detail message.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableException.java",
        "class_name": "org.apache.commons.lang.exception.NestableException",
        "signature": "org.apache.commons.lang.exception.NestableException.NestableException(java.lang.String)",
        "snippet": "    public NestableException(String msg) {\n        super(msg);\n    }",
        "begin_line": 125,
        "end_line": 127,
        "comment": "\n     * Constructs a new <code>NestableException</code> with specified\n     * detail message.\n     *\n     * @param msg The error message.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableException.java",
        "class_name": "org.apache.commons.lang.exception.NestableException",
        "signature": "org.apache.commons.lang.exception.NestableException.NestableException(java.lang.Throwable)",
        "snippet": "    public NestableException(Throwable cause) {\n        super();\n        this.cause = cause;\n    }",
        "begin_line": 136,
        "end_line": 139,
        "comment": "\n     * Constructs a new <code>NestableException</code> with specified\n     * nested <code>Throwable</code>.\n     *\n     * @param cause the exception or error that caused this exception to be\n     * thrown\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableException.java",
        "class_name": "org.apache.commons.lang.exception.NestableException",
        "signature": "org.apache.commons.lang.exception.NestableException.NestableException(java.lang.String, java.lang.Throwable)",
        "snippet": "    public NestableException(String msg, Throwable cause) {\n        super(msg);\n        this.cause = cause;\n    }",
        "begin_line": 149,
        "end_line": 152,
        "comment": "\n     * Constructs a new <code>NestableException</code> with specified\n     * detail message and nested <code>Throwable</code>.\n     *\n     * @param msg    the error message\n     * @param cause  the exception or error that caused this exception to be\n     * thrown\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableException.java",
        "class_name": "org.apache.commons.lang.exception.NestableException",
        "signature": "org.apache.commons.lang.exception.NestableException.getCause()",
        "snippet": "    public Throwable getCause() {\n        return cause;\n    }",
        "begin_line": 157,
        "end_line": 159,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "org.apache.commons.lang.exception.Nestable": "\n     * Returns the reference to the exception or error that caused the\n     * exception implementing the <code>Nestable</code> to be thrown.\n     *\n     * @return throwable that caused the original exception\n     ",
            "java.lang.Exception": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableException.java",
        "class_name": "org.apache.commons.lang.exception.NestableException",
        "signature": "org.apache.commons.lang.exception.NestableException.getMessage()",
        "snippet": "    public String getMessage() {\n        if (super.getMessage() != null) {\n            return super.getMessage();\n        } else if (cause != null) {\n            return cause.toString();\n        } else {\n            return null;\n        }\n    }",
        "begin_line": 168,
        "end_line": 176,
        "comment": "\n     * Returns the detail message string of this throwable. If it was\n     * created with a null message, returns the following:\n     * (cause==null ? null : cause.toString()).\n     *\n     * @return String message string of the throwable\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableException.java",
        "class_name": "org.apache.commons.lang.exception.NestableException",
        "signature": "org.apache.commons.lang.exception.NestableException.getMessage(int)",
        "snippet": "    public String getMessage(int index) {\n        if (index == 0) {\n            return super.getMessage();\n        } else {\n            return delegate.getMessage(index);\n        }\n    }",
        "begin_line": 181,
        "end_line": 187,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "org.apache.commons.lang.exception.Nestable": "\n     * Returns the error message of the <code>Throwable</code> in the chain\n     * of <code>Throwable</code>s at the specified index, numbered from 0.\n     *\n     * @param index the index of the <code>Throwable</code> in the chain of\n     * <code>Throwable</code>s\n     * @return the error message, or null if the <code>Throwable</code> at the\n     * specified index in the chain does not contain a message\n     * @throws IndexOutOfBoundsException if the <code>index</code> argument is\n     * negative or not less than the count of <code>Throwable</code>s in the\n     * chain\n     ",
            "java.lang.Exception": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableException.java",
        "class_name": "org.apache.commons.lang.exception.NestableException",
        "signature": "org.apache.commons.lang.exception.NestableException.getMessages()",
        "snippet": "    public String[] getMessages() {\n        return delegate.getMessages();\n    }",
        "begin_line": 192,
        "end_line": 194,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "org.apache.commons.lang.exception.Nestable": "\n     * Returns the error message of this and any nested <code>Throwable</code>s\n     * in an array of Strings, one element for each message. Any\n     * <code>Throwable</code> not containing a message is represented in the\n     * array by a null. This has the effect of cause the length of the returned\n     * array to be equal to the result of the {@link #getThrowableCount()}\n     * operation.\n     *\n     * @return the error messages\n     ",
            "java.lang.Exception": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableException.java",
        "class_name": "org.apache.commons.lang.exception.NestableException",
        "signature": "org.apache.commons.lang.exception.NestableException.getThrowable(int)",
        "snippet": "    public Throwable getThrowable(int index) {\n        return delegate.getThrowable(index);\n    }",
        "begin_line": 199,
        "end_line": 201,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "org.apache.commons.lang.exception.Nestable": "\n     * Returns the <code>Throwable</code> in the chain of\n     * <code>Throwable</code>s at the specified index, numbered from 0.\n     *\n     * @param index the index, numbered from 0, of the <code>Throwable</code> in\n     * the chain of <code>Throwable</code>s\n     * @return the <code>Throwable</code>\n     * @throws IndexOutOfBoundsException if the <code>index</code> argument is\n     * negative or not less than the count of <code>Throwable</code>s in the\n     * chain\n     ",
            "java.lang.Exception": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableException.java",
        "class_name": "org.apache.commons.lang.exception.NestableException",
        "signature": "org.apache.commons.lang.exception.NestableException.getThrowableCount()",
        "snippet": "    public int getThrowableCount() {\n        return delegate.getThrowableCount();\n    }",
        "begin_line": 206,
        "end_line": 208,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "org.apache.commons.lang.exception.Nestable": "\n     * Returns the number of nested <code>Throwable</code>s represented by\n     * this <code>Nestable</code>, including this <code>Nestable</code>.\n     *\n     * @return the throwable count\n     ",
            "java.lang.Exception": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableException.java",
        "class_name": "org.apache.commons.lang.exception.NestableException",
        "signature": "org.apache.commons.lang.exception.NestableException.getThrowables()",
        "snippet": "    public Throwable[] getThrowables() {\n        return delegate.getThrowables();\n    }",
        "begin_line": 213,
        "end_line": 215,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "org.apache.commons.lang.exception.Nestable": "\n     * Returns this <code>Nestable</code> and any nested <code>Throwable</code>s\n     * in an array of <code>Throwable</code>s, one element for each\n     * <code>Throwable</code>.\n     *\n     * @return the <code>Throwable</code>s\n     ",
            "java.lang.Exception": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableException.java",
        "class_name": "org.apache.commons.lang.exception.NestableException",
        "signature": "org.apache.commons.lang.exception.NestableException.indexOfThrowable(java.lang.Class)",
        "snippet": "    public int indexOfThrowable(Class type) {\n        return delegate.indexOfThrowable(type, 0);\n    }",
        "begin_line": 220,
        "end_line": 222,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "org.apache.commons.lang.exception.Nestable": "\n     * Returns the index, numbered from 0, of the first occurrence of the\n     * specified type, or a subclass, in the chain of <code>Throwable</code>s.\n     * The method returns -1 if the specified type is not found in the chain.\n     * <p>\n     * NOTE: From v2.1, we have clarified the <code>Nestable</code> interface\n     * such that this method matches subclasses.\n     * If you want to NOT match subclasses, please use\n     * {@link ExceptionUtils#indexOfThrowable(Throwable, Class)}\n     * (which is avaiable in all versions of lang).\n     *\n     * @param type  the type to find, subclasses match, null returns -1\n     * @return index of the first occurrence of the type in the chain, or -1 if\n     * the type is not found\n     ",
            "java.lang.Exception": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableException.java",
        "class_name": "org.apache.commons.lang.exception.NestableException",
        "signature": "org.apache.commons.lang.exception.NestableException.indexOfThrowable(java.lang.Class, int)",
        "snippet": "    public int indexOfThrowable(Class type, int fromIndex) {\n        return delegate.indexOfThrowable(type, fromIndex);\n    }",
        "begin_line": 227,
        "end_line": 229,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "org.apache.commons.lang.exception.Nestable": "\n     * Returns the index, numbered from 0, of the first <code>Throwable</code>\n     * that matches the specified type, or a subclass, in the chain of <code>Throwable</code>s\n     * with an index greater than or equal to the specified index.\n     * The method returns -1 if the specified type is not found in the chain.\n     * <p>\n     * NOTE: From v2.1, we have clarified the <code>Nestable</code> interface\n     * such that this method matches subclasses.\n     * If you want to NOT match subclasses, please use\n     * {@link ExceptionUtils#indexOfThrowable(Throwable, Class, int)}\n     * (which is avaiable in all versions of lang).\n     *\n     * @param type  the type to find, subclasses match, null returns -1\n     * @param fromIndex the index, numbered from 0, of the starting position in\n     * the chain to be searched\n     * @return index of the first occurrence of the type in the chain, or -1 if\n     * the type is not found\n     * @throws IndexOutOfBoundsException if the <code>fromIndex</code> argument\n     * is negative or not less than the count of <code>Throwable</code>s in the\n     * chain\n     ",
            "java.lang.Exception": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableException.java",
        "class_name": "org.apache.commons.lang.exception.NestableException",
        "signature": "org.apache.commons.lang.exception.NestableException.printStackTrace()",
        "snippet": "    public void printStackTrace() {\n        delegate.printStackTrace();\n    }",
        "begin_line": 234,
        "end_line": 236,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "org.apache.commons.lang.exception.Nestable": null,
            "java.lang.Exception": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableException.java",
        "class_name": "org.apache.commons.lang.exception.NestableException",
        "signature": "org.apache.commons.lang.exception.NestableException.printStackTrace(java.io.PrintStream)",
        "snippet": "    public void printStackTrace(PrintStream out) {\n        delegate.printStackTrace(out);\n    }",
        "begin_line": 241,
        "end_line": 243,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "org.apache.commons.lang.exception.Nestable": "\n     * Prints the stack trace of this exception to the specified print\n     * stream.  Includes information from the exception, if any,\n     * which caused this exception.\n     *\n     * @param out <code>PrintStream</code> to use for output.\n     ",
            "java.lang.Exception": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableException.java",
        "class_name": "org.apache.commons.lang.exception.NestableException",
        "signature": "org.apache.commons.lang.exception.NestableException.printStackTrace(java.io.PrintWriter)",
        "snippet": "    public void printStackTrace(PrintWriter out) {\n        delegate.printStackTrace(out);\n    }",
        "begin_line": 248,
        "end_line": 250,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "org.apache.commons.lang.exception.Nestable": "\n     * Prints the stack trace of this exception to the specified print\n     * writer.  Includes information from the exception, if any,\n     * which caused this exception.\n     *\n     * @param out <code>PrintWriter</code> to use for output.\n     ",
            "java.lang.Exception": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableException.java",
        "class_name": "org.apache.commons.lang.exception.NestableException",
        "signature": "org.apache.commons.lang.exception.NestableException.printPartialStackTrace(java.io.PrintWriter)",
        "snippet": "    public final void printPartialStackTrace(PrintWriter out) {\n        super.printStackTrace(out);\n    }",
        "begin_line": 255,
        "end_line": 257,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "org.apache.commons.lang.exception.Nestable": "\n     * Prints the stack trace of this exception to the specified print\n     * writer.  Includes information from the exception, if any,\n     * which caused this exception.\n     *\n     * @param out <code>PrintWriter</code> to use for output.\n     ",
            "java.lang.Exception": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableError.java",
        "class_name": "org.apache.commons.lang.exception.NestableError",
        "signature": "org.apache.commons.lang.exception.NestableError.NestableError()",
        "snippet": "    public NestableError() {\n        super();\n    }",
        "begin_line": 55,
        "end_line": 57,
        "comment": "\n     * Constructs a new <code>NestableError</code> without specified\n     * detail message.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableError.java",
        "class_name": "org.apache.commons.lang.exception.NestableError",
        "signature": "org.apache.commons.lang.exception.NestableError.NestableError(java.lang.String)",
        "snippet": "    public NestableError(String msg) {\n        super(msg);\n    }",
        "begin_line": 65,
        "end_line": 67,
        "comment": "\n     * Constructs a new <code>NestableError</code> with specified\n     * detail message.\n     *\n     * @param msg The error message.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableError.java",
        "class_name": "org.apache.commons.lang.exception.NestableError",
        "signature": "org.apache.commons.lang.exception.NestableError.NestableError(java.lang.Throwable)",
        "snippet": "    public NestableError(Throwable cause) {\n        super();\n        this.cause = cause;\n    }",
        "begin_line": 76,
        "end_line": 79,
        "comment": "\n     * Constructs a new <code>NestableError</code> with specified\n     * nested <code>Throwable</code>.\n     *\n     * @param cause the exception or error that caused this exception to be\n     * thrown\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableError.java",
        "class_name": "org.apache.commons.lang.exception.NestableError",
        "signature": "org.apache.commons.lang.exception.NestableError.NestableError(java.lang.String, java.lang.Throwable)",
        "snippet": "    public NestableError(String msg, Throwable cause) {\n        super(msg);\n        this.cause = cause;\n    }",
        "begin_line": 89,
        "end_line": 92,
        "comment": "\n     * Constructs a new <code>NestableError</code> with specified\n     * detail message and nested <code>Throwable</code>.\n     *\n     * @param msg    the error message\n     * @param cause  the exception or error that caused this exception to be\n     * thrown\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableError.java",
        "class_name": "org.apache.commons.lang.exception.NestableError",
        "signature": "org.apache.commons.lang.exception.NestableError.getCause()",
        "snippet": "    public Throwable getCause() {\n        return cause;\n    }",
        "begin_line": 97,
        "end_line": 99,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "java.lang.Error": null,
            "org.apache.commons.lang.exception.Nestable": "\n     * Returns the reference to the exception or error that caused the\n     * exception implementing the <code>Nestable</code> to be thrown.\n     *\n     * @return throwable that caused the original exception\n     "
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableError.java",
        "class_name": "org.apache.commons.lang.exception.NestableError",
        "signature": "org.apache.commons.lang.exception.NestableError.getMessage()",
        "snippet": "    public String getMessage() {\n        if (super.getMessage() != null) {\n            return super.getMessage();\n        } else if (cause != null) {\n            return cause.toString();\n        } else {\n            return null;\n        }\n    }",
        "begin_line": 108,
        "end_line": 116,
        "comment": "\n     * Returns the detail message string of this throwable. If it was\n     * created with a null message, returns the following:\n     * (cause==null ? null : cause.toString()).\n     *\n     * @return String message string of the throwable\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableError.java",
        "class_name": "org.apache.commons.lang.exception.NestableError",
        "signature": "org.apache.commons.lang.exception.NestableError.getMessage(int)",
        "snippet": "    public String getMessage(int index) {\n        if (index == 0) {\n            return super.getMessage();\n        } else {\n            return delegate.getMessage(index);\n        }\n    }",
        "begin_line": 121,
        "end_line": 127,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "java.lang.Error": null,
            "org.apache.commons.lang.exception.Nestable": "\n     * Returns the error message of the <code>Throwable</code> in the chain\n     * of <code>Throwable</code>s at the specified index, numbered from 0.\n     *\n     * @param index the index of the <code>Throwable</code> in the chain of\n     * <code>Throwable</code>s\n     * @return the error message, or null if the <code>Throwable</code> at the\n     * specified index in the chain does not contain a message\n     * @throws IndexOutOfBoundsException if the <code>index</code> argument is\n     * negative or not less than the count of <code>Throwable</code>s in the\n     * chain\n     "
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableError.java",
        "class_name": "org.apache.commons.lang.exception.NestableError",
        "signature": "org.apache.commons.lang.exception.NestableError.getMessages()",
        "snippet": "    public String[] getMessages() {\n        return delegate.getMessages();\n    }",
        "begin_line": 132,
        "end_line": 134,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "java.lang.Error": null,
            "org.apache.commons.lang.exception.Nestable": "\n     * Returns the error message of this and any nested <code>Throwable</code>s\n     * in an array of Strings, one element for each message. Any\n     * <code>Throwable</code> not containing a message is represented in the\n     * array by a null. This has the effect of cause the length of the returned\n     * array to be equal to the result of the {@link #getThrowableCount()}\n     * operation.\n     *\n     * @return the error messages\n     "
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableError.java",
        "class_name": "org.apache.commons.lang.exception.NestableError",
        "signature": "org.apache.commons.lang.exception.NestableError.getThrowable(int)",
        "snippet": "    public Throwable getThrowable(int index) {\n        return delegate.getThrowable(index);\n    }",
        "begin_line": 139,
        "end_line": 141,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "java.lang.Error": null,
            "org.apache.commons.lang.exception.Nestable": "\n     * Returns the <code>Throwable</code> in the chain of\n     * <code>Throwable</code>s at the specified index, numbered from 0.\n     *\n     * @param index the index, numbered from 0, of the <code>Throwable</code> in\n     * the chain of <code>Throwable</code>s\n     * @return the <code>Throwable</code>\n     * @throws IndexOutOfBoundsException if the <code>index</code> argument is\n     * negative or not less than the count of <code>Throwable</code>s in the\n     * chain\n     "
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableError.java",
        "class_name": "org.apache.commons.lang.exception.NestableError",
        "signature": "org.apache.commons.lang.exception.NestableError.getThrowableCount()",
        "snippet": "    public int getThrowableCount() {\n        return delegate.getThrowableCount();\n    }",
        "begin_line": 146,
        "end_line": 148,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "java.lang.Error": null,
            "org.apache.commons.lang.exception.Nestable": "\n     * Returns the number of nested <code>Throwable</code>s represented by\n     * this <code>Nestable</code>, including this <code>Nestable</code>.\n     *\n     * @return the throwable count\n     "
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableError.java",
        "class_name": "org.apache.commons.lang.exception.NestableError",
        "signature": "org.apache.commons.lang.exception.NestableError.getThrowables()",
        "snippet": "    public Throwable[] getThrowables() {\n        return delegate.getThrowables();\n    }",
        "begin_line": 153,
        "end_line": 155,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "java.lang.Error": null,
            "org.apache.commons.lang.exception.Nestable": "\n     * Returns this <code>Nestable</code> and any nested <code>Throwable</code>s\n     * in an array of <code>Throwable</code>s, one element for each\n     * <code>Throwable</code>.\n     *\n     * @return the <code>Throwable</code>s\n     "
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableError.java",
        "class_name": "org.apache.commons.lang.exception.NestableError",
        "signature": "org.apache.commons.lang.exception.NestableError.indexOfThrowable(java.lang.Class)",
        "snippet": "    public int indexOfThrowable(Class type) {\n        return delegate.indexOfThrowable(type, 0);\n    }",
        "begin_line": 160,
        "end_line": 162,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "java.lang.Error": null,
            "org.apache.commons.lang.exception.Nestable": "\n     * Returns the index, numbered from 0, of the first occurrence of the\n     * specified type, or a subclass, in the chain of <code>Throwable</code>s.\n     * The method returns -1 if the specified type is not found in the chain.\n     * <p>\n     * NOTE: From v2.1, we have clarified the <code>Nestable</code> interface\n     * such that this method matches subclasses.\n     * If you want to NOT match subclasses, please use\n     * {@link ExceptionUtils#indexOfThrowable(Throwable, Class)}\n     * (which is avaiable in all versions of lang).\n     *\n     * @param type  the type to find, subclasses match, null returns -1\n     * @return index of the first occurrence of the type in the chain, or -1 if\n     * the type is not found\n     "
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableError.java",
        "class_name": "org.apache.commons.lang.exception.NestableError",
        "signature": "org.apache.commons.lang.exception.NestableError.indexOfThrowable(java.lang.Class, int)",
        "snippet": "    public int indexOfThrowable(Class type, int fromIndex) {\n        return delegate.indexOfThrowable(type, fromIndex);\n    }",
        "begin_line": 167,
        "end_line": 169,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "java.lang.Error": null,
            "org.apache.commons.lang.exception.Nestable": "\n     * Returns the index, numbered from 0, of the first <code>Throwable</code>\n     * that matches the specified type, or a subclass, in the chain of <code>Throwable</code>s\n     * with an index greater than or equal to the specified index.\n     * The method returns -1 if the specified type is not found in the chain.\n     * <p>\n     * NOTE: From v2.1, we have clarified the <code>Nestable</code> interface\n     * such that this method matches subclasses.\n     * If you want to NOT match subclasses, please use\n     * {@link ExceptionUtils#indexOfThrowable(Throwable, Class, int)}\n     * (which is avaiable in all versions of lang).\n     *\n     * @param type  the type to find, subclasses match, null returns -1\n     * @param fromIndex the index, numbered from 0, of the starting position in\n     * the chain to be searched\n     * @return index of the first occurrence of the type in the chain, or -1 if\n     * the type is not found\n     * @throws IndexOutOfBoundsException if the <code>fromIndex</code> argument\n     * is negative or not less than the count of <code>Throwable</code>s in the\n     * chain\n     "
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableError.java",
        "class_name": "org.apache.commons.lang.exception.NestableError",
        "signature": "org.apache.commons.lang.exception.NestableError.printStackTrace()",
        "snippet": "    public void printStackTrace() {\n        delegate.printStackTrace();\n    }",
        "begin_line": 174,
        "end_line": 176,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "java.lang.Error": null,
            "org.apache.commons.lang.exception.Nestable": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableError.java",
        "class_name": "org.apache.commons.lang.exception.NestableError",
        "signature": "org.apache.commons.lang.exception.NestableError.printStackTrace(java.io.PrintStream)",
        "snippet": "    public void printStackTrace(PrintStream out) {\n        delegate.printStackTrace(out);\n    }",
        "begin_line": 181,
        "end_line": 183,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "java.lang.Error": null,
            "org.apache.commons.lang.exception.Nestable": "\n     * Prints the stack trace of this exception to the specified print\n     * stream.  Includes information from the exception, if any,\n     * which caused this exception.\n     *\n     * @param out <code>PrintStream</code> to use for output.\n     "
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableError.java",
        "class_name": "org.apache.commons.lang.exception.NestableError",
        "signature": "org.apache.commons.lang.exception.NestableError.printStackTrace(java.io.PrintWriter)",
        "snippet": "    public void printStackTrace(PrintWriter out) {\n        delegate.printStackTrace(out);\n    }",
        "begin_line": 188,
        "end_line": 190,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "java.lang.Error": null,
            "org.apache.commons.lang.exception.Nestable": "\n     * Prints the stack trace of this exception to the specified print\n     * writer.  Includes information from the exception, if any,\n     * which caused this exception.\n     *\n     * @param out <code>PrintWriter</code> to use for output.\n     "
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableError.java",
        "class_name": "org.apache.commons.lang.exception.NestableError",
        "signature": "org.apache.commons.lang.exception.NestableError.printPartialStackTrace(java.io.PrintWriter)",
        "snippet": "    public final void printPartialStackTrace(PrintWriter out) {\n        super.printStackTrace(out);\n    }",
        "begin_line": 195,
        "end_line": 197,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "java.lang.Error": null,
            "org.apache.commons.lang.exception.Nestable": "\n     * Prints the stack trace of this exception to the specified print\n     * writer.  Includes information from the exception, if any,\n     * which caused this exception.\n     *\n     * @param out <code>PrintWriter</code> to use for output.\n     "
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableRuntimeException.java",
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeException",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeException.NestableRuntimeException()",
        "snippet": "    public NestableRuntimeException() {\n        super();\n    }",
        "begin_line": 59,
        "end_line": 61,
        "comment": "\n     * Constructs a new <code>NestableRuntimeException</code> without specified\n     * detail message.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableRuntimeException.java",
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeException",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeException.NestableRuntimeException(java.lang.String)",
        "snippet": "    public NestableRuntimeException(String msg) {\n        super(msg);\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Constructs a new <code>NestableRuntimeException</code> with specified\n     * detail message.\n     *\n     * @param msg the error message\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableRuntimeException.java",
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeException",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeException.NestableRuntimeException(java.lang.Throwable)",
        "snippet": "    public NestableRuntimeException(Throwable cause) {\n        super();\n        this.cause = cause;\n    }",
        "begin_line": 80,
        "end_line": 83,
        "comment": "\n     * Constructs a new <code>NestableRuntimeException</code> with specified\n     * nested <code>Throwable</code>.\n     *\n     * @param cause the exception or error that caused this exception to be\n     * thrown\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableRuntimeException.java",
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeException",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeException.NestableRuntimeException(java.lang.String, java.lang.Throwable)",
        "snippet": "    public NestableRuntimeException(String msg, Throwable cause) {\n        super(msg);\n        this.cause = cause;\n    }",
        "begin_line": 93,
        "end_line": 96,
        "comment": "\n     * Constructs a new <code>NestableRuntimeException</code> with specified\n     * detail message and nested <code>Throwable</code>.\n     *\n     * @param msg    the error message\n     * @param cause  the exception or error that caused this exception to be\n     * thrown\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableRuntimeException.java",
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeException",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeException.getCause()",
        "snippet": "    public Throwable getCause() {\n        return cause;\n    }",
        "begin_line": 101,
        "end_line": 103,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "java.lang.RuntimeException": null,
            "org.apache.commons.lang.exception.Nestable": "\n     * Returns the reference to the exception or error that caused the\n     * exception implementing the <code>Nestable</code> to be thrown.\n     *\n     * @return throwable that caused the original exception\n     "
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableRuntimeException.java",
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeException",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeException.getMessage()",
        "snippet": "    public String getMessage() {\n        if (super.getMessage() != null) {\n            return super.getMessage();\n        } else if (cause != null) {\n            return cause.toString();\n        } else {\n            return null;\n        }\n    }",
        "begin_line": 112,
        "end_line": 120,
        "comment": "\n     * Returns the detail message string of this throwable. If it was\n     * created with a null message, returns the following:\n     * (cause==null ? null : cause.toString()).\n     *\n     * @return String message string of the throwable\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableRuntimeException.java",
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeException",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeException.getMessage(int)",
        "snippet": "    public String getMessage(int index) {\n        if (index == 0) {\n            return super.getMessage();\n        } else {\n            return delegate.getMessage(index);\n        }\n    }",
        "begin_line": 125,
        "end_line": 131,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "java.lang.RuntimeException": null,
            "org.apache.commons.lang.exception.Nestable": "\n     * Returns the error message of the <code>Throwable</code> in the chain\n     * of <code>Throwable</code>s at the specified index, numbered from 0.\n     *\n     * @param index the index of the <code>Throwable</code> in the chain of\n     * <code>Throwable</code>s\n     * @return the error message, or null if the <code>Throwable</code> at the\n     * specified index in the chain does not contain a message\n     * @throws IndexOutOfBoundsException if the <code>index</code> argument is\n     * negative or not less than the count of <code>Throwable</code>s in the\n     * chain\n     "
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableRuntimeException.java",
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeException",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeException.getMessages()",
        "snippet": "    public String[] getMessages() {\n        return delegate.getMessages();\n    }",
        "begin_line": 136,
        "end_line": 138,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "java.lang.RuntimeException": null,
            "org.apache.commons.lang.exception.Nestable": "\n     * Returns the error message of this and any nested <code>Throwable</code>s\n     * in an array of Strings, one element for each message. Any\n     * <code>Throwable</code> not containing a message is represented in the\n     * array by a null. This has the effect of cause the length of the returned\n     * array to be equal to the result of the {@link #getThrowableCount()}\n     * operation.\n     *\n     * @return the error messages\n     "
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableRuntimeException.java",
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeException",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeException.getThrowable(int)",
        "snippet": "    public Throwable getThrowable(int index) {\n        return delegate.getThrowable(index);\n    }",
        "begin_line": 143,
        "end_line": 145,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "java.lang.RuntimeException": null,
            "org.apache.commons.lang.exception.Nestable": "\n     * Returns the <code>Throwable</code> in the chain of\n     * <code>Throwable</code>s at the specified index, numbered from 0.\n     *\n     * @param index the index, numbered from 0, of the <code>Throwable</code> in\n     * the chain of <code>Throwable</code>s\n     * @return the <code>Throwable</code>\n     * @throws IndexOutOfBoundsException if the <code>index</code> argument is\n     * negative or not less than the count of <code>Throwable</code>s in the\n     * chain\n     "
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableRuntimeException.java",
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeException",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeException.getThrowableCount()",
        "snippet": "    public int getThrowableCount() {\n        return delegate.getThrowableCount();\n    }",
        "begin_line": 150,
        "end_line": 152,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "java.lang.RuntimeException": null,
            "org.apache.commons.lang.exception.Nestable": "\n     * Returns the number of nested <code>Throwable</code>s represented by\n     * this <code>Nestable</code>, including this <code>Nestable</code>.\n     *\n     * @return the throwable count\n     "
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableRuntimeException.java",
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeException",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeException.getThrowables()",
        "snippet": "    public Throwable[] getThrowables() {\n        return delegate.getThrowables();\n    }",
        "begin_line": 157,
        "end_line": 159,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "java.lang.RuntimeException": null,
            "org.apache.commons.lang.exception.Nestable": "\n     * Returns this <code>Nestable</code> and any nested <code>Throwable</code>s\n     * in an array of <code>Throwable</code>s, one element for each\n     * <code>Throwable</code>.\n     *\n     * @return the <code>Throwable</code>s\n     "
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableRuntimeException.java",
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeException",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeException.indexOfThrowable(java.lang.Class)",
        "snippet": "    public int indexOfThrowable(Class type) {\n        return delegate.indexOfThrowable(type, 0);\n    }",
        "begin_line": 164,
        "end_line": 166,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "java.lang.RuntimeException": null,
            "org.apache.commons.lang.exception.Nestable": "\n     * Returns the index, numbered from 0, of the first occurrence of the\n     * specified type, or a subclass, in the chain of <code>Throwable</code>s.\n     * The method returns -1 if the specified type is not found in the chain.\n     * <p>\n     * NOTE: From v2.1, we have clarified the <code>Nestable</code> interface\n     * such that this method matches subclasses.\n     * If you want to NOT match subclasses, please use\n     * {@link ExceptionUtils#indexOfThrowable(Throwable, Class)}\n     * (which is avaiable in all versions of lang).\n     *\n     * @param type  the type to find, subclasses match, null returns -1\n     * @return index of the first occurrence of the type in the chain, or -1 if\n     * the type is not found\n     "
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableRuntimeException.java",
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeException",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeException.indexOfThrowable(java.lang.Class, int)",
        "snippet": "    public int indexOfThrowable(Class type, int fromIndex) {\n        return delegate.indexOfThrowable(type, fromIndex);\n    }",
        "begin_line": 171,
        "end_line": 173,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "java.lang.RuntimeException": null,
            "org.apache.commons.lang.exception.Nestable": "\n     * Returns the index, numbered from 0, of the first <code>Throwable</code>\n     * that matches the specified type, or a subclass, in the chain of <code>Throwable</code>s\n     * with an index greater than or equal to the specified index.\n     * The method returns -1 if the specified type is not found in the chain.\n     * <p>\n     * NOTE: From v2.1, we have clarified the <code>Nestable</code> interface\n     * such that this method matches subclasses.\n     * If you want to NOT match subclasses, please use\n     * {@link ExceptionUtils#indexOfThrowable(Throwable, Class, int)}\n     * (which is avaiable in all versions of lang).\n     *\n     * @param type  the type to find, subclasses match, null returns -1\n     * @param fromIndex the index, numbered from 0, of the starting position in\n     * the chain to be searched\n     * @return index of the first occurrence of the type in the chain, or -1 if\n     * the type is not found\n     * @throws IndexOutOfBoundsException if the <code>fromIndex</code> argument\n     * is negative or not less than the count of <code>Throwable</code>s in the\n     * chain\n     "
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableRuntimeException.java",
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeException",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeException.printStackTrace()",
        "snippet": "    public void printStackTrace() {\n        delegate.printStackTrace();\n    }",
        "begin_line": 178,
        "end_line": 180,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "java.lang.RuntimeException": null,
            "org.apache.commons.lang.exception.Nestable": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableRuntimeException.java",
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeException",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeException.printStackTrace(java.io.PrintStream)",
        "snippet": "    public void printStackTrace(PrintStream out) {\n        delegate.printStackTrace(out);\n    }",
        "begin_line": 185,
        "end_line": 187,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "java.lang.RuntimeException": null,
            "org.apache.commons.lang.exception.Nestable": "\n     * Prints the stack trace of this exception to the specified print\n     * stream.  Includes information from the exception, if any,\n     * which caused this exception.\n     *\n     * @param out <code>PrintStream</code> to use for output.\n     "
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableRuntimeException.java",
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeException",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeException.printStackTrace(java.io.PrintWriter)",
        "snippet": "    public void printStackTrace(PrintWriter out) {\n        delegate.printStackTrace(out);\n    }",
        "begin_line": 192,
        "end_line": 194,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "java.lang.RuntimeException": null,
            "org.apache.commons.lang.exception.Nestable": "\n     * Prints the stack trace of this exception to the specified print\n     * writer.  Includes information from the exception, if any,\n     * which caused this exception.\n     *\n     * @param out <code>PrintWriter</code> to use for output.\n     "
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableRuntimeException.java",
        "class_name": "org.apache.commons.lang.exception.NestableRuntimeException",
        "signature": "org.apache.commons.lang.exception.NestableRuntimeException.printPartialStackTrace(java.io.PrintWriter)",
        "snippet": "    public final void printPartialStackTrace(PrintWriter out) {\n        super.printStackTrace(out);\n    }",
        "begin_line": 199,
        "end_line": 201,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "java.lang.RuntimeException": null,
            "org.apache.commons.lang.exception.Nestable": "\n     * Prints the stack trace of this exception to the specified print\n     * writer.  Includes information from the exception, if any,\n     * which caused this exception.\n     *\n     * @param out <code>PrintWriter</code> to use for output.\n     "
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/ExceptionUtils.java",
        "class_name": "org.apache.commons.lang.exception.ExceptionUtils",
        "signature": "org.apache.commons.lang.exception.ExceptionUtils.ExceptionUtils()",
        "snippet": "    public ExceptionUtils() {\n        super();\n    }",
        "begin_line": 109,
        "end_line": 111,
        "comment": "\n     * <p>\n     * Public constructor allows an instance of <code>ExceptionUtils</code> to be created, although that is not\n     * normally necessary.\n     * </p>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/ExceptionUtils.java",
        "class_name": "org.apache.commons.lang.exception.ExceptionUtils",
        "signature": "org.apache.commons.lang.exception.ExceptionUtils.addCauseMethodName(java.lang.String)",
        "snippet": "    public static void addCauseMethodName(String methodName) {\n        if (StringUtils.isNotEmpty(methodName) && !isCauseMethodName(methodName)) {            \n            List list = getCauseMethodNameList();\n            if (list.add(methodName)) {\n                CAUSE_METHOD_NAMES = toArray(list);\n            }\n        }\n    }",
        "begin_line": 122,
        "end_line": 129,
        "comment": "\n     * <p>Adds to the list of method names used in the search for <code>Throwable</code>\n     * objects.</p>\n     * \n     * @param methodName  the methodName to add to the list, <code>null</code>\n     *  and empty strings are ignored\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/ExceptionUtils.java",
        "class_name": "org.apache.commons.lang.exception.ExceptionUtils",
        "signature": "org.apache.commons.lang.exception.ExceptionUtils.removeCauseMethodName(java.lang.String)",
        "snippet": "    public static void removeCauseMethodName(String methodName) {\n        if (StringUtils.isNotEmpty(methodName)) {\n            List list = getCauseMethodNameList();\n            if (list.remove(methodName)) {\n                CAUSE_METHOD_NAMES = toArray(list);\n            }\n        }\n    }",
        "begin_line": 139,
        "end_line": 146,
        "comment": "\n     * <p>Removes from the list of method names used in the search for <code>Throwable</code>\n     * objects.</p>\n     * \n     * @param methodName  the methodName to remove from the list, <code>null</code>\n     *  and empty strings are ignored\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/ExceptionUtils.java",
        "class_name": "org.apache.commons.lang.exception.ExceptionUtils",
        "signature": "org.apache.commons.lang.exception.ExceptionUtils.setCause(java.lang.Throwable, java.lang.Throwable)",
        "snippet": "    public static boolean setCause(Throwable target, Throwable cause) {\n        if (target == null) {\n            throw new NullArgumentException(\"target\");\n        }\n        Object[] causeArgs = new Object[]{cause};\n        boolean modifiedTarget = false;\n        if (THROWABLE_INITCAUSE_METHOD != null) {\n            try {\n                THROWABLE_INITCAUSE_METHOD.invoke(target, causeArgs);\n                modifiedTarget = true;\n            } catch (IllegalAccessException ignored) {\n                // Exception ignored.\n            } catch (InvocationTargetException ignored) {\n                // Exception ignored.\n            }\n        }\n        try {\n            Method setCauseMethod = target.getClass().getMethod(\"setCause\", new Class[]{Throwable.class});\n            setCauseMethod.invoke(target, causeArgs);\n            modifiedTarget = true;\n        } catch (NoSuchMethodException ignored) {\n            // Exception ignored.\n        } catch (IllegalAccessException ignored) {\n            // Exception ignored.\n        } catch (InvocationTargetException ignored) {\n            // Exception ignored.\n        }\n        return modifiedTarget;\n    }",
        "begin_line": 176,
        "end_line": 204,
        "comment": "\n     * <p>Sets the cause of a <code>Throwable</code> using introspection, allowing\n     * source code compatibility between pre-1.4 and post-1.4 Java releases.</p>\n     *\n     * <p>The typical use of this method is inside a constructor as in\n     * the following example:</p>\n     *\n     * <pre>\n     * import org.apache.commons.lang.exception.ExceptionUtils;\n     *  \n     * public class MyException extends Exception {\n     *  \n     *    public MyException(String msg) {\n     *       super(msg);\n     *    }\n     *\n     *    public MyException(String msg, Throwable cause) {\n     *       super(msg);\n     *       ExceptionUtils.setCause(this, cause);\n     *    }\n     * }\n     * </pre>\n     *\n     * @param target  the target <code>Throwable</code>\n     * @param cause  the <code>Throwable</code> to set in the target\n     * @return a <code>true</code> if the target has been modified\n     * @since 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/ExceptionUtils.java",
        "class_name": "org.apache.commons.lang.exception.ExceptionUtils",
        "signature": "org.apache.commons.lang.exception.ExceptionUtils.toArray(java.util.List)",
        "snippet": "    private static String[] toArray(List list) {\n        return (String[]) list.toArray(new String[list.size()]);\n    }",
        "begin_line": 211,
        "end_line": 213,
        "comment": "\n     * Returns the given list as a <code>String[]</code>.\n     * @param list a list to transform.\n     * @return the given list as a <code>String[]</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/ExceptionUtils.java",
        "class_name": "org.apache.commons.lang.exception.ExceptionUtils",
        "signature": "org.apache.commons.lang.exception.ExceptionUtils.getCauseMethodNameList()",
        "snippet": "    private static ArrayList getCauseMethodNameList() {\n        return new ArrayList(Arrays.asList(CAUSE_METHOD_NAMES));\n    }",
        "begin_line": 220,
        "end_line": 222,
        "comment": "\n     * Returns {@link #CAUSE_METHOD_NAMES} as a List.\n     *\n     * @return {@link #CAUSE_METHOD_NAMES} as a List.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/ExceptionUtils.java",
        "class_name": "org.apache.commons.lang.exception.ExceptionUtils",
        "signature": "org.apache.commons.lang.exception.ExceptionUtils.isCauseMethodName(java.lang.String)",
        "snippet": "    public static boolean isCauseMethodName(String methodName) {\n        return ArrayUtils.indexOf(CAUSE_METHOD_NAMES, methodName) >= 0;\n    }",
        "begin_line": 233,
        "end_line": 235,
        "comment": "\n     * <p>Tests if the list of method names used in the search for <code>Throwable</code>\n     * objects include the given name.</p>\n     * \n     * @param methodName  the methodName to search in the list.\n     * @return if the list of method names used in the search for <code>Throwable</code>\n     *  objects include the given name.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/ExceptionUtils.java",
        "class_name": "org.apache.commons.lang.exception.ExceptionUtils",
        "signature": "org.apache.commons.lang.exception.ExceptionUtils.getCause(java.lang.Throwable)",
        "snippet": "    public static Throwable getCause(Throwable throwable) {\n        return getCause(throwable, CAUSE_METHOD_NAMES);\n    }",
        "begin_line": 269,
        "end_line": 271,
        "comment": "\n     * <p>Introspects the <code>Throwable</code> to obtain the cause.</p>\n     *\n     * <p>The method searches for methods with specific names that return a \n     * <code>Throwable</code> object. This will pick up most wrapping exceptions,\n     * including those from JDK 1.4, and\n     * {@link org.apache.commons.lang.exception.NestableException NestableException}.\n     * The method names can be added to using {@link #addCauseMethodName(String)}.</p>\n     *\n     * <p>The default list searched for are:</p>\n     * <ul>\n     *  <li><code>getCause()</code></li>\n     *  <li><code>getNextException()</code></li>\n     *  <li><code>getTargetException()</code></li>\n     *  <li><code>getException()</code></li>\n     *  <li><code>getSourceException()</code></li>\n     *  <li><code>getRootCause()</code></li>\n     *  <li><code>getCausedByException()</code></li>\n     *  <li><code>getNested()</code></li>\n     * </ul>\n     * \n     * <p>In the absence of any such method, the object is inspected for a\n     * <code>detail</code> field assignable to a <code>Throwable</code>.</p>\n     *\n     * <p>If none of the above is found, returns <code>null</code>.</p>\n     *\n     * @param throwable  the throwable to introspect for a cause, may be null\n     * @return the cause of the <code>Throwable</code>,\n     *  <code>null</code> if none found or null throwable input\n     * @since 1.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/ExceptionUtils.java",
        "class_name": "org.apache.commons.lang.exception.ExceptionUtils",
        "signature": "org.apache.commons.lang.exception.ExceptionUtils.getCause(java.lang.Throwable, java.lang.String[])",
        "snippet": "    public static Throwable getCause(Throwable throwable, String[] methodNames) {\n        if (throwable == null) {\n            return null;\n        }\n        Throwable cause = getCauseUsingWellKnownTypes(throwable);\n        if (cause == null) {\n            if (methodNames == null) {\n                methodNames = CAUSE_METHOD_NAMES;\n            }\n            for (int i = 0; i < methodNames.length; i++) {\n                String methodName = methodNames[i];\n                if (methodName != null) {\n                    cause = getCauseUsingMethodName(throwable, methodName);\n                    if (cause != null) {\n                        break;\n                    }\n                }\n            }\n\n            if (cause == null) {\n                cause = getCauseUsingFieldName(throwable, \"detail\");\n            }\n        }\n        return cause;\n    }",
        "begin_line": 291,
        "end_line": 315,
        "comment": "\n     * <p>Introspects the <code>Throwable</code> to obtain the cause.</p>\n     *\n     * <ol>\n     * <li>Try known exception types.</li>\n     * <li>Try the supplied array of method names.</li>\n     * <li>Try the field 'detail'.</li>\n     * </ol>\n     *\n     * <p>A <code>null</code> set of method names means use the default set.\n     * A <code>null</code> in the set of method names will be ignored.</p>\n     *\n     * @param throwable  the throwable to introspect for a cause, may be null\n     * @param methodNames  the method names, null treated as default set\n     * @return the cause of the <code>Throwable</code>,\n     *  <code>null</code> if none found or null throwable input\n     * @since 1.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/ExceptionUtils.java",
        "class_name": "org.apache.commons.lang.exception.ExceptionUtils",
        "signature": "org.apache.commons.lang.exception.ExceptionUtils.getRootCause(java.lang.Throwable)",
        "snippet": "    public static Throwable getRootCause(Throwable throwable) {\n        List list = getThrowableList(throwable);\n        return (list.size() < 2 ? null : (Throwable)list.get(list.size() - 1));\n    }",
        "begin_line": 334,
        "end_line": 337,
        "comment": "\n     * <p>Introspects the <code>Throwable</code> to obtain the root cause.</p>\n     *\n     * <p>This method walks through the exception chain to the last element,\n     * \"root\" of the tree, using {@link #getCause(Throwable)}, and\n     * returns that exception.</p>\n     *\n     * <p>From version 2.2, this method handles recursive cause structures\n     * that might otherwise cause infinite loops. If the throwable parameter\n     * has a cause of itself, then null will be returned. If the throwable\n     * parameter cause chain loops, the last element in the chain before the\n     * loop is returned.</p>\n     *\n     * @param throwable  the throwable to get the root cause for, may be null\n     * @return the root cause of the <code>Throwable</code>,\n     *  <code>null</code> if none found or null throwable input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/ExceptionUtils.java",
        "class_name": "org.apache.commons.lang.exception.ExceptionUtils",
        "signature": "org.apache.commons.lang.exception.ExceptionUtils.getCauseUsingWellKnownTypes(java.lang.Throwable)",
        "snippet": "    private static Throwable getCauseUsingWellKnownTypes(Throwable throwable) {\n        if (throwable instanceof Nestable) {\n            return ((Nestable) throwable).getCause();\n        } else if (throwable instanceof SQLException) {\n            return ((SQLException) throwable).getNextException();\n        } else if (throwable instanceof InvocationTargetException) {\n            return ((InvocationTargetException) throwable).getTargetException();\n        } else {\n            return null;\n        }\n    }",
        "begin_line": 349,
        "end_line": 359,
        "comment": "\n     * <p>Finds a <code>Throwable</code> for known types.</p>\n     * \n     * <p>Uses <code>instanceof</code> checks to examine the exception,\n     * looking for well known types which could contain chained or\n     * wrapped exceptions.</p>\n     *\n     * @param throwable  the exception to examine\n     * @return the wrapped exception, or <code>null</code> if not found\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/ExceptionUtils.java",
        "class_name": "org.apache.commons.lang.exception.ExceptionUtils",
        "signature": "org.apache.commons.lang.exception.ExceptionUtils.getCauseUsingMethodName(java.lang.Throwable, java.lang.String)",
        "snippet": "    private static Throwable getCauseUsingMethodName(Throwable throwable, String methodName) {\n        Method method = null;\n        try {\n            method = throwable.getClass().getMethod(methodName, null);\n        } catch (NoSuchMethodException ignored) {\n            // exception ignored\n        } catch (SecurityException ignored) {\n            // exception ignored\n        }\n\n        if (method != null && Throwable.class.isAssignableFrom(method.getReturnType())) {\n            try {\n                return (Throwable) method.invoke(throwable, ArrayUtils.EMPTY_OBJECT_ARRAY);\n            } catch (IllegalAccessException ignored) {\n                // exception ignored\n            } catch (IllegalArgumentException ignored) {\n                // exception ignored\n            } catch (InvocationTargetException ignored) {\n                // exception ignored\n            }\n        }\n        return null;\n    }",
        "begin_line": 368,
        "end_line": 390,
        "comment": "\n     * <p>Finds a <code>Throwable</code> by method name.</p>\n     *\n     * @param throwable  the exception to examine\n     * @param methodName  the name of the method to find and invoke\n     * @return the wrapped exception, or <code>null</code> if not found\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/ExceptionUtils.java",
        "class_name": "org.apache.commons.lang.exception.ExceptionUtils",
        "signature": "org.apache.commons.lang.exception.ExceptionUtils.getCauseUsingFieldName(java.lang.Throwable, java.lang.String)",
        "snippet": "    private static Throwable getCauseUsingFieldName(Throwable throwable, String fieldName) {\n        Field field = null;\n        try {\n            field = throwable.getClass().getField(fieldName);\n        } catch (NoSuchFieldException ignored) {\n            // exception ignored\n        } catch (SecurityException ignored) {\n            // exception ignored\n        }\n\n        if (field != null && Throwable.class.isAssignableFrom(field.getType())) {\n            try {\n                return (Throwable) field.get(throwable);\n            } catch (IllegalAccessException ignored) {\n                // exception ignored\n            } catch (IllegalArgumentException ignored) {\n                // exception ignored\n            }\n        }\n        return null;\n    }",
        "begin_line": 399,
        "end_line": 419,
        "comment": "\n     * <p>Finds a <code>Throwable</code> by field name.</p>\n     *\n     * @param throwable  the exception to examine\n     * @param fieldName  the name of the attribute to examine\n     * @return the wrapped exception, or <code>null</code> if not found\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/ExceptionUtils.java",
        "class_name": "org.apache.commons.lang.exception.ExceptionUtils",
        "signature": "org.apache.commons.lang.exception.ExceptionUtils.isThrowableNested()",
        "snippet": "    public static boolean isThrowableNested() {\n        return THROWABLE_CAUSE_METHOD != null;\n    }",
        "begin_line": 430,
        "end_line": 432,
        "comment": "\n     * <p>Checks if the Throwable class has a <code>getCause</code> method.</p>\n     *\n     * <p>This is true for JDK 1.4 and above.</p>\n     *\n     * @return true if Throwable is nestable\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/ExceptionUtils.java",
        "class_name": "org.apache.commons.lang.exception.ExceptionUtils",
        "signature": "org.apache.commons.lang.exception.ExceptionUtils.isNestedThrowable(java.lang.Throwable)",
        "snippet": "    public static boolean isNestedThrowable(Throwable throwable) {\n        if (throwable == null) {\n            return false;\n        }\n\n        if (throwable instanceof Nestable) {\n            return true;\n        } else if (throwable instanceof SQLException) {\n            return true;\n        } else if (throwable instanceof InvocationTargetException) {\n            return true;\n        } else if (isThrowableNested()) {\n            return true;\n        }\n\n        Class cls = throwable.getClass();\n        for (int i = 0, isize = CAUSE_METHOD_NAMES.length; i < isize; i++) {\n            try {\n                Method method = cls.getMethod(CAUSE_METHOD_NAMES[i], null);\n                if (method != null && Throwable.class.isAssignableFrom(method.getReturnType())) {\n                    return true;\n                }\n            } catch (NoSuchMethodException ignored) {\n                // exception ignored\n            } catch (SecurityException ignored) {\n                // exception ignored\n            }\n        }\n\n        try {\n            Field field = cls.getField(\"detail\");\n            if (field != null) {\n                return true;\n            }\n        } catch (NoSuchFieldException ignored) {\n            // exception ignored\n        } catch (SecurityException ignored) {\n            // exception ignored\n        }\n\n        return false;\n    }",
        "begin_line": 443,
        "end_line": 484,
        "comment": "\n     * <p>Checks whether this <code>Throwable</code> class can store a cause.</p>\n     *\n     * <p>This method does <b>not</b> check whether it actually does store a cause.<p>\n     *\n     * @param throwable  the <code>Throwable</code> to examine, may be null\n     * @return boolean <code>true</code> if nested otherwise <code>false</code>\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/ExceptionUtils.java",
        "class_name": "org.apache.commons.lang.exception.ExceptionUtils",
        "signature": "org.apache.commons.lang.exception.ExceptionUtils.getThrowableCount(java.lang.Throwable)",
        "snippet": "    public static int getThrowableCount(Throwable throwable) {\n        return getThrowableList(throwable).size();\n    }",
        "begin_line": 503,
        "end_line": 505,
        "comment": "\n     * <p>Counts the number of <code>Throwable</code> objects in the\n     * exception chain.</p>\n     *\n     * <p>A throwable without cause will return <code>1</code>.\n     * A throwable with one cause will return <code>2</code> and so on.\n     * A <code>null</code> throwable will return <code>0</code>.</p>\n     *\n     * <p>From version 2.2, this method handles recursive cause structures\n     * that might otherwise cause infinite loops. The cause chain is\n     * processed until the end is reached, or until the next item in the\n     * chain is already in the result set.</p>\n     *\n     * @param throwable  the throwable to inspect, may be null\n     * @return the count of throwables, zero if null input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/ExceptionUtils.java",
        "class_name": "org.apache.commons.lang.exception.ExceptionUtils",
        "signature": "org.apache.commons.lang.exception.ExceptionUtils.getThrowables(java.lang.Throwable)",
        "snippet": "    public static Throwable[] getThrowables(Throwable throwable) {\n        List list = getThrowableList(throwable);\n        return (Throwable[]) list.toArray(new Throwable[list.size()]);\n    }",
        "begin_line": 526,
        "end_line": 529,
        "comment": "\n     * <p>Returns the list of <code>Throwable</code> objects in the\n     * exception chain.</p>\n     *\n     * <p>A throwable without cause will return an array containing\n     * one element - the input throwable.\n     * A throwable with one cause will return an array containing\n     * two elements. - the input throwable and the cause throwable.\n     * A <code>null</code> throwable will return an array of size zero.</p>\n     *\n     * <p>From version 2.2, this method handles recursive cause structures\n     * that might otherwise cause infinite loops. The cause chain is\n     * processed until the end is reached, or until the next item in the\n     * chain is already in the result set.</p>\n     *\n     * @see #getThrowableList(Throwable)\n     * @param throwable  the throwable to inspect, may be null\n     * @return the array of throwables, never null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/ExceptionUtils.java",
        "class_name": "org.apache.commons.lang.exception.ExceptionUtils",
        "signature": "org.apache.commons.lang.exception.ExceptionUtils.getThrowableList(java.lang.Throwable)",
        "snippet": "    public static List getThrowableList(Throwable throwable) {\n        List list = new ArrayList();\n        while (throwable != null && list.contains(throwable) == false) {\n            list.add(throwable);\n            throwable = ExceptionUtils.getCause(throwable);\n        }\n        return list;\n    }",
        "begin_line": 550,
        "end_line": 557,
        "comment": "\n     * <p>Returns the list of <code>Throwable</code> objects in the\n     * exception chain.</p>\n     *\n     * <p>A throwable without cause will return a list containing\n     * one element - the input throwable.\n     * A throwable with one cause will return a list containing\n     * two elements. - the input throwable and the cause throwable.\n     * A <code>null</code> throwable will return a list of size zero.</p>\n     *\n     * <p>This method handles recursive cause structures that might\n     * otherwise cause infinite loops. The cause chain is processed until\n     * the end is reached, or until the next item in the chain is already\n     * in the result set.</p>\n     *\n     * @param throwable  the throwable to inspect, may be null\n     * @return the list of throwables, never null\n     * @since Commons Lang 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/ExceptionUtils.java",
        "class_name": "org.apache.commons.lang.exception.ExceptionUtils",
        "signature": "org.apache.commons.lang.exception.ExceptionUtils.indexOfThrowable(java.lang.Throwable, java.lang.Class)",
        "snippet": "    public static int indexOfThrowable(Throwable throwable, Class clazz) {\n        return indexOf(throwable, clazz, 0, false);\n    }",
        "begin_line": 574,
        "end_line": 576,
        "comment": "\n     * <p>Returns the (zero based) index of the first <code>Throwable</code>\n     * that matches the specified class (exactly) in the exception chain.\n     * Subclasses of the specified class do not match - see\n     * {@link #indexOfType(Throwable, Class)} for the opposite.</p>\n     *\n     * <p>A <code>null</code> throwable returns <code>-1</code>.\n     * A <code>null</code> type returns <code>-1</code>.\n     * No match in the chain returns <code>-1</code>.</p>\n     *\n     * @param throwable  the throwable to inspect, may be null\n     * @param clazz  the class to search for, subclasses do not match, null returns -1\n     * @return the index into the throwable chain, -1 if no match or null input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/ExceptionUtils.java",
        "class_name": "org.apache.commons.lang.exception.ExceptionUtils",
        "signature": "org.apache.commons.lang.exception.ExceptionUtils.indexOfThrowable(java.lang.Throwable, java.lang.Class, int)",
        "snippet": "    public static int indexOfThrowable(Throwable throwable, Class clazz, int fromIndex) {\n        return indexOf(throwable, clazz, fromIndex, false);\n    }",
        "begin_line": 597,
        "end_line": 599,
        "comment": "\n     * <p>Returns the (zero based) index of the first <code>Throwable</code>\n     * that matches the specified type in the exception chain from\n     * a specified index.\n     * Subclasses of the specified class do not match - see\n     * {@link #indexOfType(Throwable, Class, int)} for the opposite.</p>\n     *\n     * <p>A <code>null</code> throwable returns <code>-1</code>.\n     * A <code>null</code> type returns <code>-1</code>.\n     * No match in the chain returns <code>-1</code>.\n     * A negative start index is treated as zero.\n     * A start index greater than the number of throwables returns <code>-1</code>.</p>\n     *\n     * @param throwable  the throwable to inspect, may be null\n     * @param clazz  the class to search for, subclasses do not match, null returns -1\n     * @param fromIndex  the (zero based) index of the starting position,\n     *  negative treated as zero, larger than chain size returns -1\n     * @return the index into the throwable chain, -1 if no match or null input\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/ExceptionUtils.java",
        "class_name": "org.apache.commons.lang.exception.ExceptionUtils",
        "signature": "org.apache.commons.lang.exception.ExceptionUtils.indexOfType(java.lang.Throwable, java.lang.Class)",
        "snippet": "    public static int indexOfType(Throwable throwable, Class type) {\n        return indexOf(throwable, type, 0, true);\n    }",
        "begin_line": 617,
        "end_line": 619,
        "comment": "\n     * <p>Returns the (zero based) index of the first <code>Throwable</code>\n     * that matches the specified class or subclass in the exception chain.\n     * Subclasses of the specified class do match - see\n     * {@link #indexOfThrowable(Throwable, Class)} for the opposite.</p>\n     *\n     * <p>A <code>null</code> throwable returns <code>-1</code>.\n     * A <code>null</code> type returns <code>-1</code>.\n     * No match in the chain returns <code>-1</code>.</p>\n     *\n     * @param throwable  the throwable to inspect, may be null\n     * @param type  the type to search for, subclasses match, null returns -1\n     * @return the index into the throwable chain, -1 if no match or null input\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/ExceptionUtils.java",
        "class_name": "org.apache.commons.lang.exception.ExceptionUtils",
        "signature": "org.apache.commons.lang.exception.ExceptionUtils.indexOfType(java.lang.Throwable, java.lang.Class, int)",
        "snippet": "    public static int indexOfType(Throwable throwable, Class type, int fromIndex) {\n        return indexOf(throwable, type, fromIndex, true);\n    }",
        "begin_line": 641,
        "end_line": 643,
        "comment": "\n     * <p>Returns the (zero based) index of the first <code>Throwable</code>\n     * that matches the specified type in the exception chain from\n     * a specified index.\n     * Subclasses of the specified class do match - see\n     * {@link #indexOfThrowable(Throwable, Class)} for the opposite.</p>\n     *\n     * <p>A <code>null</code> throwable returns <code>-1</code>.\n     * A <code>null</code> type returns <code>-1</code>.\n     * No match in the chain returns <code>-1</code>.\n     * A negative start index is treated as zero.\n     * A start index greater than the number of throwables returns <code>-1</code>.</p>\n     *\n     * @param throwable  the throwable to inspect, may be null\n     * @param type  the type to search for, subclasses match, null returns -1\n     * @param fromIndex  the (zero based) index of the starting position,\n     *  negative treated as zero, larger than chain size returns -1\n     * @return the index into the throwable chain, -1 if no match or null input\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/ExceptionUtils.java",
        "class_name": "org.apache.commons.lang.exception.ExceptionUtils",
        "signature": "org.apache.commons.lang.exception.ExceptionUtils.indexOf(java.lang.Throwable, java.lang.Class, int, boolean)",
        "snippet": "    private static int indexOf(Throwable throwable, Class type, int fromIndex, boolean subclass) {\n        if (throwable == null || type == null) {\n            return -1;\n        }\n        if (fromIndex < 0) {\n            fromIndex = 0;\n        }\n        Throwable[] throwables = ExceptionUtils.getThrowables(throwable);\n        if (fromIndex >= throwables.length) {\n            return -1;\n        }\n        if (subclass) {\n            for (int i = fromIndex; i < throwables.length; i++) {\n                if (type.isAssignableFrom(throwables[i].getClass())) {\n                    return i;\n                }\n            }\n        } else {\n            for (int i = fromIndex; i < throwables.length; i++) {\n                if (type.equals(throwables[i].getClass())) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }",
        "begin_line": 656,
        "end_line": 681,
        "comment": "\n     * <p>Worker method for the <code>indexOfType</code> methods.</p>\n     *\n     * @param throwable  the throwable to inspect, may be null\n     * @param type  the type to search for, subclasses match, null returns -1\n     * @param fromIndex  the (zero based) index of the starting position,\n     *  negative treated as zero, larger than chain size returns -1\n     * @param subclass if <code>true</code>, compares with {@link Class#isAssignableFrom(Class)}, otherwise compares\n     * using references\n     * @return index of the <code>type</code> within throwables nested withing the specified <code>throwable</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/ExceptionUtils.java",
        "class_name": "org.apache.commons.lang.exception.ExceptionUtils",
        "signature": "org.apache.commons.lang.exception.ExceptionUtils.printRootCauseStackTrace(java.lang.Throwable)",
        "snippet": "    public static void printRootCauseStackTrace(Throwable throwable) {\n        printRootCauseStackTrace(throwable, System.err);\n    }",
        "begin_line": 702,
        "end_line": 704,
        "comment": "\n     * <p>Prints a compact stack trace for the root cause of a throwable\n     * to <code>System.err</code>.</p>\n     *\n     * <p>The compact stack trace starts with the root cause and prints\n     * stack frames up to the place where it was caught and wrapped.\n     * Then it prints the wrapped exception and continues with stack frames\n     * until the wrapper exception is caught and wrapped again, etc.</p>\n     *\n     * <p>The output of this method is consistent across JDK versions.\n     * Note that this is the opposite order to the JDK1.4 display.</p>\n     *\n     * <p>The method is equivalent to <code>printStackTrace</code> for throwables\n     * that don't have nested causes.</p>\n     *\n     * @param throwable  the throwable to output\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/ExceptionUtils.java",
        "class_name": "org.apache.commons.lang.exception.ExceptionUtils",
        "signature": "org.apache.commons.lang.exception.ExceptionUtils.printRootCauseStackTrace(java.lang.Throwable, java.io.PrintStream)",
        "snippet": "    public static void printRootCauseStackTrace(Throwable throwable, PrintStream stream) {\n        if (throwable == null) {\n            return;\n        }\n        if (stream == null) {\n            throw new IllegalArgumentException(\"The PrintStream must not be null\");\n        }\n        String trace[] = getRootCauseStackTrace(throwable);\n        for (int i = 0; i < trace.length; i++) {\n            stream.println(trace[i]);\n        }\n        stream.flush();\n    }",
        "begin_line": 725,
        "end_line": 737,
        "comment": "\n     * <p>Prints a compact stack trace for the root cause of a throwable.</p>\n     *\n     * <p>The compact stack trace starts with the root cause and prints\n     * stack frames up to the place where it was caught and wrapped.\n     * Then it prints the wrapped exception and continues with stack frames\n     * until the wrapper exception is caught and wrapped again, etc.</p>\n     *\n     * <p>The output of this method is consistent across JDK versions.\n     * Note that this is the opposite order to the JDK1.4 display.</p>\n     *\n     * <p>The method is equivalent to <code>printStackTrace</code> for throwables\n     * that don't have nested causes.</p>\n     *\n     * @param throwable  the throwable to output, may be null\n     * @param stream  the stream to output to, may not be null\n     * @throws IllegalArgumentException if the stream is <code>null</code>\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/ExceptionUtils.java",
        "class_name": "org.apache.commons.lang.exception.ExceptionUtils",
        "signature": "org.apache.commons.lang.exception.ExceptionUtils.printRootCauseStackTrace(java.lang.Throwable, java.io.PrintWriter)",
        "snippet": "    public static void printRootCauseStackTrace(Throwable throwable, PrintWriter writer) {\n        if (throwable == null) {\n            return;\n        }\n        if (writer == null) {\n            throw new IllegalArgumentException(\"The PrintWriter must not be null\");\n        }\n        String trace[] = getRootCauseStackTrace(throwable);\n        for (int i = 0; i < trace.length; i++) {\n            writer.println(trace[i]);\n        }\n        writer.flush();\n    }",
        "begin_line": 758,
        "end_line": 770,
        "comment": "\n     * <p>Prints a compact stack trace for the root cause of a throwable.</p>\n     *\n     * <p>The compact stack trace starts with the root cause and prints\n     * stack frames up to the place where it was caught and wrapped.\n     * Then it prints the wrapped exception and continues with stack frames\n     * until the wrapper exception is caught and wrapped again, etc.</p>\n     *\n     * <p>The output of this method is consistent across JDK versions.\n     * Note that this is the opposite order to the JDK1.4 display.</p>\n     *\n     * <p>The method is equivalent to <code>printStackTrace</code> for throwables\n     * that don't have nested causes.</p>\n     *\n     * @param throwable  the throwable to output, may be null\n     * @param writer  the writer to output to, may not be null\n     * @throws IllegalArgumentException if the writer is <code>null</code>\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/ExceptionUtils.java",
        "class_name": "org.apache.commons.lang.exception.ExceptionUtils",
        "signature": "org.apache.commons.lang.exception.ExceptionUtils.getRootCauseStackTrace(java.lang.Throwable)",
        "snippet": "    public static String[] getRootCauseStackTrace(Throwable throwable) {\n        if (throwable == null) {\n            return ArrayUtils.EMPTY_STRING_ARRAY;\n        }\n        Throwable throwables[] = getThrowables(throwable);\n        int count = throwables.length;\n        ArrayList frames = new ArrayList();\n        List nextTrace = getStackFrameList(throwables[count - 1]);\n        for (int i = count; --i >= 0;) {\n            List trace = nextTrace;\n            if (i != 0) {\n                nextTrace = getStackFrameList(throwables[i - 1]);\n                removeCommonFrames(trace, nextTrace);\n            }\n            if (i == count - 1) {\n                frames.add(throwables[i].toString());\n            } else {\n                frames.add(WRAPPED_MARKER + throwables[i].toString());\n            }\n            for (int j = 0; j < trace.size(); j++) {\n                frames.add(trace.get(j));\n            }\n        }\n        return (String[]) frames.toArray(new String[0]);\n    }",
        "begin_line": 786,
        "end_line": 810,
        "comment": "\n     * <p>Creates a compact stack trace for the root cause of the supplied\n     * <code>Throwable</code>.</p>\n     *\n     * <p>The output of this method is consistent across JDK versions.\n     * It consists of the root exception followed by each of its wrapping\n     * exceptions separated by '[wrapped]'. Note that this is the opposite\n     * order to the JDK1.4 display.</p>\n     *\n     * @param throwable  the throwable to examine, may be null\n     * @return an array of stack trace frames, never null\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/ExceptionUtils.java",
        "class_name": "org.apache.commons.lang.exception.ExceptionUtils",
        "signature": "org.apache.commons.lang.exception.ExceptionUtils.removeCommonFrames(java.util.List, java.util.List)",
        "snippet": "    public static void removeCommonFrames(List causeFrames, List wrapperFrames) {\n        if (causeFrames == null || wrapperFrames == null) {\n            throw new IllegalArgumentException(\"The List must not be null\");\n        }\n        int causeFrameIndex = causeFrames.size() - 1;\n        int wrapperFrameIndex = wrapperFrames.size() - 1;\n        while (causeFrameIndex >= 0 && wrapperFrameIndex >= 0) {\n            // Remove the frame from the cause trace if it is the same\n            // as in the wrapper trace\n            String causeFrame = (String) causeFrames.get(causeFrameIndex);\n            String wrapperFrame = (String) wrapperFrames.get(wrapperFrameIndex);\n            if (causeFrame.equals(wrapperFrame)) {\n                causeFrames.remove(causeFrameIndex);\n            }\n            causeFrameIndex--;\n            wrapperFrameIndex--;\n        }\n    }",
        "begin_line": 820,
        "end_line": 837,
        "comment": "\n     * <p>Removes common frames from the cause trace given the two stack traces.</p>\n     *\n     * @param causeFrames  stack trace of a cause throwable\n     * @param wrapperFrames  stack trace of a wrapper throwable\n     * @throws IllegalArgumentException if either argument is null\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/ExceptionUtils.java",
        "class_name": "org.apache.commons.lang.exception.ExceptionUtils",
        "signature": "org.apache.commons.lang.exception.ExceptionUtils.getFullStackTrace(java.lang.Throwable)",
        "snippet": "    public static String getFullStackTrace(Throwable throwable) {\n        StringWriter sw = new StringWriter();\n        PrintWriter pw = new PrintWriter(sw, true);\n        Throwable[] ts = getThrowables(throwable);\n        for (int i = 0; i < ts.length; i++) {\n            ts[i].printStackTrace(pw);\n            if (isNestedThrowable(ts[i])) {\n                break;\n            }\n        }\n        return sw.getBuffer().toString();\n    }",
        "begin_line": 850,
        "end_line": 861,
        "comment": "\n     * <p>A way to get the entire nested stack-trace of an throwable.</p>\n     *\n     * <p>The result of this method is highly dependent on the JDK version\n     * and whether the exceptions override printStackTrace or not.</p>\n     *\n     * @param throwable  the <code>Throwable</code> to be examined\n     * @return the nested stack trace, with the root cause first\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/ExceptionUtils.java",
        "class_name": "org.apache.commons.lang.exception.ExceptionUtils",
        "signature": "org.apache.commons.lang.exception.ExceptionUtils.getStackTrace(java.lang.Throwable)",
        "snippet": "    public static String getStackTrace(Throwable throwable) {\n        StringWriter sw = new StringWriter();\n        PrintWriter pw = new PrintWriter(sw, true);\n        throwable.printStackTrace(pw);\n        return sw.getBuffer().toString();\n    }",
        "begin_line": 876,
        "end_line": 881,
        "comment": "\n     * <p>Gets the stack trace from a Throwable as a String.</p>\n     *\n     * <p>The result of this method vary by JDK version as this method\n     * uses {@link Throwable#printStackTrace(java.io.PrintWriter)}.\n     * On JDK1.3 and earlier, the cause exception will not be shown\n     * unless the specified throwable alters printStackTrace.</p>\n     *\n     * @param throwable  the <code>Throwable</code> to be examined\n     * @return the stack trace as generated by the exception's\n     *  <code>printStackTrace(PrintWriter)</code> method\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/ExceptionUtils.java",
        "class_name": "org.apache.commons.lang.exception.ExceptionUtils",
        "signature": "org.apache.commons.lang.exception.ExceptionUtils.getStackFrames(java.lang.Throwable)",
        "snippet": "    public static String[] getStackFrames(Throwable throwable) {\n        if (throwable == null) {\n            return ArrayUtils.EMPTY_STRING_ARRAY;\n        }\n        return getStackFrames(getStackTrace(throwable));\n    }",
        "begin_line": 896,
        "end_line": 901,
        "comment": "\n     * <p>Captures the stack trace associated with the specified\n     * <code>Throwable</code> object, decomposing it into a list of\n     * stack frames.</p>\n     *\n     * <p>The result of this method vary by JDK version as this method\n     * uses {@link Throwable#printStackTrace(java.io.PrintWriter)}.\n     * On JDK1.3 and earlier, the cause exception will not be shown\n     * unless the specified throwable alters printStackTrace.</p>\n     *\n     * @param throwable  the <code>Throwable</code> to examine, may be null\n     * @return an array of strings describing each stack frame, never null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/ExceptionUtils.java",
        "class_name": "org.apache.commons.lang.exception.ExceptionUtils",
        "signature": "org.apache.commons.lang.exception.ExceptionUtils.getStackFrames(java.lang.String)",
        "snippet": "    static String[] getStackFrames(String stackTrace) {\n        String linebreak = SystemUtils.LINE_SEPARATOR;\n        StringTokenizer frames = new StringTokenizer(stackTrace, linebreak);\n        List list = new ArrayList();\n        while (frames.hasMoreTokens()) {\n            list.add(frames.nextToken());\n        }\n        return toArray(list);\n    }",
        "begin_line": 916,
        "end_line": 924,
        "comment": "\n     * <p>Returns an array where each element is a line from the argument.</p>\n     *\n     * <p>The end of line is determined by the value of {@link SystemUtils#LINE_SEPARATOR}.</p>\n     *\n     * <p>Functionality shared between the\n     * <code>getStackFrames(Throwable)</code> methods of this and the\n     * {@link org.apache.commons.lang.exception.NestableDelegate} classes.</p>\n     *\n     * @param stackTrace  a stack trace String\n     * @return an array where each element is a line from the argument\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/ExceptionUtils.java",
        "class_name": "org.apache.commons.lang.exception.ExceptionUtils",
        "signature": "org.apache.commons.lang.exception.ExceptionUtils.getStackFrameList(java.lang.Throwable)",
        "snippet": "    static List getStackFrameList(Throwable t) {\n        String stackTrace = getStackTrace(t);\n        String linebreak = SystemUtils.LINE_SEPARATOR;\n        StringTokenizer frames = new StringTokenizer(stackTrace, linebreak);\n        List list = new ArrayList();\n        boolean traceStarted = false;\n        while (frames.hasMoreTokens()) {\n            String token = frames.nextToken();\n            // Determine if the line starts with <whitespace>at\n            int at = token.indexOf(\"at\");\n            if (at != -1 && token.substring(0, at).trim().length() == 0) {\n                traceStarted = true;\n                list.add(token);\n            } else if (traceStarted) {\n                break;\n            }\n        }\n        return list;\n    }",
        "begin_line": 938,
        "end_line": 956,
        "comment": "\n     * <p>Produces a <code>List</code> of stack frames - the message\n     * is not included. Only the trace of the specified exception is\n     * returned, any caused by trace is stripped.</p>\n     *\n     * <p>This works in most cases - it will only fail if the exception\n     * message contains a line that starts with:\n     * <code>&quot;&nbsp;&nbsp;&nbsp;at&quot;.</code></p>\n     * \n     * @param t is any throwable\n     * @return List of stack frames\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/ExceptionUtils.java",
        "class_name": "org.apache.commons.lang.exception.ExceptionUtils",
        "signature": "org.apache.commons.lang.exception.ExceptionUtils.getMessage(java.lang.Throwable)",
        "snippet": "    public static String getMessage(Throwable th) {\n        if (th == null) {\n            return \"\";\n        }\n        String clsName = ClassUtils.getShortClassName(th, null);\n        String msg = th.getMessage();\n        return clsName + \": \" + StringUtils.defaultString(msg);\n    }",
        "begin_line": 969,
        "end_line": 976,
        "comment": "\n     * Gets a short message summarising the exception.\n     * <p>\n     * The message returned is of the form\n     * {ClassNameWithoutPackage}: {ThrowableMessage}\n     *\n     * @param th  the throwable to get a message for, null returns empty string\n     * @return the message, non-null\n     * @since Commons Lang 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/ExceptionUtils.java",
        "class_name": "org.apache.commons.lang.exception.ExceptionUtils",
        "signature": "org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage(java.lang.Throwable)",
        "snippet": "    public static String getRootCauseMessage(Throwable th) {\n        Throwable root = ExceptionUtils.getRootCause(th);\n        root = (root == null ? th : root);\n        return getMessage(root);\n    }",
        "begin_line": 989,
        "end_line": 993,
        "comment": "\n     * Gets a short message summarising the root cause exception.\n     * <p>\n     * The message returned is of the form\n     * {ClassNameWithoutPackage}: {ThrowableMessage}\n     *\n     * @param th  the throwable to get a message for, null returns empty string\n     * @return the message, non-null\n     * @since Commons Lang 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/Nestable.java",
        "class_name": "org.apache.commons.lang.exception.Nestable",
        "signature": "org.apache.commons.lang.exception.Nestable.getCause()",
        "snippet": "    public Throwable getCause();",
        "begin_line": 42,
        "end_line": 42,
        "comment": "\n     * Returns the reference to the exception or error that caused the\n     * exception implementing the <code>Nestable</code> to be thrown.\n     *\n     * @return throwable that caused the original exception\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/Nestable.java",
        "class_name": "org.apache.commons.lang.exception.Nestable",
        "signature": "org.apache.commons.lang.exception.Nestable.getMessage()",
        "snippet": "    public String getMessage();",
        "begin_line": 50,
        "end_line": 50,
        "comment": "\n     * Returns the error message of this and any nested\n     * <code>Throwable</code>.\n     *\n     * @return the error message\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/Nestable.java",
        "class_name": "org.apache.commons.lang.exception.Nestable",
        "signature": "org.apache.commons.lang.exception.Nestable.getMessage(int)",
        "snippet": "    public String getMessage(int index);",
        "begin_line": 64,
        "end_line": 64,
        "comment": "\n     * Returns the error message of the <code>Throwable</code> in the chain\n     * of <code>Throwable</code>s at the specified index, numbered from 0.\n     *\n     * @param index the index of the <code>Throwable</code> in the chain of\n     * <code>Throwable</code>s\n     * @return the error message, or null if the <code>Throwable</code> at the\n     * specified index in the chain does not contain a message\n     * @throws IndexOutOfBoundsException if the <code>index</code> argument is\n     * negative or not less than the count of <code>Throwable</code>s in the\n     * chain\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/Nestable.java",
        "class_name": "org.apache.commons.lang.exception.Nestable",
        "signature": "org.apache.commons.lang.exception.Nestable.getMessages()",
        "snippet": "    public String[] getMessages();",
        "begin_line": 76,
        "end_line": 76,
        "comment": "\n     * Returns the error message of this and any nested <code>Throwable</code>s\n     * in an array of Strings, one element for each message. Any\n     * <code>Throwable</code> not containing a message is represented in the\n     * array by a null. This has the effect of cause the length of the returned\n     * array to be equal to the result of the {@link #getThrowableCount()}\n     * operation.\n     *\n     * @return the error messages\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/Nestable.java",
        "class_name": "org.apache.commons.lang.exception.Nestable",
        "signature": "org.apache.commons.lang.exception.Nestable.getThrowable(int)",
        "snippet": "    public Throwable getThrowable(int index);",
        "begin_line": 89,
        "end_line": 89,
        "comment": "\n     * Returns the <code>Throwable</code> in the chain of\n     * <code>Throwable</code>s at the specified index, numbered from 0.\n     *\n     * @param index the index, numbered from 0, of the <code>Throwable</code> in\n     * the chain of <code>Throwable</code>s\n     * @return the <code>Throwable</code>\n     * @throws IndexOutOfBoundsException if the <code>index</code> argument is\n     * negative or not less than the count of <code>Throwable</code>s in the\n     * chain\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/Nestable.java",
        "class_name": "org.apache.commons.lang.exception.Nestable",
        "signature": "org.apache.commons.lang.exception.Nestable.getThrowableCount()",
        "snippet": "    public int getThrowableCount();",
        "begin_line": 97,
        "end_line": 97,
        "comment": "\n     * Returns the number of nested <code>Throwable</code>s represented by\n     * this <code>Nestable</code>, including this <code>Nestable</code>.\n     *\n     * @return the throwable count\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/Nestable.java",
        "class_name": "org.apache.commons.lang.exception.Nestable",
        "signature": "org.apache.commons.lang.exception.Nestable.getThrowables()",
        "snippet": "    public Throwable[] getThrowables();",
        "begin_line": 106,
        "end_line": 106,
        "comment": "\n     * Returns this <code>Nestable</code> and any nested <code>Throwable</code>s\n     * in an array of <code>Throwable</code>s, one element for each\n     * <code>Throwable</code>.\n     *\n     * @return the <code>Throwable</code>s\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/Nestable.java",
        "class_name": "org.apache.commons.lang.exception.Nestable",
        "signature": "org.apache.commons.lang.exception.Nestable.indexOfThrowable(java.lang.Class)",
        "snippet": "    public int indexOfThrowable(Class type);",
        "begin_line": 123,
        "end_line": 123,
        "comment": "\n     * Returns the index, numbered from 0, of the first occurrence of the\n     * specified type, or a subclass, in the chain of <code>Throwable</code>s.\n     * The method returns -1 if the specified type is not found in the chain.\n     * <p>\n     * NOTE: From v2.1, we have clarified the <code>Nestable</code> interface\n     * such that this method matches subclasses.\n     * If you want to NOT match subclasses, please use\n     * {@link ExceptionUtils#indexOfThrowable(Throwable, Class)}\n     * (which is avaiable in all versions of lang).\n     *\n     * @param type  the type to find, subclasses match, null returns -1\n     * @return index of the first occurrence of the type in the chain, or -1 if\n     * the type is not found\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/Nestable.java",
        "class_name": "org.apache.commons.lang.exception.Nestable",
        "signature": "org.apache.commons.lang.exception.Nestable.indexOfThrowable(java.lang.Class, int)",
        "snippet": "    public int indexOfThrowable(Class type, int fromIndex);",
        "begin_line": 146,
        "end_line": 146,
        "comment": "\n     * Returns the index, numbered from 0, of the first <code>Throwable</code>\n     * that matches the specified type, or a subclass, in the chain of <code>Throwable</code>s\n     * with an index greater than or equal to the specified index.\n     * The method returns -1 if the specified type is not found in the chain.\n     * <p>\n     * NOTE: From v2.1, we have clarified the <code>Nestable</code> interface\n     * such that this method matches subclasses.\n     * If you want to NOT match subclasses, please use\n     * {@link ExceptionUtils#indexOfThrowable(Throwable, Class, int)}\n     * (which is avaiable in all versions of lang).\n     *\n     * @param type  the type to find, subclasses match, null returns -1\n     * @param fromIndex the index, numbered from 0, of the starting position in\n     * the chain to be searched\n     * @return index of the first occurrence of the type in the chain, or -1 if\n     * the type is not found\n     * @throws IndexOutOfBoundsException if the <code>fromIndex</code> argument\n     * is negative or not less than the count of <code>Throwable</code>s in the\n     * chain\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/Nestable.java",
        "class_name": "org.apache.commons.lang.exception.Nestable",
        "signature": "org.apache.commons.lang.exception.Nestable.printStackTrace(java.io.PrintWriter)",
        "snippet": "    public void printStackTrace(PrintWriter out);",
        "begin_line": 155,
        "end_line": 155,
        "comment": "\n     * Prints the stack trace of this exception to the specified print\n     * writer.  Includes information from the exception, if any,\n     * which caused this exception.\n     *\n     * @param out <code>PrintWriter</code> to use for output.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/Nestable.java",
        "class_name": "org.apache.commons.lang.exception.Nestable",
        "signature": "org.apache.commons.lang.exception.Nestable.printStackTrace(java.io.PrintStream)",
        "snippet": "    public void printStackTrace(PrintStream out);",
        "begin_line": 164,
        "end_line": 164,
        "comment": "\n     * Prints the stack trace of this exception to the specified print\n     * stream.  Includes information from the exception, if any,\n     * which caused this exception.\n     *\n     * @param out <code>PrintStream</code> to use for output.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/Nestable.java",
        "class_name": "org.apache.commons.lang.exception.Nestable",
        "signature": "org.apache.commons.lang.exception.Nestable.printPartialStackTrace(java.io.PrintWriter)",
        "snippet": "    public void printPartialStackTrace(PrintWriter out);",
        "begin_line": 176,
        "end_line": 176,
        "comment": "\n     * Prints the stack trace for this exception only--root cause not\n     * included--using the provided writer.  Used by\n     * {@link org.apache.commons.lang.exception.NestableDelegate} to write\n     * individual stack traces to a buffer.  The implementation of\n     * this method should call\n     * <code>super.printStackTrace(out);</code> in most cases.\n     *\n     * @param out The writer to use.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableDelegate.java",
        "class_name": "org.apache.commons.lang.exception.NestableDelegate",
        "signature": "org.apache.commons.lang.exception.NestableDelegate.NestableDelegate(org.apache.commons.lang.exception.Nestable)",
        "snippet": "    public NestableDelegate(Nestable nestable) {\n        if (nestable instanceof Throwable) {\n            this.nestable = (Throwable) nestable;\n        } else {\n            throw new IllegalArgumentException(MUST_BE_THROWABLE);\n        }\n    }",
        "begin_line": 108,
        "end_line": 114,
        "comment": "\n     * Constructs a new <code>NestableDelegate</code> instance to manage the\n     * specified <code>Nestable</code>.\n     *\n     * @param nestable the Nestable implementation (<i>must</i> extend\n     * {@link java.lang.Throwable})\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableDelegate.java",
        "class_name": "org.apache.commons.lang.exception.NestableDelegate",
        "signature": "org.apache.commons.lang.exception.NestableDelegate.getMessage(int)",
        "snippet": "    public String getMessage(int index) {\n        Throwable t = this.getThrowable(index);\n        if (Nestable.class.isInstance(t)) {\n            return ((Nestable) t).getMessage(0);\n        }\n        return t.getMessage();\n    }",
        "begin_line": 129,
        "end_line": 135,
        "comment": "\n     * Returns the error message of the <code>Throwable</code> in the chain of <code>Throwable</code>s at the\n     * specified index, numbered from 0.\n     * \n     * @param index\n     *            the index of the <code>Throwable</code> in the chain of <code>Throwable</code>s\n     * @return the error message, or null if the <code>Throwable</code> at the specified index in the chain does not\n     *         contain a message\n     * @throws IndexOutOfBoundsException\n     *             if the <code>index</code> argument is negative or not less than the count of <code>Throwable</code>s\n     *             in the chain\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableDelegate.java",
        "class_name": "org.apache.commons.lang.exception.NestableDelegate",
        "signature": "org.apache.commons.lang.exception.NestableDelegate.getMessage(java.lang.String)",
        "snippet": "    public String getMessage(String baseMsg) {\n        Throwable nestedCause = ExceptionUtils.getCause(this.nestable);\n        String causeMsg = nestedCause == null ? null : nestedCause.getMessage();\n        if (nestedCause == null || causeMsg == null) {\n            return baseMsg; // may be null, which is a valid result\n        }\n        if (baseMsg == null) {\n            return causeMsg;\n        }\n        return baseMsg + \": \" + causeMsg;\n    }",
        "begin_line": 147,
        "end_line": 157,
        "comment": "\n     * Returns the full message contained by the <code>Nestable</code> and any nested <code>Throwable</code>s.\n     * \n     * @param baseMsg\n     *            the base message to use when creating the full message. Should be generally be called via\n     *            <code>nestableHelper.getMessage(super.getMessage())</code>, where <code>super</code> is an\n     *            instance of {@link java.lang.Throwable}.\n     * @return The concatenated message for this and all nested <code>Throwable</code>s\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableDelegate.java",
        "class_name": "org.apache.commons.lang.exception.NestableDelegate",
        "signature": "org.apache.commons.lang.exception.NestableDelegate.getMessages()",
        "snippet": "    public String[] getMessages() {\n        Throwable[] throwables = this.getThrowables();\n        String[] msgs = new String[throwables.length];\n        for (int i = 0; i < throwables.length; i++) {\n            msgs[i] =\n                (Nestable.class.isInstance(throwables[i])\n                    ? ((Nestable) throwables[i]).getMessage(0)\n                    : throwables[i].getMessage());\n        }\n        return msgs;\n    }",
        "begin_line": 168,
        "end_line": 178,
        "comment": "\n     * Returns the error message of this and any nested <code>Throwable</code>s in an array of Strings, one element\n     * for each message. Any <code>Throwable</code> not containing a message is represented in the array by a null.\n     * This has the effect of cause the length of the returned array to be equal to the result of the\n     * {@link #getThrowableCount()} operation.\n     * \n     * @return the error messages\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableDelegate.java",
        "class_name": "org.apache.commons.lang.exception.NestableDelegate",
        "signature": "org.apache.commons.lang.exception.NestableDelegate.getThrowable(int)",
        "snippet": "    public Throwable getThrowable(int index) {\n        if (index == 0) {\n            return this.nestable;\n        }\n        Throwable[] throwables = this.getThrowables();\n        return throwables[index];\n    }",
        "begin_line": 192,
        "end_line": 198,
        "comment": "\n     * Returns the <code>Throwable</code> in the chain of\n     * <code>Throwable</code>s at the specified index, numbered from 0.\n     *\n     * @param index the index, numbered from 0, of the <code>Throwable</code> in\n     * the chain of <code>Throwable</code>s\n     * @return the <code>Throwable</code>\n     * @throws IndexOutOfBoundsException if the <code>index</code> argument is\n     * negative or not less than the count of <code>Throwable</code>s in the\n     * chain\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableDelegate.java",
        "class_name": "org.apache.commons.lang.exception.NestableDelegate",
        "signature": "org.apache.commons.lang.exception.NestableDelegate.getThrowableCount()",
        "snippet": "    public int getThrowableCount() {\n        return ExceptionUtils.getThrowableCount(this.nestable);\n    }",
        "begin_line": 207,
        "end_line": 209,
        "comment": "\n     * Returns the number of <code>Throwable</code>s contained in the\n     * <code>Nestable</code> contained by this delegate.\n     *\n     * @return the throwable count\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableDelegate.java",
        "class_name": "org.apache.commons.lang.exception.NestableDelegate",
        "signature": "org.apache.commons.lang.exception.NestableDelegate.getThrowables()",
        "snippet": "    public Throwable[] getThrowables() {\n        return ExceptionUtils.getThrowables(this.nestable);\n    }",
        "begin_line": 219,
        "end_line": 221,
        "comment": "\n     * Returns this delegate's <code>Nestable</code> and any nested\n     * <code>Throwable</code>s in an array of <code>Throwable</code>s, one\n     * element for each <code>Throwable</code>.\n     *\n     * @return the <code>Throwable</code>s\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableDelegate.java",
        "class_name": "org.apache.commons.lang.exception.NestableDelegate",
        "signature": "org.apache.commons.lang.exception.NestableDelegate.indexOfThrowable(java.lang.Class, int)",
        "snippet": "    public int indexOfThrowable(Class type, int fromIndex) {\n        if (type == null) {\n            return -1;\n        }\n        if (fromIndex < 0) {\n            throw new IndexOutOfBoundsException(\"The start index was out of bounds: \" + fromIndex);\n        }\n        Throwable[] throwables = ExceptionUtils.getThrowables(this.nestable);\n        if (fromIndex >= throwables.length) {\n            throw new IndexOutOfBoundsException(\"The start index was out of bounds: \"\n                + fromIndex + \" >= \" + throwables.length);\n        }\n        if (matchSubclasses) {\n            for (int i = fromIndex; i < throwables.length; i++) {\n                if (type.isAssignableFrom(throwables[i].getClass())) {\n                    return i;\n                }\n            }\n        } else {\n            for (int i = fromIndex; i < throwables.length; i++) {\n                if (type.equals(throwables[i].getClass())) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }",
        "begin_line": 247,
        "end_line": 273,
        "comment": "\n     * Returns the index, numbered from 0, of the first <code>Throwable</code>\n     * that matches the specified type, or a subclass, in the chain of <code>Throwable</code>s\n     * with an index greater than or equal to the specified index.\n     * The method returns -1 if the specified type is not found in the chain.\n     * <p>\n     * NOTE: From v2.1, we have clarified the <code>Nestable</code> interface\n     * such that this method matches subclasses.\n     * If you want to NOT match subclasses, please use\n     * {@link ExceptionUtils#indexOfThrowable(Throwable, Class, int)}\n     * (which is avaiable in all versions of lang).\n     * An alternative is to use the public static flag {@link #matchSubclasses}\n     * on <code>NestableDelegate</code>, however this is not recommended.\n     *\n     * @param type  the type to find, subclasses match, null returns -1\n     * @param fromIndex the index, numbered from 0, of the starting position in\n     * the chain to be searched\n     * @return index of the first occurrence of the type in the chain, or -1 if\n     * the type is not found\n     * @throws IndexOutOfBoundsException if the <code>fromIndex</code> argument\n     * is negative or not less than the count of <code>Throwable</code>s in the\n     * chain\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableDelegate.java",
        "class_name": "org.apache.commons.lang.exception.NestableDelegate",
        "signature": "org.apache.commons.lang.exception.NestableDelegate.printStackTrace()",
        "snippet": "    public void printStackTrace() {\n        printStackTrace(System.err);\n    }",
        "begin_line": 279,
        "end_line": 281,
        "comment": "\n     * Prints the stack trace of this exception the the standar error\n     * stream.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableDelegate.java",
        "class_name": "org.apache.commons.lang.exception.NestableDelegate",
        "signature": "org.apache.commons.lang.exception.NestableDelegate.printStackTrace(java.io.PrintStream)",
        "snippet": "    public void printStackTrace(PrintStream out) {\n        synchronized (out) {\n            PrintWriter pw = new PrintWriter(out, false);\n            printStackTrace(pw);\n            // Flush the PrintWriter before it's GC'ed.\n            pw.flush();\n        }\n    }",
        "begin_line": 290,
        "end_line": 297,
        "comment": "\n     * Prints the stack trace of this exception to the specified\n     * stream.\n     *\n     * @param out <code>PrintStream</code> to use for output.\n     * @see #printStackTrace(PrintWriter)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableDelegate.java",
        "class_name": "org.apache.commons.lang.exception.NestableDelegate",
        "signature": "org.apache.commons.lang.exception.NestableDelegate.printStackTrace(java.io.PrintWriter)",
        "snippet": "    public void printStackTrace(PrintWriter out) {\n        Throwable throwable = this.nestable;\n        // if running on jre1.4 or higher, use default printStackTrace\n        if (ExceptionUtils.isThrowableNested()) {\n            if (throwable instanceof Nestable) {\n                ((Nestable)throwable).printPartialStackTrace(out);\n            } else {\n                throwable.printStackTrace(out);\n            }\n            return;\n        }\n\n        // generating the nested stack trace\n        List stacks = new ArrayList();\n        while (throwable != null) {\n            String[] st = getStackFrames(throwable);\n            stacks.add(st);\n            throwable = ExceptionUtils.getCause(throwable);\n        }\n\n        // If NOT topDown, reverse the stack\n        String separatorLine = \"Caused by: \";\n        if (!topDown) {\n            separatorLine = \"Rethrown as: \";\n            Collections.reverse(stacks);\n        }\n\n        // Remove the repeated lines in the stack\n        if (trimStackFrames) {\n          trimStackFrames(stacks);\n        }\n\n        synchronized (out) {\n            for (Iterator iter=stacks.iterator(); iter.hasNext();) {\n                String[] st = (String[]) iter.next();\n                for (int i=0, len=st.length; i < len; i++) {\n                    out.println(st[i]);\n                }\n                if (iter.hasNext()) {\n                    out.print(separatorLine);\n                }\n            }\n        }\n    }",
        "begin_line": 310,
        "end_line": 353,
        "comment": "\n     * Prints the stack trace of this exception to the specified\n     * writer. If the Throwable class has a <code>getCause</code>\n     * method (i.e. running on jre1.4 or higher), this method just \n     * uses Throwable's printStackTrace() method. Otherwise, generates\n     * the stack-trace, by taking into account the 'topDown' and \n     * 'trimStackFrames' parameters. The topDown and trimStackFrames \n     * are set to 'true' by default (produces jre1.4-like stack trace).\n     *\n     * @param out <code>PrintWriter</code> to use for output.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableDelegate.java",
        "class_name": "org.apache.commons.lang.exception.NestableDelegate",
        "signature": "org.apache.commons.lang.exception.NestableDelegate.getStackFrames(java.lang.Throwable)",
        "snippet": "    protected String[] getStackFrames(Throwable t) {\n        StringWriter sw = new StringWriter();\n        PrintWriter pw = new PrintWriter(sw, true);\n\n        // Avoid infinite loop between decompose() and printStackTrace().\n        if (t instanceof Nestable) {\n            ((Nestable) t).printPartialStackTrace(pw);\n        } else {\n            t.printStackTrace(pw);\n        }\n        return ExceptionUtils.getStackFrames(sw.getBuffer().toString());\n    }",
        "begin_line": 364,
        "end_line": 375,
        "comment": "\n     * Captures the stack trace associated with the specified\n     * <code>Throwable</code> object, decomposing it into a list of\n     * stack frames.\n     *\n     * @param t The <code>Throwable</code>.\n     * @return  An array of strings describing each stack frame.\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/exception/NestableDelegate.java",
        "class_name": "org.apache.commons.lang.exception.NestableDelegate",
        "signature": "org.apache.commons.lang.exception.NestableDelegate.trimStackFrames(java.util.List)",
        "snippet": "    protected void trimStackFrames(List stacks) {\n         for (int size=stacks.size(), i=size-1; i > 0; i--) {\n             String[] curr = (String[]) stacks.get(i);\n             String[] next = (String[]) stacks.get(i-1); \n             \n             List currList = new ArrayList(Arrays.asList(curr));\n             List nextList = new ArrayList(Arrays.asList(next));\n             ExceptionUtils.removeCommonFrames(currList, nextList);\n\n             int trimmed = curr.length - currList.size();\n             if (trimmed > 0) {\n                 currList.add(\"\\t... \"+trimmed+\" more\");\n                 stacks.set(\n                     i, \n                     currList.toArray(new String[currList.size()])\n                 );\n             }\n         }\n     }",
        "begin_line": 385,
        "end_line": 403,
        "comment": "\n     * Trims the stack frames. The first set is left untouched. The rest\n     * of the frames are truncated from the bottom by comparing with\n     * one just on top.\n     *\n     * @param stacks The list containing String[] elements\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrMatcher.java",
        "class_name": "org.apache.commons.lang.text.StrMatcher",
        "signature": "org.apache.commons.lang.text.StrMatcher.commaMatcher()",
        "snippet": "    public static StrMatcher commaMatcher() {\n        return COMMA_MATCHER;\n    }",
        "begin_line": 79,
        "end_line": 81,
        "comment": "\n     * Returns a matcher which matches the comma character.\n     *\n     * @return a matcher for a comma\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrMatcher.java",
        "class_name": "org.apache.commons.lang.text.StrMatcher",
        "signature": "org.apache.commons.lang.text.StrMatcher.tabMatcher()",
        "snippet": "    public static StrMatcher tabMatcher() {\n        return TAB_MATCHER;\n    }",
        "begin_line": 88,
        "end_line": 90,
        "comment": "\n     * Returns a matcher which matches the tab character.\n     *\n     * @return a matcher for a tab\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrMatcher.java",
        "class_name": "org.apache.commons.lang.text.StrMatcher",
        "signature": "org.apache.commons.lang.text.StrMatcher.spaceMatcher()",
        "snippet": "    public static StrMatcher spaceMatcher() {\n        return SPACE_MATCHER;\n    }",
        "begin_line": 97,
        "end_line": 99,
        "comment": "\n     * Returns a matcher which matches the space character.\n     *\n     * @return a matcher for a space\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrMatcher.java",
        "class_name": "org.apache.commons.lang.text.StrMatcher",
        "signature": "org.apache.commons.lang.text.StrMatcher.splitMatcher()",
        "snippet": "    public static StrMatcher splitMatcher() {\n        return SPLIT_MATCHER;\n    }",
        "begin_line": 107,
        "end_line": 109,
        "comment": "\n     * Matches the same characters as StringTokenizer,\n     * namely space, tab, newline and formfeed.\n     *\n     * @return the split matcher\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrMatcher.java",
        "class_name": "org.apache.commons.lang.text.StrMatcher",
        "signature": "org.apache.commons.lang.text.StrMatcher.trimMatcher()",
        "snippet": "    public static StrMatcher trimMatcher() {\n        return TRIM_MATCHER;\n    }",
        "begin_line": 116,
        "end_line": 118,
        "comment": "\n     * Matches the String trim() whitespace characters.\n     *\n     * @return the trim matcher\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrMatcher.java",
        "class_name": "org.apache.commons.lang.text.StrMatcher",
        "signature": "org.apache.commons.lang.text.StrMatcher.singleQuoteMatcher()",
        "snippet": "    public static StrMatcher singleQuoteMatcher() {\n        return SINGLE_QUOTE_MATCHER;\n    }",
        "begin_line": 125,
        "end_line": 127,
        "comment": "\n     * Returns a matcher which matches the single quote character.\n     *\n     * @return a matcher for a single quote\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrMatcher.java",
        "class_name": "org.apache.commons.lang.text.StrMatcher",
        "signature": "org.apache.commons.lang.text.StrMatcher.doubleQuoteMatcher()",
        "snippet": "    public static StrMatcher doubleQuoteMatcher() {\n        return DOUBLE_QUOTE_MATCHER;\n    }",
        "begin_line": 134,
        "end_line": 136,
        "comment": "\n     * Returns a matcher which matches the double quote character.\n     *\n     * @return a matcher for a double quote\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrMatcher.java",
        "class_name": "org.apache.commons.lang.text.StrMatcher",
        "signature": "org.apache.commons.lang.text.StrMatcher.quoteMatcher()",
        "snippet": "    public static StrMatcher quoteMatcher() {\n        return QUOTE_MATCHER;\n    }",
        "begin_line": 143,
        "end_line": 145,
        "comment": "\n     * Returns a matcher which matches the single or double quote character.\n     *\n     * @return a matcher for a single or double quote\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrMatcher.java",
        "class_name": "org.apache.commons.lang.text.StrMatcher",
        "signature": "org.apache.commons.lang.text.StrMatcher.noneMatcher()",
        "snippet": "    public static StrMatcher noneMatcher() {\n        return NONE_MATCHER;\n    }",
        "begin_line": 152,
        "end_line": 154,
        "comment": "\n     * Matches no characters.\n     *\n     * @return a matcher that matches nothing\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrMatcher.java",
        "class_name": "org.apache.commons.lang.text.StrMatcher",
        "signature": "org.apache.commons.lang.text.StrMatcher.charMatcher(char)",
        "snippet": "    public static StrMatcher charMatcher(char ch) {\n        return new CharMatcher(ch);\n    }",
        "begin_line": 162,
        "end_line": 164,
        "comment": "\n     * Constructor that creates a matcher from a character.\n     *\n     * @param ch  the character to match, must not be null\n     * @return a new Matcher for the given char\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrMatcher.java",
        "class_name": "org.apache.commons.lang.text.StrMatcher",
        "signature": "org.apache.commons.lang.text.StrMatcher.charSetMatcher(char[])",
        "snippet": "    public static StrMatcher charSetMatcher(char[] chars) {\n        if (chars == null || chars.length == 0) {\n            return NONE_MATCHER;\n        }\n        if (chars.length == 1) {\n            return new CharMatcher(chars[0]);\n        }\n        return new CharSetMatcher(chars);\n    }",
        "begin_line": 172,
        "end_line": 180,
        "comment": "\n     * Constructor that creates a matcher from a set of characters.\n     *\n     * @param chars  the characters to match, null or empty matches nothing\n     * @return a new matcher for the given char[]\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrMatcher.java",
        "class_name": "org.apache.commons.lang.text.StrMatcher",
        "signature": "org.apache.commons.lang.text.StrMatcher.charSetMatcher(java.lang.String)",
        "snippet": "    public static StrMatcher charSetMatcher(String chars) {\n        if (chars == null || chars.length() == 0) {\n            return NONE_MATCHER;\n        }\n        if (chars.length() == 1) {\n            return new CharMatcher(chars.charAt(0));\n        }\n        return new CharSetMatcher(chars.toCharArray());\n    }",
        "begin_line": 188,
        "end_line": 196,
        "comment": "\n     * Constructor that creates a matcher from a string representing a set of characters.\n     *\n     * @param chars  the characters to match, null or empty matches nothing\n     * @return a new Matcher for the given characters\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrMatcher.java",
        "class_name": "org.apache.commons.lang.text.StrMatcher",
        "signature": "org.apache.commons.lang.text.StrMatcher.stringMatcher(java.lang.String)",
        "snippet": "    public static StrMatcher stringMatcher(String str) {\n        if (str == null || str.length() == 0) {\n            return NONE_MATCHER;\n        }\n        return new StringMatcher(str);\n    }",
        "begin_line": 204,
        "end_line": 209,
        "comment": "\n     * Constructor that creates a matcher from a string.\n     *\n     * @param str  the string to match, null or empty matches nothing\n     * @return a new Matcher for the given String\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrMatcher.java",
        "class_name": "org.apache.commons.lang.text.StrMatcher",
        "signature": "org.apache.commons.lang.text.StrMatcher.StrMatcher()",
        "snippet": "    protected StrMatcher() {\n        super();\n    }",
        "begin_line": 215,
        "end_line": 217,
        "comment": "\n     * Constructor.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrMatcher.java",
        "class_name": "org.apache.commons.lang.text.StrMatcher",
        "signature": "org.apache.commons.lang.text.StrMatcher.isMatch(char[], int, int, int)",
        "snippet": "    public abstract int isMatch(char[] buffer, int pos, int bufferStart, int bufferEnd);",
        "begin_line": 244,
        "end_line": 244,
        "comment": "\n     * Returns the number of matching characters, zero for no match.\n     * <p>\n     * This method is called to check for a match.\n     * The parameter <code>pos</code> represents the current position to be\n     * checked in the string <code>buffer</code> (a character array which must\n     * not be changed).\n     * The API guarantees that <code>pos</code> is a valid index for <code>buffer</code>.\n     * <p>\n     * The character array may be larger than the active area to be matched.\n     * Only values in the buffer between the specifed indices may be accessed.\n     * <p>\n     * The matching code may check one character or many.\n     * It may check characters preceeding <code>pos</code> as well as those\n     * after, so long as no checks exceed the bounds specified.\n     * <p>\n     * It must return zero for no match, or a positive number if a match was found.\n     * The number indicates the number of characters that matched.\n     *\n     * @param buffer  the text content to match against, do not change\n     * @param pos  the starting position for the match, valid for buffer\n     * @param bufferStart  the first active index in the buffer, valid for buffer\n     * @param bufferEnd  the end index (exclusive) of the active buffer, valid for buffer\n     * @return the number of matching characters, zero for no match\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrMatcher.java",
        "class_name": "org.apache.commons.lang.text.StrMatcher",
        "signature": "org.apache.commons.lang.text.StrMatcher.CharSetMatcher.CharSetMatcher(char[])",
        "snippet": "        CharSetMatcher(char chars[]) {\n            super();\n            this.chars = (char[]) chars.clone();\n            Arrays.sort(this.chars);\n        }",
        "begin_line": 259,
        "end_line": 263,
        "comment": "\n         * Constructor that creates a matcher from a character array.\n         *\n         * @param chars  the characters to match, must not be null\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrMatcher.java",
        "class_name": "org.apache.commons.lang.text.StrMatcher",
        "signature": "org.apache.commons.lang.text.StrMatcher.CharSetMatcher.isMatch(char[], int, int, int)",
        "snippet": "        public int isMatch(char[] buffer, int pos, int bufferStart, int bufferEnd) {\n            return Arrays.binarySearch(chars, buffer[pos]) >= 0 ? 1 : 0;\n        }",
        "begin_line": 274,
        "end_line": 276,
        "comment": "\n         * Returns whether or not the given charatcer matches.\n         *\n         * @param buffer  the text content to match against, do not change\n         * @param pos  the starting position for the match, valid for buffer\n         * @param bufferStart  the first active index in the buffer, valid for buffer\n         * @param bufferEnd  the end index of the active buffer, valid for buffer\n         * @return the number of matching characters, zero for no match\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrMatcher.java",
        "class_name": "org.apache.commons.lang.text.StrMatcher",
        "signature": "org.apache.commons.lang.text.StrMatcher.CharMatcher.CharMatcher(char)",
        "snippet": "        CharMatcher(char ch) {\n            super();\n            this.ch = ch;\n        }",
        "begin_line": 292,
        "end_line": 295,
        "comment": "\n         * Constructor that creates a matcher that matches a single character.\n         *\n         * @param ch  the character to match\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrMatcher.java",
        "class_name": "org.apache.commons.lang.text.StrMatcher",
        "signature": "org.apache.commons.lang.text.StrMatcher.CharMatcher.isMatch(char[], int, int, int)",
        "snippet": "        public int isMatch(char[] buffer, int pos, int bufferStart, int bufferEnd) {\n            return ch == buffer[pos] ? 1 : 0;\n        }",
        "begin_line": 306,
        "end_line": 308,
        "comment": "\n         * Returns whether or not the given character matches.\n         *\n         * @param buffer  the text content to match against, do not change\n         * @param pos  the starting position for the match, valid for buffer\n         * @param bufferStart  the first active index in the buffer, valid for buffer\n         * @param bufferEnd  the end index of the active buffer, valid for buffer\n         * @return the number of matching characters, zero for no match\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrMatcher.java",
        "class_name": "org.apache.commons.lang.text.StrMatcher",
        "signature": "org.apache.commons.lang.text.StrMatcher.StringMatcher.StringMatcher(java.lang.String)",
        "snippet": "        StringMatcher(String str) {\n            super();\n            chars = str.toCharArray();\n        }",
        "begin_line": 324,
        "end_line": 327,
        "comment": "\n         * Constructor that creates a matcher from a String.\n         *\n         * @param str  the string to match, must not be null\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrMatcher.java",
        "class_name": "org.apache.commons.lang.text.StrMatcher",
        "signature": "org.apache.commons.lang.text.StrMatcher.StringMatcher.isMatch(char[], int, int, int)",
        "snippet": "        public int isMatch(char[] buffer, int pos, int bufferStart, int bufferEnd) {\n            int len = chars.length;\n            if (pos + len > bufferEnd) {\n                return 0;\n            }\n            for (int i = 0; i < chars.length; i++, pos++) {\n                if (chars[i] != buffer[pos]) {\n                    return 0;\n                }\n            }\n            return len;\n        }",
        "begin_line": 338,
        "end_line": 349,
        "comment": "\n         * Returns whether or not the given text matches the stored string.\n         *\n         * @param buffer  the text content to match against, do not change\n         * @param pos  the starting position for the match, valid for buffer\n         * @param bufferStart  the first active index in the buffer, valid for buffer\n         * @param bufferEnd  the end index of the active buffer, valid for buffer\n         * @return the number of matching characters, zero for no match\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrMatcher.java",
        "class_name": "org.apache.commons.lang.text.StrMatcher",
        "signature": "org.apache.commons.lang.text.StrMatcher.NoMatcher.NoMatcher()",
        "snippet": "        NoMatcher() {\n            super();\n        }",
        "begin_line": 361,
        "end_line": 363,
        "comment": "\n         * Constructs a new instance of <code>NoMatcher</code>.\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrMatcher.java",
        "class_name": "org.apache.commons.lang.text.StrMatcher",
        "signature": "org.apache.commons.lang.text.StrMatcher.NoMatcher.isMatch(char[], int, int, int)",
        "snippet": "        public int isMatch(char[] buffer, int pos, int bufferStart, int bufferEnd) {\n            return 0;\n        }",
        "begin_line": 374,
        "end_line": 376,
        "comment": "\n         * Always returns <code>false</code>.\n         *\n         * @param buffer  the text content to match against, do not change\n         * @param pos  the starting position for the match, valid for buffer\n         * @param bufferStart  the first active index in the buffer, valid for buffer\n         * @param bufferEnd  the end index of the active buffer, valid for buffer\n         * @return the number of matching characters, zero for no match\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrMatcher.java",
        "class_name": "org.apache.commons.lang.text.StrMatcher",
        "signature": "org.apache.commons.lang.text.StrMatcher.TrimMatcher.TrimMatcher()",
        "snippet": "        TrimMatcher() {\n            super();\n        }",
        "begin_line": 388,
        "end_line": 390,
        "comment": "\n         * Constructs a new instance of <code>TrimMatcher</code>.\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrMatcher.java",
        "class_name": "org.apache.commons.lang.text.StrMatcher",
        "signature": "org.apache.commons.lang.text.StrMatcher.TrimMatcher.isMatch(char[], int, int, int)",
        "snippet": "        public int isMatch(char[] buffer, int pos, int bufferStart, int bufferEnd) {\n            return buffer[pos] <= 32 ? 1 : 0;\n        }",
        "begin_line": 401,
        "end_line": 403,
        "comment": "\n         * Returns whether or not the given charatcer matches.\n         *\n         * @param buffer  the text content to match against, do not change\n         * @param pos  the starting position for the match, valid for buffer\n         * @param bufferStart  the first active index in the buffer, valid for buffer\n         * @param bufferEnd  the end index of the active buffer, valid for buffer\n         * @return the number of matching characters, zero for no match\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/CompositeFormat.java",
        "class_name": "org.apache.commons.lang.text.CompositeFormat",
        "signature": "org.apache.commons.lang.text.CompositeFormat.CompositeFormat(java.text.Format, java.text.Format)",
        "snippet": "    public CompositeFormat(Format parser, Format formatter) {\n        this.parser = parser;\n        this.formatter = formatter;\n    }",
        "begin_line": 53,
        "end_line": 56,
        "comment": "\n     * Create a format that points its parseObject method to one implementation \n     * and its format method to another. \n     *\n     * @param parser implementation\n     * @param formatter implementation\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/CompositeFormat.java",
        "class_name": "org.apache.commons.lang.text.CompositeFormat",
        "signature": "org.apache.commons.lang.text.CompositeFormat.format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)",
        "snippet": "    public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {\n        return formatter.format(obj,toAppendTo,pos);\n    }",
        "begin_line": 63,
        "end_line": 65,
        "comment": "\n     * Uses the formatter Format instance. \n     *\n     * @see Format#format(Object, StringBuffer, FieldPosition)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/CompositeFormat.java",
        "class_name": "org.apache.commons.lang.text.CompositeFormat",
        "signature": "org.apache.commons.lang.text.CompositeFormat.parseObject(java.lang.String, java.text.ParsePosition)",
        "snippet": "    public Object parseObject(String source, ParsePosition pos) {\n        return parser.parseObject(source,pos);\n    }",
        "begin_line": 72,
        "end_line": 74,
        "comment": "\n     * Uses the parser Format instance. \n     *\n     * @see Format#parseObject(String, ParsePosition)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/CompositeFormat.java",
        "class_name": "org.apache.commons.lang.text.CompositeFormat",
        "signature": "org.apache.commons.lang.text.CompositeFormat.getParser()",
        "snippet": "    public Format getParser() {\n        return this.parser;\n    }",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\n     * Provides access to the parser Format implementation. \n     *\n     * @return parser Format implementation\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/CompositeFormat.java",
        "class_name": "org.apache.commons.lang.text.CompositeFormat",
        "signature": "org.apache.commons.lang.text.CompositeFormat.getFormatter()",
        "snippet": "    public Format getFormatter() {\n        return this.formatter;\n    }",
        "begin_line": 90,
        "end_line": 92,
        "comment": "\n     * Provides access to the parser Format implementation. \n     *\n     * @return formatter Format implementation\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/CompositeFormat.java",
        "class_name": "org.apache.commons.lang.text.CompositeFormat",
        "signature": "org.apache.commons.lang.text.CompositeFormat.reformat(java.lang.String)",
        "snippet": "    public String reformat(String input) throws ParseException {\n        return format(parseObject(input));\n    }",
        "begin_line": 101,
        "end_line": 103,
        "comment": "\n     * Utility method to parse and then reformat a String. \n     * \n     * @param input String to reformat\n     * @return A reformatted String\n     * @throws ParseException thrown by parseObject(String) call\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrLookup.java",
        "class_name": "org.apache.commons.lang.text.StrLookup",
        "signature": "org.apache.commons.lang.text.StrLookup.noneLookup()",
        "snippet": "    public static StrLookup noneLookup() {\n        return NONE_LOOKUP;\n    }",
        "begin_line": 65,
        "end_line": 67,
        "comment": "\n     * Returns a lookup which always returns null.\n     *\n     * @return a lookup that always returns null, not null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrLookup.java",
        "class_name": "org.apache.commons.lang.text.StrLookup",
        "signature": "org.apache.commons.lang.text.StrLookup.systemPropertiesLookup()",
        "snippet": "    public static StrLookup systemPropertiesLookup() {\n        return SYSTEM_PROPERTIES_LOOKUP;\n    }",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\n     * Returns a lookup which uses {@link System#getProperties() System properties}\n     * to lookup the key to value.\n     * <p>\n     * If a security manager blocked access to system properties, then null will\n     * be returned from every lookup.\n     * <p>\n     * If a null key is used, this lookup will throw a NullPointerException.\n     *\n     * @return a lookup using system properties, not null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrLookup.java",
        "class_name": "org.apache.commons.lang.text.StrLookup",
        "signature": "org.apache.commons.lang.text.StrLookup.mapLookup(java.util.Map)",
        "snippet": "    public static StrLookup mapLookup(Map map) {\n        return new MapStrLookup(map);\n    }",
        "begin_line": 93,
        "end_line": 95,
        "comment": "\n     * Returns a lookup which looks up values using a map.\n     * <p>\n     * If the map is null, then null will be returned from every lookup.\n     * The map result object is converted to a string using toString().\n     *\n     * @param map  the map of keys to values, may be null\n     * @return a lookup using the map, not null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrLookup.java",
        "class_name": "org.apache.commons.lang.text.StrLookup",
        "signature": "org.apache.commons.lang.text.StrLookup.StrLookup()",
        "snippet": "    protected StrLookup() {\n        super();\n    }",
        "begin_line": 101,
        "end_line": 103,
        "comment": "\n     * Constructor.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrLookup.java",
        "class_name": "org.apache.commons.lang.text.StrLookup",
        "signature": "org.apache.commons.lang.text.StrLookup.lookup(java.lang.String)",
        "snippet": "    public abstract String lookup(String key);",
        "begin_line": 121,
        "end_line": 121,
        "comment": "\n     * Looks up a String key to a String value.\n     * <p>\n     * The internal implementation may use any mechanism to return the value.\n     * The simplest implementation is to use a Map. However, virtually any\n     * implementation is possible.\n     * <p>\n     * For example, it would be possible to implement a lookup that used the\n     * key as a primary key, and looked up the value on demand from the database\n     * Or, a numeric based implementation could be created that treats the key\n     * as an integer, increments the value and return the result as a string -\n     * converting 1 to 2, 15 to 16 etc.\n     *\n     * @param key  the key to be looked up, may be null\n     * @return the matching value, null if no match\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrLookup.java",
        "class_name": "org.apache.commons.lang.text.StrLookup",
        "signature": "org.apache.commons.lang.text.StrLookup.MapStrLookup.MapStrLookup(java.util.Map)",
        "snippet": "        MapStrLookup(Map map) {\n            this.map = map;\n        }",
        "begin_line": 137,
        "end_line": 139,
        "comment": "\n         * Creates a new instance backed by a Map.\n         *\n         * @param map  the map of keys to values, may be null\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrLookup.java",
        "class_name": "org.apache.commons.lang.text.StrLookup",
        "signature": "org.apache.commons.lang.text.StrLookup.MapStrLookup.lookup(java.lang.String)",
        "snippet": "        public String lookup(String key) {\n            if (map == null) {\n                return null;\n            }\n            Object obj = map.get(key);\n            if (obj == null) {\n                return null;\n            }\n            return obj.toString();\n        }",
        "begin_line": 150,
        "end_line": 159,
        "comment": "\n         * Looks up a String key to a String value using the map.\n         * <p>\n         * If the map is null, then null is returned.\n         * The map result object is converted to a string using toString().\n         *\n         * @param key  the key to be looked up, may be null\n         * @return the matching value, null if no match\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.getCSVClone()",
        "snippet": "    private static StrTokenizer getCSVClone() {\n        return (StrTokenizer) CSV_TOKENIZER_PROTOTYPE.clone();\n    }",
        "begin_line": 138,
        "end_line": 140,
        "comment": "\n     * Returns a clone of <code>CSV_TOKENIZER_PROTOTYPE</code>.\n     * \n     * @return a clone of <code>CSV_TOKENIZER_PROTOTYPE</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.getCSVInstance()",
        "snippet": "    public static StrTokenizer getCSVInstance() {\n        return getCSVClone();\n    }",
        "begin_line": 151,
        "end_line": 153,
        "comment": "\n     * Gets a new tokenizer instance which parses Comma Seperated Value strings\n     * initializing it with the given input.  The default for CSV processing\n     * will be trim whitespace from both ends (which can be overriden with\n     * the setTrimmer method).\n     * <p>\n     * You must call a \"reset\" method to set the string which you want to parse.\n     * @return a new tokenizer instance which parses Comma Seperated Value strings\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.getCSVInstance(java.lang.String)",
        "snippet": "    public static StrTokenizer getCSVInstance(String input) {\n        StrTokenizer tok = getCSVClone();\n        tok.reset(input);\n        return tok;\n    }",
        "begin_line": 164,
        "end_line": 168,
        "comment": "\n     * Gets a new tokenizer instance which parses Comma Seperated Value strings\n     * initializing it with the given input.  The default for CSV processing\n     * will be trim whitespace from both ends (which can be overriden with\n     * the setTrimmer method).\n     *\n     * @param input  the text to parse\n     * @return a new tokenizer instance which parses Comma Seperated Value strings\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.getCSVInstance(char[])",
        "snippet": "    public static StrTokenizer getCSVInstance(char[] input) {\n        StrTokenizer tok = getCSVClone();\n        tok.reset(input);\n        return tok;\n    }",
        "begin_line": 179,
        "end_line": 183,
        "comment": "\n     * Gets a new tokenizer instance which parses Comma Seperated Value strings\n     * initializing it with the given input.  The default for CSV processing\n     * will be trim whitespace from both ends (which can be overriden with\n     * the setTrimmer method).\n     *\n     * @param input  the text to parse\n     * @return a new tokenizer instance which parses Comma Seperated Value strings\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.getTSVClone()",
        "snippet": "    private static StrTokenizer getTSVClone() {\n        return (StrTokenizer) TSV_TOKENIZER_PROTOTYPE.clone();\n    }",
        "begin_line": 190,
        "end_line": 192,
        "comment": "\n     * Returns a clone of <code>TSV_TOKENIZER_PROTOTYPE</code>.\n     * \n     * @return a clone of <code>TSV_TOKENIZER_PROTOTYPE</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.getTSVInstance()",
        "snippet": "    public static StrTokenizer getTSVInstance() {\n        return getTSVClone();\n    }",
        "begin_line": 203,
        "end_line": 205,
        "comment": "\n     * Gets a new tokenizer instance which parses Tab Seperated Value strings.\n     * The default for CSV processing will be trim whitespace from both ends\n     * (which can be overriden with the setTrimmer method).\n     * <p>\n     * You must call a \"reset\" method to set the string which you want to parse.\n     * @return a new tokenizer instance which parses Tab Seperated Value strings.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.getTSVInstance(java.lang.String)",
        "snippet": "    public static StrTokenizer getTSVInstance(String input) {\n        StrTokenizer tok = getTSVClone();\n        tok.reset(input);\n        return tok;\n    }",
        "begin_line": 214,
        "end_line": 218,
        "comment": "\n     * Gets a new tokenizer instance which parses Tab Seperated Value strings.\n     * The default for CSV processing will be trim whitespace from both ends\n     * (which can be overriden with the setTrimmer method).\n     * @param input  the string to parse\n     * @return a new tokenizer instance which parses Tab Seperated Value strings.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.getTSVInstance(char[])",
        "snippet": "    public static StrTokenizer getTSVInstance(char[] input) {\n        StrTokenizer tok = getTSVClone();\n        tok.reset(input);\n        return tok;\n    }",
        "begin_line": 227,
        "end_line": 231,
        "comment": "\n     * Gets a new tokenizer instance which parses Tab Seperated Value strings.\n     * The default for CSV processing will be trim whitespace from both ends\n     * (which can be overriden with the setTrimmer method).\n     * @param input  the string to parse\n     * @return a new tokenizer instance which parses Tab Seperated Value strings.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.StrTokenizer()",
        "snippet": "    public StrTokenizer() {\n        super();\n        this.chars = null;\n    }",
        "begin_line": 240,
        "end_line": 243,
        "comment": "\n     * Constructs a tokenizer splitting on space, tab, newline and formfeed\n     * as per StringTokenizer, but with no text to tokenize.\n     * <p>\n     * This constructor is normally used with {@link #reset(String)}.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.StrTokenizer(java.lang.String)",
        "snippet": "    public StrTokenizer(String input) {\n        super();\n        if (input != null) {\n            chars = input.toCharArray();\n        } else {\n            chars = null;\n        }\n    }",
        "begin_line": 251,
        "end_line": 258,
        "comment": "\n     * Constructs a tokenizer splitting on space, tab, newline and formfeed\n     * as per StringTokenizer.\n     *\n     * @param input  the string which is to be parsed\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.StrTokenizer(java.lang.String, char)",
        "snippet": "    public StrTokenizer(String input, char delim) {\n        this(input);\n        setDelimiterChar(delim);\n    }",
        "begin_line": 266,
        "end_line": 269,
        "comment": "\n     * Constructs a tokenizer splitting on the specified delimiter character.\n     *\n     * @param input  the string which is to be parsed\n     * @param delim  the field delimiter character\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.StrTokenizer(java.lang.String, java.lang.String)",
        "snippet": "    public StrTokenizer(String input, String delim) {\n        this(input);\n        setDelimiterString(delim);\n    }",
        "begin_line": 277,
        "end_line": 280,
        "comment": "\n     * Constructs a tokenizer splitting on the specified delimiter string.\n     *\n     * @param input  the string which is to be parsed\n     * @param delim  the field delimiter string\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.StrTokenizer(java.lang.String, org.apache.commons.lang.text.StrMatcher)",
        "snippet": "    public StrTokenizer(String input, StrMatcher delim) {\n        this(input);\n        setDelimiterMatcher(delim);\n    }",
        "begin_line": 288,
        "end_line": 291,
        "comment": "\n     * Constructs a tokenizer splitting using the specified delimiter matcher.\n     *\n     * @param input  the string which is to be parsed\n     * @param delim  the field delimiter matcher\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.StrTokenizer(java.lang.String, char, char)",
        "snippet": "    public StrTokenizer(String input, char delim, char quote) {\n        this(input, delim);\n        setQuoteChar(quote);\n    }",
        "begin_line": 301,
        "end_line": 304,
        "comment": "\n     * Constructs a tokenizer splitting on the specified delimiter character\n     * and handling quotes using the specified quote character.\n     *\n     * @param input  the string which is to be parsed\n     * @param delim  the field delimiter character\n     * @param quote  the field quoted string character\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.StrTokenizer(java.lang.String, org.apache.commons.lang.text.StrMatcher, org.apache.commons.lang.text.StrMatcher)",
        "snippet": "    public StrTokenizer(String input, StrMatcher delim, StrMatcher quote) {\n        this(input, delim);\n        setQuoteMatcher(quote);\n    }",
        "begin_line": 314,
        "end_line": 317,
        "comment": "\n     * Constructs a tokenizer splitting using the specified delimiter matcher\n     * and handling quotes using the specified quote matcher.\n     *\n     * @param input  the string which is to be parsed\n     * @param delim  the field delimiter matcher\n     * @param quote  the field quoted string matcher\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.StrTokenizer(char[])",
        "snippet": "    public StrTokenizer(char[] input) {\n        super();\n        this.chars = input;\n    }",
        "begin_line": 328,
        "end_line": 331,
        "comment": "\n     * Constructs a tokenizer splitting on space, tab, newline and formfeed\n     * as per StringTokenizer.\n     * <p>\n     * The input character array is not cloned, and must not be altered after\n     * passing in to this method.\n     *\n     * @param input  the string which is to be parsed, not cloned\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.StrTokenizer(char[], char)",
        "snippet": "    public StrTokenizer(char[] input, char delim) {\n        this(input);\n        setDelimiterChar(delim);\n    }",
        "begin_line": 342,
        "end_line": 345,
        "comment": "\n     * Constructs a tokenizer splitting on the specified character.\n     * <p>\n     * The input character array is not cloned, and must not be altered after\n     * passing in to this method.\n     *\n     * @param input  the string which is to be parsed, not cloned\n     * @param delim the field delimiter character\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.StrTokenizer(char[], java.lang.String)",
        "snippet": "    public StrTokenizer(char[] input, String delim) {\n        this(input);\n        setDelimiterString(delim);\n    }",
        "begin_line": 356,
        "end_line": 359,
        "comment": "\n     * Constructs a tokenizer splitting on the specified string.\n     * <p>\n     * The input character array is not cloned, and must not be altered after\n     * passing in to this method.\n     *\n     * @param input  the string which is to be parsed, not cloned\n     * @param delim the field delimiter string\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.StrTokenizer(char[], org.apache.commons.lang.text.StrMatcher)",
        "snippet": "    public StrTokenizer(char[] input, StrMatcher delim) {\n        this(input);\n        setDelimiterMatcher(delim);\n    }",
        "begin_line": 370,
        "end_line": 373,
        "comment": "\n     * Constructs a tokenizer splitting using the specified delimiter matcher.\n     * <p>\n     * The input character array is not cloned, and must not be altered after\n     * passing in to this method.\n     *\n     * @param input  the string which is to be parsed, not cloned\n     * @param delim  the field delimiter matcher\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.StrTokenizer(char[], char, char)",
        "snippet": "    public StrTokenizer(char[] input, char delim, char quote) {\n        this(input, delim);\n        setQuoteChar(quote);\n    }",
        "begin_line": 386,
        "end_line": 389,
        "comment": "\n     * Constructs a tokenizer splitting on the specified delimiter character\n     * and handling quotes using the specified quote character.\n     * <p>\n     * The input character array is not cloned, and must not be altered after\n     * passing in to this method.\n     *\n     * @param input  the string which is to be parsed, not cloned\n     * @param delim  the field delimiter character\n     * @param quote  the field quoted string character\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.StrTokenizer(char[], org.apache.commons.lang.text.StrMatcher, org.apache.commons.lang.text.StrMatcher)",
        "snippet": "    public StrTokenizer(char[] input, StrMatcher delim, StrMatcher quote) {\n        this(input, delim);\n        setQuoteMatcher(quote);\n    }",
        "begin_line": 402,
        "end_line": 405,
        "comment": "\n     * Constructs a tokenizer splitting using the specified delimiter matcher\n     * and handling quotes using the specified quote matcher.\n     * <p>\n     * The input character array is not cloned, and must not be altered after\n     * passing in to this method.\n     *\n     * @param input  the string which is to be parsed, not cloned\n     * @param delim  the field delimiter character\n     * @param quote  the field quoted string character\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.size()",
        "snippet": "    public int size() {\n        checkTokenized();\n        return tokens.length;\n    }",
        "begin_line": 414,
        "end_line": 417,
        "comment": "\n     * Gets the number of tokens found in the String.\n     *\n     * @return the number of matched tokens\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.nextToken()",
        "snippet": "    public String nextToken() {\n        if (hasNext()) {\n            return tokens[tokenPos++];\n        }\n        return null;\n    }",
        "begin_line": 424,
        "end_line": 429,
        "comment": "\n     * Gets the next token from the String.\n     *\n     * @return the next sequential token, or null when no more tokens are found\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.previousToken()",
        "snippet": "    public String previousToken() {\n        if (hasPrevious()) {\n            return tokens[--tokenPos];\n        }\n        return null;\n    }",
        "begin_line": 436,
        "end_line": 441,
        "comment": "\n     * Gets the previous token from the String.\n     *\n     * @return the previous sequential token, or null when no more tokens are found\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.getTokenArray()",
        "snippet": "    public String[] getTokenArray() {\n        checkTokenized();\n        return (String[]) tokens.clone();\n    }",
        "begin_line": 448,
        "end_line": 451,
        "comment": "\n     * Gets a copy of the full token list as an independent modifiable array.\n     *\n     * @return the tokens as a String array\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.getTokenList()",
        "snippet": "    public List getTokenList() {\n        checkTokenized();\n        List list = new ArrayList(tokens.length);\n        for (int i = 0; i < tokens.length; i++) {\n            list.add(tokens[i]);\n        }\n        return list;\n    }",
        "begin_line": 458,
        "end_line": 465,
        "comment": "\n     * Gets a copy of the full token list as an independent modifiable list.\n     *\n     * @return the tokens as a String array\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.reset()",
        "snippet": "    public StrTokenizer reset() {\n        tokenPos = 0;\n        tokens = null;\n        return this;\n    }",
        "begin_line": 474,
        "end_line": 478,
        "comment": "\n     * Resets this tokenizer, forgetting all parsing and iteration already completed.\n     * <p>\n     * This method allows the same tokenizer to be reused for the same String.\n     *\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.reset(java.lang.String)",
        "snippet": "    public StrTokenizer reset(String input) {\n        reset();\n        if (input != null) {\n            this.chars = input.toCharArray();\n        } else {\n            this.chars = null;\n        }\n        return this;\n    }",
        "begin_line": 488,
        "end_line": 496,
        "comment": "\n     * Reset this tokenizer, giving it a new input string to parse.\n     * In this manner you can re-use a tokenizer with the same settings\n     * on multiple input lines.\n     *\n     * @param input  the new string to tokenize, null sets no text to parse\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.reset(char[])",
        "snippet": "    public StrTokenizer reset(char[] input) {\n        reset();\n        this.chars = input;\n        return this;\n    }",
        "begin_line": 509,
        "end_line": 513,
        "comment": "\n     * Reset this tokenizer, giving it a new input string to parse.\n     * In this manner you can re-use a tokenizer with the same settings\n     * on multiple input lines.\n     * <p>\n     * The input character array is not cloned, and must not be altered after\n     * passing in to this method.\n     *\n     * @param input  the new character array to tokenize, not cloned, null sets no text to parse\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.hasNext()",
        "snippet": "    public boolean hasNext() {\n        checkTokenized();\n        return tokenPos < tokens.length;\n    }",
        "begin_line": 522,
        "end_line": 525,
        "comment": "\n     * Checks whether there are any more tokens.\n     *\n     * @return true if there are more tokens\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.next()",
        "snippet": "    public Object next() {\n        if (hasNext()) {\n            return tokens[tokenPos++];\n        }\n        throw new NoSuchElementException();\n    }",
        "begin_line": 532,
        "end_line": 537,
        "comment": "\n     * Gets the next token. This method is equivalent to {@link #nextToken()}.\n     *\n     * @return the next String token\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.nextIndex()",
        "snippet": "    public int nextIndex() {\n        return tokenPos;\n    }",
        "begin_line": 544,
        "end_line": 546,
        "comment": "\n     * Gets the index of the next token to return.\n     *\n     * @return the next token index\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.hasPrevious()",
        "snippet": "    public boolean hasPrevious() {\n        checkTokenized();\n        return tokenPos > 0;\n    }",
        "begin_line": 553,
        "end_line": 556,
        "comment": "\n     * Checks whether there are any previous tokens that can be iterated to.\n     *\n     * @return true if there are previous tokens\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.previous()",
        "snippet": "    public Object previous() {\n        if (hasPrevious()) {\n            return tokens[--tokenPos];\n        }\n        throw new NoSuchElementException();\n    }",
        "begin_line": 563,
        "end_line": 568,
        "comment": "\n     * Gets the token previous to the last returned token.\n     *\n     * @return the previous token\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.previousIndex()",
        "snippet": "    public int previousIndex() {\n        return tokenPos - 1;\n    }",
        "begin_line": 575,
        "end_line": 577,
        "comment": "\n     * Gets the index of the previous token.\n     *\n     * @return the previous token index\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.remove()",
        "snippet": "    public void remove() {\n        throw new UnsupportedOperationException(\"remove() is unsupported\");\n    }",
        "begin_line": 584,
        "end_line": 586,
        "comment": "\n     * Unsupported ListIterator operation.\n     *\n     * @throws UnsupportedOperationException always\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.set(java.lang.Object)",
        "snippet": "    public void set(Object obj) {\n        throw new UnsupportedOperationException(\"set() is unsupported\");\n    }",
        "begin_line": 593,
        "end_line": 595,
        "comment": "\n     * Unsupported ListIterator operation.\n     * @param obj this parameter ignored.\n     * @throws UnsupportedOperationException always\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.add(java.lang.Object)",
        "snippet": "    public void add(Object obj) {\n        throw new UnsupportedOperationException(\"add() is unsupported\");\n    }",
        "begin_line": 602,
        "end_line": 604,
        "comment": "\n     * Unsupported ListIterator operation.\n     * @param obj this parameter ignored.\n     * @throws UnsupportedOperationException always\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.checkTokenized()",
        "snippet": "    private void checkTokenized() {\n        if (tokens == null) {\n            if (chars == null) {\n                // still call tokenize as subclass may do some work\n                List split = tokenize(null, 0, 0);\n                tokens = (String[]) split.toArray(new String[split.size()]);\n            } else {\n                List split = tokenize(chars, 0, chars.length);\n                tokens = (String[]) split.toArray(new String[split.size()]);\n            }\n        }\n    }",
        "begin_line": 611,
        "end_line": 622,
        "comment": "\n     * Checks if tokenization has been done, and if not then do it.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.tokenize(char[], int, int)",
        "snippet": "    protected List tokenize(char[] chars, int offset, int count) {\n        if (chars == null || count == 0) {\n            return Collections.EMPTY_LIST;\n        }\n        StrBuilder buf = new StrBuilder();\n        List tokens = new ArrayList();\n        int pos = offset;\n        \n        // loop around the entire buffer\n        while (pos >= 0 && pos < count) {\n            // find next token\n            pos = readNextToken(chars, pos, count, buf, tokens);\n            \n            // handle case where end of string is a delimiter\n            if (pos >= count) {\n                addToken(tokens, \"\");\n            }\n        }\n        return tokens;\n    }",
        "begin_line": 644,
        "end_line": 663,
        "comment": "\n     * Internal method to performs the tokenization.\n     * <p>\n     * Most users of this class do not need to call this method. This method\n     * will be called automatically by other (public) methods when required.\n     * <p>\n     * This method exists to allow subclasses to add code before or after the\n     * tokenization. For example, a subclass could alter the character array,\n     * offset or count to be parsed, or call the tokenizer multiple times on\n     * multiple strings. It is also be possible to filter the results.\n     * <p>\n     * <code>StrTokenizer</code> will always pass a zero offset and a count\n     * equal to the length of the array to this method, however a subclass\n     * may pass other values, or even an entirely different array.\n     * \n     * @param chars  the character array being tokenized, may be null\n     * @param offset  the start position within the character array, must be valid\n     * @param count  the number of characters to tokenize, must be valid\n     * @return the modifiable list of String tokens, unmodifiable if null array or zero count\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.addToken(java.util.List, java.lang.String)",
        "snippet": "    private void addToken(List list, String tok) {\n        if (tok == null || tok.length() == 0) {\n            if (isIgnoreEmptyTokens()) {\n                return;\n            }\n            if (isEmptyTokenAsNull()) {\n                tok = null;\n            }\n        }\n        list.add(tok);\n    }",
        "begin_line": 671,
        "end_line": 681,
        "comment": "\n     * Adds a token to a list, paying attention to the parameters we've set.\n     *\n     * @param list  the list to add to\n     * @param tok  the token to add\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.readNextToken(char[], int, int, org.apache.commons.lang.text.StrBuilder, java.util.List)",
        "snippet": "    private int readNextToken(char[] chars, int start, int len, StrBuilder workArea, List tokens) {\n        // skip all leading whitespace, unless it is the\n        // field delimiter or the quote character\n        while (start < len) {\n            int removeLen = Math.max(\n                    getIgnoredMatcher().isMatch(chars, start, start, len),\n                    getTrimmerMatcher().isMatch(chars, start, start, len));\n            if (removeLen == 0 ||\n                getDelimiterMatcher().isMatch(chars, start, start, len) > 0 ||\n                getQuoteMatcher().isMatch(chars, start, start, len) > 0) {\n                break;\n            }\n            start += removeLen;\n        }\n        \n        // handle reaching end\n        if (start >= len) {\n            addToken(tokens, \"\");\n            return -1;\n        }\n        \n        // handle empty token\n        int delimLen = getDelimiterMatcher().isMatch(chars, start, start, len);\n        if (delimLen > 0) {\n            addToken(tokens, \"\");\n            return start + delimLen;\n        }\n        \n        // handle found token\n        int quoteLen = getQuoteMatcher().isMatch(chars, start, start, len);\n        if (quoteLen > 0) {\n            return readWithQuotes(chars, start + quoteLen, len, workArea, tokens, start, quoteLen);\n        }\n        return readWithQuotes(chars, start, len, workArea, tokens, 0, 0);\n    }",
        "begin_line": 694,
        "end_line": 728,
        "comment": "\n     * Reads character by character through the String to get the next token.\n     *\n     * @param chars  the character array being tokenized\n     * @param start  the first character of field\n     * @param len  the length of the character array being tokenized\n     * @param workArea  a temporary work area\n     * @param tokens  the list of parsed tokens\n     * @return the starting position of the next field (the character\n     *  immediately after the delimiter), or -1 if end of string found\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.readWithQuotes(char[], int, int, org.apache.commons.lang.text.StrBuilder, java.util.List, int, int)",
        "snippet": "    private int readWithQuotes(char[] chars, int start, int len, StrBuilder workArea, \n                               List tokens, int quoteStart, int quoteLen) \n    {\n        // Loop until we've found the end of the quoted\n        // string or the end of the input\n        workArea.clear();\n        int pos = start;\n        boolean quoting = (quoteLen > 0);\n        int trimStart = 0;\n        \n        while (pos < len) {\n            // quoting mode can occur several times throughout a string\n            // we must switch between quoting and non-quoting until we\n            // encounter a non-quoted delimiter, or end of string\n            if (quoting) {\n                // In quoting mode\n                \n                // If we've found a quote character, see if it's\n                // followed by a second quote.  If so, then we need\n                // to actually put the quote character into the token\n                // rather than end the token.\n                if (isQuote(chars, pos, len, quoteStart, quoteLen)) {\n                    if (isQuote(chars, pos + quoteLen, len, quoteStart, quoteLen)) {\n                        // matched pair of quotes, thus an escaped quote\n                        workArea.append(chars, pos, quoteLen);\n                        pos += (quoteLen * 2);\n                        trimStart = workArea.size();\n                        continue;\n                    }\n                    \n                    // end of quoting\n                    quoting = false;\n                    pos += quoteLen;\n                    continue;\n                }\n                \n                // copy regular character from inside quotes\n                workArea.append(chars[pos++]);\n                trimStart = workArea.size();\n                \n            } else {\n                // Not in quoting mode\n                \n                // check for delimiter, and thus end of token\n                int delimLen = getDelimiterMatcher().isMatch(chars, pos, start, len);\n                if (delimLen > 0) {\n                    // return condition when end of token found\n                    addToken(tokens, workArea.substring(0, trimStart));\n                    return pos + delimLen;\n                }\n                \n                // check for quote, and thus back into quoting mode\n                if (quoteLen > 0) {\n                    if (isQuote(chars, pos, len, quoteStart, quoteLen)) {\n                        quoting = true;\n                        pos += quoteLen;\n                        continue;\n                    }\n                }\n                \n                // check for ignored (outside quotes), and ignore\n                int ignoredLen = getIgnoredMatcher().isMatch(chars, pos, start, len);\n                if (ignoredLen > 0) {\n                    pos += ignoredLen;\n                    continue;\n                }\n                \n                // check for trimmed character\n                // don't yet know if its at the end, so copy to workArea\n                // use trimStart to keep track of trim at the end\n                int trimmedLen = getTrimmerMatcher().isMatch(chars, pos, start, len);\n                if (trimmedLen > 0) {\n                    workArea.append(chars, pos, trimmedLen);\n                    pos += trimmedLen;\n                    continue;\n                }\n                \n                // copy regular character from outside quotes\n                workArea.append(chars[pos++]);\n                trimStart = workArea.size();\n            }\n        }\n        \n        // return condition when end of string found\n        addToken(tokens, workArea.substring(0, trimStart));\n        return -1;\n    }",
        "begin_line": 744,
        "end_line": 830,
        "comment": "\n     * Reads a possibly quoted string token.\n     *\n     * @param chars  the character array being tokenized\n     * @param start  the first character of field\n     * @param len  the length of the character array being tokenized\n     * @param workArea  a temporary work area\n     * @param tokens  the list of parsed tokens\n     * @param quoteStart  the start position of the matched quote, 0 if no quoting\n     * @param quoteLen  the length of the matched quote, 0 if no quoting\n     * @return the starting position of the next field (the character\n     *  immediately after the delimiter, or if end of string found,\n     *  then the length of string\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.isQuote(char[], int, int, int, int)",
        "snippet": "    private boolean isQuote(char[] chars, int pos, int len, int quoteStart, int quoteLen) {\n        for (int i = 0; i < quoteLen; i++) {\n            if ((pos + i) >= len || chars[pos + i] != chars[quoteStart + i]) {\n                return false;\n            }\n        }\n        return true;\n    }",
        "begin_line": 843,
        "end_line": 850,
        "comment": "\n     * Checks if the characters at the index specified match the quote\n     * already matched in readNextToken().\n     *\n     * @param chars  the character array being tokenized\n     * @param pos  the position to check for a quote\n     * @param len  the length of the character array being tokenized\n     * @param quoteStart  the start position of the matched quote, 0 if no quoting\n     * @param quoteLen  the length of the matched quote, 0 if no quoting\n     * @return true if a quote is matched\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.getDelimiterMatcher()",
        "snippet": "    public StrMatcher getDelimiterMatcher() {\n        return this.delimMatcher;\n    }",
        "begin_line": 859,
        "end_line": 861,
        "comment": "\n     * Gets the field delimiter matcher.\n     *\n     * @return the delimiter matcher in use\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.setDelimiterMatcher(org.apache.commons.lang.text.StrMatcher)",
        "snippet": "    public StrTokenizer setDelimiterMatcher(StrMatcher delim) {\n        if (delim == null) {\n            this.delimMatcher = StrMatcher.noneMatcher();\n        } else {\n            this.delimMatcher = delim;\n        }\n        return this;\n    }",
        "begin_line": 871,
        "end_line": 878,
        "comment": "\n     * Sets the field delimiter matcher.\n     * <p>\n     * The delimitier is used to separate one token from another.\n     *\n     * @param delim  the delimiter matcher to use\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.setDelimiterChar(char)",
        "snippet": "    public StrTokenizer setDelimiterChar(char delim) {\n        return setDelimiterMatcher(StrMatcher.charMatcher(delim));\n    }",
        "begin_line": 886,
        "end_line": 888,
        "comment": "\n     * Sets the field delimiter character.\n     *\n     * @param delim  the delimiter character to use\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.setDelimiterString(java.lang.String)",
        "snippet": "    public StrTokenizer setDelimiterString(String delim) {\n        return setDelimiterMatcher(StrMatcher.stringMatcher(delim));\n    }",
        "begin_line": 896,
        "end_line": 898,
        "comment": "\n     * Sets the field delimiter string.\n     *\n     * @param delim  the delimiter string to use\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.getQuoteMatcher()",
        "snippet": "    public StrMatcher getQuoteMatcher() {\n        return quoteMatcher;\n    }",
        "begin_line": 911,
        "end_line": 913,
        "comment": "\n     * Gets the quote matcher currently in use.\n     * <p>\n     * The quote character is used to wrap data between the tokens.\n     * This enables delimiters to be entered as data.\n     * The default value is '\"' (double quote).\n     *\n     * @return the quote matcher in use\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.setQuoteMatcher(org.apache.commons.lang.text.StrMatcher)",
        "snippet": "    public StrTokenizer setQuoteMatcher(StrMatcher quote) {\n        if (quote != null) {\n            this.quoteMatcher = quote;\n        }\n        return this;\n    }",
        "begin_line": 924,
        "end_line": 929,
        "comment": "\n     * Set the quote matcher to use.\n     * <p>\n     * The quote character is used to wrap data between the tokens.\n     * This enables delimiters to be entered as data.\n     *\n     * @param quote  the quote matcher to use, null ignored\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.setQuoteChar(char)",
        "snippet": "    public StrTokenizer setQuoteChar(char quote) {\n        return setQuoteMatcher(StrMatcher.charMatcher(quote));\n    }",
        "begin_line": 940,
        "end_line": 942,
        "comment": "\n     * Sets the quote character to use.\n     * <p>\n     * The quote character is used to wrap data between the tokens.\n     * This enables delimiters to be entered as data.\n     *\n     * @param quote  the quote character to use\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.getIgnoredMatcher()",
        "snippet": "    public StrMatcher getIgnoredMatcher() {\n        return ignoredMatcher;\n    }",
        "begin_line": 955,
        "end_line": 957,
        "comment": "\n     * Gets the ignored character matcher.\n     * <p>\n     * These characters are ignored when parsing the String, unless they are\n     * within a quoted region.\n     * The default value is not to ignore anything.\n     *\n     * @return the ignored matcher in use\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.setIgnoredMatcher(org.apache.commons.lang.text.StrMatcher)",
        "snippet": "    public StrTokenizer setIgnoredMatcher(StrMatcher ignored) {\n        if (ignored != null) {\n            this.ignoredMatcher = ignored;\n        }\n        return this;\n    }",
        "begin_line": 968,
        "end_line": 973,
        "comment": "\n     * Set the matcher for characters to ignore.\n     * <p>\n     * These characters are ignored when parsing the String, unless they are\n     * within a quoted region.\n     *\n     * @param ignored  the ignored matcher to use, null ignored\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.setIgnoredChar(char)",
        "snippet": "    public StrTokenizer setIgnoredChar(char ignored) {\n        return setIgnoredMatcher(StrMatcher.charMatcher(ignored));\n    }",
        "begin_line": 984,
        "end_line": 986,
        "comment": "\n     * Set the character to ignore.\n     * <p>\n     * This character is ignored when parsing the String, unless it is\n     * within a quoted region.\n     *\n     * @param ignored  the ignored character to use\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.getTrimmerMatcher()",
        "snippet": "    public StrMatcher getTrimmerMatcher() {\n        return trimmerMatcher;\n    }",
        "begin_line": 999,
        "end_line": 1001,
        "comment": "\n     * Gets the trimmer character matcher.\n     * <p>\n     * These characters are trimmed off on each side of the delimiter\n     * until the token or quote is found.\n     * The default value is not to trim anything.\n     *\n     * @return the trimmer matcher in use\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.setTrimmerMatcher(org.apache.commons.lang.text.StrMatcher)",
        "snippet": "    public StrTokenizer setTrimmerMatcher(StrMatcher trimmer) {\n        if (trimmer != null) {\n            this.trimmerMatcher = trimmer;\n        }\n        return this;\n    }",
        "begin_line": 1012,
        "end_line": 1017,
        "comment": "\n     * Sets the matcher for characters to trim.\n     * <p>\n     * These characters are trimmed off on each side of the delimiter\n     * until the token or quote is found.\n     *\n     * @param trimmer  the trimmer matcher to use, null ignored\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.isEmptyTokenAsNull()",
        "snippet": "    public boolean isEmptyTokenAsNull() {\n        return this.emptyAsNull;\n    }",
        "begin_line": 1026,
        "end_line": 1028,
        "comment": "\n     * Gets whether the tokenizer currently returns empty tokens as null.\n     * The default for this property is false.\n     *\n     * @return true if empty tokens are returned as null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.setEmptyTokenAsNull(boolean)",
        "snippet": "    public StrTokenizer setEmptyTokenAsNull(boolean emptyAsNull) {\n        this.emptyAsNull = emptyAsNull;\n        return this;\n    }",
        "begin_line": 1037,
        "end_line": 1040,
        "comment": "\n     * Sets whether the tokenizer should return empty tokens as null.\n     * The default for this property is false.\n     *\n     * @param emptyAsNull  whether empty tokens are returned as null\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.isIgnoreEmptyTokens()",
        "snippet": "    public boolean isIgnoreEmptyTokens() {\n        return ignoreEmptyTokens;\n    }",
        "begin_line": 1049,
        "end_line": 1051,
        "comment": "\n     * Gets whether the tokenizer currently ignores empty tokens.\n     * The default for this property is false.\n     *\n     * @return true if empty tokens are not returned\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.setIgnoreEmptyTokens(boolean)",
        "snippet": "    public StrTokenizer setIgnoreEmptyTokens(boolean ignoreEmptyTokens) {\n        this.ignoreEmptyTokens = ignoreEmptyTokens;\n        return this;\n    }",
        "begin_line": 1060,
        "end_line": 1063,
        "comment": "\n     * Sets whether the tokenizer should ignore and not return empty tokens.\n     * The default for this property is false.\n     *\n     * @param ignoreEmptyTokens  whether empty tokens are not returned\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.getContent()",
        "snippet": "    public String getContent() {\n        if (chars == null) {\n            return null;\n        }\n        return new String(chars);\n    }",
        "begin_line": 1071,
        "end_line": 1076,
        "comment": "\n     * Gets the String content that the tokenizer is parsing.\n     *\n     * @return the string content being parsed\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.clone()",
        "snippet": "    public Object clone() {\n        try {\n            return cloneReset();\n        } catch (CloneNotSupportedException ex) {\n            return null;\n        }\n    }",
        "begin_line": 1086,
        "end_line": 1092,
        "comment": "\n     * Creates a new instance of this Tokenizer. The new instance is reset so\n     * that it will be at the start of the token list.\n     * If a {@link CloneNotSupportedException} is caught, return <code>null</code>.\n     * \n     * @return a new instance of this Tokenizer which has been reset.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.cloneReset()",
        "snippet": "    Object cloneReset() throws CloneNotSupportedException {\n        StrTokenizer cloned = (StrTokenizer) super.clone();\n        if (cloned.chars != null) {\n            cloned.chars = (char[]) cloned.chars.clone();\n        }\n        cloned.reset();\n        return cloned;\n    }",
        "begin_line": 1101,
        "end_line": 1108,
        "comment": "\n     * Creates a new instance of this Tokenizer. The new instance is reset so that\n     * it will be at the start of the token list.\n     * \n     * @return a new instance of this Tokenizer which has been reset.\n     * @throws CloneNotSupportedException if there is a problem cloning\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrTokenizer.java",
        "class_name": "org.apache.commons.lang.text.StrTokenizer",
        "signature": "org.apache.commons.lang.text.StrTokenizer.toString()",
        "snippet": "    public String toString() {\n        if (tokens == null) {\n            return \"StrTokenizer[not tokenized yet]\";\n        } else {\n            return \"StrTokenizer\" + getTokenList();\n        }\n    }",
        "begin_line": 1116,
        "end_line": 1122,
        "comment": "\n     * Gets the String content that the tokenizer is parsing.\n     *\n     * @return the string content being parsed\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrSubstitutor.java",
        "class_name": "org.apache.commons.lang.text.StrSubstitutor",
        "signature": "org.apache.commons.lang.text.StrSubstitutor.replace(java.lang.Object, java.util.Map)",
        "snippet": "    public static String replace(Object source, Map valueMap) {\n        return new StrSubstitutor(valueMap).replace(source);\n    }",
        "begin_line": 133,
        "end_line": 135,
        "comment": "\n     * Replaces all the occurrences of variables in the given source object with\n     * their matching values from the map.\n     *\n     * @param source  the source text containing the variables to substitute, null returns null\n     * @param valueMap  the map with the values, may be null\n     * @return the result of the replace operation\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrSubstitutor.java",
        "class_name": "org.apache.commons.lang.text.StrSubstitutor",
        "signature": "org.apache.commons.lang.text.StrSubstitutor.replace(java.lang.Object, java.util.Map, java.lang.String, java.lang.String)",
        "snippet": "    public static String replace(Object source, Map valueMap, String prefix, String suffix) {\n        return new StrSubstitutor(valueMap, prefix, suffix).replace(source);\n    }",
        "begin_line": 149,
        "end_line": 151,
        "comment": "\n     * Replaces all the occurrences of variables in the given source object with\n     * their matching values from the map. This method allows to specifiy a\n     * custom variable prefix and suffix\n     *\n     * @param source  the source text containing the variables to substitute, null returns null\n     * @param valueMap  the map with the values, may be null\n     * @param prefix  the prefix of variables, not null\n     * @param suffix  the suffix of variables, not null\n     * @return the result of the replace operation\n     * @throws IllegalArgumentException if the prefix or suffix is null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrSubstitutor.java",
        "class_name": "org.apache.commons.lang.text.StrSubstitutor",
        "signature": "org.apache.commons.lang.text.StrSubstitutor.replaceSystemProperties(java.lang.Object)",
        "snippet": "    public static String replaceSystemProperties(Object source) {\n        return new StrSubstitutor(StrLookup.systemPropertiesLookup()).replace(source);\n    }",
        "begin_line": 160,
        "end_line": 162,
        "comment": "\n     * Replaces all the occurrences of variables in the given source object with\n     * their matching values from the system properties.\n     *\n     * @param source  the source text containing the variables to substitute, null returns null\n     * @return the result of the replace operation\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrSubstitutor.java",
        "class_name": "org.apache.commons.lang.text.StrSubstitutor",
        "signature": "org.apache.commons.lang.text.StrSubstitutor.StrSubstitutor()",
        "snippet": "    public StrSubstitutor() {\n        this((StrLookup) null, DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ESCAPE);\n    }",
        "begin_line": 169,
        "end_line": 171,
        "comment": "\n     * Creates a new instance with defaults for variable prefix and suffix\n     * and the escaping character.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrSubstitutor.java",
        "class_name": "org.apache.commons.lang.text.StrSubstitutor",
        "signature": "org.apache.commons.lang.text.StrSubstitutor.StrSubstitutor(java.util.Map)",
        "snippet": "    public StrSubstitutor(Map valueMap) {\n        this(StrLookup.mapLookup(valueMap), DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ESCAPE);\n    }",
        "begin_line": 179,
        "end_line": 181,
        "comment": "\n     * Creates a new instance and initializes it. Uses defaults for variable\n     * prefix and suffix and the escaping character.\n     *\n     * @param valueMap  the map with the variables' values, may be null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrSubstitutor.java",
        "class_name": "org.apache.commons.lang.text.StrSubstitutor",
        "signature": "org.apache.commons.lang.text.StrSubstitutor.StrSubstitutor(java.util.Map, java.lang.String, java.lang.String)",
        "snippet": "    public StrSubstitutor(Map valueMap, String prefix, String suffix) {\n        this(StrLookup.mapLookup(valueMap), prefix, suffix, DEFAULT_ESCAPE);\n    }",
        "begin_line": 191,
        "end_line": 193,
        "comment": "\n     * Creates a new instance and initializes it. Uses a default escaping character.\n     *\n     * @param valueMap  the map with the variables' values, may be null\n     * @param prefix  the prefix for variables, not null\n     * @param suffix  the suffix for variables, not null\n     * @throws IllegalArgumentException if the prefix or suffix is null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrSubstitutor.java",
        "class_name": "org.apache.commons.lang.text.StrSubstitutor",
        "signature": "org.apache.commons.lang.text.StrSubstitutor.StrSubstitutor(java.util.Map, java.lang.String, java.lang.String, char)",
        "snippet": "    public StrSubstitutor(Map valueMap, String prefix, String suffix, char escape) {\n        this(StrLookup.mapLookup(valueMap), prefix, suffix, escape);\n    }",
        "begin_line": 204,
        "end_line": 206,
        "comment": "\n     * Creates a new instance and initializes it.\n     *\n     * @param valueMap  the map with the variables' values, may be null\n     * @param prefix  the prefix for variables, not null\n     * @param suffix  the suffix for variables, not null\n     * @param escape  the escape character\n     * @throws IllegalArgumentException if the prefix or suffix is null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrSubstitutor.java",
        "class_name": "org.apache.commons.lang.text.StrSubstitutor",
        "signature": "org.apache.commons.lang.text.StrSubstitutor.StrSubstitutor(org.apache.commons.lang.text.StrLookup)",
        "snippet": "    public StrSubstitutor(StrLookup variableResolver) {\n        this(variableResolver, DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ESCAPE);\n    }",
        "begin_line": 213,
        "end_line": 215,
        "comment": "\n     * Creates a new instance and initializes it.\n     *\n     * @param variableResolver  the variable resolver, may be null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrSubstitutor.java",
        "class_name": "org.apache.commons.lang.text.StrSubstitutor",
        "signature": "org.apache.commons.lang.text.StrSubstitutor.StrSubstitutor(org.apache.commons.lang.text.StrLookup, java.lang.String, java.lang.String, char)",
        "snippet": "    public StrSubstitutor(StrLookup variableResolver, String prefix, String suffix, char escape) {\n        this.setVariableResolver(variableResolver);\n        this.setVariablePrefix(prefix);\n        this.setVariableSuffix(suffix);\n        this.setEscapeChar(escape);\n    }",
        "begin_line": 226,
        "end_line": 231,
        "comment": "\n     * Creates a new instance and initializes it.\n     *\n     * @param variableResolver  the variable resolver, may be null\n     * @param prefix  the prefix for variables, not null\n     * @param suffix  the suffix for variables, not null\n     * @param escape  the escape character\n     * @throws IllegalArgumentException if the prefix or suffix is null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrSubstitutor.java",
        "class_name": "org.apache.commons.lang.text.StrSubstitutor",
        "signature": "org.apache.commons.lang.text.StrSubstitutor.StrSubstitutor(org.apache.commons.lang.text.StrLookup, org.apache.commons.lang.text.StrMatcher, org.apache.commons.lang.text.StrMatcher, char)",
        "snippet": "    public StrSubstitutor(\n            StrLookup variableResolver, StrMatcher prefixMatcher, StrMatcher suffixMatcher, char escape) {\n        this.setVariableResolver(variableResolver);\n        this.setVariablePrefixMatcher(prefixMatcher);\n        this.setVariableSuffixMatcher(suffixMatcher);\n        this.setEscapeChar(escape);\n    }",
        "begin_line": 242,
        "end_line": 248,
        "comment": "\n     * Creates a new instance and initializes it.\n     *\n     * @param variableResolver  the variable resolver, may be null\n     * @param prefixMatcher  the prefix for variables, not null\n     * @param suffixMatcher  the suffix for variables, not null\n     * @param escape  the escape character\n     * @throws IllegalArgumentException if the prefix or suffix is null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrSubstitutor.java",
        "class_name": "org.apache.commons.lang.text.StrSubstitutor",
        "signature": "org.apache.commons.lang.text.StrSubstitutor.replace(java.lang.String)",
        "snippet": "    public String replace(String source) {\n        if (source == null) {\n            return null;\n        }\n        StrBuilder buf = new StrBuilder(source);\n        if (substitute(buf, 0, source.length()) == false) {\n            return source;\n        }\n        return buf.toString();\n    }",
        "begin_line": 258,
        "end_line": 267,
        "comment": "\n     * Replaces all the occurrences of variables with their matching values\n     * from the resolver using the given source string as a template.\n     *\n     * @param source  the string to replace in, null returns null\n     * @return the result of the replace operation\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrSubstitutor.java",
        "class_name": "org.apache.commons.lang.text.StrSubstitutor",
        "signature": "org.apache.commons.lang.text.StrSubstitutor.replace(java.lang.String, int, int)",
        "snippet": "    public String replace(String source, int offset, int length) {\n        if (source == null) {\n            return null;\n        }\n        StrBuilder buf = new StrBuilder(length).append(source, offset, length);\n        if (substitute(buf, 0, length) == false) {\n            return source.substring(offset, offset + length);\n        }\n        return buf.toString();\n    }",
        "begin_line": 281,
        "end_line": 290,
        "comment": "\n     * Replaces all the occurrences of variables with their matching values\n     * from the resolver using the given source string as a template.\n     * <p>\n     * Only the specified portion of the string will be processed.\n     * The rest of the string is not processed, and is not returned.\n     *\n     * @param source  the string to replace in, null returns null\n     * @param offset  the start offset within the array, must be valid\n     * @param length  the length within the array to be processed, must be valid\n     * @return the result of the replace operation\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrSubstitutor.java",
        "class_name": "org.apache.commons.lang.text.StrSubstitutor",
        "signature": "org.apache.commons.lang.text.StrSubstitutor.replace(char[])",
        "snippet": "    public String replace(char[] source) {\n        if (source == null) {\n            return null;\n        }\n        StrBuilder buf = new StrBuilder(source.length).append(source);\n        substitute(buf, 0, source.length);\n        return buf.toString();\n    }",
        "begin_line": 301,
        "end_line": 308,
        "comment": "\n     * Replaces all the occurrences of variables with their matching values\n     * from the resolver using the given source array as a template.\n     * The array is not altered by this method.\n     *\n     * @param source  the character array to replace in, not altered, null returns null\n     * @return the result of the replace operation\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrSubstitutor.java",
        "class_name": "org.apache.commons.lang.text.StrSubstitutor",
        "signature": "org.apache.commons.lang.text.StrSubstitutor.replace(char[], int, int)",
        "snippet": "    public String replace(char[] source, int offset, int length) {\n        if (source == null) {\n            return null;\n        }\n        StrBuilder buf = new StrBuilder(length).append(source, offset, length);\n        substitute(buf, 0, length);\n        return buf.toString();\n    }",
        "begin_line": 323,
        "end_line": 330,
        "comment": "\n     * Replaces all the occurrences of variables with their matching values\n     * from the resolver using the given source array as a template.\n     * The array is not altered by this method.\n     * <p>\n     * Only the specified portion of the array will be processed.\n     * The rest of the array is not processed, and is not returned.\n     *\n     * @param source  the character array to replace in, not altered, null returns null\n     * @param offset  the start offset within the array, must be valid\n     * @param length  the length within the array to be processed, must be valid\n     * @return the result of the replace operation\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrSubstitutor.java",
        "class_name": "org.apache.commons.lang.text.StrSubstitutor",
        "signature": "org.apache.commons.lang.text.StrSubstitutor.replace(java.lang.StringBuffer)",
        "snippet": "    public String replace(StringBuffer source) {\n        if (source == null) {\n            return null;\n        }\n        StrBuilder buf = new StrBuilder(source.length()).append(source);\n        substitute(buf, 0, buf.length());\n        return buf.toString();\n    }",
        "begin_line": 341,
        "end_line": 348,
        "comment": "\n     * Replaces all the occurrences of variables with their matching values\n     * from the resolver using the given source buffer as a template.\n     * The buffer is not altered by this method.\n     *\n     * @param source  the buffer to use as a template, not changed, null returns null\n     * @return the result of the replace operation\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrSubstitutor.java",
        "class_name": "org.apache.commons.lang.text.StrSubstitutor",
        "signature": "org.apache.commons.lang.text.StrSubstitutor.replace(java.lang.StringBuffer, int, int)",
        "snippet": "    public String replace(StringBuffer source, int offset, int length) {\n        if (source == null) {\n            return null;\n        }\n        StrBuilder buf = new StrBuilder(length).append(source, offset, length);\n        substitute(buf, 0, length);\n        return buf.toString();\n    }",
        "begin_line": 363,
        "end_line": 370,
        "comment": "\n     * Replaces all the occurrences of variables with their matching values\n     * from the resolver using the given source buffer as a template.\n     * The buffer is not altered by this method.\n     * <p>\n     * Only the specified portion of the buffer will be processed.\n     * The rest of the buffer is not processed, and is not returned.\n     *\n     * @param source  the buffer to use as a template, not changed, null returns null\n     * @param offset  the start offset within the array, must be valid\n     * @param length  the length within the array to be processed, must be valid\n     * @return the result of the replace operation\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrSubstitutor.java",
        "class_name": "org.apache.commons.lang.text.StrSubstitutor",
        "signature": "org.apache.commons.lang.text.StrSubstitutor.replace(org.apache.commons.lang.text.StrBuilder)",
        "snippet": "    public String replace(StrBuilder source) {\n        if (source == null) {\n            return null;\n        }\n        StrBuilder buf = new StrBuilder(source.length()).append(source);\n        substitute(buf, 0, buf.length());\n        return buf.toString();\n    }",
        "begin_line": 381,
        "end_line": 388,
        "comment": "\n     * Replaces all the occurrences of variables with their matching values\n     * from the resolver using the given source builder as a template.\n     * The builder is not altered by this method.\n     *\n     * @param source  the builder to use as a template, not changed, null returns null\n     * @return the result of the replace operation\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrSubstitutor.java",
        "class_name": "org.apache.commons.lang.text.StrSubstitutor",
        "signature": "org.apache.commons.lang.text.StrSubstitutor.replace(org.apache.commons.lang.text.StrBuilder, int, int)",
        "snippet": "    public String replace(StrBuilder source, int offset, int length) {\n        if (source == null) {\n            return null;\n        }\n        StrBuilder buf = new StrBuilder(length).append(source, offset, length);\n        substitute(buf, 0, length);\n        return buf.toString();\n    }",
        "begin_line": 403,
        "end_line": 410,
        "comment": "\n     * Replaces all the occurrences of variables with their matching values\n     * from the resolver using the given source builder as a template.\n     * The builder is not altered by this method.\n     * <p>\n     * Only the specified portion of the builder will be processed.\n     * The rest of the builder is not processed, and is not returned.\n     *\n     * @param source  the builder to use as a template, not changed, null returns null\n     * @param offset  the start offset within the array, must be valid\n     * @param length  the length within the array to be processed, must be valid\n     * @return the result of the replace operation\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrSubstitutor.java",
        "class_name": "org.apache.commons.lang.text.StrSubstitutor",
        "signature": "org.apache.commons.lang.text.StrSubstitutor.replace(java.lang.Object)",
        "snippet": "    public String replace(Object source) {\n        if (source == null) {\n            return null;\n        }\n        StrBuilder buf = new StrBuilder().append(source);\n        substitute(buf, 0, buf.length());\n        return buf.toString();\n    }",
        "begin_line": 421,
        "end_line": 428,
        "comment": "\n     * Replaces all the occurrences of variables in the given source object with\n     * their matching values from the resolver. The input source object is\n     * converted to a string using <code>toString</code> and is not altered.\n     *\n     * @param source  the source to replace in, null returns null\n     * @return the result of the replace operation\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrSubstitutor.java",
        "class_name": "org.apache.commons.lang.text.StrSubstitutor",
        "signature": "org.apache.commons.lang.text.StrSubstitutor.replaceIn(java.lang.StringBuffer)",
        "snippet": "    public boolean replaceIn(StringBuffer source) {\n        if (source == null) {\n            return false;\n        }\n        return replaceIn(source, 0, source.length());\n    }",
        "begin_line": 439,
        "end_line": 444,
        "comment": "\n     * Replaces all the occurrences of variables within the given source buffer\n     * with their matching values from the resolver.\n     * The buffer is updated with the result.\n     *\n     * @param source  the buffer to replace in, updated, null returns zero\n     * @return true if altered\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrSubstitutor.java",
        "class_name": "org.apache.commons.lang.text.StrSubstitutor",
        "signature": "org.apache.commons.lang.text.StrSubstitutor.replaceIn(java.lang.StringBuffer, int, int)",
        "snippet": "    public boolean replaceIn(StringBuffer source, int offset, int length) {\n        if (source == null) {\n            return false;\n        }\n        StrBuilder buf = new StrBuilder(length).append(source, offset, length);\n        if (substitute(buf, 0, length) == false) {\n            return false;\n        }\n        source.replace(offset, offset + length, buf.toString());\n        return true;\n    }",
        "begin_line": 459,
        "end_line": 469,
        "comment": "\n     * Replaces all the occurrences of variables within the given source buffer\n     * with their matching values from the resolver.\n     * The buffer is updated with the result.\n     * <p>\n     * Only the specified portion of the buffer will be processed.\n     * The rest of the buffer is not processed, but it is not deleted.\n     *\n     * @param source  the buffer to replace in, updated, null returns zero\n     * @param offset  the start offset within the array, must be valid\n     * @param length  the length within the buffer to be processed, must be valid\n     * @return true if altered\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrSubstitutor.java",
        "class_name": "org.apache.commons.lang.text.StrSubstitutor",
        "signature": "org.apache.commons.lang.text.StrSubstitutor.replaceIn(org.apache.commons.lang.text.StrBuilder)",
        "snippet": "    public boolean replaceIn(StrBuilder source) {\n        if (source == null) {\n            return false;\n        }\n        return substitute(source, 0, source.length());\n    }",
        "begin_line": 479,
        "end_line": 484,
        "comment": "\n     * Replaces all the occurrences of variables within the given source\n     * builder with their matching values from the resolver.\n     *\n     * @param source  the builder to replace in, updated, null returns zero\n     * @return true if altered\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrSubstitutor.java",
        "class_name": "org.apache.commons.lang.text.StrSubstitutor",
        "signature": "org.apache.commons.lang.text.StrSubstitutor.replaceIn(org.apache.commons.lang.text.StrBuilder, int, int)",
        "snippet": "    public boolean replaceIn(StrBuilder source, int offset, int length) {\n        if (source == null) {\n            return false;\n        }\n        return substitute(source, offset, length);\n    }",
        "begin_line": 498,
        "end_line": 503,
        "comment": "\n     * Replaces all the occurrences of variables within the given source\n     * builder with their matching values from the resolver.\n     * <p>\n     * Only the specified portion of the builder will be processed.\n     * The rest of the builder is not processed, but it is not deleted.\n     *\n     * @param source  the builder to replace in, null returns zero\n     * @param offset  the start offset within the array, must be valid\n     * @param length  the length within the builder to be processed, must be valid\n     * @return true if altered\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrSubstitutor.java",
        "class_name": "org.apache.commons.lang.text.StrSubstitutor",
        "signature": "org.apache.commons.lang.text.StrSubstitutor.substitute(org.apache.commons.lang.text.StrBuilder, int, int)",
        "snippet": "    protected boolean substitute(StrBuilder buf, int offset, int length) {\n        return substitute(buf, offset, length, null) > 0;\n    }",
        "begin_line": 520,
        "end_line": 522,
        "comment": "\n     * Internal method that substitutes the variables.\n     * <p>\n     * Most users of this class do not need to call this method. This method will\n     * be called automatically by another (public) method.\n     * <p>\n     * Writers of subclasses can override this method if they need access to\n     * the substitution process at the start or end.\n     *\n     * @param buf  the string builder to substitute into, not null\n     * @param offset  the start offset within the builder, must be valid\n     * @param length  the length within the builder to be processed, must be valid\n     * @return true if altered\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrSubstitutor.java",
        "class_name": "org.apache.commons.lang.text.StrSubstitutor",
        "signature": "org.apache.commons.lang.text.StrSubstitutor.substitute(org.apache.commons.lang.text.StrBuilder, int, int, java.util.List)",
        "snippet": "    private int substitute(StrBuilder buf, int offset, int length, List priorVariables) {\n        StrMatcher prefixMatcher = getVariablePrefixMatcher();\n        StrMatcher suffixMatcher = getVariableSuffixMatcher();\n        char escape = getEscapeChar();\n        \n        boolean top = (priorVariables == null);\n        boolean altered = false;\n        int lengthChange = 0;\n        char[] chars = buf.buffer;\n        int bufEnd = offset + length;\n        int pos = offset;\n        while (pos < bufEnd) {\n            int startMatchLen = prefixMatcher.isMatch(chars, pos, offset, bufEnd);\n            if (startMatchLen == 0) {\n                pos++;\n            } else {\n                // found variable start marker\n                if (pos > offset && chars[pos - 1] == escape) {\n                    // escaped\n                    buf.deleteCharAt(pos - 1);\n                    chars = buf.buffer;  // in case buffer was altered\n                    lengthChange--;\n                    altered = true;\n                    bufEnd--;\n                } else {\n                    // find suffix\n                    int startPos = pos;\n                    pos += startMatchLen;\n                    int endMatchLen = 0;\n                    while (pos < bufEnd) {\n                        endMatchLen = suffixMatcher.isMatch(chars, pos, offset, bufEnd);\n                        if (endMatchLen == 0) {\n                            pos++;\n                        } else {\n                            // found variable end marker\n                            String varName = new String(chars, startPos + startMatchLen, \n                                                        pos - startPos - startMatchLen);\n                            pos += endMatchLen;\n                            int endPos = pos;\n                            \n                            // on the first call initialize priorVariables\n                            if (priorVariables == null) {\n                                priorVariables = new ArrayList();\n                                priorVariables.add(new String(chars, offset, length));\n                            }\n                            \n                            // handle cyclic substitution\n                            checkCyclicSubstitution(varName, priorVariables);\n                            priorVariables.add(varName);\n                            \n                            // resolve the variable\n                            String varValue = resolveVariable(varName, buf, startPos, endPos);\n                            if (varValue != null) {\n                                // recursive replace\n                                int varLen = varValue.length();\n                                buf.replace(startPos, endPos, varValue);\n                                altered = true;\n                                int change = substitute(buf, startPos, varLen, priorVariables);\n                                change = change + (varLen - (endPos - startPos));\n                                pos += change;\n                                bufEnd += change;\n                                lengthChange += change;\n                                chars = buf.buffer;  // in case buffer was altered\n                            }\n                            \n                            // remove variable from the cyclic stack\n                            priorVariables.remove(priorVariables.size() - 1);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        if (top) {\n            return (altered ? 1 : 0);\n        }\n        return lengthChange;\n    }",
        "begin_line": 536,
        "end_line": 613,
        "comment": "\n     * Recursive handler for multiple levels of interpolation. This is the main\n     * interpolation method, which resolves the values of all variable references\n     * contained in the passed in text.\n     *\n     * @param buf  the string builder to substitute into, not null\n     * @param offset  the start offset within the builder, must be valid\n     * @param length  the length within the builder to be processed, must be valid\n     * @param priorVariables  the stack keeping track of the replaced variables, may be null\n     * @return the length change that occurs, unless priorVariables is null when the int\n     *  represents a boolean flag as to whether any change occurred.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrSubstitutor.java",
        "class_name": "org.apache.commons.lang.text.StrSubstitutor",
        "signature": "org.apache.commons.lang.text.StrSubstitutor.checkCyclicSubstitution(java.lang.String, java.util.List)",
        "snippet": "    private void checkCyclicSubstitution(String varName, List priorVariables) {\n        if (priorVariables.contains(varName) == false) {\n            return;\n        }\n        StrBuilder buf = new StrBuilder(256);\n        buf.append(\"Infinite loop in property interpolation of \");\n        buf.append(priorVariables.remove(0));\n        buf.append(\": \");\n        buf.appendWithSeparators(priorVariables, \"->\");\n        throw new IllegalStateException(buf.toString());\n    }",
        "begin_line": 621,
        "end_line": 631,
        "comment": "\n     * Checks if the specified variable is already in the stack (list) of variables.\n     *\n     * @param varName  the variable name to check\n     * @param priorVariables  the list of prior variables\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrSubstitutor.java",
        "class_name": "org.apache.commons.lang.text.StrSubstitutor",
        "signature": "org.apache.commons.lang.text.StrSubstitutor.resolveVariable(java.lang.String, org.apache.commons.lang.text.StrBuilder, int, int)",
        "snippet": "    protected String resolveVariable(String variableName, StrBuilder buf, int startPos, int endPos) {\n        StrLookup resolver = getVariableResolver();\n        if (resolver == null) {\n            return null;\n        }\n        return resolver.lookup(variableName);\n    }",
        "begin_line": 650,
        "end_line": 656,
        "comment": "\n     * Internal method that resolves the value of a variable.\n     * <p>\n     * Most users of this class do not need to call this method. This method is\n     * called automatically by the substitution process.\n     * <p>\n     * Writers of subclasses can override this method if they need to alter\n     * how each substitution occurs. The method is passed the variable's name\n     * and must return the corresponding value. This implementation uses the\n     * {@link #getVariableResolver()} with the variable's name as the key.\n     *\n     * @param variableName  the name of the variable, not null\n     * @param buf  the buffer where the substitution is occurring, not null\n     * @param startPos  the start position of the variable including the prefix, valid\n     * @param endPos  the end position of the variable including the suffix, valid\n     * @return the variable's value or <b>null</b> if the variable is unknown\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrSubstitutor.java",
        "class_name": "org.apache.commons.lang.text.StrSubstitutor",
        "signature": "org.apache.commons.lang.text.StrSubstitutor.getEscapeChar()",
        "snippet": "    public char getEscapeChar() {\n        return this.escapeChar;\n    }",
        "begin_line": 665,
        "end_line": 667,
        "comment": "\n     * Returns the escape character.\n     *\n     * @return the character used for escaping variable references\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrSubstitutor.java",
        "class_name": "org.apache.commons.lang.text.StrSubstitutor",
        "signature": "org.apache.commons.lang.text.StrSubstitutor.setEscapeChar(char)",
        "snippet": "    public void setEscapeChar(char escapeCharacter) {\n        this.escapeChar = escapeCharacter;\n    }",
        "begin_line": 676,
        "end_line": 678,
        "comment": "\n     * Sets the escape character.\n     * If this character is placed before a variable reference in the source\n     * text, this variable will be ignored.\n     *\n     * @param escapeCharacter  the escape character (0 for disabling escaping)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrSubstitutor.java",
        "class_name": "org.apache.commons.lang.text.StrSubstitutor",
        "signature": "org.apache.commons.lang.text.StrSubstitutor.getVariablePrefixMatcher()",
        "snippet": "    public StrMatcher getVariablePrefixMatcher() {\n        return prefixMatcher;\n    }",
        "begin_line": 691,
        "end_line": 693,
        "comment": "\n     * Gets the variable prefix matcher currently in use.\n     * <p>\n     * The variable prefix is the characer or characters that identify the\n     * start of a variable. This prefix is expressed in terms of a matcher\n     * allowing advanced prefix matches.\n     *\n     * @return the prefix matcher in use\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrSubstitutor.java",
        "class_name": "org.apache.commons.lang.text.StrSubstitutor",
        "signature": "org.apache.commons.lang.text.StrSubstitutor.setVariablePrefixMatcher(org.apache.commons.lang.text.StrMatcher)",
        "snippet": "    public StrSubstitutor setVariablePrefixMatcher(StrMatcher prefixMatcher) {\n        if (prefixMatcher == null) {\n            throw new IllegalArgumentException(\"Variable prefix matcher must not be null!\");\n        }\n        this.prefixMatcher = prefixMatcher;\n        return this;\n    }",
        "begin_line": 706,
        "end_line": 712,
        "comment": "\n     * Sets the variable prefix matcher currently in use.\n     * <p>\n     * The variable prefix is the characer or characters that identify the\n     * start of a variable. This prefix is expressed in terms of a matcher\n     * allowing advanced prefix matches.\n     *\n     * @param prefixMatcher  the prefix matcher to use, null ignored\n     * @return this, to enable chaining\n     * @throws IllegalArgumentException if the prefix matcher is null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrSubstitutor.java",
        "class_name": "org.apache.commons.lang.text.StrSubstitutor",
        "signature": "org.apache.commons.lang.text.StrSubstitutor.setVariablePrefix(char)",
        "snippet": "    public StrSubstitutor setVariablePrefix(char prefix) {\n        return setVariablePrefixMatcher(StrMatcher.charMatcher(prefix));\n    }",
        "begin_line": 724,
        "end_line": 726,
        "comment": "\n     * Sets the variable prefix to use.\n     * <p>\n     * The variable prefix is the characer or characters that identify the\n     * start of a variable. This method allows a single character prefix to\n     * be easily set.\n     *\n     * @param prefix  the prefix character to use\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrSubstitutor.java",
        "class_name": "org.apache.commons.lang.text.StrSubstitutor",
        "signature": "org.apache.commons.lang.text.StrSubstitutor.setVariablePrefix(java.lang.String)",
        "snippet": "    public StrSubstitutor setVariablePrefix(String prefix) {\n       if (prefix == null) {\n            throw new IllegalArgumentException(\"Variable prefix must not be null!\");\n        }\n        return setVariablePrefixMatcher(StrMatcher.stringMatcher(prefix));\n    }",
        "begin_line": 738,
        "end_line": 743,
        "comment": "\n     * Sets the variable prefix to use.\n     * <p>\n     * The variable prefix is the characer or characters that identify the\n     * start of a variable. This method allows a string prefix to be easily set.\n     *\n     * @param prefix  the prefix for variables, not null\n     * @return this, to enable chaining\n     * @throws IllegalArgumentException if the prefix is null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrSubstitutor.java",
        "class_name": "org.apache.commons.lang.text.StrSubstitutor",
        "signature": "org.apache.commons.lang.text.StrSubstitutor.getVariableSuffixMatcher()",
        "snippet": "    public StrMatcher getVariableSuffixMatcher() {\n        return suffixMatcher;\n    }",
        "begin_line": 756,
        "end_line": 758,
        "comment": "\n     * Gets the variable suffix matcher currently in use.\n     * <p>\n     * The variable suffix is the characer or characters that identify the\n     * end of a variable. This suffix is expressed in terms of a matcher\n     * allowing advanced suffix matches.\n     *\n     * @return the suffix matcher in use\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrSubstitutor.java",
        "class_name": "org.apache.commons.lang.text.StrSubstitutor",
        "signature": "org.apache.commons.lang.text.StrSubstitutor.setVariableSuffixMatcher(org.apache.commons.lang.text.StrMatcher)",
        "snippet": "    public StrSubstitutor setVariableSuffixMatcher(StrMatcher suffixMatcher) {\n        if (suffixMatcher == null) {\n            throw new IllegalArgumentException(\"Variable suffix matcher must not be null!\");\n        }\n        this.suffixMatcher = suffixMatcher;\n        return this;\n    }",
        "begin_line": 771,
        "end_line": 777,
        "comment": "\n     * Sets the variable suffix matcher currently in use.\n     * <p>\n     * The variable suffix is the characer or characters that identify the\n     * end of a variable. This suffix is expressed in terms of a matcher\n     * allowing advanced suffix matches.\n     *\n     * @param suffixMatcher  the suffix matcher to use, null ignored\n     * @return this, to enable chaining\n     * @throws IllegalArgumentException if the suffix matcher is null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrSubstitutor.java",
        "class_name": "org.apache.commons.lang.text.StrSubstitutor",
        "signature": "org.apache.commons.lang.text.StrSubstitutor.setVariableSuffix(char)",
        "snippet": "    public StrSubstitutor setVariableSuffix(char suffix) {\n        return setVariableSuffixMatcher(StrMatcher.charMatcher(suffix));\n    }",
        "begin_line": 789,
        "end_line": 791,
        "comment": "\n     * Sets the variable suffix to use.\n     * <p>\n     * The variable suffix is the characer or characters that identify the\n     * end of a variable. This method allows a single character suffix to\n     * be easily set.\n     *\n     * @param suffix  the suffix character to use\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrSubstitutor.java",
        "class_name": "org.apache.commons.lang.text.StrSubstitutor",
        "signature": "org.apache.commons.lang.text.StrSubstitutor.setVariableSuffix(java.lang.String)",
        "snippet": "    public StrSubstitutor setVariableSuffix(String suffix) {\n       if (suffix == null) {\n            throw new IllegalArgumentException(\"Variable suffix must not be null!\");\n        }\n        return setVariableSuffixMatcher(StrMatcher.stringMatcher(suffix));\n    }",
        "begin_line": 803,
        "end_line": 808,
        "comment": "\n     * Sets the variable suffix to use.\n     * <p>\n     * The variable suffix is the characer or characters that identify the\n     * end of a variable. This method allows a string suffix to be easily set.\n     *\n     * @param suffix  the suffix for variables, not null\n     * @return this, to enable chaining\n     * @throws IllegalArgumentException if the suffix is null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrSubstitutor.java",
        "class_name": "org.apache.commons.lang.text.StrSubstitutor",
        "signature": "org.apache.commons.lang.text.StrSubstitutor.getVariableResolver()",
        "snippet": "    public StrLookup getVariableResolver() {\n        return this.variableResolver;\n    }",
        "begin_line": 817,
        "end_line": 819,
        "comment": "\n     * Gets the VariableResolver that is used to lookup variables.\n     *\n     * @return the VariableResolver\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrSubstitutor.java",
        "class_name": "org.apache.commons.lang.text.StrSubstitutor",
        "signature": "org.apache.commons.lang.text.StrSubstitutor.setVariableResolver(org.apache.commons.lang.text.StrLookup)",
        "snippet": "    public void setVariableResolver(StrLookup variableResolver) {\n        this.variableResolver = variableResolver;\n    }",
        "begin_line": 826,
        "end_line": 828,
        "comment": "\n     * Sets the VariableResolver that is used to lookup variables.\n     *\n     * @param variableResolver  the VariableResolver\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.StrBuilder()",
        "snippet": "    public StrBuilder() {\n        this(CAPACITY);\n    }",
        "begin_line": 97,
        "end_line": 99,
        "comment": "\n     * Constructor that creates an empty builder initial capacity 32 characters.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.StrBuilder(int)",
        "snippet": "    public StrBuilder(int initialCapacity) {\n        super();\n        if (initialCapacity <= 0) {\n            initialCapacity = CAPACITY;\n        }\n        buffer = new char[initialCapacity];\n    }",
        "begin_line": 106,
        "end_line": 112,
        "comment": "\n     * Constructor that creates an empty builder the specified initial capacity.\n     *\n     * @param initialCapacity  the initial capacity, zero or less will be converted to 32\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.StrBuilder(java.lang.String)",
        "snippet": "    public StrBuilder(String str) {\n        super();\n        if (str == null) {\n            buffer = new char[CAPACITY];\n        } else {\n            buffer = new char[str.length() + CAPACITY];\n            append(str);\n        }\n    }",
        "begin_line": 120,
        "end_line": 128,
        "comment": "\n     * Constructor that creates a builder from the string, allocating\n     * 32 extra characters for growth.\n     *\n     * @param str  the string to copy, null treated as blank string\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.getNewLineText()",
        "snippet": "    public String getNewLineText() {\n        return newLine;\n    }",
        "begin_line": 136,
        "end_line": 138,
        "comment": "\n     * Gets the text to be appended when a new line is added.\n     *\n     * @return the new line text, null means use system default\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.setNewLineText(java.lang.String)",
        "snippet": "    public StrBuilder setNewLineText(String newLine) {\n        this.newLine = newLine;\n        return this;\n    }",
        "begin_line": 146,
        "end_line": 149,
        "comment": "\n     * Sets the text to be appended when a new line is added.\n     *\n     * @param newLine  the new line text, null means use system default\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.getNullText()",
        "snippet": "    public String getNullText() {\n        return nullText;\n    }",
        "begin_line": 157,
        "end_line": 159,
        "comment": "\n     * Gets the text to be appended when null is added.\n     *\n     * @return the null text, null means no append\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.setNullText(java.lang.String)",
        "snippet": "    public StrBuilder setNullText(String nullText) {\n        if (nullText != null && nullText.length() == 0) {\n            nullText = null;\n        }\n        this.nullText = nullText;\n        return this;\n    }",
        "begin_line": 167,
        "end_line": 173,
        "comment": "\n     * Sets the text to be appended when null is added.\n     *\n     * @param nullText  the null text, null means no append\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.length()",
        "snippet": "    public int length() {\n        return size;\n    }",
        "begin_line": 181,
        "end_line": 183,
        "comment": "\n     * Gets the length of the string builder.\n     *\n     * @return the length\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.setLength(int)",
        "snippet": "    public StrBuilder setLength(int length) {\n        if (length < 0) {\n            throw new StringIndexOutOfBoundsException(length);\n        }\n        if (length < size) {\n            size = length;\n        } else if (length > size) {\n            ensureCapacity(length);\n            int oldEnd = size;\n            int newEnd = length;\n            size = length;\n            for (int i = oldEnd; i < newEnd; i++) {\n                buffer[i] = '\\0';\n            }\n        }\n        return this;\n    }",
        "begin_line": 193,
        "end_line": 209,
        "comment": "\n     * Updates the length of the builder by either dropping the last characters\n     * or adding filler of unicode zero.\n     *\n     * @param length  the length to set to, must be zero or positive\n     * @return this, to enable chaining\n     * @throws IndexOutOfBoundsException if the length is negative\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.capacity()",
        "snippet": "    public int capacity() {\n        return buffer.length;\n    }",
        "begin_line": 217,
        "end_line": 219,
        "comment": "\n     * Gets the current size of the internal character array buffer.\n     *\n     * @return the capacity\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.ensureCapacity(int)",
        "snippet": "    public StrBuilder ensureCapacity(int capacity) {\n        if (capacity > buffer.length) {\n            char[] old = buffer;\n            buffer = new char[capacity];\n            System.arraycopy(old, 0, buffer, 0, size);\n        }\n        return this;\n    }",
        "begin_line": 227,
        "end_line": 234,
        "comment": "\n     * Checks the capacity and ensures that it is at least the size specified.\n     *\n     * @param capacity  the capacity to ensure\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.minimizeCapacity()",
        "snippet": "    public StrBuilder minimizeCapacity() {\n        if (buffer.length > length()) {\n            char[] old = buffer;\n            buffer = new char[length()];\n            System.arraycopy(old, 0, buffer, 0, size);\n        }\n        return this;\n    }",
        "begin_line": 241,
        "end_line": 248,
        "comment": "\n     * Minimizes the capacity to the actual length of the string.\n     *\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.size()",
        "snippet": "    public int size() {\n        return size;\n    }",
        "begin_line": 259,
        "end_line": 261,
        "comment": "\n     * Gets the length of the string builder.\n     * <p>\n     * This method is the same as {@link #length()} and is provided to match the\n     * API of Collections.\n     *\n     * @return the length\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.isEmpty()",
        "snippet": "    public boolean isEmpty() {\n        return size == 0;\n    }",
        "begin_line": 271,
        "end_line": 273,
        "comment": "\n     * Checks is the string builder is empty (convenience Collections API style method).\n     * <p>\n     * This method is the same as checking {@link #length()} and is provided to match the\n     * API of Collections.\n     *\n     * @return <code>true</code> if the size is <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.clear()",
        "snippet": "    public StrBuilder clear() {\n        size = 0;\n        return this;\n    }",
        "begin_line": 286,
        "end_line": 289,
        "comment": "\n     * Clears the string builder (convenience Collections API style method).\n     * <p>\n     * This method does not reduce the size of the internal character buffer.\n     * To do that, call <code>clear()</code> followed by {@link #minimizeCapacity()}.\n     * <p>\n     * This method is the same as {@link #setLength(int)} called with zero\n     * and is provided to match the API of Collections.\n     *\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.charAt(int)",
        "snippet": "    public char charAt(int index) {\n        if (index < 0 || index >= length()) {\n            throw new StringIndexOutOfBoundsException(index);\n        }\n        return buffer[index];\n    }",
        "begin_line": 301,
        "end_line": 306,
        "comment": "\n     * Gets the character at the specified index.\n     *\n     * @see #setCharAt(int, char)\n     * @see #deleteCharAt(int)\n     * @param index  the index to retrieve, must be valid\n     * @return the character at the index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.setCharAt(int, char)",
        "snippet": "    public StrBuilder setCharAt(int index, char ch) {\n        if (index < 0 || index >= length()) {\n            throw new StringIndexOutOfBoundsException(index);\n        }\n        buffer[index] = ch;\n        return this;\n    }",
        "begin_line": 318,
        "end_line": 324,
        "comment": "\n     * Sets the character at the specified index.\n     *\n     * @see #charAt(int)\n     * @see #deleteCharAt(int)\n     * @param index  the index to set\n     * @param ch  the new character\n     * @return this, to enable chaining\n     * @throws IndexOutOfBoundsException if the index is invalid\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.deleteCharAt(int)",
        "snippet": "    public StrBuilder deleteCharAt(int index) {\n        if (index < 0 || index >= size) {\n            throw new StringIndexOutOfBoundsException(index);\n        }\n        deleteImpl(index, index + 1, 1);\n        return this;\n    }",
        "begin_line": 335,
        "end_line": 341,
        "comment": "\n     * Deletes the character at the specified index.\n     *\n     * @see #charAt(int)\n     * @see #setCharAt(int, char)\n     * @param index  the index to delete\n     * @return this, to enable chaining\n     * @throws IndexOutOfBoundsException if the index is invalid\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.toCharArray()",
        "snippet": "    public char[] toCharArray() {\n        if (size == 0) {\n            return ArrayUtils.EMPTY_CHAR_ARRAY;\n        }\n        char chars[] = new char[size];\n        System.arraycopy(buffer, 0, chars, 0, size);\n        return chars;\n    }",
        "begin_line": 349,
        "end_line": 356,
        "comment": "\n     * Copies the builder's character array into a new character array.\n     * \n     * @return a new array that represents the contents of the builder\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.toCharArray(int, int)",
        "snippet": "    public char[] toCharArray(int startIndex, int endIndex) {\n        endIndex = validateRange(startIndex, endIndex);\n        int len = endIndex - startIndex;\n        if (len == 0) {\n            return ArrayUtils.EMPTY_CHAR_ARRAY;\n        }\n        char chars[] = new char[len];\n        System.arraycopy(buffer, startIndex, chars, 0, len);\n        return chars;\n    }",
        "begin_line": 368,
        "end_line": 377,
        "comment": "\n     * Copies part of the builder's character array into a new character array.\n     * \n     * @param startIndex  the start index, inclusive, must be valid\n     * @param endIndex  the end index, exclusive, must be valid except that\n     *  if too large it is treated as end of string\n     * @return a new array that holds part of the contents of the builder\n     * @throws IndexOutOfBoundsException if startIndex is invalid,\n     *  or if endIndex is invalid (but endIndex greater than size is valid)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.getChars(char[])",
        "snippet": "    public char[] getChars(char[] destination) {\n        int len = length();\n        if (destination == null || destination.length < len) {\n            destination = new char[len];\n        }\n        System.arraycopy(buffer, 0, destination, 0, len);\n        return destination;\n    }",
        "begin_line": 385,
        "end_line": 392,
        "comment": "\n     * Copies the character array into the specified array.\n     * \n     * @param destination  the destination array, null will cause an array to be created\n     * @return the input array, unless that was null or too small\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.getChars(int, int, char[], int)",
        "snippet": "    public void getChars(int startIndex, int endIndex, char destination[], int destinationIndex) {\n        if (startIndex < 0) {\n            throw new StringIndexOutOfBoundsException(startIndex);\n        }\n        if (endIndex < 0 || endIndex > length()) {\n            throw new StringIndexOutOfBoundsException(endIndex);\n        }\n        if (startIndex > endIndex) {\n            throw new StringIndexOutOfBoundsException(\"end < start\");\n        }\n        System.arraycopy(buffer, startIndex, destination, destinationIndex, endIndex - startIndex);\n    }",
        "begin_line": 404,
        "end_line": 415,
        "comment": "\n     * Copies the character array into the specified array.\n     *\n     * @param startIndex  first index to copy, inclusive, must be valid\n     * @param endIndex  last index, exclusive, must be valid\n     * @param destination  the destination array, must not be null or too small\n     * @param destinationIndex  the index to start copying in destination\n     * @throws NullPointerException if the array is null\n     * @throws IndexOutOfBoundsException if any index is invalid\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.appendNewLine()",
        "snippet": "    public StrBuilder appendNewLine() {\n        if (newLine == null)  {\n            append(SystemUtils.LINE_SEPARATOR);\n            return this;\n        }\n        return append(newLine);\n    }",
        "begin_line": 427,
        "end_line": 433,
        "comment": "\n     * Appends the new line string to this string builder.\n     * <p>\n     * The new line string can be altered using {@link #setNewLineText(String)}.\n     * This might be used to force the output to always use Unix line endings\n     * even when on Windows.\n     *\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.appendNull()",
        "snippet": "    public StrBuilder appendNull() {\n        if (nullText == null)  {\n            return this;\n        }\n        return append(nullText);\n    }",
        "begin_line": 440,
        "end_line": 445,
        "comment": "\n     * Appends the text representing <code>null</code> to this string builder.\n     *\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.append(java.lang.Object)",
        "snippet": "    public StrBuilder append(Object obj) {\n        if (obj == null) {\n            return appendNull();\n        } \n        return append(obj.toString());        \n    }",
        "begin_line": 454,
        "end_line": 459,
        "comment": "\n     * Appends an object to this string builder.\n     * Appending null will call {@link #appendNull()}.\n     *\n     * @param obj  the object to append\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.append(java.lang.String)",
        "snippet": "    public StrBuilder append(String str) {\n        if (str == null) {\n            return appendNull();\n        }\n        int strLen = str.length();\n        if (strLen > 0) {\n            int len = length();\n            ensureCapacity(len + strLen);\n            str.getChars(0, strLen, buffer, len);\n            size += strLen;\n        }\n        return this;\n    }",
        "begin_line": 468,
        "end_line": 480,
        "comment": "\n     * Appends a string to this string builder.\n     * Appending null will call {@link #appendNull()}.\n     *\n     * @param str  the string to append\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.append(java.lang.String, int, int)",
        "snippet": "    public StrBuilder append(String str, int startIndex, int length) {\n        if (str == null) {\n            return appendNull();\n        }\n        if (startIndex < 0 || startIndex > str.length()) {\n            throw new StringIndexOutOfBoundsException(\"startIndex must be valid\");\n        }\n        if (length < 0 || (startIndex + length) > str.length()) {\n            throw new StringIndexOutOfBoundsException(\"length must be valid\");\n        }\n        if (length > 0) {\n            int len = length();\n            ensureCapacity(len + length);\n            str.getChars(startIndex, startIndex + length, buffer, len);\n            size += length;\n        }\n        return this;\n    }",
        "begin_line": 491,
        "end_line": 508,
        "comment": "\n     * Appends part of a string to this string builder.\n     * Appending null will call {@link #appendNull()}.\n     *\n     * @param str  the string to append\n     * @param startIndex  the start index, inclusive, must be valid\n     * @param length  the length to append, must be valid\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.append(java.lang.StringBuffer)",
        "snippet": "    public StrBuilder append(StringBuffer str) {\n        if (str == null) {\n            return appendNull();\n        }\n        int strLen = str.length();\n        if (strLen > 0) {\n            int len = length();\n            ensureCapacity(len + strLen);\n            str.getChars(0, strLen, buffer, len);\n            size += strLen;\n        }\n        return this;\n    }",
        "begin_line": 517,
        "end_line": 529,
        "comment": "\n     * Appends a string buffer to this string builder.\n     * Appending null will call {@link #appendNull()}.\n     *\n     * @param str  the string buffer to append\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.append(java.lang.StringBuffer, int, int)",
        "snippet": "    public StrBuilder append(StringBuffer str, int startIndex, int length) {\n        if (str == null) {\n            return appendNull();\n        }\n        if (startIndex < 0 || startIndex > str.length()) {\n            throw new StringIndexOutOfBoundsException(\"startIndex must be valid\");\n        }\n        if (length < 0 || (startIndex + length) > str.length()) {\n            throw new StringIndexOutOfBoundsException(\"length must be valid\");\n        }\n        if (length > 0) {\n            int len = length();\n            ensureCapacity(len + length);\n            str.getChars(startIndex, startIndex + length, buffer, len);\n            size += length;\n        }\n        return this;\n    }",
        "begin_line": 540,
        "end_line": 557,
        "comment": "\n     * Appends part of a string buffer to this string builder.\n     * Appending null will call {@link #appendNull()}.\n     *\n     * @param str  the string to append\n     * @param startIndex  the start index, inclusive, must be valid\n     * @param length  the length to append, must be valid\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.append(org.apache.commons.lang.text.StrBuilder)",
        "snippet": "    public StrBuilder append(StrBuilder str) {\n        if (str == null) {\n            return appendNull();\n        }\n        int strLen = str.length();\n        if (strLen > 0) {\n            int len = length();\n            ensureCapacity(len + strLen);\n            System.arraycopy(str.buffer, 0, buffer, len, strLen);\n            size += strLen;\n        }\n        return this;\n    }",
        "begin_line": 566,
        "end_line": 578,
        "comment": "\n     * Appends another string builder to this string builder.\n     * Appending null will call {@link #appendNull()}.\n     *\n     * @param str  the string builder to append\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.append(org.apache.commons.lang.text.StrBuilder, int, int)",
        "snippet": "    public StrBuilder append(StrBuilder str, int startIndex, int length) {\n        if (str == null) {\n            return appendNull();\n        }\n        if (startIndex < 0 || startIndex > str.length()) {\n            throw new StringIndexOutOfBoundsException(\"startIndex must be valid\");\n        }\n        if (length < 0 || (startIndex + length) > str.length()) {\n            throw new StringIndexOutOfBoundsException(\"length must be valid\");\n        }\n        if (length > 0) {\n            int len = length();\n            ensureCapacity(len + length);\n            str.getChars(startIndex, startIndex + length, buffer, len);\n            size += length;\n        }\n        return this;\n    }",
        "begin_line": 589,
        "end_line": 606,
        "comment": "\n     * Appends part of a string builder to this string builder.\n     * Appending null will call {@link #appendNull()}.\n     *\n     * @param str  the string to append\n     * @param startIndex  the start index, inclusive, must be valid\n     * @param length  the length to append, must be valid\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.append(char[])",
        "snippet": "    public StrBuilder append(char[] chars) {\n        if (chars == null) {\n            return appendNull();\n        }\n        int strLen = chars.length;\n        if (strLen > 0) {\n            int len = length();\n            ensureCapacity(len + strLen);\n            System.arraycopy(chars, 0, buffer, len, strLen);\n            size += strLen;\n        }\n        return this;\n    }",
        "begin_line": 615,
        "end_line": 627,
        "comment": "\n     * Appends a char array to the string builder.\n     * Appending null will call {@link #appendNull()}.\n     *\n     * @param chars  the char array to append\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.append(char[], int, int)",
        "snippet": "    public StrBuilder append(char[] chars, int startIndex, int length) {\n        if (chars == null) {\n            return appendNull();\n        }\n        if (startIndex < 0 || startIndex > chars.length) {\n            throw new StringIndexOutOfBoundsException(\"Invalid startIndex: \" + length);\n        }\n        if (length < 0 || (startIndex + length) > chars.length) {\n            throw new StringIndexOutOfBoundsException(\"Invalid length: \" + length);\n        }\n        if (length > 0) {\n            int len = length();\n            ensureCapacity(len + length);\n            System.arraycopy(chars, startIndex, buffer, len, length);\n            size += length;\n        }\n        return this;\n    }",
        "begin_line": 638,
        "end_line": 655,
        "comment": "\n     * Appends a char array to the string builder.\n     * Appending null will call {@link #appendNull()}.\n     *\n     * @param chars  the char array to append\n     * @param startIndex  the start index, inclusive, must be valid\n     * @param length  the length to append, must be valid\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.append(boolean)",
        "snippet": "    public StrBuilder append(boolean value) {\n        if (value) {\n            ensureCapacity(size + 4);\n            buffer[size++] = 't';\n            buffer[size++] = 'r';\n            buffer[size++] = 'u';\n            buffer[size++] = 'e';\n        } else {\n            ensureCapacity(size + 5);\n            buffer[size++] = 'f';\n            buffer[size++] = 'a';\n            buffer[size++] = 'l';\n            buffer[size++] = 's';\n            buffer[size++] = 'e';\n        }\n        return this;\n    }",
        "begin_line": 663,
        "end_line": 679,
        "comment": "\n     * Appends a boolean value to the string builder.\n     *\n     * @param value  the value to append\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.append(char)",
        "snippet": "    public StrBuilder append(char ch) {\n        int len = length();\n        ensureCapacity(len + 1);\n        buffer[size++] = ch;\n        return this;\n    }",
        "begin_line": 687,
        "end_line": 692,
        "comment": "\n     * Appends a char value to the string builder.\n     *\n     * @param ch  the value to append\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.append(int)",
        "snippet": "    public StrBuilder append(int value) {\n        return append(String.valueOf(value));\n    }",
        "begin_line": 700,
        "end_line": 702,
        "comment": "\n     * Appends an int value to the string builder using <code>String.valueOf</code>.\n     *\n     * @param value  the value to append\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.append(long)",
        "snippet": "    public StrBuilder append(long value) {\n        return append(String.valueOf(value));\n    }",
        "begin_line": 710,
        "end_line": 712,
        "comment": "\n     * Appends a long value to the string builder using <code>String.valueOf</code>.\n     *\n     * @param value  the value to append\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.append(float)",
        "snippet": "    public StrBuilder append(float value) {\n        return append(String.valueOf(value));\n    }",
        "begin_line": 720,
        "end_line": 722,
        "comment": "\n     * Appends a float value to the string builder using <code>String.valueOf</code>.\n     *\n     * @param value  the value to append\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.append(double)",
        "snippet": "    public StrBuilder append(double value) {\n        return append(String.valueOf(value));\n    }",
        "begin_line": 730,
        "end_line": 732,
        "comment": "\n     * Appends a double value to the string builder using <code>String.valueOf</code>.\n     *\n     * @param value  the value to append\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.appendWithSeparators(java.lang.Object[], java.lang.String)",
        "snippet": "    public StrBuilder appendWithSeparators(Object[] array, String separator) {\n        if (array != null && array.length > 0) {\n            separator = (separator == null ? \"\" : separator);\n            append(array[0]);\n            for (int i = 1; i < array.length; i++) {\n                append(separator);\n                append(array[i]);\n            }\n        }\n        return this;\n    }",
        "begin_line": 745,
        "end_line": 755,
        "comment": "\n     * Appends an array placing separators between each value, but\n     * not before the first or after the last.\n     * Appending a null array will have no effect.\n     * Each object is appended using {@link #append(Object)}.\n     *\n     * @param array  the array to append\n     * @param separator  the separator to use, null means no separator\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.appendWithSeparators(java.util.Collection, java.lang.String)",
        "snippet": "    public StrBuilder appendWithSeparators(Collection coll, String separator) {\n        if (coll != null && coll.size() > 0) {\n            separator = (separator == null ? \"\" : separator);\n            Iterator it = coll.iterator();\n            while (it.hasNext()) {\n                append(it.next());\n                if (it.hasNext()) {\n                    append(separator);\n                }\n            }\n        }\n        return this;\n    }",
        "begin_line": 767,
        "end_line": 779,
        "comment": "\n     * Appends a collection placing separators between each value, but\n     * not before the first or after the last.\n     * Appending a null collection will have no effect.\n     * Each object is appended using {@link #append(Object)}.\n     *\n     * @param coll  the collection to append\n     * @param separator  the separator to use, null means no separator\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.appendWithSeparators(java.util.Iterator, java.lang.String)",
        "snippet": "    public StrBuilder appendWithSeparators(Iterator it, String separator) {\n        if (it != null) {\n            separator = (separator == null ? \"\" : separator);\n            while (it.hasNext()) {\n                append(it.next());\n                if (it.hasNext()) {\n                    append(separator);\n                }\n            }\n        }\n        return this;\n    }",
        "begin_line": 791,
        "end_line": 802,
        "comment": "\n     * Appends an iterator placing separators between each value, but\n     * not before the first or after the last.\n     * Appending a null iterator will have no effect.\n     * Each object is appended using {@link #append(Object)}.\n     *\n     * @param it  the iterator to append\n     * @param separator  the separator to use, null means no separator\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.appendPadding(int, char)",
        "snippet": "    public StrBuilder appendPadding(int length, char padChar) {\n        if (length >= 0) {\n            ensureCapacity(size + length);\n            for (int i = 0; i < length; i++) {\n                buffer[size++] = padChar;\n            }\n        }\n        return this;\n    }",
        "begin_line": 812,
        "end_line": 820,
        "comment": "\n     * Appends the pad character to the builder the specified number of times.\n     * \n     * @param length  the length to append, negative means no append\n     * @param padChar  the character to append\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.appendFixedWidthPadLeft(java.lang.Object, int, char)",
        "snippet": "    public StrBuilder appendFixedWidthPadLeft(Object obj, int width, char padChar) {\n        if (width > 0) {\n            ensureCapacity(size + width);\n            String str = (obj == null ? getNullText() : obj.toString());\n            int strLen = str.length();\n            if (strLen >= width) {\n                str.getChars(strLen - width, strLen, buffer, size);\n            } else {\n                int padLen = width - strLen;\n                for (int i = 0; i < padLen; i++) {\n                    buffer[size + i] = padChar;\n                }\n                str.getChars(0, strLen, buffer, size + padLen);\n            }\n            size += width;\n        }\n        return this;\n    }",
        "begin_line": 834,
        "end_line": 851,
        "comment": "\n     * Appends an object to the builder padding on the left to a fixed width.\n     * The <code>toString</code> of the object is used.\n     * If the object is larger than the length, the left hand side is lost.\n     * If the object is null, the null text value is used.\n     * \n     * @param obj  the object to append, null uses null text\n     * @param width  the fixed field width, zero or negative has no effect\n     * @param padChar  the pad character to use\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.appendFixedWidthPadLeft(int, int, char)",
        "snippet": "    public StrBuilder appendFixedWidthPadLeft(int value, int width, char padChar) {\n        return appendFixedWidthPadLeft(String.valueOf(value), width, padChar);\n    }",
        "begin_line": 863,
        "end_line": 865,
        "comment": "\n     * Appends an object to the builder padding on the left to a fixed width.\n     * The <code>String.valueOf</code> of the <code>int</code> value is used.\n     * If the formatted value is larger than the length, the left hand side is lost.\n     * \n     * @param value  the value to append\n     * @param width  the fixed field width, zero or negative has no effect\n     * @param padChar  the pad character to use\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.appendFixedWidthPadRight(java.lang.Object, int, char)",
        "snippet": "    public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {\n        if (width > 0) {\n            ensureCapacity(size + width);\n            String str = (obj == null ? getNullText() : obj.toString());\n            int strLen = str.length();\n            if (strLen >= width) {\n                str.getChars(0, width, buffer, size);\n            } else {\n                int padLen = width - strLen;\n                str.getChars(0, strLen, buffer, size);\n                for (int i = 0; i < padLen; i++) {\n                    buffer[size + strLen + i] = padChar;\n                }\n            }\n            size += width;\n        }\n        return this;\n    }",
        "begin_line": 878,
        "end_line": 895,
        "comment": "\n     * Appends an object to the builder padding on the right to a fixed length.\n     * The <code>toString</code> of the object is used.\n     * If the object is larger than the length, the right hand side is lost.\n     * If the object is null, null text value is used.\n     * \n     * @param obj  the object to append, null uses null text\n     * @param width  the fixed field width, zero or negative has no effect\n     * @param padChar  the pad character to use\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.appendFixedWidthPadRight(int, int, char)",
        "snippet": "    public StrBuilder appendFixedWidthPadRight(int value, int width, char padChar) {\n        return appendFixedWidthPadRight(String.valueOf(value), width, padChar);\n    }",
        "begin_line": 907,
        "end_line": 909,
        "comment": "\n     * Appends an object to the builder padding on the right to a fixed length.\n     * The <code>String.valueOf</code> of the <code>int</code> value is used.\n     * If the object is larger than the length, the right hand side is lost.\n     * \n     * @param value  the value to append\n     * @param width  the fixed field width, zero or negative has no effect\n     * @param padChar  the pad character to use\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.insert(int, java.lang.Object)",
        "snippet": "    public StrBuilder insert(int index, Object obj) {\n        if (obj == null) {\n            return insert(index, nullText);\n        }\n        return insert(index, obj.toString());\n    }",
        "begin_line": 921,
        "end_line": 926,
        "comment": "\n     * Inserts the string representation of an object into this builder.\n     * Inserting null will use the stored null text value.\n     *\n     * @param index  the index to add at, must be valid\n     * @param obj  the object to insert\n     * @return this, to enable chaining\n     * @throws IndexOutOfBoundsException if the index is invalid\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.insert(int, java.lang.String)",
        "snippet": "    public StrBuilder insert(int index, String str) {\n        validateIndex(index);\n        if (str == null) {\n            str = nullText;\n        }\n        int strLen = (str == null ? 0 : str.length());\n        if (strLen > 0) {\n            int newSize = size + strLen;\n            ensureCapacity(newSize);\n            System.arraycopy(buffer, index, buffer, index + strLen, size - index);\n            size = newSize;\n            str.getChars(0, strLen, buffer, index);\n        }\n        return this;\n    }",
        "begin_line": 937,
        "end_line": 951,
        "comment": "\n     * Inserts the string into this builder.\n     * Inserting null will use the stored null text value.\n     *\n     * @param index  the index to add at, must be valid\n     * @param str  the string to insert\n     * @return this, to enable chaining\n     * @throws IndexOutOfBoundsException if the index is invalid\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.insert(int, char[])",
        "snippet": "    public StrBuilder insert(int index, char chars[]) {\n        validateIndex(index);\n        if (chars == null) {\n            return insert(index, nullText);\n        }\n        int len = chars.length;\n        if (len > 0) {\n            ensureCapacity(size + len);\n            System.arraycopy(buffer, index, buffer, index + len, size - index);\n            System.arraycopy(chars, 0, buffer, index, len);\n            size += len;\n        }\n        return this;\n    }",
        "begin_line": 962,
        "end_line": 975,
        "comment": "\n     * Inserts the character array into this builder.\n     * Inserting null will use the stored null text value.\n     *\n     * @param index  the index to add at, must be valid\n     * @param chars  the char array to insert\n     * @return this, to enable chaining\n     * @throws IndexOutOfBoundsException if the index is invalid\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.insert(int, char[], int, int)",
        "snippet": "    public StrBuilder insert(int index, char chars[], int offset, int length) {\n        validateIndex(index);\n        if (chars == null) {\n            return insert(index, nullText);\n        }\n        if (offset < 0 || offset > chars.length) {\n            throw new StringIndexOutOfBoundsException(\"Invalid offset: \" + offset);\n        }\n        if (length < 0 || offset + length > chars.length) {\n            throw new StringIndexOutOfBoundsException(\"Invalid length: \" + length);\n        }\n        if (length > 0) {\n            ensureCapacity(size + length);\n            System.arraycopy(buffer, index, buffer, index + length, size - index);\n            System.arraycopy(chars, offset, buffer, index, length);\n            size += length;\n        }\n        return this;\n    }",
        "begin_line": 988,
        "end_line": 1006,
        "comment": "\n     * Inserts part of the character array into this builder.\n     * Inserting null will use the stored null text value.\n     *\n     * @param index  the index to add at, must be valid\n     * @param chars  the char array to insert\n     * @param offset  the offset into the character array to start at, must be valid\n     * @param length  the length of the character array part to copy, must be positive\n     * @return this, to enable chaining\n     * @throws IndexOutOfBoundsException if any index is invalid\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.insert(int, boolean)",
        "snippet": "    public StrBuilder insert(int index, boolean value) {\n        validateIndex(index);\n        if (value) {\n            ensureCapacity(size + 4);\n            System.arraycopy(buffer, index, buffer, index + 4, size - index);\n            buffer[index++] = 't';\n            buffer[index++] = 'r';\n            buffer[index++] = 'u';\n            buffer[index] = 'e';\n            size += 4;\n        } else {\n            ensureCapacity(size + 5);\n            System.arraycopy(buffer, index, buffer, index + 5, size - index);\n            buffer[index++] = 'f';\n            buffer[index++] = 'a';\n            buffer[index++] = 'l';\n            buffer[index++] = 's';\n            buffer[index] = 'e';\n            size += 5;\n        }\n        return this;\n    }",
        "begin_line": 1016,
        "end_line": 1037,
        "comment": "\n     * Inserts the value into this builder.\n     *\n     * @param index  the index to add at, must be valid\n     * @param value  the value to insert\n     * @return this, to enable chaining\n     * @throws IndexOutOfBoundsException if the index is invalid\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.insert(int, char)",
        "snippet": "    public StrBuilder insert(int index, char value) {\n        validateIndex(index);\n        ensureCapacity(size + 1);\n        System.arraycopy(buffer, index, buffer, index + 1, size - index);\n        buffer[index] = value;\n        size++;\n        return this;\n    }",
        "begin_line": 1047,
        "end_line": 1054,
        "comment": "\n     * Inserts the value into this builder.\n     *\n     * @param index  the index to add at, must be valid\n     * @param value  the value to insert\n     * @return this, to enable chaining\n     * @throws IndexOutOfBoundsException if the index is invalid\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.insert(int, int)",
        "snippet": "    public StrBuilder insert(int index, int value) {\n        return insert(index, String.valueOf(value));\n    }",
        "begin_line": 1064,
        "end_line": 1066,
        "comment": "\n     * Inserts the value into this builder.\n     *\n     * @param index  the index to add at, must be valid\n     * @param value  the value to insert\n     * @return this, to enable chaining\n     * @throws IndexOutOfBoundsException if the index is invalid\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.insert(int, long)",
        "snippet": "    public StrBuilder insert(int index, long value) {\n        return insert(index, String.valueOf(value));\n    }",
        "begin_line": 1076,
        "end_line": 1078,
        "comment": "\n     * Inserts the value into this builder.\n     *\n     * @param index  the index to add at, must be valid\n     * @param value  the value to insert\n     * @return this, to enable chaining\n     * @throws IndexOutOfBoundsException if the index is invalid\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.insert(int, float)",
        "snippet": "    public StrBuilder insert(int index, float value) {\n        return insert(index, String.valueOf(value));\n    }",
        "begin_line": 1088,
        "end_line": 1090,
        "comment": "\n     * Inserts the value into this builder.\n     *\n     * @param index  the index to add at, must be valid\n     * @param value  the value to insert\n     * @return this, to enable chaining\n     * @throws IndexOutOfBoundsException if the index is invalid\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.insert(int, double)",
        "snippet": "    public StrBuilder insert(int index, double value) {\n        return insert(index, String.valueOf(value));\n    }",
        "begin_line": 1100,
        "end_line": 1102,
        "comment": "\n     * Inserts the value into this builder.\n     *\n     * @param index  the index to add at, must be valid\n     * @param value  the value to insert\n     * @return this, to enable chaining\n     * @throws IndexOutOfBoundsException if the index is invalid\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.deleteImpl(int, int, int)",
        "snippet": "    private void deleteImpl(int startIndex, int endIndex, int len) {\n        System.arraycopy(buffer, endIndex, buffer, startIndex, size - endIndex);\n        size -= len;\n    }",
        "begin_line": 1113,
        "end_line": 1116,
        "comment": "\n     * Internal method to delete a range without validation.\n     *\n     * @param startIndex  the start index, must be valid\n     * @param endIndex  the end index (exclusive), must be valid\n     * @param len  the length, must be valid\n     * @throws IndexOutOfBoundsException if any index is invalid\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.delete(int, int)",
        "snippet": "    public StrBuilder delete(int startIndex, int endIndex) {\n        endIndex = validateRange(startIndex, endIndex);\n        int len = endIndex - startIndex;\n        if (len > 0) {\n            deleteImpl(startIndex, endIndex, len);\n        }\n        return this;\n    }",
        "begin_line": 1127,
        "end_line": 1134,
        "comment": "\n     * Deletes the characters between the two specified indices.\n     *\n     * @param startIndex  the start index, inclusive, must be valid\n     * @param endIndex  the end index, exclusive, must be valid except\n     *  that if too large it is treated as end of string\n     * @return this, to enable chaining\n     * @throws IndexOutOfBoundsException if the index is invalid\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.deleteAll(char)",
        "snippet": "    public StrBuilder deleteAll(char ch) {\n        for (int i = 0; i < size; i++) {\n            if (buffer[i] == ch) {\n                int start = i;\n                while (++i < size) {\n                    if (buffer[i] != ch) {\n                        break;\n                    }\n                }\n                int len = i - start;\n                deleteImpl(start, i, len);\n                i -= len;\n            }\n        }\n        return this;\n    }",
        "begin_line": 1143,
        "end_line": 1158,
        "comment": "\n     * Deletes the character wherever it occurs in the builder.\n     *\n     * @param ch  the character to delete\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.deleteFirst(char)",
        "snippet": "    public StrBuilder deleteFirst(char ch) {\n        for (int i = 0; i < size; i++) {\n            if (buffer[i] == ch) {\n                deleteImpl(i, i + 1, 1);\n                break;\n            }\n        }\n        return this;\n    }",
        "begin_line": 1166,
        "end_line": 1174,
        "comment": "\n     * Deletes the character wherever it occurs in the builder.\n     *\n     * @param ch  the character to delete\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.deleteAll(java.lang.String)",
        "snippet": "    public StrBuilder deleteAll(String str) {\n        int len = (str == null ? 0 : str.length());\n        if (len > 0) {\n            int index = indexOf(str, 0);\n            while (index >= 0) {\n                deleteImpl(index, index + len, len);\n                index = indexOf(str, index);\n            }\n        }\n        return this;\n    }",
        "begin_line": 1183,
        "end_line": 1193,
        "comment": "\n     * Deletes the string wherever it occurs in the builder.\n     *\n     * @param str  the string to delete, null causes no action\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.deleteFirst(java.lang.String)",
        "snippet": "    public StrBuilder deleteFirst(String str) {\n        int len = (str == null ? 0 : str.length());\n        if (len > 0) {\n            int index = indexOf(str, 0);\n            if (index >= 0) {\n                deleteImpl(index, index + len, len);\n            }\n        }\n        return this;\n    }",
        "begin_line": 1201,
        "end_line": 1210,
        "comment": "\n     * Deletes the string wherever it occurs in the builder.\n     *\n     * @param str  the string to delete, null causes no action\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.deleteAll(org.apache.commons.lang.text.StrMatcher)",
        "snippet": "    public StrBuilder deleteAll(StrMatcher matcher) {\n        return replace(matcher, null, 0, size, -1);\n    }",
        "begin_line": 1223,
        "end_line": 1225,
        "comment": "\n     * Deletes all parts of the builder that the matcher matches.\n     * <p>\n     * Matchers can be used to perform advanced deletion behaviour.\n     * For example you could write a matcher to delete all occurances\n     * where the character 'a' is followed by a number.\n     *\n     * @param matcher  the matcher to use to find the deletion, null causes no action\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.deleteFirst(org.apache.commons.lang.text.StrMatcher)",
        "snippet": "    public StrBuilder deleteFirst(StrMatcher matcher) {\n        return replace(matcher, null, 0, size, 1);\n    }",
        "begin_line": 1237,
        "end_line": 1239,
        "comment": "\n     * Deletes the first match within the builder using the specified matcher.\n     * <p>\n     * Matchers can be used to perform advanced deletion behaviour.\n     * For example you could write a matcher to delete\n     * where the character 'a' is followed by a number.\n     *\n     * @param matcher  the matcher to use to find the deletion, null causes no action\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.replaceImpl(int, int, int, java.lang.String, int)",
        "snippet": "    private void replaceImpl(int startIndex, int endIndex, int removeLen, String insertStr, int insertLen) {\n        int newSize = size - removeLen + insertLen;\n        if (insertLen != removeLen) {\n            ensureCapacity(newSize);\n            System.arraycopy(buffer, endIndex, buffer, startIndex + insertLen, size - endIndex);\n            size = newSize;\n        }\n        if (insertLen > 0) {\n            insertStr.getChars(0, insertLen, buffer, startIndex);\n        }\n    }",
        "begin_line": 1252,
        "end_line": 1262,
        "comment": "\n     * Internal method to delete a range without validation.\n     *\n     * @param startIndex  the start index, must be valid\n     * @param endIndex  the end index (exclusive), must be valid\n     * @param removeLen  the length to remove (endIndex - startIndex), must be valid\n     * @param insertStr  the string to replace with, null means delete range\n     * @param insertLen  the length of the insert string, must be valid\n     * @throws IndexOutOfBoundsException if any index is invalid\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.replace(int, int, java.lang.String)",
        "snippet": "    public StrBuilder replace(int startIndex, int endIndex, String replaceStr) {\n        endIndex = validateRange(startIndex, endIndex);\n        int insertLen = (replaceStr == null ? 0 : replaceStr.length());\n        replaceImpl(startIndex, endIndex, endIndex - startIndex, replaceStr, insertLen);\n        return this;\n    }",
        "begin_line": 1275,
        "end_line": 1280,
        "comment": "\n     * Replaces a portion of the string builder with another string.\n     * The length of the inserted string does not have to match the removed length.\n     *\n     * @param startIndex  the start index, inclusive, must be valid\n     * @param endIndex  the end index, exclusive, must be valid except\n     *  that if too large it is treated as end of string\n     * @param replaceStr  the string to replace with, null means delete range\n     * @return this, to enable chaining\n     * @throws IndexOutOfBoundsException if the index is invalid\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.replaceAll(char, char)",
        "snippet": "    public StrBuilder replaceAll(char search, char replace) {\n        if (search != replace) {\n            for (int i = 0; i < size; i++) {\n                if (buffer[i] == search) {\n                    buffer[i] = replace;\n                }\n            }\n        }\n        return this;\n    }",
        "begin_line": 1291,
        "end_line": 1300,
        "comment": "\n     * Replaces the search character with the replace character\n     * throughout the builder.\n     *\n     * @param search  the search character\n     * @param replace  the replace character\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.replaceFirst(char, char)",
        "snippet": "    public StrBuilder replaceFirst(char search, char replace) {\n        if (search != replace) {\n            for (int i = 0; i < size; i++) {\n                if (buffer[i] == search) {\n                    buffer[i] = replace;\n                    break;\n                }\n            }\n        }\n        return this;\n    }",
        "begin_line": 1310,
        "end_line": 1320,
        "comment": "\n     * Replaces the first instance of the search character with the\n     * replace character in the builder.\n     *\n     * @param search  the search character\n     * @param replace  the replace character\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.replaceAll(java.lang.String, java.lang.String)",
        "snippet": "    public StrBuilder replaceAll(String searchStr, String replaceStr) {\n        int searchLen = (searchStr == null ? 0 : searchStr.length());\n        if (searchLen > 0) {\n            int replaceLen = (replaceStr == null ? 0 : replaceStr.length());\n            int index = indexOf(searchStr, 0);\n            while (index >= 0) {\n                replaceImpl(index, index + searchLen, searchLen, replaceStr, replaceLen);\n                index = indexOf(searchStr, index + replaceLen);\n            }\n        }\n        return this;\n    }",
        "begin_line": 1330,
        "end_line": 1341,
        "comment": "\n     * Replaces the search string with the replace string throughout the builder.\n     *\n     * @param searchStr  the search string, null causes no action to occur\n     * @param replaceStr  the replace string, null is equivalent to an empty string\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.replaceFirst(java.lang.String, java.lang.String)",
        "snippet": "    public StrBuilder replaceFirst(String searchStr, String replaceStr) {\n        int searchLen = (searchStr == null ? 0 : searchStr.length());\n        if (searchLen > 0) {\n            int index = indexOf(searchStr, 0);\n            if (index >= 0) {\n                int replaceLen = (replaceStr == null ? 0 : replaceStr.length());\n                replaceImpl(index, index + searchLen, searchLen, replaceStr, replaceLen);\n            }\n        }\n        return this;\n    }",
        "begin_line": 1350,
        "end_line": 1360,
        "comment": "\n     * Replaces the first instance of the search string with the replace string.\n     *\n     * @param searchStr  the search string, null causes no action to occur\n     * @param replaceStr  the replace string, null is equivalent to an empty string\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.replaceAll(org.apache.commons.lang.text.StrMatcher, java.lang.String)",
        "snippet": "    public StrBuilder replaceAll(StrMatcher matcher, String replaceStr) {\n        return replace(matcher, replaceStr, 0, size, -1);\n    }",
        "begin_line": 1374,
        "end_line": 1376,
        "comment": "\n     * Replaces all matches within the builder with the replace string.\n     * <p>\n     * Matchers can be used to perform advanced replace behaviour.\n     * For example you could write a matcher to replace all occurances\n     * where the character 'a' is followed by a number.\n     *\n     * @param matcher  the matcher to use to find the deletion, null causes no action\n     * @param replaceStr  the replace string, null is equivalent to an empty string\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.replaceFirst(org.apache.commons.lang.text.StrMatcher, java.lang.String)",
        "snippet": "    public StrBuilder replaceFirst(StrMatcher matcher, String replaceStr) {\n        return replace(matcher, replaceStr, 0, size, 1);\n    }",
        "begin_line": 1389,
        "end_line": 1391,
        "comment": "\n     * Replaces the first match within the builder with the replace string.\n     * <p>\n     * Matchers can be used to perform advanced replace behaviour.\n     * For example you could write a matcher to replace\n     * where the character 'a' is followed by a number.\n     *\n     * @param matcher  the matcher to use to find the deletion, null causes no action\n     * @param replaceStr  the replace string, null is equivalent to an empty string\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.replace(org.apache.commons.lang.text.StrMatcher, java.lang.String, int, int, int)",
        "snippet": "    public StrBuilder replace(\n            StrMatcher matcher, String replaceStr,\n            int startIndex, int endIndex, int replaceCount) {\n        endIndex = validateRange(startIndex, endIndex);\n        return replaceImpl(matcher, replaceStr, startIndex, endIndex, replaceCount);\n    }",
        "begin_line": 1410,
        "end_line": 1415,
        "comment": "\n     * Advanced search and replaces within the builder using a matcher.\n     * <p>\n     * Matchers can be used to perform advanced behaviour.\n     * For example you could write a matcher to delete all occurances\n     * where the character 'a' is followed by a number.\n     *\n     * @param matcher  the matcher to use to find the deletion, null causes no action\n     * @param replaceStr  the string to replace the match with, null is a delete\n     * @param startIndex  the start index, inclusive, must be valid\n     * @param endIndex  the end index, exclusive, must be valid except\n     *  that if too large it is treated as end of string\n     * @param replaceCount  the number of times to replace, -1 for replace all\n     * @return this, to enable chaining\n     * @throws IndexOutOfBoundsException if start index is invalid\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.replaceImpl(org.apache.commons.lang.text.StrMatcher, java.lang.String, int, int, int)",
        "snippet": "    private StrBuilder replaceImpl(\n            StrMatcher matcher, String replaceStr,\n            int from, int to, int replaceCount) {\n        if (matcher == null || size == 0) {\n            return this;\n        }\n        int replaceLen = (replaceStr == null ? 0 : replaceStr.length());\n        char[] buf = buffer;\n        for (int i = from; i < to && replaceCount != 0; i++) {\n            int removeLen = matcher.isMatch(buf, i, from, to);\n            if (removeLen > 0) {\n                replaceImpl(i, i + removeLen, removeLen, replaceStr, replaceLen);\n                to = to - removeLen + replaceLen;\n                i = i + replaceLen - 1;\n                if (replaceCount > 0) {\n                    replaceCount--;\n                }\n            }\n        }\n        return this;\n    }",
        "begin_line": 1432,
        "end_line": 1452,
        "comment": "\n     * Replaces within the builder using a matcher.\n     * <p>\n     * Matchers can be used to perform advanced behaviour.\n     * For example you could write a matcher to delete all occurances\n     * where the character 'a' is followed by a number.\n     *\n     * @param matcher  the matcher to use to find the deletion, null causes no action\n     * @param replaceStr  the string to replace the match with, null is a delete\n     * @param from  the start index, must be valid\n     * @param to  the end index (exclusive), must be valid\n     * @param replaceCount  the number of times to replace, -1 for replace all\n     * @return this, to enable chaining\n     * @throws IndexOutOfBoundsException if any index is invalid\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.reverse()",
        "snippet": "    public StrBuilder reverse() {\n        if (size == 0) {\n            return this;\n        }\n        \n        int half = size / 2;\n        char[] buf = buffer;\n        for (int leftIdx = 0, rightIdx = size - 1; leftIdx < half; leftIdx++,rightIdx--) {\n            char swap = buf[leftIdx];\n            buf[leftIdx] = buf[rightIdx];\n            buf[rightIdx] = swap;\n        }\n        return this;\n    }",
        "begin_line": 1460,
        "end_line": 1473,
        "comment": "\n     * Reverses the string builder placing each character in the opposite index.\n     * \n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.trim()",
        "snippet": "    public StrBuilder trim() {\n        if (size == 0) {\n            return this;\n        }\n        int len = size;\n        char[] buf = buffer;\n        int pos = 0;\n        while (pos < len && buf[pos] <= ' ') {\n            pos++;\n        }\n        while (pos < len && buf[len - 1] <= ' ') {\n            len--;\n        }\n        if (len < size) {\n            delete(len, size);\n        }\n        if (pos > 0) {\n            delete(0, pos);\n        }\n        return this;\n    }",
        "begin_line": 1482,
        "end_line": 1502,
        "comment": "\n     * Trims the builder by removing characters less than or equal to a space\n     * from the beginning and end.\n     *\n     * @return this, to enable chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.startsWith(java.lang.String)",
        "snippet": "    public boolean startsWith(String str) {\n        if (str == null) {\n            return false;\n        }\n        int len = str.length();\n        if (len == 0) {\n            return true;\n        }\n        if (len > size) {\n            return false;\n        }\n        for (int i = 0; i < len; i++) {\n            if (buffer[i] != str.charAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }",
        "begin_line": 1513,
        "end_line": 1530,
        "comment": "\n     * Checks whether this builder starts with the specified string.\n     * <p>\n     * Note that this method handles null input quietly, unlike String.\n     * \n     * @param str  the string to search for, null returns false\n     * @return true if the builder starts with the string\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.endsWith(java.lang.String)",
        "snippet": "    public boolean endsWith(String str) {\n        if (str == null) {\n            return false;\n        }\n        int len = str.length();\n        if (len == 0) {\n            return true;\n        }\n        if (len > size) {\n            return false;\n        }\n        int pos = size - len;\n        for (int i = 0; i < len; i++,pos++) {\n            if (buffer[pos] != str.charAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }",
        "begin_line": 1540,
        "end_line": 1558,
        "comment": "\n     * Checks whether this builder ends with the specified string.\n     * <p>\n     * Note that this method handles null input quietly, unlike String.\n     * \n     * @param str  the string to search for, null returns false\n     * @return true if the builder ends with the string\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.substring(int)",
        "snippet": "    public String substring(int start) {\n        return substring(start, size);\n    }",
        "begin_line": 1568,
        "end_line": 1570,
        "comment": "\n     * Extracts a portion of this string builder as a string.\n     * \n     * @param start  the start index, inclusive, must be valid\n     * @return the new string\n     * @throws IndexOutOfBoundsException if the index is invalid\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.substring(int, int)",
        "snippet": "    public String substring(int startIndex, int endIndex) {\n        endIndex = validateRange(startIndex, endIndex);\n        return new String(buffer, startIndex, endIndex - startIndex);\n    }",
        "begin_line": 1585,
        "end_line": 1588,
        "comment": "\n     * Extracts a portion of this string builder as a string.\n     * <p>\n     * Note: This method treats an endIndex greater than the length of the\n     * builder as equal to the length of the builder, and continues\n     * without error, unlike StringBuffer or String.\n     * \n     * @param startIndex  the start index, inclusive, must be valid\n     * @param endIndex  the end index, exclusive, must be valid except\n     *  that if too large it is treated as end of string\n     * @return the new string\n     * @throws IndexOutOfBoundsException if the index is invalid\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.leftString(int)",
        "snippet": "    public String leftString(int length) {\n        if (length <= 0) {\n            return \"\";\n        } else if (length >= size) {\n            return new String(buffer, 0, size);\n        } else {\n            return new String(buffer, 0, length);\n        }\n    }",
        "begin_line": 1602,
        "end_line": 1610,
        "comment": "\n     * Extracts the leftmost characters from the string builder without\n     * throwing an exception.\n     * <p>\n     * This method extracts the left <code>length</code> characters from\n     * the builder. If this many characters are not available, the whole\n     * builder is returned. Thus the returned string may be shorter than the\n     * length requested.\n     * \n     * @param length  the number of characters to extract, negative returns empty string\n     * @return the new string\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.rightString(int)",
        "snippet": "    public String rightString(int length) {\n        if (length <= 0) {\n            return \"\";\n        } else if (length >= size) {\n            return new String(buffer, 0, size);\n        } else {\n            return new String(buffer, size - length, length);\n        }\n    }",
        "begin_line": 1624,
        "end_line": 1632,
        "comment": "\n     * Extracts the rightmost characters from the string builder without\n     * throwing an exception.\n     * <p>\n     * This method extracts the right <code>length</code> characters from\n     * the builder. If this many characters are not available, the whole\n     * builder is returned. Thus the returned string may be shorter than the\n     * length requested.\n     * \n     * @param length  the number of characters to extract, negative returns empty string\n     * @return the new string\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.midString(int, int)",
        "snippet": "    public String midString(int index, int length) {\n        if (index < 0) {\n            index = 0;\n        }\n        if (length <= 0 || index >= size) {\n            return \"\";\n        }\n        if (size <= index + length) {\n            return new String(buffer, index, size - index);\n        } else {\n            return new String(buffer, index, length);\n        }\n    }",
        "begin_line": 1650,
        "end_line": 1662,
        "comment": "\n     * Extracts some characters from the middle of the string builder without\n     * throwing an exception.\n     * <p>\n     * This method extracts <code>length</code> characters from the builder\n     * at the specified index.\n     * If the index is negative it is treated as zero.\n     * If the index is greater than the builder size, it is treated as the builder size.\n     * If the length is negative, the empty string is returned.\n     * If insufficient characters are available in the builder, as much as possible is returned.\n     * Thus the returned string may be shorter than the length requested.\n     * \n     * @param index  the index to start at, negative means zero\n     * @param length  the number of characters to extract, negative returns empty string\n     * @return the new string\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.contains(char)",
        "snippet": "    public boolean contains(char ch) {\n        char[] thisBuf = buffer;\n        for (int i = 0; i < this.size; i++) {\n            if (thisBuf[i] == ch) {\n                return true;\n            }\n        }\n        return false;\n    }",
        "begin_line": 1671,
        "end_line": 1679,
        "comment": "\n     * Checks if the string builder contains the specified char.\n     *\n     * @param ch  the character to find\n     * @return true if the builder contains the character\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.contains(java.lang.String)",
        "snippet": "    public boolean contains(String str) {\n        return indexOf(str, 0) >= 0;\n    }",
        "begin_line": 1687,
        "end_line": 1689,
        "comment": "\n     * Checks if the string builder contains the specified string.\n     *\n     * @param str  the string to find\n     * @return true if the builder contains the string\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.contains(org.apache.commons.lang.text.StrMatcher)",
        "snippet": "    public boolean contains(StrMatcher matcher) {\n        return indexOf(matcher, 0) >= 0;\n    }",
        "begin_line": 1702,
        "end_line": 1704,
        "comment": "\n     * Checks if the string builder contains a string matched using the\n     * specified matcher.\n     * <p>\n     * Matchers can be used to perform advanced searching behaviour.\n     * For example you could write a matcher to search for the character\n     * 'a' followed by a number.\n     *\n     * @param matcher  the matcher to use, null returns -1\n     * @return true if the matcher finds a match in the builder\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.indexOf(char)",
        "snippet": "    public int indexOf(char ch) {\n        return indexOf(ch, 0);\n    }",
        "begin_line": 1713,
        "end_line": 1715,
        "comment": "\n     * Searches the string builder to find the first reference to the specified char.\n     * \n     * @param ch  the character to find\n     * @return the first index of the character, or -1 if not found\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.indexOf(char, int)",
        "snippet": "    public int indexOf(char ch, int startIndex) {\n        startIndex = (startIndex < 0 ? 0 : startIndex);\n        if (startIndex >= size) {\n            return -1;\n        }\n        char[] thisBuf = buffer;\n        for (int i = startIndex; i < size; i++) {\n            if (thisBuf[i] == ch) {\n                return i;\n            }\n        }\n        return -1;\n    }",
        "begin_line": 1724,
        "end_line": 1736,
        "comment": "\n     * Searches the string builder to find the first reference to the specified char.\n     * \n     * @param ch  the character to find\n     * @param startIndex  the index to start at, invalid index rounded to edge\n     * @return the first index of the character, or -1 if not found\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.indexOf(java.lang.String)",
        "snippet": "    public int indexOf(String str) {\n        return indexOf(str, 0);\n    }",
        "begin_line": 1746,
        "end_line": 1748,
        "comment": "\n     * Searches the string builder to find the first reference to the specified string.\n     * <p>\n     * Note that a null input string will return -1, whereas the JDK throws an exception.\n     * \n     * @param str  the string to find, null returns -1\n     * @return the first index of the string, or -1 if not found\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.indexOf(java.lang.String, int)",
        "snippet": "    public int indexOf(String str, int startIndex) {\n        startIndex = (startIndex < 0 ? 0 : startIndex);\n        if (str == null || startIndex >= size) {\n            return -1;\n        }\n        int strLen = str.length();\n        if (strLen == 1) {\n            return indexOf(str.charAt(0), startIndex);\n        }\n        if (strLen == 0) {\n            return startIndex;\n        }\n        if (strLen > size) {\n            return -1;\n        }\n        char[] thisBuf = buffer;\n        int len = size - strLen + 1;\n        outer:\n        for (int i = startIndex; i < len; i++) {\n            for (int j = 0; j < strLen; j++) {\n                if (str.charAt(j) != thisBuf[i + j]) {\n                    continue outer;\n                }\n            }\n            return i;\n        }\n        return -1;\n    }",
        "begin_line": 1760,
        "end_line": 1787,
        "comment": "\n     * Searches the string builder to find the first reference to the specified\n     * string starting searching from the given index.\n     * <p>\n     * Note that a null input string will return -1, whereas the JDK throws an exception.\n     * \n     * @param str  the string to find, null returns -1\n     * @param startIndex  the index to start at, invalid index rounded to edge\n     * @return the first index of the string, or -1 if not found\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.indexOf(org.apache.commons.lang.text.StrMatcher)",
        "snippet": "    public int indexOf(StrMatcher matcher) {\n        return indexOf(matcher, 0);\n    }",
        "begin_line": 1799,
        "end_line": 1801,
        "comment": "\n     * Searches the string builder using the matcher to find the first match.\n     * <p>\n     * Matchers can be used to perform advanced searching behaviour.\n     * For example you could write a matcher to find the character 'a'\n     * followed by a number.\n     *\n     * @param matcher  the matcher to use, null returns -1\n     * @return the first index matched, or -1 if not found\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.indexOf(org.apache.commons.lang.text.StrMatcher, int)",
        "snippet": "    public int indexOf(StrMatcher matcher, int startIndex) {\n        startIndex = (startIndex < 0 ? 0 : startIndex);\n        if (matcher == null || startIndex >= size) {\n            return -1;\n        }\n        int len = size;\n        char[] buf = buffer;\n        for (int i = startIndex; i < len; i++) {\n            if (matcher.isMatch(buf, i, startIndex, len) > 0) {\n                return i;\n            }\n        }\n        return -1;\n    }",
        "begin_line": 1815,
        "end_line": 1828,
        "comment": "\n     * Searches the string builder using the matcher to find the first\n     * match searching from the given index.\n     * <p>\n     * Matchers can be used to perform advanced searching behaviour.\n     * For example you could write a matcher to find the character 'a'\n     * followed by a number.\n     *\n     * @param matcher  the matcher to use, null returns -1\n     * @param startIndex  the index to start at, invalid index rounded to edge\n     * @return the first index matched, or -1 if not found\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.lastIndexOf(char)",
        "snippet": "    public int lastIndexOf(char ch) {\n        return lastIndexOf(ch, size - 1);\n    }",
        "begin_line": 1837,
        "end_line": 1839,
        "comment": "\n     * Searches the string builder to find the last reference to the specified char.\n     * \n     * @param ch  the character to find\n     * @return the last index of the character, or -1 if not found\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.lastIndexOf(char, int)",
        "snippet": "    public int lastIndexOf(char ch, int startIndex) {\n        startIndex = (startIndex >= size ? size - 1 : startIndex);\n        if (startIndex < 0) {\n            return -1;\n        }\n        for (int i = startIndex; i >= 0; i--) {\n            if (buffer[i] == ch) {\n                return i;\n            }\n        }\n        return -1;\n    }",
        "begin_line": 1848,
        "end_line": 1859,
        "comment": "\n     * Searches the string builder to find the last reference to the specified char.\n     * \n     * @param ch  the character to find\n     * @param startIndex  the index to start at, invalid index rounded to edge\n     * @return the last index of the character, or -1 if not found\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.lastIndexOf(java.lang.String)",
        "snippet": "    public int lastIndexOf(String str) {\n        return lastIndexOf(str, size - 1);\n    }",
        "begin_line": 1869,
        "end_line": 1871,
        "comment": "\n     * Searches the string builder to find the last reference to the specified string.\n     * <p>\n     * Note that a null input string will return -1, whereas the JDK throws an exception.\n     * \n     * @param str  the string to find, null returns -1\n     * @return the last index of the string, or -1 if not found\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.lastIndexOf(java.lang.String, int)",
        "snippet": "    public int lastIndexOf(String str, int startIndex) {\n        startIndex = (startIndex >= size ? size - 1 : startIndex);\n        if (str == null || startIndex < 0) {\n            return -1;\n        }\n        int strLen = str.length();\n        if (strLen > 0 && strLen <= size) {\n            if (strLen == 1) {\n                return lastIndexOf(str.charAt(0), startIndex);\n            }\n\n            outer:\n            for (int i = startIndex - strLen + 1; i >= 0; i--) {\n                for (int j = 0; j < strLen; j++) {\n                    if (str.charAt(j) != buffer[i + j]) {\n                        continue outer;\n                    }\n                }\n                return i;\n            }\n            \n        } else if (strLen == 0) {\n            return startIndex;\n        }\n        return -1;\n    }",
        "begin_line": 1883,
        "end_line": 1908,
        "comment": "\n     * Searches the string builder to find the last reference to the specified\n     * string starting searching from the given index.\n     * <p>\n     * Note that a null input string will return -1, whereas the JDK throws an exception.\n     * \n     * @param str  the string to find, null returns -1\n     * @param startIndex  the index to start at, invalid index rounded to edge\n     * @return the last index of the string, or -1 if not found\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.lastIndexOf(org.apache.commons.lang.text.StrMatcher)",
        "snippet": "    public int lastIndexOf(StrMatcher matcher) {\n        return lastIndexOf(matcher, size);\n    }",
        "begin_line": 1920,
        "end_line": 1922,
        "comment": "\n     * Searches the string builder using the matcher to find the last match.\n     * <p>\n     * Matchers can be used to perform advanced searching behaviour.\n     * For example you could write a matcher to find the character 'a'\n     * followed by a number.\n     *\n     * @param matcher  the matcher to use, null returns -1\n     * @return the last index matched, or -1 if not found\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.lastIndexOf(org.apache.commons.lang.text.StrMatcher, int)",
        "snippet": "    public int lastIndexOf(StrMatcher matcher, int startIndex) {\n        startIndex = (startIndex >= size ? size - 1 : startIndex);\n        if (matcher == null || startIndex < 0) {\n            return -1;\n        }\n        char[] buf = buffer;\n        int endIndex = startIndex + 1;\n        for (int i = startIndex; i >= 0; i--) {\n            if (matcher.isMatch(buf, i, 0, endIndex) > 0) {\n                return i;\n            }\n        }\n        return -1;\n    }",
        "begin_line": 1936,
        "end_line": 1949,
        "comment": "\n     * Searches the string builder using the matcher to find the last\n     * match searching from the given index.\n     * <p>\n     * Matchers can be used to perform advanced searching behaviour.\n     * For example you could write a matcher to find the character 'a'\n     * followed by a number.\n     *\n     * @param matcher  the matcher to use, null returns -1\n     * @param startIndex  the index to start at, invalid index rounded to edge\n     * @return the last index matched, or -1 if not found\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.asTokenizer()",
        "snippet": "    public StrTokenizer asTokenizer() {\n        return new StrBuilderTokenizer();\n    }",
        "begin_line": 1984,
        "end_line": 1986,
        "comment": "\n     * Creates a tokenizer that can tokenize the contents of this builder.\n     * <p>\n     * This method allows the contents of this builder to be tokenized.\n     * The tokenizer will be setup by default to tokenize on space, tab,\n     * newline and formfeed (as per StringTokenizer). These values can be\n     * changed on the tokenizer class, before retrieving the tokens.\n     * <p>\n     * The returned tokenizer is linked to this builder. You may intermix\n     * calls to the buider and tokenizer within certain limits, however\n     * there is no synchronization. Once the tokenizer has been used once,\n     * it must be {@link StrTokenizer#reset() reset} to pickup the latest\n     * changes in the builder. For example:\n     * <pre>\n     * StrBuilder b = new StrBuilder();\n     * b.append(\"a b \");\n     * StrTokenizer t = b.asTokenizer();\n     * String[] tokens1 = t.getTokenArray();  // returns a,b\n     * b.append(\"c d \");\n     * String[] tokens2 = t.getTokenArray();  // returns a,b (c and d ignored)\n     * t.reset();              // reset causes builder changes to be picked up\n     * String[] tokens3 = t.getTokenArray();  // returns a,b,c,d\n     * </pre>\n     * In addition to simply intermixing appends and tokenization, you can also\n     * call the set methods on the tokenizer to alter how it tokenizes. Just\n     * remember to call reset when you want to pickup builder changes.\n     * <p>\n     * Calling {@link StrTokenizer#reset(String)} or {@link StrTokenizer#reset(char[])}\n     * with a non-null value will break the link with the builder.\n     *\n     * @return a tokenizer that is linked to this builder\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.asReader()",
        "snippet": "    public Reader asReader() {\n        return new StrBuilderReader();\n    }",
        "begin_line": 2008,
        "end_line": 2010,
        "comment": "\n     * Gets the contents of this builder as a Reader.\n     * <p>\n     * This method allows the contents of the builder to be read\n     * using any standard method that expects a Reader.\n     * <p>\n     * To use, simply create a <code>StrBuilder</code>, populate it with\n     * data, call <code>asReader</code>, and then read away.\n     * <p>\n     * The internal character array is shared between the builder and the reader.\n     * This allows you to append to the builder after creating the reader,\n     * and the changes will be picked up.\n     * Note however, that no synchronization occurs, so you must perform\n     * all operations with the builder and the reader in one thread.\n     * <p>\n     * The returned reader supports marking, and ignores the flush method.\n     *\n     * @return a reader that reads from this builder\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.asWriter()",
        "snippet": "    public Writer asWriter() {\n        return new StrBuilderWriter();\n    }",
        "begin_line": 2033,
        "end_line": 2035,
        "comment": "\n     * Gets this builder as a Writer that can be written to.\n     * <p>\n     * This method allows you to populate the contents of the builder\n     * using any standard method that takes a Writer.\n     * <p>\n     * To use, simply create a <code>StrBuilder</code>,\n     * call <code>asWriter</code>, and populate away. The data is available\n     * at any time using the methods of the <code>StrBuilder</code>.\n     * <p>\n     * The internal character array is shared between the builder and the writer.\n     * This allows you to intermix calls that append to the builder and\n     * write using the writer and the changes will be occur correctly.\n     * Note however, that no synchronization occurs, so you must perform\n     * all operations with the builder and the writer in one thread.\n     * <p>\n     * The returned writer ignores the close and flush methods.\n     *\n     * @return a writer that populates this builder\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.equalsIgnoreCase(org.apache.commons.lang.text.StrBuilder)",
        "snippet": "    public boolean equalsIgnoreCase(StrBuilder other) {\n        if (this == other) {\n            return true;\n        }\n        if (this.size != other.size) {\n            return false;\n        }\n        char thisBuf[] = this.buffer;\n        char otherBuf[] = other.buffer;\n        for (int i = size - 1; i >= 0; i--) {\n            char c1 = thisBuf[i];\n            char c2 = otherBuf[i];\n            if (c1 != c2 && Character.toUpperCase(c1) != Character.toUpperCase(c2)) {\n                return false;\n            }\n        }\n        return true;\n    }",
        "begin_line": 2075,
        "end_line": 2092,
        "comment": "\n     * Checks the contents of this builder against another to see if they\n     * contain the same character content ignoring case.\n     *\n     * @param other  the object to check, null returns false\n     * @return true if the builders contain the same characters in the same order\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.equals(org.apache.commons.lang.text.StrBuilder)",
        "snippet": "    public boolean equals(StrBuilder other) {\n        if (this == other) {\n            return true;\n        }\n        if (this.size != other.size) {\n            return false;\n        }\n        char thisBuf[] = this.buffer;\n        char otherBuf[] = other.buffer;\n        for (int i = size - 1; i >= 0; i--) {\n            if (thisBuf[i] != otherBuf[i]) {\n                return false;\n            }\n        }\n        return true;\n    }",
        "begin_line": 2101,
        "end_line": 2116,
        "comment": "\n     * Checks the contents of this builder against another to see if they\n     * contain the same character content.\n     *\n     * @param other  the object to check, null returns false\n     * @return true if the builders contain the same characters in the same order\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj instanceof StrBuilder) {\n            return equals((StrBuilder) obj);\n        }\n        return false;\n    }",
        "begin_line": 2125,
        "end_line": 2130,
        "comment": "\n     * Checks the contents of this builder against another to see if they\n     * contain the same character content.\n     *\n     * @param obj  the object to check, null returns false\n     * @return true if the builders contain the same characters in the same order\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.hashCode()",
        "snippet": "    public int hashCode() {\n        char buf[] = buffer;\n        int hash = 0;\n        for (int i = size - 1; i >= 0; i--) {\n            hash = 31 * hash + buf[i];\n        }\n        return hash;\n    }",
        "begin_line": 2137,
        "end_line": 2144,
        "comment": "\n     * Gets a suitable hash code for this builder.\n     *\n     * @return a hash code\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.toString()",
        "snippet": "    public String toString() {\n        return new String(buffer, 0, size);\n    }",
        "begin_line": 2156,
        "end_line": 2158,
        "comment": "\n     * Gets a String version of the string builder, creating a new instance\n     * each time the method is called.\n     * <p>\n     * Note that unlike StringBuffer, the string version returned is\n     * independent of the string builder.\n     *\n     * @return the builder as a String\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.toStringBuffer()",
        "snippet": "    public StringBuffer toStringBuffer() {\n        return new StringBuffer(size).append(buffer, 0, size);\n    }",
        "begin_line": 2166,
        "end_line": 2168,
        "comment": "\n     * Gets a StringBuffer version of the string builder, creating a\n     * new instance each time the method is called.\n     *\n     * @return the builder as a StringBuffer\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.validateRange(int, int)",
        "snippet": "    protected int validateRange(int startIndex, int endIndex) {\n        if (startIndex < 0) {\n            throw new StringIndexOutOfBoundsException(startIndex);\n        }\n        if (endIndex > size) {\n            endIndex = size;\n        }\n        if (startIndex > endIndex) {\n            throw new StringIndexOutOfBoundsException(\"end < start\");\n        }\n        return endIndex;\n    }",
        "begin_line": 2180,
        "end_line": 2191,
        "comment": "\n     * Validates parameters defining a range of the builder.\n     * \n     * @param startIndex  the start index, inclusive, must be valid\n     * @param endIndex  the end index, exclusive, must be valid except\n     *  that if too large it is treated as end of string\n     * @return the new string\n     * @throws IndexOutOfBoundsException if the index is invalid\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.validateIndex(int)",
        "snippet": "    protected void validateIndex(int index) {\n        if (index < 0 || index > size) {\n            throw new StringIndexOutOfBoundsException(index);\n        }\n    }",
        "begin_line": 2199,
        "end_line": 2203,
        "comment": "\n     * Validates parameters defining a single index in the builder.\n     * \n     * @param index  the index, must be valid\n     * @throws IndexOutOfBoundsException if the index is invalid\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.StrBuilderTokenizer.StrBuilderTokenizer()",
        "snippet": "        StrBuilderTokenizer() {\n            super();\n        }",
        "begin_line": 2212,
        "end_line": 2214,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "java.lang.Cloneable": null,
            "org.apache.commons.lang.text.StrTokenizer": null,
            "java.util.ListIterator": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.StrBuilderTokenizer.tokenize(char[], int, int)",
        "snippet": "        protected List tokenize(char[] chars, int offset, int count) {\n            if (chars == null) {\n                return super.tokenize(StrBuilder.this.buffer, 0, StrBuilder.this.size());\n            } else {\n                return super.tokenize(chars, offset, count);\n            }\n        }",
        "begin_line": 2217,
        "end_line": 2223,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "java.lang.Cloneable": null,
            "org.apache.commons.lang.text.StrTokenizer": "\n     * Internal method to performs the tokenization.\n     * <p>\n     * Most users of this class do not need to call this method. This method\n     * will be called automatically by other (public) methods when required.\n     * <p>\n     * This method exists to allow subclasses to add code before or after the\n     * tokenization. For example, a subclass could alter the character array,\n     * offset or count to be parsed, or call the tokenizer multiple times on\n     * multiple strings. It is also be possible to filter the results.\n     * <p>\n     * <code>StrTokenizer</code> will always pass a zero offset and a count\n     * equal to the length of the array to this method, however a subclass\n     * may pass other values, or even an entirely different array.\n     * \n     * @param chars  the character array being tokenized, may be null\n     * @param offset  the start position within the character array, must be valid\n     * @param count  the number of characters to tokenize, must be valid\n     * @return the modifiable list of String tokens, unmodifiable if null array or zero count\n     "
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.StrBuilderTokenizer.getContent()",
        "snippet": "        public String getContent() {\n            String str = super.getContent();\n            if (str == null) {\n                return StrBuilder.this.toString();\n            } else {\n                return str;\n            }\n        }",
        "begin_line": 2226,
        "end_line": 2233,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "java.lang.Cloneable": null,
            "org.apache.commons.lang.text.StrTokenizer": "\n     * Gets the String content that the tokenizer is parsing.\n     *\n     * @return the string content being parsed\n     "
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.StrBuilderReader.StrBuilderReader()",
        "snippet": "        StrBuilderReader() {\n            super();\n        }",
        "begin_line": 2247,
        "end_line": 2249,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "java.lang.Cloneable": null,
            "java.io.Reader": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.StrBuilderReader.close()",
        "snippet": "        public void close() {\n            // do nothing\n        }",
        "begin_line": 2252,
        "end_line": 2254,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "java.lang.Cloneable": null,
            "java.io.Reader": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.StrBuilderReader.read()",
        "snippet": "        public int read() {\n            if (ready() == false) {\n                return -1;\n            }\n            return StrBuilder.this.charAt(pos++);\n        }",
        "begin_line": 2257,
        "end_line": 2262,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "java.lang.Cloneable": null,
            "java.io.Reader": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.StrBuilderReader.read(char[], int, int)",
        "snippet": "        public int read(char b[], int off, int len) {\n            if (off < 0 || len < 0 || off > b.length ||\n                    (off + len) > b.length || (off + len) < 0) {\n                throw new IndexOutOfBoundsException();\n            }\n            if (len == 0) {\n                return 0;\n            }\n            if (pos >= StrBuilder.this.size()) {\n                return -1;\n            }\n            if (pos + len > size()) {\n                len = StrBuilder.this.size() - pos;\n            }\n            StrBuilder.this.getChars(pos, pos + len, b, off);\n            pos += len;\n            return len;\n        }",
        "begin_line": 2265,
        "end_line": 2282,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "java.lang.Cloneable": null,
            "java.io.Reader": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.StrBuilderReader.skip(long)",
        "snippet": "        public long skip(long n) {\n            if (pos + n > StrBuilder.this.size()) {\n                n = StrBuilder.this.size() - pos;\n            }\n            if (n < 0) {\n                return 0;\n            }\n            pos += n;\n            return n;\n        }",
        "begin_line": 2285,
        "end_line": 2294,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "java.lang.Cloneable": null,
            "java.io.Reader": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.StrBuilderReader.ready()",
        "snippet": "        public boolean ready() {\n            return pos < StrBuilder.this.size();\n        }",
        "begin_line": 2297,
        "end_line": 2299,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "java.lang.Cloneable": null,
            "java.io.Reader": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.StrBuilderReader.markSupported()",
        "snippet": "        public boolean markSupported() {\n            return true;\n        }",
        "begin_line": 2302,
        "end_line": 2304,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "java.lang.Cloneable": null,
            "java.io.Reader": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.StrBuilderReader.mark(int)",
        "snippet": "        public void mark(int readAheadLimit) {\n            mark = pos;\n        }",
        "begin_line": 2307,
        "end_line": 2309,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "java.lang.Cloneable": null,
            "java.io.Reader": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.StrBuilderReader.reset()",
        "snippet": "        public void reset() {\n            pos = mark;\n        }",
        "begin_line": 2312,
        "end_line": 2314,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "java.lang.Cloneable": null,
            "java.io.Reader": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.StrBuilderWriter.StrBuilderWriter()",
        "snippet": "        StrBuilderWriter() {\n            super();\n        }",
        "begin_line": 2324,
        "end_line": 2326,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "java.lang.Cloneable": null,
            "java.io.Writer": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.StrBuilderWriter.close()",
        "snippet": "        public void close() {\n            // do nothing\n        }",
        "begin_line": 2329,
        "end_line": 2331,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "java.lang.Cloneable": null,
            "java.io.Writer": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.StrBuilderWriter.flush()",
        "snippet": "        public void flush() {\n            // do nothing\n        }",
        "begin_line": 2334,
        "end_line": 2336,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "java.lang.Cloneable": null,
            "java.io.Writer": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.StrBuilderWriter.write(int)",
        "snippet": "        public void write(int c) {\n            StrBuilder.this.append((char) c);\n        }",
        "begin_line": 2339,
        "end_line": 2341,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "java.lang.Cloneable": null,
            "java.io.Writer": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.StrBuilderWriter.write(char[])",
        "snippet": "        public void write(char[] cbuf) {\n            StrBuilder.this.append(cbuf);\n        }",
        "begin_line": 2344,
        "end_line": 2346,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "java.lang.Cloneable": null,
            "java.io.Writer": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.StrBuilderWriter.write(char[], int, int)",
        "snippet": "        public void write(char[] cbuf, int off, int len) {\n            StrBuilder.this.append(cbuf, off, len);\n        }",
        "begin_line": 2349,
        "end_line": 2351,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "java.lang.Cloneable": null,
            "java.io.Writer": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.StrBuilderWriter.write(java.lang.String)",
        "snippet": "        public void write(String str) {\n            StrBuilder.this.append(str);\n        }",
        "begin_line": 2354,
        "end_line": 2356,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "java.lang.Cloneable": null,
            "java.io.Writer": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
        "class_name": "org.apache.commons.lang.text.StrBuilder",
        "signature": "org.apache.commons.lang.text.StrBuilder.StrBuilderWriter.write(java.lang.String, int, int)",
        "snippet": "        public void write(String str, int off, int len) {\n            StrBuilder.this.append(str, off, len);\n        }",
        "begin_line": 2359,
        "end_line": 2361,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "java.lang.Cloneable": null,
            "java.io.Writer": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DateFormatUtils",
        "signature": "org.apache.commons.lang.time.DateFormatUtils.DateFormatUtils()",
        "snippet": "    public DateFormatUtils() {\n        super();\n    }",
        "begin_line": 115,
        "end_line": 117,
        "comment": "\n     * <p>DateFormatUtils instances should NOT be constructed in standard programming.</p>\n     *\n     * <p>This constructor is public to permit tools that require a JavaBean instance\n     * to operate.</p>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DateFormatUtils",
        "signature": "org.apache.commons.lang.time.DateFormatUtils.formatUTC(long, java.lang.String)",
        "snippet": "    public static String formatUTC(long millis, String pattern) {\n        return format(new Date(millis), pattern, DateUtils.UTC_TIME_ZONE, null);\n    }",
        "begin_line": 126,
        "end_line": 128,
        "comment": "\n     * <p>Formats a date/time into a specific pattern using the UTC time zone.</p>\n     * \n     * @param millis  the date to format expressed in milliseconds\n     * @param pattern  the pattern to use to format the date\n     * @return the formatted date\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DateFormatUtils",
        "signature": "org.apache.commons.lang.time.DateFormatUtils.formatUTC(java.util.Date, java.lang.String)",
        "snippet": "    public static String formatUTC(Date date, String pattern) {\n        return format(date, pattern, DateUtils.UTC_TIME_ZONE, null);\n    }",
        "begin_line": 137,
        "end_line": 139,
        "comment": "\n     * <p>Formats a date/time into a specific pattern using the UTC time zone.</p>\n     * \n     * @param date  the date to format\n     * @param pattern  the pattern to use to format the date\n     * @return the formatted date\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DateFormatUtils",
        "signature": "org.apache.commons.lang.time.DateFormatUtils.formatUTC(long, java.lang.String, java.util.Locale)",
        "snippet": "    public static String formatUTC(long millis, String pattern, Locale locale) {\n        return format(new Date(millis), pattern, DateUtils.UTC_TIME_ZONE, locale);\n    }",
        "begin_line": 149,
        "end_line": 151,
        "comment": "\n     * <p>Formats a date/time into a specific pattern using the UTC time zone.</p>\n     * \n     * @param millis  the date to format expressed in milliseconds\n     * @param pattern  the pattern to use to format the date\n     * @param locale  the locale to use, may be <code>null</code>\n     * @return the formatted date\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DateFormatUtils",
        "signature": "org.apache.commons.lang.time.DateFormatUtils.formatUTC(java.util.Date, java.lang.String, java.util.Locale)",
        "snippet": "    public static String formatUTC(Date date, String pattern, Locale locale) {\n        return format(date, pattern, DateUtils.UTC_TIME_ZONE, locale);\n    }",
        "begin_line": 161,
        "end_line": 163,
        "comment": "\n     * <p>Formats a date/time into a specific pattern using the UTC time zone.</p>\n     * \n     * @param date  the date to format\n     * @param pattern  the pattern to use to format the date\n     * @param locale  the locale to use, may be <code>null</code>\n     * @return the formatted date\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DateFormatUtils",
        "signature": "org.apache.commons.lang.time.DateFormatUtils.format(long, java.lang.String)",
        "snippet": "    public static String format(long millis, String pattern) {\n        return format(new Date(millis), pattern, null, null);\n    }",
        "begin_line": 172,
        "end_line": 174,
        "comment": "\n     * <p>Formats a date/time into a specific pattern.</p>\n     * \n     * @param millis  the date to format expressed in milliseconds\n     * @param pattern  the pattern to use to format the date\n     * @return the formatted date\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DateFormatUtils",
        "signature": "org.apache.commons.lang.time.DateFormatUtils.format(java.util.Date, java.lang.String)",
        "snippet": "    public static String format(Date date, String pattern) {\n        return format(date, pattern, null, null);\n    }",
        "begin_line": 183,
        "end_line": 185,
        "comment": "\n     * <p>Formats a date/time into a specific pattern.</p>\n     * \n     * @param date  the date to format\n     * @param pattern  the pattern to use to format the date\n     * @return the formatted date\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DateFormatUtils",
        "signature": "org.apache.commons.lang.time.DateFormatUtils.format(long, java.lang.String, java.util.TimeZone)",
        "snippet": "    public static String format(long millis, String pattern, TimeZone timeZone) {\n        return format(new Date(millis), pattern, timeZone, null);\n    }",
        "begin_line": 195,
        "end_line": 197,
        "comment": "\n     * <p>Formats a date/time into a specific pattern in a time zone.</p>\n     * \n     * @param millis  the time expressed in milliseconds\n     * @param pattern  the pattern to use to format the date\n     * @param timeZone  the time zone  to use, may be <code>null</code>\n     * @return the formatted date\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DateFormatUtils",
        "signature": "org.apache.commons.lang.time.DateFormatUtils.format(java.util.Date, java.lang.String, java.util.TimeZone)",
        "snippet": "    public static String format(Date date, String pattern, TimeZone timeZone) {\n        return format(date, pattern, timeZone, null);\n    }",
        "begin_line": 207,
        "end_line": 209,
        "comment": "\n     * <p>Formats a date/time into a specific pattern in a time zone.</p>\n     * \n     * @param date  the date to format\n     * @param pattern  the pattern to use to format the date\n     * @param timeZone  the time zone  to use, may be <code>null</code>\n     * @return the formatted date\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DateFormatUtils",
        "signature": "org.apache.commons.lang.time.DateFormatUtils.format(long, java.lang.String, java.util.Locale)",
        "snippet": "    public static String format(long millis, String pattern, Locale locale) {\n        return format(new Date(millis), pattern, null, locale);\n    }",
        "begin_line": 219,
        "end_line": 221,
        "comment": "\n     * <p>Formats a date/time into a specific pattern in a locale.</p>\n     * \n     * @param millis  the date to format expressed in milliseconds\n     * @param pattern  the pattern to use to format the date\n     * @param locale  the locale to use, may be <code>null</code>\n     * @return the formatted date\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DateFormatUtils",
        "signature": "org.apache.commons.lang.time.DateFormatUtils.format(java.util.Date, java.lang.String, java.util.Locale)",
        "snippet": "    public static String format(Date date, String pattern, Locale locale) {\n        return format(date, pattern, null, locale);\n    }",
        "begin_line": 231,
        "end_line": 233,
        "comment": "\n     * <p>Formats a date/time into a specific pattern in a locale.</p>\n     * \n     * @param date  the date to format\n     * @param pattern  the pattern to use to format the date\n     * @param locale  the locale to use, may be <code>null</code>\n     * @return the formatted date\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DateFormatUtils",
        "signature": "org.apache.commons.lang.time.DateFormatUtils.format(long, java.lang.String, java.util.TimeZone, java.util.Locale)",
        "snippet": "    public static String format(long millis, String pattern, TimeZone timeZone, Locale locale) {\n        return format(new Date(millis), pattern, timeZone, locale);\n    }",
        "begin_line": 244,
        "end_line": 246,
        "comment": "\n     * <p>Formats a date/time into a specific pattern in a time zone  and locale.</p>\n     * \n     * @param millis  the date to format expressed in milliseconds\n     * @param pattern  the pattern to use to format the date\n     * @param timeZone  the time zone  to use, may be <code>null</code>\n     * @param locale  the locale to use, may be <code>null</code>\n     * @return the formatted date\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DateFormatUtils",
        "signature": "org.apache.commons.lang.time.DateFormatUtils.format(java.util.Date, java.lang.String, java.util.TimeZone, java.util.Locale)",
        "snippet": "    public static String format(Date date, String pattern, TimeZone timeZone, Locale locale) {\n        FastDateFormat df = FastDateFormat.getInstance(pattern, timeZone, locale);\n        return df.format(date);\n    }",
        "begin_line": 257,
        "end_line": 260,
        "comment": "\n     * <p>Formats a date/time into a specific pattern in a time zone  and locale.</p>\n     * \n     * @param date  the date to format\n     * @param pattern  the pattern to use to format the date\n     * @param timeZone  the time zone  to use, may be <code>null</code>\n     * @param locale  the locale to use, may be <code>null</code>\n     * @return the formatted date\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DurationFormatUtils",
        "signature": "org.apache.commons.lang.time.DurationFormatUtils.DurationFormatUtils()",
        "snippet": "    public DurationFormatUtils() {\n        super();\n    }",
        "begin_line": 57,
        "end_line": 59,
        "comment": "\n     * <p>DurationFormatUtils instances should NOT be constructed in standard programming.</p>\n     *\n     * <p>This constructor is public to permit tools that require a JavaBean instance\n     * to operate.</p>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DurationFormatUtils",
        "signature": "org.apache.commons.lang.time.DurationFormatUtils.formatDurationHMS(long)",
        "snippet": "    public static String formatDurationHMS(long durationMillis) {\n        return formatDuration(durationMillis, \"H:mm:ss.SSS\");\n    }",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\n     * <p>Formats the time gap as a string.</p>\n     * \n     * <p>The format used is ISO8601-like:\n     * <i>H</i>:<i>m</i>:<i>s</i>.<i>S</i>.</p>\n     * \n     * @param durationMillis  the duration to format\n     * @return the time as a String\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DurationFormatUtils",
        "signature": "org.apache.commons.lang.time.DurationFormatUtils.formatDurationISO(long)",
        "snippet": "    public static String formatDurationISO(long durationMillis) {\n        return formatDuration(durationMillis, ISO_EXTENDED_FORMAT_PATTERN, false);\n    }",
        "begin_line": 95,
        "end_line": 97,
        "comment": "\n     * <p>Formats the time gap as a string.</p>\n     * \n     * <p>The format used is the ISO8601 period format.</p>\n     * \n     * <p>This method formats durations using the days and lower fields of the\n     * ISO format pattern, such as P7D6TH5M4.321S.</p>\n     * \n     * @param durationMillis  the duration to format\n     * @return the time as a String\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DurationFormatUtils",
        "signature": "org.apache.commons.lang.time.DurationFormatUtils.formatDuration(long, java.lang.String)",
        "snippet": "    public static String formatDuration(long durationMillis, String format) {\n        return formatDuration(durationMillis, format, true);\n    }",
        "begin_line": 110,
        "end_line": 112,
        "comment": "\n     * <p>Formats the time gap as a string, using the specified format, and padding with zeros and \n     * using the default timezone.</p>\n     * \n     * <p>This method formats durations using the days and lower fields of the\n     * format pattern. Months and larger are not used.</p>\n     * \n     * @param durationMillis  the duration to format\n     * @param format  the way in which to format the duration\n     * @return the time as a String\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DurationFormatUtils",
        "signature": "org.apache.commons.lang.time.DurationFormatUtils.formatDuration(long, java.lang.String, boolean)",
        "snippet": "    public static String formatDuration(long durationMillis, String format, boolean padWithZeros) {\n\n        Token[] tokens = lexx(format);\n\n        int days         = 0;\n        int hours        = 0;\n        int minutes      = 0;\n        int seconds      = 0;\n        int milliseconds = 0;\n        \n        if (Token.containsTokenWithValue(tokens, d) ) {\n            days = (int) (durationMillis / DateUtils.MILLIS_PER_DAY);\n            durationMillis = durationMillis - (days * DateUtils.MILLIS_PER_DAY);\n        }\n        if (Token.containsTokenWithValue(tokens, H) ) {\n            hours = (int) (durationMillis / DateUtils.MILLIS_PER_HOUR);\n            durationMillis = durationMillis - (hours * DateUtils.MILLIS_PER_HOUR);\n        }\n        if (Token.containsTokenWithValue(tokens, m) ) {\n            minutes = (int) (durationMillis / DateUtils.MILLIS_PER_MINUTE);\n            durationMillis = durationMillis - (minutes * DateUtils.MILLIS_PER_MINUTE);\n        }\n        if (Token.containsTokenWithValue(tokens, s) ) {\n            seconds = (int) (durationMillis / DateUtils.MILLIS_PER_SECOND);\n            durationMillis = durationMillis - (seconds * DateUtils.MILLIS_PER_SECOND);\n        }\n        if (Token.containsTokenWithValue(tokens, S) ) {\n            milliseconds = (int) durationMillis;\n        }\n\n        return format(tokens, 0, 0, days, hours, minutes, seconds, milliseconds, padWithZeros);\n    }",
        "begin_line": 127,
        "end_line": 158,
        "comment": "\n     * <p>Formats the time gap as a string, using the specified format.\n     * Padding the left hand side of numbers with zeroes is optional and \n     * the timezone may be specified.</p>\n     * \n     * <p>This method formats durations using the days and lower fields of the\n     * format pattern. Months and larger are not used.</p>\n     * \n     * @param durationMillis  the duration to format\n     * @param format  the way in which to format the duration\n     * @param padWithZeros  whether to pad the left hand side of numbers with 0's\n     * @return the time as a String\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DurationFormatUtils",
        "signature": "org.apache.commons.lang.time.DurationFormatUtils.formatDurationWords(long, boolean, boolean)",
        "snippet": "    public static String formatDurationWords(\n        long durationMillis,\n        boolean suppressLeadingZeroElements,\n        boolean suppressTrailingZeroElements) {\n\n        // This method is generally replacable by the format method, but \n        // there are a series of tweaks and special cases that require \n        // trickery to replicate.\n        String duration = formatDuration(durationMillis, \"d' days 'H' hours 'm' minutes 's' seconds'\");\n        if (suppressLeadingZeroElements) {\n            // this is a temporary marker on the front. Like ^ in regexp.\n            duration = \" \" + duration;\n            String tmp = StringUtils.replaceOnce(duration, \" 0 days\", \"\");\n            if (tmp.length() != duration.length()) {\n                duration = tmp;\n                tmp = StringUtils.replaceOnce(duration, \" 0 hours\", \"\");\n                if (tmp.length() != duration.length()) {\n                    duration = tmp;\n                    tmp = StringUtils.replaceOnce(duration, \" 0 minutes\", \"\");\n                    duration = tmp;\n                    if (tmp.length() != duration.length()) {\n                        duration = StringUtils.replaceOnce(tmp, \" 0 seconds\", \"\");\n                    }\n                }\n            }\n            if (duration.length() != 0) {\n                // strip the space off again\n                duration = duration.substring(1);\n            }\n        }\n        if (suppressTrailingZeroElements) {\n            String tmp = StringUtils.replaceOnce(duration, \" 0 seconds\", \"\");\n            if (tmp.length() != duration.length()) {\n                duration = tmp;\n                tmp = StringUtils.replaceOnce(duration, \" 0 minutes\", \"\");\n                if (tmp.length() != duration.length()) {\n                    duration = tmp;\n                    tmp = StringUtils.replaceOnce(duration, \" 0 hours\", \"\");\n                    if (tmp.length() != duration.length()) {\n                        duration = StringUtils.replaceOnce(tmp, \" 0 days\", \"\");\n                    }\n                }\n            }\n        }\n        // handle plurals\n        duration = \" \" + duration;\n        duration = StringUtils.replaceOnce(duration, \" 1 seconds\", \" 1 second\");\n        duration = StringUtils.replaceOnce(duration, \" 1 minutes\", \" 1 minute\");\n        duration = StringUtils.replaceOnce(duration, \" 1 hours\", \" 1 hour\");\n        duration = StringUtils.replaceOnce(duration, \" 1 days\", \" 1 day\");\n        return duration.trim();\n    }",
        "begin_line": 171,
        "end_line": 222,
        "comment": "\n     * <p>Formats an elapsed time into a plurialization correct string.</p>\n     * \n     * <p>This method formats durations using the days and lower fields of the\n     * format pattern. Months and larger are not used.</p>\n     * \n     * @param durationMillis  the elapsed time to report in milliseconds\n     * @param suppressLeadingZeroElements  suppresses leading 0 elements\n     * @param suppressTrailingZeroElements  suppresses trailing 0 elements\n     * @return the formatted text in days/hours/minutes/seconds\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DurationFormatUtils",
        "signature": "org.apache.commons.lang.time.DurationFormatUtils.formatPeriodISO(long, long)",
        "snippet": "    public static String formatPeriodISO(long startMillis, long endMillis) {\n        return formatPeriod(startMillis, endMillis, ISO_EXTENDED_FORMAT_PATTERN, false, TimeZone.getDefault());\n    }",
        "begin_line": 234,
        "end_line": 236,
        "comment": "\n     * <p>Formats the time gap as a string.</p>\n     * \n     * <p>The format used is the ISO8601 period format.</p>\n     * \n     * @param startMillis  the start of the duration to format\n     * @param endMillis  the end of the duration to format\n     * @return the time as a String\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DurationFormatUtils",
        "signature": "org.apache.commons.lang.time.DurationFormatUtils.formatPeriod(long, long, java.lang.String)",
        "snippet": "    public static String formatPeriod(long startMillis, long endMillis, String format) {\n        return formatPeriod(startMillis, endMillis, format, true, TimeZone.getDefault());\n    }",
        "begin_line": 247,
        "end_line": 249,
        "comment": "\n     * <p>Formats the time gap as a string, using the specified format.\n     * Padding the left hand side of numbers with zeroes is optional.\n     * \n     * @param startMillis  the start of the duration\n     * @param endMillis  the end of the duration\n     * @param format  the way in which to format the duration\n     * @return the time as a String\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DurationFormatUtils",
        "signature": "org.apache.commons.lang.time.DurationFormatUtils.formatPeriod(long, long, java.lang.String, boolean, java.util.TimeZone)",
        "snippet": "    public static String formatPeriod(long startMillis, long endMillis, String format, boolean padWithZeros, \n            TimeZone timezone) {\n\n        // Used to optimise for differences under 28 days and \n        // called formatDuration(millis, format); however this did not work \n        // over leap years. \n        // TODO: Compare performance to see if anything was lost by \n        // losing this optimisation. \n        \n        Token[] tokens = lexx(format);\n\n        // timezones get funky around 0, so normalizing everything to GMT \n        // stops the hours being off\n        Calendar start = Calendar.getInstance(timezone);\n        start.setTime(new Date(startMillis));\n        Calendar end = Calendar.getInstance(timezone);\n        end.setTime(new Date(endMillis));\n\n        // initial estimates\n        int milliseconds = end.get(Calendar.MILLISECOND) - start.get(Calendar.MILLISECOND);\n        int seconds = end.get(Calendar.SECOND) - start.get(Calendar.SECOND);\n        int minutes = end.get(Calendar.MINUTE) - start.get(Calendar.MINUTE);\n        int hours = end.get(Calendar.HOUR_OF_DAY) - start.get(Calendar.HOUR_OF_DAY);\n        int days = end.get(Calendar.DAY_OF_MONTH) - start.get(Calendar.DAY_OF_MONTH);\n        int months = end.get(Calendar.MONTH) - start.get(Calendar.MONTH);\n        int years = end.get(Calendar.YEAR) - start.get(Calendar.YEAR);\n\n        // each initial estimate is adjusted in case it is under 0\n        while (milliseconds < 0) {\n            milliseconds += 1000;\n            seconds -= 1;\n        }\n        while (seconds < 0) {\n            seconds += 60;\n            minutes -= 1;\n        }\n        while (minutes < 0) {\n            minutes += 60;\n            hours -= 1;\n        }\n        while (hours < 0) {\n            hours += 24;\n            days -= 1;\n        }\n       \n        if (Token.containsTokenWithValue(tokens, M)) {\n            while (days < 0) {\n                days += start.getActualMaximum(Calendar.DAY_OF_MONTH);\n                months -= 1;\n                start.add(Calendar.MONTH, 1);\n            }\n\n            while (months < 0) {\n                months += 12;\n                years -= 1;\n            }\n\n            if (!Token.containsTokenWithValue(tokens, y) && years != 0) {\n                while (years != 0) {\n                    months += 12 * years;\n                    years = 0;\n                }\n            }\n        } else {\n            // there are no M's in the format string\n\n            if( !Token.containsTokenWithValue(tokens, y) ) {\n                int target = end.get(Calendar.YEAR);\n                if (months < 0) {\n                    // target is end-year -1\n                    target -= 1;\n                }\n                \n                while ( (start.get(Calendar.YEAR) != target)) {\n                    days += start.getActualMaximum(Calendar.DAY_OF_YEAR) - start.get(Calendar.DAY_OF_YEAR);\n                    \n                    // Not sure I grok why this is needed, but the brutal tests show it is\n                    if(start instanceof GregorianCalendar) {\n                        if( (start.get(Calendar.MONTH) == Calendar.FEBRUARY) &&\n                            (start.get(Calendar.DAY_OF_MONTH) == 29 ) )\n                        {\n                            days += 1;\n                        }\n                    }\n                    \n                    start.add(Calendar.YEAR, 1);\n                    \n                    days += start.get(Calendar.DAY_OF_YEAR);\n                }\n                \n                years = 0;\n            }\n            \n            while( start.get(Calendar.MONTH) != end.get(Calendar.MONTH) ) {\n                days += start.getActualMaximum(Calendar.DAY_OF_MONTH);\n                start.add(Calendar.MONTH, 1);\n            }\n            \n            months = 0;            \n\n            while (days < 0) {\n                days += start.getActualMaximum(Calendar.DAY_OF_MONTH);\n                months -= 1;\n                start.add(Calendar.MONTH, 1);\n            }\n            \n        }\n\n        // The rest of this code adds in values that \n        // aren't requested. This allows the user to ask for the \n        // number of months and get the real count and not just 0->11.\n\n        if (!Token.containsTokenWithValue(tokens, d)) {\n            hours += 24 * days;\n            days = 0;\n        }\n        if (!Token.containsTokenWithValue(tokens, H)) {\n            minutes += 60 * hours;\n            hours = 0;\n        }\n        if (!Token.containsTokenWithValue(tokens, m)) {\n            seconds += 60 * minutes;\n            minutes = 0;\n        }\n        if (!Token.containsTokenWithValue(tokens, s)) {\n            milliseconds += 1000 * seconds;\n            seconds = 0;\n        }\n\n        return format(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros);\n    }",
        "begin_line": 274,
        "end_line": 404,
        "comment": "\n     * <p>Formats the time gap as a string, using the specified format.\n     * Padding the left hand side of numbers with zeroes is optional and \n     * the timezone may be specified. </p>\n     *\n     * <p>When calculating the difference between months/days, it chooses to \n     * calculate months first. So when working out the number of months and \n     * days between January 15th and March 10th, it choose 1 month and \n     * 23 days gained by choosing January->February = 1 month and then \n     * calculating days forwards, and not the 1 month and 26 days gained by \n     * choosing March -> February = 1 month and then calculating days \n     * backwards. </p>\n     *\n     * <p>For more control, the Joda Time library is recommended\n     * (<a href=\"http://joda-time.sf.net/\"). </p>\n     * \n     * @param startMillis  the start of the duration\n     * @param endMillis  the end of the duration\n     * @param format  the way in which to format the duration\n     * @param padWithZeros whether to pad the left hand side of numbers with 0's\n     * @param timezone the millis are defined in\n     * @return the time as a String\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DurationFormatUtils",
        "signature": "org.apache.commons.lang.time.DurationFormatUtils.format(org.apache.commons.lang.time.DurationFormatUtils.Token[], int, int, int, int, int, int, int, boolean)",
        "snippet": "    static String format(Token[] tokens, int years, int months, int days, int hours, int minutes, int seconds,\n            int milliseconds, boolean padWithZeros) {\n        StringBuffer buffer = new StringBuffer();\n        boolean lastOutputSeconds = false;\n        int sz = tokens.length;\n        for (int i = 0; i < sz; i++) {\n            Token token = tokens[i];\n            Object value = token.getValue();\n            int count = token.getCount();\n            if (value instanceof StringBuffer) {\n                buffer.append(value.toString());\n            } else {\n                if (value == y) {\n                    buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(years), count, '0') : Integer\n                            .toString(years));\n                    lastOutputSeconds = false;\n                } else if (value == M) {\n                    buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(months), count, '0') : Integer\n                            .toString(months));\n                    lastOutputSeconds = false;\n                } else if (value == d) {\n                    buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(days), count, '0') : Integer\n                            .toString(days));\n                    lastOutputSeconds = false;\n                } else if (value == H) {\n                    buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(hours), count, '0') : Integer\n                            .toString(hours));\n                    lastOutputSeconds = false;\n                } else if (value == m) {\n                    buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(minutes), count, '0') : Integer\n                            .toString(minutes));\n                    lastOutputSeconds = false;\n                } else if (value == s) {\n                    buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(seconds), count, '0') : Integer\n                            .toString(seconds));\n                    lastOutputSeconds = true;\n                } else if (value == S) {\n                    if (lastOutputSeconds) {\n                        milliseconds += 1000;\n                        String str = padWithZeros\n                                ? StringUtils.leftPad(Integer.toString(milliseconds), count, '0')\n                                : Integer.toString(milliseconds);\n                        buffer.append(str.substring(1));\n                    } else {\n                        buffer.append(padWithZeros\n                                ? StringUtils.leftPad(Integer.toString(milliseconds), count, '0')\n                                : Integer.toString(milliseconds));\n                    }\n                    lastOutputSeconds = false;\n                }\n            }\n        }\n        return buffer.toString();\n    }",
        "begin_line": 421,
        "end_line": 474,
        "comment": "\n     * <p>The internal method to do the formatting.</p>\n     * \n     * @param tokens  the tokens\n     * @param years  the number of years\n     * @param months  the number of months\n     * @param days  the number of days\n     * @param hours  the number of hours\n     * @param minutes  the number of minutes\n     * @param seconds  the number of seconds\n     * @param milliseconds  the number of millis\n     * @param padWithZeros  whether to pad\n     * @return the formatted string\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DurationFormatUtils",
        "signature": "org.apache.commons.lang.time.DurationFormatUtils.lexx(java.lang.String)",
        "snippet": "    static Token[] lexx(String format) {\n        char[] array = format.toCharArray();\n        ArrayList list = new ArrayList(array.length);\n\n        boolean inLiteral = false;\n        StringBuffer buffer = null;\n        Token previous = null;\n        int sz = array.length;\n        for(int i=0; i<sz; i++) {\n            char ch = array[i];\n            if(inLiteral && ch != '\\'') {\n                buffer.append(ch);\n                continue;\n            }\n            Object value = null;\n            switch(ch) {\n                // TODO: Need to handle escaping of '\n                case '\\'' : \n                  if(inLiteral) {\n                      buffer = null;\n                      inLiteral = false;\n                  } else {\n                      buffer = new StringBuffer();\n                      list.add(new Token(buffer));\n                      inLiteral = true;\n                  }\n                  break;\n                case 'y'  : value = y; break;\n                case 'M'  : value = M; break;\n                case 'd'  : value = d; break;\n                case 'H'  : value = H; break;\n                case 'm'  : value = m; break;\n                case 's'  : value = s; break;\n                case 'S'  : value = S; break;\n                default   : \n                  if(buffer == null) {\n                      buffer = new StringBuffer();\n                      list.add(new Token(buffer));\n                  }\n                  buffer.append(ch);\n            }\n\n            if(value != null) {\n                if(previous != null && previous.getValue() == value) {\n                    previous.increment();\n                } else {\n                    Token token = new Token(value);\n                    list.add(token); \n                    previous = token;\n                }\n                buffer = null; \n            }\n        }\n        return (Token[]) list.toArray( new Token[list.size()] );\n    }",
        "begin_line": 490,
        "end_line": 544,
        "comment": "\n     * Parses a classic date format string into Tokens\n     *\n     * @param format to parse\n     * @return Token[] of tokens\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DurationFormatUtils",
        "signature": "org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(org.apache.commons.lang.time.DurationFormatUtils.Token[], java.lang.Object)",
        "snippet": "        static boolean containsTokenWithValue(Token[] tokens, Object value) {\n            int sz = tokens.length;\n            for (int i = 0; i < sz; i++) {\n                if (tokens[i].getValue() == value) {\n                    return true;\n                }\n            }\n            return false;\n        }",
        "begin_line": 558,
        "end_line": 566,
        "comment": "\n         * Helper method to determine if a set of tokens contain a value\n         *\n         * @param tokens set to look in\n         * @param value to look for\n         * @return boolean <code>true</code> if contained\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DurationFormatUtils",
        "signature": "org.apache.commons.lang.time.DurationFormatUtils.Token.Token(java.lang.Object)",
        "snippet": "        Token(Object value) {\n            this.value = value;\n            this.count = 1;\n        }",
        "begin_line": 576,
        "end_line": 579,
        "comment": "\n         * Wraps a token around a value. A value would be something like a 'Y'.\n         *\n         * @param value to wrap\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DurationFormatUtils",
        "signature": "org.apache.commons.lang.time.DurationFormatUtils.Token.Token(java.lang.Object, int)",
        "snippet": "        Token(Object value, int count) {\n            this.value = value;\n            this.count = count;\n        }",
        "begin_line": 588,
        "end_line": 591,
        "comment": "\n         * Wraps a token around a repeated number of a value, for example it would \n         * store 'yyyy' as a value for y and a count of 4.\n         *\n         * @param value to wrap\n         * @param count to wrap\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DurationFormatUtils",
        "signature": "org.apache.commons.lang.time.DurationFormatUtils.Token.increment()",
        "snippet": "        void increment() { \n            count++;\n        }",
        "begin_line": 596,
        "end_line": 598,
        "comment": "\n         * Adds another one of the value\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DurationFormatUtils",
        "signature": "org.apache.commons.lang.time.DurationFormatUtils.Token.getCount()",
        "snippet": "        int getCount() {\n            return count;\n        }",
        "begin_line": 605,
        "end_line": 607,
        "comment": "\n         * Gets the current number of values represented\n         *\n         * @return int number of values represented\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DurationFormatUtils",
        "signature": "org.apache.commons.lang.time.DurationFormatUtils.Token.getValue()",
        "snippet": "        Object getValue() {\n            return value;\n        }",
        "begin_line": 614,
        "end_line": 616,
        "comment": "\n         * Gets the particular value this token represents.\n         * \n         * @return Object value\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DurationFormatUtils",
        "signature": "org.apache.commons.lang.time.DurationFormatUtils.Token.equals(java.lang.Object)",
        "snippet": "        public boolean equals(Object obj2) {\n            if (obj2 instanceof Token) {\n                Token tok2 = (Token) obj2;\n                if (this.value.getClass() != tok2.value.getClass()) {\n                    return false;\n                }\n                if (this.count != tok2.count) {\n                    return false;\n                }\n                if (this.value instanceof StringBuffer) {\n                    return this.value.toString().equals(tok2.value.toString());\n                } else if (this.value instanceof Number) {\n                    return this.value.equals(tok2.value);\n                } else {\n                    return this.value == tok2.value;\n                }\n            } else {\n                return false;\n            }\n        }",
        "begin_line": 624,
        "end_line": 643,
        "comment": "\n         * Supports equality of this Token to another Token.\n         *\n         * @param obj2 Object to consider equality of\n         * @return boolean <code>true</code> if equal\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DurationFormatUtils",
        "signature": "org.apache.commons.lang.time.DurationFormatUtils.Token.hashCode()",
        "snippet": "        public int hashCode() {\n            return this.value.hashCode();\n        }",
        "begin_line": 652,
        "end_line": 654,
        "comment": "\n         * Returns a hashcode for the token equal to the \n         * hashcode for the token's value. Thus 'TT' and 'TTTT' \n         * will have the same hashcode. \n         *\n         * @return The hashcode for the token\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java",
        "class_name": "org.apache.commons.lang.time.DurationFormatUtils",
        "signature": "org.apache.commons.lang.time.DurationFormatUtils.Token.toString()",
        "snippet": "        public String toString() {\n            return StringUtils.repeat(this.value.toString(), this.count);\n        }",
        "begin_line": 661,
        "end_line": 663,
        "comment": "\n         * Represents this token as a String.\n         *\n         * @return String representation of the token\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateUtils.java",
        "class_name": "org.apache.commons.lang.time.DateUtils",
        "signature": "org.apache.commons.lang.time.DateUtils.DateUtils()",
        "snippet": "    public DateUtils() {\n        super();\n    }",
        "begin_line": 123,
        "end_line": 125,
        "comment": "\n     * <p><code>DateUtils</code> instances should NOT be constructed in\n     * standard programming. Instead, the class should be used as\n     * <code>DateUtils.parse(str);</code>.</p>\n     *\n     * <p>This constructor is public to permit tools that require a JavaBean\n     * instance to operate.</p>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateUtils.java",
        "class_name": "org.apache.commons.lang.time.DateUtils",
        "signature": "org.apache.commons.lang.time.DateUtils.isSameDay(java.util.Date, java.util.Date)",
        "snippet": "    public static boolean isSameDay(Date date1, Date date2) {\n        if (date1 == null || date2 == null) {\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        Calendar cal1 = Calendar.getInstance();\n        cal1.setTime(date1);\n        Calendar cal2 = Calendar.getInstance();\n        cal2.setTime(date2);\n        return isSameDay(cal1, cal2);\n    }",
        "begin_line": 141,
        "end_line": 150,
        "comment": "\n     * <p>Checks if two date objects are on the same day ignoring time.</p>\n     *\n     * <p>28 Mar 2002 13:45 and 28 Mar 2002 06:01 would return true.\n     * 28 Mar 2002 13:45 and 12 Mar 2002 13:45 would return false.\n     * </p>\n     * \n     * @param date1  the first date, not altered, not null\n     * @param date2  the second date, not altered, not null\n     * @return true if they represent the same day\n     * @throws IllegalArgumentException if either date is <code>null</code>\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateUtils.java",
        "class_name": "org.apache.commons.lang.time.DateUtils",
        "signature": "org.apache.commons.lang.time.DateUtils.isSameDay(java.util.Calendar, java.util.Calendar)",
        "snippet": "    public static boolean isSameDay(Calendar cal1, Calendar cal2) {\n        if (cal1 == null || cal2 == null) {\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        return (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&\n                cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n                cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR));\n    }",
        "begin_line": 165,
        "end_line": 172,
        "comment": "\n     * <p>Checks if two calendar objects are on the same day ignoring time.</p>\n     *\n     * <p>28 Mar 2002 13:45 and 28 Mar 2002 06:01 would return true.\n     * 28 Mar 2002 13:45 and 12 Mar 2002 13:45 would return false.\n     * </p>\n     * \n     * @param cal1  the first calendar, not altered, not null\n     * @param cal2  the second calendar, not altered, not null\n     * @return true if they represent the same day\n     * @throws IllegalArgumentException if either calendar is <code>null</code>\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateUtils.java",
        "class_name": "org.apache.commons.lang.time.DateUtils",
        "signature": "org.apache.commons.lang.time.DateUtils.isSameInstant(java.util.Date, java.util.Date)",
        "snippet": "    public static boolean isSameInstant(Date date1, Date date2) {\n        if (date1 == null || date2 == null) {\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        return date1.getTime() == date2.getTime();\n    }",
        "begin_line": 186,
        "end_line": 191,
        "comment": "\n     * <p>Checks if two date objects represent the same instant in time.</p>\n     *\n     * <p>This method compares the long millisecond time of the two objects.</p>\n     * \n     * @param date1  the first date, not altered, not null\n     * @param date2  the second date, not altered, not null\n     * @return true if they represent the same millisecond instant\n     * @throws IllegalArgumentException if either date is <code>null</code>\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateUtils.java",
        "class_name": "org.apache.commons.lang.time.DateUtils",
        "signature": "org.apache.commons.lang.time.DateUtils.isSameInstant(java.util.Calendar, java.util.Calendar)",
        "snippet": "    public static boolean isSameInstant(Calendar cal1, Calendar cal2) {\n        if (cal1 == null || cal2 == null) {\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        return cal1.getTime().getTime() == cal2.getTime().getTime();\n    }",
        "begin_line": 204,
        "end_line": 209,
        "comment": "\n     * <p>Checks if two calendar objects represent the same instant in time.</p>\n     *\n     * <p>This method compares the long millisecond time of the two objects.</p>\n     * \n     * @param cal1  the first calendar, not altered, not null\n     * @param cal2  the second calendar, not altered, not null\n     * @return true if they represent the same millisecond instant\n     * @throws IllegalArgumentException if either date is <code>null</code>\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateUtils.java",
        "class_name": "org.apache.commons.lang.time.DateUtils",
        "signature": "org.apache.commons.lang.time.DateUtils.isSameLocalTime(java.util.Calendar, java.util.Calendar)",
        "snippet": "    public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n        if (cal1 == null || cal2 == null) {\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&\n                cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&\n                cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&\n                cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&\n                cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&\n                cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n                cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&\n                cal1.getClass() == cal2.getClass());\n    }",
        "begin_line": 224,
        "end_line": 236,
        "comment": "\n     * <p>Checks if two calendar objects represent the same local time.</p>\n     *\n     * <p>This method compares the values of the fields of the two objects.\n     * In addition, both calendars must be the same of the same type.</p>\n     * \n     * @param cal1  the first calendar, not altered, not null\n     * @param cal2  the second calendar, not altered, not null\n     * @return true if they represent the same millisecond instant\n     * @throws IllegalArgumentException if either date is <code>null</code>\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateUtils.java",
        "class_name": "org.apache.commons.lang.time.DateUtils",
        "signature": "org.apache.commons.lang.time.DateUtils.parseDate(java.lang.String, java.lang.String[])",
        "snippet": "    public static Date parseDate(String str, String[] parsePatterns) throws ParseException {\n        if (str == null || parsePatterns == null) {\n            throw new IllegalArgumentException(\"Date and Patterns must not be null\");\n        }\n        \n        SimpleDateFormat parser = null;\n        ParsePosition pos = new ParsePosition(0);\n        for (int i = 0; i < parsePatterns.length; i++) {\n            if (i == 0) {\n                parser = new SimpleDateFormat(parsePatterns[0]);\n            } else {\n                parser.applyPattern(parsePatterns[i]);\n            }\n            pos.setIndex(0);\n            Date date = parser.parse(str, pos);\n            if (date != null && pos.getIndex() == str.length()) {\n                return date;\n            }\n        }\n        throw new ParseException(\"Unable to parse the date: \" + str, -1);\n    }",
        "begin_line": 252,
        "end_line": 272,
        "comment": "\n     * <p>Parses a string representing a date by trying a variety of different parsers.</p>\n     * \n     * <p>The parse will try each parse pattern in turn.\n     * A parse is only deemed sucessful if it parses the whole of the input string.\n     * If no parse patterns match, a ParseException is thrown.</p>\n     * \n     * @param str  the date to parse, not null\n     * @param parsePatterns  the date format patterns to use, see SimpleDateFormat, not null\n     * @return the parsed date\n     * @throws IllegalArgumentException if the date string or pattern array is null\n     * @throws ParseException if none of the date patterns were suitable\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateUtils.java",
        "class_name": "org.apache.commons.lang.time.DateUtils",
        "signature": "org.apache.commons.lang.time.DateUtils.addYears(java.util.Date, int)",
        "snippet": "    public static Date addYears(Date date, int amount) {\n        return add(date, Calendar.YEAR, amount);\n    }",
        "begin_line": 284,
        "end_line": 286,
        "comment": "\n     * Adds a number of years to a date returning a new object.\n     * The original date object is unchanged.\n     *\n     * @param date  the date, not null\n     * @param amount  the amount to add, may be negative\n     * @return the new date object with the amount added\n     * @throws IllegalArgumentException if the date is null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateUtils.java",
        "class_name": "org.apache.commons.lang.time.DateUtils",
        "signature": "org.apache.commons.lang.time.DateUtils.addMonths(java.util.Date, int)",
        "snippet": "    public static Date addMonths(Date date, int amount) {\n        return add(date, Calendar.MONTH, amount);\n    }",
        "begin_line": 298,
        "end_line": 300,
        "comment": "\n     * Adds a number of months to a date returning a new object.\n     * The original date object is unchanged.\n     *\n     * @param date  the date, not null\n     * @param amount  the amount to add, may be negative\n     * @return the new date object with the amount added\n     * @throws IllegalArgumentException if the date is null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateUtils.java",
        "class_name": "org.apache.commons.lang.time.DateUtils",
        "signature": "org.apache.commons.lang.time.DateUtils.addWeeks(java.util.Date, int)",
        "snippet": "    public static Date addWeeks(Date date, int amount) {\n        return add(date, Calendar.WEEK_OF_YEAR, amount);\n    }",
        "begin_line": 312,
        "end_line": 314,
        "comment": "\n     * Adds a number of weeks to a date returning a new object.\n     * The original date object is unchanged.\n     *\n     * @param date  the date, not null\n     * @param amount  the amount to add, may be negative\n     * @return the new date object with the amount added\n     * @throws IllegalArgumentException if the date is null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateUtils.java",
        "class_name": "org.apache.commons.lang.time.DateUtils",
        "signature": "org.apache.commons.lang.time.DateUtils.addDays(java.util.Date, int)",
        "snippet": "    public static Date addDays(Date date, int amount) {\n        return add(date, Calendar.DAY_OF_MONTH, amount);\n    }",
        "begin_line": 326,
        "end_line": 328,
        "comment": "\n     * Adds a number of days to a date returning a new object.\n     * The original date object is unchanged.\n     *\n     * @param date  the date, not null\n     * @param amount  the amount to add, may be negative\n     * @return the new date object with the amount added\n     * @throws IllegalArgumentException if the date is null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateUtils.java",
        "class_name": "org.apache.commons.lang.time.DateUtils",
        "signature": "org.apache.commons.lang.time.DateUtils.addHours(java.util.Date, int)",
        "snippet": "    public static Date addHours(Date date, int amount) {\n        return add(date, Calendar.HOUR_OF_DAY, amount);\n    }",
        "begin_line": 340,
        "end_line": 342,
        "comment": "\n     * Adds a number of hours to a date returning a new object.\n     * The original date object is unchanged.\n     *\n     * @param date  the date, not null\n     * @param amount  the amount to add, may be negative\n     * @return the new date object with the amount added\n     * @throws IllegalArgumentException if the date is null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateUtils.java",
        "class_name": "org.apache.commons.lang.time.DateUtils",
        "signature": "org.apache.commons.lang.time.DateUtils.addMinutes(java.util.Date, int)",
        "snippet": "    public static Date addMinutes(Date date, int amount) {\n        return add(date, Calendar.MINUTE, amount);\n    }",
        "begin_line": 354,
        "end_line": 356,
        "comment": "\n     * Adds a number of minutes to a date returning a new object.\n     * The original date object is unchanged.\n     *\n     * @param date  the date, not null\n     * @param amount  the amount to add, may be negative\n     * @return the new date object with the amount added\n     * @throws IllegalArgumentException if the date is null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateUtils.java",
        "class_name": "org.apache.commons.lang.time.DateUtils",
        "signature": "org.apache.commons.lang.time.DateUtils.addSeconds(java.util.Date, int)",
        "snippet": "    public static Date addSeconds(Date date, int amount) {\n        return add(date, Calendar.SECOND, amount);\n    }",
        "begin_line": 368,
        "end_line": 370,
        "comment": "\n     * Adds a number of seconds to a date returning a new object.\n     * The original date object is unchanged.\n     *\n     * @param date  the date, not null\n     * @param amount  the amount to add, may be negative\n     * @return the new date object with the amount added\n     * @throws IllegalArgumentException if the date is null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateUtils.java",
        "class_name": "org.apache.commons.lang.time.DateUtils",
        "signature": "org.apache.commons.lang.time.DateUtils.addMilliseconds(java.util.Date, int)",
        "snippet": "    public static Date addMilliseconds(Date date, int amount) {\n        return add(date, Calendar.MILLISECOND, amount);\n    }",
        "begin_line": 382,
        "end_line": 384,
        "comment": "\n     * Adds a number of milliseconds to a date returning a new object.\n     * The original date object is unchanged.\n     *\n     * @param date  the date, not null\n     * @param amount  the amount to add, may be negative\n     * @return the new date object with the amount added\n     * @throws IllegalArgumentException if the date is null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateUtils.java",
        "class_name": "org.apache.commons.lang.time.DateUtils",
        "signature": "org.apache.commons.lang.time.DateUtils.add(java.util.Date, int, int)",
        "snippet": "    public static Date add(Date date, int calendarField, int amount) {\n        if (date == null) {\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        Calendar c = Calendar.getInstance();\n        c.setTime(date);\n        c.add(calendarField, amount);\n        return c.getTime();\n    }",
        "begin_line": 397,
        "end_line": 405,
        "comment": "\n     * Adds to a date returning a new object.\n     * The original date object is unchanged.\n     *\n     * @param date  the date, not null\n     * @param calendarField  the calendar field to add to\n     * @param amount  the amount to add, may be negative\n     * @return the new date object with the amount added\n     * @throws IllegalArgumentException if the date is null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateUtils.java",
        "class_name": "org.apache.commons.lang.time.DateUtils",
        "signature": "org.apache.commons.lang.time.DateUtils.round(java.util.Date, int)",
        "snippet": "    public static Date round(Date date, int field) {\n        if (date == null) {\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, true);\n        return gval.getTime();\n    }",
        "begin_line": 436,
        "end_line": 444,
        "comment": "\n     * <p>Round this date, leaving the field specified as the most\n     * significant field.</p>\n     *\n     * <p>For example, if you had the datetime of 28 Mar 2002\n     * 13:45:01.231, if this was passed with HOUR, it would return\n     * 28 Mar 2002 14:00:00.000. If this was passed with MONTH, it\n     * would return 1 April 2002 0:00:00.000.</p>\n     * \n     * <p>For a date in a timezone that handles the change to daylight\n     * saving time, rounding to Calendar.HOUR_OF_DAY will behave as follows.\n     * Suppose daylight saving time begins at 02:00 on March 30. Rounding a \n     * date that crosses this time would produce the following values:\n     * <ul>\n     * <li>March 30, 2003 01:10 rounds to March 30, 2003 01:00</li>\n     * <li>March 30, 2003 01:40 rounds to March 30, 2003 03:00</li>\n     * <li>March 30, 2003 02:10 rounds to March 30, 2003 03:00</li>\n     * <li>March 30, 2003 02:40 rounds to March 30, 2003 04:00</li>\n     * </ul>\n     * </p>\n     * \n     * @param date  the date to work with\n     * @param field  the field from <code>Calendar</code>\n     *  or <code>SEMI_MONTH</code>\n     * @return the rounded date\n     * @throws IllegalArgumentException if the date is <code>null</code>\n     * @throws ArithmeticException if the year is over 280 million\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateUtils.java",
        "class_name": "org.apache.commons.lang.time.DateUtils",
        "signature": "org.apache.commons.lang.time.DateUtils.round(java.util.Calendar, int)",
        "snippet": "    public static Calendar round(Calendar date, int field) {\n        if (date == null) {\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        Calendar rounded = (Calendar) date.clone();\n        modify(rounded, field, true);\n        return rounded;\n    }",
        "begin_line": 474,
        "end_line": 481,
        "comment": "\n     * <p>Round this date, leaving the field specified as the most\n     * significant field.</p>\n     *\n     * <p>For example, if you had the datetime of 28 Mar 2002\n     * 13:45:01.231, if this was passed with HOUR, it would return\n     * 28 Mar 2002 14:00:00.000. If this was passed with MONTH, it\n     * would return 1 April 2002 0:00:00.000.</p>\n     * \n     * <p>For a date in a timezone that handles the change to daylight\n     * saving time, rounding to Calendar.HOUR_OF_DAY will behave as follows.\n     * Suppose daylight saving time begins at 02:00 on March 30. Rounding a \n     * date that crosses this time would produce the following values:\n     * <ul>\n     * <li>March 30, 2003 01:10 rounds to March 30, 2003 01:00</li>\n     * <li>March 30, 2003 01:40 rounds to March 30, 2003 03:00</li>\n     * <li>March 30, 2003 02:10 rounds to March 30, 2003 03:00</li>\n     * <li>March 30, 2003 02:40 rounds to March 30, 2003 04:00</li>\n     * </ul>\n     * </p>\n     * \n     * @param date  the date to work with\n     * @param field  the field from <code>Calendar</code>\n     *  or <code>SEMI_MONTH</code>\n     * @return the rounded date (a different object)\n     * @throws IllegalArgumentException if the date is <code>null</code>\n     * @throws ArithmeticException if the year is over 280 million\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateUtils.java",
        "class_name": "org.apache.commons.lang.time.DateUtils",
        "signature": "org.apache.commons.lang.time.DateUtils.round(java.lang.Object, int)",
        "snippet": "    public static Date round(Object date, int field) {\n        if (date == null) {\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        if (date instanceof Date) {\n            return round((Date) date, field);\n        } else if (date instanceof Calendar) {\n            return round((Calendar) date, field).getTime();\n        } else {\n            throw new ClassCastException(\"Could not round \" + date);\n        }\n    }",
        "begin_line": 513,
        "end_line": 524,
        "comment": "\n     * <p>Round this date, leaving the field specified as the most\n     * significant field.</p>\n     *\n     * <p>For example, if you had the datetime of 28 Mar 2002\n     * 13:45:01.231, if this was passed with HOUR, it would return\n     * 28 Mar 2002 14:00:00.000. If this was passed with MONTH, it\n     * would return 1 April 2002 0:00:00.000.</p>\n     * \n     * <p>For a date in a timezone that handles the change to daylight\n     * saving time, rounding to Calendar.HOUR_OF_DAY will behave as follows.\n     * Suppose daylight saving time begins at 02:00 on March 30. Rounding a \n     * date that crosses this time would produce the following values:\n     * <ul>\n     * <li>March 30, 2003 01:10 rounds to March 30, 2003 01:00</li>\n     * <li>March 30, 2003 01:40 rounds to March 30, 2003 03:00</li>\n     * <li>March 30, 2003 02:10 rounds to March 30, 2003 03:00</li>\n     * <li>March 30, 2003 02:40 rounds to March 30, 2003 04:00</li>\n     * </ul>\n     * </p>\n     * \n     * @param date  the date to work with, either Date or Calendar\n     * @param field  the field from <code>Calendar</code>\n     *  or <code>SEMI_MONTH</code>\n     * @return the rounded date\n     * @throws IllegalArgumentException if the date is <code>null</code>\n     * @throws ClassCastException if the object type is not a <code>Date</code>\n     *  or <code>Calendar</code>\n     * @throws ArithmeticException if the year is over 280 million\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateUtils.java",
        "class_name": "org.apache.commons.lang.time.DateUtils",
        "signature": "org.apache.commons.lang.time.DateUtils.truncate(java.util.Date, int)",
        "snippet": "    public static Date truncate(Date date, int field) {\n        if (date == null) {\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, false);\n        return gval.getTime();\n    }",
        "begin_line": 543,
        "end_line": 551,
        "comment": "\n     * <p>Truncate this date, leaving the field specified as the most\n     * significant field.</p>\n     *\n     * <p>For example, if you had the datetime of 28 Mar 2002\n     * 13:45:01.231, if you passed with HOUR, it would return 28 Mar\n     * 2002 13:00:00.000.  If this was passed with MONTH, it would\n     * return 1 Mar 2002 0:00:00.000.</p>\n     * \n     * @param date  the date to work with\n     * @param field  the field from <code>Calendar</code>\n     *  or <code>SEMI_MONTH</code>\n     * @return the rounded date\n     * @throws IllegalArgumentException if the date is <code>null</code>\n     * @throws ArithmeticException if the year is over 280 million\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateUtils.java",
        "class_name": "org.apache.commons.lang.time.DateUtils",
        "signature": "org.apache.commons.lang.time.DateUtils.truncate(java.util.Calendar, int)",
        "snippet": "    public static Calendar truncate(Calendar date, int field) {\n        if (date == null) {\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        Calendar truncated = (Calendar) date.clone();\n        modify(truncated, field, false);\n        return truncated;\n    }",
        "begin_line": 569,
        "end_line": 576,
        "comment": "\n     * <p>Truncate this date, leaving the field specified as the most\n     * significant field.</p>\n     *\n     * <p>For example, if you had the datetime of 28 Mar 2002\n     * 13:45:01.231, if you passed with HOUR, it would return 28 Mar\n     * 2002 13:00:00.000.  If this was passed with MONTH, it would\n     * return 1 Mar 2002 0:00:00.000.</p>\n     * \n     * @param date  the date to work with\n     * @param field  the field from <code>Calendar</code>\n     *  or <code>SEMI_MONTH</code>\n     * @return the rounded date (a different object)\n     * @throws IllegalArgumentException if the date is <code>null</code>\n     * @throws ArithmeticException if the year is over 280 million\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateUtils.java",
        "class_name": "org.apache.commons.lang.time.DateUtils",
        "signature": "org.apache.commons.lang.time.DateUtils.truncate(java.lang.Object, int)",
        "snippet": "    public static Date truncate(Object date, int field) {\n        if (date == null) {\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        if (date instanceof Date) {\n            return truncate((Date) date, field);\n        } else if (date instanceof Calendar) {\n            return truncate((Calendar) date, field).getTime();\n        } else {\n            throw new ClassCastException(\"Could not truncate \" + date);\n        }\n    }",
        "begin_line": 598,
        "end_line": 609,
        "comment": "\n     * <p>Truncate this date, leaving the field specified as the most\n     * significant field.</p>\n     *\n     * <p>For example, if you had the datetime of 28 Mar 2002\n     * 13:45:01.231, if you passed with HOUR, it would return 28 Mar\n     * 2002 13:00:00.000.  If this was passed with MONTH, it would\n     * return 1 Mar 2002 0:00:00.000.</p>\n     * \n     * @param date  the date to work with, either <code>Date</code>\n     *  or <code>Calendar</code>\n     * @param field  the field from <code>Calendar</code>\n     *  or <code>SEMI_MONTH</code>\n     * @return the rounded date\n     * @throws IllegalArgumentException if the date\n     *  is <code>null</code>\n     * @throws ClassCastException if the object type is not a\n     *  <code>Date</code> or <code>Calendar</code>\n     * @throws ArithmeticException if the year is over 280 million\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateUtils.java",
        "class_name": "org.apache.commons.lang.time.DateUtils",
        "signature": "org.apache.commons.lang.time.DateUtils.modify(java.util.Calendar, int, boolean)",
        "snippet": "    private static void modify(Calendar val, int field, boolean round) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        int millisecs = val.get(Calendar.MILLISECOND);\n        if (!round || millisecs < 500) {\n            time = time - millisecs;\n            if (field == Calendar.SECOND) {\n                done = true;\n            }\n        }\n\n        // truncate seconds\n        int seconds = val.get(Calendar.SECOND);\n        if (!done && (!round || seconds < 30)) {\n            time = time - (seconds * 1000L);\n            if (field == Calendar.MINUTE) {\n                done = true;\n            }\n        }\n\n        // truncate minutes\n        int minutes = val.get(Calendar.MINUTE);\n        if (!done && (!round || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (int i = 0; i < fields.length; i++) {\n            for (int j = 0; j < fields[i].length; j++) {\n                if (fields[i][j] == field) {\n                    //This is our field... we stop looping\n                    if (round && roundUp) {\n                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(fields[i][0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (fields[i][0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset > 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                int min = val.getActualMinimum(fields[i][0]);\n                int max = val.getActualMaximum(fields[i][0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(fields[i][0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(fields[i][0], val.get(fields[i][0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
        "begin_line": 620,
        "end_line": 744,
        "comment": "\n     * <p>Internal calculation method.</p>\n     * \n     * @param val  the calendar\n     * @param field  the field constant\n     * @param round  true to round, false to truncate\n     * @throws ArithmeticException if the year is over 280 million\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateUtils.java",
        "class_name": "org.apache.commons.lang.time.DateUtils",
        "signature": "org.apache.commons.lang.time.DateUtils.iterator(java.util.Date, int)",
        "snippet": "    public static Iterator iterator(Date focus, int rangeStyle) {\n        if (focus == null) {\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(focus);\n        return iterator(gval, rangeStyle);\n    }",
        "begin_line": 771,
        "end_line": 778,
        "comment": "\n     * <p>This constructs an <code>Iterator</code> over each day in a date\n     * range defined by a focus date and range style.</p>\n     *\n     * <p>For instance, passing Thursday, July 4, 2002 and a\n     * <code>RANGE_MONTH_SUNDAY</code> will return an <code>Iterator</code>\n     * that starts with Sunday, June 30, 2002 and ends with Saturday, August 3,\n     * 2002, returning a Calendar instance for each intermediate day.</p>\n     *\n     * <p>This method provides an iterator that returns Calendar objects.\n     * The days are progressed using {@link Calendar#add(int, int)}.</p>\n     *\n     * @param focus  the date to work with, not null\n     * @param rangeStyle  the style constant to use. Must be one of\n     * {@link DateUtils#RANGE_MONTH_SUNDAY}, \n     * {@link DateUtils#RANGE_MONTH_MONDAY},\n     * {@link DateUtils#RANGE_WEEK_SUNDAY},\n     * {@link DateUtils#RANGE_WEEK_MONDAY},\n     * {@link DateUtils#RANGE_WEEK_RELATIVE},\n     * {@link DateUtils#RANGE_WEEK_CENTER}\n     * @return the date iterator, which always returns Calendar instances\n     * @throws IllegalArgumentException if the date is <code>null</code>\n     * @throws IllegalArgumentException if the rangeStyle is invalid\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateUtils.java",
        "class_name": "org.apache.commons.lang.time.DateUtils",
        "signature": "org.apache.commons.lang.time.DateUtils.iterator(java.util.Calendar, int)",
        "snippet": "    public static Iterator iterator(Calendar focus, int rangeStyle) {\n        if (focus == null) {\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        Calendar start = null;\n        Calendar end = null;\n        int startCutoff = Calendar.SUNDAY;\n        int endCutoff = Calendar.SATURDAY;\n        switch (rangeStyle) {\n            case RANGE_MONTH_SUNDAY:\n            case RANGE_MONTH_MONDAY:\n                //Set start to the first of the month\n                start = truncate(focus, Calendar.MONTH);\n                //Set end to the last of the month\n                end = (Calendar) start.clone();\n                end.add(Calendar.MONTH, 1);\n                end.add(Calendar.DATE, -1);\n                //Loop start back to the previous sunday or monday\n                if (rangeStyle == RANGE_MONTH_MONDAY) {\n                    startCutoff = Calendar.MONDAY;\n                    endCutoff = Calendar.SUNDAY;\n                }\n                break;\n            case RANGE_WEEK_SUNDAY:\n            case RANGE_WEEK_MONDAY:\n            case RANGE_WEEK_RELATIVE:\n            case RANGE_WEEK_CENTER:\n                //Set start and end to the current date\n                start = truncate(focus, Calendar.DATE);\n                end = truncate(focus, Calendar.DATE);\n                switch (rangeStyle) {\n                    case RANGE_WEEK_SUNDAY:\n                        //already set by default\n                        break;\n                    case RANGE_WEEK_MONDAY:\n                        startCutoff = Calendar.MONDAY;\n                        endCutoff = Calendar.SUNDAY;\n                        break;\n                    case RANGE_WEEK_RELATIVE:\n                        startCutoff = focus.get(Calendar.DAY_OF_WEEK);\n                        endCutoff = startCutoff - 1;\n                        break;\n                    case RANGE_WEEK_CENTER:\n                        startCutoff = focus.get(Calendar.DAY_OF_WEEK) - 3;\n                        endCutoff = focus.get(Calendar.DAY_OF_WEEK) + 3;\n                        break;\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"The range style \" + rangeStyle + \" is not valid.\");\n        }\n        if (startCutoff < Calendar.SUNDAY) {\n            startCutoff += 7;\n        }\n        if (startCutoff > Calendar.SATURDAY) {\n            startCutoff -= 7;\n        }\n        if (endCutoff < Calendar.SUNDAY) {\n            endCutoff += 7;\n        }\n        if (endCutoff > Calendar.SATURDAY) {\n            endCutoff -= 7;\n        }\n        while (start.get(Calendar.DAY_OF_WEEK) != startCutoff) {\n            start.add(Calendar.DATE, -1);\n        }\n        while (end.get(Calendar.DAY_OF_WEEK) != endCutoff) {\n            end.add(Calendar.DATE, 1);\n        }\n        return new DateIterator(start, end);\n    }",
        "begin_line": 804,
        "end_line": 874,
        "comment": "\n     * <p>This constructs an <code>Iterator</code> over each day in a date\n     * range defined by a focus date and range style.</p>\n     *\n     * <p>For instance, passing Thursday, July 4, 2002 and a\n     * <code>RANGE_MONTH_SUNDAY</code> will return an <code>Iterator</code>\n     * that starts with Sunday, June 30, 2002 and ends with Saturday, August 3,\n     * 2002, returning a Calendar instance for each intermediate day.</p>\n     *\n     * <p>This method provides an iterator that returns Calendar objects.\n     * The days are progressed using {@link Calendar#add(int, int)}.</p>\n     *\n     * @param focus  the date to work with\n     * @param rangeStyle  the style constant to use. Must be one of\n     * {@link DateUtils#RANGE_MONTH_SUNDAY}, \n     * {@link DateUtils#RANGE_MONTH_MONDAY},\n     * {@link DateUtils#RANGE_WEEK_SUNDAY},\n     * {@link DateUtils#RANGE_WEEK_MONDAY},\n     * {@link DateUtils#RANGE_WEEK_RELATIVE},\n     * {@link DateUtils#RANGE_WEEK_CENTER}\n     * @return the date iterator\n     * @throws IllegalArgumentException if the date is <code>null</code>\n     * @throws IllegalArgumentException if the rangeStyle is invalid\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateUtils.java",
        "class_name": "org.apache.commons.lang.time.DateUtils",
        "signature": "org.apache.commons.lang.time.DateUtils.iterator(java.lang.Object, int)",
        "snippet": "    public static Iterator iterator(Object focus, int rangeStyle) {\n        if (focus == null) {\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        if (focus instanceof Date) {\n            return iterator((Date) focus, rangeStyle);\n        } else if (focus instanceof Calendar) {\n            return iterator((Calendar) focus, rangeStyle);\n        } else {\n            throw new ClassCastException(\"Could not iterate based on \" + focus);\n        }\n    }",
        "begin_line": 895,
        "end_line": 906,
        "comment": "\n     * <p>This constructs an <code>Iterator</code> over each day in a date\n     * range defined by a focus date and range style.</p>\n     *\n     * <p>For instance, passing Thursday, July 4, 2002 and a\n     * <code>RANGE_MONTH_SUNDAY</code> will return an <code>Iterator</code>\n     * that starts with Sunday, June 30, 2002 and ends with Saturday, August 3,\n     * 2002, returning a Calendar instance for each intermediate day.</p>\n     *\n     * @param focus  the date to work with, either\n     *  <code>Date</code> or <code>Calendar</code>\n     * @param rangeStyle  the style constant to use. Must be one of the range\n     * styles listed for the {@link #iterator(Calendar, int)} method.\n     * @return the date iterator\n     * @throws IllegalArgumentException if the date\n     *  is <code>null</code>\n     * @throws ClassCastException if the object type is\n     *  not a <code>Date</code> or <code>Calendar</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateUtils.java",
        "class_name": "org.apache.commons.lang.time.DateUtils",
        "signature": "org.apache.commons.lang.time.DateUtils.DateIterator.DateIterator(java.util.Calendar, java.util.Calendar)",
        "snippet": "        DateIterator(Calendar startFinal, Calendar endFinal) {\n            super();\n            this.endFinal = endFinal;\n            spot = startFinal;\n            spot.add(Calendar.DATE, -1);\n        }",
        "begin_line": 921,
        "end_line": 926,
        "comment": "\n         * Constructs a DateIterator that ranges from one date to another. \n         *\n         * @param startFinal start date (inclusive)\n         * @param endFinal end date (not inclusive)\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateUtils.java",
        "class_name": "org.apache.commons.lang.time.DateUtils",
        "signature": "org.apache.commons.lang.time.DateUtils.DateIterator.hasNext()",
        "snippet": "        public boolean hasNext() {\n            return spot.before(endFinal);\n        }",
        "begin_line": 933,
        "end_line": 935,
        "comment": "\n         * Has the iterator not reached the end date yet?\n         *\n         * @return <code>true</code> if the iterator has yet to reach the end date\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateUtils.java",
        "class_name": "org.apache.commons.lang.time.DateUtils",
        "signature": "org.apache.commons.lang.time.DateUtils.DateIterator.next()",
        "snippet": "        public Object next() {\n            if (spot.equals(endFinal)) {\n                throw new NoSuchElementException();\n            }\n            spot.add(Calendar.DATE, 1);\n            return spot.clone();\n        }",
        "begin_line": 942,
        "end_line": 948,
        "comment": "\n         * Return the next calendar in the iteration\n         *\n         * @return Object calendar for the next date\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/DateUtils.java",
        "class_name": "org.apache.commons.lang.time.DateUtils",
        "signature": "org.apache.commons.lang.time.DateUtils.DateIterator.remove()",
        "snippet": "        public void remove() {\n            throw new UnsupportedOperationException();\n        }",
        "begin_line": 956,
        "end_line": 958,
        "comment": "\n         * Always throws UnsupportedOperationException.\n         * \n         * @throws UnsupportedOperationException\n         * @see java.util.Iterator#remove()\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.getInstance()",
        "snippet": "    public static FastDateFormat getInstance() {\n        return getInstance(getDefaultPattern(), null, null);\n    }",
        "begin_line": 150,
        "end_line": 152,
        "comment": "\n     * <p>Gets a formatter instance using the default pattern in the\n     * default locale.</p>\n     * \n     * @return a date/time formatter\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.getInstance(java.lang.String)",
        "snippet": "    public static FastDateFormat getInstance(String pattern) {\n        return getInstance(pattern, null, null);\n    }",
        "begin_line": 163,
        "end_line": 165,
        "comment": "\n     * <p>Gets a formatter instance using the specified pattern in the\n     * default locale.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.getInstance(java.lang.String, java.util.TimeZone)",
        "snippet": "    public static FastDateFormat getInstance(String pattern, TimeZone timeZone) {\n        return getInstance(pattern, timeZone, null);\n    }",
        "begin_line": 178,
        "end_line": 180,
        "comment": "\n     * <p>Gets a formatter instance using the specified pattern and\n     * time zone.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.getInstance(java.lang.String, java.util.Locale)",
        "snippet": "    public static FastDateFormat getInstance(String pattern, Locale locale) {\n        return getInstance(pattern, null, locale);\n    }",
        "begin_line": 192,
        "end_line": 194,
        "comment": "\n     * <p>Gets a formatter instance using the specified pattern and\n     * locale.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param locale  optional locale, overrides system locale\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.getInstance(java.lang.String, java.util.TimeZone, java.util.Locale)",
        "snippet": "    public static synchronized FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale) {\n        FastDateFormat emptyFormat = new FastDateFormat(pattern, timeZone, locale);\n        FastDateFormat format = (FastDateFormat) cInstanceCache.get(emptyFormat);\n        if (format == null) {\n            format = emptyFormat;\n            format.init();  // convert shell format into usable one\n            cInstanceCache.put(format, format);  // this is OK!\n        }\n        return format;\n    }",
        "begin_line": 209,
        "end_line": 218,
        "comment": "\n     * <p>Gets a formatter instance using the specified pattern, time zone\n     * and locale.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @param locale  optional locale, overrides system locale\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     *  or <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.getDateInstance(int)",
        "snippet": "    public static FastDateFormat getDateInstance(int style) {\n        return getDateInstance(style, null, null);\n    }",
        "begin_line": 231,
        "end_line": 233,
        "comment": "\n     * <p>Gets a date formatter instance using the specified style in the\n     * default time zone and locale.</p>\n     * \n     * @param style  date style: FULL, LONG, MEDIUM, or SHORT\n     * @return a localized standard date formatter\n     * @throws IllegalArgumentException if the Locale has no date\n     *  pattern defined\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.getDateInstance(int, java.util.Locale)",
        "snippet": "    public static FastDateFormat getDateInstance(int style, Locale locale) {\n        return getDateInstance(style, null, locale);\n    }",
        "begin_line": 246,
        "end_line": 248,
        "comment": "\n     * <p>Gets a date formatter instance using the specified style and\n     * locale in the default time zone.</p>\n     * \n     * @param style  date style: FULL, LONG, MEDIUM, or SHORT\n     * @param locale  optional locale, overrides system locale\n     * @return a localized standard date formatter\n     * @throws IllegalArgumentException if the Locale has no date\n     *  pattern defined\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.getDateInstance(int, java.util.TimeZone)",
        "snippet": "    public static FastDateFormat getDateInstance(int style, TimeZone timeZone) {\n        return getDateInstance(style, timeZone, null);\n    }",
        "begin_line": 262,
        "end_line": 264,
        "comment": "\n     * <p>Gets a date formatter instance using the specified style and\n     * time zone in the default locale.</p>\n     * \n     * @param style  date style: FULL, LONG, MEDIUM, or SHORT\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @return a localized standard date formatter\n     * @throws IllegalArgumentException if the Locale has no date\n     *  pattern defined\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.getDateInstance(int, java.util.TimeZone, java.util.Locale)",
        "snippet": "    public static synchronized FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale locale) {\n        Object key = new Integer(style);\n        if (timeZone != null) {\n            key = new Pair(key, timeZone);\n        }\n        if (locale != null) {\n            key = new Pair(key, locale);\n        }\n\n        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n        if (format == null) {\n            if (locale == null) {\n                locale = Locale.getDefault();\n            }\n\n            try {\n                SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateInstance(style, locale);\n                String pattern = formatter.toPattern();\n                format = getInstance(pattern, timeZone, locale);\n                cDateInstanceCache.put(key, format);\n                \n            } catch (ClassCastException ex) {\n                throw new IllegalArgumentException(\"No date pattern for locale: \" + locale);\n            }\n        }\n        return format;\n    }",
        "begin_line": 277,
        "end_line": 303,
        "comment": "\n     * <p>Gets a date formatter instance using the specified style, time\n     * zone and locale.</p>\n     * \n     * @param style  date style: FULL, LONG, MEDIUM, or SHORT\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @param locale  optional locale, overrides system locale\n     * @return a localized standard date formatter\n     * @throws IllegalArgumentException if the Locale has no date\n     *  pattern defined\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.getTimeInstance(int)",
        "snippet": "    public static FastDateFormat getTimeInstance(int style) {\n        return getTimeInstance(style, null, null);\n    }",
        "begin_line": 316,
        "end_line": 318,
        "comment": "\n     * <p>Gets a time formatter instance using the specified style in the\n     * default time zone and locale.</p>\n     * \n     * @param style  time style: FULL, LONG, MEDIUM, or SHORT\n     * @return a localized standard time formatter\n     * @throws IllegalArgumentException if the Locale has no time\n     *  pattern defined\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.getTimeInstance(int, java.util.Locale)",
        "snippet": "    public static FastDateFormat getTimeInstance(int style, Locale locale) {\n        return getTimeInstance(style, null, locale);\n    }",
        "begin_line": 331,
        "end_line": 333,
        "comment": "\n     * <p>Gets a time formatter instance using the specified style and\n     * locale in the default time zone.</p>\n     * \n     * @param style  time style: FULL, LONG, MEDIUM, or SHORT\n     * @param locale  optional locale, overrides system locale\n     * @return a localized standard time formatter\n     * @throws IllegalArgumentException if the Locale has no time\n     *  pattern defined\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.getTimeInstance(int, java.util.TimeZone)",
        "snippet": "    public static FastDateFormat getTimeInstance(int style, TimeZone timeZone) {\n        return getTimeInstance(style, timeZone, null);\n    }",
        "begin_line": 347,
        "end_line": 349,
        "comment": "\n     * <p>Gets a time formatter instance using the specified style and\n     * time zone in the default locale.</p>\n     * \n     * @param style  time style: FULL, LONG, MEDIUM, or SHORT\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted time\n     * @return a localized standard time formatter\n     * @throws IllegalArgumentException if the Locale has no time\n     *  pattern defined\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.getTimeInstance(int, java.util.TimeZone, java.util.Locale)",
        "snippet": "    public static synchronized FastDateFormat getTimeInstance(int style, TimeZone timeZone, Locale locale) {\n        Object key = new Integer(style);\n        if (timeZone != null) {\n            key = new Pair(key, timeZone);\n        }\n        if (locale != null) {\n            key = new Pair(key, locale);\n        }\n\n        FastDateFormat format = (FastDateFormat) cTimeInstanceCache.get(key);\n        if (format == null) {\n            if (locale == null) {\n                locale = Locale.getDefault();\n            }\n\n            try {\n                SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getTimeInstance(style, locale);\n                String pattern = formatter.toPattern();\n                format = getInstance(pattern, timeZone, locale);\n                cTimeInstanceCache.put(key, format);\n            \n            } catch (ClassCastException ex) {\n                throw new IllegalArgumentException(\"No date pattern for locale: \" + locale);\n            }\n        }\n        return format;\n    }",
        "begin_line": 363,
        "end_line": 389,
        "comment": "\n     * <p>Gets a time formatter instance using the specified style, time\n     * zone and locale.</p>\n     * \n     * @param style  time style: FULL, LONG, MEDIUM, or SHORT\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted time\n     * @param locale  optional locale, overrides system locale\n     * @return a localized standard time formatter\n     * @throws IllegalArgumentException if the Locale has no time\n     *  pattern defined\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(int, int)",
        "snippet": "    public static FastDateFormat getDateTimeInstance(\n            int dateStyle, int timeStyle) {\n        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n    }",
        "begin_line": 403,
        "end_line": 406,
        "comment": "\n     * <p>Gets a date/time formatter instance using the specified style\n     * in the default time zone and locale.</p>\n     * \n     * @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT\n     * @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT\n     * @return a localized standard date/time formatter\n     * @throws IllegalArgumentException if the Locale has no date/time\n     *  pattern defined\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(int, int, java.util.Locale)",
        "snippet": "    public static FastDateFormat getDateTimeInstance(\n            int dateStyle, int timeStyle, Locale locale) {\n        return getDateTimeInstance(dateStyle, timeStyle, null, locale);\n    }",
        "begin_line": 420,
        "end_line": 423,
        "comment": "\n     * <p>Gets a date/time formatter instance using the specified style and\n     * locale in the default time zone.</p>\n     * \n     * @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT\n     * @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT\n     * @param locale  optional locale, overrides system locale\n     * @return a localized standard date/time formatter\n     * @throws IllegalArgumentException if the Locale has no date/time\n     *  pattern defined\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(int, int, java.util.TimeZone)",
        "snippet": "    public static FastDateFormat getDateTimeInstance(\n            int dateStyle, int timeStyle, TimeZone timeZone) {\n        return getDateTimeInstance(dateStyle, timeStyle, timeZone, null);\n    }    ",
        "begin_line": 438,
        "end_line": 441,
        "comment": "\n     * <p>Gets a date/time formatter instance using the specified style and\n     * time zone in the default locale.</p>\n     * \n     * @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT\n     * @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @return a localized standard date/time formatter\n     * @throws IllegalArgumentException if the Locale has no date/time\n     *  pattern defined\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(int, int, java.util.TimeZone, java.util.Locale)",
        "snippet": "    public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n            Locale locale) {\n\n        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n        if (timeZone != null) {\n            key = new Pair(key, timeZone);\n        }\n        if (locale != null) {\n            key = new Pair(key, locale);\n        }\n\n        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n        if (format == null) {\n            if (locale == null) {\n                locale = Locale.getDefault();\n            }\n\n            try {\n                SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,\n                        locale);\n                String pattern = formatter.toPattern();\n                format = getInstance(pattern, timeZone, locale);\n                cDateTimeInstanceCache.put(key, format);\n\n            } catch (ClassCastException ex) {\n                throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n            }\n        }\n        return format;\n    }",
        "begin_line": 455,
        "end_line": 484,
        "comment": "\n     * <p>Gets a date/time formatter instance using the specified style,\n     * time zone and locale.</p>\n     * \n     * @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT\n     * @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @param locale  optional locale, overrides system locale\n     * @return a localized standard date/time formatter\n     * @throws IllegalArgumentException if the Locale has no date/time\n     *  pattern defined\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.getTimeZoneDisplay(java.util.TimeZone, boolean, int, java.util.Locale)",
        "snippet": "    static synchronized String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Locale locale) {\n        Object key = new TimeZoneDisplayKey(tz, daylight, style, locale);\n        String value = (String) cTimeZoneDisplayCache.get(key);\n        if (value == null) {\n            // This is a very slow call, so cache the results.\n            value = tz.getDisplayName(daylight, style, locale);\n            cTimeZoneDisplayCache.put(key, value);\n        }\n        return value;\n    }",
        "begin_line": 497,
        "end_line": 506,
        "comment": "\n     * <p>Gets the time zone display name, using a cache for performance.</p>\n     * \n     * @param tz  the zone to query\n     * @param daylight  true if daylight savings\n     * @param style  the style to use <code>TimeZone.LONG</code>\n     *  or <code>TimeZone.SHORT</code>\n     * @param locale  the locale to use\n     * @return the textual name of the time zone\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.getDefaultPattern()",
        "snippet": "    private static synchronized String getDefaultPattern() {\n        if (cDefaultPattern == null) {\n            cDefaultPattern = new SimpleDateFormat().toPattern();\n        }\n        return cDefaultPattern;\n    }",
        "begin_line": 513,
        "end_line": 518,
        "comment": "\n     * <p>Gets the default pattern.</p>\n     * \n     * @return the default pattern\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.FastDateFormat(java.lang.String, java.util.TimeZone, java.util.Locale)",
        "snippet": "    protected FastDateFormat(String pattern, TimeZone timeZone, Locale locale) {\n        super();\n        if (pattern == null) {\n            throw new IllegalArgumentException(\"The pattern must not be null\");\n        }\n        mPattern = pattern;\n        \n        mTimeZoneForced = (timeZone != null);\n        if (timeZone == null) {\n            timeZone = TimeZone.getDefault();\n        }\n        mTimeZone = timeZone;\n        \n        mLocaleForced = (locale != null);\n        if (locale == null) {\n            locale = Locale.getDefault();\n        }\n        mLocale = locale;\n    }",
        "begin_line": 535,
        "end_line": 553,
        "comment": "\n     * <p>Constructs a new FastDateFormat.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param timeZone  time zone to use, <code>null</code> means use\n     *  default for <code>Date</code> and value within for\n     *  <code>Calendar</code>\n     * @param locale  locale, <code>null</code> means use system\n     *  default\n     * @throws IllegalArgumentException if pattern is invalid or\n     *  <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.init()",
        "snippet": "    protected void init() {\n        List rulesList = parsePattern();\n        mRules = (Rule[]) rulesList.toArray(new Rule[rulesList.size()]);\n\n        int len = 0;\n        for (int i=mRules.length; --i >= 0; ) {\n            len += mRules[i].estimateLength();\n        }\n\n        mMaxLengthEstimate = len;\n    }",
        "begin_line": 558,
        "end_line": 568,
        "comment": "\n     * <p>Initializes the instance for first use.</p>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.parsePattern()",
        "snippet": "    protected List parsePattern() {\n        DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n        List rules = new ArrayList();\n\n        String[] ERAs = symbols.getEras();\n        String[] months = symbols.getMonths();\n        String[] shortMonths = symbols.getShortMonths();\n        String[] weekdays = symbols.getWeekdays();\n        String[] shortWeekdays = symbols.getShortWeekdays();\n        String[] AmPmStrings = symbols.getAmPmStrings();\n\n        int length = mPattern.length();\n        int[] indexRef = new int[1];\n\n        for (int i = 0; i < length; i++) {\n            indexRef[0] = i;\n            String token = parseToken(mPattern, indexRef);\n            i = indexRef[0];\n\n            int tokenLen = token.length();\n            if (tokenLen == 0) {\n                break;\n            }\n\n            Rule rule;\n            char c = token.charAt(0);\n\n            switch (c) {\n            case 'G': // era designator (text)\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y': // year (number)\n                if (tokenLen >= 4) {\n                    rule = selectNumberRule(Calendar.YEAR, tokenLen);\n                } else {\n                    rule = TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case 'M': // month in year (text and number)\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule = UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case 'd': // day in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h': // hour in am/pm (number, 1..12)\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H': // hour in day (number, 0..23)\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm': // minute in hour (number)\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's': // second in minute (number)\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S': // millisecond (number)\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E': // day in week (text)\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'D': // day in year (number)\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F': // day of week in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w': // week in year (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W': // week in month (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a': // am/pm marker (text)\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k': // hour in day (1..24)\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K': // hour in am/pm (0..11)\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'z': // time zone (text)\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case 'Z': // time zone (value)\n                if (tokenLen == 1) {\n                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case '\\'': // literal text\n                String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }\n\n            rules.add(rule);\n        }\n\n        return rules;\n    }",
        "begin_line": 578,
        "end_line": 699,
        "comment": "\n     * <p>Returns a list of Rules given a pattern.</p>\n     * \n     * @return a <code>List</code> of Rule objects\n     * @throws IllegalArgumentException if pattern is invalid\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.parseToken(java.lang.String, int[])",
        "snippet": "    protected String parseToken(String pattern, int[] indexRef) {\n        StringBuffer buf = new StringBuffer();\n\n        int i = indexRef[0];\n        int length = pattern.length();\n\n        char c = pattern.charAt(i);\n        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {\n            // Scan a run of the same character, which indicates a time\n            // pattern.\n            buf.append(c);\n\n            while (i + 1 < length) {\n                char peek = pattern.charAt(i + 1);\n                if (peek == c) {\n                    buf.append(c);\n                    i++;\n                } else {\n                    break;\n                }\n            }\n        } else {\n            // This will identify token as text.\n            buf.append('\\'');\n\n            boolean inLiteral = false;\n\n            for (; i < length; i++) {\n                c = pattern.charAt(i);\n\n                if (c == '\\'') {\n                    if (i + 1 < length && pattern.charAt(i + 1) == '\\'') {\n                        // '' is treated as escaped '\n                        i++;\n                        buf.append(c);\n                    } else {\n                        inLiteral = !inLiteral;\n                    }\n                } else if (!inLiteral &&\n                         (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')) {\n                    i--;\n                    break;\n                } else {\n                    buf.append(c);\n                }\n            }\n        }\n\n        indexRef[0] = i;\n        return buf.toString();\n    }",
        "begin_line": 708,
        "end_line": 758,
        "comment": "\n     * <p>Performs the parsing of tokens.</p>\n     * \n     * @param pattern  the pattern\n     * @param indexRef  index references\n     * @return parsed token\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.selectNumberRule(int, int)",
        "snippet": "    protected NumberRule selectNumberRule(int field, int padding) {\n        switch (padding) {\n        case 1:\n            return new UnpaddedNumberField(field);\n        case 2:\n            return new TwoDigitNumberField(field);\n        default:\n            return new PaddedNumberField(field, padding);\n        }\n    }",
        "begin_line": 767,
        "end_line": 776,
        "comment": "\n     * <p>Gets an appropriate rule for the padding required.</p>\n     * \n     * @param field  the field to get a rule for\n     * @param padding  the padding required\n     * @return a new rule with the correct padding\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)",
        "snippet": "    public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {\n        if (obj instanceof Date) {\n            return format((Date) obj, toAppendTo);\n        } else if (obj instanceof Calendar) {\n            return format((Calendar) obj, toAppendTo);\n        } else if (obj instanceof Long) {\n            return format(((Long) obj).longValue(), toAppendTo);\n        } else {\n            throw new IllegalArgumentException(\"Unknown class: \" +\n                (obj == null ? \"<null>\" : obj.getClass().getName()));\n        }\n    }",
        "begin_line": 789,
        "end_line": 800,
        "comment": "\n     * <p>Formats a <code>Date</code>, <code>Calendar</code> or\n     * <code>Long</code> (milliseconds) object.</p>\n     * \n     * @param obj  the object to format\n     * @param toAppendTo  the buffer to append to\n     * @param pos  the position - ignored\n     * @return the buffer passed in\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.format(long)",
        "snippet": "    public String format(long millis) {\n        return format(new Date(millis));\n    }",
        "begin_line": 809,
        "end_line": 811,
        "comment": "\n     * <p>Formats a millisecond <code>long</code> value.</p>\n     * \n     * @param millis  the millisecond value to format\n     * @return the formatted string\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.format(java.util.Date)",
        "snippet": "    public String format(Date date) {\n        Calendar c = new GregorianCalendar(mTimeZone);\n        c.setTime(date);\n        return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();\n    }",
        "begin_line": 819,
        "end_line": 823,
        "comment": "\n     * <p>Formats a <code>Date</code> object.</p>\n     * \n     * @param date  the date to format\n     * @return the formatted string\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.format(java.util.Calendar)",
        "snippet": "    public String format(Calendar calendar) {\n        return format(calendar, new StringBuffer(mMaxLengthEstimate)).toString();\n    }",
        "begin_line": 831,
        "end_line": 833,
        "comment": "\n     * <p>Formats a <code>Calendar</code> object.</p>\n     * \n     * @param calendar  the calendar to format\n     * @return the formatted string\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.format(long, java.lang.StringBuffer)",
        "snippet": "    public StringBuffer format(long millis, StringBuffer buf) {\n        return format(new Date(millis), buf);\n    }",
        "begin_line": 844,
        "end_line": 846,
        "comment": "\n     * <p>Formats a milliseond <code>long</code> value into the\n     * supplied <code>StringBuffer</code>.</p>\n     * \n     * @param millis  the millisecond value to format\n     * @param buf  the buffer to format into\n     * @return the specified string buffer\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.format(java.util.Date, java.lang.StringBuffer)",
        "snippet": "    public StringBuffer format(Date date, StringBuffer buf) {\n        Calendar c = new GregorianCalendar(mTimeZone);\n        c.setTime(date);\n        return applyRules(c, buf);\n    }",
        "begin_line": 856,
        "end_line": 860,
        "comment": "\n     * <p>Formats a <code>Date</code> object into the\n     * supplied <code>StringBuffer</code>.</p>\n     * \n     * @param date  the date to format\n     * @param buf  the buffer to format into\n     * @return the specified string buffer\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.format(java.util.Calendar, java.lang.StringBuffer)",
        "snippet": "    public StringBuffer format(Calendar calendar, StringBuffer buf) {\n        if (mTimeZoneForced) {\n            calendar = (Calendar) calendar.clone();\n            calendar.setTimeZone(mTimeZone);\n        }\n        return applyRules(calendar, buf);\n    }",
        "begin_line": 870,
        "end_line": 876,
        "comment": "\n     * <p>Formats a <code>Calendar</code> object into the\n     * supplied <code>StringBuffer</code>.</p>\n     * \n     * @param calendar  the calendar to format\n     * @param buf  the buffer to format into\n     * @return the specified string buffer\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.applyRules(java.util.Calendar, java.lang.StringBuffer)",
        "snippet": "    protected StringBuffer applyRules(Calendar calendar, StringBuffer buf) {\n        Rule[] rules = mRules;\n        int len = mRules.length;\n        for (int i = 0; i < len; i++) {\n            rules[i].appendTo(buf, calendar);\n        }\n        return buf;\n    }",
        "begin_line": 886,
        "end_line": 893,
        "comment": "\n     * <p>Performs the formatting by applying the rules to the\n     * specified calendar.</p>\n     * \n     * @param calendar  the calendar to format\n     * @param buf  the buffer to format into\n     * @return the specified string buffer\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.parseObject(java.lang.String, java.text.ParsePosition)",
        "snippet": "    public Object parseObject(String source, ParsePosition pos) {\n        pos.setIndex(0);\n        pos.setErrorIndex(0);\n        return null;\n    }",
        "begin_line": 904,
        "end_line": 908,
        "comment": "\n     * <p>Parsing is not supported.</p>\n     * \n     * @param source  the string to parse\n     * @param pos  the parsing position\n     * @return <code>null</code> as not supported\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.getPattern()",
        "snippet": "    public String getPattern() {\n        return mPattern;\n    }",
        "begin_line": 917,
        "end_line": 919,
        "comment": "\n     * <p>Gets the pattern used by this formatter.</p>\n     * \n     * @return the pattern, {@link java.text.SimpleDateFormat} compatible\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.getTimeZone()",
        "snippet": "    public TimeZone getTimeZone() {\n        return mTimeZone;\n    }",
        "begin_line": 931,
        "end_line": 933,
        "comment": "\n     * <p>Gets the time zone used by this formatter.</p>\n     *\n     * <p>This zone is always used for <code>Date</code> formatting.\n     * If a <code>Calendar</code> is passed in to be formatted, the\n     * time zone on that may be used depending on\n     * {@link #getTimeZoneOverridesCalendar()}.</p>\n     * \n     * @return the time zone\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.getTimeZoneOverridesCalendar()",
        "snippet": "    public boolean getTimeZoneOverridesCalendar() {\n        return mTimeZoneForced;\n    }",
        "begin_line": 942,
        "end_line": 944,
        "comment": "\n     * <p>Returns <code>true</code> if the time zone of the\n     * calendar overrides the time zone of the formatter.</p>\n     * \n     * @return <code>true</code> if time zone of formatter\n     *  overridden for calendars\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.getLocale()",
        "snippet": "    public Locale getLocale() {\n        return mLocale;\n    }",
        "begin_line": 951,
        "end_line": 953,
        "comment": "\n     * <p>Gets the locale used by this formatter.</p>\n     * \n     * @return the locale\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.getMaxLengthEstimate()",
        "snippet": "    public int getMaxLengthEstimate() {\n        return mMaxLengthEstimate;\n    }",
        "begin_line": 964,
        "end_line": 966,
        "comment": "\n     * <p>Gets an estimate for the maximum string length that the\n     * formatter will produce.</p>\n     *\n     * <p>The actual formatted length will almost always be less than or\n     * equal to this amount.</p>\n     * \n     * @return the maximum formatted length\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj instanceof FastDateFormat == false) {\n            return false;\n        }\n        FastDateFormat other = (FastDateFormat) obj;\n        if (\n            (mPattern == other.mPattern || mPattern.equals(other.mPattern)) &&\n            (mTimeZone == other.mTimeZone || mTimeZone.equals(other.mTimeZone)) &&\n            (mLocale == other.mLocale || mLocale.equals(other.mLocale)) &&\n            (mTimeZoneForced == other.mTimeZoneForced) &&\n            (mLocaleForced == other.mLocaleForced)\n            ) {\n            return true;\n        }\n        return false;\n    }",
        "begin_line": 976,
        "end_line": 991,
        "comment": "\n     * <p>Compares two objects for equality.</p>\n     * \n     * @param obj  the object to compare to\n     * @return <code>true</code> if equal\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.hashCode()",
        "snippet": "    public int hashCode() {\n        int total = 0;\n        total += mPattern.hashCode();\n        total += mTimeZone.hashCode();\n        total += (mTimeZoneForced ? 1 : 0);\n        total += mLocale.hashCode();\n        total += (mLocaleForced ? 1 : 0);\n        return total;\n    }",
        "begin_line": 998,
        "end_line": 1006,
        "comment": "\n     * <p>Returns a hashcode compatible with equals.</p>\n     * \n     * @return a hashcode compatible with equals\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.toString()",
        "snippet": "    public String toString() {\n        return \"FastDateFormat[\" + mPattern + \"]\";\n    }",
        "begin_line": 1013,
        "end_line": 1015,
        "comment": "\n     * <p>Gets a debugging string version of this formatter.</p>\n     * \n     * @return a debugging string\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.Rule.estimateLength()",
        "snippet": "        int estimateLength();",
        "begin_line": 1028,
        "end_line": 1028,
        "comment": "\n         * Returns the estimated lentgh of the result.\n         * \n         * @return the estimated length\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.Rule.appendTo(java.lang.StringBuffer, java.util.Calendar)",
        "snippet": "        void appendTo(StringBuffer buffer, Calendar calendar);",
        "begin_line": 1036,
        "end_line": 1036,
        "comment": "\n         * Appends the value of the specified calendar to the output buffer based on the rule implementation.\n         * \n         * @param buffer the output buffer\n         * @param calendar calendar to be appended\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.NumberRule.appendTo(java.lang.StringBuffer, int)",
        "snippet": "        void appendTo(StringBuffer buffer, int value);",
        "begin_line": 1049,
        "end_line": 1049,
        "comment": "\n         * Appends the specified value to the output buffer based on the rule implementation.\n         * \n         * @param buffer the output buffer\n         * @param value the value to be appended\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.CharacterLiteral.CharacterLiteral(char)",
        "snippet": "        CharacterLiteral(char value) {\n            mValue = value;\n        }",
        "begin_line": 1064,
        "end_line": 1066,
        "comment": "\n         * Constructs a new instance of <code>CharacterLiteral</code>\n         * to hold the specified value.\n         * \n         * @param value the character literal\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.CharacterLiteral.estimateLength()",
        "snippet": "        public int estimateLength() {\n            return 1;\n        }",
        "begin_line": 1071,
        "end_line": 1073,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang.time.FastDateFormat.Rule": null,
            "java.text.Format": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.CharacterLiteral.appendTo(java.lang.StringBuffer, java.util.Calendar)",
        "snippet": "        public void appendTo(StringBuffer buffer, Calendar calendar) {\n            buffer.append(mValue);\n        }",
        "begin_line": 1078,
        "end_line": 1080,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang.time.FastDateFormat.Rule": null,
            "java.text.Format": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.StringLiteral.StringLiteral(java.lang.String)",
        "snippet": "        StringLiteral(String value) {\n            mValue = value;\n        }",
        "begin_line": 1095,
        "end_line": 1097,
        "comment": "\n         * Constructs a new instance of <code>StringLiteral</code>\n         * to hold the specified value.\n         * \n         * @param value the string literal\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.StringLiteral.estimateLength()",
        "snippet": "        public int estimateLength() {\n            return mValue.length();\n        }",
        "begin_line": 1102,
        "end_line": 1104,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang.time.FastDateFormat.Rule": null,
            "java.text.Format": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.StringLiteral.appendTo(java.lang.StringBuffer, java.util.Calendar)",
        "snippet": "        public void appendTo(StringBuffer buffer, Calendar calendar) {\n            buffer.append(mValue);\n        }",
        "begin_line": 1109,
        "end_line": 1111,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang.time.FastDateFormat.Rule": null,
            "java.text.Format": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TextField.TextField(int, java.lang.String[])",
        "snippet": "        TextField(int field, String[] values) {\n            mField = field;\n            mValues = values;\n        }",
        "begin_line": 1128,
        "end_line": 1131,
        "comment": "\n         * Constructs an instance of <code>TextField</code>\n         * with the specified field and values.\n         * \n         * @param field the field\n         * @param values the field values\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TextField.estimateLength()",
        "snippet": "        public int estimateLength() {\n            int max = 0;\n            for (int i=mValues.length; --i >= 0; ) {\n                int len = mValues[i].length();\n                if (len > max) {\n                    max = len;\n                }\n            }\n            return max;\n        }",
        "begin_line": 1136,
        "end_line": 1145,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang.time.FastDateFormat.Rule": null,
            "java.text.Format": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TextField.appendTo(java.lang.StringBuffer, java.util.Calendar)",
        "snippet": "        public void appendTo(StringBuffer buffer, Calendar calendar) {\n            buffer.append(mValues[calendar.get(mField)]);\n        }",
        "begin_line": 1150,
        "end_line": 1152,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang.time.FastDateFormat.Rule": null,
            "java.text.Format": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField.UnpaddedNumberField(int)",
        "snippet": "        UnpaddedNumberField(int field) {\n            mField = field;\n        }",
        "begin_line": 1168,
        "end_line": 1170,
        "comment": "\n         * Constructs an instance of <code>UnpadedNumberField</code> with the specified field.\n         * \n         * @param field the field\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField.estimateLength()",
        "snippet": "        public int estimateLength() {\n            return 4;\n        }",
        "begin_line": 1175,
        "end_line": 1177,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang.time.FastDateFormat.NumberRule": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField.appendTo(java.lang.StringBuffer, java.util.Calendar)",
        "snippet": "        public void appendTo(StringBuffer buffer, Calendar calendar) {\n            appendTo(buffer, calendar.get(mField));\n        }",
        "begin_line": 1182,
        "end_line": 1184,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang.time.FastDateFormat.NumberRule": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField.appendTo(java.lang.StringBuffer, int)",
        "snippet": "        public final void appendTo(StringBuffer buffer, int value) {\n            if (value < 10) {\n                buffer.append((char)(value + '0'));\n            } else if (value < 100) {\n                buffer.append((char)(value / 10 + '0'));\n                buffer.append((char)(value % 10 + '0'));\n            } else {\n                buffer.append(Integer.toString(value));\n            }\n        }",
        "begin_line": 1189,
        "end_line": 1198,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang.time.FastDateFormat.NumberRule": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField.UnpaddedMonthField()",
        "snippet": "        UnpaddedMonthField() {\n            super();\n        }",
        "begin_line": 1211,
        "end_line": 1213,
        "comment": "\n         * Constructs an instance of <code>UnpaddedMonthField</code>.\n         *\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField.estimateLength()",
        "snippet": "        public int estimateLength() {\n            return 2;\n        }",
        "begin_line": 1218,
        "end_line": 1220,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang.time.FastDateFormat.NumberRule": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField.appendTo(java.lang.StringBuffer, java.util.Calendar)",
        "snippet": "        public void appendTo(StringBuffer buffer, Calendar calendar) {\n            appendTo(buffer, calendar.get(Calendar.MONTH) + 1);\n        }",
        "begin_line": 1225,
        "end_line": 1227,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang.time.FastDateFormat.NumberRule": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.UnpaddedMonthField.appendTo(java.lang.StringBuffer, int)",
        "snippet": "        public final void appendTo(StringBuffer buffer, int value) {\n            if (value < 10) {\n                buffer.append((char)(value + '0'));\n            } else {\n                buffer.append((char)(value / 10 + '0'));\n                buffer.append((char)(value % 10 + '0'));\n            }\n        }",
        "begin_line": 1232,
        "end_line": 1239,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang.time.FastDateFormat.NumberRule": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.PaddedNumberField.PaddedNumberField(int, int)",
        "snippet": "        PaddedNumberField(int field, int size) {\n            if (size < 3) {\n                // Should use UnpaddedNumberField or TwoDigitNumberField.\n                throw new IllegalArgumentException();\n            }\n            mField = field;\n            mSize = size;\n        }",
        "begin_line": 1255,
        "end_line": 1262,
        "comment": "\n         * Constructs an instance of <code>PaddedNumberField</code>.\n         * \n         * @param field the field\n         * @param size size of the output field\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.PaddedNumberField.estimateLength()",
        "snippet": "        public int estimateLength() {\n            return 4;\n        }",
        "begin_line": 1267,
        "end_line": 1269,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang.time.FastDateFormat.NumberRule": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.PaddedNumberField.appendTo(java.lang.StringBuffer, java.util.Calendar)",
        "snippet": "        public void appendTo(StringBuffer buffer, Calendar calendar) {\n            appendTo(buffer, calendar.get(mField));\n        }",
        "begin_line": 1274,
        "end_line": 1276,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang.time.FastDateFormat.NumberRule": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.PaddedNumberField.appendTo(java.lang.StringBuffer, int)",
        "snippet": "        public final void appendTo(StringBuffer buffer, int value) {\n            if (value < 100) {\n                for (int i = mSize; --i >= 2; ) {\n                    buffer.append('0');\n                }\n                buffer.append((char)(value / 10 + '0'));\n                buffer.append((char)(value % 10 + '0'));\n            } else {\n                int digits;\n                if (value < 1000) {\n                    digits = 3;\n                } else {\n                    Validate.isTrue(value > -1, \"Negative values should not be possible\", value);\n                    digits = Integer.toString(value).length();\n                }\n                for (int i = mSize; --i >= digits; ) {\n                    buffer.append('0');\n                }\n                buffer.append(Integer.toString(value));\n            }\n        }",
        "begin_line": 1281,
        "end_line": 1301,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang.time.FastDateFormat.NumberRule": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TwoDigitNumberField.TwoDigitNumberField(int)",
        "snippet": "        TwoDigitNumberField(int field) {\n            mField = field;\n        }",
        "begin_line": 1315,
        "end_line": 1317,
        "comment": "\n         * Constructs an instance of <code>TwoDigitNumberField</code> with the specified field.\n         * \n         * @param field the field\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TwoDigitNumberField.estimateLength()",
        "snippet": "        public int estimateLength() {\n            return 2;\n        }",
        "begin_line": 1322,
        "end_line": 1324,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang.time.FastDateFormat.NumberRule": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TwoDigitNumberField.appendTo(java.lang.StringBuffer, java.util.Calendar)",
        "snippet": "        public void appendTo(StringBuffer buffer, Calendar calendar) {\n            appendTo(buffer, calendar.get(mField));\n        }",
        "begin_line": 1329,
        "end_line": 1331,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang.time.FastDateFormat.NumberRule": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TwoDigitNumberField.appendTo(java.lang.StringBuffer, int)",
        "snippet": "        public final void appendTo(StringBuffer buffer, int value) {\n            if (value < 100) {\n                buffer.append((char)(value / 10 + '0'));\n                buffer.append((char)(value % 10 + '0'));\n            } else {\n                buffer.append(Integer.toString(value));\n            }\n        }",
        "begin_line": 1336,
        "end_line": 1343,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang.time.FastDateFormat.NumberRule": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField.TwoDigitYearField()",
        "snippet": "        TwoDigitYearField() {\n            super();\n        }",
        "begin_line": 1355,
        "end_line": 1357,
        "comment": "\n         * Constructs an instance of <code>TwoDigitYearField</code>.\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField.estimateLength()",
        "snippet": "        public int estimateLength() {\n            return 2;\n        }",
        "begin_line": 1362,
        "end_line": 1364,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang.time.FastDateFormat.NumberRule": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField.appendTo(java.lang.StringBuffer, java.util.Calendar)",
        "snippet": "        public void appendTo(StringBuffer buffer, Calendar calendar) {\n            appendTo(buffer, calendar.get(Calendar.YEAR) % 100);\n        }",
        "begin_line": 1369,
        "end_line": 1371,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang.time.FastDateFormat.NumberRule": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TwoDigitYearField.appendTo(java.lang.StringBuffer, int)",
        "snippet": "        public final void appendTo(StringBuffer buffer, int value) {\n            buffer.append((char)(value / 10 + '0'));\n            buffer.append((char)(value % 10 + '0'));\n        }",
        "begin_line": 1376,
        "end_line": 1379,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang.time.FastDateFormat.NumberRule": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField.TwoDigitMonthField()",
        "snippet": "        TwoDigitMonthField() {\n            super();\n        }",
        "begin_line": 1391,
        "end_line": 1393,
        "comment": "\n         * Constructs an instance of <code>TwoDigitMonthField</code>.\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField.estimateLength()",
        "snippet": "        public int estimateLength() {\n            return 2;\n        }",
        "begin_line": 1398,
        "end_line": 1400,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang.time.FastDateFormat.NumberRule": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField.appendTo(java.lang.StringBuffer, java.util.Calendar)",
        "snippet": "        public void appendTo(StringBuffer buffer, Calendar calendar) {\n            appendTo(buffer, calendar.get(Calendar.MONTH) + 1);\n        }",
        "begin_line": 1405,
        "end_line": 1407,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang.time.FastDateFormat.NumberRule": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TwoDigitMonthField.appendTo(java.lang.StringBuffer, int)",
        "snippet": "        public final void appendTo(StringBuffer buffer, int value) {\n            buffer.append((char)(value / 10 + '0'));\n            buffer.append((char)(value % 10 + '0'));\n        }",
        "begin_line": 1412,
        "end_line": 1415,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang.time.FastDateFormat.NumberRule": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TwelveHourField.TwelveHourField(org.apache.commons.lang.time.FastDateFormat.NumberRule)",
        "snippet": "        TwelveHourField(NumberRule rule) {\n            mRule = rule;\n        }",
        "begin_line": 1430,
        "end_line": 1432,
        "comment": "\n         * Constructs an instance of <code>TwelveHourField</code> with the specified\n         * <code>NumberRule</code>.\n         * \n         * @param rule the rule\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TwelveHourField.estimateLength()",
        "snippet": "        public int estimateLength() {\n            return mRule.estimateLength();\n        }",
        "begin_line": 1437,
        "end_line": 1439,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang.time.FastDateFormat.NumberRule": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TwelveHourField.appendTo(java.lang.StringBuffer, java.util.Calendar)",
        "snippet": "        public void appendTo(StringBuffer buffer, Calendar calendar) {\n            int value = calendar.get(Calendar.HOUR);\n            if (value == 0) {\n                value = calendar.getLeastMaximum(Calendar.HOUR) + 1;\n            }\n            mRule.appendTo(buffer, value);\n        }",
        "begin_line": 1444,
        "end_line": 1450,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang.time.FastDateFormat.NumberRule": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TwelveHourField.appendTo(java.lang.StringBuffer, int)",
        "snippet": "        public void appendTo(StringBuffer buffer, int value) {\n            mRule.appendTo(buffer, value);\n        }",
        "begin_line": 1455,
        "end_line": 1457,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang.time.FastDateFormat.NumberRule": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TwentyFourHourField.TwentyFourHourField(org.apache.commons.lang.time.FastDateFormat.NumberRule)",
        "snippet": "        TwentyFourHourField(NumberRule rule) {\n            mRule = rule;\n        }",
        "begin_line": 1472,
        "end_line": 1474,
        "comment": "\n         * Constructs an instance of <code>TwentyFourHourField</code> with the specified\n         * <code>NumberRule</code>.\n         * \n         * @param rule the rule\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TwentyFourHourField.estimateLength()",
        "snippet": "        public int estimateLength() {\n            return mRule.estimateLength();\n        }",
        "begin_line": 1479,
        "end_line": 1481,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang.time.FastDateFormat.NumberRule": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TwentyFourHourField.appendTo(java.lang.StringBuffer, java.util.Calendar)",
        "snippet": "        public void appendTo(StringBuffer buffer, Calendar calendar) {\n            int value = calendar.get(Calendar.HOUR_OF_DAY);\n            if (value == 0) {\n                value = calendar.getMaximum(Calendar.HOUR_OF_DAY) + 1;\n            }\n            mRule.appendTo(buffer, value);\n        }",
        "begin_line": 1486,
        "end_line": 1492,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang.time.FastDateFormat.NumberRule": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TwentyFourHourField.appendTo(java.lang.StringBuffer, int)",
        "snippet": "        public void appendTo(StringBuffer buffer, int value) {\n            mRule.appendTo(buffer, value);\n        }",
        "begin_line": 1497,
        "end_line": 1499,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang.time.FastDateFormat.NumberRule": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TimeZoneNameRule.TimeZoneNameRule(java.util.TimeZone, boolean, java.util.Locale, int)",
        "snippet": "        TimeZoneNameRule(TimeZone timeZone, boolean timeZoneForced, Locale locale, int style) {\n            mTimeZone = timeZone;\n            mTimeZoneForced = timeZoneForced;\n            mLocale = locale;\n            mStyle = style;\n\n            if (timeZoneForced) {\n                mStandard = getTimeZoneDisplay(timeZone, false, style, locale);\n                mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);\n            } else {\n                mStandard = null;\n                mDaylight = null;\n            }\n        }",
        "begin_line": 1521,
        "end_line": 1534,
        "comment": "\n         * Constructs an instance of <code>TimeZoneNameRule</code> with the specified properties.\n         * \n         * @param timeZone the time zone\n         * @param timeZoneForced if <code>true</code> the time zone is forced into standard and daylight\n         * @param locale the locale\n         * @param style the style\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TimeZoneNameRule.estimateLength()",
        "snippet": "        public int estimateLength() {\n            if (mTimeZoneForced) {\n                return Math.max(mStandard.length(), mDaylight.length());\n            } else if (mStyle == TimeZone.SHORT) {\n                return 4;\n            } else {\n                return 40;\n            }\n        }",
        "begin_line": 1539,
        "end_line": 1547,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang.time.FastDateFormat.Rule": null,
            "java.text.Format": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TimeZoneNameRule.appendTo(java.lang.StringBuffer, java.util.Calendar)",
        "snippet": "        public void appendTo(StringBuffer buffer, Calendar calendar) {\n            if (mTimeZoneForced) {\n                if (mTimeZone.useDaylightTime() && calendar.get(Calendar.DST_OFFSET) != 0) {\n                    buffer.append(mDaylight);\n                } else {\n                    buffer.append(mStandard);\n                }\n            } else {\n                TimeZone timeZone = calendar.getTimeZone();\n                if (timeZone.useDaylightTime() && calendar.get(Calendar.DST_OFFSET) != 0) {\n                    buffer.append(getTimeZoneDisplay(timeZone, true, mStyle, mLocale));\n                } else {\n                    buffer.append(getTimeZoneDisplay(timeZone, false, mStyle, mLocale));\n                }\n            }\n        }",
        "begin_line": 1552,
        "end_line": 1567,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang.time.FastDateFormat.Rule": null,
            "java.text.Format": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule.TimeZoneNumberRule(boolean)",
        "snippet": "        TimeZoneNumberRule(boolean colon) {\n            mColon = colon;\n        }",
        "begin_line": 1585,
        "end_line": 1587,
        "comment": "\n         * Constructs an instance of <code>TimeZoneNumberRule</code> with the specified properties.\n         * \n         * @param colon add colon between HH and MM in the output if <code>true</code>\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule.estimateLength()",
        "snippet": "        public int estimateLength() {\n            return 5;\n        }",
        "begin_line": 1592,
        "end_line": 1594,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang.time.FastDateFormat.Rule": null,
            "java.text.Format": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TimeZoneNumberRule.appendTo(java.lang.StringBuffer, java.util.Calendar)",
        "snippet": "        public void appendTo(StringBuffer buffer, Calendar calendar) {\n            int offset = calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);\n            \n            if (offset < 0) {\n                buffer.append('-');\n                offset = -offset;\n            } else {\n                buffer.append('+');\n            }\n            \n            int hours = offset / (60 * 60 * 1000);\n            buffer.append((char)(hours / 10 + '0'));\n            buffer.append((char)(hours % 10 + '0'));\n            \n            if (mColon) {\n                buffer.append(':');\n            }\n            \n            int minutes = offset / (60 * 1000) - 60 * hours;\n            buffer.append((char)(minutes / 10 + '0'));\n            buffer.append((char)(minutes % 10 + '0'));\n        }            ",
        "begin_line": 1599,
        "end_line": 1620,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang.time.FastDateFormat.Rule": null,
            "java.text.Format": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey.TimeZoneDisplayKey(java.util.TimeZone, boolean, int, java.util.Locale)",
        "snippet": "        TimeZoneDisplayKey(TimeZone timeZone,\n                           boolean daylight, int style, Locale locale) {\n            mTimeZone = timeZone;\n            if (daylight) {\n                style |= 0x80000000;\n            }\n            mStyle = style;\n            mLocale = locale;\n        }",
        "begin_line": 1640,
        "end_line": 1648,
        "comment": "\n         * Constructs an instance of <code>TimeZoneDisplayKey</code> with the specified properties.\n         *  \n         * @param timeZone the time zone\n         * @param daylight adjust the style for daylight saving time if <code>true</code>\n         * @param style the timezone style\n         * @param locale the timezone locale\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey.hashCode()",
        "snippet": "        public int hashCode() {\n            return mStyle * 31 + mLocale.hashCode();\n        }",
        "begin_line": 1653,
        "end_line": 1655,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TimeZoneDisplayKey.equals(java.lang.Object)",
        "snippet": "        public boolean equals(Object obj) {\n            if (this == obj) {\n                return true;\n            }\n            if (obj instanceof TimeZoneDisplayKey) {\n                TimeZoneDisplayKey other = (TimeZoneDisplayKey)obj;\n                return\n                    mTimeZone.equals(other.mTimeZone) &&\n                    mStyle == other.mStyle &&\n                    mLocale.equals(other.mLocale);\n            }\n            return false;\n        }",
        "begin_line": 1660,
        "end_line": 1672,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.Pair.Pair(java.lang.Object, java.lang.Object)",
        "snippet": "        public Pair(Object obj1, Object obj2) {\n            mObj1 = obj1;\n            mObj2 = obj2;\n        }",
        "begin_line": 1691,
        "end_line": 1694,
        "comment": "\n         * Constructs an instance of <code>Pair</code> to hold the specified objects.\n         * @param obj1 one object in the pair\n         * @param obj2 second object in the pair\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.Pair.equals(java.lang.Object)",
        "snippet": "        public boolean equals(Object obj) {\n            if (this == obj) {\n                return true;\n            }\n\n            if (!(obj instanceof Pair)) {\n                return false;\n            }\n\n            Pair key = (Pair)obj;\n\n            return\n                (mObj1 == null ?\n                 key.mObj1 == null : mObj1.equals(key.mObj1)) &&\n                (mObj2 == null ?\n                 key.mObj2 == null : mObj2.equals(key.mObj2));\n        }",
        "begin_line": 1699,
        "end_line": 1715,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.Pair.hashCode()",
        "snippet": "        public int hashCode() {\n            return\n                (mObj1 == null ? 0 : mObj1.hashCode()) +\n                (mObj2 == null ? 0 : mObj2.hashCode());\n        }",
        "begin_line": 1720,
        "end_line": 1724,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.Pair.toString()",
        "snippet": "        public String toString() {\n            return \"[\" + mObj1 + ':' + mObj2 + ']';\n        }",
        "begin_line": 1729,
        "end_line": 1731,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null
        }
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/StopWatch.java",
        "class_name": "org.apache.commons.lang.time.StopWatch",
        "signature": "org.apache.commons.lang.time.StopWatch.StopWatch()",
        "snippet": "    public StopWatch() {\n        super();\n    }",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\n     * <p>Constructor.</p>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/StopWatch.java",
        "class_name": "org.apache.commons.lang.time.StopWatch",
        "signature": "org.apache.commons.lang.time.StopWatch.start()",
        "snippet": "    public void start() {\n        if(this.runningState == STATE_STOPPED) {\n            throw new IllegalStateException(\"Stopwatch must be reset before being restarted. \");\n        }\n        if(this.runningState != STATE_UNSTARTED) {\n            throw new IllegalStateException(\"Stopwatch already started. \");\n        }\n        stopTime = -1;\n        startTime = System.currentTimeMillis();\n        this.runningState = STATE_RUNNING;\n    }",
        "begin_line": 95,
        "end_line": 105,
        "comment": "\n     * <p>Start the stopwatch.</p>\n     * \n     * <p>This method starts a new timing session, clearing any previous values.</p>\n     *\n     * @throws IllegalStateException if the StopWatch is already running.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/StopWatch.java",
        "class_name": "org.apache.commons.lang.time.StopWatch",
        "signature": "org.apache.commons.lang.time.StopWatch.stop()",
        "snippet": "    public void stop() {\n        if(this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) {\n            throw new IllegalStateException(\"Stopwatch is not running. \");\n        }\n        stopTime = System.currentTimeMillis();\n        this.runningState = STATE_STOPPED;\n    }",
        "begin_line": 114,
        "end_line": 120,
        "comment": "\n     * <p>Stop the stopwatch.</p>\n     * \n     * <p>This method ends a new timing session, allowing the time to be retrieved.</p>\n     *\n     * @throws IllegalStateException if the StopWatch is not running.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/StopWatch.java",
        "class_name": "org.apache.commons.lang.time.StopWatch",
        "signature": "org.apache.commons.lang.time.StopWatch.reset()",
        "snippet": "    public void reset() {\n        this.runningState = STATE_UNSTARTED;\n        this.splitState   = STATE_UNSPLIT;\n        startTime = -1;\n        stopTime = -1;\n    }",
        "begin_line": 127,
        "end_line": 132,
        "comment": "\n     * <p>Resets the stopwatch. Stops it if need be. </p>\n     * \n     * <p>This method clears the internal values to allow the object to be reused.</p>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/StopWatch.java",
        "class_name": "org.apache.commons.lang.time.StopWatch",
        "signature": "org.apache.commons.lang.time.StopWatch.split()",
        "snippet": "    public void split() {\n        if(this.runningState != STATE_RUNNING) {\n            throw new IllegalStateException(\"Stopwatch is not running. \");\n        }\n        stopTime = System.currentTimeMillis();\n        this.splitState = STATE_SPLIT;\n    }",
        "begin_line": 143,
        "end_line": 149,
        "comment": "\n     * <p>Split the time.</p>\n     * \n     * <p>This method sets the stop time of the watch to allow a time to be extracted.\n     * The start time is unaffected, enabling {@link #unsplit()} to continue the \n     * timing from the original start point.</p>\n     *\n     * @throws IllegalStateException if the StopWatch is not running.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/StopWatch.java",
        "class_name": "org.apache.commons.lang.time.StopWatch",
        "signature": "org.apache.commons.lang.time.StopWatch.unsplit()",
        "snippet": "    public void unsplit() {\n        if(this.splitState != STATE_SPLIT) {\n            throw new IllegalStateException(\"Stopwatch has not been split. \");\n        }\n        stopTime = -1;\n        this.splitState = STATE_UNSPLIT;\n    }",
        "begin_line": 159,
        "end_line": 165,
        "comment": "\n     * <p>Remove a split.</p>\n     * \n     * <p>This method clears the stop time. The start time is unaffected, enabling \n     * timing from the original start point to continue.</p>\n     *\n     * @throws IllegalStateException if the StopWatch has not been split.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/StopWatch.java",
        "class_name": "org.apache.commons.lang.time.StopWatch",
        "signature": "org.apache.commons.lang.time.StopWatch.suspend()",
        "snippet": "    public void suspend() {\n        if(this.runningState != STATE_RUNNING) {\n            throw new IllegalStateException(\"Stopwatch must be running to suspend. \");\n        }\n        stopTime = System.currentTimeMillis();\n        this.runningState = STATE_SUSPENDED;\n    }",
        "begin_line": 175,
        "end_line": 181,
        "comment": "\n     * <p>Suspend the stopwatch for later resumption.</p>\n     * \n     * <p>This method suspends the watch until it is resumed. The watch will not include\n     * time between the suspend and resume calls in the total time.</p>\n     *\n     * @throws IllegalStateException if the StopWatch is not currently running.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/StopWatch.java",
        "class_name": "org.apache.commons.lang.time.StopWatch",
        "signature": "org.apache.commons.lang.time.StopWatch.resume()",
        "snippet": "    public void resume() {\n        if(this.runningState != STATE_SUSPENDED) {\n            throw new IllegalStateException(\"Stopwatch must be suspended to resume. \");\n        }\n        startTime += (System.currentTimeMillis() - stopTime);\n        stopTime = -1;\n        this.runningState = STATE_RUNNING;\n    }",
        "begin_line": 191,
        "end_line": 198,
        "comment": "\n     * <p>Resume the stopwatch after a suspend.</p>\n     * \n     * <p>This method resumes the watch after it was suspended. The watch will not include\n     * time between the suspend and resume calls in the total time.</p>\n     *\n     * @throws IllegalStateException if the StopWatch has not been suspended. \n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/StopWatch.java",
        "class_name": "org.apache.commons.lang.time.StopWatch",
        "signature": "org.apache.commons.lang.time.StopWatch.getTime()",
        "snippet": "    public long getTime() {\n        if(this.runningState == STATE_STOPPED || this.runningState == STATE_SUSPENDED) {\n            return this.stopTime - this.startTime;\n        } else\n        if(this.runningState == STATE_UNSTARTED) {\n            return 0;\n        } else\n        if(this.runningState == STATE_RUNNING) {\n            return System.currentTimeMillis() - this.startTime;\n        }\n        throw new RuntimeException(\"Illegal running state has occured. \");\n    }",
        "begin_line": 208,
        "end_line": 219,
        "comment": "\n     * <p>Get the time on the stopwatch.</p>\n     * \n     * <p>This is either the time between the start and the moment this method \n     * is called, or the amount of time between start and stop.</p>\n     * \n     * @return the time in milliseconds\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/StopWatch.java",
        "class_name": "org.apache.commons.lang.time.StopWatch",
        "signature": "org.apache.commons.lang.time.StopWatch.getSplitTime()",
        "snippet": "    public long getSplitTime() {\n        if(this.splitState != STATE_SPLIT) {\n            throw new IllegalStateException(\"Stopwatch must be split to get the split time. \");\n        }\n        return this.stopTime - this.startTime;\n    }",
        "begin_line": 231,
        "end_line": 236,
        "comment": "\n     * <p>Get the split time on the stopwatch.</p>\n     * \n     * <p>This is the time between start and latest split. </p>\n     * \n     * @return the split time in milliseconds\n     *\n     * @throws IllegalStateException if the StopWatch has not yet been split.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/StopWatch.java",
        "class_name": "org.apache.commons.lang.time.StopWatch",
        "signature": "org.apache.commons.lang.time.StopWatch.toString()",
        "snippet": "    public String toString() {\n        return DurationFormatUtils.formatDurationHMS(getTime());\n    }",
        "begin_line": 246,
        "end_line": 248,
        "comment": "\n     * <p>Gets a summary of the time that the stopwatch recorded as a string.</p>\n     * \n     * <p>The format used is ISO8601-like,\n     * <i>hours</i>:<i>minutes</i>:<i>seconds</i>.<i>milliseconds</i>.</p>\n     * \n     * @return the time as a String\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/time/StopWatch.java",
        "class_name": "org.apache.commons.lang.time.StopWatch",
        "signature": "org.apache.commons.lang.time.StopWatch.toSplitString()",
        "snippet": "    public String toSplitString() {\n        return DurationFormatUtils.formatDurationHMS(getSplitTime());\n    }",
        "begin_line": 259,
        "end_line": 261,
        "comment": "\n     * <p>Gets a summary of the split time that the stopwatch recorded as a string.</p>\n     * \n     * <p>The format used is ISO8601-like,\n     * <i>hours</i>:<i>minutes</i>:<i>seconds</i>.<i>milliseconds</i>.</p>\n     * \n     * @return the split time as a String\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilder.Anonymous-1a50c5a8-937a-4dcb-af63-f8c9ac011db1.initialValue()",
        "snippet": "        protected synchronized Object initialValue() {\n            // The HashSet implementation is not synchronized,\n            // which is just what we need here.\n            return new HashSet();\n        }",
        "begin_line": 105,
        "end_line": 109,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilder.getRegistry()",
        "snippet": "    static Set getRegistry() {\n        return (Set) registry.get();\n    }",
        "begin_line": 120,
        "end_line": 122,
        "comment": "\n     * <p>\n     * Returns the registry of objects being traversed by the <code>reflectionToString</code> methods in the current\n     * thread.\n     * </p>\n     * \n     * @return Set the registry of objects being traversed\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilder.isRegistered(java.lang.Object)",
        "snippet": "    static boolean isRegistered(Object value) {\n        return getRegistry().contains(value);\n    }",
        "begin_line": 134,
        "end_line": 136,
        "comment": "\n     * <p>\n     * Returns <code>true</code> if the registry contains the given object. Used by the reflection methods to avoid\n     * infinite loops.\n     * </p>\n     * \n     * @param value\n     *            The object to lookup in the registry.\n     * @return boolean <code>true</code> if the registry contains the given object.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilder.register(java.lang.Object)",
        "snippet": "    static void register(Object value) {\n        getRegistry().add(value);\n    }",
        "begin_line": 146,
        "end_line": 148,
        "comment": "\n     * <p>\n     * Registers the given object. Used by the reflection methods to avoid infinite loops.\n     * </p>\n     * \n     * @param value\n     *            The object to register.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilder.toString(java.lang.Object)",
        "snippet": "    public static String toString(Object object) {\n        return toString(object, null, false, false, null);\n    }",
        "begin_line": 172,
        "end_line": 174,
        "comment": "\n     * <p>\n     * Builds a <code>toString</code> value using the default <code>ToStringStyle</code> through reflection.\n     * </p>\n     * \n     * <p>\n     * It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will\n     * throw a security exception if run under a security manager, if the permissions are not set up correctly. It is\n     * also not as efficient as testing explicitly.\n     * </p>\n     * \n     * <p>\n     * Transient members will be not be included, as they are likely derived. Static fields will not be included.\n     * Superclass fields will be appended.\n     * </p>\n     * \n     * @param object\n     *            the Object to be output\n     * @return the String result\n     * @throws IllegalArgumentException\n     *             if the Object is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilder.toString(java.lang.Object, org.apache.commons.lang.builder.ToStringStyle)",
        "snippet": "    public static String toString(Object object, ToStringStyle style) {\n        return toString(object, style, false, false, null);\n    }",
        "begin_line": 204,
        "end_line": 206,
        "comment": "\n     * <p>\n     * Builds a <code>toString</code> value through reflection.\n     * </p>\n     * \n     * <p>\n     * It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will\n     * throw a security exception if run under a security manager, if the permissions are not set up correctly. It is\n     * also not as efficient as testing explicitly.\n     * </p>\n     * \n     * <p>\n     * Transient members will be not be included, as they are likely derived. Static fields will not be included.\n     * Superclass fields will be appended.\n     * </p>\n     * \n     * <p>\n     * If the style is <code>null</code>, the default <code>ToStringStyle</code> is used.\n     * </p>\n     * \n     * @param object\n     *            the Object to be output\n     * @param style\n     *            the style of the <code>toString</code> to create, may be <code>null</code>\n     * @return the String result\n     * @throws IllegalArgumentException\n     *             if the Object or <code>ToStringStyle</code> is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilder.toString(java.lang.Object, org.apache.commons.lang.builder.ToStringStyle, boolean)",
        "snippet": "    public static String toString(Object object, ToStringStyle style, boolean outputTransients) {\n        return toString(object, style, outputTransients, false, null);\n    }",
        "begin_line": 242,
        "end_line": 244,
        "comment": "\n     * <p>\n     * Builds a <code>toString</code> value through reflection.\n     * </p>\n     * \n     * <p>\n     * It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will\n     * throw a security exception if run under a security manager, if the permissions are not set up correctly. It is\n     * also not as efficient as testing explicitly.\n     * </p>\n     * \n     * <p>\n     * If the <code>outputTransients</code> is <code>true</code>, transient members will be output, otherwise they\n     * are ignored, as they are likely derived fields, and not part of the value of the Object.\n     * </p>\n     * \n     * <p>\n     * Static fields will not be included. Superclass fields will be appended.\n     * </p>\n     * \n     * <p>\n     * If the style is <code>null</code>, the default <code>ToStringStyle</code> is used.\n     * </p>\n     * \n     * @param object\n     *            the Object to be output\n     * @param style\n     *            the style of the <code>toString</code> to create, may be <code>null</code>\n     * @param outputTransients\n     *            whether to include transient fields\n     * @return the String result\n     * @throws IllegalArgumentException\n     *             if the Object is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilder.toString(java.lang.Object, org.apache.commons.lang.builder.ToStringStyle, boolean, boolean)",
        "snippet": "    public static String toString(Object object, ToStringStyle style, boolean outputTransients, boolean outputStatics) {\n        return toString(object, style, outputTransients, outputStatics, null);\n    }",
        "begin_line": 288,
        "end_line": 290,
        "comment": "\n     * <p>\n     * Builds a <code>toString</code> value through reflection.\n     * </p>\n     * \n     * <p>\n     * It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will\n     * throw a security exception if run under a security manager, if the permissions are not set up correctly. It is\n     * also not as efficient as testing explicitly.\n     * </p>\n     * \n     * <p>\n     * If the <code>outputTransients</code> is <code>true</code>, transient fields will be output, otherwise they\n     * are ignored, as they are likely derived fields, and not part of the value of the Object.\n     * </p>\n     * \n     * <p>\n     * If the <code>outputStatics</code> is <code>true</code>, static fields will be output, otherwise they are\n     * ignored.\n     * </p>\n     * \n     * <p>\n     * Static fields will not be included. Superclass fields will be appended.\n     * </p>\n     * \n     * <p>\n     * If the style is <code>null</code>, the default <code>ToStringStyle</code> is used.\n     * </p>\n     * \n     * @param object\n     *            the Object to be output\n     * @param style\n     *            the style of the <code>toString</code> to create, may be <code>null</code>\n     * @param outputTransients\n     *            whether to include transient fields\n     * @param outputStatics\n     *            whether to include transient fields\n     * @return the String result\n     * @throws IllegalArgumentException\n     *             if the Object is <code>null</code>\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilder.toString(java.lang.Object, org.apache.commons.lang.builder.ToStringStyle, boolean, boolean, java.lang.Class)",
        "snippet": "    public static String toString(Object object, ToStringStyle style, boolean outputTransients, boolean outputStatics,\n            Class reflectUpToClass) {\n        return new ReflectionToStringBuilder(object, style, null, reflectUpToClass, outputTransients, outputStatics)\n                .toString();\n    }",
        "begin_line": 337,
        "end_line": 341,
        "comment": "\n     * <p>\n     * Builds a <code>toString</code> value through reflection.\n     * </p>\n     * \n     * <p>\n     * It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will\n     * throw a security exception if run under a security manager, if the permissions are not set up correctly. It is\n     * also not as efficient as testing explicitly.\n     * </p>\n     * \n     * <p>\n     * If the <code>outputTransients</code> is <code>true</code>, transient fields will be output, otherwise they\n     * are ignored, as they are likely derived fields, and not part of the value of the Object.\n     * </p>\n     * \n     * <p>\n     * If the <code>outputStatics</code> is <code>true</code>, static fields will be output, otherwise they are\n     * ignored.\n     * </p>\n     * \n     * <p>\n     * Superclass fields will be appended up to and including the specified superclass. A null superclass is treated as\n     * <code>java.lang.Object</code>.\n     * </p>\n     * \n     * <p>\n     * If the style is <code>null</code>, the default <code>ToStringStyle</code> is used.\n     * </p>\n     * \n     * @param object\n     *            the Object to be output\n     * @param style\n     *            the style of the <code>toString</code> to create, may be <code>null</code>\n     * @param outputTransients\n     *            whether to include transient fields\n     * @param outputStatics\n     *            whether to include static fields\n     * @param reflectUpToClass\n     *            the superclass to reflect up to (inclusive), may be <code>null</code>\n     * @return the String result\n     * @throws IllegalArgumentException\n     *             if the Object is <code>null</code>\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilder.toString(java.lang.Object, org.apache.commons.lang.builder.ToStringStyle, boolean, java.lang.Class)",
        "snippet": "    public static String toString(Object object, ToStringStyle style, \n                                  boolean outputTransients, Class reflectUpToClass) \n    {\n        return new ReflectionToStringBuilder(object, style, null, reflectUpToClass, outputTransients).toString();\n    }",
        "begin_line": 383,
        "end_line": 387,
        "comment": "\n     * <p>\n     * Builds a <code>toString</code> value through reflection.\n     * </p>\n     * \n     * <p>\n     * It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will\n     * throw a security exception if run under a security manager, if the permissions are not set up correctly. It is\n     * also not as efficient as testing explicitly.\n     * </p>\n     * \n     * <p>\n     * If the <code>outputTransients</code> is <code>true</code>, transient members will be output, otherwise they\n     * are ignored, as they are likely derived fields, and not part of the value of the Object.\n     * </p>\n     * \n     * <p>\n     * Static fields will not be included. Superclass fields will be appended up to and including the specified\n     * superclass. A null superclass is treated as <code>java.lang.Object</code>.\n     * </p>\n     * \n     * <p>\n     * If the style is <code>null</code>, the default <code>ToStringStyle</code> is used.\n     * </p>\n     * \n     * @deprecated Use {@link #toString(Object,ToStringStyle,boolean,boolean,Class)}\n     * \n     * @param object\n     *            the Object to be output\n     * @param style\n     *            the style of the <code>toString</code> to create, may be <code>null</code>\n     * @param outputTransients\n     *            whether to include transient fields\n     * @param reflectUpToClass\n     *            the superclass to reflect up to (inclusive), may be <code>null</code>\n     * @return the String result\n     * @throws IllegalArgumentException\n     *             if the Object is <code>null</code>\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilder.toStringExclude(java.lang.Object, java.lang.String)",
        "snippet": "    public static String toStringExclude(Object object, final String excludeFieldName) {\n        return toStringExclude(object, new String[]{excludeFieldName});\n    }",
        "begin_line": 398,
        "end_line": 400,
        "comment": "\n     * Builds a String for a toString method excluding the given field name.\n     * \n     * @param object\n     *            The object to \"toString\".\n     * @param excludeFieldName\n     *            The field name to exclude\n     * @return The toString value.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilder.toStringExclude(java.lang.Object, java.util.Collection)",
        "snippet": "    public static String toStringExclude(Object object, Collection /*String*/ excludeFieldNames) {\n        return toStringExclude(object, toNoNullStringArray(excludeFieldNames));\n    }",
        "begin_line": 411,
        "end_line": 413,
        "comment": "\n     * Builds a String for a toString method excluding the given field names.\n     * \n     * @param object\n     *            The object to \"toString\".\n     * @param excludeFieldNames\n     *            The field names to exclude. Null excludes nothing.\n     * @return The toString value.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilder.toNoNullStringArray(java.util.Collection)",
        "snippet": "    static String[] toNoNullStringArray(Collection collection) {\n        if (collection == null) {\n            return ArrayUtils.EMPTY_STRING_ARRAY;\n        }\n        return toNoNullStringArray(collection.toArray());\n    }",
        "begin_line": 424,
        "end_line": 429,
        "comment": "\n     * Converts the given Collection into an array of Strings. The returned array does not contain <code>null</code>\n     * entries. Note that {@link Arrays#sort(Object[])} will throw an {@link NullPointerException} if an array element \n     * is <code>null</code>.\n     * \n     * @param collection\n     *            The collection to convert\n     * @return A new array of Strings.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilder.toNoNullStringArray(java.lang.Object[])",
        "snippet": "    static String[] toNoNullStringArray(Object[] array) {\n        ArrayList list = new ArrayList(array.length);\n        for (int i = 0; i < array.length; i++) {\n            Object e = array[i];\n            if (e != null) {\n                list.add(e.toString());\n            }\n        }\n        return (String[]) list.toArray(ArrayUtils.EMPTY_STRING_ARRAY);\n    }",
        "begin_line": 440,
        "end_line": 449,
        "comment": "\n     * Returns a new array of Strings without null elements. Internal method used to normalize exclude lists\n     * (arrays and collections). Note that {@link Arrays#sort(Object[])} will throw an {@link NullPointerException} \n     * if an array element is <code>null</code>.\n     * \n     * @param array\n     *            The array to check\n     * @return The given array or a new array without null.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilder.toStringExclude(java.lang.Object, java.lang.String[])",
        "snippet": "    public static String toStringExclude(Object object, String[] excludeFieldNames) {\n        return new ReflectionToStringBuilder(object).setExcludeFieldNames(excludeFieldNames).toString();\n    }",
        "begin_line": 461,
        "end_line": 463,
        "comment": "\n     * Builds a String for a toString method excluding the given field names.\n     * \n     * @param object\n     *            The object to \"toString\".\n     * @param excludeFieldNames\n     *            The field names to exclude\n     * @return The toString value.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilder.unregister(java.lang.Object)",
        "snippet": "    static void unregister(Object value) {\n        getRegistry().remove(value);\n    }",
        "begin_line": 477,
        "end_line": 479,
        "comment": "\n     * <p>\n     * Unregisters the given object.\n     * </p>\n     * \n     * <p>\n     * Used by the reflection methods to avoid infinite loops.\n     * </p>\n     * \n     * @param value\n     *            The object to unregister.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilder.ReflectionToStringBuilder(java.lang.Object)",
        "snippet": "    public ReflectionToStringBuilder(Object object) {\n        super(object);\n    }",
        "begin_line": 515,
        "end_line": 517,
        "comment": "\n     * <p>\n     * Constructor.\n     * </p>\n     * \n     * <p>\n     * This constructor outputs using the default style set with <code>setDefaultStyle</code>.\n     * </p>\n     * \n     * @param object\n     *            the Object to build a <code>toString</code> for, must not be <code>null</code>\n     * @throws IllegalArgumentException\n     *             if the Object passed in is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilder.ReflectionToStringBuilder(java.lang.Object, org.apache.commons.lang.builder.ToStringStyle)",
        "snippet": "    public ReflectionToStringBuilder(Object object, ToStringStyle style) {\n        super(object, style);\n    }",
        "begin_line": 535,
        "end_line": 537,
        "comment": "\n     * <p>\n     * Constructor.\n     * </p>\n     * \n     * <p>\n     * If the style is <code>null</code>, the default style is used.\n     * </p>\n     * \n     * @param object\n     *            the Object to build a <code>toString</code> for, must not be <code>null</code>\n     * @param style\n     *            the style of the <code>toString</code> to create, may be <code>null</code>\n     * @throws IllegalArgumentException\n     *             if the Object passed in is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilder.ReflectionToStringBuilder(java.lang.Object, org.apache.commons.lang.builder.ToStringStyle, java.lang.StringBuffer)",
        "snippet": "    public ReflectionToStringBuilder(Object object, ToStringStyle style, StringBuffer buffer) {\n        super(object, style, buffer);\n    }",
        "begin_line": 561,
        "end_line": 563,
        "comment": "\n     * <p>\n     * Constructor.\n     * </p>\n     * \n     * <p>\n     * If the style is <code>null</code>, the default style is used.\n     * </p>\n     * \n     * <p>\n     * If the buffer is <code>null</code>, a new one is created.\n     * </p>\n     * \n     * @param object\n     *            the Object to build a <code>toString</code> for\n     * @param style\n     *            the style of the <code>toString</code> to create, may be <code>null</code>\n     * @param buffer\n     *            the <code>StringBuffer</code> to populate, may be <code>null</code>\n     * @throws IllegalArgumentException\n     *             if the Object passed in is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilder.ReflectionToStringBuilder(java.lang.Object, org.apache.commons.lang.builder.ToStringStyle, java.lang.StringBuffer, java.lang.Class, boolean)",
        "snippet": "    public ReflectionToStringBuilder(Object object, ToStringStyle style, StringBuffer buffer, Class reflectUpToClass,\n            boolean outputTransients) {\n        super(object, style, buffer);\n        this.setUpToClass(reflectUpToClass);\n        this.setAppendTransients(outputTransients);\n    }",
        "begin_line": 581,
        "end_line": 586,
        "comment": "\n     * Constructor.\n     * \n     * @deprecated Use {@link #ReflectionToStringBuilder(Object,ToStringStyle,StringBuffer,Class,boolean,boolean)}.\n     * \n     * @param object\n     *            the Object to build a <code>toString</code> for\n     * @param style\n     *            the style of the <code>toString</code> to create, may be <code>null</code>\n     * @param buffer\n     *            the <code>StringBuffer</code> to populate, may be <code>null</code>\n     * @param reflectUpToClass\n     *            the superclass to reflect up to (inclusive), may be <code>null</code>\n     * @param outputTransients\n     *            whether to include transient fields\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilder.ReflectionToStringBuilder(java.lang.Object, org.apache.commons.lang.builder.ToStringStyle, java.lang.StringBuffer, java.lang.Class, boolean, boolean)",
        "snippet": "    public ReflectionToStringBuilder(Object object, ToStringStyle style, StringBuffer buffer, Class reflectUpToClass,\n            boolean outputTransients, boolean outputStatics) {\n        super(object, style, buffer);\n        this.setUpToClass(reflectUpToClass);\n        this.setAppendTransients(outputTransients);\n        this.setAppendStatics(outputStatics);\n    }",
        "begin_line": 605,
        "end_line": 611,
        "comment": "\n     * Constructor.\n     * \n     * @param object\n     *            the Object to build a <code>toString</code> for\n     * @param style\n     *            the style of the <code>toString</code> to create, may be <code>null</code>\n     * @param buffer\n     *            the <code>StringBuffer</code> to populate, may be <code>null</code>\n     * @param reflectUpToClass\n     *            the superclass to reflect up to (inclusive), may be <code>null</code>\n     * @param outputTransients\n     *            whether to include transient fields\n     * @param outputStatics\n     *            whether to include static fields\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilder.accept(java.lang.reflect.Field)",
        "snippet": "    protected boolean accept(Field field) {\n        if (field.getName().indexOf(ClassUtils.INNER_CLASS_SEPARATOR_CHAR) != -1) {\n            // Reject field from inner class.\n            return false;\n        }\n        if (Modifier.isTransient(field.getModifiers()) && !this.isAppendTransients()) {\n            // Reject transient fields.\n            return false;\n        }\n        if (Modifier.isStatic(field.getModifiers()) && !this.isAppendStatics()) {\n            // Rject static fields.\n            return false;\n        }\n        if (this.getExcludeFieldNames() != null\n            && Arrays.binarySearch(this.getExcludeFieldNames(), field.getName()) >= 0) {\n            // Reject fields from the getExcludeFieldNames list.\n            return false;\n        }\n        return true;\n    }",
        "begin_line": 625,
        "end_line": 644,
        "comment": "\n     * Returns whether or not to append the given <code>Field</code>.\n     * <ul>\n     * <li>Transient fields are appended only if {@link #isAppendTransients()} returns <code>true</code>.\n     * <li>Static fields are appended only if {@link #isAppendStatics()} returns <code>true</code>.\n     * <li>Inner class fields are not appened.</li>\n     * </ul>\n     * \n     * @param field\n     *            The Field to test.\n     * @return Whether or not to append the given <code>Field</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilder.appendFieldsIn(java.lang.Class)",
        "snippet": "    protected void appendFieldsIn(Class clazz) {\n        if (isRegistered(this.getObject())) {\n            // The object has already been appended, therefore we have an\n            // object cycle.\n            // Append a simple Object.toString style string. The field name is\n            // already appended at this point.\n            this.appendAsObjectToString(this.getObject());\n            return;\n        }\n        try {\n            this.registerObject();\n            if (clazz.isArray()) {\n                this.reflectionAppendArray(this.getObject());\n                return;\n            }\n            Field[] fields = clazz.getDeclaredFields();\n            AccessibleObject.setAccessible(fields, true);\n            for (int i = 0; i < fields.length; i++) {\n                Field field = fields[i];\n                String fieldName = field.getName();\n                if (this.accept(field)) {\n                    try {\n                        // Warning: Field.get(Object) creates wrappers objects\n                        // for primitive types.\n                        Object fieldValue = this.getValue(field);\n                        if (isRegistered(fieldValue) && !field.getType().isPrimitive()) {\n                            // A known field value has already been appended,\n                            // therefore we have an object cycle,\n                            // append a simple Object.toString style string.\n                            this.getStyle().appendFieldStart(this.getStringBuffer(), fieldName);\n                            this.appendAsObjectToString(fieldValue);\n                            this.getStyle().appendFieldEnd(this.getStringBuffer(), fieldName);\n                            // The recursion out of\n                            // builder.append(fieldName, fieldValue);\n                            // below will append the field\n                            // end marker.\n                        } else {\n                            try {\n                                this.registerObject();\n                                this.append(fieldName, fieldValue);\n                            } finally {\n                                this.unregisterObject();\n                            }\n                        }\n                    } catch (IllegalAccessException ex) {\n                        // this can't happen. Would get a Security exception\n                        // instead\n                        // throw a runtime exception in case the impossible\n                        // happens.\n                        throw new InternalError(\"Unexpected IllegalAccessException: \" + ex.getMessage());\n                    }\n                }\n            }\n        } finally {\n            this.unregisterObject();\n        }\n    }",
        "begin_line": 659,
        "end_line": 715,
        "comment": "\n     * <p>\n     * Appends the fields and values defined by the given object of the given Class.\n     * </p>\n     * \n     * <p>\n     * If a cycle is detected as an object is &quot;toString()'ed&quot;, such an object is rendered as if\n     * <code>Object.toString()</code> had been called and not implemented by the object.\n     * </p>\n     * \n     * @param clazz\n     *            The class of object parameter\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilder.getExcludeFieldNames()",
        "snippet": "    public String[] getExcludeFieldNames() {\n        return this.excludeFieldNames;\n    }",
        "begin_line": 720,
        "end_line": 722,
        "comment": "\n     * @return Returns the excludeFieldNames.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilder.getUpToClass()",
        "snippet": "    public Class getUpToClass() {\n        return this.upToClass;\n    }",
        "begin_line": 731,
        "end_line": 733,
        "comment": "\n     * <p>\n     * Gets the last super class to stop appending fields for.\n     * </p>\n     * \n     * @return The last super class to stop appending fields for.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilder.getValue(java.lang.reflect.Field)",
        "snippet": "    protected Object getValue(Field field) throws IllegalArgumentException, IllegalAccessException {\n        return field.get(this.getObject());\n    }",
        "begin_line": 751,
        "end_line": 753,
        "comment": "\n     * <p>\n     * Calls <code>java.lang.reflect.Field.get(Object)</code>.\n     * </p>\n     * \n     * @param field\n     *            The Field to query.\n     * @return The Object from the given Field.\n     * \n     * @throws IllegalArgumentException\n     *             see {@link java.lang.reflect.Field#get(Object)}\n     * @throws IllegalAccessException\n     *             see {@link java.lang.reflect.Field#get(Object)}\n     * \n     * @see java.lang.reflect.Field#get(Object)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilder.isAppendStatics()",
        "snippet": "    public boolean isAppendStatics() {\n        return this.appendStatics;\n    }",
        "begin_line": 763,
        "end_line": 765,
        "comment": "\n     * <p>\n     * Gets whether or not to append static fields.\n     * </p>\n     * \n     * @return Whether or not to append static fields.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilder.isAppendTransients()",
        "snippet": "    public boolean isAppendTransients() {\n        return this.appendTransients;\n    }",
        "begin_line": 774,
        "end_line": 776,
        "comment": "\n     * <p>\n     * Gets whether or not to append transient fields.\n     * </p>\n     * \n     * @return Whether or not to append transient fields.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilder.reflectionAppendArray(java.lang.Object)",
        "snippet": "    public ToStringBuilder reflectionAppendArray(Object array) {\n        this.getStyle().reflectionAppendArrayDetail(this.getStringBuffer(), null, array);\n        return this;\n    }",
        "begin_line": 787,
        "end_line": 790,
        "comment": "\n     * <p>\n     * Append to the <code>toString</code> an <code>Object</code> array.\n     * </p>\n     * \n     * @param array\n     *            the array to add to the <code>toString</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilder.registerObject()",
        "snippet": "    void registerObject() {\n        register(this.getObject());\n    }",
        "begin_line": 797,
        "end_line": 799,
        "comment": "\n     * <p>\n     * Registers this builder's source object to avoid infinite loops when processing circular object references.\n     * </p>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilder.setAppendStatics(boolean)",
        "snippet": "    public void setAppendStatics(boolean appendStatics) {\n        this.appendStatics = appendStatics;\n    }",
        "begin_line": 810,
        "end_line": 812,
        "comment": "\n     * <p>\n     * Sets whether or not to append static fields.\n     * </p>\n     * \n     * @param appendStatics\n     *            Whether or not to append static fields.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilder.setAppendTransients(boolean)",
        "snippet": "    public void setAppendTransients(boolean appendTransients) {\n        this.appendTransients = appendTransients;\n    }",
        "begin_line": 822,
        "end_line": 824,
        "comment": "\n     * <p>\n     * Sets whether or not to append transient fields.\n     * </p>\n     * \n     * @param appendTransients\n     *            Whether or not to append transient fields.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilder.setExcludeFieldNames(java.lang.String[])",
        "snippet": "    public ReflectionToStringBuilder setExcludeFieldNames(String[] excludeFieldNamesParam) {\n        if (excludeFieldNamesParam == null) {\n            this.excludeFieldNames = null;\n        } else {\n            this.excludeFieldNames = toNoNullStringArray(excludeFieldNamesParam);\n            Arrays.sort(this.excludeFieldNames);\n        }\n        return this;\n    }",
        "begin_line": 833,
        "end_line": 841,
        "comment": "\n     * Sets the field names to exclude.\n     * \n     * @param excludeFieldNamesParam\n     *            The excludeFieldNames to excluding from toString or <code>null</code>.\n     * @return <code>this</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilder.setUpToClass(java.lang.Class)",
        "snippet": "    public void setUpToClass(Class clazz) {\n        this.upToClass = clazz;\n    }",
        "begin_line": 851,
        "end_line": 853,
        "comment": "\n     * <p>\n     * Sets the last super class to stop appending fields for.\n     * </p>\n     * \n     * @param clazz\n     *            The last super class to stop appending fields for.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilder.toString()",
        "snippet": "    public String toString() {\n        if (this.getObject() == null) {\n            return this.getStyle().getNullText();\n        }\n        Class clazz = this.getObject().getClass();\n        this.appendFieldsIn(clazz);\n        while (clazz.getSuperclass() != null && clazz != this.getUpToClass()) {\n            clazz = clazz.getSuperclass();\n            this.appendFieldsIn(clazz);\n        }\n        return super.toString();\n    }",
        "begin_line": 862,
        "end_line": 873,
        "comment": "\n     * <p>\n     * Gets the String built by this builder.\n     * </p>\n     * \n     * @return the built string\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ReflectionToStringBuilder.unregisterObject()",
        "snippet": "    void unregisterObject() {\n        unregister(this.getObject());\n    }",
        "begin_line": 880,
        "end_line": 882,
        "comment": "\n     * <p>\n     * Unregisters this builder's source object to avoid infinite loops when processing circular object references.\n     * </p>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/EqualsBuilder.java",
        "class_name": "org.apache.commons.lang.builder.EqualsBuilder",
        "signature": "org.apache.commons.lang.builder.EqualsBuilder.EqualsBuilder()",
        "snippet": "    public EqualsBuilder() {\n        // do nothing for now.\n    }",
        "begin_line": 101,
        "end_line": 103,
        "comment": "\n     * <p>Constructor for EqualsBuilder.</p>\n     *\n     * <p>Starts off assuming that equals is <code>true</code>.</p>\n     * @see Object#equals(Object)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/EqualsBuilder.java",
        "class_name": "org.apache.commons.lang.builder.EqualsBuilder",
        "signature": "org.apache.commons.lang.builder.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object)",
        "snippet": "    public static boolean reflectionEquals(Object lhs, Object rhs) {\n        return reflectionEquals(lhs, rhs, false, null, null);\n    }",
        "begin_line": 125,
        "end_line": 127,
        "comment": "\n     * <p>This method uses reflection to determine if the two <code>Object</code>s\n     * are equal.</p>\n     *\n     * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n     * fields. This means that it will throw a security exception if run under\n     * a security manager, if the permissions are not set up correctly. It is also\n     * not as efficient as testing explicitly.</p>\n     *\n     * <p>Transient members will be not be tested, as they are likely derived\n     * fields, and not part of the value of the Object.</p>\n     *\n     * <p>Static fields will not be tested. Superclass fields will be included.</p>\n     *\n     * @param lhs  <code>this</code> object\n     * @param rhs  the other object\n     * @return <code>true</code> if the two Objects have tested equals.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/EqualsBuilder.java",
        "class_name": "org.apache.commons.lang.builder.EqualsBuilder",
        "signature": "org.apache.commons.lang.builder.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object, java.util.Collection)",
        "snippet": "    public static boolean reflectionEquals(Object lhs, Object rhs, Collection /*String*/ excludeFields) {\n        return reflectionEquals(lhs, rhs, ReflectionToStringBuilder.toNoNullStringArray(excludeFields));\n    }",
        "begin_line": 148,
        "end_line": 150,
        "comment": "\n     * <p>This method uses reflection to determine if the two <code>Object</code>s\n     * are equal.</p>\n     *\n     * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n     * fields. This means that it will throw a security exception if run under\n     * a security manager, if the permissions are not set up correctly. It is also\n     * not as efficient as testing explicitly.</p>\n     *\n     * <p>Transient members will be not be tested, as they are likely derived\n     * fields, and not part of the value of the Object.</p>\n     *\n     * <p>Static fields will not be tested. Superclass fields will be included.</p>\n     *\n     * @param lhs  <code>this</code> object\n     * @param rhs  the other object\n     * @param excludeFields  Collection of String field names to exclude from testing\n     * @return <code>true</code> if the two Objects have tested equals.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/EqualsBuilder.java",
        "class_name": "org.apache.commons.lang.builder.EqualsBuilder",
        "signature": "org.apache.commons.lang.builder.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object, java.lang.String[])",
        "snippet": "    public static boolean reflectionEquals(Object lhs, Object rhs, String[] excludeFields) {\n        return reflectionEquals(lhs, rhs, false, null, excludeFields);\n    }",
        "begin_line": 171,
        "end_line": 173,
        "comment": "\n     * <p>This method uses reflection to determine if the two <code>Object</code>s\n     * are equal.</p>\n     *\n     * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n     * fields. This means that it will throw a security exception if run under\n     * a security manager, if the permissions are not set up correctly. It is also\n     * not as efficient as testing explicitly.</p>\n     *\n     * <p>Transient members will be not be tested, as they are likely derived\n     * fields, and not part of the value of the Object.</p>\n     *\n     * <p>Static fields will not be tested. Superclass fields will be included.</p>\n     *\n     * @param lhs  <code>this</code> object\n     * @param rhs  the other object\n     * @param excludeFields  array of field names to exclude from testing\n     * @return <code>true</code> if the two Objects have tested equals.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/EqualsBuilder.java",
        "class_name": "org.apache.commons.lang.builder.EqualsBuilder",
        "signature": "org.apache.commons.lang.builder.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object, boolean)",
        "snippet": "    public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients) {\n        return reflectionEquals(lhs, rhs, testTransients, null, null);\n    }",
        "begin_line": 195,
        "end_line": 197,
        "comment": "\n     * <p>This method uses reflection to determine if the two <code>Object</code>s\n     * are equal.</p>\n     *\n     * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n     * fields. This means that it will throw a security exception if run under\n     * a security manager, if the permissions are not set up correctly. It is also\n     * not as efficient as testing explicitly.</p>\n     *\n     * <p>If the TestTransients parameter is set to <code>true</code>, transient\n     * members will be tested, otherwise they are ignored, as they are likely\n     * derived fields, and not part of the value of the <code>Object</code>.</p>\n     *\n     * <p>Static fields will not be tested. Superclass fields will be included.</p>\n     *\n     * @param lhs  <code>this</code> object\n     * @param rhs  the other object\n     * @param testTransients  whether to include transient fields\n     * @return <code>true</code> if the two Objects have tested equals.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/EqualsBuilder.java",
        "class_name": "org.apache.commons.lang.builder.EqualsBuilder",
        "signature": "org.apache.commons.lang.builder.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object, boolean, java.lang.Class)",
        "snippet": "    public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass) {\n        return reflectionEquals(lhs, rhs, testTransients, reflectUpToClass, null);\n    }",
        "begin_line": 224,
        "end_line": 226,
        "comment": "\n     * <p>This method uses reflection to determine if the two <code>Object</code>s\n     * are equal.</p>\n     *\n     * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n     * fields. This means that it will throw a security exception if run under\n     * a security manager, if the permissions are not set up correctly. It is also\n     * not as efficient as testing explicitly.</p>\n     *\n     * <p>If the testTransients parameter is set to <code>true</code>, transient\n     * members will be tested, otherwise they are ignored, as they are likely\n     * derived fields, and not part of the value of the <code>Object</code>.</p>\n     *\n     * <p>Static fields will not be included. Superclass fields will be appended\n     * up to and including the specified superclass. A null superclass is treated\n     * as java.lang.Object.</p>\n     *\n     * @param lhs  <code>this</code> object\n     * @param rhs  the other object\n     * @param testTransients  whether to include transient fields\n     * @param reflectUpToClass  the superclass to reflect up to (inclusive),\n     *  may be <code>null</code>\n     * @return <code>true</code> if the two Objects have tested equals.\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/EqualsBuilder.java",
        "class_name": "org.apache.commons.lang.builder.EqualsBuilder",
        "signature": "org.apache.commons.lang.builder.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object, boolean, java.lang.Class, java.lang.String[])",
        "snippet": "    public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass,\n            String[] excludeFields) {\n        if (lhs == rhs) {\n            return true;\n        }\n        if (lhs == null || rhs == null) {\n            return false;\n        }\n        // Find the leaf class since there may be transients in the leaf \n        // class or in classes between the leaf and root.\n        // If we are not testing transients or a subclass has no ivars, \n        // then a subclass can test equals to a superclass.\n        Class lhsClass = lhs.getClass();\n        Class rhsClass = rhs.getClass();\n        Class testClass;\n        if (lhsClass.isInstance(rhs)) {\n            testClass = lhsClass;\n            if (!rhsClass.isInstance(lhs)) {\n                // rhsClass is a subclass of lhsClass\n                testClass = rhsClass;\n            }\n        } else if (rhsClass.isInstance(lhs)) {\n            testClass = rhsClass;\n            if (!lhsClass.isInstance(rhs)) {\n                // lhsClass is a subclass of rhsClass\n                testClass = lhsClass;\n            }\n        } else {\n            // The two classes are not related.\n            return false;\n        }\n        EqualsBuilder equalsBuilder = new EqualsBuilder();\n        try {\n            reflectionAppend(lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields);\n            while (testClass.getSuperclass() != null && testClass != reflectUpToClass) {\n                testClass = testClass.getSuperclass();\n                reflectionAppend(lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields);\n            }\n        } catch (IllegalArgumentException e) {\n            // In this case, we tried to test a subclass vs. a superclass and\n            // the subclass has ivars or the ivars are transient and \n            // we are testing transients.\n            // If a subclass has ivars that we are trying to test them, we get an\n            // exception and we know that the objects are not equal.\n            return false;\n        }\n        return equalsBuilder.isEquals();\n    }",
        "begin_line": 254,
        "end_line": 301,
        "comment": "\n     * <p>This method uses reflection to determine if the two <code>Object</code>s\n     * are equal.</p>\n     *\n     * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n     * fields. This means that it will throw a security exception if run under\n     * a security manager, if the permissions are not set up correctly. It is also\n     * not as efficient as testing explicitly.</p>\n     *\n     * <p>If the testTransients parameter is set to <code>true</code>, transient\n     * members will be tested, otherwise they are ignored, as they are likely\n     * derived fields, and not part of the value of the <code>Object</code>.</p>\n     *\n     * <p>Static fields will not be included. Superclass fields will be appended\n     * up to and including the specified superclass. A null superclass is treated\n     * as java.lang.Object.</p>\n     *\n     * @param lhs  <code>this</code> object\n     * @param rhs  the other object\n     * @param testTransients  whether to include transient fields\n     * @param reflectUpToClass  the superclass to reflect up to (inclusive),\n     *  may be <code>null</code>\n     * @param excludeFields  array of field names to exclude from testing\n     * @return <code>true</code> if the two Objects have tested equals.\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/EqualsBuilder.java",
        "class_name": "org.apache.commons.lang.builder.EqualsBuilder",
        "signature": "org.apache.commons.lang.builder.EqualsBuilder.reflectionAppend(java.lang.Object, java.lang.Object, java.lang.Class, org.apache.commons.lang.builder.EqualsBuilder, boolean, java.lang.String[])",
        "snippet": "    private static void reflectionAppend(\n        Object lhs,\n        Object rhs,\n        Class clazz,\n        EqualsBuilder builder,\n        boolean useTransients,\n        String[] excludeFields) {\n        Field[] fields = clazz.getDeclaredFields();\n        List excludedFieldList = excludeFields != null ? Arrays.asList(excludeFields) : Collections.EMPTY_LIST;\n        AccessibleObject.setAccessible(fields, true);\n        for (int i = 0; i < fields.length && builder.isEquals; i++) {\n            Field f = fields[i];\n            if (!excludedFieldList.contains(f.getName())\n                && (f.getName().indexOf('$') == -1)\n                && (useTransients || !Modifier.isTransient(f.getModifiers()))\n                && (!Modifier.isStatic(f.getModifiers()))) {\n                try {\n                    builder.append(f.get(lhs), f.get(rhs));\n                } catch (IllegalAccessException e) {\n                    //this can't happen. Would get a Security exception instead\n                    //throw a runtime exception in case the impossible happens.\n                    throw new InternalError(\"Unexpected IllegalAccessException\");\n                }\n            }\n        }\n    }",
        "begin_line": 314,
        "end_line": 339,
        "comment": "\n     * <p>Appends the fields and values defined by the given object of the\n     * given Class.</p>\n     * \n     * @param lhs  the left hand object\n     * @param rhs  the right hand object\n     * @param clazz  the class to append details of\n     * @param builder  the builder to append to\n     * @param useTransients  whether to test transient fields\n     * @param excludeFields  array of field names to exclude from testing\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/EqualsBuilder.java",
        "class_name": "org.apache.commons.lang.builder.EqualsBuilder",
        "signature": "org.apache.commons.lang.builder.EqualsBuilder.appendSuper(boolean)",
        "snippet": "    public EqualsBuilder appendSuper(boolean superEquals) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = superEquals;\n        return this;\n    }",
        "begin_line": 350,
        "end_line": 356,
        "comment": "\n     * <p>Adds the result of <code>super.equals()</code> to this builder.</p>\n     *\n     * @param superEquals  the result of calling <code>super.equals()</code>\n     * @return EqualsBuilder - used to chain calls.\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/EqualsBuilder.java",
        "class_name": "org.apache.commons.lang.builder.EqualsBuilder",
        "signature": "org.apache.commons.lang.builder.EqualsBuilder.append(java.lang.Object, java.lang.Object)",
        "snippet": "    public EqualsBuilder append(Object lhs, Object rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        Class lhsClass = lhs.getClass();\n        if (!lhsClass.isArray()) {\n            // The simple case, not an array, just test the element\n            isEquals = lhs.equals(rhs);\n        } else if (lhs.getClass() != rhs.getClass()) {\n            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n            this.setEquals(false);\n        }\n        // 'Switch' on type of array, to dispatch to the correct handler\n        // This handles multi dimensional arrays of the same depth\n        else if (lhs instanceof long[]) {\n            append((long[]) lhs, (long[]) rhs);\n        } else if (lhs instanceof int[]) {\n            append((int[]) lhs, (int[]) rhs);\n        } else if (lhs instanceof short[]) {\n            append((short[]) lhs, (short[]) rhs);\n        } else if (lhs instanceof char[]) {\n            append((char[]) lhs, (char[]) rhs);\n        } else if (lhs instanceof byte[]) {\n            append((byte[]) lhs, (byte[]) rhs);\n        } else if (lhs instanceof double[]) {\n            append((double[]) lhs, (double[]) rhs);\n        } else if (lhs instanceof float[]) {\n            append((float[]) lhs, (float[]) rhs);\n        } else if (lhs instanceof boolean[]) {\n            append((boolean[]) lhs, (boolean[]) rhs);\n        } else {\n            // Not an array of primitives\n            append((Object[]) lhs, (Object[]) rhs);\n        }\n        return this;\n    }",
        "begin_line": 368,
        "end_line": 410,
        "comment": "\n     * <p>Test if two <code>Object</code>s are equal using their\n     * <code>equals</code> method.</p>\n     *\n     * @param lhs  the left hand object\n     * @param rhs  the right hand object\n     * @return EqualsBuilder - used to chain calls.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/EqualsBuilder.java",
        "class_name": "org.apache.commons.lang.builder.EqualsBuilder",
        "signature": "org.apache.commons.lang.builder.EqualsBuilder.append(long, long)",
        "snippet": "    public EqualsBuilder append(long lhs, long rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = (lhs == rhs);\n        return this;\n    }",
        "begin_line": 423,
        "end_line": 429,
        "comment": "\n     * <p>\n     * Test if two <code>long</code> s are equal.\n     * </p>\n     * \n     * @param lhs\n     *                  the left hand <code>long</code>\n     * @param rhs\n     *                  the right hand <code>long</code>\n     * @return EqualsBuilder - used to chain calls.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/EqualsBuilder.java",
        "class_name": "org.apache.commons.lang.builder.EqualsBuilder",
        "signature": "org.apache.commons.lang.builder.EqualsBuilder.append(int, int)",
        "snippet": "    public EqualsBuilder append(int lhs, int rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = (lhs == rhs);\n        return this;\n    }",
        "begin_line": 438,
        "end_line": 444,
        "comment": "\n     * <p>Test if two <code>int</code>s are equal.</p>\n     *\n     * @param lhs  the left hand <code>int</code>\n     * @param rhs  the right hand <code>int</code>\n     * @return EqualsBuilder - used to chain calls.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/EqualsBuilder.java",
        "class_name": "org.apache.commons.lang.builder.EqualsBuilder",
        "signature": "org.apache.commons.lang.builder.EqualsBuilder.append(short, short)",
        "snippet": "    public EqualsBuilder append(short lhs, short rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = (lhs == rhs);\n        return this;\n    }",
        "begin_line": 453,
        "end_line": 459,
        "comment": "\n     * <p>Test if two <code>short</code>s are equal.</p>\n     *\n     * @param lhs  the left hand <code>short</code>\n     * @param rhs  the right hand <code>short</code>\n     * @return EqualsBuilder - used to chain calls.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/EqualsBuilder.java",
        "class_name": "org.apache.commons.lang.builder.EqualsBuilder",
        "signature": "org.apache.commons.lang.builder.EqualsBuilder.append(char, char)",
        "snippet": "    public EqualsBuilder append(char lhs, char rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = (lhs == rhs);\n        return this;\n    }",
        "begin_line": 468,
        "end_line": 474,
        "comment": "\n     * <p>Test if two <code>char</code>s are equal.</p>\n     *\n     * @param lhs  the left hand <code>char</code>\n     * @param rhs  the right hand <code>char</code>\n     * @return EqualsBuilder - used to chain calls.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/EqualsBuilder.java",
        "class_name": "org.apache.commons.lang.builder.EqualsBuilder",
        "signature": "org.apache.commons.lang.builder.EqualsBuilder.append(byte, byte)",
        "snippet": "    public EqualsBuilder append(byte lhs, byte rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = (lhs == rhs);\n        return this;\n    }",
        "begin_line": 483,
        "end_line": 489,
        "comment": "\n     * <p>Test if two <code>byte</code>s are equal.</p>\n     *\n     * @param lhs  the left hand <code>byte</code>\n     * @param rhs  the right hand <code>byte</code>\n     * @return EqualsBuilder - used to chain calls.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/EqualsBuilder.java",
        "class_name": "org.apache.commons.lang.builder.EqualsBuilder",
        "signature": "org.apache.commons.lang.builder.EqualsBuilder.append(double, double)",
        "snippet": "    public EqualsBuilder append(double lhs, double rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        return append(Double.doubleToLongBits(lhs), Double.doubleToLongBits(rhs));\n    }",
        "begin_line": 504,
        "end_line": 509,
        "comment": "\n     * <p>Test if two <code>double</code>s are equal by testing that the\n     * pattern of bits returned by <code>doubleToLong</code> are equal.</p>\n     *\n     * <p>This handles NaNs, Infinities, and <code>-0.0</code>.</p>\n     *\n     * <p>It is compatible with the hash code generated by\n     * <code>HashCodeBuilder</code>.</p>\n     *\n     * @param lhs  the left hand <code>double</code>\n     * @param rhs  the right hand <code>double</code>\n     * @return EqualsBuilder - used to chain calls.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/EqualsBuilder.java",
        "class_name": "org.apache.commons.lang.builder.EqualsBuilder",
        "signature": "org.apache.commons.lang.builder.EqualsBuilder.append(float, float)",
        "snippet": "    public EqualsBuilder append(float lhs, float rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        return append(Float.floatToIntBits(lhs), Float.floatToIntBits(rhs));\n    }",
        "begin_line": 524,
        "end_line": 529,
        "comment": "\n     * <p>Test if two <code>float</code>s are equal byt testing that the\n     * pattern of bits returned by doubleToLong are equal.</p>\n     *\n     * <p>This handles NaNs, Infinities, and <code>-0.0</code>.</p>\n     *\n     * <p>It is compatible with the hash code generated by\n     * <code>HashCodeBuilder</code>.</p>\n     *\n     * @param lhs  the left hand <code>float</code>\n     * @param rhs  the right hand <code>float</code>\n     * @return EqualsBuilder - used to chain calls.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/EqualsBuilder.java",
        "class_name": "org.apache.commons.lang.builder.EqualsBuilder",
        "signature": "org.apache.commons.lang.builder.EqualsBuilder.append(boolean, boolean)",
        "snippet": "    public EqualsBuilder append(boolean lhs, boolean rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = (lhs == rhs);\n        return this;\n    }",
        "begin_line": 538,
        "end_line": 544,
        "comment": "\n     * <p>Test if two <code>booleans</code>s are equal.</p>\n     *\n     * @param lhs  the left hand <code>boolean</code>\n     * @param rhs  the right hand <code>boolean</code>\n     * @return EqualsBuilder - used to chain calls.\n      ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/EqualsBuilder.java",
        "class_name": "org.apache.commons.lang.builder.EqualsBuilder",
        "signature": "org.apache.commons.lang.builder.EqualsBuilder.append(java.lang.Object[], java.lang.Object[])",
        "snippet": "    public EqualsBuilder append(Object[] lhs, Object[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return this;\n        }\n        for (int i = 0; i < lhs.length && isEquals; ++i) {\n            append(lhs[i], rhs[i]);\n        }\n        return this;\n    }",
        "begin_line": 556,
        "end_line": 575,
        "comment": "\n     * <p>Performs a deep comparison of two <code>Object</code> arrays.</p>\n     *\n     * <p>This also will be called for the top level of\n     * multi-dimensional, ragged, and multi-typed arrays.</p>\n     *\n     * @param lhs  the left hand <code>Object[]</code>\n     * @param rhs  the right hand <code>Object[]</code>\n     * @return EqualsBuilder - used to chain calls.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/EqualsBuilder.java",
        "class_name": "org.apache.commons.lang.builder.EqualsBuilder",
        "signature": "org.apache.commons.lang.builder.EqualsBuilder.append(long[], long[])",
        "snippet": "    public EqualsBuilder append(long[] lhs, long[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return this;\n        }\n        for (int i = 0; i < lhs.length && isEquals; ++i) {\n            append(lhs[i], rhs[i]);\n        }\n        return this;\n    }",
        "begin_line": 587,
        "end_line": 606,
        "comment": "\n     * <p>Deep comparison of array of <code>long</code>. Length and all\n     * values are compared.</p>\n     *\n     * <p>The method {@link #append(long, long)} is used.</p>\n     *\n     * @param lhs  the left hand <code>long[]</code>\n     * @param rhs  the right hand <code>long[]</code>\n     * @return EqualsBuilder - used to chain calls.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/EqualsBuilder.java",
        "class_name": "org.apache.commons.lang.builder.EqualsBuilder",
        "signature": "org.apache.commons.lang.builder.EqualsBuilder.append(int[], int[])",
        "snippet": "    public EqualsBuilder append(int[] lhs, int[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return this;\n        }\n        for (int i = 0; i < lhs.length && isEquals; ++i) {\n            append(lhs[i], rhs[i]);\n        }\n        return this;\n    }",
        "begin_line": 618,
        "end_line": 637,
        "comment": "\n     * <p>Deep comparison of array of <code>int</code>. Length and all\n     * values are compared.</p>\n     *\n     * <p>The method {@link #append(int, int)} is used.</p>\n     *\n     * @param lhs  the left hand <code>int[]</code>\n     * @param rhs  the right hand <code>int[]</code>\n     * @return EqualsBuilder - used to chain calls.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/EqualsBuilder.java",
        "class_name": "org.apache.commons.lang.builder.EqualsBuilder",
        "signature": "org.apache.commons.lang.builder.EqualsBuilder.append(short[], short[])",
        "snippet": "    public EqualsBuilder append(short[] lhs, short[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return this;\n        }\n        for (int i = 0; i < lhs.length && isEquals; ++i) {\n            append(lhs[i], rhs[i]);\n        }\n        return this;\n    }",
        "begin_line": 649,
        "end_line": 668,
        "comment": "\n     * <p>Deep comparison of array of <code>short</code>. Length and all\n     * values are compared.</p>\n     *\n     * <p>The method {@link #append(short, short)} is used.</p>\n     *\n     * @param lhs  the left hand <code>short[]</code>\n     * @param rhs  the right hand <code>short[]</code>\n     * @return EqualsBuilder - used to chain calls.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/EqualsBuilder.java",
        "class_name": "org.apache.commons.lang.builder.EqualsBuilder",
        "signature": "org.apache.commons.lang.builder.EqualsBuilder.append(char[], char[])",
        "snippet": "    public EqualsBuilder append(char[] lhs, char[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return this;\n        }\n        for (int i = 0; i < lhs.length && isEquals; ++i) {\n            append(lhs[i], rhs[i]);\n        }\n        return this;\n    }",
        "begin_line": 680,
        "end_line": 699,
        "comment": "\n     * <p>Deep comparison of array of <code>char</code>. Length and all\n     * values are compared.</p>\n     *\n     * <p>The method {@link #append(char, char)} is used.</p>\n     *\n     * @param lhs  the left hand <code>char[]</code>\n     * @param rhs  the right hand <code>char[]</code>\n     * @return EqualsBuilder - used to chain calls.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/EqualsBuilder.java",
        "class_name": "org.apache.commons.lang.builder.EqualsBuilder",
        "signature": "org.apache.commons.lang.builder.EqualsBuilder.append(byte[], byte[])",
        "snippet": "    public EqualsBuilder append(byte[] lhs, byte[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return this;\n        }\n        for (int i = 0; i < lhs.length && isEquals; ++i) {\n            append(lhs[i], rhs[i]);\n        }\n        return this;\n    }",
        "begin_line": 711,
        "end_line": 730,
        "comment": "\n     * <p>Deep comparison of array of <code>byte</code>. Length and all\n     * values are compared.</p>\n     *\n     * <p>The method {@link #append(byte, byte)} is used.</p>\n     *\n     * @param lhs  the left hand <code>byte[]</code>\n     * @param rhs  the right hand <code>byte[]</code>\n     * @return EqualsBuilder - used to chain calls.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/EqualsBuilder.java",
        "class_name": "org.apache.commons.lang.builder.EqualsBuilder",
        "signature": "org.apache.commons.lang.builder.EqualsBuilder.append(double[], double[])",
        "snippet": "    public EqualsBuilder append(double[] lhs, double[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return this;\n        }\n        for (int i = 0; i < lhs.length && isEquals; ++i) {\n            append(lhs[i], rhs[i]);\n        }\n        return this;\n    }",
        "begin_line": 742,
        "end_line": 761,
        "comment": "\n     * <p>Deep comparison of array of <code>double</code>. Length and all\n     * values are compared.</p>\n     *\n     * <p>The method {@link #append(double, double)} is used.</p>\n     *\n     * @param lhs  the left hand <code>double[]</code>\n     * @param rhs  the right hand <code>double[]</code>\n     * @return EqualsBuilder - used to chain calls.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/EqualsBuilder.java",
        "class_name": "org.apache.commons.lang.builder.EqualsBuilder",
        "signature": "org.apache.commons.lang.builder.EqualsBuilder.append(float[], float[])",
        "snippet": "    public EqualsBuilder append(float[] lhs, float[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return this;\n        }\n        for (int i = 0; i < lhs.length && isEquals; ++i) {\n            append(lhs[i], rhs[i]);\n        }\n        return this;\n    }",
        "begin_line": 773,
        "end_line": 792,
        "comment": "\n     * <p>Deep comparison of array of <code>float</code>. Length and all\n     * values are compared.</p>\n     *\n     * <p>The method {@link #append(float, float)} is used.</p>\n     *\n     * @param lhs  the left hand <code>float[]</code>\n     * @param rhs  the right hand <code>float[]</code>\n     * @return EqualsBuilder - used to chain calls.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/EqualsBuilder.java",
        "class_name": "org.apache.commons.lang.builder.EqualsBuilder",
        "signature": "org.apache.commons.lang.builder.EqualsBuilder.append(boolean[], boolean[])",
        "snippet": "    public EqualsBuilder append(boolean[] lhs, boolean[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return this;\n        }\n        for (int i = 0; i < lhs.length && isEquals; ++i) {\n            append(lhs[i], rhs[i]);\n        }\n        return this;\n    }",
        "begin_line": 804,
        "end_line": 823,
        "comment": "\n     * <p>Deep comparison of array of <code>boolean</code>. Length and all\n     * values are compared.</p>\n     *\n     * <p>The method {@link #append(boolean, boolean)} is used.</p>\n     *\n     * @param lhs  the left hand <code>boolean[]</code>\n     * @param rhs  the right hand <code>boolean[]</code>\n     * @return EqualsBuilder - used to chain calls.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/EqualsBuilder.java",
        "class_name": "org.apache.commons.lang.builder.EqualsBuilder",
        "signature": "org.apache.commons.lang.builder.EqualsBuilder.isEquals()",
        "snippet": "    public boolean isEquals() {\n        return this.isEquals;\n    }",
        "begin_line": 831,
        "end_line": 833,
        "comment": "\n     * <p>Returns <code>true</code> if the fields that have been checked\n     * are all equal.</p>\n     *\n     * @return boolean\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/EqualsBuilder.java",
        "class_name": "org.apache.commons.lang.builder.EqualsBuilder",
        "signature": "org.apache.commons.lang.builder.EqualsBuilder.setEquals(boolean)",
        "snippet": "    protected void setEquals(boolean isEquals) {\n        this.isEquals = isEquals;\n    }",
        "begin_line": 841,
        "end_line": 843,
        "comment": "\n     * Sets the <code>isEquals</code> value.\n     * \n     * @param isEquals The value to set.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.getDefaultStyle()",
        "snippet": "    public static ToStringStyle getDefaultStyle() {\n        return defaultStyle;\n    }",
        "begin_line": 114,
        "end_line": 116,
        "comment": "\n     * <p>Gets the default <code>ToStringStyle</code> to use.</p>\n     *\n     * <p>This could allow the <code>ToStringStyle</code> to be\n     * controlled for an entire application with one call.</p>\n     *\n     * <p>This might be used to have a verbose\n     * <code>ToStringStyle</code> during development and a compact\n     * <code>ToStringStyle</code> in production.</p>\n     * \n     * @return the default <code>ToStringStyle</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.reflectionToString(java.lang.Object)",
        "snippet": "    public static String reflectionToString(Object object) {\n        return ReflectionToStringBuilder.toString(object);\n    }",
        "begin_line": 123,
        "end_line": 125,
        "comment": "\n     * <p>Forwards to <code>ReflectionToStringBuilder</code>.</p>\n     * \n     * @see ReflectionToStringBuilder#toString(Object)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.reflectionToString(java.lang.Object, org.apache.commons.lang.builder.ToStringStyle)",
        "snippet": "    public static String reflectionToString(Object object, ToStringStyle style) {\n        return ReflectionToStringBuilder.toString(object, style);\n    }",
        "begin_line": 132,
        "end_line": 134,
        "comment": "\n     * <p>Forwards to <code>ReflectionToStringBuilder</code>.</p>\n     * \n     * @see ReflectionToStringBuilder#toString(Object,ToStringStyle)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.reflectionToString(java.lang.Object, org.apache.commons.lang.builder.ToStringStyle, boolean)",
        "snippet": "    public static String reflectionToString(Object object, ToStringStyle style, boolean outputTransients) {\n        return ReflectionToStringBuilder.toString(object, style, outputTransients, false, null);\n    }",
        "begin_line": 141,
        "end_line": 143,
        "comment": "\n     * <p>Forwards to <code>ReflectionToStringBuilder</code>.</p>\n     * \n     * @see ReflectionToStringBuilder#toString(Object,ToStringStyle,boolean)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.reflectionToString(java.lang.Object, org.apache.commons.lang.builder.ToStringStyle, boolean, java.lang.Class)",
        "snippet": "    public static String reflectionToString(\n        Object object,\n        ToStringStyle style,\n        boolean outputTransients,\n        Class reflectUpToClass) {\n        return ReflectionToStringBuilder.toString(object, style, outputTransients, false, reflectUpToClass);\n    }",
        "begin_line": 151,
        "end_line": 157,
        "comment": "\n     * <p>Forwards to <code>ReflectionToStringBuilder</code>.</p>\n     * \n     * @see ReflectionToStringBuilder#toString(Object,ToStringStyle,boolean,boolean,Class)\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.setDefaultStyle(org.apache.commons.lang.builder.ToStringStyle)",
        "snippet": "    public static void setDefaultStyle(ToStringStyle style) {\n        if (style == null) {\n            throw new IllegalArgumentException(\"The style must not be null\");\n        }\n        defaultStyle = style;\n    }",
        "begin_line": 165,
        "end_line": 170,
        "comment": "\n     * <p>Sets the default <code>ToStringStyle</code> to use.</p>\n     * \n     * @param style  the default <code>ToStringStyle</code>\n     * @throws IllegalArgumentException if the style is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.ToStringBuilder(java.lang.Object)",
        "snippet": "    public ToStringBuilder(Object object) {\n        this(object, getDefaultStyle(), null);\n    }",
        "begin_line": 197,
        "end_line": 199,
        "comment": "\n     * <p>Constructor for <code>ToStringBuilder</code>.</p>\n     *\n     * <p>This constructor outputs using the default style set with\n     * <code>setDefaultStyle</code>.</p>\n     * \n     * @param object  the Object to build a <code>toString</code> for\n     * @throws IllegalArgumentException  if the Object passed in is\n     *  <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.ToStringBuilder(java.lang.Object, org.apache.commons.lang.builder.ToStringStyle)",
        "snippet": "    public ToStringBuilder(Object object, ToStringStyle style) {\n        this(object, style, null);\n    }",
        "begin_line": 213,
        "end_line": 215,
        "comment": "\n     * <p>Constructor for <code>ToStringBuilder</code> specifying the\n     * output style.</p>\n     *\n     * <p>If the style is <code>null</code>, the default style is used.</p>\n     * \n     * @param object  the Object to build a <code>toString</code> for\n     * @param style  the style of the <code>toString</code> to create,\n     *  may be <code>null</code>\n     * @throws IllegalArgumentException  if the Object passed in is\n     *  <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.ToStringBuilder(java.lang.Object, org.apache.commons.lang.builder.ToStringStyle, java.lang.StringBuffer)",
        "snippet": "    public ToStringBuilder(Object object, ToStringStyle style, StringBuffer buffer) {\n        if (style == null) {\n            style = getDefaultStyle();\n        }\n        if (buffer == null) {\n            buffer = new StringBuffer(512);\n        }\n        this.buffer = buffer;\n        this.style = style;\n        this.object = object;\n\n        style.appendStart(buffer, object);\n    }",
        "begin_line": 230,
        "end_line": 242,
        "comment": "\n     * <p>Constructor for <code>ToStringBuilder</code>.</p>\n     *\n     * <p>If the style is <code>null</code>, the default style is used.</p>\n     *\n     * <p>If the buffer is <code>null</code>, a new one is created.</p>\n     * \n     * @param object  the Object to build a <code>toString</code> for\n     * @param style  the style of the <code>toString</code> to create,\n     *  may be <code>null</code>\n     * @param buffer  the <code>StringBuffer</code> to populate, may be\n     *  <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(boolean)",
        "snippet": "    public ToStringBuilder append(boolean value) {\n        style.append(buffer, null, value);\n        return this;\n    }",
        "begin_line": 253,
        "end_line": 256,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>boolean</code>\n     * value.</p>\n     *\n     * @param value  the value to add to the <code>toString</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(boolean[])",
        "snippet": "    public ToStringBuilder append(boolean[] array) {\n        style.append(buffer, null, array, null);\n        return this;\n    }",
        "begin_line": 267,
        "end_line": 270,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>boolean</code>\n     * array.</p>\n     *\n     * @param array  the array to add to the <code>toString</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(byte)",
        "snippet": "    public ToStringBuilder append(byte value) {\n        style.append(buffer, null, value);\n        return this;\n    }",
        "begin_line": 281,
        "end_line": 284,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>byte</code>\n     * value.</p>\n     *\n     * @param value  the value to add to the <code>toString</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(byte[])",
        "snippet": "    public ToStringBuilder append(byte[] array) {\n        style.append(buffer, null, array, null);\n        return this;\n    }",
        "begin_line": 295,
        "end_line": 298,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>byte</code>\n     * array.</p>\n     *\n     * @param array  the array to add to the <code>toString</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(char)",
        "snippet": "    public ToStringBuilder append(char value) {\n        style.append(buffer, null, value);\n        return this;\n    }",
        "begin_line": 309,
        "end_line": 312,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>char</code>\n     * value.</p>\n     *\n     * @param value  the value to add to the <code>toString</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(char[])",
        "snippet": "    public ToStringBuilder append(char[] array) {\n        style.append(buffer, null, array, null);\n        return this;\n    }",
        "begin_line": 323,
        "end_line": 326,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>char</code>\n     * array.</p>\n     *\n     * @param array  the array to add to the <code>toString</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(double)",
        "snippet": "    public ToStringBuilder append(double value) {\n        style.append(buffer, null, value);\n        return this;\n    }",
        "begin_line": 337,
        "end_line": 340,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>double</code>\n     * value.</p>\n     *\n     * @param value  the value to add to the <code>toString</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(double[])",
        "snippet": "    public ToStringBuilder append(double[] array) {\n        style.append(buffer, null, array, null);\n        return this;\n    }",
        "begin_line": 351,
        "end_line": 354,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>double</code>\n     * array.</p>\n     *\n     * @param array  the array to add to the <code>toString</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(float)",
        "snippet": "    public ToStringBuilder append(float value) {\n        style.append(buffer, null, value);\n        return this;\n    }",
        "begin_line": 365,
        "end_line": 368,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>float</code>\n     * value.</p>\n     *\n     * @param value  the value to add to the <code>toString</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(float[])",
        "snippet": "    public ToStringBuilder append(float[] array) {\n        style.append(buffer, null, array, null);\n        return this;\n    }",
        "begin_line": 379,
        "end_line": 382,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>float</code>\n     * array.</p>\n     *\n     * @param array  the array to add to the <code>toString</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(int)",
        "snippet": "    public ToStringBuilder append(int value) {\n        style.append(buffer, null, value);\n        return this;\n    }",
        "begin_line": 393,
        "end_line": 396,
        "comment": "\n     * <p>Append to the <code>toString</code> an <code>int</code>\n     * value.</p>\n     *\n     * @param value  the value to add to the <code>toString</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(int[])",
        "snippet": "    public ToStringBuilder append(int[] array) {\n        style.append(buffer, null, array, null);\n        return this;\n    }",
        "begin_line": 407,
        "end_line": 410,
        "comment": "\n     * <p>Append to the <code>toString</code> an <code>int</code>\n     * array.</p>\n     *\n     * @param array  the array to add to the <code>toString</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(long)",
        "snippet": "    public ToStringBuilder append(long value) {\n        style.append(buffer, null, value);\n        return this;\n    }",
        "begin_line": 421,
        "end_line": 424,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>long</code>\n     * value.</p>\n     *\n     * @param value  the value to add to the <code>toString</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(long[])",
        "snippet": "    public ToStringBuilder append(long[] array) {\n        style.append(buffer, null, array, null);\n        return this;\n    }",
        "begin_line": 435,
        "end_line": 438,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>long</code>\n     * array.</p>\n     *\n     * @param array  the array to add to the <code>toString</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(java.lang.Object)",
        "snippet": "    public ToStringBuilder append(Object obj) {\n        style.append(buffer, null, obj, null);\n        return this;\n    }",
        "begin_line": 449,
        "end_line": 452,
        "comment": "\n     * <p>Append to the <code>toString</code> an <code>Object</code>\n     * value.</p>\n     *\n     * @param obj  the value to add to the <code>toString</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(java.lang.Object[])",
        "snippet": "    public ToStringBuilder append(Object[] array) {\n        style.append(buffer, null, array, null);\n        return this;\n    }",
        "begin_line": 463,
        "end_line": 466,
        "comment": "\n     * <p>Append to the <code>toString</code> an <code>Object</code>\n     * array.</p>\n     *\n     * @param array  the array to add to the <code>toString</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(short)",
        "snippet": "    public ToStringBuilder append(short value) {\n        style.append(buffer, null, value);\n        return this;\n    }",
        "begin_line": 477,
        "end_line": 480,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>short</code>\n     * value.</p>\n     *\n     * @param value  the value to add to the <code>toString</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(short[])",
        "snippet": "    public ToStringBuilder append(short[] array) {\n        style.append(buffer, null, array, null);\n        return this;\n    }",
        "begin_line": 491,
        "end_line": 494,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>short</code>\n     * array.</p>\n     *\n     * @param array  the array to add to the <code>toString</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(java.lang.String, boolean)",
        "snippet": "    public ToStringBuilder append(String fieldName, boolean value) {\n        style.append(buffer, fieldName, value);\n        return this;\n    }",
        "begin_line": 504,
        "end_line": 507,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>boolean</code>\n     * value.</p>\n     *\n     * @param fieldName  the field name\n     * @param value  the value to add to the <code>toString</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(java.lang.String, boolean[])",
        "snippet": "    public ToStringBuilder append(String fieldName, boolean[] array) {\n        style.append(buffer, fieldName, array, null);\n        return this;\n    }",
        "begin_line": 517,
        "end_line": 520,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>boolean</code>\n     * array.</p>\n     *\n     * @param fieldName  the field name\n     * @param array  the array to add to the <code>hashCode</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(java.lang.String, boolean[], boolean)",
        "snippet": "    public ToStringBuilder append(String fieldName, boolean[] array, boolean fullDetail) {\n        style.append(buffer, fieldName, array, BooleanUtils.toBooleanObject(fullDetail));\n        return this;\n    }",
        "begin_line": 537,
        "end_line": 540,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>boolean</code>\n     * array.</p>\n     *\n     * <p>A boolean parameter controls the level of detail to show.\n     * Setting <code>true</code> will output the array in full. Setting\n     * <code>false</code> will output a summary, typically the size of\n     * the array.</p>\n     *\n     * @param fieldName  the field name\n     * @param array  the array to add to the <code>toString</code>\n     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n     *  for summary info\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(java.lang.String, byte)",
        "snippet": "    public ToStringBuilder append(String fieldName, byte value) {\n        style.append(buffer, fieldName, value);\n        return this;\n    }",
        "begin_line": 550,
        "end_line": 553,
        "comment": "\n     * <p>Append to the <code>toString</code> an <code>byte</code>\n     * value.</p>\n     *\n     * @param fieldName  the field name\n     * @param value  the value to add to the <code>toString</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(java.lang.String, byte[])",
        "snippet": "    public ToStringBuilder append(String fieldName, byte[] array) {\n        style.append(buffer, fieldName, array, null);\n        return this;\n    }",
        "begin_line": 562,
        "end_line": 565,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>byte</code> array.</p>\n     *\n     * @param fieldName  the field name\n     * @param array  the array to add to the <code>toString</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(java.lang.String, byte[], boolean)",
        "snippet": "    public ToStringBuilder append(String fieldName, byte[] array, boolean fullDetail) {\n        style.append(buffer, fieldName, array, BooleanUtils.toBooleanObject(fullDetail));\n        return this;\n    }",
        "begin_line": 582,
        "end_line": 585,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>byte</code>\n     * array.</p>\n     *\n     * <p>A boolean parameter controls the level of detail to show.\n     * Setting <code>true</code> will output the array in full. Setting\n     * <code>false</code> will output a summary, typically the size of\n     * the array.\n     *\n     * @param fieldName  the field name\n     * @param array  the array to add to the <code>toString</code>\n     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n     *  for summary info\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(java.lang.String, char)",
        "snippet": "    public ToStringBuilder append(String fieldName, char value) {\n        style.append(buffer, fieldName, value);\n        return this;\n    }",
        "begin_line": 595,
        "end_line": 598,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>char</code>\n     * value.</p>\n     *\n     * @param fieldName  the field name\n     * @param value  the value to add to the <code>toString</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(java.lang.String, char[])",
        "snippet": "    public ToStringBuilder append(String fieldName, char[] array) {\n        style.append(buffer, fieldName, array, null);\n        return this;\n    }",
        "begin_line": 608,
        "end_line": 611,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>char</code>\n     * array.</p>\n     *\n     * @param fieldName  the field name\n     * @param array  the array to add to the <code>toString</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(java.lang.String, char[], boolean)",
        "snippet": "    public ToStringBuilder append(String fieldName, char[] array, boolean fullDetail) {\n        style.append(buffer, fieldName, array, BooleanUtils.toBooleanObject(fullDetail));\n        return this;\n    }",
        "begin_line": 628,
        "end_line": 631,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>char</code>\n     * array.</p>\n     *\n     * <p>A boolean parameter controls the level of detail to show.\n     * Setting <code>true</code> will output the array in full. Setting\n     * <code>false</code> will output a summary, typically the size of\n     * the array.</p>\n     *\n     * @param fieldName  the field name\n     * @param array  the array to add to the <code>toString</code>\n     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n     *  for summary info\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(java.lang.String, double)",
        "snippet": "    public ToStringBuilder append(String fieldName, double value) {\n        style.append(buffer, fieldName, value);\n        return this;\n    }",
        "begin_line": 641,
        "end_line": 644,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>double</code>\n     * value.</p>\n     *\n     * @param fieldName  the field name\n     * @param value  the value to add to the <code>toString</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(java.lang.String, double[])",
        "snippet": "    public ToStringBuilder append(String fieldName, double[] array) {\n        style.append(buffer, fieldName, array, null);\n        return this;\n    }",
        "begin_line": 654,
        "end_line": 657,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>double</code>\n     * array.</p>\n     *\n     * @param fieldName  the field name\n     * @param array  the array to add to the <code>toString</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(java.lang.String, double[], boolean)",
        "snippet": "    public ToStringBuilder append(String fieldName, double[] array, boolean fullDetail) {\n        style.append(buffer, fieldName, array, BooleanUtils.toBooleanObject(fullDetail));\n        return this;\n    }",
        "begin_line": 674,
        "end_line": 677,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>double</code>\n     * array.</p>\n     *\n     * <p>A boolean parameter controls the level of detail to show.\n     * Setting <code>true</code> will output the array in full. Setting\n     * <code>false</code> will output a summary, typically the size of\n     * the array.</p>\n     *\n     * @param fieldName  the field name\n     * @param array  the array to add to the <code>toString</code>\n     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n     *  for summary info\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(java.lang.String, float)",
        "snippet": "    public ToStringBuilder append(String fieldName, float value) {\n        style.append(buffer, fieldName, value);\n        return this;\n    }",
        "begin_line": 687,
        "end_line": 690,
        "comment": "\n     * <p>Append to the <code>toString</code> an <code>float</code>\n     * value.</p>\n     *\n     * @param fieldName  the field name\n     * @param value  the value to add to the <code>toString</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(java.lang.String, float[])",
        "snippet": "    public ToStringBuilder append(String fieldName, float[] array) {\n        style.append(buffer, fieldName, array, null);\n        return this;\n    }",
        "begin_line": 700,
        "end_line": 703,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>float</code>\n     * array.</p>\n     *\n     * @param fieldName  the field name\n     * @param array  the array to add to the <code>toString</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(java.lang.String, float[], boolean)",
        "snippet": "    public ToStringBuilder append(String fieldName, float[] array, boolean fullDetail) {\n        style.append(buffer, fieldName, array, BooleanUtils.toBooleanObject(fullDetail));\n        return this;\n    }",
        "begin_line": 720,
        "end_line": 723,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>float</code>\n     * array.</p>\n     *\n     * <p>A boolean parameter controls the level of detail to show.\n     * Setting <code>true</code> will output the array in full. Setting\n     * <code>false</code> will output a summary, typically the size of\n     * the array.</p>\n     *\n     * @param fieldName  the field name\n     * @param array  the array to add to the <code>toString</code>\n     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n     *  for summary info\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(java.lang.String, int)",
        "snippet": "    public ToStringBuilder append(String fieldName, int value) {\n        style.append(buffer, fieldName, value);\n        return this;\n    }",
        "begin_line": 733,
        "end_line": 736,
        "comment": "\n     * <p>Append to the <code>toString</code> an <code>int</code>\n     * value.</p>\n     *\n     * @param fieldName  the field name\n     * @param value  the value to add to the <code>toString</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(java.lang.String, int[])",
        "snippet": "    public ToStringBuilder append(String fieldName, int[] array) {\n        style.append(buffer, fieldName, array, null);\n        return this;\n    }",
        "begin_line": 746,
        "end_line": 749,
        "comment": "\n     * <p>Append to the <code>toString</code> an <code>int</code>\n     * array.</p>\n     *\n     * @param fieldName  the field name\n     * @param array  the array to add to the <code>toString</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(java.lang.String, int[], boolean)",
        "snippet": "    public ToStringBuilder append(String fieldName, int[] array, boolean fullDetail) {\n        style.append(buffer, fieldName, array, BooleanUtils.toBooleanObject(fullDetail));\n        return this;\n    }",
        "begin_line": 766,
        "end_line": 769,
        "comment": "\n     * <p>Append to the <code>toString</code> an <code>int</code>\n     * array.</p>\n     *\n     * <p>A boolean parameter controls the level of detail to show.\n     * Setting <code>true</code> will output the array in full. Setting\n     * <code>false</code> will output a summary, typically the size of\n     * the array.</p>\n     *\n     * @param fieldName  the field name\n     * @param array  the array to add to the <code>toString</code>\n     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n     *  for summary info\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(java.lang.String, long)",
        "snippet": "    public ToStringBuilder append(String fieldName, long value) {\n        style.append(buffer, fieldName, value);\n        return this;\n    }",
        "begin_line": 779,
        "end_line": 782,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>long</code>\n     * value.</p>\n     *\n     * @param fieldName  the field name\n     * @param value  the value to add to the <code>toString</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(java.lang.String, long[])",
        "snippet": "    public ToStringBuilder append(String fieldName, long[] array) {\n        style.append(buffer, fieldName, array, null);\n        return this;\n    }",
        "begin_line": 792,
        "end_line": 795,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>long</code>\n     * array.</p>\n     *\n     * @param fieldName  the field name\n     * @param array  the array to add to the <code>toString</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(java.lang.String, long[], boolean)",
        "snippet": "    public ToStringBuilder append(String fieldName, long[] array, boolean fullDetail) {\n        style.append(buffer, fieldName, array, BooleanUtils.toBooleanObject(fullDetail));\n        return this;\n    }",
        "begin_line": 812,
        "end_line": 815,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>long</code>\n     * array.</p>\n     *\n     * <p>A boolean parameter controls the level of detail to show.\n     * Setting <code>true</code> will output the array in full. Setting\n     * <code>false</code> will output a summary, typically the size of\n     * the array.</p>\n     *\n     * @param fieldName  the field name\n     * @param array  the array to add to the <code>toString</code>\n     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n     *  for summary info\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(java.lang.String, java.lang.Object)",
        "snippet": "    public ToStringBuilder append(String fieldName, Object obj) {\n        style.append(buffer, fieldName, obj, null);\n        return this;\n    }",
        "begin_line": 825,
        "end_line": 828,
        "comment": "\n     * <p>Append to the <code>toString</code> an <code>Object</code>\n     * value.</p>\n     *\n     * @param fieldName  the field name\n     * @param obj  the value to add to the <code>toString</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(java.lang.String, java.lang.Object, boolean)",
        "snippet": "    public ToStringBuilder append(String fieldName, Object obj, boolean fullDetail) {\n        style.append(buffer, fieldName, obj, BooleanUtils.toBooleanObject(fullDetail));\n        return this;\n    }",
        "begin_line": 840,
        "end_line": 843,
        "comment": "\n     * <p>Append to the <code>toString</code> an <code>Object</code>\n     * value.</p>\n     *\n     * @param fieldName  the field name\n     * @param obj  the value to add to the <code>toString</code>\n     * @param fullDetail  <code>true</code> for detail,\n     *  <code>false</code> for summary info\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(java.lang.String, java.lang.Object[])",
        "snippet": "    public ToStringBuilder append(String fieldName, Object[] array) {\n        style.append(buffer, fieldName, array, null);\n        return this;\n    }",
        "begin_line": 853,
        "end_line": 856,
        "comment": "\n     * <p>Append to the <code>toString</code> an <code>Object</code>\n     * array.</p>\n     *\n     * @param fieldName  the field name\n     * @param array  the array to add to the <code>toString</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(java.lang.String, java.lang.Object[], boolean)",
        "snippet": "    public ToStringBuilder append(String fieldName, Object[] array, boolean fullDetail) {\n        style.append(buffer, fieldName, array, BooleanUtils.toBooleanObject(fullDetail));\n        return this;\n    }",
        "begin_line": 873,
        "end_line": 876,
        "comment": "\n     * <p>Append to the <code>toString</code> an <code>Object</code>\n     * array.</p>\n     *\n     * <p>A boolean parameter controls the level of detail to show.\n     * Setting <code>true</code> will output the array in full. Setting\n     * <code>false</code> will output a summary, typically the size of\n     * the array.</p>\n     *\n     * @param fieldName  the field name\n     * @param array  the array to add to the <code>toString</code>\n     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n     *  for summary info\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(java.lang.String, short)",
        "snippet": "    public ToStringBuilder append(String fieldName, short value) {\n        style.append(buffer, fieldName, value);\n        return this;\n    }",
        "begin_line": 886,
        "end_line": 889,
        "comment": "\n     * <p>Append to the <code>toString</code> an <code>short</code>\n     * value.</p>\n     *\n     * @param fieldName  the field name\n     * @param value  the value to add to the <code>toString</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(java.lang.String, short[])",
        "snippet": "    public ToStringBuilder append(String fieldName, short[] array) {\n        style.append(buffer, fieldName, array, null);\n        return this;\n    }",
        "begin_line": 899,
        "end_line": 902,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>short</code>\n     * array.</p>\n     *\n     * @param fieldName  the field name\n     * @param array  the array to add to the <code>toString</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.append(java.lang.String, short[], boolean)",
        "snippet": "    public ToStringBuilder append(String fieldName, short[] array, boolean fullDetail) {\n        style.append(buffer, fieldName, array, BooleanUtils.toBooleanObject(fullDetail));\n        return this;\n    }",
        "begin_line": 919,
        "end_line": 922,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>short</code>\n     * array.</p>\n     *\n     * <p>A boolean parameter controls the level of detail to show.\n     * Setting <code>true</code> will output the array in full. Setting\n     * <code>false</code> will output a summary, typically the size of\n     * the array.\n     *\n     * @param fieldName  the field name\n     * @param array  the array to add to the <code>toString</code>\n     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n     *  for summary info\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.appendAsObjectToString(java.lang.Object)",
        "snippet": "    public ToStringBuilder appendAsObjectToString(Object object) {\n        ObjectUtils.appendIdentityToString(this.getStringBuffer(), object);\n        return this;\n    }",
        "begin_line": 933,
        "end_line": 936,
        "comment": "\n     * <p>Appends with the same format as the default <code>Object toString()\n     * </code> method. Appends the class name followed by \n     * {@link System#identityHashCode(java.lang.Object)}.</p>\n     * \n     * @param object  the <code>Object</code> whose class name and id to output\n     * @return this\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.appendSuper(java.lang.String)",
        "snippet": "    public ToStringBuilder appendSuper(String superToString) {\n        if (superToString != null) {\n            style.appendSuper(buffer, superToString);\n        }\n        return this;\n    }",
        "begin_line": 952,
        "end_line": 957,
        "comment": "\n     * <p>Append the <code>toString</code> from the superclass.</p>\n     * \n     * <p>This method assumes that the superclass uses the same <code>ToStringStyle</code>\n     * as this one.</p>\n     * \n     * <p>If <code>superToString</code> is <code>null</code>, no change is made.</p>\n     *\n     * @param superToString  the result of <code>super.toString()</code>\n     * @return this\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.appendToString(java.lang.String)",
        "snippet": "    public ToStringBuilder appendToString(String toString) {\n        if (toString != null) {\n            style.appendToString(buffer, toString);\n        }\n        return this;\n    }",
        "begin_line": 986,
        "end_line": 991,
        "comment": "\n     * <p>Append the <code>toString</code> from another object.</p>\n     * \n     * <p>This method is useful where a class delegates most of the implementation of\n     * its properties to another class. You can then call <code>toString()</code> on\n     * the other class and pass the result into this method.</p>\n     * \n     * <pre>\n     *   private AnotherObject delegate;\n     *   private String fieldInThisClass;\n     * \n     *   public String toString() {\n     *     return new ToStringBuilder(this).\n     *       appendToString(delegate.toString()).\n     *       append(fieldInThisClass).\n     *       toString();\n     *   }</pre>\n     * \n     * <p>This method assumes that the other object uses the same <code>ToStringStyle</code>\n     * as this one.</p>\n     * \n     * <p>If the <code>toString</code> is <code>null</code>, no change is made.</p>\n     *\n     * @param toString  the result of <code>toString()</code> on another object\n     * @return this\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.getObject()",
        "snippet": "    public Object getObject() {\n        return object;\n    }",
        "begin_line": 999,
        "end_line": 1001,
        "comment": "\n     * <p>Returns the <code>Object</code> being output.</p>\n     * \n     * @return The object being output.\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.getStringBuffer()",
        "snippet": "    public StringBuffer getStringBuffer() {\n        return buffer;\n    }",
        "begin_line": 1008,
        "end_line": 1010,
        "comment": "\n     * <p>Gets the <code>StringBuffer</code> being populated.</p>\n     * \n     * @return the <code>StringBuffer</code> being populated\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.getStyle()",
        "snippet": "    public ToStringStyle getStyle() {\n        return style;\n    }",
        "begin_line": 1020,
        "end_line": 1022,
        "comment": "\n     * <p>Gets the <code>ToStringStyle</code> being used.</p>\n     * \n     * @return the <code>ToStringStyle</code> being used\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang.builder.ToStringBuilder.toString()",
        "snippet": "    public String toString() {\n        if (this.getObject() == null) {\n            this.getStringBuffer().append(this.getStyle().getNullText());\n        } else {\n            style.appendEnd(this.getStringBuffer(), this.getObject());\n        }\n        return this.getStringBuffer().toString();\n    }",
        "begin_line": 1034,
        "end_line": 1041,
        "comment": "\n     * <p>Returns the built <code>toString</code>.</p>\n     * \n     * <p>This method appends the end of data indicator, and can only be called once.\n     * Use {@link #getStringBuffer} to get the current string state.</p>\n     * \n     * <p>If the object is <code>null</code>, return the style's <code>nullText</code></p>\n     * \n     * @return the String <code>toString</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilder.Anonymous-3feb915f-d9c9-4294-8abb-39c8210d3f42.initialValue()",
        "snippet": "        protected synchronized Object initialValue() {\n            // The HashSet implementation is not synchronized,\n            // which is just what we need here.\n            return new HashSet();\n        }",
        "begin_line": 106,
        "end_line": 110,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilder.getRegistry()",
        "snippet": "    static Set getRegistry() {\n        return (Set) registry.get();\n    }",
        "begin_line": 121,
        "end_line": 123,
        "comment": "\n     * <p>\n     * Returns the registry of objects being traversed by the reflection methods in the current thread.\n     * </p>\n     * \n     * @return Set the registry of objects being traversed\n     * @since 2.3\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilder.isRegistered(java.lang.Object)",
        "snippet": "    static boolean isRegistered(Object value) {\n        return getRegistry().contains(toIdentityHashCodeInteger(value));\n    }",
        "begin_line": 136,
        "end_line": 138,
        "comment": "\n     * <p>\n     * Returns <code>true</code> if the registry contains the given object. Used by the reflection methods to avoid\n     * infinite loops.\n     * </p>\n     * \n     * @param value\n     *            The object to lookup in the registry.\n     * @return boolean <code>true</code> if the registry contains the given object.\n     * @since 2.3\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(java.lang.Object, java.lang.Class, org.apache.commons.lang.builder.HashCodeBuilder, boolean, java.lang.String[])",
        "snippet": "    private static void reflectionAppend(Object object, Class clazz, HashCodeBuilder builder, boolean useTransients,\n            String[] excludeFields) {\n        if (isRegistered(object)) {\n            return;\n        }\n        try {\n            register(object);\n            Field[] fields = clazz.getDeclaredFields();\n            List excludedFieldList = excludeFields != null ? Arrays.asList(excludeFields) : Collections.EMPTY_LIST;\n            AccessibleObject.setAccessible(fields, true);\n            for (int i = 0; i < fields.length; i++) {\n                Field field = fields[i];\n                if (!excludedFieldList.contains(field.getName())\n                    && (field.getName().indexOf('$') == -1)\n                    && (useTransients || !Modifier.isTransient(field.getModifiers()))\n                    && (!Modifier.isStatic(field.getModifiers()))) {\n                    try {\n                        Object fieldValue = field.get(object);\n                        builder.append(fieldValue);\n                    } catch (IllegalAccessException e) {\n                        // this can't happen. Would get a Security exception instead\n                        // throw a runtime exception in case the impossible happens.\n                        throw new InternalError(\"Unexpected IllegalAccessException\");\n                    }\n                }\n            }\n        } finally {\n            unregister(object);\n        }\n    }",
        "begin_line": 156,
        "end_line": 185,
        "comment": "\n     * <p>\n     * Appends the fields and values defined by the given object of the given <code>Class</code>.\n     * </p>\n     * \n     * @param object\n     *            the object to append details of\n     * @param clazz\n     *            the class to append details of\n     * @param builder\n     *            the builder to append to\n     * @param useTransients\n     *            whether to use transient fields\n     * @param excludeFields\n     *            Collection of String field names to exclude from use in calculation of hash code\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(int, int, java.lang.Object)",
        "snippet": "    public static int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, Object object) {\n        return reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, false, null, null);\n    }",
        "begin_line": 224,
        "end_line": 226,
        "comment": "\n     * <p>\n     * This method uses reflection to build a valid hash code.\n     * </p>\n     * \n     * <p>\n     * It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will\n     * throw a security exception if run under a security manager, if the permissions are not set up correctly. It is\n     * also not as efficient as testing explicitly.\n     * </p>\n     * \n     * <p>\n     * Transient members will be not be used, as they are likely derived fields, and not part of the value of the\n     * <code>Object</code>.\n     * </p>\n     * \n     * <p>\n     * Static fields will not be tested. Superclass fields will be included.\n     * </p>\n     * \n     * <p>\n     * Two randomly chosen, non-zero, odd numbers must be passed in. Ideally these should be different for each class,\n     * however this is not vital. Prime numbers are preferred, especially for the multiplier.\n     * </p>\n     * \n     * @param initialNonZeroOddNumber\n     *            a non-zero, odd number used as the initial value\n     * @param multiplierNonZeroOddNumber\n     *            a non-zero, odd number used as the multiplier\n     * @param object\n     *            the Object to create a <code>hashCode</code> for\n     * @return int hash code\n     * @throws IllegalArgumentException\n     *             if the Object is <code>null</code>\n     * @throws IllegalArgumentException\n     *             if the number is zero or even\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(int, int, java.lang.Object, boolean)",
        "snippet": "    public static int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, Object object,\n            boolean testTransients) {\n        return reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, testTransients, null,\n                null);\n    }",
        "begin_line": 267,
        "end_line": 271,
        "comment": "\n     * <p>\n     * This method uses reflection to build a valid hash code.\n     * </p>\n     * \n     * <p>\n     * It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will\n     * throw a security exception if run under a security manager, if the permissions are not set up correctly. It is\n     * also not as efficient as testing explicitly.\n     * </p>\n     * \n     * <p>\n     * If the TestTransients parameter is set to <code>true</code>, transient members will be tested, otherwise they\n     * are ignored, as they are likely derived fields, and not part of the value of the <code>Object</code>.\n     * </p>\n     * \n     * <p>\n     * Static fields will not be tested. Superclass fields will be included.\n     * </p>\n     * \n     * <p>\n     * Two randomly chosen, non-zero, odd numbers must be passed in. Ideally these should be different for each class,\n     * however this is not vital. Prime numbers are preferred, especially for the multiplier.\n     * </p>\n     * \n     * @param initialNonZeroOddNumber\n     *            a non-zero, odd number used as the initial value\n     * @param multiplierNonZeroOddNumber\n     *            a non-zero, odd number used as the multiplier\n     * @param object\n     *            the Object to create a <code>hashCode</code> for\n     * @param testTransients\n     *            whether to include transient fields\n     * @return int hash code\n     * @throws IllegalArgumentException\n     *             if the Object is <code>null</code>\n     * @throws IllegalArgumentException\n     *             if the number is zero or even\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(int, int, java.lang.Object, boolean, java.lang.Class)",
        "snippet": "    public static int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, Object object,\n            boolean testTransients, Class reflectUpToClass) {\n        return reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, testTransients,\n                reflectUpToClass, null);\n    }",
        "begin_line": 289,
        "end_line": 293,
        "comment": "\n     * Calls {@link #reflectionHashCode(int, int, Object, boolean, Class, String[])} with excludeFields set to\n     * <code>null</code>.\n     * \n     * @param initialNonZeroOddNumber\n     *            a non-zero, odd number used as the initial value\n     * @param multiplierNonZeroOddNumber\n     *            a non-zero, odd number used as the multiplier\n     * @param object\n     *            the Object to create a <code>hashCode</code> for\n     * @param testTransients\n     *            whether to include transient fields\n     * @param reflectUpToClass\n     *            the superclass to reflect up to (inclusive), may be <code>null</code>\n     * @return int hash code\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(int, int, java.lang.Object, boolean, java.lang.Class, java.lang.String[])",
        "snippet": "    public static int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, Object object,\n            boolean testTransients, Class reflectUpToClass, String[] excludeFields) {\n\n        if (object == null) {\n            throw new IllegalArgumentException(\"The object to build a hash code for must not be null\");\n        }\n        HashCodeBuilder builder = new HashCodeBuilder(initialNonZeroOddNumber, multiplierNonZeroOddNumber);\n        Class clazz = object.getClass();\n        reflectionAppend(object, clazz, builder, testTransients, excludeFields);\n        while (clazz.getSuperclass() != null && clazz != reflectUpToClass) {\n            clazz = clazz.getSuperclass();\n            reflectionAppend(object, clazz, builder, testTransients, excludeFields);\n        }\n        return builder.toHashCode();\n    }",
        "begin_line": 340,
        "end_line": 354,
        "comment": "\n     * <p>\n     * This method uses reflection to build a valid hash code.\n     * </p>\n     * \n     * <p>\n     * It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will\n     * throw a security exception if run under a security manager, if the permissions are not set up correctly. It is\n     * also not as efficient as testing explicitly.\n     * </p>\n     * \n     * <p>\n     * If the TestTransients parameter is set to <code>true</code>, transient members will be tested, otherwise they\n     * are ignored, as they are likely derived fields, and not part of the value of the <code>Object</code>.\n     * </p>\n     * \n     * <p>\n     * Static fields will not be included. Superclass fields will be included up to and including the specified\n     * superclass. A null superclass is treated as java.lang.Object.\n     * </p>\n     * \n     * <p>\n     * Two randomly chosen, non-zero, odd numbers must be passed in. Ideally these should be different for each class,\n     * however this is not vital. Prime numbers are preferred, especially for the multiplier.\n     * </p>\n     * \n     * @param initialNonZeroOddNumber\n     *            a non-zero, odd number used as the initial value\n     * @param multiplierNonZeroOddNumber\n     *            a non-zero, odd number used as the multiplier\n     * @param object\n     *            the Object to create a <code>hashCode</code> for\n     * @param testTransients\n     *            whether to include transient fields\n     * @param reflectUpToClass\n     *            the superclass to reflect up to (inclusive), may be <code>null</code>\n     * @param excludeFields\n     *            array of field names to exclude from use in calculation of hash code\n     * @return int hash code\n     * @throws IllegalArgumentException\n     *             if the Object is <code>null</code>\n     * @throws IllegalArgumentException\n     *             if the number is zero or even\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(java.lang.Object)",
        "snippet": "    public static int reflectionHashCode(Object object) {\n        return reflectionHashCode(17, 37, object, false, null, null);\n    }",
        "begin_line": 386,
        "end_line": 388,
        "comment": "\n     * <p>\n     * This method uses reflection to build a valid hash code.\n     * </p>\n     * \n     * <p>\n     * This constructor uses two hard coded choices for the constants needed to build a hash code.\n     * </p>\n     * \n     * <p>\n     * It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will\n     * throw a security exception if run under a security manager, if the permissions are not set up correctly. It is\n     * also not as efficient as testing explicitly.\n     * </p>\n     * \n     * <p>\n     * Transient members will be not be used, as they are likely derived fields, and not part of the value of the\n     * <code>Object</code>.\n     * </p>\n     * \n     * <p>\n     * Static fields will not be tested. Superclass fields will be included.\n     * </p>\n     * \n     * @param object\n     *            the Object to create a <code>hashCode</code> for\n     * @return int hash code\n     * @throws IllegalArgumentException\n     *             if the object is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(java.lang.Object, boolean)",
        "snippet": "    public static int reflectionHashCode(Object object, boolean testTransients) {\n        return reflectionHashCode(17, 37, object, testTransients, null, null);\n    }",
        "begin_line": 422,
        "end_line": 424,
        "comment": "\n     * <p>\n     * This method uses reflection to build a valid hash code.\n     * </p>\n     * \n     * <p>\n     * This constructor uses two hard coded choices for the constants needed to build a hash code.\n     * </p>\n     * \n     * <p>\n     * It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will\n     * throw a security exception if run under a security manager, if the permissions are not set up correctly. It is\n     * also not as efficient as testing explicitly.\n     * </p>\n     * \n     * <P>\n     * If the TestTransients parameter is set to <code>true</code>, transient members will be tested, otherwise they\n     * are ignored, as they are likely derived fields, and not part of the value of the <code>Object</code>.\n     * </p>\n     * \n     * <p>\n     * Static fields will not be tested. Superclass fields will be included.\n     * </p>\n     * \n     * @param object\n     *            the Object to create a <code>hashCode</code> for\n     * @param testTransients\n     *            whether to include transient fields\n     * @return int hash code\n     * @throws IllegalArgumentException\n     *             if the object is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(java.lang.Object, java.util.Collection)",
        "snippet": "    public static int reflectionHashCode(Object object, Collection /* String */excludeFields) {\n        return reflectionHashCode(object, ReflectionToStringBuilder.toNoNullStringArray(excludeFields));\n    }",
        "begin_line": 458,
        "end_line": 460,
        "comment": "\n     * <p>\n     * This method uses reflection to build a valid hash code.\n     * </p>\n     * \n     * <p>\n     * This constructor uses two hard coded choices for the constants needed to build a hash code.\n     * </p>\n     * \n     * <p>\n     * It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will\n     * throw a security exception if run under a security manager, if the permissions are not set up correctly. It is\n     * also not as efficient as testing explicitly.\n     * </p>\n     * \n     * <p>\n     * Transient members will be not be used, as they are likely derived fields, and not part of the value of the\n     * <code>Object</code>.\n     * </p>\n     * \n     * <p>\n     * Static fields will not be tested. Superclass fields will be included.\n     * </p>\n     * \n     * @param object\n     *            the Object to create a <code>hashCode</code> for\n     * @param excludeFields\n     *            Collection of String field names to exclude from use in calculation of hash code\n     * @return int hash code\n     * @throws IllegalArgumentException\n     *             if the object is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(java.lang.Object, java.lang.String[])",
        "snippet": "    public static int reflectionHashCode(Object object, String[] excludeFields) {\n        return reflectionHashCode(17, 37, object, false, null, excludeFields);\n    }",
        "begin_line": 496,
        "end_line": 498,
        "comment": "\n     * <p>\n     * This method uses reflection to build a valid hash code.\n     * </p>\n     * \n     * <p>\n     * This constructor uses two hard coded choices for the constants needed to build a hash code.\n     * </p>\n     * \n     * <p>\n     * It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will\n     * throw a security exception if run under a security manager, if the permissions are not set up correctly. It is\n     * also not as efficient as testing explicitly.\n     * </p>\n     * \n     * <p>\n     * Transient members will be not be used, as they are likely derived fields, and not part of the value of the\n     * <code>Object</code>.\n     * </p>\n     * \n     * <p>\n     * Static fields will not be tested. Superclass fields will be included.\n     * </p>\n     * \n     * @param object\n     *            the Object to create a <code>hashCode</code> for\n     * @param excludeFields\n     *            array of field names to exclude from use in calculation of hash code\n     * @return int hash code\n     * @throws IllegalArgumentException\n     *             if the object is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilder.register(java.lang.Object)",
        "snippet": "    static void register(Object value) {\n        getRegistry().add(toIdentityHashCodeInteger(value));\n    }",
        "begin_line": 508,
        "end_line": 510,
        "comment": "\n     * <p>\n     * Registers the given object. Used by the reflection methods to avoid infinite loops.\n     * </p>\n     * \n     * @param value\n     *            The object to register.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilder.toIdentityHashCodeInteger(java.lang.Object)",
        "snippet": "    private static Integer toIdentityHashCodeInteger(Object value) {\n        return new Integer(System.identityHashCode(value));\n    }",
        "begin_line": 520,
        "end_line": 522,
        "comment": "\n     * Returns an Integer for the given object's default hash code.\n     * \n     * @see System#identityHashCode(Object)\n     * @param value\n     *            object for which the hashCode is to be calculated\n     * @return Default int hash code\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilder.unregister(java.lang.Object)",
        "snippet": "    static void unregister(Object value) {\n        getRegistry().remove(toIdentityHashCodeInteger(value));\n    }",
        "begin_line": 536,
        "end_line": 538,
        "comment": "\n     * <p>\n     * Unregisters the given object.\n     * </p>\n     * \n     * <p>\n     * Used by the reflection methods to avoid infinite loops.\n     * \n     * @param value\n     *            The object to unregister.\n     * @since 2.3\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilder.HashCodeBuilder()",
        "snippet": "    public HashCodeBuilder() {\n        iConstant = 37;\n        iTotal = 17;\n    }",
        "begin_line": 555,
        "end_line": 558,
        "comment": "\n     * <p>\n     * Uses two hard coded choices for the constants needed to build a <code>hashCode</code>.\n     * </p>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilder.HashCodeBuilder(int, int)",
        "snippet": "    public HashCodeBuilder(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber) {\n        if (initialNonZeroOddNumber == 0) {\n            throw new IllegalArgumentException(\"HashCodeBuilder requires a non zero initial value\");\n        }\n        if (initialNonZeroOddNumber % 2 == 0) {\n            throw new IllegalArgumentException(\"HashCodeBuilder requires an odd initial value\");\n        }\n        if (multiplierNonZeroOddNumber == 0) {\n            throw new IllegalArgumentException(\"HashCodeBuilder requires a non zero multiplier\");\n        }\n        if (multiplierNonZeroOddNumber % 2 == 0) {\n            throw new IllegalArgumentException(\"HashCodeBuilder requires an odd multiplier\");\n        }\n        iConstant = multiplierNonZeroOddNumber;\n        iTotal = initialNonZeroOddNumber;\n    }",
        "begin_line": 577,
        "end_line": 592,
        "comment": "\n     * <p>\n     * Two randomly chosen, non-zero, odd numbers must be passed in. Ideally these should be different for each class,\n     * however this is not vital.\n     * </p>\n     * \n     * <p>\n     * Prime numbers are preferred, especially for the multiplier.\n     * </p>\n     * \n     * @param initialNonZeroOddNumber\n     *            a non-zero, odd number used as the initial value\n     * @param multiplierNonZeroOddNumber\n     *            a non-zero, odd number used as the multiplier\n     * @throws IllegalArgumentException\n     *             if the number is zero or even\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilder.append(boolean)",
        "snippet": "    public HashCodeBuilder append(boolean value) {\n        iTotal = iTotal * iConstant + (value ? 0 : 1);\n        return this;\n    }",
        "begin_line": 608,
        "end_line": 611,
        "comment": "\n     * <p>\n     * Append a <code>hashCode</code> for a <code>boolean</code>.\n     * </p>\n     * <p>\n     * This adds <code>iConstant * 1</code> to the <code>hashCode</code> and not a <code>1231</code> or\n     * <code>1237</code> as done in java.lang.Boolean. This is in accordance with the <quote>Effective Java</quote>\n     * design.\n     * </p>\n     * \n     * @param value\n     *            the boolean to add to the <code>hashCode</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilder.append(boolean[])",
        "snippet": "    public HashCodeBuilder append(boolean[] array) {\n        if (array == null) {\n            iTotal = iTotal * iConstant;\n        } else {\n            for (int i = 0; i < array.length; i++) {\n                append(array[i]);\n            }\n        }\n        return this;\n    }",
        "begin_line": 622,
        "end_line": 631,
        "comment": "\n     * <p>\n     * Append a <code>hashCode</code> for a <code>boolean</code> array.\n     * </p>\n     * \n     * @param array\n     *            the array to add to the <code>hashCode</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilder.append(byte)",
        "snippet": "    public HashCodeBuilder append(byte value) {\n        iTotal = iTotal * iConstant + value;\n        return this;\n    }",
        "begin_line": 644,
        "end_line": 647,
        "comment": "\n     * <p>\n     * Append a <code>hashCode</code> for a <code>byte</code>.\n     * </p>\n     * \n     * @param value\n     *            the byte to add to the <code>hashCode</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilder.append(byte[])",
        "snippet": "    public HashCodeBuilder append(byte[] array) {\n        if (array == null) {\n            iTotal = iTotal * iConstant;\n        } else {\n            for (int i = 0; i < array.length; i++) {\n                append(array[i]);\n            }\n        }\n        return this;\n    }",
        "begin_line": 660,
        "end_line": 669,
        "comment": "\n     * <p>\n     * Append a <code>hashCode</code> for a <code>byte</code> array.\n     * </p>\n     * \n     * @param array\n     *            the array to add to the <code>hashCode</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilder.append(char)",
        "snippet": "    public HashCodeBuilder append(char value) {\n        iTotal = iTotal * iConstant + value;\n        return this;\n    }",
        "begin_line": 680,
        "end_line": 683,
        "comment": "\n     * <p>\n     * Append a <code>hashCode</code> for a <code>char</code>.\n     * </p>\n     * \n     * @param value\n     *            the char to add to the <code>hashCode</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilder.append(char[])",
        "snippet": "    public HashCodeBuilder append(char[] array) {\n        if (array == null) {\n            iTotal = iTotal * iConstant;\n        } else {\n            for (int i = 0; i < array.length; i++) {\n                append(array[i]);\n            }\n        }\n        return this;\n    }",
        "begin_line": 694,
        "end_line": 703,
        "comment": "\n     * <p>\n     * Append a <code>hashCode</code> for a <code>char</code> array.\n     * </p>\n     * \n     * @param array\n     *            the array to add to the <code>hashCode</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilder.append(double)",
        "snippet": "    public HashCodeBuilder append(double value) {\n        return append(Double.doubleToLongBits(value));\n    }",
        "begin_line": 714,
        "end_line": 716,
        "comment": "\n     * <p>\n     * Append a <code>hashCode</code> for a <code>double</code>.\n     * </p>\n     * \n     * @param value\n     *            the double to add to the <code>hashCode</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilder.append(double[])",
        "snippet": "    public HashCodeBuilder append(double[] array) {\n        if (array == null) {\n            iTotal = iTotal * iConstant;\n        } else {\n            for (int i = 0; i < array.length; i++) {\n                append(array[i]);\n            }\n        }\n        return this;\n    }",
        "begin_line": 727,
        "end_line": 736,
        "comment": "\n     * <p>\n     * Append a <code>hashCode</code> for a <code>double</code> array.\n     * </p>\n     * \n     * @param array\n     *            the array to add to the <code>hashCode</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilder.append(float)",
        "snippet": "    public HashCodeBuilder append(float value) {\n        iTotal = iTotal * iConstant + Float.floatToIntBits(value);\n        return this;\n    }",
        "begin_line": 747,
        "end_line": 750,
        "comment": "\n     * <p>\n     * Append a <code>hashCode</code> for a <code>float</code>.\n     * </p>\n     * \n     * @param value\n     *            the float to add to the <code>hashCode</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilder.append(float[])",
        "snippet": "    public HashCodeBuilder append(float[] array) {\n        if (array == null) {\n            iTotal = iTotal * iConstant;\n        } else {\n            for (int i = 0; i < array.length; i++) {\n                append(array[i]);\n            }\n        }\n        return this;\n    }",
        "begin_line": 761,
        "end_line": 770,
        "comment": "\n     * <p>\n     * Append a <code>hashCode</code> for a <code>float</code> array.\n     * </p>\n     * \n     * @param array\n     *            the array to add to the <code>hashCode</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilder.append(int)",
        "snippet": "    public HashCodeBuilder append(int value) {\n        iTotal = iTotal * iConstant + value;\n        return this;\n    }",
        "begin_line": 781,
        "end_line": 784,
        "comment": "\n     * <p>\n     * Append a <code>hashCode</code> for an <code>int</code>.\n     * </p>\n     * \n     * @param value\n     *            the int to add to the <code>hashCode</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilder.append(int[])",
        "snippet": "    public HashCodeBuilder append(int[] array) {\n        if (array == null) {\n            iTotal = iTotal * iConstant;\n        } else {\n            for (int i = 0; i < array.length; i++) {\n                append(array[i]);\n            }\n        }\n        return this;\n    }",
        "begin_line": 795,
        "end_line": 804,
        "comment": "\n     * <p>\n     * Append a <code>hashCode</code> for an <code>int</code> array.\n     * </p>\n     * \n     * @param array\n     *            the array to add to the <code>hashCode</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilder.append(long)",
        "snippet": "    public HashCodeBuilder append(long value) {\n        iTotal = iTotal * iConstant + ((int) (value ^ (value >> 32)));\n        return this;\n    }",
        "begin_line": 815,
        "end_line": 818,
        "comment": "\n     * <p>\n     * Append a <code>hashCode</code> for a <code>long</code>.\n     * </p>\n     * \n     * @param value\n     *            the long to add to the <code>hashCode</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilder.append(long[])",
        "snippet": "    public HashCodeBuilder append(long[] array) {\n        if (array == null) {\n            iTotal = iTotal * iConstant;\n        } else {\n            for (int i = 0; i < array.length; i++) {\n                append(array[i]);\n            }\n        }\n        return this;\n    }",
        "begin_line": 829,
        "end_line": 838,
        "comment": "\n     * <p>\n     * Append a <code>hashCode</code> for a <code>long</code> array.\n     * </p>\n     * \n     * @param array\n     *            the array to add to the <code>hashCode</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilder.append(java.lang.Object)",
        "snippet": "    public HashCodeBuilder append(Object object) {\n        if (object == null) {\n            iTotal = iTotal * iConstant;\n\n        } else {\n            if (object.getClass().isArray() == false) {\n                // the simple case, not an array, just the element\n                iTotal = iTotal * iConstant + object.hashCode();\n\n            } else {\n                // 'Switch' on type of array, to dispatch to the correct handler\n                // This handles multi dimensional arrays\n                if (object instanceof long[]) {\n                    append((long[]) object);\n                } else if (object instanceof int[]) {\n                    append((int[]) object);\n                } else if (object instanceof short[]) {\n                    append((short[]) object);\n                } else if (object instanceof char[]) {\n                    append((char[]) object);\n                } else if (object instanceof byte[]) {\n                    append((byte[]) object);\n                } else if (object instanceof double[]) {\n                    append((double[]) object);\n                } else if (object instanceof float[]) {\n                    append((float[]) object);\n                } else if (object instanceof boolean[]) {\n                    append((boolean[]) object);\n                } else {\n                    // Not an array of primitives\n                    append((Object[]) object);\n                }\n            }\n        }\n        return this;\n    }",
        "begin_line": 849,
        "end_line": 884,
        "comment": "\n     * <p>\n     * Append a <code>hashCode</code> for an <code>Object</code>.\n     * </p>\n     * \n     * @param object\n     *            the Object to add to the <code>hashCode</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilder.append(java.lang.Object[])",
        "snippet": "    public HashCodeBuilder append(Object[] array) {\n        if (array == null) {\n            iTotal = iTotal * iConstant;\n        } else {\n            for (int i = 0; i < array.length; i++) {\n                append(array[i]);\n            }\n        }\n        return this;\n    }",
        "begin_line": 895,
        "end_line": 904,
        "comment": "\n     * <p>\n     * Append a <code>hashCode</code> for an <code>Object</code> array.\n     * </p>\n     * \n     * @param array\n     *            the array to add to the <code>hashCode</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilder.append(short)",
        "snippet": "    public HashCodeBuilder append(short value) {\n        iTotal = iTotal * iConstant + value;\n        return this;\n    }",
        "begin_line": 915,
        "end_line": 918,
        "comment": "\n     * <p>\n     * Append a <code>hashCode</code> for a <code>short</code>.\n     * </p>\n     * \n     * @param value\n     *            the short to add to the <code>hashCode</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilder.append(short[])",
        "snippet": "    public HashCodeBuilder append(short[] array) {\n        if (array == null) {\n            iTotal = iTotal * iConstant;\n        } else {\n            for (int i = 0; i < array.length; i++) {\n                append(array[i]);\n            }\n        }\n        return this;\n    }",
        "begin_line": 929,
        "end_line": 938,
        "comment": "\n     * <p>\n     * Append a <code>hashCode</code> for a <code>short</code> array.\n     * </p>\n     * \n     * @param array\n     *            the array to add to the <code>hashCode</code>\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilder.appendSuper(int)",
        "snippet": "    public HashCodeBuilder appendSuper(int superHashCode) {\n        iTotal = iTotal * iConstant + superHashCode;\n        return this;\n    }",
        "begin_line": 950,
        "end_line": 953,
        "comment": "\n     * <p>\n     * Adds the result of super.hashCode() to this builder.\n     * </p>\n     * \n     * @param superHashCode\n     *            the result of calling <code>super.hashCode()</code>\n     * @return this HashCodeBuilder, used to chain calls.\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang.builder.HashCodeBuilder.toHashCode()",
        "snippet": "    public int toHashCode() {\n        return iTotal;\n    }",
        "begin_line": 962,
        "end_line": 964,
        "comment": "\n     * <p>\n     * Return the computed <code>hashCode</code>.\n     * </p>\n     * \n     * @return <code>hashCode</code> based on the fields appended\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/CompareToBuilder.java",
        "class_name": "org.apache.commons.lang.builder.CompareToBuilder",
        "signature": "org.apache.commons.lang.builder.CompareToBuilder.CompareToBuilder()",
        "snippet": "    public CompareToBuilder() {\n        super();\n        comparison = 0;\n    }",
        "begin_line": 109,
        "end_line": 112,
        "comment": "\n     * <p>Constructor for CompareToBuilder.</p>\n     *\n     * <p>Starts off assuming that the objects are equal. Multiple calls are \n     * then made to the various append methods, followed by a call to \n     * {@link #toComparison} to get the result.</p>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/CompareToBuilder.java",
        "class_name": "org.apache.commons.lang.builder.CompareToBuilder",
        "signature": "org.apache.commons.lang.builder.CompareToBuilder.reflectionCompare(java.lang.Object, java.lang.Object)",
        "snippet": "    public static int reflectionCompare(Object lhs, Object rhs) {\n        return reflectionCompare(lhs, rhs, false, null, null);\n    }",
        "begin_line": 141,
        "end_line": 143,
        "comment": " \n     * <p>Compares two <code>Object</code>s via reflection.</p>\n     *\n     * <p>Fields can be private, thus <code>AccessibleObject.setAccessible</code>\n     * is used to bypass normal access control checks. This will fail under a \n     * security manager unless the appropriate permissions are set.</p>\n     *\n     * <ul>\n     * <li>Static fields will not be compared</li>\n     * <li>Transient members will be not be compared, as they are likely derived\n     *     fields</li>\n     * <li>Superclass fields will be compared</li>\n     * </ul>\n     *\n     * <p>If both <code>lhs</code> and <code>rhs</code> are <code>null</code>,\n     * they are considered equal.</p>\n     *\n     * @param lhs  left-hand object\n     * @param rhs  right-hand object\n     * @return a negative integer, zero, or a positive integer as <code>lhs</code>\n     *  is less than, equal to, or greater than <code>rhs</code>\n     * @throws NullPointerException  if either (but not both) parameters are\n     *  <code>null</code>\n     * @throws ClassCastException  if <code>rhs</code> is not assignment-compatible\n     *  with <code>lhs</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/CompareToBuilder.java",
        "class_name": "org.apache.commons.lang.builder.CompareToBuilder",
        "signature": "org.apache.commons.lang.builder.CompareToBuilder.reflectionCompare(java.lang.Object, java.lang.Object, boolean)",
        "snippet": "    public static int reflectionCompare(Object lhs, Object rhs, boolean compareTransients) {\n        return reflectionCompare(lhs, rhs, compareTransients, null, null);\n    }",
        "begin_line": 173,
        "end_line": 175,
        "comment": "\n     * <p>Compares two <code>Object</code>s via reflection.</p>\n     *\n     * <p>Fields can be private, thus <code>AccessibleObject.setAccessible</code>\n     * is used to bypass normal access control checks. This will fail under a \n     * security manager unless the appropriate permissions are set.</p>\n     *\n     * <ul>\n     * <li>Static fields will not be compared</li>\n     * <li>If <code>compareTransients</code> is <code>true</code>,\n     *     compares transient members.  Otherwise ignores them, as they\n     *     are likely derived fields.</li>\n     * <li>Superclass fields will be compared</li>\n     * </ul>\n     *\n     * <p>If both <code>lhs</code> and <code>rhs</code> are <code>null</code>,\n     * they are considered equal.</p>\n     *\n     * @param lhs  left-hand object\n     * @param rhs  right-hand object\n     * @param compareTransients  whether to compare transient fields\n     * @return a negative integer, zero, or a positive integer as <code>lhs</code>\n     *  is less than, equal to, or greater than <code>rhs</code>\n     * @throws NullPointerException  if either <code>lhs</code> or <code>rhs</code>\n     *  (but not both) is <code>null</code>\n     * @throws ClassCastException  if <code>rhs</code> is not assignment-compatible\n     *  with <code>lhs</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/CompareToBuilder.java",
        "class_name": "org.apache.commons.lang.builder.CompareToBuilder",
        "signature": "org.apache.commons.lang.builder.CompareToBuilder.reflectionCompare(java.lang.Object, java.lang.Object, java.util.Collection)",
        "snippet": "    public static int reflectionCompare(Object lhs, Object rhs, Collection /*String*/ excludeFields) {\n        return reflectionCompare(lhs, rhs, ReflectionToStringBuilder.toNoNullStringArray(excludeFields));\n    }",
        "begin_line": 206,
        "end_line": 208,
        "comment": "\n     * <p>Compares two <code>Object</code>s via reflection.</p>\n     *\n     * <p>Fields can be private, thus <code>AccessibleObject.setAccessible</code>\n     * is used to bypass normal access control checks. This will fail under a \n     * security manager unless the appropriate permissions are set.</p>\n     *\n     * <ul>\n     * <li>Static fields will not be compared</li>\n     * <li>If <code>compareTransients</code> is <code>true</code>,\n     *     compares transient members.  Otherwise ignores them, as they\n     *     are likely derived fields.</li>\n     * <li>Superclass fields will be compared</li>\n     * </ul>\n     *\n     * <p>If both <code>lhs</code> and <code>rhs</code> are <code>null</code>,\n     * they are considered equal.</p>\n     *\n     * @param lhs  left-hand object\n     * @param rhs  right-hand object\n     * @param excludeFields  Collection of String fields to exclude\n     * @return a negative integer, zero, or a positive integer as <code>lhs</code>\n     *  is less than, equal to, or greater than <code>rhs</code>\n     * @throws NullPointerException  if either <code>lhs</code> or <code>rhs</code>\n     *  (but not both) is <code>null</code>\n     * @throws ClassCastException  if <code>rhs</code> is not assignment-compatible\n     *  with <code>lhs</code>\n     * @since 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/CompareToBuilder.java",
        "class_name": "org.apache.commons.lang.builder.CompareToBuilder",
        "signature": "org.apache.commons.lang.builder.CompareToBuilder.reflectionCompare(java.lang.Object, java.lang.Object, java.lang.String[])",
        "snippet": "    public static int reflectionCompare(Object lhs, Object rhs, String[] excludeFields) {\n        return reflectionCompare(lhs, rhs, false, null, excludeFields);\n    }",
        "begin_line": 239,
        "end_line": 241,
        "comment": "\n     * <p>Compares two <code>Object</code>s via reflection.</p>\n     *\n     * <p>Fields can be private, thus <code>AccessibleObject.setAccessible</code>\n     * is used to bypass normal access control checks. This will fail under a \n     * security manager unless the appropriate permissions are set.</p>\n     *\n     * <ul>\n     * <li>Static fields will not be compared</li>\n     * <li>If <code>compareTransients</code> is <code>true</code>,\n     *     compares transient members.  Otherwise ignores them, as they\n     *     are likely derived fields.</li>\n     * <li>Superclass fields will be compared</li>\n     * </ul>\n     *\n     * <p>If both <code>lhs</code> and <code>rhs</code> are <code>null</code>,\n     * they are considered equal.</p>\n     *\n     * @param lhs  left-hand object\n     * @param rhs  right-hand object\n     * @param excludeFields  array of fields to exclude\n     * @return a negative integer, zero, or a positive integer as <code>lhs</code>\n     *  is less than, equal to, or greater than <code>rhs</code>\n     * @throws NullPointerException  if either <code>lhs</code> or <code>rhs</code>\n     *  (but not both) is <code>null</code>\n     * @throws ClassCastException  if <code>rhs</code> is not assignment-compatible\n     *  with <code>lhs</code>\n     * @since 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/CompareToBuilder.java",
        "class_name": "org.apache.commons.lang.builder.CompareToBuilder",
        "signature": "org.apache.commons.lang.builder.CompareToBuilder.reflectionCompare(java.lang.Object, java.lang.Object, boolean, java.lang.Class)",
        "snippet": "    public static int reflectionCompare(Object lhs, Object rhs, boolean compareTransients, \n                                        Class reflectUpToClass) \n    {\n        return reflectionCompare(lhs, rhs, false, reflectUpToClass, null);\n    }",
        "begin_line": 274,
        "end_line": 278,
        "comment": "\n     * <p>Compares two <code>Object</code>s via reflection.</p>\n     *\n     * <p>Fields can be private, thus <code>AccessibleObject.setAccessible</code>\n     * is used to bypass normal access control checks. This will fail under a \n     * security manager unless the appropriate permissions are set.</p>\n     *\n     * <ul>\n     * <li>Static fields will not be compared</li>\n     * <li>If the <code>compareTransients</code> is <code>true</code>,\n     *     compares transient members.  Otherwise ignores them, as they\n     *     are likely derived fields.</li>\n     * <li>Compares superclass fields up to and including <code>reflectUpToClass</code>.\n     *     If <code>reflectUpToClass</code> is <code>null</code>, compares all superclass fields.</li>\n     * </ul>\n     *\n     * <p>If both <code>lhs</code> and <code>rhs</code> are <code>null</code>,\n     * they are considered equal.</p>\n     *\n     * @param lhs  left-hand object\n     * @param rhs  right-hand object\n     * @param compareTransients  whether to compare transient fields\n     * @param reflectUpToClass  last superclass for which fields are compared\n     * @return a negative integer, zero, or a positive integer as <code>lhs</code>\n     *  is less than, equal to, or greater than <code>rhs</code>\n     * @throws NullPointerException  if either <code>lhs</code> or <code>rhs</code>\n     *  (but not both) is <code>null</code>\n     * @throws ClassCastException  if <code>rhs</code> is not assignment-compatible\n     *  with <code>lhs</code>\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/CompareToBuilder.java",
        "class_name": "org.apache.commons.lang.builder.CompareToBuilder",
        "signature": "org.apache.commons.lang.builder.CompareToBuilder.reflectionCompare(java.lang.Object, java.lang.Object, boolean, java.lang.Class, java.lang.String[])",
        "snippet": "    public static int reflectionCompare(\n        Object lhs, \n        Object rhs, \n        boolean compareTransients, \n        Class reflectUpToClass, \n        String[] excludeFields) {\n\n        if (lhs == rhs) {\n            return 0;\n        }\n        if (lhs == null || rhs == null) {\n            throw new NullPointerException();\n        }\n        Class lhsClazz = lhs.getClass();\n        if (!lhsClazz.isInstance(rhs)) {\n            throw new ClassCastException();\n        }\n        CompareToBuilder compareToBuilder = new CompareToBuilder();\n        reflectionAppend(lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields);\n        while (lhsClazz.getSuperclass() != null && lhsClazz != reflectUpToClass) {\n            lhsClazz = lhsClazz.getSuperclass();\n            reflectionAppend(lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields);\n        }\n        return compareToBuilder.toComparison();\n    }",
        "begin_line": 312,
        "end_line": 336,
        "comment": "\n     * <p>Compares two <code>Object</code>s via reflection.</p>\n     *\n     * <p>Fields can be private, thus <code>AccessibleObject.setAccessible</code>\n     * is used to bypass normal access control checks. This will fail under a \n     * security manager unless the appropriate permissions are set.</p>\n     *\n     * <ul>\n     * <li>Static fields will not be compared</li>\n     * <li>If the <code>compareTransients</code> is <code>true</code>,\n     *     compares transient members.  Otherwise ignores them, as they\n     *     are likely derived fields.</li>\n     * <li>Compares superclass fields up to and including <code>reflectUpToClass</code>.\n     *     If <code>reflectUpToClass</code> is <code>null</code>, compares all superclass fields.</li>\n     * </ul>\n     *\n     * <p>If both <code>lhs</code> and <code>rhs</code> are <code>null</code>,\n     * they are considered equal.</p>\n     *\n     * @param lhs  left-hand object\n     * @param rhs  right-hand object\n     * @param compareTransients  whether to compare transient fields\n     * @param reflectUpToClass  last superclass for which fields are compared\n     * @param excludeFields  fields to exclude\n     * @return a negative integer, zero, or a positive integer as <code>lhs</code>\n     *  is less than, equal to, or greater than <code>rhs</code>\n     * @throws NullPointerException  if either <code>lhs</code> or <code>rhs</code>\n     *  (but not both) is <code>null</code>\n     * @throws ClassCastException  if <code>rhs</code> is not assignment-compatible\n     *  with <code>lhs</code>\n     * @since 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/CompareToBuilder.java",
        "class_name": "org.apache.commons.lang.builder.CompareToBuilder",
        "signature": "org.apache.commons.lang.builder.CompareToBuilder.reflectionAppend(java.lang.Object, java.lang.Object, java.lang.Class, org.apache.commons.lang.builder.CompareToBuilder, boolean, java.lang.String[])",
        "snippet": "    private static void reflectionAppend(\n        Object lhs,\n        Object rhs,\n        Class clazz,\n        CompareToBuilder builder,\n        boolean useTransients,\n        String[] excludeFields) {\n        \n        Field[] fields = clazz.getDeclaredFields();\n        List excludedFieldList = excludeFields != null ? Arrays.asList(excludeFields) : Collections.EMPTY_LIST;\n        AccessibleObject.setAccessible(fields, true);\n        for (int i = 0; i < fields.length && builder.comparison == 0; i++) {\n            Field f = fields[i];\n            if (!excludedFieldList.contains(f.getName())\n                && (f.getName().indexOf('$') == -1)\n                && (useTransients || !Modifier.isTransient(f.getModifiers()))\n                && (!Modifier.isStatic(f.getModifiers()))) {\n                try {\n                    builder.append(f.get(lhs), f.get(rhs));\n                } catch (IllegalAccessException e) {\n                    // This can't happen. Would get a Security exception instead.\n                    // Throw a runtime exception in case the impossible happens.\n                    throw new InternalError(\"Unexpected IllegalAccessException\");\n                }\n            }\n        }\n    }",
        "begin_line": 349,
        "end_line": 375,
        "comment": "\n     * <p>Appends to <code>builder</code> the comparison of <code>lhs</code>\n     * to <code>rhs</code> using the fields defined in <code>clazz</code>.</p>\n     * \n     * @param lhs  left-hand object\n     * @param rhs  right-hand object\n     * @param clazz  <code>Class</code> that defines fields to be compared\n     * @param builder  <code>CompareToBuilder</code> to append to\n     * @param useTransients  whether to compare transient fields\n     * @param excludeFields  fields to exclude\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/CompareToBuilder.java",
        "class_name": "org.apache.commons.lang.builder.CompareToBuilder",
        "signature": "org.apache.commons.lang.builder.CompareToBuilder.appendSuper(int)",
        "snippet": "    public CompareToBuilder appendSuper(int superCompareTo) {\n        if (comparison != 0) {\n            return this;\n        }\n        comparison = superCompareTo;\n        return this;\n    }",
        "begin_line": 386,
        "end_line": 392,
        "comment": "\n     * <p>Appends to the <code>builder</code> the <code>compareTo(Object)</code>\n     * result of the superclass.</p>\n     *\n     * @param superCompareTo  result of calling <code>super.compareTo(Object)</code>\n     * @return this - used to chain append calls\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/CompareToBuilder.java",
        "class_name": "org.apache.commons.lang.builder.CompareToBuilder",
        "signature": "org.apache.commons.lang.builder.CompareToBuilder.append(java.lang.Object, java.lang.Object)",
        "snippet": "    public CompareToBuilder append(Object lhs, Object rhs) {\n        return append(lhs, rhs, null);\n    }",
        "begin_line": 414,
        "end_line": 416,
        "comment": "\n     * <p>Appends to the <code>builder</code> the comparison of\n     * two <code>Object</code>s.</p>\n     *\n     * <ol>\n     * <li>Check if <code>lhs == rhs</code></li>\n     * <li>Check if either <code>lhs</code> or <code>rhs</code> is <code>null</code>,\n     *     a <code>null</code> object is less than a non-<code>null</code> object</li>\n     * <li>Check the object contents</li>\n     * </ol>\n     * \n     * <p><code>lhs</code> must either be an array or implement {@link Comparable}.</p>\n     *\n     * @param lhs  left-hand object\n     * @param rhs  right-hand object\n     * @return this - used to chain append calls\n     * @throws ClassCastException  if <code>rhs</code> is not assignment-compatible\n     *  with <code>lhs</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/CompareToBuilder.java",
        "class_name": "org.apache.commons.lang.builder.CompareToBuilder",
        "signature": "org.apache.commons.lang.builder.CompareToBuilder.append(java.lang.Object, java.lang.Object, java.util.Comparator)",
        "snippet": "    public CompareToBuilder append(Object lhs, Object rhs, Comparator comparator) {\n        if (comparison != 0) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null) {\n            comparison = -1;\n            return this;\n        }\n        if (rhs == null) {\n            comparison = +1;\n            return this;\n        }\n        if (lhs.getClass().isArray()) {\n            // switch on type of array, to dispatch to the correct handler\n            // handles multi dimensional arrays\n            // throws a ClassCastException if rhs is not the correct array type\n            if (lhs instanceof long[]) {\n                append((long[]) lhs, (long[]) rhs);\n            } else if (lhs instanceof int[]) {\n                append((int[]) lhs, (int[]) rhs);\n            } else if (lhs instanceof short[]) {\n                append((short[]) lhs, (short[]) rhs);\n            } else if (lhs instanceof char[]) {\n                append((char[]) lhs, (char[]) rhs);\n            } else if (lhs instanceof byte[]) {\n                append((byte[]) lhs, (byte[]) rhs);\n            } else if (lhs instanceof double[]) {\n                append((double[]) lhs, (double[]) rhs);\n            } else if (lhs instanceof float[]) {\n                append((float[]) lhs, (float[]) rhs);\n            } else if (lhs instanceof boolean[]) {\n                append((boolean[]) lhs, (boolean[]) rhs);\n            } else {\n                // not an array of primitives\n                // throws a ClassCastException if rhs is not an array\n                append((Object[]) lhs, (Object[]) rhs, comparator);\n            }\n        } else {\n            // the simple case, not an array, just test the element\n            if (comparator == null) {\n                comparison = ((Comparable) lhs).compareTo(rhs);\n            } else {\n                comparison = comparator.compare(lhs, rhs);\n            }\n        }\n        return this;\n    }",
        "begin_line": 443,
        "end_line": 492,
        "comment": "\n     * <p>Appends to the <code>builder</code> the comparison of\n     * two <code>Object</code>s.</p>\n     *\n     * <ol>\n     * <li>Check if <code>lhs == rhs</code></li>\n     * <li>Check if either <code>lhs</code> or <code>rhs</code> is <code>null</code>,\n     *     a <code>null</code> object is less than a non-<code>null</code> object</li>\n     * <li>Check the object contents</li>\n     * </ol>\n     *\n     * <p>If <code>lhs</code> is an array, array comparison methods will be used.\n     * Otherwise <code>comparator</code> will be used to compare the objects.\n     * If <code>comparator</code> is <code>null</code>, <code>lhs</code> must\n     * implement {@link Comparable} instead.</p>\n     *\n     * @param lhs  left-hand object\n     * @param rhs  right-hand object\n     * @param comparator  <code>Comparator</code> used to compare the objects,\n     *  <code>null</code> means treat lhs as <code>Comparable</code>\n     * @return this - used to chain append calls\n     * @throws ClassCastException  if <code>rhs</code> is not assignment-compatible\n     *  with <code>lhs</code>\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/CompareToBuilder.java",
        "class_name": "org.apache.commons.lang.builder.CompareToBuilder",
        "signature": "org.apache.commons.lang.builder.CompareToBuilder.append(long, long)",
        "snippet": "    public CompareToBuilder append(long lhs, long rhs) {\n        if (comparison != 0) {\n            return this;\n        }\n        comparison = ((lhs < rhs) ? -1 : ((lhs > rhs) ? 1 : 0));\n        return this;\n    }",
        "begin_line": 503,
        "end_line": 509,
        "comment": "\n     * Appends to the <code>builder</code> the comparison of\n     * two <code>long</code>s.\n     *\n     * @param lhs  left-hand value\n     * @param rhs  right-hand value\n     * @return this - used to chain append calls\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/CompareToBuilder.java",
        "class_name": "org.apache.commons.lang.builder.CompareToBuilder",
        "signature": "org.apache.commons.lang.builder.CompareToBuilder.append(int, int)",
        "snippet": "    public CompareToBuilder append(int lhs, int rhs) {\n        if (comparison != 0) {\n            return this;\n        }\n        comparison = ((lhs < rhs) ? -1 : ((lhs > rhs) ? 1 : 0));\n        return this;\n    }",
        "begin_line": 519,
        "end_line": 525,
        "comment": "\n     * Appends to the <code>builder</code> the comparison of\n     * two <code>int</code>s.\n     *\n     * @param lhs  left-hand value\n     * @param rhs  right-hand value\n     * @return this - used to chain append calls\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/CompareToBuilder.java",
        "class_name": "org.apache.commons.lang.builder.CompareToBuilder",
        "signature": "org.apache.commons.lang.builder.CompareToBuilder.append(short, short)",
        "snippet": "    public CompareToBuilder append(short lhs, short rhs) {\n        if (comparison != 0) {\n            return this;\n        }\n        comparison = ((lhs < rhs) ? -1 : ((lhs > rhs) ? 1 : 0));\n        return this;\n    }",
        "begin_line": 535,
        "end_line": 541,
        "comment": "\n     * Appends to the <code>builder</code> the comparison of\n     * two <code>short</code>s.\n     * \n     * @param lhs  left-hand value\n     * @param rhs  right-hand value\n     * @return this - used to chain append calls\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/CompareToBuilder.java",
        "class_name": "org.apache.commons.lang.builder.CompareToBuilder",
        "signature": "org.apache.commons.lang.builder.CompareToBuilder.append(char, char)",
        "snippet": "    public CompareToBuilder append(char lhs, char rhs) {\n        if (comparison != 0) {\n            return this;\n        }\n        comparison = ((lhs < rhs) ? -1 : ((lhs > rhs) ? 1 : 0));\n        return this;\n    }",
        "begin_line": 551,
        "end_line": 557,
        "comment": "\n     * Appends to the <code>builder</code> the comparison of\n     * two <code>char</code>s.\n     *\n     * @param lhs  left-hand value\n     * @param rhs  right-hand value\n     * @return this - used to chain append calls\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/CompareToBuilder.java",
        "class_name": "org.apache.commons.lang.builder.CompareToBuilder",
        "signature": "org.apache.commons.lang.builder.CompareToBuilder.append(byte, byte)",
        "snippet": "    public CompareToBuilder append(byte lhs, byte rhs) {\n        if (comparison != 0) {\n            return this;\n        }\n        comparison = ((lhs < rhs) ? -1 : ((lhs > rhs) ? 1 : 0));\n        return this;\n    }",
        "begin_line": 567,
        "end_line": 573,
        "comment": "\n     * Appends to the <code>builder</code> the comparison of\n     * two <code>byte</code>s.\n     * \n     * @param lhs  left-hand value\n     * @param rhs  right-hand value\n     * @return this - used to chain append calls\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/CompareToBuilder.java",
        "class_name": "org.apache.commons.lang.builder.CompareToBuilder",
        "signature": "org.apache.commons.lang.builder.CompareToBuilder.append(double, double)",
        "snippet": "    public CompareToBuilder append(double lhs, double rhs) {\n        if (comparison != 0) {\n            return this;\n        }\n        comparison = NumberUtils.compare(lhs, rhs);\n        return this;\n    }",
        "begin_line": 588,
        "end_line": 594,
        "comment": "\n     * <p>Appends to the <code>builder</code> the comparison of\n     * two <code>double</code>s.</p>\n     *\n     * <p>This handles NaNs, Infinities, and <code>-0.0</code>.</p>\n     *\n     * <p>It is compatible with the hash code generated by\n     * <code>HashCodeBuilder</code>.</p>\n     *\n     * @param lhs  left-hand value\n     * @param rhs  right-hand value\n     * @return this - used to chain append calls\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/CompareToBuilder.java",
        "class_name": "org.apache.commons.lang.builder.CompareToBuilder",
        "signature": "org.apache.commons.lang.builder.CompareToBuilder.append(float, float)",
        "snippet": "    public CompareToBuilder append(float lhs, float rhs) {\n        if (comparison != 0) {\n            return this;\n        }\n        comparison = NumberUtils.compare(lhs, rhs);\n        return this;\n    }",
        "begin_line": 609,
        "end_line": 615,
        "comment": "\n     * <p>Appends to the <code>builder</code> the comparison of\n     * two <code>float</code>s.</p>\n     *\n     * <p>This handles NaNs, Infinities, and <code>-0.0</code>.</p>\n     *\n     * <p>It is compatible with the hash code generated by\n     * <code>HashCodeBuilder</code>.</p>\n     *\n     * @param lhs  left-hand value\n     * @param rhs  right-hand value\n     * @return this - used to chain append calls\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/CompareToBuilder.java",
        "class_name": "org.apache.commons.lang.builder.CompareToBuilder",
        "signature": "org.apache.commons.lang.builder.CompareToBuilder.append(boolean, boolean)",
        "snippet": "    public CompareToBuilder append(boolean lhs, boolean rhs) {\n        if (comparison != 0) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == false) {\n            comparison = -1;\n        } else {\n            comparison = +1;\n        }\n        return this;\n    }",
        "begin_line": 625,
        "end_line": 638,
        "comment": "\n     * Appends to the <code>builder</code> the comparison of\n     * two <code>booleans</code>s.\n     *\n     * @param lhs  left-hand value\n     * @param rhs  right-hand value\n     * @return this - used to chain append calls\n      ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/CompareToBuilder.java",
        "class_name": "org.apache.commons.lang.builder.CompareToBuilder",
        "signature": "org.apache.commons.lang.builder.CompareToBuilder.append(java.lang.Object[], java.lang.Object[])",
        "snippet": "    public CompareToBuilder append(Object[] lhs, Object[] rhs) {\n        return append(lhs, rhs, null);\n    }",
        "begin_line": 661,
        "end_line": 663,
        "comment": "\n     * <p>Appends to the <code>builder</code> the deep comparison of\n     * two <code>Object</code> arrays.</p>\n     *\n     * <ol>\n     *  <li>Check if arrays are the same using <code>==</code></li>\n     *  <li>Check if for <code>null</code>, <code>null</code> is less than non-<code>null</code></li>\n     *  <li>Check array length, a short length array is less than a long length array</li>\n     *  <li>Check array contents element by element using {@link #append(Object, Object, Comparator)}</li>\n     * </ol>\n     *\n     * <p>This method will also will be called for the top level of multi-dimensional,\n     * ragged, and multi-typed arrays.</p>\n     *\n     * @param lhs  left-hand array\n     * @param rhs  right-hand array\n     * @return this - used to chain append calls\n     * @throws ClassCastException  if <code>rhs</code> is not assignment-compatible\n     *  with <code>lhs</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/CompareToBuilder.java",
        "class_name": "org.apache.commons.lang.builder.CompareToBuilder",
        "signature": "org.apache.commons.lang.builder.CompareToBuilder.append(java.lang.Object[], java.lang.Object[], java.util.Comparator)",
        "snippet": "    public CompareToBuilder append(Object[] lhs, Object[] rhs, Comparator comparator) {\n        if (comparison != 0) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null) {\n            comparison = -1;\n            return this;\n        }\n        if (rhs == null) {\n            comparison = +1;\n            return this;\n        }\n        if (lhs.length != rhs.length) {\n            comparison = (lhs.length < rhs.length) ? -1 : +1;\n            return this;\n        }\n        for (int i = 0; i < lhs.length && comparison == 0; i++) {\n            append(lhs[i], rhs[i], comparator);\n        }\n        return this;\n    }",
        "begin_line": 688,
        "end_line": 711,
        "comment": "\n     * <p>Appends to the <code>builder</code> the deep comparison of\n     * two <code>Object</code> arrays.</p>\n     *\n     * <ol>\n     *  <li>Check if arrays are the same using <code>==</code></li>\n     *  <li>Check if for <code>null</code>, <code>null</code> is less than non-<code>null</code></li>\n     *  <li>Check array length, a short length array is less than a long length array</li>\n     *  <li>Check array contents element by element using {@link #append(Object, Object, Comparator)}</li>\n     * </ol>\n     *\n     * <p>This method will also will be called for the top level of multi-dimensional,\n     * ragged, and multi-typed arrays.</p>\n     *\n     * @param lhs  left-hand array\n     * @param rhs  right-hand array\n     * @param comparator  <code>Comparator</code> to use to compare the array elements,\n     *  <code>null</code> means to treat <code>lhs</code> elements as <code>Comparable</code>.\n     * @return this - used to chain append calls\n     * @throws ClassCastException  if <code>rhs</code> is not assignment-compatible\n     *  with <code>lhs</code>\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/CompareToBuilder.java",
        "class_name": "org.apache.commons.lang.builder.CompareToBuilder",
        "signature": "org.apache.commons.lang.builder.CompareToBuilder.append(long[], long[])",
        "snippet": "    public CompareToBuilder append(long[] lhs, long[] rhs) {\n        if (comparison != 0) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null) {\n            comparison = -1;\n            return this;\n        }\n        if (rhs == null) {\n            comparison = +1;\n            return this;\n        }\n        if (lhs.length != rhs.length) {\n            comparison = (lhs.length < rhs.length) ? -1 : +1;\n            return this;\n        }\n        for (int i = 0; i < lhs.length && comparison == 0; i++) {\n            append(lhs[i], rhs[i]);\n        }\n        return this;\n    }",
        "begin_line": 728,
        "end_line": 751,
        "comment": "\n     * <p>Appends to the <code>builder</code> the deep comparison of\n     * two <code>long</code> arrays.</p>\n     *\n     * <ol>\n     *  <li>Check if arrays are the same using <code>==</code></li>\n     *  <li>Check if for <code>null</code>, <code>null</code> is less than non-<code>null</code></li>\n     *  <li>Check array length, a shorter length array is less than a longer length array</li>\n     *  <li>Check array contents element by element using {@link #append(long, long)}</li>\n     * </ol>\n     *\n     * @param lhs  left-hand array\n     * @param rhs  right-hand array\n     * @return this - used to chain append calls\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/CompareToBuilder.java",
        "class_name": "org.apache.commons.lang.builder.CompareToBuilder",
        "signature": "org.apache.commons.lang.builder.CompareToBuilder.append(int[], int[])",
        "snippet": "    public CompareToBuilder append(int[] lhs, int[] rhs) {\n        if (comparison != 0) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null) {\n            comparison = -1;\n            return this;\n        }\n        if (rhs == null) {\n            comparison = +1;\n            return this;\n        }\n        if (lhs.length != rhs.length) {\n            comparison = (lhs.length < rhs.length) ? -1 : +1;\n            return this;\n        }\n        for (int i = 0; i < lhs.length && comparison == 0; i++) {\n            append(lhs[i], rhs[i]);\n        }\n        return this;\n    }",
        "begin_line": 768,
        "end_line": 791,
        "comment": "\n     * <p>Appends to the <code>builder</code> the deep comparison of\n     * two <code>int</code> arrays.</p>\n     *\n     * <ol>\n     *  <li>Check if arrays are the same using <code>==</code></li>\n     *  <li>Check if for <code>null</code>, <code>null</code> is less than non-<code>null</code></li>\n     *  <li>Check array length, a shorter length array is less than a longer length array</li>\n     *  <li>Check array contents element by element using {@link #append(int, int)}</li>\n     * </ol>\n     *\n     * @param lhs  left-hand array\n     * @param rhs  right-hand array\n     * @return this - used to chain append calls\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/CompareToBuilder.java",
        "class_name": "org.apache.commons.lang.builder.CompareToBuilder",
        "signature": "org.apache.commons.lang.builder.CompareToBuilder.append(short[], short[])",
        "snippet": "    public CompareToBuilder append(short[] lhs, short[] rhs) {\n        if (comparison != 0) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null) {\n            comparison = -1;\n            return this;\n        }\n        if (rhs == null) {\n            comparison = +1;\n            return this;\n        }\n        if (lhs.length != rhs.length) {\n            comparison = (lhs.length < rhs.length) ? -1 : +1;\n            return this;\n        }\n        for (int i = 0; i < lhs.length && comparison == 0; i++) {\n            append(lhs[i], rhs[i]);\n        }\n        return this;\n    }",
        "begin_line": 808,
        "end_line": 831,
        "comment": "\n     * <p>Appends to the <code>builder</code> the deep comparison of\n     * two <code>short</code> arrays.</p>\n     *\n     * <ol>\n     *  <li>Check if arrays are the same using <code>==</code></li>\n     *  <li>Check if for <code>null</code>, <code>null</code> is less than non-<code>null</code></li>\n     *  <li>Check array length, a shorter length array is less than a longer length array</li>\n     *  <li>Check array contents element by element using {@link #append(short, short)}</li>\n     * </ol>\n     *\n     * @param lhs  left-hand array\n     * @param rhs  right-hand array\n     * @return this - used to chain append calls\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/CompareToBuilder.java",
        "class_name": "org.apache.commons.lang.builder.CompareToBuilder",
        "signature": "org.apache.commons.lang.builder.CompareToBuilder.append(char[], char[])",
        "snippet": "    public CompareToBuilder append(char[] lhs, char[] rhs) {\n        if (comparison != 0) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null) {\n            comparison = -1;\n            return this;\n        }\n        if (rhs == null) {\n            comparison = +1;\n            return this;\n        }\n        if (lhs.length != rhs.length) {\n            comparison = (lhs.length < rhs.length) ? -1 : +1;\n            return this;\n        }\n        for (int i = 0; i < lhs.length && comparison == 0; i++) {\n            append(lhs[i], rhs[i]);\n        }\n        return this;\n    }",
        "begin_line": 848,
        "end_line": 871,
        "comment": "\n     * <p>Appends to the <code>builder</code> the deep comparison of\n     * two <code>char</code> arrays.</p>\n     *\n     * <ol>\n     *  <li>Check if arrays are the same using <code>==</code></li>\n     *  <li>Check if for <code>null</code>, <code>null</code> is less than non-<code>null</code></li>\n     *  <li>Check array length, a shorter length array is less than a longer length array</li>\n     *  <li>Check array contents element by element using {@link #append(char, char)}</li>\n     * </ol>\n     *\n     * @param lhs  left-hand array\n     * @param rhs  right-hand array\n     * @return this - used to chain append calls\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/CompareToBuilder.java",
        "class_name": "org.apache.commons.lang.builder.CompareToBuilder",
        "signature": "org.apache.commons.lang.builder.CompareToBuilder.append(byte[], byte[])",
        "snippet": "    public CompareToBuilder append(byte[] lhs, byte[] rhs) {\n        if (comparison != 0) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null) {\n            comparison = -1;\n            return this;\n        }\n        if (rhs == null) {\n            comparison = +1;\n            return this;\n        }\n        if (lhs.length != rhs.length) {\n            comparison = (lhs.length < rhs.length) ? -1 : +1;\n            return this;\n        }\n        for (int i = 0; i < lhs.length && comparison == 0; i++) {\n            append(lhs[i], rhs[i]);\n        }\n        return this;\n    }",
        "begin_line": 888,
        "end_line": 911,
        "comment": "\n     * <p>Appends to the <code>builder</code> the deep comparison of\n     * two <code>byte</code> arrays.</p>\n     *\n     * <ol>\n     *  <li>Check if arrays are the same using <code>==</code></li>\n     *  <li>Check if for <code>null</code>, <code>null</code> is less than non-<code>null</code></li>\n     *  <li>Check array length, a shorter length array is less than a longer length array</li>\n     *  <li>Check array contents element by element using {@link #append(byte, byte)}</li>\n     * </ol>\n     *\n     * @param lhs  left-hand array\n     * @param rhs  right-hand array\n     * @return this - used to chain append calls\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/CompareToBuilder.java",
        "class_name": "org.apache.commons.lang.builder.CompareToBuilder",
        "signature": "org.apache.commons.lang.builder.CompareToBuilder.append(double[], double[])",
        "snippet": "    public CompareToBuilder append(double[] lhs, double[] rhs) {\n        if (comparison != 0) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null) {\n            comparison = -1;\n            return this;\n        }\n        if (rhs == null) {\n            comparison = +1;\n            return this;\n        }\n        if (lhs.length != rhs.length) {\n            comparison = (lhs.length < rhs.length) ? -1 : +1;\n            return this;\n        }\n        for (int i = 0; i < lhs.length && comparison == 0; i++) {\n            append(lhs[i], rhs[i]);\n        }\n        return this;\n    }",
        "begin_line": 928,
        "end_line": 951,
        "comment": "\n     * <p>Appends to the <code>builder</code> the deep comparison of\n     * two <code>double</code> arrays.</p>\n     *\n     * <ol>\n     *  <li>Check if arrays are the same using <code>==</code></li>\n     *  <li>Check if for <code>null</code>, <code>null</code> is less than non-<code>null</code></li>\n     *  <li>Check array length, a shorter length array is less than a longer length array</li>\n     *  <li>Check array contents element by element using {@link #append(double, double)}</li>\n     * </ol>\n     *\n     * @param lhs  left-hand array\n     * @param rhs  right-hand array\n     * @return this - used to chain append calls\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/CompareToBuilder.java",
        "class_name": "org.apache.commons.lang.builder.CompareToBuilder",
        "signature": "org.apache.commons.lang.builder.CompareToBuilder.append(float[], float[])",
        "snippet": "    public CompareToBuilder append(float[] lhs, float[] rhs) {\n        if (comparison != 0) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null) {\n            comparison = -1;\n            return this;\n        }\n        if (rhs == null) {\n            comparison = +1;\n            return this;\n        }\n        if (lhs.length != rhs.length) {\n            comparison = (lhs.length < rhs.length) ? -1 : +1;\n            return this;\n        }\n        for (int i = 0; i < lhs.length && comparison == 0; i++) {\n            append(lhs[i], rhs[i]);\n        }\n        return this;\n    }",
        "begin_line": 968,
        "end_line": 991,
        "comment": "\n     * <p>Appends to the <code>builder</code> the deep comparison of\n     * two <code>float</code> arrays.</p>\n     *\n     * <ol>\n     *  <li>Check if arrays are the same using <code>==</code></li>\n     *  <li>Check if for <code>null</code>, <code>null</code> is less than non-<code>null</code></li>\n     *  <li>Check array length, a shorter length array is less than a longer length array</li>\n     *  <li>Check array contents element by element using {@link #append(float, float)}</li>\n     * </ol>\n     *\n     * @param lhs  left-hand array\n     * @param rhs  right-hand array\n     * @return this - used to chain append calls\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/CompareToBuilder.java",
        "class_name": "org.apache.commons.lang.builder.CompareToBuilder",
        "signature": "org.apache.commons.lang.builder.CompareToBuilder.append(boolean[], boolean[])",
        "snippet": "    public CompareToBuilder append(boolean[] lhs, boolean[] rhs) {\n        if (comparison != 0) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null) {\n            comparison = -1;\n            return this;\n        }\n        if (rhs == null) {\n            comparison = +1;\n            return this;\n        }\n        if (lhs.length != rhs.length) {\n            comparison = (lhs.length < rhs.length) ? -1 : +1;\n            return this;\n        }\n        for (int i = 0; i < lhs.length && comparison == 0; i++) {\n            append(lhs[i], rhs[i]);\n        }\n        return this;\n    }",
        "begin_line": 1008,
        "end_line": 1031,
        "comment": "\n     * <p>Appends to the <code>builder</code> the deep comparison of\n     * two <code>boolean</code> arrays.</p>\n     *\n     * <ol>\n     *  <li>Check if arrays are the same using <code>==</code></li>\n     *  <li>Check if for <code>null</code>, <code>null</code> is less than non-<code>null</code></li>\n     *  <li>Check array length, a shorter length array is less than a longer length array</li>\n     *  <li>Check array contents element by element using {@link #append(boolean, boolean)}</li>\n     * </ol>\n     *\n     * @param lhs  left-hand array\n     * @param rhs  right-hand array\n     * @return this - used to chain append calls\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/CompareToBuilder.java",
        "class_name": "org.apache.commons.lang.builder.CompareToBuilder",
        "signature": "org.apache.commons.lang.builder.CompareToBuilder.toComparison()",
        "snippet": "    public int toComparison() {\n        return comparison;\n    }",
        "begin_line": 1042,
        "end_line": 1044,
        "comment": "\n     * Returns a negative integer, a positive integer, or zero as\n     * the <code>builder</code> has judged the \"left-hand\" side\n     * as less than, greater than, or equal to the \"right-hand\"\n     * side.\n     * \n     * @return final comparison result\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.StandardToStringStyle()",
        "snippet": "    public StandardToStringStyle() {\n        super();\n    }",
        "begin_line": 46,
        "end_line": 48,
        "comment": "\n     * <p>Constructor.</p>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.isUseClassName()",
        "snippet": "    public boolean isUseClassName() {\n        return super.isUseClassName();\n    }",
        "begin_line": 57,
        "end_line": 59,
        "comment": "\n     * <p>Gets whether to use the class name.</p>\n     *\n     * @return the current useClassName flag\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.setUseClassName(boolean)",
        "snippet": "    public void setUseClassName(boolean useClassName) {\n        super.setUseClassName(useClassName);\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * <p>Sets whether to use the class name.</p>\n     *\n     * @param useClassName  the new useClassName flag\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.isUseShortClassName()",
        "snippet": "    public boolean isUseShortClassName() {\n        return super.isUseShortClassName();\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * <p>Gets whether to output short or long class names.</p>\n     *\n     * @return the current useShortClassName flag\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.isShortClassName()",
        "snippet": "    public boolean isShortClassName() {\n        return super.isUseShortClassName();\n    }",
        "begin_line": 89,
        "end_line": 91,
        "comment": "\n     * <p>Gets whether to output short or long class names.</p>\n     *\n     * @return the current shortClassName flag\n     * @deprecated Use {@link #isUseShortClassName()}\n     *             Method will be removed in Commons Lang 3.0.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.setUseShortClassName(boolean)",
        "snippet": "    public void setUseShortClassName(boolean useShortClassName) {\n        super.setUseShortClassName(useShortClassName);\n    }",
        "begin_line": 99,
        "end_line": 101,
        "comment": "\n     * <p>Sets whether to output short or long class names.</p>\n     *\n     * @param useShortClassName  the new useShortClassName flag\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.setShortClassName(boolean)",
        "snippet": "    public void setShortClassName(boolean shortClassName) {\n        super.setUseShortClassName(shortClassName);\n    }",
        "begin_line": 110,
        "end_line": 112,
        "comment": "\n     * <p>Sets whether to output short or long class names.</p>\n     *\n     * @param shortClassName  the new shortClassName flag\n     * @deprecated Use {@link #setUseShortClassName(boolean)}\n     *             Method will be removed in Commons Lang 3.0.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.isUseIdentityHashCode()",
        "snippet": "    public boolean isUseIdentityHashCode() {\n        return super.isUseIdentityHashCode();\n    }",
        "begin_line": 120,
        "end_line": 122,
        "comment": "\n     * <p>Gets whether to use the identity hash code.</p>\n     * @return the current useIdentityHashCode flag\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.setUseIdentityHashCode(boolean)",
        "snippet": "    public void setUseIdentityHashCode(boolean useIdentityHashCode) {\n        super.setUseIdentityHashCode(useIdentityHashCode);\n    }",
        "begin_line": 129,
        "end_line": 131,
        "comment": "\n     * <p>Sets whether to use the identity hash code.</p>\n     *\n     * @param useIdentityHashCode  the new useIdentityHashCode flag\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.isUseFieldNames()",
        "snippet": "    public boolean isUseFieldNames() {\n        return super.isUseFieldNames();\n    }",
        "begin_line": 140,
        "end_line": 142,
        "comment": "\n     * <p>Gets whether to use the field names passed in.</p>\n     *\n     * @return the current useFieldNames flag\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.setUseFieldNames(boolean)",
        "snippet": "    public void setUseFieldNames(boolean useFieldNames) {\n        super.setUseFieldNames(useFieldNames);\n    }",
        "begin_line": 149,
        "end_line": 151,
        "comment": "\n     * <p>Sets whether to use the field names passed in.</p>\n     *\n     * @param useFieldNames  the new useFieldNames flag\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.isDefaultFullDetail()",
        "snippet": "    public boolean isDefaultFullDetail() {\n        return super.isDefaultFullDetail();\n    }",
        "begin_line": 161,
        "end_line": 163,
        "comment": "\n     * <p>Gets whether to use full detail when the caller doesn't\n     * specify.</p>\n     *\n     * @return the current defaultFullDetail flag\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.setDefaultFullDetail(boolean)",
        "snippet": "    public void setDefaultFullDetail(boolean defaultFullDetail) {\n        super.setDefaultFullDetail(defaultFullDetail);\n    }",
        "begin_line": 171,
        "end_line": 173,
        "comment": "\n     * <p>Sets whether to use full detail when the caller doesn't\n     * specify.</p>\n     *\n     * @param defaultFullDetail  the new defaultFullDetail flag\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.isArrayContentDetail()",
        "snippet": "    public boolean isArrayContentDetail() {\n        return super.isArrayContentDetail();\n    }",
        "begin_line": 182,
        "end_line": 184,
        "comment": "\n     * <p>Gets whether to output array content detail.</p>\n     *\n     * @return the current array content detail setting\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.setArrayContentDetail(boolean)",
        "snippet": "    public void setArrayContentDetail(boolean arrayContentDetail) {\n        super.setArrayContentDetail(arrayContentDetail);\n    }",
        "begin_line": 191,
        "end_line": 193,
        "comment": "\n     * <p>Sets whether to output array content detail.</p>\n     *\n     * @param arrayContentDetail  the new arrayContentDetail flag\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.getArrayStart()",
        "snippet": "    public String getArrayStart() {\n        return super.getArrayStart();\n    }",
        "begin_line": 202,
        "end_line": 204,
        "comment": "\n     * <p>Gets the array start text.</p>\n     *\n     * @return the current array start text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.setArrayStart(java.lang.String)",
        "snippet": "    public void setArrayStart(String arrayStart) {\n        super.setArrayStart(arrayStart);\n    }",
        "begin_line": 214,
        "end_line": 216,
        "comment": "\n     * <p>Sets the array start text.</p>\n     *\n     * <p><code>null</code> is accepted, but will be converted\n     * to an empty String.</p>\n     *\n     * @param arrayStart  the new array start text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.getArrayEnd()",
        "snippet": "    public String getArrayEnd() {\n        return super.getArrayEnd();\n    }",
        "begin_line": 225,
        "end_line": 227,
        "comment": "\n     * <p>Gets the array end text.</p>\n     *\n     * @return the current array end text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.setArrayEnd(java.lang.String)",
        "snippet": "    public void setArrayEnd(String arrayEnd) {\n        super.setArrayEnd(arrayEnd);\n    }",
        "begin_line": 237,
        "end_line": 239,
        "comment": "\n     * <p>Sets the array end text.</p>\n     *\n     * <p><code>null</code> is accepted, but will be converted\n     * to an empty String.</p>\n     *\n     * @param arrayEnd  the new array end text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.getArraySeparator()",
        "snippet": "    public String getArraySeparator() {\n        return super.getArraySeparator();\n    }",
        "begin_line": 248,
        "end_line": 250,
        "comment": "\n     * <p>Gets the array separator text.</p>\n     *\n     * @return the current array separator text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.setArraySeparator(java.lang.String)",
        "snippet": "    public void setArraySeparator(String arraySeparator) {\n        super.setArraySeparator(arraySeparator);\n    }",
        "begin_line": 260,
        "end_line": 262,
        "comment": "\n     * <p>Sets the array separator text.</p>\n     *\n     * <p><code>null</code> is accepted, but will be converted\n     * to an empty String.</p>\n     *\n     * @param arraySeparator  the new array separator text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.getContentStart()",
        "snippet": "    public String getContentStart() {\n        return super.getContentStart();\n    }",
        "begin_line": 271,
        "end_line": 273,
        "comment": "\n     * <p>Gets the content start text.</p>\n     *\n     * @return the current content start text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.setContentStart(java.lang.String)",
        "snippet": "    public void setContentStart(String contentStart) {\n        super.setContentStart(contentStart);\n    }",
        "begin_line": 283,
        "end_line": 285,
        "comment": "\n     * <p>Sets the content start text.</p>\n     *\n     * <p><code>null</code> is accepted, but will be converted\n     * to an empty String.</p>\n     *\n     * @param contentStart  the new content start text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.getContentEnd()",
        "snippet": "    public String getContentEnd() {\n        return super.getContentEnd();\n    }",
        "begin_line": 294,
        "end_line": 296,
        "comment": "\n     * <p>Gets the content end text.</p>\n     *\n     * @return the current content end text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.setContentEnd(java.lang.String)",
        "snippet": "    public void setContentEnd(String contentEnd) {\n        super.setContentEnd(contentEnd);\n    }",
        "begin_line": 306,
        "end_line": 308,
        "comment": "\n     * <p>Sets the content end text.</p>\n     *\n     * <p><code>null</code> is accepted, but will be converted\n     * to an empty String.</p>\n     *\n     * @param contentEnd  the new content end text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.getFieldNameValueSeparator()",
        "snippet": "    public String getFieldNameValueSeparator() {\n        return super.getFieldNameValueSeparator();\n    }",
        "begin_line": 317,
        "end_line": 319,
        "comment": "\n     * <p>Gets the field name value separator text.</p>\n     *\n     * @return the current field name value separator text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.setFieldNameValueSeparator(java.lang.String)",
        "snippet": "    public void setFieldNameValueSeparator(String fieldNameValueSeparator) {\n        super.setFieldNameValueSeparator(fieldNameValueSeparator);\n    }",
        "begin_line": 329,
        "end_line": 331,
        "comment": "\n     * <p>Sets the field name value separator text.</p>\n     *\n     * <p><code>null</code> is accepted, but will be converted\n     * to an empty String.</p>\n     *\n     * @param fieldNameValueSeparator  the new field name value separator text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.getFieldSeparator()",
        "snippet": "    public String getFieldSeparator() {\n        return super.getFieldSeparator();\n    }",
        "begin_line": 340,
        "end_line": 342,
        "comment": "\n     * <p>Gets the field separator text.</p>\n     *\n     * @return the current field separator text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.setFieldSeparator(java.lang.String)",
        "snippet": "    public void setFieldSeparator(String fieldSeparator) {\n        super.setFieldSeparator(fieldSeparator);\n    }",
        "begin_line": 352,
        "end_line": 354,
        "comment": "\n     * <p>Sets the field separator text.</p>\n     *\n     * <p><code>null</code> is accepted, but will be converted\n     * to an empty String.</p>\n     *\n     * @param fieldSeparator  the new field separator text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.isFieldSeparatorAtStart()",
        "snippet": "    public boolean isFieldSeparatorAtStart() {\n        return super.isFieldSeparatorAtStart();\n    }",
        "begin_line": 365,
        "end_line": 367,
        "comment": "\n     * <p>Gets whether the field separator should be added at the start \n     * of each buffer.</p>\n     * \n     * @return the fieldSeparatorAtStart flag\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.setFieldSeparatorAtStart(boolean)",
        "snippet": "    public void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) {\n        super.setFieldSeparatorAtStart(fieldSeparatorAtStart);\n    }",
        "begin_line": 376,
        "end_line": 378,
        "comment": "\n     * <p>Sets whether the field separator should be added at the start \n     * of each buffer.</p>\n     * \n     * @param fieldSeparatorAtStart  the fieldSeparatorAtStart flag\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.isFieldSeparatorAtEnd()",
        "snippet": "    public boolean isFieldSeparatorAtEnd() {\n        return super.isFieldSeparatorAtEnd();\n    }",
        "begin_line": 389,
        "end_line": 391,
        "comment": "\n     * <p>Gets whether the field separator should be added at the end \n     * of each buffer.</p>\n     * \n     * @return fieldSeparatorAtEnd flag\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.setFieldSeparatorAtEnd(boolean)",
        "snippet": "    public void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) {\n        super.setFieldSeparatorAtEnd(fieldSeparatorAtEnd);\n    }",
        "begin_line": 400,
        "end_line": 402,
        "comment": "\n     * <p>Sets whether the field separator should be added at the end \n     * of each buffer.</p>\n     * \n     * @param fieldSeparatorAtEnd  the fieldSeparatorAtEnd flag\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.getNullText()",
        "snippet": "    public String getNullText() {\n        return super.getNullText();\n    }",
        "begin_line": 411,
        "end_line": 413,
        "comment": "\n     * <p>Gets the text to output when <code>null</code> found.</p>\n     *\n     * @return the current text to output when <code>null</code> found\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.setNullText(java.lang.String)",
        "snippet": "    public void setNullText(String nullText) {\n        super.setNullText(nullText);\n    }",
        "begin_line": 423,
        "end_line": 425,
        "comment": "\n     * <p>Sets the text to output when <code>null</code> found.</p>\n     *\n     * <p><code>null</code> is accepted, but will be converted\n     * to an empty String.</p>\n     *\n     * @param nullText  the new text to output when <code>null</code> found\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.getSizeStartText()",
        "snippet": "    public String getSizeStartText() {\n        return super.getSizeStartText();\n    }",
        "begin_line": 437,
        "end_line": 439,
        "comment": "\n     * <p>Gets the text to output when a <code>Collection</code>,\n     * <code>Map</code> or <code>Array</code> size is output.</p>\n     *\n     * <p>This is output before the size value.</p>\n     *\n     * @return the current start of size text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.setSizeStartText(java.lang.String)",
        "snippet": "    public void setSizeStartText(String sizeStartText) {\n        super.setSizeStartText(sizeStartText);\n    }",
        "begin_line": 452,
        "end_line": 454,
        "comment": "\n     * <p>Sets the start text to output when a <code>Collection</code>,\n     * <code>Map</code> or <code>Array</code> size is output.</p>\n     *\n     * <p>This is output before the size value.</p>\n     *\n     * <p><code>null</code> is accepted, but will be converted to\n     * an empty String.</p>\n     *\n     * @param sizeStartText  the new start of size text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.getSizeEndText()",
        "snippet": "    public String getSizeEndText() {\n        return super.getSizeEndText();\n    }",
        "begin_line": 466,
        "end_line": 468,
        "comment": "\n     * Gets the end text to output when a <code>Collection</code>,\n     * <code>Map</code> or <code>Array</code> size is output.</p>\n     *\n     * <p>This is output after the size value.</p>\n     *\n     * @return the current end of size text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.setSizeEndText(java.lang.String)",
        "snippet": "    public void setSizeEndText(String sizeEndText) {\n        super.setSizeEndText(sizeEndText);\n    }",
        "begin_line": 481,
        "end_line": 483,
        "comment": "\n     * <p>Sets the end text to output when a <code>Collection</code>,\n     * <code>Map</code> or <code>Array</code> size is output.</p>\n     *\n     * <p>This is output after the size value.</p>\n     *\n     * <p><code>null</code> is accepted, but will be converted\n     * to an empty String.</p>\n     *\n     * @param sizeEndText  the new end of size text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.getSummaryObjectStartText()",
        "snippet": "    public String getSummaryObjectStartText() {\n        return super.getSummaryObjectStartText();\n    }",
        "begin_line": 495,
        "end_line": 497,
        "comment": "\n     * <p>Gets the start text to output when an <code>Object</code> is\n     * output in summary mode.</p>\n     *\n     * <P>This is output before the size value.</p>\n     *\n     * @return the current start of summary text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.setSummaryObjectStartText(java.lang.String)",
        "snippet": "    public void setSummaryObjectStartText(String summaryObjectStartText) {\n        super.setSummaryObjectStartText(summaryObjectStartText);\n    }",
        "begin_line": 510,
        "end_line": 512,
        "comment": "\n     * <p>Sets the start text to output when an <code>Object</code> is\n     * output in summary mode.</p>\n     *\n     * <p>This is output before the size value.</p>\n     *\n     * <p><code>null</code> is accepted, but will be converted to\n     * an empty String.</p>\n     *\n     * @param summaryObjectStartText  the new start of summary text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.getSummaryObjectEndText()",
        "snippet": "    public String getSummaryObjectEndText() {\n        return super.getSummaryObjectEndText();\n    }",
        "begin_line": 524,
        "end_line": 526,
        "comment": "\n     * <p>Gets the end text to output when an <code>Object</code> is\n     * output in summary mode.</p>\n     *\n     * <p>This is output after the size value.</p>\n     *\n     * @return the current end of summary text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/StandardToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.StandardToStringStyle",
        "signature": "org.apache.commons.lang.builder.StandardToStringStyle.setSummaryObjectEndText(java.lang.String)",
        "snippet": "    public void setSummaryObjectEndText(String summaryObjectEndText) {\n        super.setSummaryObjectEndText(summaryObjectEndText);\n    }",
        "begin_line": 539,
        "end_line": 541,
        "comment": "\n     * <p>Sets the end text to output when an <code>Object</code> is\n     * output in summary mode.</p>\n     *\n     * <p>This is output after the size value.</p>\n     *\n     * <p><code>null</code> is accepted, but will be converted to\n     * an empty String.</p>\n     *\n     * @param summaryObjectEndText  the new end of summary text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.ToStringStyle()",
        "snippet": "    protected ToStringStyle() {\n        super();\n    }",
        "begin_line": 203,
        "end_line": 205,
        "comment": "\n     * <p>Constructor.</p>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendSuper(java.lang.StringBuffer, java.lang.String)",
        "snippet": "    public void appendSuper(StringBuffer buffer, String superToString) {\n        appendToString(buffer, superToString);\n    }",
        "begin_line": 218,
        "end_line": 220,
        "comment": "\n     * <p>Append to the <code>toString</code> the superclass toString.</p>\n     * \n     * <p>A <code>null</code> <code>superToString</code> is ignored.</p>\n     * \n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param superToString  the <code>super.toString()</code>\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendToString(java.lang.StringBuffer, java.lang.String)",
        "snippet": "    public void appendToString(StringBuffer buffer, String toString) {\n        if (toString != null) {\n            int pos1 = toString.indexOf(contentStart) + contentStart.length();\n            int pos2 = toString.lastIndexOf(contentEnd);\n            if (pos1 != pos2 && pos1 >= 0 && pos2 >= 0) {\n                String data = toString.substring(pos1, pos2);\n                if (fieldSeparatorAtStart) {\n                    removeLastFieldSeparator(buffer);\n                }\n                buffer.append(data);\n                appendFieldSeparator(buffer);\n            }\n        }\n    }",
        "begin_line": 231,
        "end_line": 244,
        "comment": "\n     * <p>Append to the <code>toString</code> another toString.</p>\n     * \n     * <p>A <code>null</code> <code>toString</code> is ignored.</p>\n     * \n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param toString  the additional <code>toString</code>\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendStart(java.lang.StringBuffer, java.lang.Object)",
        "snippet": "    public void appendStart(StringBuffer buffer, Object object) {\n        if (object != null) {\n            appendClassName(buffer, object);\n            appendIdentityHashCode(buffer, object);\n            appendContentStart(buffer);\n            if (fieldSeparatorAtStart) {\n                appendFieldSeparator(buffer);\n            }\n        }\n    }",
        "begin_line": 252,
        "end_line": 261,
        "comment": "\n     * <p>Append to the <code>toString</code> the start of data indicator.</p>\n     * \n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param object  the <code>Object</code> to build a <code>toString</code> for\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendEnd(java.lang.StringBuffer, java.lang.Object)",
        "snippet": "    public void appendEnd(StringBuffer buffer, Object object) {\n        if (this.fieldSeparatorAtEnd == false) {\n            removeLastFieldSeparator(buffer);\n        }\n        appendContentEnd(buffer);\n    }",
        "begin_line": 270,
        "end_line": 275,
        "comment": "\n     * <p>Append to the <code>toString</code> the end of data indicator.</p>\n     * \n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param object  the <code>Object</code> to build a\n     *  <code>toString</code> for.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.removeLastFieldSeparator(java.lang.StringBuffer)",
        "snippet": "    protected void removeLastFieldSeparator(StringBuffer buffer) {\n        int len = buffer.length();\n        int sepLen = fieldSeparator.length();\n        if (len > 0 && sepLen > 0 && len >= sepLen) {\n            boolean match = true;\n            for (int i = 0; i < sepLen; i++) {\n                if (buffer.charAt(len - 1 - i) != fieldSeparator.charAt(sepLen - 1 - i)) {\n                    match = false;\n                    break;\n                }\n            }\n            if (match) {\n                buffer.setLength(len - sepLen);\n            }\n        }\n    }",
        "begin_line": 283,
        "end_line": 298,
        "comment": "\n     * <p>Remove the last field separator from the buffer.</p>\n     * \n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, java.lang.Object, java.lang.Boolean)",
        "snippet": "    public void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail) {\n        appendFieldStart(buffer, fieldName);\n\n        if (value == null) {\n            appendNullText(buffer, fieldName);\n\n        } else {\n            appendInternal(buffer, fieldName, value, isFullDetail(fullDetail));\n        }\n\n        appendFieldEnd(buffer, fieldName);\n    }",
        "begin_line": 313,
        "end_line": 324,
        "comment": "\n     * <p>Append to the <code>toString</code> an <code>Object</code>\n     * value, printing the full <code>toString</code> of the\n     * <code>Object</code> passed in.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name\n     * @param value  the value to add to the <code>toString</code>\n     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n     *  for summary info, <code>null</code> for style decides\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendInternal(java.lang.StringBuffer, java.lang.String, java.lang.Object, boolean)",
        "snippet": "    protected void appendInternal(StringBuffer buffer, String fieldName, Object value, boolean detail) {\n        if (ReflectionToStringBuilder.isRegistered(value)\n            && !(value instanceof Number || value instanceof Boolean || value instanceof Character)) {\n            ObjectUtils.appendIdentityToString(buffer, value);\n\n        } else if (value instanceof Collection) {\n            if (detail) {\n                appendDetail(buffer, fieldName, (Collection) value);\n            } else {\n                appendSummarySize(buffer, fieldName, ((Collection) value).size());\n            }\n\n        } else if (value instanceof Map) {\n            if (detail) {\n                appendDetail(buffer, fieldName, (Map) value);\n            } else {\n                appendSummarySize(buffer, fieldName, ((Map) value).size());\n            }\n\n        } else if (value instanceof long[]) {\n            if (detail) {\n                appendDetail(buffer, fieldName, (long[]) value);\n            } else {\n                appendSummary(buffer, fieldName, (long[]) value);\n            }\n\n        } else if (value instanceof int[]) {\n            if (detail) {\n                appendDetail(buffer, fieldName, (int[]) value);\n            } else {\n                appendSummary(buffer, fieldName, (int[]) value);\n            }\n\n        } else if (value instanceof short[]) {\n            if (detail) {\n                appendDetail(buffer, fieldName, (short[]) value);\n            } else {\n                appendSummary(buffer, fieldName, (short[]) value);\n            }\n\n        } else if (value instanceof byte[]) {\n            if (detail) {\n                appendDetail(buffer, fieldName, (byte[]) value);\n            } else {\n                appendSummary(buffer, fieldName, (byte[]) value);\n            }\n\n        } else if (value instanceof char[]) {\n            if (detail) {\n                appendDetail(buffer, fieldName, (char[]) value);\n            } else {\n                appendSummary(buffer, fieldName, (char[]) value);\n            }\n\n        } else if (value instanceof double[]) {\n            if (detail) {\n                appendDetail(buffer, fieldName, (double[]) value);\n            } else {\n                appendSummary(buffer, fieldName, (double[]) value);\n            }\n\n        } else if (value instanceof float[]) {\n            if (detail) {\n                appendDetail(buffer, fieldName, (float[]) value);\n            } else {\n                appendSummary(buffer, fieldName, (float[]) value);\n            }\n\n        } else if (value instanceof boolean[]) {\n            if (detail) {\n                appendDetail(buffer, fieldName, (boolean[]) value);\n            } else {\n                appendSummary(buffer, fieldName, (boolean[]) value);\n            }\n\n        } else if (value.getClass().isArray()) {\n            if (detail) {\n                appendDetail(buffer, fieldName, (Object[]) value);\n            } else {\n                appendSummary(buffer, fieldName, (Object[]) value);\n            }\n\n        } else {\n            if (detail) {\n                appendDetail(buffer, fieldName, value);\n            } else {\n                appendSummary(buffer, fieldName, value);\n            }\n        }\n    }",
        "begin_line": 345,
        "end_line": 434,
        "comment": "\n     * <p>Append to the <code>toString</code> an <code>Object</code>,\n     * correctly interpreting its type.</p>\n     *\n     * <p>This method performs the main lookup by Class type to correctly\n     * route arrays, <code>Collections</code>, <code>Maps</code> and\n     * <code>Objects</code> to the appropriate method.</p>\n     *\n     * <p>Either detail or summary views can be specified.</p>\n     *\n     * <p>If a cycle is detected, an object will be appended with the\n     * <code>Object.toString()</code> format.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param value  the value to add to the <code>toString</code>,\n     *  not <code>null</code>\n     * @param detail  output detail or not\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, java.lang.Object)",
        "snippet": "    protected void appendDetail(StringBuffer buffer, String fieldName, Object value) {\n        buffer.append(value);\n    }",
        "begin_line": 445,
        "end_line": 447,
        "comment": "\n     * <p>Append to the <code>toString</code> an <code>Object</code>\n     * value, printing the full detail of the <code>Object</code>.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param value  the value to add to the <code>toString</code>,\n     *  not <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, java.util.Collection)",
        "snippet": "    protected void appendDetail(StringBuffer buffer, String fieldName, Collection coll) {\n        buffer.append(coll);\n    }",
        "begin_line": 457,
        "end_line": 459,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>Collection</code>.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param coll  the <code>Collection</code> to add to the\n     *  <code>toString</code>, not <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, java.util.Map)",
        "snippet": "    protected void appendDetail(StringBuffer buffer, String fieldName, Map map) {\n        buffer.append(map);\n    }",
        "begin_line": 469,
        "end_line": 471,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>Map<code>.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param map  the <code>Map</code> to add to the <code>toString</code>,\n     *  not <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendSummary(java.lang.StringBuffer, java.lang.String, java.lang.Object)",
        "snippet": "    protected void appendSummary(StringBuffer buffer, String fieldName, Object value) {\n        buffer.append(summaryObjectStartText);\n        buffer.append(getShortClassName(value.getClass()));\n        buffer.append(summaryObjectEndText);\n    }",
        "begin_line": 482,
        "end_line": 486,
        "comment": "\n     * <p>Append to the <code>toString</code> an <code>Object</code>\n     * value, printing a summary of the <code>Object</code>.</P>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param value  the value to add to the <code>toString</code>,\n     *  not <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, long)",
        "snippet": "    public void append(StringBuffer buffer, String fieldName, long value) {\n        appendFieldStart(buffer, fieldName);\n        appendDetail(buffer, fieldName, value);\n        appendFieldEnd(buffer, fieldName);\n    }",
        "begin_line": 498,
        "end_line": 502,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>long</code>\n     * value.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name\n     * @param value  the value to add to the <code>toString</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, long)",
        "snippet": "    protected void appendDetail(StringBuffer buffer, String fieldName, long value) {\n        buffer.append(value);\n    }",
        "begin_line": 512,
        "end_line": 514,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>long</code>\n     * value.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param value  the value to add to the <code>toString</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, int)",
        "snippet": "    public void append(StringBuffer buffer, String fieldName, int value) {\n        appendFieldStart(buffer, fieldName);\n        appendDetail(buffer, fieldName, value);\n        appendFieldEnd(buffer, fieldName);\n    }",
        "begin_line": 526,
        "end_line": 530,
        "comment": "\n     * <p>Append to the <code>toString</code> an <code>int</code>\n     * value.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name\n     * @param value  the value to add to the <code>toString</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, int)",
        "snippet": "    protected void appendDetail(StringBuffer buffer, String fieldName, int value) {\n        buffer.append(value);\n    }",
        "begin_line": 540,
        "end_line": 542,
        "comment": "\n     * <p>Append to the <code>toString</code> an <code>int</code>\n     * value.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param value  the value to add to the <code>toString</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, short)",
        "snippet": "    public void append(StringBuffer buffer, String fieldName, short value) {\n        appendFieldStart(buffer, fieldName);\n        appendDetail(buffer, fieldName, value);\n        appendFieldEnd(buffer, fieldName);\n    }",
        "begin_line": 554,
        "end_line": 558,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>short</code>\n     * value.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name\n     * @param value  the value to add to the <code>toString</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, short)",
        "snippet": "    protected void appendDetail(StringBuffer buffer, String fieldName, short value) {\n        buffer.append(value);\n    }",
        "begin_line": 568,
        "end_line": 570,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>short</code>\n     * value.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param value  the value to add to the <code>toString</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, byte)",
        "snippet": "    public void append(StringBuffer buffer, String fieldName, byte value) {\n        appendFieldStart(buffer, fieldName);\n        appendDetail(buffer, fieldName, value);\n        appendFieldEnd(buffer, fieldName);\n    }",
        "begin_line": 582,
        "end_line": 586,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>byte</code>\n     * value.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name\n     * @param value  the value to add to the <code>toString</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, byte)",
        "snippet": "    protected void appendDetail(StringBuffer buffer, String fieldName, byte value) {\n        buffer.append(value);\n    }",
        "begin_line": 596,
        "end_line": 598,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>byte</code>\n     * value.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param value  the value to add to the <code>toString</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, char)",
        "snippet": "    public void append(StringBuffer buffer, String fieldName, char value) {\n        appendFieldStart(buffer, fieldName);\n        appendDetail(buffer, fieldName, value);\n        appendFieldEnd(buffer, fieldName);\n    }",
        "begin_line": 610,
        "end_line": 614,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>char</code>\n     * value.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name\n     * @param value  the value to add to the <code>toString</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, char)",
        "snippet": "    protected void appendDetail(StringBuffer buffer, String fieldName, char value) {\n        buffer.append(value);\n    }",
        "begin_line": 624,
        "end_line": 626,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>char</code>\n     * value.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param value  the value to add to the <code>toString</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, double)",
        "snippet": "    public void append(StringBuffer buffer, String fieldName, double value) {\n        appendFieldStart(buffer, fieldName);\n        appendDetail(buffer, fieldName, value);\n        appendFieldEnd(buffer, fieldName);\n    }",
        "begin_line": 638,
        "end_line": 642,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>double</code>\n     * value.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name\n     * @param value  the value to add to the <code>toString</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, double)",
        "snippet": "    protected void appendDetail(StringBuffer buffer, String fieldName, double value) {\n        buffer.append(value);\n    }",
        "begin_line": 652,
        "end_line": 654,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>double</code>\n     * value.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param value  the value to add to the <code>toString</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, float)",
        "snippet": "    public void append(StringBuffer buffer, String fieldName, float value) {\n        appendFieldStart(buffer, fieldName);\n        appendDetail(buffer, fieldName, value);\n        appendFieldEnd(buffer, fieldName);\n    }",
        "begin_line": 666,
        "end_line": 670,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>float</code>\n     * value.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name\n     * @param value  the value to add to the <code>toString</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, float)",
        "snippet": "    protected void appendDetail(StringBuffer buffer, String fieldName, float value) {\n        buffer.append(value);\n    }",
        "begin_line": 680,
        "end_line": 682,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>float</code>\n     * value.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param value  the value to add to the <code>toString</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, boolean)",
        "snippet": "    public void append(StringBuffer buffer, String fieldName, boolean value) {\n        appendFieldStart(buffer, fieldName);\n        appendDetail(buffer, fieldName, value);\n        appendFieldEnd(buffer, fieldName);\n    }",
        "begin_line": 694,
        "end_line": 698,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>boolean</code>\n     * value.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name\n     * @param value  the value to add to the <code>toString</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, boolean)",
        "snippet": "    protected void appendDetail(StringBuffer buffer, String fieldName, boolean value) {\n        buffer.append(value);\n    }",
        "begin_line": 708,
        "end_line": 710,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>boolean</code>\n     * value.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param value  the value to add to the <code>toString</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, java.lang.Object[], java.lang.Boolean)",
        "snippet": "    public void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail) {\n        appendFieldStart(buffer, fieldName);\n\n        if (array == null) {\n            appendNullText(buffer, fieldName);\n\n        } else if (isFullDetail(fullDetail)) {\n            appendDetail(buffer, fieldName, array);\n\n        } else {\n            appendSummary(buffer, fieldName, array);\n        }\n\n        appendFieldEnd(buffer, fieldName);\n    }",
        "begin_line": 722,
        "end_line": 736,
        "comment": "\n     * <p>Append to the <code>toString</code> an <code>Object</code>\n     * array.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name\n     * @param array  the array to add to the toString\n     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n     *  for summary info, <code>null</code> for style decides\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, java.lang.Object[])",
        "snippet": "    protected void appendDetail(StringBuffer buffer, String fieldName, Object[] array) {\n        buffer.append(arrayStart);\n        for (int i = 0; i < array.length; i++) {\n            Object item = array[i];\n            if (i > 0) {\n                buffer.append(arraySeparator);\n            }\n            if (item == null) {\n                appendNullText(buffer, fieldName);\n\n            } else {\n                appendInternal(buffer, fieldName, item, arrayContentDetail);\n            }\n        }\n        buffer.append(arrayEnd);\n    }",
        "begin_line": 749,
        "end_line": 764,
        "comment": "\n     * <p>Append to the <code>toString</code> the detail of an\n     * <code>Object</code> array.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param array  the array to add to the <code>toString</code>,\n     *  not <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.reflectionAppendArrayDetail(java.lang.StringBuffer, java.lang.String, java.lang.Object)",
        "snippet": "    protected void reflectionAppendArrayDetail(StringBuffer buffer, String fieldName, Object array) {\n        buffer.append(arrayStart);\n        int length = Array.getLength(array);\n        for (int i = 0; i < length; i++) {\n            Object item = Array.get(array, i);\n            if (i > 0) {\n                buffer.append(arraySeparator);\n            }\n            if (item == null) {\n                appendNullText(buffer, fieldName);\n\n            } else {\n                appendInternal(buffer, fieldName, item, arrayContentDetail);\n            }\n        }\n        buffer.append(arrayEnd);\n    }",
        "begin_line": 775,
        "end_line": 791,
        "comment": "\n     * <p>Append to the <code>toString</code> the detail of an array type.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param array  the array to add to the <code>toString</code>,\n     *  not <code>null</code>\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendSummary(java.lang.StringBuffer, java.lang.String, java.lang.Object[])",
        "snippet": "    protected void appendSummary(StringBuffer buffer, String fieldName, Object[] array) {\n        appendSummarySize(buffer, fieldName, array.length);\n    }",
        "begin_line": 802,
        "end_line": 804,
        "comment": "\n     * <p>Append to the <code>toString</code> a summary of an\n     * <code>Object</code> array.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param array  the array to add to the <code>toString</code>,\n     *  not <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, long[], java.lang.Boolean)",
        "snippet": "    public void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail) {\n        appendFieldStart(buffer, fieldName);\n\n        if (array == null) {\n            appendNullText(buffer, fieldName);\n\n        } else if (isFullDetail(fullDetail)) {\n            appendDetail(buffer, fieldName, array);\n\n        } else {\n            appendSummary(buffer, fieldName, array);\n        }\n\n        appendFieldEnd(buffer, fieldName);\n    }",
        "begin_line": 818,
        "end_line": 832,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>long</code>\n     * array.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name\n     * @param array  the array to add to the <code>toString</code>\n     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n     *  for summary info, <code>null</code> for style decides\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, long[])",
        "snippet": "    protected void appendDetail(StringBuffer buffer, String fieldName, long[] array) {\n        buffer.append(arrayStart);\n        for (int i = 0; i < array.length; i++) {\n            if (i > 0) {\n                buffer.append(arraySeparator);\n            }\n            appendDetail(buffer, fieldName, array[i]);\n        }\n        buffer.append(arrayEnd);\n    }",
        "begin_line": 843,
        "end_line": 852,
        "comment": "\n     * <p>Append to the <code>toString</code> the detail of a\n     * <code>long</code> array.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param array  the array to add to the <code>toString</code>,\n     *  not <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendSummary(java.lang.StringBuffer, java.lang.String, long[])",
        "snippet": "    protected void appendSummary(StringBuffer buffer, String fieldName, long[] array) {\n        appendSummarySize(buffer, fieldName, array.length);\n    }",
        "begin_line": 863,
        "end_line": 865,
        "comment": "\n     * <p>Append to the <code>toString</code> a summary of a\n     * <code>long</code> array.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param array  the array to add to the <code>toString</code>,\n     *  not <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, int[], java.lang.Boolean)",
        "snippet": "    public void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail) {\n        appendFieldStart(buffer, fieldName);\n\n        if (array == null) {\n            appendNullText(buffer, fieldName);\n\n        } else if (isFullDetail(fullDetail)) {\n            appendDetail(buffer, fieldName, array);\n\n        } else {\n            appendSummary(buffer, fieldName, array);\n        }\n\n        appendFieldEnd(buffer, fieldName);\n    }",
        "begin_line": 879,
        "end_line": 893,
        "comment": "\n     * <p>Append to the <code>toString</code> an <code>int</code>\n     * array.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name\n     * @param array  the array to add to the <code>toString</code>\n     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n     *  for summary info, <code>null</code> for style decides\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, int[])",
        "snippet": "    protected void appendDetail(StringBuffer buffer, String fieldName, int[] array) {\n        buffer.append(arrayStart);\n        for (int i = 0; i < array.length; i++) {\n            if (i > 0) {\n                buffer.append(arraySeparator);\n            }\n            appendDetail(buffer, fieldName, array[i]);\n        }\n        buffer.append(arrayEnd);\n    }",
        "begin_line": 904,
        "end_line": 913,
        "comment": "\n     * <p>Append to the <code>toString</code> the detail of an\n     * <code>int</code> array.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param array  the array to add to the <code>toString</code>,\n     *  not <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendSummary(java.lang.StringBuffer, java.lang.String, int[])",
        "snippet": "    protected void appendSummary(StringBuffer buffer, String fieldName, int[] array) {\n        appendSummarySize(buffer, fieldName, array.length);\n    }",
        "begin_line": 924,
        "end_line": 926,
        "comment": "\n     * <p>Append to the <code>toString</code> a summary of an\n     * <code>int</code> array.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param array  the array to add to the <code>toString</code>,\n     *  not <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, short[], java.lang.Boolean)",
        "snippet": "    public void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail) {\n        appendFieldStart(buffer, fieldName);\n\n        if (array == null) {\n            appendNullText(buffer, fieldName);\n\n        } else if (isFullDetail(fullDetail)) {\n            appendDetail(buffer, fieldName, array);\n\n        } else {\n            appendSummary(buffer, fieldName, array);\n        }\n\n        appendFieldEnd(buffer, fieldName);\n    }",
        "begin_line": 940,
        "end_line": 954,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>short</code>\n     * array.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name\n     * @param array  the array to add to the <code>toString</code>\n     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n     *  for summary info, <code>null</code> for style decides\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, short[])",
        "snippet": "    protected void appendDetail(StringBuffer buffer, String fieldName, short[] array) {\n        buffer.append(arrayStart);\n        for (int i = 0; i < array.length; i++) {\n            if (i > 0) {\n                buffer.append(arraySeparator);\n            }\n            appendDetail(buffer, fieldName, array[i]);\n        }\n        buffer.append(arrayEnd);\n    }",
        "begin_line": 965,
        "end_line": 974,
        "comment": "\n     * <p>Append to the <code>toString</code> the detail of a\n     * <code>short</code> array.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param array  the array to add to the <code>toString</code>,\n     *  not <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendSummary(java.lang.StringBuffer, java.lang.String, short[])",
        "snippet": "    protected void appendSummary(StringBuffer buffer, String fieldName, short[] array) {\n        appendSummarySize(buffer, fieldName, array.length);\n    }",
        "begin_line": 985,
        "end_line": 987,
        "comment": "\n     * <p>Append to the <code>toString</code> a summary of a\n     * <code>short</code> array.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param array  the array to add to the <code>toString</code>,\n     *  not <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, byte[], java.lang.Boolean)",
        "snippet": "    public void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail) {\n        appendFieldStart(buffer, fieldName);\n\n        if (array == null) {\n            appendNullText(buffer, fieldName);\n\n        } else if (isFullDetail(fullDetail)) {\n            appendDetail(buffer, fieldName, array);\n\n        } else {\n            appendSummary(buffer, fieldName, array);\n        }\n\n        appendFieldEnd(buffer, fieldName);\n    }",
        "begin_line": 1001,
        "end_line": 1015,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>byte</code>\n     * array.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name\n     * @param array  the array to add to the <code>toString</code>\n     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n     *  for summary info, <code>null</code> for style decides\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, byte[])",
        "snippet": "    protected void appendDetail(StringBuffer buffer, String fieldName, byte[] array) {\n        buffer.append(arrayStart);\n        for (int i = 0; i < array.length; i++) {\n            if (i > 0) {\n                buffer.append(arraySeparator);\n            }\n            appendDetail(buffer, fieldName, array[i]);\n        }\n        buffer.append(arrayEnd);\n    }",
        "begin_line": 1026,
        "end_line": 1035,
        "comment": "\n     * <p>Append to the <code>toString</code> the detail of a\n     * <code>byte</code> array.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param array  the array to add to the <code>toString</code>,\n     *  not <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendSummary(java.lang.StringBuffer, java.lang.String, byte[])",
        "snippet": "    protected void appendSummary(StringBuffer buffer, String fieldName, byte[] array) {\n        appendSummarySize(buffer, fieldName, array.length);\n    }",
        "begin_line": 1046,
        "end_line": 1048,
        "comment": "\n     * <p>Append to the <code>toString</code> a summary of a\n     * <code>byte</code> array.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param array  the array to add to the <code>toString</code>,\n     *  not <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, char[], java.lang.Boolean)",
        "snippet": "    public void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail) {\n        appendFieldStart(buffer, fieldName);\n\n        if (array == null) {\n            appendNullText(buffer, fieldName);\n\n        } else if (isFullDetail(fullDetail)) {\n            appendDetail(buffer, fieldName, array);\n\n        } else {\n            appendSummary(buffer, fieldName, array);\n        }\n\n        appendFieldEnd(buffer, fieldName);\n    }",
        "begin_line": 1062,
        "end_line": 1076,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>char</code>\n     * array.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name\n     * @param array  the array to add to the <code>toString</code>\n     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n     *  for summary info, <code>null</code> for style decides\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, char[])",
        "snippet": "    protected void appendDetail(StringBuffer buffer, String fieldName, char[] array) {\n        buffer.append(arrayStart);\n        for (int i = 0; i < array.length; i++) {\n            if (i > 0) {\n                buffer.append(arraySeparator);\n            }\n            appendDetail(buffer, fieldName, array[i]);\n        }\n        buffer.append(arrayEnd);\n    }",
        "begin_line": 1087,
        "end_line": 1096,
        "comment": "\n     * <p>Append to the <code>toString</code> the detail of a\n     * <code>char</code> array.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param array  the array to add to the <code>toString</code>,\n     *  not <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendSummary(java.lang.StringBuffer, java.lang.String, char[])",
        "snippet": "    protected void appendSummary(StringBuffer buffer, String fieldName, char[] array) {\n        appendSummarySize(buffer, fieldName, array.length);\n    }",
        "begin_line": 1107,
        "end_line": 1109,
        "comment": "\n     * <p>Append to the <code>toString</code> a summary of a\n     * <code>char</code> array.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param array  the array to add to the <code>toString</code>,\n     *  not <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, double[], java.lang.Boolean)",
        "snippet": "    public void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail) {\n        appendFieldStart(buffer, fieldName);\n\n        if (array == null) {\n            appendNullText(buffer, fieldName);\n\n        } else if (isFullDetail(fullDetail)) {\n            appendDetail(buffer, fieldName, array);\n\n        } else {\n            appendSummary(buffer, fieldName, array);\n        }\n\n        appendFieldEnd(buffer, fieldName);\n    }",
        "begin_line": 1123,
        "end_line": 1137,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>double</code>\n     * array.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name\n     * @param array  the array to add to the toString\n     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n     *  for summary info, <code>null</code> for style decides\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, double[])",
        "snippet": "    protected void appendDetail(StringBuffer buffer, String fieldName, double[] array) {\n        buffer.append(arrayStart);\n        for (int i = 0; i < array.length; i++) {\n            if (i > 0) {\n                buffer.append(arraySeparator);\n            }\n            appendDetail(buffer, fieldName, array[i]);\n        }\n        buffer.append(arrayEnd);\n    }",
        "begin_line": 1148,
        "end_line": 1157,
        "comment": "\n     * <p>Append to the <code>toString</code> the detail of a\n     * <code>double</code> array.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param array  the array to add to the <code>toString</code>,\n     *  not <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendSummary(java.lang.StringBuffer, java.lang.String, double[])",
        "snippet": "    protected void appendSummary(StringBuffer buffer, String fieldName, double[] array) {\n        appendSummarySize(buffer, fieldName, array.length);\n    }",
        "begin_line": 1168,
        "end_line": 1170,
        "comment": "\n     * <p>Append to the <code>toString</code> a summary of a\n     * <code>double</code> array.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param array  the array to add to the <code>toString</code>,\n     *  not <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, float[], java.lang.Boolean)",
        "snippet": "    public void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail) {\n        appendFieldStart(buffer, fieldName);\n\n        if (array == null) {\n            appendNullText(buffer, fieldName);\n\n        } else if (isFullDetail(fullDetail)) {\n            appendDetail(buffer, fieldName, array);\n\n        } else {\n            appendSummary(buffer, fieldName, array);\n        }\n\n        appendFieldEnd(buffer, fieldName);\n    }",
        "begin_line": 1184,
        "end_line": 1198,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>float</code>\n     * array.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name\n     * @param array  the array to add to the toString\n     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n     *  for summary info, <code>null</code> for style decides\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, float[])",
        "snippet": "    protected void appendDetail(StringBuffer buffer, String fieldName, float[] array) {\n        buffer.append(arrayStart);\n        for (int i = 0; i < array.length; i++) {\n            if (i > 0) {\n                buffer.append(arraySeparator);\n            }\n            appendDetail(buffer, fieldName, array[i]);\n        }\n        buffer.append(arrayEnd);\n    }",
        "begin_line": 1209,
        "end_line": 1218,
        "comment": "\n     * <p>Append to the <code>toString</code> the detail of a\n     * <code>float</code> array.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param array  the array to add to the <code>toString</code>,\n     *  not <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendSummary(java.lang.StringBuffer, java.lang.String, float[])",
        "snippet": "    protected void appendSummary(StringBuffer buffer, String fieldName, float[] array) {\n        appendSummarySize(buffer, fieldName, array.length);\n    }",
        "begin_line": 1229,
        "end_line": 1231,
        "comment": "\n     * <p>Append to the <code>toString</code> a summary of a\n     * <code>float</code> array.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param array  the array to add to the <code>toString</code>,\n     *  not <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, boolean[], java.lang.Boolean)",
        "snippet": "    public void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail) {\n        appendFieldStart(buffer, fieldName);\n\n        if (array == null) {\n            appendNullText(buffer, fieldName);\n\n        } else if (isFullDetail(fullDetail)) {\n            appendDetail(buffer, fieldName, array);\n\n        } else {\n            appendSummary(buffer, fieldName, array);\n        }\n\n        appendFieldEnd(buffer, fieldName);\n    }",
        "begin_line": 1245,
        "end_line": 1259,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>boolean</code>\n     * array.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name\n     * @param array  the array to add to the toString\n     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n     *  for summary info, <code>null</code> for style decides\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, boolean[])",
        "snippet": "    protected void appendDetail(StringBuffer buffer, String fieldName, boolean[] array) {\n        buffer.append(arrayStart);\n        for (int i = 0; i < array.length; i++) {\n            if (i > 0) {\n                buffer.append(arraySeparator);\n            }\n            appendDetail(buffer, fieldName, array[i]);\n        }\n        buffer.append(arrayEnd);\n    }",
        "begin_line": 1270,
        "end_line": 1279,
        "comment": "\n     * <p>Append to the <code>toString</code> the detail of a\n     * <code>boolean</code> array.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param array  the array to add to the <code>toString</code>,\n     *  not <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendSummary(java.lang.StringBuffer, java.lang.String, boolean[])",
        "snippet": "    protected void appendSummary(StringBuffer buffer, String fieldName, boolean[] array) {\n        appendSummarySize(buffer, fieldName, array.length);\n    }",
        "begin_line": 1290,
        "end_line": 1292,
        "comment": "\n     * <p>Append to the <code>toString</code> a summary of a\n     * <code>boolean</code> array.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param array  the array to add to the <code>toString</code>,\n     *  not <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendClassName(java.lang.StringBuffer, java.lang.Object)",
        "snippet": "    protected void appendClassName(StringBuffer buffer, Object object) {\n        if (useClassName && object != null) {\n            if (useShortClassName) {\n                buffer.append(getShortClassName(object.getClass()));\n            } else {\n                buffer.append(object.getClass().getName());\n            }\n        }\n    }",
        "begin_line": 1302,
        "end_line": 1310,
        "comment": "\n     * <p>Append to the <code>toString</code> the class name.</p>\n     * \n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param object  the <code>Object</code> whose name to output\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendIdentityHashCode(java.lang.StringBuffer, java.lang.Object)",
        "snippet": "    protected void appendIdentityHashCode(StringBuffer buffer, Object object) {\n        if (this.isUseIdentityHashCode() && object!=null) {\n            buffer.append('@');\n            buffer.append(Integer.toHexString(System.identityHashCode(object)));\n        }\n    }",
        "begin_line": 1318,
        "end_line": 1323,
        "comment": "\n     * <p>Append the {@link System#identityHashCode(java.lang.Object)}.</p>\n     * \n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param object  the <code>Object</code> whose id to output\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendContentStart(java.lang.StringBuffer)",
        "snippet": "    protected void appendContentStart(StringBuffer buffer) {\n        buffer.append(contentStart);\n    }",
        "begin_line": 1330,
        "end_line": 1332,
        "comment": "\n     * <p>Append to the <code>toString</code> the content start.</p>\n     * \n     * @param buffer  the <code>StringBuffer</code> to populate\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendContentEnd(java.lang.StringBuffer)",
        "snippet": "    protected void appendContentEnd(StringBuffer buffer) {\n        buffer.append(contentEnd);\n    }",
        "begin_line": 1339,
        "end_line": 1341,
        "comment": "\n     * <p>Append to the <code>toString</code> the content end.</p>\n     * \n     * @param buffer  the <code>StringBuffer</code> to populate\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendNullText(java.lang.StringBuffer, java.lang.String)",
        "snippet": "    protected void appendNullText(StringBuffer buffer, String fieldName) {\n        buffer.append(nullText);\n    }",
        "begin_line": 1351,
        "end_line": 1353,
        "comment": "\n     * <p>Append to the <code>toString</code> an indicator for <code>null</code>.</p>\n     *\n     * <p>The default indicator is <code>'&lt;null&gt;'</code>.</p>\n     * \n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendFieldSeparator(java.lang.StringBuffer)",
        "snippet": "    protected void appendFieldSeparator(StringBuffer buffer) {\n        buffer.append(fieldSeparator);\n    }",
        "begin_line": 1360,
        "end_line": 1362,
        "comment": "\n     * <p>Append to the <code>toString</code> the field separator.</p>\n     * \n     * @param buffer  the <code>StringBuffer</code> to populate\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendFieldStart(java.lang.StringBuffer, java.lang.String)",
        "snippet": "    protected void appendFieldStart(StringBuffer buffer, String fieldName) {\n        if (useFieldNames && fieldName != null) {\n            buffer.append(fieldName);\n            buffer.append(fieldNameValueSeparator);\n        }\n    }",
        "begin_line": 1370,
        "end_line": 1375,
        "comment": "\n     * <p>Append to the <code>toString</code> the field start.</p>\n     * \n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendFieldEnd(java.lang.StringBuffer, java.lang.String)",
        "snippet": "    protected void appendFieldEnd(StringBuffer buffer, String fieldName) {\n        appendFieldSeparator(buffer);\n    }",
        "begin_line": 1383,
        "end_line": 1385,
        "comment": "\n     * <p>Append to the <code>toString<code> the field end.</p>\n     * \n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.appendSummarySize(java.lang.StringBuffer, java.lang.String, int)",
        "snippet": "    protected void appendSummarySize(StringBuffer buffer, String fieldName, int size) {\n        buffer.append(sizeStartText);\n        buffer.append(size);\n        buffer.append(sizeEndText);\n    }",
        "begin_line": 1402,
        "end_line": 1406,
        "comment": "\n     * <p>Append to the <code>toString</code> a size summary.</p>\n     *\n     * <p>The size summary is used to summarize the contents of\n     * <code>Collections</code>, <code>Maps</code> and arrays.</p>\n     *\n     * <p>The output consists of a prefix, the passed in size\n     * and a suffix.</p>\n     *\n     * <p>The default format is <code>'&lt;size=n&gt;'<code>.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param size  the size to append\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.isFullDetail(java.lang.Boolean)",
        "snippet": "    protected boolean isFullDetail(Boolean fullDetailRequest) {\n        if (fullDetailRequest == null) {\n            return defaultFullDetail;\n        }\n        return fullDetailRequest.booleanValue();\n    }",
        "begin_line": 1422,
        "end_line": 1427,
        "comment": "\n     * <p>Is this field to be output in full detail.</p>\n     *\n     * <p>This method converts a detail request into a detail level.\n     * The calling code may request full detail (<code>true</code>),\n     * but a subclass might ignore that and always return\n     * <code>false</code>. The calling code may pass in\n     * <code>null</code> indicating that it doesn't care about\n     * the detail level. In this case the default detail level is\n     * used.</p>\n     * \n     * @param fullDetailRequest  the detail level requested\n     * @return whether full detail is to be shown\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.getShortClassName(java.lang.Class)",
        "snippet": "    protected String getShortClassName(Class cls) {\n        return ClassUtils.getShortClassName(cls);\n    }",
        "begin_line": 1438,
        "end_line": 1440,
        "comment": "\n     * <p>Gets the short class name for a class.</p>\n     *\n     * <p>The short class name is the classname excluding\n     * the package name.</p>\n     *\n     * @param cls  the <code>Class</code> to get the short name of\n     * @return the short name\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.isUseClassName()",
        "snippet": "    protected boolean isUseClassName() {\n        return useClassName;\n    }",
        "begin_line": 1452,
        "end_line": 1454,
        "comment": "\n     * <p>Gets whether to use the class name.</p>\n     *\n     * @return the current useClassName flag\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.setUseClassName(boolean)",
        "snippet": "    protected void setUseClassName(boolean useClassName) {\n        this.useClassName = useClassName;\n    }",
        "begin_line": 1461,
        "end_line": 1463,
        "comment": "\n     * <p>Sets whether to use the class name.</p>\n     *\n     * @param useClassName  the new useClassName flag\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.isUseShortClassName()",
        "snippet": "    protected boolean isUseShortClassName() {\n        return useShortClassName;\n    }",
        "begin_line": 1473,
        "end_line": 1475,
        "comment": "\n     * <p>Gets whether to output short or long class names.</p>\n     *\n     * @return the current useShortClassName flag\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.isShortClassName()",
        "snippet": "    protected boolean isShortClassName() {\n        return useShortClassName;\n    }",
        "begin_line": 1484,
        "end_line": 1486,
        "comment": "\n     * <p>Gets whether to output short or long class names.</p>\n     *\n     * @return the current shortClassName flag\n     * @deprecated Use {@link #isUseShortClassName()}\n     *             Method will be removed in Commons Lang 3.0.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.setUseShortClassName(boolean)",
        "snippet": "    protected void setUseShortClassName(boolean useShortClassName) {\n        this.useShortClassName = useShortClassName;\n    }",
        "begin_line": 1494,
        "end_line": 1496,
        "comment": "\n     * <p>Sets whether to output short or long class names.</p>\n     *\n     * @param useShortClassName  the new useShortClassName flag\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.setShortClassName(boolean)",
        "snippet": "    protected void setShortClassName(boolean shortClassName) {\n        this.useShortClassName = shortClassName;\n    }",
        "begin_line": 1505,
        "end_line": 1507,
        "comment": "\n     * <p>Sets whether to output short or long class names.</p>\n     *\n     * @param shortClassName  the new shortClassName flag\n     * @deprecated Use {@link #setUseShortClassName(boolean)}\n     *             Method will be removed in Commons Lang 3.0.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.isUseIdentityHashCode()",
        "snippet": "    protected boolean isUseIdentityHashCode() {\n        return useIdentityHashCode;\n    }",
        "begin_line": 1516,
        "end_line": 1518,
        "comment": "\n     * <p>Gets whether to use the identity hash code.</p>\n     *\n     * @return the current useIdentityHashCode flag\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.setUseIdentityHashCode(boolean)",
        "snippet": "    protected void setUseIdentityHashCode(boolean useIdentityHashCode) {\n        this.useIdentityHashCode = useIdentityHashCode;\n    }",
        "begin_line": 1525,
        "end_line": 1527,
        "comment": "\n     * <p>Sets whether to use the identity hash code.</p>\n     *\n     * @param useIdentityHashCode  the new useIdentityHashCode flag\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.isUseFieldNames()",
        "snippet": "    protected boolean isUseFieldNames() {\n        return useFieldNames;\n    }",
        "begin_line": 1536,
        "end_line": 1538,
        "comment": "\n     * <p>Gets whether to use the field names passed in.</p>\n     *\n     * @return the current useFieldNames flag\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.setUseFieldNames(boolean)",
        "snippet": "    protected void setUseFieldNames(boolean useFieldNames) {\n        this.useFieldNames = useFieldNames;\n    }",
        "begin_line": 1545,
        "end_line": 1547,
        "comment": "\n     * <p>Sets whether to use the field names passed in.</p>\n     *\n     * @param useFieldNames  the new useFieldNames flag\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.isDefaultFullDetail()",
        "snippet": "    protected boolean isDefaultFullDetail() {\n        return defaultFullDetail;\n    }",
        "begin_line": 1557,
        "end_line": 1559,
        "comment": "\n     * <p>Gets whether to use full detail when the caller doesn't\n     * specify.</p>\n     *\n     * @return the current defaultFullDetail flag\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.setDefaultFullDetail(boolean)",
        "snippet": "    protected void setDefaultFullDetail(boolean defaultFullDetail) {\n        this.defaultFullDetail = defaultFullDetail;\n    }",
        "begin_line": 1567,
        "end_line": 1569,
        "comment": "\n     * <p>Sets whether to use full detail when the caller doesn't\n     * specify.</p>\n     *\n     * @param defaultFullDetail  the new defaultFullDetail flag\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.isArrayContentDetail()",
        "snippet": "    protected boolean isArrayContentDetail() {\n        return arrayContentDetail;\n    }",
        "begin_line": 1578,
        "end_line": 1580,
        "comment": "\n     * <p>Gets whether to output array content detail.</p>\n     *\n     * @return the current array content detail setting\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.setArrayContentDetail(boolean)",
        "snippet": "    protected void setArrayContentDetail(boolean arrayContentDetail) {\n        this.arrayContentDetail = arrayContentDetail;\n    }",
        "begin_line": 1587,
        "end_line": 1589,
        "comment": "\n     * <p>Sets whether to output array content detail.</p>\n     *\n     * @param arrayContentDetail  the new arrayContentDetail flag\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.getArrayStart()",
        "snippet": "    protected String getArrayStart() {\n        return arrayStart;\n    }",
        "begin_line": 1598,
        "end_line": 1600,
        "comment": "\n     * <p>Gets the array start text.</p>\n     *\n     * @return the current array start text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.setArrayStart(java.lang.String)",
        "snippet": "    protected void setArrayStart(String arrayStart) {\n        if (arrayStart == null) {\n            arrayStart = \"\";\n        }\n        this.arrayStart = arrayStart;\n    }",
        "begin_line": 1610,
        "end_line": 1615,
        "comment": "\n     * <p>Sets the array start text.</p>\n     *\n     * <p><code>null</code> is accepted, but will be converted to\n     * an empty String.</p>\n     *\n     * @param arrayStart  the new array start text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.getArrayEnd()",
        "snippet": "    protected String getArrayEnd() {\n        return arrayEnd;\n    }",
        "begin_line": 1624,
        "end_line": 1626,
        "comment": "\n     * <p>Gets the array end text.</p>\n     *\n     * @return the current array end text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.setArrayEnd(java.lang.String)",
        "snippet": "    protected void setArrayEnd(String arrayEnd) {\n        if (arrayEnd == null) {\n            arrayEnd = \"\";\n        }\n        this.arrayEnd = arrayEnd;\n    }",
        "begin_line": 1636,
        "end_line": 1641,
        "comment": "\n     * <p>Sets the array end text.</p>\n     *\n     * <p><code>null</code> is accepted, but will be converted to\n     * an empty String.</p>\n     *\n     * @param arrayEnd  the new array end text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.getArraySeparator()",
        "snippet": "    protected String getArraySeparator() {\n        return arraySeparator;\n    }",
        "begin_line": 1650,
        "end_line": 1652,
        "comment": "\n     * <p>Gets the array separator text.</p>\n     *\n     * @return the current array separator text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.setArraySeparator(java.lang.String)",
        "snippet": "    protected void setArraySeparator(String arraySeparator) {\n        if (arraySeparator == null) {\n            arraySeparator = \"\";\n        }\n        this.arraySeparator = arraySeparator;\n    }",
        "begin_line": 1662,
        "end_line": 1667,
        "comment": "\n     * <p>Sets the array separator text.</p>\n     *\n     * <p><code>null</code> is accepted, but will be converted to\n     * an empty String.</p>\n     *\n     * @param arraySeparator  the new array separator text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.getContentStart()",
        "snippet": "    protected String getContentStart() {\n        return contentStart;\n    }",
        "begin_line": 1676,
        "end_line": 1678,
        "comment": "\n     * <p>Gets the content start text.</p>\n     *\n     * @return the current content start text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.setContentStart(java.lang.String)",
        "snippet": "    protected void setContentStart(String contentStart) {\n        if (contentStart == null) {\n            contentStart = \"\";\n        }\n        this.contentStart = contentStart;\n    }",
        "begin_line": 1688,
        "end_line": 1693,
        "comment": "\n     * <p>Sets the content start text.</p>\n     *\n     * <p><code>null</code> is accepted, but will be converted to\n     * an empty String.</p>\n     *\n     * @param contentStart  the new content start text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.getContentEnd()",
        "snippet": "    protected String getContentEnd() {\n        return contentEnd;\n    }",
        "begin_line": 1702,
        "end_line": 1704,
        "comment": "\n     * <p>Gets the content end text.</p>\n     *\n     * @return the current content end text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.setContentEnd(java.lang.String)",
        "snippet": "    protected void setContentEnd(String contentEnd) {\n        if (contentEnd == null) {\n            contentEnd = \"\";\n        }\n        this.contentEnd = contentEnd;\n    }",
        "begin_line": 1714,
        "end_line": 1719,
        "comment": "\n     * <p>Sets the content end text.</p>\n     *\n     * <p><code>null</code> is accepted, but will be converted to\n     * an empty String.</p>\n     *\n     * @param contentEnd  the new content end text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.getFieldNameValueSeparator()",
        "snippet": "    protected String getFieldNameValueSeparator() {\n        return fieldNameValueSeparator;\n    }",
        "begin_line": 1728,
        "end_line": 1730,
        "comment": "\n     * <p>Gets the field name value separator text.</p>\n     *\n     * @return the current field name value separator text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.setFieldNameValueSeparator(java.lang.String)",
        "snippet": "    protected void setFieldNameValueSeparator(String fieldNameValueSeparator) {\n        if (fieldNameValueSeparator == null) {\n            fieldNameValueSeparator = \"\";\n        }\n        this.fieldNameValueSeparator = fieldNameValueSeparator;\n    }",
        "begin_line": 1740,
        "end_line": 1745,
        "comment": "\n     * <p>Sets the field name value separator text.</p>\n     *\n     * <p><code>null</code> is accepted, but will be converted to\n     * an empty String.</p>\n     *\n     * @param fieldNameValueSeparator  the new field name value separator text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.getFieldSeparator()",
        "snippet": "    protected String getFieldSeparator() {\n        return fieldSeparator;\n    }",
        "begin_line": 1754,
        "end_line": 1756,
        "comment": "\n     * <p>Gets the field separator text.</p>\n     *\n     * @return the current field separator text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.setFieldSeparator(java.lang.String)",
        "snippet": "    protected void setFieldSeparator(String fieldSeparator) {\n        if (fieldSeparator == null) {\n            fieldSeparator = \"\";\n        }\n        this.fieldSeparator = fieldSeparator;\n    }",
        "begin_line": 1766,
        "end_line": 1771,
        "comment": "\n     * <p>Sets the field separator text.</p>\n     *\n     * <p><code>null</code> is accepted, but will be converted to\n     * an empty String.</p>\n     *\n     * @param fieldSeparator  the new field separator text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.isFieldSeparatorAtStart()",
        "snippet": "    protected boolean isFieldSeparatorAtStart() {\n        return fieldSeparatorAtStart;\n    }",
        "begin_line": 1782,
        "end_line": 1784,
        "comment": "\n     * <p>Gets whether the field separator should be added at the start \n     * of each buffer.</p>\n     * \n     * @return the fieldSeparatorAtStart flag\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.setFieldSeparatorAtStart(boolean)",
        "snippet": "    protected void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) {\n        this.fieldSeparatorAtStart = fieldSeparatorAtStart;\n    }",
        "begin_line": 1793,
        "end_line": 1795,
        "comment": "\n     * <p>Sets whether the field separator should be added at the start \n     * of each buffer.</p>\n     * \n     * @param fieldSeparatorAtStart  the fieldSeparatorAtStart flag\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.isFieldSeparatorAtEnd()",
        "snippet": "    protected boolean isFieldSeparatorAtEnd() {\n        return fieldSeparatorAtEnd;\n    }",
        "begin_line": 1806,
        "end_line": 1808,
        "comment": "\n     * <p>Gets whether the field separator should be added at the end \n     * of each buffer.</p>\n     * \n     * @return fieldSeparatorAtEnd flag\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.setFieldSeparatorAtEnd(boolean)",
        "snippet": "    protected void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) {\n        this.fieldSeparatorAtEnd = fieldSeparatorAtEnd;\n    }",
        "begin_line": 1817,
        "end_line": 1819,
        "comment": "\n     * <p>Sets whether the field separator should be added at the end \n     * of each buffer.</p>\n     * \n     * @param fieldSeparatorAtEnd  the fieldSeparatorAtEnd flag\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.getNullText()",
        "snippet": "    protected String getNullText() {\n        return nullText;\n    }",
        "begin_line": 1828,
        "end_line": 1830,
        "comment": "\n     * <p>Gets the text to output when <code>null</code> found.</p>\n     *\n     * @return the current text to output when null found\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.setNullText(java.lang.String)",
        "snippet": "    protected void setNullText(String nullText) {\n        if (nullText == null) {\n            nullText = \"\";\n        }\n        this.nullText = nullText;\n    }",
        "begin_line": 1840,
        "end_line": 1845,
        "comment": "\n     * <p>Sets the text to output when <code>null</code> found.</p>\n     *\n     * <p><code>null</code> is accepted, but will be converted to\n     * an empty String.</p>\n     *\n     * @param nullText  the new text to output when null found\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.getSizeStartText()",
        "snippet": "    protected String getSizeStartText() {\n        return sizeStartText;\n    }",
        "begin_line": 1857,
        "end_line": 1859,
        "comment": "\n     * <p>Gets the start text to output when a <code>Collection</code>,\n     * <code>Map</code> or array size is output.</p>\n     *\n     * <p>This is output before the size value.</p>\n     *\n     * @return the current start of size text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.setSizeStartText(java.lang.String)",
        "snippet": "    protected void setSizeStartText(String sizeStartText) {\n        if (sizeStartText == null) {\n            sizeStartText = \"\";\n        }\n        this.sizeStartText = sizeStartText;\n    }",
        "begin_line": 1872,
        "end_line": 1877,
        "comment": "\n     * <p>Sets the start text to output when a <code>Collection</code>,\n     * <code>Map</code> or array size is output.</p>\n     *\n     * <p>This is output before the size value.</p>\n     *\n     * <p><code>null</code> is accepted, but will be converted to\n     * an empty String.</p>\n     *\n     * @param sizeStartText  the new start of size text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.getSizeEndText()",
        "snippet": "    protected String getSizeEndText() {\n        return sizeEndText;\n    }",
        "begin_line": 1889,
        "end_line": 1891,
        "comment": "\n     * <p>Gets the end text to output when a <code>Collection</code>,\n     * <code>Map</code> or array size is output.</p>\n     *\n     * <p>This is output after the size value.</p>\n     *\n     * @return the current end of size text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.setSizeEndText(java.lang.String)",
        "snippet": "    protected void setSizeEndText(String sizeEndText) {\n        if (sizeEndText == null) {\n            sizeEndText = \"\";\n        }\n        this.sizeEndText = sizeEndText;\n    }",
        "begin_line": 1904,
        "end_line": 1909,
        "comment": "\n     * <p>Sets the end text to output when a <code>Collection</code>,\n     * <code>Map</code> or array size is output.</p>\n     *\n     * <p>This is output after the size value.</p>\n     *\n     * <p><code>null</code> is accepted, but will be converted to\n     * an empty String.</p>\n     *\n     * @param sizeEndText  the new end of size text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.getSummaryObjectStartText()",
        "snippet": "    protected String getSummaryObjectStartText() {\n        return summaryObjectStartText;\n    }",
        "begin_line": 1921,
        "end_line": 1923,
        "comment": "\n     * <p>Gets the start text to output when an <code>Object</code> is\n     * output in summary mode.</p>\n     *\n     * <p>This is output before the size value.</p>\n     *\n     * @return the current start of summary text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.setSummaryObjectStartText(java.lang.String)",
        "snippet": "    protected void setSummaryObjectStartText(String summaryObjectStartText) {\n        if (summaryObjectStartText == null) {\n            summaryObjectStartText = \"\";\n        }\n        this.summaryObjectStartText = summaryObjectStartText;\n    }",
        "begin_line": 1936,
        "end_line": 1941,
        "comment": "\n     * <p>Sets the start text to output when an <code>Object</code> is\n     * output in summary mode.</p>\n     *\n     * <p>This is output before the size value.</p>\n     *\n     * <p><code>null</code> is accepted, but will be converted to\n     * an empty String.</p>\n     *\n     * @param summaryObjectStartText  the new start of summary text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.getSummaryObjectEndText()",
        "snippet": "    protected String getSummaryObjectEndText() {\n        return summaryObjectEndText;\n    }",
        "begin_line": 1953,
        "end_line": 1955,
        "comment": "\n     * <p>Gets the end text to output when an <code>Object</code> is\n     * output in summary mode.</p>\n     *\n     * <p>This is output after the size value.</p>\n     *\n     * @return the current end of summary text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.setSummaryObjectEndText(java.lang.String)",
        "snippet": "    protected void setSummaryObjectEndText(String summaryObjectEndText) {\n        if (summaryObjectEndText == null) {\n            summaryObjectEndText = \"\";\n        }\n        this.summaryObjectEndText = summaryObjectEndText;\n    }",
        "begin_line": 1968,
        "end_line": 1973,
        "comment": "\n     * <p>Sets the end text to output when an <code>Object</code> is\n     * output in summary mode.</p>\n     *\n     * <p>This is output after the size value.</p>\n     *\n     * <p><code>null</code> is accepted, but will be converted to\n     * an empty String.</p>\n     *\n     * @param summaryObjectEndText  the new end of summary text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.DefaultToStringStyle.DefaultToStringStyle()",
        "snippet": "        DefaultToStringStyle() {\n            super();\n        }",
        "begin_line": 1997,
        "end_line": 1999,
        "comment": "\n         * <p>Constructor.</p>\n         *\n         * <p>Use the static constant rather than instantiating.</p>\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.DefaultToStringStyle.readResolve()",
        "snippet": "        private Object readResolve() {\n            return ToStringStyle.DEFAULT_STYLE;\n        }",
        "begin_line": 2006,
        "end_line": 2008,
        "comment": "\n         * <p>Ensure <code>Singleton</code> after serialization.</p>\n         *\n         * @return the singleton\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.NoFieldNameToStringStyle.NoFieldNameToStringStyle()",
        "snippet": "        NoFieldNameToStringStyle() {\n            super();\n            this.setUseFieldNames(false);\n        }",
        "begin_line": 2030,
        "end_line": 2033,
        "comment": "\n         * <p>Constructor.</p>\n         *\n         * <p>Use the static constant rather than instantiating.</p>\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.NoFieldNameToStringStyle.readResolve()",
        "snippet": "        private Object readResolve() {\n            return ToStringStyle.NO_FIELD_NAMES_STYLE;\n        }",
        "begin_line": 2040,
        "end_line": 2042,
        "comment": "\n         * <p>Ensure <code>Singleton</code> after serialization.</p>\n         *\n         * @return the singleton\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.ShortPrefixToStringStyle.ShortPrefixToStringStyle()",
        "snippet": "        ShortPrefixToStringStyle() {\n            super();\n            this.setUseShortClassName(true);\n            this.setUseIdentityHashCode(false);\n        }",
        "begin_line": 2064,
        "end_line": 2068,
        "comment": "\n         * <p>Constructor.</p>\n         *\n         * <p>Use the static constant rather than instantiating.</p>\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.ShortPrefixToStringStyle.readResolve()",
        "snippet": "        private Object readResolve() {\n            return ToStringStyle.SHORT_PREFIX_STYLE;\n        }",
        "begin_line": 2074,
        "end_line": 2076,
        "comment": "\n         * <p>Ensure <code>Singleton</ode> after serialization.</p>\n         * @return the singleton\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.SimpleToStringStyle.SimpleToStringStyle()",
        "snippet": "        SimpleToStringStyle() {\n            super();\n            this.setUseClassName(false);\n            this.setUseIdentityHashCode(false);\n            this.setUseFieldNames(false);\n            this.setContentStart(\"\");\n            this.setContentEnd(\"\");\n        }",
        "begin_line": 2096,
        "end_line": 2103,
        "comment": "\n         * <p>Constructor.</p>\n         *\n         * <p>Use the static constant rather than instantiating.</p>\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.SimpleToStringStyle.readResolve()",
        "snippet": "        private Object readResolve() {\n            return ToStringStyle.SIMPLE_STYLE;\n        }",
        "begin_line": 2109,
        "end_line": 2111,
        "comment": "\n         * <p>Ensure <code>Singleton</ode> after serialization.</p>\n         * @return the singleton\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.MultiLineToStringStyle.MultiLineToStringStyle()",
        "snippet": "        MultiLineToStringStyle() {\n            super();\n            this.setContentStart(\"[\");\n            this.setFieldSeparator(SystemUtils.LINE_SEPARATOR + \"  \");\n            this.setFieldSeparatorAtStart(true);\n            this.setContentEnd(SystemUtils.LINE_SEPARATOR + \"]\");\n        }",
        "begin_line": 2132,
        "end_line": 2138,
        "comment": "\n         * <p>Constructor.</p>\n         *\n         * <p>Use the static constant rather than instantiating.</p>\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang.builder.ToStringStyle",
        "signature": "org.apache.commons.lang.builder.ToStringStyle.MultiLineToStringStyle.readResolve()",
        "snippet": "        private Object readResolve() {\n            return ToStringStyle.MULTI_LINE_STYLE;\n        }",
        "begin_line": 2145,
        "end_line": 2147,
        "comment": "\n         * <p>Ensure <code>Singleton</code> after serialization.</p>\n         *\n         * @return the singleton\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableLong.java",
        "class_name": "org.apache.commons.lang.mutable.MutableLong",
        "signature": "org.apache.commons.lang.mutable.MutableLong.MutableLong()",
        "snippet": "    public MutableLong() {\n        super();\n    }",
        "begin_line": 41,
        "end_line": 43,
        "comment": "\n     * Constructs a new MutableLong with the default value of zero.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableLong.java",
        "class_name": "org.apache.commons.lang.mutable.MutableLong",
        "signature": "org.apache.commons.lang.mutable.MutableLong.MutableLong(long)",
        "snippet": "    public MutableLong(long value) {\n        super();\n        this.value = value;\n    }",
        "begin_line": 51,
        "end_line": 54,
        "comment": "\n     * Constructs a new MutableLong with the specified value.\n     * \n     * @param value\n     *            a value.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableLong.java",
        "class_name": "org.apache.commons.lang.mutable.MutableLong",
        "signature": "org.apache.commons.lang.mutable.MutableLong.MutableLong(java.lang.Number)",
        "snippet": "    public MutableLong(Number value) {\n        super();\n        this.value = value.longValue();\n    }",
        "begin_line": 64,
        "end_line": 67,
        "comment": "\n     * Constructs a new MutableLong with the specified value.\n     * \n     * @param value\n     *            a value.\n     * @throws NullPointerException\n     *             if the object is null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableLong.java",
        "class_name": "org.apache.commons.lang.mutable.MutableLong",
        "signature": "org.apache.commons.lang.mutable.MutableLong.getValue()",
        "snippet": "    public Object getValue() {\n        return new Long(this.value);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Gets the value as a Long instance.\n     * \n     * @return the value as a Long\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableLong.java",
        "class_name": "org.apache.commons.lang.mutable.MutableLong",
        "signature": "org.apache.commons.lang.mutable.MutableLong.setValue(long)",
        "snippet": "    public void setValue(long value) {\n        this.value = value;\n    }",
        "begin_line": 85,
        "end_line": 87,
        "comment": "\n     * Sets the value.\n     * \n     * @param value\n     *            the value to set\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableLong.java",
        "class_name": "org.apache.commons.lang.mutable.MutableLong",
        "signature": "org.apache.commons.lang.mutable.MutableLong.setValue(java.lang.Object)",
        "snippet": "    public void setValue(Object value) {\n        setValue(((Number) value).longValue());\n    }",
        "begin_line": 99,
        "end_line": 101,
        "comment": "\n     * Sets the value from any Number instance.\n     * \n     * @param value\n     *            the value to set\n     * @throws NullPointerException\n     *             if the object is null\n     * @throws ClassCastException\n     *             if the type is not a {@link Number}\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableLong.java",
        "class_name": "org.apache.commons.lang.mutable.MutableLong",
        "signature": "org.apache.commons.lang.mutable.MutableLong.increment()",
        "snippet": "    public void increment() {\n        value++;\n    }",
        "begin_line": 109,
        "end_line": 111,
        "comment": "\n     * Increments the value.\n     *\n     * @since Commons Lang 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableLong.java",
        "class_name": "org.apache.commons.lang.mutable.MutableLong",
        "signature": "org.apache.commons.lang.mutable.MutableLong.decrement()",
        "snippet": "    public void decrement() {\n        value--;\n    }",
        "begin_line": 118,
        "end_line": 120,
        "comment": "\n     * Decrements the value.\n     *\n     * @since Commons Lang 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableLong.java",
        "class_name": "org.apache.commons.lang.mutable.MutableLong",
        "signature": "org.apache.commons.lang.mutable.MutableLong.add(long)",
        "snippet": "    public void add(long operand) {\n        this.value += operand;\n    }",
        "begin_line": 131,
        "end_line": 133,
        "comment": "\n     * Adds a value.\n     * \n     * @param operand\n     *            the value to add\n     *\n     * @since Commons Lang 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableLong.java",
        "class_name": "org.apache.commons.lang.mutable.MutableLong",
        "signature": "org.apache.commons.lang.mutable.MutableLong.add(java.lang.Number)",
        "snippet": "    public void add(Number operand) {\n        this.value += operand.longValue();\n    }",
        "begin_line": 145,
        "end_line": 147,
        "comment": "\n     * Adds a value.\n     * \n     * @param operand\n     *            the value to add\n     * @throws NullPointerException\n     *             if the object is null\n     *\n     * @since Commons Lang 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableLong.java",
        "class_name": "org.apache.commons.lang.mutable.MutableLong",
        "signature": "org.apache.commons.lang.mutable.MutableLong.subtract(long)",
        "snippet": "    public void subtract(long operand) {\n        this.value -= operand;\n    }",
        "begin_line": 157,
        "end_line": 159,
        "comment": "\n     * Subtracts a value.\n     * \n     * @param operand\n     *            the value to add\n     *\n     * @since Commons Lang 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableLong.java",
        "class_name": "org.apache.commons.lang.mutable.MutableLong",
        "signature": "org.apache.commons.lang.mutable.MutableLong.subtract(java.lang.Number)",
        "snippet": "    public void subtract(Number operand) {\n        this.value -= operand.longValue();\n    }",
        "begin_line": 171,
        "end_line": 173,
        "comment": "\n     * Subtracts a value.\n     * \n     * @param operand\n     *            the value to add\n     * @throws NullPointerException\n     *             if the object is null\n     *\n     * @since Commons Lang 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableLong.java",
        "class_name": "org.apache.commons.lang.mutable.MutableLong",
        "signature": "org.apache.commons.lang.mutable.MutableLong.intValue()",
        "snippet": "    public int intValue() {\n        return (int) value;\n    }",
        "begin_line": 182,
        "end_line": 184,
        "comment": "\n     * Returns the value of this MutableLong as a int.\n     *\n     * @return the numeric value represented by this object after conversion to type int.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableLong.java",
        "class_name": "org.apache.commons.lang.mutable.MutableLong",
        "signature": "org.apache.commons.lang.mutable.MutableLong.longValue()",
        "snippet": "    public long longValue() {\n        return value;\n    }",
        "begin_line": 191,
        "end_line": 193,
        "comment": "\n     * Returns the value of this MutableLong as a long.\n     *\n     * @return the numeric value represented by this object after conversion to type long.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableLong.java",
        "class_name": "org.apache.commons.lang.mutable.MutableLong",
        "signature": "org.apache.commons.lang.mutable.MutableLong.floatValue()",
        "snippet": "    public float floatValue() {\n        return value;\n    }",
        "begin_line": 200,
        "end_line": 202,
        "comment": "\n     * Returns the value of this MutableLong as a float.\n     *\n     * @return the numeric value represented by this object after conversion to type float.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableLong.java",
        "class_name": "org.apache.commons.lang.mutable.MutableLong",
        "signature": "org.apache.commons.lang.mutable.MutableLong.doubleValue()",
        "snippet": "    public double doubleValue() {\n        return value;\n    }",
        "begin_line": 209,
        "end_line": 211,
        "comment": "\n     * Returns the value of this MutableLong as a double.\n     *\n     * @return the numeric value represented by this object after conversion to type double.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableLong.java",
        "class_name": "org.apache.commons.lang.mutable.MutableLong",
        "signature": "org.apache.commons.lang.mutable.MutableLong.toLong()",
        "snippet": "    public Long toLong() {\n        return new Long(longValue());\n    }",
        "begin_line": 219,
        "end_line": 221,
        "comment": "\n     * Gets this mutable as an instance of Long.\n     *\n     * @return a Long instance containing the value from this mutable\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableLong.java",
        "class_name": "org.apache.commons.lang.mutable.MutableLong",
        "signature": "org.apache.commons.lang.mutable.MutableLong.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj instanceof MutableLong) {\n            return value == ((MutableLong) obj).longValue();\n        }\n        return false;\n    }",
        "begin_line": 233,
        "end_line": 238,
        "comment": "\n     * Compares this object against the specified object. The result is <code>true</code> if and only if the argument\n     * is not <code>null</code> and is a <code>MutableLong</code> object that contains the same <code>long</code>\n     * value as this object.\n     * \n     * @param obj\n     *            the object to compare with.\n     * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableLong.java",
        "class_name": "org.apache.commons.lang.mutable.MutableLong",
        "signature": "org.apache.commons.lang.mutable.MutableLong.hashCode()",
        "snippet": "    public int hashCode() {\n        return (int) (value ^ (value >>> 32));\n    }",
        "begin_line": 245,
        "end_line": 247,
        "comment": "\n     * Returns a suitable hashcode for this mutable.\n     * \n     * @return a suitable hashcode\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableLong.java",
        "class_name": "org.apache.commons.lang.mutable.MutableLong",
        "signature": "org.apache.commons.lang.mutable.MutableLong.compareTo(java.lang.Object)",
        "snippet": "    public int compareTo(Object obj) {\n        MutableLong other = (MutableLong) obj;\n        long anotherVal = other.value;\n        return value < anotherVal ? -1 : (value == anotherVal ? 0 : 1);\n    }",
        "begin_line": 257,
        "end_line": 261,
        "comment": "\n     * Compares this mutable to another in ascending order.\n     * \n     * @param obj\n     *            the mutable to compare to\n     * @return negative if this is less, zero if equal, positive if greater\n     * @throws ClassCastException if the argument is not a MutableLong\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableLong.java",
        "class_name": "org.apache.commons.lang.mutable.MutableLong",
        "signature": "org.apache.commons.lang.mutable.MutableLong.toString()",
        "snippet": "    public String toString() {\n        return String.valueOf(value);\n    }",
        "begin_line": 268,
        "end_line": 270,
        "comment": "\n     * Returns the String value of this mutable.\n     * \n     * @return the mutable value as a string\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableObject.java",
        "class_name": "org.apache.commons.lang.mutable.MutableObject",
        "signature": "org.apache.commons.lang.mutable.MutableObject.MutableObject()",
        "snippet": "    public MutableObject() {\n        super();\n    }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "\n     * Constructs a new MutableObject with the default value of <code>null</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableObject.java",
        "class_name": "org.apache.commons.lang.mutable.MutableObject",
        "signature": "org.apache.commons.lang.mutable.MutableObject.MutableObject(java.lang.Object)",
        "snippet": "    public MutableObject(Object value) {\n        super();\n        this.value = value;\n    }",
        "begin_line": 53,
        "end_line": 56,
        "comment": "\n     * Constructs a new MutableObject with the specified value.\n     * \n     * @param value\n     *            a value.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableObject.java",
        "class_name": "org.apache.commons.lang.mutable.MutableObject",
        "signature": "org.apache.commons.lang.mutable.MutableObject.getValue()",
        "snippet": "    public Object getValue() {\n        return this.value;\n    }",
        "begin_line": 64,
        "end_line": 66,
        "comment": "\n     * Gets the value.\n     * \n     * @return the value\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableObject.java",
        "class_name": "org.apache.commons.lang.mutable.MutableObject",
        "signature": "org.apache.commons.lang.mutable.MutableObject.setValue(java.lang.Object)",
        "snippet": "    public void setValue(Object value) {\n        this.value = value;\n    }",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\n     * Sets the value.\n     * \n     * @param value\n     *            the value to set\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableObject.java",
        "class_name": "org.apache.commons.lang.mutable.MutableObject",
        "signature": "org.apache.commons.lang.mutable.MutableObject.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj instanceof MutableObject) {\n            Object other = ((MutableObject) obj).value;\n            return value == other || (value != null && value.equals(other));\n        }\n        return false;\n    }",
        "begin_line": 88,
        "end_line": 94,
        "comment": "\n     * Compares this object against the specified object. The result is <code>true</code> if and only if the argument\n     * is not <code>null</code> and is a <code>MutableObject</code> object that contains the same <code>Object</code>\n     * value as this object.\n     * \n     * @param obj\n     *            the object to compare with.\n     * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableObject.java",
        "class_name": "org.apache.commons.lang.mutable.MutableObject",
        "signature": "org.apache.commons.lang.mutable.MutableObject.hashCode()",
        "snippet": "    public int hashCode() {\n        return value == null ? 0 : value.hashCode();\n    }",
        "begin_line": 101,
        "end_line": 103,
        "comment": "\n     * Returns the value's hash code or <code>0</code> if the value is <code>null</code>.\n     * \n     * @return the value's hash code or <code>0</code> if the value is <code>null</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableObject.java",
        "class_name": "org.apache.commons.lang.mutable.MutableObject",
        "signature": "org.apache.commons.lang.mutable.MutableObject.toString()",
        "snippet": "    public String toString() {\n        return value == null ? \"null\" : value.toString();\n    }",
        "begin_line": 110,
        "end_line": 112,
        "comment": "\n     * Returns the String value of this mutable.\n     * \n     * @return the mutable value as a string\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableShort.java",
        "class_name": "org.apache.commons.lang.mutable.MutableShort",
        "signature": "org.apache.commons.lang.mutable.MutableShort.MutableShort()",
        "snippet": "    public MutableShort() {\n        super();\n    }",
        "begin_line": 41,
        "end_line": 43,
        "comment": "\n     * Constructs a new MutableShort with the default value of zero.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableShort.java",
        "class_name": "org.apache.commons.lang.mutable.MutableShort",
        "signature": "org.apache.commons.lang.mutable.MutableShort.MutableShort(short)",
        "snippet": "    public MutableShort(short value) {\n        super();\n        this.value = value;\n    }",
        "begin_line": 51,
        "end_line": 54,
        "comment": "\n     * Constructs a new MutableShort with the specified value.\n     * \n     * @param value\n     *                  a value.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableShort.java",
        "class_name": "org.apache.commons.lang.mutable.MutableShort",
        "signature": "org.apache.commons.lang.mutable.MutableShort.MutableShort(java.lang.Number)",
        "snippet": "    public MutableShort(Number value) {\n        super();\n        this.value = value.shortValue();\n    }",
        "begin_line": 64,
        "end_line": 67,
        "comment": "\n     * Constructs a new MutableShort with the specified value.\n     * \n     * @param value\n     *                  a value.\n     * @throws NullPointerException\n     *                  if the object is null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableShort.java",
        "class_name": "org.apache.commons.lang.mutable.MutableShort",
        "signature": "org.apache.commons.lang.mutable.MutableShort.getValue()",
        "snippet": "    public Object getValue() {\n        return new Short(this.value);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Gets the value as a Short instance.\n     * \n     * @return the value as a Short\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableShort.java",
        "class_name": "org.apache.commons.lang.mutable.MutableShort",
        "signature": "org.apache.commons.lang.mutable.MutableShort.setValue(short)",
        "snippet": "    public void setValue(short value) {\n        this.value = value;\n    }",
        "begin_line": 85,
        "end_line": 87,
        "comment": "\n     * Sets the value.\n     * \n     * @param value\n     *                  the value to set\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableShort.java",
        "class_name": "org.apache.commons.lang.mutable.MutableShort",
        "signature": "org.apache.commons.lang.mutable.MutableShort.setValue(java.lang.Object)",
        "snippet": "    public void setValue(Object value) {\n        setValue(((Number) value).shortValue());\n    }",
        "begin_line": 99,
        "end_line": 101,
        "comment": "\n     * Sets the value from any Number instance.\n     * \n     * @param value\n     *                  the value to set\n     * @throws NullPointerException\n     *                  if the object is null\n     * @throws ClassCastException\n     *                  if the type is not a {@link Number}\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableShort.java",
        "class_name": "org.apache.commons.lang.mutable.MutableShort",
        "signature": "org.apache.commons.lang.mutable.MutableShort.increment()",
        "snippet": "    public void increment() {\n        value++;\n    }",
        "begin_line": 109,
        "end_line": 111,
        "comment": "\n     * Increments the value.\n     *\n     * @since Commons Lang 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableShort.java",
        "class_name": "org.apache.commons.lang.mutable.MutableShort",
        "signature": "org.apache.commons.lang.mutable.MutableShort.decrement()",
        "snippet": "    public void decrement() {\n        value--;\n    }",
        "begin_line": 118,
        "end_line": 120,
        "comment": "\n     * Decrements the value.\n     *\n     * @since Commons Lang 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableShort.java",
        "class_name": "org.apache.commons.lang.mutable.MutableShort",
        "signature": "org.apache.commons.lang.mutable.MutableShort.add(short)",
        "snippet": "    public void add(short operand) {\n        this.value += operand;\n    }",
        "begin_line": 131,
        "end_line": 133,
        "comment": "\n     * Adds a value.\n     * \n     * @param operand\n     *            the value to add\n     *\n     * @since Commons Lang 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableShort.java",
        "class_name": "org.apache.commons.lang.mutable.MutableShort",
        "signature": "org.apache.commons.lang.mutable.MutableShort.add(java.lang.Number)",
        "snippet": "    public void add(Number operand) {\n        this.value += operand.shortValue();\n    }",
        "begin_line": 145,
        "end_line": 147,
        "comment": "\n     * Adds a value.\n     * \n     * @param operand\n     *            the value to add\n     * @throws NullPointerException\n     *             if the object is null\n     *\n     * @since Commons Lang 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableShort.java",
        "class_name": "org.apache.commons.lang.mutable.MutableShort",
        "signature": "org.apache.commons.lang.mutable.MutableShort.subtract(short)",
        "snippet": "    public void subtract(short operand) {\n        this.value -= operand;\n    }",
        "begin_line": 157,
        "end_line": 159,
        "comment": "\n     * Subtracts a value.\n     * \n     * @param operand\n     *            the value to add\n     *\n     * @since Commons Lang 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableShort.java",
        "class_name": "org.apache.commons.lang.mutable.MutableShort",
        "signature": "org.apache.commons.lang.mutable.MutableShort.subtract(java.lang.Number)",
        "snippet": "    public void subtract(Number operand) {\n        this.value -= operand.shortValue();\n    }",
        "begin_line": 171,
        "end_line": 173,
        "comment": "\n     * Subtracts a value.\n     * \n     * @param operand\n     *            the value to add\n     * @throws NullPointerException\n     *             if the object is null\n     *\n     * @since Commons Lang 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableShort.java",
        "class_name": "org.apache.commons.lang.mutable.MutableShort",
        "signature": "org.apache.commons.lang.mutable.MutableShort.shortValue()",
        "snippet": "    public short shortValue() {\n        return value;\n    }",
        "begin_line": 182,
        "end_line": 184,
        "comment": "\n     * Returns the value of this MutableShort as a short.\n     *\n     * @return the numeric value represented by this object after conversion to type short.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableShort.java",
        "class_name": "org.apache.commons.lang.mutable.MutableShort",
        "signature": "org.apache.commons.lang.mutable.MutableShort.intValue()",
        "snippet": "    public int intValue() {\n        return value;\n    }",
        "begin_line": 191,
        "end_line": 193,
        "comment": "\n     * Returns the value of this MutableShort as a int.\n     *\n     * @return the numeric value represented by this object after conversion to type int.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableShort.java",
        "class_name": "org.apache.commons.lang.mutable.MutableShort",
        "signature": "org.apache.commons.lang.mutable.MutableShort.longValue()",
        "snippet": "    public long longValue() {\n        return value;\n    }",
        "begin_line": 200,
        "end_line": 202,
        "comment": "\n     * Returns the value of this MutableShort as a long.\n     *\n     * @return the numeric value represented by this object after conversion to type long.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableShort.java",
        "class_name": "org.apache.commons.lang.mutable.MutableShort",
        "signature": "org.apache.commons.lang.mutable.MutableShort.floatValue()",
        "snippet": "    public float floatValue() {\n        return value;\n    }",
        "begin_line": 209,
        "end_line": 211,
        "comment": "\n     * Returns the value of this MutableShort as a float.\n     *\n     * @return the numeric value represented by this object after conversion to type float.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableShort.java",
        "class_name": "org.apache.commons.lang.mutable.MutableShort",
        "signature": "org.apache.commons.lang.mutable.MutableShort.doubleValue()",
        "snippet": "    public double doubleValue() {\n        return value;\n    }",
        "begin_line": 218,
        "end_line": 220,
        "comment": "\n     * Returns the value of this MutableShort as a double.\n     *\n     * @return the numeric value represented by this object after conversion to type double.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableShort.java",
        "class_name": "org.apache.commons.lang.mutable.MutableShort",
        "signature": "org.apache.commons.lang.mutable.MutableShort.toShort()",
        "snippet": "    public Short toShort() {\n        return new Short(shortValue());\n    }",
        "begin_line": 228,
        "end_line": 230,
        "comment": "\n     * Gets this mutable as an instance of Short.\n     *\n     * @return a Short instance containing the value from this mutable\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableShort.java",
        "class_name": "org.apache.commons.lang.mutable.MutableShort",
        "signature": "org.apache.commons.lang.mutable.MutableShort.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj instanceof MutableShort) {\n            return value == ((MutableShort) obj).shortValue();\n        }\n        return false;\n    }",
        "begin_line": 242,
        "end_line": 247,
        "comment": "\n     * Compares this object against the specified object. The result is <code>true</code> if and only if the argument\n     * is not <code>null</code> and is a <code>MutableShort</code> object that contains the same <code>short</code>\n     * value as this object.\n     * \n     * @param obj\n     *                  the object to compare with.\n     * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableShort.java",
        "class_name": "org.apache.commons.lang.mutable.MutableShort",
        "signature": "org.apache.commons.lang.mutable.MutableShort.hashCode()",
        "snippet": "    public int hashCode() {\n        return value;\n    }",
        "begin_line": 254,
        "end_line": 256,
        "comment": "\n     * Returns a suitable hashcode for this mutable.\n     * \n     * @return a suitable hashcode\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableShort.java",
        "class_name": "org.apache.commons.lang.mutable.MutableShort",
        "signature": "org.apache.commons.lang.mutable.MutableShort.compareTo(java.lang.Object)",
        "snippet": "    public int compareTo(Object obj) {\n        MutableShort other = (MutableShort) obj;\n        short anotherVal = other.value;\n        return value < anotherVal ? -1 : (value == anotherVal ? 0 : 1);\n    }",
        "begin_line": 266,
        "end_line": 270,
        "comment": "\n     * Compares this mutable to another in ascending order.\n     * \n     * @param obj\n     *                  the mutable to compare to\n     * @return negative if this is less, zero if equal, positive if greater\n     * @throws ClassCastException if the argument is not a MutableShort\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableShort.java",
        "class_name": "org.apache.commons.lang.mutable.MutableShort",
        "signature": "org.apache.commons.lang.mutable.MutableShort.toString()",
        "snippet": "    public String toString() {\n        return String.valueOf(value);\n    }",
        "begin_line": 277,
        "end_line": 279,
        "comment": "\n     * Returns the String value of this mutable.\n     * \n     * @return the mutable value as a string\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableByte.java",
        "class_name": "org.apache.commons.lang.mutable.MutableByte",
        "signature": "org.apache.commons.lang.mutable.MutableByte.MutableByte()",
        "snippet": "    public MutableByte() {\n        super();\n    }",
        "begin_line": 41,
        "end_line": 43,
        "comment": "\n     * Constructs a new MutableByte with the default value of zero.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableByte.java",
        "class_name": "org.apache.commons.lang.mutable.MutableByte",
        "signature": "org.apache.commons.lang.mutable.MutableByte.MutableByte(byte)",
        "snippet": "    public MutableByte(byte value) {\n        super();\n        this.value = value;\n    }",
        "begin_line": 51,
        "end_line": 54,
        "comment": "\n     * Constructs a new MutableByte with the specified value.\n     * \n     * @param value\n     *            a value.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableByte.java",
        "class_name": "org.apache.commons.lang.mutable.MutableByte",
        "signature": "org.apache.commons.lang.mutable.MutableByte.MutableByte(java.lang.Number)",
        "snippet": "    public MutableByte(Number value) {\n        super();\n        this.value = value.byteValue();\n    }",
        "begin_line": 64,
        "end_line": 67,
        "comment": "\n     * Constructs a new MutableByte with the specified value.\n     * \n     * @param value\n     *            a value.\n     * @throws NullPointerException\n     *             if the object is null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableByte.java",
        "class_name": "org.apache.commons.lang.mutable.MutableByte",
        "signature": "org.apache.commons.lang.mutable.MutableByte.getValue()",
        "snippet": "    public Object getValue() {\n        return new Byte(this.value);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Gets the value as a Byte instance.\n     * \n     * @return the value as a Byte\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableByte.java",
        "class_name": "org.apache.commons.lang.mutable.MutableByte",
        "signature": "org.apache.commons.lang.mutable.MutableByte.setValue(byte)",
        "snippet": "    public void setValue(byte value) {\n        this.value = value;\n    }",
        "begin_line": 85,
        "end_line": 87,
        "comment": "\n     * Sets the value.\n     * \n     * @param value\n     *            the value to set\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableByte.java",
        "class_name": "org.apache.commons.lang.mutable.MutableByte",
        "signature": "org.apache.commons.lang.mutable.MutableByte.setValue(java.lang.Object)",
        "snippet": "    public void setValue(Object value) {\n        setValue(((Number) value).byteValue());\n    }",
        "begin_line": 99,
        "end_line": 101,
        "comment": "\n     * Sets the value from any Number instance.\n     * \n     * @param value\n     *            the value to set\n     * @throws NullPointerException\n     *             if the object is null\n     * @throws ClassCastException\n     *             if the type is not a {@link Number}\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableByte.java",
        "class_name": "org.apache.commons.lang.mutable.MutableByte",
        "signature": "org.apache.commons.lang.mutable.MutableByte.byteValue()",
        "snippet": "    public byte byteValue() {\n        return value;\n    }",
        "begin_line": 110,
        "end_line": 112,
        "comment": "\n     * Returns the value of this MutableByte as a byte.\n     *\n     * @return the numeric value represented by this object after conversion to type byte.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableByte.java",
        "class_name": "org.apache.commons.lang.mutable.MutableByte",
        "signature": "org.apache.commons.lang.mutable.MutableByte.intValue()",
        "snippet": "    public int intValue() {\n        return value;\n    }",
        "begin_line": 119,
        "end_line": 121,
        "comment": "\n     * Returns the value of this MutableByte as a int.\n     *\n     * @return the numeric value represented by this object after conversion to type int.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableByte.java",
        "class_name": "org.apache.commons.lang.mutable.MutableByte",
        "signature": "org.apache.commons.lang.mutable.MutableByte.longValue()",
        "snippet": "    public long longValue() {\n        return value;\n    }",
        "begin_line": 128,
        "end_line": 130,
        "comment": "\n     * Returns the value of this MutableByte as a long.\n     *\n     * @return the numeric value represented by this object after conversion to type long.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableByte.java",
        "class_name": "org.apache.commons.lang.mutable.MutableByte",
        "signature": "org.apache.commons.lang.mutable.MutableByte.floatValue()",
        "snippet": "    public float floatValue() {\n        return value;\n    }",
        "begin_line": 137,
        "end_line": 139,
        "comment": "\n     * Returns the value of this MutableByte as a float.\n     *\n     * @return the numeric value represented by this object after conversion to type float.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableByte.java",
        "class_name": "org.apache.commons.lang.mutable.MutableByte",
        "signature": "org.apache.commons.lang.mutable.MutableByte.doubleValue()",
        "snippet": "    public double doubleValue() {\n        return value;\n    }",
        "begin_line": 146,
        "end_line": 148,
        "comment": "\n     * Returns the value of this MutableByte as a double.\n     *\n     * @return the numeric value represented by this object after conversion to type double.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableByte.java",
        "class_name": "org.apache.commons.lang.mutable.MutableByte",
        "signature": "org.apache.commons.lang.mutable.MutableByte.toByte()",
        "snippet": "    public Byte toByte() {\n        return new Byte(byteValue());\n    }",
        "begin_line": 156,
        "end_line": 158,
        "comment": "\n     * Gets this mutable as an instance of Byte.\n     *\n     * @return a Byte instance containing the value from this mutable\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableByte.java",
        "class_name": "org.apache.commons.lang.mutable.MutableByte",
        "signature": "org.apache.commons.lang.mutable.MutableByte.increment()",
        "snippet": "    public void increment() {\n        value++;\n    }",
        "begin_line": 166,
        "end_line": 168,
        "comment": "\n     * Increments the value.\n     *\n     * @since Commons Lang 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableByte.java",
        "class_name": "org.apache.commons.lang.mutable.MutableByte",
        "signature": "org.apache.commons.lang.mutable.MutableByte.decrement()",
        "snippet": "    public void decrement() {\n        value--;\n    }",
        "begin_line": 175,
        "end_line": 177,
        "comment": "\n     * Decrements the value.\n     *\n     * @since Commons Lang 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableByte.java",
        "class_name": "org.apache.commons.lang.mutable.MutableByte",
        "signature": "org.apache.commons.lang.mutable.MutableByte.add(byte)",
        "snippet": "    public void add(byte operand) {\n        this.value += operand;\n    }",
        "begin_line": 188,
        "end_line": 190,
        "comment": "\n     * Adds a value.\n     * \n     * @param operand\n     *            the value to add\n     *\n     * @since Commons Lang 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableByte.java",
        "class_name": "org.apache.commons.lang.mutable.MutableByte",
        "signature": "org.apache.commons.lang.mutable.MutableByte.add(java.lang.Number)",
        "snippet": "    public void add(Number operand) {\n        this.value += operand.byteValue();\n    }",
        "begin_line": 202,
        "end_line": 204,
        "comment": "\n     * Adds a value.\n     * \n     * @param operand\n     *            the value to add\n     * @throws NullPointerException\n     *             if the object is null\n     *\n     * @since Commons Lang 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableByte.java",
        "class_name": "org.apache.commons.lang.mutable.MutableByte",
        "signature": "org.apache.commons.lang.mutable.MutableByte.subtract(byte)",
        "snippet": "    public void subtract(byte operand) {\n        this.value -= operand;\n    }",
        "begin_line": 214,
        "end_line": 216,
        "comment": "\n     * Subtracts a value.\n     * \n     * @param operand\n     *            the value to add\n     *\n     * @since Commons Lang 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableByte.java",
        "class_name": "org.apache.commons.lang.mutable.MutableByte",
        "signature": "org.apache.commons.lang.mutable.MutableByte.subtract(java.lang.Number)",
        "snippet": "    public void subtract(Number operand) {\n        this.value -= operand.byteValue();\n    }",
        "begin_line": 228,
        "end_line": 230,
        "comment": "\n     * Subtracts a value.\n     * \n     * @param operand\n     *            the value to add\n     * @throws NullPointerException\n     *             if the object is null\n     *\n     * @since Commons Lang 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableByte.java",
        "class_name": "org.apache.commons.lang.mutable.MutableByte",
        "signature": "org.apache.commons.lang.mutable.MutableByte.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj instanceof MutableByte) {\n            return value == ((MutableByte) obj).byteValue();\n        }\n        return false;\n    }",
        "begin_line": 242,
        "end_line": 247,
        "comment": "\n     * Compares this object against the specified object. The result is <code>true</code> if and only if the argument\n     * is not <code>null</code> and is a <code>MutableByte</code> object that contains the same <code>byte</code>\n     * value as this object.\n     * \n     * @param obj\n     *            the object to compare with.\n     * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableByte.java",
        "class_name": "org.apache.commons.lang.mutable.MutableByte",
        "signature": "org.apache.commons.lang.mutable.MutableByte.hashCode()",
        "snippet": "    public int hashCode() {\n        return value;\n    }",
        "begin_line": 254,
        "end_line": 256,
        "comment": "\n     * Returns a suitable hashcode for this mutable.\n     * \n     * @return a suitable hashcode\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableByte.java",
        "class_name": "org.apache.commons.lang.mutable.MutableByte",
        "signature": "org.apache.commons.lang.mutable.MutableByte.compareTo(java.lang.Object)",
        "snippet": "    public int compareTo(Object obj) {\n        MutableByte other = (MutableByte) obj;\n        byte anotherVal = other.value;\n        return value < anotherVal ? -1 : (value == anotherVal ? 0 : 1);\n    }",
        "begin_line": 266,
        "end_line": 270,
        "comment": "\n     * Compares this mutable to another in ascending order.\n     * \n     * @param obj\n     *            the mutable to compare to\n     * @return negative if this is less, zero if equal, positive if greater\n     * @throws ClassCastException if the argument is not a MutableByte\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableByte.java",
        "class_name": "org.apache.commons.lang.mutable.MutableByte",
        "signature": "org.apache.commons.lang.mutable.MutableByte.toString()",
        "snippet": "    public String toString() {\n        return String.valueOf(value);\n    }",
        "begin_line": 277,
        "end_line": 279,
        "comment": "\n     * Returns the String value of this mutable.\n     * \n     * @return the mutable value as a string\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableFloat.java",
        "class_name": "org.apache.commons.lang.mutable.MutableFloat",
        "signature": "org.apache.commons.lang.mutable.MutableFloat.MutableFloat()",
        "snippet": "    public MutableFloat() {\n        super();\n    }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "\n     * Constructs a new MutableFloat with the default value of zero.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableFloat.java",
        "class_name": "org.apache.commons.lang.mutable.MutableFloat",
        "signature": "org.apache.commons.lang.mutable.MutableFloat.MutableFloat(float)",
        "snippet": "    public MutableFloat(float value) {\n        super();\n        this.value = value;\n    }",
        "begin_line": 53,
        "end_line": 56,
        "comment": "\n     * Constructs a new MutableFloat with the specified value.\n     * \n     * @param value\n     *            a value.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableFloat.java",
        "class_name": "org.apache.commons.lang.mutable.MutableFloat",
        "signature": "org.apache.commons.lang.mutable.MutableFloat.MutableFloat(java.lang.Number)",
        "snippet": "    public MutableFloat(Number value) {\n        super();\n        this.value = value.floatValue();\n    }",
        "begin_line": 66,
        "end_line": 69,
        "comment": "\n     * Constructs a new MutableFloat with the specified value.\n     * \n     * @param value\n     *            a value.\n     * @throws NullPointerException\n     *             if the object is null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableFloat.java",
        "class_name": "org.apache.commons.lang.mutable.MutableFloat",
        "signature": "org.apache.commons.lang.mutable.MutableFloat.getValue()",
        "snippet": "    public Object getValue() {\n        return new Float(this.value);\n    }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n     * Gets the value as a Float instance.\n     * \n     * @return the value as a Float\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableFloat.java",
        "class_name": "org.apache.commons.lang.mutable.MutableFloat",
        "signature": "org.apache.commons.lang.mutable.MutableFloat.setValue(float)",
        "snippet": "    public void setValue(float value) {\n        this.value = value;\n    }",
        "begin_line": 87,
        "end_line": 89,
        "comment": "\n     * Sets the value.\n     * \n     * @param value\n     *            the value to set\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableFloat.java",
        "class_name": "org.apache.commons.lang.mutable.MutableFloat",
        "signature": "org.apache.commons.lang.mutable.MutableFloat.setValue(java.lang.Object)",
        "snippet": "    public void setValue(Object value) {\n        setValue(((Number) value).floatValue());\n    }",
        "begin_line": 101,
        "end_line": 103,
        "comment": "\n     * Sets the value from any Number instance.\n     * \n     * @param value\n     *            the value to set\n     * @throws NullPointerException\n     *             if the object is null\n     * @throws ClassCastException\n     *             if the type is not a {@link Number}\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableFloat.java",
        "class_name": "org.apache.commons.lang.mutable.MutableFloat",
        "signature": "org.apache.commons.lang.mutable.MutableFloat.increment()",
        "snippet": "    public void increment() {\n        value++;\n    }",
        "begin_line": 111,
        "end_line": 113,
        "comment": "\n     * Increments the value.\n     *\n     * @since Commons Lang 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableFloat.java",
        "class_name": "org.apache.commons.lang.mutable.MutableFloat",
        "signature": "org.apache.commons.lang.mutable.MutableFloat.decrement()",
        "snippet": "    public void decrement() {\n        value--;\n    }",
        "begin_line": 120,
        "end_line": 122,
        "comment": "\n     * Decrements the value.\n     *\n     * @since Commons Lang 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableFloat.java",
        "class_name": "org.apache.commons.lang.mutable.MutableFloat",
        "signature": "org.apache.commons.lang.mutable.MutableFloat.add(float)",
        "snippet": "    public void add(float operand) {\n        this.value += operand;\n    }",
        "begin_line": 133,
        "end_line": 135,
        "comment": "\n     * Adds a value.\n     * \n     * @param operand\n     *            the value to add\n     *\n     * @since Commons Lang 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableFloat.java",
        "class_name": "org.apache.commons.lang.mutable.MutableFloat",
        "signature": "org.apache.commons.lang.mutable.MutableFloat.add(java.lang.Number)",
        "snippet": "    public void add(Number operand) {\n        this.value += operand.floatValue();\n    }",
        "begin_line": 147,
        "end_line": 149,
        "comment": "\n     * Adds a value.\n     * \n     * @param operand\n     *            the value to add\n     * @throws NullPointerException\n     *             if the object is null\n     *\n     * @since Commons Lang 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableFloat.java",
        "class_name": "org.apache.commons.lang.mutable.MutableFloat",
        "signature": "org.apache.commons.lang.mutable.MutableFloat.subtract(float)",
        "snippet": "    public void subtract(float operand) {\n        this.value -= operand;\n    }",
        "begin_line": 159,
        "end_line": 161,
        "comment": "\n     * Subtracts a value.\n     * \n     * @param operand\n     *            the value to add\n     *\n     * @since Commons Lang 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableFloat.java",
        "class_name": "org.apache.commons.lang.mutable.MutableFloat",
        "signature": "org.apache.commons.lang.mutable.MutableFloat.subtract(java.lang.Number)",
        "snippet": "    public void subtract(Number operand) {\n        this.value -= operand.floatValue();\n    }",
        "begin_line": 173,
        "end_line": 175,
        "comment": "\n     * Subtracts a value.\n     * \n     * @param operand\n     *            the value to add\n     * @throws NullPointerException\n     *             if the object is null\n     *\n     * @since Commons Lang 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableFloat.java",
        "class_name": "org.apache.commons.lang.mutable.MutableFloat",
        "signature": "org.apache.commons.lang.mutable.MutableFloat.intValue()",
        "snippet": "    public int intValue() {\n        return (int) value;\n    }",
        "begin_line": 184,
        "end_line": 186,
        "comment": "\n     * Returns the value of this MutableFloat as a int.\n     *\n     * @return the numeric value represented by this object after conversion to type int.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableFloat.java",
        "class_name": "org.apache.commons.lang.mutable.MutableFloat",
        "signature": "org.apache.commons.lang.mutable.MutableFloat.longValue()",
        "snippet": "    public long longValue() {\n        return (long) value;\n    }",
        "begin_line": 193,
        "end_line": 195,
        "comment": "\n     * Returns the value of this MutableFloat as a long.\n     *\n     * @return the numeric value represented by this object after conversion to type long.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableFloat.java",
        "class_name": "org.apache.commons.lang.mutable.MutableFloat",
        "signature": "org.apache.commons.lang.mutable.MutableFloat.floatValue()",
        "snippet": "    public float floatValue() {\n        return value;\n    }",
        "begin_line": 202,
        "end_line": 204,
        "comment": "\n     * Returns the value of this MutableFloat as a float.\n     *\n     * @return the numeric value represented by this object after conversion to type float.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableFloat.java",
        "class_name": "org.apache.commons.lang.mutable.MutableFloat",
        "signature": "org.apache.commons.lang.mutable.MutableFloat.doubleValue()",
        "snippet": "    public double doubleValue() {\n        return value;\n    }",
        "begin_line": 211,
        "end_line": 213,
        "comment": "\n     * Returns the value of this MutableFloat as a double.\n     *\n     * @return the numeric value represented by this object after conversion to type double.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableFloat.java",
        "class_name": "org.apache.commons.lang.mutable.MutableFloat",
        "signature": "org.apache.commons.lang.mutable.MutableFloat.isNaN()",
        "snippet": "    public boolean isNaN() {\n        return Float.isNaN(value);\n    }",
        "begin_line": 220,
        "end_line": 222,
        "comment": "\n     * Checks whether the float value is the special NaN value.\n     * \n     * @return true if NaN\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableFloat.java",
        "class_name": "org.apache.commons.lang.mutable.MutableFloat",
        "signature": "org.apache.commons.lang.mutable.MutableFloat.isInfinite()",
        "snippet": "    public boolean isInfinite() {\n        return Float.isInfinite(value);\n    }",
        "begin_line": 229,
        "end_line": 231,
        "comment": "\n     * Checks whether the float value is infinite.\n     * \n     * @return true if infinite\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableFloat.java",
        "class_name": "org.apache.commons.lang.mutable.MutableFloat",
        "signature": "org.apache.commons.lang.mutable.MutableFloat.toFloat()",
        "snippet": "    public Float toFloat() {\n        return new Float(floatValue());\n    }",
        "begin_line": 239,
        "end_line": 241,
        "comment": "\n     * Gets this mutable as an instance of Float.\n     *\n     * @return a Float instance containing the value from this mutable\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableFloat.java",
        "class_name": "org.apache.commons.lang.mutable.MutableFloat",
        "signature": "org.apache.commons.lang.mutable.MutableFloat.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        return (obj instanceof MutableFloat)\n            && (Float.floatToIntBits(((MutableFloat) obj).value) == Float.floatToIntBits(value));\n    }",
        "begin_line": 276,
        "end_line": 279,
        "comment": "\n     * Compares this object against some other object. The result is <code>true</code> if and only if the argument is\n     * not <code>null</code> and is a <code>Float</code> object that represents a <code>float</code> that has the\n     * identical bit pattern to the bit pattern of the <code>float</code> represented by this object. For this\n     * purpose, two float values are considered to be the same if and only if the method\n     * {@link Float#floatToIntBits(float)}returns the same int value when applied to each.\n     * <p>\n     * Note that in most cases, for two instances of class <code>Float</code>,<code>f1</code> and <code>f2</code>,\n     * the value of <code>f1.equals(f2)</code> is <code>true</code> if and only if <blockquote>\n     * \n     * <pre>\n     *   f1.floatValue() == f2.floatValue()\n     * </pre>\n     * \n     * </blockquote>\n     * <p>\n     * also has the value <code>true</code>. However, there are two exceptions:\n     * <ul>\n     * <li>If <code>f1</code> and <code>f2</code> both represent <code>Float.NaN</code>, then the\n     * <code>equals</code> method returns <code>true</code>, even though <code>Float.NaN==Float.NaN</code> has\n     * the value <code>false</code>.\n     * <li>If <code>f1</code> represents <code>+0.0f</code> while <code>f2</code> represents <code>-0.0f</code>,\n     * or vice versa, the <code>equal</code> test has the value <code>false</code>, even though\n     * <code>0.0f==-0.0f</code> has the value <code>true</code>.\n     * </ul>\n     * This definition allows hashtables to operate properly.\n     * \n     * @param obj\n     *            the object to be compared\n     * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.\n     * @see java.lang.Float#floatToIntBits(float)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableFloat.java",
        "class_name": "org.apache.commons.lang.mutable.MutableFloat",
        "signature": "org.apache.commons.lang.mutable.MutableFloat.hashCode()",
        "snippet": "    public int hashCode() {\n        return Float.floatToIntBits(value);\n    }",
        "begin_line": 287,
        "end_line": 289,
        "comment": "\n     * Returns a suitable hashcode for this mutable.\n     * \n     * @return a suitable hashcode\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableFloat.java",
        "class_name": "org.apache.commons.lang.mutable.MutableFloat",
        "signature": "org.apache.commons.lang.mutable.MutableFloat.compareTo(java.lang.Object)",
        "snippet": "    public int compareTo(Object obj) {\n        MutableFloat other = (MutableFloat) obj;\n        float anotherVal = other.value;\n        return NumberUtils.compare(value, anotherVal);\n    }",
        "begin_line": 298,
        "end_line": 302,
        "comment": "\n     * Compares this mutable to another in ascending order.\n     * \n     * @param obj\n     *            the mutable to compare to\n     * @return negative if this is less, zero if equal, positive if greater\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableFloat.java",
        "class_name": "org.apache.commons.lang.mutable.MutableFloat",
        "signature": "org.apache.commons.lang.mutable.MutableFloat.toString()",
        "snippet": "    public String toString() {\n        return String.valueOf(value);\n    }",
        "begin_line": 309,
        "end_line": 311,
        "comment": "\n     * Returns the String value of this mutable.\n     * \n     * @return the mutable value as a string\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableDouble.java",
        "class_name": "org.apache.commons.lang.mutable.MutableDouble",
        "signature": "org.apache.commons.lang.mutable.MutableDouble.MutableDouble()",
        "snippet": "    public MutableDouble() {\n        super();\n    }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "\n     * Constructs a new MutableDouble with the default value of zero.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableDouble.java",
        "class_name": "org.apache.commons.lang.mutable.MutableDouble",
        "signature": "org.apache.commons.lang.mutable.MutableDouble.MutableDouble(double)",
        "snippet": "    public MutableDouble(double value) {\n        super();\n        this.value = value;\n    }",
        "begin_line": 53,
        "end_line": 56,
        "comment": "\n     * Constructs a new MutableDouble with the specified value.\n     * \n     * @param value\n     *            a value.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableDouble.java",
        "class_name": "org.apache.commons.lang.mutable.MutableDouble",
        "signature": "org.apache.commons.lang.mutable.MutableDouble.MutableDouble(java.lang.Number)",
        "snippet": "    public MutableDouble(Number value) {\n        super();\n        this.value = value.doubleValue();\n    }",
        "begin_line": 66,
        "end_line": 69,
        "comment": "\n     * Constructs a new MutableDouble with the specified value.\n     * \n     * @param value\n     *            a value.\n     * @throws NullPointerException\n     *             if the object is null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableDouble.java",
        "class_name": "org.apache.commons.lang.mutable.MutableDouble",
        "signature": "org.apache.commons.lang.mutable.MutableDouble.getValue()",
        "snippet": "    public Object getValue() {\n        return new Double(this.value);\n    }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n     * Gets the value as a Double instance.\n     * \n     * @return the value as a Double\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableDouble.java",
        "class_name": "org.apache.commons.lang.mutable.MutableDouble",
        "signature": "org.apache.commons.lang.mutable.MutableDouble.setValue(double)",
        "snippet": "    public void setValue(double value) {\n        this.value = value;\n    }",
        "begin_line": 87,
        "end_line": 89,
        "comment": "\n     * Sets the value.\n     * \n     * @param value\n     *            the value to set\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableDouble.java",
        "class_name": "org.apache.commons.lang.mutable.MutableDouble",
        "signature": "org.apache.commons.lang.mutable.MutableDouble.setValue(java.lang.Object)",
        "snippet": "    public void setValue(Object value) {\n        setValue(((Number) value).doubleValue());\n    }",
        "begin_line": 101,
        "end_line": 103,
        "comment": "\n     * Sets the value from any Number instance.\n     * \n     * @param value\n     *            the value to set\n     * @throws NullPointerException\n     *             if the object is null\n     * @throws ClassCastException\n     *             if the type is not a {@link Number}\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableDouble.java",
        "class_name": "org.apache.commons.lang.mutable.MutableDouble",
        "signature": "org.apache.commons.lang.mutable.MutableDouble.intValue()",
        "snippet": "    public int intValue() {\n        return (int) value;\n    }",
        "begin_line": 112,
        "end_line": 114,
        "comment": "\n     * Returns the value of this MutableDouble as a int.\n     *\n     * @return the numeric value represented by this object after conversion to type int.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableDouble.java",
        "class_name": "org.apache.commons.lang.mutable.MutableDouble",
        "signature": "org.apache.commons.lang.mutable.MutableDouble.longValue()",
        "snippet": "    public long longValue() {\n        return (long) value;\n    }",
        "begin_line": 121,
        "end_line": 123,
        "comment": "\n     * Returns the value of this MutableDouble as a long.\n     *\n     * @return the numeric value represented by this object after conversion to type long.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableDouble.java",
        "class_name": "org.apache.commons.lang.mutable.MutableDouble",
        "signature": "org.apache.commons.lang.mutable.MutableDouble.floatValue()",
        "snippet": "    public float floatValue() {\n        return (float) value;\n    }",
        "begin_line": 130,
        "end_line": 132,
        "comment": "\n     * Returns the value of this MutableDouble as a float.\n     *\n     * @return the numeric value represented by this object after conversion to type float.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableDouble.java",
        "class_name": "org.apache.commons.lang.mutable.MutableDouble",
        "signature": "org.apache.commons.lang.mutable.MutableDouble.doubleValue()",
        "snippet": "    public double doubleValue() {\n        return value;\n    }",
        "begin_line": 139,
        "end_line": 141,
        "comment": "\n     * Returns the value of this MutableDouble as a double.\n     *\n     * @return the numeric value represented by this object after conversion to type double.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableDouble.java",
        "class_name": "org.apache.commons.lang.mutable.MutableDouble",
        "signature": "org.apache.commons.lang.mutable.MutableDouble.isNaN()",
        "snippet": "    public boolean isNaN() {\n        return Double.isNaN(value);\n    }",
        "begin_line": 148,
        "end_line": 150,
        "comment": "\n     * Checks whether the double value is the special NaN value.\n     * \n     * @return true if NaN\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableDouble.java",
        "class_name": "org.apache.commons.lang.mutable.MutableDouble",
        "signature": "org.apache.commons.lang.mutable.MutableDouble.isInfinite()",
        "snippet": "    public boolean isInfinite() {\n        return Double.isInfinite(value);\n    }",
        "begin_line": 157,
        "end_line": 159,
        "comment": "\n     * Checks whether the double value is infinite.\n     * \n     * @return true if infinite\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableDouble.java",
        "class_name": "org.apache.commons.lang.mutable.MutableDouble",
        "signature": "org.apache.commons.lang.mutable.MutableDouble.toDouble()",
        "snippet": "    public Double toDouble() {\n        return new Double(doubleValue());\n    }",
        "begin_line": 167,
        "end_line": 169,
        "comment": "\n     * Gets this mutable as an instance of Double.\n     *\n     * @return a Double instance containing the value from this mutable\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableDouble.java",
        "class_name": "org.apache.commons.lang.mutable.MutableDouble",
        "signature": "org.apache.commons.lang.mutable.MutableDouble.increment()",
        "snippet": "    public void increment() {\n        value++;\n    }",
        "begin_line": 177,
        "end_line": 179,
        "comment": "\n     * Increments the value.\n     *\n     * @since Commons Lang 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableDouble.java",
        "class_name": "org.apache.commons.lang.mutable.MutableDouble",
        "signature": "org.apache.commons.lang.mutable.MutableDouble.decrement()",
        "snippet": "    public void decrement() {\n        value--;\n    }",
        "begin_line": 186,
        "end_line": 188,
        "comment": "\n     * Decrements the value.\n     *\n     * @since Commons Lang 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableDouble.java",
        "class_name": "org.apache.commons.lang.mutable.MutableDouble",
        "signature": "org.apache.commons.lang.mutable.MutableDouble.add(double)",
        "snippet": "    public void add(double operand) {\n        this.value += operand;\n    }",
        "begin_line": 199,
        "end_line": 201,
        "comment": "\n     * Adds a value.\n     * \n     * @param operand\n     *            the value to add\n     *\n     * @since Commons Lang 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableDouble.java",
        "class_name": "org.apache.commons.lang.mutable.MutableDouble",
        "signature": "org.apache.commons.lang.mutable.MutableDouble.add(java.lang.Number)",
        "snippet": "    public void add(Number operand) {\n        this.value += operand.doubleValue();\n    }",
        "begin_line": 213,
        "end_line": 215,
        "comment": "\n     * Adds a value.\n     * \n     * @param operand\n     *            the value to add\n     * @throws NullPointerException\n     *             if the object is null\n     *\n     * @since Commons Lang 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableDouble.java",
        "class_name": "org.apache.commons.lang.mutable.MutableDouble",
        "signature": "org.apache.commons.lang.mutable.MutableDouble.subtract(double)",
        "snippet": "    public void subtract(double operand) {\n        this.value -= operand;\n    }",
        "begin_line": 225,
        "end_line": 227,
        "comment": "\n     * Subtracts a value.\n     * \n     * @param operand\n     *            the value to add\n     *\n     * @since Commons Lang 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableDouble.java",
        "class_name": "org.apache.commons.lang.mutable.MutableDouble",
        "signature": "org.apache.commons.lang.mutable.MutableDouble.subtract(java.lang.Number)",
        "snippet": "    public void subtract(Number operand) {\n        this.value -= operand.doubleValue();\n    }",
        "begin_line": 239,
        "end_line": 241,
        "comment": "\n     * Subtracts a value.\n     * \n     * @param operand\n     *            the value to add\n     * @throws NullPointerException\n     *             if the object is null\n     *\n     * @since Commons Lang 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableDouble.java",
        "class_name": "org.apache.commons.lang.mutable.MutableDouble",
        "signature": "org.apache.commons.lang.mutable.MutableDouble.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        return (obj instanceof MutableDouble)\n            && (Double.doubleToLongBits(((MutableDouble) obj).value) == Double.doubleToLongBits(value));\n    }",
        "begin_line": 274,
        "end_line": 277,
        "comment": "\n     * Compares this object against the specified object. The result is <code>true</code> if and only if the argument\n     * is not <code>null</code> and is a <code>Double</code> object that represents a double that has the identical\n     * bit pattern to the bit pattern of the double represented by this object. For this purpose, two\n     * <code>double</code> values are considered to be the same if and only if the method\n     * {@link Double#doubleToLongBits(double)}returns the same long value when applied to each.\n     * <p>\n     * Note that in most cases, for two instances of class <code>Double</code>,<code>d1</code> and <code>d2</code>,\n     * the value of <code>d1.equals(d2)</code> is <code>true</code> if and only if <blockquote>\n     * \n     * <pre>\n     *   d1.doubleValue()&nbsp;== d2.doubleValue()\n     * </pre>\n     * \n     * </blockquote>\n     * <p>\n     * also has the value <code>true</code>. However, there are two exceptions:\n     * <ul>\n     * <li>If <code>d1</code> and <code>d2</code> both represent <code>Double.NaN</code>, then the\n     * <code>equals</code> method returns <code>true</code>, even though <code>Double.NaN==Double.NaN</code> has\n     * the value <code>false</code>.\n     * <li>If <code>d1</code> represents <code>+0.0</code> while <code>d2</code> represents <code>-0.0</code>,\n     * or vice versa, the <code>equal</code> test has the value <code>false</code>, even though\n     * <code>+0.0==-0.0</code> has the value <code>true</code>. This allows hashtables to operate properly.\n     * </ul>\n     * \n     * @param obj\n     *            the object to compare with.\n     * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableDouble.java",
        "class_name": "org.apache.commons.lang.mutable.MutableDouble",
        "signature": "org.apache.commons.lang.mutable.MutableDouble.hashCode()",
        "snippet": "    public int hashCode() {\n        long bits = Double.doubleToLongBits(value);\n        return (int) (bits ^ (bits >>> 32));\n    }",
        "begin_line": 284,
        "end_line": 287,
        "comment": "\n     * Returns a suitable hashcode for this mutable.\n     * \n     * @return a suitable hashcode\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableDouble.java",
        "class_name": "org.apache.commons.lang.mutable.MutableDouble",
        "signature": "org.apache.commons.lang.mutable.MutableDouble.compareTo(java.lang.Object)",
        "snippet": "    public int compareTo(Object obj) {\n        MutableDouble other = (MutableDouble) obj;\n        double anotherVal = other.value;\n        return NumberUtils.compare(value, anotherVal);\n    }",
        "begin_line": 297,
        "end_line": 301,
        "comment": "\n     * Compares this mutable to another in ascending order.\n     * \n     * @param obj\n     *            the mutable to compare to\n     * @return negative if this is less, zero if equal, positive if greater\n     * @throws ClassCastException if the argument is not a MutableDouble\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableDouble.java",
        "class_name": "org.apache.commons.lang.mutable.MutableDouble",
        "signature": "org.apache.commons.lang.mutable.MutableDouble.toString()",
        "snippet": "    public String toString() {\n        return String.valueOf(value);\n    }",
        "begin_line": 308,
        "end_line": 310,
        "comment": "\n     * Returns the String value of this mutable.\n     * \n     * @return the mutable value as a string\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableInt.java",
        "class_name": "org.apache.commons.lang.mutable.MutableInt",
        "signature": "org.apache.commons.lang.mutable.MutableInt.MutableInt()",
        "snippet": "    public MutableInt() {\n        super();\n    }",
        "begin_line": 41,
        "end_line": 43,
        "comment": "\n     * Constructs a new MutableInt with the default value of zero.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableInt.java",
        "class_name": "org.apache.commons.lang.mutable.MutableInt",
        "signature": "org.apache.commons.lang.mutable.MutableInt.MutableInt(int)",
        "snippet": "    public MutableInt(int value) {\n        super();\n        this.value = value;\n    }",
        "begin_line": 51,
        "end_line": 54,
        "comment": "\n     * Constructs a new MutableInt with the specified value.\n     * \n     * @param value\n     *                  a value.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableInt.java",
        "class_name": "org.apache.commons.lang.mutable.MutableInt",
        "signature": "org.apache.commons.lang.mutable.MutableInt.MutableInt(java.lang.Number)",
        "snippet": "    public MutableInt(Number value) {\n        super();\n        this.value = value.intValue();\n    }",
        "begin_line": 64,
        "end_line": 67,
        "comment": "\n     * Constructs a new MutableInt with the specified value.\n     * \n     * @param value\n     *                  a value.\n     * @throws NullPointerException\n     *                  if the object is null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableInt.java",
        "class_name": "org.apache.commons.lang.mutable.MutableInt",
        "signature": "org.apache.commons.lang.mutable.MutableInt.getValue()",
        "snippet": "    public Object getValue() {\n        return new Integer(this.value);\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Gets the value as a Integer instance.\n     * \n     * @return the value as a Integer\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableInt.java",
        "class_name": "org.apache.commons.lang.mutable.MutableInt",
        "signature": "org.apache.commons.lang.mutable.MutableInt.setValue(int)",
        "snippet": "    public void setValue(int value) {\n        this.value = value;\n    }",
        "begin_line": 85,
        "end_line": 87,
        "comment": "\n     * Sets the value.\n     * \n     * @param value\n     *                  the value to set\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableInt.java",
        "class_name": "org.apache.commons.lang.mutable.MutableInt",
        "signature": "org.apache.commons.lang.mutable.MutableInt.setValue(java.lang.Object)",
        "snippet": "    public void setValue(Object value) {\n        setValue(((Number) value).intValue());\n    }",
        "begin_line": 99,
        "end_line": 101,
        "comment": "\n     * Sets the value from any Number instance.\n     * \n     * @param value\n     *                  the value to set\n     * @throws NullPointerException\n     *                  if the object is null\n     * @throws ClassCastException\n     *                  if the type is not a {@link Number}\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableInt.java",
        "class_name": "org.apache.commons.lang.mutable.MutableInt",
        "signature": "org.apache.commons.lang.mutable.MutableInt.increment()",
        "snippet": "    public void increment() {\n        value++;\n    }",
        "begin_line": 109,
        "end_line": 111,
        "comment": "\n     * Increments the value.\n     *\n     * @since Commons Lang 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableInt.java",
        "class_name": "org.apache.commons.lang.mutable.MutableInt",
        "signature": "org.apache.commons.lang.mutable.MutableInt.decrement()",
        "snippet": "    public void decrement() {\n        value--;\n    }",
        "begin_line": 118,
        "end_line": 120,
        "comment": "\n     * Decrements the value.\n     *\n     * @since Commons Lang 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableInt.java",
        "class_name": "org.apache.commons.lang.mutable.MutableInt",
        "signature": "org.apache.commons.lang.mutable.MutableInt.add(int)",
        "snippet": "    public void add(int operand) {\n        this.value += operand;\n    }",
        "begin_line": 131,
        "end_line": 133,
        "comment": "\n     * Adds a value.\n     * \n     * @param operand\n     *            the value to add\n     *\n     * @since Commons Lang 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableInt.java",
        "class_name": "org.apache.commons.lang.mutable.MutableInt",
        "signature": "org.apache.commons.lang.mutable.MutableInt.add(java.lang.Number)",
        "snippet": "    public void add(Number operand) {\n        this.value += operand.intValue();\n    }",
        "begin_line": 145,
        "end_line": 147,
        "comment": "\n     * Adds a value.\n     * \n     * @param operand\n     *            the value to add\n     * @throws NullPointerException\n     *             if the object is null\n     *\n     * @since Commons Lang 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableInt.java",
        "class_name": "org.apache.commons.lang.mutable.MutableInt",
        "signature": "org.apache.commons.lang.mutable.MutableInt.subtract(int)",
        "snippet": "    public void subtract(int operand) {\n        this.value -= operand;\n    }",
        "begin_line": 157,
        "end_line": 159,
        "comment": "\n     * Subtracts a value.\n     * \n     * @param operand\n     *            the value to add\n     *\n     * @since Commons Lang 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableInt.java",
        "class_name": "org.apache.commons.lang.mutable.MutableInt",
        "signature": "org.apache.commons.lang.mutable.MutableInt.subtract(java.lang.Number)",
        "snippet": "    public void subtract(Number operand) {\n        this.value -= operand.intValue();\n    }",
        "begin_line": 171,
        "end_line": 173,
        "comment": "\n     * Subtracts a value.\n     * \n     * @param operand\n     *            the value to add\n     * @throws NullPointerException\n     *             if the object is null\n     *\n     * @since Commons Lang 2.2\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableInt.java",
        "class_name": "org.apache.commons.lang.mutable.MutableInt",
        "signature": "org.apache.commons.lang.mutable.MutableInt.intValue()",
        "snippet": "    public int intValue() {\n        return value;\n    }",
        "begin_line": 182,
        "end_line": 184,
        "comment": "\n     * Returns the value of this MutableInt as a int.\n     *\n     * @return the numeric value represented by this object after conversion to type int.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableInt.java",
        "class_name": "org.apache.commons.lang.mutable.MutableInt",
        "signature": "org.apache.commons.lang.mutable.MutableInt.longValue()",
        "snippet": "    public long longValue() {\n        return value;\n    }",
        "begin_line": 191,
        "end_line": 193,
        "comment": "\n     * Returns the value of this MutableInt as a long.\n     *\n     * @return the numeric value represented by this object after conversion to type long.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableInt.java",
        "class_name": "org.apache.commons.lang.mutable.MutableInt",
        "signature": "org.apache.commons.lang.mutable.MutableInt.floatValue()",
        "snippet": "    public float floatValue() {\n        return value;\n    }",
        "begin_line": 200,
        "end_line": 202,
        "comment": "\n     * Returns the value of this MutableInt as a float.\n     *\n     * @return the numeric value represented by this object after conversion to type float.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableInt.java",
        "class_name": "org.apache.commons.lang.mutable.MutableInt",
        "signature": "org.apache.commons.lang.mutable.MutableInt.doubleValue()",
        "snippet": "    public double doubleValue() {\n        return value;\n    }",
        "begin_line": 209,
        "end_line": 211,
        "comment": "\n     * Returns the value of this MutableInt as a double.\n     *\n     * @return the numeric value represented by this object after conversion to type double.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableInt.java",
        "class_name": "org.apache.commons.lang.mutable.MutableInt",
        "signature": "org.apache.commons.lang.mutable.MutableInt.toInteger()",
        "snippet": "    public Integer toInteger() {\n        return new Integer(intValue());\n    }",
        "begin_line": 219,
        "end_line": 221,
        "comment": "\n     * Gets this mutable as an instance of Integer.\n     *\n     * @return a Integer instance containing the value from this mutable\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableInt.java",
        "class_name": "org.apache.commons.lang.mutable.MutableInt",
        "signature": "org.apache.commons.lang.mutable.MutableInt.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj instanceof MutableInt) {\n            return value == ((MutableInt) obj).intValue();\n        }\n        return false;\n    }",
        "begin_line": 233,
        "end_line": 238,
        "comment": "\n     * Compares this object to the specified object. The result is <code>true</code> if and only if the argument is\n     * not <code>null</code> and is an <code>MutableInt</code> object that contains the same <code>int</code> value\n     * as this object.\n     * \n     * @param obj\n     *                  the object to compare with.\n     * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableInt.java",
        "class_name": "org.apache.commons.lang.mutable.MutableInt",
        "signature": "org.apache.commons.lang.mutable.MutableInt.hashCode()",
        "snippet": "    public int hashCode() {\n        return value;\n    }",
        "begin_line": 245,
        "end_line": 247,
        "comment": "\n     * Returns a suitable hashcode for this mutable.\n     * \n     * @return a suitable hashcode\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableInt.java",
        "class_name": "org.apache.commons.lang.mutable.MutableInt",
        "signature": "org.apache.commons.lang.mutable.MutableInt.compareTo(java.lang.Object)",
        "snippet": "    public int compareTo(Object obj) {\n        MutableInt other = (MutableInt) obj;\n        int anotherVal = other.value;\n        return value < anotherVal ? -1 : (value == anotherVal ? 0 : 1);\n    }",
        "begin_line": 257,
        "end_line": 261,
        "comment": "\n     * Compares this mutable to another in ascending order.\n     * \n     * @param obj\n     *                  the mutable to compare to\n     * @return negative if this is less, zero if equal, positive if greater\n     * @throws ClassCastException if the argument is not a MutableInt\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableInt.java",
        "class_name": "org.apache.commons.lang.mutable.MutableInt",
        "signature": "org.apache.commons.lang.mutable.MutableInt.toString()",
        "snippet": "    public String toString() {\n        return String.valueOf(value);\n    }",
        "begin_line": 268,
        "end_line": 270,
        "comment": "\n     * Returns the String value of this mutable.\n     * \n     * @return the mutable value as a string\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableBoolean.java",
        "class_name": "org.apache.commons.lang.mutable.MutableBoolean",
        "signature": "org.apache.commons.lang.mutable.MutableBoolean.MutableBoolean()",
        "snippet": "    public MutableBoolean() {\n        super();\n    }",
        "begin_line": 45,
        "end_line": 47,
        "comment": "\n     * Constructs a new MutableBoolean with the default value of false.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableBoolean.java",
        "class_name": "org.apache.commons.lang.mutable.MutableBoolean",
        "signature": "org.apache.commons.lang.mutable.MutableBoolean.MutableBoolean(boolean)",
        "snippet": "    public MutableBoolean(boolean value) {\n        super();\n        this.value = value;\n    }",
        "begin_line": 55,
        "end_line": 58,
        "comment": "\n     * Constructs a new MutableBoolean with the specified value.\n     * \n     * @param value\n     *            a value.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableBoolean.java",
        "class_name": "org.apache.commons.lang.mutable.MutableBoolean",
        "signature": "org.apache.commons.lang.mutable.MutableBoolean.MutableBoolean(java.lang.Boolean)",
        "snippet": "    public MutableBoolean(Boolean value) {\n        super();\n        this.value = value.booleanValue();\n    }",
        "begin_line": 68,
        "end_line": 71,
        "comment": "\n     * Constructs a new MutableBoolean with the specified value.\n     * \n     * @param value\n     *            a value.\n     * @throws NullPointerException\n     *             if the object is null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableBoolean.java",
        "class_name": "org.apache.commons.lang.mutable.MutableBoolean",
        "signature": "org.apache.commons.lang.mutable.MutableBoolean.booleanValue()",
        "snippet": "    public boolean booleanValue() {\n        return value;\n    }",
        "begin_line": 79,
        "end_line": 81,
        "comment": "\n     * Returns the value of this MutableBoolean as a boolean.\n     * \n     * @return the boolean value represented by this object.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableBoolean.java",
        "class_name": "org.apache.commons.lang.mutable.MutableBoolean",
        "signature": "org.apache.commons.lang.mutable.MutableBoolean.compareTo(java.lang.Object)",
        "snippet": "    public int compareTo(Object obj) {\n        MutableBoolean other = (MutableBoolean) obj;\n        boolean anotherVal = other.value;\n        return value == anotherVal ? 0 : (value ? 1 : -1);\n    }",
        "begin_line": 94,
        "end_line": 98,
        "comment": "\n     * Compares this mutable to another in ascending order.\n     * \n     * @param obj\n     *            the mutable to compare to\n     * @return zero if this object represents the same boolean value as the argument; a positive value if this object\n     *         represents true and the argument represents false; and a negative value if this object represents false\n     *         and the argument represents true\n     * @throws ClassCastException\n     *             if the argument is not a MutableInt\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableBoolean.java",
        "class_name": "org.apache.commons.lang.mutable.MutableBoolean",
        "signature": "org.apache.commons.lang.mutable.MutableBoolean.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj instanceof MutableBoolean) {\n            return value == ((MutableBoolean) obj).booleanValue();\n        }\n        return false;\n    }",
        "begin_line": 110,
        "end_line": 115,
        "comment": "\n     * Compares this object to the specified object. The result is <code>true</code> if and only if the argument is\n     * not <code>null</code> and is an <code>MutableBoolean</code> object that contains the same\n     * <code>boolean</code> value as this object.\n     * \n     * @param obj\n     *            the object to compare with.\n     * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableBoolean.java",
        "class_name": "org.apache.commons.lang.mutable.MutableBoolean",
        "signature": "org.apache.commons.lang.mutable.MutableBoolean.getValue()",
        "snippet": "    public Object getValue() {\n        return Boolean.valueOf(this.value);\n    }",
        "begin_line": 123,
        "end_line": 125,
        "comment": "\n     * Gets the value as a Boolean instance.\n     * \n     * @return the value as a Boolean\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableBoolean.java",
        "class_name": "org.apache.commons.lang.mutable.MutableBoolean",
        "signature": "org.apache.commons.lang.mutable.MutableBoolean.hashCode()",
        "snippet": "    public int hashCode() {\n        return value ? Boolean.TRUE.hashCode() : Boolean.FALSE.hashCode();\n    }",
        "begin_line": 133,
        "end_line": 135,
        "comment": "\n     * Returns a suitable hashcode for this mutable.\n     * \n     * @return the integer <code>1231</code> if this object represents <code>true</code>; returns the integer\n     *         <code>1237</code> if this object represents <code>false</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableBoolean.java",
        "class_name": "org.apache.commons.lang.mutable.MutableBoolean",
        "signature": "org.apache.commons.lang.mutable.MutableBoolean.setValue(boolean)",
        "snippet": "    public void setValue(boolean value) {\n        this.value = value;\n    }",
        "begin_line": 143,
        "end_line": 145,
        "comment": "\n     * Sets the value.\n     * \n     * @param value\n     *            the value to set\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableBoolean.java",
        "class_name": "org.apache.commons.lang.mutable.MutableBoolean",
        "signature": "org.apache.commons.lang.mutable.MutableBoolean.setValue(java.lang.Object)",
        "snippet": "    public void setValue(Object value) {\n        setValue(((Boolean) value).booleanValue());\n    }",
        "begin_line": 157,
        "end_line": 159,
        "comment": "\n     * Sets the value from any Boolean instance.\n     * \n     * @param value\n     *            the value to set\n     * @throws NullPointerException\n     *             if the object is null\n     * @throws ClassCastException\n     *             if the type is not a {@link Boolean}\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/MutableBoolean.java",
        "class_name": "org.apache.commons.lang.mutable.MutableBoolean",
        "signature": "org.apache.commons.lang.mutable.MutableBoolean.toString()",
        "snippet": "    public String toString() {\n        return String.valueOf(value);\n    }",
        "begin_line": 166,
        "end_line": 168,
        "comment": "\n     * Returns the String value of this mutable.\n     * \n     * @return the mutable value as a string\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/Mutable.java",
        "class_name": "org.apache.commons.lang.mutable.Mutable",
        "signature": "org.apache.commons.lang.mutable.Mutable.getValue()",
        "snippet": "    Object getValue();",
        "begin_line": 40,
        "end_line": 40,
        "comment": "\n     * Gets the value of this mutable.\n     * \n     * @return the stored value\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/mutable/Mutable.java",
        "class_name": "org.apache.commons.lang.mutable.Mutable",
        "signature": "org.apache.commons.lang.mutable.Mutable.setValue(java.lang.Object)",
        "snippet": "    void setValue(Object value);",
        "begin_line": 52,
        "end_line": 52,
        "comment": "\n     * Sets the value of this mutable.\n     * \n     * @param value\n     *            the value to store\n     * @throws NullPointerException\n     *             if the object is null and null is invalid\n     * @throws ClassCastException\n     *             if the type is invalid\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/RandomUtils.java",
        "class_name": "org.apache.commons.lang.math.RandomUtils",
        "signature": "org.apache.commons.lang.math.RandomUtils.nextInt()",
        "snippet": "    public static int nextInt() {\n        return nextInt(JVM_RANDOM);\n    }",
        "begin_line": 50,
        "end_line": 52,
        "comment": "\n     * <p>Returns the next pseudorandom, uniformly distributed int value\n     * from the Math.random() sequence.</p>\n     *\n     * @return the random int\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/RandomUtils.java",
        "class_name": "org.apache.commons.lang.math.RandomUtils",
        "signature": "org.apache.commons.lang.math.RandomUtils.nextInt(java.util.Random)",
        "snippet": "    public static int nextInt(Random random) {\n        return random.nextInt();\n    }",
        "begin_line": 61,
        "end_line": 63,
        "comment": "\n     * <p>Returns the next pseudorandom, uniformly distributed int value\n     * from the given <code>random</code> sequence.</p>\n     *\n     * @param random the Random sequence generator.\n     * @return the random int\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/RandomUtils.java",
        "class_name": "org.apache.commons.lang.math.RandomUtils",
        "signature": "org.apache.commons.lang.math.RandomUtils.nextInt(int)",
        "snippet": "    public static int nextInt(int n) {\n        return nextInt(JVM_RANDOM, n);\n    }",
        "begin_line": 73,
        "end_line": 75,
        "comment": "\n     * <p>Returns a pseudorandom, uniformly distributed int value\n     * between <code>0</code> (inclusive) and the specified value\n     * (exclusive), from the Math.random() sequence.</p>\n     *\n     * @param n  the specified exclusive max-value\n     * @return the random int\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/RandomUtils.java",
        "class_name": "org.apache.commons.lang.math.RandomUtils",
        "signature": "org.apache.commons.lang.math.RandomUtils.nextInt(java.util.Random, int)",
        "snippet": "    public static int nextInt(Random random, int n) {\n        // check this cannot return 'n'\n        return random.nextInt(n);\n    }",
        "begin_line": 86,
        "end_line": 89,
        "comment": "\n     * <p>Returns a pseudorandom, uniformly distributed int value\n     * between <code>0</code> (inclusive) and the specified value\n     * (exclusive), from the given Random sequence.</p>\n     *\n     * @param random the Random sequence generator.\n     * @param n  the specified exclusive max-value\n     * @return the random int\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/RandomUtils.java",
        "class_name": "org.apache.commons.lang.math.RandomUtils",
        "signature": "org.apache.commons.lang.math.RandomUtils.nextLong()",
        "snippet": "    public static long nextLong() {\n        return nextLong(JVM_RANDOM);\n    }",
        "begin_line": 97,
        "end_line": 99,
        "comment": "\n     * <p>Returns the next pseudorandom, uniformly distributed long value\n     * from the Math.random() sequence.</p>\n     *\n     * @return the random long\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/RandomUtils.java",
        "class_name": "org.apache.commons.lang.math.RandomUtils",
        "signature": "org.apache.commons.lang.math.RandomUtils.nextLong(java.util.Random)",
        "snippet": "    public static long nextLong(Random random) {\n        return random.nextLong();\n    }",
        "begin_line": 108,
        "end_line": 110,
        "comment": "\n     * <p>Returns the next pseudorandom, uniformly distributed long value\n     * from the given Random sequence.</p>\n     *\n     * @param random the Random sequence generator.\n     * @return the random long\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/RandomUtils.java",
        "class_name": "org.apache.commons.lang.math.RandomUtils",
        "signature": "org.apache.commons.lang.math.RandomUtils.nextBoolean()",
        "snippet": "    public static boolean nextBoolean() {\n        return nextBoolean(JVM_RANDOM);\n    }",
        "begin_line": 118,
        "end_line": 120,
        "comment": "\n     * <p>Returns the next pseudorandom, uniformly distributed boolean value\n     * from the Math.random() sequence.</p>\n     *\n     * @return the random boolean\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/RandomUtils.java",
        "class_name": "org.apache.commons.lang.math.RandomUtils",
        "signature": "org.apache.commons.lang.math.RandomUtils.nextBoolean(java.util.Random)",
        "snippet": "    public static boolean nextBoolean(Random random) {\n        return random.nextBoolean();\n    }",
        "begin_line": 129,
        "end_line": 131,
        "comment": "\n     * <p>Returns the next pseudorandom, uniformly distributed boolean value\n     * from the given random sequence.</p>\n     *\n     * @param random the Random sequence generator.\n     * @return the random boolean\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/RandomUtils.java",
        "class_name": "org.apache.commons.lang.math.RandomUtils",
        "signature": "org.apache.commons.lang.math.RandomUtils.nextFloat()",
        "snippet": "    public static float nextFloat() {\n        return nextFloat(JVM_RANDOM);\n    }",
        "begin_line": 140,
        "end_line": 142,
        "comment": "\n     * <p>Returns the next pseudorandom, uniformly distributed float value\n     * between <code>0.0</code> and <code>1.0</code> from the Math.random()\n     * sequence.</p>\n     *\n     * @return the random float\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/RandomUtils.java",
        "class_name": "org.apache.commons.lang.math.RandomUtils",
        "signature": "org.apache.commons.lang.math.RandomUtils.nextFloat(java.util.Random)",
        "snippet": "    public static float nextFloat(Random random) {\n        return random.nextFloat();\n    }",
        "begin_line": 152,
        "end_line": 154,
        "comment": "\n     * <p>Returns the next pseudorandom, uniformly distributed float value\n     * between <code>0.0</code> and <code>1.0</code> from the given Random\n     * sequence.</p>\n     *\n     * @param random the Random sequence generator.\n     * @return the random float\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/RandomUtils.java",
        "class_name": "org.apache.commons.lang.math.RandomUtils",
        "signature": "org.apache.commons.lang.math.RandomUtils.nextDouble()",
        "snippet": "    public static double nextDouble() {\n        return nextDouble(JVM_RANDOM);\n    }",
        "begin_line": 163,
        "end_line": 165,
        "comment": "\n     * <p>Returns the next pseudorandom, uniformly distributed float value\n     * between <code>0.0</code> and <code>1.0</code> from the Math.random()\n     * sequence.</p>\n     *\n     * @return the random double\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/RandomUtils.java",
        "class_name": "org.apache.commons.lang.math.RandomUtils",
        "signature": "org.apache.commons.lang.math.RandomUtils.nextDouble(java.util.Random)",
        "snippet": "    public static double nextDouble(Random random) {\n        return random.nextDouble();\n    }",
        "begin_line": 175,
        "end_line": 177,
        "comment": "\n     * <p>Returns the next pseudorandom, uniformly distributed float value\n     * between <code>0.0</code> and <code>1.0</code> from the given Random\n     * sequence.</p>\n     *\n     * @param random the Random sequence generator.\n     * @return the random double\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/JVMRandom.java",
        "class_name": "org.apache.commons.lang.math.JVMRandom",
        "signature": "org.apache.commons.lang.math.JVMRandom.JVMRandom()",
        "snippet": "    public JVMRandom() {\n        this.constructed = true;\n    }",
        "begin_line": 48,
        "end_line": 50,
        "comment": "\n     * Constructs a new instance.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/JVMRandom.java",
        "class_name": "org.apache.commons.lang.math.JVMRandom",
        "signature": "org.apache.commons.lang.math.JVMRandom.setSeed(long)",
        "snippet": "    public synchronized void setSeed(long seed) {\n        if (this.constructed) {\n            throw new UnsupportedOperationException();\n        }\n    }",
        "begin_line": 58,
        "end_line": 62,
        "comment": "\n     * Unsupported in 2.0.\n     * \n     * @param seed ignored\n     * @throws UnsupportedOperationException\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/JVMRandom.java",
        "class_name": "org.apache.commons.lang.math.JVMRandom",
        "signature": "org.apache.commons.lang.math.JVMRandom.nextGaussian()",
        "snippet": "    public synchronized double nextGaussian() {\n        throw new UnsupportedOperationException();\n    }",
        "begin_line": 70,
        "end_line": 72,
        "comment": "\n     * Unsupported in 2.0.\n     * \n     * @return Nothing, this method always throws an UnsupportedOperationException.\n     * @throws UnsupportedOperationException\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/JVMRandom.java",
        "class_name": "org.apache.commons.lang.math.JVMRandom",
        "signature": "org.apache.commons.lang.math.JVMRandom.nextBytes(byte[])",
        "snippet": "    public void nextBytes(byte[] byteArray) {\n        throw new UnsupportedOperationException();\n    }",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\n     * Unsupported in 2.0.\n     * \n     * @param byteArray ignored\n     * @throws UnsupportedOperationException\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/JVMRandom.java",
        "class_name": "org.apache.commons.lang.math.JVMRandom",
        "signature": "org.apache.commons.lang.math.JVMRandom.nextInt()",
        "snippet": "    public int nextInt() {\n        return nextInt(Integer.MAX_VALUE);\n    }",
        "begin_line": 90,
        "end_line": 92,
        "comment": "\n     * <p>Returns the next pseudorandom, uniformly distributed int value\n     * from the Math.random() sequence.</p>\n     *\n     * @return the random int\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/JVMRandom.java",
        "class_name": "org.apache.commons.lang.math.JVMRandom",
        "signature": "org.apache.commons.lang.math.JVMRandom.nextInt(int)",
        "snippet": "    public int nextInt(int n) {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\n                \"Upper bound for nextInt must be positive\"\n            );\n        }\n        // TODO: check this cannot return 'n'\n        return (int)(Math.random() * n);\n    }",
        "begin_line": 102,
        "end_line": 110,
        "comment": "\n     * <p>Returns a pseudorandom, uniformly distributed int value between\n     * <code>0</code> (inclusive) and the specified value (exclusive), from\n     * the Math.random() sequence.</p>\n     *\n     * @param n  the specified exclusive max-value\n     * @return the random int\n     * @throws IllegalArgumentException when <code>n &lt;= 0</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/JVMRandom.java",
        "class_name": "org.apache.commons.lang.math.JVMRandom",
        "signature": "org.apache.commons.lang.math.JVMRandom.nextLong()",
        "snippet": "    public long nextLong() {\n        // possible loss of precision?\n        return nextLong(Long.MAX_VALUE);\n    }",
        "begin_line": 116,
        "end_line": 119,
        "comment": "\n     * <p>Returns the next pseudorandom, uniformly distributed long value\n     * from the Math.random() sequence.</p>\n     * @return the random long\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/JVMRandom.java",
        "class_name": "org.apache.commons.lang.math.JVMRandom",
        "signature": "org.apache.commons.lang.math.JVMRandom.nextLong(long)",
        "snippet": "    public static long nextLong(long n) {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\n                \"Upper bound for nextInt must be positive\"\n            );\n        }\n        // TODO: check this cannot return 'n'\n        return (long)(Math.random() * n);\n     }",
        "begin_line": 131,
        "end_line": 139,
        "comment": "\n     * <p>Returns a pseudorandom, uniformly distributed long value between\n     * <code>0</code> (inclusive) and the specified value (exclusive), from\n     * the Math.random() sequence.</p>\n     *\n     * @param n  the specified exclusive max-value\n     * @return the random long\n     * @throws IllegalArgumentException when <code>n &lt;= 0</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/JVMRandom.java",
        "class_name": "org.apache.commons.lang.math.JVMRandom",
        "signature": "org.apache.commons.lang.math.JVMRandom.nextBoolean()",
        "snippet": "    public boolean nextBoolean() {\n        return Math.random() > 0.5;\n    }",
        "begin_line": 147,
        "end_line": 149,
        "comment": "\n     * <p>Returns the next pseudorandom, uniformly distributed boolean value\n     * from the Math.random() sequence.</p>\n     *\n     * @return the random boolean\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/JVMRandom.java",
        "class_name": "org.apache.commons.lang.math.JVMRandom",
        "signature": "org.apache.commons.lang.math.JVMRandom.nextFloat()",
        "snippet": "    public float nextFloat() {\n        return (float)Math.random();\n    }",
        "begin_line": 157,
        "end_line": 159,
        "comment": "\n     * <p>Returns the next pseudorandom, uniformly distributed float value\n     * between <code>0.0</code> and <code>1.0</code> from the Math.random()\n     * sequence.</p>\n     *\n     * @return the random float\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/JVMRandom.java",
        "class_name": "org.apache.commons.lang.math.JVMRandom",
        "signature": "org.apache.commons.lang.math.JVMRandom.nextDouble()",
        "snippet": "    public double nextDouble() {\n        return Math.random();\n    }",
        "begin_line": 165,
        "end_line": 167,
        "comment": "\n     * <p>Synonymous to the Math.random() call.</p>\n     *\n     * @return the random double\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/LongRange.java",
        "class_name": "org.apache.commons.lang.math.LongRange",
        "signature": "org.apache.commons.lang.math.LongRange.LongRange(long)",
        "snippet": "    public LongRange(long number) {\n        super();\n        this.min = number;\n        this.max = number;\n    }",
        "begin_line": 69,
        "end_line": 73,
        "comment": "\n     * <p>Constructs a new <code>LongRange</code> using the specified\n     * number as both the minimum and maximum in this range.</p>\n     *\n     * @param number  the number to use for this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/LongRange.java",
        "class_name": "org.apache.commons.lang.math.LongRange",
        "signature": "org.apache.commons.lang.math.LongRange.LongRange(java.lang.Number)",
        "snippet": "    public LongRange(Number number) {\n        super();\n        if (number == null) {\n            throw new IllegalArgumentException(\"The number must not be null\");\n        }\n        this.min = number.longValue();\n        this.max = number.longValue();\n        if (number instanceof Long) {\n            this.minObject = (Long) number;\n            this.maxObject = (Long) number;\n        }\n    }",
        "begin_line": 83,
        "end_line": 94,
        "comment": "\n     * <p>Constructs a new <code>LongRange</code> using the specified\n     * number as both the minimum and maximum in this range.</p>\n     *\n     * @param number  the number to use for this range, must not\n     *  be <code>null</code>\n     * @throws IllegalArgumentException if the number is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/LongRange.java",
        "class_name": "org.apache.commons.lang.math.LongRange",
        "signature": "org.apache.commons.lang.math.LongRange.LongRange(long, long)",
        "snippet": "    public LongRange(long number1, long number2) {\n        super();\n        if (number2 < number1) {\n            this.min = number2;\n            this.max = number1;\n        } else {\n            this.min = number1;\n            this.max = number2;\n        }\n    }",
        "begin_line": 106,
        "end_line": 115,
        "comment": "\n     * <p>Constructs a new <code>LongRange</code> with the specified\n     * minimum and maximum numbers (both inclusive).</p>\n     * \n     * <p>The arguments may be passed in the order (min,max) or (max,min). The\n     * getMinimum and getMaximum methods will return the correct values.</p>\n     * \n     * @param number1  first number that defines the edge of the range, inclusive\n     * @param number2  second number that defines the edge of the range, inclusive\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/LongRange.java",
        "class_name": "org.apache.commons.lang.math.LongRange",
        "signature": "org.apache.commons.lang.math.LongRange.LongRange(java.lang.Number, java.lang.Number)",
        "snippet": "    public LongRange(Number number1, Number number2) {\n        super();\n        if (number1 == null || number2 == null) {\n            throw new IllegalArgumentException(\"The numbers must not be null\");\n        }\n        long number1val = number1.longValue();\n        long number2val = number2.longValue();\n        if (number2val < number1val) {\n            this.min = number2val;\n            this.max = number1val;\n            if (number2 instanceof Long) {\n                this.minObject = (Long) number2;\n            }\n            if (number1 instanceof Long) {\n                this.maxObject = (Long) number1;\n            }\n        } else {\n            this.min = number1val;\n            this.max = number2val;\n            if (number1 instanceof Long) {\n                this.minObject = (Long) number1;\n            }\n            if (number2 instanceof Long) {\n                this.maxObject = (Long) number2;\n            }\n        }\n    }",
        "begin_line": 128,
        "end_line": 154,
        "comment": "\n     * <p>Constructs a new <code>LongRange</code> with the specified\n     * minimum and maximum numbers (both inclusive).</p>\n     * \n     * <p>The arguments may be passed in the order (min,max) or (max,min). The\n     * getMinimum and getMaximum methods will return the correct values.</p>\n     *\n     * @param number1  first number that defines the edge of the range, inclusive\n     * @param number2  second number that defines the edge of the range, inclusive\n     * @throws IllegalArgumentException if either number is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/LongRange.java",
        "class_name": "org.apache.commons.lang.math.LongRange",
        "signature": "org.apache.commons.lang.math.LongRange.getMinimumNumber()",
        "snippet": "    public Number getMinimumNumber() {\n        if (minObject == null) {\n            minObject = new Long(min);            \n        }\n        return minObject;\n    }",
        "begin_line": 164,
        "end_line": 169,
        "comment": "\n     * <p>Returns the minimum number in this range.</p>\n     *\n     * @return the minimum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/LongRange.java",
        "class_name": "org.apache.commons.lang.math.LongRange",
        "signature": "org.apache.commons.lang.math.LongRange.getMinimumLong()",
        "snippet": "    public long getMinimumLong() {\n        return min;\n    }",
        "begin_line": 176,
        "end_line": 178,
        "comment": "\n     * <p>Gets the minimum number in this range as a <code>long</code>.</p>\n     *\n     * @return the minimum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/LongRange.java",
        "class_name": "org.apache.commons.lang.math.LongRange",
        "signature": "org.apache.commons.lang.math.LongRange.getMinimumInteger()",
        "snippet": "    public int getMinimumInteger() {\n        return (int) min;\n    }",
        "begin_line": 187,
        "end_line": 189,
        "comment": "\n     * <p>Gets the minimum number in this range as a <code>int</code>.</p>\n     * \n     * <p>This conversion can lose information for large values.</p>\n     *\n     * @return the minimum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/LongRange.java",
        "class_name": "org.apache.commons.lang.math.LongRange",
        "signature": "org.apache.commons.lang.math.LongRange.getMinimumDouble()",
        "snippet": "    public double getMinimumDouble() {\n        return min;\n    }",
        "begin_line": 198,
        "end_line": 200,
        "comment": "\n     * <p>Gets the minimum number in this range as a <code>double</code>.</p>\n     * \n     * <p>This conversion can lose information for large values.</p>\n     *\n     * @return the minimum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/LongRange.java",
        "class_name": "org.apache.commons.lang.math.LongRange",
        "signature": "org.apache.commons.lang.math.LongRange.getMinimumFloat()",
        "snippet": "    public float getMinimumFloat() {\n        return min;\n    }",
        "begin_line": 209,
        "end_line": 211,
        "comment": "\n     * <p>Gets the minimum number in this range as a <code>float</code>.</p>\n     * \n     * <p>This conversion can lose information for large values.</p>\n     *\n     * @return the minimum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/LongRange.java",
        "class_name": "org.apache.commons.lang.math.LongRange",
        "signature": "org.apache.commons.lang.math.LongRange.getMaximumNumber()",
        "snippet": "    public Number getMaximumNumber() {\n        if (maxObject == null) {\n            maxObject = new Long(max);            \n        }\n        return maxObject;\n    }",
        "begin_line": 218,
        "end_line": 223,
        "comment": "\n     * <p>Returns the maximum number in this range.</p>\n     *\n     * @return the maximum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/LongRange.java",
        "class_name": "org.apache.commons.lang.math.LongRange",
        "signature": "org.apache.commons.lang.math.LongRange.getMaximumLong()",
        "snippet": "    public long getMaximumLong() {\n        return max;\n    }",
        "begin_line": 230,
        "end_line": 232,
        "comment": "\n     * <p>Gets the maximum number in this range as a <code>long</code>.</p>\n     *\n     * @return the maximum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/LongRange.java",
        "class_name": "org.apache.commons.lang.math.LongRange",
        "signature": "org.apache.commons.lang.math.LongRange.getMaximumInteger()",
        "snippet": "    public int getMaximumInteger() {\n        return (int) max;\n    }",
        "begin_line": 241,
        "end_line": 243,
        "comment": "\n     * <p>Gets the maximum number in this range cast to an <code>int</code>.</p>\n     * \n     * <p>This conversion can lose information for large values.</p>\n     * \n     * @return the maximum number in this range cast to an <code>int</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/LongRange.java",
        "class_name": "org.apache.commons.lang.math.LongRange",
        "signature": "org.apache.commons.lang.math.LongRange.getMaximumDouble()",
        "snippet": "    public double getMaximumDouble() {\n        return max;\n    }",
        "begin_line": 252,
        "end_line": 254,
        "comment": "\n     * <p>Gets the maximum number in this range as a <code>double</code>.</p>\n     * \n     * <p>This conversion can lose information for large values.</p>\n     * \n     * @return The maximum number in this range as a <code>double</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/LongRange.java",
        "class_name": "org.apache.commons.lang.math.LongRange",
        "signature": "org.apache.commons.lang.math.LongRange.getMaximumFloat()",
        "snippet": "    public float getMaximumFloat() {\n        return max;\n    }",
        "begin_line": 263,
        "end_line": 265,
        "comment": "\n     * <p>Gets the maximum number in this range as a <code>float</code>.</p>\n     * \n     * <p>This conversion can lose information for large values.</p>\n     * \n     * @return The maximum number in this range as a <code>float</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/LongRange.java",
        "class_name": "org.apache.commons.lang.math.LongRange",
        "signature": "org.apache.commons.lang.math.LongRange.containsNumber(java.lang.Number)",
        "snippet": "    public boolean containsNumber(Number number) {\n        if (number == null) {\n            return false;\n        }\n        return containsLong(number.longValue());\n    }",
        "begin_line": 279,
        "end_line": 284,
        "comment": "\n     * <p>Tests whether the specified <code>number</code> occurs within\n     * this range using <code>long</code> comparison.</p>\n     * \n     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n     *\n     * @param number  the number to test, may be <code>null</code>\n     * @return <code>true</code> if the specified number occurs within this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/LongRange.java",
        "class_name": "org.apache.commons.lang.math.LongRange",
        "signature": "org.apache.commons.lang.math.LongRange.containsLong(long)",
        "snippet": "    public boolean containsLong(long value) {\n        return value >= min && value <= max;\n    }",
        "begin_line": 297,
        "end_line": 299,
        "comment": "\n     * <p>Tests whether the specified <code>long</code> occurs within\n     * this range using <code>long</code> comparison.</p>\n     * \n     * <p>This implementation overrides the superclass for performance as it is\n     * the most common case.</p>\n     * \n     * @param value  the long to test\n     * @return <code>true</code> if the specified number occurs within this\n     *  range by <code>long</code> comparison\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/LongRange.java",
        "class_name": "org.apache.commons.lang.math.LongRange",
        "signature": "org.apache.commons.lang.math.LongRange.containsRange(org.apache.commons.lang.math.Range)",
        "snippet": "    public boolean containsRange(Range range) {\n        if (range == null) {\n            return false;\n        }\n        return containsLong(range.getMinimumLong()) &&\n               containsLong(range.getMaximumLong());\n    }",
        "begin_line": 314,
        "end_line": 320,
        "comment": "\n     * <p>Tests whether the specified range occurs entirely within this range\n     * using <code>long</code> comparison.</p>\n     * \n     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n     *\n     * @param range  the range to test, may be <code>null</code>\n     * @return <code>true</code> if the specified range occurs entirely within this range\n     * @throws IllegalArgumentException if the range is not of this type\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/LongRange.java",
        "class_name": "org.apache.commons.lang.math.LongRange",
        "signature": "org.apache.commons.lang.math.LongRange.overlapsRange(org.apache.commons.lang.math.Range)",
        "snippet": "    public boolean overlapsRange(Range range) {\n        if (range == null) {\n            return false;\n        }\n        return range.containsLong(min) ||\n               range.containsLong(max) || \n               containsLong(range.getMinimumLong());\n    }",
        "begin_line": 331,
        "end_line": 338,
        "comment": "\n     * <p>Tests whether the specified range overlaps with this range\n     * using <code>long</code> comparison.</p>\n     * \n     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n     *\n     * @param range  the range to test, may be <code>null</code>\n     * @return <code>true</code> if the specified range overlaps with this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/LongRange.java",
        "class_name": "org.apache.commons.lang.math.LongRange",
        "signature": "org.apache.commons.lang.math.LongRange.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (obj instanceof LongRange == false) {\n            return false;\n        }\n        LongRange range = (LongRange) obj;\n        return min == range.min && max == range.max;\n    }",
        "begin_line": 351,
        "end_line": 360,
        "comment": "\n     * <p>Compares this range to another object to test if they are equal.</p>.\n     * \n     * <p>To be equal, the class, minimum and maximum must be equal.</p>\n     *\n     * @param obj the reference object with which to compare\n     * @return <code>true</code> if this object is equal\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/LongRange.java",
        "class_name": "org.apache.commons.lang.math.LongRange",
        "signature": "org.apache.commons.lang.math.LongRange.hashCode()",
        "snippet": "    public int hashCode() {\n        if (hashCode == 0) {\n            hashCode = 17;\n            hashCode = 37 * hashCode + getClass().hashCode();\n            hashCode = 37 * hashCode + ((int) (min ^ (min >> 32)));\n            hashCode = 37 * hashCode + ((int) (max ^ (max >> 32)));\n        }\n        return hashCode;\n    }",
        "begin_line": 367,
        "end_line": 375,
        "comment": "\n     * <p>Gets a hashCode for the range.</p>\n     *\n     * @return a hash code value for this object\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/LongRange.java",
        "class_name": "org.apache.commons.lang.math.LongRange",
        "signature": "org.apache.commons.lang.math.LongRange.toString()",
        "snippet": "    public String toString() {\n        if (toString == null) {\n            StringBuffer buf = new StringBuffer(32);\n            buf.append(\"Range[\");\n            buf.append(min);\n            buf.append(',');\n            buf.append(max);\n            buf.append(']');\n            toString = buf.toString();\n        }\n        return toString;\n    }",
        "begin_line": 384,
        "end_line": 395,
        "comment": "\n     * <p>Gets the range as a <code>String</code>.</p>\n     *\n     * <p>The format of the String is 'Range[<i>min</i>,<i>max</i>]'.</p>\n     *\n     * @return the <code>String</code> representation of this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/IntRange.java",
        "class_name": "org.apache.commons.lang.math.IntRange",
        "signature": "org.apache.commons.lang.math.IntRange.IntRange(int)",
        "snippet": "    public IntRange(int number) {\n        super();\n        this.min = number;\n        this.max = number;\n    }",
        "begin_line": 69,
        "end_line": 73,
        "comment": "\n     * <p>Constructs a new <code>IntRange</code> using the specified\n     * number as both the minimum and maximum in this range.</p>\n     *\n     * @param number  the number to use for this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/IntRange.java",
        "class_name": "org.apache.commons.lang.math.IntRange",
        "signature": "org.apache.commons.lang.math.IntRange.IntRange(java.lang.Number)",
        "snippet": "    public IntRange(Number number) {\n        super();\n        if (number == null) {\n            throw new IllegalArgumentException(\"The number must not be null\");\n        }\n        this.min = number.intValue();\n        this.max = number.intValue();\n        if (number instanceof Integer) {\n            this.minObject = (Integer) number;\n            this.maxObject = (Integer) number;\n        }\n    }",
        "begin_line": 82,
        "end_line": 93,
        "comment": "\n     * <p>Constructs a new <code>IntRange</code> using the specified\n     * number as both the minimum and maximum in this range.</p>\n     *\n     * @param number  the number to use for this range, must not be <code>null</code>\n     * @throws IllegalArgumentException if the number is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/IntRange.java",
        "class_name": "org.apache.commons.lang.math.IntRange",
        "signature": "org.apache.commons.lang.math.IntRange.IntRange(int, int)",
        "snippet": "    public IntRange(int number1, int number2) {\n        super();\n        if (number2 < number1) {\n            this.min = number2;\n            this.max = number1;\n        } else {\n            this.min = number1;\n            this.max = number2;\n        }\n    }",
        "begin_line": 105,
        "end_line": 114,
        "comment": "\n     * <p>Constructs a new <code>IntRange</code> with the specified\n     * minimum and maximum numbers (both inclusive).</p>\n     * \n     * <p>The arguments may be passed in the order (min,max) or (max,min). The\n     * getMinimum and getMaximum methods will return the correct values.</p>\n     * \n     * @param number1  first number that defines the edge of the range, inclusive\n     * @param number2  second number that defines the edge of the range, inclusive\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/IntRange.java",
        "class_name": "org.apache.commons.lang.math.IntRange",
        "signature": "org.apache.commons.lang.math.IntRange.IntRange(java.lang.Number, java.lang.Number)",
        "snippet": "    public IntRange(Number number1, Number number2) {\n        super();\n        if (number1 == null || number2 == null) {\n            throw new IllegalArgumentException(\"The numbers must not be null\");\n        }\n        int number1val = number1.intValue();\n        int number2val = number2.intValue();\n        if (number2val < number1val) {\n            this.min = number2val;\n            this.max = number1val;\n            if (number2 instanceof Integer) {\n                this.minObject = (Integer) number2;\n            }\n            if (number1 instanceof Integer) {\n                this.maxObject = (Integer) number1;\n            }\n        } else {\n            this.min = number1val;\n            this.max = number2val;\n            if (number1 instanceof Integer) {\n                this.minObject = (Integer) number1;\n            }\n            if (number2 instanceof Integer) {\n                this.maxObject = (Integer) number2;\n            }\n        }\n    }",
        "begin_line": 127,
        "end_line": 153,
        "comment": "\n     * <p>Constructs a new <code>IntRange</code> with the specified\n     * minimum and maximum numbers (both inclusive).</p>\n     * \n     * <p>The arguments may be passed in the order (min,max) or (max,min). The\n     * getMinimum and getMaximum methods will return the correct values.</p>\n     *\n     * @param number1  first number that defines the edge of the range, inclusive\n     * @param number2  second number that defines the edge of the range, inclusive\n     * @throws IllegalArgumentException if either number is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/IntRange.java",
        "class_name": "org.apache.commons.lang.math.IntRange",
        "signature": "org.apache.commons.lang.math.IntRange.getMinimumNumber()",
        "snippet": "    public Number getMinimumNumber() {\n        if (minObject == null) {\n            minObject = new Integer(min);            \n        }\n        return minObject;\n    }",
        "begin_line": 163,
        "end_line": 168,
        "comment": "\n     * <p>Returns the minimum number in this range.</p>\n     *\n     * @return the minimum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/IntRange.java",
        "class_name": "org.apache.commons.lang.math.IntRange",
        "signature": "org.apache.commons.lang.math.IntRange.getMinimumLong()",
        "snippet": "    public long getMinimumLong() {\n        return min;\n    }",
        "begin_line": 175,
        "end_line": 177,
        "comment": "\n     * <p>Gets the minimum number in this range as a <code>long</code>.</p>\n     *\n     * @return the minimum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/IntRange.java",
        "class_name": "org.apache.commons.lang.math.IntRange",
        "signature": "org.apache.commons.lang.math.IntRange.getMinimumInteger()",
        "snippet": "    public int getMinimumInteger() {\n        return min;\n    }",
        "begin_line": 184,
        "end_line": 186,
        "comment": "\n     * <p>Gets the minimum number in this range as a <code>int</code>.</p>\n     *\n     * @return the minimum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/IntRange.java",
        "class_name": "org.apache.commons.lang.math.IntRange",
        "signature": "org.apache.commons.lang.math.IntRange.getMinimumDouble()",
        "snippet": "    public double getMinimumDouble() {\n        return min;\n    }",
        "begin_line": 193,
        "end_line": 195,
        "comment": "\n     * <p>Gets the minimum number in this range as a <code>double</code>.</p>\n     *\n     * @return the minimum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/IntRange.java",
        "class_name": "org.apache.commons.lang.math.IntRange",
        "signature": "org.apache.commons.lang.math.IntRange.getMinimumFloat()",
        "snippet": "    public float getMinimumFloat() {\n        return min;\n    }",
        "begin_line": 202,
        "end_line": 204,
        "comment": "\n     * <p>Gets the minimum number in this range as a <code>float</code>.</p>\n     *\n     * @return the minimum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/IntRange.java",
        "class_name": "org.apache.commons.lang.math.IntRange",
        "signature": "org.apache.commons.lang.math.IntRange.getMaximumNumber()",
        "snippet": "    public Number getMaximumNumber() {\n        if (maxObject == null) {\n            maxObject = new Integer(max);            \n        }\n        return maxObject;\n    }",
        "begin_line": 211,
        "end_line": 216,
        "comment": "\n     * <p>Returns the maximum number in this range.</p>\n     *\n     * @return the maximum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/IntRange.java",
        "class_name": "org.apache.commons.lang.math.IntRange",
        "signature": "org.apache.commons.lang.math.IntRange.getMaximumLong()",
        "snippet": "    public long getMaximumLong() {\n        return max;\n    }",
        "begin_line": 223,
        "end_line": 225,
        "comment": "\n     * <p>Gets the maximum number in this range as a <code>long</code>.</p>\n     *\n     * @return the maximum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/IntRange.java",
        "class_name": "org.apache.commons.lang.math.IntRange",
        "signature": "org.apache.commons.lang.math.IntRange.getMaximumInteger()",
        "snippet": "    public int getMaximumInteger() {\n        return max;\n    }",
        "begin_line": 232,
        "end_line": 234,
        "comment": "\n     * <p>Gets the maximum number in this range as a <code>int</code>.</p>\n     *\n     * @return the maximum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/IntRange.java",
        "class_name": "org.apache.commons.lang.math.IntRange",
        "signature": "org.apache.commons.lang.math.IntRange.getMaximumDouble()",
        "snippet": "    public double getMaximumDouble() {\n        return max;\n    }",
        "begin_line": 241,
        "end_line": 243,
        "comment": "\n     * <p>Gets the maximum number in this range as a <code>double</code>.</p>\n     *\n     * @return the maximum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/IntRange.java",
        "class_name": "org.apache.commons.lang.math.IntRange",
        "signature": "org.apache.commons.lang.math.IntRange.getMaximumFloat()",
        "snippet": "    public float getMaximumFloat() {\n        return max;\n    }",
        "begin_line": 250,
        "end_line": 252,
        "comment": "\n     * <p>Gets the maximum number in this range as a <code>float</code>.</p>\n     *\n     * @return the maximum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/IntRange.java",
        "class_name": "org.apache.commons.lang.math.IntRange",
        "signature": "org.apache.commons.lang.math.IntRange.containsNumber(java.lang.Number)",
        "snippet": "    public boolean containsNumber(Number number) {\n        if (number == null) {\n            return false;\n        }\n        return containsInteger(number.intValue());\n    }",
        "begin_line": 266,
        "end_line": 271,
        "comment": "\n     * <p>Tests whether the specified <code>number</code> occurs within\n     * this range using <code>int</code> comparison.</p>\n     * \n     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n     *\n     * @param number  the number to test, may be <code>null</code>\n     * @return <code>true</code> if the specified number occurs within this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/IntRange.java",
        "class_name": "org.apache.commons.lang.math.IntRange",
        "signature": "org.apache.commons.lang.math.IntRange.containsInteger(int)",
        "snippet": "    public boolean containsInteger(int value) {\n        return value >= min && value <= max;\n    }",
        "begin_line": 284,
        "end_line": 286,
        "comment": "\n     * <p>Tests whether the specified <code>int</code> occurs within\n     * this range using <code>int</code> comparison.</p>\n     * \n     * <p>This implementation overrides the superclass for performance as it is\n     * the most common case.</p>\n     * \n     * @param value  the int to test\n     * @return <code>true</code> if the specified number occurs within this\n     *  range by <code>int</code> comparison\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/IntRange.java",
        "class_name": "org.apache.commons.lang.math.IntRange",
        "signature": "org.apache.commons.lang.math.IntRange.containsRange(org.apache.commons.lang.math.Range)",
        "snippet": "    public boolean containsRange(Range range) {\n        if (range == null) {\n            return false;\n        }\n        return containsInteger(range.getMinimumInteger()) &&\n               containsInteger(range.getMaximumInteger());\n    }",
        "begin_line": 301,
        "end_line": 307,
        "comment": "\n     * <p>Tests whether the specified range occurs entirely within this range\n     * using <code>int</code> comparison.</p>\n     * \n     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n     *\n     * @param range  the range to test, may be <code>null</code>\n     * @return <code>true</code> if the specified range occurs entirely within this range\n     * @throws IllegalArgumentException if the range is not of this type\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/IntRange.java",
        "class_name": "org.apache.commons.lang.math.IntRange",
        "signature": "org.apache.commons.lang.math.IntRange.overlapsRange(org.apache.commons.lang.math.Range)",
        "snippet": "    public boolean overlapsRange(Range range) {\n        if (range == null) {\n            return false;\n        }\n        return range.containsInteger(min) ||\n               range.containsInteger(max) || \n               containsInteger(range.getMinimumInteger());\n    }",
        "begin_line": 318,
        "end_line": 325,
        "comment": "\n     * <p>Tests whether the specified range overlaps with this range\n     * using <code>int</code> comparison.</p>\n     * \n     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n     *\n     * @param range  the range to test, may be <code>null</code>\n     * @return <code>true</code> if the specified range overlaps with this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/IntRange.java",
        "class_name": "org.apache.commons.lang.math.IntRange",
        "signature": "org.apache.commons.lang.math.IntRange.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (obj instanceof IntRange == false) {\n            return false;\n        }\n        IntRange range = (IntRange) obj;\n        return min == range.min && max == range.max;\n    }",
        "begin_line": 338,
        "end_line": 347,
        "comment": "\n     * <p>Compares this range to another object to test if they are equal.</p>.\n     * \n     * <p>To be equal, the class, minimum and maximum must be equal.</p>\n     *\n     * @param obj the reference object with which to compare\n     * @return <code>true</code> if this object is equal\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/IntRange.java",
        "class_name": "org.apache.commons.lang.math.IntRange",
        "signature": "org.apache.commons.lang.math.IntRange.hashCode()",
        "snippet": "    public int hashCode() {\n        if (hashCode == 0) {\n            hashCode = 17;\n            hashCode = 37 * hashCode + getClass().hashCode();\n            hashCode = 37 * hashCode + min;\n            hashCode = 37 * hashCode + max;\n        }\n        return hashCode;\n    }",
        "begin_line": 354,
        "end_line": 362,
        "comment": "\n     * <p>Gets a hashCode for the range.</p>\n     *\n     * @return a hash code value for this object\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/IntRange.java",
        "class_name": "org.apache.commons.lang.math.IntRange",
        "signature": "org.apache.commons.lang.math.IntRange.toString()",
        "snippet": "    public String toString() {\n        if (toString == null) {\n            StringBuffer buf = new StringBuffer(32);\n            buf.append(\"Range[\");\n            buf.append(min);\n            buf.append(',');\n            buf.append(max);\n            buf.append(']');\n            toString = buf.toString();\n        }\n        return toString;\n    }",
        "begin_line": 371,
        "end_line": 382,
        "comment": "\n     * <p>Gets the range as a <code>String</code>.</p>\n     *\n     * <p>The format of the String is 'Range[<i>min</i>,<i>max</i>]'.</p>\n     *\n     * @return the <code>String</code> representation of this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/DoubleRange.java",
        "class_name": "org.apache.commons.lang.math.DoubleRange",
        "signature": "org.apache.commons.lang.math.DoubleRange.DoubleRange(double)",
        "snippet": "    public DoubleRange(double number) {\n        super();\n        if (Double.isNaN(number)) {\n            throw new IllegalArgumentException(\"The number must not be NaN\");\n        }\n        this.min = number;\n        this.max = number;\n    }",
        "begin_line": 70,
        "end_line": 77,
        "comment": "\n     * <p>Constructs a new <code>DoubleRange</code> using the specified\n     * number as both the minimum and maximum in this range.</p>\n     *\n     * @param number  the number to use for this range\n     * @throws IllegalArgumentException if the number is <code>NaN</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/DoubleRange.java",
        "class_name": "org.apache.commons.lang.math.DoubleRange",
        "signature": "org.apache.commons.lang.math.DoubleRange.DoubleRange(java.lang.Number)",
        "snippet": "    public DoubleRange(Number number) {\n        super();\n        if (number == null) {\n            throw new IllegalArgumentException(\"The number must not be null\");\n        }\n        this.min = number.doubleValue();\n        this.max = number.doubleValue();\n        if (Double.isNaN(min) || Double.isNaN(max)) {\n            throw new IllegalArgumentException(\"The number must not be NaN\");\n        }\n        if (number instanceof Double) {\n            this.minObject = (Double) number;\n            this.maxObject = (Double) number;\n        }\n    }",
        "begin_line": 88,
        "end_line": 102,
        "comment": "\n     * <p>Constructs a new <code>DoubleRange</code> using the specified\n     * number as both the minimum and maximum in this range.</p>\n     *\n     * @param number  the number to use for this range, must not\n     *  be <code>null</code>\n     * @throws IllegalArgumentException if the number is <code>null</code>\n     * @throws IllegalArgumentException if the number is <code>NaN</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/DoubleRange.java",
        "class_name": "org.apache.commons.lang.math.DoubleRange",
        "signature": "org.apache.commons.lang.math.DoubleRange.DoubleRange(double, double)",
        "snippet": "    public DoubleRange(double number1, double number2) {\n        super();\n        if (Double.isNaN(number1) || Double.isNaN(number2)) {\n            throw new IllegalArgumentException(\"The numbers must not be NaN\");\n        }\n        if (number2 < number1) {\n            this.min = number2;\n            this.max = number1;\n        } else {\n            this.min = number1;\n            this.max = number2;\n        }\n    }",
        "begin_line": 115,
        "end_line": 127,
        "comment": "\n     * <p>Constructs a new <code>DoubleRange</code> with the specified\n     * minimum and maximum numbers (both inclusive).</p>\n     * \n     * <p>The arguments may be passed in the order (min,max) or (max,min). The\n     * getMinimum and getMaximum methods will return the correct values.</p>\n     * \n     * @param number1  first number that defines the edge of the range, inclusive\n     * @param number2  second number that defines the edge of the range, inclusive\n     * @throws IllegalArgumentException if either number is <code>NaN</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/DoubleRange.java",
        "class_name": "org.apache.commons.lang.math.DoubleRange",
        "signature": "org.apache.commons.lang.math.DoubleRange.DoubleRange(java.lang.Number, java.lang.Number)",
        "snippet": "    public DoubleRange(Number number1, Number number2) {\n        super();\n        if (number1 == null || number2 == null) {\n            throw new IllegalArgumentException(\"The numbers must not be null\");\n        }\n        double number1val = number1.doubleValue();\n        double number2val = number2.doubleValue();\n        if (Double.isNaN(number1val) || Double.isNaN(number2val)) {\n            throw new IllegalArgumentException(\"The numbers must not be NaN\");\n        }\n        if (number2val < number1val) {\n            this.min = number2val;\n            this.max = number1val;\n            if (number2 instanceof Double) {\n                this.minObject = (Double) number2;\n            }\n            if (number1 instanceof Double) {\n                this.maxObject = (Double) number1;\n            }\n        } else {\n            this.min = number1val;\n            this.max = number2val;\n            if (number1 instanceof Double) {\n                this.minObject = (Double) number1;\n            }\n            if (number2 instanceof Double) {\n                this.maxObject = (Double) number2;\n            }\n        }\n    }",
        "begin_line": 141,
        "end_line": 170,
        "comment": "\n     * <p>Constructs a new <code>DoubleRange</code> with the specified\n     * minimum and maximum numbers (both inclusive).</p>\n     * \n     * <p>The arguments may be passed in the order (min,max) or (max,min). The\n     * getMinimum and getMaximum methods will return the correct values.</p>\n     *\n     * @param number1  first number that defines the edge of the range, inclusive\n     * @param number2  second number that defines the edge of the range, inclusive\n     * @throws IllegalArgumentException if either number is <code>null</code>\n     * @throws IllegalArgumentException if either number is <code>NaN</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/DoubleRange.java",
        "class_name": "org.apache.commons.lang.math.DoubleRange",
        "signature": "org.apache.commons.lang.math.DoubleRange.getMinimumNumber()",
        "snippet": "    public Number getMinimumNumber() {\n        if (minObject == null) {\n            minObject = new Double(min);            \n        }\n        return minObject;\n    }",
        "begin_line": 180,
        "end_line": 185,
        "comment": "\n     * <p>Returns the minimum number in this range.</p>\n     *\n     * @return the minimum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/DoubleRange.java",
        "class_name": "org.apache.commons.lang.math.DoubleRange",
        "signature": "org.apache.commons.lang.math.DoubleRange.getMinimumLong()",
        "snippet": "    public long getMinimumLong() {\n        return (long) min;\n    }",
        "begin_line": 194,
        "end_line": 196,
        "comment": "\n     * <p>Gets the minimum number in this range as a <code>long</code>.</p>\n     * \n     * <p>This conversion can lose information for large values or decimals.</p>\n     *\n     * @return the minimum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/DoubleRange.java",
        "class_name": "org.apache.commons.lang.math.DoubleRange",
        "signature": "org.apache.commons.lang.math.DoubleRange.getMinimumInteger()",
        "snippet": "    public int getMinimumInteger() {\n        return (int) min;\n    }",
        "begin_line": 205,
        "end_line": 207,
        "comment": "\n     * <p>Gets the minimum number in this range as a <code>int</code>.</p>\n     * \n     * <p>This conversion can lose information for large values or decimals.</p>\n     *\n     * @return the minimum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/DoubleRange.java",
        "class_name": "org.apache.commons.lang.math.DoubleRange",
        "signature": "org.apache.commons.lang.math.DoubleRange.getMinimumDouble()",
        "snippet": "    public double getMinimumDouble() {\n        return min;\n    }",
        "begin_line": 214,
        "end_line": 216,
        "comment": "\n     * <p>Gets the minimum number in this range as a <code>double</code>.</p>\n     *\n     * @return the minimum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/DoubleRange.java",
        "class_name": "org.apache.commons.lang.math.DoubleRange",
        "signature": "org.apache.commons.lang.math.DoubleRange.getMinimumFloat()",
        "snippet": "    public float getMinimumFloat() {\n        return (float) min;\n    }",
        "begin_line": 225,
        "end_line": 227,
        "comment": "\n     * <p>Gets the minimum number in this range as a <code>float</code>.</p>\n     * \n     * <p>This conversion can lose information for large values.</p>\n     *\n     * @return the minimum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/DoubleRange.java",
        "class_name": "org.apache.commons.lang.math.DoubleRange",
        "signature": "org.apache.commons.lang.math.DoubleRange.getMaximumNumber()",
        "snippet": "    public Number getMaximumNumber() {\n        if (maxObject == null) {\n            maxObject = new Double(max);            \n        }\n        return maxObject;\n    }",
        "begin_line": 234,
        "end_line": 239,
        "comment": "\n     * <p>Returns the maximum number in this range.</p>\n     *\n     * @return the maximum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/DoubleRange.java",
        "class_name": "org.apache.commons.lang.math.DoubleRange",
        "signature": "org.apache.commons.lang.math.DoubleRange.getMaximumLong()",
        "snippet": "    public long getMaximumLong() {\n        return (long) max;\n    }",
        "begin_line": 248,
        "end_line": 250,
        "comment": "\n     * <p>Gets the maximum number in this range as a <code>long</code>.</p>\n     * \n     * <p>This conversion can lose information for large values or decimals.</p>\n     *\n     * @return the maximum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/DoubleRange.java",
        "class_name": "org.apache.commons.lang.math.DoubleRange",
        "signature": "org.apache.commons.lang.math.DoubleRange.getMaximumInteger()",
        "snippet": "    public int getMaximumInteger() {\n        return (int) max;\n    }",
        "begin_line": 259,
        "end_line": 261,
        "comment": "\n     * <p>Gets the maximum number in this range as a <code>int</code>.</p>\n     * \n     * <p>This conversion can lose information for large values or decimals.</p>\n     *\n     * @return the maximum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/DoubleRange.java",
        "class_name": "org.apache.commons.lang.math.DoubleRange",
        "signature": "org.apache.commons.lang.math.DoubleRange.getMaximumDouble()",
        "snippet": "    public double getMaximumDouble() {\n        return max;\n    }",
        "begin_line": 268,
        "end_line": 270,
        "comment": "\n     * <p>Gets the maximum number in this range as a <code>double</code>.</p>\n     *\n     * @return the maximum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/DoubleRange.java",
        "class_name": "org.apache.commons.lang.math.DoubleRange",
        "signature": "org.apache.commons.lang.math.DoubleRange.getMaximumFloat()",
        "snippet": "    public float getMaximumFloat() {\n        return (float) max;\n    }",
        "begin_line": 279,
        "end_line": 281,
        "comment": "\n     * <p>Gets the maximum number in this range as a <code>float</code>.</p>\n     * \n     * <p>This conversion can lose information for large values.</p>\n     *\n     * @return the maximum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/DoubleRange.java",
        "class_name": "org.apache.commons.lang.math.DoubleRange",
        "signature": "org.apache.commons.lang.math.DoubleRange.containsNumber(java.lang.Number)",
        "snippet": "    public boolean containsNumber(Number number) {\n        if (number == null) {\n            return false;\n        }\n        return containsDouble(number.doubleValue());\n    }",
        "begin_line": 295,
        "end_line": 300,
        "comment": "\n     * <p>Tests whether the specified <code>number</code> occurs within\n     * this range using <code>double</code> comparison.</p>\n     * \n     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n     *\n     * @param number  the number to test, may be <code>null</code>\n     * @return <code>true</code> if the specified number occurs within this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/DoubleRange.java",
        "class_name": "org.apache.commons.lang.math.DoubleRange",
        "signature": "org.apache.commons.lang.math.DoubleRange.containsDouble(double)",
        "snippet": "    public boolean containsDouble(double value) {\n        return value >= min && value <= max;\n    }",
        "begin_line": 313,
        "end_line": 315,
        "comment": "\n     * <p>Tests whether the specified <code>double</code> occurs within\n     * this range using <code>double</code> comparison.</p>\n     * \n     * <p>This implementation overrides the superclass for performance as it is\n     * the most common case.</p>\n     * \n     * @param value  the double to test\n     * @return <code>true</code> if the specified number occurs within this\n     *  range by <code>double</code> comparison\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/DoubleRange.java",
        "class_name": "org.apache.commons.lang.math.DoubleRange",
        "signature": "org.apache.commons.lang.math.DoubleRange.containsRange(org.apache.commons.lang.math.Range)",
        "snippet": "    public boolean containsRange(Range range) {\n        if (range == null) {\n            return false;\n        }\n        return containsDouble(range.getMinimumDouble())\n            && containsDouble(range.getMaximumDouble());\n    }",
        "begin_line": 330,
        "end_line": 336,
        "comment": "\n     * <p>Tests whether the specified range occurs entirely within this range\n     * using <code>double</code> comparison.</p>\n     * \n     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n     *\n     * @param range  the range to test, may be <code>null</code>\n     * @return <code>true</code> if the specified range occurs entirely within this range\n     * @throws IllegalArgumentException if the range is not of this type\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/DoubleRange.java",
        "class_name": "org.apache.commons.lang.math.DoubleRange",
        "signature": "org.apache.commons.lang.math.DoubleRange.overlapsRange(org.apache.commons.lang.math.Range)",
        "snippet": "    public boolean overlapsRange(Range range) {\n        if (range == null) {\n            return false;\n        }\n        return range.containsDouble(min)\n            || range.containsDouble(max)\n            || containsDouble(range.getMinimumDouble());\n    }",
        "begin_line": 347,
        "end_line": 354,
        "comment": "\n     * <p>Tests whether the specified range overlaps with this range\n     * using <code>double</code> comparison.</p>\n     * \n     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n     *\n     * @param range  the range to test, may be <code>null</code>\n     * @return <code>true</code> if the specified range overlaps with this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/DoubleRange.java",
        "class_name": "org.apache.commons.lang.math.DoubleRange",
        "signature": "org.apache.commons.lang.math.DoubleRange.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (obj instanceof DoubleRange == false) {\n            return false;\n        }\n        DoubleRange range = (DoubleRange) obj;\n        return (Double.doubleToLongBits(min) == Double.doubleToLongBits(range.min) &&\n                Double.doubleToLongBits(max) == Double.doubleToLongBits(range.max));\n    }",
        "begin_line": 367,
        "end_line": 377,
        "comment": "\n     * <p>Compares this range to another object to test if they are equal.</p>.\n     * \n     * <p>To be equal, the class, minimum and maximum must be equal.</p>\n     *\n     * @param obj the reference object with which to compare\n     * @return <code>true</code> if this object is equal\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/DoubleRange.java",
        "class_name": "org.apache.commons.lang.math.DoubleRange",
        "signature": "org.apache.commons.lang.math.DoubleRange.hashCode()",
        "snippet": "    public int hashCode() {\n        if (hashCode == 0) {\n            hashCode = 17;\n            hashCode = 37 * hashCode + getClass().hashCode();\n            long lng = Double.doubleToLongBits(min);\n            hashCode = 37 * hashCode + ((int) (lng ^ (lng >> 32)));\n            lng = Double.doubleToLongBits(max);\n            hashCode = 37 * hashCode + ((int) (lng ^ (lng >> 32)));\n        }\n        return hashCode;\n    }",
        "begin_line": 384,
        "end_line": 394,
        "comment": "\n     * <p>Gets a hashCode for the range.</p>\n     *\n     * @return a hash code value for this object\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/DoubleRange.java",
        "class_name": "org.apache.commons.lang.math.DoubleRange",
        "signature": "org.apache.commons.lang.math.DoubleRange.toString()",
        "snippet": "    public String toString() {\n        if (toString == null) {\n            StringBuffer buf = new StringBuffer(32);\n            buf.append(\"Range[\");\n            buf.append(min);\n            buf.append(',');\n            buf.append(max);\n            buf.append(']');\n            toString = buf.toString();\n        }\n        return toString;\n    }",
        "begin_line": 403,
        "end_line": 414,
        "comment": "\n     * <p>Gets the range as a <code>String</code>.</p>\n     *\n     * <p>The format of the String is 'Range[<i>min</i>,<i>max</i>]'.</p>\n     *\n     * @return the <code>String</code> representation of this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Fraction.java",
        "class_name": "org.apache.commons.lang.math.Fraction",
        "signature": "org.apache.commons.lang.math.Fraction.Fraction(int, int)",
        "snippet": "    private Fraction(int numerator, int denominator) {\n        super();\n        this.numerator = numerator;\n        this.denominator = denominator;\n    }",
        "begin_line": 124,
        "end_line": 128,
        "comment": "\n     * <p>Constructs a <code>Fraction</code> instance with the 2 parts\n     * of a fraction Y/Z.</p>\n     *\n     * @param numerator  the numerator, for example the three in 'three sevenths'\n     * @param denominator  the denominator, for example the seven in 'three sevenths'\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Fraction.java",
        "class_name": "org.apache.commons.lang.math.Fraction",
        "signature": "org.apache.commons.lang.math.Fraction.getFraction(int, int)",
        "snippet": "    public static Fraction getFraction(int numerator, int denominator) {\n        if (denominator == 0) {\n            throw new ArithmeticException(\"The denominator must not be zero\");\n        }\n        if (denominator < 0) {\n            if (numerator==Integer.MIN_VALUE ||\n                    denominator==Integer.MIN_VALUE) {\n                throw new ArithmeticException(\"overflow: can't negate\");\n            }\n            numerator = -numerator;\n            denominator = -denominator;\n        }\n        return new Fraction(numerator, denominator);\n    }",
        "begin_line": 141,
        "end_line": 154,
        "comment": "\n     * <p>Creates a <code>Fraction</code> instance with the 2 parts\n     * of a fraction Y/Z.</p>\n     *\n     * <p>Any negative signs are resolved to be on the numerator.</p>\n     *\n     * @param numerator  the numerator, for example the three in 'three sevenths'\n     * @param denominator  the denominator, for example the seven in 'three sevenths'\n     * @return a new fraction instance\n     * @throws ArithmeticException if the denomiator is <code>zero</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Fraction.java",
        "class_name": "org.apache.commons.lang.math.Fraction",
        "signature": "org.apache.commons.lang.math.Fraction.getFraction(int, int, int)",
        "snippet": "    public static Fraction getFraction(int whole, int numerator, int denominator) {\n        if (denominator == 0) {\n            throw new ArithmeticException(\"The denominator must not be zero\");\n        }\n        if (denominator < 0) {\n            throw new ArithmeticException(\"The denominator must not be negative\");\n        }\n        if (numerator < 0) {\n            throw new ArithmeticException(\"The numerator must not be negative\");\n        }\n        long numeratorValue;\n        if (whole < 0) {\n            numeratorValue = whole * (long)denominator - numerator;\n        } else {\n            numeratorValue = whole * (long)denominator + numerator;\n        }\n        if (numeratorValue < Integer.MIN_VALUE ||\n                numeratorValue > Integer.MAX_VALUE)  {\n            throw new ArithmeticException(\"Numerator too large to represent as an Integer.\");\n        }\n        return new Fraction((int) numeratorValue, denominator);\n    }",
        "begin_line": 172,
        "end_line": 193,
        "comment": "\n     * <p>Creates a <code>Fraction</code> instance with the 3 parts\n     * of a fraction X Y/Z.</p>\n     *\n     * <p>The negative sign must be passed in on the whole number part.</p>\n     *\n     * @param whole  the whole number, for example the one in 'one and three sevenths'\n     * @param numerator  the numerator, for example the three in 'one and three sevenths'\n     * @param denominator  the denominator, for example the seven in 'one and three sevenths'\n     * @return a new fraction instance\n     * @throws ArithmeticException if the denomiator is <code>zero</code>\n     * @throws ArithmeticException if the denominator is negative\n     * @throws ArithmeticException if the numerator is negative\n     * @throws ArithmeticException if the resulting numerator exceeds \n     *  <code>Integer.MAX_VALUE</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Fraction.java",
        "class_name": "org.apache.commons.lang.math.Fraction",
        "signature": "org.apache.commons.lang.math.Fraction.getReducedFraction(int, int)",
        "snippet": "    public static Fraction getReducedFraction(int numerator, int denominator) {\n        if (denominator == 0) {\n            throw new ArithmeticException(\"The denominator must not be zero\");\n        }\n        if (numerator==0) {\n            return ZERO; // normalize zero.\n        }\n        // allow 2^k/-2^31 as a valid fraction (where k>0)\n        if (denominator==Integer.MIN_VALUE && (numerator&1)==0) {\n            numerator/=2; denominator/=2;\n        }\n        if (denominator < 0) {\n            if (numerator==Integer.MIN_VALUE ||\n                    denominator==Integer.MIN_VALUE) {\n                throw new ArithmeticException(\"overflow: can't negate\");\n            }\n            numerator = -numerator;\n            denominator = -denominator;\n        }\n        // simplify fraction.\n        int gcd = greatestCommonDivisor(numerator, denominator);\n        numerator /= gcd;\n        denominator /= gcd;\n        return new Fraction(numerator, denominator);\n    }",
        "begin_line": 209,
        "end_line": 233,
        "comment": "\n     * <p>Creates a reduced <code>Fraction</code> instance with the 2 parts\n     * of a fraction Y/Z.</p>\n     *\n     * <p>For example, if the input parameters represent 2/4, then the created\n     * fraction will be 1/2.</p>\n     *\n     * <p>Any negative signs are resolved to be on the numerator.</p>\n     *\n     * @param numerator  the numerator, for example the three in 'three sevenths'\n     * @param denominator  the denominator, for example the seven in 'three sevenths'\n     * @return a new fraction instance, with the numerator and denominator reduced\n     * @throws ArithmeticException if the denominator is <code>zero</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Fraction.java",
        "class_name": "org.apache.commons.lang.math.Fraction",
        "signature": "org.apache.commons.lang.math.Fraction.getFraction(double)",
        "snippet": "    public static Fraction getFraction(double value) {\n        int sign = (value < 0 ? -1 : 1);\n        value = Math.abs(value);\n        if (value  > Integer.MAX_VALUE || Double.isNaN(value)) {\n            throw new ArithmeticException\n                (\"The value must not be greater than Integer.MAX_VALUE or NaN\");\n        }\n        int wholeNumber = (int) value;\n        value -= wholeNumber;\n        \n        int numer0 = 0;  // the pre-previous\n        int denom0 = 1;  // the pre-previous\n        int numer1 = 1;  // the previous\n        int denom1 = 0;  // the previous\n        int numer2 = 0;  // the current, setup in calculation\n        int denom2 = 0;  // the current, setup in calculation\n        int a1 = (int) value;\n        int a2 = 0;\n        double x1 = 1;\n        double x2 = 0;\n        double y1 = value - a1;\n        double y2 = 0;\n        double delta1, delta2 = Double.MAX_VALUE;\n        double fraction;\n        int i = 1;\n//        System.out.println(\"---\");\n        do {\n            delta1 = delta2;\n            a2 = (int) (x1 / y1);\n            x2 = y1;\n            y2 = x1 - a2 * y1;\n            numer2 = a1 * numer1 + numer0;\n            denom2 = a1 * denom1 + denom0;\n            fraction = (double) numer2 / (double) denom2;\n            delta2 = Math.abs(value - fraction);\n//            System.out.println(numer2 + \" \" + denom2 + \" \" + fraction + \" \" + delta2 + \" \" + y1);\n            a1 = a2;\n            x1 = x2;\n            y1 = y2;\n            numer0 = numer1;\n            denom0 = denom1;\n            numer1 = numer2;\n            denom1 = denom2;\n            i++;\n//            System.out.println(\">>\" + delta1 +\" \"+ delta2+\" \"+(delta1 > delta2)+\" \"+i+\" \"+denom2);\n        } while ((delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) && (i < 25));\n        if (i == 25) {\n            throw new ArithmeticException(\"Unable to convert double to fraction\");\n        }\n        return getReducedFraction((numer0 + wholeNumber * denom0) * sign, denom0);\n    }",
        "begin_line": 249,
        "end_line": 299,
        "comment": "\n     * <p>Creates a <code>Fraction</code> instance from a <code>double</code> value.</p>\n     *\n     * <p>This method uses the <a href=\"http://archives.math.utk.edu/articles/atuyl/confrac/\">\n     *  continued fraction algorithm</a>, computing a maximum of\n     *  25 convergents and bounding the denominator by 10,000.</p>\n     *\n     * @param value  the double value to convert\n     * @return a new fraction instance that is close to the value\n     * @throws ArithmeticException if <code>|value| > Integer.MAX_VALUE</code> \n     *  or <code>value = NaN</code>\n     * @throws ArithmeticException if the calculated denominator is <code>zero</code>\n     * @throws ArithmeticException if the the algorithm does not converge\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Fraction.java",
        "class_name": "org.apache.commons.lang.math.Fraction",
        "signature": "org.apache.commons.lang.math.Fraction.getFraction(java.lang.String)",
        "snippet": "    public static Fraction getFraction(String str) {\n        if (str == null) {\n            throw new IllegalArgumentException(\"The string must not be null\");\n        }\n        // parse double format\n        int pos = str.indexOf('.');\n        if (pos >= 0) {\n            return getFraction(Double.parseDouble(str));\n        }\n\n        // parse X Y/Z format\n        pos = str.indexOf(' ');\n        if (pos > 0) {\n            int whole = Integer.parseInt(str.substring(0, pos));\n            str = str.substring(pos + 1);\n            pos = str.indexOf('/');\n            if (pos < 0) {\n                throw new NumberFormatException(\"The fraction could not be parsed as the format X Y/Z\");\n            } else {\n                int numer = Integer.parseInt(str.substring(0, pos));\n                int denom = Integer.parseInt(str.substring(pos + 1));\n                return getFraction(whole, numer, denom);\n            }\n        }\n\n        // parse Y/Z format\n        pos = str.indexOf('/');\n        if (pos < 0) {\n            // simple whole number\n            return getFraction(Integer.parseInt(str), 1);\n        } else {\n            int numer = Integer.parseInt(str.substring(0, pos));\n            int denom = Integer.parseInt(str.substring(pos + 1));\n            return getFraction(numer, denom);\n        }\n    }",
        "begin_line": 319,
        "end_line": 354,
        "comment": "\n     * <p>Creates a Fraction from a <code>String</code>.</p>\n     *\n     * <p>The formats accepted are:</p>\n     *\n     * <ol>\n     *  <li><code>double</code> String containing a dot</li>\n     *  <li>'X Y/Z'</li>\n     *  <li>'Y/Z'</li>\n     *  <li>'X' (a simple whole number)</li>\n     * </ol>\n     * and a .</p>\n     *\n     * @param str  the string to parse, must not be <code>null</code>\n     * @return the new <code>Fraction</code> instance\n     * @throws IllegalArgumentException if the string is <code>null</code>\n     * @throws NumberFormatException if the number format is invalid\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Fraction.java",
        "class_name": "org.apache.commons.lang.math.Fraction",
        "signature": "org.apache.commons.lang.math.Fraction.getNumerator()",
        "snippet": "    public int getNumerator() {\n        return numerator;\n    }",
        "begin_line": 367,
        "end_line": 369,
        "comment": "\n     * <p>Gets the numerator part of the fraction.</p>\n     *\n     * <p>This method may return a value greater than the denominator, an\n     * improper fraction, such as the seven in 7/4.</p>\n     *\n     * @return the numerator fraction part\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Fraction.java",
        "class_name": "org.apache.commons.lang.math.Fraction",
        "signature": "org.apache.commons.lang.math.Fraction.getDenominator()",
        "snippet": "    public int getDenominator() {\n        return denominator;\n    }",
        "begin_line": 376,
        "end_line": 378,
        "comment": "\n     * <p>Gets the denominator part of the fraction.</p>\n     *\n     * @return the denominator fraction part\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Fraction.java",
        "class_name": "org.apache.commons.lang.math.Fraction",
        "signature": "org.apache.commons.lang.math.Fraction.getProperNumerator()",
        "snippet": "    public int getProperNumerator() {\n        return Math.abs(numerator % denominator);\n    }",
        "begin_line": 391,
        "end_line": 393,
        "comment": "\n     * <p>Gets the proper numerator, always positive.</p>\n     *\n     * <p>An improper fraction 7/4 can be resolved into a proper one, 1 3/4.\n     * This method returns the 3 from the proper fraction.</p>\n     *\n     * <p>If the fraction is negative such as -7/4, it can be resolved into\n     * -1 3/4, so this method returns the positive proper numerator, 3.</p>\n     *\n     * @return the numerator fraction part of a proper fraction, always positive\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Fraction.java",
        "class_name": "org.apache.commons.lang.math.Fraction",
        "signature": "org.apache.commons.lang.math.Fraction.getProperWhole()",
        "snippet": "    public int getProperWhole() {\n        return numerator / denominator;\n    }",
        "begin_line": 406,
        "end_line": 408,
        "comment": "\n     * <p>Gets the proper whole part of the fraction.</p>\n     *\n     * <p>An improper fraction 7/4 can be resolved into a proper one, 1 3/4.\n     * This method returns the 1 from the proper fraction.</p>\n     *\n     * <p>If the fraction is negative such as -7/4, it can be resolved into\n     * -1 3/4, so this method returns the positive whole part -1.</p>\n     *\n     * @return the whole fraction part of a proper fraction, that includes the sign\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Fraction.java",
        "class_name": "org.apache.commons.lang.math.Fraction",
        "signature": "org.apache.commons.lang.math.Fraction.intValue()",
        "snippet": "    public int intValue() {\n        return numerator / denominator;\n    }",
        "begin_line": 419,
        "end_line": 421,
        "comment": "\n     * <p>Gets the fraction as an <code>int</code>. This returns the whole number\n     * part of the fraction.</p>\n     *\n     * @return the whole number fraction part\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Fraction.java",
        "class_name": "org.apache.commons.lang.math.Fraction",
        "signature": "org.apache.commons.lang.math.Fraction.longValue()",
        "snippet": "    public long longValue() {\n        return (long) numerator / denominator;\n    }",
        "begin_line": 429,
        "end_line": 431,
        "comment": "\n     * <p>Gets the fraction as a <code>long</code>. This returns the whole number\n     * part of the fraction.</p>\n     *\n     * @return the whole number fraction part\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Fraction.java",
        "class_name": "org.apache.commons.lang.math.Fraction",
        "signature": "org.apache.commons.lang.math.Fraction.floatValue()",
        "snippet": "    public float floatValue() {\n        return ((float) numerator) / ((float) denominator);\n    }",
        "begin_line": 439,
        "end_line": 441,
        "comment": "\n     * <p>Gets the fraction as a <code>float</code>. This calculates the fraction\n     * as the numerator divided by denominator.</p>\n     *\n     * @return the fraction as a <code>float</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Fraction.java",
        "class_name": "org.apache.commons.lang.math.Fraction",
        "signature": "org.apache.commons.lang.math.Fraction.doubleValue()",
        "snippet": "    public double doubleValue() {\n        return ((double) numerator) / ((double) denominator);\n    }",
        "begin_line": 449,
        "end_line": 451,
        "comment": "\n     * <p>Gets the fraction as a <code>double</code>. This calculates the fraction\n     * as the numerator divided by denominator.</p>\n     *\n     * @return the fraction as a <code>double</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Fraction.java",
        "class_name": "org.apache.commons.lang.math.Fraction",
        "signature": "org.apache.commons.lang.math.Fraction.reduce()",
        "snippet": "    public Fraction reduce() {\n        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n        if (gcd == 1) {\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
        "begin_line": 465,
        "end_line": 471,
        "comment": "\n     * <p>Reduce the fraction to the smallest values for the numerator and\n     * denominator, returning the result.</p>\n     * \n     * <p>For example, if this fraction represents 2/4, then the result\n     * will be 1/2.</p>\n     *\n     * @return a new reduced fraction instance, or this if no simplification possible\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Fraction.java",
        "class_name": "org.apache.commons.lang.math.Fraction",
        "signature": "org.apache.commons.lang.math.Fraction.invert()",
        "snippet": "    public Fraction invert() {\n        if (numerator == 0) {\n            throw new ArithmeticException(\"Unable to invert zero.\");\n        }\n        if (numerator==Integer.MIN_VALUE) {\n            throw new ArithmeticException(\"overflow: can't negate numerator\");\n        }\n        if (numerator<0) {\n            return new Fraction(-denominator, -numerator);\n        } else {\n            return new Fraction(denominator, numerator);\n        }\n    }",
        "begin_line": 482,
        "end_line": 494,
        "comment": "\n     * <p>Gets a fraction that is the inverse (1/fraction) of this one.</p>\n     * \n     * <p>The returned fraction is not reduced.</p>\n     *\n     * @return a new fraction instance with the numerator and denominator\n     *         inverted.\n     * @throws ArithmeticException if the fraction represents zero.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Fraction.java",
        "class_name": "org.apache.commons.lang.math.Fraction",
        "signature": "org.apache.commons.lang.math.Fraction.negate()",
        "snippet": "    public Fraction negate() {\n        // the positive range is one smaller than the negative range of an int.\n        if (numerator==Integer.MIN_VALUE) {\n            throw new ArithmeticException(\"overflow: too large to negate\");\n        }\n        return new Fraction(-numerator, denominator);\n    }",
        "begin_line": 503,
        "end_line": 509,
        "comment": "\n     * <p>Gets a fraction that is the negative (-fraction) of this one.</p>\n     *\n     * <p>The returned fraction is not reduced.</p>\n     *\n     * @return a new fraction instance with the opposite signed numerator\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Fraction.java",
        "class_name": "org.apache.commons.lang.math.Fraction",
        "signature": "org.apache.commons.lang.math.Fraction.abs()",
        "snippet": "    public Fraction abs() {\n        if (numerator >= 0) {\n            return this;\n        }\n        return negate();\n    }",
        "begin_line": 520,
        "end_line": 525,
        "comment": "\n     * <p>Gets a fraction that is the positive equivalent of this one.</p>\n     * <p>More precisely: <code>(fraction >= 0 ? this : -fraction)</code></p>\n     *\n     * <p>The returned fraction is not reduced.</p>\n     *\n     * @return <code>this</code> if it is positive, or a new positive fraction\n     *  instance with the opposite signed numerator\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Fraction.java",
        "class_name": "org.apache.commons.lang.math.Fraction",
        "signature": "org.apache.commons.lang.math.Fraction.pow(int)",
        "snippet": "    public Fraction pow(int power) {\n        if (power == 1) {\n            return this;\n        } else if (power == 0) {\n            return ONE;\n        } else if (power < 0) {\n            if (power==Integer.MIN_VALUE) { // MIN_VALUE can't be negated.\n                return this.invert().pow(2).pow(-(power/2));\n            }\n            return this.invert().pow(-power);\n        } else {\n            Fraction f = this.multiplyBy(this);\n            if ((power % 2) == 0) { // if even...\n                return f.pow(power/2);\n            } else { // if odd...\n                return f.pow(power/2).multiplyBy(this);\n            }\n        }\n    }",
        "begin_line": 539,
        "end_line": 557,
        "comment": "\n     * <p>Gets a fraction that is raised to the passed in power.</p>\n     *\n     * <p>The returned fraction is in reduced form.</p>\n     *\n     * @param power  the power to raise the fraction to\n     * @return <code>this</code> if the power is one, <code>ONE</code> if the power\n     * is zero (even if the fraction equals ZERO) or a new fraction instance \n     * raised to the appropriate power\n     * @throws ArithmeticException if the resulting numerator or denominator exceeds\n     *  <code>Integer.MAX_VALUE</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Fraction.java",
        "class_name": "org.apache.commons.lang.math.Fraction",
        "signature": "org.apache.commons.lang.math.Fraction.greatestCommonDivisor(int, int)",
        "snippet": "    private static int greatestCommonDivisor(int u, int v) {\n        // keep u and v negative, as negative integers range down to\n        // -2^31, while positive numbers can only be as large as 2^31-1\n        // (i.e. we can't necessarily negate a negative number without\n        // overflow)\n        /* assert u!=0 && v!=0; */\n        if (u>0) { u=-u; } // make u negative\n        if (v>0) { v=-v; } // make v negative\n        // B1. [Find power of 2]\n        int k=0;\n        while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...\n            u/=2; v/=2; k++; // cast out twos.\n        }\n        if (k==31) {\n            throw new ArithmeticException(\"overflow: gcd is 2^31\");\n        }\n        // B2. Initialize: u and v have been divided by 2^k and at least\n        //     one is odd.\n        int t = ((u&1)==1) ? v : -(u/2)/*B3*/;\n        // t negative: u was odd, v may be even (t replaces v)\n        // t positive: u was even, v is odd (t replaces u)\n        do {\n            /* assert u<0 && v<0; */\n            // B4/B3: cast out twos from t.\n            while ((t&1)==0) { // while t is even..\n                t/=2; // cast out twos\n            }\n            // B5 [reset max(u,v)]\n            if (t>0) {\n                u = -t;\n            } else {\n                v = t;\n            }\n            // B6/B3. at this point both u and v should be odd.\n            t = (v - u)/2;\n            // |u| larger: t positive (replace u)\n            // |v| larger: t negative (replace v)\n        } while (t!=0);\n        return -u*(1<<k); // gcd is u*2^k\n    }",
        "begin_line": 569,
        "end_line": 608,
        "comment": "\n     * <p>Gets the greatest common divisor of the absolute value of\n     * two numbers, using the \"binary gcd\" method which avoids\n     * division and modulo operations.  See Knuth 4.5.2 algorithm B.\n     * This algorithm is due to Josef Stein (1961).</p>\n     *\n     * @param u  a non-zero number\n     * @param v  a non-zero number\n     * @return the greatest common divisor, never zero\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Fraction.java",
        "class_name": "org.apache.commons.lang.math.Fraction",
        "signature": "org.apache.commons.lang.math.Fraction.mulAndCheck(int, int)",
        "snippet": "    private static int mulAndCheck(int x, int y) {\n        long m = ((long)x)*((long)y);\n        if (m < Integer.MIN_VALUE ||\n            m > Integer.MAX_VALUE) {\n            throw new ArithmeticException(\"overflow: mul\");\n        }\n        return (int)m;\n    }",
        "begin_line": 622,
        "end_line": 629,
        "comment": " \n     * Multiply two integers, checking for overflow.\n     * \n     * @param x a factor\n     * @param y a factor\n     * @return the product <code>x*y</code>\n     * @throws ArithmeticException if the result can not be represented as\n     *                             an int\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Fraction.java",
        "class_name": "org.apache.commons.lang.math.Fraction",
        "signature": "org.apache.commons.lang.math.Fraction.mulPosAndCheck(int, int)",
        "snippet": "    private static int mulPosAndCheck(int x, int y) {\n        /* assert x>=0 && y>=0; */\n        long m = ((long)x)*((long)y);\n        if (m > Integer.MAX_VALUE) {\n            throw new ArithmeticException(\"overflow: mulPos\");\n        }\n        return (int)m;\n    }",
        "begin_line": 640,
        "end_line": 647,
        "comment": "\n     *  Multiply two non-negative integers, checking for overflow.\n     * \n     * @param x a non-negative factor\n     * @param y a non-negative factor\n     * @return the product <code>x*y</code>\n     * @throws ArithmeticException if the result can not be represented as\n     * an int\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Fraction.java",
        "class_name": "org.apache.commons.lang.math.Fraction",
        "signature": "org.apache.commons.lang.math.Fraction.addAndCheck(int, int)",
        "snippet": "    private static int addAndCheck(int x, int y) {\n        long s = (long)x+(long)y;\n        if (s < Integer.MIN_VALUE ||\n            s > Integer.MAX_VALUE) {\n            throw new ArithmeticException(\"overflow: add\");\n        }\n        return (int)s;\n    }",
        "begin_line": 658,
        "end_line": 665,
        "comment": " \n     * Add two integers, checking for overflow.\n     * \n     * @param x an addend\n     * @param y an addend\n     * @return the sum <code>x+y</code>\n     * @throws ArithmeticException if the result can not be represented as\n     * an int\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Fraction.java",
        "class_name": "org.apache.commons.lang.math.Fraction",
        "signature": "org.apache.commons.lang.math.Fraction.subAndCheck(int, int)",
        "snippet": "    private static int subAndCheck(int x, int y) {\n        long s = (long)x-(long)y;\n        if (s < Integer.MIN_VALUE ||\n            s > Integer.MAX_VALUE) {\n            throw new ArithmeticException(\"overflow: add\");\n        }\n        return (int)s;\n    }",
        "begin_line": 676,
        "end_line": 683,
        "comment": " \n     * Subtract two integers, checking for overflow.\n     * \n     * @param x the minuend\n     * @param y the subtrahend\n     * @return the difference <code>x-y</code>\n     * @throws ArithmeticException if the result can not be represented as\n     * an int\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Fraction.java",
        "class_name": "org.apache.commons.lang.math.Fraction",
        "signature": "org.apache.commons.lang.math.Fraction.add(org.apache.commons.lang.math.Fraction)",
        "snippet": "    public Fraction add(Fraction fraction) {\n        return addSub(fraction, true /* add */);\n    }",
        "begin_line": 695,
        "end_line": 697,
        "comment": "\n     * <p>Adds the value of this fraction to another, returning the result in reduced form.\n     * The algorithm follows Knuth, 4.5.1.</p>\n     *\n     * @param fraction  the fraction to add, must not be <code>null</code>\n     * @return a <code>Fraction</code> instance with the resulting values\n     * @throws IllegalArgumentException if the fraction is <code>null</code>\n     * @throws ArithmeticException if the resulting numerator or denominator exceeds\n     *  <code>Integer.MAX_VALUE</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Fraction.java",
        "class_name": "org.apache.commons.lang.math.Fraction",
        "signature": "org.apache.commons.lang.math.Fraction.subtract(org.apache.commons.lang.math.Fraction)",
        "snippet": "    public Fraction subtract(Fraction fraction) {\n        return addSub(fraction, false /* subtract */);\n    }",
        "begin_line": 709,
        "end_line": 711,
        "comment": "\n     * <p>Subtracts the value of another fraction from the value of this one, \n     * returning the result in reduced form.</p>\n     *\n     * @param fraction  the fraction to subtract, must not be <code>null</code>\n     * @return a <code>Fraction</code> instance with the resulting values\n     * @throws IllegalArgumentException if the fraction is <code>null</code>\n     * @throws ArithmeticException if the resulting numerator or denominator\n     *   cannot be represented in an <code>int</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Fraction.java",
        "class_name": "org.apache.commons.lang.math.Fraction",
        "signature": "org.apache.commons.lang.math.Fraction.addSub(org.apache.commons.lang.math.Fraction, boolean)",
        "snippet": "    private Fraction addSub(Fraction fraction, boolean isAdd) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        // zero is identity for addition.\n        if (numerator == 0) {\n            return isAdd ? fraction : fraction.negate();\n        }\n        if (fraction.numerator == 0) {\n            return this;\n        }     \n        // if denominators are randomly distributed, d1 will be 1 about 61%\n        // of the time.\n        int d1 = greatestCommonDivisor(denominator, fraction.denominator);\n        if (d1==1) {\n            // result is ( (u*v' +/- u'v) / u'v')\n            int uvp = mulAndCheck(numerator, fraction.denominator);\n            int upv = mulAndCheck(fraction.numerator, denominator);\n            return new Fraction\n                (isAdd ? addAndCheck(uvp, upv) : subAndCheck(uvp, upv),\n                 mulPosAndCheck(denominator, fraction.denominator));\n        }\n        // the quantity 't' requires 65 bits of precision; see knuth 4.5.1\n        // exercise 7.  we're going to use a BigInteger.\n        // t = u(v'/d1) +/- v(u'/d1)\n        BigInteger uvp = BigInteger.valueOf(numerator)\n            .multiply(BigInteger.valueOf(fraction.denominator/d1));\n        BigInteger upv = BigInteger.valueOf(fraction.numerator)\n            .multiply(BigInteger.valueOf(denominator/d1));\n        BigInteger t = isAdd ? uvp.add(upv) : uvp.subtract(upv);\n        // but d2 doesn't need extra precision because\n        // d2 = gcd(t,d1) = gcd(t mod d1, d1)\n        int tmodd1 = t.mod(BigInteger.valueOf(d1)).intValue();\n        int d2 = (tmodd1==0)?d1:greatestCommonDivisor(tmodd1, d1);\n\n        // result is (t/d2) / (u'/d1)(v'/d2)\n        BigInteger w = t.divide(BigInteger.valueOf(d2));\n        if (w.bitLength() > 31) {\n            throw new ArithmeticException\n                (\"overflow: numerator too large after multiply\");\n        }\n        return new Fraction\n            (w.intValue(),\n             mulPosAndCheck(denominator/d1, fraction.denominator/d2));\n    }",
        "begin_line": 723,
        "end_line": 767,
        "comment": " \n     * Implement add and subtract using algorithm described in Knuth 4.5.1.\n     * \n     * @param fraction the fraction to subtract, must not be <code>null</code>\n     * @param isAdd true to add, false to subtract\n     * @return a <code>Fraction</code> instance with the resulting values\n     * @throws IllegalArgumentException if the fraction is <code>null</code>\n     * @throws ArithmeticException if the resulting numerator or denominator\n     *   cannot be represented in an <code>int</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Fraction.java",
        "class_name": "org.apache.commons.lang.math.Fraction",
        "signature": "org.apache.commons.lang.math.Fraction.multiplyBy(org.apache.commons.lang.math.Fraction)",
        "snippet": "    public Fraction multiplyBy(Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (numerator == 0 || fraction.numerator == 0) {\n            return ZERO;\n        }\n        // knuth 4.5.1\n        // make sure we don't overflow unless the result *must* overflow.\n        int d1 = greatestCommonDivisor(numerator, fraction.denominator);\n        int d2 = greatestCommonDivisor(fraction.numerator, denominator);\n        return getReducedFraction\n            (mulAndCheck(numerator/d1, fraction.numerator/d2),\n             mulPosAndCheck(denominator/d2, fraction.denominator/d1));\n    }",
        "begin_line": 779,
        "end_line": 793,
        "comment": "\n     * <p>Multiplies the value of this fraction by another, returning the \n     * result in reduced form.</p>\n     *\n     * @param fraction  the fraction to multiply by, must not be <code>null</code>\n     * @return a <code>Fraction</code> instance with the resulting values\n     * @throws IllegalArgumentException if the fraction is <code>null</code>\n     * @throws ArithmeticException if the resulting numerator or denominator exceeds\n     *  <code>Integer.MAX_VALUE</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Fraction.java",
        "class_name": "org.apache.commons.lang.math.Fraction",
        "signature": "org.apache.commons.lang.math.Fraction.divideBy(org.apache.commons.lang.math.Fraction)",
        "snippet": "    public Fraction divideBy(Fraction fraction) {\n        if (fraction == null) {\n            throw new IllegalArgumentException(\"The fraction must not be null\");\n        }\n        if (fraction.numerator == 0) {\n            throw new ArithmeticException(\"The fraction to divide by must not be zero\");\n        }\n        return multiplyBy(fraction.invert());\n    }",
        "begin_line": 805,
        "end_line": 813,
        "comment": "\n     * <p>Divide the value of this fraction by another.</p>\n     *\n     * @param fraction  the fraction to divide by, must not be <code>null</code>\n     * @return a <code>Fraction</code> instance with the resulting values\n     * @throws IllegalArgumentException if the fraction is <code>null</code>\n     * @throws ArithmeticException if the fraction to divide by is zero\n     * @throws ArithmeticException if the resulting numerator or denominator exceeds\n     *  <code>Integer.MAX_VALUE</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Fraction.java",
        "class_name": "org.apache.commons.lang.math.Fraction",
        "signature": "org.apache.commons.lang.math.Fraction.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (obj instanceof Fraction == false) {\n            return false;\n        }\n        Fraction other = (Fraction) obj;\n        return (getNumerator() == other.getNumerator() &&\n                getDenominator() == other.getDenominator());\n    }",
        "begin_line": 826,
        "end_line": 836,
        "comment": "\n     * <p>Compares this fraction to another object to test if they are equal.</p>.\n     *\n     * <p>To be equal, both values must be equal. Thus 2/4 is not equal to 1/2.</p>\n     *\n     * @param obj the reference object with which to compare\n     * @return <code>true</code> if this object is equal\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Fraction.java",
        "class_name": "org.apache.commons.lang.math.Fraction",
        "signature": "org.apache.commons.lang.math.Fraction.hashCode()",
        "snippet": "    public int hashCode() {\n        if (hashCode == 0) {\n            // hashcode update should be atomic.\n            hashCode = 37 * (37 * 17 + getNumerator()) + getDenominator();\n        }\n        return hashCode;\n    }",
        "begin_line": 843,
        "end_line": 849,
        "comment": "\n     * <p>Gets a hashCode for the fraction.</p>\n     *\n     * @return a hash code value for this object\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Fraction.java",
        "class_name": "org.apache.commons.lang.math.Fraction",
        "signature": "org.apache.commons.lang.math.Fraction.compareTo(java.lang.Object)",
        "snippet": "    public int compareTo(Object object) {\n        Fraction other = (Fraction) object;\n        if (this==other) {\n            return 0;\n        }\n        if (numerator == other.numerator && denominator == other.denominator) {\n            return 0;\n        }\n\n        // otherwise see which is less\n        long first = (long) numerator * (long) other.denominator;\n        long second = (long) other.numerator * (long) denominator;\n        if (first == second) {\n            return 0;\n        } else if (first < second) {\n            return -1;\n        } else {\n            return 1;\n        }\n    }",
        "begin_line": 863,
        "end_line": 882,
        "comment": "\n     * <p>Compares this object to another based on size.</p>\n     *\n     * <p>Note: this class has a natural ordering that is inconsistent\n     * with equals, because, for example, equals treats 1/2 and 2/4 as\n     * different, whereas compareTo treats them as equal.\n     *\n     * @param object  the object to compare to\n     * @return -1 if this is less, 0 if equal, +1 if greater\n     * @throws ClassCastException if the object is not a <code>Fraction</code>\n     * @throws NullPointerException if the object is <code>null</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Fraction.java",
        "class_name": "org.apache.commons.lang.math.Fraction",
        "signature": "org.apache.commons.lang.math.Fraction.toString()",
        "snippet": "    public String toString() {\n        if (toString == null) {\n            toString = new StringBuffer(32)\n                .append(getNumerator())\n                .append('/')\n                .append(getDenominator()).toString();\n        }\n        return toString;\n    }",
        "begin_line": 891,
        "end_line": 899,
        "comment": "\n     * <p>Gets the fraction as a <code>String</code>.</p>\n     *\n     * <p>The format used is '<i>numerator</i>/<i>denominator</i>' always.\n     *\n     * @return a <code>String</code> form of the fraction\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Fraction.java",
        "class_name": "org.apache.commons.lang.math.Fraction",
        "signature": "org.apache.commons.lang.math.Fraction.toProperString()",
        "snippet": "    public String toProperString() {\n        if (toProperString == null) {\n            if (numerator == 0) {\n                toProperString = \"0\";\n            } else if (numerator == denominator) {\n                toProperString = \"1\";\n            } else if (numerator == -1 * denominator) {\n                toProperString = \"-1\";\n            } else if ((numerator>0?-numerator:numerator) < -denominator) {\n                // note that we do the magnitude comparison test above with\n                // NEGATIVE (not positive) numbers, since negative numbers\n                // have a larger range.  otherwise numerator==Integer.MIN_VALUE\n                // is handled incorrectly.\n                int properNumerator = getProperNumerator();\n                if (properNumerator == 0) {\n                    toProperString = Integer.toString(getProperWhole());\n                } else {\n                    toProperString = new StringBuffer(32)\n                        .append(getProperWhole()).append(' ')\n                        .append(properNumerator).append('/')\n                        .append(getDenominator()).toString();\n                }\n            } else {\n                toProperString = new StringBuffer(32)\n                    .append(getNumerator()).append('/')\n                    .append(getDenominator()).toString();\n            }\n        }\n        return toProperString;\n    }",
        "begin_line": 910,
        "end_line": 939,
        "comment": "\n     * <p>Gets the fraction as a proper <code>String</code> in the format X Y/Z.</p>\n     *\n     * <p>The format used in '<i>wholeNumber</i> <i>numerator</i>/<i>denominator</i>'.\n     * If the whole number is zero it will be ommitted. If the numerator is zero,\n     * only the whole number is returned.</p>\n     *\n     * @return a <code>String</code> form of the fraction\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Range.java",
        "class_name": "org.apache.commons.lang.math.Range",
        "signature": "org.apache.commons.lang.math.Range.Range()",
        "snippet": "    public Range() {\n        super();\n    }",
        "begin_line": 35,
        "end_line": 37,
        "comment": "\n     * <p>Constructs a new range.</p>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Range.java",
        "class_name": "org.apache.commons.lang.math.Range",
        "signature": "org.apache.commons.lang.math.Range.getMinimumNumber()",
        "snippet": "    public abstract Number getMinimumNumber();",
        "begin_line": 47,
        "end_line": 47,
        "comment": "\n     * <p>Gets the minimum number in this range.</p>\n     *\n     * @return the minimum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Range.java",
        "class_name": "org.apache.commons.lang.math.Range",
        "signature": "org.apache.commons.lang.math.Range.getMinimumLong()",
        "snippet": "    public long getMinimumLong() {\n        return getMinimumNumber().longValue();\n    }",
        "begin_line": 57,
        "end_line": 59,
        "comment": "\n     * <p>Gets the minimum number in this range as a <code>long</code>.</p>\n     * \n     * <p>This implementation uses the {@link #getMinimumNumber()} method. \n     * Subclasses may be able to optimise this.</p>\n     *\n     * @return the minimum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Range.java",
        "class_name": "org.apache.commons.lang.math.Range",
        "signature": "org.apache.commons.lang.math.Range.getMinimumInteger()",
        "snippet": "    public int getMinimumInteger() {\n        return getMinimumNumber().intValue();\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * <p>Gets the minimum number in this range as a <code>int</code>.</p>\n     * \n     * <p>This implementation uses the {@link #getMinimumNumber()} method. \n     * Subclasses may be able to optimise this.</p>\n     *\n     * @return the minimum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Range.java",
        "class_name": "org.apache.commons.lang.math.Range",
        "signature": "org.apache.commons.lang.math.Range.getMinimumDouble()",
        "snippet": "    public double getMinimumDouble() {\n        return getMinimumNumber().doubleValue();\n    }",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\n     * <p>Gets the minimum number in this range as a <code>double</code>.</p>\n     * \n     * <p>This implementation uses the {@link #getMinimumNumber()} method. \n     * Subclasses may be able to optimise this.</p>\n     *\n     * @return the minimum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Range.java",
        "class_name": "org.apache.commons.lang.math.Range",
        "signature": "org.apache.commons.lang.math.Range.getMinimumFloat()",
        "snippet": "    public float getMinimumFloat() {\n        return getMinimumNumber().floatValue();\n    }",
        "begin_line": 93,
        "end_line": 95,
        "comment": "\n     * <p>Gets the minimum number in this range as a <code>float</code>.</p>\n     * \n     * <p>This implementation uses the {@link #getMinimumNumber()} method. \n     * Subclasses may be able to optimise this.</p>\n     *\n     * @return the minimum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Range.java",
        "class_name": "org.apache.commons.lang.math.Range",
        "signature": "org.apache.commons.lang.math.Range.getMaximumNumber()",
        "snippet": "    public abstract Number getMaximumNumber();",
        "begin_line": 102,
        "end_line": 102,
        "comment": "\n     * <p>Gets the maximum number in this range.</p>\n     *\n     * @return the maximum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Range.java",
        "class_name": "org.apache.commons.lang.math.Range",
        "signature": "org.apache.commons.lang.math.Range.getMaximumLong()",
        "snippet": "    public long getMaximumLong() {\n        return getMaximumNumber().longValue();\n    }",
        "begin_line": 112,
        "end_line": 114,
        "comment": "\n     * <p>Gets the maximum number in this range as a <code>long</code>.</p>\n     * \n     * <p>This implementation uses the {@link #getMaximumNumber()} method. \n     * Subclasses may be able to optimise this.</p>\n     *\n     * @return the maximum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Range.java",
        "class_name": "org.apache.commons.lang.math.Range",
        "signature": "org.apache.commons.lang.math.Range.getMaximumInteger()",
        "snippet": "    public int getMaximumInteger() {\n        return getMaximumNumber().intValue();\n    }",
        "begin_line": 124,
        "end_line": 126,
        "comment": "\n     * <p>Gets the maximum number in this range as a <code>int</code>.</p>\n     * \n     * <p>This implementation uses the {@link #getMaximumNumber()} method. \n     * Subclasses may be able to optimise this.</p>\n     *\n     * @return the maximum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Range.java",
        "class_name": "org.apache.commons.lang.math.Range",
        "signature": "org.apache.commons.lang.math.Range.getMaximumDouble()",
        "snippet": "    public double getMaximumDouble() {\n        return getMaximumNumber().doubleValue();\n    }",
        "begin_line": 136,
        "end_line": 138,
        "comment": "\n     * <p>Gets the maximum number in this range as a <code>double</code>.</p>\n     * \n     * <p>This implementation uses the {@link #getMaximumNumber()} method. \n     * Subclasses may be able to optimise this.</p>\n     *\n     * @return the maximum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Range.java",
        "class_name": "org.apache.commons.lang.math.Range",
        "signature": "org.apache.commons.lang.math.Range.getMaximumFloat()",
        "snippet": "    public float getMaximumFloat() {\n        return getMaximumNumber().floatValue();\n    }",
        "begin_line": 148,
        "end_line": 150,
        "comment": "\n     * <p>Gets the maximum number in this range as a <code>float</code>.</p>\n     * \n     * <p>This implementation uses the {@link #getMaximumNumber()} method. \n     * Subclasses may be able to optimise this.</p>\n     *\n     * @return the maximum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Range.java",
        "class_name": "org.apache.commons.lang.math.Range",
        "signature": "org.apache.commons.lang.math.Range.containsNumber(java.lang.Number)",
        "snippet": "    public abstract boolean containsNumber(Number number);",
        "begin_line": 169,
        "end_line": 169,
        "comment": "\n     * <p>Tests whether the specified <code>Number</code> occurs within\n     * this range.</p>\n     * \n     * <p>The exact comparison implementation varies by subclass. It is\n     * intended that an <code>int</code> specific subclass will compare using\n     * <code>int</code> comparison.</p>\n     * \n     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n     *\n     * @param number  the number to test, may be <code>null</code>\n     * @return <code>true</code> if the specified number occurs within this range\n     * @throws IllegalArgumentException if the <code>Number</code> cannot be compared\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Range.java",
        "class_name": "org.apache.commons.lang.math.Range",
        "signature": "org.apache.commons.lang.math.Range.containsLong(java.lang.Number)",
        "snippet": "    public boolean containsLong(Number value) {\n        if (value == null) {\n            return false;\n        }\n        return containsLong(value.longValue());\n    }",
        "begin_line": 183,
        "end_line": 188,
        "comment": "\n     * <p>Tests whether the specified <code>Number</code> occurs within\n     * this range using <code>long</code> comparison..</p>\n     * \n     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n     * \n     * <p>This implementation forwards to the {@link #containsLong(long)} method.</p>\n     *\n     * @param value  the long to test, may be <code>null</code>\n     * @return <code>true</code> if the specified number occurs within this\n     *  range by <code>long</code> comparison\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Range.java",
        "class_name": "org.apache.commons.lang.math.Range",
        "signature": "org.apache.commons.lang.math.Range.containsLong(long)",
        "snippet": "    public boolean containsLong(long value) {\n        return value >= getMinimumLong() && value <= getMaximumLong();\n    }",
        "begin_line": 201,
        "end_line": 203,
        "comment": "\n     * <p>Tests whether the specified <code>long</code> occurs within\n     * this range using <code>long</code> comparison.</p>\n     * \n     * <p>This implementation uses the {@link #getMinimumLong()} and \n     * {@link #getMaximumLong()} methods and should be good for most uses.</p>\n     * \n     * @param value  the long to test\n     * @return <code>true</code> if the specified number occurs within this\n     *  range by <code>long</code> comparison\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Range.java",
        "class_name": "org.apache.commons.lang.math.Range",
        "signature": "org.apache.commons.lang.math.Range.containsInteger(java.lang.Number)",
        "snippet": "    public boolean containsInteger(Number value) {\n        if (value == null) {\n            return false;\n        }\n        return containsInteger(value.intValue());\n    }",
        "begin_line": 217,
        "end_line": 222,
        "comment": "\n     * <p>Tests whether the specified <code>Number</code> occurs within\n     * this range using <code>int</code> comparison..</p>\n     * \n     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n     * \n     * <p>This implementation forwards to the {@link #containsInteger(int)} method.</p>\n     *\n     * @param value  the integer to test, may be <code>null</code>\n     * @return <code>true</code> if the specified number occurs within this\n     *  range by <code>int</code> comparison\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Range.java",
        "class_name": "org.apache.commons.lang.math.Range",
        "signature": "org.apache.commons.lang.math.Range.containsInteger(int)",
        "snippet": "    public boolean containsInteger(int value) {\n        return value >= getMinimumInteger() && value <= getMaximumInteger();\n    }",
        "begin_line": 235,
        "end_line": 237,
        "comment": "\n     * <p>Tests whether the specified <code>int</code> occurs within\n     * this range using <code>int</code> comparison.</p>\n     * \n     * <p>This implementation uses the {@link #getMinimumInteger()} and \n     * {@link #getMaximumInteger()} methods and should be good for most uses.</p>\n     * \n     * @param value  the int to test\n     * @return <code>true</code> if the specified number occurs within this\n     *  range by <code>int</code> comparison\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Range.java",
        "class_name": "org.apache.commons.lang.math.Range",
        "signature": "org.apache.commons.lang.math.Range.containsDouble(java.lang.Number)",
        "snippet": "    public boolean containsDouble(Number value) {\n        if (value == null) {\n            return false;\n        }\n        return containsDouble(value.doubleValue());\n    }",
        "begin_line": 251,
        "end_line": 256,
        "comment": "\n     * <p>Tests whether the specified <code>Number</code> occurs within\n     * this range using <code>double</code> comparison..</p>\n     * \n     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n     * \n     * <p>This implementation forwards to the {@link #containsDouble(double)} method.</p>\n     *\n     * @param value  the double to test, may be <code>null</code>\n     * @return <code>true</code> if the specified number occurs within this\n     *  range by <code>double</code> comparison\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Range.java",
        "class_name": "org.apache.commons.lang.math.Range",
        "signature": "org.apache.commons.lang.math.Range.containsDouble(double)",
        "snippet": "    public boolean containsDouble(double value) {\n        int compareMin = NumberUtils.compare(getMinimumDouble(), value);\n        int compareMax = NumberUtils.compare(getMaximumDouble(), value);\n        return compareMin <= 0 && compareMax >= 0;\n    }",
        "begin_line": 269,
        "end_line": 273,
        "comment": "\n     * <p>Tests whether the specified <code>double</code> occurs within\n     * this range using <code>double</code> comparison.</p>\n     * \n     * <p>This implementation uses the {@link #getMinimumDouble()} and \n     * {@link #getMaximumDouble()} methods and should be good for most uses.</p>\n     * \n     * @param value  the double to test\n     * @return <code>true</code> if the specified number occurs within this\n     *  range by <code>double</code> comparison\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Range.java",
        "class_name": "org.apache.commons.lang.math.Range",
        "signature": "org.apache.commons.lang.math.Range.containsFloat(java.lang.Number)",
        "snippet": "    public boolean containsFloat(Number value) {\n        if (value == null) {\n            return false;\n        }\n        return containsFloat(value.floatValue());\n    }",
        "begin_line": 287,
        "end_line": 292,
        "comment": "\n     * <p>Tests whether the specified <code>Number</code> occurs within\n     * this range using <code>float</code> comparison.</p>\n     * \n     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n     * \n     * <p>This implementation forwards to the {@link #containsFloat(float)} method.</p>\n     *\n     * @param value  the float to test, may be <code>null</code>\n     * @return <code>true</code> if the specified number occurs within this\n     *  range by <code>float</code> comparison\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Range.java",
        "class_name": "org.apache.commons.lang.math.Range",
        "signature": "org.apache.commons.lang.math.Range.containsFloat(float)",
        "snippet": "    public boolean containsFloat(float value) {\n        int compareMin = NumberUtils.compare(getMinimumFloat(), value);\n        int compareMax = NumberUtils.compare(getMaximumFloat(), value);\n        return compareMin <= 0 && compareMax >= 0;\n    }",
        "begin_line": 305,
        "end_line": 309,
        "comment": "\n     * <p>Tests whether the specified <code>float</code> occurs within\n     * this range using <code>float</code> comparison.</p>\n     * \n     * <p>This implementation uses the {@link #getMinimumFloat()} and \n     * {@link #getMaximumFloat()} methods and should be good for most uses.</p>\n     * \n     * @param value  the float to test\n     * @return <code>true</code> if the specified number occurs within this\n     *  range by <code>float</code> comparison\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Range.java",
        "class_name": "org.apache.commons.lang.math.Range",
        "signature": "org.apache.commons.lang.math.Range.containsRange(org.apache.commons.lang.math.Range)",
        "snippet": "    public boolean containsRange(Range range) {\n        if (range == null) {\n            return false;\n        }\n        return containsNumber(range.getMinimumNumber()) \n            && containsNumber(range.getMaximumNumber());\n    }",
        "begin_line": 331,
        "end_line": 337,
        "comment": "\n     * <p>Tests whether the specified range occurs entirely within this range.</p>\n     * \n     * <p>The exact comparison implementation varies by subclass. It is\n     * intended that an <code>int</code> specific subclass will compare using\n     * <code>int</code> comparison.</p>\n     * \n     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n     * \n     * <p>This implementation uses the {@link #containsNumber(Number)} method.\n     * Subclasses may be able to optimise this.</p>\n     *\n     * @param range  the range to test, may be <code>null</code>\n     * @return <code>true</code> if the specified range occurs entirely within\n     *  this range; otherwise, <code>false</code>\n     * @throws IllegalArgumentException if the <code>Range</code> cannot be compared\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Range.java",
        "class_name": "org.apache.commons.lang.math.Range",
        "signature": "org.apache.commons.lang.math.Range.overlapsRange(org.apache.commons.lang.math.Range)",
        "snippet": "    public boolean overlapsRange(Range range) {\n        if (range == null) {\n            return false;\n        }\n        return range.containsNumber(getMinimumNumber())\n            || range.containsNumber(getMaximumNumber())\n            || containsNumber(range.getMinimumNumber());\n    }",
        "begin_line": 357,
        "end_line": 364,
        "comment": "\n     * <p>Tests whether the specified range overlaps with this range.</p>\n     * \n     * <p>The exact comparison implementation varies by subclass. It is\n     * intended that an <code>int</code> specific subclass will compare using\n     * <code>int</code> comparison.</p>\n     * \n     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n     * \n     * <p>This implementation uses the {@link #containsNumber(Number)} and\n     * {@link #containsRange(Range)} methods.\n     * Subclasses may be able to optimise this.</p>\n     *\n     * @param range  the range to test, may be <code>null</code>\n     * @return <code>true</code> if the specified range overlaps with this\n     *  range; otherwise, <code>false</code>\n     * @throws IllegalArgumentException if the <code>Range</code> cannot be compared\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Range.java",
        "class_name": "org.apache.commons.lang.math.Range",
        "signature": "org.apache.commons.lang.math.Range.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        } else if (obj == null || obj.getClass() != getClass()) {\n            return false;\n        } else {\n            Range range = (Range) obj;\n            return getMinimumNumber().equals(range.getMinimumNumber()) &&\n                   getMaximumNumber().equals(range.getMaximumNumber());\n        }\n    }",
        "begin_line": 381,
        "end_line": 391,
        "comment": "\n     * <p>Compares this range to another object to test if they are equal.</p>.\n     * \n     * <p>To be equal, the class, minimum and maximum must be equal.</p>\n     * \n     * <p>This implementation uses the {@link #getMinimumNumber()} and \n     * {@link #getMaximumNumber()} methods. \n     * Subclasses may be able to optimise this.</p>\n     *\n     * @param obj the reference object with which to compare\n     * @return <code>true</code> if this object is equal\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Range.java",
        "class_name": "org.apache.commons.lang.math.Range",
        "signature": "org.apache.commons.lang.math.Range.hashCode()",
        "snippet": "    public int hashCode() {\n        int result = 17;\n        result = 37 * result + getClass().hashCode();\n        result = 37 * result + getMinimumNumber().hashCode();\n        result = 37 * result + getMaximumNumber().hashCode();\n        return result;\n    }",
        "begin_line": 402,
        "end_line": 408,
        "comment": "\n     * <p>Gets a hashCode for the range.</p>\n     * \n     * <p>This implementation uses the {@link #getMinimumNumber()} and \n     * {@link #getMaximumNumber()} methods. \n     * Subclasses may be able to optimise this.</p>\n     *\n     * @return a hash code value for this object\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/Range.java",
        "class_name": "org.apache.commons.lang.math.Range",
        "signature": "org.apache.commons.lang.math.Range.toString()",
        "snippet": "    public String toString() {\n        StringBuffer buf = new StringBuffer(32);\n        buf.append(\"Range[\");\n        buf.append(getMinimumNumber());\n        buf.append(',');\n        buf.append(getMaximumNumber());\n        buf.append(']');\n        return buf.toString();\n    }",
        "begin_line": 421,
        "end_line": 429,
        "comment": "\n     * <p>Gets the range as a <code>String</code>.</p>\n     *\n     * <p>The format of the String is 'Range[<i>min</i>,<i>max</i>]'.</p>\n     * \n     * <p>This implementation uses the {@link #getMinimumNumber()} and \n     * {@link #getMaximumNumber()} methods. \n     * Subclasses may be able to optimise this.</p>\n     *\n     * @return the <code>String</code> representation of this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/FloatRange.java",
        "class_name": "org.apache.commons.lang.math.FloatRange",
        "signature": "org.apache.commons.lang.math.FloatRange.FloatRange(float)",
        "snippet": "    public FloatRange(float number) {\n        super();\n        if (Float.isNaN(number)) {\n            throw new IllegalArgumentException(\"The number must not be NaN\");\n        }\n        this.min = number;\n        this.max = number;\n    }",
        "begin_line": 70,
        "end_line": 77,
        "comment": "\n     * <p>Constructs a new <code>FloatRange</code> using the specified\n     * number as both the minimum and maximum in this range.</p>\n     *\n     * @param number  the number to use for this range\n     * @throws IllegalArgumentException if the number is <code>NaN</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/FloatRange.java",
        "class_name": "org.apache.commons.lang.math.FloatRange",
        "signature": "org.apache.commons.lang.math.FloatRange.FloatRange(java.lang.Number)",
        "snippet": "    public FloatRange(Number number) {\n        super();\n        if (number == null) {\n            throw new IllegalArgumentException(\"The number must not be null\");\n        }\n        this.min = number.floatValue();\n        this.max = number.floatValue();\n        if (Float.isNaN(min) || Float.isNaN(max)) {\n            throw new IllegalArgumentException(\"The number must not be NaN\");\n        }\n        if (number instanceof Float) {\n            this.minObject = (Float) number;\n            this.maxObject = (Float) number;\n        }\n    }",
        "begin_line": 88,
        "end_line": 102,
        "comment": "\n     * <p>Constructs a new <code>FloatRange</code> using the specified\n     * number as both the minimum and maximum in this range.</p>\n     *\n     * @param number  the number to use for this range, must not\n     *  be <code>null</code>\n     * @throws IllegalArgumentException if the number is <code>null</code>\n     * @throws IllegalArgumentException if the number is <code>NaN</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/FloatRange.java",
        "class_name": "org.apache.commons.lang.math.FloatRange",
        "signature": "org.apache.commons.lang.math.FloatRange.FloatRange(float, float)",
        "snippet": "    public FloatRange(float number1, float number2) {\n        super();\n        if (Float.isNaN(number1) || Float.isNaN(number2)) {\n            throw new IllegalArgumentException(\"The numbers must not be NaN\");\n        }\n        if (number2 < number1) {\n            this.min = number2;\n            this.max = number1;\n        } else {\n            this.min = number1;\n            this.max = number2;\n        }\n    }",
        "begin_line": 115,
        "end_line": 127,
        "comment": "\n     * <p>Constructs a new <code>FloatRange</code> with the specified\n     * minimum and maximum numbers (both inclusive).</p>\n     * \n     * <p>The arguments may be passed in the order (min,max) or (max,min). The\n     * getMinimum and getMaximum methods will return the correct values.</p>\n     * \n     * @param number1  first number that defines the edge of the range, inclusive\n     * @param number2  second number that defines the edge of the range, inclusive\n     * @throws IllegalArgumentException if either number is <code>NaN</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/FloatRange.java",
        "class_name": "org.apache.commons.lang.math.FloatRange",
        "signature": "org.apache.commons.lang.math.FloatRange.FloatRange(java.lang.Number, java.lang.Number)",
        "snippet": "    public FloatRange(Number number1, Number number2) {\n        super();\n        if (number1 == null || number2 == null) {\n            throw new IllegalArgumentException(\"The numbers must not be null\");\n        }\n        float number1val = number1.floatValue();\n        float number2val = number2.floatValue();\n        if (Float.isNaN(number1val) || Float.isNaN(number2val)) {\n            throw new IllegalArgumentException(\"The numbers must not be NaN\");\n        }\n        if (number2val < number1val) {\n            this.min = number2val;\n            this.max = number1val;\n            if (number2 instanceof Float) {\n                this.minObject = (Float) number2;\n            }\n            if (number1 instanceof Float) {\n                this.maxObject = (Float) number1;\n            }\n        } else {\n            this.min = number1val;\n            this.max = number2val;\n            if (number1 instanceof Float) {\n                this.minObject = (Float) number1;\n            }\n            if (number2 instanceof Float) {\n                this.maxObject = (Float) number2;\n            }\n        }\n    }",
        "begin_line": 141,
        "end_line": 170,
        "comment": "\n     * <p>Constructs a new <code>FloatRange</code> with the specified\n     * minimum and maximum numbers (both inclusive).</p>\n     * \n     * <p>The arguments may be passed in the order (min,max) or (max,min). The\n     * getMinimum and getMaximum methods will return the correct values.</p>\n     *\n     * @param number1  first number that defines the edge of the range, inclusive\n     * @param number2  second number that defines the edge of the range, inclusive\n     * @throws IllegalArgumentException if either number is <code>null</code>\n     * @throws IllegalArgumentException if either number is <code>NaN</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/FloatRange.java",
        "class_name": "org.apache.commons.lang.math.FloatRange",
        "signature": "org.apache.commons.lang.math.FloatRange.getMinimumNumber()",
        "snippet": "    public Number getMinimumNumber() {\n        if (minObject == null) {\n            minObject = new Float(min);            \n        }\n        return minObject;\n    }",
        "begin_line": 180,
        "end_line": 185,
        "comment": "\n     * <p>Returns the minimum number in this range.</p>\n     *\n     * @return the minimum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/FloatRange.java",
        "class_name": "org.apache.commons.lang.math.FloatRange",
        "signature": "org.apache.commons.lang.math.FloatRange.getMinimumLong()",
        "snippet": "    public long getMinimumLong() {\n        return (long) min;\n    }",
        "begin_line": 194,
        "end_line": 196,
        "comment": "\n     * <p>Gets the minimum number in this range as a <code>long</code>.</p>\n     * \n     * <p>This conversion can lose information for large values or decimals.</p>\n     *\n     * @return the minimum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/FloatRange.java",
        "class_name": "org.apache.commons.lang.math.FloatRange",
        "signature": "org.apache.commons.lang.math.FloatRange.getMinimumInteger()",
        "snippet": "    public int getMinimumInteger() {\n        return (int) min;\n    }",
        "begin_line": 205,
        "end_line": 207,
        "comment": "\n     * <p>Gets the minimum number in this range as a <code>int</code>.</p>\n     * \n     * <p>This conversion can lose information for large values or decimals.</p>\n     *\n     * @return the minimum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/FloatRange.java",
        "class_name": "org.apache.commons.lang.math.FloatRange",
        "signature": "org.apache.commons.lang.math.FloatRange.getMinimumDouble()",
        "snippet": "    public double getMinimumDouble() {\n        return min;\n    }",
        "begin_line": 214,
        "end_line": 216,
        "comment": "\n     * <p>Gets the minimum number in this range as a <code>double</code>.</p>\n     *\n     * @return the minimum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/FloatRange.java",
        "class_name": "org.apache.commons.lang.math.FloatRange",
        "signature": "org.apache.commons.lang.math.FloatRange.getMinimumFloat()",
        "snippet": "    public float getMinimumFloat() {\n        return min;\n    }",
        "begin_line": 223,
        "end_line": 225,
        "comment": "\n     * <p>Gets the minimum number in this range as a <code>float</code>.</p>\n     *\n     * @return the minimum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/FloatRange.java",
        "class_name": "org.apache.commons.lang.math.FloatRange",
        "signature": "org.apache.commons.lang.math.FloatRange.getMaximumNumber()",
        "snippet": "    public Number getMaximumNumber() {\n        if (maxObject == null) {\n            maxObject = new Float(max);            \n        }\n        return maxObject;\n    }",
        "begin_line": 232,
        "end_line": 237,
        "comment": "\n     * <p>Returns the maximum number in this range.</p>\n     *\n     * @return the maximum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/FloatRange.java",
        "class_name": "org.apache.commons.lang.math.FloatRange",
        "signature": "org.apache.commons.lang.math.FloatRange.getMaximumLong()",
        "snippet": "    public long getMaximumLong() {\n        return (long) max;\n    }",
        "begin_line": 246,
        "end_line": 248,
        "comment": "\n     * <p>Gets the maximum number in this range as a <code>long</code>.</p>\n     * \n     * <p>This conversion can lose information for large values or decimals.</p>\n     *\n     * @return the maximum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/FloatRange.java",
        "class_name": "org.apache.commons.lang.math.FloatRange",
        "signature": "org.apache.commons.lang.math.FloatRange.getMaximumInteger()",
        "snippet": "    public int getMaximumInteger() {\n        return (int) max;\n    }",
        "begin_line": 257,
        "end_line": 259,
        "comment": "\n     * <p>Gets the maximum number in this range as a <code>int</code>.</p>\n     * \n     * <p>This conversion can lose information for large values or decimals.</p>\n     *\n     * @return the maximum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/FloatRange.java",
        "class_name": "org.apache.commons.lang.math.FloatRange",
        "signature": "org.apache.commons.lang.math.FloatRange.getMaximumDouble()",
        "snippet": "    public double getMaximumDouble() {\n        return max;\n    }",
        "begin_line": 266,
        "end_line": 268,
        "comment": "\n     * <p>Gets the maximum number in this range as a <code>double</code>.</p>\n     *\n     * @return the maximum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/FloatRange.java",
        "class_name": "org.apache.commons.lang.math.FloatRange",
        "signature": "org.apache.commons.lang.math.FloatRange.getMaximumFloat()",
        "snippet": "    public float getMaximumFloat() {\n        return max;\n    }",
        "begin_line": 275,
        "end_line": 277,
        "comment": "\n     * <p>Gets the maximum number in this range as a <code>float</code>.</p>\n     *\n     * @return the maximum number in this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/FloatRange.java",
        "class_name": "org.apache.commons.lang.math.FloatRange",
        "signature": "org.apache.commons.lang.math.FloatRange.containsNumber(java.lang.Number)",
        "snippet": "    public boolean containsNumber(Number number) {\n        if (number == null) {\n            return false;\n        }\n        return containsFloat(number.floatValue());\n    }",
        "begin_line": 291,
        "end_line": 296,
        "comment": "\n     * <p>Tests whether the specified <code>number</code> occurs within\n     * this range using <code>float</code> comparison.</p>\n     * \n     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n     *\n     * @param number  the number to test, may be <code>null</code>\n     * @return <code>true</code> if the specified number occurs within this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/FloatRange.java",
        "class_name": "org.apache.commons.lang.math.FloatRange",
        "signature": "org.apache.commons.lang.math.FloatRange.containsFloat(float)",
        "snippet": "    public boolean containsFloat(float value) {\n        return value >= min && value <= max;\n    }",
        "begin_line": 309,
        "end_line": 311,
        "comment": "\n     * <p>Tests whether the specified <code>float</code> occurs within\n     * this range using <code>float</code> comparison.</p>\n     * \n     * <p>This implementation overrides the superclass for performance as it is\n     * the most common case.</p>\n     * \n     * @param value  the float to test\n     * @return <code>true</code> if the specified number occurs within this\n     *  range by <code>float</code> comparison\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/FloatRange.java",
        "class_name": "org.apache.commons.lang.math.FloatRange",
        "signature": "org.apache.commons.lang.math.FloatRange.containsRange(org.apache.commons.lang.math.Range)",
        "snippet": "    public boolean containsRange(Range range) {\n        if (range == null) {\n            return false;\n        }\n        return containsFloat(range.getMinimumFloat()) &&\n               containsFloat(range.getMaximumFloat());\n    }",
        "begin_line": 326,
        "end_line": 332,
        "comment": "\n     * <p>Tests whether the specified range occurs entirely within this range\n     * using <code>float</code> comparison.</p>\n     * \n     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n     *\n     * @param range  the range to test, may be <code>null</code>\n     * @return <code>true</code> if the specified range occurs entirely within this range\n     * @throws IllegalArgumentException if the range is not of this type\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/FloatRange.java",
        "class_name": "org.apache.commons.lang.math.FloatRange",
        "signature": "org.apache.commons.lang.math.FloatRange.overlapsRange(org.apache.commons.lang.math.Range)",
        "snippet": "    public boolean overlapsRange(Range range) {\n        if (range == null) {\n            return false;\n        }\n        return range.containsFloat(min) ||\n               range.containsFloat(max) || \n               containsFloat(range.getMinimumFloat());\n    }",
        "begin_line": 343,
        "end_line": 350,
        "comment": "\n     * <p>Tests whether the specified range overlaps with this range\n     * using <code>float</code> comparison.</p>\n     * \n     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n     *\n     * @param range  the range to test, may be <code>null</code>\n     * @return <code>true</code> if the specified range overlaps with this range\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/FloatRange.java",
        "class_name": "org.apache.commons.lang.math.FloatRange",
        "signature": "org.apache.commons.lang.math.FloatRange.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (obj instanceof FloatRange == false) {\n            return false;\n        }\n        FloatRange range = (FloatRange) obj;\n        return (Float.floatToIntBits(min) == Float.floatToIntBits(range.min) &&\n                Float.floatToIntBits(max) == Float.floatToIntBits(range.max));\n    }",
        "begin_line": 363,
        "end_line": 373,
        "comment": "\n     * <p>Compares this range to another object to test if they are equal.</p>.\n     * \n     * <p>To be equal, the class, minimum and maximum must be equal.</p>\n     *\n     * @param obj the reference object with which to compare\n     * @return <code>true</code> if this object is equal\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/FloatRange.java",
        "class_name": "org.apache.commons.lang.math.FloatRange",
        "signature": "org.apache.commons.lang.math.FloatRange.hashCode()",
        "snippet": "    public int hashCode() {\n        if (hashCode == 0) {\n            hashCode = 17;\n            hashCode = 37 * hashCode + getClass().hashCode();\n            hashCode = 37 * hashCode + Float.floatToIntBits(min);\n            hashCode = 37 * hashCode + Float.floatToIntBits(max);\n        }\n        return hashCode;\n    }",
        "begin_line": 380,
        "end_line": 388,
        "comment": "\n     * <p>Gets a hashCode for the range.</p>\n     *\n     * @return a hash code value for this object\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/lang/math/FloatRange.java",
        "class_name": "org.apache.commons.lang.math.FloatRange",
        "signature": "org.apache.commons.lang.math.FloatRange.toString()",
        "snippet": "    public String toString() {\n        if (toString == null) {\n            StringBuffer buf = new StringBuffer(32);\n            buf.append(\"Range[\");\n            buf.append(min);\n            buf.append(',');\n            buf.append(max);\n            buf.append(']');\n            toString = buf.toString();\n        }\n        return toString;\n    }",
        "begin_line": 397,
        "end_line": 408,
        "comment": "\n     * <p>Gets the range as a <code>String</code>.</p>\n     *\n     * <p>The format of the String is 'Range[<i>min</i>,<i>max</i>]'.</p>\n     *\n     * @return the <code>String</code> representation of this range\n     ",
        "resolved_comments": {}
    }
]