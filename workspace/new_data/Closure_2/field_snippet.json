[
    {
        "class_name": "com.google.debugging.sourcemap.Util",
        "src_path": "src/com/google/debugging/sourcemap/Util.java",
        "signature": "com.google.debugging.sourcemap.Util.HEX_CHARS",
        "snippet": "  private static final char[] HEX_CHARS\n      = { '0', '1', '2', '3', '4', '5', '6', '7',\n          '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };",
        "begin_line": 26,
        "end_line": 28,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceMapConsumerV3",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV3.java",
        "signature": "com.google.debugging.sourcemap.SourceMapConsumerV3.UNMAPPED",
        "snippet": "  static final int UNMAPPED = -1;",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceMapConsumerV3",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV3.java",
        "signature": "com.google.debugging.sourcemap.SourceMapConsumerV3.sources",
        "snippet": "  private String[] sources;",
        "begin_line": 47,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceMapConsumerV3",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV3.java",
        "signature": "com.google.debugging.sourcemap.SourceMapConsumerV3.names",
        "snippet": "  private String[] names;",
        "begin_line": 48,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceMapConsumerV3",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV3.java",
        "signature": "com.google.debugging.sourcemap.SourceMapConsumerV3.lineCount",
        "snippet": "  private int lineCount;",
        "begin_line": 49,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceMapConsumerV3",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV3.java",
        "signature": "com.google.debugging.sourcemap.SourceMapConsumerV3.lines",
        "snippet": "  private ArrayList<ArrayList<Entry>> lines = null;",
        "begin_line": 51,
        "end_line": 51,
        "comment": " Slots in the lines list will be null if the line does not have any entries."
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceMapConsumerV3",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV3.java",
        "signature": "com.google.debugging.sourcemap.SourceMapConsumerV3.reverseSourceMapping",
        "snippet": "  private Map<String, Map<Integer, Collection<OriginalMapping>>>\n      reverseSourceMapping;",
        "begin_line": 53,
        "end_line": 54,
        "comment": " originalFile path ==> original line ==> target mappings "
    },
    {
        "class_name": "com.google.debugging.sourcemap.MappingBuilder",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV3.java",
        "signature": "com.google.debugging.sourcemap.MappingBuilder.MAX_ENTRY_VALUES",
        "snippet": "    private static final int MAX_ENTRY_VALUES = 5;",
        "begin_line": 279,
        "end_line": 279,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.MappingBuilder",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV3.java",
        "signature": "com.google.debugging.sourcemap.MappingBuilder.content",
        "snippet": "    private final StringCharIterator content;",
        "begin_line": 280,
        "end_line": 280,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.MappingBuilder",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV3.java",
        "signature": "com.google.debugging.sourcemap.MappingBuilder.line",
        "snippet": "    private int line = 0;",
        "begin_line": 281,
        "end_line": 281,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.MappingBuilder",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV3.java",
        "signature": "com.google.debugging.sourcemap.MappingBuilder.previousCol",
        "snippet": "    private int previousCol = 0;",
        "begin_line": 282,
        "end_line": 282,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.MappingBuilder",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV3.java",
        "signature": "com.google.debugging.sourcemap.MappingBuilder.previousSrcId",
        "snippet": "    private int previousSrcId = 0;",
        "begin_line": 283,
        "end_line": 283,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.MappingBuilder",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV3.java",
        "signature": "com.google.debugging.sourcemap.MappingBuilder.previousSrcLine",
        "snippet": "    private int previousSrcLine = 0;",
        "begin_line": 284,
        "end_line": 284,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.MappingBuilder",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV3.java",
        "signature": "com.google.debugging.sourcemap.MappingBuilder.previousSrcColumn",
        "snippet": "    private int previousSrcColumn = 0;",
        "begin_line": 285,
        "end_line": 285,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.MappingBuilder",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV3.java",
        "signature": "com.google.debugging.sourcemap.MappingBuilder.previousNameId",
        "snippet": "    private int previousNameId = 0;",
        "begin_line": 286,
        "end_line": 286,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.StringCharIterator",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV3.java",
        "signature": "com.google.debugging.sourcemap.StringCharIterator.content",
        "snippet": "    final String content;",
        "begin_line": 549,
        "end_line": 549,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.StringCharIterator",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV3.java",
        "signature": "com.google.debugging.sourcemap.StringCharIterator.length",
        "snippet": "    final int length;",
        "begin_line": 550,
        "end_line": 550,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.StringCharIterator",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV3.java",
        "signature": "com.google.debugging.sourcemap.StringCharIterator.current",
        "snippet": "    int current = 0;",
        "begin_line": 551,
        "end_line": 551,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.UnmappedEntry",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV3.java",
        "signature": "com.google.debugging.sourcemap.UnmappedEntry.column",
        "snippet": "    private final int column;",
        "begin_line": 589,
        "end_line": 589,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.UnnamedEntry",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV3.java",
        "signature": "com.google.debugging.sourcemap.UnnamedEntry.srcFile",
        "snippet": "    private final int srcFile;",
        "begin_line": 626,
        "end_line": 626,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.UnnamedEntry",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV3.java",
        "signature": "com.google.debugging.sourcemap.UnnamedEntry.srcLine",
        "snippet": "    private final int srcLine;",
        "begin_line": 627,
        "end_line": 627,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.UnnamedEntry",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV3.java",
        "signature": "com.google.debugging.sourcemap.UnnamedEntry.srcColumn",
        "snippet": "    private final int srcColumn;",
        "begin_line": 628,
        "end_line": 628,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.NamedEntry",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV3.java",
        "signature": "com.google.debugging.sourcemap.NamedEntry.name",
        "snippet": "    private final int name;",
        "begin_line": 663,
        "end_line": 663,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceMapGeneratorV1",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV1.java",
        "signature": "com.google.debugging.sourcemap.SourceMapGeneratorV1.UNMAPPED",
        "snippet": "  private final static int UNMAPPED = -1;",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.Mapping",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV1.java",
        "signature": "com.google.debugging.sourcemap.Mapping.id",
        "snippet": "    int id = UNMAPPED;",
        "begin_line": 47,
        "end_line": 47,
        "comment": "\n     * A unique ID for this mapping for record keeping purposes.\n     "
    },
    {
        "class_name": "com.google.debugging.sourcemap.Mapping",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV1.java",
        "signature": "com.google.debugging.sourcemap.Mapping.sourceFile",
        "snippet": "    String sourceFile;",
        "begin_line": 52,
        "end_line": 52,
        "comment": "\n     * The input source file.\n     "
    },
    {
        "class_name": "com.google.debugging.sourcemap.Mapping",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV1.java",
        "signature": "com.google.debugging.sourcemap.Mapping.originalPosition",
        "snippet": "    FilePosition originalPosition;",
        "begin_line": 59,
        "end_line": 59,
        "comment": "\n     * The position of the code in the input source file. Both\n     * the line number and the character index are indexed by\n     * 1 for legacy reasons via the Rhino Node class.\n     "
    },
    {
        "class_name": "com.google.debugging.sourcemap.Mapping",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV1.java",
        "signature": "com.google.debugging.sourcemap.Mapping.startPosition",
        "snippet": "    FilePosition startPosition;",
        "begin_line": 65,
        "end_line": 65,
        "comment": "\n     * The starting position of the code in the generated source\n     * file which this mapping represents. Indexed by 0.\n     "
    },
    {
        "class_name": "com.google.debugging.sourcemap.Mapping",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV1.java",
        "signature": "com.google.debugging.sourcemap.Mapping.endPosition",
        "snippet": "    FilePosition endPosition;",
        "begin_line": 71,
        "end_line": 71,
        "comment": "\n     * The ending position of the code in the generated source\n     * file which this mapping represents. Indexed by 0.\n     "
    },
    {
        "class_name": "com.google.debugging.sourcemap.Mapping",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV1.java",
        "signature": "com.google.debugging.sourcemap.Mapping.originalName",
        "snippet": "    String originalName;",
        "begin_line": 77,
        "end_line": 77,
        "comment": "\n     * The original name of the token found at the position\n     * represented by this mapping (if any).\n     "
    },
    {
        "class_name": "com.google.debugging.sourcemap.Mapping",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV1.java",
        "signature": "com.google.debugging.sourcemap.Mapping.used",
        "snippet": "    boolean used = false;",
        "begin_line": 82,
        "end_line": 82,
        "comment": "\n     * Whether the mapping is actually used by the source map.\n     "
    },
    {
        "class_name": "com.google.debugging.sourcemap.MappingWriter",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV1.java",
        "signature": "com.google.debugging.sourcemap.MappingWriter.lastSourceFile",
        "snippet": "    private String lastSourceFile = null;",
        "begin_line": 89,
        "end_line": 89,
        "comment": "\n     * Cache of escaped source file name.\n     "
    },
    {
        "class_name": "com.google.debugging.sourcemap.MappingWriter",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV1.java",
        "signature": "com.google.debugging.sourcemap.MappingWriter.lastSourceFileEscaped",
        "snippet": "    private String lastSourceFileEscaped = null;",
        "begin_line": 90,
        "end_line": 90,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.MappingWriter",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV1.java",
        "signature": "com.google.debugging.sourcemap.MappingWriter.lastLine",
        "snippet": "    private int lastLine = 0;",
        "begin_line": 91,
        "end_line": 91,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.MappingWriter",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV1.java",
        "signature": "com.google.debugging.sourcemap.MappingWriter.lastLineString",
        "snippet": "    private String lastLineString = String.valueOf(0);",
        "begin_line": 92,
        "end_line": 92,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceMapGeneratorV1",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV1.java",
        "signature": "com.google.debugging.sourcemap.SourceMapGeneratorV1.mappings",
        "snippet": "  private List<Mapping> mappings = Lists.newArrayList();",
        "begin_line": 148,
        "end_line": 148,
        "comment": "\n   * A pre-order traversal ordered list of mappings stored in this map.\n   "
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceMapGeneratorV1",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV1.java",
        "signature": "com.google.debugging.sourcemap.SourceMapGeneratorV1.lastMapping",
        "snippet": "  private Mapping lastMapping;",
        "begin_line": 153,
        "end_line": 153,
        "comment": "\n   * For validation store the start of the last mapping added.\n   "
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceMapGeneratorV1",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV1.java",
        "signature": "com.google.debugging.sourcemap.SourceMapGeneratorV1.offsetPosition",
        "snippet": "  private FilePosition offsetPosition = new FilePosition(0, 0);",
        "begin_line": 159,
        "end_line": 159,
        "comment": "\n   * The position that the current source map is offset in the\n   * buffer being used to generated the compiled source file.\n   "
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceMapGeneratorV1",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV1.java",
        "signature": "com.google.debugging.sourcemap.SourceMapGeneratorV1.prefixPosition",
        "snippet": "  private FilePosition prefixPosition = new FilePosition(0, 0);",
        "begin_line": 166,
        "end_line": 166,
        "comment": "\n   * The position that the current source map is offset in the\n   * generated the compiled source file by the addition of a\n   * an output wrapper prefix.\n   "
    },
    {
        "class_name": "com.google.debugging.sourcemap.LineMapper",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV1.java",
        "signature": "com.google.debugging.sourcemap.LineMapper.out",
        "snippet": "    private final Appendable out;",
        "begin_line": 388,
        "end_line": 388,
        "comment": " The destination."
    },
    {
        "class_name": "com.google.debugging.sourcemap.LineMapper",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV1.java",
        "signature": "com.google.debugging.sourcemap.LineMapper.firstChar",
        "snippet": "    private boolean firstChar = true;",
        "begin_line": 391,
        "end_line": 391,
        "comment": " Whether the current line has had a value written yet."
    },
    {
        "class_name": "com.google.debugging.sourcemap.LineMapper",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV1.java",
        "signature": "com.google.debugging.sourcemap.LineMapper.UNMAPPED_STRING",
        "snippet": "    private final static String UNMAPPED_STRING = \"-1\";",
        "begin_line": 393,
        "end_line": 393,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.LineMapper",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV1.java",
        "signature": "com.google.debugging.sourcemap.LineMapper.lastId",
        "snippet": "    private int lastId = UNMAPPED;",
        "begin_line": 395,
        "end_line": 395,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.LineMapper",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV1.java",
        "signature": "com.google.debugging.sourcemap.LineMapper.lastIdString",
        "snippet": "    private String lastIdString = UNMAPPED_STRING;",
        "begin_line": 396,
        "end_line": 396,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.MappingTraversal",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV1.java",
        "signature": "com.google.debugging.sourcemap.MappingTraversal.line",
        "snippet": "    private int line;",
        "begin_line": 516,
        "end_line": 516,
        "comment": " The last line and column written"
    },
    {
        "class_name": "com.google.debugging.sourcemap.MappingTraversal",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV1.java",
        "signature": "com.google.debugging.sourcemap.MappingTraversal.col",
        "snippet": "    private int col;",
        "begin_line": 517,
        "end_line": 517,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceMapConsumerV1",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV1.java",
        "signature": "com.google.debugging.sourcemap.SourceMapConsumerV1.LINEMAP_HEADER",
        "snippet": "  private static final String LINEMAP_HEADER = \"/** Begin line maps. **/\";",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceMapConsumerV1",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV1.java",
        "signature": "com.google.debugging.sourcemap.SourceMapConsumerV1.FILEINFO_HEADER",
        "snippet": "  private static final String FILEINFO_HEADER =\n      \"/** Begin file information. **/\";",
        "begin_line": 41,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceMapConsumerV1",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV1.java",
        "signature": "com.google.debugging.sourcemap.SourceMapConsumerV1.DEFINITION_HEADER",
        "snippet": "  private static final String DEFINITION_HEADER =\n      \"/** Begin mapping definitions. **/\";",
        "begin_line": 44,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.ParseState",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV1.java",
        "signature": "com.google.debugging.sourcemap.ParseState.contents",
        "snippet": "    final String contents;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.ParseState",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV1.java",
        "signature": "com.google.debugging.sourcemap.ParseState.currentPosition",
        "snippet": "    int currentPosition = 0;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceMapConsumerV1",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV1.java",
        "signature": "com.google.debugging.sourcemap.SourceMapConsumerV1.characterMap",
        "snippet": "  private ImmutableList<ImmutableList<LineFragment>> characterMap;",
        "begin_line": 110,
        "end_line": 110,
        "comment": "\n   * Mapping from a line number (0-indexed), to a list of mapping IDs, one for\n   * each character on the line. For example, if the array for line 2 is\n   * {@code [4,,,,5,6,,,7]}, then there will be the entry:\n   *\n   * <pre>\n   * 1 => {4, 4, 4, 4, 5, 6, 6, 6, 7}\n   * </pre>\n   "
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceMapConsumerV1",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV1.java",
        "signature": "com.google.debugging.sourcemap.SourceMapConsumerV1.mappings",
        "snippet": "  private ImmutableList<SourceFile> mappings;",
        "begin_line": 115,
        "end_line": 115,
        "comment": "\n   * Map of Mapping IDs to the actual mapping object.\n   "
    },
    {
        "class_name": "com.google.debugging.sourcemap.FileName",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV1.java",
        "signature": "com.google.debugging.sourcemap.FileName.dir",
        "snippet": "    private final String dir;",
        "begin_line": 205,
        "end_line": 205,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.FileName",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV1.java",
        "signature": "com.google.debugging.sourcemap.FileName.name",
        "snippet": "    private final String name;",
        "begin_line": 206,
        "end_line": 206,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.LineFragment",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV1.java",
        "signature": "com.google.debugging.sourcemap.LineFragment.startIndex",
        "snippet": "    private final int startIndex;",
        "begin_line": 429,
        "end_line": 429,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.LineFragment",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV1.java",
        "signature": "com.google.debugging.sourcemap.LineFragment.offsets",
        "snippet": "    private final byte[] offsets;",
        "begin_line": 430,
        "end_line": 430,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceFile",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV1.java",
        "signature": "com.google.debugging.sourcemap.SourceFile.dir",
        "snippet": "    final String dir;",
        "begin_line": 473,
        "end_line": 473,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceFile",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV1.java",
        "signature": "com.google.debugging.sourcemap.SourceFile.fileName",
        "snippet": "    final String fileName;",
        "begin_line": 474,
        "end_line": 474,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceFile",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV1.java",
        "signature": "com.google.debugging.sourcemap.SourceFile.startMapId",
        "snippet": "    final int startMapId;",
        "begin_line": 475,
        "end_line": 475,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceFile",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV1.java",
        "signature": "com.google.debugging.sourcemap.SourceFile.startLine",
        "snippet": "    final int startLine;",
        "begin_line": 476,
        "end_line": 476,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceFile",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV1.java",
        "signature": "com.google.debugging.sourcemap.SourceFile.lineOffsets",
        "snippet": "    final byte[] lineOffsets;",
        "begin_line": 477,
        "end_line": 477,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceFile",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV1.java",
        "signature": "com.google.debugging.sourcemap.SourceFile.columns",
        "snippet": "    final short[] columns;",
        "begin_line": 478,
        "end_line": 478,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceFile",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV1.java",
        "signature": "com.google.debugging.sourcemap.SourceFile.identifiers",
        "snippet": "    final String[] identifiers;",
        "begin_line": 479,
        "end_line": 479,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.Builder",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV1.java",
        "signature": "com.google.debugging.sourcemap.Builder.dir",
        "snippet": "      String dir;",
        "begin_line": 545,
        "end_line": 545,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.Builder",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV1.java",
        "signature": "com.google.debugging.sourcemap.Builder.fileName",
        "snippet": "      String fileName;",
        "begin_line": 546,
        "end_line": 546,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.Builder",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV1.java",
        "signature": "com.google.debugging.sourcemap.Builder.startMapId",
        "snippet": "      int startMapId;",
        "begin_line": 547,
        "end_line": 547,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.Builder",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV1.java",
        "signature": "com.google.debugging.sourcemap.Builder.startLine",
        "snippet": "      int startLine;",
        "begin_line": 548,
        "end_line": 548,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.Builder",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV1.java",
        "signature": "com.google.debugging.sourcemap.Builder.lineOffsets",
        "snippet": "      byte[] lineOffsets;",
        "begin_line": 549,
        "end_line": 549,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.Builder",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV1.java",
        "signature": "com.google.debugging.sourcemap.Builder.columns",
        "snippet": "      short[] columns;",
        "begin_line": 550,
        "end_line": 550,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.Builder",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV1.java",
        "signature": "com.google.debugging.sourcemap.Builder.identifiers",
        "snippet": "      String[] identifiers;",
        "begin_line": 551,
        "end_line": 551,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.LineEntry",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapLineDecoder.java",
        "signature": "com.google.debugging.sourcemap.LineEntry.id",
        "snippet": "    final int id;",
        "begin_line": 125,
        "end_line": 125,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.LineEntry",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapLineDecoder.java",
        "signature": "com.google.debugging.sourcemap.LineEntry.reps",
        "snippet": "    final int reps;",
        "begin_line": 126,
        "end_line": 126,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.StringParser",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapLineDecoder.java",
        "signature": "com.google.debugging.sourcemap.StringParser.content",
        "snippet": "    final String content;",
        "begin_line": 138,
        "end_line": 138,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.StringParser",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapLineDecoder.java",
        "signature": "com.google.debugging.sourcemap.StringParser.current",
        "snippet": "    int current = 0;",
        "begin_line": 139,
        "end_line": 139,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.Base64",
        "src_path": "src/com/google/debugging/sourcemap/Base64.java",
        "signature": "com.google.debugging.sourcemap.Base64.BASE64_MAP",
        "snippet": "  private static final String BASE64_MAP =\n      \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" +\n      \"abcdefghijklmnopqrstuvwxyz\" +\n      \"0123456789+/\";",
        "begin_line": 34,
        "end_line": 37,
        "comment": "\n   *  A map used to convert integer values in the range 0-63 to their base64\n   *  values.\n   "
    },
    {
        "class_name": "com.google.debugging.sourcemap.Base64",
        "src_path": "src/com/google/debugging/sourcemap/Base64.java",
        "signature": "com.google.debugging.sourcemap.Base64.BASE64_DECODE_MAP",
        "snippet": "  private static final int[] BASE64_DECODE_MAP = new int[256];",
        "begin_line": 42,
        "end_line": 42,
        "comment": "\n   * A map used to convert base64 character into integer values.\n   "
    },
    {
        "class_name": "com.google.debugging.sourcemap.FilePosition",
        "src_path": "src/com/google/debugging/sourcemap/FilePosition.java",
        "signature": "com.google.debugging.sourcemap.FilePosition.line",
        "snippet": "  private final int line;",
        "begin_line": 24,
        "end_line": 24,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.FilePosition",
        "src_path": "src/com/google/debugging/sourcemap/FilePosition.java",
        "signature": "com.google.debugging.sourcemap.FilePosition.column",
        "snippet": "  private final int column;",
        "begin_line": 25,
        "end_line": 25,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceMapGeneratorV3",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV3.java",
        "signature": "com.google.debugging.sourcemap.SourceMapGeneratorV3.UNMAPPED",
        "snippet": "  private static final int UNMAPPED = -1;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceMapGeneratorV3",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV3.java",
        "signature": "com.google.debugging.sourcemap.SourceMapGeneratorV3.mappings",
        "snippet": "  private List<Mapping> mappings = Lists.newArrayList();",
        "begin_line": 48,
        "end_line": 48,
        "comment": "\n   * A pre-order traversal ordered list of mappings stored in this map.\n   "
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceMapGeneratorV3",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV3.java",
        "signature": "com.google.debugging.sourcemap.SourceMapGeneratorV3.sourceFileMap",
        "snippet": "  private LinkedHashMap<String, Integer> sourceFileMap =\n      Maps.newLinkedHashMap();",
        "begin_line": 53,
        "end_line": 54,
        "comment": "\n   * A map of source names to source name index\n   "
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceMapGeneratorV3",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV3.java",
        "signature": "com.google.debugging.sourcemap.SourceMapGeneratorV3.originalNameMap",
        "snippet": "  private LinkedHashMap<String, Integer> originalNameMap =\n      Maps.newLinkedHashMap();",
        "begin_line": 59,
        "end_line": 60,
        "comment": "\n   * A map of source names to source name index\n   "
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceMapGeneratorV3",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV3.java",
        "signature": "com.google.debugging.sourcemap.SourceMapGeneratorV3.lastSourceFile",
        "snippet": "  private String lastSourceFile = null;",
        "begin_line": 65,
        "end_line": 65,
        "comment": "\n   * Cache of the last mappings source name.\n   "
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceMapGeneratorV3",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV3.java",
        "signature": "com.google.debugging.sourcemap.SourceMapGeneratorV3.lastSourceFileIndex",
        "snippet": "  private int lastSourceFileIndex = -1;",
        "begin_line": 70,
        "end_line": 70,
        "comment": "\n   * Cache of the last mappings source name index.\n   "
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceMapGeneratorV3",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV3.java",
        "signature": "com.google.debugging.sourcemap.SourceMapGeneratorV3.lastMapping",
        "snippet": "  private Mapping lastMapping;",
        "begin_line": 75,
        "end_line": 75,
        "comment": "\n   * For validation store the last mapping added.\n   "
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceMapGeneratorV3",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV3.java",
        "signature": "com.google.debugging.sourcemap.SourceMapGeneratorV3.offsetPosition",
        "snippet": "  private FilePosition offsetPosition = new FilePosition(0, 0);",
        "begin_line": 81,
        "end_line": 81,
        "comment": "\n   * The position that the current source map is offset in the\n   * buffer being used to generated the compiled source file.\n   "
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceMapGeneratorV3",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV3.java",
        "signature": "com.google.debugging.sourcemap.SourceMapGeneratorV3.prefixPosition",
        "snippet": "  private FilePosition prefixPosition = new FilePosition(0, 0);",
        "begin_line": 88,
        "end_line": 88,
        "comment": "\n   * The position that the current source map is offset in the\n   * generated the compiled source file by the addition of a\n   * an output wrapper prefix.\n   "
    },
    {
        "class_name": "com.google.debugging.sourcemap.Mapping",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV3.java",
        "signature": "com.google.debugging.sourcemap.Mapping.id",
        "snippet": "    int id = UNMAPPED;",
        "begin_line": 407,
        "end_line": 407,
        "comment": "\n     * A unique ID for this mapping for record keeping purposes.\n     "
    },
    {
        "class_name": "com.google.debugging.sourcemap.Mapping",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV3.java",
        "signature": "com.google.debugging.sourcemap.Mapping.sourceFile",
        "snippet": "    String sourceFile;",
        "begin_line": 412,
        "end_line": 412,
        "comment": "\n     * The source file index.\n     "
    },
    {
        "class_name": "com.google.debugging.sourcemap.Mapping",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV3.java",
        "signature": "com.google.debugging.sourcemap.Mapping.originalPosition",
        "snippet": "    FilePosition originalPosition;",
        "begin_line": 419,
        "end_line": 419,
        "comment": "\n     * The position of the code in the input source file. Both\n     * the line number and the character index are indexed by\n     * 1 for legacy reasons via the Rhino Node class.\n     "
    },
    {
        "class_name": "com.google.debugging.sourcemap.Mapping",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV3.java",
        "signature": "com.google.debugging.sourcemap.Mapping.startPosition",
        "snippet": "    FilePosition startPosition;",
        "begin_line": 425,
        "end_line": 425,
        "comment": "\n     * The starting position of the code in the generated source\n     * file which this mapping represents. Indexed by 0.\n     "
    },
    {
        "class_name": "com.google.debugging.sourcemap.Mapping",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV3.java",
        "signature": "com.google.debugging.sourcemap.Mapping.endPosition",
        "snippet": "    FilePosition endPosition;",
        "begin_line": 431,
        "end_line": 431,
        "comment": "\n     * The ending position of the code in the generated source\n     * file which this mapping represents. Indexed by 0.\n     "
    },
    {
        "class_name": "com.google.debugging.sourcemap.Mapping",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV3.java",
        "signature": "com.google.debugging.sourcemap.Mapping.originalName",
        "snippet": "    String originalName;",
        "begin_line": 437,
        "end_line": 437,
        "comment": "\n     * The original name of the token found at the position\n     * represented by this mapping (if any).\n     "
    },
    {
        "class_name": "com.google.debugging.sourcemap.Mapping",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV3.java",
        "signature": "com.google.debugging.sourcemap.Mapping.used",
        "snippet": "    boolean used = false;",
        "begin_line": 442,
        "end_line": 442,
        "comment": "\n     * Whether the mapping is actually used by the source map.\n     "
    },
    {
        "class_name": "com.google.debugging.sourcemap.MappingTraversal",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV3.java",
        "signature": "com.google.debugging.sourcemap.MappingTraversal.line",
        "snippet": "    private int line;",
        "begin_line": 481,
        "end_line": 481,
        "comment": " The last line and column written"
    },
    {
        "class_name": "com.google.debugging.sourcemap.MappingTraversal",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV3.java",
        "signature": "com.google.debugging.sourcemap.MappingTraversal.col",
        "snippet": "    private int col;",
        "begin_line": 482,
        "end_line": 482,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.LineMapper",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV3.java",
        "signature": "com.google.debugging.sourcemap.LineMapper.out",
        "snippet": "    private final Appendable out;",
        "begin_line": 686,
        "end_line": 686,
        "comment": " The destination."
    },
    {
        "class_name": "com.google.debugging.sourcemap.LineMapper",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV3.java",
        "signature": "com.google.debugging.sourcemap.LineMapper.previousLine",
        "snippet": "    private int previousLine = -1;",
        "begin_line": 688,
        "end_line": 688,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.LineMapper",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV3.java",
        "signature": "com.google.debugging.sourcemap.LineMapper.previousColumn",
        "snippet": "    private int previousColumn = 0;",
        "begin_line": 689,
        "end_line": 689,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.LineMapper",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV3.java",
        "signature": "com.google.debugging.sourcemap.LineMapper.previousSourceFileId",
        "snippet": "    private int previousSourceFileId;",
        "begin_line": 692,
        "end_line": 692,
        "comment": " Previous values used for storing relative ids."
    },
    {
        "class_name": "com.google.debugging.sourcemap.LineMapper",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV3.java",
        "signature": "com.google.debugging.sourcemap.LineMapper.previousSourceLine",
        "snippet": "    private int previousSourceLine;",
        "begin_line": 693,
        "end_line": 693,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.LineMapper",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV3.java",
        "signature": "com.google.debugging.sourcemap.LineMapper.previousSourceColumn",
        "snippet": "    private int previousSourceColumn;",
        "begin_line": 694,
        "end_line": 694,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.LineMapper",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV3.java",
        "signature": "com.google.debugging.sourcemap.LineMapper.previousNameId",
        "snippet": "    private int previousNameId;",
        "begin_line": 695,
        "end_line": 695,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.Base64VLQ",
        "src_path": "src/com/google/debugging/sourcemap/Base64VLQ.java",
        "signature": "com.google.debugging.sourcemap.Base64VLQ.VLQ_BASE_SHIFT",
        "snippet": "  private static final int VLQ_BASE_SHIFT = 5;",
        "begin_line": 48,
        "end_line": 48,
        "comment": " A Base64 VLQ digit can represent 5 bits, so it is base-32."
    },
    {
        "class_name": "com.google.debugging.sourcemap.Base64VLQ",
        "src_path": "src/com/google/debugging/sourcemap/Base64VLQ.java",
        "signature": "com.google.debugging.sourcemap.Base64VLQ.VLQ_BASE",
        "snippet": "  private static final int VLQ_BASE = 1 << VLQ_BASE_SHIFT;",
        "begin_line": 49,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.Base64VLQ",
        "src_path": "src/com/google/debugging/sourcemap/Base64VLQ.java",
        "signature": "com.google.debugging.sourcemap.Base64VLQ.VLQ_BASE_MASK",
        "snippet": "  private static final int VLQ_BASE_MASK = VLQ_BASE-1;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " A mask of bits for a VLQ digit (11111), 31 decimal."
    },
    {
        "class_name": "com.google.debugging.sourcemap.Base64VLQ",
        "src_path": "src/com/google/debugging/sourcemap/Base64VLQ.java",
        "signature": "com.google.debugging.sourcemap.Base64VLQ.VLQ_CONTINUATION_BIT",
        "snippet": "  private static final int VLQ_CONTINUATION_BIT = VLQ_BASE;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " The continuation bit is the 6th bit."
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceMapGeneratorV2",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV2.java",
        "signature": "com.google.debugging.sourcemap.SourceMapGeneratorV2.validate",
        "snippet": "  private boolean validate = false;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceMapGeneratorV2",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV2.java",
        "signature": "com.google.debugging.sourcemap.SourceMapGeneratorV2.UNMAPPED",
        "snippet": "  private static final int UNMAPPED = -1;",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceMapGeneratorV2",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV2.java",
        "signature": "com.google.debugging.sourcemap.SourceMapGeneratorV2.mappings",
        "snippet": "  private List<Mapping> mappings = Lists.newArrayList();",
        "begin_line": 48,
        "end_line": 48,
        "comment": "\n   * A pre-order traversal ordered list of mappings stored in this map.\n   "
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceMapGeneratorV2",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV2.java",
        "signature": "com.google.debugging.sourcemap.SourceMapGeneratorV2.sourceFileMap",
        "snippet": "  private LinkedHashMap<String, Integer> sourceFileMap =\n      Maps.newLinkedHashMap();",
        "begin_line": 53,
        "end_line": 54,
        "comment": "\n   * A map of source names to source name index\n   "
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceMapGeneratorV2",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV2.java",
        "signature": "com.google.debugging.sourcemap.SourceMapGeneratorV2.originalNameMap",
        "snippet": "  private LinkedHashMap<String, Integer> originalNameMap =\n      Maps.newLinkedHashMap();",
        "begin_line": 59,
        "end_line": 60,
        "comment": "\n   * A map of symbol names to symbol name index\n   "
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceMapGeneratorV2",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV2.java",
        "signature": "com.google.debugging.sourcemap.SourceMapGeneratorV2.lastSourceFile",
        "snippet": "  private String lastSourceFile = null;",
        "begin_line": 65,
        "end_line": 65,
        "comment": "\n   * Cache of the last mappings source name.\n   "
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceMapGeneratorV2",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV2.java",
        "signature": "com.google.debugging.sourcemap.SourceMapGeneratorV2.lastSourceFileIndex",
        "snippet": "  private int lastSourceFileIndex = -1;",
        "begin_line": 70,
        "end_line": 70,
        "comment": "\n   * Cache of the last mappings source name index.\n   "
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceMapGeneratorV2",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV2.java",
        "signature": "com.google.debugging.sourcemap.SourceMapGeneratorV2.lastMapping",
        "snippet": "  private Mapping lastMapping;",
        "begin_line": 75,
        "end_line": 75,
        "comment": "\n   * For validation store the last mapping added.\n   "
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceMapGeneratorV2",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV2.java",
        "signature": "com.google.debugging.sourcemap.SourceMapGeneratorV2.offsetPosition",
        "snippet": "  private FilePosition offsetPosition = new FilePosition(0, 0);",
        "begin_line": 81,
        "end_line": 81,
        "comment": "\n   * The position that the current source map is offset in the\n   * buffer being used to generated the compiled source file.\n   "
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceMapGeneratorV2",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV2.java",
        "signature": "com.google.debugging.sourcemap.SourceMapGeneratorV2.prefixPosition",
        "snippet": "  private FilePosition prefixPosition = new FilePosition(0, 0);",
        "begin_line": 88,
        "end_line": 88,
        "comment": "\n   * The position that the current source map is offset in the\n   * generated the compiled source file by the addition of a\n   * an output wrapper prefix.\n   "
    },
    {
        "class_name": "com.google.debugging.sourcemap.Mapping",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV2.java",
        "signature": "com.google.debugging.sourcemap.Mapping.id",
        "snippet": "    int id = UNMAPPED;",
        "begin_line": 449,
        "end_line": 449,
        "comment": "\n     * A unique ID for this mapping for record keeping purposes.\n     "
    },
    {
        "class_name": "com.google.debugging.sourcemap.Mapping",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV2.java",
        "signature": "com.google.debugging.sourcemap.Mapping.sourceFile",
        "snippet": "    int sourceFile;",
        "begin_line": 454,
        "end_line": 454,
        "comment": "\n     * The source file index.\n     "
    },
    {
        "class_name": "com.google.debugging.sourcemap.Mapping",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV2.java",
        "signature": "com.google.debugging.sourcemap.Mapping.originalPosition",
        "snippet": "    FilePosition originalPosition;",
        "begin_line": 461,
        "end_line": 461,
        "comment": "\n     * The position of the code in the input source file. Both\n     * the line number and the character index are indexed by\n     * 1 for legacy reasons via the Rhino Node class.\n     "
    },
    {
        "class_name": "com.google.debugging.sourcemap.Mapping",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV2.java",
        "signature": "com.google.debugging.sourcemap.Mapping.startPosition",
        "snippet": "    FilePosition startPosition;",
        "begin_line": 467,
        "end_line": 467,
        "comment": "\n     * The starting position of the code in the generated source\n     * file which this mapping represents. Indexed by 0.\n     "
    },
    {
        "class_name": "com.google.debugging.sourcemap.Mapping",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV2.java",
        "signature": "com.google.debugging.sourcemap.Mapping.endPosition",
        "snippet": "    FilePosition endPosition;",
        "begin_line": 473,
        "end_line": 473,
        "comment": "\n     * The ending position of the code in the generated source\n     * file which this mapping represents. Indexed by 0.\n     "
    },
    {
        "class_name": "com.google.debugging.sourcemap.Mapping",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV2.java",
        "signature": "com.google.debugging.sourcemap.Mapping.originalName",
        "snippet": "    String originalName;",
        "begin_line": 479,
        "end_line": 479,
        "comment": "\n     * The original name of the token found at the position\n     * represented by this mapping (if any).\n     "
    },
    {
        "class_name": "com.google.debugging.sourcemap.Mapping",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV2.java",
        "signature": "com.google.debugging.sourcemap.Mapping.used",
        "snippet": "    boolean used = false;",
        "begin_line": 484,
        "end_line": 484,
        "comment": "\n     * Whether the mapping is actually used by the source map.\n     "
    },
    {
        "class_name": "com.google.debugging.sourcemap.MappingWriter",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV2.java",
        "signature": "com.google.debugging.sourcemap.MappingWriter.lastLine",
        "snippet": "    private int lastLine = 0;",
        "begin_line": 491,
        "end_line": 491,
        "comment": "\n     * Cache of escaped source file name.\n     "
    },
    {
        "class_name": "com.google.debugging.sourcemap.MappingWriter",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV2.java",
        "signature": "com.google.debugging.sourcemap.MappingWriter.lastLineString",
        "snippet": "    private String lastLineString = String.valueOf(0);",
        "begin_line": 492,
        "end_line": 492,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.LineMapper",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV2.java",
        "signature": "com.google.debugging.sourcemap.LineMapper.out",
        "snippet": "    private final Appendable out;",
        "begin_line": 537,
        "end_line": 537,
        "comment": " The destination."
    },
    {
        "class_name": "com.google.debugging.sourcemap.LineMapper",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV2.java",
        "signature": "com.google.debugging.sourcemap.LineMapper.lastId",
        "snippet": "    private int lastId = UNMAPPED;",
        "begin_line": 540,
        "end_line": 540,
        "comment": " Whether the current line has had a value written yet."
    },
    {
        "class_name": "com.google.debugging.sourcemap.MappingTraversal",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV2.java",
        "signature": "com.google.debugging.sourcemap.MappingTraversal.line",
        "snippet": "    private int line;",
        "begin_line": 763,
        "end_line": 763,
        "comment": " The last line and column written"
    },
    {
        "class_name": "com.google.debugging.sourcemap.MappingTraversal",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapGeneratorV2.java",
        "signature": "com.google.debugging.sourcemap.MappingTraversal.col",
        "snippet": "    private int col;",
        "begin_line": 764,
        "end_line": 764,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceMapConsumerV2",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV2.java",
        "signature": "com.google.debugging.sourcemap.SourceMapConsumerV2.characterMap",
        "snippet": "  private Map<Integer, List<Integer>> characterMap = null;",
        "begin_line": 42,
        "end_line": 42,
        "comment": "\n   * The character map for each line. If a line does not have an entry,\n   * then it has not yet been decoded.\n   "
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceMapConsumerV2",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV2.java",
        "signature": "com.google.debugging.sourcemap.SourceMapConsumerV2.lineMaps",
        "snippet": "  private JSONArray lineMaps = null;",
        "begin_line": 47,
        "end_line": 47,
        "comment": "\n   * The undecoded line maps. Will be accessed to decode lines as needed.\n   "
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceMapConsumerV2",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV2.java",
        "signature": "com.google.debugging.sourcemap.SourceMapConsumerV2.mappings",
        "snippet": "  private List<OriginalMapping> mappings;",
        "begin_line": 52,
        "end_line": 52,
        "comment": "\n   * Map of Mapping IDs to the actual mapping object.\n   "
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceMapSection",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapSection.java",
        "signature": "com.google.debugging.sourcemap.SourceMapSection.value",
        "snippet": "  private final String value;",
        "begin_line": 29,
        "end_line": 29,
        "comment": "\n   * A URL for a valid source map file that represents a section of a generate\n   * source file such as when multiple files are concatenated together.\n   "
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceMapSection",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapSection.java",
        "signature": "com.google.debugging.sourcemap.SourceMapSection.line",
        "snippet": "  private final int line;",
        "begin_line": 30,
        "end_line": 30,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceMapSection",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapSection.java",
        "signature": "com.google.debugging.sourcemap.SourceMapSection.column",
        "snippet": "  private final int column;",
        "begin_line": 31,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.debugging.sourcemap.SourceMapSection",
        "src_path": "src/com/google/debugging/sourcemap/SourceMapSection.java",
        "signature": "com.google.debugging.sourcemap.SourceMapSection.type",
        "snippet": "  private final SectionType type;",
        "begin_line": 32,
        "end_line": 32,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.SourcePosition",
        "src_path": "src/com/google/javascript/rhino/SourcePosition.java",
        "signature": "com.google.javascript.rhino.SourcePosition.item",
        "snippet": "  private T item = null;",
        "begin_line": 51,
        "end_line": 51,
        "comment": "\n   * The (well typed) item found at the source position.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.SourcePosition",
        "src_path": "src/com/google/javascript/rhino/SourcePosition.java",
        "signature": "com.google.javascript.rhino.SourcePosition.startLineno",
        "snippet": "  private int startLineno = 0;",
        "begin_line": 56,
        "end_line": 56,
        "comment": "\n   * The starting line number.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.SourcePosition",
        "src_path": "src/com/google/javascript/rhino/SourcePosition.java",
        "signature": "com.google.javascript.rhino.SourcePosition.startCharno",
        "snippet": "  private int startCharno = 0;",
        "begin_line": 61,
        "end_line": 61,
        "comment": "\n   * The character position on the starting line.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.SourcePosition",
        "src_path": "src/com/google/javascript/rhino/SourcePosition.java",
        "signature": "com.google.javascript.rhino.SourcePosition.endLineno",
        "snippet": "  private int endLineno = 0;",
        "begin_line": 66,
        "end_line": 66,
        "comment": "\n   * The ending line number.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.SourcePosition",
        "src_path": "src/com/google/javascript/rhino/SourcePosition.java",
        "signature": "com.google.javascript.rhino.SourcePosition.endCharno",
        "snippet": "  private int endCharno = 0;",
        "begin_line": 71,
        "end_line": 71,
        "comment": "\n   * The character position on the ending line.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 88,
        "end_line": 88,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.baseType",
        "snippet": "    JSTypeExpression baseType = null;",
        "begin_line": 91,
        "end_line": 91,
        "comment": " Function information"
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.extendedInterfaces",
        "snippet": "    List<JSTypeExpression> extendedInterfaces = null;",
        "begin_line": 92,
        "end_line": 92,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.implementedInterfaces",
        "snippet": "    List<JSTypeExpression> implementedInterfaces = null;",
        "begin_line": 93,
        "end_line": 93,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.parameters",
        "snippet": "    Map<String, JSTypeExpression> parameters = null;",
        "begin_line": 94,
        "end_line": 94,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.thrownTypes",
        "snippet": "    List<JSTypeExpression> thrownTypes = null;",
        "begin_line": 95,
        "end_line": 95,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.templateTypeNames",
        "snippet": "    ImmutableList<String> templateTypeNames = null;",
        "begin_line": 96,
        "end_line": 96,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.description",
        "snippet": "    String description = null;",
        "begin_line": 99,
        "end_line": 99,
        "comment": " Other information"
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.meaning",
        "snippet": "    String meaning = null;",
        "begin_line": 100,
        "end_line": 100,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.deprecated",
        "snippet": "    String deprecated = null;",
        "begin_line": 101,
        "end_line": 101,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.license",
        "snippet": "    String license = null;",
        "begin_line": 102,
        "end_line": 102,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.suppressions",
        "snippet": "    Set<String> suppressions = null;",
        "begin_line": 103,
        "end_line": 103,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.modifies",
        "snippet": "    Set<String> modifies = null;",
        "begin_line": 104,
        "end_line": 104,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.lendsName",
        "snippet": "    String lendsName = null;",
        "begin_line": 105,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.sourceComment",
        "snippet": "    String sourceComment = null;",
        "begin_line": 109,
        "end_line": 109,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.markers",
        "snippet": "    List<Marker> markers = null;",
        "begin_line": 110,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.parameters",
        "snippet": "    Map<String, String> parameters = null;",
        "begin_line": 112,
        "end_line": 112,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.throwsDescriptions",
        "snippet": "    Map<JSTypeExpression, String> throwsDescriptions = null;",
        "begin_line": 113,
        "end_line": 113,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.blockDescription",
        "snippet": "    String blockDescription = null;",
        "begin_line": 114,
        "end_line": 114,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.fileOverview",
        "snippet": "    String fileOverview = null;",
        "begin_line": 115,
        "end_line": 115,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.returnDescription",
        "snippet": "    String returnDescription = null;",
        "begin_line": 116,
        "end_line": 116,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.version",
        "snippet": "    String version = null;",
        "begin_line": 117,
        "end_line": 117,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.authors",
        "snippet": "    List<String> authors = null;",
        "begin_line": 119,
        "end_line": 119,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.sees",
        "snippet": "    List<String> sees = null;",
        "begin_line": 120,
        "end_line": 120,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.TypePosition",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.TypePosition.brackets",
        "snippet": "    private boolean brackets = false;",
        "begin_line": 155,
        "end_line": 155,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Marker",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.Marker.annotation",
        "snippet": "    private TrimmedStringPosition annotation = null;",
        "begin_line": 178,
        "end_line": 178,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Marker",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.Marker.name",
        "snippet": "    private TrimmedStringPosition name = null;",
        "begin_line": 179,
        "end_line": 179,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Marker",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.Marker.nameNode",
        "snippet": "    private SourcePosition<Node> nameNode = null;",
        "begin_line": 180,
        "end_line": 180,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Marker",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.Marker.description",
        "snippet": "    private StringPosition description = null;",
        "begin_line": 181,
        "end_line": 181,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Marker",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.Marker.type",
        "snippet": "    private TypePosition type = null;",
        "begin_line": 182,
        "end_line": 182,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.info",
        "snippet": "  private LazilyInitializedInfo info = null;",
        "begin_line": 246,
        "end_line": 246,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.documentation",
        "snippet": "  private LazilyInitializedDocumentation documentation = null;",
        "begin_line": 248,
        "end_line": 248,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.associatedNode",
        "snippet": "  private Node associatedNode = null;",
        "begin_line": 251,
        "end_line": 251,
        "comment": " The Node this JSDoc is associated with."
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.visibility",
        "snippet": "  private Visibility visibility = null;",
        "begin_line": 253,
        "end_line": 253,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.bitset",
        "snippet": "  private int bitset = 0x00;",
        "begin_line": 266,
        "end_line": 266,
        "comment": "\n   * The {@link #isConstant()}, {@link #isConstructor()}, {@link #isInterface},\n   * {@link #isHidden()} and {@link #shouldPreserveTry()} flags as well as\n   * whether the {@link #type} field stores a value for {@link #getType()},\n   * {@link #getReturnType()} or {@link #getEnumParameterType()}.\n   *\n   * @see #setFlag(boolean, int)\n   * @see #getFlag(int)\n   * @see #setType(JSTypeExpression, int)\n   * @see #getType(int)\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.type",
        "snippet": "  private JSTypeExpression type = null;",
        "begin_line": 276,
        "end_line": 276,
        "comment": "\n   * The type for {@link #getType()}, {@link #getReturnType()} or\n   * {@link #getEnumParameterType()}. The knowledge of which one is recorded is\n   * stored in the {@link #bitset} field.\n   *\n   * @see #setType(JSTypeExpression, int)\n   * @see #getType(int)\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.thisType",
        "snippet": "  private JSTypeExpression thisType = null;",
        "begin_line": 281,
        "end_line": 281,
        "comment": "\n   * The type for {@link #getThisType()}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.includeDocumentation",
        "snippet": "  private boolean includeDocumentation = false;",
        "begin_line": 288,
        "end_line": 288,
        "comment": "\n   * Whether to include documentation.\n   *\n   * @see JSDocInfo.LazilyInitializedDocumentation\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_FLAGS",
        "snippet": "  private static final int MASK_FLAGS       = 0x3FFFFFFF;",
        "begin_line": 295,
        "end_line": 295,
        "comment": " Mask all the boolean annotation types"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_CONSTANT",
        "snippet": "  private static final int MASK_CONSTANT      = 0x00000001; // @const",
        "begin_line": 297,
        "end_line": 297,
        "comment": " @const"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_CONSTRUCTOR",
        "snippet": "  private static final int MASK_CONSTRUCTOR   = 0x00000002; // @constructor",
        "begin_line": 298,
        "end_line": 298,
        "comment": " @constructor"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_DEFINE",
        "snippet": "  private static final int MASK_DEFINE        = 0x00000004; // @define",
        "begin_line": 299,
        "end_line": 299,
        "comment": " @define"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_HIDDEN",
        "snippet": "  private static final int MASK_HIDDEN        = 0x00000008; // @hidden",
        "begin_line": 300,
        "end_line": 300,
        "comment": " @hidden"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_PRESERVETRY",
        "snippet": "  private static final int MASK_PRESERVETRY   = 0x00000010; // @preserveTry",
        "begin_line": 301,
        "end_line": 301,
        "comment": " @preserveTry"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_NOCHECK",
        "snippet": "  private static final int MASK_NOCHECK       = 0x00000020; // @notypecheck",
        "begin_line": 302,
        "end_line": 302,
        "comment": " @notypecheck"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_OVERRIDE",
        "snippet": "  private static final int MASK_OVERRIDE      = 0x00000040; // @override",
        "begin_line": 303,
        "end_line": 303,
        "comment": " @override"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_NOALIAS",
        "snippet": "  private static final int MASK_NOALIAS       = 0x00000080; // @noalias",
        "begin_line": 304,
        "end_line": 304,
        "comment": " @noalias"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_DEPRECATED",
        "snippet": "  private static final int MASK_DEPRECATED    = 0x00000100; // @deprecated",
        "begin_line": 305,
        "end_line": 305,
        "comment": " @deprecated"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_INTERFACE",
        "snippet": "  private static final int MASK_INTERFACE     = 0x00000200; // @interface",
        "begin_line": 306,
        "end_line": 306,
        "comment": " @interface"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_EXPORT",
        "snippet": "  private static final int MASK_EXPORT        = 0x00000400; // @export",
        "begin_line": 307,
        "end_line": 307,
        "comment": " @export"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_NOSHADOW",
        "snippet": "  private static final int MASK_NOSHADOW      = 0x00000800; // @noshadow",
        "begin_line": 308,
        "end_line": 308,
        "comment": " @noshadow"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_FILEOVERVIEW",
        "snippet": "  private static final int MASK_FILEOVERVIEW  = 0x00001000; // @fileoverview",
        "begin_line": 309,
        "end_line": 309,
        "comment": " @fileoverview"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_IMPLICITCAST",
        "snippet": "  private static final int MASK_IMPLICITCAST  = 0x00002000; // @implicitCast",
        "begin_line": 310,
        "end_line": 310,
        "comment": " @implicitCast"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_NOSIDEEFFECTS",
        "snippet": "  private static final int MASK_NOSIDEEFFECTS = 0x00004000; // @nosideeffects",
        "begin_line": 311,
        "end_line": 311,
        "comment": " @nosideeffects"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_EXTERNS",
        "snippet": "  private static final int MASK_EXTERNS       = 0x00008000; // @externs",
        "begin_line": 312,
        "end_line": 312,
        "comment": " @externs"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_JAVADISPATCH",
        "snippet": "  private static final int MASK_JAVADISPATCH  = 0x00010000; // @javadispatch",
        "begin_line": 313,
        "end_line": 313,
        "comment": " @javadispatch"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_NOCOMPILE",
        "snippet": "  private static final int MASK_NOCOMPILE     = 0x00020000; // @nocompile",
        "begin_line": 314,
        "end_line": 314,
        "comment": " @nocompile"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_CONSISTIDGEN",
        "snippet": "  private static final int MASK_CONSISTIDGEN  = 0x00040000; // @consistentIdGenerator",
        "begin_line": 315,
        "end_line": 315,
        "comment": " @consistentIdGenerator"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_IDGEN",
        "snippet": "  private static final int MASK_IDGEN         = 0x00080000; // @idGenerator",
        "begin_line": 316,
        "end_line": 316,
        "comment": " @idGenerator"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_EXPOSE",
        "snippet": "  private static final int MASK_EXPOSE        = 0x00100000; // @expose",
        "begin_line": 317,
        "end_line": 317,
        "comment": " @expose"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_STRUCT",
        "snippet": "  private static final int MASK_STRUCT        = 0x00200000; // @struct",
        "begin_line": 318,
        "end_line": 318,
        "comment": " @struct"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_DICT",
        "snippet": "  private static final int MASK_DICT          = 0x00400000; // @dict",
        "begin_line": 319,
        "end_line": 319,
        "comment": " @dict"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_STALBEIDGEN",
        "snippet": "  private static final int MASK_STALBEIDGEN   = 0x00800000; // @stableIdGenerator",
        "begin_line": 320,
        "end_line": 320,
        "comment": " @stableIdGenerator"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_TYPEFIELD",
        "snippet": "  private static final int MASK_TYPEFIELD    = 0xE0000000; // 1110...",
        "begin_line": 324,
        "end_line": 324,
        "comment": " 1110..."
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.TYPEFIELD_TYPE",
        "snippet": "  private static final int TYPEFIELD_TYPE    = 0x20000000; // 0010...",
        "begin_line": 325,
        "end_line": 325,
        "comment": " 0010..."
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.TYPEFIELD_RETURN",
        "snippet": "  private static final int TYPEFIELD_RETURN  = 0x40000000; // 0100...",
        "begin_line": 326,
        "end_line": 326,
        "comment": " 0100..."
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.TYPEFIELD_ENUM",
        "snippet": "  private static final int TYPEFIELD_ENUM    = 0x60000000; // 0110...",
        "begin_line": 327,
        "end_line": 327,
        "comment": " 0110..."
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.TYPEFIELD_TYPEDEF",
        "snippet": "  private static final int TYPEFIELD_TYPEDEF = 0x80000000; // 1000...",
        "begin_line": 328,
        "end_line": 328,
        "comment": " 1000..."
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ERROR",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.RETURN",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.BITOR",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.BITXOR",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.BITAND",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.EQ",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.NE",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LT",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LE",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.GT",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.GE",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LSH",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.RSH",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.URSH",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ADD",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SUB",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.MUL",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DIV",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.MOD",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.NOT",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.BITNOT",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.POS",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.NEG",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.NEW",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DELPROP",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.TYPEOF",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.GETPROP",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.GETELEM",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.CALL",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.NAME",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.NUMBER",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.STRING",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.NULL",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.THIS",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.FALSE",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.TRUE",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SHEQ",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SHNE",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.REGEXP",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.THROW",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.IN",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.INSTANCEOF",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ARRAYLIT",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.OBJECTLIT",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.TRY",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.PARAM_LIST",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.COMMA",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_BITOR",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_BITXOR",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_BITAND",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_LSH",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_RSH",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_URSH",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_ADD",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_SUB",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_MUL",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_DIV",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_MOD",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.HOOK",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.OR",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.AND",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.INC",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DEC",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.FUNCTION",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.IF",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SWITCH",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.CASE",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DEFAULT_CASE",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.WHILE",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DO",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.FOR",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.BREAK",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.CONTINUE",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.VAR",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.WITH",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.CATCH",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.VOID",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.EMPTY",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.BLOCK",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LABEL",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.EXPR_RESULT",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SCRIPT",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.GETTER_DEF",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SETTER_DEF",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.CONST",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DEBUGGER",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LABEL_NAME",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.STRING_KEY",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.CAST",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ANNOTATION",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.PIPE",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.STAR",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.EOC",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.QMARK",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ELLIPSIS",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.BANG",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.EQUALS",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LB",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LC",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.COLON",
        "snippet": "    public final static int\n        ERROR          = -1,\n\n        RETURN         = 4,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        GETELEM        = 35,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        THROW          = 49,\n        IN             = 51,\n        INSTANCEOF     = 52,\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n\n        TRY            = 77,\n        PARAM_LIST     = 83,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97,  // %=\n\n        HOOK           = 98,  // conditional (?:)\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment (++)\n        DEC            = 103, // decrement (--)\n        FUNCTION       = 105, // function keyword\n        IF             = 108, // if keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT_CASE   = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        VOID           = 122, // void keyword\n\n        EMPTY          = 124,\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        EXPR_RESULT    = 130, // expression statement in scripts\n        SCRIPT         = 132, // top-level node for entire script\n\n        GETTER_DEF     = 147,\n        SETTER_DEF     = 148,\n\n        CONST          = 149,  // JS 1.5 const keyword\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n        STRING_KEY     = 154, // object literal key\n        CAST           = 155,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307,\n        LB             = 308,  // left brackets\n        LC             = 309,  // left curly braces\n        COLON          = 310;",
        "begin_line": 58,
        "end_line": 171,
        "comment": "\n     * Token types.  These values correspond to JSTokenType values in\n     * jsscan.c.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DEFAULT",
        "snippet": "    public final static int\n         DEFAULT        = DEFAULT_CASE,\n         GET            = GETTER_DEF,\n         LP             = PARAM_LIST,\n         SET            = SETTER_DEF;",
        "begin_line": 175,
        "end_line": 179,
        "comment": " TODO(johnlenz): remove these"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.GET",
        "snippet": "    public final static int\n         DEFAULT        = DEFAULT_CASE,\n         GET            = GETTER_DEF,\n         LP             = PARAM_LIST,\n         SET            = SETTER_DEF;",
        "begin_line": 175,
        "end_line": 179,
        "comment": " TODO(johnlenz): remove these"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LP",
        "snippet": "    public final static int\n         DEFAULT        = DEFAULT_CASE,\n         GET            = GETTER_DEF,\n         LP             = PARAM_LIST,\n         SET            = SETTER_DEF;",
        "begin_line": 175,
        "end_line": 179,
        "comment": " TODO(johnlenz): remove these"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SET",
        "snippet": "    public final static int\n         DEFAULT        = DEFAULT_CASE,\n         GET            = GETTER_DEF,\n         LP             = PARAM_LIST,\n         SET            = SETTER_DEF;",
        "begin_line": 175,
        "end_line": 179,
        "comment": " TODO(johnlenz): remove these"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.currentInfo",
        "snippet": "  private JSDocInfo currentInfo;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " the current JSDoc which is being populated"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.populated",
        "snippet": "  private boolean populated = false;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " whether the current JSDocInfo has valuable information"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.parseDocumentation",
        "snippet": "  private boolean parseDocumentation = false;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " whether to include the documentation itself when parsing the JsDoc"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.currentMarker",
        "snippet": "  private JSDocInfo.Marker currentMarker = null;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " the current marker, if any."
    },
    {
        "class_name": "com.google.javascript.rhino.JSTypeExpression",
        "src_path": "src/com/google/javascript/rhino/JSTypeExpression.java",
        "signature": "com.google.javascript.rhino.JSTypeExpression.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.JSTypeExpression",
        "src_path": "src/com/google/javascript/rhino/JSTypeExpression.java",
        "signature": "com.google.javascript.rhino.JSTypeExpression.root",
        "snippet": "  private final Node root;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " The root of the AST. "
    },
    {
        "class_name": "com.google.javascript.rhino.JSTypeExpression",
        "src_path": "src/com/google/javascript/rhino/JSTypeExpression.java",
        "signature": "com.google.javascript.rhino.JSTypeExpression.sourceName",
        "snippet": "  private final String sourceName;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " The source name where the type expression appears. "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 65,
        "end_line": 65,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.JSDOC_INFO_PROP",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      LAST_PROP          = 55;",
        "begin_line": 67,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.VAR_ARGS_NAME",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      LAST_PROP          = 55;",
        "begin_line": 67,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.INCRDECR_PROP",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      LAST_PROP          = 55;",
        "begin_line": 67,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.QUOTED_PROP",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      LAST_PROP          = 55;",
        "begin_line": 67,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.OPT_ARG_NAME",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      LAST_PROP          = 55;",
        "begin_line": 67,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      LAST_PROP          = 55;",
        "begin_line": 67,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.EMPTY_BLOCK",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      LAST_PROP          = 55;",
        "begin_line": 67,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.ORIGINALNAME_PROP",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      LAST_PROP          = 55;",
        "begin_line": 67,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      LAST_PROP          = 55;",
        "begin_line": 67,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_CONSTANT_NAME",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      LAST_PROP          = 55;",
        "begin_line": 67,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_NAMESPACE",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      LAST_PROP          = 55;",
        "begin_line": 67,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_DISPATCHER",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      LAST_PROP          = 55;",
        "begin_line": 67,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DIRECTIVES",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      LAST_PROP          = 55;",
        "begin_line": 67,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DIRECT_EVAL",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      LAST_PROP          = 55;",
        "begin_line": 67,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FREE_CALL",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      LAST_PROP          = 55;",
        "begin_line": 67,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      LAST_PROP          = 55;",
        "begin_line": 67,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LENGTH",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      LAST_PROP          = 55;",
        "begin_line": 67,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.INPUT_ID",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      LAST_PROP          = 55;",
        "begin_line": 67,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SLASH_V",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      LAST_PROP          = 55;",
        "begin_line": 67,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.INFERRED_FUNCTION",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      LAST_PROP          = 55;",
        "begin_line": 67,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LAST_PROP",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      LAST_PROP          = 55;",
        "begin_line": 67,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DECR_FLAG",
        "snippet": "  public static final int   // flags for INCRDECR_PROP\n      DECR_FLAG = 0x1,\n      POST_FLAG = 0x2;",
        "begin_line": 107,
        "end_line": 109,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.POST_FLAG",
        "snippet": "  public static final int   // flags for INCRDECR_PROP\n      DECR_FLAG = 0x1,\n      POST_FLAG = 0x2;",
        "begin_line": 107,
        "end_line": 109,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.NumberNode",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.NumberNode.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 144,
        "end_line": 144,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.NumberNode",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.NumberNode.number",
        "snippet": "    private double number;",
        "begin_line": 180,
        "end_line": 180,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.StringNode",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.StringNode.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 185,
        "end_line": 185,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.StringNode",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.StringNode.str",
        "snippet": "    private String str;",
        "begin_line": 249,
        "end_line": 249,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.AbstractPropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.AbstractPropListItem.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 263,
        "end_line": 263,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.AbstractPropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.AbstractPropListItem.next",
        "snippet": "    private final PropListItem next;",
        "begin_line": 265,
        "end_line": 265,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.AbstractPropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.AbstractPropListItem.propType",
        "snippet": "    private final int propType;",
        "begin_line": 266,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ObjectPropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.ObjectPropListItem.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 290,
        "end_line": 290,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ObjectPropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.ObjectPropListItem.objectValue",
        "snippet": "    private final Object objectValue;",
        "begin_line": 292,
        "end_line": 292,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.IntPropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.IntPropListItem.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 322,
        "end_line": 322,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.IntPropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.IntPropListItem.intValue",
        "snippet": "    final int intValue;",
        "begin_line": 324,
        "end_line": 324,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.type",
        "snippet": "  int type;              // type of the node; Token.NAME for example",
        "begin_line": 1023,
        "end_line": 1023,
        "comment": " type of the node; Token.NAME for example"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.next",
        "snippet": "  Node next;             // next sibling",
        "begin_line": 1024,
        "end_line": 1024,
        "comment": " next sibling"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.first",
        "snippet": "  private Node first;    // first element of a linked list of children",
        "begin_line": 1025,
        "end_line": 1025,
        "comment": " first element of a linked list of children"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.last",
        "snippet": "  private Node last;     // last element of a linked list of children",
        "begin_line": 1026,
        "end_line": 1026,
        "comment": " last element of a linked list of children"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.propListHead",
        "snippet": "  private PropListItem propListHead;",
        "begin_line": 1034,
        "end_line": 1034,
        "comment": "\n   * Linked list of properties. Since vast majority of nodes would have\n   * no more then 2 properties, linked list saves memory and provides\n   * fast lookup. If this does not holds, propListHead can be replaced\n   * by UintMap.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.COLUMN_BITS",
        "snippet": "  public static final int COLUMN_BITS = 12;",
        "begin_line": 1044,
        "end_line": 1044,
        "comment": "\n   * COLUMN_BITS represents how many of the lower-order bits of\n   * sourcePosition are reserved for storing the column number.\n   * Bits above these store the line number.\n   * This gives us decent position information for everything except\n   * files already passed through a minimizer, where lines might\n   * be longer than 4096 characters.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",
        "snippet": "  public static final int MAX_COLUMN_NUMBER = (1 << COLUMN_BITS) - 1;",
        "begin_line": 1051,
        "end_line": 1051,
        "comment": "\n   * MAX_COLUMN_NUMBER represents the maximum column number that can\n   * be represented.  JSCompiler's modifications to Rhino cause all\n   * tokens located beyond the maximum column to MAX_COLUMN_NUMBER.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.COLUMN_MASK",
        "snippet": "  public static final int COLUMN_MASK = MAX_COLUMN_NUMBER;",
        "begin_line": 1058,
        "end_line": 1058,
        "comment": "\n   * COLUMN_MASK stores a value where bits storing the column number\n   * are set, and bits storing the line are not set.  It's handy for\n   * separating column number from line number.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.sourcePosition",
        "snippet": "  private int sourcePosition;",
        "begin_line": 1066,
        "end_line": 1066,
        "comment": "\n   * Source position of this node. The position is encoded with the\n   * column number in the low 12 bits of the integer, and the line\n   * number in the rest.  Create some handy constants so we can change this\n   * size if we want.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.jsType",
        "snippet": "  private JSType jsType;",
        "begin_line": 1068,
        "end_line": 1068,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.parent",
        "snippet": "  private Node parent;",
        "begin_line": 1070,
        "end_line": 1070,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.SiblingNodeIterable",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.SiblingNodeIterable.start",
        "snippet": "    private final Node start;",
        "begin_line": 1248,
        "end_line": 1248,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.SiblingNodeIterable",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.SiblingNodeIterable.current",
        "snippet": "    private Node current;",
        "begin_line": 1249,
        "end_line": 1249,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.SiblingNodeIterable",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.SiblingNodeIterable.used",
        "snippet": "    private boolean used;",
        "begin_line": 1250,
        "end_line": 1250,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.AncestorIterable",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.AncestorIterable.cur",
        "snippet": "    private Node cur;",
        "begin_line": 1333,
        "end_line": 1333,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",
        "snippet": "  final public static int FLAG_GLOBAL_STATE_UNMODIFIED = 1;",
        "begin_line": 1965,
        "end_line": 1965,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",
        "snippet": "  final public static int FLAG_THIS_UNMODIFIED = 2;",
        "begin_line": 1966,
        "end_line": 1966,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",
        "snippet": "  final public static int FLAG_ARGUMENTS_UNMODIFIED = 4;",
        "begin_line": 1967,
        "end_line": 1967,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FLAG_NO_THROWS",
        "snippet": "  final public static int FLAG_NO_THROWS = 8;",
        "begin_line": 1968,
        "end_line": 1968,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",
        "snippet": "  final public static int FLAG_LOCAL_RESULTS = 16;",
        "begin_line": 1969,
        "end_line": 1969,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",
        "snippet": "  final public static int SIDE_EFFECTS_FLAGS_MASK = 31;",
        "begin_line": 1971,
        "end_line": 1971,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",
        "snippet": "  final public static int SIDE_EFFECTS_ALL = 0;",
        "begin_line": 1973,
        "end_line": 1973,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",
        "snippet": "  final public static int NO_SIDE_EFFECTS =\n    FLAG_GLOBAL_STATE_UNMODIFIED\n    | FLAG_THIS_UNMODIFIED\n    | FLAG_ARGUMENTS_UNMODIFIED\n    | FLAG_NO_THROWS;",
        "begin_line": 1974,
        "end_line": 1978,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.SideEffectFlags",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.SideEffectFlags.value",
        "snippet": "    private int value = Node.SIDE_EFFECTS_ALL;",
        "begin_line": 2010,
        "end_line": 2010,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.NodeMismatch",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.NodeMismatch.nodeA",
        "snippet": "    final Node nodeA;",
        "begin_line": 2123,
        "end_line": 2123,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.NodeMismatch",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.NodeMismatch.nodeB",
        "snippet": "    final Node nodeB;",
        "begin_line": 2124,
        "end_line": 2124,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptRuntime",
        "src_path": "src/com/google/javascript/rhino/ScriptRuntime.java",
        "signature": "com.google.javascript.rhino.ScriptRuntime.NaN",
        "snippet": "    public static final double\n        NaN = Double.longBitsToDouble(0x7ff8000000000000L);",
        "begin_line": 80,
        "end_line": 81,
        "comment": " So we use ScriptRuntime.NaN instead of Double.NaN."
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptRuntime",
        "src_path": "src/com/google/javascript/rhino/ScriptRuntime.java",
        "signature": "com.google.javascript.rhino.ScriptRuntime.negativeZero",
        "snippet": "    public static final double\n        negativeZero = Double.longBitsToDouble(0x8000000000000000L);",
        "begin_line": 84,
        "end_line": 85,
        "comment": " A similar problem exists for negative zero."
    },
    {
        "class_name": "com.google.javascript.rhino.InputId",
        "src_path": "src/com/google/javascript/rhino/InputId.java",
        "signature": "com.google.javascript.rhino.InputId.serialVersionUID",
        "snippet": "  public static final long serialVersionUID = 1L;",
        "begin_line": 48,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.InputId",
        "src_path": "src/com/google/javascript/rhino/InputId.java",
        "signature": "com.google.javascript.rhino.InputId.id",
        "snippet": "  private final String id;",
        "begin_line": 49,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.SimpleErrorReporter",
        "src_path": "src/com/google/javascript/rhino/SimpleErrorReporter.java",
        "signature": "com.google.javascript.rhino.SimpleErrorReporter.warnings",
        "snippet": "    private List<String> warnings = null;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.SimpleErrorReporter",
        "src_path": "src/com/google/javascript/rhino/SimpleErrorReporter.java",
        "signature": "com.google.javascript.rhino.SimpleErrorReporter.errors",
        "snippet": "    private List<String> errors = null;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.registry",
        "snippet": "  private final JSTypeRegistry registry;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.root",
        "snippet": "  private final Node root = new Node(Token.PARAM_LIST);",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnknownType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnknownType.java",
        "signature": "com.google.javascript.rhino.jstype.UnknownType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnknownType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnknownType.java",
        "signature": "com.google.javascript.rhino.jstype.UnknownType.isChecked",
        "snippet": "  private final boolean isChecked;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " See the explanation of checked unknown types in JSTypeNative."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 63,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.DEFAULT_MAX_UNION_SIZE",
        "snippet": "  private static final int DEFAULT_MAX_UNION_SIZE = 20;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " then we should just give up and admit that we have no clue."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.registry",
        "snippet": "  private final JSTypeRegistry registry;",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.alternates",
        "snippet": "  private final List<JSType> alternates = Lists.newArrayList();",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.isAllType",
        "snippet": "  private boolean isAllType = false;",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.isNativeUnknownType",
        "snippet": "  private boolean isNativeUnknownType = false;",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.areAllUnknownsChecked",
        "snippet": "  private boolean areAllUnknownsChecked = true;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.maxUnionSize",
        "snippet": "  private final int maxUnionSize;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.functionTypePosition",
        "snippet": "  private int functionTypePosition = -1;",
        "begin_line": 94,
        "end_line": 94,
        "comment": " one structural function, or just bails out and uses the top function type."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.result",
        "snippet": "  private JSType result = null;",
        "begin_line": 97,
        "end_line": 97,
        "comment": " Memoize the result, in case build() is called multiple times."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NoType",
        "src_path": "src/com/google/javascript/rhino/jstype/NoType.java",
        "signature": "com.google.javascript.rhino.jstype.NoType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.resolved",
        "snippet": "  private boolean resolved = false;",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.resolveResult",
        "snippet": "  private JSType resolveResult = null;",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.templateKeys",
        "snippet": "  private final ImmutableList<String> templateKeys;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.templatizedTypes",
        "snippet": "  private final ImmutableList<JSType> templatizedTypes;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.inTemplatedCheckVisit",
        "snippet": "  private boolean inTemplatedCheckVisit = false;",
        "begin_line": 76,
        "end_line": 76,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.CAN_CAST_TO_VISITOR",
        "snippet": "  private static final CanCastToVisitor CAN_CAST_TO_VISITOR =\n      new CanCastToVisitor();",
        "begin_line": 77,
        "end_line": 78,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.UNKNOWN_NAME",
        "snippet": "  public static final String UNKNOWN_NAME =\n      \"Unknown class name\";",
        "begin_line": 80,
        "end_line": 81,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.NOT_A_CLASS",
        "snippet": "  public static final String NOT_A_CLASS =\n      \"Not declared as a constructor\";",
        "begin_line": 83,
        "end_line": 84,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.NOT_A_TYPE",
        "snippet": "  public static final String NOT_A_TYPE =\n      \"Not declared as a type name\";",
        "begin_line": 86,
        "end_line": 87,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.EMPTY_TYPE_COMPONENT",
        "snippet": "  public static final String EMPTY_TYPE_COMPONENT =\n      \"Named type with empty name component\";",
        "begin_line": 89,
        "end_line": 90,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.ALPHA",
        "snippet": "  static final Comparator<JSType> ALPHA = new Comparator<JSType>() {\n    @Override\n    public int compare(JSType t1, JSType t2) {\n      return t1.toString().compareTo(t2.toString());\n    }\n  };",
        "begin_line": 97,
        "end_line": 102,
        "comment": "\n   * Total ordering on types based on their textual representation.\n   * This is used to have a deterministic output of the toString\n   * method of the union type since this output is used in tests.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.ENUMDECL",
        "snippet": "  public static final int ENUMDECL = 1;",
        "begin_line": 105,
        "end_line": 105,
        "comment": " A flag set on enum definition tree nodes"
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.NOT_ENUMDECL",
        "snippet": "  public static final int NOT_ENUMDECL = 0;",
        "begin_line": 106,
        "end_line": 106,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.registry",
        "snippet": "  final JSTypeRegistry registry;",
        "begin_line": 108,
        "end_line": 108,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.TypePair",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.TypePair.typeA",
        "snippet": "    public final JSType typeA;",
        "begin_line": 1475,
        "end_line": 1475,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.TypePair",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.TypePair.typeB",
        "snippet": "    public final JSType typeB;",
        "begin_line": 1476,
        "end_line": 1476,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ProxyObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ProxyObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.referencedType",
        "snippet": "  private JSType referencedType;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ProxyObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.referencedObjType",
        "snippet": "  private ObjectType referencedObjType;",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ModificationVisitor",
        "src_path": "src/com/google/javascript/rhino/jstype/ModificationVisitor.java",
        "signature": "com.google.javascript.rhino.jstype.ModificationVisitor.registry",
        "snippet": "  private final JSTypeRegistry registry;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.RecordTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.RecordTypeBuilder.isEmpty",
        "snippet": "  private boolean isEmpty = true;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.RecordTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.RecordTypeBuilder.isDeclared",
        "snippet": "  private boolean isDeclared = true;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.RecordTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.RecordTypeBuilder.registry",
        "snippet": "  private final JSTypeRegistry registry;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.RecordTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.RecordTypeBuilder.properties",
        "snippet": "  private final HashMap<String, RecordProperty> properties = Maps.newHashMap();",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.RecordProperty",
        "src_path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.RecordProperty.type",
        "snippet": "    private final JSType type;",
        "begin_line": 100,
        "end_line": 100,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.RecordProperty",
        "src_path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.RecordProperty.propertyNode",
        "snippet": "    private final Node propertyNode;",
        "begin_line": 101,
        "end_line": 101,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PropertyMap",
        "src_path": "src/com/google/javascript/rhino/jstype/PropertyMap.java",
        "signature": "com.google.javascript.rhino.jstype.PropertyMap.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PropertyMap",
        "src_path": "src/com/google/javascript/rhino/jstype/PropertyMap.java",
        "signature": "com.google.javascript.rhino.jstype.PropertyMap.EMPTY_MAP",
        "snippet": "  private static final PropertyMap EMPTY_MAP = new PropertyMap(\n      ImmutableMap.<String, Property>of());",
        "begin_line": 60,
        "end_line": 61,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PropertyMap",
        "src_path": "src/com/google/javascript/rhino/jstype/PropertyMap.java",
        "signature": "com.google.javascript.rhino.jstype.PropertyMap.PROP_MAP_FROM_TYPE",
        "snippet": "  private static final Function<ObjectType, PropertyMap> PROP_MAP_FROM_TYPE =\n      new Function<ObjectType, PropertyMap>() {\n    @Override public PropertyMap apply(ObjectType t) {\n      return t.getPropertyMap();\n    }\n  };",
        "begin_line": 63,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PropertyMap",
        "src_path": "src/com/google/javascript/rhino/jstype/PropertyMap.java",
        "signature": "com.google.javascript.rhino.jstype.PropertyMap.parentSource",
        "snippet": "  private ObjectType parentSource = null;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " just reference primary parents and secondary parents directly."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PropertyMap",
        "src_path": "src/com/google/javascript/rhino/jstype/PropertyMap.java",
        "signature": "com.google.javascript.rhino.jstype.PropertyMap.properties",
        "snippet": "  private final Map<String, Property> properties;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " The map of our own properties."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.AllType",
        "src_path": "src/com/google/javascript/rhino/jstype/AllType.java",
        "signature": "com.google.javascript.rhino.jstype.AllType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "signature": "com.google.javascript.rhino.jstype.UnionType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "signature": "com.google.javascript.rhino.jstype.UnionType.alternates",
        "snippet": "  Collection<JSType> alternates;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "signature": "com.google.javascript.rhino.jstype.UnionType.hashcode",
        "snippet": "  private final int hashcode;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.registry",
        "snippet": "  private final JSTypeRegistry registry;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.name",
        "snippet": "  private String name = null;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.sourceNode",
        "snippet": "  private Node sourceNode = null;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.parametersNode",
        "snippet": "  private Node parametersNode = null;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.returnType",
        "snippet": "  private JSType returnType = null;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.typeOfThis",
        "snippet": "  private JSType typeOfThis = null;",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.templateKeys",
        "snippet": "  private ImmutableList<String> templateKeys = ImmutableList.of();",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.inferredReturnType",
        "snippet": "  private boolean inferredReturnType = false;",
        "begin_line": 61,
        "end_line": 61,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.isConstructor",
        "snippet": "  private boolean isConstructor = false;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.isNativeType",
        "snippet": "  private boolean isNativeType = false;",
        "begin_line": 63,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/NoObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.NoObjectType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.SimpleReference",
        "src_path": "src/com/google/javascript/rhino/jstype/SimpleReference.java",
        "signature": "com.google.javascript.rhino.jstype.SimpleReference.symbol",
        "snippet": "  private final T symbol;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.SimpleReference",
        "src_path": "src/com/google/javascript/rhino/jstype/SimpleReference.java",
        "signature": "com.google.javascript.rhino.jstype.SimpleReference.node",
        "snippet": "  private final Node node;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.SimpleSlot",
        "src_path": "src/com/google/javascript/rhino/jstype/SimpleSlot.java",
        "signature": "com.google.javascript.rhino.jstype.SimpleSlot.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.SimpleSlot",
        "src_path": "src/com/google/javascript/rhino/jstype/SimpleSlot.java",
        "signature": "com.google.javascript.rhino.jstype.SimpleSlot.name",
        "snippet": "  final String name;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.SimpleSlot",
        "src_path": "src/com/google/javascript/rhino/jstype/SimpleSlot.java",
        "signature": "com.google.javascript.rhino.jstype.SimpleSlot.type",
        "snippet": "  final JSType type;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.SimpleSlot",
        "src_path": "src/com/google/javascript/rhino/jstype/SimpleSlot.java",
        "signature": "com.google.javascript.rhino.jstype.SimpleSlot.inferred",
        "snippet": "  final boolean inferred;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ErrorFunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/ErrorFunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.ErrorFunctionType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 48,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NullType",
        "src_path": "src/com/google/javascript/rhino/jstype/NullType.java",
        "signature": "com.google.javascript.rhino.jstype.NullType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ParameterizedType",
        "src_path": "src/com/google/javascript/rhino/jstype/ParameterizedType.java",
        "signature": "com.google.javascript.rhino.jstype.ParameterizedType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ParameterizedType",
        "src_path": "src/com/google/javascript/rhino/jstype/ParameterizedType.java",
        "signature": "com.google.javascript.rhino.jstype.ParameterizedType.parameterType",
        "snippet": "  final JSType parameterType;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.TemplateType",
        "src_path": "src/com/google/javascript/rhino/jstype/TemplateType.java",
        "signature": "com.google.javascript.rhino.jstype.TemplateType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 49,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.TemplateType",
        "src_path": "src/com/google/javascript/rhino/jstype/TemplateType.java",
        "signature": "com.google.javascript.rhino.jstype.TemplateType.name",
        "snippet": "  private final String name;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NumberType",
        "src_path": "src/com/google/javascript/rhino/jstype/NumberType.java",
        "signature": "com.google.javascript.rhino.jstype.NumberType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.EnumElementType",
        "src_path": "src/com/google/javascript/rhino/jstype/EnumElementType.java",
        "signature": "com.google.javascript.rhino.jstype.EnumElementType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.EnumElementType",
        "src_path": "src/com/google/javascript/rhino/jstype/EnumElementType.java",
        "signature": "com.google.javascript.rhino.jstype.EnumElementType.primitiveType",
        "snippet": "  private JSType primitiveType;",
        "begin_line": 60,
        "end_line": 60,
        "comment": "\n   * The primitive type this enum element type wraps. For instance, in\n   * the following code defining the {@code LOCAL_CODES} enum\n   * <pre>var LOCAL_CODES = {A: 3, B: 9, C: 8}</pre>\n   * the primitive type of the the constants is {@code number}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.EnumElementType",
        "src_path": "src/com/google/javascript/rhino/jstype/EnumElementType.java",
        "signature": "com.google.javascript.rhino.jstype.EnumElementType.primitiveObjectType",
        "snippet": "  private ObjectType primitiveObjectType;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " The primitive type, if it is an object."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.EnumElementType",
        "src_path": "src/com/google/javascript/rhino/jstype/EnumElementType.java",
        "signature": "com.google.javascript.rhino.jstype.EnumElementType.name",
        "snippet": "  private final String name;",
        "begin_line": 65,
        "end_line": 65,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.RecordType",
        "src_path": "src/com/google/javascript/rhino/jstype/RecordType.java",
        "signature": "com.google.javascript.rhino.jstype.RecordType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.RecordType",
        "src_path": "src/com/google/javascript/rhino/jstype/RecordType.java",
        "signature": "com.google.javascript.rhino.jstype.RecordType.declared",
        "snippet": "  private final boolean declared;",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.RecordType",
        "src_path": "src/com/google/javascript/rhino/jstype/RecordType.java",
        "signature": "com.google.javascript.rhino.jstype.RecordType.isFrozen",
        "snippet": "  private boolean isFrozen = false;",
        "begin_line": 65,
        "end_line": 65,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.IndexedType",
        "src_path": "src/com/google/javascript/rhino/jstype/IndexedType.java",
        "signature": "com.google.javascript.rhino.jstype.IndexedType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.IndexedType",
        "src_path": "src/com/google/javascript/rhino/jstype/IndexedType.java",
        "signature": "com.google.javascript.rhino.jstype.IndexedType.indexType",
        "snippet": "  final JSType indexType;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.EnumType",
        "src_path": "src/com/google/javascript/rhino/jstype/EnumType.java",
        "signature": "com.google.javascript.rhino.jstype.EnumType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.EnumType",
        "src_path": "src/com/google/javascript/rhino/jstype/EnumType.java",
        "signature": "com.google.javascript.rhino.jstype.EnumType.source",
        "snippet": "  private final Node source;",
        "begin_line": 63,
        "end_line": 63,
        "comment": "\n   * The object literal or alias which this type represents.\n   * It may be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.EnumType",
        "src_path": "src/com/google/javascript/rhino/jstype/EnumType.java",
        "signature": "com.google.javascript.rhino.jstype.EnumType.elementsType",
        "snippet": "  private EnumElementType elementsType;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " the type of the individual elements"
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.EnumType",
        "src_path": "src/com/google/javascript/rhino/jstype/EnumType.java",
        "signature": "com.google.javascript.rhino.jstype.EnumType.elements",
        "snippet": "  private final Set<String> elements = new HashSet<String>();",
        "begin_line": 68,
        "end_line": 68,
        "comment": " the elements' names (they all have the same type)"
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.VoidType",
        "src_path": "src/com/google/javascript/rhino/jstype/VoidType.java",
        "signature": "com.google.javascript.rhino.jstype.VoidType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.SimpleSourceFile",
        "src_path": "src/com/google/javascript/rhino/jstype/SimpleSourceFile.java",
        "signature": "com.google.javascript.rhino.jstype.SimpleSourceFile.name",
        "snippet": "  private final String name;",
        "begin_line": 47,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.SimpleSourceFile",
        "src_path": "src/com/google/javascript/rhino/jstype/SimpleSourceFile.java",
        "signature": "com.google.javascript.rhino.jstype.SimpleSourceFile.extern",
        "snippet": "  private final boolean extern;",
        "begin_line": 48,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.visited",
        "snippet": "  private boolean visited;",
        "begin_line": 83,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.docInfo",
        "snippet": "  private JSDocInfo docInfo = null;",
        "begin_line": 84,
        "end_line": 84,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.unknown",
        "snippet": "  private boolean unknown = true;",
        "begin_line": 85,
        "end_line": 85,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/Property.java",
        "signature": "com.google.javascript.rhino.jstype.Property.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/Property.java",
        "signature": "com.google.javascript.rhino.jstype.Property.name",
        "snippet": "  private final String name;",
        "begin_line": 58,
        "end_line": 58,
        "comment": "\n   * Property's name.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/Property.java",
        "signature": "com.google.javascript.rhino.jstype.Property.type",
        "snippet": "  private JSType type;",
        "begin_line": 63,
        "end_line": 63,
        "comment": "\n   * Property's type.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/Property.java",
        "signature": "com.google.javascript.rhino.jstype.Property.inferred",
        "snippet": "  private final boolean inferred;",
        "begin_line": 68,
        "end_line": 68,
        "comment": "\n   * Whether the property's type is inferred.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/Property.java",
        "signature": "com.google.javascript.rhino.jstype.Property.propertyNode",
        "snippet": "  private Node propertyNode;",
        "begin_line": 74,
        "end_line": 74,
        "comment": "\n   * The node corresponding to this property, e.g., a GETPROP node that\n   * declares this property.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/Property.java",
        "signature": "com.google.javascript.rhino.jstype.Property.docInfo",
        "snippet": "  private JSDocInfo docInfo = null;",
        "begin_line": 77,
        "end_line": 77,
        "comment": "  The JSDocInfo for this property. "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 67,
        "end_line": 67,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.call",
        "snippet": "  private ArrowType call;",
        "begin_line": 81,
        "end_line": 81,
        "comment": "\n   * {@code [[Call]]} property.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.prototypeSlot",
        "snippet": "  private Property prototypeSlot;",
        "begin_line": 92,
        "end_line": 92,
        "comment": "\n   * The {@code prototype} property. This field is lazily initialized by\n   * {@code #getPrototype()}. The most important reason for lazily\n   * initializing this field is that there are cycles in the native types\n   * graph, so some prototypes must temporarily be {@code null} during\n   * the construction of the graph.\n   *\n   * If non-null, the type must be a PrototypeObjectType.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.kind",
        "snippet": "  private final Kind kind;",
        "begin_line": 98,
        "end_line": 98,
        "comment": "\n   * Whether a function is a constructor, an interface, or just an ordinary\n   * function.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.propAccess",
        "snippet": "  private PropAccess propAccess;",
        "begin_line": 103,
        "end_line": 103,
        "comment": "\n   * Whether the instances are structs, dicts, or unrestricted.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.typeOfThis",
        "snippet": "  private JSType typeOfThis;",
        "begin_line": 108,
        "end_line": 108,
        "comment": "\n   * The type of {@code this} in the scope of this function.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.source",
        "snippet": "  private Node source;",
        "begin_line": 113,
        "end_line": 113,
        "comment": "\n   * The function node which this type represents. It may be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.implementedInterfaces",
        "snippet": "  private List<ObjectType> implementedInterfaces = ImmutableList.of();",
        "begin_line": 119,
        "end_line": 119,
        "comment": "\n   * The interfaces directly implemented by this function (for constructors)\n   * It is only relevant for constructors. May not be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.extendedInterfaces",
        "snippet": "  private List<ObjectType> extendedInterfaces = ImmutableList.of();",
        "begin_line": 125,
        "end_line": 125,
        "comment": "\n   * The interfaces directly extended by this function (for interfaces)\n   * It is only relevant for constructors. May not be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.subTypes",
        "snippet": "  private List<FunctionType> subTypes;",
        "begin_line": 131,
        "end_line": 131,
        "comment": "\n   * The types which are subtypes of this function. It is only relevant for\n   * constructors and may be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NoResolvedType",
        "src_path": "src/com/google/javascript/rhino/jstype/NoResolvedType.java",
        "signature": "com.google.javascript.rhino.jstype.NoResolvedType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.constructor",
        "snippet": "  private final FunctionType constructor;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.className",
        "snippet": "  private final String className;",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.properties",
        "snippet": "  private final PropertyMap properties;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.nativeType",
        "snippet": "  private final boolean nativeType;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.implicitPrototypeFallback",
        "snippet": "  private ObjectType implicitPrototypeFallback;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " some subclasses override this to do special resolution handling."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.ownerFunction",
        "snippet": "  private FunctionType ownerFunction = null;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " to do this for multiple functions, then we'll have to create a new one."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.prettyPrint",
        "snippet": "  private boolean prettyPrint = false;",
        "begin_line": 88,
        "end_line": 88,
        "comment": " by printing all properties."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.MAX_PRETTY_PRINTED_PROPERTIES",
        "snippet": "  private static final int MAX_PRETTY_PRINTED_PROPERTIES = 4;",
        "begin_line": 90,
        "end_line": 90,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 78,
        "end_line": 78,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.PROPERTY_CHECKING_UNION_SIZE",
        "snippet": "  private static final int PROPERTY_CHECKING_UNION_SIZE = 3000;",
        "begin_line": 87,
        "end_line": 87,
        "comment": "\n   * The UnionTypeBuilder caps the maximum number of alternate types it\n   * remembers and then defaults to \"?\" (unknown type). By default this max\n   * is 20, but it's very easy for the same property to appear on more than 20\n   * types. Use larger unions for property checking. 3000 was picked\n   * semi-randomly for use by the Google+ FE project.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.reporter",
        "snippet": "  private final transient ErrorReporter reporter;",
        "begin_line": 94,
        "end_line": 94,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.nativeTypes",
        "snippet": "  private final JSType[] nativeTypes;",
        "begin_line": 99,
        "end_line": 99,
        "comment": " CPU time on bounds checking inside get()."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.namesToTypes",
        "snippet": "  private final Map<String, JSType> namesToTypes;",
        "begin_line": 101,
        "end_line": 101,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.namespaces",
        "snippet": "  private final Set<String> namespaces = new HashSet<String>();",
        "begin_line": 104,
        "end_line": 104,
        "comment": " Set of namespaces in which types (or other namespaces) exist."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.nonNullableTypeNames",
        "snippet": "  private final Set<String> nonNullableTypeNames = new HashSet<String>();",
        "begin_line": 119,
        "end_line": 119,
        "comment": " nullable or not."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.forwardDeclaredTypes",
        "snippet": "  private final Set<String> forwardDeclaredTypes = new HashSet<String>();",
        "begin_line": 124,
        "end_line": 124,
        "comment": " try to type-check them at all."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.typesIndexedByProperty",
        "snippet": "  private final Map<String, UnionTypeBuilder> typesIndexedByProperty =\n      Maps.newHashMap();",
        "begin_line": 128,
        "end_line": 129,
        "comment": " declared."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.eachRefTypeIndexedByProperty",
        "snippet": "  private final Map<String, Map<String, ObjectType>>\n      eachRefTypeIndexedByProperty = Maps.newHashMap();",
        "begin_line": 134,
        "end_line": 135,
        "comment": " for de-duping."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.greatestSubtypeByProperty",
        "snippet": "  private final Map<String, JSType> greatestSubtypeByProperty =\n      Maps.newHashMap();",
        "begin_line": 140,
        "end_line": 141,
        "comment": " typesIndexedByProperty."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.interfaceToImplementors",
        "snippet": "  private final Multimap<String, FunctionType> interfaceToImplementors =\n      LinkedHashMultimap.create();",
        "begin_line": 144,
        "end_line": 145,
        "comment": " A map from interface name to types that implement it."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.unresolvedNamedTypes",
        "snippet": "  private final Multimap<StaticScope<JSType>, NamedType> unresolvedNamedTypes =\n      ArrayListMultimap.create();",
        "begin_line": 148,
        "end_line": 149,
        "comment": " All the unresolved named types."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.resolvedNamedTypes",
        "snippet": "  private final Multimap<StaticScope<JSType>, NamedType> resolvedNamedTypes =\n      ArrayListMultimap.create();",
        "begin_line": 152,
        "end_line": 153,
        "comment": " All the resolved named types."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.lastGeneration",
        "snippet": "  private boolean lastGeneration = true;",
        "begin_line": 156,
        "end_line": 156,
        "comment": " NamedType warns about unresolved types in the last generation."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.templateTypes",
        "snippet": "  private Map<String, TemplateType> templateTypes = Maps.newHashMap();",
        "begin_line": 159,
        "end_line": 159,
        "comment": " The template type name."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.tolerateUndefinedValues",
        "snippet": "  private final boolean tolerateUndefinedValues;",
        "begin_line": 161,
        "end_line": 161,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.resolveMode",
        "snippet": "  private ResolveMode resolveMode = ResolveMode.LAZY_NAMES;",
        "begin_line": 191,
        "end_line": 191,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.serialVersionUID",
        "snippet": "          private static final long serialVersionUID = 1L;",
        "begin_line": 524,
        "end_line": 524,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.StringType",
        "src_path": "src/com/google/javascript/rhino/jstype/StringType.java",
        "signature": "com.google.javascript.rhino.jstype.StringType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NamedType",
        "src_path": "src/com/google/javascript/rhino/jstype/NamedType.java",
        "signature": "com.google.javascript.rhino.jstype.NamedType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 83,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NamedType",
        "src_path": "src/com/google/javascript/rhino/jstype/NamedType.java",
        "signature": "com.google.javascript.rhino.jstype.NamedType.reference",
        "snippet": "  private final String reference;",
        "begin_line": 85,
        "end_line": 85,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NamedType",
        "src_path": "src/com/google/javascript/rhino/jstype/NamedType.java",
        "signature": "com.google.javascript.rhino.jstype.NamedType.sourceName",
        "snippet": "  private final String sourceName;",
        "begin_line": 86,
        "end_line": 86,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NamedType",
        "src_path": "src/com/google/javascript/rhino/jstype/NamedType.java",
        "signature": "com.google.javascript.rhino.jstype.NamedType.lineno",
        "snippet": "  private final int lineno;",
        "begin_line": 87,
        "end_line": 87,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NamedType",
        "src_path": "src/com/google/javascript/rhino/jstype/NamedType.java",
        "signature": "com.google.javascript.rhino.jstype.NamedType.charno",
        "snippet": "  private final int charno;",
        "begin_line": 88,
        "end_line": 88,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NamedType",
        "src_path": "src/com/google/javascript/rhino/jstype/NamedType.java",
        "signature": "com.google.javascript.rhino.jstype.NamedType.validator",
        "snippet": "  private Predicate<JSType> validator;",
        "begin_line": 93,
        "end_line": 93,
        "comment": "\n   * Validates the type resolution.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NamedType",
        "src_path": "src/com/google/javascript/rhino/jstype/NamedType.java",
        "signature": "com.google.javascript.rhino.jstype.NamedType.propertyContinuations",
        "snippet": "  private List<PropertyContinuation> propertyContinuations = null;",
        "begin_line": 98,
        "end_line": 98,
        "comment": "\n   * Property-defining continuations.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PropertyContinuation",
        "src_path": "src/com/google/javascript/rhino/jstype/NamedType.java",
        "signature": "com.google.javascript.rhino.jstype.PropertyContinuation.propertyName",
        "snippet": "    private final String propertyName;",
        "begin_line": 387,
        "end_line": 387,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PropertyContinuation",
        "src_path": "src/com/google/javascript/rhino/jstype/NamedType.java",
        "signature": "com.google.javascript.rhino.jstype.PropertyContinuation.type",
        "snippet": "    private final JSType type;",
        "begin_line": 388,
        "end_line": 388,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PropertyContinuation",
        "src_path": "src/com/google/javascript/rhino/jstype/NamedType.java",
        "signature": "com.google.javascript.rhino.jstype.PropertyContinuation.inferred",
        "snippet": "    private final boolean inferred;",
        "begin_line": 389,
        "end_line": 389,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PropertyContinuation",
        "src_path": "src/com/google/javascript/rhino/jstype/NamedType.java",
        "signature": "com.google.javascript.rhino.jstype.PropertyContinuation.propertyNode",
        "snippet": "    private final Node propertyNode;",
        "begin_line": 390,
        "end_line": 390,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnresolvedTypeExpression",
        "src_path": "src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java",
        "signature": "com.google.javascript.rhino.jstype.UnresolvedTypeExpression.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnresolvedTypeExpression",
        "src_path": "src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java",
        "signature": "com.google.javascript.rhino.jstype.UnresolvedTypeExpression.typeExpr",
        "snippet": "  private final Node typeExpr;",
        "begin_line": 61,
        "end_line": 61,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnresolvedTypeExpression",
        "src_path": "src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java",
        "signature": "com.google.javascript.rhino.jstype.UnresolvedTypeExpression.sourceName",
        "snippet": "  private final String sourceName;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.BooleanType",
        "src_path": "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "signature": "com.google.javascript.rhino.jstype.BooleanType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.parameters",
        "snippet": "  final Node parameters;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.returnType",
        "snippet": "  JSType returnType;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.returnTypeInferred",
        "snippet": "  final boolean returnTypeInferred;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " Whether the return type is inferred."
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInference",
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "signature": "com.google.javascript.jscomp.TypeInference.FUNCTION_LITERAL_UNDEFINED_THIS",
        "snippet": "  static final DiagnosticType FUNCTION_LITERAL_UNDEFINED_THIS =\n    DiagnosticType.warning(\n        \"JSC_FUNCTION_LITERAL_UNDEFINED_THIS\",\n        \"Function literal argument refers to undefined this argument\");",
        "begin_line": 68,
        "end_line": 71,
        "comment": " TODO(johnlenz): We no longer make this check, but we should."
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInference",
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "signature": "com.google.javascript.jscomp.TypeInference.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInference",
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "signature": "com.google.javascript.jscomp.TypeInference.registry",
        "snippet": "  private final JSTypeRegistry registry;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInference",
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "signature": "com.google.javascript.jscomp.TypeInference.reverseInterpreter",
        "snippet": "  private final ReverseAbstractInterpreter reverseInterpreter;",
        "begin_line": 75,
        "end_line": 75,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInference",
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "signature": "com.google.javascript.jscomp.TypeInference.syntacticScope",
        "snippet": "  private final Scope syntacticScope;",
        "begin_line": 76,
        "end_line": 76,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInference",
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "signature": "com.google.javascript.jscomp.TypeInference.functionScope",
        "snippet": "  private final FlowScope functionScope;",
        "begin_line": 77,
        "end_line": 77,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInference",
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "signature": "com.google.javascript.jscomp.TypeInference.bottomScope",
        "snippet": "  private final FlowScope bottomScope;",
        "begin_line": 78,
        "end_line": 78,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInference",
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "signature": "com.google.javascript.jscomp.TypeInference.assertionFunctionsMap",
        "snippet": "  private final Map<String, AssertionFunctionSpec> assertionFunctionsMap;",
        "begin_line": 79,
        "end_line": 79,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInference",
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "signature": "com.google.javascript.jscomp.TypeInference.unknownType",
        "snippet": "  private final ObjectType unknownType;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " For convenience"
    },
    {
        "class_name": "com.google.javascript.jscomp.TemplateTypeReplacer",
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "signature": "com.google.javascript.jscomp.TemplateTypeReplacer.replacements",
        "snippet": "    private final Map<TemplateType, JSType> replacements;",
        "begin_line": 1153,
        "end_line": 1153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TemplateTypeReplacer",
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "signature": "com.google.javascript.jscomp.TemplateTypeReplacer.registry",
        "snippet": "    private final JSTypeRegistry registry;",
        "begin_line": 1154,
        "end_line": 1154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TemplateTypeReplacer",
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "signature": "com.google.javascript.jscomp.TemplateTypeReplacer.madeChanges",
        "snippet": "    boolean madeChanges = false;",
        "begin_line": 1155,
        "end_line": 1155,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BooleanOutcomePair",
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "signature": "com.google.javascript.jscomp.BooleanOutcomePair.toBooleanOutcomes",
        "snippet": "    final BooleanLiteralSet toBooleanOutcomes;",
        "begin_line": 1478,
        "end_line": 1478,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BooleanOutcomePair",
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "signature": "com.google.javascript.jscomp.BooleanOutcomePair.booleanValues",
        "snippet": "    final BooleanLiteralSet booleanValues;",
        "begin_line": 1479,
        "end_line": 1479,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BooleanOutcomePair",
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "signature": "com.google.javascript.jscomp.BooleanOutcomePair.leftScope",
        "snippet": "    final FlowScope leftScope;",
        "begin_line": 1482,
        "end_line": 1482,
        "comment": " The scope if only half of the expression executed, when applicable."
    },
    {
        "class_name": "com.google.javascript.jscomp.BooleanOutcomePair",
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "signature": "com.google.javascript.jscomp.BooleanOutcomePair.rightScope",
        "snippet": "    final FlowScope rightScope;",
        "begin_line": 1485,
        "end_line": 1485,
        "comment": " The scope when the whole expression executed."
    },
    {
        "class_name": "com.google.javascript.jscomp.BooleanOutcomePair",
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "signature": "com.google.javascript.jscomp.BooleanOutcomePair.joinedScope",
        "snippet": "    FlowScope joinedScope = null;",
        "begin_line": 1488,
        "end_line": 1488,
        "comment": " The scope when we don't know how much of the expression is executed."
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineProperties",
        "src_path": "src/com/google/javascript/jscomp/InlineProperties.java",
        "signature": "com.google.javascript.jscomp.InlineProperties.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PropertyInfo",
        "src_path": "src/com/google/javascript/jscomp/InlineProperties.java",
        "signature": "com.google.javascript.jscomp.PropertyInfo.type",
        "snippet": "    final JSType type;",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PropertyInfo",
        "src_path": "src/com/google/javascript/jscomp/InlineProperties.java",
        "signature": "com.google.javascript.jscomp.PropertyInfo.value",
        "snippet": "    final Node value;",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineProperties",
        "src_path": "src/com/google/javascript/jscomp/InlineProperties.java",
        "signature": "com.google.javascript.jscomp.InlineProperties.INVALIDATED",
        "snippet": "  private static final PropertyInfo INVALIDATED = new PropertyInfo(\n      null, null);",
        "begin_line": 63,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineProperties",
        "src_path": "src/com/google/javascript/jscomp/InlineProperties.java",
        "signature": "com.google.javascript.jscomp.InlineProperties.props",
        "snippet": "  private final Map<String, PropertyInfo> props = Maps.newHashMap();",
        "begin_line": 66,
        "end_line": 66,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineProperties",
        "src_path": "src/com/google/javascript/jscomp/InlineProperties.java",
        "signature": "com.google.javascript.jscomp.InlineProperties.invalidatingTypes",
        "snippet": "  private Set<JSType> invalidatingTypes;",
        "begin_line": 68,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.OUTPUT_SAME_AS_INPUT_ERROR",
        "snippet": "  static final DiagnosticType OUTPUT_SAME_AS_INPUT_ERROR = DiagnosticType.error(\n      \"JSC_OUTPUT_SAME_AS_INPUT_ERROR\",\n      \"Bad output file (already listed as input file): {0}\");",
        "begin_line": 98,
        "end_line": 100,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.config",
        "snippet": "  private final CommandLineConfig config;",
        "begin_line": 102,
        "end_line": 102,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.jsOutput",
        "snippet": "  private Appendable jsOutput;",
        "begin_line": 104,
        "end_line": 104,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.err",
        "snippet": "  private final PrintStream err;",
        "begin_line": 105,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.compiler",
        "snippet": "  private A compiler;",
        "begin_line": 106,
        "end_line": 106,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.inputCharset",
        "snippet": "  private Charset inputCharset;",
        "begin_line": 108,
        "end_line": 108,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.outputCharset2",
        "snippet": "  private Charset outputCharset2;",
        "begin_line": 117,
        "end_line": 117,
        "comment": " designed this if I had a time machine."
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.legacyOutputCharset",
        "snippet": "  private String legacyOutputCharset;",
        "begin_line": 118,
        "end_line": 118,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.testMode",
        "snippet": "  private boolean testMode = false;",
        "begin_line": 120,
        "end_line": 120,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.externsSupplierForTesting",
        "snippet": "  private Supplier<List<SourceFile>> externsSupplierForTesting = null;",
        "begin_line": 121,
        "end_line": 121,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.inputsSupplierForTesting",
        "snippet": "  private Supplier<List<SourceFile>> inputsSupplierForTesting = null;",
        "begin_line": 122,
        "end_line": 122,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.modulesSupplierForTesting",
        "snippet": "  private Supplier<List<JSModule>> modulesSupplierForTesting = null;",
        "begin_line": 123,
        "end_line": 123,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.exitCodeReceiverForTesting",
        "snippet": "  private Function<Integer, Boolean> exitCodeReceiverForTesting = null;",
        "begin_line": 124,
        "end_line": 124,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.rootRelativePathsMap",
        "snippet": "  private Map<String, String> rootRelativePathsMap = null;",
        "begin_line": 125,
        "end_line": 125,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.parsedModuleWrappers",
        "snippet": "  private Map<String, String> parsedModuleWrappers = null;",
        "begin_line": 127,
        "end_line": 127,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER",
        "snippet": "  private static final int NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER = 100;",
        "begin_line": 130,
        "end_line": 130,
        "comment": " Bookkeeping to measure optimal phase orderings."
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.OUTPUT_MARKER",
        "snippet": "  private static final String OUTPUT_MARKER = \"%output%\";",
        "begin_line": 132,
        "end_line": 132,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.OUTPUT_MARKER_JS_STRING",
        "snippet": "  private static final String OUTPUT_MARKER_JS_STRING = \"%output|jsstring%\";",
        "begin_line": 133,
        "end_line": 133,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.runTimeStats",
        "snippet": "  private final RunTimeStats runTimeStats = new RunTimeStats();",
        "begin_line": 135,
        "end_line": 135,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FlagUsageException",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.FlagUsageException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 426,
        "end_line": 426,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RunTimeStats",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.RunTimeStats.bestRunTime",
        "snippet": "    private long bestRunTime = Long.MAX_VALUE;",
        "begin_line": 1541,
        "end_line": 1541,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RunTimeStats",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.RunTimeStats.worstRunTime",
        "snippet": "    private long worstRunTime = Long.MIN_VALUE;",
        "begin_line": 1542,
        "end_line": 1542,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RunTimeStats",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.RunTimeStats.lastStartTime",
        "snippet": "    private long lastStartTime = 0;",
        "begin_line": 1543,
        "end_line": 1543,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RunTimeStats",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.RunTimeStats.loopedPassesInBestRun",
        "snippet": "    private List<List<String>> loopedPassesInBestRun = null;",
        "begin_line": 1544,
        "end_line": 1544,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.printTree",
        "snippet": "    private boolean printTree = false;",
        "begin_line": 1596,
        "end_line": 1596,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.computePhaseOrdering",
        "snippet": "    private boolean computePhaseOrdering = false;",
        "begin_line": 1604,
        "end_line": 1604,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.printAst",
        "snippet": "    private boolean printAst = false;",
        "begin_line": 1615,
        "end_line": 1615,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.printPassGraph",
        "snippet": "    private boolean printPassGraph = false;",
        "begin_line": 1626,
        "end_line": 1626,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.jscompDevMode",
        "snippet": "    private CompilerOptions.DevMode jscompDevMode = CompilerOptions.DevMode.OFF;",
        "begin_line": 1634,
        "end_line": 1634,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.loggingLevel",
        "snippet": "    private String loggingLevel = Level.WARNING.getName();",
        "begin_line": 1642,
        "end_line": 1642,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.externs",
        "snippet": "    private final List<String> externs = Lists.newArrayList();",
        "begin_line": 1654,
        "end_line": 1654,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.js",
        "snippet": "    private final List<String> js = Lists.newArrayList();",
        "begin_line": 1665,
        "end_line": 1665,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.jsOutputFile",
        "snippet": "    private String jsOutputFile = \"\";",
        "begin_line": 1676,
        "end_line": 1676,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.module",
        "snippet": "    private final List<String> module = Lists.newArrayList();",
        "begin_line": 1686,
        "end_line": 1686,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.variableMapInputFile",
        "snippet": "    private String variableMapInputFile = \"\";",
        "begin_line": 1702,
        "end_line": 1702,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.propertyMapInputFile",
        "snippet": "    private String propertyMapInputFile = \"\";",
        "begin_line": 1713,
        "end_line": 1713,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.variableMapOutputFile",
        "snippet": "    private String variableMapOutputFile = \"\";",
        "begin_line": 1724,
        "end_line": 1724,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.createNameMapFiles",
        "snippet": "    private boolean createNameMapFiles = false;",
        "begin_line": 1735,
        "end_line": 1735,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.propertyMapOutputFile",
        "snippet": "    private String propertyMapOutputFile = \"\";",
        "begin_line": 1749,
        "end_line": 1749,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.codingConvention",
        "snippet": "    private CodingConvention codingConvention = CodingConventions.getDefault();",
        "begin_line": 1760,
        "end_line": 1760,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.summaryDetailLevel",
        "snippet": "    private int summaryDetailLevel = 1;",
        "begin_line": 1770,
        "end_line": 1770,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.outputWrapper",
        "snippet": "    private String outputWrapper = \"\";",
        "begin_line": 1784,
        "end_line": 1784,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.moduleWrapper",
        "snippet": "    private final List<String> moduleWrapper = Lists.newArrayList();",
        "begin_line": 1795,
        "end_line": 1795,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.moduleOutputPathPrefix",
        "snippet": "    private String moduleOutputPathPrefix = \"\";",
        "begin_line": 1807,
        "end_line": 1807,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.createSourceMap",
        "snippet": "    private String createSourceMap = \"\";",
        "begin_line": 1819,
        "end_line": 1819,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.sourceMapDetailLevel",
        "snippet": "    private SourceMap.DetailLevel sourceMapDetailLevel =\n        SourceMap.DetailLevel.ALL;",
        "begin_line": 1833,
        "end_line": 1834,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.sourceMapFormat",
        "snippet": "    private SourceMap.Format sourceMapFormat =\n      SourceMap.Format.DEFAULT;",
        "begin_line": 1844,
        "end_line": 1845,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.warningGuards",
        "snippet": "    private WarningGuardSpec warningGuards = null;",
        "begin_line": 1855,
        "end_line": 1855,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.define",
        "snippet": "    private final List<String> define = Lists.newArrayList();",
        "begin_line": 1865,
        "end_line": 1865,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.tweak",
        "snippet": "    private final List<String> tweak = Lists.newArrayList();",
        "begin_line": 1880,
        "end_line": 1880,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.tweakProcessing",
        "snippet": "    private TweakProcessing tweakProcessing = TweakProcessing.OFF;",
        "begin_line": 1894,
        "end_line": 1894,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.charset",
        "snippet": "    private String charset = \"\";",
        "begin_line": 1904,
        "end_line": 1904,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.manageClosureDependencies",
        "snippet": "    private boolean manageClosureDependencies = false;",
        "begin_line": 1914,
        "end_line": 1914,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.onlyClosureDependencies",
        "snippet": "    private boolean onlyClosureDependencies = false;",
        "begin_line": 1925,
        "end_line": 1925,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.closureEntryPoints",
        "snippet": "    private List<String> closureEntryPoints = ImmutableList.of();",
        "begin_line": 1937,
        "end_line": 1937,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.outputManifests",
        "snippet": "    private List<String> outputManifests = ImmutableList.of();",
        "begin_line": 1949,
        "end_line": 1949,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.outputModuleDependencies",
        "snippet": "    private String outputModuleDependencies = null;",
        "begin_line": 1966,
        "end_line": 1966,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.outputBundles",
        "snippet": "    private List<String> outputBundles = ImmutableList.of();",
        "begin_line": 1978,
        "end_line": 1978,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.acceptConstKeyword",
        "snippet": "    private boolean acceptConstKeyword = false;",
        "begin_line": 1988,
        "end_line": 1988,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.languageIn",
        "snippet": "    private String languageIn = \"\";",
        "begin_line": 1998,
        "end_line": 1998,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.skipNormalOutputs",
        "snippet": "    private boolean skipNormalOutputs = false;",
        "begin_line": 2009,
        "end_line": 2009,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.manifestMaps",
        "snippet": "    private List<String> manifestMaps = ImmutableList.of();",
        "begin_line": 2019,
        "end_line": 2019,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.transformAMDToCJSModules",
        "snippet": "    private boolean transformAMDToCJSModules = false;",
        "begin_line": 2030,
        "end_line": 2030,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.processCommonJSModules",
        "snippet": "    private boolean processCommonJSModules = false;",
        "begin_line": 2041,
        "end_line": 2041,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.commonJSModulePathPrefix",
        "snippet": "    private String commonJSModulePathPrefix =\n        ProcessCommonJSModules.DEFAULT_FILENAME_PREFIX;",
        "begin_line": 2053,
        "end_line": 2054,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.warningsWhitelistFile",
        "snippet": "    private String warningsWhitelistFile = \"\";",
        "begin_line": 2065,
        "end_line": 2065,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Entry",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Entry.level",
        "snippet": "      private final CheckLevel level;",
        "begin_line": 2082,
        "end_line": 2082,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Entry",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Entry.groupName",
        "snippet": "      private final String groupName;",
        "begin_line": 2083,
        "end_line": 2083,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.WarningGuardSpec",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.WarningGuardSpec.entries",
        "snippet": "    private final List<Entry> entries = Lists.newArrayList();",
        "begin_line": 2092,
        "end_line": 2092,
        "comment": " The entries, in the order that they were added."
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferencePass",
        "src_path": "src/com/google/javascript/jscomp/TypeInferencePass.java",
        "signature": "com.google.javascript.jscomp.TypeInferencePass.DATAFLOW_ERROR",
        "snippet": "  static final DiagnosticType DATAFLOW_ERROR = DiagnosticType.warning(\n      \"JSC_INTERNAL_ERROR_DATAFLOW\",\n      \"non-monotonic data-flow analysis\");",
        "begin_line": 34,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferencePass",
        "src_path": "src/com/google/javascript/jscomp/TypeInferencePass.java",
        "signature": "com.google.javascript.jscomp.TypeInferencePass.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 38,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferencePass",
        "src_path": "src/com/google/javascript/jscomp/TypeInferencePass.java",
        "signature": "com.google.javascript.jscomp.TypeInferencePass.reverseInterpreter",
        "snippet": "  private final ReverseAbstractInterpreter reverseInterpreter;",
        "begin_line": 39,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferencePass",
        "src_path": "src/com/google/javascript/jscomp/TypeInferencePass.java",
        "signature": "com.google.javascript.jscomp.TypeInferencePass.topScope",
        "snippet": "  private Scope topScope;",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferencePass",
        "src_path": "src/com/google/javascript/jscomp/TypeInferencePass.java",
        "signature": "com.google.javascript.jscomp.TypeInferencePass.scopeCreator",
        "snippet": "  private MemoizedScopeCreator scopeCreator;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferencePass",
        "src_path": "src/com/google/javascript/jscomp/TypeInferencePass.java",
        "signature": "com.google.javascript.jscomp.TypeInferencePass.assertionFunctionsMap",
        "snippet": "  private final Map<String, AssertionFunctionSpec> assertionFunctionsMap;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExportTestFunctions",
        "src_path": "src/com/google/javascript/jscomp/ExportTestFunctions.java",
        "signature": "com.google.javascript.jscomp.ExportTestFunctions.TEST_FUNCTIONS_NAME_PATTERN",
        "snippet": "  private static final Pattern TEST_FUNCTIONS_NAME_PATTERN =\n      Pattern.compile(\"^(?:((\\\\w+\\\\.)+prototype\\\\.)*\" +\n                      \"(setUpPage|setUp|tearDown|tearDownPage|test\\\\w+))$\");",
        "begin_line": 30,
        "end_line": 32,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExportTestFunctions",
        "src_path": "src/com/google/javascript/jscomp/ExportTestFunctions.java",
        "signature": "com.google.javascript.jscomp.ExportTestFunctions.compiler",
        "snippet": "  private AbstractCompiler compiler;",
        "begin_line": 34,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExportTestFunctions",
        "src_path": "src/com/google/javascript/jscomp/ExportTestFunctions.java",
        "signature": "com.google.javascript.jscomp.ExportTestFunctions.exportSymbolFunction",
        "snippet": "  private final String exportSymbolFunction;",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExportTestFunctions",
        "src_path": "src/com/google/javascript/jscomp/ExportTestFunctions.java",
        "signature": "com.google.javascript.jscomp.ExportTestFunctions.exportPropertyFunction",
        "snippet": "  private final String exportPropertyFunction;",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.ProcessDefines.KNOWN_DEFINES",
        "snippet": "  private static final Set<String> KNOWN_DEFINES =\n      Sets.newHashSet(\"COMPILED\");",
        "begin_line": 54,
        "end_line": 55,
        "comment": "\n   * Defines in this set will not be flagged with \"unknown define\" warnings.\n   * There are legacy flags that always set these defines, even when they\n   * might not be in the binary.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.ProcessDefines.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.ProcessDefines.dominantReplacements",
        "snippet": "  private final Map<String, Node> dominantReplacements;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.ProcessDefines.namespace",
        "snippet": "  private GlobalNamespace namespace = null;",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.ProcessDefines.UNKNOWN_DEFINE_WARNING",
        "snippet": "  static final DiagnosticType UNKNOWN_DEFINE_WARNING = DiagnosticType.warning(\n      \"JSC_UNKNOWN_DEFINE_WARNING\",\n      \"unknown @define variable {0}\");",
        "begin_line": 63,
        "end_line": 65,
        "comment": " Warnings"
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.ProcessDefines.INVALID_DEFINE_TYPE_ERROR",
        "snippet": "  static final DiagnosticType INVALID_DEFINE_TYPE_ERROR =\n    DiagnosticType.error(\n        \"JSC_INVALID_DEFINE_TYPE_ERROR\",\n        \"@define tag only permits literal types\");",
        "begin_line": 68,
        "end_line": 71,
        "comment": " Errors"
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.ProcessDefines.INVALID_DEFINE_INIT_ERROR",
        "snippet": "  static final DiagnosticType INVALID_DEFINE_INIT_ERROR =\n      DiagnosticType.error(\n          \"JSC_INVALID_DEFINE_INIT_ERROR\",\n          \"illegal initialization of @define variable {0}\");",
        "begin_line": 73,
        "end_line": 76,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.ProcessDefines.NON_GLOBAL_DEFINE_INIT_ERROR",
        "snippet": "  static final DiagnosticType NON_GLOBAL_DEFINE_INIT_ERROR =\n      DiagnosticType.error(\n          \"JSC_NON_GLOBAL_DEFINE_INIT_ERROR\",\n          \"@define variable {0} assignment must be global\");",
        "begin_line": 78,
        "end_line": 81,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.ProcessDefines.DEFINE_NOT_ASSIGNABLE_ERROR",
        "snippet": "  static final DiagnosticType DEFINE_NOT_ASSIGNABLE_ERROR =\n      DiagnosticType.error(\n          \"JSC_DEFINE_NOT_ASSIGNABLE_ERROR\",\n          \"@define variable {0} cannot be reassigned due to code at {1}.\");",
        "begin_line": 83,
        "end_line": 86,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.ProcessDefines.REASON_DEFINE_NOT_ASSIGNABLE",
        "snippet": "  private static final MessageFormat REASON_DEFINE_NOT_ASSIGNABLE =\n      new MessageFormat(\"line {0} of {1}\");",
        "begin_line": 88,
        "end_line": 89,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CollectDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.CollectDefines.compiler",
        "snippet": "    private final AbstractCompiler compiler;",
        "begin_line": 223,
        "end_line": 223,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CollectDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.CollectDefines.assignableDefines",
        "snippet": "    private final Map<String, DefineInfo> assignableDefines;",
        "begin_line": 224,
        "end_line": 224,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CollectDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.CollectDefines.allDefines",
        "snippet": "    private final Map<String, DefineInfo> allDefines;",
        "begin_line": 225,
        "end_line": 225,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CollectDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.CollectDefines.allRefInfo",
        "snippet": "    private final Map<Node, RefInfo> allRefInfo;",
        "begin_line": 226,
        "end_line": 226,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CollectDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.CollectDefines.lvalueToRemoveLater",
        "snippet": "    private Node lvalueToRemoveLater = null;",
        "begin_line": 230,
        "end_line": 230,
        "comment": " we're currently visiting one of the children of the assign."
    },
    {
        "class_name": "com.google.javascript.jscomp.CollectDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.CollectDefines.assignAllowed",
        "snippet": "    private final Deque<Integer> assignAllowed;",
        "begin_line": 235,
        "end_line": 235,
        "comment": " a define is allowed. Otherwise, it's not allowed."
    },
    {
        "class_name": "com.google.javascript.jscomp.RefInfo",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.RefInfo.ref",
        "snippet": "      final Ref ref;",
        "begin_line": 477,
        "end_line": 477,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RefInfo",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.RefInfo.name",
        "snippet": "      final Name name;",
        "begin_line": 478,
        "end_line": 478,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefineInfo",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.DefineInfo.initialValueParent",
        "snippet": "    public final Node initialValueParent;",
        "begin_line": 493,
        "end_line": 493,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefineInfo",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.DefineInfo.initialValue",
        "snippet": "    public final Node initialValue;",
        "begin_line": 494,
        "end_line": 494,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefineInfo",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.DefineInfo.lastValue",
        "snippet": "    private Node lastValue;",
        "begin_line": 495,
        "end_line": 495,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefineInfo",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.DefineInfo.isAssignable",
        "snippet": "    private boolean isAssignable;",
        "begin_line": 496,
        "end_line": 496,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefineInfo",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.DefineInfo.reasonNotAssignable",
        "snippet": "    private String reasonNotAssignable;",
        "begin_line": 497,
        "end_line": 497,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.vars",
        "snippet": "  private final Map<String, Var> vars = new LinkedHashMap<String, Var>();",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.parent",
        "snippet": "  private final Scope parent;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.depth",
        "snippet": "  private final int depth;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.rootNode",
        "snippet": "  private final Node rootNode;",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.isBottom",
        "snippet": "  private final boolean isBottom;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " Whether this is a bottom scope for the purposes of type inference. "
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.arguments",
        "snippet": "  private Var arguments;",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES",
        "snippet": "  private static final Predicate<Var> DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES =\n      new Predicate<Var>() {\n    @Override public boolean apply(Var var) {\n      return var.getParentNode() != null &&\n          var.getType() == null && // no declared type\n          var.getParentNode().isVar() &&\n          !var.isExtern();\n    }\n  };",
        "begin_line": 66,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.name",
        "snippet": "    final String name;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " name "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.nameNode",
        "snippet": "    final Node nameNode;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " Var node "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.type",
        "snippet": "    private JSType type;",
        "begin_line": 88,
        "end_line": 88,
        "comment": "\n     * The variable's type.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.typeInferred",
        "snippet": "    private final boolean typeInferred;",
        "begin_line": 95,
        "end_line": 95,
        "comment": "\n     * Whether the variable's type has been inferred or is declared. An inferred\n     * type may change over time (as more code is discovered), whereas a\n     * declared type is a static contract that must be matched.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.input",
        "snippet": "    final CompilerInput input;",
        "begin_line": 98,
        "end_line": 98,
        "comment": " Input source "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.index",
        "snippet": "    final int index;",
        "begin_line": 104,
        "end_line": 104,
        "comment": "\n     * The index at which the var is declared. e..g if it's 0, it's the first\n     * declared variable in that scope\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.scope",
        "snippet": "    final Scope scope;",
        "begin_line": 107,
        "end_line": 107,
        "comment": " The enclosing scope "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.markedEscaped",
        "snippet": "    private boolean markedEscaped = false;",
        "begin_line": 110,
        "end_line": 110,
        "comment": " @see #isMarkedEscaped "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.markedAssignedExactlyOnce",
        "snippet": "    private boolean markedAssignedExactlyOnce = false;",
        "begin_line": 113,
        "end_line": 113,
        "comment": " @see #isMarkedAssignedExactlyOnce "
    },
    {
        "class_name": "com.google.javascript.jscomp.Denormalize",
        "src_path": "src/com/google/javascript/jscomp/Denormalize.java",
        "signature": "com.google.javascript.jscomp.Denormalize.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StripConstantAnnotations",
        "src_path": "src/com/google/javascript/jscomp/Denormalize.java",
        "signature": "com.google.javascript.jscomp.StripConstantAnnotations.compiler",
        "snippet": "    private AbstractCompiler compiler;",
        "begin_line": 132,
        "end_line": 132,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SimpleFunctionAliasAnalysis",
        "src_path": "src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java",
        "signature": "com.google.javascript.jscomp.SimpleFunctionAliasAnalysis.aliasedFunctions",
        "snippet": "  private Set<Node> aliasedFunctions;",
        "begin_line": 33,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SimpleFunctionAliasAnalysis",
        "src_path": "src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java",
        "signature": "com.google.javascript.jscomp.SimpleFunctionAliasAnalysis.functionsExposedToCallOrApply",
        "snippet": "  private Set<Node> functionsExposedToCallOrApply;",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineSimpleMethods",
        "src_path": "src/com/google/javascript/jscomp/InlineSimpleMethods.java",
        "signature": "com.google.javascript.jscomp.InlineSimpleMethods.logger",
        "snippet": "  private static final Logger logger =\n      Logger.getLogger(InlineSimpleMethods.class.getName());",
        "begin_line": 54,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineSimpleMethods",
        "src_path": "src/com/google/javascript/jscomp/InlineSimpleMethods.java",
        "signature": "com.google.javascript.jscomp.InlineSimpleMethods.DUMMY_SIGNATURE_STORE",
        "snippet": "  static final MethodCompilerPass.SignatureStore DUMMY_SIGNATURE_STORE =\n      new MethodCompilerPass.SignatureStore() {\n        @Override\n        public void addSignature(\n            String functionName, Node functionNode, String sourceFile) {\n        }\n\n        @Override\n        public void removeSignature(String functionName) {\n        }\n\n        @Override\n        public void reset() {\n        }\n      };",
        "begin_line": 283,
        "end_line": 297,
        "comment": "\n   * A do-nothing signature store.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceMessages",
        "src_path": "src/com/google/javascript/jscomp/ReplaceMessages.java",
        "signature": "com.google.javascript.jscomp.ReplaceMessages.bundle",
        "snippet": "  private final MessageBundle bundle;",
        "begin_line": 33,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceMessages",
        "src_path": "src/com/google/javascript/jscomp/ReplaceMessages.java",
        "signature": "com.google.javascript.jscomp.ReplaceMessages.strictReplacement",
        "snippet": "  private final boolean strictReplacement;",
        "begin_line": 34,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceMessages",
        "src_path": "src/com/google/javascript/jscomp/ReplaceMessages.java",
        "signature": "com.google.javascript.jscomp.ReplaceMessages.BUNDLE_DOES_NOT_HAVE_THE_MESSAGE",
        "snippet": "  static final DiagnosticType BUNDLE_DOES_NOT_HAVE_THE_MESSAGE =\n      DiagnosticType.error(\"JSC_BUNDLE_DOES_NOT_HAVE_THE_MESSAGE\",\n          \"Message with id = {0} could not be found in replacement bundle\");",
        "begin_line": 36,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionArgumentInjector",
        "src_path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java",
        "signature": "com.google.javascript.jscomp.FunctionArgumentInjector.THIS_MARKER",
        "snippet": "  static final String THIS_MARKER = \"this\";",
        "begin_line": 41,
        "end_line": 41,
        "comment": " identifier can be used, so we use \"this\"."
    },
    {
        "class_name": "com.google.javascript.jscomp.ReferencedAfterSideEffect",
        "src_path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java",
        "signature": "com.google.javascript.jscomp.ReferencedAfterSideEffect.parameters",
        "snippet": "    private final Set<String> parameters;",
        "begin_line": 363,
        "end_line": 363,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReferencedAfterSideEffect",
        "src_path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java",
        "signature": "com.google.javascript.jscomp.ReferencedAfterSideEffect.locals",
        "snippet": "    private final Set<String> locals;",
        "begin_line": 364,
        "end_line": 364,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReferencedAfterSideEffect",
        "src_path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java",
        "signature": "com.google.javascript.jscomp.ReferencedAfterSideEffect.sideEffectSeen",
        "snippet": "    private boolean sideEffectSeen = false;",
        "begin_line": 365,
        "end_line": 365,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReferencedAfterSideEffect",
        "src_path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java",
        "signature": "com.google.javascript.jscomp.ReferencedAfterSideEffect.parametersReferenced",
        "snippet": "    private Set<String> parametersReferenced = Sets.newHashSet();",
        "begin_line": 366,
        "end_line": 366,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReferencedAfterSideEffect",
        "src_path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java",
        "signature": "com.google.javascript.jscomp.ReferencedAfterSideEffect.loopsEntered",
        "snippet": "    private int loopsEntered = 0;",
        "begin_line": 367,
        "end_line": 367,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JSError",
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "signature": "com.google.javascript.jscomp.JSError.type",
        "snippet": "  private final DiagnosticType type;",
        "begin_line": 28,
        "end_line": 28,
        "comment": " A type of the error "
    },
    {
        "class_name": "com.google.javascript.jscomp.JSError",
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "signature": "com.google.javascript.jscomp.JSError.description",
        "snippet": "  public final String description;",
        "begin_line": 31,
        "end_line": 31,
        "comment": " Description of the error "
    },
    {
        "class_name": "com.google.javascript.jscomp.JSError",
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "signature": "com.google.javascript.jscomp.JSError.sourceName",
        "snippet": "  public final String sourceName;",
        "begin_line": 34,
        "end_line": 34,
        "comment": " Name of the source "
    },
    {
        "class_name": "com.google.javascript.jscomp.JSError",
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "signature": "com.google.javascript.jscomp.JSError.node",
        "snippet": "  final Node node;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " Node where the warning occurred. "
    },
    {
        "class_name": "com.google.javascript.jscomp.JSError",
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "signature": "com.google.javascript.jscomp.JSError.lineNumber",
        "snippet": "  public final int lineNumber;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Line number of the source "
    },
    {
        "class_name": "com.google.javascript.jscomp.JSError",
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "signature": "com.google.javascript.jscomp.JSError.level",
        "snippet": "  @Deprecated\n  public final CheckLevel level;",
        "begin_line": 43,
        "end_line": 44,
        "comment": " @deprecated Use #getDefaultLevel "
    },
    {
        "class_name": "com.google.javascript.jscomp.JSError",
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "signature": "com.google.javascript.jscomp.JSError.defaultLevel",
        "snippet": "  private final CheckLevel defaultLevel;",
        "begin_line": 46,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JSError",
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "signature": "com.google.javascript.jscomp.JSError.charno",
        "snippet": "  private final int charno;",
        "begin_line": 49,
        "end_line": 49,
        "comment": " character number"
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineCostEstimator",
        "src_path": "src/com/google/javascript/jscomp/InlineCostEstimator.java",
        "signature": "com.google.javascript.jscomp.InlineCostEstimator.ESTIMATED_IDENTIFIER",
        "snippet": "  private static final String ESTIMATED_IDENTIFIER = \"ab\";",
        "begin_line": 29,
        "end_line": 29,
        "comment": " For now simply assume identifiers are 2 characters."
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineCostEstimator",
        "src_path": "src/com/google/javascript/jscomp/InlineCostEstimator.java",
        "signature": "com.google.javascript.jscomp.InlineCostEstimator.ESTIMATED_IDENTIFIER_COST",
        "snippet": "  static final int ESTIMATED_IDENTIFIER_COST = ESTIMATED_IDENTIFIER.length();",
        "begin_line": 30,
        "end_line": 30,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompiledSizeEstimator",
        "src_path": "src/com/google/javascript/jscomp/InlineCostEstimator.java",
        "signature": "com.google.javascript.jscomp.CompiledSizeEstimator.maxCost",
        "snippet": "    private int maxCost;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompiledSizeEstimator",
        "src_path": "src/com/google/javascript/jscomp/InlineCostEstimator.java",
        "signature": "com.google.javascript.jscomp.CompiledSizeEstimator.cost",
        "snippet": "    private int cost = 0;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompiledSizeEstimator",
        "src_path": "src/com/google/javascript/jscomp/InlineCostEstimator.java",
        "signature": "com.google.javascript.jscomp.CompiledSizeEstimator.last",
        "snippet": "    private char last = '\\0';",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompiledSizeEstimator",
        "src_path": "src/com/google/javascript/jscomp/InlineCostEstimator.java",
        "signature": "com.google.javascript.jscomp.CompiledSizeEstimator.continueProcessing",
        "snippet": "    private boolean continueProcessing = true;",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.UseSite",
        "src_path": "src/com/google/javascript/jscomp/UseSite.java",
        "signature": "com.google.javascript.jscomp.UseSite.node",
        "snippet": "  final Node node;",
        "begin_line": 29,
        "end_line": 29,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.UseSite",
        "src_path": "src/com/google/javascript/jscomp/UseSite.java",
        "signature": "com.google.javascript.jscomp.UseSite.scope",
        "snippet": "  final Scope scope;",
        "begin_line": 30,
        "end_line": 30,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.UseSite",
        "src_path": "src/com/google/javascript/jscomp/UseSite.java",
        "signature": "com.google.javascript.jscomp.UseSite.module",
        "snippet": "  final JSModule module;",
        "begin_line": 31,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.callbacks",
        "snippet": "  private final CallbackWrapper[] callbacks;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " The callbacks that this pass combines. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CallbackWrapper",
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "signature": "com.google.javascript.jscomp.CallbackWrapper.callback",
        "snippet": "    private final Callback callback;",
        "begin_line": 94,
        "end_line": 94,
        "comment": " The callback being wrapped. Never null. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CallbackWrapper",
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "signature": "com.google.javascript.jscomp.CallbackWrapper.scopedCallback",
        "snippet": "    private final ScopedCallback scopedCallback;",
        "begin_line": 99,
        "end_line": 99,
        "comment": "\n     * if (callback instanceof ScopedCallback), then scopedCallback points\n     * to an instance of ScopedCallback, otherwise scopedCallback points to null\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.CallbackWrapper",
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "signature": "com.google.javascript.jscomp.CallbackWrapper.waiting",
        "snippet": "    private Node waiting = null;",
        "begin_line": 106,
        "end_line": 106,
        "comment": "\n     * The node that {@link Callback#shouldTraverse(NodeTraversal, Node, Node)}\n     * returned false for. The wrapped callback doesn't receive messages until\n     * after this node is revisited in the post-order traversal.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.JSSourceFile",
        "src_path": "src/com/google/javascript/jscomp/JSSourceFile.java",
        "signature": "com.google.javascript.jscomp.JSSourceFile.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JSSourceFile",
        "src_path": "src/com/google/javascript/jscomp/JSSourceFile.java",
        "signature": "com.google.javascript.jscomp.JSSourceFile.referenced",
        "snippet": "  private SourceFile referenced;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckDebuggerStatement",
        "src_path": "src/com/google/javascript/jscomp/CheckDebuggerStatement.java",
        "signature": "com.google.javascript.jscomp.CheckDebuggerStatement.DEBUGGER_STATEMENT_PRESENT",
        "snippet": "  static final DiagnosticType DEBUGGER_STATEMENT_PRESENT =\n    DiagnosticType.disabled(\"JSC_DEBUGGER_STATEMENT_PRESENT\",\n        \"Using the debugger statement can halt your application if the user \" +\n        \"has a JavaScript debugger running.\");",
        "begin_line": 33,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckDebuggerStatement",
        "src_path": "src/com/google/javascript/jscomp/CheckDebuggerStatement.java",
        "signature": "com.google.javascript.jscomp.CheckDebuggerStatement.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 38,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 34,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.scope",
        "snippet": "  private Scope scope;",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.inputId",
        "snippet": "  private InputId inputId;",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.redeclarationHandler",
        "snippet": "  private final RedeclarationHandler redeclarationHandler;",
        "begin_line": 37,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.ARGUMENTS",
        "snippet": "  private static final String ARGUMENTS = \"arguments\";",
        "begin_line": 41,
        "end_line": 41,
        "comment": " scope, but not explicitly declared."
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR",
        "snippet": "  public static final DiagnosticType VAR_MULTIPLY_DECLARED_ERROR =\n      DiagnosticType.error(\n          \"JSC_VAR_MULTIPLY_DECLARED_ERROR\",\n          \"Variable {0} first declared in {1}\");",
        "begin_line": 43,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.VAR_ARGUMENTS_SHADOWED_ERROR",
        "snippet": "  public static final DiagnosticType VAR_ARGUMENTS_SHADOWED_ERROR =\n    DiagnosticType.error(\n        \"JSC_VAR_ARGUMENTS_SHADOWED_ERROR\",\n        \"Shadowing \\\"arguments\\\" is not allowed\");",
        "begin_line": 48,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PassConfig",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.PassConfig.options",
        "snippet": "  final CompilerOptions options;",
        "begin_line": 38,
        "end_line": 38,
        "comment": " Used by subclasses in this package."
    },
    {
        "class_name": "com.google.javascript.jscomp.PassConfig",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.PassConfig.typedScopeCreator",
        "snippet": "  private MemoizedScopeCreator typedScopeCreator;",
        "begin_line": 45,
        "end_line": 45,
        "comment": "\n   * A memoized version of scopeCreator. It must be memoized so that\n   * we can make two separate passes over the AST, one for inferring types\n   * and one for checking types.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.PassConfig",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.PassConfig.internalScopeCreator",
        "snippet": "  private TypedScopeCreator internalScopeCreator;",
        "begin_line": 50,
        "end_line": 50,
        "comment": "\n   * This is the scope creator that {@code TypedScopeCreator} delegates to.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.PassConfig",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.PassConfig.topScope",
        "snippet": "  Scope topScope = null;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " The global typed scope. "
    },
    {
        "class_name": "com.google.javascript.jscomp.PassConfigDelegate",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.PassConfigDelegate.delegate",
        "snippet": "    private final PassConfig delegate;",
        "begin_line": 247,
        "end_line": 247,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.State",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.State.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 283,
        "end_line": 283,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.State",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.State.cssNames",
        "snippet": "    final Map<String, Integer> cssNames;",
        "begin_line": 285,
        "end_line": 285,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.State",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.State.exportedNames",
        "snippet": "    final Set<String> exportedNames;",
        "begin_line": 286,
        "end_line": 286,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.State",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.State.crossModuleIdGenerator",
        "snippet": "    final CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator;",
        "begin_line": 287,
        "end_line": 287,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.State",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.State.variableMap",
        "snippet": "    final VariableMap variableMap;",
        "begin_line": 288,
        "end_line": 288,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.State",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.State.propertyMap",
        "snippet": "    final VariableMap propertyMap;",
        "begin_line": 289,
        "end_line": 289,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.State",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.State.anonymousFunctionNameMap",
        "snippet": "    final VariableMap anonymousFunctionNameMap;",
        "begin_line": 290,
        "end_line": 290,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.State",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.State.stringMap",
        "snippet": "    final VariableMap stringMap;",
        "begin_line": 291,
        "end_line": 291,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.State",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.State.functionNames",
        "snippet": "    final FunctionNames functionNames;",
        "begin_line": 292,
        "end_line": 292,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.State",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.State.idGeneratorMap",
        "snippet": "    final String idGeneratorMap;",
        "begin_line": 293,
        "end_line": 293,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.fnName",
        "snippet": "  private final String fnName;",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.codingConvention",
        "snippet": "  private final CodingConvention codingConvention;",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.typeRegistry",
        "snippet": "  private final JSTypeRegistry typeRegistry;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.errorRoot",
        "snippet": "  private final Node errorRoot;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.sourceName",
        "snippet": "  private final String sourceName;",
        "begin_line": 75,
        "end_line": 75,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.scope",
        "snippet": "  private final Scope scope;",
        "begin_line": 76,
        "end_line": 76,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.contents",
        "snippet": "  private FunctionContents contents = UnknownFunctionContents.get();",
        "begin_line": 78,
        "end_line": 78,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.returnType",
        "snippet": "  private JSType returnType = null;",
        "begin_line": 80,
        "end_line": 80,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.returnTypeInferred",
        "snippet": "  private boolean returnTypeInferred = false;",
        "begin_line": 81,
        "end_line": 81,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.implementedInterfaces",
        "snippet": "  private List<ObjectType> implementedInterfaces = null;",
        "begin_line": 82,
        "end_line": 82,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.extendedInterfaces",
        "snippet": "  private List<ObjectType> extendedInterfaces = null;",
        "begin_line": 83,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.baseType",
        "snippet": "  private ObjectType baseType = null;",
        "begin_line": 84,
        "end_line": 84,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.thisType",
        "snippet": "  private JSType thisType = null;",
        "begin_line": 85,
        "end_line": 85,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.isConstructor",
        "snippet": "  private boolean isConstructor = false;",
        "begin_line": 86,
        "end_line": 86,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.makesStructs",
        "snippet": "  private boolean makesStructs = false;",
        "begin_line": 87,
        "end_line": 87,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.makesDicts",
        "snippet": "  private boolean makesDicts = false;",
        "begin_line": 88,
        "end_line": 88,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.isInterface",
        "snippet": "  private boolean isInterface = false;",
        "begin_line": 89,
        "end_line": 89,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.parametersNode",
        "snippet": "  private Node parametersNode = null;",
        "begin_line": 90,
        "end_line": 90,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.templateTypeNames",
        "snippet": "  private ImmutableList<String> templateTypeNames = ImmutableList.of();",
        "begin_line": 91,
        "end_line": 91,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.EXTENDS_WITHOUT_TYPEDEF",
        "snippet": "  static final DiagnosticType EXTENDS_WITHOUT_TYPEDEF = DiagnosticType.warning(\n      \"JSC_EXTENDS_WITHOUT_TYPEDEF\",\n      \"@extends used without @constructor or @interface for {0}\");",
        "begin_line": 93,
        "end_line": 95,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.EXTENDS_NON_OBJECT",
        "snippet": "  static final DiagnosticType EXTENDS_NON_OBJECT = DiagnosticType.warning(\n      \"JSC_EXTENDS_NON_OBJECT\",\n      \"{0} @extends non-object type {1}\");",
        "begin_line": 97,
        "end_line": 99,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.RESOLVED_TAG_EMPTY",
        "snippet": "  static final DiagnosticType RESOLVED_TAG_EMPTY = DiagnosticType.warning(\n      \"JSC_RESOLVED_TAG_EMPTY\",\n      \"Could not resolve type in {0} tag of {1}\");",
        "begin_line": 101,
        "end_line": 103,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.IMPLEMENTS_WITHOUT_CONSTRUCTOR",
        "snippet": "  static final DiagnosticType IMPLEMENTS_WITHOUT_CONSTRUCTOR =\n      DiagnosticType.warning(\n          \"JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR\",\n          \"@implements used without @constructor or @interface for {0}\");",
        "begin_line": 105,
        "end_line": 108,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.CONSTRUCTOR_REQUIRED",
        "snippet": "  static final DiagnosticType CONSTRUCTOR_REQUIRED =\n      DiagnosticType.warning(\"JSC_CONSTRUCTOR_REQUIRED\",\n                             \"{0} used without @constructor for {1}\");",
        "begin_line": 110,
        "end_line": 112,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.VAR_ARGS_MUST_BE_LAST",
        "snippet": "  static final DiagnosticType VAR_ARGS_MUST_BE_LAST = DiagnosticType.warning(\n      \"JSC_VAR_ARGS_MUST_BE_LAST\",\n      \"variable length argument must be last\");",
        "begin_line": 114,
        "end_line": 116,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.OPTIONAL_ARG_AT_END",
        "snippet": "  static final DiagnosticType OPTIONAL_ARG_AT_END = DiagnosticType.warning(\n      \"JSC_OPTIONAL_ARG_AT_END\",\n      \"optional arguments must be at the end\");",
        "begin_line": 118,
        "end_line": 120,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.INEXISTANT_PARAM",
        "snippet": "  static final DiagnosticType INEXISTANT_PARAM = DiagnosticType.warning(\n      \"JSC_INEXISTANT_PARAM\",\n      \"parameter {0} does not appear in {1}''s parameter list\");",
        "begin_line": 122,
        "end_line": 124,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.TYPE_REDEFINITION",
        "snippet": "  static final DiagnosticType TYPE_REDEFINITION = DiagnosticType.warning(\n      \"JSC_TYPE_REDEFINITION\",\n      \"attempted re-definition of type {0}\\n\"\n      + \"found   : {1}\\n\"\n      + \"expected: {2}\");",
        "begin_line": 126,
        "end_line": 130,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.TEMPLATE_TYPE_DUPLICATED",
        "snippet": "  static final DiagnosticType TEMPLATE_TYPE_DUPLICATED = DiagnosticType.warning(\n      \"JSC_TEMPLATE_TYPE_DUPLICATED\",\n      \"Only one parameter type must be the template type\");",
        "begin_line": 132,
        "end_line": 134,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED",
        "snippet": "  static final DiagnosticType TEMPLATE_TYPE_EXPECTED = DiagnosticType.warning(\n      \"JSC_TEMPLATE_TYPE_EXPECTED\",\n      \"The template type must be a parameter type\");",
        "begin_line": 136,
        "end_line": 138,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.THIS_TYPE_NON_OBJECT",
        "snippet": "  static final DiagnosticType THIS_TYPE_NON_OBJECT =\n      DiagnosticType.warning(\n          \"JSC_THIS_TYPE_NON_OBJECT\",\n          \"@this type of a function must be an object\\n\" +\n          \"Actual type: {0}\");",
        "begin_line": 140,
        "end_line": 144,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.UnknownFunctionContents",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.UnknownFunctionContents.singleton",
        "snippet": "    private static UnknownFunctionContents singleton =\n        new UnknownFunctionContents();",
        "begin_line": 799,
        "end_line": 800,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AstFunctionContents",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.AstFunctionContents.n",
        "snippet": "    private final Node n;",
        "begin_line": 843,
        "end_line": 843,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AstFunctionContents",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.AstFunctionContents.hasNonEmptyReturns",
        "snippet": "    private boolean hasNonEmptyReturns = false;",
        "begin_line": 844,
        "end_line": 844,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AstFunctionContents",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.AstFunctionContents.escapedVarNames",
        "snippet": "    private Set<String> escapedVarNames;",
        "begin_line": 845,
        "end_line": 845,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AstFunctionContents",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.AstFunctionContents.escapedQualifiedNames",
        "snippet": "    private Set<String> escapedQualifiedNames;",
        "begin_line": 846,
        "end_line": 846,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AstFunctionContents",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.AstFunctionContents.assignedVarNames",
        "snippet": "    private final Multiset<String> assignedVarNames = HashMultiset.create();",
        "begin_line": 847,
        "end_line": 847,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LineNumberCheck",
        "src_path": "src/com/google/javascript/jscomp/LineNumberCheck.java",
        "signature": "com.google.javascript.jscomp.LineNumberCheck.MISSING_LINE_INFO",
        "snippet": "  static final DiagnosticType MISSING_LINE_INFO = DiagnosticType.error(\n      \"JSC_MISSING_LINE_INFO\",\n      \"No source location information associated with {0}.\\n\" +\n      \"Most likely a Node has been created with settings the source file \" +\n      \"and line/column location.  Usually this is done using \" +\n      \"Node.copyInformationFrom and supplying a Node from the source AST.\");",
        "begin_line": 30,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LineNumberCheck",
        "src_path": "src/com/google/javascript/jscomp/LineNumberCheck.java",
        "signature": "com.google.javascript.jscomp.LineNumberCheck.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 37,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LineNumberCheck",
        "src_path": "src/com/google/javascript/jscomp/LineNumberCheck.java",
        "signature": "com.google.javascript.jscomp.LineNumberCheck.requiresLineNumbers",
        "snippet": "  private boolean requiresLineNumbers = false;",
        "begin_line": 38,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "signature": "com.google.javascript.jscomp.FunctionInjector.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "signature": "com.google.javascript.jscomp.FunctionInjector.safeNameIdSupplier",
        "snippet": "  private final Supplier<String> safeNameIdSupplier;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "signature": "com.google.javascript.jscomp.FunctionInjector.allowDecomposition",
        "snippet": "  private final boolean allowDecomposition;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "signature": "com.google.javascript.jscomp.FunctionInjector.knownConstants",
        "snippet": "  private Set<String> knownConstants = Sets.newHashSet();",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "signature": "com.google.javascript.jscomp.FunctionInjector.assumeStrictThis",
        "snippet": "  private final boolean assumeStrictThis;",
        "begin_line": 44,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "signature": "com.google.javascript.jscomp.FunctionInjector.assumeMinimumCapture",
        "snippet": "  private final boolean assumeMinimumCapture;",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Reference",
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "signature": "com.google.javascript.jscomp.Reference.callNode",
        "snippet": "    final Node callNode;",
        "begin_line": 84,
        "end_line": 84,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Reference",
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "signature": "com.google.javascript.jscomp.Reference.module",
        "snippet": "    final JSModule module;",
        "begin_line": 85,
        "end_line": 85,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Reference",
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "signature": "com.google.javascript.jscomp.Reference.mode",
        "snippet": "    final InliningMode mode;",
        "begin_line": 86,
        "end_line": 86,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "signature": "com.google.javascript.jscomp.FunctionInjector.NAME_COST_ESTIMATE",
        "snippet": "  private static final int NAME_COST_ESTIMATE =\n      InlineCostEstimator.ESTIMATED_IDENTIFIER_COST;",
        "begin_line": 101,
        "end_line": 102,
        "comment": "\n   * In order to estimate the cost of lining, we make the assumption that\n   * Identifiers are reduced 2 characters. For the call arguments, the important\n   * thing is that the cost is assumed to be the same in the call and the\n   * function, so the actual length doesn't matter in most cases.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "signature": "com.google.javascript.jscomp.FunctionInjector.COMMA_COST",
        "snippet": "  private static final int COMMA_COST = 1;",
        "begin_line": 105,
        "end_line": 105,
        "comment": " The cost of a argument separator (a comma). "
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "signature": "com.google.javascript.jscomp.FunctionInjector.PAREN_COST",
        "snippet": "  private static final int PAREN_COST = 2;",
        "begin_line": 108,
        "end_line": 108,
        "comment": " The cost of the parentheses needed to make a call."
    },
    {
        "class_name": "com.google.javascript.jscomp.ShadowVariables",
        "src_path": "src/com/google/javascript/jscomp/ShadowVariables.java",
        "signature": "com.google.javascript.jscomp.ShadowVariables.scopeUpRefMap",
        "snippet": "  private final Multimap<Node, String> scopeUpRefMap = HashMultimap.create();",
        "begin_line": 75,
        "end_line": 75,
        "comment": " Make sure of scope memorization to minimize scope creation cost."
    },
    {
        "class_name": "com.google.javascript.jscomp.ShadowVariables",
        "src_path": "src/com/google/javascript/jscomp/ShadowVariables.java",
        "signature": "com.google.javascript.jscomp.ShadowVariables.varToNameUsage",
        "snippet": "  private final Multimap<Var, Node> varToNameUsage = HashMultimap.create();",
        "begin_line": 79,
        "end_line": 79,
        "comment": " in any scope."
    },
    {
        "class_name": "com.google.javascript.jscomp.ShadowVariables",
        "src_path": "src/com/google/javascript/jscomp/ShadowVariables.java",
        "signature": "com.google.javascript.jscomp.ShadowVariables.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 81,
        "end_line": 81,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ShadowVariables",
        "src_path": "src/com/google/javascript/jscomp/ShadowVariables.java",
        "signature": "com.google.javascript.jscomp.ShadowVariables.varsByFrequency",
        "snippet": "  private final SortedSet<Assignment> varsByFrequency;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " All the information used for renaming."
    },
    {
        "class_name": "com.google.javascript.jscomp.ShadowVariables",
        "src_path": "src/com/google/javascript/jscomp/ShadowVariables.java",
        "signature": "com.google.javascript.jscomp.ShadowVariables.assignments",
        "snippet": "  private final Map<String, Assignment> assignments;",
        "begin_line": 85,
        "end_line": 85,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ShadowVariables",
        "src_path": "src/com/google/javascript/jscomp/ShadowVariables.java",
        "signature": "com.google.javascript.jscomp.ShadowVariables.oldPseudoNameMap",
        "snippet": "  private final Map<Node, String> oldPseudoNameMap;",
        "begin_line": 86,
        "end_line": 86,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ShadowVariables",
        "src_path": "src/com/google/javascript/jscomp/ShadowVariables.java",
        "signature": "com.google.javascript.jscomp.ShadowVariables.deltaPseudoNameMap",
        "snippet": "  private final Map<Node, String> deltaPseudoNameMap;",
        "begin_line": 87,
        "end_line": 87,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessage",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.JsMessage.MESSAGE_REPRESENTATION_FORMAT",
        "snippet": "  private static final String MESSAGE_REPRESENTATION_FORMAT = \"{$%s}\";",
        "begin_line": 75,
        "end_line": 75,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessage",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.JsMessage.key",
        "snippet": "  private final String key;",
        "begin_line": 77,
        "end_line": 77,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessage",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.JsMessage.id",
        "snippet": "  private final String id;",
        "begin_line": 78,
        "end_line": 78,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessage",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.JsMessage.parts",
        "snippet": "  private final List<CharSequence> parts;",
        "begin_line": 79,
        "end_line": 79,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessage",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.JsMessage.placeholders",
        "snippet": "  private final Set<String> placeholders;",
        "begin_line": 80,
        "end_line": 80,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessage",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.JsMessage.desc",
        "snippet": "  private final String desc;",
        "begin_line": 81,
        "end_line": 81,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessage",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.JsMessage.hidden",
        "snippet": "  private final boolean hidden;",
        "begin_line": 82,
        "end_line": 82,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessage",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.JsMessage.meaning",
        "snippet": "  private final String meaning;",
        "begin_line": 83,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessage",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.JsMessage.sourceName",
        "snippet": "  private final String sourceName;",
        "begin_line": 85,
        "end_line": 85,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessage",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.JsMessage.isAnonymous",
        "snippet": "  private final boolean isAnonymous;",
        "begin_line": 86,
        "end_line": 86,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessage",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.JsMessage.isExternal",
        "snippet": "  private final boolean isExternal;",
        "begin_line": 87,
        "end_line": 87,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PlaceholderReference",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.PlaceholderReference.name",
        "snippet": "    private final String name;",
        "begin_line": 241,
        "end_line": 241,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.Builder.MSG_EXTERNAL_PATTERN",
        "snippet": "    private static final Pattern MSG_EXTERNAL_PATTERN =\n        Pattern.compile(\"MSG_EXTERNAL_(\\\\d+)\");",
        "begin_line": 293,
        "end_line": 294,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.Builder.key",
        "snippet": "    private String key;",
        "begin_line": 305,
        "end_line": 305,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.Builder.meaning",
        "snippet": "    private String meaning;",
        "begin_line": 307,
        "end_line": 307,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.Builder.desc",
        "snippet": "    private String desc;",
        "begin_line": 309,
        "end_line": 309,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.Builder.hidden",
        "snippet": "    private boolean hidden;",
        "begin_line": 310,
        "end_line": 310,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.Builder.parts",
        "snippet": "    private List<CharSequence> parts = Lists.newLinkedList();",
        "begin_line": 312,
        "end_line": 312,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.Builder.placeholders",
        "snippet": "    private Set<String> placeholders = Sets.newHashSet();",
        "begin_line": 313,
        "end_line": 313,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.Builder.sourceName",
        "snippet": "    private String sourceName;",
        "begin_line": 315,
        "end_line": 315,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Hash",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.Hash.SEED64",
        "snippet": "    private static final long SEED64 =\n        0x2b992ddfa23249d6L; // part of pi, arbitrary",
        "begin_line": 480,
        "end_line": 481,
        "comment": " Default hash seed (64 bit) "
    },
    {
        "class_name": "com.google.javascript.jscomp.Hash",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.Hash.CONSTANT64",
        "snippet": "    private static final long CONSTANT64 =\n        0xe08c1d668b756f82L; // part of golden ratio, arbitrary",
        "begin_line": 484,
        "end_line": 485,
        "comment": " Hash constant (64 bit) "
    },
    {
        "class_name": "com.google.javascript.jscomp.SanityCheck",
        "src_path": "src/com/google/javascript/jscomp/SanityCheck.java",
        "signature": "com.google.javascript.jscomp.SanityCheck.CANNOT_PARSE_GENERATED_CODE",
        "snippet": "  static final DiagnosticType CANNOT_PARSE_GENERATED_CODE =\n      DiagnosticType.error(\"JSC_CANNOT_PARSE_GENERATED_CODE\",\n          \"Internal compiler error. Cannot parse generated code: {0}\");",
        "begin_line": 29,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SanityCheck",
        "src_path": "src/com/google/javascript/jscomp/SanityCheck.java",
        "signature": "com.google.javascript.jscomp.SanityCheck.GENERATED_BAD_CODE",
        "snippet": "  static final DiagnosticType GENERATED_BAD_CODE = DiagnosticType.error(\n      \"JSC_GENERATED_BAD_CODE\",\n      \"Internal compiler error. Generated bad code.\" +\n      \"----------------------------------------\\n\" +\n      \"Expected:\\n{0}\\n\" +\n      \"----------------------------------------\\n\" +\n      \"Actual:\\n{1}\");",
        "begin_line": 33,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SanityCheck",
        "src_path": "src/com/google/javascript/jscomp/SanityCheck.java",
        "signature": "com.google.javascript.jscomp.SanityCheck.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SanityCheck",
        "src_path": "src/com/google/javascript/jscomp/SanityCheck.java",
        "signature": "com.google.javascript.jscomp.SanityCheck.astValidator",
        "snippet": "  private final AstValidator astValidator = new AstValidator();",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionlessLocalScope",
        "src_path": "src/com/google/javascript/jscomp/NodeIterators.java",
        "signature": "com.google.javascript.jscomp.FunctionlessLocalScope.ancestors",
        "snippet": "    private final Stack<Node> ancestors = new Stack<Node>();",
        "begin_line": 44,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LocalVarMotion",
        "src_path": "src/com/google/javascript/jscomp/NodeIterators.java",
        "signature": "com.google.javascript.jscomp.LocalVarMotion.valueHasSideEffects",
        "snippet": "    private final boolean valueHasSideEffects;",
        "begin_line": 154,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LocalVarMotion",
        "src_path": "src/com/google/javascript/jscomp/NodeIterators.java",
        "signature": "com.google.javascript.jscomp.LocalVarMotion.iterator",
        "snippet": "    private final FunctionlessLocalScope iterator;",
        "begin_line": 155,
        "end_line": 155,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LocalVarMotion",
        "src_path": "src/com/google/javascript/jscomp/NodeIterators.java",
        "signature": "com.google.javascript.jscomp.LocalVarMotion.varName",
        "snippet": "    private final String varName;",
        "begin_line": 156,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LocalVarMotion",
        "src_path": "src/com/google/javascript/jscomp/NodeIterators.java",
        "signature": "com.google.javascript.jscomp.LocalVarMotion.lookAhead",
        "snippet": "    private Node lookAhead;",
        "begin_line": 157,
        "end_line": 157,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ShowByPathWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.ShowByPathWarningsGuard.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 31,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ShowByPathWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.ShowByPathWarningsGuard.warningsGuard",
        "snippet": "  private final ByPathWarningsGuard warningsGuard;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AnonymousFunctionNamingCallback",
        "src_path": "src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java",
        "signature": "com.google.javascript.jscomp.AnonymousFunctionNamingCallback.namer",
        "snippet": "  private final FunctionNamer namer;",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LocationMapping",
        "src_path": "src/com/google/javascript/jscomp/SourceMap.java",
        "signature": "com.google.javascript.jscomp.LocationMapping.prefix",
        "snippet": "    final String prefix;",
        "begin_line": 100,
        "end_line": 100,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LocationMapping",
        "src_path": "src/com/google/javascript/jscomp/SourceMap.java",
        "signature": "com.google.javascript.jscomp.LocationMapping.replacement",
        "snippet": "    final String replacement;",
        "begin_line": 101,
        "end_line": 101,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceMap",
        "src_path": "src/com/google/javascript/jscomp/SourceMap.java",
        "signature": "com.google.javascript.jscomp.SourceMap.generator",
        "snippet": "  private final SourceMapGenerator generator;",
        "begin_line": 108,
        "end_line": 108,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceMap",
        "src_path": "src/com/google/javascript/jscomp/SourceMap.java",
        "signature": "com.google.javascript.jscomp.SourceMap.prefixMappings",
        "snippet": "  private List<LocationMapping> prefixMappings = Collections.emptyList();",
        "begin_line": 109,
        "end_line": 109,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceMap",
        "src_path": "src/com/google/javascript/jscomp/SourceMap.java",
        "signature": "com.google.javascript.jscomp.SourceMap.sourceLocationFixupCache",
        "snippet": "  private final Map<String, String> sourceLocationFixupCache =\n      Maps.newHashMap();",
        "begin_line": 110,
        "end_line": 111,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.success",
        "snippet": "  public final boolean success;",
        "begin_line": 25,
        "end_line": 25,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.errors",
        "snippet": "  public final JSError[] errors;",
        "begin_line": 26,
        "end_line": 26,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.warnings",
        "snippet": "  public final JSError[] warnings;",
        "begin_line": 27,
        "end_line": 27,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.debugLog",
        "snippet": "  public final String debugLog;",
        "begin_line": 28,
        "end_line": 28,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.variableMap",
        "snippet": "  public final VariableMap variableMap;",
        "begin_line": 29,
        "end_line": 29,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.propertyMap",
        "snippet": "  public final VariableMap propertyMap;",
        "begin_line": 30,
        "end_line": 30,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.namedAnonFunctionMap",
        "snippet": "  public final VariableMap namedAnonFunctionMap;",
        "begin_line": 31,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.stringMap",
        "snippet": "  public final VariableMap stringMap;",
        "begin_line": 32,
        "end_line": 32,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.functionInformationMap",
        "snippet": "  public final FunctionInformationMap functionInformationMap;",
        "begin_line": 33,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.sourceMap",
        "snippet": "  public final SourceMap sourceMap;",
        "begin_line": 34,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.cssNames",
        "snippet": "  public final Map<String, Integer> cssNames;",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.externExport",
        "snippet": "  public final String externExport;",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.idGeneratorMap",
        "snippet": "  public final String idGeneratorMap;",
        "begin_line": 37,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SymbolTable",
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "signature": "com.google.javascript.jscomp.SymbolTable.logger",
        "snippet": "  private static final Logger logger =\n      Logger.getLogger(SymbolTable.class.getName());",
        "begin_line": 97,
        "end_line": 98,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SymbolTable",
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "signature": "com.google.javascript.jscomp.SymbolTable.GLOBAL_THIS",
        "snippet": "  public static final String GLOBAL_THIS = \"*global*\";",
        "begin_line": 105,
        "end_line": 105,
        "comment": "\n   * The name we use for the JavaScript built-in Global object.  It's\n   * anonymous in JavaScript, so we have to give it an invalid identifier\n   * to avoid conflicts with user-defined property names.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.SymbolTable",
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "signature": "com.google.javascript.jscomp.SymbolTable.symbols",
        "snippet": "  private final Table<Node, String, Symbol> symbols = HashBasedTable.create();",
        "begin_line": 111,
        "end_line": 111,
        "comment": "\n   * All symbols in the program, uniquely identified by the node where\n   * they're declared and their name.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.SymbolTable",
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "signature": "com.google.javascript.jscomp.SymbolTable.scopes",
        "snippet": "  private final Map<Node, SymbolScope> scopes = Maps.newLinkedHashMap();",
        "begin_line": 117,
        "end_line": 117,
        "comment": "\n   * All syntactic scopes in the program, uniquely identified by the node where\n   * they're declared.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.SymbolTable",
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "signature": "com.google.javascript.jscomp.SymbolTable.docInfos",
        "snippet": "  private final List<JSDocInfo> docInfos = Lists.newArrayList();",
        "begin_line": 122,
        "end_line": 122,
        "comment": "\n   * All JSDocInfo in the program.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.SymbolTable",
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "signature": "com.google.javascript.jscomp.SymbolTable.globalScope",
        "snippet": "  private SymbolScope globalScope = null;",
        "begin_line": 124,
        "end_line": 124,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SymbolTable",
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "signature": "com.google.javascript.jscomp.SymbolTable.registry",
        "snippet": "  private final JSTypeRegistry registry;",
        "begin_line": 126,
        "end_line": 126,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Symbol",
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "signature": "com.google.javascript.jscomp.Symbol.references",
        "snippet": "    private final Map<Node, Reference> references = Maps.newLinkedHashMap();",
        "begin_line": 1049,
        "end_line": 1049,
        "comment": " (and so the declaration always comes first)."
    },
    {
        "class_name": "com.google.javascript.jscomp.Symbol",
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "signature": "com.google.javascript.jscomp.Symbol.scope",
        "snippet": "    private final SymbolScope scope;",
        "begin_line": 1051,
        "end_line": 1051,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Symbol",
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "signature": "com.google.javascript.jscomp.Symbol.propertyScope",
        "snippet": "    private SymbolScope propertyScope = null;",
        "begin_line": 1053,
        "end_line": 1053,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Symbol",
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "signature": "com.google.javascript.jscomp.Symbol.declaration",
        "snippet": "    private Reference declaration = null;",
        "begin_line": 1055,
        "end_line": 1055,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Symbol",
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "signature": "com.google.javascript.jscomp.Symbol.docInfo",
        "snippet": "    private JSDocInfo docInfo = null;",
        "begin_line": 1057,
        "end_line": 1057,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Symbol",
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "signature": "com.google.javascript.jscomp.Symbol.docScope",
        "snippet": "    private SymbolScope docScope = null;",
        "begin_line": 1060,
        "end_line": 1060,
        "comment": " A scope for symbols that are only documented in JSDoc."
    },
    {
        "class_name": "com.google.javascript.jscomp.SymbolScope",
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "signature": "com.google.javascript.jscomp.SymbolScope.rootNode",
        "snippet": "    private final Node rootNode;",
        "begin_line": 1159,
        "end_line": 1159,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SymbolScope",
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "signature": "com.google.javascript.jscomp.SymbolScope.parent",
        "snippet": "    private final SymbolScope parent;",
        "begin_line": 1160,
        "end_line": 1160,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SymbolScope",
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "signature": "com.google.javascript.jscomp.SymbolScope.typeOfThis",
        "snippet": "    private final JSType typeOfThis;",
        "begin_line": 1161,
        "end_line": 1161,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SymbolScope",
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "signature": "com.google.javascript.jscomp.SymbolScope.ownSymbols",
        "snippet": "    private final Map<String, Symbol> ownSymbols = Maps.newLinkedHashMap();",
        "begin_line": 1162,
        "end_line": 1162,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SymbolScope",
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "signature": "com.google.javascript.jscomp.SymbolScope.scopeDepth",
        "snippet": "    private final int scopeDepth;",
        "begin_line": 1163,
        "end_line": 1163,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SymbolScope",
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "signature": "com.google.javascript.jscomp.SymbolScope.innerAnonFunctionsWithNames",
        "snippet": "    private int innerAnonFunctionsWithNames = 0;",
        "begin_line": 1166,
        "end_line": 1166,
        "comment": " The number of inner anonymous functions that we've given names to."
    },
    {
        "class_name": "com.google.javascript.jscomp.SymbolScope",
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "signature": "com.google.javascript.jscomp.SymbolScope.mySymbol",
        "snippet": "    private Symbol mySymbol;",
        "begin_line": 1169,
        "end_line": 1169,
        "comment": " The symbol associated with a property scope or doc scope."
    },
    {
        "class_name": "com.google.javascript.jscomp.PropertyRefCollector",
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "signature": "com.google.javascript.jscomp.PropertyRefCollector.compiler",
        "snippet": "    private final AbstractCompiler compiler;",
        "begin_line": 1291,
        "end_line": 1291,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ThisRefCollector",
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "signature": "com.google.javascript.jscomp.ThisRefCollector.compiler",
        "snippet": "    private final AbstractCompiler compiler;",
        "begin_line": 1415,
        "end_line": 1415,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ThisRefCollector",
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "signature": "com.google.javascript.jscomp.ThisRefCollector.thisStack",
        "snippet": "    private final List<Symbol> thisStack = Lists.newArrayList();",
        "begin_line": 1423,
        "end_line": 1423,
        "comment": " with some symbol for 'this'."
    },
    {
        "class_name": "com.google.javascript.jscomp.JSDocInfoCollector",
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "signature": "com.google.javascript.jscomp.JSDocInfoCollector.typeRegistry",
        "snippet": "    private final JSTypeRegistry typeRegistry;",
        "begin_line": 1514,
        "end_line": 1514,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SymbolTable",
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "signature": "com.google.javascript.jscomp.SymbolTable.SOURCE_NAME_ORDERING",
        "snippet": "  private final Ordering<String> SOURCE_NAME_ORDERING =\n      Ordering.natural().nullsFirst();",
        "begin_line": 1558,
        "end_line": 1559,
        "comment": " Comparators"
    },
    {
        "class_name": "com.google.javascript.jscomp.SymbolTable",
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "signature": "com.google.javascript.jscomp.SymbolTable.NODE_ORDERING",
        "snippet": "  private final Ordering<Node> NODE_ORDERING = new Ordering<Node>() {\n    @Override\n    public int compare(Node a, Node b) {\n      int result = SOURCE_NAME_ORDERING.compare(\n          a.getSourceFileName(), b.getSourceFileName());\n      if (result != 0) {\n        return result;\n      }\n\n      // Source position is a bit mask of line in the top 4 bits, so this\n      // is a quick way to compare order without computing absolute position.\n      return a.getSourcePosition() - b.getSourcePosition();\n    }\n  };",
        "begin_line": 1561,
        "end_line": 1574,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SymbolTable",
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "signature": "com.google.javascript.jscomp.SymbolTable.LEXICAL_SCOPE_ORDERING",
        "snippet": "  private final Ordering<SymbolScope> LEXICAL_SCOPE_ORDERING =\n      new Ordering<SymbolScope>() {\n    @Override\n    public int compare(SymbolScope a, SymbolScope b) {\n      Preconditions.checkState(a.isLexicalScope() && b.isLexicalScope(),\n                               \"We can only sort lexical scopes\");\n      return NODE_ORDERING.compare(a.getRootNode(), b.getRootNode());\n    }\n  };",
        "begin_line": 1576,
        "end_line": 1584,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SymbolTable",
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "signature": "com.google.javascript.jscomp.SymbolTable.SYMBOL_ORDERING",
        "snippet": "  private final Ordering<Symbol> SYMBOL_ORDERING = new Ordering<Symbol>() {\n    @Override\n    public int compare(Symbol a, Symbol b) {\n      SymbolScope scopeA = getScope(a);\n      SymbolScope scopeB = getScope(b);\n\n      // More deeply nested symbols should go later.\n      int result = getLexicalScopeDepth(scopeA) - getLexicalScopeDepth(scopeB);\n      if (result != 0) {\n        return result;\n      }\n\n      // After than, just use lexicographic ordering.\n      // This ensures \"a.b\" comes before \"a.b.c\".\n      return a.getName().compareTo(b.getName());\n    }\n  };",
        "begin_line": 1586,
        "end_line": 1602,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VariableMap",
        "src_path": "src/com/google/javascript/jscomp/VariableMap.java",
        "signature": "com.google.javascript.jscomp.VariableMap.map",
        "snippet": "  private final ImmutableMap<String, String> map;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " Maps original source name to new name "
    },
    {
        "class_name": "com.google.javascript.jscomp.VariableMap",
        "src_path": "src/com/google/javascript/jscomp/VariableMap.java",
        "signature": "com.google.javascript.jscomp.VariableMap.reverseMap",
        "snippet": "  private ImmutableMap<String, String> reverseMap = null;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Maps new name to source name, lazily initialized "
    },
    {
        "class_name": "com.google.javascript.jscomp.VariableMap",
        "src_path": "src/com/google/javascript/jscomp/VariableMap.java",
        "signature": "com.google.javascript.jscomp.VariableMap.SEPARATOR",
        "snippet": "  private static final char SEPARATOR = ':';",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.OptimizeReturns",
        "src_path": "src/com/google/javascript/jscomp/OptimizeReturns.java",
        "signature": "com.google.javascript.jscomp.OptimizeReturns.compiler",
        "snippet": "  private AbstractCompiler compiler;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RescopeGlobalSymbols",
        "src_path": "src/com/google/javascript/jscomp/RescopeGlobalSymbols.java",
        "signature": "com.google.javascript.jscomp.RescopeGlobalSymbols.DISAMBIGUATION_SUFFIX",
        "snippet": "  private static final String DISAMBIGUATION_SUFFIX = \"$\";",
        "begin_line": 50,
        "end_line": 50,
        "comment": " Appended to variables names that conflict with globalSymbolNamespace."
    },
    {
        "class_name": "com.google.javascript.jscomp.RescopeGlobalSymbols",
        "src_path": "src/com/google/javascript/jscomp/RescopeGlobalSymbols.java",
        "signature": "com.google.javascript.jscomp.RescopeGlobalSymbols.WINDOW",
        "snippet": "  private static final String WINDOW = \"window\";",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RescopeGlobalSymbols",
        "src_path": "src/com/google/javascript/jscomp/RescopeGlobalSymbols.java",
        "signature": "com.google.javascript.jscomp.RescopeGlobalSymbols.SPECIAL_EXTERNS",
        "snippet": "  private static final Set<String> SPECIAL_EXTERNS =\n      ImmutableSet.of(WINDOW, \"eval\", \"arguments\");",
        "begin_line": 52,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RescopeGlobalSymbols",
        "src_path": "src/com/google/javascript/jscomp/RescopeGlobalSymbols.java",
        "signature": "com.google.javascript.jscomp.RescopeGlobalSymbols.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RescopeGlobalSymbols",
        "src_path": "src/com/google/javascript/jscomp/RescopeGlobalSymbols.java",
        "signature": "com.google.javascript.jscomp.RescopeGlobalSymbols.globalSymbolNamespace",
        "snippet": "  private final String globalSymbolNamespace;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RescopeGlobalSymbols",
        "src_path": "src/com/google/javascript/jscomp/RescopeGlobalSymbols.java",
        "signature": "com.google.javascript.jscomp.RescopeGlobalSymbols.addExtern",
        "snippet": "  private final boolean addExtern;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.DELEGATE_PROXY_SUFFIX",
        "snippet": "  static final String DELEGATE_PROXY_SUFFIX =\n      ObjectType.createDelegateSuffix(\"Proxy\");",
        "begin_line": 101,
        "end_line": 102,
        "comment": "\n   * A suffix for naming delegate proxies differently from their base.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.MALFORMED_TYPEDEF",
        "snippet": "  static final DiagnosticType MALFORMED_TYPEDEF =\n      DiagnosticType.warning(\n          \"JSC_MALFORMED_TYPEDEF\",\n          \"Typedef for {0} does not have any type information\");",
        "begin_line": 104,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.ENUM_INITIALIZER",
        "snippet": "  static final DiagnosticType ENUM_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_ENUM_INITIALIZER_NOT_ENUM\",\n          \"enum initializer must be an object literal or an enum\");",
        "begin_line": 109,
        "end_line": 112,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.CTOR_INITIALIZER",
        "snippet": "  static final DiagnosticType CTOR_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_CTOR_INITIALIZER_NOT_CTOR\",\n          \"Constructor {0} must be initialized at declaration\");",
        "begin_line": 114,
        "end_line": 117,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.IFACE_INITIALIZER",
        "snippet": "  static final DiagnosticType IFACE_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_IFACE_INITIALIZER_NOT_IFACE\",\n          \"Interface {0} must be initialized at declaration\");",
        "begin_line": 119,
        "end_line": 122,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.CONSTRUCTOR_EXPECTED",
        "snippet": "  static final DiagnosticType CONSTRUCTOR_EXPECTED =\n      DiagnosticType.warning(\n          \"JSC_REFLECT_CONSTRUCTOR_EXPECTED\",\n          \"Constructor expected as first argument\");",
        "begin_line": 124,
        "end_line": 127,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.UNKNOWN_LENDS",
        "snippet": "  static final DiagnosticType UNKNOWN_LENDS =\n      DiagnosticType.warning(\n          \"JSC_UNKNOWN_LENDS\",\n          \"Variable {0} not declared before @lends annotation.\");",
        "begin_line": 129,
        "end_line": 132,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.LENDS_ON_NON_OBJECT",
        "snippet": "  static final DiagnosticType LENDS_ON_NON_OBJECT =\n      DiagnosticType.warning(\n          \"JSC_LENDS_ON_NON_OBJECT\",\n          \"May only lend properties to object types. {0} has type {1}.\");",
        "begin_line": 134,
        "end_line": 137,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 139,
        "end_line": 139,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.typeParsingErrorReporter",
        "snippet": "  private final ErrorReporter typeParsingErrorReporter;",
        "begin_line": 140,
        "end_line": 140,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.validator",
        "snippet": "  private final TypeValidator validator;",
        "begin_line": 141,
        "end_line": 141,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.codingConvention",
        "snippet": "  private final CodingConvention codingConvention;",
        "begin_line": 142,
        "end_line": 142,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.typeRegistry",
        "snippet": "  private final JSTypeRegistry typeRegistry;",
        "begin_line": 143,
        "end_line": 143,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.delegateProxyPrototypes",
        "snippet": "  private final List<ObjectType> delegateProxyPrototypes = Lists.newArrayList();",
        "begin_line": 144,
        "end_line": 144,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.delegateCallingConventions",
        "snippet": "  private final Map<String, String> delegateCallingConventions =\n      Maps.newHashMap();",
        "begin_line": 145,
        "end_line": 146,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.functionAnalysisResults",
        "snippet": "  private final Map<Node, AstFunctionContents> functionAnalysisResults =\n      Maps.newHashMap();",
        "begin_line": 149,
        "end_line": 150,
        "comment": " Simple properties inferred about functions."
    },
    {
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.unknownType",
        "snippet": "  private final ObjectType unknownType;",
        "begin_line": 153,
        "end_line": 153,
        "comment": " For convenience"
    },
    {
        "class_name": "com.google.javascript.jscomp.DeferredSetType",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.DeferredSetType.node",
        "snippet": "    final Node node;",
        "begin_line": 160,
        "end_line": 160,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DeferredSetType",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.DeferredSetType.type",
        "snippet": "    final JSType type;",
        "begin_line": 161,
        "end_line": 161,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiscoverEnumsAndTypedefs",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.DiscoverEnumsAndTypedefs.registry",
        "snippet": "    private final JSTypeRegistry registry;",
        "begin_line": 359,
        "end_line": 359,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractScopeBuilder",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.AbstractScopeBuilder.scope",
        "snippet": "    final Scope scope;",
        "begin_line": 415,
        "end_line": 415,
        "comment": "\n     * The scope that we're building.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractScopeBuilder",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.AbstractScopeBuilder.deferredSetTypes",
        "snippet": "    private final List<DeferredSetType> deferredSetTypes =\n        Lists.newArrayList();",
        "begin_line": 417,
        "end_line": 418,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractScopeBuilder",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.AbstractScopeBuilder.nonExternFunctions",
        "snippet": "    private final List<Node> nonExternFunctions = Lists.newArrayList();",
        "begin_line": 423,
        "end_line": 423,
        "comment": "\n     * Functions that we found in the global scope and not in externs.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractScopeBuilder",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.AbstractScopeBuilder.lentObjectLiterals",
        "snippet": "    private List<Node> lentObjectLiterals = null;",
        "begin_line": 435,
        "end_line": 435,
        "comment": "\n     * Object literals with a @lends annotation aren't analyzed until we\n     * reach the root of the statement they're defined in.\n     *\n     * This ensures that if there are any @lends annotations on the object\n     * literals, the type on the @lends annotation resolves correctly.\n     *\n     * For more information, see\n     * http://code.google.com/p/closure-compiler/issues/detail?id=314\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractScopeBuilder",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.AbstractScopeBuilder.stubDeclarations",
        "snippet": "    private final List<StubDeclaration> stubDeclarations =\n        Lists.newArrayList();",
        "begin_line": 443,
        "end_line": 444,
        "comment": "\n     * Type-less stubs.\n     *\n     * If at the end of traversal, we still don't have types for these\n     * stubs, then we should declare UNKNOWN types.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractScopeBuilder",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.AbstractScopeBuilder.sourceName",
        "snippet": "    private String sourceName = null;",
        "begin_line": 449,
        "end_line": 449,
        "comment": "\n     * The current source file that we're in.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractScopeBuilder",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.AbstractScopeBuilder.inputId",
        "snippet": "    private InputId inputId;",
        "begin_line": 454,
        "end_line": 454,
        "comment": "\n     * The InputId of the current node.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.CollectProperties",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.CollectProperties.thisType",
        "snippet": "      private final JSType thisType;",
        "begin_line": 1721,
        "end_line": 1721,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StubDeclaration",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.StubDeclaration.node",
        "snippet": "    private final Node node;",
        "begin_line": 1775,
        "end_line": 1775,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StubDeclaration",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.StubDeclaration.isExtern",
        "snippet": "    private final boolean isExtern;",
        "begin_line": 1776,
        "end_line": 1776,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StubDeclaration",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.StubDeclaration.ownerName",
        "snippet": "    private final String ownerName;",
        "begin_line": 1777,
        "end_line": 1777,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FirstOrderFunctionAnalyzer",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.FirstOrderFunctionAnalyzer.compiler",
        "snippet": "    private final AbstractCompiler compiler;",
        "begin_line": 1999,
        "end_line": 1999,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FirstOrderFunctionAnalyzer",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.FirstOrderFunctionAnalyzer.data",
        "snippet": "    private final Map<Node, AstFunctionContents> data;",
        "begin_line": 2000,
        "end_line": 2000,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsElimination",
        "src_path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsElimination.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsElimination",
        "src_path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsElimination.liveness",
        "snippet": "  private LiveVariablesAnalysis liveness;",
        "begin_line": 44,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsElimination",
        "src_path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsElimination.matchRemovableAssigns",
        "snippet": "  private static final Predicate<Node> matchRemovableAssigns =\n      new Predicate<Node>() {\n    @Override\n    public boolean apply(Node n) {\n      return (NodeUtil.isAssignmentOp(n) &&\n              n.getFirstChild().isName()) ||\n          n.isInc() || n.isDec();\n    }\n  };",
        "begin_line": 49,
        "end_line": 57,
        "comment": " will already remove variables that are initialized but unused."
    },
    {
        "class_name": "com.google.javascript.jscomp.Bind",
        "src_path": "src/com/google/javascript/jscomp/CodingConvention.java",
        "signature": "com.google.javascript.jscomp.Bind.target",
        "snippet": "    final Node target;",
        "begin_line": 259,
        "end_line": 259,
        "comment": " The target of the bind action"
    },
    {
        "class_name": "com.google.javascript.jscomp.Bind",
        "src_path": "src/com/google/javascript/jscomp/CodingConvention.java",
        "signature": "com.google.javascript.jscomp.Bind.thisValue",
        "snippet": "    final Node thisValue;",
        "begin_line": 261,
        "end_line": 261,
        "comment": " The node representing the \"this\" value, maybe null"
    },
    {
        "class_name": "com.google.javascript.jscomp.Bind",
        "src_path": "src/com/google/javascript/jscomp/CodingConvention.java",
        "signature": "com.google.javascript.jscomp.Bind.parameters",
        "snippet": "    final Node parameters;",
        "begin_line": 263,
        "end_line": 263,
        "comment": " The head of a Node list representing the parameters"
    },
    {
        "class_name": "com.google.javascript.jscomp.SubclassRelationship",
        "src_path": "src/com/google/javascript/jscomp/CodingConvention.java",
        "signature": "com.google.javascript.jscomp.SubclassRelationship.type",
        "snippet": "    final SubclassType type;",
        "begin_line": 321,
        "end_line": 321,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SubclassRelationship",
        "src_path": "src/com/google/javascript/jscomp/CodingConvention.java",
        "signature": "com.google.javascript.jscomp.SubclassRelationship.subclassName",
        "snippet": "    final String subclassName;",
        "begin_line": 322,
        "end_line": 322,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SubclassRelationship",
        "src_path": "src/com/google/javascript/jscomp/CodingConvention.java",
        "signature": "com.google.javascript.jscomp.SubclassRelationship.superclassName",
        "snippet": "    final String superclassName;",
        "begin_line": 323,
        "end_line": 323,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DelegateRelationship",
        "src_path": "src/com/google/javascript/jscomp/CodingConvention.java",
        "signature": "com.google.javascript.jscomp.DelegateRelationship.delegateBase",
        "snippet": "    final String delegateBase;",
        "begin_line": 341,
        "end_line": 341,
        "comment": " The subclass in the base code. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DelegateRelationship",
        "src_path": "src/com/google/javascript/jscomp/CodingConvention.java",
        "signature": "com.google.javascript.jscomp.DelegateRelationship.delegator",
        "snippet": "    final String delegator;",
        "begin_line": 344,
        "end_line": 344,
        "comment": " The class in the base code. "
    },
    {
        "class_name": "com.google.javascript.jscomp.ObjectLiteralCast",
        "src_path": "src/com/google/javascript/jscomp/CodingConvention.java",
        "signature": "com.google.javascript.jscomp.ObjectLiteralCast.typeName",
        "snippet": "    final String typeName;",
        "begin_line": 358,
        "end_line": 358,
        "comment": " Type to cast to. "
    },
    {
        "class_name": "com.google.javascript.jscomp.ObjectLiteralCast",
        "src_path": "src/com/google/javascript/jscomp/CodingConvention.java",
        "signature": "com.google.javascript.jscomp.ObjectLiteralCast.objectNode",
        "snippet": "    final Node objectNode;",
        "begin_line": 361,
        "end_line": 361,
        "comment": " Object to cast. "
    },
    {
        "class_name": "com.google.javascript.jscomp.ObjectLiteralCast",
        "src_path": "src/com/google/javascript/jscomp/CodingConvention.java",
        "signature": "com.google.javascript.jscomp.ObjectLiteralCast.diagnosticType",
        "snippet": "    final DiagnosticType diagnosticType;",
        "begin_line": 364,
        "end_line": 364,
        "comment": " Error message "
    },
    {
        "class_name": "com.google.javascript.jscomp.AssertionFunctionSpec",
        "src_path": "src/com/google/javascript/jscomp/CodingConvention.java",
        "signature": "com.google.javascript.jscomp.AssertionFunctionSpec.functionName",
        "snippet": "    protected final String functionName;",
        "begin_line": 380,
        "end_line": 380,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AssertionFunctionSpec",
        "src_path": "src/com/google/javascript/jscomp/CodingConvention.java",
        "signature": "com.google.javascript.jscomp.AssertionFunctionSpec.assertedType",
        "snippet": "    protected final JSTypeNative assertedType;",
        "begin_line": 381,
        "end_line": 381,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
        "src_path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.AND_PRECEDENCE",
        "snippet": "  private static final int AND_PRECEDENCE = NodeUtil.precedence(Token.AND);",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
        "src_path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.OR_PRECEDENCE",
        "snippet": "  private static final int OR_PRECEDENCE = NodeUtil.precedence(Token.OR);",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
        "src_path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.NOT_PRECEDENCE",
        "snippet": "  private static final int NOT_PRECEDENCE = NodeUtil.precedence(Token.NOT);",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
        "src_path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.REGEXP_ESCAPER",
        "snippet": "  private static final CodeGenerator REGEXP_ESCAPER =\n      CodeGenerator.forCostEstimation(\n          null /* blow up if we try to produce code */);",
        "begin_line": 43,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
        "src_path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.late",
        "snippet": "  private final boolean late;",
        "begin_line": 47,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
        "src_path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.STRING_SPLIT_OVERHEAD",
        "snippet": "  private final int STRING_SPLIT_OVERHEAD = \".split('.')\".length();",
        "begin_line": 49,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
        "src_path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.INVALID_REGULAR_EXPRESSION_FLAGS",
        "snippet": "  static final DiagnosticType INVALID_REGULAR_EXPRESSION_FLAGS =\n    DiagnosticType.warning(\n        \"JSC_INVALID_REGULAR_EXPRESSION_FLAGS\",\n        \"Invalid flags to RegExp constructor: {0}\");",
        "begin_line": 51,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
        "src_path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE",
        "snippet": "  static final Predicate<Node> DONT_TRAVERSE_FUNCTIONS_PREDICATE\n      = new Predicate<Node>() {\n    @Override\n    public boolean apply(Node input) {\n      return !input.isFunction();\n    }\n  };",
        "begin_line": 56,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
        "src_path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.STANDARD_OBJECT_CONSTRUCTORS",
        "snippet": "  private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =\n    // String, Number, and Boolean functions return non-object types, whereas\n    // new String, new Number, and new Boolean return object types, so don't\n    // include them here.\n    ImmutableSet.of(\n      \"Object\",\n      \"Array\",\n      \"RegExp\",\n      \"Error\"\n      );",
        "begin_line": 1329,
        "end_line": 1338,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
        "src_path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.REGEXP_FLAGS_RE",
        "snippet": "  private static final Pattern REGEXP_FLAGS_RE = Pattern.compile(\"^[gmi]*$\");",
        "begin_line": 1605,
        "end_line": 1605,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DevirtualizePrototypeMethods",
        "src_path": "src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java",
        "signature": "com.google.javascript.jscomp.DevirtualizePrototypeMethods.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DevirtualizePrototypeMethods",
        "src_path": "src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java",
        "signature": "com.google.javascript.jscomp.DevirtualizePrototypeMethods.specializationState",
        "snippet": "  private SpecializeModule.SpecializationState specializationState;",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeOptimizationsPass",
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "signature": "com.google.javascript.jscomp.PeepholeOptimizationsPass.compiler",
        "snippet": "  private AbstractCompiler compiler;",
        "begin_line": 34,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeOptimizationsPass",
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "signature": "com.google.javascript.jscomp.PeepholeOptimizationsPass.peepholeOptimizations",
        "snippet": "  private final AbstractPeepholeOptimization[] peepholeOptimizations;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " Use an array here for faster iteration compared to ImmutableSet"
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeOptimizationsPass",
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "signature": "com.google.javascript.jscomp.PeepholeOptimizationsPass.traversalState",
        "snippet": "  private StateStack traversalState = new StateStack();",
        "begin_line": 41,
        "end_line": 41,
        "comment": " immediately."
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeOptimizationsPass",
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "signature": "com.google.javascript.jscomp.PeepholeOptimizationsPass.retraverseOnChange",
        "snippet": "  private boolean retraverseOnChange = true;",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopeState",
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "signature": "com.google.javascript.jscomp.ScopeState.changed",
        "snippet": "    boolean changed;",
        "begin_line": 46,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopeState",
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "signature": "com.google.javascript.jscomp.ScopeState.traverseChildScopes",
        "snippet": "    boolean traverseChildScopes;",
        "begin_line": 47,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StateStack",
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "signature": "com.google.javascript.jscomp.StateStack.states",
        "snippet": "    private ArrayList<ScopeState> states = Lists.newArrayList();",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StateStack",
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "signature": "com.google.javascript.jscomp.StateStack.currentDepth",
        "snippet": "    private int currentDepth = 0;",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy",
        "src_path": "src/com/google/javascript/jscomp/AnonymousFunctionNamingPolicy.java",
        "signature": "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.reservedCharacters",
        "snippet": "  private final char[] reservedCharacters;",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExternExportsPass",
        "src_path": "src/com/google/javascript/jscomp/ExternExportsPass.java",
        "signature": "com.google.javascript.jscomp.ExternExportsPass.EXPORTED_FUNCTION_UNKNOWN_PARAMETER_TYPE",
        "snippet": "  static final DiagnosticType EXPORTED_FUNCTION_UNKNOWN_PARAMETER_TYPE =\n    DiagnosticType.warning(\n        \"JSC_EXPORTED_FUNCTION_UNKNOWN_PARAMETER_TYPE\",\n        \"Unable to determine type of parameter {0} for exported function {1}\");",
        "begin_line": 46,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExternExportsPass",
        "src_path": "src/com/google/javascript/jscomp/ExternExportsPass.java",
        "signature": "com.google.javascript.jscomp.ExternExportsPass.EXPORTED_FUNCTION_UNKNOWN_RETURN_TYPE",
        "snippet": "  static final DiagnosticType EXPORTED_FUNCTION_UNKNOWN_RETURN_TYPE =\n    DiagnosticType.warning(\n        \"JSC_EXPORTED_FUNCTION_UNKNOWN_RETURN_TYPE\",\n        \"Unable to determine return type for exported function {0}\");",
        "begin_line": 51,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExternExportsPass",
        "src_path": "src/com/google/javascript/jscomp/ExternExportsPass.java",
        "signature": "com.google.javascript.jscomp.ExternExportsPass.exports",
        "snippet": "  private final List<Export> exports;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " The exports found. "
    },
    {
        "class_name": "com.google.javascript.jscomp.ExternExportsPass",
        "src_path": "src/com/google/javascript/jscomp/ExternExportsPass.java",
        "signature": "com.google.javascript.jscomp.ExternExportsPass.definitionMap",
        "snippet": "  private final Map<String, Node> definitionMap;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " A map of all assigns to their parent nodes. "
    },
    {
        "class_name": "com.google.javascript.jscomp.ExternExportsPass",
        "src_path": "src/com/google/javascript/jscomp/ExternExportsPass.java",
        "signature": "com.google.javascript.jscomp.ExternExportsPass.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " The parent compiler. "
    },
    {
        "class_name": "com.google.javascript.jscomp.ExternExportsPass",
        "src_path": "src/com/google/javascript/jscomp/ExternExportsPass.java",
        "signature": "com.google.javascript.jscomp.ExternExportsPass.externsRoot",
        "snippet": "  private final Node externsRoot;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " The AST root which holds the externs generated. "
    },
    {
        "class_name": "com.google.javascript.jscomp.ExternExportsPass",
        "src_path": "src/com/google/javascript/jscomp/ExternExportsPass.java",
        "signature": "com.google.javascript.jscomp.ExternExportsPass.mappedPaths",
        "snippet": "  private final Map<String, String> mappedPaths;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " A mapping of internal paths to exported paths. "
    },
    {
        "class_name": "com.google.javascript.jscomp.ExternExportsPass",
        "src_path": "src/com/google/javascript/jscomp/ExternExportsPass.java",
        "signature": "com.google.javascript.jscomp.ExternExportsPass.alreadyExportedPaths",
        "snippet": "  private final Set<String> alreadyExportedPaths;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " A list of exported paths. "
    },
    {
        "class_name": "com.google.javascript.jscomp.ExternExportsPass",
        "src_path": "src/com/google/javascript/jscomp/ExternExportsPass.java",
        "signature": "com.google.javascript.jscomp.ExternExportsPass.exportSymbolFunctionNames",
        "snippet": "  private List<String> exportSymbolFunctionNames;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " A list of function names used to export symbols. "
    },
    {
        "class_name": "com.google.javascript.jscomp.ExternExportsPass",
        "src_path": "src/com/google/javascript/jscomp/ExternExportsPass.java",
        "signature": "com.google.javascript.jscomp.ExternExportsPass.exportPropertyFunctionNames",
        "snippet": "  private List<String> exportPropertyFunctionNames;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " A list of function names used to export properties. "
    },
    {
        "class_name": "com.google.javascript.jscomp.Export",
        "src_path": "src/com/google/javascript/jscomp/ExternExportsPass.java",
        "signature": "com.google.javascript.jscomp.Export.symbolName",
        "snippet": "    protected final String symbolName;",
        "begin_line": 81,
        "end_line": 81,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Export",
        "src_path": "src/com/google/javascript/jscomp/ExternExportsPass.java",
        "signature": "com.google.javascript.jscomp.Export.value",
        "snippet": "    protected final Node value;",
        "begin_line": 82,
        "end_line": 82,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PropertyExport",
        "src_path": "src/com/google/javascript/jscomp/ExternExportsPass.java",
        "signature": "com.google.javascript.jscomp.PropertyExport.exportPath",
        "snippet": "    private final String exportPath;",
        "begin_line": 384,
        "end_line": 384,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GetReplacementSideEffectSubexpressions",
        "src_path": "src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java",
        "signature": "com.google.javascript.jscomp.GetReplacementSideEffectSubexpressions.compiler",
        "snippet": "    private final AbstractCompiler compiler;",
        "begin_line": 91,
        "end_line": 91,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GetReplacementSideEffectSubexpressions",
        "src_path": "src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java",
        "signature": "com.google.javascript.jscomp.GetReplacementSideEffectSubexpressions.replacements",
        "snippet": "    private final List<Node> replacements;",
        "begin_line": 92,
        "end_line": 92,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback",
        "src_path": "src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java",
        "signature": "com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.FORBIDDEN_TYPES",
        "snippet": "  private static final Set<Integer> FORBIDDEN_TYPES = ImmutableSet.of(\n      Token.BLOCK, Token.SCRIPT, Token.VAR, Token.EXPR_RESULT, Token.RETURN);",
        "begin_line": 189,
        "end_line": 190,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback",
        "src_path": "src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java",
        "signature": "com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 191,
        "end_line": 191,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback",
        "src_path": "src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java",
        "signature": "com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.accumulator",
        "snippet": "  private final SideEffectAccumulator accumulator;",
        "begin_line": 192,
        "end_line": 192,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CollapseAnonymousFunctions",
        "src_path": "src/com/google/javascript/jscomp/CollapseAnonymousFunctions.java",
        "signature": "com.google.javascript.jscomp.CollapseAnonymousFunctions.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 39,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SideEffectsAnalysis",
        "src_path": "src/com/google/javascript/jscomp/SideEffectsAnalysis.java",
        "signature": "com.google.javascript.jscomp.SideEffectsAnalysis.NOT_FUNCTION_PREDICATE",
        "snippet": "  private static final Predicate<Node> NOT_FUNCTION_PREDICATE =\n      new Predicate<Node>() {\n    @Override\n    public boolean apply(Node input) {\n      return !input.isFunction();\n    }\n  };",
        "begin_line": 65,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SideEffectsAnalysis",
        "src_path": "src/com/google/javascript/jscomp/SideEffectsAnalysis.java",
        "signature": "com.google.javascript.jscomp.SideEffectsAnalysis.compiler",
        "snippet": "  private AbstractCompiler compiler;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SideEffectsAnalysis",
        "src_path": "src/com/google/javascript/jscomp/SideEffectsAnalysis.java",
        "signature": "com.google.javascript.jscomp.SideEffectsAnalysis.locationAbstraction",
        "snippet": "  private LocationAbstraction locationAbstraction;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " The location abstraction used to calculate the effects of code "
    },
    {
        "class_name": "com.google.javascript.jscomp.SideEffectsAnalysis",
        "src_path": "src/com/google/javascript/jscomp/SideEffectsAnalysis.java",
        "signature": "com.google.javascript.jscomp.SideEffectsAnalysis.locationAbstractionIdentifier",
        "snippet": "  private final LocationAbstractionMode locationAbstractionIdentifier;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " The kind of location abstraction to use "
    },
    {
        "class_name": "com.google.javascript.jscomp.RawMotionEnvironment",
        "src_path": "src/com/google/javascript/jscomp/SideEffectsAnalysis.java",
        "signature": "com.google.javascript.jscomp.RawMotionEnvironment.environment",
        "snippet": "    Set<Node> environment;",
        "begin_line": 499,
        "end_line": 499,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LocationSummary",
        "src_path": "src/com/google/javascript/jscomp/SideEffectsAnalysis.java",
        "signature": "com.google.javascript.jscomp.LocationSummary.modSet",
        "snippet": "    private EffectLocation modSet;",
        "begin_line": 519,
        "end_line": 519,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LocationSummary",
        "src_path": "src/com/google/javascript/jscomp/SideEffectsAnalysis.java",
        "signature": "com.google.javascript.jscomp.LocationSummary.refSet",
        "snippet": "    private EffectLocation refSet;",
        "begin_line": 520,
        "end_line": 520,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DegenerateLocationAbstraction",
        "src_path": "src/com/google/javascript/jscomp/SideEffectsAnalysis.java",
        "signature": "com.google.javascript.jscomp.DegenerateLocationAbstraction.EVERY_LOCATION",
        "snippet": "    private static final EffectLocation EVERY_LOCATION =\n        new DegenerateEffectLocation();",
        "begin_line": 628,
        "end_line": 629,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DegenerateLocationAbstraction",
        "src_path": "src/com/google/javascript/jscomp/SideEffectsAnalysis.java",
        "signature": "com.google.javascript.jscomp.DegenerateLocationAbstraction.NO_LOCATION",
        "snippet": "    private static final EffectLocation NO_LOCATION =\n        new DegenerateEffectLocation();",
        "begin_line": 631,
        "end_line": 632,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VisibilityLocationAbstraction",
        "src_path": "src/com/google/javascript/jscomp/SideEffectsAnalysis.java",
        "signature": "com.google.javascript.jscomp.VisibilityLocationAbstraction.VISIBILITY_LOCATION_NONE",
        "snippet": "    private static final int VISIBILITY_LOCATION_NONE = 0;",
        "begin_line": 712,
        "end_line": 712,
        "comment": " The \"bottom\" location. Used to signify an empty location set "
    },
    {
        "class_name": "com.google.javascript.jscomp.VisibilityLocationAbstraction",
        "src_path": "src/com/google/javascript/jscomp/SideEffectsAnalysis.java",
        "signature": "com.google.javascript.jscomp.VisibilityLocationAbstraction.UNKNOWN_LOCATION_MASK",
        "snippet": "    private static final int UNKNOWN_LOCATION_MASK = 0xFFFFFFFF;",
        "begin_line": 715,
        "end_line": 715,
        "comment": " The \"top\" location. Used to signify the set containing all locations "
    },
    {
        "class_name": "com.google.javascript.jscomp.VisibilityLocationAbstraction",
        "src_path": "src/com/google/javascript/jscomp/SideEffectsAnalysis.java",
        "signature": "com.google.javascript.jscomp.VisibilityLocationAbstraction.LOCAL_VARIABLE_LOCATION_MASK",
        "snippet": "    private static final int LOCAL_VARIABLE_LOCATION_MASK = 1 << 1;",
        "begin_line": 717,
        "end_line": 717,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VisibilityLocationAbstraction",
        "src_path": "src/com/google/javascript/jscomp/SideEffectsAnalysis.java",
        "signature": "com.google.javascript.jscomp.VisibilityLocationAbstraction.CAPTURED_LOCAL_VARIABLE_LOCATION_MASK",
        "snippet": "    private static final int CAPTURED_LOCAL_VARIABLE_LOCATION_MASK = 1 << 2;",
        "begin_line": 719,
        "end_line": 719,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VisibilityLocationAbstraction",
        "src_path": "src/com/google/javascript/jscomp/SideEffectsAnalysis.java",
        "signature": "com.google.javascript.jscomp.VisibilityLocationAbstraction.GLOBAL_VARIABLE_LOCATION_MASK",
        "snippet": "    private static final int GLOBAL_VARIABLE_LOCATION_MASK = 1 << 3;",
        "begin_line": 721,
        "end_line": 721,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VisibilityLocationAbstraction",
        "src_path": "src/com/google/javascript/jscomp/SideEffectsAnalysis.java",
        "signature": "com.google.javascript.jscomp.VisibilityLocationAbstraction.HEAP_LOCATION_MASK",
        "snippet": "    private static final int HEAP_LOCATION_MASK = 1 << 4;",
        "begin_line": 723,
        "end_line": 723,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VisibilityLocationAbstraction",
        "src_path": "src/com/google/javascript/jscomp/SideEffectsAnalysis.java",
        "signature": "com.google.javascript.jscomp.VisibilityLocationAbstraction.compiler",
        "snippet": "    AbstractCompiler compiler;",
        "begin_line": 725,
        "end_line": 725,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VisibilityLocationAbstraction",
        "src_path": "src/com/google/javascript/jscomp/SideEffectsAnalysis.java",
        "signature": "com.google.javascript.jscomp.VisibilityLocationAbstraction.variableVisibilityAnalysis",
        "snippet": "    VariableVisibilityAnalysis variableVisibilityAnalysis;",
        "begin_line": 727,
        "end_line": 727,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VisibilityLocationAbstraction",
        "src_path": "src/com/google/javascript/jscomp/SideEffectsAnalysis.java",
        "signature": "com.google.javascript.jscomp.VisibilityLocationAbstraction.variableUseMap",
        "snippet": "    VariableUseDeclarationMap variableUseMap;",
        "begin_line": 728,
        "end_line": 728,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VisibilityBasedEffectLocation",
        "src_path": "src/com/google/javascript/jscomp/SideEffectsAnalysis.java",
        "signature": "com.google.javascript.jscomp.VisibilityBasedEffectLocation.visibilityMask",
        "snippet": "      int visibilityMask = VISIBILITY_LOCATION_NONE;",
        "begin_line": 900,
        "end_line": 900,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VariableUseDeclarationMap",
        "src_path": "src/com/google/javascript/jscomp/SideEffectsAnalysis.java",
        "signature": "com.google.javascript.jscomp.VariableUseDeclarationMap.compiler",
        "snippet": "    private AbstractCompiler compiler;",
        "begin_line": 943,
        "end_line": 943,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VariableUseDeclarationMap",
        "src_path": "src/com/google/javascript/jscomp/SideEffectsAnalysis.java",
        "signature": "com.google.javascript.jscomp.VariableUseDeclarationMap.referencesByNameNode",
        "snippet": "    private Map<Node, Node> referencesByNameNode;",
        "begin_line": 946,
        "end_line": 946,
        "comment": " Maps a using name to its declaring name"
    },
    {
        "class_name": "com.google.javascript.jscomp.NameReferenceGraphReport",
        "src_path": "src/com/google/javascript/jscomp/NameReferenceGraphReport.java",
        "signature": "com.google.javascript.jscomp.NameReferenceGraphReport.graph",
        "snippet": "  private NameReferenceGraph graph = null;",
        "begin_line": 47,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.SINGLETON_MODULE_NAME",
        "snippet": "  static final String SINGLETON_MODULE_NAME = \"[singleton]\";",
        "begin_line": 84,
        "end_line": 84,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.MODULE_DEPENDENCY_ERROR",
        "snippet": "  static final DiagnosticType MODULE_DEPENDENCY_ERROR =\n      DiagnosticType.error(\"JSC_MODULE_DEPENDENCY_ERROR\",\n          \"Bad dependency: {0} -> {1}. \"\n              + \"Modules must be listed in dependency order.\");",
        "begin_line": 86,
        "end_line": 89,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.MISSING_ENTRY_ERROR",
        "snippet": "  static final DiagnosticType MISSING_ENTRY_ERROR = DiagnosticType.error(\n      \"JSC_MISSING_ENTRY_ERROR\",\n      \"required entry point \\\"{0}\\\" never provided\");",
        "begin_line": 91,
        "end_line": 93,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.CONFIG_RESOURCE",
        "snippet": "  private static final String CONFIG_RESOURCE =\n      \"com.google.javascript.jscomp.parsing.ParserConfig\";",
        "begin_line": 95,
        "end_line": 96,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.options",
        "snippet": "  CompilerOptions options = null;",
        "begin_line": 98,
        "end_line": 98,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.passes",
        "snippet": "  private PassConfig passes = null;",
        "begin_line": 100,
        "end_line": 100,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.externs",
        "snippet": "  private List<CompilerInput> externs;",
        "begin_line": 103,
        "end_line": 103,
        "comment": " The externs inputs"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.modules",
        "snippet": "  private List<JSModule> modules;",
        "begin_line": 106,
        "end_line": 106,
        "comment": " The JS source modules"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.moduleGraph",
        "snippet": "  private JSModuleGraph moduleGraph;",
        "begin_line": 110,
        "end_line": 110,
        "comment": " 2 modules, because we use this as a signal for which passes to run."
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.inputs",
        "snippet": "  private List<CompilerInput> inputs;",
        "begin_line": 113,
        "end_line": 113,
        "comment": " The JS source inputs"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.errorManager",
        "snippet": "  private ErrorManager errorManager;",
        "begin_line": 116,
        "end_line": 116,
        "comment": " error manager to which error management is delegated"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.warningsGuard",
        "snippet": "  private WarningsGuard warningsGuard;",
        "begin_line": 119,
        "end_line": 119,
        "comment": " Warnings guard for filtering warnings."
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.injectedLibraries",
        "snippet": "  private final Map<String, Node> injectedLibraries = Maps.newLinkedHashMap();",
        "begin_line": 123,
        "end_line": 123,
        "comment": " the library, so code can be inserted after."
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.externsRoot",
        "snippet": "  Node externsRoot;",
        "begin_line": 126,
        "end_line": 126,
        "comment": " Parse tree root nodes"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.jsRoot",
        "snippet": "  Node jsRoot;",
        "begin_line": 127,
        "end_line": 127,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.externAndJsRoot",
        "snippet": "  Node externAndJsRoot;",
        "begin_line": 128,
        "end_line": 128,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.inputsById",
        "snippet": "  private Map<InputId, CompilerInput> inputsById;",
        "begin_line": 130,
        "end_line": 130,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.sourceMap",
        "snippet": "  private SourceMap sourceMap;",
        "begin_line": 133,
        "end_line": 133,
        "comment": " The source code map "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.externExports",
        "snippet": "  private String externExports = null;",
        "begin_line": 136,
        "end_line": 136,
        "comment": " The externs created from the exports.  "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.uniqueNameId",
        "snippet": "  private int uniqueNameId = 0;",
        "begin_line": 142,
        "end_line": 142,
        "comment": "\n   * Ids for function inlining so that each declared name remains\n   * unique.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.hasRegExpGlobalReferences",
        "snippet": "  private boolean hasRegExpGlobalReferences = true;",
        "begin_line": 148,
        "end_line": 148,
        "comment": "\n   * Whether to assume there are references to the RegExp Global object\n   * properties.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.functionInformationMap",
        "snippet": "  private FunctionInformationMap functionInformationMap;",
        "begin_line": 151,
        "end_line": 151,
        "comment": " The function information map "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.debugLog",
        "snippet": "  private final StringBuilder debugLog = new StringBuilder();",
        "begin_line": 154,
        "end_line": 154,
        "comment": " Debugging information "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.defaultCodingConvention",
        "snippet": "  CodingConvention defaultCodingConvention = new ClosureCodingConvention();",
        "begin_line": 157,
        "end_line": 157,
        "comment": " Detects Google-specific coding conventions. "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.typeRegistry",
        "snippet": "  private JSTypeRegistry typeRegistry;",
        "begin_line": 159,
        "end_line": 159,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.parserConfig",
        "snippet": "  private Config parserConfig = null;",
        "begin_line": 160,
        "end_line": 160,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.abstractInterpreter",
        "snippet": "  private ReverseAbstractInterpreter abstractInterpreter;",
        "begin_line": 162,
        "end_line": 162,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.typeValidator",
        "snippet": "  private TypeValidator typeValidator;",
        "begin_line": 163,
        "end_line": 163,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.tracker",
        "snippet": "  public PerformanceTracker tracker;",
        "begin_line": 165,
        "end_line": 165,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.oldErrorReporter",
        "snippet": "  private final com.google.javascript.rhino.ErrorReporter oldErrorReporter =\n      RhinoErrorReporter.forOldRhino(this);",
        "begin_line": 168,
        "end_line": 169,
        "comment": " The oldErrorReporter exists so we can get errors from the JSTypeRegistry."
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.defaultErrorReporter",
        "snippet": "  private final ErrorReporter defaultErrorReporter =\n      RhinoErrorReporter.forNewRhino(this);",
        "begin_line": 172,
        "end_line": 173,
        "comment": " This error reporter gets the messages from the current Rhino parser."
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.OPTIMIZE_LOOP_ERROR",
        "snippet": "  public static final DiagnosticType OPTIMIZE_LOOP_ERROR = DiagnosticType.error(\n      \"JSC_OPTIMIZE_LOOP_ERROR\",\n      \"Exceeded max number of optimization iterations: {0}\");",
        "begin_line": 176,
        "end_line": 178,
        "comment": " Error strings used for reporting JSErrors "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.MOTION_ITERATIONS_ERROR",
        "snippet": "  public static final DiagnosticType MOTION_ITERATIONS_ERROR =\n      DiagnosticType.error(\"JSC_OPTIMIZE_LOOP_ERROR\",\n          \"Exceeded max number of code motion iterations: {0}\");",
        "begin_line": 179,
        "end_line": 181,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.COMPILER_STACK_SIZE",
        "snippet": "  private static final long COMPILER_STACK_SIZE = (1 << 21); // About 2MB",
        "begin_line": 185,
        "end_line": 185,
        "comment": " About 2MB"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.compilerExecutor",
        "snippet": "  private static final ExecutorService compilerExecutor =\n      Executors.newCachedThreadPool(new ThreadFactory() {\n    @Override public Thread newThread(Runnable r) {\n      return new Thread(null, r, \"jscompiler\", COMPILER_STACK_SIZE);\n    }\n  });",
        "begin_line": 195,
        "end_line": 200,
        "comment": "\n   * Under JRE 1.6, the JS Compiler overflows the stack when running on some\n   * large or complex JS code. When threads are available, we run all compile\n   * jobs on a separate thread with a larger stack.\n   *\n   * That way, we don't have to increase the stack size for *every* thread\n   * (which is what -Xss does).\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.compilerThread",
        "snippet": "  private Thread compilerThread = null;",
        "begin_line": 205,
        "end_line": 205,
        "comment": "\n   * Use a dedicated compiler thread per Compiler instance.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.useThreads",
        "snippet": "  private boolean useThreads = true;",
        "begin_line": 208,
        "end_line": 208,
        "comment": " Whether to use threads. "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.logger",
        "snippet": "  private static final Logger logger =\n      Logger.getLogger(\"com.google.javascript.jscomp\");",
        "begin_line": 216,
        "end_line": 217,
        "comment": "\n   * Logger for the whole com.google.javascript.jscomp domain -\n   * setting configuration for this logger affects all loggers\n   *  in other classes within the compiler.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.outStream",
        "snippet": "  private final PrintStream outStream;",
        "begin_line": 219,
        "end_line": 219,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.globalRefMap",
        "snippet": "  private GlobalVarReferenceMap globalRefMap = null;",
        "begin_line": 221,
        "end_line": 221,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.progress",
        "snippet": "  private volatile double progress = 0.0;",
        "begin_line": 223,
        "end_line": 223,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.lastPassName",
        "snippet": "  private String lastPassName;",
        "begin_line": 224,
        "end_line": 224,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.EMPTY_MODULE_LIST_ERROR",
        "snippet": "  private static final DiagnosticType EMPTY_MODULE_LIST_ERROR =\n      DiagnosticType.error(\"JSC_EMPTY_MODULE_LIST_ERROR\",\n          \"At least one module must be provided\");",
        "begin_line": 433,
        "end_line": 435,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.EMPTY_ROOT_MODULE_ERROR",
        "snippet": "  private static final DiagnosticType EMPTY_ROOT_MODULE_ERROR =\n      DiagnosticType.error(\"JSC_EMPTY_ROOT_MODULE_ERROR\",\n          \"Root module '{0}' must contain at least one source code input\");",
        "begin_line": 437,
        "end_line": 439,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.DUPLICATE_INPUT",
        "snippet": "  static final DiagnosticType DUPLICATE_INPUT =\n      DiagnosticType.error(\"JSC_DUPLICATE_INPUT\", \"Duplicate input: {0}\");",
        "begin_line": 508,
        "end_line": 509,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.DUPLICATE_EXTERN_INPUT",
        "snippet": "  static final DiagnosticType DUPLICATE_EXTERN_INPUT =\n      DiagnosticType.error(\"JSC_DUPLICATE_EXTERN_INPUT\",\n          \"Duplicate extern input: {0}\");",
        "begin_line": 510,
        "end_line": 512,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.sanityCheck",
        "snippet": "  private final PassFactory sanityCheck =\n      new PassFactory(\"sanityCheck\", false) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new SanityCheck(compiler);\n    }\n  };",
        "begin_line": 855,
        "end_line": 861,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.currentTracer",
        "snippet": "  private Tracer currentTracer = null;",
        "begin_line": 917,
        "end_line": 917,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.currentPassName",
        "snippet": "  private String currentPassName = null;",
        "begin_line": 918,
        "end_line": 918,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.syntheticCodeId",
        "snippet": "  private int syntheticCodeId = 0;",
        "begin_line": 1556,
        "end_line": 1556,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeBuilder",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.CodeBuilder.sb",
        "snippet": "    private final StringBuilder sb = new StringBuilder();",
        "begin_line": 1816,
        "end_line": 1816,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeBuilder",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.CodeBuilder.lineCount",
        "snippet": "    private int lineCount = 0;",
        "begin_line": 1817,
        "end_line": 1817,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeBuilder",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.CodeBuilder.colCount",
        "snippet": "    private int colCount = 0;",
        "begin_line": 1818,
        "end_line": 1818,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.recentChange",
        "snippet": "  protected final CodeChangeHandler.RecentChange recentChange =\n      new CodeChangeHandler.RecentChange();",
        "begin_line": 1957,
        "end_line": 1958,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.codeChangeHandlers",
        "snippet": "  private final List<CodeChangeHandler> codeChangeHandlers =\n      Lists.<CodeChangeHandler>newArrayList();",
        "begin_line": 1959,
        "end_line": 1960,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.SYNTHETIC_EXTERNS",
        "snippet": "  static final String SYNTHETIC_EXTERNS = \"{SyntheticVarsDeclar}\";",
        "begin_line": 1963,
        "end_line": 1963,
        "comment": " Name of the synthetic input that holds synthesized externs. "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.synthesizedExternsInput",
        "snippet": "  private CompilerInput synthesizedExternsInput = null;",
        "begin_line": 1965,
        "end_line": 1965,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 2281,
        "end_line": 2281,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.externsRoot",
        "snippet": "    Node externsRoot;",
        "begin_line": 2283,
        "end_line": 2283,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.jsRoot",
        "snippet": "    private Node jsRoot;",
        "begin_line": 2284,
        "end_line": 2284,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.externs",
        "snippet": "    private List<CompilerInput> externs;",
        "begin_line": 2285,
        "end_line": 2285,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.inputs",
        "snippet": "    private List<CompilerInput> inputs;",
        "begin_line": 2286,
        "end_line": 2286,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.modules",
        "snippet": "    private List<JSModule> modules;",
        "begin_line": 2287,
        "end_line": 2287,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.passConfigState",
        "snippet": "    private PassConfig.State passConfigState;",
        "begin_line": 2288,
        "end_line": 2288,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.typeRegistry",
        "snippet": "    private JSTypeRegistry typeRegistry;",
        "begin_line": 2289,
        "end_line": 2289,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.lifeCycleStage",
        "snippet": "    private AbstractCompiler.LifeCycleStage lifeCycleStage;",
        "begin_line": 2290,
        "end_line": 2290,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.injectedLibraries",
        "snippet": "    private Map<String, Node> injectedLibraries;",
        "begin_line": 2291,
        "end_line": 2291,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.XtbMessageBundle",
        "src_path": "src/com/google/javascript/jscomp/XtbMessageBundle.java",
        "signature": "com.google.javascript.jscomp.XtbMessageBundle.NOOP_RESOLVER",
        "snippet": "  private static final SecureEntityResolver NOOP_RESOLVER\n      = new SecureEntityResolver();",
        "begin_line": 47,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.XtbMessageBundle",
        "src_path": "src/com/google/javascript/jscomp/XtbMessageBundle.java",
        "signature": "com.google.javascript.jscomp.XtbMessageBundle.messages",
        "snippet": "  private final Map<String, JsMessage> messages;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.XtbMessageBundle",
        "src_path": "src/com/google/javascript/jscomp/XtbMessageBundle.java",
        "signature": "com.google.javascript.jscomp.XtbMessageBundle.idGenerator",
        "snippet": "  private final JsMessage.IdGenerator idGenerator;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Handler",
        "src_path": "src/com/google/javascript/jscomp/XtbMessageBundle.java",
        "signature": "com.google.javascript.jscomp.Handler.BUNDLE_ELEM_NAME",
        "snippet": "    private static final String BUNDLE_ELEM_NAME = \"translationbundle\";",
        "begin_line": 126,
        "end_line": 126,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Handler",
        "src_path": "src/com/google/javascript/jscomp/XtbMessageBundle.java",
        "signature": "com.google.javascript.jscomp.Handler.LANG_ATT_NAME",
        "snippet": "    private static final String LANG_ATT_NAME = \"lang\";",
        "begin_line": 127,
        "end_line": 127,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Handler",
        "src_path": "src/com/google/javascript/jscomp/XtbMessageBundle.java",
        "signature": "com.google.javascript.jscomp.Handler.TRANSLATION_ELEM_NAME",
        "snippet": "    private static final String TRANSLATION_ELEM_NAME = \"translation\";",
        "begin_line": 129,
        "end_line": 129,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Handler",
        "src_path": "src/com/google/javascript/jscomp/XtbMessageBundle.java",
        "signature": "com.google.javascript.jscomp.Handler.MESSAGE_ID_ATT_NAME",
        "snippet": "    private static final String MESSAGE_ID_ATT_NAME = \"id\";",
        "begin_line": 130,
        "end_line": 130,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Handler",
        "src_path": "src/com/google/javascript/jscomp/XtbMessageBundle.java",
        "signature": "com.google.javascript.jscomp.Handler.PLACEHOLDER_ELEM_NAME",
        "snippet": "    private static final String PLACEHOLDER_ELEM_NAME = \"ph\";",
        "begin_line": 132,
        "end_line": 132,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Handler",
        "src_path": "src/com/google/javascript/jscomp/XtbMessageBundle.java",
        "signature": "com.google.javascript.jscomp.Handler.PLACEHOLDER_NAME_ATT_NAME",
        "snippet": "    private static final String PLACEHOLDER_NAME_ATT_NAME = \"name\";",
        "begin_line": 133,
        "end_line": 133,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Handler",
        "src_path": "src/com/google/javascript/jscomp/XtbMessageBundle.java",
        "signature": "com.google.javascript.jscomp.Handler.lang",
        "snippet": "    String lang;",
        "begin_line": 135,
        "end_line": 135,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Handler",
        "src_path": "src/com/google/javascript/jscomp/XtbMessageBundle.java",
        "signature": "com.google.javascript.jscomp.Handler.msgBuilder",
        "snippet": "    JsMessage.Builder msgBuilder;",
        "begin_line": 136,
        "end_line": 136,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "signature": "com.google.javascript.jscomp.CodeConsumer.statementNeedsEnded",
        "snippet": "  boolean statementNeedsEnded = false;",
        "begin_line": 30,
        "end_line": 30,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "signature": "com.google.javascript.jscomp.CodeConsumer.statementStarted",
        "snippet": "  boolean statementStarted = false;",
        "begin_line": 31,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "signature": "com.google.javascript.jscomp.CodeConsumer.sawFunction",
        "snippet": "  boolean sawFunction = false;",
        "begin_line": 32,
        "end_line": 32,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InstrumentFunctions",
        "src_path": "src/com/google/javascript/jscomp/InstrumentFunctions.java",
        "signature": "com.google.javascript.jscomp.InstrumentFunctions.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InstrumentFunctions",
        "src_path": "src/com/google/javascript/jscomp/InstrumentFunctions.java",
        "signature": "com.google.javascript.jscomp.InstrumentFunctions.functionNames",
        "snippet": "  private final FunctionNames functionNames;",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InstrumentFunctions",
        "src_path": "src/com/google/javascript/jscomp/InstrumentFunctions.java",
        "signature": "com.google.javascript.jscomp.InstrumentFunctions.templateFilename",
        "snippet": "  private final String templateFilename;",
        "begin_line": 61,
        "end_line": 61,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InstrumentFunctions",
        "src_path": "src/com/google/javascript/jscomp/InstrumentFunctions.java",
        "signature": "com.google.javascript.jscomp.InstrumentFunctions.appNameStr",
        "snippet": "  private final String appNameStr;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InstrumentFunctions",
        "src_path": "src/com/google/javascript/jscomp/InstrumentFunctions.java",
        "signature": "com.google.javascript.jscomp.InstrumentFunctions.initCodeSource",
        "snippet": "  private final String initCodeSource;",
        "begin_line": 63,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InstrumentFunctions",
        "src_path": "src/com/google/javascript/jscomp/InstrumentFunctions.java",
        "signature": "com.google.javascript.jscomp.InstrumentFunctions.definedFunctionName",
        "snippet": "  private final String definedFunctionName;",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InstrumentFunctions",
        "src_path": "src/com/google/javascript/jscomp/InstrumentFunctions.java",
        "signature": "com.google.javascript.jscomp.InstrumentFunctions.reportFunctionName",
        "snippet": "  private final String reportFunctionName;",
        "begin_line": 65,
        "end_line": 65,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InstrumentFunctions",
        "src_path": "src/com/google/javascript/jscomp/InstrumentFunctions.java",
        "signature": "com.google.javascript.jscomp.InstrumentFunctions.reportFunctionExitName",
        "snippet": "  private final String reportFunctionExitName;",
        "begin_line": 66,
        "end_line": 66,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InstrumentFunctions",
        "src_path": "src/com/google/javascript/jscomp/InstrumentFunctions.java",
        "signature": "com.google.javascript.jscomp.InstrumentFunctions.appNameSetter",
        "snippet": "  private final String appNameSetter;",
        "begin_line": 67,
        "end_line": 67,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InstrumentFunctions",
        "src_path": "src/com/google/javascript/jscomp/InstrumentFunctions.java",
        "signature": "com.google.javascript.jscomp.InstrumentFunctions.declarationsToRemove",
        "snippet": "  private final List<String> declarationsToRemove;",
        "begin_line": 68,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveCallback",
        "src_path": "src/com/google/javascript/jscomp/InstrumentFunctions.java",
        "signature": "com.google.javascript.jscomp.RemoveCallback.removable",
        "snippet": "    private final List<String> removable;",
        "begin_line": 167,
        "end_line": 167,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InstrumentReturns",
        "src_path": "src/com/google/javascript/jscomp/InstrumentFunctions.java",
        "signature": "com.google.javascript.jscomp.InstrumentReturns.functionId",
        "snippet": "    private final int functionId;",
        "begin_line": 213,
        "end_line": 213,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckMissingGetCssName",
        "src_path": "src/com/google/javascript/jscomp/CheckMissingGetCssName.java",
        "signature": "com.google.javascript.jscomp.CheckMissingGetCssName.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 31,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckMissingGetCssName",
        "src_path": "src/com/google/javascript/jscomp/CheckMissingGetCssName.java",
        "signature": "com.google.javascript.jscomp.CheckMissingGetCssName.level",
        "snippet": "  private final CheckLevel level;",
        "begin_line": 32,
        "end_line": 32,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckMissingGetCssName",
        "src_path": "src/com/google/javascript/jscomp/CheckMissingGetCssName.java",
        "signature": "com.google.javascript.jscomp.CheckMissingGetCssName.blacklist",
        "snippet": "  private final Matcher blacklist;",
        "begin_line": 33,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckMissingGetCssName",
        "src_path": "src/com/google/javascript/jscomp/CheckMissingGetCssName.java",
        "signature": "com.google.javascript.jscomp.CheckMissingGetCssName.GET_CSS_NAME_FUNCTION",
        "snippet": "  static final String GET_CSS_NAME_FUNCTION = \"goog.getCssName\";",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckMissingGetCssName",
        "src_path": "src/com/google/javascript/jscomp/CheckMissingGetCssName.java",
        "signature": "com.google.javascript.jscomp.CheckMissingGetCssName.GET_UNIQUE_ID_FUNCTION",
        "snippet": "  static final String GET_UNIQUE_ID_FUNCTION = \".getUniqueId\";",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckMissingGetCssName",
        "src_path": "src/com/google/javascript/jscomp/CheckMissingGetCssName.java",
        "signature": "com.google.javascript.jscomp.CheckMissingGetCssName.MISSING_GETCSSNAME",
        "snippet": "  static final DiagnosticType MISSING_GETCSSNAME =\n      DiagnosticType.disabled(\n          \"JSC_MISSING_GETCSSNAME\",\n          \"missing goog.getCssName around literal ''{0}''\");",
        "begin_line": 38,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalNames",
        "src_path": "src/com/google/javascript/jscomp/CheckGlobalNames.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalNames.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalNames",
        "src_path": "src/com/google/javascript/jscomp/CheckGlobalNames.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalNames.convention",
        "snippet": "  private final CodingConvention convention;",
        "begin_line": 37,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalNames",
        "src_path": "src/com/google/javascript/jscomp/CheckGlobalNames.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalNames.level",
        "snippet": "  private final CheckLevel level;",
        "begin_line": 38,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalNames",
        "src_path": "src/com/google/javascript/jscomp/CheckGlobalNames.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalNames.namespace",
        "snippet": "  private GlobalNamespace namespace = null;",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalNames",
        "src_path": "src/com/google/javascript/jscomp/CheckGlobalNames.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalNames.objectPrototypeProps",
        "snippet": "  private final Set<String> objectPrototypeProps = Sets.newHashSet();",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalNames",
        "src_path": "src/com/google/javascript/jscomp/CheckGlobalNames.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalNames.functionPrototypeProps",
        "snippet": "  private final Set<String> functionPrototypeProps = Sets.newHashSet();",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalNames",
        "src_path": "src/com/google/javascript/jscomp/CheckGlobalNames.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalNames.UNDEFINED_NAME_WARNING",
        "snippet": "  static final DiagnosticType UNDEFINED_NAME_WARNING = DiagnosticType.warning(\n      \"JSC_UNDEFINED_NAME\",\n      \"{0} is never defined\");",
        "begin_line": 45,
        "end_line": 47,
        "comment": " Warnings"
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalNames",
        "src_path": "src/com/google/javascript/jscomp/CheckGlobalNames.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalNames.NAME_DEFINED_LATE_WARNING",
        "snippet": "  static final DiagnosticType NAME_DEFINED_LATE_WARNING =\n      DiagnosticType.warning(\n          \"JSC_NAME_DEFINED_LATE\",\n          \"{0} defined before its owner. {1} is defined at {2}:{3}\");",
        "begin_line": 49,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalNames",
        "src_path": "src/com/google/javascript/jscomp/CheckGlobalNames.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalNames.STRICT_MODULE_DEP_QNAME",
        "snippet": "  static final DiagnosticType STRICT_MODULE_DEP_QNAME =\n      DiagnosticType.disabled(\n          \"JSC_STRICT_MODULE_DEP_QNAME\",\n          \"module {0} cannot reference {2}, defined in \" +\n          \"module {1}\");",
        "begin_line": 54,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.compiler",
        "snippet": "  private AbstractCompiler compiler;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.root",
        "snippet": "  private final Node root;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.externsRoot",
        "snippet": "  private final Node externsRoot;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.inExterns",
        "snippet": "  private boolean inExterns;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.externsScope",
        "snippet": "  private Scope externsScope;",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.generated",
        "snippet": "  private boolean generated = false;",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.currentPreOrderIndex",
        "snippet": "  private int currentPreOrderIndex = 0;",
        "begin_line": 67,
        "end_line": 67,
        "comment": "\n   * Each reference has an index in post-order.\n   * Notice that some nodes are represented by 2 Ref objects, so\n   * this index is not necessarily unique.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.globalNames",
        "snippet": "  private List<Name> globalNames = new ArrayList<Name>();",
        "begin_line": 70,
        "end_line": 70,
        "comment": " Global namespace tree "
    },
    {
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.nameMap",
        "snippet": "  private Map<String, Name> nameMap = new HashMap<String, Name>();",
        "begin_line": 73,
        "end_line": 73,
        "comment": " Maps names (e.g. \"a.b.c\") to nodes in the global namespace tree "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeFilter",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.NodeFilter.newNodes",
        "snippet": "    private final Set<Node> newNodes;",
        "begin_line": 190,
        "end_line": 190,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BuildGlobalNamespace",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.BuildGlobalNamespace.nodeFilter",
        "snippet": "    private final Predicate<Node> nodeFilter;",
        "begin_line": 286,
        "end_line": 286,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.baseName",
        "snippet": "    private final String baseName;",
        "begin_line": 864,
        "end_line": 864,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.parent",
        "snippet": "    final Name parent;",
        "begin_line": 865,
        "end_line": 865,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.props",
        "snippet": "    List<Name> props;",
        "begin_line": 866,
        "end_line": 866,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.declaration",
        "snippet": "    private Ref declaration;",
        "begin_line": 869,
        "end_line": 869,
        "comment": " The first global assignment to a name. "
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.refs",
        "snippet": "    private List<Ref> refs;",
        "begin_line": 872,
        "end_line": 872,
        "comment": " All references to a name. This must contain {@code declaration}. "
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.type",
        "snippet": "    Type type;",
        "begin_line": 874,
        "end_line": 874,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.declaredType",
        "snippet": "    private boolean declaredType = false;",
        "begin_line": 875,
        "end_line": 875,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.hasDeclaredTypeDescendant",
        "snippet": "    private boolean hasDeclaredTypeDescendant = false;",
        "begin_line": 876,
        "end_line": 876,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.globalSets",
        "snippet": "    int globalSets = 0;",
        "begin_line": 877,
        "end_line": 877,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.localSets",
        "snippet": "    int localSets = 0;",
        "begin_line": 878,
        "end_line": 878,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.aliasingGets",
        "snippet": "    int aliasingGets = 0;",
        "begin_line": 879,
        "end_line": 879,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.totalGets",
        "snippet": "    int totalGets = 0;",
        "begin_line": 880,
        "end_line": 880,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.callGets",
        "snippet": "    int callGets = 0;",
        "begin_line": 881,
        "end_line": 881,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.deleteProps",
        "snippet": "    int deleteProps = 0;",
        "begin_line": 882,
        "end_line": 882,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.inExterns",
        "snippet": "    final boolean inExterns;",
        "begin_line": 883,
        "end_line": 883,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.docInfo",
        "snippet": "    JSDocInfo docInfo = null;",
        "begin_line": 885,
        "end_line": 885,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Ref",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Ref.node",
        "snippet": "    Node node;",
        "begin_line": 1176,
        "end_line": 1176,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Ref",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Ref.module",
        "snippet": "    final JSModule module;",
        "begin_line": 1177,
        "end_line": 1177,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Ref",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Ref.source",
        "snippet": "    final StaticSourceFile source;",
        "begin_line": 1178,
        "end_line": 1178,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Ref",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Ref.name",
        "snippet": "    final Name name;",
        "begin_line": 1179,
        "end_line": 1179,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Ref",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Ref.type",
        "snippet": "    final Type type;",
        "begin_line": 1180,
        "end_line": 1180,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Ref",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Ref.scope",
        "snippet": "    final Scope scope;",
        "begin_line": 1181,
        "end_line": 1181,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Ref",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Ref.preOrderIndex",
        "snippet": "    final int preOrderIndex;",
        "begin_line": 1182,
        "end_line": 1182,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Ref",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Ref.twin",
        "snippet": "    private Ref twin = null;",
        "begin_line": 1191,
        "end_line": 1191,
        "comment": "\n     * Certain types of references are actually double-refs. For example,\n     * var a = b = 0;\n     * counts as both a \"set\" of b and an \"alias\" of b.\n     *\n     * We create two Refs for this node, and mark them as twins of each other.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracker",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Tracker.compiler",
        "snippet": "    private final AbstractCompiler compiler;",
        "begin_line": 1287,
        "end_line": 1287,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracker",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Tracker.stream",
        "snippet": "    private final PrintStream stream;",
        "begin_line": 1288,
        "end_line": 1288,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracker",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Tracker.isInterestingSymbol",
        "snippet": "    private final Predicate<String> isInterestingSymbol;",
        "begin_line": 1289,
        "end_line": 1289,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracker",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Tracker.previousSymbolsInTree",
        "snippet": "    private Set<String> previousSymbolsInTree = ImmutableSet.of();",
        "begin_line": 1291,
        "end_line": 1291,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedClassProperties",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedClassProperties.compiler",
        "snippet": "  final AbstractCompiler compiler;",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedClassProperties",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedClassProperties.inExterns",
        "snippet": "  private boolean inExterns;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedClassProperties",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedClassProperties.used",
        "snippet": "  private Set<String> used = Sets.newHashSet();",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedClassProperties",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedClassProperties.candidates",
        "snippet": "  private List<Node> candidates = Lists.newArrayList();",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SpecializeModule",
        "src_path": "src/com/google/javascript/jscomp/SpecializeModule.java",
        "signature": "com.google.javascript.jscomp.SpecializeModule.compiler",
        "snippet": "  private AbstractCompiler compiler;",
        "begin_line": 86,
        "end_line": 86,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SpecializeModule",
        "src_path": "src/com/google/javascript/jscomp/SpecializeModule.java",
        "signature": "com.google.javascript.jscomp.SpecializeModule.specializedInputRootsByOriginal",
        "snippet": "  private Map<Node, Node> specializedInputRootsByOriginal;",
        "begin_line": 88,
        "end_line": 88,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SpecializeModule",
        "src_path": "src/com/google/javascript/jscomp/SpecializeModule.java",
        "signature": "com.google.javascript.jscomp.SpecializeModule.functionInfoBySpecializedFunctionNode",
        "snippet": "  private Map<Node, OriginalFunctionInformation>\n      functionInfoBySpecializedFunctionNode;",
        "begin_line": 90,
        "end_line": 91,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SpecializeModule",
        "src_path": "src/com/google/javascript/jscomp/SpecializeModule.java",
        "signature": "com.google.javascript.jscomp.SpecializeModule.specializationState",
        "snippet": "  private SpecializationState specializationState;",
        "begin_line": 93,
        "end_line": 93,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SpecializeModule",
        "src_path": "src/com/google/javascript/jscomp/SpecializeModule.java",
        "signature": "com.google.javascript.jscomp.SpecializeModule.specializationPassFactories",
        "snippet": "  private final PassFactory[] specializationPassFactories;",
        "begin_line": 95,
        "end_line": 95,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.OriginalFunctionInformation",
        "src_path": "src/com/google/javascript/jscomp/SpecializeModule.java",
        "signature": "com.google.javascript.jscomp.OriginalFunctionInformation.name",
        "snippet": "    private String name;",
        "begin_line": 443,
        "end_line": 443,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.OriginalFunctionInformation",
        "src_path": "src/com/google/javascript/jscomp/SpecializeModule.java",
        "signature": "com.google.javascript.jscomp.OriginalFunctionInformation.isAssignFunction",
        "snippet": "    private boolean isAssignFunction;",
        "begin_line": 449,
        "end_line": 449,
        "comment": "\n     *  a = function() {} if true;\n     *  function a() {} otherwise\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.OriginalFunctionInformation",
        "src_path": "src/com/google/javascript/jscomp/SpecializeModule.java",
        "signature": "com.google.javascript.jscomp.OriginalFunctionInformation.assignHasVar",
        "snippet": "    private boolean assignHasVar;",
        "begin_line": 451,
        "end_line": 451,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.OriginalFunctionInformation",
        "src_path": "src/com/google/javascript/jscomp/SpecializeModule.java",
        "signature": "com.google.javascript.jscomp.OriginalFunctionInformation.originalFunctionCopy",
        "snippet": "    private Node originalFunctionCopy;",
        "begin_line": 453,
        "end_line": 453,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SpecializationState",
        "src_path": "src/com/google/javascript/jscomp/SpecializeModule.java",
        "signature": "com.google.javascript.jscomp.SpecializationState.specializedFunctions",
        "snippet": "    private Set<Node> specializedFunctions;",
        "begin_line": 571,
        "end_line": 571,
        "comment": "\n     * The functions that the pass has specialized. These functions will\n     * be fixed up in non-specialized modules to their more general versions.\n     *\n     * This field is also used to determine whether specialization is enabled.\n     * If not null, specialization is enabled, otherwise it is disabled.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.SpecializationState",
        "src_path": "src/com/google/javascript/jscomp/SpecializeModule.java",
        "signature": "com.google.javascript.jscomp.SpecializationState.removedFunctions",
        "snippet": "    private Set<Node> removedFunctions;",
        "begin_line": 577,
        "end_line": 577,
        "comment": "\n     * The functions that the pass has removed. These functions will be\n     * redefined in non-specialized modules.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.SpecializationState",
        "src_path": "src/com/google/javascript/jscomp/SpecializeModule.java",
        "signature": "com.google.javascript.jscomp.SpecializationState.removedFunctionToBlock",
        "snippet": "    private Map<Node, Node> removedFunctionToBlock;",
        "begin_line": 579,
        "end_line": 579,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SpecializationState",
        "src_path": "src/com/google/javascript/jscomp/SpecializeModule.java",
        "signature": "com.google.javascript.jscomp.SpecializationState.initialModuleAliasAnalysis",
        "snippet": "    private SimpleFunctionAliasAnalysis initialModuleAliasAnalysis;",
        "begin_line": 581,
        "end_line": 581,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SpecializationState",
        "src_path": "src/com/google/javascript/jscomp/SpecializeModule.java",
        "signature": "com.google.javascript.jscomp.SpecializationState.hasChanged",
        "snippet": "    private boolean hasChanged = false;",
        "begin_line": 586,
        "end_line": 586,
        "comment": " Will be true if any new functions have been removed or specialized since\n     * {@link #resetHasChanged}.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckRequiresForConstructors",
        "src_path": "src/com/google/javascript/jscomp/CheckRequiresForConstructors.java",
        "signature": "com.google.javascript.jscomp.CheckRequiresForConstructors.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 39,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckRequiresForConstructors",
        "src_path": "src/com/google/javascript/jscomp/CheckRequiresForConstructors.java",
        "signature": "com.google.javascript.jscomp.CheckRequiresForConstructors.codingConvention",
        "snippet": "  private final CodingConvention codingConvention;",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckRequiresForConstructors",
        "src_path": "src/com/google/javascript/jscomp/CheckRequiresForConstructors.java",
        "signature": "com.google.javascript.jscomp.CheckRequiresForConstructors.level",
        "snippet": "  private final CheckLevel level;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckRequiresForConstructors",
        "src_path": "src/com/google/javascript/jscomp/CheckRequiresForConstructors.java",
        "signature": "com.google.javascript.jscomp.CheckRequiresForConstructors.MISSING_REQUIRE_WARNING",
        "snippet": "  static final DiagnosticType MISSING_REQUIRE_WARNING = DiagnosticType.disabled(\n      \"JSC_MISSING_REQUIRE_WARNING\",\n      \"''{0}'' used but not goog.require''d\");",
        "begin_line": 44,
        "end_line": 46,
        "comment": " Warnings"
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckRequiresForConstructorsCallback",
        "src_path": "src/com/google/javascript/jscomp/CheckRequiresForConstructors.java",
        "signature": "com.google.javascript.jscomp.CheckRequiresForConstructorsCallback.constructors",
        "snippet": "    private final List<String> constructors = Lists.newArrayList();",
        "begin_line": 99,
        "end_line": 99,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckRequiresForConstructorsCallback",
        "src_path": "src/com/google/javascript/jscomp/CheckRequiresForConstructors.java",
        "signature": "com.google.javascript.jscomp.CheckRequiresForConstructorsCallback.requires",
        "snippet": "    private final List<String> requires = Lists.newArrayList();",
        "begin_line": 100,
        "end_line": 100,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckRequiresForConstructorsCallback",
        "src_path": "src/com/google/javascript/jscomp/CheckRequiresForConstructors.java",
        "signature": "com.google.javascript.jscomp.CheckRequiresForConstructorsCallback.newNodes",
        "snippet": "    private final List<Node> newNodes = Lists.newArrayList();",
        "begin_line": 101,
        "end_line": 101,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageDefinition",
        "src_path": "src/com/google/javascript/jscomp/JsMessageDefinition.java",
        "signature": "com.google.javascript.jscomp.JsMessageDefinition.messageNode",
        "snippet": "  private final Node messageNode;",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageDefinition",
        "src_path": "src/com/google/javascript/jscomp/JsMessageDefinition.java",
        "signature": "com.google.javascript.jscomp.JsMessageDefinition.messageParentNode",
        "snippet": "  private final Node messageParentNode;",
        "begin_line": 44,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageDefinition",
        "src_path": "src/com/google/javascript/jscomp/JsMessageDefinition.java",
        "signature": "com.google.javascript.jscomp.JsMessageDefinition.visitingNode",
        "snippet": "  private final Node visitingNode;",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CrossModuleMethodMotion",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleMethodMotion.java",
        "signature": "com.google.javascript.jscomp.CrossModuleMethodMotion.NULL_COMMON_MODULE_ERROR",
        "snippet": "  static final DiagnosticType NULL_COMMON_MODULE_ERROR = DiagnosticType.error(\n      \"JSC_INTERNAL_ERROR_MODULE_DEPEND\",\n      \"null deepest common module\");",
        "begin_line": 36,
        "end_line": 38,
        "comment": " Internal errors"
    },
    {
        "class_name": "com.google.javascript.jscomp.CrossModuleMethodMotion",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleMethodMotion.java",
        "signature": "com.google.javascript.jscomp.CrossModuleMethodMotion.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CrossModuleMethodMotion",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleMethodMotion.java",
        "signature": "com.google.javascript.jscomp.CrossModuleMethodMotion.idGenerator",
        "snippet": "  private final IdGenerator idGenerator;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CrossModuleMethodMotion",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleMethodMotion.java",
        "signature": "com.google.javascript.jscomp.CrossModuleMethodMotion.analyzer",
        "snippet": "  private final AnalyzePrototypeProperties analyzer;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CrossModuleMethodMotion",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleMethodMotion.java",
        "signature": "com.google.javascript.jscomp.CrossModuleMethodMotion.moduleGraph",
        "snippet": "  private final JSModuleGraph moduleGraph;",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CrossModuleMethodMotion",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleMethodMotion.java",
        "signature": "com.google.javascript.jscomp.CrossModuleMethodMotion.STUB_METHOD_NAME",
        "snippet": "  static final String STUB_METHOD_NAME = \"JSCompiler_stubMethod\";",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CrossModuleMethodMotion",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleMethodMotion.java",
        "signature": "com.google.javascript.jscomp.CrossModuleMethodMotion.UNSTUB_METHOD_NAME",
        "snippet": "  static final String UNSTUB_METHOD_NAME = \"JSCompiler_unstubMethod\";",
        "begin_line": 46,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CrossModuleMethodMotion",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleMethodMotion.java",
        "signature": "com.google.javascript.jscomp.CrossModuleMethodMotion.STUB_DECLARATIONS",
        "snippet": "  static final String STUB_DECLARATIONS =\n      \"var JSCompiler_stubMap = [];\" +\n      \"function JSCompiler_stubMethod(JSCompiler_stubMethod_id) {\" +\n      \"  return function() {\" +\n      \"    return JSCompiler_stubMap[JSCompiler_stubMethod_id].apply(\" +\n      \"        this, arguments);\" +\n      \"  };\" +\n      \"}\" +\n      \"function JSCompiler_unstubMethod(\" +\n      \"    JSCompiler_unstubMethod_id, JSCompiler_unstubMethod_body) {\" +\n      \"  return JSCompiler_stubMap[JSCompiler_unstubMethod_id] = \" +\n      \"      JSCompiler_unstubMethod_body;\" +\n      \"}\";",
        "begin_line": 49,
        "end_line": 61,
        "comment": " Visible for testing"
    },
    {
        "class_name": "com.google.javascript.jscomp.IdGenerator",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleMethodMotion.java",
        "signature": "com.google.javascript.jscomp.IdGenerator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 0L;",
        "begin_line": 198,
        "end_line": 198,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IdGenerator",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleMethodMotion.java",
        "signature": "com.google.javascript.jscomp.IdGenerator.currentId",
        "snippet": "    private int currentId = 0;",
        "begin_line": 204,
        "end_line": 204,
        "comment": "\n     * Ids for cross-module method stubbing, so that each method has\n     * a unique id.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.MinimizeExitPoints",
        "src_path": "src/com/google/javascript/jscomp/MinimizeExitPoints.java",
        "signature": "com.google.javascript.jscomp.MinimizeExitPoints.compiler",
        "snippet": "  AbstractCompiler compiler;",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasSpecification",
        "src_path": "src/com/google/javascript/jscomp/AliasKeywords.java",
        "signature": "com.google.javascript.jscomp.AliasSpecification.nodes",
        "snippet": "    private final Map<Node, Node> nodes = Maps.newHashMap();",
        "begin_line": 81,
        "end_line": 81,
        "comment": " List of nodes to alias (e.g. all 'null' nodes). "
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasSpecification",
        "src_path": "src/com/google/javascript/jscomp/AliasKeywords.java",
        "signature": "com.google.javascript.jscomp.AliasSpecification.isAliased",
        "snippet": "    private boolean isAliased = false;",
        "begin_line": 87,
        "end_line": 87,
        "comment": "\n     * Have we declared the alias (e.g. did we inject var\n     * $$ALIAS_NULL=null; into the parse tree)?\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasSpecification",
        "src_path": "src/com/google/javascript/jscomp/AliasKeywords.java",
        "signature": "com.google.javascript.jscomp.AliasSpecification.aliasName",
        "snippet": "    private String aliasName;",
        "begin_line": 89,
        "end_line": 89,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasSpecification",
        "src_path": "src/com/google/javascript/jscomp/AliasKeywords.java",
        "signature": "com.google.javascript.jscomp.AliasSpecification.tokenId",
        "snippet": "    private int tokenId;",
        "begin_line": 91,
        "end_line": 91,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasKeywords",
        "src_path": "src/com/google/javascript/jscomp/AliasKeywords.java",
        "signature": "com.google.javascript.jscomp.AliasKeywords.ALIAS_NULL",
        "snippet": "  static final String ALIAS_NULL = \"JSCompiler_alias_NULL\";",
        "begin_line": 302,
        "end_line": 302,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasKeywords",
        "src_path": "src/com/google/javascript/jscomp/AliasKeywords.java",
        "signature": "com.google.javascript.jscomp.AliasKeywords.ALIAS_TRUE",
        "snippet": "  static final String ALIAS_TRUE = \"JSCompiler_alias_TRUE\";",
        "begin_line": 303,
        "end_line": 303,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasKeywords",
        "src_path": "src/com/google/javascript/jscomp/AliasKeywords.java",
        "signature": "com.google.javascript.jscomp.AliasKeywords.ALIAS_FALSE",
        "snippet": "  static final String ALIAS_FALSE = \"JSCompiler_alias_FALSE\";",
        "begin_line": 304,
        "end_line": 304,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasKeywords",
        "src_path": "src/com/google/javascript/jscomp/AliasKeywords.java",
        "signature": "com.google.javascript.jscomp.AliasKeywords.ALIAS_THROW",
        "snippet": "  static final String ALIAS_THROW = \"JSCompiler_alias_THROW\";",
        "begin_line": 305,
        "end_line": 305,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasKeywords",
        "src_path": "src/com/google/javascript/jscomp/AliasKeywords.java",
        "signature": "com.google.javascript.jscomp.AliasKeywords.ALIAS_VOID",
        "snippet": "  static final String ALIAS_VOID = \"JSCompiler_alias_VOID\";",
        "begin_line": 306,
        "end_line": 306,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasKeywords",
        "src_path": "src/com/google/javascript/jscomp/AliasKeywords.java",
        "signature": "com.google.javascript.jscomp.AliasKeywords.MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL",
        "snippet": "  static final int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL = 6;",
        "begin_line": 330,
        "end_line": 330,
        "comment": "\n   * Don't alias a keyword unless it's referenced at least\n   * MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL times. Aliasing a keyword has a\n   * cost (e.g. 'var XX=true;' costs 12 bytes). We make up for this\n   * cost by replacing references to the keyword with variables that\n   * have shorter names. If there are only a few references to a\n   * keyword, the cost outweighs the benefit. It is not possible to\n   * determine the exact break-even point without compiling twice\n   * (once with aliasing, another without) and comparing the\n   * post-gzipped size, so we define a minimum number of references\n   * required in order to alias. We choose 6 because the alias cost is\n   * ~7-12 bytes (12 bytes for 'var XX=true;', 7 bytes for a\n   * subsequent declaration that does not require its own 'var ' or\n   * semicolon, e.g. var XX=true,XY=null;), but each reference saves\n   * 2-3 bytes (2 for true and null, 3 for false). Thus, the break\n   * even point is 3 at best, and 6 at worst. We could use a\n   * CostEstimator to be precise, but requiring a constant number of\n   * occurrences is much simpler, and the added precision of a\n   * CostEstimator would save us <10 bytes for some unlikely edge\n   * cases (e.g. where false is referenced exactly 5 times, but does\n   * not get aliased).\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasKeywords",
        "src_path": "src/com/google/javascript/jscomp/AliasKeywords.java",
        "signature": "com.google.javascript.jscomp.AliasKeywords.MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW",
        "snippet": "  static final int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW =\n      estimateMinOccurrencesRequriedToAlias();",
        "begin_line": 336,
        "end_line": 337,
        "comment": "\n   * Don't alias throw statements unless throw is used at least\n   * MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW times.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasKeywords",
        "src_path": "src/com/google/javascript/jscomp/AliasKeywords.java",
        "signature": "com.google.javascript.jscomp.AliasKeywords.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 340,
        "end_line": 340,
        "comment": " Reference to JS Compiler "
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasKeywords",
        "src_path": "src/com/google/javascript/jscomp/AliasKeywords.java",
        "signature": "com.google.javascript.jscomp.AliasKeywords.aliasSpecifications",
        "snippet": "  private final List<AliasSpecification> aliasSpecifications;",
        "begin_line": 345,
        "end_line": 345,
        "comment": " List of alias specifications, stored in order which transformations\n   * should be applied. See {@link #createAliasSpecifications}.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasKeywords",
        "src_path": "src/com/google/javascript/jscomp/AliasKeywords.java",
        "signature": "com.google.javascript.jscomp.AliasKeywords.aliasTypes",
        "snippet": "  private final Map<Integer, AliasSpecification> aliasTypes;",
        "begin_line": 348,
        "end_line": 348,
        "comment": " Map from rhino nodes to the corresponding AliasSpecification "
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasKeywords",
        "src_path": "src/com/google/javascript/jscomp/AliasKeywords.java",
        "signature": "com.google.javascript.jscomp.AliasKeywords.aliasNames",
        "snippet": "  private final Set<String> aliasNames;",
        "begin_line": 351,
        "end_line": 351,
        "comment": " Set of alias names. "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeNameExtractor",
        "src_path": "src/com/google/javascript/jscomp/NodeNameExtractor.java",
        "signature": "com.google.javascript.jscomp.NodeNameExtractor.delimiter",
        "snippet": "  private final char delimiter;",
        "begin_line": 32,
        "end_line": 32,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeNameExtractor",
        "src_path": "src/com/google/javascript/jscomp/NodeNameExtractor.java",
        "signature": "com.google.javascript.jscomp.NodeNameExtractor.nextUniqueInt",
        "snippet": "  private int nextUniqueInt = 0;",
        "begin_line": 33,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckSuspiciousCode",
        "src_path": "src/com/google/javascript/jscomp/CheckSuspiciousCode.java",
        "signature": "com.google.javascript.jscomp.CheckSuspiciousCode.SUSPICIOUS_SEMICOLON",
        "snippet": "  static final DiagnosticType SUSPICIOUS_SEMICOLON = DiagnosticType.warning(\n      \"JSC_SUSPICIOUS_SEMICOLON\",\n      \"If this if/for/while really shouldn't have a body, use {}\");",
        "begin_line": 39,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckSuspiciousCode",
        "src_path": "src/com/google/javascript/jscomp/CheckSuspiciousCode.java",
        "signature": "com.google.javascript.jscomp.CheckSuspiciousCode.SUSPICIOUS_COMPARISON_WITH_NAN",
        "snippet": "  static final DiagnosticType SUSPICIOUS_COMPARISON_WITH_NAN =\n      DiagnosticType.warning(\n          \"JSC_SUSPICIOUS_NAN\",\n          \"Comparison again NaN is always false. Did you mean isNaN()?\");",
        "begin_line": 43,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JvmMetrics",
        "src_path": "src/com/google/javascript/jscomp/JvmMetrics.java",
        "signature": "com.google.javascript.jscomp.JvmMetrics.TABULAR_COLON_POS",
        "snippet": "  private static int TABULAR_COLON_POS = 40;",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JvmMetrics",
        "src_path": "src/com/google/javascript/jscomp/JvmMetrics.java",
        "signature": "com.google.javascript.jscomp.JvmMetrics.ONE_KILO_BYTE",
        "snippet": "  private static long ONE_KILO_BYTE = 1L << 10L;",
        "begin_line": 37,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JvmMetrics",
        "src_path": "src/com/google/javascript/jscomp/JvmMetrics.java",
        "signature": "com.google.javascript.jscomp.JvmMetrics.ONE_MEGA_BYTE",
        "snippet": "  private static long ONE_MEGA_BYTE = 1L << 20L;",
        "begin_line": 38,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JvmMetrics",
        "src_path": "src/com/google/javascript/jscomp/JvmMetrics.java",
        "signature": "com.google.javascript.jscomp.JvmMetrics.ONE_GIGA_BYTE",
        "snippet": "  private static long ONE_GIGA_BYTE = 1L << 30L;",
        "begin_line": 39,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AnalyzeNameReferences",
        "src_path": "src/com/google/javascript/jscomp/AnalyzeNameReferences.java",
        "signature": "com.google.javascript.jscomp.AnalyzeNameReferences.graph",
        "snippet": "  private NameReferenceGraph graph;",
        "begin_line": 44,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AnalyzeNameReferences",
        "src_path": "src/com/google/javascript/jscomp/AnalyzeNameReferences.java",
        "signature": "com.google.javascript.jscomp.AnalyzeNameReferences.moduleGraph",
        "snippet": "  private final JSModuleGraph moduleGraph;",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AnalyzeNameReferences",
        "src_path": "src/com/google/javascript/jscomp/AnalyzeNameReferences.java",
        "signature": "com.google.javascript.jscomp.AnalyzeNameReferences.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 46,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameInfo",
        "src_path": "src/com/google/javascript/jscomp/AnalyzeNameReferences.java",
        "signature": "com.google.javascript.jscomp.NameInfo.referenced",
        "snippet": "    private boolean referenced = false;",
        "begin_line": 98,
        "end_line": 98,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameInfo",
        "src_path": "src/com/google/javascript/jscomp/AnalyzeNameReferences.java",
        "signature": "com.google.javascript.jscomp.NameInfo.deepestCommonModuleRef",
        "snippet": "    private JSModule deepestCommonModuleRef = null;",
        "begin_line": 99,
        "end_line": 99,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.cfg",
        "snippet": "  private final ControlFlowGraph<N> cfg;",
        "begin_line": 87,
        "end_line": 87,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.joinOp",
        "snippet": "  final JoinOp<L> joinOp;",
        "begin_line": 88,
        "end_line": 88,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.orderedWorkSet",
        "snippet": "  protected final Set<DiGraphNode<N, Branch>> orderedWorkSet;",
        "begin_line": 89,
        "end_line": 89,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.MAX_STEPS",
        "snippet": "  public static final int MAX_STEPS = 200000;",
        "begin_line": 97,
        "end_line": 97,
        "comment": "\n   * Feel free to increase this to a reasonable number if you are finding that\n   * more and more passes need more than 200000 steps before finding a\n   * fixed-point. If you just have a special case, consider calling\n   * {@link #analyse(int)} instead.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowState",
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.FlowState.in",
        "snippet": "    private L in;",
        "begin_line": 332,
        "end_line": 332,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowState",
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.FlowState.out",
        "snippet": "    private L out;",
        "begin_line": 333,
        "end_line": 333,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MaxIterationsExceededException",
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.MaxIterationsExceededException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 383,
        "end_line": 383,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BranchedFlowState",
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.BranchedFlowState.in",
        "snippet": "    private L in;",
        "begin_line": 487,
        "end_line": 487,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BranchedFlowState",
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.BranchedFlowState.out",
        "snippet": "    private List<L> out;",
        "begin_line": 488,
        "end_line": 488,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SuppressDocWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/SuppressDocWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.SuppressDocWarningsGuard.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 31,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SuppressDocWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/SuppressDocWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.SuppressDocWarningsGuard.suppressors",
        "snippet": "  private final Map<String, DiagnosticGroupWarningsGuard> suppressors =\n      Maps.newHashMap();",
        "begin_line": 34,
        "end_line": 35,
        "comment": " Warnings guards for each suppressible warnings group, indexed by name. "
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.source",
        "snippet": "  private final SourceExcerptProvider source;",
        "begin_line": 29,
        "end_line": 29,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.colorize",
        "snippet": "  private boolean colorize;",
        "begin_line": 30,
        "end_line": 30,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.SUPPORTED_COLOR_TERMINALS",
        "snippet": "  private static final Set<String> SUPPORTED_COLOR_TERMINALS =\n      ImmutableSet.of(\"xterm\",\n                      \"xterm-color\",\n                      \"xterm-256color\",\n                      \"screen-bce\");",
        "begin_line": 47,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.controlCharacter",
        "snippet": "    private final String controlCharacter;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.UNUSED",
        "snippet": "  static final DiagnosticType UNUSED =\n      DiagnosticType.warning(\"JSC_UNUSED\", \"{0}\");",
        "begin_line": 30,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.groupsByName",
        "snippet": "  private static final Map<String, DiagnosticGroup> groupsByName =\n      Maps.newHashMap();",
        "begin_line": 35,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES",
        "snippet": "  static final String DIAGNOSTIC_GROUP_NAMES =\n      \"accessControls, ambiguousFunctionDecl, cast, checkRegExp, \" +\n      \"checkTypes, checkVars, const, constantProperty, deprecated, \" +\n      \"duplicateMessage, \" +\n      \"es5Strict, externsValidation, fileoverviewTags, globalThis, \" +\n      \"internetExplorerChecks, invalidCasts, misplacedTypeAnnotation, \" +\n      \"missingProperties, \" +\n      \"nonStandardJsDocs, suspiciousCode, strictModuleDepCheck, \" +\n      \"typeInvalidation, \" +\n      \"undefinedNames, undefinedVars, unknownDefines, uselessCode, \" +\n      \"visibility\";",
        "begin_line": 78,
        "end_line": 88,
        "comment": " to parser/ParserConfig.properties"
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS",
        "snippet": "  public static final DiagnosticGroup GLOBAL_THIS =\n      DiagnosticGroups.registerGroup(\"globalThis\",\n          CheckGlobalThis.GLOBAL_THIS);",
        "begin_line": 90,
        "end_line": 92,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED",
        "snippet": "  public static final DiagnosticGroup DEPRECATED =\n      DiagnosticGroups.registerGroup(\"deprecated\",\n          CheckAccessControls.DEPRECATED_NAME,\n          CheckAccessControls.DEPRECATED_NAME_REASON,\n          CheckAccessControls.DEPRECATED_PROP,\n          CheckAccessControls.DEPRECATED_PROP_REASON,\n          CheckAccessControls.DEPRECATED_CLASS,\n          CheckAccessControls.DEPRECATED_CLASS_REASON);",
        "begin_line": 94,
        "end_line": 101,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.VISIBILITY",
        "snippet": "  public static final DiagnosticGroup VISIBILITY =\n      DiagnosticGroups.registerGroup(\"visibility\",\n          CheckAccessControls.BAD_PRIVATE_GLOBAL_ACCESS,\n          CheckAccessControls.BAD_PRIVATE_PROPERTY_ACCESS,\n          CheckAccessControls.BAD_PROTECTED_PROPERTY_ACCESS,\n          CheckAccessControls.PRIVATE_OVERRIDE,\n          CheckAccessControls.VISIBILITY_MISMATCH);",
        "begin_line": 103,
        "end_line": 109,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY",
        "snippet": "  public static final DiagnosticGroup CONSTANT_PROPERTY =\n      DiagnosticGroups.registerGroup(\"constantProperty\",\n          CheckAccessControls.CONST_PROPERTY_DELETED,\n          CheckAccessControls.CONST_PROPERTY_REASSIGNED_VALUE);",
        "begin_line": 111,
        "end_line": 114,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC",
        "snippet": "  public static final DiagnosticGroup NON_STANDARD_JSDOC =\n      DiagnosticGroups.registerGroup(\"nonStandardJsDocs\",\n          RhinoErrorReporter.BAD_JSDOC_ANNOTATION);",
        "begin_line": 116,
        "end_line": 118,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS",
        "snippet": "  public static final DiagnosticGroup ACCESS_CONTROLS =\n      DiagnosticGroups.registerGroup(\"accessControls\",\n          DEPRECATED, VISIBILITY);",
        "begin_line": 120,
        "end_line": 122,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS",
        "snippet": "  public static final DiagnosticGroup INVALID_CASTS =\n      DiagnosticGroups.registerGroup(\"invalidCasts\",\n          TypeValidator.INVALID_CAST);",
        "begin_line": 124,
        "end_line": 126,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC",
        "snippet": "  public static final DiagnosticGroup FILEOVERVIEW_JSDOC =\n      DiagnosticGroups.registerDeprecatedGroup(\"fileoverviewTags\");",
        "begin_line": 128,
        "end_line": 129,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.STRICT_MODULE_DEP_CHECK",
        "snippet": "  public static final DiagnosticGroup STRICT_MODULE_DEP_CHECK =\n      DiagnosticGroups.registerGroup(\"strictModuleDepCheck\",\n          VarCheck.STRICT_MODULE_DEP_ERROR,\n          CheckGlobalNames.STRICT_MODULE_DEP_QNAME);",
        "begin_line": 131,
        "end_line": 134,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.VIOLATED_MODULE_DEP",
        "snippet": "  public static final DiagnosticGroup VIOLATED_MODULE_DEP =\n      DiagnosticGroups.registerGroup(\"violatedModuleDep\",\n          VarCheck.VIOLATED_MODULE_DEP_ERROR);",
        "begin_line": 136,
        "end_line": 138,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.EXTERNS_VALIDATION",
        "snippet": "  public static final DiagnosticGroup EXTERNS_VALIDATION =\n      DiagnosticGroups.registerGroup(\"externsValidation\",\n          VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR,\n          VarCheck.UNDEFINED_EXTERN_VAR_ERROR);",
        "begin_line": 140,
        "end_line": 143,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL",
        "snippet": "  public static final DiagnosticGroup AMBIGUOUS_FUNCTION_DECL =\n      DiagnosticGroups.registerGroup(\"ambiguousFunctionDecl\",\n          VariableReferenceCheck.AMBIGUOUS_FUNCTION_DECL);",
        "begin_line": 145,
        "end_line": 147,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES",
        "snippet": "  public static final DiagnosticGroup UNKNOWN_DEFINES =\n      DiagnosticGroups.registerGroup(\"unknownDefines\",\n          ProcessDefines.UNKNOWN_DEFINE_WARNING);",
        "begin_line": 149,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.TWEAKS",
        "snippet": "  public static final DiagnosticGroup TWEAKS =\n      DiagnosticGroups.registerGroup(\"tweakValidation\",\n          ProcessTweaks.INVALID_TWEAK_DEFAULT_VALUE_WARNING,\n          ProcessTweaks.TWEAK_WRONG_GETTER_TYPE_WARNING,\n          ProcessTweaks.UNKNOWN_TWEAK_WARNING);",
        "begin_line": 153,
        "end_line": 157,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES",
        "snippet": "  public static final DiagnosticGroup MISSING_PROPERTIES =\n      DiagnosticGroups.registerGroup(\"missingProperties\",\n          TypeCheck.INEXISTENT_PROPERTY);",
        "begin_line": 159,
        "end_line": 161,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS",
        "snippet": "  public static final DiagnosticGroup INTERNET_EXPLORER_CHECKS =\n      DiagnosticGroups.registerGroup(\"internetExplorerChecks\",\n          RhinoErrorReporter.TRAILING_COMMA);",
        "begin_line": 163,
        "end_line": 165,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_VARIABLES",
        "snippet": "  public static final DiagnosticGroup UNDEFINED_VARIABLES =\n      DiagnosticGroups.registerGroup(\"undefinedVars\",\n          VarCheck.UNDEFINED_VAR_ERROR);",
        "begin_line": 167,
        "end_line": 169,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES",
        "snippet": "  public static final DiagnosticGroup UNDEFINED_NAMES =\n      DiagnosticGroups.registerGroup(\"undefinedNames\",\n          CheckGlobalNames.UNDEFINED_NAME_WARNING);",
        "begin_line": 171,
        "end_line": 173,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT",
        "snippet": "  public static final DiagnosticGroup DEBUGGER_STATEMENT_PRESENT =\n      DiagnosticGroups.registerGroup(\"checkDebuggerStatement\",\n          CheckDebuggerStatement.DEBUGGER_STATEMENT_PRESENT);",
        "begin_line": 175,
        "end_line": 177,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CHECK_REGEXP",
        "snippet": "  public static final DiagnosticGroup CHECK_REGEXP =\n      DiagnosticGroups.registerGroup(\"checkRegExp\",\n          CheckRegExp.REGEXP_REFERENCE,\n          CheckRegExp.MALFORMED_REGEXP);",
        "begin_line": 179,
        "end_line": 182,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES",
        "snippet": "  public static final DiagnosticGroup CHECK_TYPES =\n      DiagnosticGroups.registerGroup(\"checkTypes\",\n          TypeValidator.ALL_DIAGNOSTICS,\n          TypeCheck.ALL_DIAGNOSTICS);",
        "begin_line": 184,
        "end_line": 187,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES",
        "snippet": "  public static final DiagnosticGroup CHECK_VARIABLES =\n      DiagnosticGroups.registerGroup(\"checkVars\",\n          VarCheck.UNDEFINED_VAR_ERROR,\n          SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);",
        "begin_line": 189,
        "end_line": 192,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CHECK_USELESS_CODE",
        "snippet": "  public static final DiagnosticGroup CHECK_USELESS_CODE =\n      DiagnosticGroups.registerGroup(\"uselessCode\",\n          CheckSideEffects.USELESS_CODE_ERROR,\n          CheckUnreachableCode.UNREACHABLE_CODE);",
        "begin_line": 194,
        "end_line": 197,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CONST",
        "snippet": "  public static final DiagnosticGroup CONST =\n      DiagnosticGroups.registerGroup(\"const\",\n          CheckAccessControls.CONST_PROPERTY_DELETED,\n          CheckAccessControls.CONST_PROPERTY_REASSIGNED_VALUE,\n          ConstCheck.CONST_REASSIGNED_VALUE_ERROR);",
        "begin_line": 199,
        "end_line": 203,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.TYPE_INVALIDATION",
        "snippet": "  public static final DiagnosticGroup TYPE_INVALIDATION =\n      DiagnosticGroups.registerGroup(\"typeInvalidation\",\n          DisambiguateProperties.Warnings.INVALIDATION);",
        "begin_line": 205,
        "end_line": 207,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_VARS",
        "snippet": "  public static final DiagnosticGroup DUPLICATE_VARS =\n      DiagnosticGroups.registerGroup(\"duplicate\",\n          SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR,\n          TypeValidator.DUP_VAR_DECLARATION);",
        "begin_line": 209,
        "end_line": 212,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT",
        "snippet": "  public static final DiagnosticGroup ES5_STRICT =\n      DiagnosticGroups.registerGroup(\"es5Strict\",\n          ControlStructureCheck.USE_OF_WITH,\n          StrictModeCheck.UNKNOWN_VARIABLE,\n          StrictModeCheck.EVAL_DECLARATION,\n          StrictModeCheck.EVAL_ASSIGNMENT,\n          StrictModeCheck.ARGUMENTS_DECLARATION,\n          StrictModeCheck.ARGUMENTS_ASSIGNMENT,\n          StrictModeCheck.DELETE_VARIABLE,\n          StrictModeCheck.DUPLICATE_OBJECT_KEY);",
        "begin_line": 214,
        "end_line": 223,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CHECK_PROVIDES",
        "snippet": "  public static final DiagnosticGroup CHECK_PROVIDES =\n      DiagnosticGroups.registerGroup(\"checkProvides\",\n          CheckProvides.MISSING_PROVIDE_WARNING);",
        "begin_line": 225,
        "end_line": 227,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_MESSAGE",
        "snippet": "  public static final DiagnosticGroup DUPLICATE_MESSAGE =\n      DiagnosticGroups.registerGroup(\"duplicateMessage\",\n          JsMessageVisitor.MESSAGE_DUPLICATE_KEY);",
        "begin_line": 229,
        "end_line": 231,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.MISPLACED_TYPE_ANNOTATION",
        "snippet": "  public static final DiagnosticGroup MISPLACED_TYPE_ANNOTATION =\n      DiagnosticGroups.registerGroup(\"misplacedTypeAnnotation\",\n          RhinoErrorReporter.MISPLACED_TYPE_ANNOTATION);",
        "begin_line": 233,
        "end_line": 235,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CAST",
        "snippet": "  public static final DiagnosticGroup CAST =\n      DiagnosticGroups.registerGroup(\"cast\",\n          TypeValidator.INVALID_CAST);",
        "begin_line": 237,
        "end_line": 239,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.SUSPICIOUS_CODE",
        "snippet": "  public static final DiagnosticGroup SUSPICIOUS_CODE =\n      DiagnosticGroups.registerGroup(\"suspiciousCode\",\n          CheckSuspiciousCode.SUSPICIOUS_SEMICOLON,\n          CheckSuspiciousCode.SUSPICIOUS_COMPARISON_WITH_NAN);",
        "begin_line": 241,
        "end_line": 244,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.module",
        "snippet": "  private JSModule module;",
        "begin_line": 45,
        "end_line": 45,
        "comment": " Info about where the file lives."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.id",
        "snippet": "  final private InputId id;",
        "begin_line": 46,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.ast",
        "snippet": "  private final SourceAst ast;",
        "begin_line": 49,
        "end_line": 49,
        "comment": " The AST."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.provides",
        "snippet": "  private final Set<String> provides = Sets.newHashSet();",
        "begin_line": 52,
        "end_line": 52,
        "comment": " Provided and required symbols."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.requires",
        "snippet": "  private final Set<String> requires = Sets.newHashSet();",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.generatedDependencyInfoFromSource",
        "snippet": "  private boolean generatedDependencyInfoFromSource = false;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.compiler",
        "snippet": "  private transient AbstractCompiler compiler;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " We do not want to persist this across serialized state."
    },
    {
        "class_name": "com.google.javascript.jscomp.DepsFinder",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.DepsFinder.provides",
        "snippet": "    private final List<String> provides = Lists.newArrayList();",
        "begin_line": 253,
        "end_line": 253,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DepsFinder",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.DepsFinder.requires",
        "snippet": "    private final List<String> requires = Lists.newArrayList();",
        "begin_line": 254,
        "end_line": 254,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DepsFinder",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.DepsFinder.codingConvention",
        "snippet": "    private final CodingConvention codingConvention =\n        new ClosureCodingConvention();",
        "begin_line": 255,
        "end_line": 256,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckSideEffects",
        "src_path": "src/com/google/javascript/jscomp/CheckSideEffects.java",
        "signature": "com.google.javascript.jscomp.CheckSideEffects.USELESS_CODE_ERROR",
        "snippet": "  static final DiagnosticType USELESS_CODE_ERROR = DiagnosticType.warning(\n      \"JSC_USELESS_CODE\",\n      \"Suspicious code. {0}\");",
        "begin_line": 43,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckSideEffects",
        "src_path": "src/com/google/javascript/jscomp/CheckSideEffects.java",
        "signature": "com.google.javascript.jscomp.CheckSideEffects.PROTECTOR_FN",
        "snippet": "  static final String PROTECTOR_FN = \"JSCOMPILER_PRESERVE\";",
        "begin_line": 47,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckSideEffects",
        "src_path": "src/com/google/javascript/jscomp/CheckSideEffects.java",
        "signature": "com.google.javascript.jscomp.CheckSideEffects.level",
        "snippet": "  private final CheckLevel level;",
        "begin_line": 49,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckSideEffects",
        "src_path": "src/com/google/javascript/jscomp/CheckSideEffects.java",
        "signature": "com.google.javascript.jscomp.CheckSideEffects.problemNodes",
        "snippet": "  private final List<Node> problemNodes = Lists.newArrayList();",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckSideEffects",
        "src_path": "src/com/google/javascript/jscomp/CheckSideEffects.java",
        "signature": "com.google.javascript.jscomp.CheckSideEffects.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckSideEffects",
        "src_path": "src/com/google/javascript/jscomp/CheckSideEffects.java",
        "signature": "com.google.javascript.jscomp.CheckSideEffects.protectSideEffectFreeCode",
        "snippet": "  private final boolean protectSideEffectFreeCode;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StripProtection",
        "src_path": "src/com/google/javascript/jscomp/CheckSideEffects.java",
        "signature": "com.google.javascript.jscomp.StripProtection.compiler",
        "snippet": "    private final AbstractCompiler compiler;",
        "begin_line": 171,
        "end_line": 171,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CollapseVariableDeclarations",
        "src_path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java",
        "signature": "com.google.javascript.jscomp.CollapseVariableDeclarations.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " Reference to JS Compiler "
    },
    {
        "class_name": "com.google.javascript.jscomp.Collapse",
        "src_path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java",
        "signature": "com.google.javascript.jscomp.Collapse.startNode",
        "snippet": "    final Node startNode;",
        "begin_line": 74,
        "end_line": 74,
        "comment": "\n     * Variable declaration that any following var nodes should be\n     * collapsed into\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.Collapse",
        "src_path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java",
        "signature": "com.google.javascript.jscomp.Collapse.endNode",
        "snippet": "    final Node endNode;",
        "begin_line": 79,
        "end_line": 79,
        "comment": "\n     * Last node (non-inclusive) of the chain of nodes to collapse.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.Collapse",
        "src_path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java",
        "signature": "com.google.javascript.jscomp.Collapse.parent",
        "snippet": "    final Node parent;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " Parent of the nodes to the collapse "
    },
    {
        "class_name": "com.google.javascript.jscomp.CollapseVariableDeclarations",
        "src_path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java",
        "signature": "com.google.javascript.jscomp.CollapseVariableDeclarations.collapses",
        "snippet": "  private final List<Collapse> collapses = Lists.newArrayList();",
        "begin_line": 94,
        "end_line": 94,
        "comment": "\n   * Collapses to do in this pass.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CollapseVariableDeclarations",
        "src_path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java",
        "signature": "com.google.javascript.jscomp.CollapseVariableDeclarations.nodesToCollapse",
        "snippet": "  private final Set<Node> nodesToCollapse = Sets.newHashSet();",
        "begin_line": 101,
        "end_line": 101,
        "comment": "\n   * Nodes we've already looked at for collapsing, so that we don't look at them\n   * again (we look ahead when examining what nodes can be collapsed, and the\n   * node traversal may give them to us again)\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.GatherCollapses",
        "src_path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java",
        "signature": "com.google.javascript.jscomp.GatherCollapses.blacklistedVars",
        "snippet": "    private final Set<Var> blacklistedVars = Sets.newHashSet();",
        "begin_line": 134,
        "end_line": 134,
        "comment": " This is a workaround for a bug in Firefox."
    },
    {
        "class_name": "com.google.javascript.jscomp.AstParallelizer",
        "src_path": "src/com/google/javascript/jscomp/AstParallelizer.java",
        "signature": "com.google.javascript.jscomp.AstParallelizer.TEMP_NAME",
        "snippet": "  public static final String TEMP_NAME = \"JSC_TMP_PLACE_HOLDER\";",
        "begin_line": 37,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AstParallelizer",
        "src_path": "src/com/google/javascript/jscomp/AstParallelizer.java",
        "signature": "com.google.javascript.jscomp.AstParallelizer.shouldSplit",
        "snippet": "  private final Predicate<Node> shouldSplit;",
        "begin_line": 39,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AstParallelizer",
        "src_path": "src/com/google/javascript/jscomp/AstParallelizer.java",
        "signature": "com.google.javascript.jscomp.AstParallelizer.placeHolderProvider",
        "snippet": "  private final Supplier<Node> placeHolderProvider;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AstParallelizer",
        "src_path": "src/com/google/javascript/jscomp/AstParallelizer.java",
        "signature": "com.google.javascript.jscomp.AstParallelizer.forest",
        "snippet": "  private final List<Node> forest;",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AstParallelizer",
        "src_path": "src/com/google/javascript/jscomp/AstParallelizer.java",
        "signature": "com.google.javascript.jscomp.AstParallelizer.root",
        "snippet": "  private final Node root;",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AstParallelizer",
        "src_path": "src/com/google/javascript/jscomp/AstParallelizer.java",
        "signature": "com.google.javascript.jscomp.AstParallelizer.includeRoot",
        "snippet": "  private final boolean includeRoot;",
        "begin_line": 47,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AstParallelizer",
        "src_path": "src/com/google/javascript/jscomp/AstParallelizer.java",
        "signature": "com.google.javascript.jscomp.AstParallelizer.detachPointList",
        "snippet": "  private final List<DetachPoint> detachPointList;",
        "begin_line": 50,
        "end_line": 50,
        "comment": " Maps to place holder to the original function."
    },
    {
        "class_name": "com.google.javascript.jscomp.DetachPoint",
        "src_path": "src/com/google/javascript/jscomp/AstParallelizer.java",
        "signature": "com.google.javascript.jscomp.DetachPoint.placeHolder",
        "snippet": "    private Node placeHolder;",
        "begin_line": 205,
        "end_line": 205,
        "comment": " The place holder to remember where the original node was."
    },
    {
        "class_name": "com.google.javascript.jscomp.DetachPoint",
        "src_path": "src/com/google/javascript/jscomp/AstParallelizer.java",
        "signature": "com.google.javascript.jscomp.DetachPoint.before",
        "snippet": "    private Node before;",
        "begin_line": 208,
        "end_line": 208,
        "comment": " The node before the place holder and the original, null if"
    },
    {
        "class_name": "com.google.javascript.jscomp.DetachPoint",
        "src_path": "src/com/google/javascript/jscomp/AstParallelizer.java",
        "signature": "com.google.javascript.jscomp.DetachPoint.original",
        "snippet": "    private Node original;",
        "begin_line": 211,
        "end_line": 211,
        "comment": " The root of the subtree to be temporary detached."
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceInformationAnnotator",
        "src_path": "src/com/google/javascript/jscomp/SourceInformationAnnotator.java",
        "signature": "com.google.javascript.jscomp.SourceInformationAnnotator.sourceFile",
        "snippet": "  private final String sourceFile;",
        "begin_line": 44,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceInformationAnnotator",
        "src_path": "src/com/google/javascript/jscomp/SourceInformationAnnotator.java",
        "signature": "com.google.javascript.jscomp.SourceInformationAnnotator.doSanityChecks",
        "snippet": "  private final boolean doSanityChecks;",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1;",
        "begin_line": 34,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.types",
        "snippet": "  private final Set<DiagnosticType> types;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " The set of types represented by this group, hashed by key."
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.name",
        "snippet": "  private final String name;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " A human-readable name for the group."
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.singletons",
        "snippet": "  private static final Map<DiagnosticType, DiagnosticGroup> singletons =\n      Maps.newHashMap();",
        "begin_line": 66,
        "end_line": 67,
        "comment": " DiagnosticGroups with only a single DiagnosticType."
    },
    {
        "class_name": "com.google.javascript.jscomp.InferJSDocInfo",
        "src_path": "src/com/google/javascript/jscomp/InferJSDocInfo.java",
        "signature": "com.google.javascript.jscomp.InferJSDocInfo.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InferJSDocInfo",
        "src_path": "src/com/google/javascript/jscomp/InferJSDocInfo.java",
        "signature": "com.google.javascript.jscomp.InferJSDocInfo.inExterns",
        "snippet": "  @SuppressWarnings(\"unused\")\n  private boolean inExterns;",
        "begin_line": 65,
        "end_line": 66,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineObjectLiterals",
        "src_path": "src/com/google/javascript/jscomp/InlineObjectLiterals.java",
        "signature": "com.google.javascript.jscomp.InlineObjectLiterals.VAR_PREFIX",
        "snippet": "  public static final String VAR_PREFIX = \"JSCompiler_object_inline_\";",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineObjectLiterals",
        "src_path": "src/com/google/javascript/jscomp/InlineObjectLiterals.java",
        "signature": "com.google.javascript.jscomp.InlineObjectLiterals.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineObjectLiterals",
        "src_path": "src/com/google/javascript/jscomp/InlineObjectLiterals.java",
        "signature": "com.google.javascript.jscomp.InlineObjectLiterals.safeNameIdSupplier",
        "snippet": "  private final Supplier<String> safeNameIdSupplier;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InliningBehavior",
        "src_path": "src/com/google/javascript/jscomp/InlineObjectLiterals.java",
        "signature": "com.google.javascript.jscomp.InliningBehavior.staleVars",
        "snippet": "    private final Set<Var> staleVars = Sets.newHashSet();",
        "begin_line": 81,
        "end_line": 81,
        "comment": "\n     * A list of variables that should not be inlined, because their\n     * reference information is out of sync with the state of the AST.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.SimpleRegion",
        "src_path": "src/com/google/javascript/jscomp/SimpleRegion.java",
        "signature": "com.google.javascript.jscomp.SimpleRegion.beginningLineNumber",
        "snippet": "  private final int beginningLineNumber;",
        "begin_line": 22,
        "end_line": 22,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SimpleRegion",
        "src_path": "src/com/google/javascript/jscomp/SimpleRegion.java",
        "signature": "com.google.javascript.jscomp.SimpleRegion.endingLineNumber",
        "snippet": "  private final int endingLineNumber;",
        "begin_line": 23,
        "end_line": 23,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SimpleRegion",
        "src_path": "src/com/google/javascript/jscomp/SimpleRegion.java",
        "signature": "com.google.javascript.jscomp.SimpleRegion.source",
        "snippet": "  private final String source;",
        "begin_line": 24,
        "end_line": 24,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckMissingReturn",
        "src_path": "src/com/google/javascript/jscomp/CheckMissingReturn.java",
        "signature": "com.google.javascript.jscomp.CheckMissingReturn.MISSING_RETURN_STATEMENT",
        "snippet": "  static final DiagnosticType MISSING_RETURN_STATEMENT =\n      DiagnosticType.warning(\n          \"JSC_MISSING_RETURN_STATEMENT\",\n          \"Missing return statement. Function expected to return {0}.\");",
        "begin_line": 37,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckMissingReturn",
        "src_path": "src/com/google/javascript/jscomp/CheckMissingReturn.java",
        "signature": "com.google.javascript.jscomp.CheckMissingReturn.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckMissingReturn",
        "src_path": "src/com/google/javascript/jscomp/CheckMissingReturn.java",
        "signature": "com.google.javascript.jscomp.CheckMissingReturn.level",
        "snippet": "  private final CheckLevel level;",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckMissingReturn",
        "src_path": "src/com/google/javascript/jscomp/CheckMissingReturn.java",
        "signature": "com.google.javascript.jscomp.CheckMissingReturn.IS_RETURN",
        "snippet": "  private static final Predicate<Node> IS_RETURN = new Predicate<Node>() {\n    @Override\n    public boolean apply(Node input) {\n      // Check for null because the control flow graph's implicit return node is\n      // represented by null, so this value might be input.\n      return input != null && input.isReturn();\n    }\n  };",
        "begin_line": 45,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckMissingReturn",
        "src_path": "src/com/google/javascript/jscomp/CheckMissingReturn.java",
        "signature": "com.google.javascript.jscomp.CheckMissingReturn.GOES_THROUGH_TRUE_CONDITION_PREDICATE",
        "snippet": "  private static final Predicate<DiGraphEdge<Node, ControlFlowGraph.Branch>>\n      GOES_THROUGH_TRUE_CONDITION_PREDICATE =\n        new Predicate<DiGraphEdge<Node, ControlFlowGraph.Branch>>() {\n    @Override\n    public boolean apply(DiGraphEdge<Node, ControlFlowGraph.Branch> input) {\n      // First skill all exceptions.\n      Branch branch = input.getValue();\n      if (branch == Branch.ON_EX) {\n        return false;\n      } else if (branch.isConditional()) {\n        Node condition = NodeUtil.getConditionExpression(\n            input.getSource().getValue());\n        // TODO(user): We CAN make this bit smarter just looking at\n        // constants. We DO have a full blown ReverseAbstractInterupter and\n        // type system that can evaluate some impressions' boolean value but\n        // for now we will keep this pass lightweight.\n        if (condition != null) {\n          TernaryValue val = NodeUtil.getImpureBooleanValue(condition);\n          if (val != TernaryValue.UNKNOWN) {\n            return val.toBoolean(true) == (Branch.ON_TRUE == branch);\n          }\n        }\n      }\n      return true;\n    }\n  };",
        "begin_line": 55,
        "end_line": 80,
        "comment": " Skips all exception edges and impossible edges. "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameGenerator",
        "src_path": "src/com/google/javascript/jscomp/NameGenerator.java",
        "signature": "com.google.javascript.jscomp.NameGenerator.FIRST_CHAR",
        "snippet": "  static final char[] FIRST_CHAR =\n    \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$\".toCharArray();",
        "begin_line": 34,
        "end_line": 35,
        "comment": " Generate short name with this first character "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameGenerator",
        "src_path": "src/com/google/javascript/jscomp/NameGenerator.java",
        "signature": "com.google.javascript.jscomp.NameGenerator.NONFIRST_CHAR",
        "snippet": "  static final char[] NONFIRST_CHAR =\n    \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789$\"\n        .toCharArray();",
        "begin_line": 38,
        "end_line": 40,
        "comment": " These appear after after the first character "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameGenerator",
        "src_path": "src/com/google/javascript/jscomp/NameGenerator.java",
        "signature": "com.google.javascript.jscomp.NameGenerator.reservedNames",
        "snippet": "  private final Set<String> reservedNames;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameGenerator",
        "src_path": "src/com/google/javascript/jscomp/NameGenerator.java",
        "signature": "com.google.javascript.jscomp.NameGenerator.prefix",
        "snippet": "  private final String prefix;",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameGenerator",
        "src_path": "src/com/google/javascript/jscomp/NameGenerator.java",
        "signature": "com.google.javascript.jscomp.NameGenerator.nameCount",
        "snippet": "  private int nameCount;",
        "begin_line": 44,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameGenerator",
        "src_path": "src/com/google/javascript/jscomp/NameGenerator.java",
        "signature": "com.google.javascript.jscomp.NameGenerator.firstChars",
        "snippet": "  private final char[] firstChars;",
        "begin_line": 46,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameGenerator",
        "src_path": "src/com/google/javascript/jscomp/NameGenerator.java",
        "signature": "com.google.javascript.jscomp.NameGenerator.nonFirstChars",
        "snippet": "  private final char[] nonFirstChars;",
        "begin_line": 47,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstants",
        "src_path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR",
        "snippet": "  static final DiagnosticType INVALID_GETELEM_INDEX_ERROR =\n      DiagnosticType.warning(\n          \"JSC_INVALID_GETELEM_INDEX_ERROR\",\n          \"Array index not integer: {0}\");",
        "begin_line": 34,
        "end_line": 37,
        "comment": " a check pass."
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstants",
        "src_path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR",
        "snippet": "  static final DiagnosticType INDEX_OUT_OF_BOUNDS_ERROR =\n      DiagnosticType.warning(\n          \"JSC_INDEX_OUT_OF_BOUNDS_ERROR\",\n          \"Array index out of bounds: {0}\");",
        "begin_line": 39,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstants",
        "src_path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstants.NEGATING_A_NON_NUMBER_ERROR",
        "snippet": "  static final DiagnosticType NEGATING_A_NON_NUMBER_ERROR =\n      DiagnosticType.warning(\n          \"JSC_NEGATING_A_NON_NUMBER_ERROR\",\n          \"Can't negate non-numeric value: {0}\");",
        "begin_line": 44,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstants",
        "src_path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE",
        "snippet": "  static final DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE =\n      DiagnosticType.warning(\n          \"JSC_BITWISE_OPERAND_OUT_OF_RANGE\",\n          \"Operand out of range, bitwise operation will lose information: {0}\");",
        "begin_line": 49,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstants",
        "src_path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS",
        "snippet": "  static final DiagnosticType SHIFT_AMOUNT_OUT_OF_BOUNDS =\n      DiagnosticType.warning(\n          \"JSC_SHIFT_AMOUNT_OUT_OF_BOUNDS\",\n          \"Shift amount out of bounds: {0}\");",
        "begin_line": 54,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstants",
        "src_path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND",
        "snippet": "  static final DiagnosticType FRACTIONAL_BITWISE_OPERAND =\n      DiagnosticType.warning(\n          \"JSC_FRACTIONAL_BITWISE_OPERAND\",\n          \"Fractional bitwise operand: {0}\");",
        "begin_line": 59,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstants",
        "src_path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstants.MAX_FOLD_NUMBER",
        "snippet": "  private static final double MAX_FOLD_NUMBER = Math.pow(2, 53);",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstants",
        "src_path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstants.late",
        "snippet": "  private final boolean late;",
        "begin_line": 66,
        "end_line": 66,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractPeepholeOptimization",
        "src_path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java",
        "signature": "com.google.javascript.jscomp.AbstractPeepholeOptimization.compiler",
        "snippet": "  private AbstractCompiler compiler;",
        "begin_line": 31,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RecordFunctionInformation",
        "src_path": "src/com/google/javascript/jscomp/RecordFunctionInformation.java",
        "signature": "com.google.javascript.jscomp.RecordFunctionInformation.compiler",
        "snippet": "  private final Compiler compiler;",
        "begin_line": 31,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RecordFunctionInformation",
        "src_path": "src/com/google/javascript/jscomp/RecordFunctionInformation.java",
        "signature": "com.google.javascript.jscomp.RecordFunctionInformation.functionNames",
        "snippet": "  private final FunctionNames functionNames;",
        "begin_line": 32,
        "end_line": 32,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RecordFunctionInformation",
        "src_path": "src/com/google/javascript/jscomp/RecordFunctionInformation.java",
        "signature": "com.google.javascript.jscomp.RecordFunctionInformation.moduleGraph",
        "snippet": "  private final JSModuleGraph moduleGraph;",
        "begin_line": 33,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RecordFunctionInformation",
        "src_path": "src/com/google/javascript/jscomp/RecordFunctionInformation.java",
        "signature": "com.google.javascript.jscomp.RecordFunctionInformation.mapBuilder",
        "snippet": "  private final FunctionInformationMap.Builder mapBuilder;",
        "begin_line": 38,
        "end_line": 38,
        "comment": "\n   * Protocol buffer builder.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.MAX_INVALDIATION_WARNINGS_PER_PROPERTY",
        "snippet": "  private static final int MAX_INVALDIATION_WARNINGS_PER_PROPERTY = 10;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " that we tell the user to fix per-property."
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.logger",
        "snippet": "  private static final Logger logger = Logger.getLogger(\n      DisambiguateProperties.class.getName());",
        "begin_line": 83,
        "end_line": 84,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Warnings",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.Warnings.INVALIDATION",
        "snippet": "    static final DiagnosticType INVALIDATION = DiagnosticType.disabled(\n        \"JSC_INVALIDATION\",\n        \"Property disambiguator skipping all instances of property {0} \"\n        + \"because of type {1} node {2}. {3}\");",
        "begin_line": 88,
        "end_line": 91,
        "comment": " TODO(user): {1} and {2} are not exactly useful for most people."
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 94,
        "end_line": 94,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.typeSystem",
        "snippet": "  private final TypeSystem<T> typeSystem;",
        "begin_line": 95,
        "end_line": 95,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.invalidationMap",
        "snippet": "  private Multimap<Object, JSError> invalidationMap;",
        "begin_line": 102,
        "end_line": 102,
        "comment": "\n   * Map of a type to all the related errors that invalidated the type\n   * for disambiguation. It has be Object because of the generic nature of\n   * this pass.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.propertiesToErrorFor",
        "snippet": "  private final Map<String, CheckLevel> propertiesToErrorFor;",
        "begin_line": 112,
        "end_line": 112,
        "comment": "\n   * In practice any large code base will have thousands and thousands of\n   * type invalidations, which makes reporting all of the errors useless.\n   * However, certain properties are worth specifically guarding because of the\n   * large amount of code that can be removed as dead code. This list contains\n   * the properties (eg: \"toString\") that we care about; if any of these\n   * properties is invalidated it causes an error.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Property",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.Property.name",
        "snippet": "    final String name;",
        "begin_line": 116,
        "end_line": 116,
        "comment": " The name of the property. "
    },
    {
        "class_name": "com.google.javascript.jscomp.Property",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.Property.types",
        "snippet": "    private UnionFind<T> types;",
        "begin_line": 119,
        "end_line": 119,
        "comment": " All types on which the field exists, grouped together if related. "
    },
    {
        "class_name": "com.google.javascript.jscomp.Property",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.Property.typesToSkip",
        "snippet": "    Set<T> typesToSkip = Sets.newHashSet();",
        "begin_line": 125,
        "end_line": 125,
        "comment": "\n     * A set of types for which renaming this field should be skipped. This\n     * list is first filled by fields defined in the externs file.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.Property",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.Property.skipRenaming",
        "snippet": "    boolean skipRenaming;",
        "begin_line": 131,
        "end_line": 131,
        "comment": "\n     * If true, do not rename any instance of this field, as it has been\n     * referenced from an unknown type.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.Property",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.Property.renameNodes",
        "snippet": "    Set<Node> renameNodes = Sets.newHashSet();",
        "begin_line": 134,
        "end_line": 134,
        "comment": " Set of nodes for this field that need renaming. "
    },
    {
        "class_name": "com.google.javascript.jscomp.Property",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.Property.rootTypes",
        "snippet": "    final Map<Node, T> rootTypes = Maps.newHashMap();",
        "begin_line": 141,
        "end_line": 141,
        "comment": "\n     * Map from node to the highest type in the prototype chain containing the\n     * field for that node. In the case of a union, the type is the highest type\n     * of one of the types in the union.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.properties",
        "snippet": "  private Map<String, Property> properties = Maps.newHashMap();",
        "begin_line": 276,
        "end_line": 276,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractScopingCallback",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.AbstractScopingCallback.scopes",
        "snippet": "    protected final Stack<StaticScope<T>> scopes =\n        new Stack<StaticScope<T>>();",
        "begin_line": 372,
        "end_line": 373,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JSTypeSystem",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.JSTypeSystem.invalidatingTypes",
        "snippet": "    private final Set<JSType> invalidatingTypes;",
        "begin_line": 733,
        "end_line": 733,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JSTypeSystem",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.JSTypeSystem.registry",
        "snippet": "    private JSTypeRegistry registry;",
        "begin_line": 734,
        "end_line": 734,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ConcreteTypeSystem",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.ConcreteTypeSystem.tt",
        "snippet": "    private final TightenTypes tt;",
        "begin_line": 945,
        "end_line": 945,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ConcreteTypeSystem",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.ConcreteTypeSystem.nextUniqueId",
        "snippet": "    private int nextUniqueId;",
        "begin_line": 946,
        "end_line": 946,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ConcreteTypeSystem",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.ConcreteTypeSystem.codingConvention",
        "snippet": "    private CodingConvention codingConvention;",
        "begin_line": 947,
        "end_line": 947,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ConcreteTypeSystem",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.ConcreteTypeSystem.invalidatingTypes",
        "snippet": "    private final Set<JSType> invalidatingTypes = Sets.newHashSet();",
        "begin_line": 948,
        "end_line": 948,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ConcreteTypeSystem",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.ConcreteTypeSystem.nativeTypes",
        "snippet": "    private static final JSTypeNative [] nativeTypes = new JSTypeNative[] {\n        JSTypeNative.BOOLEAN_OBJECT_TYPE,\n        JSTypeNative.NUMBER_OBJECT_TYPE,\n        JSTypeNative.STRING_OBJECT_TYPE\n    };",
        "begin_line": 952,
        "end_line": 956,
        "comment": " thus need to be added in if an unknown type is encountered."
    },
    {
        "class_name": "com.google.javascript.jscomp.ConstCheck",
        "src_path": "src/com/google/javascript/jscomp/ConstCheck.java",
        "signature": "com.google.javascript.jscomp.ConstCheck.CONST_REASSIGNED_VALUE_ERROR",
        "snippet": "  static final DiagnosticType CONST_REASSIGNED_VALUE_ERROR =\n      DiagnosticType.error(\n          \"JSC_CONSTANT_REASSIGNED_VALUE_ERROR\",\n          \"constant {0} assigned a value more than once\");",
        "begin_line": 36,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ConstCheck",
        "src_path": "src/com/google/javascript/jscomp/ConstCheck.java",
        "signature": "com.google.javascript.jscomp.ConstCheck.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ConstCheck",
        "src_path": "src/com/google/javascript/jscomp/ConstCheck.java",
        "signature": "com.google.javascript.jscomp.ConstCheck.initializedConstants",
        "snippet": "  private final Set<Scope.Var> initializedConstants;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PreprocessorSymbolTable",
        "src_path": "src/com/google/javascript/jscomp/PreprocessorSymbolTable.java",
        "signature": "com.google.javascript.jscomp.PreprocessorSymbolTable.symbols",
        "snippet": "  private final Map<String, SimpleSlot> symbols = Maps.newHashMap();",
        "begin_line": 47,
        "end_line": 47,
        "comment": "\n   * All preprocessor symbols are globals.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.PreprocessorSymbolTable",
        "src_path": "src/com/google/javascript/jscomp/PreprocessorSymbolTable.java",
        "signature": "com.google.javascript.jscomp.PreprocessorSymbolTable.refs",
        "snippet": "  private final Multimap<String, Reference> refs =\n      ArrayListMultimap.create();",
        "begin_line": 49,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PreprocessorSymbolTable",
        "src_path": "src/com/google/javascript/jscomp/PreprocessorSymbolTable.java",
        "signature": "com.google.javascript.jscomp.PreprocessorSymbolTable.root",
        "snippet": "  private final Node root;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameProperties",
        "src_path": "src/com/google/javascript/jscomp/RenameProperties.java",
        "signature": "com.google.javascript.jscomp.RenameProperties.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameProperties",
        "src_path": "src/com/google/javascript/jscomp/RenameProperties.java",
        "signature": "com.google.javascript.jscomp.RenameProperties.generatePseudoNames",
        "snippet": "  private final boolean generatePseudoNames;",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameProperties",
        "src_path": "src/com/google/javascript/jscomp/RenameProperties.java",
        "signature": "com.google.javascript.jscomp.RenameProperties.prevUsedPropertyMap",
        "snippet": "  private final VariableMap prevUsedPropertyMap;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " Property renaming map from a previous compilation. "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameProperties",
        "src_path": "src/com/google/javascript/jscomp/RenameProperties.java",
        "signature": "com.google.javascript.jscomp.RenameProperties.stringNodesToRename",
        "snippet": "  private final List<Node> stringNodesToRename = new ArrayList<Node>();",
        "begin_line": 76,
        "end_line": 76,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameProperties",
        "src_path": "src/com/google/javascript/jscomp/RenameProperties.java",
        "signature": "com.google.javascript.jscomp.RenameProperties.callNodeToParentMap",
        "snippet": "  private final Map<Node, Node> callNodeToParentMap =\n      new HashMap<Node, Node>();",
        "begin_line": 77,
        "end_line": 78,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameProperties",
        "src_path": "src/com/google/javascript/jscomp/RenameProperties.java",
        "signature": "com.google.javascript.jscomp.RenameProperties.reservedCharacters",
        "snippet": "  private final char[] reservedCharacters;",
        "begin_line": 79,
        "end_line": 79,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameProperties",
        "src_path": "src/com/google/javascript/jscomp/RenameProperties.java",
        "signature": "com.google.javascript.jscomp.RenameProperties.propertyMap",
        "snippet": "  private final Map<String, Property> propertyMap =\n      new HashMap<String, Property>();",
        "begin_line": 82,
        "end_line": 83,
        "comment": " Map from property name to Property object"
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameProperties",
        "src_path": "src/com/google/javascript/jscomp/RenameProperties.java",
        "signature": "com.google.javascript.jscomp.RenameProperties.affinityGraph",
        "snippet": "  private final UndiGraph<Property, PropertyAffinity> affinityGraph;",
        "begin_line": 92,
        "end_line": 92,
        "comment": "\n   * A graph of property affinity information.\n   *\n   * Suppose property X and Y are access in the same function N times.\n   *\n   * The graph would have X -> Y with the edge of N.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameProperties",
        "src_path": "src/com/google/javascript/jscomp/RenameProperties.java",
        "signature": "com.google.javascript.jscomp.RenameProperties.externedNames",
        "snippet": "  private final Set<String> externedNames = new HashSet<String>(\n      Arrays.asList(\"prototype\"));",
        "begin_line": 95,
        "end_line": 96,
        "comment": " Property names that don't get renamed"
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameProperties",
        "src_path": "src/com/google/javascript/jscomp/RenameProperties.java",
        "signature": "com.google.javascript.jscomp.RenameProperties.quotedNames",
        "snippet": "  private final Set<String> quotedNames = new HashSet<String>();",
        "begin_line": 99,
        "end_line": 99,
        "comment": " Names to which properties shouldn't be renamed, to avoid name conflicts"
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameProperties",
        "src_path": "src/com/google/javascript/jscomp/RenameProperties.java",
        "signature": "com.google.javascript.jscomp.RenameProperties.FREQUENCY_COMPARATOR",
        "snippet": "  private static final Comparator<Property> FREQUENCY_COMPARATOR =\n    new Comparator<Property>() {\n      @Override\n      public int compare(Property p1, Property p2) {\n\n        /**\n         * First a frequently used names would always be picked first.\n         */\n        if (p1.numOccurrences != p2.numOccurrences) {\n          return p2.numOccurrences - p1.numOccurrences;\n\n        /**\n         * If both properties are used equally frequent. We'll let the property\n         * with a high affinity score get a name first.\n         *\n         * see #computeAffinityScores() for how the score is computed.\n         */\n        } else if (p1.affinityScore != p2.affinityScore) {\n          return p2.affinityScore - p1.affinityScore;\n        }\n\n        /**\n         * Finally, for determinism, we compare them based on the old name.\n         */\n        return p1.oldName.compareTo(p2.oldName);\n       }\n    };",
        "begin_line": 101,
        "end_line": 127,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameProperties",
        "src_path": "src/com/google/javascript/jscomp/RenameProperties.java",
        "signature": "com.google.javascript.jscomp.RenameProperties.RENAME_PROPERTY_FUNCTION_NAME",
        "snippet": "  static final String RENAME_PROPERTY_FUNCTION_NAME =\n      \"JSCompiler_renameProperty\";",
        "begin_line": 137,
        "end_line": 138,
        "comment": "\n   * The name of a special function that this pass replaces. It takes one\n   * argument: a string literal containing one or more dot-separated JS\n   * identifiers. This pass will replace them as though they were JS property\n   * references. Here are two examples:\n   *    JSCompiler_renameProperty('propertyName') -> 'jYq'\n   *    JSCompiler_renameProperty('myProp.nestedProp.innerProp') -> 'e4.sW.C$'\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameProperties",
        "src_path": "src/com/google/javascript/jscomp/RenameProperties.java",
        "signature": "com.google.javascript.jscomp.RenameProperties.BAD_CALL",
        "snippet": "  static final DiagnosticType BAD_CALL = DiagnosticType.error(\n      \"JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_CALL\",\n      \"Bad \" + RENAME_PROPERTY_FUNCTION_NAME + \" call - \" +\n      \"argument must be a string literal\");",
        "begin_line": 140,
        "end_line": 143,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameProperties",
        "src_path": "src/com/google/javascript/jscomp/RenameProperties.java",
        "signature": "com.google.javascript.jscomp.RenameProperties.BAD_ARG",
        "snippet": "  static final DiagnosticType BAD_ARG = DiagnosticType.error(\n      \"JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_ARG\",\n      \"Bad \" + RENAME_PROPERTY_FUNCTION_NAME + \" argument - \" +\n      \"'{0}' is not a valid JavaScript identifier\");",
        "begin_line": 145,
        "end_line": 148,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessProperties",
        "src_path": "src/com/google/javascript/jscomp/RenameProperties.java",
        "signature": "com.google.javascript.jscomp.ProcessProperties.currentHighAffinityProperties",
        "snippet": "    private Set<Property> currentHighAffinityProperties = null;",
        "begin_line": 405,
        "end_line": 405,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Property",
        "src_path": "src/com/google/javascript/jscomp/RenameProperties.java",
        "signature": "com.google.javascript.jscomp.Property.oldName",
        "snippet": "    final String oldName;",
        "begin_line": 570,
        "end_line": 570,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Property",
        "src_path": "src/com/google/javascript/jscomp/RenameProperties.java",
        "signature": "com.google.javascript.jscomp.Property.newName",
        "snippet": "    String newName;",
        "begin_line": 571,
        "end_line": 571,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Property",
        "src_path": "src/com/google/javascript/jscomp/RenameProperties.java",
        "signature": "com.google.javascript.jscomp.Property.numOccurrences",
        "snippet": "    int numOccurrences;",
        "begin_line": 572,
        "end_line": 572,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Property",
        "src_path": "src/com/google/javascript/jscomp/RenameProperties.java",
        "signature": "com.google.javascript.jscomp.Property.affinityScore",
        "snippet": "    int affinityScore = 0;",
        "begin_line": 573,
        "end_line": 573,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PropertyAffinity",
        "src_path": "src/com/google/javascript/jscomp/RenameProperties.java",
        "signature": "com.google.javascript.jscomp.PropertyAffinity.affinity",
        "snippet": "    private int affinity = 0;",
        "begin_line": 582,
        "end_line": 582,
        "comment": " This will forever be zero if no affinity information was gathered."
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 44,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.SOURCE_EXCERPT_REGION_LENGTH",
        "snippet": "  private static final int SOURCE_EXCERPT_REGION_LENGTH = 5;",
        "begin_line": 57,
        "end_line": 57,
        "comment": "\n   * Number of lines in the region returned by {@link #getRegion(int)}.\n   * This length must be odd.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.fileName",
        "snippet": "  private final String fileName;",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.isExternFile",
        "snippet": "  private boolean isExternFile = false;",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.originalPath",
        "snippet": "  private String originalPath = null;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " from a Jar, it could be the path to the Jar."
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.lineOffsets",
        "snippet": "  private int[] lineOffsets = null;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " Source Line Information"
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.code",
        "snippet": "  private String code = null;",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.Builder.charset",
        "snippet": "    private Charset charset = Charsets.UTF_8;",
        "begin_line": 365,
        "end_line": 365,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.Builder.originalPath",
        "snippet": "    private String originalPath = null;",
        "begin_line": 366,
        "end_line": 366,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Preloaded",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.Preloaded.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 419,
        "end_line": 419,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Generated",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.Generated.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 433,
        "end_line": 433,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Generated",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.Generated.generator",
        "snippet": "    private final Generator generator;",
        "begin_line": 434,
        "end_line": 434,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.OnDisk",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.OnDisk.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 468,
        "end_line": 468,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.OnDisk",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.OnDisk.file",
        "snippet": "    private final File file;",
        "begin_line": 469,
        "end_line": 469,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.OnDisk",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.OnDisk.inputCharset",
        "snippet": "    private String inputCharset = Charsets.UTF_8.name();",
        "begin_line": 474,
        "end_line": 474,
        "comment": " Default input file format for JSCompiler has always been UTF_8."
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceStrings",
        "src_path": "src/com/google/javascript/jscomp/ReplaceStrings.java",
        "signature": "com.google.javascript.jscomp.ReplaceStrings.BAD_REPLACEMENT_CONFIGURATION",
        "snippet": "  static final DiagnosticType BAD_REPLACEMENT_CONFIGURATION =\n      DiagnosticType.warning(\n          \"JSC_BAD_REPLACEMENT_CONFIGURATION\",\n          \"Bad replacement configuration.\");",
        "begin_line": 52,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceStrings",
        "src_path": "src/com/google/javascript/jscomp/ReplaceStrings.java",
        "signature": "com.google.javascript.jscomp.ReplaceStrings.DEFAULT_PLACEHOLDER_TOKEN",
        "snippet": "  private final String DEFAULT_PLACEHOLDER_TOKEN = \"`\";",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceStrings",
        "src_path": "src/com/google/javascript/jscomp/ReplaceStrings.java",
        "signature": "com.google.javascript.jscomp.ReplaceStrings.placeholderToken",
        "snippet": "  private final String placeholderToken;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceStrings",
        "src_path": "src/com/google/javascript/jscomp/ReplaceStrings.java",
        "signature": "com.google.javascript.jscomp.ReplaceStrings.REPLACE_ONE_MARKER",
        "snippet": "  private static final String REPLACE_ONE_MARKER = \"?\";",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceStrings",
        "src_path": "src/com/google/javascript/jscomp/ReplaceStrings.java",
        "signature": "com.google.javascript.jscomp.ReplaceStrings.REPLACE_ALL_MARKER",
        "snippet": "  private static final String REPLACE_ALL_MARKER = \"*\";",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceStrings",
        "src_path": "src/com/google/javascript/jscomp/ReplaceStrings.java",
        "signature": "com.google.javascript.jscomp.ReplaceStrings.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceStrings",
        "src_path": "src/com/google/javascript/jscomp/ReplaceStrings.java",
        "signature": "com.google.javascript.jscomp.ReplaceStrings.registry",
        "snippet": "  private final JSTypeRegistry registry;",
        "begin_line": 63,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceStrings",
        "src_path": "src/com/google/javascript/jscomp/ReplaceStrings.java",
        "signature": "com.google.javascript.jscomp.ReplaceStrings.functions",
        "snippet": "  private final Map<String, Config> functions = Maps.newHashMap();",
        "begin_line": 66,
        "end_line": 66,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceStrings",
        "src_path": "src/com/google/javascript/jscomp/ReplaceStrings.java",
        "signature": "com.google.javascript.jscomp.ReplaceStrings.methods",
        "snippet": "  private final Multimap<String, String> methods = HashMultimap.create();",
        "begin_line": 67,
        "end_line": 67,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceStrings",
        "src_path": "src/com/google/javascript/jscomp/ReplaceStrings.java",
        "signature": "com.google.javascript.jscomp.ReplaceStrings.nameGenerator",
        "snippet": "  private final NameGenerator nameGenerator;",
        "begin_line": 68,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceStrings",
        "src_path": "src/com/google/javascript/jscomp/ReplaceStrings.java",
        "signature": "com.google.javascript.jscomp.ReplaceStrings.results",
        "snippet": "  private final Map<String, Result> results = Maps.newLinkedHashMap();",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Config",
        "src_path": "src/com/google/javascript/jscomp/ReplaceStrings.java",
        "signature": "com.google.javascript.jscomp.Config.name",
        "snippet": "    final String name;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " classes."
    },
    {
        "class_name": "com.google.javascript.jscomp.Config",
        "src_path": "src/com/google/javascript/jscomp/ReplaceStrings.java",
        "signature": "com.google.javascript.jscomp.Config.parameter",
        "snippet": "    final int parameter;",
        "begin_line": 79,
        "end_line": 79,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Config",
        "src_path": "src/com/google/javascript/jscomp/ReplaceStrings.java",
        "signature": "com.google.javascript.jscomp.Config.REPLACE_ALL_VALUE",
        "snippet": "    static final int REPLACE_ALL_VALUE = 0;",
        "begin_line": 80,
        "end_line": 80,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/ReplaceStrings.java",
        "signature": "com.google.javascript.jscomp.Result.original",
        "snippet": "    public final String original;",
        "begin_line": 94,
        "end_line": 94,
        "comment": " {@code placeholderToken}."
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/ReplaceStrings.java",
        "signature": "com.google.javascript.jscomp.Result.replacement",
        "snippet": "    public final String replacement;",
        "begin_line": 95,
        "end_line": 95,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/ReplaceStrings.java",
        "signature": "com.google.javascript.jscomp.Result.replacementLocations",
        "snippet": "    public final List<Location> replacementLocations = Lists.newLinkedList();",
        "begin_line": 96,
        "end_line": 96,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Location",
        "src_path": "src/com/google/javascript/jscomp/ReplaceStrings.java",
        "signature": "com.google.javascript.jscomp.Location.sourceFile",
        "snippet": "    public final String sourceFile;",
        "begin_line": 112,
        "end_line": 112,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Location",
        "src_path": "src/com/google/javascript/jscomp/ReplaceStrings.java",
        "signature": "com.google.javascript.jscomp.Location.line",
        "snippet": "    public final int line;",
        "begin_line": 113,
        "end_line": 113,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Location",
        "src_path": "src/com/google/javascript/jscomp/ReplaceStrings.java",
        "signature": "com.google.javascript.jscomp.Location.column",
        "snippet": "    public final int column;",
        "begin_line": 114,
        "end_line": 114,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceStrings",
        "src_path": "src/com/google/javascript/jscomp/ReplaceStrings.java",
        "signature": "com.google.javascript.jscomp.ReplaceStrings.USED_RESULTS",
        "snippet": "  static final Predicate<Result> USED_RESULTS = new Predicate<Result>() {\n    @Override\n    public boolean apply(Result result) {\n      // The list of locations may be empty if the map\n      // was pre-populated from a previous map.\n      return !result.replacementLocations.isEmpty();\n    }\n  };",
        "begin_line": 169,
        "end_line": 176,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations.prototypeAlias",
        "snippet": "  private String prototypeAlias = \"JSCompiler_prototypeAlias\";",
        "begin_line": 89,
        "end_line": 89,
        "comment": " object. Of cause, we assume that it'll be renamed by RenameVars."
    },
    {
        "class_name": "com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 91,
        "end_line": 91,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations.pattern",
        "snippet": "  private final Pattern pattern;",
        "begin_line": 93,
        "end_line": 93,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations.globalOverhead",
        "snippet": "    private final int globalOverhead;",
        "begin_line": 120,
        "end_line": 120,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations.perExtractionOverhead",
        "snippet": "    private final int perExtractionOverhead;",
        "begin_line": 121,
        "end_line": 121,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations.perMemberOverhead",
        "snippet": "    private final int perMemberOverhead;",
        "begin_line": 122,
        "end_line": 122,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GatherExtractionInfo",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.GatherExtractionInfo.instances",
        "snippet": "    private List<ExtractionInstance> instances = Lists.newLinkedList();",
        "begin_line": 251,
        "end_line": 251,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GatherExtractionInfo",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.GatherExtractionInfo.totalDelta",
        "snippet": "    private int totalDelta = pattern.globalOverhead;",
        "begin_line": 252,
        "end_line": 252,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExtractionInstance",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.ExtractionInstance.declarations",
        "snippet": "    LinkedList<PrototypeMemberDeclaration> declarations = Lists.newLinkedList();",
        "begin_line": 293,
        "end_line": 293,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExtractionInstance",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.ExtractionInstance.delta",
        "snippet": "    private int delta = 0;",
        "begin_line": 294,
        "end_line": 294,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExtractionInstance",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.ExtractionInstance.parent",
        "snippet": "    private final Node parent;",
        "begin_line": 295,
        "end_line": 295,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrototypeMemberDeclaration",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.PrototypeMemberDeclaration.memberName",
        "snippet": "    final String memberName;",
        "begin_line": 337,
        "end_line": 337,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrototypeMemberDeclaration",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.PrototypeMemberDeclaration.node",
        "snippet": "    final Node node;",
        "begin_line": 338,
        "end_line": 338,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrototypeMemberDeclaration",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.PrototypeMemberDeclaration.qualifiedClassName",
        "snippet": "    final String qualifiedClassName;",
        "begin_line": 339,
        "end_line": 339,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrototypeMemberDeclaration",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.PrototypeMemberDeclaration.lhs",
        "snippet": "    final Node lhs;",
        "begin_line": 340,
        "end_line": 340,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.NULL_ARGUMENT_ERROR",
        "snippet": "  static final DiagnosticType NULL_ARGUMENT_ERROR = DiagnosticType.error(\n      \"JSC_NULL_ARGUMENT_ERROR\",\n      \"method \\\"{0}\\\" called without an argument\");",
        "begin_line": 45,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.EXPECTED_OBJECTLIT_ERROR",
        "snippet": "  static final DiagnosticType EXPECTED_OBJECTLIT_ERROR = DiagnosticType.error(\n      \"JSC_EXPECTED_OBJECTLIT_ERROR\",\n      \"method \\\"{0}\\\" expected an object literal argument\");",
        "begin_line": 49,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.EXPECTED_STRING_ERROR",
        "snippet": "  static final DiagnosticType EXPECTED_STRING_ERROR = DiagnosticType.error(\n      \"JSC_EXPECTED_STRING_ERROR\",\n      \"method \\\"{0}\\\" expected an object string argument\");",
        "begin_line": 53,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_ARGUMENT_ERROR",
        "snippet": "  static final DiagnosticType INVALID_ARGUMENT_ERROR = DiagnosticType.error(\n      \"JSC_INVALID_ARGUMENT_ERROR\",\n      \"method \\\"{0}\\\" called with invalid argument\");",
        "begin_line": 57,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_STYLE_ERROR",
        "snippet": "  static final DiagnosticType INVALID_STYLE_ERROR = DiagnosticType.error(\n      \"JSC_INVALID_CSS_NAME_MAP_STYLE_ERROR\",\n      \"Invalid CSS name map style {0}\");",
        "begin_line": 61,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.TOO_MANY_ARGUMENTS_ERROR",
        "snippet": "  static final DiagnosticType TOO_MANY_ARGUMENTS_ERROR = DiagnosticType.error(\n      \"JSC_TOO_MANY_ARGUMENTS_ERROR\",\n      \"method \\\"{0}\\\" called with more than one argument\");",
        "begin_line": 65,
        "end_line": 67,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.DUPLICATE_NAMESPACE_ERROR",
        "snippet": "  static final DiagnosticType DUPLICATE_NAMESPACE_ERROR = DiagnosticType.error(\n      \"JSC_DUPLICATE_NAMESPACE_ERROR\",\n      \"namespace \\\"{0}\\\" cannot be provided twice\");",
        "begin_line": 69,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.FUNCTION_NAMESPACE_ERROR",
        "snippet": "  static final DiagnosticType FUNCTION_NAMESPACE_ERROR = DiagnosticType.error(\n      \"JSC_FUNCTION_NAMESPACE_ERROR\",\n      \"\\\"{0}\\\" cannot be both provided and declared as a function\");",
        "begin_line": 73,
        "end_line": 75,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.MISSING_PROVIDE_ERROR",
        "snippet": "  static final DiagnosticType MISSING_PROVIDE_ERROR = DiagnosticType.error(\n      \"JSC_MISSING_PROVIDE_ERROR\",\n      \"required \\\"{0}\\\" namespace never provided\");",
        "begin_line": 77,
        "end_line": 79,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.LATE_PROVIDE_ERROR",
        "snippet": "  static final DiagnosticType LATE_PROVIDE_ERROR = DiagnosticType.error(\n      \"JSC_LATE_PROVIDE_ERROR\",\n      \"required \\\"{0}\\\" namespace not provided yet\");",
        "begin_line": 81,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_PROVIDE_ERROR",
        "snippet": "  static final DiagnosticType INVALID_PROVIDE_ERROR = DiagnosticType.error(\n      \"JSC_INVALID_PROVIDE_ERROR\",\n      \"\\\"{0}\\\" is not a valid JS property name\");",
        "begin_line": 85,
        "end_line": 87,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.XMODULE_REQUIRE_ERROR",
        "snippet": "  static final DiagnosticType XMODULE_REQUIRE_ERROR = DiagnosticType.warning(\n      \"JSC_XMODULE_REQUIRE_ERROR\",\n      \"namespace \\\"{0}\\\" provided in module {1} \" +\n      \"but required in module {2}\");",
        "begin_line": 89,
        "end_line": 92,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR",
        "snippet": "  static final DiagnosticType NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR =\n      DiagnosticType.error(\n          \"JSC_NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR\",\n      \"goog.setCssNameMapping only takes an object literal with string values\");",
        "begin_line": 94,
        "end_line": 97,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_CSS_RENAMING_MAP",
        "snippet": "  static final DiagnosticType INVALID_CSS_RENAMING_MAP = DiagnosticType.warning(\n      \"INVALID_CSS_RENAMING_MAP\",\n      \"Invalid entries in css renaming map: {0}\");",
        "begin_line": 99,
        "end_line": 101,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.BASE_CLASS_ERROR",
        "snippet": "  static final DiagnosticType BASE_CLASS_ERROR = DiagnosticType.error(\n      \"JSC_BASE_CLASS_ERROR\",\n      \"incorrect use of goog.base: {0}\");",
        "begin_line": 103,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.GOOG",
        "snippet": "  static final String GOOG = \"goog\";",
        "begin_line": 108,
        "end_line": 108,
        "comment": " The root Closure namespace "
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 110,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.moduleGraph",
        "snippet": "  private final JSModuleGraph moduleGraph;",
        "begin_line": 111,
        "end_line": 111,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.providedNames",
        "snippet": "  private final Map<String, ProvidedName> providedNames =\n      Maps.newTreeMap();",
        "begin_line": 114,
        "end_line": 115,
        "comment": " The goog.provides must be processed in a deterministic order."
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.unrecognizedRequires",
        "snippet": "  private final List<UnrecognizedRequire> unrecognizedRequires =\n      Lists.newArrayList();",
        "begin_line": 117,
        "end_line": 118,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.exportedVariables",
        "snippet": "  private final Set<String> exportedVariables = Sets.newHashSet();",
        "begin_line": 119,
        "end_line": 119,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.requiresLevel",
        "snippet": "  private final CheckLevel requiresLevel;",
        "begin_line": 120,
        "end_line": 120,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.preprocessorSymbolTable",
        "snippet": "  private final PreprocessorSymbolTable preprocessorSymbolTable;",
        "begin_line": 121,
        "end_line": 121,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProvidedName",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProvidedName.namespace",
        "snippet": "    private final String namespace;",
        "begin_line": 767,
        "end_line": 767,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProvidedName",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProvidedName.firstNode",
        "snippet": "    private final Node firstNode;",
        "begin_line": 771,
        "end_line": 771,
        "comment": " goog.provided."
    },
    {
        "class_name": "com.google.javascript.jscomp.ProvidedName",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProvidedName.firstModule",
        "snippet": "    private final JSModule firstModule;",
        "begin_line": 772,
        "end_line": 772,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProvidedName",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProvidedName.explicitNode",
        "snippet": "    private Node explicitNode = null;",
        "begin_line": 776,
        "end_line": 776,
        "comment": " if the namespace is always provided implicitly."
    },
    {
        "class_name": "com.google.javascript.jscomp.ProvidedName",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProvidedName.explicitModule",
        "snippet": "    private JSModule explicitModule = null;",
        "begin_line": 777,
        "end_line": 777,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProvidedName",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProvidedName.candidateDefinition",
        "snippet": "    private Node candidateDefinition = null;",
        "begin_line": 780,
        "end_line": 780,
        "comment": " The candidate definition."
    },
    {
        "class_name": "com.google.javascript.jscomp.ProvidedName",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProvidedName.minimumModule",
        "snippet": "    private JSModule minimumModule = null;",
        "begin_line": 783,
        "end_line": 783,
        "comment": " The minimum module where the provide must appear."
    },
    {
        "class_name": "com.google.javascript.jscomp.ProvidedName",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProvidedName.replacementNode",
        "snippet": "    private Node replacementNode = null;",
        "begin_line": 786,
        "end_line": 786,
        "comment": " The replacement declaration."
    },
    {
        "class_name": "com.google.javascript.jscomp.UnrecognizedRequire",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.UnrecognizedRequire.requireNode",
        "snippet": "    final Node requireNode;",
        "begin_line": 1114,
        "end_line": 1114,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.UnrecognizedRequire",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.UnrecognizedRequire.namespace",
        "snippet": "    final String namespace;",
        "begin_line": 1115,
        "end_line": 1115,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.UnrecognizedRequire",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.UnrecognizedRequire.inputName",
        "snippet": "    final String inputName;",
        "begin_line": 1116,
        "end_line": 1116,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RuntimeTypeCheck",
        "src_path": "src/com/google/javascript/jscomp/RuntimeTypeCheck.java",
        "signature": "com.google.javascript.jscomp.RuntimeTypeCheck.ALPHA",
        "snippet": "  private static final Comparator<JSType> ALPHA = new Comparator<JSType>() {\n    @Override\n    public int compare(JSType t1, JSType t2) {\n      return getName(t1).compareTo(getName(t2));\n    }\n\n    private String getName(JSType type) {\n      if (type.isInstanceType()) {\n        return ((ObjectType) type).getReferenceName();\n      } else if (type.isNullType()\n          || type.isBooleanValueType()\n          || type.isNumberValueType()\n          || type.isStringValueType()\n          || type.isVoidType()) {\n        return type.toString();\n      } else {\n        // Type unchecked at runtime, so we don't care about the sorting order.\n        return \"\";\n      }\n    }\n  };",
        "begin_line": 50,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RuntimeTypeCheck",
        "src_path": "src/com/google/javascript/jscomp/RuntimeTypeCheck.java",
        "signature": "com.google.javascript.jscomp.RuntimeTypeCheck.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RuntimeTypeCheck",
        "src_path": "src/com/google/javascript/jscomp/RuntimeTypeCheck.java",
        "signature": "com.google.javascript.jscomp.RuntimeTypeCheck.logFunction",
        "snippet": "  private final String logFunction;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AddMarkers",
        "src_path": "src/com/google/javascript/jscomp/RuntimeTypeCheck.java",
        "signature": "com.google.javascript.jscomp.AddMarkers.compiler",
        "snippet": "    private final AbstractCompiler compiler;",
        "begin_line": 102,
        "end_line": 102,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.OptimizeArgumentsArray",
        "src_path": "src/com/google/javascript/jscomp/OptimizeArgumentsArray.java",
        "signature": "com.google.javascript.jscomp.OptimizeArgumentsArray.ARGUMENTS",
        "snippet": "  private static final String ARGUMENTS = \"arguments\";",
        "begin_line": 48,
        "end_line": 48,
        "comment": " section 10.1.8"
    },
    {
        "class_name": "com.google.javascript.jscomp.OptimizeArgumentsArray",
        "src_path": "src/com/google/javascript/jscomp/OptimizeArgumentsArray.java",
        "signature": "com.google.javascript.jscomp.OptimizeArgumentsArray.PARAMETER_PREFIX",
        "snippet": "  private static final String PARAMETER_PREFIX =\n      \"JSCompiler_OptimizeArgumentsArray_p\";",
        "begin_line": 52,
        "end_line": 53,
        "comment": " use this string as prefix unless the caller specify a different prefix."
    },
    {
        "class_name": "com.google.javascript.jscomp.OptimizeArgumentsArray",
        "src_path": "src/com/google/javascript/jscomp/OptimizeArgumentsArray.java",
        "signature": "com.google.javascript.jscomp.OptimizeArgumentsArray.paramPredix",
        "snippet": "  private final String paramPredix;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " The prefix for the newly introduced parameter name."
    },
    {
        "class_name": "com.google.javascript.jscomp.OptimizeArgumentsArray",
        "src_path": "src/com/google/javascript/jscomp/OptimizeArgumentsArray.java",
        "signature": "com.google.javascript.jscomp.OptimizeArgumentsArray.uniqueId",
        "snippet": "  private int uniqueId = 0;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " unique integer at the end."
    },
    {
        "class_name": "com.google.javascript.jscomp.OptimizeArgumentsArray",
        "src_path": "src/com/google/javascript/jscomp/OptimizeArgumentsArray.java",
        "signature": "com.google.javascript.jscomp.OptimizeArgumentsArray.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " Reference to the compiler object to notify any changes to source code AST."
    },
    {
        "class_name": "com.google.javascript.jscomp.OptimizeArgumentsArray",
        "src_path": "src/com/google/javascript/jscomp/OptimizeArgumentsArray.java",
        "signature": "com.google.javascript.jscomp.OptimizeArgumentsArray.argumentsAccessStack",
        "snippet": "  private final Deque<List<Node>> argumentsAccessStack = Lists.newLinkedList();",
        "begin_line": 66,
        "end_line": 66,
        "comment": " A stack of arguments access list to the corresponding outer functions."
    },
    {
        "class_name": "com.google.javascript.jscomp.OptimizeArgumentsArray",
        "src_path": "src/com/google/javascript/jscomp/OptimizeArgumentsArray.java",
        "signature": "com.google.javascript.jscomp.OptimizeArgumentsArray.currentArgumentsAccess",
        "snippet": "  private List<Node> currentArgumentsAccess = null;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " This stores a list of argument access in the current scope."
    },
    {
        "class_name": "com.google.javascript.jscomp.ExpandJqueryAliases",
        "src_path": "src/com/google/javascript/jscomp/ExpandJqueryAliases.java",
        "signature": "com.google.javascript.jscomp.ExpandJqueryAliases.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 46,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExpandJqueryAliases",
        "src_path": "src/com/google/javascript/jscomp/ExpandJqueryAliases.java",
        "signature": "com.google.javascript.jscomp.ExpandJqueryAliases.convention",
        "snippet": "  private final CodingConvention convention;",
        "begin_line": 47,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExpandJqueryAliases",
        "src_path": "src/com/google/javascript/jscomp/ExpandJqueryAliases.java",
        "signature": "com.google.javascript.jscomp.ExpandJqueryAliases.logger",
        "snippet": "  private static final Logger logger =\n      Logger.getLogger(ExpandJqueryAliases.class.getName());",
        "begin_line": 48,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExpandJqueryAliases",
        "src_path": "src/com/google/javascript/jscomp/ExpandJqueryAliases.java",
        "signature": "com.google.javascript.jscomp.ExpandJqueryAliases.JQUERY_UNABLE_TO_EXPAND_INVALID_LIT_ERROR",
        "snippet": "  static final DiagnosticType JQUERY_UNABLE_TO_EXPAND_INVALID_LIT_ERROR =\n      DiagnosticType.warning(\"JSC_JQUERY_UNABLE_TO_EXPAND_INVALID_LIT\",\n          \"jQuery.expandedEach call cannot be expanded because the first \" +\n          \"argument must be an object literal or an array of strings \" +\n          \"literal.\");",
        "begin_line": 51,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExpandJqueryAliases",
        "src_path": "src/com/google/javascript/jscomp/ExpandJqueryAliases.java",
        "signature": "com.google.javascript.jscomp.ExpandJqueryAliases.JQUERY_UNABLE_TO_EXPAND_INVALID_NAME_ERROR",
        "snippet": "  static final DiagnosticType JQUERY_UNABLE_TO_EXPAND_INVALID_NAME_ERROR =\n      DiagnosticType.error(\"JSC_JQUERY_UNABLE_TO_EXPAND_INVALID_NAME\",\n          \"jQuery.expandedEach expansion would result in the invalid \" +\n          \"property name \\\"{0}\\\".\");",
        "begin_line": 57,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExpandJqueryAliases",
        "src_path": "src/com/google/javascript/jscomp/ExpandJqueryAliases.java",
        "signature": "com.google.javascript.jscomp.ExpandJqueryAliases.JQUERY_USELESS_EACH_EXPANSION",
        "snippet": "  static final DiagnosticType JQUERY_USELESS_EACH_EXPANSION =\n      DiagnosticType.warning(\"JSC_JQUERY_USELESS_EACH_EXPANSION\",\n          \"jQuery.expandedEach was not expanded as no valid property \" +\n          \"assignments were encountered. Consider using jQuery.each instead.\");",
        "begin_line": 62,
        "end_line": 65,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExpandJqueryAliases",
        "src_path": "src/com/google/javascript/jscomp/ExpandJqueryAliases.java",
        "signature": "com.google.javascript.jscomp.ExpandJqueryAliases.JQUERY_EXTEND_NAMES",
        "snippet": "  private static final Set<String> JQUERY_EXTEND_NAMES = ImmutableSet.of(\n      \"jQuery.extend\", \"jQuery.fn.extend\", \"jQuery.prototype.extend\");",
        "begin_line": 67,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExpandJqueryAliases",
        "src_path": "src/com/google/javascript/jscomp/ExpandJqueryAliases.java",
        "signature": "com.google.javascript.jscomp.ExpandJqueryAliases.JQUERY_EXPANDED_EACH_NAME",
        "snippet": "  private static final String JQUERY_EXPANDED_EACH_NAME =\n      \"jQuery.expandedEach\";",
        "begin_line": 70,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExpandJqueryAliases",
        "src_path": "src/com/google/javascript/jscomp/ExpandJqueryAliases.java",
        "signature": "com.google.javascript.jscomp.ExpandJqueryAliases.peepholePasses",
        "snippet": "  private final PeepholeOptimizationsPass peepholePasses;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FindCallbackArgumentReferences",
        "src_path": "src/com/google/javascript/jscomp/ExpandJqueryAliases.java",
        "signature": "com.google.javascript.jscomp.FindCallbackArgumentReferences.keyName",
        "snippet": "    private final String keyName;",
        "begin_line": 503,
        "end_line": 503,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FindCallbackArgumentReferences",
        "src_path": "src/com/google/javascript/jscomp/ExpandJqueryAliases.java",
        "signature": "com.google.javascript.jscomp.FindCallbackArgumentReferences.valueName",
        "snippet": "    private final String valueName;",
        "begin_line": 504,
        "end_line": 504,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FindCallbackArgumentReferences",
        "src_path": "src/com/google/javascript/jscomp/ExpandJqueryAliases.java",
        "signature": "com.google.javascript.jscomp.FindCallbackArgumentReferences.startingScope",
        "snippet": "    private Scope startingScope;",
        "begin_line": 505,
        "end_line": 505,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FindCallbackArgumentReferences",
        "src_path": "src/com/google/javascript/jscomp/ExpandJqueryAliases.java",
        "signature": "com.google.javascript.jscomp.FindCallbackArgumentReferences.keyReferences",
        "snippet": "    private List<Node> keyReferences;",
        "begin_line": 506,
        "end_line": 506,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FindCallbackArgumentReferences",
        "src_path": "src/com/google/javascript/jscomp/ExpandJqueryAliases.java",
        "signature": "com.google.javascript.jscomp.FindCallbackArgumentReferences.valueReferences",
        "snippet": "    private List<Node> valueReferences;",
        "begin_line": 507,
        "end_line": 507,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifier",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifier.INVALID_NO_SIDE_EFFECT_ANNOTATION",
        "snippet": "  static final DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION =\n      DiagnosticType.error(\n          \"JSC_INVALID_NO_SIDE_EFFECT_ANNOTATION\",\n          \"@nosideeffects may only appear in externs files.\");",
        "begin_line": 65,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifier",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifier.INVALID_MODIFIES_ANNOTATION",
        "snippet": "  static final DiagnosticType INVALID_MODIFIES_ANNOTATION =\n    DiagnosticType.error(\n        \"JSC_INVALID_MODIFIES_ANNOTATION\",\n        \"@modifies may only appear in externs files.\");",
        "begin_line": 70,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifier",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifier.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 75,
        "end_line": 75,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifier",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifier.definitionProvider",
        "snippet": "  private final DefinitionProvider definitionProvider;",
        "begin_line": 76,
        "end_line": 76,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifier",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifier.functionSideEffectMap",
        "snippet": "  private final Map<Node, FunctionInformation> functionSideEffectMap;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " Function node -> function side effects map"
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifier",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifier.allFunctionCalls",
        "snippet": "  private final List<Node> allFunctionCalls;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " List of all function call sites; used to iterate in markPureFunctionCalls."
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifier",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifier.externs",
        "snippet": "  private Node externs;",
        "begin_line": 86,
        "end_line": 86,
        "comment": " fields are null until process is called."
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifier",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifier.root",
        "snippet": "  private Node root;",
        "begin_line": 87,
        "end_line": 87,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionAnalyzer",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.FunctionAnalyzer.inExterns",
        "snippet": "    private final boolean inExterns;",
        "begin_line": 373,
        "end_line": 373,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInformation",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.FunctionInformation.extern",
        "snippet": "    private final boolean extern;",
        "begin_line": 886,
        "end_line": 886,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInformation",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.FunctionInformation.callsInFunctionBody",
        "snippet": "    private final List<Node> callsInFunctionBody = Lists.newArrayList();",
        "begin_line": 887,
        "end_line": 887,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInformation",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.FunctionInformation.blacklisted",
        "snippet": "    private Set<Var> blacklisted = Sets.newHashSet();",
        "begin_line": 888,
        "end_line": 888,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInformation",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.FunctionInformation.taintedLocals",
        "snippet": "    private Set<Var> taintedLocals = Sets.newHashSet();",
        "begin_line": 889,
        "end_line": 889,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInformation",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.FunctionInformation.knownLocals",
        "snippet": "    private Set<String> knownLocals = Sets.newHashSet();",
        "begin_line": 890,
        "end_line": 890,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInformation",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.FunctionInformation.pureFunction",
        "snippet": "    private boolean pureFunction = false;",
        "begin_line": 891,
        "end_line": 891,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInformation",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.FunctionInformation.functionThrows",
        "snippet": "    private boolean functionThrows = false;",
        "begin_line": 892,
        "end_line": 892,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInformation",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.FunctionInformation.taintsGlobalState",
        "snippet": "    private boolean taintsGlobalState = false;",
        "begin_line": 893,
        "end_line": 893,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInformation",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.FunctionInformation.taintsThis",
        "snippet": "    private boolean taintsThis = false;",
        "begin_line": 894,
        "end_line": 894,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInformation",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.FunctionInformation.taintsArguments",
        "snippet": "    private boolean taintsArguments = false;",
        "begin_line": 895,
        "end_line": 895,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInformation",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.FunctionInformation.taintsUnknown",
        "snippet": "    private boolean taintsUnknown = false;",
        "begin_line": 896,
        "end_line": 896,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInformation",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.FunctionInformation.taintsReturn",
        "snippet": "    private boolean taintsReturn = false;",
        "begin_line": 897,
        "end_line": 897,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Driver",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.Driver.compiler",
        "snippet": "    private final AbstractCompiler compiler;",
        "begin_line": 1083,
        "end_line": 1083,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Driver",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.Driver.reportPath",
        "snippet": "    private final String reportPath;",
        "begin_line": 1084,
        "end_line": 1084,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Driver",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.Driver.useNameReferenceGraph",
        "snippet": "    private final boolean useNameReferenceGraph;",
        "begin_line": 1085,
        "end_line": 1085,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FindExportableNodes",
        "src_path": "src/com/google/javascript/jscomp/FindExportableNodes.java",
        "signature": "com.google.javascript.jscomp.FindExportableNodes.NON_GLOBAL_ERROR",
        "snippet": "  static final DiagnosticType NON_GLOBAL_ERROR =\n      DiagnosticType.error(\"JSC_NON_GLOBAL_ERROR\",\n          \"@export only applies to symbols/properties defined in the \" +\n          \"global scope.\");",
        "begin_line": 46,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FindExportableNodes",
        "src_path": "src/com/google/javascript/jscomp/FindExportableNodes.java",
        "signature": "com.google.javascript.jscomp.FindExportableNodes.exports",
        "snippet": "  private final LinkedHashMap<String, GenerateNodeContext> exports;",
        "begin_line": 55,
        "end_line": 55,
        "comment": "\n   * It's convenient to be able to iterate over exports in the order in which\n   * they are encountered.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.FindExportableNodes",
        "src_path": "src/com/google/javascript/jscomp/FindExportableNodes.java",
        "signature": "com.google.javascript.jscomp.FindExportableNodes.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GenerateNodeContext",
        "src_path": "src/com/google/javascript/jscomp/FindExportableNodes.java",
        "signature": "com.google.javascript.jscomp.GenerateNodeContext.scriptNode",
        "snippet": "    private final Node scriptNode;",
        "begin_line": 114,
        "end_line": 114,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GenerateNodeContext",
        "src_path": "src/com/google/javascript/jscomp/FindExportableNodes.java",
        "signature": "com.google.javascript.jscomp.GenerateNodeContext.contextNode",
        "snippet": "    private final Node contextNode;",
        "begin_line": 115,
        "end_line": 115,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GenerateNodeContext",
        "src_path": "src/com/google/javascript/jscomp/FindExportableNodes.java",
        "signature": "com.google.javascript.jscomp.GenerateNodeContext.node",
        "snippet": "    private final Node node;",
        "begin_line": 116,
        "end_line": 116,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 27,
        "end_line": 27,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.group",
        "snippet": "  final DiagnosticGroup group;",
        "begin_line": 29,
        "end_line": 29,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.level",
        "snippet": "  final CheckLevel level;",
        "begin_line": 30,
        "end_line": 30,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariables",
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariables.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 76,
        "end_line": 76,
        "comment": "\n   * Implementation:\n   *\n   * This pass first perform a traversal to gather a list of Candidates that\n   * could be inlined using {@link GatherCandiates}.\n   *\n   * The second step involves verifying that each candidate is actually safe\n   * to inline with {@link Candidate#canInline()} and finally perform inlining\n   * using {@link Candidate#inlineVariable()}.\n   *\n   * The reason for the delayed evaluation of the candidates is because we\n   * need two separate dataflow result.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariables",
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariables.inlinedNewDependencies",
        "snippet": "  private final Set<Var> inlinedNewDependencies = Sets.newHashSet();",
        "begin_line": 77,
        "end_line": 77,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariables",
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariables.cfg",
        "snippet": "  private ControlFlowGraph<Node> cfg;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " scope."
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariables",
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariables.candidates",
        "snippet": "  private List<Candidate> candidates;",
        "begin_line": 82,
        "end_line": 82,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariables",
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariables.reachingDef",
        "snippet": "  private MustBeReachingVariableDef reachingDef;",
        "begin_line": 83,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariables",
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariables.reachingUses",
        "snippet": "  private MaybeReachingVariableUse reachingUses;",
        "begin_line": 84,
        "end_line": 84,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariables",
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariables.SIDE_EFFECT_PREDICATE",
        "snippet": "  private static final Predicate<Node> SIDE_EFFECT_PREDICATE =\n    new Predicate<Node>() {\n      @Override\n      public boolean apply(Node n) {\n        // When the node is null it means, we reached the implicit return\n        // where the function returns (possibly without an return statement)\n        if (n == null) {\n          return false;\n        }\n\n        // TODO(user): We only care about calls to functions that\n        // passes one of the dependent variable to a non-side-effect free\n        // function.\n        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n          return true;\n        }\n\n        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n          return true;\n        }\n\n        if (n.isDelProp()) {\n          return true;\n        }\n\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n            return true;\n          }\n        }\n        return false;\n      }\n  };",
        "begin_line": 86,
        "end_line": 118,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Candidate",
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "signature": "com.google.javascript.jscomp.Candidate.varName",
        "snippet": "    private final String varName;",
        "begin_line": 253,
        "end_line": 253,
        "comment": " Name of the variable."
    },
    {
        "class_name": "com.google.javascript.jscomp.Candidate",
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "signature": "com.google.javascript.jscomp.Candidate.def",
        "snippet": "    private Node def;",
        "begin_line": 256,
        "end_line": 256,
        "comment": " Nodes related to the definition."
    },
    {
        "class_name": "com.google.javascript.jscomp.Candidate",
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "signature": "com.google.javascript.jscomp.Candidate.defMetadata",
        "snippet": "    private final Definition defMetadata;",
        "begin_line": 257,
        "end_line": 257,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Candidate",
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "signature": "com.google.javascript.jscomp.Candidate.use",
        "snippet": "    private final Node use;",
        "begin_line": 260,
        "end_line": 260,
        "comment": " Nodes related to the use."
    },
    {
        "class_name": "com.google.javascript.jscomp.Candidate",
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "signature": "com.google.javascript.jscomp.Candidate.useCfgNode",
        "snippet": "    private final Node useCfgNode;",
        "begin_line": 261,
        "end_line": 261,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Candidate",
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "signature": "com.google.javascript.jscomp.Candidate.numUseWithinUseCfgNode",
        "snippet": "    private int numUseWithinUseCfgNode;",
        "begin_line": 265,
        "end_line": 265,
        "comment": " use in the CFG."
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionRewriter",
        "src_path": "src/com/google/javascript/jscomp/FunctionRewriter.java",
        "signature": "com.google.javascript.jscomp.FunctionRewriter.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 48,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionRewriter",
        "src_path": "src/com/google/javascript/jscomp/FunctionRewriter.java",
        "signature": "com.google.javascript.jscomp.FunctionRewriter.SAVINGS_THRESHOLD",
        "snippet": "  private static final int SAVINGS_THRESHOLD = 16;",
        "begin_line": 51,
        "end_line": 51,
        "comment": " Selected arbitrarily."
    },
    {
        "class_name": "com.google.javascript.jscomp.Reduction",
        "src_path": "src/com/google/javascript/jscomp/FunctionRewriter.java",
        "signature": "com.google.javascript.jscomp.Reduction.parent",
        "snippet": "    private final Node parent;",
        "begin_line": 126,
        "end_line": 126,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Reduction",
        "src_path": "src/com/google/javascript/jscomp/FunctionRewriter.java",
        "signature": "com.google.javascript.jscomp.Reduction.oldChild",
        "snippet": "    private final Node oldChild;",
        "begin_line": 127,
        "end_line": 127,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Reduction",
        "src_path": "src/com/google/javascript/jscomp/FunctionRewriter.java",
        "signature": "com.google.javascript.jscomp.Reduction.newChild",
        "snippet": "    private final Node newChild;",
        "begin_line": 128,
        "end_line": 128,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReductionGatherer",
        "src_path": "src/com/google/javascript/jscomp/FunctionRewriter.java",
        "signature": "com.google.javascript.jscomp.ReductionGatherer.reducers",
        "snippet": "    private final List<Reducer> reducers;",
        "begin_line": 159,
        "end_line": 159,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReductionGatherer",
        "src_path": "src/com/google/javascript/jscomp/FunctionRewriter.java",
        "signature": "com.google.javascript.jscomp.ReductionGatherer.reductions",
        "snippet": "    private final Multimap<Reducer, Reduction> reductions;",
        "begin_line": 160,
        "end_line": 160,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.EmptyFunctionReducer",
        "src_path": "src/com/google/javascript/jscomp/FunctionRewriter.java",
        "signature": "com.google.javascript.jscomp.EmptyFunctionReducer.FACTORY_METHOD_NAME",
        "snippet": "    static final String FACTORY_METHOD_NAME = \"JSCompiler_emptyFn\";",
        "begin_line": 236,
        "end_line": 236,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.EmptyFunctionReducer",
        "src_path": "src/com/google/javascript/jscomp/FunctionRewriter.java",
        "signature": "com.google.javascript.jscomp.EmptyFunctionReducer.HELPER_SOURCE",
        "snippet": "    static final String HELPER_SOURCE =\n        \"function \" + FACTORY_METHOD_NAME + \"() {\" +\n        \"  return function() {}\" +\n        \"}\";",
        "begin_line": 237,
        "end_line": 240,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IdentityReducer",
        "src_path": "src/com/google/javascript/jscomp/FunctionRewriter.java",
        "signature": "com.google.javascript.jscomp.IdentityReducer.FACTORY_METHOD_NAME",
        "snippet": "    static final String FACTORY_METHOD_NAME = \"JSCompiler_identityFn\";",
        "begin_line": 291,
        "end_line": 291,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IdentityReducer",
        "src_path": "src/com/google/javascript/jscomp/FunctionRewriter.java",
        "signature": "com.google.javascript.jscomp.IdentityReducer.HELPER_SOURCE",
        "snippet": "    static final String HELPER_SOURCE =\n        \"function \" + FACTORY_METHOD_NAME + \"() {\" +\n        \"  return function(\" + FACTORY_METHOD_NAME + \"_value) {\" +\n             \"return \" + FACTORY_METHOD_NAME + \"_value}\" +\n        \"}\";",
        "begin_line": 292,
        "end_line": 296,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReturnConstantReducer",
        "src_path": "src/com/google/javascript/jscomp/FunctionRewriter.java",
        "signature": "com.google.javascript.jscomp.ReturnConstantReducer.FACTORY_METHOD_NAME",
        "snippet": "    static final String FACTORY_METHOD_NAME = \"JSCompiler_returnArg\";",
        "begin_line": 350,
        "end_line": 350,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReturnConstantReducer",
        "src_path": "src/com/google/javascript/jscomp/FunctionRewriter.java",
        "signature": "com.google.javascript.jscomp.ReturnConstantReducer.HELPER_SOURCE",
        "snippet": "    static final String HELPER_SOURCE =\n        \"function \" + FACTORY_METHOD_NAME +\n        \"(\" + FACTORY_METHOD_NAME + \"_value) {\" +\n        \"  return function() {return \" + FACTORY_METHOD_NAME + \"_value}\" +\n        \"}\";",
        "begin_line": 351,
        "end_line": 355,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GetterReducer",
        "src_path": "src/com/google/javascript/jscomp/FunctionRewriter.java",
        "signature": "com.google.javascript.jscomp.GetterReducer.FACTORY_METHOD_NAME",
        "snippet": "    static final String FACTORY_METHOD_NAME = \"JSCompiler_get\";",
        "begin_line": 403,
        "end_line": 403,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GetterReducer",
        "src_path": "src/com/google/javascript/jscomp/FunctionRewriter.java",
        "signature": "com.google.javascript.jscomp.GetterReducer.HELPER_SOURCE",
        "snippet": "    static final String HELPER_SOURCE =\n        \"function \" + FACTORY_METHOD_NAME + \"(\" +\n        FACTORY_METHOD_NAME + \"_name) {\" +\n        \"  return function() {return this[\" + FACTORY_METHOD_NAME + \"_name]}\" +\n        \"}\";",
        "begin_line": 404,
        "end_line": 408,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SetterReducer",
        "src_path": "src/com/google/javascript/jscomp/FunctionRewriter.java",
        "signature": "com.google.javascript.jscomp.SetterReducer.FACTORY_METHOD_NAME",
        "snippet": "    static final String FACTORY_METHOD_NAME = \"JSCompiler_set\";",
        "begin_line": 462,
        "end_line": 462,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SetterReducer",
        "src_path": "src/com/google/javascript/jscomp/FunctionRewriter.java",
        "signature": "com.google.javascript.jscomp.SetterReducer.HELPER_SOURCE",
        "snippet": "    static final String HELPER_SOURCE =\n        \"function \" + FACTORY_METHOD_NAME + \"(\" +\n        FACTORY_METHOD_NAME + \"_name) {\" +\n        \"  return function(\" + FACTORY_METHOD_NAME + \"_value) {\" +\n        \"this[\" + FACTORY_METHOD_NAME + \"_name] = \" +\n        FACTORY_METHOD_NAME + \"_value}\" +\n        \"}\";",
        "begin_line": 463,
        "end_line": 469,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ARGUMENTS",
        "snippet": "  public static final String ARGUMENTS = \"arguments\";",
        "begin_line": 50,
        "end_line": 50,
        "comment": " the arguments declaration."
    },
    {
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.nameStack",
        "snippet": "  private Deque<Renamer> nameStack = new ArrayDeque<Renamer>();",
        "begin_line": 60,
        "end_line": 60,
        "comment": " Both belong to a scope by themselves."
    },
    {
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.rootRenamer",
        "snippet": "  private final Renamer rootRenamer;",
        "begin_line": 61,
        "end_line": 61,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ContextualRenameInverter",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.ContextualRenameInverter.compiler",
        "snippet": "    private final AbstractCompiler compiler;",
        "begin_line": 263,
        "end_line": 263,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ContextualRenameInverter",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.ContextualRenameInverter.referencedNames",
        "snippet": "    private Set<String> referencedNames = ImmutableSet.of();",
        "begin_line": 266,
        "end_line": 266,
        "comment": " The set of names referenced in the current scope."
    },
    {
        "class_name": "com.google.javascript.jscomp.ContextualRenameInverter",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.ContextualRenameInverter.referenceStack",
        "snippet": "    private Deque<Set<String>> referenceStack = new ArrayDeque<Set<String>>();",
        "begin_line": 269,
        "end_line": 269,
        "comment": " Stack reference sets."
    },
    {
        "class_name": "com.google.javascript.jscomp.ContextualRenameInverter",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.ContextualRenameInverter.nameMap",
        "snippet": "    private Map<String, List<Node>> nameMap = Maps.newHashMap();",
        "begin_line": 272,
        "end_line": 272,
        "comment": " Name are globally unique initially, so we don't need a per-scope map."
    },
    {
        "class_name": "com.google.javascript.jscomp.ContextualRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.ContextualRenamer.nameUsage",
        "snippet": "    private final Multiset<String> nameUsage;",
        "begin_line": 431,
        "end_line": 431,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ContextualRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.ContextualRenamer.declarations",
        "snippet": "    private final Map<String, String> declarations = Maps.newHashMap();",
        "begin_line": 432,
        "end_line": 432,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ContextualRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.ContextualRenamer.global",
        "snippet": "    private final boolean global;",
        "begin_line": 433,
        "end_line": 433,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ContextualRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.ContextualRenamer.UNIQUE_ID_SEPARATOR",
        "snippet": "    final static String UNIQUE_ID_SEPARATOR = \"$$\";",
        "begin_line": 435,
        "end_line": 435,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.InlineRenamer.declarations",
        "snippet": "    private final Map<String, String> declarations = Maps.newHashMap();",
        "begin_line": 516,
        "end_line": 516,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.InlineRenamer.uniqueIdSupplier",
        "snippet": "    private final Supplier<String> uniqueIdSupplier;",
        "begin_line": 517,
        "end_line": 517,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.InlineRenamer.idPrefix",
        "snippet": "    private final String idPrefix;",
        "begin_line": 518,
        "end_line": 518,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.InlineRenamer.removeConstness",
        "snippet": "    private final boolean removeConstness;",
        "begin_line": 519,
        "end_line": 519,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BoilerplateRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.BoilerplateRenamer.uniqueIdSupplier",
        "snippet": "    private final Supplier<String> uniqueIdSupplier;",
        "begin_line": 578,
        "end_line": 578,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BoilerplateRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.BoilerplateRenamer.idPrefix",
        "snippet": "    private final String idPrefix;",
        "begin_line": 579,
        "end_line": 579,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.WhitelistedRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.WhitelistedRenamer.delegate",
        "snippet": "    private Renamer delegate;",
        "begin_line": 596,
        "end_line": 596,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.WhitelistedRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.WhitelistedRenamer.whitelist",
        "snippet": "    private Set<String> whitelist;",
        "begin_line": 597,
        "end_line": 597,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CrossModuleCodeMotion",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleCodeMotion.java",
        "signature": "com.google.javascript.jscomp.CrossModuleCodeMotion.logger",
        "snippet": "  private static final Logger logger =\n      Logger.getLogger(CrossModuleCodeMotion.class.getName());",
        "begin_line": 42,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CrossModuleCodeMotion",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleCodeMotion.java",
        "signature": "com.google.javascript.jscomp.CrossModuleCodeMotion.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CrossModuleCodeMotion",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleCodeMotion.java",
        "signature": "com.google.javascript.jscomp.CrossModuleCodeMotion.graph",
        "snippet": "  private final JSModuleGraph graph;",
        "begin_line": 46,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CrossModuleCodeMotion",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleCodeMotion.java",
        "signature": "com.google.javascript.jscomp.CrossModuleCodeMotion.moduleVarParentMap",
        "snippet": "  private final Map<JSModule, Node> moduleVarParentMap =\n      new HashMap<JSModule, Node>();",
        "begin_line": 52,
        "end_line": 53,
        "comment": "\n   * Map from module to the node in that module that should parent any string\n   * variable declarations that have to be moved into that module\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CrossModuleCodeMotion",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleCodeMotion.java",
        "signature": "com.google.javascript.jscomp.CrossModuleCodeMotion.namedInfo",
        "snippet": "  private final Map<Scope.Var, NamedInfo> namedInfo =\n      new LinkedHashMap<Var, NamedInfo>();",
        "begin_line": 59,
        "end_line": 60,
        "comment": "\n   * NOTE - I made this a LinkedHashMap to make testing easier. With a regular\n   * HashMap, the variables may not output in a consistent order\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.NamedInfo",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleCodeMotion.java",
        "signature": "com.google.javascript.jscomp.NamedInfo.allowMove",
        "snippet": "    boolean allowMove = true;",
        "begin_line": 134,
        "end_line": 134,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NamedInfo",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleCodeMotion.java",
        "signature": "com.google.javascript.jscomp.NamedInfo.deepestModule",
        "snippet": "    private JSModule deepestModule = null;",
        "begin_line": 137,
        "end_line": 137,
        "comment": " The deepest module where the variable is used. Starts at null"
    },
    {
        "class_name": "com.google.javascript.jscomp.NamedInfo",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleCodeMotion.java",
        "signature": "com.google.javascript.jscomp.NamedInfo.declModule",
        "snippet": "    private JSModule declModule = null;",
        "begin_line": 140,
        "end_line": 140,
        "comment": " The module where declarations appear"
    },
    {
        "class_name": "com.google.javascript.jscomp.NamedInfo",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleCodeMotion.java",
        "signature": "com.google.javascript.jscomp.NamedInfo.declarations",
        "snippet": "    private final Deque<Declaration> declarations =\n        new ArrayDeque<Declaration>();",
        "begin_line": 143,
        "end_line": 144,
        "comment": " information on the spot where the item was declared"
    },
    {
        "class_name": "com.google.javascript.jscomp.Declaration",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleCodeMotion.java",
        "signature": "com.google.javascript.jscomp.Declaration.module",
        "snippet": "    final JSModule module;",
        "begin_line": 188,
        "end_line": 188,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Declaration",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleCodeMotion.java",
        "signature": "com.google.javascript.jscomp.Declaration.node",
        "snippet": "    final Node node;",
        "begin_line": 189,
        "end_line": 189,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThis",
        "src_path": "src/com/google/javascript/jscomp/CheckGlobalThis.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThis.GLOBAL_THIS",
        "snippet": "  static final DiagnosticType GLOBAL_THIS = DiagnosticType.warning(\n      \"JSC_USED_GLOBAL_THIS\",\n      \"dangerous use of the global 'this' object\");",
        "begin_line": 58,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThis",
        "src_path": "src/com/google/javascript/jscomp/CheckGlobalThis.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThis.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThis",
        "src_path": "src/com/google/javascript/jscomp/CheckGlobalThis.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThis.assignLhsChild",
        "snippet": "  private Node assignLhsChild = null;",
        "begin_line": 69,
        "end_line": 69,
        "comment": "\n   * If {@code assignLhsChild != null}, then the node being traversed is\n   * a descendant of the first child of an ASSIGN node. assignLhsChild's\n   * parent is this ASSIGN node.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.GatherRawExports",
        "src_path": "src/com/google/javascript/jscomp/GatherRawExports.java",
        "signature": "com.google.javascript.jscomp.GatherRawExports.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 34,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GatherRawExports",
        "src_path": "src/com/google/javascript/jscomp/GatherRawExports.java",
        "signature": "com.google.javascript.jscomp.GatherRawExports.GLOBAL_THIS_NAMES",
        "snippet": "  private static final String GLOBAL_THIS_NAMES[] = { \"window\", \"top\" };",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GatherRawExports",
        "src_path": "src/com/google/javascript/jscomp/GatherRawExports.java",
        "signature": "com.google.javascript.jscomp.GatherRawExports.exportedVariables",
        "snippet": "  private final Set<String> exportedVariables = Sets.newHashSet();",
        "begin_line": 38,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameLabels",
        "src_path": "src/com/google/javascript/jscomp/RenameLabels.java",
        "signature": "com.google.javascript.jscomp.RenameLabels.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameLabels",
        "src_path": "src/com/google/javascript/jscomp/RenameLabels.java",
        "signature": "com.google.javascript.jscomp.RenameLabels.nameSupplier",
        "snippet": "  private final Supplier<String> nameSupplier;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameLabels",
        "src_path": "src/com/google/javascript/jscomp/RenameLabels.java",
        "signature": "com.google.javascript.jscomp.RenameLabels.removeUnused",
        "snippet": "  private final boolean removeUnused;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultNameSupplier",
        "src_path": "src/com/google/javascript/jscomp/RenameLabels.java",
        "signature": "com.google.javascript.jscomp.DefaultNameSupplier.nameGenerator",
        "snippet": "    final NameGenerator nameGenerator =\n        new NameGenerator(new HashSet<String>(), \"\", null);",
        "begin_line": 91,
        "end_line": 92,
        "comment": " NameGenerator is used to create safe label names."
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessLabels",
        "src_path": "src/com/google/javascript/jscomp/RenameLabels.java",
        "signature": "com.google.javascript.jscomp.ProcessLabels.namespaceStack",
        "snippet": "    final Deque<LabelNamespace> namespaceStack = Lists.newLinkedList();",
        "begin_line": 112,
        "end_line": 112,
        "comment": " inner scope, so a new namespace is created each time a scope is entered."
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessLabels",
        "src_path": "src/com/google/javascript/jscomp/RenameLabels.java",
        "signature": "com.google.javascript.jscomp.ProcessLabels.names",
        "snippet": "    final ArrayList<String> names = new ArrayList<String>();",
        "begin_line": 116,
        "end_line": 116,
        "comment": " the second \"b\", etc."
    },
    {
        "class_name": "com.google.javascript.jscomp.LabelInfo",
        "src_path": "src/com/google/javascript/jscomp/RenameLabels.java",
        "signature": "com.google.javascript.jscomp.LabelInfo.referenced",
        "snippet": "    boolean referenced = false;",
        "begin_line": 265,
        "end_line": 265,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LabelInfo",
        "src_path": "src/com/google/javascript/jscomp/RenameLabels.java",
        "signature": "com.google.javascript.jscomp.LabelInfo.id",
        "snippet": "    final int id;",
        "begin_line": 266,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LabelNamespace",
        "src_path": "src/com/google/javascript/jscomp/RenameLabels.java",
        "signature": "com.google.javascript.jscomp.LabelNamespace.renameMap",
        "snippet": "    final Map<String, LabelInfo> renameMap = new HashMap<String, LabelInfo>();",
        "begin_line": 275,
        "end_line": 275,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.WarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/WarningsGuard.java",
        "signature": "com.google.javascript.jscomp.WarningsGuard.value",
        "snippet": "    final int value;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ConcreteType",
        "src_path": "src/com/google/javascript/jscomp/ConcreteType.java",
        "signature": "com.google.javascript.jscomp.ConcreteType.NONE",
        "snippet": "  static final ConcreteType NONE = new ConcreteNoneType();",
        "begin_line": 49,
        "end_line": 49,
        "comment": " Static instance of the empty set of concrete types. "
    },
    {
        "class_name": "com.google.javascript.jscomp.ConcreteType",
        "src_path": "src/com/google/javascript/jscomp/ConcreteType.java",
        "signature": "com.google.javascript.jscomp.ConcreteType.ALL",
        "snippet": "  static final ConcreteType ALL = new ConcreteAll();",
        "begin_line": 52,
        "end_line": 52,
        "comment": " Static instance of the set of all concrete types. "
    },
    {
        "class_name": "com.google.javascript.jscomp.ConcreteType",
        "src_path": "src/com/google/javascript/jscomp/ConcreteType.java",
        "signature": "com.google.javascript.jscomp.ConcreteType.NO_FUNCTIONS",
        "snippet": "  private static final List<ConcreteFunctionType> NO_FUNCTIONS =\n      Lists.<ConcreteFunctionType>newArrayList();",
        "begin_line": 55,
        "end_line": 56,
        "comment": " Constant empty list of function types. "
    },
    {
        "class_name": "com.google.javascript.jscomp.ConcreteType",
        "src_path": "src/com/google/javascript/jscomp/ConcreteType.java",
        "signature": "com.google.javascript.jscomp.ConcreteType.NO_INSTANCES",
        "snippet": "  private static final List<ConcreteInstanceType> NO_INSTANCES =\n      Lists.<ConcreteInstanceType>newArrayList();",
        "begin_line": 59,
        "end_line": 60,
        "comment": " Constant empty list of instance types. "
    },
    {
        "class_name": "com.google.javascript.jscomp.ConcreteType",
        "src_path": "src/com/google/javascript/jscomp/ConcreteType.java",
        "signature": "com.google.javascript.jscomp.ConcreteType.NO_SLOTS",
        "snippet": "  private static final List<StaticSlot<ConcreteType>> NO_SLOTS =\n      Lists.<StaticSlot<ConcreteType>>newArrayList();",
        "begin_line": 63,
        "end_line": 64,
        "comment": " Constant empty list of slots. "
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeFilter",
        "src_path": "src/com/google/javascript/jscomp/ConcreteType.java",
        "signature": "com.google.javascript.jscomp.TypeFilter.emptyList",
        "snippet": "    final List<C> emptyList;",
        "begin_line": 162,
        "end_line": 162,
        "comment": " The empty list for a caller to use if there are no non-null outputs. "
    },
    {
        "class_name": "com.google.javascript.jscomp.ConcreteFunctionType",
        "src_path": "src/com/google/javascript/jscomp/ConcreteType.java",
        "signature": "com.google.javascript.jscomp.ConcreteFunctionType.CALL_SLOT_NAME",
        "snippet": "    static final String CALL_SLOT_NAME = \":call\";",
        "begin_line": 287,
        "end_line": 287,
        "comment": " Name used for the call slot (see {@code getCallSlot}). "
    },
    {
        "class_name": "com.google.javascript.jscomp.ConcreteFunctionType",
        "src_path": "src/com/google/javascript/jscomp/ConcreteType.java",
        "signature": "com.google.javascript.jscomp.ConcreteFunctionType.THIS_SLOT_NAME",
        "snippet": "    static final String THIS_SLOT_NAME = \":this\";",
        "begin_line": 290,
        "end_line": 290,
        "comment": " Name used for the this slot (see {@code getThisSlot}). "
    },
    {
        "class_name": "com.google.javascript.jscomp.ConcreteFunctionType",
        "src_path": "src/com/google/javascript/jscomp/ConcreteType.java",
        "signature": "com.google.javascript.jscomp.ConcreteFunctionType.RETURN_SLOT_NAME",
        "snippet": "    static final String RETURN_SLOT_NAME = \":return\";",
        "begin_line": 293,
        "end_line": 293,
        "comment": " Name used for the return slot (see {@code getReturnSlot}). "
    },
    {
        "class_name": "com.google.javascript.jscomp.ConcreteFunctionType",
        "src_path": "src/com/google/javascript/jscomp/ConcreteType.java",
        "signature": "com.google.javascript.jscomp.ConcreteFunctionType.factory",
        "snippet": "    private final Factory factory;",
        "begin_line": 295,
        "end_line": 295,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ConcreteFunctionType",
        "src_path": "src/com/google/javascript/jscomp/ConcreteType.java",
        "signature": "com.google.javascript.jscomp.ConcreteFunctionType.declaration",
        "snippet": "    private final Node declaration;",
        "begin_line": 296,
        "end_line": 296,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ConcreteFunctionType",
        "src_path": "src/com/google/javascript/jscomp/ConcreteType.java",
        "signature": "com.google.javascript.jscomp.ConcreteFunctionType.parentScope",
        "snippet": "    private final StaticScope<ConcreteType> parentScope;",
        "begin_line": 297,
        "end_line": 297,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ConcreteFunctionType",
        "src_path": "src/com/google/javascript/jscomp/ConcreteType.java",
        "signature": "com.google.javascript.jscomp.ConcreteFunctionType.bodyScope",
        "snippet": "    private StaticScope<ConcreteType> bodyScope;",
        "begin_line": 298,
        "end_line": 298,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ConcreteFunctionType",
        "src_path": "src/com/google/javascript/jscomp/ConcreteType.java",
        "signature": "com.google.javascript.jscomp.ConcreteFunctionType.instanceType",
        "snippet": "    private ConcreteInstanceType instanceType;",
        "begin_line": 299,
        "end_line": 299,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ConcreteFunctionType",
        "src_path": "src/com/google/javascript/jscomp/ConcreteType.java",
        "signature": "com.google.javascript.jscomp.ConcreteFunctionType.prototypeType",
        "snippet": "    private ConcreteInstanceType prototypeType;",
        "begin_line": 300,
        "end_line": 300,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ConcreteInstanceType",
        "src_path": "src/com/google/javascript/jscomp/ConcreteType.java",
        "signature": "com.google.javascript.jscomp.ConcreteInstanceType.factory",
        "snippet": "    private final Factory factory;",
        "begin_line": 451,
        "end_line": 451,
        "comment": " Factory for creating types and scopes. "
    },
    {
        "class_name": "com.google.javascript.jscomp.ConcreteInstanceType",
        "src_path": "src/com/google/javascript/jscomp/ConcreteType.java",
        "signature": "com.google.javascript.jscomp.ConcreteInstanceType.instanceType",
        "snippet": "    public final ObjectType instanceType;",
        "begin_line": 454,
        "end_line": 454,
        "comment": " Stores the normal type information for this instance. "
    },
    {
        "class_name": "com.google.javascript.jscomp.ConcreteInstanceType",
        "src_path": "src/com/google/javascript/jscomp/ConcreteType.java",
        "signature": "com.google.javascript.jscomp.ConcreteInstanceType.prototype",
        "snippet": "    private ConcreteInstanceType prototype;",
        "begin_line": 457,
        "end_line": 457,
        "comment": " The type information for the implicit prototype of this type, if any. "
    },
    {
        "class_name": "com.google.javascript.jscomp.ConcreteInstanceType",
        "src_path": "src/com/google/javascript/jscomp/ConcreteType.java",
        "signature": "com.google.javascript.jscomp.ConcreteInstanceType.scope",
        "snippet": "    private StaticScope<ConcreteType> scope;",
        "begin_line": 463,
        "end_line": 463,
        "comment": "\n     * A scope containing the properties of this instance, created on demand.\n     * Its parent scope corresponds to the scope of the implicit prototype.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.ConcreteUnionType",
        "src_path": "src/com/google/javascript/jscomp/ConcreteType.java",
        "signature": "com.google.javascript.jscomp.ConcreteUnionType.alternatives",
        "snippet": "    private final Set<ConcreteType> alternatives;",
        "begin_line": 553,
        "end_line": 553,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ConcreteUniqueType",
        "src_path": "src/com/google/javascript/jscomp/ConcreteType.java",
        "signature": "com.google.javascript.jscomp.ConcreteUniqueType.id",
        "snippet": "    private final int id;",
        "begin_line": 654,
        "end_line": 654,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.warningGuardSpec",
        "snippet": "    private static final WarningGuardSpec warningGuardSpec =\n        new WarningGuardSpec();",
        "begin_line": 95,
        "end_line": 96,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.display_help",
        "snippet": "    @Option(name = \"--help\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Displays this message\")\n    private boolean display_help = false;",
        "begin_line": 98,
        "end_line": 101,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.print_tree",
        "snippet": "    @Option(name = \"--print_tree\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Prints out the parse tree and exits\")\n    private boolean print_tree = false;",
        "begin_line": 103,
        "end_line": 106,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.print_ast",
        "snippet": "    @Option(name = \"--print_ast\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Prints a dot file describing the internal abstract syntax\"\n        + \" tree and exits\")\n    private boolean print_ast = false;",
        "begin_line": 108,
        "end_line": 112,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.print_pass_graph",
        "snippet": "    @Option(name = \"--print_pass_graph\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Prints a dot file describing the passes that will get run\"\n        + \" and exits\")\n    private boolean print_pass_graph = false;",
        "begin_line": 114,
        "end_line": 118,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.jscomp_dev_mode",
        "snippet": "    @Option(name = \"--jscomp_dev_mode\",\n        // hidden, no usage\n        aliases = {\"--dev_mode\"})\n    private CompilerOptions.DevMode jscomp_dev_mode =\n        CompilerOptions.DevMode.OFF;",
        "begin_line": 122,
        "end_line": 126,
        "comment": " compiler."
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.logging_level",
        "snippet": "    @Option(name = \"--logging_level\",\n        usage = \"The logging level (standard java.util.logging.Level\"\n        + \" values) for Compiler progress. Does not control errors or\"\n        + \" warnings for the JavaScript code under compilation\")\n    private String logging_level = Level.WARNING.getName();",
        "begin_line": 128,
        "end_line": 132,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.externs",
        "snippet": "    @Option(name = \"--externs\",\n        usage = \"The file containing JavaScript externs. You may specify\"\n        + \" multiple\")\n    private List<String> externs = Lists.newArrayList();",
        "begin_line": 134,
        "end_line": 137,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.js",
        "snippet": "    @Option(name = \"--js\",\n        usage = \"The JavaScript filename. You may specify multiple\")\n    private List<String> js = Lists.newArrayList();",
        "begin_line": 139,
        "end_line": 141,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.js_output_file",
        "snippet": "    @Option(name = \"--js_output_file\",\n        usage = \"Primary output filename. If not specified, output is \" +\n        \"written to stdout\")\n    private String js_output_file = \"\";",
        "begin_line": 143,
        "end_line": 146,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.module",
        "snippet": "    @Option(name = \"--module\",\n        usage = \"A JavaScript module specification. The format is \"\n        + \"<name>:<num-js-files>[:[<dep>,...][:]]]. Module names must be \"\n        + \"unique. Each dep is the name of a module that this module \"\n        + \"depends on. Modules must be listed in dependency order, and JS \"\n        + \"source files must be listed in the corresponding order. Where \"\n        + \"--module flags occur in relation to --js flags is unimportant. \"\n        + \"Provide the value 'auto' to trigger module creation from CommonJS\"\n        + \"modules.\")\n    private List<String> module = Lists.newArrayList();",
        "begin_line": 148,
        "end_line": 157,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.variable_map_input_file",
        "snippet": "    @Option(name = \"--variable_map_input_file\",\n        usage = \"File containing the serialized version of the variable \"\n        + \"renaming map produced by a previous compilation\")\n    private String variable_map_input_file = \"\";",
        "begin_line": 159,
        "end_line": 162,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.property_map_input_file",
        "snippet": "    @Option(name = \"--property_map_input_file\",\n        usage = \"File containing the serialized version of the property \"\n        + \"renaming map produced by a previous compilation\")\n    private String property_map_input_file = \"\";",
        "begin_line": 164,
        "end_line": 167,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.variable_map_output_file",
        "snippet": "    @Option(name = \"--variable_map_output_file\",\n        usage = \"File where the serialized version of the variable \"\n        + \"renaming map produced should be saved\")\n    private String variable_map_output_file = \"\";",
        "begin_line": 169,
        "end_line": 172,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.create_name_map_files",
        "snippet": "    @Option(name = \"--create_name_map_files\",\n        handler = BooleanOptionHandler.class,\n        usage = \"If true, variable renaming and property renaming map \"\n        + \"files will be produced as {binary name}_vars_map.out and \"\n        + \"{binary name}_props_map.out. Note that this flag cannot be used \"\n        + \"in conjunction with either variable_map_output_file or \"\n        + \"property_map_output_file\")\n    private boolean create_name_map_files = false;",
        "begin_line": 174,
        "end_line": 181,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.property_map_output_file",
        "snippet": "    @Option(name = \"--property_map_output_file\",\n        usage = \"File where the serialized version of the property \"\n        + \"renaming map produced should be saved\")\n    private String property_map_output_file = \"\";",
        "begin_line": 183,
        "end_line": 186,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.third_party",
        "snippet": "    @Option(name = \"--third_party\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Check source validity but do not enforce Closure style \"\n        + \"rules and conventions\")\n    private boolean third_party = false;",
        "begin_line": 188,
        "end_line": 192,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.summary_detail_level",
        "snippet": "    @Option(name = \"--summary_detail_level\",\n        usage = \"Controls how detailed the compilation summary is. Values:\"\n        + \" 0 (never print summary), 1 (print summary only if there are \"\n        + \"errors or warnings), 2 (print summary if the 'checkTypes' \"\n        + \"diagnostic  group is enabled, see --jscomp_warning), \"\n        + \"3 (always print summary). The default level is 1\")\n    private int summary_detail_level = 1;",
        "begin_line": 195,
        "end_line": 201,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.output_wrapper",
        "snippet": "    @Option(name = \"--output_wrapper\",\n        usage = \"Interpolate output into this string at the place denoted\"\n        + \" by the marker token %output%. Use marker token %output|jsstring%\"\n        + \" to do js string escaping on the output.\")\n    private String output_wrapper = \"\";",
        "begin_line": 203,
        "end_line": 207,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.module_wrapper",
        "snippet": "    @Option(name = \"--module_wrapper\",\n        usage = \"An output wrapper for a JavaScript module (optional). \"\n        + \"The format is <name>:<wrapper>. The module name must correspond \"\n        + \"with a module specified using --module. The wrapper must \"\n        + \"contain %s as the code placeholder. The %basename% placeholder can \"\n        + \"also be used to substitute the base name of the module output file.\")\n    private List<String> module_wrapper = Lists.newArrayList();",
        "begin_line": 209,
        "end_line": 215,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.module_output_path_prefix",
        "snippet": "    @Option(name = \"--module_output_path_prefix\",\n        usage = \"Prefix for filenames of compiled JS modules. \"\n        + \"<module-name>.js will be appended to this prefix. Directories \"\n        + \"will be created as needed. Use with --module\")\n    private String module_output_path_prefix = \"./\";",
        "begin_line": 217,
        "end_line": 221,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.create_source_map",
        "snippet": "    @Option(name = \"--create_source_map\",\n        usage = \"If specified, a source map file mapping the generated \" +\n        \"source files back to the original source file will be \" +\n        \"output to the specified path. The %outname% placeholder will \" +\n        \"expand to the name of the output file that the source map \" +\n        \"corresponds to.\")\n    private String create_source_map = \"\";",
        "begin_line": 223,
        "end_line": 229,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.source_map_format",
        "snippet": "    @Option(name = \"--source_map_format\",\n        usage = \"The source map format to produce. \" +\n        \"Options: V1, V2, V3, DEFAULT. DEFAULT produces V2.\")\n    private SourceMap.Format source_map_format = SourceMap.Format.DEFAULT;",
        "begin_line": 231,
        "end_line": 234,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.jscomp_error",
        "snippet": "    @SuppressWarnings(\"unused\")\n    @Option(name = \"--jscomp_error\",\n        handler = WarningGuardErrorOptionHandler.class,\n        usage = \"Make the named class of warnings an error. Options:\" +\n        DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private List<String> jscomp_error = Lists.newArrayList();",
        "begin_line": 237,
        "end_line": 242,
        "comment": " Used to define the flag, values are stored by the handler."
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.jscomp_warning",
        "snippet": "    @SuppressWarnings(\"unused\")\n    @Option(name = \"--jscomp_warning\",\n        handler = WarningGuardWarningOptionHandler.class,\n        usage = \"Make the named class of warnings a normal warning. \" +\n        \"Options:\" + DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private List<String> jscomp_warning = Lists.newArrayList();",
        "begin_line": 245,
        "end_line": 250,
        "comment": " Used to define the flag, values are stored by the handler."
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.jscomp_off",
        "snippet": "    @SuppressWarnings(\"unused\")\n    @Option(name = \"--jscomp_off\",\n        handler = WarningGuardOffOptionHandler.class,\n        usage = \"Turn off the named class of warnings. Options:\" +\n        DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private List<String> jscomp_off = Lists.newArrayList();",
        "begin_line": 253,
        "end_line": 258,
        "comment": " Used to define the flag, values are stored by the handler."
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.define",
        "snippet": "    @Option(name = \"--define\",\n        aliases = {\"--D\", \"-D\"},\n        usage = \"Override the value of a variable annotated @define. \" +\n        \"The format is <name>[=<val>], where <name> is the name of a @define \" +\n        \"variable and <val> is a boolean, number, or a single-quoted string \" +\n        \"that contains no single quotes. If [=<val>] is omitted, \" +\n        \"the variable is marked true\")\n    private List<String> define = Lists.newArrayList();",
        "begin_line": 260,
        "end_line": 267,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.charset",
        "snippet": "    @Option(name = \"--charset\",\n        usage = \"Input and output charset for all files. By default, we \" +\n                \"accept UTF-8 as input and output US_ASCII\")\n    private String charset = \"\";",
        "begin_line": 269,
        "end_line": 272,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.compilation_level",
        "snippet": "    @Option(name = \"--compilation_level\",\n        usage = \"Specifies the compilation level to use. Options: \" +\n        \"WHITESPACE_ONLY, SIMPLE_OPTIMIZATIONS, ADVANCED_OPTIMIZATIONS\")\n    private CompilationLevel compilation_level =\n        CompilationLevel.SIMPLE_OPTIMIZATIONS;",
        "begin_line": 274,
        "end_line": 278,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.use_types_for_optimization",
        "snippet": "    @Option(name = \"--use_types_for_optimization\",\n        usage = \"Experimental: perform additional optimizations \" +\n        \"based on available information.  Inaccurate type annotations \" +\n        \"may result in incorrect results.\")\n    private boolean use_types_for_optimization = false;",
        "begin_line": 280,
        "end_line": 284,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.warning_level",
        "snippet": "    @Option(name = \"--warning_level\",\n        usage = \"Specifies the warning level to use. Options: \" +\n        \"QUIET, DEFAULT, VERBOSE\")\n    private WarningLevel warning_level = WarningLevel.DEFAULT;",
        "begin_line": 286,
        "end_line": 289,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.use_only_custom_externs",
        "snippet": "    @Option(name = \"--use_only_custom_externs\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Specifies whether the default externs should be excluded\")\n    private boolean use_only_custom_externs = false;",
        "begin_line": 291,
        "end_line": 294,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.debug",
        "snippet": "    @Option(name = \"--debug\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Enable debugging options\")\n    private boolean debug = false;",
        "begin_line": 296,
        "end_line": 299,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.generate_exports",
        "snippet": "    @Option(name = \"--generate_exports\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Generates export code for those marked with @export\")\n    private boolean generate_exports = false;",
        "begin_line": 301,
        "end_line": 304,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.formatting",
        "snippet": "    @Option(name = \"--formatting\",\n        usage = \"Specifies which formatting options, if any, should be \"\n        + \"applied to the output JS. Options: \"\n        + \"PRETTY_PRINT, PRINT_INPUT_DELIMITER, SINGLE_QUOTES\")\n    private List<FormattingOption> formatting = Lists.newArrayList();",
        "begin_line": 306,
        "end_line": 310,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.process_common_js_modules",
        "snippet": "    @Option(name = \"--process_common_js_modules\",\n        usage = \"Process CommonJS modules to a concatenable form.\")\n    private boolean process_common_js_modules = false;",
        "begin_line": 312,
        "end_line": 314,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.common_js_path_prefix",
        "snippet": "    @Option(name = \"--common_js_module_path_prefix\",\n        usage = \"Path prefix to be removed from CommonJS module names.\")\n    private String common_js_path_prefix =\n        ProcessCommonJSModules.DEFAULT_FILENAME_PREFIX;",
        "begin_line": 316,
        "end_line": 319,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.common_js_entry_module",
        "snippet": "    @Option(name = \"--common_js_entry_module\",\n        usage = \"Root of your common JS dependency hierarchy. \"+\n            \"Your main script.\")\n    private String common_js_entry_module;",
        "begin_line": 321,
        "end_line": 324,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.transform_amd_modules",
        "snippet": "    @Option(name = \"--transform_amd_modules\",\n        usage = \"Transform AMD to CommonJS modules.\")\n    private boolean transform_amd_modules = false;",
        "begin_line": 326,
        "end_line": 328,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.process_closure_primitives",
        "snippet": "    @Option(name = \"--process_closure_primitives\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Processes built-ins from the Closure library, such as \"\n        + \"goog.require(), goog.provide(), and goog.exportSymbol()\")\n    private boolean process_closure_primitives = true;",
        "begin_line": 330,
        "end_line": 334,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.manage_closure_dependencies",
        "snippet": "    @Option(name = \"--manage_closure_dependencies\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Automatically sort dependencies so that a file that \"\n        + \"goog.provides symbol X will always come before a file that \"\n        + \"goog.requires symbol X. If an input provides symbols, and \"\n        + \"those symbols are never required, then that input will not \"\n        + \"be included in the compilation.\")\n    private boolean manage_closure_dependencies = false;",
        "begin_line": 336,
        "end_line": 343,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.only_closure_dependencies",
        "snippet": "    @Option(name = \"--only_closure_dependencies\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Only include files in the transitive dependency of the \"\n        + \"entry points (specified by closure_entry_point). Files that do \"\n        + \"not provide dependencies will be removed. This supersedes\"\n        + \"manage_closure_dependencies\")\n    private boolean only_closure_dependencies = false;",
        "begin_line": 345,
        "end_line": 351,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.closure_entry_point",
        "snippet": "    @Option(name = \"--closure_entry_point\",\n        usage = \"Entry points to the program. Must be goog.provide'd \"\n        + \"symbols. Any goog.provide'd symbols that are not a transitive \"\n        + \"dependency of the entry points will be removed. Files without \"\n        + \"goog.provides, and their dependencies, will always be left in. \"\n        + \"If any entry points are specified, then the \"\n        + \"manage_closure_dependencies option will be set to true and \"\n        + \"all files will be sorted in dependency order.\")\n    private List<String> closure_entry_point = Lists.newArrayList();",
        "begin_line": 353,
        "end_line": 361,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.process_jquery_primitives",
        "snippet": "    @Option(name = \"--process_jquery_primitives\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Processes built-ins from the Jquery library, such as \"\n        + \"jQuery.fn and jQuery.extend()\")\n    private boolean process_jquery_primitives = false;",
        "begin_line": 363,
        "end_line": 367,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.output_manifest",
        "snippet": "    @Option(name = \"--output_manifest\",\n        usage = \"Prints out a list of all the files in the compilation. \"\n        + \"If --manage_closure_dependencies is on, this will not include \"\n        + \"files that got dropped because they were not required. \"\n        + \"The %outname% placeholder expands to the JS output file. \"\n        + \"If you're using modularization, using %outname% will create \"\n        + \"a manifest for each module.\")\n    private String output_manifest = \"\";",
        "begin_line": 369,
        "end_line": 376,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.output_module_dependencies",
        "snippet": "    @Option(name = \"--output_module_dependencies\",\n        usage = \"Prints out a JSON file of dependencies between modules.\")\n    private String output_module_dependencies = \"\";",
        "begin_line": 378,
        "end_line": 380,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.accept_const_keyword",
        "snippet": "    @Option(name = \"--accept_const_keyword\",\n        usage = \"Allows usage of const keyword.\")\n    private boolean accept_const_keyword = false;",
        "begin_line": 382,
        "end_line": 384,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.language_in",
        "snippet": "    @Option(name = \"--language_in\",\n        usage = \"Sets what language spec that input sources conform. \"\n        + \"Options: ECMASCRIPT3 (default), ECMASCRIPT5, ECMASCRIPT5_STRICT\")\n    private String language_in = \"ECMASCRIPT3\";",
        "begin_line": 386,
        "end_line": 389,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.version",
        "snippet": "    @Option(name = \"--version\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Prints the compiler version to stderr.\")\n    private boolean version = false;",
        "begin_line": 391,
        "end_line": 394,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.translationsFile",
        "snippet": "    @Option(name = \"--translations_file\",\n        usage = \"Source of translated messages. Currently only supports XTB.\")\n    private String translationsFile = \"\";",
        "begin_line": 396,
        "end_line": 398,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.translationsProject",
        "snippet": "    @Option(name = \"--translations_project\",\n        usage = \"Scopes all translations to the specified project.\" +\n        \"When specified, we will use different message ids so that messages \" +\n        \"in different projects can have different translations.\")\n    private String translationsProject = null;",
        "begin_line": 400,
        "end_line": 404,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.flag_file",
        "snippet": "    @Option(name = \"--flagfile\",\n        usage = \"A file containing additional command-line options.\")\n    private String flag_file = \"\";",
        "begin_line": 406,
        "end_line": 408,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.warnings_whitelist_file",
        "snippet": "    @Option(name = \"--warnings_whitelist_file\",\n        usage = \"A file containing warnings to suppress. Each line should be \" +\n            \"of the form\\n\" +\n            \"<file-name>:<line-number>?  <warning-description>\")\n    private String warnings_whitelist_file = \"\";",
        "begin_line": 410,
        "end_line": 414,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.arguments",
        "snippet": "    @Argument\n    private List<String> arguments = Lists.newArrayList();",
        "begin_line": 416,
        "end_line": 417,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BooleanOptionHandler",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.BooleanOptionHandler.TRUES",
        "snippet": "      private static final Set<String> TRUES =\n          Sets.newHashSet(\"true\", \"on\", \"yes\", \"1\");",
        "begin_line": 449,
        "end_line": 450,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BooleanOptionHandler",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.BooleanOptionHandler.FALSES",
        "snippet": "      private static final Set<String> FALSES =\n          Sets.newHashSet(\"false\", \"off\", \"no\", \"0\");",
        "begin_line": 451,
        "end_line": 452,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.WarningGuardSetter",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.WarningGuardSetter.proxy",
        "snippet": "      private final Setter<? super String> proxy;",
        "begin_line": 521,
        "end_line": 521,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.WarningGuardSetter",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.WarningGuardSetter.level",
        "snippet": "      private final CheckLevel level;",
        "begin_line": 522,
        "end_line": 522,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunner.flags",
        "snippet": "  private final Flags flags = new Flags();",
        "begin_line": 571,
        "end_line": 571,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunner.isConfigValid",
        "snippet": "  private boolean isConfigValid = false;",
        "begin_line": 573,
        "end_line": 573,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunner.DEFAULT_EXTERNS_NAMES",
        "snippet": "  private static final List<String> DEFAULT_EXTERNS_NAMES = ImmutableList.of(\n    // JS externs\n    \"es3.js\",\n    \"es5.js\",\n\n    // Event APIs\n    \"w3c_event.js\",\n    \"w3c_event3.js\",\n    \"gecko_event.js\",\n    \"ie_event.js\",\n    \"webkit_event.js\",\n\n    // DOM apis\n    \"w3c_dom1.js\",\n    \"w3c_dom2.js\",\n    \"w3c_dom3.js\",\n    \"gecko_dom.js\",\n    \"ie_dom.js\",\n    \"webkit_dom.js\",\n\n    // CSS apis\n    \"w3c_css.js\",\n    \"gecko_css.js\",\n    \"ie_css.js\",\n    \"webkit_css.js\",\n\n    // Top-level namespaces\n    \"google.js\",\n\n    \"deprecated.js\",\n    \"fileapi.js\",\n    \"flash.js\",\n    \"gears_symbols.js\",\n    \"gears_types.js\",\n    \"gecko_xml.js\",\n    \"html5.js\",\n    \"ie_vml.js\",\n    \"iphone.js\",\n    \"webstorage.js\",\n    \"w3c_anim_timing.js\",\n    \"w3c_css3d.js\",\n    \"w3c_elementtraversal.js\",\n    \"w3c_geolocation.js\",\n    \"w3c_indexeddb.js\",\n    \"w3c_navigation_timing.js\",\n    \"w3c_range.js\",\n    \"w3c_selectors.js\",\n    \"w3c_xml.js\",\n    \"window.js\",\n    \"webkit_notifications.js\",\n    \"webgl.js\");",
        "begin_line": 832,
        "end_line": 882,
        "comment": " The externs expected in externs.zip, in sorted order."
    },
    {
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "signature": "com.google.javascript.jscomp.PrepareAst.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "signature": "com.google.javascript.jscomp.PrepareAst.checkOnly",
        "snippet": "  private final boolean checkOnly;",
        "begin_line": 37,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageExtractor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageExtractor.java",
        "signature": "com.google.javascript.jscomp.JsMessageExtractor.style",
        "snippet": "  private final JsMessage.Style style;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageExtractor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageExtractor.java",
        "signature": "com.google.javascript.jscomp.JsMessageExtractor.idGenerator",
        "snippet": "  private final JsMessage.IdGenerator idGenerator;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageExtractor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageExtractor.java",
        "signature": "com.google.javascript.jscomp.JsMessageExtractor.options",
        "snippet": "  private final CompilerOptions options;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExtractMessagesVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageExtractor.java",
        "signature": "com.google.javascript.jscomp.ExtractMessagesVisitor.messages",
        "snippet": "    private final List<JsMessage> messages = Lists.newLinkedList();",
        "begin_line": 79,
        "end_line": 79,
        "comment": " unnamed and have the same text but located in different source files."
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.UNDEFINED_VAR_ERROR",
        "snippet": "  static final DiagnosticType UNDEFINED_VAR_ERROR = DiagnosticType.error(\n      \"JSC_UNDEFINED_VARIABLE\",\n      \"variable {0} is undeclared\");",
        "begin_line": 38,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.VIOLATED_MODULE_DEP_ERROR",
        "snippet": "  static final DiagnosticType VIOLATED_MODULE_DEP_ERROR = DiagnosticType.error(\n      \"JSC_VIOLATED_MODULE_DEPENDENCY\",\n      \"module {0} cannot reference {2}, defined in \" +\n      \"module {1}, since {1} loads after {0}\");",
        "begin_line": 42,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.MISSING_MODULE_DEP_ERROR",
        "snippet": "  static final DiagnosticType MISSING_MODULE_DEP_ERROR = DiagnosticType.warning(\n      \"JSC_MISSING_MODULE_DEPENDENCY\",\n      \"missing module dependency; module {0} should depend \" +\n      \"on module {1} because it references {2}\");",
        "begin_line": 47,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.STRICT_MODULE_DEP_ERROR",
        "snippet": "  static final DiagnosticType STRICT_MODULE_DEP_ERROR = DiagnosticType.disabled(\n      \"JSC_STRICT_MODULE_DEPENDENCY\",\n      \"module {0} cannot reference {2}, defined in \" +\n      \"module {1}\");",
        "begin_line": 52,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR",
        "snippet": "  static final DiagnosticType NAME_REFERENCE_IN_EXTERNS_ERROR =\n    DiagnosticType.warning(\n      \"JSC_NAME_REFERENCE_IN_EXTERNS\",\n      \"accessing name {0} in externs has no effect\");",
        "begin_line": 57,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.UNDEFINED_EXTERN_VAR_ERROR",
        "snippet": "  static final DiagnosticType UNDEFINED_EXTERN_VAR_ERROR =\n    DiagnosticType.warning(\n      \"JSC_UNDEFINED_EXTERN_VAR_ERROR\",\n      \"name {0} is not undefined in the externs.\");",
        "begin_line": 62,
        "end_line": 65,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.synthesizedExternsRoot",
        "snippet": "  private Node synthesizedExternsRoot = null;",
        "begin_line": 67,
        "end_line": 67,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.varsToDeclareInExterns",
        "snippet": "  private final Set<String> varsToDeclareInExterns = Sets.newHashSet();",
        "begin_line": 72,
        "end_line": 72,
        "comment": " in the normal code."
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.sanityCheck",
        "snippet": "  private final boolean sanityCheck;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " Whether this is the post-processing sanity check."
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.strictExternCheck",
        "snippet": "  private final boolean strictExternCheck;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " Whether extern checks emit error."
    },
    {
        "class_name": "com.google.javascript.jscomp.ErrorPass",
        "src_path": "src/com/google/javascript/jscomp/ErrorPass.java",
        "signature": "com.google.javascript.jscomp.ErrorPass.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 27,
        "end_line": 27,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ErrorPass",
        "src_path": "src/com/google/javascript/jscomp/ErrorPass.java",
        "signature": "com.google.javascript.jscomp.ErrorPass.error",
        "snippet": "  private final JSError error;",
        "begin_line": 28,
        "end_line": 28,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.stripTweaks",
        "snippet": "  private final boolean stripTweaks;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.compilerDefaultValueOverrides",
        "snippet": "  private final SortedMap<String, Node> compilerDefaultValueOverrides;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.ID_MATCHER",
        "snippet": "  private static final CharMatcher ID_MATCHER = CharMatcher.inRange('a', 'z').\n      or(CharMatcher.inRange('A', 'Z')).or(CharMatcher.anyOf(\"0123456789_.\"));",
        "begin_line": 56,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.UNKNOWN_TWEAK_WARNING",
        "snippet": "  static final DiagnosticType UNKNOWN_TWEAK_WARNING =\n      DiagnosticType.warning(\n          \"JSC_UNKNOWN_TWEAK_WARNING\",\n          \"no tweak registered with ID {0}\");",
        "begin_line": 60,
        "end_line": 63,
        "comment": " Warnings and Errors."
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TWEAK_MULTIPLY_REGISTERED_ERROR",
        "snippet": "  static final DiagnosticType TWEAK_MULTIPLY_REGISTERED_ERROR =\n      DiagnosticType.error(\n          \"JSC_TWEAK_MULTIPLY_REGISTERED_ERROR\",\n          \"Tweak {0} has already been registered.\");",
        "begin_line": 65,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.NON_LITERAL_TWEAK_ID_ERROR",
        "snippet": "  static final DiagnosticType NON_LITERAL_TWEAK_ID_ERROR =\n      DiagnosticType.error(\n          \"JSC_NON_LITERAL_TWEAK_ID_ERROR\",\n          \"tweak ID must be a string literal\");",
        "begin_line": 70,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.INVALID_TWEAK_DEFAULT_VALUE_WARNING",
        "snippet": "  static final DiagnosticType INVALID_TWEAK_DEFAULT_VALUE_WARNING =\n      DiagnosticType.warning(\n          \"JSC_INVALID_TWEAK_DEFAULT_VALUE_WARNING\",\n          \"tweak {0} registered with {1} must have a default value that is a \" +\n          \"literal of type {2}\");",
        "begin_line": 75,
        "end_line": 79,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.NON_GLOBAL_TWEAK_INIT_ERROR",
        "snippet": "  static final DiagnosticType NON_GLOBAL_TWEAK_INIT_ERROR =\n      DiagnosticType.error(\n          \"JSC_NON_GLOBAL_TWEAK_INIT_ERROR\",\n          \"tweak declaration {0} must occur in the global scope\");",
        "begin_line": 81,
        "end_line": 84,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TWEAK_OVERRIDE_AFTER_REGISTERED_ERROR",
        "snippet": "  static final DiagnosticType TWEAK_OVERRIDE_AFTER_REGISTERED_ERROR =\n      DiagnosticType.error(\n          \"JSC_TWEAK_OVERRIDE_AFTER_REGISTERED_ERROR\",\n          \"Cannot override the default value of tweak {0} after it has been \" +\n          \"registered\");",
        "begin_line": 86,
        "end_line": 90,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TWEAK_WRONG_GETTER_TYPE_WARNING",
        "snippet": "  static final DiagnosticType TWEAK_WRONG_GETTER_TYPE_WARNING =\n      DiagnosticType.warning(\n          \"JSC_TWEAK_WRONG_GETTER_TYPE_WARNING\",\n          \"tweak getter function {0} used for tweak registered using {1}\");",
        "begin_line": 92,
        "end_line": 95,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.INVALID_TWEAK_ID_ERROR",
        "snippet": "  static final DiagnosticType INVALID_TWEAK_ID_ERROR =\n      DiagnosticType.error(\n          \"JSC_INVALID_TWEAK_ID_ERROR\",\n          \"tweak ID contains illegal characters. Only letters, numbers, _ \" +\n          \"and . are allowed\");",
        "begin_line": 97,
        "end_line": 101,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.name",
        "snippet": "    final String name;",
        "begin_line": 117,
        "end_line": 117,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.expectedTypeName",
        "snippet": "    final String expectedTypeName;",
        "begin_line": 118,
        "end_line": 118,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.validNodeTypeA",
        "snippet": "    final int validNodeTypeA;",
        "begin_line": 119,
        "end_line": 119,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.validNodeTypeB",
        "snippet": "    final int validNodeTypeB;",
        "begin_line": 120,
        "end_line": 120,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.registerFunction",
        "snippet": "    final TweakFunction registerFunction;",
        "begin_line": 121,
        "end_line": 121,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TWEAK_FUNCTIONS_MAP",
        "snippet": "  private static final Map<String, TweakFunction> TWEAK_FUNCTIONS_MAP;",
        "begin_line": 186,
        "end_line": 186,
        "comment": " A map of function name -> TweakFunction."
    },
    {
        "class_name": "com.google.javascript.jscomp.CollectTweaksResult",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.CollectTweaksResult.tweakInfos",
        "snippet": "    final Map<String, TweakInfo> tweakInfos;",
        "begin_line": 323,
        "end_line": 323,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CollectTweaksResult",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.CollectTweaksResult.getOverridesCalls",
        "snippet": "    final List<TweakFunctionCall> getOverridesCalls;",
        "begin_line": 324,
        "end_line": 324,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CollectTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.CollectTweaks.allTweaks",
        "snippet": "    final Map<String, TweakInfo> allTweaks = Maps.newHashMap();",
        "begin_line": 337,
        "end_line": 337,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CollectTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.CollectTweaks.getOverridesCalls",
        "snippet": "    final List<TweakFunctionCall> getOverridesCalls = Lists.newArrayList();",
        "begin_line": 338,
        "end_line": 338,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TweakFunctionCall",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.TweakFunctionCall.sourceName",
        "snippet": "    final String sourceName;",
        "begin_line": 430,
        "end_line": 430,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TweakFunctionCall",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.TweakFunctionCall.tweakFunc",
        "snippet": "    final TweakFunction tweakFunc;",
        "begin_line": 431,
        "end_line": 431,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TweakFunctionCall",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.TweakFunctionCall.callNode",
        "snippet": "    final Node callNode;",
        "begin_line": 432,
        "end_line": 432,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TweakFunctionCall",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.TweakFunctionCall.valueNode",
        "snippet": "    final Node valueNode;",
        "begin_line": 433,
        "end_line": 433,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TweakInfo",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.TweakInfo.tweakId",
        "snippet": "    final String tweakId;",
        "begin_line": 457,
        "end_line": 457,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TweakInfo",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.TweakInfo.functionCalls",
        "snippet": "    final List<TweakFunctionCall> functionCalls;",
        "begin_line": 458,
        "end_line": 458,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TweakInfo",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.TweakInfo.registerCall",
        "snippet": "    TweakFunctionCall registerCall;",
        "begin_line": 459,
        "end_line": 459,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TweakInfo",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.TweakInfo.defaultValueNode",
        "snippet": "    Node defaultValueNode;",
        "begin_line": 460,
        "end_line": 460,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StripCode",
        "src_path": "src/com/google/javascript/jscomp/StripCode.java",
        "signature": "com.google.javascript.jscomp.StripCode.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 48,
        "end_line": 48,
        "comment": " recording which field names are assigned to debug types in each JS input."
    },
    {
        "class_name": "com.google.javascript.jscomp.StripCode",
        "src_path": "src/com/google/javascript/jscomp/StripCode.java",
        "signature": "com.google.javascript.jscomp.StripCode.stripTypes",
        "snippet": "  private final Set<String> stripTypes;",
        "begin_line": 49,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StripCode",
        "src_path": "src/com/google/javascript/jscomp/StripCode.java",
        "signature": "com.google.javascript.jscomp.StripCode.stripNameSuffixes",
        "snippet": "  private final Set<String> stripNameSuffixes;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StripCode",
        "src_path": "src/com/google/javascript/jscomp/StripCode.java",
        "signature": "com.google.javascript.jscomp.StripCode.stripTypePrefixes",
        "snippet": "  private final Set<String> stripTypePrefixes;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StripCode",
        "src_path": "src/com/google/javascript/jscomp/StripCode.java",
        "signature": "com.google.javascript.jscomp.StripCode.stripNamePrefixes",
        "snippet": "  private final Set<String> stripNamePrefixes;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StripCode",
        "src_path": "src/com/google/javascript/jscomp/StripCode.java",
        "signature": "com.google.javascript.jscomp.StripCode.varsToRemove",
        "snippet": "  private final Set<Scope.Var> varsToRemove;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StripCode",
        "src_path": "src/com/google/javascript/jscomp/StripCode.java",
        "signature": "com.google.javascript.jscomp.StripCode.STRIP_TYPE_INHERIT_ERROR",
        "snippet": "  static final DiagnosticType STRIP_TYPE_INHERIT_ERROR = DiagnosticType.error(\n      \"JSC_STRIP_TYPE_INHERIT_ERROR\",\n      \"Non-strip type {0} cannot inherit from strip type {1}\");",
        "begin_line": 55,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StripCode",
        "src_path": "src/com/google/javascript/jscomp/StripCode.java",
        "signature": "com.google.javascript.jscomp.StripCode.STRIP_ASSIGNMENT_ERROR",
        "snippet": "  static final DiagnosticType STRIP_ASSIGNMENT_ERROR = DiagnosticType.error(\n      \"JSC_STRIP_ASSIGNMENT_ERROR\",\n      \"Unable to strip assignment to {0}\");",
        "begin_line": 59,
        "end_line": 61,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Package protected for tests"
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.callback",
        "snippet": "  private final Callback callback;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.curNode",
        "snippet": "  private Node curNode;",
        "begin_line": 44,
        "end_line": 44,
        "comment": " Contains the current node"
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.NODE_TRAVERSAL_ERROR",
        "snippet": "  public static final DiagnosticType NODE_TRAVERSAL_ERROR =\n      DiagnosticType.error(\"JSC_NODE_TRAVERSAL_ERROR\", \"{0}\");",
        "begin_line": 46,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.scopes",
        "snippet": "  private final Deque<Scope> scopes = new ArrayDeque<Scope>();",
        "begin_line": 54,
        "end_line": 54,
        "comment": "\n   * Stack containing the Scopes that have been created. The Scope objects\n   * are lazily created; so the {@code scopeRoots} stack contains the\n   * Nodes for all Scopes that have not been created yet.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.scopeRoots",
        "snippet": "  private final Deque<Node> scopeRoots = new ArrayDeque<Node>();",
        "begin_line": 60,
        "end_line": 60,
        "comment": "\n   * A stack of scope roots. All scopes that have not been created\n   * are represented in this Deque.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.cfgs",
        "snippet": "  Deque<ControlFlowGraph<Node>> cfgs = new LinkedList<ControlFlowGraph<Node>>();",
        "begin_line": 69,
        "end_line": 69,
        "comment": "\n   * Stack of control flow graphs (CFG). There is one CFG per scope. CFGs\n   * are lazily populated: elements are {@code null} until requested by\n   * {@link #getControlFlowGraph()}. Note that {@link ArrayDeque} does not allow\n   * {@code null} elements, so {@link LinkedList} is used instead.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.sourceName",
        "snippet": "  private String sourceName;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " The current source file name "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.inputId",
        "snippet": "  private InputId inputId;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " The current input "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.scopeCreator",
        "snippet": "  private ScopeCreator scopeCreator;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " The scope creator "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.scopeCallback",
        "snippet": "  private ScopedCallback scopeCallback;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " Possible callback for scope entry and exist *"
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractNodeTypePruningCallback",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.AbstractNodeTypePruningCallback.nodeTypes",
        "snippet": "    private final Set<Integer> nodeTypes;",
        "begin_line": 189,
        "end_line": 189,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractNodeTypePruningCallback",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.AbstractNodeTypePruningCallback.include",
        "snippet": "    private final boolean include;",
        "begin_line": 190,
        "end_line": 190,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.MISSING_SOURCE",
        "snippet": "  private static final String MISSING_SOURCE = \"[source unknown]\";",
        "begin_line": 313,
        "end_line": 313,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureOptimizePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ClosureOptimizePrimitives.java",
        "signature": "com.google.javascript.jscomp.ClosureOptimizePrimitives.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " Reference to the JS compiler "
    },
    {
        "class_name": "com.google.javascript.jscomp.FindObjectCreateCalls",
        "src_path": "src/com/google/javascript/jscomp/ClosureOptimizePrimitives.java",
        "signature": "com.google.javascript.jscomp.FindObjectCreateCalls.callNodes",
        "snippet": "    List<Node> callNodes = Lists.newArrayList();",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StrictWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/StrictWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.StrictWarningsGuard.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 25,
        "end_line": 25,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StrictWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/StrictWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.StrictWarningsGuard.UNRAISABLE_WARNING",
        "snippet": "  static final DiagnosticType UNRAISABLE_WARNING =\n      DiagnosticType.warning(\"JSC_UNRAISABLE_WARNING\", \"{0}\");",
        "begin_line": 27,
        "end_line": 28,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.PARSE_ERROR",
        "snippet": "  static final DiagnosticType PARSE_ERROR =\n      DiagnosticType.error(\"JSC_PARSE_ERROR\", \"Parse error. {0}\");",
        "begin_line": 34,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.TYPE_PARSE_ERROR",
        "snippet": "  static final DiagnosticType TYPE_PARSE_ERROR =\n      DiagnosticType.warning(\"JSC_TYPE_PARSE_ERROR\", \"{0}\");",
        "begin_line": 37,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.TRAILING_COMMA",
        "snippet": "  static final DiagnosticType TRAILING_COMMA =\n      DiagnosticType.error(\"JSC_TRAILING_COMMA\",\n          \"Parse error. IE8 (and below) will parse trailing commas in \" +\n          \"array and object literals incorrectly. \" +\n          \"If you are targeting newer versions of JS, \" +\n          \"set the appropriate language_in option.\");",
        "begin_line": 42,
        "end_line": 47,
        "comment": " warnings API."
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.DUPLICATE_PARAM",
        "snippet": "  static final DiagnosticType DUPLICATE_PARAM =\n      DiagnosticType.error(\"JSC_DUPLICATE_PARAM\", \"Parse error. {0}\");",
        "begin_line": 49,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.BAD_JSDOC_ANNOTATION",
        "snippet": "  static final DiagnosticType BAD_JSDOC_ANNOTATION =\n      DiagnosticType.warning(\"JSC_BAD_JSDOC_ANNOTATION\", \"Parse error. {0}\");",
        "begin_line": 52,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.MISPLACED_TYPE_ANNOTATION",
        "snippet": "  static final DiagnosticType MISPLACED_TYPE_ANNOTATION =\n      DiagnosticType.warning(\"JSC_MISPLACED_TYPE_ANNOTATION\",\n          \"Type annotations are not allowed here. \" +\n          \"Are you missing parentheses?\");",
        "begin_line": 55,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.typeMap",
        "snippet": "  private final Map<Pattern, DiagnosticType> typeMap;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " A map of Rhino messages to their DiagnosticType."
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.compiler",
        "snippet": "  final AbstractCompiler compiler;",
        "begin_line": 63,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
        "src_path": "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "signature": "com.google.javascript.jscomp.LinkedFlowScope.cache",
        "snippet": "  private final FlatFlowScopeCache cache;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " The closest flow scope cache."
    },
    {
        "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
        "src_path": "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "signature": "com.google.javascript.jscomp.LinkedFlowScope.parent",
        "snippet": "  private final LinkedFlowScope parent;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " The parent flow scope."
    },
    {
        "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
        "src_path": "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "signature": "com.google.javascript.jscomp.LinkedFlowScope.depth",
        "snippet": "  private int depth;",
        "begin_line": 49,
        "end_line": 49,
        "comment": " The distance between this flow scope and the closest flat flow scope."
    },
    {
        "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
        "src_path": "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "signature": "com.google.javascript.jscomp.LinkedFlowScope.MAX_DEPTH",
        "snippet": "  static final int MAX_DEPTH = 250;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
        "src_path": "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "signature": "com.google.javascript.jscomp.LinkedFlowScope.flattened",
        "snippet": "  private FlatFlowScopeCache flattened;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " A FlatFlowScopeCache equivalent to this scope."
    },
    {
        "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
        "src_path": "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "signature": "com.google.javascript.jscomp.LinkedFlowScope.frozen",
        "snippet": "  private boolean frozen = false;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " So once a child scope is created, this flow scope may not be modified."
    },
    {
        "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
        "src_path": "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "signature": "com.google.javascript.jscomp.LinkedFlowScope.lastSlot",
        "snippet": "  private LinkedFlowSlot lastSlot;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " linked list of slots."
    },
    {
        "class_name": "com.google.javascript.jscomp.LinkedFlowSlot",
        "src_path": "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "signature": "com.google.javascript.jscomp.LinkedFlowSlot.parent",
        "snippet": "    final LinkedFlowSlot parent;",
        "begin_line": 368,
        "end_line": 368,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FlatFlowScopeCache",
        "src_path": "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "signature": "com.google.javascript.jscomp.FlatFlowScopeCache.functionScope",
        "snippet": "    private final Scope functionScope;",
        "begin_line": 382,
        "end_line": 382,
        "comment": " The Scope for the entire function or for the global scope."
    },
    {
        "class_name": "com.google.javascript.jscomp.FlatFlowScopeCache",
        "src_path": "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "signature": "com.google.javascript.jscomp.FlatFlowScopeCache.linkedEquivalent",
        "snippet": "    private final LinkedFlowScope linkedEquivalent;",
        "begin_line": 385,
        "end_line": 385,
        "comment": " The linked flow scope that this cache represents."
    },
    {
        "class_name": "com.google.javascript.jscomp.FlatFlowScopeCache",
        "src_path": "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "signature": "com.google.javascript.jscomp.FlatFlowScopeCache.symbols",
        "snippet": "    private Map<String, StaticSlot<JSType>> symbols = Maps.newHashMap();",
        "begin_line": 389,
        "end_line": 389,
        "comment": " May not include lazily declared qualified names."
    },
    {
        "class_name": "com.google.javascript.jscomp.FlatFlowScopeCache",
        "src_path": "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "signature": "com.google.javascript.jscomp.FlatFlowScopeCache.dirtySymbols",
        "snippet": "    final Set<String> dirtySymbols = Sets.newHashSet();",
        "begin_line": 399,
        "end_line": 399,
        "comment": " list for symbols that aren't defined anywhere nearby."
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceIdGenerators",
        "src_path": "src/com/google/javascript/jscomp/ReplaceIdGenerators.java",
        "signature": "com.google.javascript.jscomp.ReplaceIdGenerators.NON_GLOBAL_ID_GENERATOR_CALL",
        "snippet": "  static final DiagnosticType NON_GLOBAL_ID_GENERATOR_CALL =\n      DiagnosticType.error(\n          \"JSC_NON_GLOBAL_ID_GENERATOR_CALL\",\n          \"Id generator call must be in the global scope\");",
        "begin_line": 44,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceIdGenerators",
        "src_path": "src/com/google/javascript/jscomp/ReplaceIdGenerators.java",
        "signature": "com.google.javascript.jscomp.ReplaceIdGenerators.CONDITIONAL_ID_GENERATOR_CALL",
        "snippet": "  static final DiagnosticType CONDITIONAL_ID_GENERATOR_CALL =\n      DiagnosticType.error(\n          \"JSC_CONDITIONAL_ID_GENERATOR_CALL\",\n          \"Id generator call must be unconditional\");",
        "begin_line": 49,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceIdGenerators",
        "src_path": "src/com/google/javascript/jscomp/ReplaceIdGenerators.java",
        "signature": "com.google.javascript.jscomp.ReplaceIdGenerators.CONFLICTING_GENERATOR_TYPE",
        "snippet": "  static final DiagnosticType CONFLICTING_GENERATOR_TYPE =\n      DiagnosticType.error(\n          \"JSC_CONFLICTING_ID_GENERATOR_TYPE\",\n          \"Id generator can only be one of consistent, inconsistent, or stable.\");",
        "begin_line": 54,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceIdGenerators",
        "src_path": "src/com/google/javascript/jscomp/ReplaceIdGenerators.java",
        "signature": "com.google.javascript.jscomp.ReplaceIdGenerators.INVALID_GENERATOR_ID_MAPPING",
        "snippet": "  static final DiagnosticType INVALID_GENERATOR_ID_MAPPING =\n      DiagnosticType.error(\n          \"JSC_INVALID_GENERATOR_ID_MAPPING\",\n          \"Invalid generator id mapping. {0}\");",
        "begin_line": 59,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceIdGenerators",
        "src_path": "src/com/google/javascript/jscomp/ReplaceIdGenerators.java",
        "signature": "com.google.javascript.jscomp.ReplaceIdGenerators.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceIdGenerators",
        "src_path": "src/com/google/javascript/jscomp/ReplaceIdGenerators.java",
        "signature": "com.google.javascript.jscomp.ReplaceIdGenerators.nameGenerators",
        "snippet": "  private final Map<String, NameSupplier> nameGenerators;",
        "begin_line": 65,
        "end_line": 65,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceIdGenerators",
        "src_path": "src/com/google/javascript/jscomp/ReplaceIdGenerators.java",
        "signature": "com.google.javascript.jscomp.ReplaceIdGenerators.consistNameMap",
        "snippet": "  private final Map<String, Map<String, String>> consistNameMap;",
        "begin_line": 66,
        "end_line": 66,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceIdGenerators",
        "src_path": "src/com/google/javascript/jscomp/ReplaceIdGenerators.java",
        "signature": "com.google.javascript.jscomp.ReplaceIdGenerators.idGeneratorMaps",
        "snippet": "  private final Map<String, Map<String, String>> idGeneratorMaps;",
        "begin_line": 68,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceIdGenerators",
        "src_path": "src/com/google/javascript/jscomp/ReplaceIdGenerators.java",
        "signature": "com.google.javascript.jscomp.ReplaceIdGenerators.previousMap",
        "snippet": "  private final Map<String, BiMap<String, String>> previousMap;",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceIdGenerators",
        "src_path": "src/com/google/javascript/jscomp/ReplaceIdGenerators.java",
        "signature": "com.google.javascript.jscomp.ReplaceIdGenerators.generatePseudoNames",
        "snippet": "  private final boolean generatePseudoNames;",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ObfuscatedNameSuppier",
        "src_path": "src/com/google/javascript/jscomp/ReplaceIdGenerators.java",
        "signature": "com.google.javascript.jscomp.ObfuscatedNameSuppier.generator",
        "snippet": "    private final NameGenerator generator;",
        "begin_line": 108,
        "end_line": 108,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ObfuscatedNameSuppier",
        "src_path": "src/com/google/javascript/jscomp/ReplaceIdGenerators.java",
        "signature": "com.google.javascript.jscomp.ObfuscatedNameSuppier.previousMappings",
        "snippet": "    private final Map<String, String> previousMappings;",
        "begin_line": 109,
        "end_line": 109,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ObfuscatedNameSuppier",
        "src_path": "src/com/google/javascript/jscomp/ReplaceIdGenerators.java",
        "signature": "com.google.javascript.jscomp.ObfuscatedNameSuppier.renameStrategy",
        "snippet": "    private RenameStrategy renameStrategy;",
        "begin_line": 110,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PseudoNameSuppier",
        "src_path": "src/com/google/javascript/jscomp/ReplaceIdGenerators.java",
        "signature": "com.google.javascript.jscomp.PseudoNameSuppier.counter",
        "snippet": "    private int counter = 0;",
        "begin_line": 136,
        "end_line": 136,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PseudoNameSuppier",
        "src_path": "src/com/google/javascript/jscomp/ReplaceIdGenerators.java",
        "signature": "com.google.javascript.jscomp.PseudoNameSuppier.renameStrategy",
        "snippet": "    private RenameStrategy renameStrategy;",
        "begin_line": 137,
        "end_line": 137,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControls",
        "src_path": "src/com/google/javascript/jscomp/CheckAccessControls.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControls.DEPRECATED_NAME",
        "snippet": "  static final DiagnosticType DEPRECATED_NAME = DiagnosticType.disabled(\n      \"JSC_DEPRECATED_VAR\",\n      \"Variable {0} has been deprecated.\");",
        "begin_line": 48,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControls",
        "src_path": "src/com/google/javascript/jscomp/CheckAccessControls.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControls.DEPRECATED_NAME_REASON",
        "snippet": "  static final DiagnosticType DEPRECATED_NAME_REASON = DiagnosticType.disabled(\n      \"JSC_DEPRECATED_VAR_REASON\",\n      \"Variable {0} has been deprecated: {1}\");",
        "begin_line": 52,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControls",
        "src_path": "src/com/google/javascript/jscomp/CheckAccessControls.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControls.DEPRECATED_PROP",
        "snippet": "  static final DiagnosticType DEPRECATED_PROP = DiagnosticType.disabled(\n      \"JSC_DEPRECATED_PROP\",\n      \"Property {0} of type {1} has been deprecated.\");",
        "begin_line": 56,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControls",
        "src_path": "src/com/google/javascript/jscomp/CheckAccessControls.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControls.DEPRECATED_PROP_REASON",
        "snippet": "  static final DiagnosticType DEPRECATED_PROP_REASON = DiagnosticType.disabled(\n      \"JSC_DEPRECATED_PROP_REASON\",\n      \"Property {0} of type {1} has been deprecated: {2}\");",
        "begin_line": 60,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControls",
        "src_path": "src/com/google/javascript/jscomp/CheckAccessControls.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControls.DEPRECATED_CLASS",
        "snippet": "  static final DiagnosticType DEPRECATED_CLASS = DiagnosticType.disabled(\n      \"JSC_DEPRECATED_CLASS\",\n      \"Class {0} has been deprecated.\");",
        "begin_line": 64,
        "end_line": 66,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControls",
        "src_path": "src/com/google/javascript/jscomp/CheckAccessControls.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControls.DEPRECATED_CLASS_REASON",
        "snippet": "  static final DiagnosticType DEPRECATED_CLASS_REASON = DiagnosticType.disabled(\n      \"JSC_DEPRECATED_CLASS_REASON\",\n      \"Class {0} has been deprecated: {1}\");",
        "begin_line": 68,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControls",
        "src_path": "src/com/google/javascript/jscomp/CheckAccessControls.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControls.BAD_PRIVATE_GLOBAL_ACCESS",
        "snippet": "  static final DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS =\n      DiagnosticType.disabled(\n          \"JSC_BAD_PRIVATE_GLOBAL_ACCESS\",\n          \"Access to private variable {0} not allowed outside file {1}.\");",
        "begin_line": 72,
        "end_line": 75,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControls",
        "src_path": "src/com/google/javascript/jscomp/CheckAccessControls.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControls.BAD_PRIVATE_PROPERTY_ACCESS",
        "snippet": "  static final DiagnosticType BAD_PRIVATE_PROPERTY_ACCESS =\n      DiagnosticType.disabled(\n          \"JSC_BAD_PRIVATE_PROPERTY_ACCESS\",\n          \"Access to private property {0} of {1} not allowed here.\");",
        "begin_line": 77,
        "end_line": 80,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControls",
        "src_path": "src/com/google/javascript/jscomp/CheckAccessControls.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControls.BAD_PROTECTED_PROPERTY_ACCESS",
        "snippet": "  static final DiagnosticType BAD_PROTECTED_PROPERTY_ACCESS =\n      DiagnosticType.disabled(\n          \"JSC_BAD_PROTECTED_PROPERTY_ACCESS\",\n          \"Access to protected property {0} of {1} not allowed here.\");",
        "begin_line": 82,
        "end_line": 85,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControls",
        "src_path": "src/com/google/javascript/jscomp/CheckAccessControls.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControls.PRIVATE_OVERRIDE",
        "snippet": "  static final DiagnosticType PRIVATE_OVERRIDE =\n      DiagnosticType.disabled(\n          \"JSC_PRIVATE_OVERRIDE\",\n          \"Overriding private property of {0}.\");",
        "begin_line": 87,
        "end_line": 90,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControls",
        "src_path": "src/com/google/javascript/jscomp/CheckAccessControls.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControls.VISIBILITY_MISMATCH",
        "snippet": "  static final DiagnosticType VISIBILITY_MISMATCH =\n      DiagnosticType.disabled(\n          \"JSC_VISIBILITY_MISMATCH\",\n          \"Overriding {0} property of {1} with {2} property.\");",
        "begin_line": 92,
        "end_line": 95,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControls",
        "src_path": "src/com/google/javascript/jscomp/CheckAccessControls.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControls.CONST_PROPERTY_REASSIGNED_VALUE",
        "snippet": "  static final DiagnosticType CONST_PROPERTY_REASSIGNED_VALUE =\n      DiagnosticType.warning(\n        \"JSC_CONSTANT_PROPERTY_REASSIGNED_VALUE\",\n        \"constant property {0} assigned a value more than once\");",
        "begin_line": 97,
        "end_line": 100,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControls",
        "src_path": "src/com/google/javascript/jscomp/CheckAccessControls.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControls.CONST_PROPERTY_DELETED",
        "snippet": "  static final DiagnosticType CONST_PROPERTY_DELETED =\n      DiagnosticType.warning(\n        \"JSC_CONSTANT_PROPERTY_DELETED\",\n        \"constant property {0} cannot be deleted\");",
        "begin_line": 102,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControls",
        "src_path": "src/com/google/javascript/jscomp/CheckAccessControls.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControls.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 107,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControls",
        "src_path": "src/com/google/javascript/jscomp/CheckAccessControls.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControls.validator",
        "snippet": "  private final TypeValidator validator;",
        "begin_line": 108,
        "end_line": 108,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControls",
        "src_path": "src/com/google/javascript/jscomp/CheckAccessControls.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControls.deprecatedDepth",
        "snippet": "  private int deprecatedDepth = 0;",
        "begin_line": 111,
        "end_line": 111,
        "comment": " State about the current traversal."
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControls",
        "src_path": "src/com/google/javascript/jscomp/CheckAccessControls.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControls.methodDepth",
        "snippet": "  private int methodDepth = 0;",
        "begin_line": 112,
        "end_line": 112,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControls",
        "src_path": "src/com/google/javascript/jscomp/CheckAccessControls.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControls.currentClass",
        "snippet": "  private JSType currentClass = null;",
        "begin_line": 113,
        "end_line": 113,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControls",
        "src_path": "src/com/google/javascript/jscomp/CheckAccessControls.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControls.initializedConstantProperties",
        "snippet": "  private final Multimap<String, String> initializedConstantProperties;",
        "begin_line": 115,
        "end_line": 115,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RenamePrototypes",
        "src_path": "src/com/google/javascript/jscomp/RenamePrototypes.java",
        "signature": "com.google.javascript.jscomp.RenamePrototypes.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RenamePrototypes",
        "src_path": "src/com/google/javascript/jscomp/RenamePrototypes.java",
        "signature": "com.google.javascript.jscomp.RenamePrototypes.aggressiveRenaming",
        "snippet": "  private final boolean aggressiveRenaming;",
        "begin_line": 63,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RenamePrototypes",
        "src_path": "src/com/google/javascript/jscomp/RenamePrototypes.java",
        "signature": "com.google.javascript.jscomp.RenamePrototypes.reservedCharacters",
        "snippet": "  private final char[] reservedCharacters;",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RenamePrototypes",
        "src_path": "src/com/google/javascript/jscomp/RenamePrototypes.java",
        "signature": "com.google.javascript.jscomp.RenamePrototypes.prevUsedRenameMap",
        "snippet": "  private final VariableMap prevUsedRenameMap;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " Previously used prototype renaming map. "
    },
    {
        "class_name": "com.google.javascript.jscomp.Property",
        "src_path": "src/com/google/javascript/jscomp/RenamePrototypes.java",
        "signature": "com.google.javascript.jscomp.Property.oldName",
        "snippet": "    String oldName;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Property",
        "src_path": "src/com/google/javascript/jscomp/RenamePrototypes.java",
        "signature": "com.google.javascript.jscomp.Property.newName",
        "snippet": "    String newName;",
        "begin_line": 75,
        "end_line": 75,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Property",
        "src_path": "src/com/google/javascript/jscomp/RenamePrototypes.java",
        "signature": "com.google.javascript.jscomp.Property.prototypeCount",
        "snippet": "    int prototypeCount;",
        "begin_line": 76,
        "end_line": 76,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Property",
        "src_path": "src/com/google/javascript/jscomp/RenamePrototypes.java",
        "signature": "com.google.javascript.jscomp.Property.objLitCount",
        "snippet": "    int objLitCount;",
        "begin_line": 77,
        "end_line": 77,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Property",
        "src_path": "src/com/google/javascript/jscomp/RenamePrototypes.java",
        "signature": "com.google.javascript.jscomp.Property.refCount",
        "snippet": "    int refCount;",
        "begin_line": 78,
        "end_line": 78,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RenamePrototypes",
        "src_path": "src/com/google/javascript/jscomp/RenamePrototypes.java",
        "signature": "com.google.javascript.jscomp.RenamePrototypes.FREQUENCY_COMPARATOR",
        "snippet": "  private static final Comparator<Property> FREQUENCY_COMPARATOR =\n    new Comparator<Property>() {\n      @Override\n      public int compare(Property a1, Property a2) {\n        int n1 = a1.count();\n        int n2 = a2.count();\n        if (n1 != n2) {\n          return n2 - n1;\n        }\n        return a1.oldName.compareTo(a2.oldName);\n      }\n    };",
        "begin_line": 152,
        "end_line": 163,
        "comment": "\n   * Sorts Property objects by their count, breaking ties alphabetically to\n   * ensure a deterministic total ordering.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenamePrototypes",
        "src_path": "src/com/google/javascript/jscomp/RenamePrototypes.java",
        "signature": "com.google.javascript.jscomp.RenamePrototypes.stringNodes",
        "snippet": "  private final Set<Node> stringNodes = new HashSet<Node>();",
        "begin_line": 167,
        "end_line": 167,
        "comment": " Set of String nodes to rename"
    },
    {
        "class_name": "com.google.javascript.jscomp.RenamePrototypes",
        "src_path": "src/com/google/javascript/jscomp/RenamePrototypes.java",
        "signature": "com.google.javascript.jscomp.RenamePrototypes.properties",
        "snippet": "  private final Map<String, Property> properties =\n      new HashMap<String, Property>();",
        "begin_line": 170,
        "end_line": 171,
        "comment": " Mapping of property names to Property objects"
    },
    {
        "class_name": "com.google.javascript.jscomp.RenamePrototypes",
        "src_path": "src/com/google/javascript/jscomp/RenamePrototypes.java",
        "signature": "com.google.javascript.jscomp.RenamePrototypes.reservedNames",
        "snippet": "  private final Set<String> reservedNames =\n      new HashSet<String>(Arrays.asList(\n          \"indexOf\", \"lastIndexOf\", \"toString\", \"valueOf\"));",
        "begin_line": 174,
        "end_line": 176,
        "comment": " Set of names not to rename. Externed properties/methods are added later."
    },
    {
        "class_name": "com.google.javascript.jscomp.RenamePrototypes",
        "src_path": "src/com/google/javascript/jscomp/RenamePrototypes.java",
        "signature": "com.google.javascript.jscomp.RenamePrototypes.prototypeObjLits",
        "snippet": "  private final Set<Node> prototypeObjLits = new HashSet<Node>();",
        "begin_line": 179,
        "end_line": 179,
        "comment": " Set of OBJLIT nodes that are assigned to prototypes"
    },
    {
        "class_name": "com.google.javascript.jscomp.OptimizeParameters",
        "src_path": "src/com/google/javascript/jscomp/OptimizeParameters.java",
        "signature": "com.google.javascript.jscomp.OptimizeParameters.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 47,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.OptimizeParameters",
        "src_path": "src/com/google/javascript/jscomp/OptimizeParameters.java",
        "signature": "com.google.javascript.jscomp.OptimizeParameters.removedNodes",
        "snippet": "  private List<Node> removedNodes = Lists.newArrayList();",
        "begin_line": 48,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Parameter",
        "src_path": "src/com/google/javascript/jscomp/OptimizeParameters.java",
        "signature": "com.google.javascript.jscomp.Parameter.arg",
        "snippet": "    private final Node arg;",
        "begin_line": 408,
        "end_line": 408,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Parameter",
        "src_path": "src/com/google/javascript/jscomp/OptimizeParameters.java",
        "signature": "com.google.javascript.jscomp.Parameter.shouldRemove",
        "snippet": "    private boolean shouldRemove;",
        "begin_line": 409,
        "end_line": 409,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Parameter",
        "src_path": "src/com/google/javascript/jscomp/OptimizeParameters.java",
        "signature": "com.google.javascript.jscomp.Parameter.hasSideEffects",
        "snippet": "    private boolean hasSideEffects;",
        "begin_line": 410,
        "end_line": 410,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Parameter",
        "src_path": "src/com/google/javascript/jscomp/OptimizeParameters.java",
        "signature": "com.google.javascript.jscomp.Parameter.canBeSideEffected",
        "snippet": "    private boolean canBeSideEffected;",
        "begin_line": 411,
        "end_line": 411,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ObjectPropertyStringPreprocess",
        "src_path": "src/com/google/javascript/jscomp/ObjectPropertyStringPreprocess.java",
        "signature": "com.google.javascript.jscomp.ObjectPropertyStringPreprocess.OBJECT_PROPERTY_STRING",
        "snippet": "  static final String OBJECT_PROPERTY_STRING =\n      \"goog.testing.ObjectPropertyString\";",
        "begin_line": 41,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ObjectPropertyStringPreprocess",
        "src_path": "src/com/google/javascript/jscomp/ObjectPropertyStringPreprocess.java",
        "signature": "com.google.javascript.jscomp.ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING",
        "snippet": "  public static final String EXTERN_OBJECT_PROPERTY_STRING =\n      \"JSCompiler_ObjectPropertyString\";",
        "begin_line": 44,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ObjectPropertyStringPreprocess",
        "src_path": "src/com/google/javascript/jscomp/ObjectPropertyStringPreprocess.java",
        "signature": "com.google.javascript.jscomp.ObjectPropertyStringPreprocess.INVALID_NUM_ARGUMENTS_ERROR",
        "snippet": "  static final DiagnosticType INVALID_NUM_ARGUMENTS_ERROR =\n      DiagnosticType.error(\"JSC_OBJECT_PROPERTY_STRING_NUM_ARGS\",\n          \"goog.testing.ObjectPropertyString instantiated with \\\"{0}\\\" \" +\n          \"arguments, expected 2.\");",
        "begin_line": 47,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ObjectPropertyStringPreprocess",
        "src_path": "src/com/google/javascript/jscomp/ObjectPropertyStringPreprocess.java",
        "signature": "com.google.javascript.jscomp.ObjectPropertyStringPreprocess.QUALIFIED_NAME_EXPECTED_ERROR",
        "snippet": "  static final DiagnosticType QUALIFIED_NAME_EXPECTED_ERROR =\n      DiagnosticType.error(\"JSC_OBJECT_PROPERTY_STRING_QUALIFIED_NAME_EXPECTED\",\n          \"goog.testing.ObjectPropertyString instantiated with invalid \" +\n          \"argument, qualified name expected. Was \\\"{0}\\\".\");",
        "begin_line": 52,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ObjectPropertyStringPreprocess",
        "src_path": "src/com/google/javascript/jscomp/ObjectPropertyStringPreprocess.java",
        "signature": "com.google.javascript.jscomp.ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR",
        "snippet": "  static final DiagnosticType STRING_LITERAL_EXPECTED_ERROR =\n      DiagnosticType.error(\"JSC_OBJECT_PROPERTY_STRING_STRING_LITERAL_EXPECTED\",\n          \"goog.testing.ObjectPropertyString instantiated with invalid \" +\n          \"argument, string literal expected. Was \\\"{0}\\\".\");",
        "begin_line": 57,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ObjectPropertyStringPreprocess",
        "src_path": "src/com/google/javascript/jscomp/ObjectPropertyStringPreprocess.java",
        "signature": "com.google.javascript.jscomp.ObjectPropertyStringPreprocess.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntheticAst",
        "src_path": "src/com/google/javascript/jscomp/SyntheticAst.java",
        "signature": "com.google.javascript.jscomp.SyntheticAst.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 30,
        "end_line": 30,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntheticAst",
        "src_path": "src/com/google/javascript/jscomp/SyntheticAst.java",
        "signature": "com.google.javascript.jscomp.SyntheticAst.inputId",
        "snippet": "  private final InputId inputId;",
        "begin_line": 32,
        "end_line": 32,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntheticAst",
        "src_path": "src/com/google/javascript/jscomp/SyntheticAst.java",
        "signature": "com.google.javascript.jscomp.SyntheticAst.sourceFile",
        "snippet": "  private final SourceFile sourceFile;",
        "begin_line": 33,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntheticAst",
        "src_path": "src/com/google/javascript/jscomp/SyntheticAst.java",
        "signature": "com.google.javascript.jscomp.SyntheticAst.root",
        "snippet": "  private Node root;",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " Reference to the JS compiler "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.allNames",
        "snippet": "  private final Map<String, JsName> allNames = Maps.newTreeMap();",
        "begin_line": 82,
        "end_line": 82,
        "comment": " Map of all JS names found "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.referenceGraph",
        "snippet": "  private DiGraph<JsName, RefType> referenceGraph =\n      LinkedDirectedGraph.createWithoutAnnotations();",
        "begin_line": 85,
        "end_line": 86,
        "comment": " Reference dependency graph "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.scopes",
        "snippet": "  private final Map<Node, NameInformation> scopes = Maps.newHashMap();",
        "begin_line": 95,
        "end_line": 95,
        "comment": "\n   * Map of name scopes - all children of the Node key have a dependency on the\n   * name value.\n   *\n   * If scopes.get(node).equals(name) && node2 is a child of node, then node2\n   * will not get executed unless name is referenced via a get operation\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.PROTOTYPE_SUBSTRING",
        "snippet": "  private static final String PROTOTYPE_SUBSTRING = \".prototype.\";",
        "begin_line": 98,
        "end_line": 98,
        "comment": " Used to parse prototype names "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.PROTOTYPE_SUBSTRING_LEN",
        "snippet": "  private static final int PROTOTYPE_SUBSTRING_LEN =\n      PROTOTYPE_SUBSTRING.length();",
        "begin_line": 100,
        "end_line": 101,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.PROTOTYPE_SUFFIX_LEN",
        "snippet": "  private static final int PROTOTYPE_SUFFIX_LEN = \".prototype\".length();",
        "begin_line": 103,
        "end_line": 103,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.WINDOW",
        "snippet": "  private static final String WINDOW = \"window\";",
        "begin_line": 106,
        "end_line": 106,
        "comment": " Window root "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.FUNCTION",
        "snippet": "  private static final String FUNCTION = \"Function\";",
        "begin_line": 109,
        "end_line": 109,
        "comment": " Function class name "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.DEFAULT_GLOBAL_NAMES",
        "snippet": "  static final Set<String> DEFAULT_GLOBAL_NAMES = ImmutableSet.of(\n      \"window\", \"goog.global\");",
        "begin_line": 112,
        "end_line": 113,
        "comment": " All of these refer to global scope. These can be moved to config "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.removeUnreferenced",
        "snippet": "  private final boolean removeUnreferenced;",
        "begin_line": 116,
        "end_line": 116,
        "comment": " Whether to remove unreferenced variables in main pass "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.globalNames",
        "snippet": "  private final Set<String> globalNames;",
        "begin_line": 119,
        "end_line": 119,
        "comment": " Names that refer to the global scope "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.changeProxy",
        "snippet": "  private final AstChangeProxy changeProxy;",
        "begin_line": 122,
        "end_line": 122,
        "comment": " Ast change helper "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.externalNames",
        "snippet": "  private final Set<String> externalNames = Sets.newHashSet();",
        "begin_line": 125,
        "end_line": 125,
        "comment": " Names that are externally defined "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.refNodes",
        "snippet": "  private final List<RefNode> refNodes = Lists.newArrayList();",
        "begin_line": 128,
        "end_line": 128,
        "comment": " Name declarations or assignments, in post-order traversal order "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.aliases",
        "snippet": "  private final Map<String, AliasSet> aliases = Maps.newHashMap();",
        "begin_line": 134,
        "end_line": 134,
        "comment": "\n   * When multiple names in the global scope point to the same object, we\n   * call them aliases. Store a map from each alias name to the alias set.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasSet",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.AliasSet.names",
        "snippet": "    Set<String> names = Sets.newHashSet();",
        "begin_line": 145,
        "end_line": 145,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameInformation",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameInformation.name",
        "snippet": "    String name;",
        "begin_line": 188,
        "end_line": 188,
        "comment": " Fully qualified name "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameInformation",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameInformation.isExternallyReferenceable",
        "snippet": "    boolean isExternallyReferenceable = false;",
        "begin_line": 191,
        "end_line": 191,
        "comment": " Whether the name is guaranteed to be externally referenceable "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameInformation",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameInformation.isPrototype",
        "snippet": "    boolean isPrototype = false;",
        "begin_line": 194,
        "end_line": 194,
        "comment": " Whether this name is a prototype function "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameInformation",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameInformation.prototypeClass",
        "snippet": "    String prototypeClass = null;",
        "begin_line": 197,
        "end_line": 197,
        "comment": " Name of the prototype class, i.e. \"a\" if name is \"a.prototype.b\" "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameInformation",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameInformation.prototypeProperty",
        "snippet": "    String prototypeProperty = null;",
        "begin_line": 200,
        "end_line": 200,
        "comment": " Local name of prototype property i.e. \"b\" if name is \"a.prototype.b\" "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameInformation",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameInformation.superclass",
        "snippet": "    String superclass = null;",
        "begin_line": 203,
        "end_line": 203,
        "comment": " Name of the super class of name "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameInformation",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameInformation.onlyAffectsClassDef",
        "snippet": "    boolean onlyAffectsClassDef = false;",
        "begin_line": 206,
        "end_line": 206,
        "comment": " Whether this is a call that only affects the class definition "
    },
    {
        "class_name": "com.google.javascript.jscomp.JsName",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.JsName.name",
        "snippet": "    String name;",
        "begin_line": 214,
        "end_line": 214,
        "comment": " Fully qualified name "
    },
    {
        "class_name": "com.google.javascript.jscomp.JsName",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.JsName.prototypeNames",
        "snippet": "    List<String> prototypeNames = Lists.newArrayList();",
        "begin_line": 217,
        "end_line": 217,
        "comment": " Name of prototype functions attached to this name "
    },
    {
        "class_name": "com.google.javascript.jscomp.JsName",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.JsName.externallyDefined",
        "snippet": "    boolean externallyDefined = false;",
        "begin_line": 220,
        "end_line": 220,
        "comment": " Whether this is an externally defined name "
    },
    {
        "class_name": "com.google.javascript.jscomp.JsName",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.JsName.referenced",
        "snippet": "    boolean referenced = false;",
        "begin_line": 223,
        "end_line": 223,
        "comment": " Whether this node is referenced "
    },
    {
        "class_name": "com.google.javascript.jscomp.JsName",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.JsName.hasWrittenDescendants",
        "snippet": "    boolean hasWrittenDescendants = false;",
        "begin_line": 226,
        "end_line": 226,
        "comment": " Whether the name has descendants that are written to. "
    },
    {
        "class_name": "com.google.javascript.jscomp.JsName",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.JsName.hasInstanceOfReference",
        "snippet": "    boolean hasInstanceOfReference = false;",
        "begin_line": 229,
        "end_line": 229,
        "comment": " Whether the name is used in a instanceof check "
    },
    {
        "class_name": "com.google.javascript.jscomp.JsNameRefNode",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.JsNameRefNode.name",
        "snippet": "    JsName name;",
        "begin_line": 277,
        "end_line": 277,
        "comment": " JsName node for this reference "
    },
    {
        "class_name": "com.google.javascript.jscomp.JsNameRefNode",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.JsNameRefNode.node",
        "snippet": "    @SuppressWarnings(\"unused\")\n    Node node;",
        "begin_line": 283,
        "end_line": 284,
        "comment": "\n     * Top GETPROP or NAME or STRING [objlit key] node defining the name of\n     * this node\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.JsNameRefNode",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.JsNameRefNode.parent",
        "snippet": "    Node parent;",
        "begin_line": 290,
        "end_line": 290,
        "comment": "\n     * Parent node of the name access\n     * (ASSIGN, VAR, FUNCTION, OBJECTLIT, or CALL)\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.SpecialReferenceNode",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.SpecialReferenceNode.name",
        "snippet": "    JsName name;",
        "begin_line": 374,
        "end_line": 374,
        "comment": " JsName node for the function "
    },
    {
        "class_name": "com.google.javascript.jscomp.SpecialReferenceNode",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.SpecialReferenceNode.node",
        "snippet": "    Node node;",
        "begin_line": 377,
        "end_line": 377,
        "comment": " The CALL node "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.NON_LOCAL_RESULT_PREDICATE",
        "snippet": "  private static final Predicate<Node> NON_LOCAL_RESULT_PREDICATE =\n      new Predicate<Node>() {\n        @Override\n        public boolean apply(Node input) {\n          if (input.isCall()) {\n            return false;\n          }\n          // TODO(johnlenz): handle NEW calls that record their 'this'\n          // in global scope and effectively return an alias.\n          // Other non-local references are handled by this pass.\n          return true;\n        }\n      };",
        "begin_line": 692,
        "end_line": 704,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FindReferences",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.FindReferences.nodesToKeep",
        "snippet": "    Set<Node> nodesToKeep;",
        "begin_line": 715,
        "end_line": 715,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TransformAMDToCJSModule",
        "src_path": "src/com/google/javascript/jscomp/TransformAMDToCJSModule.java",
        "signature": "com.google.javascript.jscomp.TransformAMDToCJSModule.UNSUPPORTED_DEFINE_SIGNATURE_ERROR",
        "snippet": "  @VisibleForTesting\n  final static DiagnosticType UNSUPPORTED_DEFINE_SIGNATURE_ERROR =\n      DiagnosticType.error(\n          \"UNSUPPORTED_DEFINE_SIGNATURE\",\n          \"Only define(function() ...), define(OBJECT_LITERAL) and define(\"\n              + \"['dep', 'dep1'], function(d0, d2, [exports, module]) ...) forms \"\n              + \"are currently supported.\");",
        "begin_line": 32,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TransformAMDToCJSModule",
        "src_path": "src/com/google/javascript/jscomp/TransformAMDToCJSModule.java",
        "signature": "com.google.javascript.jscomp.TransformAMDToCJSModule.NON_TOP_LEVEL_STATEMENT_DEFINE_ERROR",
        "snippet": "  final static DiagnosticType NON_TOP_LEVEL_STATEMENT_DEFINE_ERROR =\n      DiagnosticType.error(\n            \"NON_TOP_LEVEL_STATEMENT_DEFINE\",\n            \"The define function must be called as a top-level statement.\");",
        "begin_line": 39,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TransformAMDToCJSModule",
        "src_path": "src/com/google/javascript/jscomp/TransformAMDToCJSModule.java",
        "signature": "com.google.javascript.jscomp.TransformAMDToCJSModule.REQUIREJS_PLUGINS_NOT_SUPPORTED_WARNING",
        "snippet": "  final static DiagnosticType REQUIREJS_PLUGINS_NOT_SUPPORTED_WARNING =\n    DiagnosticType.warning(\n          \"REQUIREJS_PLUGINS_NOT_SUPPORTED\",\n          \"Plugins in define requirements are not supported: {0}\");",
        "begin_line": 43,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TransformAMDToCJSModule",
        "src_path": "src/com/google/javascript/jscomp/TransformAMDToCJSModule.java",
        "signature": "com.google.javascript.jscomp.TransformAMDToCJSModule.VAR_RENAME_SUFFIX",
        "snippet": "  final static String VAR_RENAME_SUFFIX = \"__alias\";",
        "begin_line": 48,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TransformAMDToCJSModule",
        "src_path": "src/com/google/javascript/jscomp/TransformAMDToCJSModule.java",
        "signature": "com.google.javascript.jscomp.TransformAMDToCJSModule.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TransformAMDToCJSModule",
        "src_path": "src/com/google/javascript/jscomp/TransformAMDToCJSModule.java",
        "signature": "com.google.javascript.jscomp.TransformAMDToCJSModule.renameIndex",
        "snippet": "  private int renameIndex = 0;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameCallback",
        "src_path": "src/com/google/javascript/jscomp/TransformAMDToCJSModule.java",
        "signature": "com.google.javascript.jscomp.RenameCallback.from",
        "snippet": "    private final String from;",
        "begin_line": 286,
        "end_line": 286,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameCallback",
        "src_path": "src/com/google/javascript/jscomp/TransformAMDToCJSModule.java",
        "signature": "com.google.javascript.jscomp.RenameCallback.to",
        "snippet": "    private final String to;",
        "begin_line": 287,
        "end_line": 287,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.OPTIMAL_ORDER",
        "snippet": "  @VisibleForTesting\n  static final List<String> OPTIMAL_ORDER = ImmutableList.of(\n     \"deadAssignmentsElimination\",\n     \"inlineFunctions\",\n     \"removeUnusedPrototypeProperties\",\n     \"removeUnreachableCode\",\n     \"removeUnusedVars\",\n     \"minimizeExitPoints\",\n     \"inlineVariables\",\n     \"collapseObjectLiterals\",\n     \"peepholeOptimizations\"\n     );",
        "begin_line": 38,
        "end_line": 49,
        "comment": " This ordering is computed offline by running with compute_phase_ordering."
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.MAX_LOOPS",
        "snippet": "  static final int MAX_LOOPS = 100;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.OPTIMIZE_LOOP_ERROR",
        "snippet": "  static final String OPTIMIZE_LOOP_ERROR =\n      \"Fixed point loop exceeded the maximum number of iterations.\";",
        "begin_line": 52,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.logger",
        "snippet": "  private static final Logger logger =\n      Logger.getLogger(PhaseOptimizer.class.getName());",
        "begin_line": 55,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.passes",
        "snippet": "  private final List<CompilerPass> passes = Lists.newArrayList();",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.tracker",
        "snippet": "  private final PerformanceTracker tracker;",
        "begin_line": 61,
        "end_line": 61,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.recentChange",
        "snippet": "  private final CodeChangeHandler.RecentChange recentChange =\n      new CodeChangeHandler.RecentChange();",
        "begin_line": 62,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.loopMutex",
        "snippet": "  private boolean loopMutex = false;",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.currentTracer",
        "snippet": "  private Tracer currentTracer = null;",
        "begin_line": 65,
        "end_line": 65,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.currentPassName",
        "snippet": "  private String currentPassName = null;",
        "begin_line": 66,
        "end_line": 66,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.sanityCheck",
        "snippet": "  private PassFactory sanityCheck = null;",
        "begin_line": 67,
        "end_line": 67,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.progress",
        "snippet": "  private double progress = 0.0;",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.progressStep",
        "snippet": "  private double progressStep = 0.0;",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.randomizeLoops",
        "snippet": "  private static boolean randomizeLoops = false;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " phase orderings. They should not be touched by normal compiler runs."
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.loopsRun",
        "snippet": "  private static List<List<String>> loopsRun = Lists.newArrayList();",
        "begin_line": 75,
        "end_line": 75,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.progressRange",
        "snippet": "  private final ProgressRange progressRange;",
        "begin_line": 77,
        "end_line": 77,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NamedPass",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.NamedPass.name",
        "snippet": "    private final String name;",
        "begin_line": 268,
        "end_line": 268,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NamedPass",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.NamedPass.factory",
        "snippet": "    private final PassFactory factory;",
        "begin_line": 269,
        "end_line": 269,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Loop",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.Loop.myPasses",
        "snippet": "    private final List<NamedPass> myPasses = Lists.newArrayList();",
        "begin_line": 295,
        "end_line": 295,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Loop",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.Loop.myNames",
        "snippet": "    private final Set<String> myNames = Sets.newHashSet();",
        "begin_line": 296,
        "end_line": 296,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProgressRange",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.ProgressRange.initialValue",
        "snippet": "    public final double initialValue;",
        "begin_line": 384,
        "end_line": 384,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProgressRange",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.ProgressRange.maxValue",
        "snippet": "    public final double maxValue;",
        "begin_line": 385,
        "end_line": 385,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodeRemoval",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodeRemoval.java",
        "signature": "com.google.javascript.jscomp.ClosureCodeRemoval.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 50,
        "end_line": 50,
        "comment": " Reference to the JS compiler "
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodeRemoval",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodeRemoval.java",
        "signature": "com.google.javascript.jscomp.ClosureCodeRemoval.ABSTRACT_METHOD_NAME",
        "snippet": "  static final String ABSTRACT_METHOD_NAME = \"goog.abstractMethod\";",
        "begin_line": 53,
        "end_line": 53,
        "comment": " Name used to denote an abstract function "
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodeRemoval",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodeRemoval.java",
        "signature": "com.google.javascript.jscomp.ClosureCodeRemoval.removeAbstractMethods",
        "snippet": "  private final boolean removeAbstractMethods;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodeRemoval",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodeRemoval.java",
        "signature": "com.google.javascript.jscomp.ClosureCodeRemoval.removeAssertionCalls",
        "snippet": "  private final boolean removeAssertionCalls;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodeRemoval",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodeRemoval.java",
        "signature": "com.google.javascript.jscomp.ClosureCodeRemoval.abstractMethodAssignmentNodes",
        "snippet": "  private final List<RemovableAssignment> abstractMethodAssignmentNodes =\n      Lists.newArrayList();",
        "begin_line": 62,
        "end_line": 63,
        "comment": "\n   * List of names referenced in successive generations of finding referenced\n   * nodes.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodeRemoval",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodeRemoval.java",
        "signature": "com.google.javascript.jscomp.ClosureCodeRemoval.assertionCalls",
        "snippet": "  private final List<Node> assertionCalls = Lists.newArrayList();",
        "begin_line": 68,
        "end_line": 68,
        "comment": "\n   * List of assertion functions.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.RemovableAssignment",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodeRemoval.java",
        "signature": "com.google.javascript.jscomp.RemovableAssignment.node",
        "snippet": "    final Node node;",
        "begin_line": 78,
        "end_line": 78,
        "comment": "\n     * The node\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.RemovableAssignment",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodeRemoval.java",
        "signature": "com.google.javascript.jscomp.RemovableAssignment.parent",
        "snippet": "    final Node parent;",
        "begin_line": 83,
        "end_line": 83,
        "comment": "\n     * Its parent\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.RemovableAssignment",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodeRemoval.java",
        "signature": "com.google.javascript.jscomp.RemovableAssignment.assignAncestors",
        "snippet": "    final List<Node> assignAncestors = Lists.newArrayList();",
        "begin_line": 88,
        "end_line": 88,
        "comment": "\n     * Full chain of ASSIGN ancestors\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.RemovableAssignment",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodeRemoval.java",
        "signature": "com.google.javascript.jscomp.RemovableAssignment.lastAncestor",
        "snippet": "    final Node lastAncestor;",
        "begin_line": 93,
        "end_line": 93,
        "comment": "\n     * The last ancestor\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.FindAssertionCalls",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodeRemoval.java",
        "signature": "com.google.javascript.jscomp.FindAssertionCalls.assertionNames",
        "snippet": "    Set<String> assertionNames = Sets.newHashSet();",
        "begin_line": 160,
        "end_line": 160,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameReferenceGraphConstruction",
        "src_path": "src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java",
        "signature": "com.google.javascript.jscomp.NameReferenceGraphConstruction.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 47,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameReferenceGraphConstruction",
        "src_path": "src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java",
        "signature": "com.google.javascript.jscomp.NameReferenceGraphConstruction.graph",
        "snippet": "  private final NameReferenceGraph graph;",
        "begin_line": 48,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameReferenceGraphConstruction",
        "src_path": "src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java",
        "signature": "com.google.javascript.jscomp.NameReferenceGraphConstruction.unknownNameUse",
        "snippet": "  private final Multimap<String, NameUse> unknownNameUse =\n      HashMultimap.create();",
        "begin_line": 55,
        "end_line": 56,
        "comment": " to resort to this map."
    },
    {
        "class_name": "com.google.javascript.jscomp.NameReferenceGraphConstruction",
        "src_path": "src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java",
        "signature": "com.google.javascript.jscomp.NameReferenceGraphConstruction.CONSERVATIVE",
        "snippet": "  private static final boolean CONSERVATIVE = false;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " Should we continue even if we found a type checker bug."
    },
    {
        "class_name": "com.google.javascript.jscomp.NameReferenceGraphConstruction",
        "src_path": "src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java",
        "signature": "com.google.javascript.jscomp.NameReferenceGraphConstruction.currentFunctionStack",
        "snippet": "  private final ArrayList<Name> currentFunctionStack = new ArrayList<Name>();",
        "begin_line": 64,
        "end_line": 64,
        "comment": " bar(), we connect foo -> bar."
    },
    {
        "class_name": "com.google.javascript.jscomp.Traversal",
        "src_path": "src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java",
        "signature": "com.google.javascript.jscomp.Traversal.isExtern",
        "snippet": "    final boolean isExtern;",
        "begin_line": 104,
        "end_line": 104,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameUse",
        "src_path": "src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java",
        "signature": "com.google.javascript.jscomp.NameUse.name",
        "snippet": "    private final Name name;",
        "begin_line": 626,
        "end_line": 626,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameUse",
        "src_path": "src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java",
        "signature": "com.google.javascript.jscomp.NameUse.reference",
        "snippet": "    private final Reference reference;",
        "begin_line": 627,
        "end_line": 627,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsAst",
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "signature": "com.google.javascript.jscomp.JsAst.logger_",
        "snippet": "  private static final Logger logger_ = Logger.getLogger(JsAst.class.getName());",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsAst",
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "signature": "com.google.javascript.jscomp.JsAst.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsAst",
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "signature": "com.google.javascript.jscomp.JsAst.inputId",
        "snippet": "  private transient InputId inputId;",
        "begin_line": 38,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsAst",
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "signature": "com.google.javascript.jscomp.JsAst.sourceFile",
        "snippet": "  private transient SourceFile sourceFile;",
        "begin_line": 39,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsAst",
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "signature": "com.google.javascript.jscomp.JsAst.fileName",
        "snippet": "  private String fileName;",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsAst",
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "signature": "com.google.javascript.jscomp.JsAst.root",
        "snippet": "  private Node root;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.MSG_FUNCTION_NAME",
        "snippet": "  private static final String MSG_FUNCTION_NAME = \"goog.getMsg\";",
        "begin_line": 44,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.MSG_FALLBACK_FUNCTION_NAME",
        "snippet": "  private static final String MSG_FALLBACK_FUNCTION_NAME =\n      \"goog.getMsgWithFallback\";",
        "begin_line": 45,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.MESSAGE_HAS_NO_DESCRIPTION",
        "snippet": "  static final DiagnosticType MESSAGE_HAS_NO_DESCRIPTION =\n      DiagnosticType.warning(\"JSC_MSG_HAS_NO_DESCRIPTION\",\n          \"Message {0} has no description. Add @desc JsDoc tag.\");",
        "begin_line": 48,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.MESSAGE_HAS_NO_TEXT",
        "snippet": "  static final DiagnosticType MESSAGE_HAS_NO_TEXT =\n      DiagnosticType.warning(\"JSC_MSG_HAS_NO_TEXT\",\n          \"Message value of {0} is just an empty string. \"\n              + \"Empty messages are forbidden.\" );",
        "begin_line": 52,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.MESSAGE_TREE_MALFORMED",
        "snippet": "  static final DiagnosticType MESSAGE_TREE_MALFORMED =\n      DiagnosticType.error(\"JSC_MSG_TREE_MALFORMED\",\n          \"Message parse tree malformed. {0}\");",
        "begin_line": 57,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.MESSAGE_HAS_NO_VALUE",
        "snippet": "  static final DiagnosticType MESSAGE_HAS_NO_VALUE =\n      DiagnosticType.error(\"JSC_MSG_HAS_NO_VALUE\",\n          \"message node {0} has no value\");",
        "begin_line": 61,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.MESSAGE_DUPLICATE_KEY",
        "snippet": "  static final DiagnosticType MESSAGE_DUPLICATE_KEY =\n      DiagnosticType.error(\"JSC_MSG_KEY_DUPLICATED\",\n          \"duplicate message variable name found for {0}, \" +\n              \"initial definition {1}:{2}\");",
        "begin_line": 65,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.MESSAGE_NODE_IS_ORPHANED",
        "snippet": "  static final DiagnosticType MESSAGE_NODE_IS_ORPHANED =\n      DiagnosticType.warning(\"JSC_MSG_ORPHANED_NODE\", MSG_FUNCTION_NAME +\n          \"() function could be used only with MSG_* property or variable\");",
        "begin_line": 70,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX",
        "snippet": "  static final DiagnosticType MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX =\n      DiagnosticType.error(\"JSC_MSG_NOT_INITIALIZED_USING_NEW_SYNTAX\",\n          \"message not initialized using \" + MSG_FUNCTION_NAME);",
        "begin_line": 74,
        "end_line": 76,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.BAD_FALLBACK_SYNTAX",
        "snippet": "  static final DiagnosticType BAD_FALLBACK_SYNTAX =\n      DiagnosticType.error(\"JSC_MSG_BAD_FALLBACK_SYNTAX\",\n          String.format(\n              \"Bad syntax. \" +\n              \"Expected syntax: goog.getMsgWithFallback(MSG_1, MSG_2)\",\n              MSG_FALLBACK_FUNCTION_NAME));",
        "begin_line": 78,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.FALLBACK_ARG_ERROR",
        "snippet": "  static final DiagnosticType FALLBACK_ARG_ERROR =\n      DiagnosticType.error(\"JSC_MSG_FALLBACK_ARG_ERROR\",\n          \"Could not find message entry for fallback argument {0}\");",
        "begin_line": 85,
        "end_line": 87,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.PH_JS_PREFIX",
        "snippet": "  private static final String PH_JS_PREFIX = \"{$\";",
        "begin_line": 89,
        "end_line": 89,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.PH_JS_SUFFIX",
        "snippet": "  private static final String PH_JS_SUFFIX = \"}\";",
        "begin_line": 90,
        "end_line": 90,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.MSG_PREFIX",
        "snippet": "  static final String MSG_PREFIX = \"MSG_\";",
        "begin_line": 92,
        "end_line": 92,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.MSG_UNNAMED_PATTERN",
        "snippet": "  private static final Pattern MSG_UNNAMED_PATTERN =\n      Pattern.compile(\"MSG_UNNAMED_\\\\d+\");",
        "begin_line": 106,
        "end_line": 107,
        "comment": "\n   * Pattern for unnamed messages.\n   * <p>\n   * All JS messages in JS code should have unique name but messages in\n   * generated code (i.e. from soy template) could have duplicated message names.\n   * Later we replace the message names with ids constructed as a hash of the\n   * message content.\n   * <p>\n   * <link href=\"http://code.google.com/p/closure-templates/\">\n   * Soy</link> generates messages with names MSG_UNNAMED_<NUMBER> . This\n   * pattern recognizes such messages.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.CAMELCASE_PATTERN",
        "snippet": "  private static final Pattern CAMELCASE_PATTERN =\n      Pattern.compile(\"[a-z][a-zA-Z\\\\d]*[_\\\\d]*\");",
        "begin_line": 109,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.HIDDEN_DESC_PREFIX",
        "snippet": "  static final String HIDDEN_DESC_PREFIX = \"@hidden\";",
        "begin_line": 112,
        "end_line": 112,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.DESC_SUFFIX",
        "snippet": "  private static final String DESC_SUFFIX = \"_HELP\";",
        "begin_line": 115,
        "end_line": 115,
        "comment": " For old-style JS messages"
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.needToCheckDuplications",
        "snippet": "  private final boolean needToCheckDuplications;",
        "begin_line": 117,
        "end_line": 117,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.style",
        "snippet": "  private final JsMessage.Style style;",
        "begin_line": 118,
        "end_line": 118,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.idGenerator",
        "snippet": "  private final JsMessage.IdGenerator idGenerator;",
        "begin_line": 119,
        "end_line": 119,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.compiler",
        "snippet": "  final AbstractCompiler compiler;",
        "begin_line": 120,
        "end_line": 120,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.messageNames",
        "snippet": "  private final Map<String, MessageLocation> messageNames =\n      Maps.newHashMap();",
        "begin_line": 126,
        "end_line": 127,
        "comment": "\n   * The names encountered associated with their defining node and source. We\n   * use it for tracking duplicated message ids in the source code.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.unnamedMessages",
        "snippet": "  private final Map<Var, JsMessage> unnamedMessages =\n      Maps.newHashMap();",
        "begin_line": 129,
        "end_line": 130,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.googMsgNodes",
        "snippet": "  private final Map<Node, String> googMsgNodes = Maps.newHashMap();",
        "begin_line": 140,
        "end_line": 140,
        "comment": "\n   * List of found goog.getMsg call nodes.\n   *\n   * When we visit goog.getMsg() node we add a pair node:sourcename and later\n   * when we visit its parent we remove this pair. All nodes that are left at\n   * the end of traversing are orphaned nodes. It means have no corresponding\n   * var or property node.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.checkLevel",
        "snippet": "  private final CheckLevel checkLevel;",
        "begin_line": 142,
        "end_line": 142,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MalformedException",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.MalformedException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 920,
        "end_line": 920,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MalformedException",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.MalformedException.node",
        "snippet": "    private final Node node;",
        "begin_line": 922,
        "end_line": 922,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MessageLocation",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.MessageLocation.message",
        "snippet": "    private final JsMessage message;",
        "begin_line": 935,
        "end_line": 935,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MessageLocation",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.MessageLocation.messageNode",
        "snippet": "    private final Node messageNode;",
        "begin_line": 936,
        "end_line": 936,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedNames",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedNames.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedNames.logger",
        "snippet": "  private static final Logger logger =\n    Logger.getLogger(RemoveUnusedNames.class.getName());",
        "begin_line": 33,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedNames",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedNames.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedNames.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedNames",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedNames.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedNames.canModifyExterns",
        "snippet": "  private final boolean canModifyExterns;",
        "begin_line": 38,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefinitionSite",
        "src_path": "src/com/google/javascript/jscomp/DefinitionSite.java",
        "signature": "com.google.javascript.jscomp.DefinitionSite.node",
        "snippet": "  final Node node;",
        "begin_line": 30,
        "end_line": 30,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefinitionSite",
        "src_path": "src/com/google/javascript/jscomp/DefinitionSite.java",
        "signature": "com.google.javascript.jscomp.DefinitionSite.definition",
        "snippet": "  final Definition definition;",
        "begin_line": 31,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefinitionSite",
        "src_path": "src/com/google/javascript/jscomp/DefinitionSite.java",
        "signature": "com.google.javascript.jscomp.DefinitionSite.module",
        "snippet": "  final JSModule module;",
        "begin_line": 32,
        "end_line": 32,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefinitionSite",
        "src_path": "src/com/google/javascript/jscomp/DefinitionSite.java",
        "signature": "com.google.javascript.jscomp.DefinitionSite.inGlobalScope",
        "snippet": "  final boolean inGlobalScope;",
        "begin_line": 33,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefinitionSite",
        "src_path": "src/com/google/javascript/jscomp/DefinitionSite.java",
        "signature": "com.google.javascript.jscomp.DefinitionSite.inExterns",
        "snippet": "  final boolean inExterns;",
        "begin_line": 34,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConvention.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConvention.OBJECTLIT_EXPECTED",
        "snippet": "  static final DiagnosticType OBJECTLIT_EXPECTED = DiagnosticType.warning(\n      \"JSC_REFLECT_OBJECTLIT_EXPECTED\",\n      \"Object literal expected as second argument\");",
        "begin_line": 43,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConvention.indirectlyDeclaredProperties",
        "snippet": "  private final Set<String> indirectlyDeclaredProperties;",
        "begin_line": 47,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConvention.propertyTestFunctions",
        "snippet": "  private final Set<String> propertyTestFunctions = ImmutableSet.of(\n      \"goog.isDef\", \"goog.isNull\", \"goog.isDefAndNotNull\",\n      \"goog.isString\", \"goog.isNumber\", \"goog.isBoolean\",\n      \"goog.isFunction\", \"goog.isArray\", \"goog.isObject\");",
        "begin_line": 311,
        "end_line": 314,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ByPathWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/ByPathWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.ByPathWarningsGuard.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ByPathWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/ByPathWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.ByPathWarningsGuard.paths",
        "snippet": "  private final List<String> paths;",
        "begin_line": 44,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ByPathWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/ByPathWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.ByPathWarningsGuard.include",
        "snippet": "  private final boolean include;",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ByPathWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/ByPathWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.ByPathWarningsGuard.priority",
        "snippet": "  private final int priority;",
        "begin_line": 46,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ByPathWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/ByPathWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.ByPathWarningsGuard.level",
        "snippet": "  private CheckLevel level;",
        "begin_line": 47,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AnalyzePrototypeProperties",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.AnalyzePrototypeProperties.PROPERTY",
        "snippet": "  private final SymbolType PROPERTY = SymbolType.PROPERTY;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " Constants for symbol types, for easier readability."
    },
    {
        "class_name": "com.google.javascript.jscomp.AnalyzePrototypeProperties",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.AnalyzePrototypeProperties.VAR",
        "snippet": "  private final SymbolType VAR = SymbolType.VAR;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AnalyzePrototypeProperties",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.AnalyzePrototypeProperties.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AnalyzePrototypeProperties",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.AnalyzePrototypeProperties.canModifyExterns",
        "snippet": "  private final boolean canModifyExterns;",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AnalyzePrototypeProperties",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.AnalyzePrototypeProperties.anchorUnusedVars",
        "snippet": "  private final boolean anchorUnusedVars;",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AnalyzePrototypeProperties",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.AnalyzePrototypeProperties.moduleGraph",
        "snippet": "  private final JSModuleGraph moduleGraph;",
        "begin_line": 61,
        "end_line": 61,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AnalyzePrototypeProperties",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.AnalyzePrototypeProperties.firstModule",
        "snippet": "  private final JSModule firstModule;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AnalyzePrototypeProperties",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.AnalyzePrototypeProperties.IMPLICITLY_USED_PROPERTIES",
        "snippet": "  private static final Set<String> IMPLICITLY_USED_PROPERTIES =\n      ImmutableSet.of(\"length\", \"toString\", \"valueOf\");",
        "begin_line": 65,
        "end_line": 66,
        "comment": " Properties that are implicitly used as part of the JS language."
    },
    {
        "class_name": "com.google.javascript.jscomp.AnalyzePrototypeProperties",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.AnalyzePrototypeProperties.symbolGraph",
        "snippet": "  private final LinkedDirectedGraph<NameInfo, JSModule> symbolGraph =\n      LinkedDirectedGraph.createWithoutAnnotations();",
        "begin_line": 84,
        "end_line": 85,
        "comment": " from scotch to age."
    },
    {
        "class_name": "com.google.javascript.jscomp.AnalyzePrototypeProperties",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.AnalyzePrototypeProperties.globalNode",
        "snippet": "  private final NameInfo globalNode = new NameInfo(\"[global]\");",
        "begin_line": 88,
        "end_line": 88,
        "comment": " A dummy node for representing global references."
    },
    {
        "class_name": "com.google.javascript.jscomp.AnalyzePrototypeProperties",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.AnalyzePrototypeProperties.externNode",
        "snippet": "  private final NameInfo externNode = new NameInfo(\"[extern]\");",
        "begin_line": 91,
        "end_line": 91,
        "comment": " A dummy node for representing extern references."
    },
    {
        "class_name": "com.google.javascript.jscomp.AnalyzePrototypeProperties",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.AnalyzePrototypeProperties.anonymousNode",
        "snippet": "  private final NameInfo anonymousNode = new NameInfo(\"[anonymous]\");",
        "begin_line": 94,
        "end_line": 94,
        "comment": " A dummy node for representing all anonymous functions with no names."
    },
    {
        "class_name": "com.google.javascript.jscomp.AnalyzePrototypeProperties",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.AnalyzePrototypeProperties.propertyNameInfo",
        "snippet": "  private final Map<String, NameInfo> propertyNameInfo = Maps.newHashMap();",
        "begin_line": 98,
        "end_line": 98,
        "comment": " of the property that they represent."
    },
    {
        "class_name": "com.google.javascript.jscomp.AnalyzePrototypeProperties",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.AnalyzePrototypeProperties.varNameInfo",
        "snippet": "  private final Map<String, NameInfo> varNameInfo = Maps.newHashMap();",
        "begin_line": 102,
        "end_line": 102,
        "comment": " global variable that it's assigned to."
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessProperties",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.ProcessProperties.symbolStack",
        "snippet": "    private Stack<NameContext> symbolStack = new Stack<NameContext>();",
        "begin_line": 199,
        "end_line": 199,
        "comment": "    given a name context. These contexts do not have scopes."
    },
    {
        "class_name": "com.google.javascript.jscomp.GlobalFunction",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.GlobalFunction.nameNode",
        "snippet": "    private final Node nameNode;",
        "begin_line": 570,
        "end_line": 570,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GlobalFunction",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.GlobalFunction.var",
        "snippet": "    private final Var var;",
        "begin_line": 571,
        "end_line": 571,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GlobalFunction",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.GlobalFunction.module",
        "snippet": "    private final JSModule module;",
        "begin_line": 572,
        "end_line": 572,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AssignmentProperty",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.AssignmentProperty.exprNode",
        "snippet": "    private final Node exprNode;",
        "begin_line": 637,
        "end_line": 637,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AssignmentProperty",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.AssignmentProperty.rootVar",
        "snippet": "    private final Var rootVar;",
        "begin_line": 638,
        "end_line": 638,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AssignmentProperty",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.AssignmentProperty.module",
        "snippet": "    private final JSModule module;",
        "begin_line": 639,
        "end_line": 639,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LiteralProperty",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.LiteralProperty.key",
        "snippet": "    private final Node key;",
        "begin_line": 687,
        "end_line": 687,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LiteralProperty",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.LiteralProperty.value",
        "snippet": "    private final Node value;",
        "begin_line": 688,
        "end_line": 688,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LiteralProperty",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.LiteralProperty.map",
        "snippet": "    private final Node map;",
        "begin_line": 689,
        "end_line": 689,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LiteralProperty",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.LiteralProperty.assign",
        "snippet": "    private final Node assign;",
        "begin_line": 690,
        "end_line": 690,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LiteralProperty",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.LiteralProperty.rootVar",
        "snippet": "    private final Var rootVar;",
        "begin_line": 691,
        "end_line": 691,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LiteralProperty",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.LiteralProperty.module",
        "snippet": "    private final JSModule module;",
        "begin_line": 692,
        "end_line": 692,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameContext",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.NameContext.name",
        "snippet": "    final NameInfo name;",
        "begin_line": 735,
        "end_line": 735,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameContext",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.NameContext.scope",
        "snippet": "    final Scope scope;",
        "begin_line": 739,
        "end_line": 739,
        "comment": " corresponding function. Otherwise, it will be null."
    },
    {
        "class_name": "com.google.javascript.jscomp.NameInfo",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.NameInfo.name",
        "snippet": "    final String name;",
        "begin_line": 752,
        "end_line": 752,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameInfo",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.NameInfo.referenced",
        "snippet": "    private boolean referenced = false;",
        "begin_line": 754,
        "end_line": 754,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameInfo",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.NameInfo.declarations",
        "snippet": "    private final Deque<Symbol> declarations = new ArrayDeque<Symbol>();",
        "begin_line": 755,
        "end_line": 755,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameInfo",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.NameInfo.deepestCommonModuleRef",
        "snippet": "    private JSModule deepestCommonModuleRef = null;",
        "begin_line": 756,
        "end_line": 756,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameInfo",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.NameInfo.readClosureVariables",
        "snippet": "    private boolean readClosureVariables = false;",
        "begin_line": 760,
        "end_line": 760,
        "comment": " outer scope which isn't the global scope."
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnonymousFunctions",
        "src_path": "src/com/google/javascript/jscomp/NameAnonymousFunctions.java",
        "signature": "com.google.javascript.jscomp.NameAnonymousFunctions.logger",
        "snippet": "  private static final Logger logger = Logger.getLogger(\n      NameAnonymousFunctions.class.getName());",
        "begin_line": 37,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnonymousFunctions",
        "src_path": "src/com/google/javascript/jscomp/NameAnonymousFunctions.java",
        "signature": "com.google.javascript.jscomp.NameAnonymousFunctions.DELIMITER",
        "snippet": "  static final char DELIMITER = '$';",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnonymousFunctions",
        "src_path": "src/com/google/javascript/jscomp/NameAnonymousFunctions.java",
        "signature": "com.google.javascript.jscomp.NameAnonymousFunctions.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnonymousFunctions",
        "src_path": "src/com/google/javascript/jscomp/NameAnonymousFunctions.java",
        "signature": "com.google.javascript.jscomp.NameAnonymousFunctions.namedCount",
        "snippet": "  private int namedCount = 0;",
        "begin_line": 44,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnonymousFunctions",
        "src_path": "src/com/google/javascript/jscomp/NameAnonymousFunctions.java",
        "signature": "com.google.javascript.jscomp.NameAnonymousFunctions.bytesUsed",
        "snippet": "  private int bytesUsed = 0;",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AnonymousFunctionNamer",
        "src_path": "src/com/google/javascript/jscomp/NameAnonymousFunctions.java",
        "signature": "com.google.javascript.jscomp.AnonymousFunctionNamer.nameExtractor",
        "snippet": "    private NodeNameExtractor nameExtractor;",
        "begin_line": 68,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SimpleDefinitionFinder",
        "src_path": "src/com/google/javascript/jscomp/SimpleDefinitionFinder.java",
        "signature": "com.google.javascript.jscomp.SimpleDefinitionFinder.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 46,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SimpleDefinitionFinder",
        "src_path": "src/com/google/javascript/jscomp/SimpleDefinitionFinder.java",
        "signature": "com.google.javascript.jscomp.SimpleDefinitionFinder.definitionSiteMap",
        "snippet": "  private final Map<Node, DefinitionSite> definitionSiteMap;",
        "begin_line": 47,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SimpleDefinitionFinder",
        "src_path": "src/com/google/javascript/jscomp/SimpleDefinitionFinder.java",
        "signature": "com.google.javascript.jscomp.SimpleDefinitionFinder.nameDefinitionMultimap",
        "snippet": "  private final Multimap<String, Definition> nameDefinitionMultimap;",
        "begin_line": 48,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SimpleDefinitionFinder",
        "src_path": "src/com/google/javascript/jscomp/SimpleDefinitionFinder.java",
        "signature": "com.google.javascript.jscomp.SimpleDefinitionFinder.nameUseSiteMultimap",
        "snippet": "  private final Multimap<String, UseSite> nameUseSiteMultimap;",
        "begin_line": 49,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefinitionGatheringCallback",
        "src_path": "src/com/google/javascript/jscomp/SimpleDefinitionFinder.java",
        "signature": "com.google.javascript.jscomp.DefinitionGatheringCallback.inExterns",
        "snippet": "    private boolean inExterns;",
        "begin_line": 150,
        "end_line": 150,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VariableNameGenerator",
        "src_path": "src/com/google/javascript/jscomp/VariableNameGenerator.java",
        "signature": "com.google.javascript.jscomp.VariableNameGenerator.names",
        "snippet": "  private final NameGenerator names;",
        "begin_line": 30,
        "end_line": 30,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VariableNameGenerator",
        "src_path": "src/com/google/javascript/jscomp/VariableNameGenerator.java",
        "signature": "com.google.javascript.jscomp.VariableNameGenerator.scope",
        "snippet": "  private final Scope scope;",
        "begin_line": 31,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.GET_CSS_NAME_FUNCTION",
        "snippet": "  static final String GET_CSS_NAME_FUNCTION = \"goog.getCssName\";",
        "begin_line": 85,
        "end_line": 85,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.INVALID_NUM_ARGUMENTS_ERROR",
        "snippet": "  static final DiagnosticType INVALID_NUM_ARGUMENTS_ERROR =\n      DiagnosticType.error(\"JSC_GETCSSNAME_NUM_ARGS\",\n          \"goog.getCssName called with \\\"{0}\\\" arguments, expected 1 or 2.\");",
        "begin_line": 87,
        "end_line": 89,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.STRING_LITERAL_EXPECTED_ERROR",
        "snippet": "  static final DiagnosticType STRING_LITERAL_EXPECTED_ERROR =\n      DiagnosticType.error(\"JSC_GETCSSNAME_STRING_LITERAL_EXPECTED\",\n          \"goog.getCssName called with invalid argument, string literal \" +\n          \"expected.  Was \\\"{0}\\\".\");",
        "begin_line": 91,
        "end_line": 94,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.UNEXPECTED_STRING_LITERAL_ERROR",
        "snippet": "  static final DiagnosticType UNEXPECTED_STRING_LITERAL_ERROR =\n    DiagnosticType.error(\"JSC_GETCSSNAME_UNEXPECTED_STRING_LITERAL\",\n        \"goog.getCssName called with invalid arguments, string literal \" +\n        \"passed as first of two arguments.  Did you mean \" +\n        \"goog.getCssName(\\\"{0}-{1}\\\")?\");",
        "begin_line": 96,
        "end_line": 100,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.UNKNOWN_SYMBOL_WARNING",
        "snippet": "  static final DiagnosticType UNKNOWN_SYMBOL_WARNING =\n      DiagnosticType.warning(\"JSC_GETCSSNAME_UNKNOWN_CSS_SYMBOL\",\n         \"goog.getCssName called with unrecognized symbol \\\"{0}\\\" in class \" +\n         \"\\\"{1}\\\".\");",
        "begin_line": 102,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 108,
        "end_line": 108,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.cssNames",
        "snippet": "  private final Map<String, Integer> cssNames;",
        "begin_line": 110,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.symbolMap",
        "snippet": "  private CssRenamingMap symbolMap;",
        "begin_line": 112,
        "end_line": 112,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.whitelist",
        "snippet": "  private final Set<String> whitelist;",
        "begin_line": 114,
        "end_line": 114,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.nativeStringType",
        "snippet": "  private final JSType nativeStringType;",
        "begin_line": 116,
        "end_line": 116,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariables",
        "src_path": "src/com/google/javascript/jscomp/InlineVariables.java",
        "signature": "com.google.javascript.jscomp.InlineVariables.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariables",
        "src_path": "src/com/google/javascript/jscomp/InlineVariables.java",
        "signature": "com.google.javascript.jscomp.InlineVariables.mode",
        "snippet": "  private final Mode mode;",
        "begin_line": 66,
        "end_line": 66,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariables",
        "src_path": "src/com/google/javascript/jscomp/InlineVariables.java",
        "signature": "com.google.javascript.jscomp.InlineVariables.inlineAllStrings",
        "snippet": "  private final boolean inlineAllStrings;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " Inlines all strings, even if they increase the size of the gzipped binary."
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariables",
        "src_path": "src/com/google/javascript/jscomp/InlineVariables.java",
        "signature": "com.google.javascript.jscomp.InlineVariables.identifyConstants",
        "snippet": "  private final IdentifyConstants identifyConstants = new IdentifyConstants();",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasCandidate",
        "src_path": "src/com/google/javascript/jscomp/InlineVariables.java",
        "signature": "com.google.javascript.jscomp.AliasCandidate.alias",
        "snippet": "    private final Var alias;",
        "begin_line": 128,
        "end_line": 128,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasCandidate",
        "src_path": "src/com/google/javascript/jscomp/InlineVariables.java",
        "signature": "com.google.javascript.jscomp.AliasCandidate.refInfo",
        "snippet": "    private final ReferenceCollection refInfo;",
        "begin_line": 129,
        "end_line": 129,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InliningBehavior",
        "src_path": "src/com/google/javascript/jscomp/InlineVariables.java",
        "signature": "com.google.javascript.jscomp.InliningBehavior.staleVars",
        "snippet": "    private final Set<Var> staleVars = Sets.newHashSet();",
        "begin_line": 148,
        "end_line": 148,
        "comment": "\n     * A list of variables that should not be inlined, because their\n     * reference information is out of sync with the state of the AST.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.InliningBehavior",
        "src_path": "src/com/google/javascript/jscomp/InlineVariables.java",
        "signature": "com.google.javascript.jscomp.InliningBehavior.aliasCandidates",
        "snippet": "    final Map<Node, AliasCandidate> aliasCandidates = Maps.newHashMap();",
        "begin_line": 155,
        "end_line": 155,
        "comment": "\n     * Stored possible aliases of variables that never change, with\n     * all the reference info about those variables. Hashed by the NAME\n     * node of the variable being aliased.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.ConvertToDottedProperties",
        "src_path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java",
        "signature": "com.google.javascript.jscomp.ConvertToDottedProperties.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 33,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JSModule",
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "signature": "com.google.javascript.jscomp.JSModule.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JSModule",
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "signature": "com.google.javascript.jscomp.JSModule.CIRCULAR_DEPENDENCY_ERROR",
        "snippet": "  static final DiagnosticType CIRCULAR_DEPENDENCY_ERROR =\n      DiagnosticType.error(\"JSC_CIRCULAR_DEP\",\n          \"Circular dependency detected: {0}\");",
        "begin_line": 43,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JSModule",
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "signature": "com.google.javascript.jscomp.JSModule.name",
        "snippet": "  private final String name;",
        "begin_line": 48,
        "end_line": 48,
        "comment": " Module name "
    },
    {
        "class_name": "com.google.javascript.jscomp.JSModule",
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "signature": "com.google.javascript.jscomp.JSModule.inputs",
        "snippet": "  private final List<CompilerInput> inputs = new ArrayList<CompilerInput>();",
        "begin_line": 51,
        "end_line": 51,
        "comment": " Source code inputs "
    },
    {
        "class_name": "com.google.javascript.jscomp.JSModule",
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "signature": "com.google.javascript.jscomp.JSModule.deps",
        "snippet": "  private final List<JSModule> deps = new ArrayList<JSModule>();",
        "begin_line": 54,
        "end_line": 54,
        "comment": " Modules that this module depends on "
    },
    {
        "class_name": "com.google.javascript.jscomp.JSModule",
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "signature": "com.google.javascript.jscomp.JSModule.depth",
        "snippet": "  private int depth;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrintStreamErrorManager",
        "src_path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java",
        "signature": "com.google.javascript.jscomp.PrintStreamErrorManager.formatter",
        "snippet": "  private final MessageFormatter formatter;",
        "begin_line": 33,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrintStreamErrorManager",
        "src_path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java",
        "signature": "com.google.javascript.jscomp.PrintStreamErrorManager.stream",
        "snippet": "  private final PrintStream stream;",
        "begin_line": 34,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrintStreamErrorManager",
        "src_path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java",
        "signature": "com.google.javascript.jscomp.PrintStreamErrorManager.summaryDetailLevel",
        "snippet": "  private int summaryDetailLevel = 1;",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FieldCleanupPass",
        "src_path": "src/com/google/javascript/jscomp/FieldCleanupPass.java",
        "signature": "com.google.javascript.jscomp.FieldCleanupPass.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 38,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.QualifiedNameSearchTraversal",
        "src_path": "src/com/google/javascript/jscomp/FieldCleanupPass.java",
        "signature": "com.google.javascript.jscomp.QualifiedNameSearchTraversal.typeRegistry",
        "snippet": "    private final JSTypeRegistry typeRegistry;",
        "begin_line": 82,
        "end_line": 82,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.QualifiedNameSearchTraversal",
        "src_path": "src/com/google/javascript/jscomp/FieldCleanupPass.java",
        "signature": "com.google.javascript.jscomp.QualifiedNameSearchTraversal.srcName",
        "snippet": "    private final String srcName;",
        "begin_line": 83,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MarkNoSideEffectCalls",
        "src_path": "src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java",
        "signature": "com.google.javascript.jscomp.MarkNoSideEffectCalls.INVALID_NO_SIDE_EFFECT_ANNOTATION",
        "snippet": "  static final DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION =\n      DiagnosticType.error(\n          \"JSC_INVALID_NO_SIDE_EFFECT_ANNOTATION\",\n          \"@nosideeffects may only appear in externs files.\");",
        "begin_line": 41,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MarkNoSideEffectCalls",
        "src_path": "src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java",
        "signature": "com.google.javascript.jscomp.MarkNoSideEffectCalls.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 46,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MarkNoSideEffectCalls",
        "src_path": "src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java",
        "signature": "com.google.javascript.jscomp.MarkNoSideEffectCalls.noSideEffectFunctionNames",
        "snippet": "  private final Set<Node> noSideEffectFunctionNames;",
        "begin_line": 50,
        "end_line": 50,
        "comment": " has a @nosideeffects annotation."
    },
    {
        "class_name": "com.google.javascript.jscomp.GatherNoSideEffectFunctions",
        "src_path": "src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java",
        "signature": "com.google.javascript.jscomp.GatherNoSideEffectFunctions.inExterns",
        "snippet": "    private final boolean inExterns;",
        "begin_line": 113,
        "end_line": 113,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SetNoSideEffectCallProperty",
        "src_path": "src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java",
        "signature": "com.google.javascript.jscomp.SetNoSideEffectCallProperty.defFinder",
        "snippet": "    private final SimpleDefinitionFinder defFinder;",
        "begin_line": 169,
        "end_line": 169,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasExternals",
        "src_path": "src/com/google/javascript/jscomp/AliasExternals.java",
        "signature": "com.google.javascript.jscomp.AliasExternals.DEFAULT_REQUIRED_USAGE",
        "snippet": "  private static final int DEFAULT_REQUIRED_USAGE = 4;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " Number of times a property needs to be accessed in order to alias "
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasExternals",
        "src_path": "src/com/google/javascript/jscomp/AliasExternals.java",
        "signature": "com.google.javascript.jscomp.AliasExternals.requiredUsage",
        "snippet": "  private int requiredUsage = DEFAULT_REQUIRED_USAGE;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " Number of times a property must be referenced in order to be aliased "
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasExternals",
        "src_path": "src/com/google/javascript/jscomp/AliasExternals.java",
        "signature": "com.google.javascript.jscomp.AliasExternals.MIN_PROP_SIZE",
        "snippet": "  private static final int MIN_PROP_SIZE = 4;",
        "begin_line": 87,
        "end_line": 87,
        "comment": " Minimum property size to be worth renaming "
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasExternals",
        "src_path": "src/com/google/javascript/jscomp/AliasExternals.java",
        "signature": "com.google.javascript.jscomp.AliasExternals.PROTOTYPE_PROPERTY_NAME",
        "snippet": "  static final String PROTOTYPE_PROPERTY_NAME =\n      getArrayNotationNameFor(\"prototype\");",
        "begin_line": 95,
        "end_line": 96,
        "comment": "\n   * The name of the variable used for the \"prototype\" string value. This is\n   * special-cased to make deobfuscated stack traces shorter and more readable\n   * (\"$MyClass$$P$$method$\" rather than \"$MyClass$$$PROP_prototype$method$\").\n   * @see NameAnonymousFunctions\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasExternals",
        "src_path": "src/com/google/javascript/jscomp/AliasExternals.java",
        "signature": "com.google.javascript.jscomp.AliasExternals.props",
        "snippet": "  private final Map<String, Symbol> props = Maps.newHashMap();",
        "begin_line": 99,
        "end_line": 99,
        "comment": " Map of all properties that we may be renaming "
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasExternals",
        "src_path": "src/com/google/javascript/jscomp/AliasExternals.java",
        "signature": "com.google.javascript.jscomp.AliasExternals.accessors",
        "snippet": "  private final List<Node> accessors = Lists.newArrayList();",
        "begin_line": 102,
        "end_line": 102,
        "comment": " Holds the properties that can be renamed to GETPROP_ "
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasExternals",
        "src_path": "src/com/google/javascript/jscomp/AliasExternals.java",
        "signature": "com.google.javascript.jscomp.AliasExternals.mutators",
        "snippet": "  private final List<Node> mutators = Lists.newArrayList();",
        "begin_line": 105,
        "end_line": 105,
        "comment": " Holds the properties that can be renamed to SETPROP_ "
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasExternals",
        "src_path": "src/com/google/javascript/jscomp/AliasExternals.java",
        "signature": "com.google.javascript.jscomp.AliasExternals.replacementMap",
        "snippet": "  private final Map<Node, Node> replacementMap =\n    new IdentityHashMap<Node, Node>();",
        "begin_line": 111,
        "end_line": 112,
        "comment": "\n   * Map of node replacements -\n   * Identity map because Node implements equals() but not hashCode()\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasExternals",
        "src_path": "src/com/google/javascript/jscomp/AliasExternals.java",
        "signature": "com.google.javascript.jscomp.AliasExternals.globals",
        "snippet": "  private final Map<String, Symbol> globals = Maps.newHashMap();",
        "begin_line": 115,
        "end_line": 115,
        "comment": " Map of all globals that we may alias "
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasExternals",
        "src_path": "src/com/google/javascript/jscomp/AliasExternals.java",
        "signature": "com.google.javascript.jscomp.AliasExternals.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 118,
        "end_line": 118,
        "comment": " Reference to JS Compiler "
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasExternals",
        "src_path": "src/com/google/javascript/jscomp/AliasExternals.java",
        "signature": "com.google.javascript.jscomp.AliasExternals.moduleGraph",
        "snippet": "  private final JSModuleGraph moduleGraph;",
        "begin_line": 121,
        "end_line": 121,
        "comment": " Reference to module inputs "
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasExternals",
        "src_path": "src/com/google/javascript/jscomp/AliasExternals.java",
        "signature": "com.google.javascript.jscomp.AliasExternals.defaultRoot",
        "snippet": "  private Node defaultRoot;",
        "begin_line": 124,
        "end_line": 124,
        "comment": " Root in parse tree for adding generated nodes "
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasExternals",
        "src_path": "src/com/google/javascript/jscomp/AliasExternals.java",
        "signature": "com.google.javascript.jscomp.AliasExternals.moduleRoots",
        "snippet": "  private Map<JSModule, Node> moduleRoots;",
        "begin_line": 127,
        "end_line": 127,
        "comment": " Root in each module for adding generated nodes, if using modules "
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasExternals",
        "src_path": "src/com/google/javascript/jscomp/AliasExternals.java",
        "signature": "com.google.javascript.jscomp.AliasExternals.unaliasableGlobals",
        "snippet": "  private final Set<String> unaliasableGlobals = Sets.newHashSet(\n      // While \"arguments\" is declared as a global extern, it really only has\n      // meaning inside function bodies and should not be aliased at a global\n      // level.\n      \"arguments\",\n      // Eval should not be aliased, per the ECMA-262 spec section 15.1.2.1\n      \"eval\",\n      // \"NodeFilter\" is not defined in IE and throws an error if you try to\n      // do var foo = NodeFilter.\n      \"NodeFilter\",\n      // Calls to this special function are eliminated by the RenameProperties\n      // compiler pass.\n      \"JSCompiler_renameProperty\");",
        "begin_line": 133,
        "end_line": 145,
        "comment": "\n   * A set of globals that can not be aliased since they may be undefined or\n   * can cause errors\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasExternals",
        "src_path": "src/com/google/javascript/jscomp/AliasExternals.java",
        "signature": "com.google.javascript.jscomp.AliasExternals.aliasableGlobals",
        "snippet": "  private final Set<String> aliasableGlobals = Sets.newHashSet();",
        "begin_line": 148,
        "end_line": 148,
        "comment": " Whitelist of aliasable externs. "
    },
    {
        "class_name": "com.google.javascript.jscomp.GetAliasableNames",
        "src_path": "src/com/google/javascript/jscomp/AliasExternals.java",
        "signature": "com.google.javascript.jscomp.GetAliasableNames.whitelist",
        "snippet": "    private final Set<String> whitelist;",
        "begin_line": 463,
        "end_line": 463,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Symbol",
        "src_path": "src/com/google/javascript/jscomp/AliasExternals.java",
        "signature": "com.google.javascript.jscomp.Symbol.name",
        "snippet": "    public final String name;",
        "begin_line": 744,
        "end_line": 744,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Symbol",
        "src_path": "src/com/google/javascript/jscomp/AliasExternals.java",
        "signature": "com.google.javascript.jscomp.Symbol.accessorCount",
        "snippet": "    public int accessorCount = 0;",
        "begin_line": 745,
        "end_line": 745,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Symbol",
        "src_path": "src/com/google/javascript/jscomp/AliasExternals.java",
        "signature": "com.google.javascript.jscomp.Symbol.mutatorCount",
        "snippet": "    public int mutatorCount = 0;",
        "begin_line": 746,
        "end_line": 746,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Symbol",
        "src_path": "src/com/google/javascript/jscomp/AliasExternals.java",
        "signature": "com.google.javascript.jscomp.Symbol.aliasMutator",
        "snippet": "    public boolean aliasMutator = false;",
        "begin_line": 747,
        "end_line": 747,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Symbol",
        "src_path": "src/com/google/javascript/jscomp/AliasExternals.java",
        "signature": "com.google.javascript.jscomp.Symbol.aliasAccessor",
        "snippet": "    public boolean aliasAccessor = false;",
        "begin_line": 748,
        "end_line": 748,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Symbol",
        "src_path": "src/com/google/javascript/jscomp/AliasExternals.java",
        "signature": "com.google.javascript.jscomp.Symbol.isConstant",
        "snippet": "    public final boolean isConstant;",
        "begin_line": 749,
        "end_line": 749,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Symbol",
        "src_path": "src/com/google/javascript/jscomp/AliasExternals.java",
        "signature": "com.google.javascript.jscomp.Symbol.deepestModuleAccess",
        "snippet": "    JSModule deepestModuleAccess = null;",
        "begin_line": 751,
        "end_line": 751,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Symbol",
        "src_path": "src/com/google/javascript/jscomp/AliasExternals.java",
        "signature": "com.google.javascript.jscomp.Symbol.deepestModuleMutate",
        "snippet": "    JSModule deepestModuleMutate = null;",
        "begin_line": 752,
        "end_line": 752,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Symbol",
        "src_path": "src/com/google/javascript/jscomp/AliasExternals.java",
        "signature": "com.google.javascript.jscomp.Symbol.uses",
        "snippet": "    List<Node> uses = Lists.newArrayList();",
        "begin_line": 754,
        "end_line": 754,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowGraph",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowGraph.java",
        "signature": "com.google.javascript.jscomp.ControlFlowGraph.implicitReturn",
        "snippet": "  private final DiGraphNode<N, ControlFlowGraph.Branch> implicitReturn;",
        "begin_line": 40,
        "end_line": 40,
        "comment": "\n   * A special node marked by the node value key null to a singleton\n   * \"return\" when control is transferred outside of the current control flow\n   * graph.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowGraph",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowGraph.java",
        "signature": "com.google.javascript.jscomp.ControlFlowGraph.entry",
        "snippet": "  private final DiGraphNode<N, ControlFlowGraph.Branch> entry;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.manageClosureDependencies",
        "snippet": "  @SuppressWarnings(\"unused\")\n  private boolean manageClosureDependencies = false;",
        "begin_line": 43,
        "end_line": 44,
        "comment": " Unused. For people using reflection to circumvent access control."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 7L;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.languageIn",
        "snippet": "  private LanguageMode languageIn;",
        "begin_line": 61,
        "end_line": 61,
        "comment": "\n   * The JavaScript language version accepted.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.languageOut",
        "snippet": "  private LanguageMode languageOut;",
        "begin_line": 67,
        "end_line": 67,
        "comment": "\n   * The JavaScript language version that should be produced.\n   * Currently, this is always the same as {@link #languageIn}.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.acceptConstKeyword",
        "snippet": "  boolean acceptConstKeyword;",
        "begin_line": 72,
        "end_line": 72,
        "comment": "\n   * Whether the compiler accepts the `const' keyword.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.assumeStrictThis",
        "snippet": "  private boolean assumeStrictThis;",
        "begin_line": 79,
        "end_line": 79,
        "comment": "\n   * Whether the compiler should assume that a function's \"this\" value\n   * never needs coercion (for example in non-strict \"null\" or \"undefined\" will\n   * be coerced to the global \"this\" and primitives to objects).\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.ideMode",
        "snippet": "  public boolean ideMode;",
        "begin_line": 93,
        "end_line": 93,
        "comment": "\n   * Configures the compiler for use as an IDE backend.  In this mode:\n   * <ul>\n   *  <li>No optimization passes will run.</li>\n   *  <li>The last time custom passes are invoked is\n   *      {@link CustomPassExecutionTime#BEFORE_OPTIMIZATIONS}</li>\n   *  <li>The compiler will always try to process all inputs fully, even\n   *      if it encounters errors.</li>\n   *  <li>The compiler may record more information than is strictly\n   *      needed for codegen.</li>\n   * </ul>\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.saveDataStructures",
        "snippet": "  boolean saveDataStructures = false;",
        "begin_line": 95,
        "end_line": 95,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inferTypes",
        "snippet": "  boolean inferTypes;",
        "begin_line": 101,
        "end_line": 101,
        "comment": "\n   * Even if checkTypes is disabled, clients might want to still infer types.\n   * This is mostly used when ideMode is enabled.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.skipAllPasses",
        "snippet": "  boolean skipAllPasses;",
        "begin_line": 106,
        "end_line": 106,
        "comment": "\n   * Configures the compiler to skip as many passes as possible.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.nameAnonymousFunctionsOnly",
        "snippet": "  boolean nameAnonymousFunctionsOnly;",
        "begin_line": 111,
        "end_line": 111,
        "comment": "\n   * If true, name anonymous functions only. All others passes will be skipped.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.devMode",
        "snippet": "  DevMode devMode;",
        "begin_line": 117,
        "end_line": 117,
        "comment": "\n   * Configures the compiler to run expensive sanity checks after\n   * every pass. Only intended for internal development.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.dependencyOptions",
        "snippet": "  DependencyOptions dependencyOptions = new DependencyOptions();",
        "begin_line": 123,
        "end_line": 123,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.messageBundle",
        "snippet": "  public transient MessageBundle messageBundle = null;",
        "begin_line": 127,
        "end_line": 127,
        "comment": " Transient so that clients don't have to implement Serializable."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkSymbols",
        "snippet": "  public boolean checkSymbols;",
        "begin_line": 134,
        "end_line": 134,
        "comment": " Checks that all symbols are defined "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aggressiveVarCheck",
        "snippet": "  public CheckLevel aggressiveVarCheck;",
        "begin_line": 136,
        "end_line": 136,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkSuspiciousCode",
        "snippet": "  public boolean checkSuspiciousCode;",
        "begin_line": 144,
        "end_line": 144,
        "comment": " Checks for suspicious statements that have no effect "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkControlStructures",
        "snippet": "  public boolean checkControlStructures;",
        "begin_line": 147,
        "end_line": 147,
        "comment": " Checks for invalid control structures "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkTypes",
        "snippet": "  public boolean checkTypes;",
        "begin_line": 150,
        "end_line": 150,
        "comment": " Checks types on expressions "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.tightenTypes",
        "snippet": "  boolean tightenTypes;",
        "begin_line": 152,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.reportMissingOverride",
        "snippet": "  public CheckLevel reportMissingOverride;",
        "begin_line": 159,
        "end_line": 159,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.reportUnknownTypes",
        "snippet": "  CheckLevel reportUnknownTypes;",
        "begin_line": 169,
        "end_line": 169,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkRequires",
        "snippet": "  public CheckLevel checkRequires;",
        "begin_line": 177,
        "end_line": 177,
        "comment": " Checks for missing goog.require() calls *"
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkProvides",
        "snippet": "  public CheckLevel checkProvides;",
        "begin_line": 183,
        "end_line": 183,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkGlobalNamesLevel",
        "snippet": "  public CheckLevel checkGlobalNamesLevel;",
        "begin_line": 190,
        "end_line": 190,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.brokenClosureRequiresLevel",
        "snippet": "  public CheckLevel brokenClosureRequiresLevel;",
        "begin_line": 200,
        "end_line": 200,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkGlobalThisLevel",
        "snippet": "  public CheckLevel checkGlobalThisLevel;",
        "begin_line": 207,
        "end_line": 207,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkMissingGetCssNameLevel",
        "snippet": "  public CheckLevel checkMissingGetCssNameLevel;",
        "begin_line": 221,
        "end_line": 221,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkMissingGetCssNameBlacklist",
        "snippet": "  public String checkMissingGetCssNameBlacklist;",
        "begin_line": 234,
        "end_line": 234,
        "comment": "\n   * Regex of string literals that may only appear in goog.getCssName arguments.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkCaja",
        "snippet": "  boolean checkCaja;",
        "begin_line": 237,
        "end_line": 237,
        "comment": " Checks that the syntactic restrictions of Caja are met. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.extraAnnotationNames",
        "snippet": "  Set<String> extraAnnotationNames;",
        "begin_line": 248,
        "end_line": 248,
        "comment": "\n   * A set of extra annotation names which are accepted and silently ignored\n   * when encountered in a source file. Defaults to null which has the same\n   * effect as specifying an empty set.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.foldConstants",
        "snippet": "  public boolean foldConstants;",
        "begin_line": 255,
        "end_line": 255,
        "comment": " Folds constants (e.g. (2 + 3) to 5) "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.deadAssignmentElimination",
        "snippet": "  public boolean deadAssignmentElimination;",
        "begin_line": 258,
        "end_line": 258,
        "comment": " Remove assignments to values that can not be referenced "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineConstantVars",
        "snippet": "  public boolean inlineConstantVars;",
        "begin_line": 261,
        "end_line": 261,
        "comment": " Inlines constants (symbols that are all CAPS) "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineFunctions",
        "snippet": "  public boolean inlineFunctions;",
        "begin_line": 264,
        "end_line": 264,
        "comment": " Inlines global functions "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineLocalFunctions",
        "snippet": "  public boolean inlineLocalFunctions;",
        "begin_line": 267,
        "end_line": 267,
        "comment": " Inlines functions defined in local scopes "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineProperties",
        "snippet": "  boolean inlineProperties;",
        "begin_line": 270,
        "end_line": 270,
        "comment": " Inlines properties "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.crossModuleCodeMotion",
        "snippet": "  public boolean crossModuleCodeMotion;",
        "begin_line": 273,
        "end_line": 273,
        "comment": " Move code to a deeper module "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.coalesceVariableNames",
        "snippet": "  public boolean coalesceVariableNames;",
        "begin_line": 276,
        "end_line": 276,
        "comment": " Merge two variables together as one. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.crossModuleMethodMotion",
        "snippet": "  public boolean crossModuleMethodMotion;",
        "begin_line": 279,
        "end_line": 279,
        "comment": " Move methods to a deeper module "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineGetters",
        "snippet": "  public boolean inlineGetters;",
        "begin_line": 282,
        "end_line": 282,
        "comment": " Inlines trivial getters "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineVariables",
        "snippet": "  public boolean inlineVariables;",
        "begin_line": 285,
        "end_line": 285,
        "comment": " Inlines variables "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineLocalVariables",
        "snippet": "  boolean inlineLocalVariables;",
        "begin_line": 288,
        "end_line": 288,
        "comment": " Inlines variables "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.flowSensitiveInlineVariables",
        "snippet": "  public boolean flowSensitiveInlineVariables;",
        "begin_line": 292,
        "end_line": 292,
        "comment": " Remove this."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.smartNameRemoval",
        "snippet": "  public boolean smartNameRemoval;",
        "begin_line": 295,
        "end_line": 295,
        "comment": " Removes code associated with unused global names "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeDeadCode",
        "snippet": "  public boolean removeDeadCode;",
        "begin_line": 298,
        "end_line": 298,
        "comment": " Removes code that will never execute "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkUnreachableCode",
        "snippet": "  public CheckLevel checkUnreachableCode;",
        "begin_line": 300,
        "end_line": 300,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkMissingReturn",
        "snippet": "  public CheckLevel checkMissingReturn;",
        "begin_line": 307,
        "end_line": 307,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.extractPrototypeMemberDeclarations",
        "snippet": "  public boolean extractPrototypeMemberDeclarations;",
        "begin_line": 315,
        "end_line": 315,
        "comment": " Extracts common prototype member declarations "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeUnusedPrototypeProperties",
        "snippet": "  public boolean removeUnusedPrototypeProperties;",
        "begin_line": 318,
        "end_line": 318,
        "comment": " Removes unused member prototypes "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeUnusedPrototypePropertiesInExterns",
        "snippet": "  public boolean removeUnusedPrototypePropertiesInExterns;",
        "begin_line": 321,
        "end_line": 321,
        "comment": " Tells AnalyzePrototypeProperties it can remove externed props. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeUnusedClassProperties",
        "snippet": "  public boolean removeUnusedClassProperties;",
        "begin_line": 324,
        "end_line": 324,
        "comment": " Removes unused member properties "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeUnusedVars",
        "snippet": "  public boolean removeUnusedVars;",
        "begin_line": 327,
        "end_line": 327,
        "comment": " Removes unused variables "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeUnusedLocalVars",
        "snippet": "  public boolean removeUnusedLocalVars;",
        "begin_line": 330,
        "end_line": 330,
        "comment": " Removes unused variables in local scope. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasExternals",
        "snippet": "  public boolean aliasExternals;",
        "begin_line": 333,
        "end_line": 333,
        "comment": " Adds variable aliases for externals to reduce code size "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasableGlobals",
        "snippet": "  String aliasableGlobals;",
        "begin_line": 335,
        "end_line": 335,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.unaliasableGlobals",
        "snippet": "  String unaliasableGlobals;",
        "begin_line": 346,
        "end_line": 346,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.collapseVariableDeclarations",
        "snippet": "  public boolean collapseVariableDeclarations;",
        "begin_line": 357,
        "end_line": 357,
        "comment": " Collapses multiple variable declarations into one "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.groupVariableDeclarations",
        "snippet": "  boolean groupVariableDeclarations;",
        "begin_line": 360,
        "end_line": 360,
        "comment": " Group multiple variable declarations into one "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.collapseAnonymousFunctions",
        "snippet": "  public boolean collapseAnonymousFunctions;",
        "begin_line": 366,
        "end_line": 366,
        "comment": "\n   * Collapses anonymous function declarations into named function\n   * declarations\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasableStrings",
        "snippet": "  public Set<String> aliasableStrings;",
        "begin_line": 373,
        "end_line": 373,
        "comment": "\n   * If set to a non-empty set, those strings literals will be aliased to a\n   * single global instance per string, to avoid creating more objects than\n   * necessary.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasStringsBlacklist",
        "snippet": "  public String aliasStringsBlacklist;",
        "begin_line": 380,
        "end_line": 380,
        "comment": "\n   * A blacklist in the form of a regular expression to block strings that\n   * contains certain words from being aliased.\n   * If the value is the empty string, no words are blacklisted.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasAllStrings",
        "snippet": "  public boolean aliasAllStrings;",
        "begin_line": 387,
        "end_line": 387,
        "comment": "\n   * Aliases all string literals to global instances, to avoid creating more\n   * objects than necessary (if true, overrides any set of strings passed in\n   * to aliasableStrings)\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.outputJsStringUsage",
        "snippet": "  boolean outputJsStringUsage;",
        "begin_line": 390,
        "end_line": 390,
        "comment": " Print string usage as part of the compilation log. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.convertToDottedProperties",
        "snippet": "  public boolean convertToDottedProperties;",
        "begin_line": 393,
        "end_line": 393,
        "comment": " Converts quoted property accesses to dot syntax (a['b'] -> a.b) "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.rewriteFunctionExpressions",
        "snippet": "  public boolean rewriteFunctionExpressions;",
        "begin_line": 396,
        "end_line": 396,
        "comment": " Reduces the size of common function expressions. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.optimizeParameters",
        "snippet": "  public boolean optimizeParameters;",
        "begin_line": 401,
        "end_line": 401,
        "comment": "\n   * Remove unused and constant parameters.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.optimizeReturns",
        "snippet": "  public boolean optimizeReturns;",
        "begin_line": 406,
        "end_line": 406,
        "comment": "\n   * Remove unused return values.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.optimizeCalls",
        "snippet": "  public boolean optimizeCalls;",
        "begin_line": 411,
        "end_line": 411,
        "comment": "\n   * Remove unused parameters from call sites.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.optimizeArgumentsArray",
        "snippet": "  public boolean optimizeArgumentsArray;",
        "begin_line": 416,
        "end_line": 416,
        "comment": "\n   * Provide formal names for elements of arguments array.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.chainCalls",
        "snippet": "  boolean chainCalls;",
        "begin_line": 419,
        "end_line": 419,
        "comment": " Chains calls to functions that return this. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.variableRenaming",
        "snippet": "  public VariableRenamingPolicy variableRenaming;",
        "begin_line": 426,
        "end_line": 426,
        "comment": " Controls which variables get renamed. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.propertyRenaming",
        "snippet": "  public PropertyRenamingPolicy propertyRenaming;",
        "begin_line": 429,
        "end_line": 429,
        "comment": " Controls which properties get renamed. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.propertyAffinity",
        "snippet": "  boolean propertyAffinity;",
        "begin_line": 432,
        "end_line": 432,
        "comment": " Should we use affinity information when generating property names. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.labelRenaming",
        "snippet": "  public boolean labelRenaming;",
        "begin_line": 435,
        "end_line": 435,
        "comment": " Controls label renaming. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.reserveRawExports",
        "snippet": "  public boolean reserveRawExports;",
        "begin_line": 438,
        "end_line": 438,
        "comment": " Reserve property names on the global this object. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.shadowVariables",
        "snippet": "  boolean shadowVariables;",
        "begin_line": 441,
        "end_line": 441,
        "comment": " Should shadow variable names in outer scope. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.generatePseudoNames",
        "snippet": "  public boolean generatePseudoNames;",
        "begin_line": 446,
        "end_line": 446,
        "comment": "\n   * Generate pseudo names for variables and properties for debugging purposes.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.renamePrefix",
        "snippet": "  public String renamePrefix;",
        "begin_line": 449,
        "end_line": 449,
        "comment": " Specifies a prefix for all globals "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.renamePrefixNamespace",
        "snippet": "  public String renamePrefixNamespace;",
        "begin_line": 455,
        "end_line": 455,
        "comment": "\n   * Specifies the name of an object that will be used to store all non-extern\n   * globals.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasKeywords",
        "snippet": "  public boolean aliasKeywords;",
        "begin_line": 458,
        "end_line": 458,
        "comment": " Aliases true, false, and null to variables with shorter names. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.collapseProperties",
        "snippet": "  public boolean collapseProperties;",
        "begin_line": 461,
        "end_line": 461,
        "comment": " Flattens multi-level property names (e.g. a$b = x) "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.collapseObjectLiterals",
        "snippet": "  boolean collapseObjectLiterals;",
        "begin_line": 464,
        "end_line": 464,
        "comment": " Split object literals into individual variables when possible. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.collapsePropertiesOnExternTypes",
        "snippet": "  boolean collapsePropertiesOnExternTypes;",
        "begin_line": 471,
        "end_line": 471,
        "comment": " Flattens multi-level property names on extern types (e.g. String$f = x) "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.devirtualizePrototypeMethods",
        "snippet": "  public boolean devirtualizePrototypeMethods;",
        "begin_line": 477,
        "end_line": 477,
        "comment": "\n   * Devirtualize prototype method by rewriting them to be static calls that\n   * take the this pointer as their first argument\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.computeFunctionSideEffects",
        "snippet": "  public boolean computeFunctionSideEffects;",
        "begin_line": 483,
        "end_line": 483,
        "comment": "\n   * Use @nosideeffects annotations, function bodies and name graph\n   * to determine if calls have side effects.  Requires --check_types.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.debugFunctionSideEffectsPath",
        "snippet": "  String debugFunctionSideEffectsPath;",
        "begin_line": 488,
        "end_line": 488,
        "comment": "\n   * Where to save debug report for compute function side effects.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.disambiguateProperties",
        "snippet": "  public boolean disambiguateProperties;",
        "begin_line": 494,
        "end_line": 494,
        "comment": "\n   * Rename properties to disambiguate between unrelated fields based on\n   * type information.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.ambiguateProperties",
        "snippet": "  public boolean ambiguateProperties;",
        "begin_line": 497,
        "end_line": 497,
        "comment": " Rename unrelated properties to the same name to reduce code size. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.anonymousFunctionNaming",
        "snippet": "  public AnonymousFunctionNamingPolicy anonymousFunctionNaming;",
        "begin_line": 500,
        "end_line": 500,
        "comment": " Give anonymous functions names for easier debugging "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inputAnonymousFunctionNamingMap",
        "snippet": "  VariableMap inputAnonymousFunctionNamingMap;",
        "begin_line": 503,
        "end_line": 503,
        "comment": " Input anonymous function renaming map. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inputVariableMap",
        "snippet": "  VariableMap inputVariableMap;",
        "begin_line": 506,
        "end_line": 506,
        "comment": " Input variable renaming map. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inputPropertyMap",
        "snippet": "  VariableMap inputPropertyMap;",
        "begin_line": 509,
        "end_line": 509,
        "comment": " Input property renaming map. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.exportTestFunctions",
        "snippet": "  public boolean exportTestFunctions;",
        "begin_line": 512,
        "end_line": 512,
        "comment": " Whether to export test functions. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.specializeInitialModule",
        "snippet": "  boolean specializeInitialModule;",
        "begin_line": 514,
        "end_line": 514,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.replaceMessagesWithChromeI18n",
        "snippet": "  boolean replaceMessagesWithChromeI18n;",
        "begin_line": 529,
        "end_line": 529,
        "comment": "\n   * Replace UI strings with chrome.i18n.getMessage calls.\n   * Used by Chrome extensions/apps.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.tcProjectId",
        "snippet": "  String tcProjectId;",
        "begin_line": 530,
        "end_line": 530,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.runtimeTypeCheck",
        "snippet": "  boolean runtimeTypeCheck;",
        "begin_line": 547,
        "end_line": 547,
        "comment": " Inserts run-time type assertions for debugging. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.runtimeTypeCheckLogFunction",
        "snippet": "  String runtimeTypeCheckLogFunction;",
        "begin_line": 554,
        "end_line": 554,
        "comment": "\n   * A JS function to be used for logging run-time type assertion\n   * failures. It will be passed the warning as a string and the\n   * faulty expression as arguments.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.codingConvention",
        "snippet": "  private CodingConvention codingConvention;",
        "begin_line": 557,
        "end_line": 557,
        "comment": " A CodingConvention to use during the compile. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.ignoreCajaProperties",
        "snippet": "  boolean ignoreCajaProperties;",
        "begin_line": 559,
        "end_line": 559,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.syntheticBlockStartMarker",
        "snippet": "  public String syntheticBlockStartMarker;",
        "begin_line": 566,
        "end_line": 566,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.syntheticBlockEndMarker",
        "snippet": "  public String syntheticBlockEndMarker;",
        "begin_line": 568,
        "end_line": 568,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.locale",
        "snippet": "  public String locale;",
        "begin_line": 571,
        "end_line": 571,
        "comment": " Compiling locale "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.markAsCompiled",
        "snippet": "  public boolean markAsCompiled;",
        "begin_line": 574,
        "end_line": 574,
        "comment": " Sets the special \"COMPILED\" value to true "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeTryCatchFinally",
        "snippet": "  public boolean removeTryCatchFinally;",
        "begin_line": 577,
        "end_line": 577,
        "comment": " Removes try...catch...finally blocks for easier debugging "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.closurePass",
        "snippet": "  public boolean closurePass;",
        "begin_line": 580,
        "end_line": 580,
        "comment": " Processes goog.provide() and goog.require() calls "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.jqueryPass",
        "snippet": "  public boolean jqueryPass;",
        "begin_line": 583,
        "end_line": 583,
        "comment": " Processes jQuery aliases "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeAbstractMethods",
        "snippet": "  boolean removeAbstractMethods;",
        "begin_line": 586,
        "end_line": 586,
        "comment": " Remove goog.abstractMethod assignments. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeClosureAsserts",
        "snippet": "  boolean removeClosureAsserts;",
        "begin_line": 589,
        "end_line": 589,
        "comment": " Remove goog.asserts calls. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.gatherCssNames",
        "snippet": "  public boolean gatherCssNames;",
        "begin_line": 592,
        "end_line": 592,
        "comment": " Gather CSS names (requires closurePass) "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.stripTypes",
        "snippet": "  public Set<String> stripTypes;",
        "begin_line": 595,
        "end_line": 595,
        "comment": " Names of types to strip "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.stripNameSuffixes",
        "snippet": "  public Set<String> stripNameSuffixes;",
        "begin_line": 598,
        "end_line": 598,
        "comment": " Name suffixes that determine which variables and properties to strip "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.stripNamePrefixes",
        "snippet": "  public Set<String> stripNamePrefixes;",
        "begin_line": 601,
        "end_line": 601,
        "comment": " Name prefixes that determine which variables and properties to strip "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.stripTypePrefixes",
        "snippet": "  public Set<String> stripTypePrefixes;",
        "begin_line": 604,
        "end_line": 604,
        "comment": " Qualified type name prefixes that determine which types to strip "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.customPasses",
        "snippet": "  public transient\n      Multimap<CustomPassExecutionTime, CompilerPass> customPasses;",
        "begin_line": 607,
        "end_line": 608,
        "comment": " Custom passes "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.markNoSideEffectCalls",
        "snippet": "  public boolean markNoSideEffectCalls;",
        "begin_line": 611,
        "end_line": 611,
        "comment": " Mark no side effect calls "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.defineReplacements",
        "snippet": "  private Map<String, Object> defineReplacements;",
        "begin_line": 614,
        "end_line": 614,
        "comment": " Replacements for @defines. Will be Boolean, Numbers, or Strings "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.tweakProcessing",
        "snippet": "  private TweakProcessing tweakProcessing;",
        "begin_line": 617,
        "end_line": 617,
        "comment": " What kind of processing to do for goog.tweak functions. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.tweakReplacements",
        "snippet": "  private Map<String, Object> tweakReplacements;",
        "begin_line": 620,
        "end_line": 620,
        "comment": " Replacements for tweaks. Will be Boolean, Numbers, or Strings "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.moveFunctionDeclarations",
        "snippet": "  public boolean moveFunctionDeclarations;",
        "begin_line": 623,
        "end_line": 623,
        "comment": " Move top-level function declarations to the top "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.instrumentationTemplate",
        "snippet": "  public String instrumentationTemplate;",
        "begin_line": 626,
        "end_line": 626,
        "comment": " Instrumentation template to use with #recordFunctionInformation "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.appNameStr",
        "snippet": "  String appNameStr;",
        "begin_line": 628,
        "end_line": 628,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.recordFunctionInformation",
        "snippet": "  public boolean recordFunctionInformation;",
        "begin_line": 639,
        "end_line": 639,
        "comment": " Record function information "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.generateExports",
        "snippet": "  public boolean generateExports;",
        "begin_line": 641,
        "end_line": 641,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.cssRenamingMap",
        "snippet": "  public CssRenamingMap cssRenamingMap;",
        "begin_line": 644,
        "end_line": 644,
        "comment": " Map used in the renaming of CSS class names. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.cssRenamingWhitelist",
        "snippet": "  Set<String> cssRenamingWhitelist;",
        "begin_line": 647,
        "end_line": 647,
        "comment": " Whitelist used in the renaming of CSS class names. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.processObjectPropertyString",
        "snippet": "  boolean processObjectPropertyString;",
        "begin_line": 650,
        "end_line": 650,
        "comment": " Process instances of goog.testing.ObjectPropertyString. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.replaceIdGenerators",
        "snippet": "  boolean replaceIdGenerators = true;  // true by default for legacy reasons.",
        "begin_line": 653,
        "end_line": 653,
        "comment": " true by default for legacy reasons."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.idGenerators",
        "snippet": "  Set<String> idGenerators;",
        "begin_line": 656,
        "end_line": 656,
        "comment": " Id generators to replace. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.idGeneratorsMapSerialized",
        "snippet": "  String idGeneratorsMapSerialized;",
        "begin_line": 663,
        "end_line": 663,
        "comment": "\n   * A previous map of ids (serialized to a string by a previous compile).\n   * This will be used as a hint during the ReplaceIdGenerators pass, which\n   * will attempt to reuse the same ids.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.replaceStringsFunctionDescriptions",
        "snippet": "  List<String> replaceStringsFunctionDescriptions;",
        "begin_line": 666,
        "end_line": 666,
        "comment": " Configuration strings "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.replaceStringsPlaceholderToken",
        "snippet": "  String replaceStringsPlaceholderToken;",
        "begin_line": 668,
        "end_line": 668,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.replaceStringsReservedStrings",
        "snippet": "  Set<String> replaceStringsReservedStrings;",
        "begin_line": 670,
        "end_line": 670,
        "comment": " A list of strings that should not be used as replacements"
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.replaceStringsInputMap",
        "snippet": "  VariableMap replaceStringsInputMap;",
        "begin_line": 672,
        "end_line": 672,
        "comment": " A previous map of replacements to strings."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.propertyInvalidationErrors",
        "snippet": "  Map<String, CheckLevel> propertyInvalidationErrors;",
        "begin_line": 675,
        "end_line": 675,
        "comment": " List of properties that we report invalidation errors for. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.transformAMDToCJSModules",
        "snippet": "  boolean transformAMDToCJSModules = false;",
        "begin_line": 678,
        "end_line": 678,
        "comment": " Transform AMD to CommonJS modules. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.processCommonJSModules",
        "snippet": "  boolean processCommonJSModules = false;",
        "begin_line": 681,
        "end_line": 681,
        "comment": " Rewrite CommonJS modules so that they can be concatenated together. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.commonJSModulePathPrefix",
        "snippet": "  String commonJSModulePathPrefix =\n      ProcessCommonJSModules.DEFAULT_FILENAME_PREFIX;",
        "begin_line": 684,
        "end_line": 685,
        "comment": " CommonJS module prefix. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.prettyPrint",
        "snippet": "  public boolean prettyPrint;",
        "begin_line": 693,
        "end_line": 693,
        "comment": " Output in pretty indented format "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.lineBreak",
        "snippet": "  public boolean lineBreak;",
        "begin_line": 696,
        "end_line": 696,
        "comment": " Line break the output a bit more aggressively "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.preferLineBreakAtEndOfFile",
        "snippet": "  public boolean preferLineBreakAtEndOfFile;",
        "begin_line": 699,
        "end_line": 699,
        "comment": " Prefer line breaks at end of file "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.printInputDelimiter",
        "snippet": "  public boolean printInputDelimiter;",
        "begin_line": 702,
        "end_line": 702,
        "comment": " Prints a separator comment before each JS script "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inputDelimiter",
        "snippet": "  public String inputDelimiter = \"// Input %num%\";",
        "begin_line": 705,
        "end_line": 705,
        "comment": " The string to use as the separator for printInputDelimiter "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.preferSingleQuotes",
        "snippet": "  boolean preferSingleQuotes;",
        "begin_line": 707,
        "end_line": 707,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.trustedStrings",
        "snippet": "  boolean trustedStrings;",
        "begin_line": 718,
        "end_line": 718,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.reportPath",
        "snippet": "  String reportPath;",
        "begin_line": 730,
        "end_line": 730,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.tracer",
        "snippet": "  TracerMode tracer;",
        "begin_line": 737,
        "end_line": 737,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.colorizeErrorOutput",
        "snippet": "  private boolean colorizeErrorOutput;",
        "begin_line": 747,
        "end_line": 747,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.errorFormat",
        "snippet": "  public ErrorFormat errorFormat;",
        "begin_line": 749,
        "end_line": 749,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.warningsGuard",
        "snippet": "  private ComposeWarningsGuard warningsGuard = new ComposeWarningsGuard();",
        "begin_line": 751,
        "end_line": 751,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.summaryDetailLevel",
        "snippet": "  int summaryDetailLevel = 1;",
        "begin_line": 753,
        "end_line": 753,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.lineLengthThreshold",
        "snippet": "  int lineLengthThreshold = CodePrinter.DEFAULT_LINE_LENGTH_THRESHOLD;",
        "begin_line": 755,
        "end_line": 755,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.externExports",
        "snippet": "  private boolean externExports;",
        "begin_line": 765,
        "end_line": 765,
        "comment": "\n   * Whether the exports should be made available via {@link Result} after\n   * compilation. This is implicitly true if {@link #externExportsPath} is set.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.externExportsPath",
        "snippet": "  String externExportsPath;",
        "begin_line": 768,
        "end_line": 768,
        "comment": " The output path for the created externs file. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.nameReferenceReportPath",
        "snippet": "  String nameReferenceReportPath;",
        "begin_line": 770,
        "end_line": 770,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.nameReferenceGraphPath",
        "snippet": "  String nameReferenceGraphPath;",
        "begin_line": 777,
        "end_line": 777,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.sourceMapOutputPath",
        "snippet": "  public String sourceMapOutputPath;",
        "begin_line": 789,
        "end_line": 789,
        "comment": " The output path for the source map. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.sourceMapDetailLevel",
        "snippet": "  public SourceMap.DetailLevel sourceMapDetailLevel =\n      SourceMap.DetailLevel.SYMBOLS;",
        "begin_line": 792,
        "end_line": 793,
        "comment": " The detail level for the generated source map. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.sourceMapFormat",
        "snippet": "  public SourceMap.Format sourceMapFormat =\n      SourceMap.Format.DEFAULT;",
        "begin_line": 796,
        "end_line": 797,
        "comment": " The source map file format "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.sourceMapLocationMappings",
        "snippet": "  public List<SourceMap.LocationMapping> sourceMapLocationMappings =\n      Collections.emptyList();",
        "begin_line": 799,
        "end_line": 800,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.outputCharset",
        "snippet": "  String outputCharset;",
        "begin_line": 806,
        "end_line": 806,
        "comment": "\n   * Charset to use when generating code.  If null, then output ASCII.\n   * This needs to be a string because CompilerOptions is serializable.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.looseTypes",
        "snippet": "  boolean looseTypes;",
        "begin_line": 811,
        "end_line": 811,
        "comment": "\n   * Whether the named objects types included 'undefined' by default.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.protectHiddenSideEffects",
        "snippet": "  boolean protectHiddenSideEffects;",
        "begin_line": 816,
        "end_line": 816,
        "comment": "\n   * When set, assume that apparently side-effect free code is meaningful.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasHandler",
        "snippet": "  private transient AliasTransformationHandler aliasHandler;",
        "begin_line": 828,
        "end_line": 828,
        "comment": "\n   * Data holder Alias Transformation information accumulated during a compile.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.errorHandler",
        "snippet": "  transient ErrorHandler errorHandler;",
        "begin_line": 833,
        "end_line": 833,
        "comment": "\n   * Handler for compiler warnings and errors.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER",
        "snippet": "  static final AliasTransformationHandler NULL_ALIAS_TRANSFORMATION_HANDLER =\n      new NullAliasTransformationHandler();",
        "begin_line": 2162,
        "end_line": 2163,
        "comment": "\n   * A Null implementation of the CodeChanges interface which performs all\n   * operations as a No-Op\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.NullAliasTransformationHandler",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.NullAliasTransformationHandler.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 0L;",
        "begin_line": 2167,
        "end_line": 2167,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NullAliasTransformationHandler",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.NullAliasTransformationHandler.NULL_ALIAS_TRANSFORMATION",
        "snippet": "    private static final AliasTransformation NULL_ALIAS_TRANSFORMATION =\n        new NullAliasTransformation();",
        "begin_line": 2169,
        "end_line": 2170,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NullAliasTransformation",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.NullAliasTransformation.serialVersionUID",
        "snippet": "      private static final long serialVersionUID = 0L;",
        "begin_line": 2181,
        "end_line": 2181,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "signature": "com.google.javascript.jscomp.CodeGenerator.LT_ESCAPED",
        "snippet": "  private static final String LT_ESCAPED = \"\\\\x3c\";",
        "begin_line": 37,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "signature": "com.google.javascript.jscomp.CodeGenerator.GT_ESCAPED",
        "snippet": "  private static final String GT_ESCAPED = \"\\\\x3e\";",
        "begin_line": 38,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "signature": "com.google.javascript.jscomp.CodeGenerator.ESCAPED_JS_STRINGS",
        "snippet": "  private final Map<String, String> ESCAPED_JS_STRINGS = Maps.newHashMap();",
        "begin_line": 41,
        "end_line": 41,
        "comment": " A memoizer for formatting strings as JS strings."
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "signature": "com.google.javascript.jscomp.CodeGenerator.HEX_CHARS",
        "snippet": "  private static final char[] HEX_CHARS\n      = { '0', '1', '2', '3', '4', '5', '6', '7',\n          '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };",
        "begin_line": 43,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "signature": "com.google.javascript.jscomp.CodeGenerator.cc",
        "snippet": "  private final CodeConsumer cc;",
        "begin_line": 47,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "signature": "com.google.javascript.jscomp.CodeGenerator.outputCharsetEncoder",
        "snippet": "  private final CharsetEncoder outputCharsetEncoder;",
        "begin_line": 49,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "signature": "com.google.javascript.jscomp.CodeGenerator.preferSingleQuotes",
        "snippet": "  private final boolean preferSingleQuotes;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "signature": "com.google.javascript.jscomp.CodeGenerator.trustedStrings",
        "snippet": "  private final boolean trustedStrings;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ChainCalls",
        "src_path": "src/com/google/javascript/jscomp/ChainCalls.java",
        "signature": "com.google.javascript.jscomp.ChainCalls.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ChainCalls",
        "src_path": "src/com/google/javascript/jscomp/ChainCalls.java",
        "signature": "com.google.javascript.jscomp.ChainCalls.badFunctionNodes",
        "snippet": "  private final Set<Node> badFunctionNodes = Sets.newHashSet();",
        "begin_line": 37,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ChainCalls",
        "src_path": "src/com/google/javascript/jscomp/ChainCalls.java",
        "signature": "com.google.javascript.jscomp.ChainCalls.goodFunctionNodes",
        "snippet": "  private final Set<Node> goodFunctionNodes = Sets.newHashSet();",
        "begin_line": 38,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ChainCalls",
        "src_path": "src/com/google/javascript/jscomp/ChainCalls.java",
        "signature": "com.google.javascript.jscomp.ChainCalls.callSites",
        "snippet": "  private final List<CallSite> callSites = Lists.newArrayList();",
        "begin_line": 39,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ChainCalls",
        "src_path": "src/com/google/javascript/jscomp/ChainCalls.java",
        "signature": "com.google.javascript.jscomp.ChainCalls.defFinder",
        "snippet": "  private SimpleDefinitionFinder defFinder;",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ChainCalls",
        "src_path": "src/com/google/javascript/jscomp/ChainCalls.java",
        "signature": "com.google.javascript.jscomp.ChainCalls.gatherFunctions",
        "snippet": "  private GatherFunctions gatherFunctions = new GatherFunctions();",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CallSite",
        "src_path": "src/com/google/javascript/jscomp/ChainCalls.java",
        "signature": "com.google.javascript.jscomp.CallSite.parent",
        "snippet": "    final Node parent;",
        "begin_line": 177,
        "end_line": 177,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CallSite",
        "src_path": "src/com/google/javascript/jscomp/ChainCalls.java",
        "signature": "com.google.javascript.jscomp.CallSite.n",
        "snippet": "    final Node n;",
        "begin_line": 178,
        "end_line": 178,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CallSite",
        "src_path": "src/com/google/javascript/jscomp/ChainCalls.java",
        "signature": "com.google.javascript.jscomp.CallSite.callNode",
        "snippet": "    final Node callNode;",
        "begin_line": 179,
        "end_line": 179,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CallSite",
        "src_path": "src/com/google/javascript/jscomp/ChainCalls.java",
        "signature": "com.google.javascript.jscomp.CallSite.nextGetPropNode",
        "snippet": "    final Node nextGetPropNode;",
        "begin_line": 180,
        "end_line": 180,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CallSite",
        "src_path": "src/com/google/javascript/jscomp/ChainCalls.java",
        "signature": "com.google.javascript.jscomp.CallSite.nextGetPropFirstChildNode",
        "snippet": "    final Node nextGetPropFirstChildNode;",
        "begin_line": 181,
        "end_line": 181,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCode",
        "src_path": "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCode.UNREACHABLE_CODE",
        "snippet": "  static final DiagnosticType UNREACHABLE_CODE = DiagnosticType.error(\n      \"JSC_UNREACHABLE_CODE\", \"unreachable code\");",
        "begin_line": 35,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCode",
        "src_path": "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCode.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 38,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCode",
        "src_path": "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCode.level",
        "snippet": "  private final CheckLevel level;",
        "begin_line": 39,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AmbiguateProperties",
        "src_path": "src/com/google/javascript/jscomp/AmbiguateProperties.java",
        "signature": "com.google.javascript.jscomp.AmbiguateProperties.logger",
        "snippet": "  private static final Logger logger = Logger.getLogger(\n      AmbiguateProperties.class.getName());",
        "begin_line": 77,
        "end_line": 78,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AmbiguateProperties",
        "src_path": "src/com/google/javascript/jscomp/AmbiguateProperties.java",
        "signature": "com.google.javascript.jscomp.AmbiguateProperties.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 80,
        "end_line": 80,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AmbiguateProperties",
        "src_path": "src/com/google/javascript/jscomp/AmbiguateProperties.java",
        "signature": "com.google.javascript.jscomp.AmbiguateProperties.stringNodesToRename",
        "snippet": "  private final List<Node> stringNodesToRename = Lists.newArrayList();",
        "begin_line": 82,
        "end_line": 82,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AmbiguateProperties",
        "src_path": "src/com/google/javascript/jscomp/AmbiguateProperties.java",
        "signature": "com.google.javascript.jscomp.AmbiguateProperties.reservedCharacters",
        "snippet": "  private final char[] reservedCharacters;",
        "begin_line": 83,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AmbiguateProperties",
        "src_path": "src/com/google/javascript/jscomp/AmbiguateProperties.java",
        "signature": "com.google.javascript.jscomp.AmbiguateProperties.propertyMap",
        "snippet": "  private final Map<String, Property> propertyMap = Maps.newHashMap();",
        "begin_line": 86,
        "end_line": 86,
        "comment": " Map from property name to Property object "
    },
    {
        "class_name": "com.google.javascript.jscomp.AmbiguateProperties",
        "src_path": "src/com/google/javascript/jscomp/AmbiguateProperties.java",
        "signature": "com.google.javascript.jscomp.AmbiguateProperties.externedNames",
        "snippet": "  private final Set<String> externedNames = Sets.newHashSet();",
        "begin_line": 89,
        "end_line": 89,
        "comment": " Property names that don't get renamed "
    },
    {
        "class_name": "com.google.javascript.jscomp.AmbiguateProperties",
        "src_path": "src/com/google/javascript/jscomp/AmbiguateProperties.java",
        "signature": "com.google.javascript.jscomp.AmbiguateProperties.quotedNames",
        "snippet": "  private final Set<String> quotedNames = Sets.newHashSet();",
        "begin_line": 92,
        "end_line": 92,
        "comment": " Names to which properties shouldn't be renamed, to avoid name conflicts "
    },
    {
        "class_name": "com.google.javascript.jscomp.AmbiguateProperties",
        "src_path": "src/com/google/javascript/jscomp/AmbiguateProperties.java",
        "signature": "com.google.javascript.jscomp.AmbiguateProperties.renamingMap",
        "snippet": "  private final Map<String, String> renamingMap = Maps.newHashMap();",
        "begin_line": 95,
        "end_line": 95,
        "comment": " Map from original property name to new name. "
    },
    {
        "class_name": "com.google.javascript.jscomp.AmbiguateProperties",
        "src_path": "src/com/google/javascript/jscomp/AmbiguateProperties.java",
        "signature": "com.google.javascript.jscomp.AmbiguateProperties.FREQUENCY_COMPARATOR",
        "snippet": "  private static final Comparator<Property> FREQUENCY_COMPARATOR =\n      new Comparator<Property>() {\n        @Override\n        public int compare(Property p1, Property p2) {\n          if (p1.numOccurrences != p2.numOccurrences) {\n            return p2.numOccurrences - p1.numOccurrences;\n          }\n          return p1.oldName.compareTo(p2.oldName);\n        }\n      };",
        "begin_line": 101,
        "end_line": 110,
        "comment": "\n   * Sorts Property objects by their count, breaking ties alphabetically to\n   * ensure a deterministic total ordering.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.AmbiguateProperties",
        "src_path": "src/com/google/javascript/jscomp/AmbiguateProperties.java",
        "signature": "com.google.javascript.jscomp.AmbiguateProperties.intForType",
        "snippet": "  private BiMap<JSType, Integer> intForType = HashBiMap.create();",
        "begin_line": 113,
        "end_line": 113,
        "comment": " A map from JSType to a unique representative Integer. "
    },
    {
        "class_name": "com.google.javascript.jscomp.AmbiguateProperties",
        "src_path": "src/com/google/javascript/jscomp/AmbiguateProperties.java",
        "signature": "com.google.javascript.jscomp.AmbiguateProperties.relatedBitsets",
        "snippet": "  private Map<JSType, JSTypeBitSet> relatedBitsets = Maps.newHashMap();",
        "begin_line": 119,
        "end_line": 119,
        "comment": "\n   * A map from JSType to JSTypeBitSet representing the types related\n   * to the type.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.AmbiguateProperties",
        "src_path": "src/com/google/javascript/jscomp/AmbiguateProperties.java",
        "signature": "com.google.javascript.jscomp.AmbiguateProperties.invalidatingTypes",
        "snippet": "  private final Set<JSType> invalidatingTypes;",
        "begin_line": 122,
        "end_line": 122,
        "comment": " A set of types that invalidate properties from ambiguation. "
    },
    {
        "class_name": "com.google.javascript.jscomp.AmbiguateProperties",
        "src_path": "src/com/google/javascript/jscomp/AmbiguateProperties.java",
        "signature": "com.google.javascript.jscomp.AmbiguateProperties.SKIP_PREFIX",
        "snippet": "  static final String SKIP_PREFIX = \"JSAbstractCompiler\";",
        "begin_line": 128,
        "end_line": 128,
        "comment": "\n   * Prefix of properties to skip renaming.  These should be renamed in the\n   * RenameProperties pass.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.PropertyGraph",
        "src_path": "src/com/google/javascript/jscomp/AmbiguateProperties.java",
        "signature": "com.google.javascript.jscomp.PropertyGraph.nodes",
        "snippet": "    protected final Map<Property, PropertyGraphNode> nodes = Maps.newHashMap();",
        "begin_line": 342,
        "end_line": 342,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PropertySubGraph",
        "src_path": "src/com/google/javascript/jscomp/AmbiguateProperties.java",
        "signature": "com.google.javascript.jscomp.PropertySubGraph.relatedTypes",
        "snippet": "    JSTypeBitSet relatedTypes = new JSTypeBitSet(intForType.size());",
        "begin_line": 384,
        "end_line": 384,
        "comment": " Types related to properties referenced in this subgraph. "
    },
    {
        "class_name": "com.google.javascript.jscomp.PropertyGraphNode",
        "src_path": "src/com/google/javascript/jscomp/AmbiguateProperties.java",
        "signature": "com.google.javascript.jscomp.PropertyGraphNode.property",
        "snippet": "    Property property;",
        "begin_line": 407,
        "end_line": 407,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PropertyGraphNode",
        "src_path": "src/com/google/javascript/jscomp/AmbiguateProperties.java",
        "signature": "com.google.javascript.jscomp.PropertyGraphNode.annotation",
        "snippet": "    protected Annotation annotation;",
        "begin_line": 408,
        "end_line": 408,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Property",
        "src_path": "src/com/google/javascript/jscomp/AmbiguateProperties.java",
        "signature": "com.google.javascript.jscomp.Property.oldName",
        "snippet": "    final String oldName;",
        "begin_line": 566,
        "end_line": 566,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Property",
        "src_path": "src/com/google/javascript/jscomp/AmbiguateProperties.java",
        "signature": "com.google.javascript.jscomp.Property.newName",
        "snippet": "    String newName;",
        "begin_line": 567,
        "end_line": 567,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Property",
        "src_path": "src/com/google/javascript/jscomp/AmbiguateProperties.java",
        "signature": "com.google.javascript.jscomp.Property.numOccurrences",
        "snippet": "    int numOccurrences;",
        "begin_line": 568,
        "end_line": 568,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Property",
        "src_path": "src/com/google/javascript/jscomp/AmbiguateProperties.java",
        "signature": "com.google.javascript.jscomp.Property.skipAmbiguating",
        "snippet": "    boolean skipAmbiguating;",
        "begin_line": 569,
        "end_line": 569,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Property",
        "src_path": "src/com/google/javascript/jscomp/AmbiguateProperties.java",
        "signature": "com.google.javascript.jscomp.Property.relatedTypes",
        "snippet": "    JSTypeBitSet relatedTypes = new JSTypeBitSet(intForType.size());",
        "begin_line": 570,
        "end_line": 570,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JSTypeBitSet",
        "src_path": "src/com/google/javascript/jscomp/AmbiguateProperties.java",
        "signature": "com.google.javascript.jscomp.JSTypeBitSet.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 616,
        "end_line": 616,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 47,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.globalNameNodes",
        "snippet": "  private final ArrayList<Node> globalNameNodes = new ArrayList<Node>();",
        "begin_line": 50,
        "end_line": 50,
        "comment": " List of global NAME nodes "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.localNameNodes",
        "snippet": "  private final ArrayList<Node> localNameNodes = new ArrayList<Node>();",
        "begin_line": 53,
        "end_line": 53,
        "comment": " List of local NAME nodes "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.pseudoNameMap",
        "snippet": "  private final Map<Node, String> pseudoNameMap;",
        "begin_line": 59,
        "end_line": 59,
        "comment": "\n   * Maps a name node to its pseudo name, null if we are not generating so\n   * there will not no overhead unless we are debugging.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.externNames",
        "snippet": "  private final Set<String> externNames = new HashSet<String>();",
        "begin_line": 62,
        "end_line": 62,
        "comment": " Set of extern variable names "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.reservedNames",
        "snippet": "  private final Set<String> reservedNames;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " Set of reserved variable names "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.renameMap",
        "snippet": "  private final Map<String, String> renameMap = new HashMap<String, String>();",
        "begin_line": 68,
        "end_line": 68,
        "comment": " The renaming map "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.prevUsedRenameMap",
        "snippet": "  private final VariableMap prevUsedRenameMap;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " The previously used rename map. "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.prefix",
        "snippet": "  private final String prefix;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " The global name prefix "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.assignmentCount",
        "snippet": "  private int assignmentCount = 0;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " Counter for each assignment "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.assignmentLog",
        "snippet": "  private StringBuilder assignmentLog;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " Logs all name assignments "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.localBleedingFunctions",
        "snippet": "  private Set<Var> localBleedingFunctions = Sets.newHashSet();",
        "begin_line": 84,
        "end_line": 84,
        "comment": " scope on IE but not on other browsers."
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.localBleedingFunctionsPerScope",
        "snippet": "  private ArrayListMultimap<Scope, Var> localBleedingFunctionsPerScope =\n      ArrayListMultimap.create();",
        "begin_line": 85,
        "end_line": 86,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Assignment",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.Assignment.oldName",
        "snippet": "    final String oldName;",
        "begin_line": 89,
        "end_line": 89,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Assignment",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.Assignment.orderOfOccurrence",
        "snippet": "    final int orderOfOccurrence;",
        "begin_line": 90,
        "end_line": 90,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Assignment",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.Assignment.newName",
        "snippet": "    String newName;",
        "begin_line": 91,
        "end_line": 91,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Assignment",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.Assignment.count",
        "snippet": "    int count; // Number of times this is referenced",
        "begin_line": 92,
        "end_line": 92,
        "comment": " Number of times this is referenced"
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.assignments",
        "snippet": "  private final Map<String, Assignment> assignments =\n      new HashMap<String, Assignment>();",
        "begin_line": 113,
        "end_line": 114,
        "comment": " Maps an old name to a new name assignment "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.localRenamingOnly",
        "snippet": "  private final boolean localRenamingOnly;",
        "begin_line": 117,
        "end_line": 117,
        "comment": " Whether renaming should apply to local variables only. "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.preserveFunctionExpressionNames",
        "snippet": "  private boolean preserveFunctionExpressionNames;",
        "begin_line": 125,
        "end_line": 125,
        "comment": "\n   * Whether function expression names should be preserved. Typically, for\n   * debugging purposes.\n   *\n   * @see NameAnonymousFunctions\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.shouldShadow",
        "snippet": "  private final boolean shouldShadow;",
        "begin_line": 127,
        "end_line": 127,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.reservedCharacters",
        "snippet": "  private final char[] reservedCharacters;",
        "begin_line": 130,
        "end_line": 130,
        "comment": " Characters that shouldn't be used in variable names. "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.LOCAL_VAR_PREFIX",
        "snippet": "  public static final String LOCAL_VAR_PREFIX = \"L \";",
        "begin_line": 134,
        "end_line": 134,
        "comment": " TODO(user): No longer needs to be public when shadowing doesn't use it."
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.ProcessVars.isExternsPass_",
        "snippet": "    private final boolean isExternsPass_;",
        "begin_line": 186,
        "end_line": 186,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.FREQUENCY_COMPARATOR",
        "snippet": "  private static final Comparator<Assignment> FREQUENCY_COMPARATOR =\n      new Comparator<Assignment>() {\n    @Override\n    public int compare(Assignment a1, Assignment a2) {\n      if (a1.count != a2.count) {\n        return a2.count - a1.count;\n      }\n      // Break a tie using the order in which the variable first appears in\n      // the source.\n      return ORDER_OF_OCCURRENCE_COMPARATOR.compare(a1, a2);\n    }\n  };",
        "begin_line": 298,
        "end_line": 309,
        "comment": "\n   * Sorts Assignment objects by their count, breaking ties by their order of\n   * occurrence in the source to ensure a deterministic total ordering.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.ORDER_OF_OCCURRENCE_COMPARATOR",
        "snippet": "  private static final Comparator<Assignment> ORDER_OF_OCCURRENCE_COMPARATOR =\n      new Comparator<Assignment>() {\n        @Override\n        public int compare(Assignment a1, Assignment a2) {\n          return a1.orderOfOccurrence - a2.orderOfOccurrence;\n        }\n      };",
        "begin_line": 315,
        "end_line": 321,
        "comment": "\n   * Sorts Assignment objects by the order the variable name first appears in\n   * the source.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckPathsBetweenNodes",
        "src_path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java",
        "signature": "com.google.javascript.jscomp.CheckPathsBetweenNodes.nodePredicate",
        "snippet": "  private final Predicate<N> nodePredicate;",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckPathsBetweenNodes",
        "src_path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java",
        "signature": "com.google.javascript.jscomp.CheckPathsBetweenNodes.edgePredicate",
        "snippet": "  private final Predicate<DiGraphEdge<N, E>> edgePredicate;",
        "begin_line": 37,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckPathsBetweenNodes",
        "src_path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java",
        "signature": "com.google.javascript.jscomp.CheckPathsBetweenNodes.inclusive",
        "snippet": "  private final boolean inclusive;",
        "begin_line": 38,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckPathsBetweenNodes",
        "src_path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java",
        "signature": "com.google.javascript.jscomp.CheckPathsBetweenNodes.BACK_EDGE",
        "snippet": "  private static final Annotation BACK_EDGE = new Annotation() {};",
        "begin_line": 55,
        "end_line": 55,
        "comment": " A non-tree edge in the DFS that connects a node to one of its ancestors."
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckPathsBetweenNodes",
        "src_path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java",
        "signature": "com.google.javascript.jscomp.CheckPathsBetweenNodes.VISITED_EDGE",
        "snippet": "  private static final Annotation VISITED_EDGE = new Annotation() {};",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckPathsBetweenNodes",
        "src_path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java",
        "signature": "com.google.javascript.jscomp.CheckPathsBetweenNodes.WHITE",
        "snippet": "  private static final Annotation WHITE = null;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " Not yet visited."
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckPathsBetweenNodes",
        "src_path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java",
        "signature": "com.google.javascript.jscomp.CheckPathsBetweenNodes.GRAY",
        "snippet": "  private static final Annotation GRAY = new Annotation() {};",
        "begin_line": 61,
        "end_line": 61,
        "comment": " Being visited."
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckPathsBetweenNodes",
        "src_path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java",
        "signature": "com.google.javascript.jscomp.CheckPathsBetweenNodes.BLACK",
        "snippet": "  private static final Annotation BLACK = new Annotation() {};",
        "begin_line": 63,
        "end_line": 63,
        "comment": " Finished visiting."
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckPathsBetweenNodes",
        "src_path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java",
        "signature": "com.google.javascript.jscomp.CheckPathsBetweenNodes.graph",
        "snippet": "  private final DiGraph<N, E> graph;",
        "begin_line": 65,
        "end_line": 65,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckPathsBetweenNodes",
        "src_path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java",
        "signature": "com.google.javascript.jscomp.CheckPathsBetweenNodes.start",
        "snippet": "  private final DiGraphNode<N, E> start;",
        "begin_line": 66,
        "end_line": 66,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckPathsBetweenNodes",
        "src_path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java",
        "signature": "com.google.javascript.jscomp.CheckPathsBetweenNodes.end",
        "snippet": "  private final DiGraphNode<N, E> end;",
        "begin_line": 67,
        "end_line": 67,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GroupVariableDeclarations",
        "src_path": "src/com/google/javascript/jscomp/GroupVariableDeclarations.java",
        "signature": "com.google.javascript.jscomp.GroupVariableDeclarations.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CreateSyntheticBlocks",
        "src_path": "src/com/google/javascript/jscomp/CreateSyntheticBlocks.java",
        "signature": "com.google.javascript.jscomp.CreateSyntheticBlocks.UNMATCHED_START_MARKER",
        "snippet": "  static final DiagnosticType UNMATCHED_START_MARKER = DiagnosticType.warning(\n      \"JSC_UNMATCHED_START_MARKER\", \"Unmatched {0}\");",
        "begin_line": 35,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CreateSyntheticBlocks",
        "src_path": "src/com/google/javascript/jscomp/CreateSyntheticBlocks.java",
        "signature": "com.google.javascript.jscomp.CreateSyntheticBlocks.UNMATCHED_END_MARKER",
        "snippet": "  static final DiagnosticType UNMATCHED_END_MARKER = DiagnosticType.warning(\n      \"JSC_UNMATCHED_END_MARKER\", \"Unmatched {1} - {0} not in the same block\");",
        "begin_line": 38,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CreateSyntheticBlocks",
        "src_path": "src/com/google/javascript/jscomp/CreateSyntheticBlocks.java",
        "signature": "com.google.javascript.jscomp.CreateSyntheticBlocks.INVALID_MARKER_USAGE",
        "snippet": "  static final DiagnosticType INVALID_MARKER_USAGE = DiagnosticType.warning(\n      \"JSC_INVALID_MARKER_USAGE\", \"Marker {0} can only be used in a simple \"\n           + \"call expression\");",
        "begin_line": 41,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CreateSyntheticBlocks",
        "src_path": "src/com/google/javascript/jscomp/CreateSyntheticBlocks.java",
        "signature": "com.google.javascript.jscomp.CreateSyntheticBlocks.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CreateSyntheticBlocks",
        "src_path": "src/com/google/javascript/jscomp/CreateSyntheticBlocks.java",
        "signature": "com.google.javascript.jscomp.CreateSyntheticBlocks.startMarkerName",
        "snippet": "  private final String startMarkerName;",
        "begin_line": 48,
        "end_line": 48,
        "comment": " Name of the start marker. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CreateSyntheticBlocks",
        "src_path": "src/com/google/javascript/jscomp/CreateSyntheticBlocks.java",
        "signature": "com.google.javascript.jscomp.CreateSyntheticBlocks.endMarkerName",
        "snippet": "  private final String endMarkerName;",
        "begin_line": 51,
        "end_line": 51,
        "comment": " Name of the end marker. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CreateSyntheticBlocks",
        "src_path": "src/com/google/javascript/jscomp/CreateSyntheticBlocks.java",
        "signature": "com.google.javascript.jscomp.CreateSyntheticBlocks.markerStack",
        "snippet": "  private final Deque<Node> markerStack = new ArrayDeque<Node>();",
        "begin_line": 56,
        "end_line": 56,
        "comment": "\n   * Markers can be nested.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CreateSyntheticBlocks",
        "src_path": "src/com/google/javascript/jscomp/CreateSyntheticBlocks.java",
        "signature": "com.google.javascript.jscomp.CreateSyntheticBlocks.validMarkers",
        "snippet": "  private final List<Marker> validMarkers = Lists.newArrayList();",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Marker",
        "src_path": "src/com/google/javascript/jscomp/CreateSyntheticBlocks.java",
        "signature": "com.google.javascript.jscomp.Marker.startMarker",
        "snippet": "    final Node startMarker;",
        "begin_line": 61,
        "end_line": 61,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Marker",
        "src_path": "src/com/google/javascript/jscomp/CreateSyntheticBlocks.java",
        "signature": "com.google.javascript.jscomp.Marker.endMarker",
        "snippet": "    final Node endMarker;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AstChangeProxy",
        "src_path": "src/com/google/javascript/jscomp/AstChangeProxy.java",
        "signature": "com.google.javascript.jscomp.AstChangeProxy.listeners",
        "snippet": "  private final List<ChangeListener> listeners;",
        "begin_line": 46,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.messages",
        "snippet": "  private final SortedSet<ErrorWithLevel> messages =\n      Sets.newTreeSet(new LeveledJSErrorComparator());",
        "begin_line": 38,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.errorCount",
        "snippet": "  private int errorCount = 0;",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.warningCount",
        "snippet": "  private int warningCount = 0;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.typedPercent",
        "snippet": "  private double typedPercent = 0.0;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LeveledJSErrorComparator",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.LeveledJSErrorComparator.P1_LT_P2",
        "snippet": "    private static final int P1_LT_P2 = -1;",
        "begin_line": 125,
        "end_line": 125,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LeveledJSErrorComparator",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.LeveledJSErrorComparator.P1_GT_P2",
        "snippet": "    private static final int P1_GT_P2 = 1;",
        "begin_line": 126,
        "end_line": 126,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ErrorWithLevel",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.ErrorWithLevel.error",
        "snippet": "    final JSError error;",
        "begin_line": 183,
        "end_line": 183,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ErrorWithLevel",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.ErrorWithLevel.level",
        "snippet": "    final CheckLevel level;",
        "begin_line": 184,
        "end_line": 184,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MoveFunctionDeclarations",
        "src_path": "src/com/google/javascript/jscomp/MoveFunctionDeclarations.java",
        "signature": "com.google.javascript.jscomp.MoveFunctionDeclarations.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 48,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MoveFunctionDeclarations",
        "src_path": "src/com/google/javascript/jscomp/MoveFunctionDeclarations.java",
        "signature": "com.google.javascript.jscomp.MoveFunctionDeclarations.functions",
        "snippet": "  private final Map<JSModule, List<Node>> functions;",
        "begin_line": 49,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VariableReferenceCheck",
        "src_path": "src/com/google/javascript/jscomp/VariableReferenceCheck.java",
        "signature": "com.google.javascript.jscomp.VariableReferenceCheck.UNDECLARED_REFERENCE",
        "snippet": "  static final DiagnosticType UNDECLARED_REFERENCE = DiagnosticType.warning(\n      \"JSC_REFERENCE_BEFORE_DECLARE\",\n      \"Variable referenced before declaration: {0}\");",
        "begin_line": 40,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VariableReferenceCheck",
        "src_path": "src/com/google/javascript/jscomp/VariableReferenceCheck.java",
        "signature": "com.google.javascript.jscomp.VariableReferenceCheck.REDECLARED_VARIABLE",
        "snippet": "  static final DiagnosticType REDECLARED_VARIABLE = DiagnosticType.warning(\n      \"JSC_REDECLARED_VARIABLE\",\n      \"Redeclared variable: {0}\");",
        "begin_line": 44,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VariableReferenceCheck",
        "src_path": "src/com/google/javascript/jscomp/VariableReferenceCheck.java",
        "signature": "com.google.javascript.jscomp.VariableReferenceCheck.AMBIGUOUS_FUNCTION_DECL",
        "snippet": "  static final DiagnosticType AMBIGUOUS_FUNCTION_DECL =\n    DiagnosticType.disabled(\"AMBIGUOUS_FUNCTION_DECL\",\n        \"Ambiguous use of a named function: {0}.\");",
        "begin_line": 48,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VariableReferenceCheck",
        "src_path": "src/com/google/javascript/jscomp/VariableReferenceCheck.java",
        "signature": "com.google.javascript.jscomp.VariableReferenceCheck.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VariableReferenceCheck",
        "src_path": "src/com/google/javascript/jscomp/VariableReferenceCheck.java",
        "signature": "com.google.javascript.jscomp.VariableReferenceCheck.checkLevel",
        "snippet": "  private final CheckLevel checkLevel;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VariableReferenceCheck",
        "src_path": "src/com/google/javascript/jscomp/VariableReferenceCheck.java",
        "signature": "com.google.javascript.jscomp.VariableReferenceCheck.blocksWithDeclarations",
        "snippet": "  private final Set<BasicBlock> blocksWithDeclarations = Sets.newHashSet();",
        "begin_line": 57,
        "end_line": 57,
        "comment": " we clear after each method call, because the Set never gets too big."
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.logger",
        "snippet": "  static final Logger logger =\n      Logger.getLogger(Tracer.class.getName());",
        "begin_line": 163,
        "end_line": 164,
        "comment": " package-private for access from unit tests"
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.defaultPrettyPrint",
        "snippet": "  private static volatile boolean defaultPrettyPrint;",
        "begin_line": 170,
        "end_line": 170,
        "comment": "\n   * Whether pretty printing is enabled. This is intended to be set once\n   * at application startup.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.extraTracingStatistics",
        "snippet": "  private static List<TracingStatistic> extraTracingStatistics =\n      new CopyOnWriteArrayList<TracingStatistic>();",
        "begin_line": 176,
        "end_line": 177,
        "comment": " This list is guaranteed to only increase in length.  It contains\n   * a list of additional statistics that the user wants to keep track\n   * of.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.extraTracingValues",
        "snippet": "  private long[] extraTracingValues;",
        "begin_line": 180,
        "end_line": 180,
        "comment": " Values returned by extraTracingStatistics "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.type",
        "snippet": "  private final @Nullable String type;",
        "begin_line": 183,
        "end_line": 183,
        "comment": " The type for grouping traces, may be null "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.comment",
        "snippet": "  private final String comment;",
        "begin_line": 186,
        "end_line": 186,
        "comment": " A comment string for the report "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.startTimeMs",
        "snippet": "  private final long startTimeMs;",
        "begin_line": 189,
        "end_line": 189,
        "comment": " Start time of the trace "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.stopTimeMs",
        "snippet": "  private long stopTimeMs;",
        "begin_line": 192,
        "end_line": 192,
        "comment": " Stop time of the trace, non-final "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.startThread",
        "snippet": "  final Thread startThread;",
        "begin_line": 198,
        "end_line": 198,
        "comment": "\n   * Record our starter thread in order to trap Traces that are started in one\n   * thread and stopped in another\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.MAX_TRACE_SIZE",
        "snippet": "  static final int MAX_TRACE_SIZE = 1000;",
        "begin_line": 207,
        "end_line": 207,
        "comment": "\n   * We limit the number of events in a Trace in order to catch memory\n   * leaks (a thread that keeps logging events and never clears them).\n   * This number is arbitrary and can be increased if necessary (though\n   * if there are more than 1000 events then the Tracer is probably being\n   * misused).\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.clock",
        "snippet": "  static InternalClock clock = new InternalClock() {\n    @Override\n    public long currentTimeMillis() {\n      return System.currentTimeMillis();\n    }\n  };",
        "begin_line": 221,
        "end_line": 226,
        "comment": "\n   * Default clock that calls through to the system clock. Can be overridden\n   * in unit tests.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Stat",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Stat.count",
        "snippet": "    private int count;",
        "begin_line": 541,
        "end_line": 541,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Stat",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Stat.silent",
        "snippet": "    private int silent;",
        "begin_line": 542,
        "end_line": 542,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Stat",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Stat.clockTime",
        "snippet": "    private int clockTime;",
        "begin_line": 543,
        "end_line": 543,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Stat",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Stat.extraInfo",
        "snippet": "    private int[] extraInfo;",
        "begin_line": 544,
        "end_line": 544,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.typeToCountMap",
        "snippet": "  private static @Nullable AtomicTracerStatMap typeToCountMap;",
        "begin_line": 575,
        "end_line": 575,
        "comment": "\n   * This map tracks counts of tracers for each type over all time.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.typeToSilentMap",
        "snippet": "  private static @Nullable AtomicTracerStatMap typeToSilentMap;",
        "begin_line": 580,
        "end_line": 580,
        "comment": "\n   * This map tracks counts of silent tracers for each type over all time.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.typeToTimeMap",
        "snippet": "  private static @Nullable AtomicTracerStatMap typeToTimeMap;",
        "begin_line": 585,
        "end_line": 585,
        "comment": "\n   * This map tracks time (ms) for each type over all time.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.ZERO_STAT",
        "snippet": "  private static final Stat ZERO_STAT = new Stat();",
        "begin_line": 633,
        "end_line": 633,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Event",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Event.isStart",
        "snippet": "    boolean isStart;   // else is_stop",
        "begin_line": 644,
        "end_line": 644,
        "comment": " else is_stop"
    },
    {
        "class_name": "com.google.javascript.jscomp.Event",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Event.tracer",
        "snippet": "    Tracer tracer;",
        "begin_line": 645,
        "end_line": 645,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.defaultSilenceThreshold",
        "snippet": "    int defaultSilenceThreshold; // non-final",
        "begin_line": 705,
        "end_line": 705,
        "comment": " non-final"
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.events",
        "snippet": "    final ArrayList<Event> events = new ArrayList<Event>();",
        "begin_line": 708,
        "end_line": 708,
        "comment": " The Events corresponding to each startEvent/stopEvent "
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.outstandingEvents",
        "snippet": "    final HashSet<Tracer> outstandingEvents = new HashSet<Tracer>();",
        "begin_line": 711,
        "end_line": 711,
        "comment": " Tracers that have not had their .stop() called "
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.stats",
        "snippet": "    final Map<String, Stat> stats = new HashMap<String, Stat>();",
        "begin_line": 714,
        "end_line": 714,
        "comment": " Map from type to Stat object "
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.isOutstandingEventsTruncated",
        "snippet": "    boolean isOutstandingEventsTruncated = false;",
        "begin_line": 720,
        "end_line": 720,
        "comment": "\n     * True if {@code outstandingEvents} has been cleared because we exceeded\n     * the max trace limit.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.isEventsTruncated",
        "snippet": "    boolean isEventsTruncated = false;",
        "begin_line": 726,
        "end_line": 726,
        "comment": "\n     * True if {@code events} has been cleared because we exceeded the max\n     * trace limit.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.isInitialized",
        "snippet": "    boolean isInitialized = false;",
        "begin_line": 732,
        "end_line": 732,
        "comment": "\n     * Set to true if {@link Tracer#initCurrentThreadTrace()} was called by\n     * the current thread.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.prettyPrint",
        "snippet": "    boolean prettyPrint = false;",
        "begin_line": 737,
        "end_line": 737,
        "comment": "\n     * Whether pretty printing is enabled for the trace.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.traces",
        "snippet": "  private static ThreadLocal<ThreadTrace> traces =\n      new ThreadLocal<ThreadTrace>();",
        "begin_line": 952,
        "end_line": 953,
        "comment": " Holds the ThreadTrace for each thread.  "
    },
    {
        "class_name": "com.google.javascript.jscomp.AtomicTracerStatMap",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.AtomicTracerStatMap.map",
        "snippet": "    private ConcurrentMap<String, Long> map =\n        new ConcurrentHashMap<String, Long>();",
        "begin_line": 1033,
        "end_line": 1034,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckRegExp",
        "src_path": "src/com/google/javascript/jscomp/CheckRegExp.java",
        "signature": "com.google.javascript.jscomp.CheckRegExp.REGEXP_REFERENCE",
        "snippet": "  static final DiagnosticType REGEXP_REFERENCE =\n    DiagnosticType.warning(\"JSC_REGEXP_REFERENCE\",\n        \"References to the global RegExp object prevents \" +\n        \"optimization of regular expressions.\");",
        "begin_line": 32,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckRegExp",
        "src_path": "src/com/google/javascript/jscomp/CheckRegExp.java",
        "signature": "com.google.javascript.jscomp.CheckRegExp.MALFORMED_REGEXP",
        "snippet": "  static final DiagnosticType MALFORMED_REGEXP = DiagnosticType.warning(\n        \"JSC_MALFORMED_REGEXP\",\n        \"Malformed Regular Expression: {0}\");",
        "begin_line": 36,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckRegExp",
        "src_path": "src/com/google/javascript/jscomp/CheckRegExp.java",
        "signature": "com.google.javascript.jscomp.CheckRegExp.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckRegExp",
        "src_path": "src/com/google/javascript/jscomp/CheckRegExp.java",
        "signature": "com.google.javascript.jscomp.CheckRegExp.globalRegExpPropertiesUsed",
        "snippet": "  private boolean globalRegExpPropertiesUsed = false;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VariableVisibilityAnalysis",
        "src_path": "src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java",
        "signature": "com.google.javascript.jscomp.VariableVisibilityAnalysis.compiler",
        "snippet": "  private AbstractCompiler compiler;",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VariableVisibilityAnalysis",
        "src_path": "src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java",
        "signature": "com.google.javascript.jscomp.VariableVisibilityAnalysis.visibilityByDeclaringNameNode",
        "snippet": "  private Map<Node, VariableVisibility> visibilityByDeclaringNameNode;",
        "begin_line": 65,
        "end_line": 65,
        "comment": "\n   * Maps the declaring name node for a variable to that variable's\n   * visibility.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.GoogleJsMessageIdGenerator",
        "src_path": "src/com/google/javascript/jscomp/GoogleJsMessageIdGenerator.java",
        "signature": "com.google.javascript.jscomp.GoogleJsMessageIdGenerator.projectId",
        "snippet": "  private final String projectId;",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MaybeReachingVariableUse",
        "src_path": "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java",
        "signature": "com.google.javascript.jscomp.MaybeReachingVariableUse.jsScope",
        "snippet": "  private final Scope jsScope;",
        "begin_line": 48,
        "end_line": 48,
        "comment": " The scope of the function that we are analyzing."
    },
    {
        "class_name": "com.google.javascript.jscomp.MaybeReachingVariableUse",
        "src_path": "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java",
        "signature": "com.google.javascript.jscomp.MaybeReachingVariableUse.escaped",
        "snippet": "  private final Set<Var> escaped;",
        "begin_line": 49,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReachingUses",
        "src_path": "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java",
        "signature": "com.google.javascript.jscomp.ReachingUses.mayUseMap",
        "snippet": "    final Multimap<Var, Node> mayUseMap;",
        "begin_line": 86,
        "end_line": 86,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RecentChange",
        "src_path": "src/com/google/javascript/jscomp/CodeChangeHandler.java",
        "signature": "com.google.javascript.jscomp.RecentChange.hasChanged",
        "snippet": "    private boolean hasChanged = false;",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlStructureCheck",
        "src_path": "src/com/google/javascript/jscomp/ControlStructureCheck.java",
        "signature": "com.google.javascript.jscomp.ControlStructureCheck.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 29,
        "end_line": 29,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlStructureCheck",
        "src_path": "src/com/google/javascript/jscomp/ControlStructureCheck.java",
        "signature": "com.google.javascript.jscomp.ControlStructureCheck.USE_OF_WITH",
        "snippet": "  static final DiagnosticType USE_OF_WITH = DiagnosticType.warning(\n      \"JSC_USE_OF_WITH\",\n      \"The use of the 'with' structure should be avoided.\");",
        "begin_line": 31,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JqueryCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/JqueryCodingConvention.java",
        "signature": "com.google.javascript.jscomp.JqueryCodingConvention.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 29,
        "end_line": 29,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JqueryCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/JqueryCodingConvention.java",
        "signature": "com.google.javascript.jscomp.JqueryCodingConvention.propertyTestFunctions",
        "snippet": "  private final static Set<String> propertyTestFunctions = ImmutableSet.of(\n      \"jQuery.isPlainObject\", \"jQuery.isFunction\", \"jQuery.isNumeric\",\n      \"jQuery.isEmptyObject\");",
        "begin_line": 44,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JqueryCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/JqueryCodingConvention.java",
        "signature": "com.google.javascript.jscomp.JqueryCodingConvention.prototypeAliases",
        "snippet": "  private final static Set<String> prototypeAliases = ImmutableSet.of(\n      \"jQuery.fn\", \"jQuerySub.fn\");",
        "begin_line": 55,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 33,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.OPTIONAL_ARG_PREFIX",
        "snippet": "  private static final String OPTIONAL_ARG_PREFIX = \"opt_\";",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.VAR_ARGS_NAME",
        "snippet": "  private static final String VAR_ARGS_NAME = \"var_args\";",
        "begin_line": 37,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.ENUM_KEY_PATTERN",
        "snippet": "  private static final Pattern ENUM_KEY_PATTERN =\n    Pattern.compile(\"[A-Z0-9][A-Z0-9_]*\");",
        "begin_line": 39,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckProvides",
        "src_path": "src/com/google/javascript/jscomp/CheckProvides.java",
        "signature": "com.google.javascript.jscomp.CheckProvides.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 33,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckProvides",
        "src_path": "src/com/google/javascript/jscomp/CheckProvides.java",
        "signature": "com.google.javascript.jscomp.CheckProvides.checkLevel",
        "snippet": "  private final CheckLevel checkLevel;",
        "begin_line": 34,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckProvides",
        "src_path": "src/com/google/javascript/jscomp/CheckProvides.java",
        "signature": "com.google.javascript.jscomp.CheckProvides.codingConvention",
        "snippet": "  private final CodingConvention codingConvention;",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckProvides",
        "src_path": "src/com/google/javascript/jscomp/CheckProvides.java",
        "signature": "com.google.javascript.jscomp.CheckProvides.MISSING_PROVIDE_WARNING",
        "snippet": "  static final DiagnosticType MISSING_PROVIDE_WARNING = DiagnosticType.disabled(\n      \"JSC_MISSING_PROVIDE\",\n      \"missing goog.provide(''{0}'')\");",
        "begin_line": 37,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckProvidesCallback",
        "src_path": "src/com/google/javascript/jscomp/CheckProvides.java",
        "signature": "com.google.javascript.jscomp.CheckProvidesCallback.provides",
        "snippet": "    private final Map<String, Node> provides = Maps.newHashMap();",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckProvidesCallback",
        "src_path": "src/com/google/javascript/jscomp/CheckProvides.java",
        "signature": "com.google.javascript.jscomp.CheckProvidesCallback.ctors",
        "snippet": "    private final Map<String, Node> ctors = Maps.newHashMap();",
        "begin_line": 61,
        "end_line": 61,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckProvidesCallback",
        "src_path": "src/com/google/javascript/jscomp/CheckProvides.java",
        "signature": "com.google.javascript.jscomp.CheckProvidesCallback.convention",
        "snippet": "    private final CodingConvention convention;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "signature": "com.google.javascript.jscomp.DiagnosticType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1;",
        "begin_line": 29,
        "end_line": 29,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "signature": "com.google.javascript.jscomp.DiagnosticType.key",
        "snippet": "  public final String key;",
        "begin_line": 35,
        "end_line": 35,
        "comment": "\n   * The error type. Used as the BugPattern and BugInstance types by\n   * BugBot's XML\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "signature": "com.google.javascript.jscomp.DiagnosticType.format",
        "snippet": "  public final MessageFormat format;",
        "begin_line": 38,
        "end_line": 38,
        "comment": " The default way to format errors "
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "signature": "com.google.javascript.jscomp.DiagnosticType.defaultLevel",
        "snippet": "  public final CheckLevel defaultLevel;",
        "begin_line": 41,
        "end_line": 41,
        "comment": " Default level "
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "signature": "com.google.javascript.jscomp.DiagnosticType.level",
        "snippet": "  public CheckLevel level;",
        "begin_line": 44,
        "end_line": 44,
        "comment": " Reporting level, initially the defaultLevel but may be changed. "
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.cfg",
        "snippet": "  private ControlFlowGraph<Node> cfg;",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.astPosition",
        "snippet": "  private Map<Node, Integer> astPosition;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.nodePriorities",
        "snippet": "  private Map<DiGraphNode<Node, Branch>, Integer> nodePriorities;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " TODO(nicksantos): should these be node annotations?"
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.priorityComparator",
        "snippet": "  private final Comparator<DiGraphNode<Node, Branch>> priorityComparator =\n      new Comparator<DiGraphNode<Node, Branch>>() {\n    @Override\n    public int compare(\n        DiGraphNode<Node, Branch> a, DiGraphNode<Node, Branch> b) {\n      return astPosition.get(a.getValue()) - astPosition.get(b.getValue());\n    }\n  };",
        "begin_line": 70,
        "end_line": 77,
        "comment": " they will often be executed first in the source program."
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.astPositionCounter",
        "snippet": "  private int astPositionCounter;",
        "begin_line": 79,
        "end_line": 79,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.priorityCounter",
        "snippet": "  private int priorityCounter;",
        "begin_line": 80,
        "end_line": 80,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.shouldTraverseFunctions",
        "snippet": "  private final boolean shouldTraverseFunctions;",
        "begin_line": 82,
        "end_line": 82,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.edgeAnnotations",
        "snippet": "  private final boolean edgeAnnotations;",
        "begin_line": 83,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.root",
        "snippet": "  private Node root;",
        "begin_line": 88,
        "end_line": 88,
        "comment": " on only the externs."
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.exceptionHandler",
        "snippet": "  private final Deque<Node> exceptionHandler = new ArrayDeque<Node>();",
        "begin_line": 95,
        "end_line": 95,
        "comment": "\n   * This stack captures the structure of nested TRY blocks. The top of the\n   * stack is the inner most TRY block. A FUNCTION node in this stack implies\n   * that the handler is determined by the caller of the function at runtime.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.finallyMap",
        "snippet": "  private final Multimap<Node, Node> finallyMap = HashMultimap.create();",
        "begin_line": 126,
        "end_line": 126,
        "comment": "\n   * This map is used to handle the follow of FINALLY. For example:\n   *\n   * while(x) {\n   *  try {\n   *    try {\n   *      break;\n   *    } catch (a) {\n   *    } finally {\n   *      foo();\n   *    }\n   *    fooFollow();\n   *  } catch (b) {\n   *  } finally {\n   *    bar();\n   *  }\n   *  barFollow();\n   * }\n   * END();\n   *\n   * In this case finallyMap will contain a map from:\n   *    first FINALLY -> bar()\n   *    second FINALLY -> END()\n   *\n   * When we are connecting foo() and bar() to to their respective follow, we\n   * must also look up this map and connect:\n   *   foo() -> bar()\n   *   bar() -> END\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.AstControlFlowGraph",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.AstControlFlowGraph.priorities",
        "snippet": "    private final Map<DiGraphNode<Node, Branch>, Integer> priorities;",
        "begin_line": 1005,
        "end_line": 1005,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionToBlockMutator",
        "src_path": "src/com/google/javascript/jscomp/FunctionToBlockMutator.java",
        "signature": "com.google.javascript.jscomp.FunctionToBlockMutator.compiler",
        "snippet": "  private AbstractCompiler compiler;",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionToBlockMutator",
        "src_path": "src/com/google/javascript/jscomp/FunctionToBlockMutator.java",
        "signature": "com.google.javascript.jscomp.FunctionToBlockMutator.safeNameIdSupplier",
        "snippet": "  private Supplier<String> safeNameIdSupplier;",
        "begin_line": 44,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LabelNameSupplier",
        "src_path": "src/com/google/javascript/jscomp/FunctionToBlockMutator.java",
        "signature": "com.google.javascript.jscomp.LabelNameSupplier.idSupplier",
        "snippet": "    final Supplier<String> idSupplier;",
        "begin_line": 192,
        "end_line": 192,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.InlineFunctions.fns",
        "snippet": "  private final Map<String, FunctionState> fns = Maps.newHashMap();",
        "begin_line": 62,
        "end_line": 62,
        "comment": " this needs a major refactor."
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.InlineFunctions.anonFns",
        "snippet": "  private final Map<Node, String> anonFns = Maps.newHashMap();",
        "begin_line": 63,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.InlineFunctions.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 65,
        "end_line": 65,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.InlineFunctions.injector",
        "snippet": "  private final FunctionInjector injector;",
        "begin_line": 67,
        "end_line": 67,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.InlineFunctions.blockFunctionInliningEnabled",
        "snippet": "  private final boolean blockFunctionInliningEnabled;",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.InlineFunctions.inlineGlobalFunctions",
        "snippet": "  private final boolean inlineGlobalFunctions;",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.InlineFunctions.inlineLocalFunctions",
        "snippet": "  private final boolean inlineLocalFunctions;",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.InlineFunctions.assumeMinimumCapture",
        "snippet": "  private final boolean assumeMinimumCapture;",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.InlineFunctions.specializationState",
        "snippet": "  private SpecializeModule.SpecializationState specializationState;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FindCandidateFunctions",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.FindCandidateFunctions.callsSeen",
        "snippet": "    private int callsSeen = 0;",
        "begin_line": 155,
        "end_line": 155,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CallVisitor",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.CallVisitor.callback",
        "snippet": "    protected CallVisitorCallback callback;",
        "begin_line": 376,
        "end_line": 376,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CallVisitor",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.CallVisitor.functionMap",
        "snippet": "    private Map<String, FunctionState> functionMap;",
        "begin_line": 377,
        "end_line": 377,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CallVisitor",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.CallVisitor.anonFunctionMap",
        "snippet": "    private Map<Node, String> anonFunctionMap;",
        "begin_line": 378,
        "end_line": 378,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Inline",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.Inline.injector",
        "snippet": "    private final FunctionInjector injector;",
        "begin_line": 595,
        "end_line": 595,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Inline",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.Inline.specializationState",
        "snippet": "    private final SpecializeModule.SpecializationState specializationState;",
        "begin_line": 596,
        "end_line": 596,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionState",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.FunctionState.fn",
        "snippet": "    private Function fn = null;",
        "begin_line": 858,
        "end_line": 858,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionState",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.FunctionState.safeFnNode",
        "snippet": "    private Node safeFnNode = null;",
        "begin_line": 859,
        "end_line": 859,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionState",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.FunctionState.inline",
        "snippet": "    private boolean inline = true;",
        "begin_line": 860,
        "end_line": 860,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionState",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.FunctionState.remove",
        "snippet": "    private boolean remove = true;",
        "begin_line": 861,
        "end_line": 861,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionState",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.FunctionState.inlineDirectly",
        "snippet": "    private boolean inlineDirectly = false;",
        "begin_line": 862,
        "end_line": 862,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionState",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.FunctionState.referencesThis",
        "snippet": "    private boolean referencesThis = false;",
        "begin_line": 863,
        "end_line": 863,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionState",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.FunctionState.hasInnerFunctions",
        "snippet": "    private boolean hasInnerFunctions = false;",
        "begin_line": 864,
        "end_line": 864,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionState",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.FunctionState.references",
        "snippet": "    private Map<Node, Reference> references = null;",
        "begin_line": 865,
        "end_line": 865,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionState",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.FunctionState.module",
        "snippet": "    private JSModule module = null;",
        "begin_line": 866,
        "end_line": 866,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionState",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.FunctionState.namesToAlias",
        "snippet": "    private Set<String> namesToAlias = null;",
        "begin_line": 867,
        "end_line": 867,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NamedFunction",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.NamedFunction.fn",
        "snippet": "    private final Node fn;",
        "begin_line": 1021,
        "end_line": 1021,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionVar",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.FunctionVar.var",
        "snippet": "    private final Node var;",
        "begin_line": 1050,
        "end_line": 1050,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionExpression",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.FunctionExpression.fn",
        "snippet": "    private final Node fn;",
        "begin_line": 1079,
        "end_line": 1079,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionExpression",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.FunctionExpression.fakeName",
        "snippet": "    private final String fakeName;",
        "begin_line": 1080,
        "end_line": 1080,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Reference",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.Reference.requiresDecomposition",
        "snippet": "    final boolean requiresDecomposition;",
        "begin_line": 1112,
        "end_line": 1112,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Reference",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.Reference.inlined",
        "snippet": "    boolean inlined = false;",
        "begin_line": 1113,
        "end_line": 1113,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PerformanceTracker",
        "src_path": "src/com/google/javascript/jscomp/PerformanceTracker.java",
        "signature": "com.google.javascript.jscomp.PerformanceTracker.jsRoot",
        "snippet": "  private final Node jsRoot;",
        "begin_line": 44,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PerformanceTracker",
        "src_path": "src/com/google/javascript/jscomp/PerformanceTracker.java",
        "signature": "com.google.javascript.jscomp.PerformanceTracker.trackSize",
        "snippet": "  private final boolean trackSize;",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PerformanceTracker",
        "src_path": "src/com/google/javascript/jscomp/PerformanceTracker.java",
        "signature": "com.google.javascript.jscomp.PerformanceTracker.trackGzippedSize",
        "snippet": "  private final boolean trackGzippedSize;",
        "begin_line": 46,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PerformanceTracker",
        "src_path": "src/com/google/javascript/jscomp/PerformanceTracker.java",
        "signature": "com.google.javascript.jscomp.PerformanceTracker.codeChange",
        "snippet": "  private final RecentChange codeChange = new RecentChange();",
        "begin_line": 50,
        "end_line": 50,
        "comment": " if there is any."
    },
    {
        "class_name": "com.google.javascript.jscomp.PerformanceTracker",
        "src_path": "src/com/google/javascript/jscomp/PerformanceTracker.java",
        "signature": "com.google.javascript.jscomp.PerformanceTracker.curCodeSizeEstimate",
        "snippet": "  private int curCodeSizeEstimate = -1;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PerformanceTracker",
        "src_path": "src/com/google/javascript/jscomp/PerformanceTracker.java",
        "signature": "com.google.javascript.jscomp.PerformanceTracker.curZippedCodeSizeEstimate",
        "snippet": "  private int curZippedCodeSizeEstimate = -1;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PerformanceTracker",
        "src_path": "src/com/google/javascript/jscomp/PerformanceTracker.java",
        "signature": "com.google.javascript.jscomp.PerformanceTracker.currentRunningPass",
        "snippet": "  private Deque<String> currentRunningPass = new ArrayDeque<String>();",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PerformanceTracker",
        "src_path": "src/com/google/javascript/jscomp/PerformanceTracker.java",
        "signature": "com.google.javascript.jscomp.PerformanceTracker.summary",
        "snippet": "  private final Map<String, Stats> summary = Maps.newHashMap();",
        "begin_line": 58,
        "end_line": 58,
        "comment": " Summary stats by pass name. "
    },
    {
        "class_name": "com.google.javascript.jscomp.PerformanceTracker",
        "src_path": "src/com/google/javascript/jscomp/PerformanceTracker.java",
        "signature": "com.google.javascript.jscomp.PerformanceTracker.summaryCopy",
        "snippet": "  private ImmutableMap<String, Stats> summaryCopy = null;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " To share with the rest of the program"
    },
    {
        "class_name": "com.google.javascript.jscomp.PerformanceTracker",
        "src_path": "src/com/google/javascript/jscomp/PerformanceTracker.java",
        "signature": "com.google.javascript.jscomp.PerformanceTracker.log",
        "snippet": "  private final List<Stats> log = Lists.newArrayList();",
        "begin_line": 64,
        "end_line": 64,
        "comment": " Stats for each run of a compiler pass. "
    },
    {
        "class_name": "com.google.javascript.jscomp.Stats",
        "src_path": "src/com/google/javascript/jscomp/PerformanceTracker.java",
        "signature": "com.google.javascript.jscomp.Stats.pass",
        "snippet": "    public final String pass;",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Stats",
        "src_path": "src/com/google/javascript/jscomp/PerformanceTracker.java",
        "signature": "com.google.javascript.jscomp.Stats.runtime",
        "snippet": "    public long runtime = 0;",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Stats",
        "src_path": "src/com/google/javascript/jscomp/PerformanceTracker.java",
        "signature": "com.google.javascript.jscomp.Stats.runs",
        "snippet": "    public int runs = 0;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Stats",
        "src_path": "src/com/google/javascript/jscomp/PerformanceTracker.java",
        "signature": "com.google.javascript.jscomp.Stats.changes",
        "snippet": "    public int changes = 0;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Stats",
        "src_path": "src/com/google/javascript/jscomp/PerformanceTracker.java",
        "signature": "com.google.javascript.jscomp.Stats.diff",
        "snippet": "    public int diff = 0;",
        "begin_line": 75,
        "end_line": 75,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Stats",
        "src_path": "src/com/google/javascript/jscomp/PerformanceTracker.java",
        "signature": "com.google.javascript.jscomp.Stats.gzDiff",
        "snippet": "    public int gzDiff = 0;",
        "begin_line": 76,
        "end_line": 76,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Stats",
        "src_path": "src/com/google/javascript/jscomp/PerformanceTracker.java",
        "signature": "com.google.javascript.jscomp.Stats.size",
        "snippet": "    public int size = 0;",
        "begin_line": 77,
        "end_line": 77,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Stats",
        "src_path": "src/com/google/javascript/jscomp/PerformanceTracker.java",
        "signature": "com.google.javascript.jscomp.Stats.gzSize",
        "snippet": "    public int gzSize = 0;",
        "begin_line": 78,
        "end_line": 78,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeSizeEstimatePrinter",
        "src_path": "src/com/google/javascript/jscomp/PerformanceTracker.java",
        "signature": "com.google.javascript.jscomp.CodeSizeEstimatePrinter.trackGzippedSize",
        "snippet": "    private final boolean trackGzippedSize;",
        "begin_line": 307,
        "end_line": 307,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeSizeEstimatePrinter",
        "src_path": "src/com/google/javascript/jscomp/PerformanceTracker.java",
        "signature": "com.google.javascript.jscomp.CodeSizeEstimatePrinter.size",
        "snippet": "    private int size = 0;",
        "begin_line": 308,
        "end_line": 308,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeSizeEstimatePrinter",
        "src_path": "src/com/google/javascript/jscomp/PerformanceTracker.java",
        "signature": "com.google.javascript.jscomp.CodeSizeEstimatePrinter.lastChar",
        "snippet": "    private char lastChar = '\\0';",
        "begin_line": 309,
        "end_line": 309,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeSizeEstimatePrinter",
        "src_path": "src/com/google/javascript/jscomp/PerformanceTracker.java",
        "signature": "com.google.javascript.jscomp.CodeSizeEstimatePrinter.output",
        "snippet": "    private final ByteArrayOutputStream output = new ByteArrayOutputStream();",
        "begin_line": 310,
        "end_line": 310,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeSizeEstimatePrinter",
        "src_path": "src/com/google/javascript/jscomp/PerformanceTracker.java",
        "signature": "com.google.javascript.jscomp.CodeSizeEstimatePrinter.stream",
        "snippet": "    private final GZIPOutputStream stream;",
        "begin_line": 311,
        "end_line": 311,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JSModuleGraph",
        "src_path": "src/com/google/javascript/jscomp/JSModuleGraph.java",
        "signature": "com.google.javascript.jscomp.JSModuleGraph.modules",
        "snippet": "  private List<JSModule> modules;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JSModuleGraph",
        "src_path": "src/com/google/javascript/jscomp/JSModuleGraph.java",
        "signature": "com.google.javascript.jscomp.JSModuleGraph.modulesByDepth",
        "snippet": "  private List<List<JSModule>> modulesByDepth;",
        "begin_line": 63,
        "end_line": 63,
        "comment": "\n   * Lists of modules at each depth. <code>modulesByDepth.get(3)</code> is a\n   * list of the modules at depth 3, for example.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.JSModuleGraph",
        "src_path": "src/com/google/javascript/jscomp/JSModuleGraph.java",
        "signature": "com.google.javascript.jscomp.JSModuleGraph.dependencyMap",
        "snippet": "  private Map<JSModule, Set<JSModule>> dependencyMap = Maps.newHashMap();",
        "begin_line": 77,
        "end_line": 77,
        "comment": "\n   * dependencyMap is a cache of dependencies that makes the dependsOn\n   * function faster.  Each map entry associates a starting\n   * JSModule with the set of JSModules that are transitively dependent on the\n   * starting module.\n   *\n   * If the cache returns null, then the entry hasn't been filled in for that\n   * module.\n   *\n   * dependencyMap should be filled from leaf to root so that\n   * getTransitiveDepsDeepestFirst can use its results directly.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.ModuleDependenceException",
        "src_path": "src/com/google/javascript/jscomp/JSModuleGraph.java",
        "signature": "com.google.javascript.jscomp.ModuleDependenceException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1;",
        "begin_line": 476,
        "end_line": 476,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ModuleDependenceException",
        "src_path": "src/com/google/javascript/jscomp/JSModuleGraph.java",
        "signature": "com.google.javascript.jscomp.ModuleDependenceException.module",
        "snippet": "    private final JSModule module;",
        "begin_line": 478,
        "end_line": 478,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ModuleDependenceException",
        "src_path": "src/com/google/javascript/jscomp/JSModuleGraph.java",
        "signature": "com.google.javascript.jscomp.ModuleDependenceException.dependentModule",
        "snippet": "    private final JSModule dependentModule;",
        "begin_line": 479,
        "end_line": 479,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MustBeReachingVariableDef",
        "src_path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java",
        "signature": "com.google.javascript.jscomp.MustBeReachingVariableDef.jsScope",
        "snippet": "  private final Scope jsScope;",
        "begin_line": 49,
        "end_line": 49,
        "comment": " The scope of the function that we are analyzing."
    },
    {
        "class_name": "com.google.javascript.jscomp.MustBeReachingVariableDef",
        "src_path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java",
        "signature": "com.google.javascript.jscomp.MustBeReachingVariableDef.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MustBeReachingVariableDef",
        "src_path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java",
        "signature": "com.google.javascript.jscomp.MustBeReachingVariableDef.escaped",
        "snippet": "  private final Set<Var> escaped;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Definition",
        "src_path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java",
        "signature": "com.google.javascript.jscomp.Definition.node",
        "snippet": "    final Node node;",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Definition",
        "src_path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java",
        "signature": "com.google.javascript.jscomp.Definition.depends",
        "snippet": "    final Set<Var> depends = Sets.newHashSet();",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Definition",
        "src_path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java",
        "signature": "com.google.javascript.jscomp.Definition.unknownDependencies",
        "snippet": "    private boolean unknownDependencies = false;",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MustDef",
        "src_path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java",
        "signature": "com.google.javascript.jscomp.MustDef.reachingDef",
        "snippet": "    final Map<Var, Definition> reachingDef;",
        "begin_line": 114,
        "end_line": 114,
        "comment": " When a Var \"A\" = \"BOTTOM\", \"A\" maps to null."
    },
    {
        "class_name": "com.google.javascript.jscomp.DependencyOptions",
        "src_path": "src/com/google/javascript/jscomp/DependencyOptions.java",
        "signature": "com.google.javascript.jscomp.DependencyOptions.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DependencyOptions",
        "src_path": "src/com/google/javascript/jscomp/DependencyOptions.java",
        "signature": "com.google.javascript.jscomp.DependencyOptions.sortDependencies",
        "snippet": "  private boolean sortDependencies = false;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DependencyOptions",
        "src_path": "src/com/google/javascript/jscomp/DependencyOptions.java",
        "signature": "com.google.javascript.jscomp.DependencyOptions.pruneDependencies",
        "snippet": "  private boolean pruneDependencies = false;",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DependencyOptions",
        "src_path": "src/com/google/javascript/jscomp/DependencyOptions.java",
        "signature": "com.google.javascript.jscomp.DependencyOptions.dropMoochers",
        "snippet": "  private boolean dropMoochers = false;",
        "begin_line": 44,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DependencyOptions",
        "src_path": "src/com/google/javascript/jscomp/DependencyOptions.java",
        "signature": "com.google.javascript.jscomp.DependencyOptions.entryPoints",
        "snippet": "  private final Set<String> entryPoints = Sets.newHashSet();",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.COMPILED_CONSTANT_NAME",
        "snippet": "  private static final String COMPILED_CONSTANT_NAME = \"COMPILED\";",
        "begin_line": 55,
        "end_line": 55,
        "comment": " For the --mark-as-compiled pass "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.CLOSURE_LOCALE_CONSTANT_NAME",
        "snippet": "  private static final String CLOSURE_LOCALE_CONSTANT_NAME = \"goog.LOCALE\";",
        "begin_line": 58,
        "end_line": 58,
        "comment": " Constant name for Closure's locale "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.TIGHTEN_TYPES_WITHOUT_TYPE_CHECK",
        "snippet": "  static final DiagnosticType TIGHTEN_TYPES_WITHOUT_TYPE_CHECK =\n      DiagnosticType.error(\"JSC_TIGHTEN_TYPES_WITHOUT_TYPE_CHECK\",\n          \"TightenTypes requires type checking. Please use --check_types.\");",
        "begin_line": 61,
        "end_line": 63,
        "comment": " Compiler errors when invalid combinations of passes are run."
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.CANNOT_USE_PROTOTYPE_AND_VAR",
        "snippet": "  static final DiagnosticType CANNOT_USE_PROTOTYPE_AND_VAR =\n      DiagnosticType.error(\"JSC_CANNOT_USE_PROTOTYPE_AND_VAR\",\n          \"Rename prototypes and inline variables cannot be used together\");",
        "begin_line": 65,
        "end_line": 67,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.REPORT_PATH_IO_ERROR",
        "snippet": "  static final DiagnosticType REPORT_PATH_IO_ERROR =\n      DiagnosticType.error(\"JSC_REPORT_PATH_IO_ERROR\",\n          \"Error writing compiler report to {0}\");",
        "begin_line": 70,
        "end_line": 72,
        "comment": " Miscellaneous errors."
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.NAME_REF_GRAPH_FILE_ERROR",
        "snippet": "  private static final DiagnosticType NAME_REF_GRAPH_FILE_ERROR =\n      DiagnosticType.error(\"JSC_NAME_REF_GRAPH_FILE_ERROR\",\n          \"Error \\\"{1}\\\" writing name reference graph to \\\"{0}\\\".\");",
        "begin_line": 74,
        "end_line": 76,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.NAME_REF_REPORT_FILE_ERROR",
        "snippet": "  private static final DiagnosticType NAME_REF_REPORT_FILE_ERROR =\n      DiagnosticType.error(\"JSC_NAME_REF_REPORT_FILE_ERROR\",\n          \"Error \\\"{1}\\\" writing name reference report to \\\"{0}\\\".\");",
        "begin_line": 78,
        "end_line": 80,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.GLOBAL_SYMBOL_NAMESPACE_PATTERN",
        "snippet": "  private static final java.util.regex.Pattern GLOBAL_SYMBOL_NAMESPACE_PATTERN =\n    java.util.regex.Pattern.compile(\"^[a-zA-Z0-9$_]+$\");",
        "begin_line": 82,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.namespaceForChecks",
        "snippet": "  private GlobalNamespace namespaceForChecks = null;",
        "begin_line": 88,
        "end_line": 88,
        "comment": "\n   * A global namespace to share across checking passes.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.preprocessorSymbolTable",
        "snippet": "  private PreprocessorSymbolTable preprocessorSymbolTable = null;",
        "begin_line": 94,
        "end_line": 94,
        "comment": "\n   * A symbol table for registering references that get removed during\n   * preprocessing.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.tightenTypes",
        "snippet": "  private TightenTypes tightenTypes = null;",
        "begin_line": 99,
        "end_line": 99,
        "comment": "\n   * A type-tightener to share across optimization passes.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.exportedNames",
        "snippet": "  private Set<String> exportedNames = null;",
        "begin_line": 102,
        "end_line": 102,
        "comment": " Names exported by goog.exportSymbol. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.crossModuleIdGenerator",
        "snippet": "  private CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator =\n      new CrossModuleMethodMotion.IdGenerator();",
        "begin_line": 108,
        "end_line": 109,
        "comment": "\n   * Ids for cross-module method stubbing, so that each method has\n   * a unique id.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.cssNames",
        "snippet": "  private Map<String, Integer> cssNames = null;",
        "begin_line": 115,
        "end_line": 115,
        "comment": "\n   * Keys are arguments passed to getCssName() found during compilation; values\n   * are the number of times the key appeared as an argument to getCssName().\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.variableMap",
        "snippet": "  private VariableMap variableMap = null;",
        "begin_line": 118,
        "end_line": 118,
        "comment": " The variable renaming map "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.propertyMap",
        "snippet": "  private VariableMap propertyMap = null;",
        "begin_line": 121,
        "end_line": 121,
        "comment": " The property renaming map "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.anonymousFunctionNameMap",
        "snippet": "  private VariableMap anonymousFunctionNameMap = null;",
        "begin_line": 124,
        "end_line": 124,
        "comment": " The naming map for anonymous functions "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.functionNames",
        "snippet": "  private FunctionNames functionNames = null;",
        "begin_line": 127,
        "end_line": 127,
        "comment": " Fully qualified function names and globally unique ids "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.stringMap",
        "snippet": "  private VariableMap stringMap = null;",
        "begin_line": 130,
        "end_line": 130,
        "comment": " String replacement map "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.idGeneratorMap",
        "snippet": "  private String idGeneratorMap = null;",
        "begin_line": 133,
        "end_line": 133,
        "comment": " Id generator map "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkSideEffects",
        "snippet": "  final HotSwapPassFactory checkSideEffects =\n      new HotSwapPassFactory(\"checkSideEffects\", true) {\n    @Override\n    protected HotSwapCompilerPass create(final AbstractCompiler compiler) {\n      // The current approach to protecting \"hidden\" side-effects is to\n      // wrap them in a function call that is stripped later, this shouldn't\n      // be done in IDE mode where AST changes may be unexpected.\n      boolean protectHiddenSideEffects =\n          options.protectHiddenSideEffects && !options.ideMode;\n      return new CheckSideEffects(compiler,\n          options.checkSuspiciousCode ? CheckLevel.WARNING : CheckLevel.OFF,\n              protectHiddenSideEffects);\n    }\n  };",
        "begin_line": 756,
        "end_line": 769,
        "comment": "\n   * Checks for code that is probably wrong (such as stray expressions).\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.stripSideEffectProtection",
        "snippet": "  final PassFactory stripSideEffectProtection =\n      new PassFactory(\"stripSideEffectProtection\", true) {\n    @Override\n    protected CompilerPass create(final AbstractCompiler\n        compiler) {\n      return new CheckSideEffects.StripProtection(compiler);\n    }\n  };",
        "begin_line": 774,
        "end_line": 781,
        "comment": "\n   * Checks for code that is probably wrong (such as stray expressions).\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.suspiciousCode",
        "snippet": "  final HotSwapPassFactory suspiciousCode =\n      new HotSwapPassFactory(\"suspiciousCode\", true) {\n    @Override\n    protected HotSwapCompilerPass create(final AbstractCompiler compiler) {\n      List<Callback> sharedCallbacks = Lists.newArrayList();\n      if (options.checkSuspiciousCode) {\n        sharedCallbacks.add(new CheckSuspiciousCode());\n      }\n\n      if (options.enables(DiagnosticGroups.GLOBAL_THIS)) {\n        sharedCallbacks.add(new CheckGlobalThis(compiler));\n      }\n\n      if (options.enables(DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT)) {\n        sharedCallbacks.add(new CheckDebuggerStatement(compiler));\n      }\n\n      return combineChecks(compiler, sharedCallbacks);\n    }\n\n  };",
        "begin_line": 786,
        "end_line": 806,
        "comment": "\n   * Checks for code that is probably wrong (such as stray expressions).\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkControlStructures",
        "snippet": "  final HotSwapPassFactory checkControlStructures =\n      new HotSwapPassFactory(\"checkControlStructures\", true) {\n    @Override\n    protected HotSwapCompilerPass create(AbstractCompiler compiler) {\n      return new ControlStructureCheck(compiler);\n    }\n  };",
        "begin_line": 823,
        "end_line": 829,
        "comment": " Checks for validity of the control structures. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkRequires",
        "snippet": "  final HotSwapPassFactory checkRequires =\n      new HotSwapPassFactory(\"checkRequires\", true) {\n    @Override\n    protected HotSwapCompilerPass create(AbstractCompiler compiler) {\n      return new CheckRequiresForConstructors(compiler, options.checkRequires);\n    }\n  };",
        "begin_line": 832,
        "end_line": 838,
        "comment": " Checks that all constructed classes are goog.require()d. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkProvides",
        "snippet": "  final HotSwapPassFactory checkProvides =\n      new HotSwapPassFactory(\"checkProvides\", true) {\n    @Override\n    protected HotSwapCompilerPass create(AbstractCompiler compiler) {\n      return new CheckProvides(compiler, options.checkProvides);\n    }\n  };",
        "begin_line": 841,
        "end_line": 847,
        "comment": " Makes sure @constructor is paired with goog.provides(). "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.GENERATE_EXPORTS_ERROR",
        "snippet": "  private static final DiagnosticType GENERATE_EXPORTS_ERROR =\n      DiagnosticType.error(\n          \"JSC_GENERATE_EXPORTS_ERROR\",\n          \"Exports can only be generated if export symbol/property \" +\n          \"functions are set.\");",
        "begin_line": 849,
        "end_line": 853,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.generateExports",
        "snippet": "  final PassFactory generateExports = new PassFactory(\"generateExports\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      CodingConvention convention = compiler.getCodingConvention();\n      if (convention.getExportSymbolFunction() != null &&\n          convention.getExportPropertyFunction() != null) {\n        return new GenerateExports(compiler,\n            convention.getExportSymbolFunction(),\n            convention.getExportPropertyFunction());\n      } else {\n        return new ErrorPass(compiler, GENERATE_EXPORTS_ERROR);\n      }\n    }\n  };",
        "begin_line": 856,
        "end_line": 869,
        "comment": " Generates exports for @export annotations. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.exportTestFunctions",
        "snippet": "  final PassFactory exportTestFunctions =\n      new PassFactory(\"exportTestFunctions\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      CodingConvention convention = compiler.getCodingConvention();\n      if (convention.getExportSymbolFunction() != null) {\n        return new ExportTestFunctions(compiler,\n            convention.getExportSymbolFunction(),\n            convention.getExportPropertyFunction());\n      } else {\n        return new ErrorPass(compiler, GENERATE_EXPORTS_ERROR);\n      }\n    }\n  };",
        "begin_line": 872,
        "end_line": 885,
        "comment": " Generates exports for functions associated with JsUnit. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.gatherRawExports",
        "snippet": "  final PassFactory gatherRawExports =\n      new PassFactory(\"gatherRawExports\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      final GatherRawExports pass = new GatherRawExports(\n          compiler);\n\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node root) {\n          pass.process(externs, root);\n          if (exportedNames == null) {\n            exportedNames = Sets.newHashSet();\n          }\n          exportedNames.addAll(pass.getExportedVariableNames());\n        }\n      };\n    }\n  };",
        "begin_line": 888,
        "end_line": 906,
        "comment": " Raw exports processing pass. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.closurePrimitives",
        "snippet": "  @SuppressWarnings(\"deprecation\")\n  final HotSwapPassFactory closurePrimitives =\n      new HotSwapPassFactory(\"closurePrimitives\", true) {\n    @Override\n    protected HotSwapCompilerPass create(AbstractCompiler compiler) {\n      maybeInitializePreprocessorSymbolTable(compiler);\n      final ProcessClosurePrimitives pass = new ProcessClosurePrimitives(\n          compiler,\n          preprocessorSymbolTable,\n          options.brokenClosureRequiresLevel);\n\n      return new HotSwapCompilerPass() {\n        @Override\n        public void process(Node externs, Node root) {\n          pass.process(externs, root);\n          exportedNames = pass.getExportedVariableNames();\n        }\n        @Override\n        public void hotSwapScript(Node scriptRoot, Node originalRoot) {\n          pass.hotSwapScript(scriptRoot, originalRoot);\n        }\n      };\n    }\n  };",
        "begin_line": 909,
        "end_line": 932,
        "comment": " Closure pre-processing pass. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.jqueryAliases",
        "snippet": "  final PassFactory jqueryAliases = new PassFactory(\"jqueryAliases\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new ExpandJqueryAliases(compiler);\n    }\n  };",
        "begin_line": 935,
        "end_line": 940,
        "comment": " Expand jQuery Primitives and Aliases pass. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.replaceMessages",
        "snippet": "  final PassFactory replaceMessages = new PassFactory(\"replaceMessages\", true) {\n    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      return new ReplaceMessages(compiler,\n          options.messageBundle,\n          /* warn about message dupes */\n          true,\n          /* allow messages with goog.getMsg */\n          JsMessage.Style.getFromParams(true, false),\n          /* if we can't find a translation, don't worry about it. */\n          false);\n    }\n  };",
        "begin_line": 947,
        "end_line": 959,
        "comment": "\n   * The default i18n pass.\n   * A lot of the options are not configurable, because ReplaceMessages\n   * has a lot of legacy logic.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.replaceMessagesForChrome",
        "snippet": "  final PassFactory replaceMessagesForChrome =\n      new PassFactory(\"replaceMessages\", true) {\n    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      return new ReplaceMessagesForChrome(compiler,\n          new GoogleJsMessageIdGenerator(options.tcProjectId),\n          /* warn about message dupes */\n          true,\n          /* allow messages with goog.getMsg */\n          JsMessage.Style.getFromParams(true, false));\n    }\n  };",
        "begin_line": 961,
        "end_line": 972,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.closureGoogScopeAliases",
        "snippet": "  final HotSwapPassFactory closureGoogScopeAliases =\n      new HotSwapPassFactory(\"closureGoogScopeAliases\", true) {\n    @Override\n    protected HotSwapCompilerPass create(AbstractCompiler compiler) {\n      maybeInitializePreprocessorSymbolTable(compiler);\n      return new ScopedAliases(\n          compiler,\n          preprocessorSymbolTable,\n          options.getAliasTransformationHandler());\n    }\n  };",
        "begin_line": 975,
        "end_line": 985,
        "comment": " Applies aliases and inlines goog.scope. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.closureRewriteGoogClass",
        "snippet": "  final HotSwapPassFactory closureRewriteGoogClass =\n      new HotSwapPassFactory(\"closureRewriteGoogClass\", true) {\n    @Override\n    protected HotSwapCompilerPass create(AbstractCompiler compiler) {\n      return new ClosureRewriteClass(compiler);\n    }\n  };",
        "begin_line": 988,
        "end_line": 994,
        "comment": " Rewrites goog.class "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.closureCheckGetCssName",
        "snippet": "  final PassFactory closureCheckGetCssName =\n      new PassFactory(\"closureCheckGetCssName\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      String blacklist = options.checkMissingGetCssNameBlacklist;\n      Preconditions.checkState(blacklist != null && !blacklist.isEmpty(),\n          \"Not checking use of goog.getCssName because of empty blacklist.\");\n      return new CheckMissingGetCssName(\n          compiler, options.checkMissingGetCssNameLevel, blacklist);\n    }\n  };",
        "begin_line": 997,
        "end_line": 1007,
        "comment": " Checks that CSS class names are wrapped in goog.getCssName "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.closureReplaceGetCssName",
        "snippet": "  final PassFactory closureReplaceGetCssName =\n      new PassFactory(\"closureReplaceGetCssName\", true) {\n    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node jsRoot) {\n          Map<String, Integer> newCssNames = null;\n          if (options.gatherCssNames) {\n            newCssNames = Maps.newHashMap();\n          }\n          ReplaceCssNames pass = new ReplaceCssNames(\n              compiler,\n              newCssNames,\n              options.cssRenamingWhitelist);\n          pass.process(externs, jsRoot);\n          cssNames = newCssNames;\n        }\n      };\n    }\n  };",
        "begin_line": 1014,
        "end_line": 1034,
        "comment": "\n   * Processes goog.getCssName.  The cssRenamingMap is used to lookup\n   * replacement values for the classnames.  If null, the raw class names are\n   * inlined.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.createSyntheticBlocks",
        "snippet": "  final PassFactory createSyntheticBlocks =\n      new PassFactory(\"createSyntheticBlocks\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new CreateSyntheticBlocks(compiler,\n          options.syntheticBlockStartMarker,\n          options.syntheticBlockEndMarker);\n    }\n  };",
        "begin_line": 1040,
        "end_line": 1048,
        "comment": "\n   * Creates synthetic blocks to prevent FoldConstants from moving code\n   * past markers in the source.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.peepholeOptimizations",
        "snippet": "  final PassFactory peepholeOptimizations =\n      new PassFactory(\"peepholeOptimizations\", false) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      final boolean late = false;\n      return new PeepholeOptimizationsPass(compiler,\n            new PeepholeSubstituteAlternateSyntax(late),\n            new PeepholeReplaceKnownMethods(late),\n            new PeepholeRemoveDeadCode(),\n            new PeepholeFoldConstants(late),\n            new PeepholeCollectPropertyAssignments());\n    }\n  };",
        "begin_line": 1051,
        "end_line": 1063,
        "comment": " Various peephole optimizations. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.latePeepholeOptimizations",
        "snippet": "  final PassFactory latePeepholeOptimizations =\n      new PassFactory(\"latePeepholeOptimizations\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      final boolean late = true;\n      return new PeepholeOptimizationsPass(compiler,\n            new StatementFusion(),\n            new PeepholeRemoveDeadCode(),\n            new PeepholeSubstituteAlternateSyntax(late),\n            new PeepholeReplaceKnownMethods(late),\n            new PeepholeFoldConstants(late),\n            new ReorderConstantExpression());\n    }\n  };",
        "begin_line": 1066,
        "end_line": 1079,
        "comment": " Same as peepholeOptimizations but aggressively merges code together "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkVars",
        "snippet": "  final HotSwapPassFactory checkVars =\n      new HotSwapPassFactory(\"checkVars\", true) {\n    @Override\n    protected HotSwapCompilerPass create(AbstractCompiler compiler) {\n      return new VarCheck(compiler);\n    }\n  };",
        "begin_line": 1082,
        "end_line": 1088,
        "comment": " Checks that all variables are defined. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkRegExp",
        "snippet": "  final PassFactory checkRegExp =\n      new PassFactory(\"checkRegExp\", true) {\n    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      final CheckRegExp pass = new CheckRegExp(compiler);\n\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node root) {\n          pass.process(externs, root);\n          compiler.setHasRegExpGlobalReferences(\n              pass.isGlobalRegExpPropertiesUsed());\n        }\n      };\n    }\n  };",
        "begin_line": 1091,
        "end_line": 1106,
        "comment": " Checks for RegExp references. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkVariableReferences",
        "snippet": "  final HotSwapPassFactory checkVariableReferences =\n      new HotSwapPassFactory(\"checkVariableReferences\", true) {\n    @Override\n    protected HotSwapCompilerPass create(AbstractCompiler compiler) {\n      return new VariableReferenceCheck(\n          compiler, options.aggressiveVarCheck);\n    }\n  };",
        "begin_line": 1109,
        "end_line": 1116,
        "comment": " Checks that references to variables look reasonable. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.objectPropertyStringPreprocess",
        "snippet": "  final PassFactory objectPropertyStringPreprocess =\n      new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new ObjectPropertyStringPreprocess(compiler);\n    }\n  };",
        "begin_line": 1119,
        "end_line": 1125,
        "comment": " Pre-process goog.testing.ObjectPropertyString. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.resolveTypes",
        "snippet": "  final HotSwapPassFactory resolveTypes =\n      new HotSwapPassFactory(\"resolveTypes\", true) {\n    @Override\n    protected HotSwapCompilerPass create(AbstractCompiler compiler) {\n      return new GlobalTypeResolver(compiler);\n    }\n  };",
        "begin_line": 1128,
        "end_line": 1134,
        "comment": " Creates a typed scope and adds types to the type registry. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.clearTypedScopePass",
        "snippet": "  final PassFactory clearTypedScopePass =\n      new PassFactory(\"clearTypedScopePass\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new ClearTypedScope();\n    }\n  };",
        "begin_line": 1137,
        "end_line": 1143,
        "comment": " Clears the typed scope when we're done. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.inferTypes",
        "snippet": "  final HotSwapPassFactory inferTypes =\n      new HotSwapPassFactory(\"inferTypes\", true) {\n    @Override\n    protected HotSwapCompilerPass create(final AbstractCompiler compiler) {\n      return new HotSwapCompilerPass() {\n        @Override\n        public void process(Node externs, Node root) {\n          Preconditions.checkNotNull(topScope);\n          Preconditions.checkNotNull(getTypedScopeCreator());\n\n          makeTypeInference(compiler).process(externs, root);\n        }\n        @Override\n        public void hotSwapScript(Node scriptRoot, Node originalRoot) {\n          makeTypeInference(compiler).inferAllScopes(scriptRoot);\n        }\n      };\n    }\n  };",
        "begin_line": 1146,
        "end_line": 1164,
        "comment": " Runs type inference. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.inferJsDocInfo",
        "snippet": "  final HotSwapPassFactory inferJsDocInfo =\n      new HotSwapPassFactory(\"inferJsDocInfo\", true) {\n  @Override\n  protected HotSwapCompilerPass create(final AbstractCompiler compiler) {\n    return new HotSwapCompilerPass() {\n      @Override\n      public void process(Node externs, Node root) {\n        Preconditions.checkNotNull(topScope);\n        Preconditions.checkNotNull(getTypedScopeCreator());\n\n        makeInferJsDocInfo(compiler).process(externs, root);\n      }\n      @Override\n      public void hotSwapScript(Node scriptRoot, Node originalRoot) {\n        makeInferJsDocInfo(compiler).hotSwapScript(scriptRoot, originalRoot);\n      }\n    };\n  }\n};",
        "begin_line": 1166,
        "end_line": 1184,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkTypes",
        "snippet": "  final HotSwapPassFactory checkTypes =\n      new HotSwapPassFactory(\"checkTypes\", true) {\n    @Override\n    protected HotSwapCompilerPass create(final AbstractCompiler compiler) {\n      return new HotSwapCompilerPass() {\n        @Override\n        public void process(Node externs, Node root) {\n          Preconditions.checkNotNull(topScope);\n          Preconditions.checkNotNull(getTypedScopeCreator());\n\n          TypeCheck check = makeTypeCheck(compiler);\n          check.process(externs, root);\n          compiler.getErrorManager().setTypedPercent(check.getTypedPercent());\n        }\n        @Override\n        public void hotSwapScript(Node scriptRoot, Node originalRoot) {\n          makeTypeCheck(compiler).check(scriptRoot, false);\n        }\n      };\n    }\n  };",
        "begin_line": 1187,
        "end_line": 1207,
        "comment": " Checks type usage "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkControlFlow",
        "snippet": "  final HotSwapPassFactory checkControlFlow =\n      new HotSwapPassFactory(\"checkControlFlow\", true) {\n    @Override\n    protected HotSwapCompilerPass create(AbstractCompiler compiler) {\n      List<Callback> callbacks = Lists.newArrayList();\n      if (options.checkUnreachableCode.isOn()) {\n        callbacks.add(\n            new CheckUnreachableCode(compiler, options.checkUnreachableCode));\n      }\n      if (options.checkMissingReturn.isOn() && options.checkTypes) {\n        callbacks.add(\n            new CheckMissingReturn(compiler, options.checkMissingReturn));\n      }\n      return combineChecks(compiler, callbacks);\n    }\n  };",
        "begin_line": 1213,
        "end_line": 1228,
        "comment": "\n   * Checks possible execution paths of the program for problems: missing return\n   * statements and dead code.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkAccessControls",
        "snippet": "  final HotSwapPassFactory checkAccessControls =\n      new HotSwapPassFactory(\"checkAccessControls\", true) {\n    @Override\n    protected HotSwapCompilerPass create(AbstractCompiler compiler) {\n      return new CheckAccessControls(compiler);\n    }\n  };",
        "begin_line": 1231,
        "end_line": 1237,
        "comment": " Checks access controls. Depends on type-inference. "
    },
    {
        "class_name": "com.google.javascript.jscomp.GlobalTypeResolver",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.GlobalTypeResolver.compiler",
        "snippet": "    private final AbstractCompiler compiler;",
        "begin_line": 1249,
        "end_line": 1249,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkGlobalNames",
        "snippet": "  final PassFactory checkGlobalNames =\n      new PassFactory(\"checkGlobalNames\", true) {\n    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node jsRoot) {\n          // Create a global namespace for analysis by check passes.\n          // Note that this class does all heavy computation lazily,\n          // so it's OK to create it here.\n          namespaceForChecks = new GlobalNamespace(compiler, externs, jsRoot);\n          new CheckGlobalNames(compiler, options.checkGlobalNamesLevel)\n              .injectNamespace(namespaceForChecks).process(externs, jsRoot);\n        }\n      };\n    }\n  };",
        "begin_line": 1278,
        "end_line": 1294,
        "comment": " Checks global name usage. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkStrictMode",
        "snippet": "  final PassFactory checkStrictMode =\n      new PassFactory(\"checkStrictMode\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new StrictModeCheck(compiler,\n          !options.checkSymbols,  // don't check variables twice\n          !options.checkCaja);    // disable eval check if not Caja\n    }\n  };",
        "begin_line": 1297,
        "end_line": 1305,
        "comment": " Checks that the code is ES5 or Caja compliant. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.processTweaks",
        "snippet": "  final PassFactory processTweaks = new PassFactory(\"processTweaks\", true) {\n    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node jsRoot) {\n          new ProcessTweaks(compiler,\n              options.getTweakProcessing().shouldStrip(),\n              options.getTweakReplacements()).process(externs, jsRoot);\n        }\n      };\n    }\n  };",
        "begin_line": 1308,
        "end_line": 1320,
        "comment": " Process goog.tweak.getTweak() calls. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.processDefines",
        "snippet": "  final PassFactory processDefines = new PassFactory(\"processDefines\", true) {\n    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node jsRoot) {\n          Map<String, Node> replacements = getAdditionalReplacements(options);\n          replacements.putAll(options.getDefineReplacements());\n\n          new ProcessDefines(compiler, replacements)\n              .injectNamespace(namespaceForChecks).process(externs, jsRoot);\n        }\n      };\n    }\n  };",
        "begin_line": 1323,
        "end_line": 1337,
        "comment": " Override @define-annotated constants. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.garbageCollectChecks",
        "snippet": "  final PassFactory garbageCollectChecks =\n      new HotSwapPassFactory(\"garbageCollectChecks\", true) {\n    @Override\n    protected HotSwapCompilerPass create(final AbstractCompiler compiler) {\n      return new HotSwapCompilerPass() {\n        @Override\n        public void process(Node externs, Node jsRoot) {\n          // Kill the global namespace so that it can be garbage collected\n          // after all passes are through with it.\n          namespaceForChecks = null;\n        }\n\n        @Override\n        public void hotSwapScript(Node scriptRoot, Node originalRoot) {\n          process(null, null);\n        }\n      };\n    }\n  };",
        "begin_line": 1340,
        "end_line": 1358,
        "comment": " Release references to data that is only needed during checks. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkConsts",
        "snippet": "  final PassFactory checkConsts = new PassFactory(\"checkConsts\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new ConstCheck(compiler);\n    }\n  };",
        "begin_line": 1361,
        "end_line": 1366,
        "comment": " Checks that all constants are not modified "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.computeFunctionNames",
        "snippet": "  final PassFactory computeFunctionNames =\n      new PassFactory(\"computeFunctionNames\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return ((functionNames = new FunctionNames(compiler)));\n    }\n  };",
        "begin_line": 1369,
        "end_line": 1375,
        "comment": " Computes the names of functions for later analysis. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.ignoreCajaProperties",
        "snippet": "  final PassFactory ignoreCajaProperties =\n      new PassFactory(\"ignoreCajaProperties\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new IgnoreCajaProperties(compiler);\n    }\n  };",
        "begin_line": 1378,
        "end_line": 1384,
        "comment": " Skips Caja-private properties in for-in loops "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.runtimeTypeCheck",
        "snippet": "  final PassFactory runtimeTypeCheck =\n      new PassFactory(\"runtimeTypeCheck\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new RuntimeTypeCheck(compiler,\n          options.runtimeTypeCheckLogFunction);\n    }\n  };",
        "begin_line": 1387,
        "end_line": 1394,
        "comment": " Inserts run-time type assertions for debugging. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.replaceIdGenerators",
        "snippet": "  final PassFactory replaceIdGenerators =\n      new PassFactory(\"replaceIdGenerators\", true) {\n    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override public void process(Node externs, Node root) {\n          ReplaceIdGenerators pass =\n              new ReplaceIdGenerators(\n                  compiler, options.idGenerators, options.generatePseudoNames,\n                  options.idGeneratorsMapSerialized);\n          pass.process(externs, root);\n          idGeneratorMap = pass.getSerializedIdMappings();\n        }\n      };\n    }\n  };",
        "begin_line": 1397,
        "end_line": 1412,
        "comment": " Generates unique ids. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.replaceStrings",
        "snippet": "  final PassFactory replaceStrings = new PassFactory(\"replaceStrings\", true) {\n    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override public void process(Node externs, Node root) {\n          ReplaceStrings pass = new ReplaceStrings(\n              compiler,\n              options.replaceStringsPlaceholderToken,\n              options.replaceStringsFunctionDescriptions,\n              options.replaceStringsReservedStrings,\n              options.replaceStringsInputMap);\n          pass.process(externs, root);\n          stringMap = pass.getStringMap();\n        }\n      };\n    }\n  };",
        "begin_line": 1415,
        "end_line": 1431,
        "comment": " Replace strings. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.optimizeArgumentsArray",
        "snippet": "  final PassFactory optimizeArgumentsArray =\n      new PassFactory(\"optimizeArgumentsArray\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new OptimizeArgumentsArray(compiler);\n    }\n  };",
        "begin_line": 1434,
        "end_line": 1440,
        "comment": " Optimizes the \"arguments\" array. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.closureCodeRemoval",
        "snippet": "  final PassFactory closureCodeRemoval =\n      new PassFactory(\"closureCodeRemoval\", true) {\n    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      return new ClosureCodeRemoval(compiler, options.removeAbstractMethods,\n          options.removeClosureAsserts);\n    }\n  };",
        "begin_line": 1443,
        "end_line": 1450,
        "comment": " Remove variables set to goog.abstractMethod. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.closureOptimizePrimitives",
        "snippet": "  final PassFactory closureOptimizePrimitives =\n      new PassFactory(\"closureOptimizePrimitives\", true) {\n    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      return new ClosureOptimizePrimitives(compiler);\n    }\n  };",
        "begin_line": 1453,
        "end_line": 1459,
        "comment": " Special case optimizations for closure functions. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.rescopeGlobalSymbols",
        "snippet": "  final PassFactory rescopeGlobalSymbols =\n      new PassFactory(\"rescopeGlobalSymbols\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new RescopeGlobalSymbols(compiler, options.renamePrefixNamespace);\n    }\n  };",
        "begin_line": 1462,
        "end_line": 1468,
        "comment": " Puts global symbols into a single object. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.collapseProperties",
        "snippet": "  final PassFactory collapseProperties =\n      new PassFactory(\"collapseProperties\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new CollapseProperties(\n          compiler, options.collapsePropertiesOnExternTypes,\n          !isInliningForbidden());\n    }\n  };",
        "begin_line": 1471,
        "end_line": 1479,
        "comment": " Collapses names in the global scope. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.collapseObjectLiterals",
        "snippet": "  final PassFactory collapseObjectLiterals =\n      new PassFactory(\"collapseObjectLiterals\", false) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new InlineObjectLiterals(\n          compiler, compiler.getUniqueNameIdSupplier());\n    }\n  };",
        "begin_line": 1482,
        "end_line": 1489,
        "comment": " Rewrite properties as variables. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.tightenTypesBuilder",
        "snippet": "  final PassFactory tightenTypesBuilder =\n      new PassFactory(\"tightenTypes\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      if (!options.checkTypes) {\n        return new ErrorPass(compiler, TIGHTEN_TYPES_WITHOUT_TYPE_CHECK);\n      }\n      tightenTypes = new TightenTypes(compiler);\n      return tightenTypes;\n    }\n  };",
        "begin_line": 1495,
        "end_line": 1505,
        "comment": "\n   * Try to infer the actual types, which may be narrower\n   * than the declared types.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.disambiguateProperties",
        "snippet": "  final PassFactory disambiguateProperties =\n      new PassFactory(\"disambiguateProperties\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      if (tightenTypes == null) {\n        return DisambiguateProperties.forJSTypeSystem(compiler,\n            options.propertyInvalidationErrors);\n      } else {\n        return DisambiguateProperties.forConcreteTypeSystem(\n            compiler, tightenTypes, options.propertyInvalidationErrors);\n      }\n    }\n  };",
        "begin_line": 1508,
        "end_line": 1520,
        "comment": " Devirtualize property names based on type information. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.chainCalls",
        "snippet": "  final PassFactory chainCalls = new PassFactory(\"chainCalls\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new ChainCalls(compiler);\n    }\n  };",
        "begin_line": 1525,
        "end_line": 1530,
        "comment": "\n   * Chain calls to functions that return this.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.devirtualizePrototypeMethods",
        "snippet": "  final PassFactory devirtualizePrototypeMethods =\n      new PassFactory(\"devirtualizePrototypeMethods\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new DevirtualizePrototypeMethods(compiler);\n    }\n  };",
        "begin_line": 1536,
        "end_line": 1542,
        "comment": "\n   * Rewrite instance methods as static methods, to make them easier\n   * to inline.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.optimizeCallsAndRemoveUnusedVars",
        "snippet": "  final PassFactory optimizeCallsAndRemoveUnusedVars =\n      new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      OptimizeCalls passes = new OptimizeCalls(compiler);\n      if (options.optimizeReturns) {\n        // Remove unused return values.\n        passes.addPass(new OptimizeReturns(compiler));\n      }\n\n      if (options.optimizeParameters) {\n        // Remove all parameters that are constants or unused.\n        passes.addPass(new OptimizeParameters(compiler));\n      }\n\n      if (options.optimizeCalls) {\n        boolean removeOnlyLocals = options.removeUnusedLocalVars\n            && !options.removeUnusedVars;\n        boolean preserveAnonymousFunctionNames =\n            options.anonymousFunctionNaming !=\n            AnonymousFunctionNamingPolicy.OFF;\n        passes.addPass(\n            new RemoveUnusedVars(compiler, !removeOnlyLocals,\n                preserveAnonymousFunctionNames, true));\n      }\n      return passes;\n    }\n  };",
        "begin_line": 1548,
        "end_line": 1575,
        "comment": "\n   * Optimizes unused function arguments, unused return values, and inlines\n   * constant parameters. Also runs RemoveUnusedVars.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.markPureFunctions",
        "snippet": "  final PassFactory markPureFunctions =\n      new PassFactory(\"markPureFunctions\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new PureFunctionIdentifier.Driver(\n          compiler, options.debugFunctionSideEffectsPath, false);\n    }\n  };",
        "begin_line": 1581,
        "end_line": 1588,
        "comment": "\n   * Look for function calls that are pure, and annotate them\n   * that way.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.markNoSideEffectCalls",
        "snippet": "  final PassFactory markNoSideEffectCalls =\n      new PassFactory(\"markNoSideEffectCalls\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new MarkNoSideEffectCalls(compiler);\n    }\n  };",
        "begin_line": 1594,
        "end_line": 1600,
        "comment": "\n   * Look for function calls that have no side effects, and annotate them\n   * that way.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.inlineVariables",
        "snippet": "  final PassFactory inlineVariables =\n      new PassFactory(\"inlineVariables\", false) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      if (isInliningForbidden()) {\n        // In old renaming schemes, inlining a variable can change whether\n        // or not a property is renamed. This is bad, and those old renaming\n        // schemes need to die.\n        return new ErrorPass(compiler, CANNOT_USE_PROTOTYPE_AND_VAR);\n      } else {\n        InlineVariables.Mode mode;\n        if (options.inlineVariables) {\n          mode = InlineVariables.Mode.ALL;\n        } else if (options.inlineLocalVariables) {\n          mode = InlineVariables.Mode.LOCALS_ONLY;\n        } else {\n          throw new IllegalStateException(\"No variable inlining option set.\");\n        }\n\n        return new InlineVariables(compiler, mode, true);\n      }\n    }\n  };",
        "begin_line": 1603,
        "end_line": 1625,
        "comment": " Inlines variables heuristically. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.inlineConstants",
        "snippet": "  final PassFactory inlineConstants =\n      new PassFactory(\"inlineConstants\", false) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new InlineVariables(\n          compiler, InlineVariables.Mode.CONSTANTS_ONLY, true);\n    }\n  };",
        "begin_line": 1628,
        "end_line": 1635,
        "comment": " Inlines variables that are marked as constants. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.minimizeExitPoints",
        "snippet": "  final PassFactory minimizeExitPoints =\n      new PassFactory(\"minimizeExitPoints\", false) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new MinimizeExitPoints(compiler);\n    }\n  };",
        "begin_line": 1640,
        "end_line": 1646,
        "comment": "\n   * Perform local control flow optimizations.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.removeUnreachableCode",
        "snippet": "  final PassFactory removeUnreachableCode =\n      new PassFactory(\"removeUnreachableCode\", false) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new UnreachableCodeElimination(compiler, true);\n    }\n  };",
        "begin_line": 1651,
        "end_line": 1657,
        "comment": "\n   * Use data flow analysis to remove dead branches.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.removeUnusedPrototypeProperties",
        "snippet": "  final PassFactory removeUnusedPrototypeProperties =\n      new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new RemoveUnusedPrototypeProperties(\n          compiler, options.removeUnusedPrototypePropertiesInExterns,\n          !options.removeUnusedVars);\n    }\n  };",
        "begin_line": 1662,
        "end_line": 1670,
        "comment": "\n   * Remove prototype properties that do not appear to be used.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.removeUnusedClassProperties",
        "snippet": "  final PassFactory removeUnusedClassProperties =\n      new PassFactory(\"removeUnusedClassProperties\", false) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new RemoveUnusedClassProperties(compiler);\n    }\n  };",
        "begin_line": 1675,
        "end_line": 1681,
        "comment": "\n   * Remove prototype properties that do not appear to be used.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.smartNamePass",
        "snippet": "  final PassFactory smartNamePass =\n      new PassFactory(\"smartNamePass\", true) {\n    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node root) {\n          NameAnalyzer na = new NameAnalyzer(compiler, false);\n          na.process(externs, root);\n\n          String reportPath = options.reportPath;\n          if (reportPath != null) {\n            try {\n              Files.write(na.getHtmlReport(), new File(reportPath),\n                  Charsets.UTF_8);\n            } catch (IOException e) {\n              compiler.report(JSError.make(REPORT_PATH_IO_ERROR, reportPath));\n            }\n          }\n\n          if (options.smartNameRemoval) {\n            na.removeUnreferenced();\n          }\n        }\n      };\n    }\n  };",
        "begin_line": 1687,
        "end_line": 1713,
        "comment": "\n   * Process smart name processing - removes unused classes and does referencing\n   * starting with minimum set of names.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.smartNamePass2",
        "snippet": "  final PassFactory smartNamePass2 = new PassFactory(\"smartNamePass\", true) {\n    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node root) {\n          NameAnalyzer na = new NameAnalyzer(compiler, false);\n          na.process(externs, root);\n          na.removeUnreferenced();\n        }\n      };\n    }\n  };",
        "begin_line": 1719,
        "end_line": 1731,
        "comment": "\n   * Process smart name processing - removes unused classes and does referencing\n   * starting with minimum set of names.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.inlineSimpleMethods",
        "snippet": "  final PassFactory inlineSimpleMethods =\n      new PassFactory(\"inlineSimpleMethods\", false) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new InlineSimpleMethods(compiler);\n    }\n  };",
        "begin_line": 1734,
        "end_line": 1740,
        "comment": " Inlines simple methods, like getters "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.deadAssignmentsElimination",
        "snippet": "  final PassFactory deadAssignmentsElimination =\n      new PassFactory(\"deadAssignmentsElimination\", false) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new DeadAssignmentsElimination(compiler);\n    }\n  };",
        "begin_line": 1743,
        "end_line": 1749,
        "comment": " Kills dead assignments. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.inlineFunctions",
        "snippet": "  final PassFactory inlineFunctions =\n      new PassFactory(\"inlineFunctions\", false) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      boolean enableBlockInlining = !isInliningForbidden();\n      return new InlineFunctions(\n          compiler,\n          compiler.getUniqueNameIdSupplier(),\n          options.inlineFunctions,\n          options.inlineLocalFunctions,\n          enableBlockInlining,\n          options.assumeStrictThis()\n              || options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT,\n          true /* assumeMinimumCapture */);\n    }\n  };",
        "begin_line": 1752,
        "end_line": 1767,
        "comment": " Inlines function calls. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.inlineProperties",
        "snippet": "  final PassFactory inlineProperties =\n      new PassFactory(\"inlineProperties\", false) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new InlineProperties(compiler);\n    }\n  };",
        "begin_line": 1770,
        "end_line": 1776,
        "comment": " Inlines constant properties. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.removeUnusedVars",
        "snippet": "  final PassFactory removeUnusedVars =\n      new PassFactory(\"removeUnusedVars\", false) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      boolean removeOnlyLocals = options.removeUnusedLocalVars\n          && !options.removeUnusedVars;\n      boolean preserveAnonymousFunctionNames =\n          options.anonymousFunctionNaming != AnonymousFunctionNamingPolicy.OFF;\n      return new RemoveUnusedVars(\n          compiler,\n          !removeOnlyLocals,\n          preserveAnonymousFunctionNames,\n          false);\n    }\n  };",
        "begin_line": 1779,
        "end_line": 1793,
        "comment": " Removes variables that are never used. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.crossModuleCodeMotion",
        "snippet": "  final PassFactory crossModuleCodeMotion =\n      new PassFactory(\"crossModuleCodeMotion\", false) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new CrossModuleCodeMotion(compiler, compiler.getModuleGraph());\n    }\n  };",
        "begin_line": 1798,
        "end_line": 1804,
        "comment": "\n   * Move global symbols to a deeper common module\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.crossModuleMethodMotion",
        "snippet": "  final PassFactory crossModuleMethodMotion =\n      new PassFactory(\"crossModuleMethodMotion\", false) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new CrossModuleMethodMotion(\n          compiler, crossModuleIdGenerator,\n          // Only move properties in externs if we're not treating\n          // them as exports.\n          options.removeUnusedPrototypePropertiesInExterns);\n    }\n  };",
        "begin_line": 1809,
        "end_line": 1819,
        "comment": "\n   * Move methods to a deeper common module\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.specializeInitialModule",
        "snippet": "  final PassFactory specializeInitialModule =\n      new PassFactory(\"specializeInitialModule\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new SpecializeModule(compiler, devirtualizePrototypeMethods,\n          inlineFunctions, removeUnusedPrototypeProperties);\n    }\n  };",
        "begin_line": 1824,
        "end_line": 1831,
        "comment": "\n   * Specialize the initial module at the cost of later modules\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.flowSensitiveInlineVariables",
        "snippet": "  final PassFactory flowSensitiveInlineVariables =\n      new PassFactory(\"flowSensitiveInlineVariables\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new FlowSensitiveInlineVariables(compiler);\n    }\n  };",
        "begin_line": 1834,
        "end_line": 1840,
        "comment": " A data-flow based variable inliner. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.coalesceVariableNames",
        "snippet": "  final PassFactory coalesceVariableNames =\n      new PassFactory(\"coalesceVariableNames\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new CoalesceVariableNames(compiler, options.generatePseudoNames);\n    }\n  };",
        "begin_line": 1843,
        "end_line": 1849,
        "comment": " Uses register-allocation algorithms to use fewer variables. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.exploitAssign",
        "snippet": "  final PassFactory exploitAssign = new PassFactory(\"exploitAssign\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new PeepholeOptimizationsPass(compiler,\n          new ExploitAssigns());\n    }\n  };",
        "begin_line": 1855,
        "end_line": 1861,
        "comment": "\n   * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n   * {@code var x,y;}.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.collapseVariableDeclarations",
        "snippet": "  final PassFactory collapseVariableDeclarations =\n      new PassFactory(\"collapseVariableDeclarations\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new CollapseVariableDeclarations(compiler);\n    }\n  };",
        "begin_line": 1867,
        "end_line": 1873,
        "comment": "\n   * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n   * {@code var x,y;}.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.groupVariableDeclarations",
        "snippet": "  final PassFactory groupVariableDeclarations =\n      new PassFactory(\"groupVariableDeclarations\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new GroupVariableDeclarations(compiler);\n    }\n  };",
        "begin_line": 1878,
        "end_line": 1884,
        "comment": "\n   * Simple global collapses of variable declarations.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.extractPrototypeMemberDeclarations",
        "snippet": "  final PassFactory extractPrototypeMemberDeclarations =\n      new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new ExtractPrototypeMemberDeclarations(\n          compiler, Pattern.USE_GLOBAL_TEMP);\n    }\n  };",
        "begin_line": 1889,
        "end_line": 1896,
        "comment": "\n   * Extracts common sub-expressions.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.rewriteFunctionExpressions",
        "snippet": "  final PassFactory rewriteFunctionExpressions =\n      new PassFactory(\"rewriteFunctionExpressions\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new FunctionRewriter(compiler);\n    }\n  };",
        "begin_line": 1899,
        "end_line": 1905,
        "comment": " Rewrites common function definitions to be more compact. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.collapseAnonymousFunctions",
        "snippet": "  final PassFactory collapseAnonymousFunctions =\n      new PassFactory(\"collapseAnonymousFunctions\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new CollapseAnonymousFunctions(compiler);\n    }\n  };",
        "begin_line": 1908,
        "end_line": 1914,
        "comment": " Collapses functions to not use the VAR keyword. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.moveFunctionDeclarations",
        "snippet": "  final PassFactory moveFunctionDeclarations =\n      new PassFactory(\"moveFunctionDeclarations\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new MoveFunctionDeclarations(compiler);\n    }\n  };",
        "begin_line": 1917,
        "end_line": 1923,
        "comment": " Moves function declarations to the top, to simulate actual hoisting. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.nameUnmappedAnonymousFunctions",
        "snippet": "  final PassFactory nameUnmappedAnonymousFunctions =\n      new PassFactory(\"nameAnonymousFunctions\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new NameAnonymousFunctions(compiler);\n    }\n  };",
        "begin_line": 1925,
        "end_line": 1931,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.nameMappedAnonymousFunctions",
        "snippet": "  final PassFactory nameMappedAnonymousFunctions =\n      new PassFactory(\"nameAnonymousFunctions\", true) {\n    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override public void process(Node externs, Node root) {\n          NameAnonymousFunctionsMapped naf =\n              new NameAnonymousFunctionsMapped(\n                  compiler, options.inputAnonymousFunctionNamingMap);\n          naf.process(externs, root);\n          anonymousFunctionNameMap = naf.getFunctionMap();\n        }\n      };\n    }\n  };",
        "begin_line": 1933,
        "end_line": 1947,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.aliasExternals",
        "snippet": "  final PassFactory aliasExternals = new PassFactory(\"aliasExternals\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new AliasExternals(compiler, compiler.getModuleGraph(),\n          options.unaliasableGlobals, options.aliasableGlobals);\n    }\n  };",
        "begin_line": 1950,
        "end_line": 1956,
        "comment": " Alias external symbols. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.aliasStrings",
        "snippet": "  final PassFactory aliasStrings = new PassFactory(\"aliasStrings\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new AliasStrings(\n          compiler,\n          compiler.getModuleGraph(),\n          options.aliasAllStrings ? null : options.aliasableStrings,\n          options.aliasStringsBlacklist,\n          options.outputJsStringUsage);\n    }\n  };",
        "begin_line": 1962,
        "end_line": 1972,
        "comment": "\n   * Alias string literals with global variables, to avoid creating lots of\n   * transient objects.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.aliasKeywords",
        "snippet": "  final PassFactory aliasKeywords = new PassFactory(\"aliasKeywords\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new AliasKeywords(compiler);\n    }\n  };",
        "begin_line": 1975,
        "end_line": 1980,
        "comment": " Aliases common keywords (true, false) "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.objectPropertyStringPostprocess",
        "snippet": "  final PassFactory objectPropertyStringPostprocess =\n      new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new ObjectPropertyStringPostprocess(compiler);\n    }\n  };",
        "begin_line": 1983,
        "end_line": 1989,
        "comment": " Handling for the ObjectPropertyString primitive. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.ambiguateProperties",
        "snippet": "  final PassFactory ambiguateProperties =\n      new PassFactory(\"ambiguateProperties\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new AmbiguateProperties(\n          compiler, options.anonymousFunctionNaming.getReservedCharacters());\n    }\n  };",
        "begin_line": 1995,
        "end_line": 2002,
        "comment": "\n   * Renames properties so that the two properties that never appear on\n   * the same object get the same name.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.markUnnormalized",
        "snippet": "  final PassFactory markUnnormalized =\n      new PassFactory(\"markUnnormalized\", true) {\n    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override public void process(Node externs, Node root) {\n          compiler.setLifeCycleStage(LifeCycleStage.RAW);\n        }\n      };\n    }\n  };",
        "begin_line": 2007,
        "end_line": 2017,
        "comment": "\n   * Mark the point at which the normalized AST assumptions no longer hold.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.denormalize",
        "snippet": "  final PassFactory denormalize = new PassFactory(\"denormalize\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new Denormalize(compiler);\n    }\n  };",
        "begin_line": 2020,
        "end_line": 2025,
        "comment": " Denormalize the AST for code generation. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.invertContextualRenaming",
        "snippet": "  final PassFactory invertContextualRenaming =\n      new PassFactory(\"invertContextualRenaming\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler);\n    }\n  };",
        "begin_line": 2028,
        "end_line": 2034,
        "comment": " Inverting name normalization. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.renameProperties",
        "snippet": "  final PassFactory renameProperties =\n      new PassFactory(\"renameProperties\", true) {\n    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      final VariableMap prevPropertyMap = options.inputPropertyMap;\n      return new CompilerPass() {\n        @Override public void process(Node externs, Node root) {\n          propertyMap = runPropertyRenaming(\n              compiler, prevPropertyMap, externs, root);\n        }\n      };\n    }\n  };",
        "begin_line": 2039,
        "end_line": 2051,
        "comment": "\n   * Renames properties.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.renameVars",
        "snippet": "  final PassFactory renameVars = new PassFactory(\"renameVars\", true) {\n    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      final VariableMap prevVariableMap = options.inputVariableMap;\n      return new CompilerPass() {\n        @Override public void process(Node externs, Node root) {\n          variableMap = runVariableRenaming(\n              compiler, prevVariableMap, externs, root);\n        }\n      };\n    }\n  };",
        "begin_line": 2085,
        "end_line": 2096,
        "comment": " Renames variables. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.renameLabels",
        "snippet": "  final PassFactory renameLabels = new PassFactory(\"renameLabels\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new RenameLabels(compiler);\n    }\n  };",
        "begin_line": 2125,
        "end_line": 2130,
        "comment": " Renames labels "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.convertToDottedProperties",
        "snippet": "  final PassFactory convertToDottedProperties =\n      new PassFactory(\"convertToDottedProperties\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new ConvertToDottedProperties(compiler);\n    }\n  };",
        "begin_line": 2133,
        "end_line": 2139,
        "comment": " Convert bracket access to dot access "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.sanityCheckAst",
        "snippet": "  final PassFactory sanityCheckAst = new PassFactory(\"sanityCheckAst\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new AstValidator();\n    }\n  };",
        "begin_line": 2142,
        "end_line": 2147,
        "comment": " Checks that all variables are defined. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.sanityCheckVars",
        "snippet": "  final PassFactory sanityCheckVars = new PassFactory(\"sanityCheckVars\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new VarCheck(compiler, true);\n    }\n  };",
        "begin_line": 2150,
        "end_line": 2155,
        "comment": " Checks that all variables are defined. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.instrumentFunctions",
        "snippet": "  final PassFactory instrumentFunctions =\n      new PassFactory(\"instrumentFunctions\", true) {\n    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override public void process(Node externs, Node root) {\n          try {\n            FileReader templateFile =\n                new FileReader(options.instrumentationTemplate);\n            (new InstrumentFunctions(\n                compiler, functionNames,\n                options.instrumentationTemplate,\n                options.appNameStr,\n                templateFile)).process(externs, root);\n          } catch (IOException e) {\n            compiler.report(\n                JSError.make(AbstractCompiler.READ_ERROR,\n                    options.instrumentationTemplate));\n          }\n        }\n      };\n    }\n  };",
        "begin_line": 2158,
        "end_line": 2180,
        "comment": " Adds instrumentations according to an instrumentation template. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.printNameReferenceGraph",
        "snippet": "  final PassFactory printNameReferenceGraph =\n    new PassFactory(\"printNameReferenceGraph\", true) {\n    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node jsRoot) {\n          NameReferenceGraphConstruction gc =\n              new NameReferenceGraphConstruction(compiler);\n          gc.process(externs, jsRoot);\n          String graphFileName = options.nameReferenceGraphPath;\n          try {\n            Files.write(DotFormatter.toDot(gc.getNameReferenceGraph()),\n                new File(graphFileName),\n                Charsets.UTF_8);\n          } catch (IOException e) {\n            compiler.report(\n                JSError.make(\n                    NAME_REF_GRAPH_FILE_ERROR, e.getMessage(), graphFileName));\n          }\n        }\n      };\n    }\n  };",
        "begin_line": 2251,
        "end_line": 2274,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.printNameReferenceReport",
        "snippet": "  final PassFactory printNameReferenceReport =\n      new PassFactory(\"printNameReferenceReport\", true) {\n    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node jsRoot) {\n          NameReferenceGraphConstruction gc =\n              new NameReferenceGraphConstruction(compiler);\n          String reportFileName = options.nameReferenceReportPath;\n          try {\n            NameReferenceGraphReport report =\n                new NameReferenceGraphReport(gc.getNameReferenceGraph());\n            Files.write(report.getHtmlReport(),\n                new File(reportFileName),\n                Charsets.UTF_8);\n          } catch (IOException e) {\n            compiler.report(\n                JSError.make(\n                    NAME_REF_REPORT_FILE_ERROR,\n                    e.getMessage(),\n                    reportFileName));\n          }\n        }\n      };\n    }\n  };",
        "begin_line": 2276,
        "end_line": 2302,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ObjectPropertyStringPostprocess",
        "src_path": "src/com/google/javascript/jscomp/ObjectPropertyStringPostprocess.java",
        "signature": "com.google.javascript.jscomp.ObjectPropertyStringPostprocess.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN",
        "snippet": "  static final DiagnosticType UNEXPECTED_TOKEN = DiagnosticType.error(\n      \"JSC_INTERNAL_ERROR_UNEXPECTED_TOKEN\",\n      \"Internal Error: Don't know how to handle {0}\");",
        "begin_line": 60,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.BAD_DELETE",
        "snippet": "  static final DiagnosticType BAD_DELETE =\n      DiagnosticType.warning(\n          \"JSC_BAD_DELETE_OPERAND\",\n          \"delete operator needs a reference operand\");",
        "begin_line": 69,
        "end_line": 72,
        "comment": " TODO(nicksantos): delete this"
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT",
        "snippet": "  protected static final String OVERRIDING_PROTOTYPE_WITH_NON_OBJECT =\n      \"overriding prototype with non-object\";",
        "begin_line": 79,
        "end_line": 80,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST",
        "snippet": "  static final DiagnosticType DETERMINISTIC_TEST =\n      DiagnosticType.warning(\n          \"JSC_DETERMINISTIC_TEST\",\n          \"condition always evaluates to {2}\\n\" +\n          \"left : {0}\\n\" +\n          \"right: {1}\");",
        "begin_line": 84,
        "end_line": 89,
        "comment": " TypedScopeCreator has been merged with the type checker."
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT",
        "snippet": "  static final DiagnosticType DETERMINISTIC_TEST_NO_RESULT =\n      DiagnosticType.warning(\n          \"JSC_DETERMINISTIC_TEST_NO_RESULT\",\n          \"condition always evaluates to the same value\\n\" +\n          \"left : {0}\\n\" +\n          \"right: {1}\");",
        "begin_line": 91,
        "end_line": 96,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT",
        "snippet": "  static final DiagnosticType INEXISTENT_ENUM_ELEMENT =\n      DiagnosticType.warning(\n          \"JSC_INEXISTENT_ENUM_ELEMENT\",\n          \"element {0} does not exist on this enum\");",
        "begin_line": 98,
        "end_line": 101,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY",
        "snippet": "  static final DiagnosticType INEXISTENT_PROPERTY =\n      DiagnosticType.disabled(\n          \"JSC_INEXISTENT_PROPERTY\",\n          \"Property {0} never defined on {1}\");",
        "begin_line": 105,
        "end_line": 108,
        "comment": " well-typed externs."
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR",
        "snippet": "  protected static final DiagnosticType NOT_A_CONSTRUCTOR =\n      DiagnosticType.warning(\n          \"JSC_NOT_A_CONSTRUCTOR\",\n          \"cannot instantiate non-constructor\");",
        "begin_line": 110,
        "end_line": 113,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.BIT_OPERATION",
        "snippet": "  static final DiagnosticType BIT_OPERATION =\n      DiagnosticType.warning(\n          \"JSC_BAD_TYPE_FOR_BIT_OPERATION\",\n          \"operator {0} cannot be applied to {1}\");",
        "begin_line": 115,
        "end_line": 118,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE",
        "snippet": "  static final DiagnosticType NOT_CALLABLE =\n      DiagnosticType.warning(\n          \"JSC_NOT_FUNCTION_TYPE\",\n          \"{0} expressions are not callable\");",
        "begin_line": 120,
        "end_line": 123,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE",
        "snippet": "  static final DiagnosticType CONSTRUCTOR_NOT_CALLABLE =\n      DiagnosticType.warning(\n          \"JSC_CONSTRUCTOR_NOT_CALLABLE\",\n          \"Constructor {0} should be called with the \\\"new\\\" keyword\");",
        "begin_line": 125,
        "end_line": 128,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE",
        "snippet": "  static final DiagnosticType FUNCTION_MASKS_VARIABLE =\n      DiagnosticType.warning(\n          \"JSC_FUNCTION_MASKS_VARIABLE\",\n          \"function {0} masks variable (IE bug)\");",
        "begin_line": 130,
        "end_line": 133,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF",
        "snippet": "  static final DiagnosticType MULTIPLE_VAR_DEF = DiagnosticType.warning(\n      \"JSC_MULTIPLE_VAR_DEF\",\n      \"declaration of multiple variables with shared type information\");",
        "begin_line": 135,
        "end_line": 137,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.ENUM_DUP",
        "snippet": "  static final DiagnosticType ENUM_DUP = DiagnosticType.error(\"JSC_ENUM_DUP\",\n      \"enum element {0} already defined\");",
        "begin_line": 139,
        "end_line": 140,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT",
        "snippet": "  static final DiagnosticType ENUM_NOT_CONSTANT =\n      DiagnosticType.warning(\"JSC_ENUM_NOT_CONSTANT\",\n          \"enum key {0} must be a syntactic constant\");",
        "begin_line": 142,
        "end_line": 144,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION",
        "snippet": "  static final DiagnosticType INVALID_INTERFACE_MEMBER_DECLARATION =\n      DiagnosticType.warning(\n          \"JSC_INVALID_INTERFACE_MEMBER_DECLARATION\",\n          \"interface members can only be empty property declarations,\"\n          + \" empty functions{0}\");",
        "begin_line": 146,
        "end_line": 150,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY",
        "snippet": "  static final DiagnosticType INTERFACE_FUNCTION_NOT_EMPTY =\n      DiagnosticType.warning(\n          \"JSC_INTERFACE_FUNCTION_NOT_EMPTY\",\n          \"interface member functions must have an empty body\");",
        "begin_line": 152,
        "end_line": 155,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE",
        "snippet": "  static final DiagnosticType CONFLICTING_EXTENDED_TYPE =\n      DiagnosticType.warning(\n          \"JSC_CONFLICTING_EXTENDED_TYPE\",\n          \"{1} cannot extend this type; {0}s can only extend {0}s\");",
        "begin_line": 157,
        "end_line": 160,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE",
        "snippet": "  static final DiagnosticType CONFLICTING_IMPLEMENTED_TYPE =\n    DiagnosticType.warning(\n        \"JSC_CONFLICTING_IMPLEMENTED_TYPE\",\n        \"{0} cannot implement this type; \" +\n        \"an interface can only extend, but not implement interfaces\");",
        "begin_line": 162,
        "end_line": 166,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE",
        "snippet": "  static final DiagnosticType BAD_IMPLEMENTED_TYPE =\n      DiagnosticType.warning(\n          \"JSC_IMPLEMENTS_NON_INTERFACE\",\n          \"can only implement interfaces\");",
        "begin_line": 168,
        "end_line": 171,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY",
        "snippet": "  static final DiagnosticType HIDDEN_SUPERCLASS_PROPERTY =\n      DiagnosticType.warning(\n          \"JSC_HIDDEN_SUPERCLASS_PROPERTY\",\n          \"property {0} already defined on superclass {1}; \" +\n          \"use @override to override it\");",
        "begin_line": 173,
        "end_line": 177,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY",
        "snippet": "  static final DiagnosticType HIDDEN_INTERFACE_PROPERTY =\n      DiagnosticType.warning(\n          \"JSC_HIDDEN_INTERFACE_PROPERTY\",\n          \"property {0} already defined on interface {1}; \" +\n          \"use @override to override it\");",
        "begin_line": 179,
        "end_line": 183,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH",
        "snippet": "  static final DiagnosticType HIDDEN_SUPERCLASS_PROPERTY_MISMATCH =\n      DiagnosticType.warning(\"JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH\",\n          \"mismatch of the {0} property type and the type \" +\n          \"of the property it overrides from superclass {1}\\n\" +\n          \"original: {2}\\n\" +\n          \"override: {3}\");",
        "begin_line": 185,
        "end_line": 190,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE",
        "snippet": "  static final DiagnosticType UNKNOWN_OVERRIDE =\n      DiagnosticType.warning(\n          \"JSC_UNKNOWN_OVERRIDE\",\n          \"property {0} not defined on any superclass of {1}\");",
        "begin_line": 192,
        "end_line": 195,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE",
        "snippet": "  static final DiagnosticType INTERFACE_METHOD_OVERRIDE =\n      DiagnosticType.warning(\n          \"JSC_INTERFACE_METHOD_OVERRIDE\",\n          \"property {0} is already defined by the {1} extended interface\");",
        "begin_line": 197,
        "end_line": 200,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE",
        "snippet": "  static final DiagnosticType UNKNOWN_EXPR_TYPE =\n      DiagnosticType.warning(\"JSC_UNKNOWN_EXPR_TYPE\",\n          \"could not determine the type of this expression\");",
        "begin_line": 202,
        "end_line": 204,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE",
        "snippet": "  static final DiagnosticType UNRESOLVED_TYPE =\n      DiagnosticType.warning(\"JSC_UNRESOLVED_TYPE\",\n          \"could not resolve the name {0} to a type\");",
        "begin_line": 206,
        "end_line": 208,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT",
        "snippet": "  static final DiagnosticType WRONG_ARGUMENT_COUNT =\n      DiagnosticType.warning(\n          \"JSC_WRONG_ARGUMENT_COUNT\",\n          \"Function {0}: called with {1} argument(s). \" +\n          \"Function requires at least {2} argument(s){3}.\");",
        "begin_line": 210,
        "end_line": 214,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST",
        "snippet": "  static final DiagnosticType ILLEGAL_IMPLICIT_CAST =\n      DiagnosticType.warning(\n          \"JSC_ILLEGAL_IMPLICIT_CAST\",\n          \"Illegal annotation on {0}. @implicitCast may only be used in \" +\n          \"externs.\");",
        "begin_line": 216,
        "end_line": 220,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE",
        "snippet": "  static final DiagnosticType INCOMPATIBLE_EXTENDED_PROPERTY_TYPE =\n      DiagnosticType.warning(\n          \"JSC_INCOMPATIBLE_EXTENDED_PROPERTY_TYPE\",\n          \"Interface {0} has a property {1} with incompatible types in \" +\n          \"its super interfaces {2} and {3}\");",
        "begin_line": 222,
        "end_line": 226,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE",
        "snippet": "  static final DiagnosticType EXPECTED_THIS_TYPE =\n      DiagnosticType.warning(\n          \"JSC_EXPECTED_THIS_TYPE\",\n          \"\\\"{0}\\\" must be called with a \\\"this\\\" type\");",
        "begin_line": 228,
        "end_line": 231,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.IN_USED_WITH_STRUCT",
        "snippet": "  static final DiagnosticType IN_USED_WITH_STRUCT =\n      DiagnosticType.warning(\"JSC_IN_USED_WITH_STRUCT\",\n                             \"Cannot use the IN operator with structs\");",
        "begin_line": 233,
        "end_line": 235,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.ILLEGAL_PROPERTY_CREATION",
        "snippet": "  static final DiagnosticType ILLEGAL_PROPERTY_CREATION =\n      DiagnosticType.warning(\"JSC_ILLEGAL_PROPERTY_CREATION\",\n                             \"Cannot add a property to a struct instance \" +\n                             \"after it is constructed.\");",
        "begin_line": 237,
        "end_line": 240,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.ILLEGAL_OBJLIT_KEY",
        "snippet": "  static final DiagnosticType ILLEGAL_OBJLIT_KEY =\n      DiagnosticType.warning(\n          \"ILLEGAL_OBJLIT_KEY\",\n          \"Illegal key, the object literal is a {0}\");",
        "begin_line": 242,
        "end_line": 245,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.ALL_DIAGNOSTICS",
        "snippet": "  static final DiagnosticGroup ALL_DIAGNOSTICS = new DiagnosticGroup(\n      DETERMINISTIC_TEST,\n      DETERMINISTIC_TEST_NO_RESULT,\n      INEXISTENT_ENUM_ELEMENT,\n      INEXISTENT_PROPERTY,\n      NOT_A_CONSTRUCTOR,\n      BIT_OPERATION,\n      NOT_CALLABLE,\n      CONSTRUCTOR_NOT_CALLABLE,\n      FUNCTION_MASKS_VARIABLE,\n      MULTIPLE_VAR_DEF,\n      ENUM_DUP,\n      ENUM_NOT_CONSTANT,\n      INVALID_INTERFACE_MEMBER_DECLARATION,\n      INTERFACE_FUNCTION_NOT_EMPTY,\n      CONFLICTING_EXTENDED_TYPE,\n      CONFLICTING_IMPLEMENTED_TYPE,\n      BAD_IMPLEMENTED_TYPE,\n      HIDDEN_SUPERCLASS_PROPERTY,\n      HIDDEN_INTERFACE_PROPERTY,\n      HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,\n      UNKNOWN_OVERRIDE,\n      INTERFACE_METHOD_OVERRIDE,\n      UNKNOWN_EXPR_TYPE,\n      UNRESOLVED_TYPE,\n      WRONG_ARGUMENT_COUNT,\n      ILLEGAL_IMPLICIT_CAST,\n      INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n      EXPECTED_THIS_TYPE,\n      IN_USED_WITH_STRUCT,\n      ILLEGAL_PROPERTY_CREATION,\n      ILLEGAL_OBJLIT_KEY,\n      RhinoErrorReporter.TYPE_PARSE_ERROR,\n      TypedScopeCreator.UNKNOWN_LENDS,\n      TypedScopeCreator.LENDS_ON_NON_OBJECT,\n      TypedScopeCreator.CTOR_INITIALIZER,\n      TypedScopeCreator.IFACE_INITIALIZER,\n      FunctionTypeBuilder.THIS_TYPE_NON_OBJECT);",
        "begin_line": 247,
        "end_line": 284,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 286,
        "end_line": 286,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.validator",
        "snippet": "  private final TypeValidator validator;",
        "begin_line": 287,
        "end_line": 287,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.reverseInterpreter",
        "snippet": "  private final ReverseAbstractInterpreter reverseInterpreter;",
        "begin_line": 289,
        "end_line": 289,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.typeRegistry",
        "snippet": "  private final JSTypeRegistry typeRegistry;",
        "begin_line": 291,
        "end_line": 291,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.topScope",
        "snippet": "  private Scope topScope;",
        "begin_line": 292,
        "end_line": 292,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.scopeCreator",
        "snippet": "  private MemoizedScopeCreator scopeCreator;",
        "begin_line": 294,
        "end_line": 294,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.reportMissingOverride",
        "snippet": "  private final CheckLevel reportMissingOverride;",
        "begin_line": 296,
        "end_line": 296,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.reportUnknownTypes",
        "snippet": "  private final CheckLevel reportUnknownTypes;",
        "begin_line": 297,
        "end_line": 297,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.reportMissingProperties",
        "snippet": "  private boolean reportMissingProperties = true;",
        "begin_line": 301,
        "end_line": 301,
        "comment": " explicitly turned off."
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.inferJSDocInfo",
        "snippet": "  private InferJSDocInfo inferJSDocInfo = null;",
        "begin_line": 303,
        "end_line": 303,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.typedCount",
        "snippet": "  private int typedCount = 0;",
        "begin_line": 306,
        "end_line": 306,
        "comment": " These fields are used to calculate the percentage of expressions typed."
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.nullCount",
        "snippet": "  private int nullCount = 0;",
        "begin_line": 307,
        "end_line": 307,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.unknownCount",
        "snippet": "  private int unknownCount = 0;",
        "begin_line": 308,
        "end_line": 308,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.inExterns",
        "snippet": "  private boolean inExterns;",
        "begin_line": 309,
        "end_line": 309,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.noTypeCheckSection",
        "snippet": "  private int noTypeCheckSection = 0;",
        "begin_line": 313,
        "end_line": 313,
        "comment": " code."
    },
    {
        "class_name": "com.google.javascript.jscomp.MemoizedScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/MemoizedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.MemoizedScopeCreator.scopes",
        "snippet": "  private final Map<Node, Scope> scopes = Maps.newHashMap();",
        "begin_line": 49,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MemoizedScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/MemoizedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.MemoizedScopeCreator.delegate",
        "snippet": "  private final ScopeCreator delegate;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionNames",
        "src_path": "src/com/google/javascript/jscomp/FunctionNames.java",
        "signature": "com.google.javascript.jscomp.FunctionNames.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 48,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionNames",
        "src_path": "src/com/google/javascript/jscomp/FunctionNames.java",
        "signature": "com.google.javascript.jscomp.FunctionNames.compiler",
        "snippet": "  private final transient AbstractCompiler compiler;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionNames",
        "src_path": "src/com/google/javascript/jscomp/FunctionNames.java",
        "signature": "com.google.javascript.jscomp.FunctionNames.functionMap",
        "snippet": "  private final Map<Node, FunctionRecord> functionMap = Maps.newLinkedHashMap();",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionNames",
        "src_path": "src/com/google/javascript/jscomp/FunctionNames.java",
        "signature": "com.google.javascript.jscomp.FunctionNames.functionListExtractor",
        "snippet": "  private final transient FunctionListExtractor functionListExtractor;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionRecord",
        "src_path": "src/com/google/javascript/jscomp/FunctionNames.java",
        "signature": "com.google.javascript.jscomp.FunctionRecord.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 110,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionRecord",
        "src_path": "src/com/google/javascript/jscomp/FunctionNames.java",
        "signature": "com.google.javascript.jscomp.FunctionRecord.id",
        "snippet": "    public final int id;",
        "begin_line": 112,
        "end_line": 112,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionRecord",
        "src_path": "src/com/google/javascript/jscomp/FunctionNames.java",
        "signature": "com.google.javascript.jscomp.FunctionRecord.parent",
        "snippet": "    public final Node parent;",
        "begin_line": 113,
        "end_line": 113,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionRecord",
        "src_path": "src/com/google/javascript/jscomp/FunctionNames.java",
        "signature": "com.google.javascript.jscomp.FunctionRecord.name",
        "snippet": "    public String name;",
        "begin_line": 114,
        "end_line": 114,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionListExtractor",
        "src_path": "src/com/google/javascript/jscomp/FunctionNames.java",
        "signature": "com.google.javascript.jscomp.FunctionListExtractor.functionMap",
        "snippet": "    private final Map<Node, FunctionRecord> functionMap;",
        "begin_line": 124,
        "end_line": 124,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionListExtractor",
        "src_path": "src/com/google/javascript/jscomp/FunctionNames.java",
        "signature": "com.google.javascript.jscomp.FunctionListExtractor.nextId",
        "snippet": "    private int nextId = 0;",
        "begin_line": 125,
        "end_line": 125,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionExpressionNamer",
        "src_path": "src/com/google/javascript/jscomp/FunctionNames.java",
        "signature": "com.google.javascript.jscomp.FunctionExpressionNamer.DELIMITER",
        "snippet": "    private static final char DELIMITER = '.';",
        "begin_line": 148,
        "end_line": 148,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionExpressionNamer",
        "src_path": "src/com/google/javascript/jscomp/FunctionNames.java",
        "signature": "com.google.javascript.jscomp.FunctionExpressionNamer.extractor",
        "snippet": "    private static final NodeNameExtractor extractor =\n        new NodeNameExtractor(DELIMITER);",
        "begin_line": 149,
        "end_line": 150,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionExpressionNamer",
        "src_path": "src/com/google/javascript/jscomp/FunctionNames.java",
        "signature": "com.google.javascript.jscomp.FunctionExpressionNamer.functionMap",
        "snippet": "    private final Map<Node, FunctionRecord> functionMap;",
        "begin_line": 151,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CollapseProperties",
        "src_path": "src/com/google/javascript/jscomp/CollapseProperties.java",
        "signature": "com.google.javascript.jscomp.CollapseProperties.UNSAFE_NAMESPACE_WARNING",
        "snippet": "  static final DiagnosticType UNSAFE_NAMESPACE_WARNING =\n      DiagnosticType.warning(\n          \"JSC_UNSAFE_NAMESPACE\",\n          \"incomplete alias created for namespace {0}\");",
        "begin_line": 77,
        "end_line": 80,
        "comment": " Warnings"
    },
    {
        "class_name": "com.google.javascript.jscomp.CollapseProperties",
        "src_path": "src/com/google/javascript/jscomp/CollapseProperties.java",
        "signature": "com.google.javascript.jscomp.CollapseProperties.NAMESPACE_REDEFINED_WARNING",
        "snippet": "  static final DiagnosticType NAMESPACE_REDEFINED_WARNING =\n      DiagnosticType.warning(\n          \"JSC_NAMESPACE_REDEFINED\",\n          \"namespace {0} should not be redefined\");",
        "begin_line": 82,
        "end_line": 85,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CollapseProperties",
        "src_path": "src/com/google/javascript/jscomp/CollapseProperties.java",
        "signature": "com.google.javascript.jscomp.CollapseProperties.UNSAFE_THIS",
        "snippet": "  static final DiagnosticType UNSAFE_THIS = DiagnosticType.warning(\n      \"JSC_UNSAFE_THIS\",\n      \"dangerous use of 'this' in static method {0}\");",
        "begin_line": 87,
        "end_line": 89,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CollapseProperties",
        "src_path": "src/com/google/javascript/jscomp/CollapseProperties.java",
        "signature": "com.google.javascript.jscomp.CollapseProperties.compiler",
        "snippet": "  private AbstractCompiler compiler;",
        "begin_line": 91,
        "end_line": 91,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CollapseProperties",
        "src_path": "src/com/google/javascript/jscomp/CollapseProperties.java",
        "signature": "com.google.javascript.jscomp.CollapseProperties.globalNames",
        "snippet": "  private List<Name> globalNames;",
        "begin_line": 94,
        "end_line": 94,
        "comment": " Global namespace tree "
    },
    {
        "class_name": "com.google.javascript.jscomp.CollapseProperties",
        "src_path": "src/com/google/javascript/jscomp/CollapseProperties.java",
        "signature": "com.google.javascript.jscomp.CollapseProperties.nameMap",
        "snippet": "  private Map<String, Name> nameMap;",
        "begin_line": 97,
        "end_line": 97,
        "comment": " Maps names (e.g. \"a.b.c\") to nodes in the global namespace tree "
    },
    {
        "class_name": "com.google.javascript.jscomp.CollapseProperties",
        "src_path": "src/com/google/javascript/jscomp/CollapseProperties.java",
        "signature": "com.google.javascript.jscomp.CollapseProperties.collapsePropertiesOnExternTypes",
        "snippet": "  private final boolean collapsePropertiesOnExternTypes;",
        "begin_line": 99,
        "end_line": 99,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CollapseProperties",
        "src_path": "src/com/google/javascript/jscomp/CollapseProperties.java",
        "signature": "com.google.javascript.jscomp.CollapseProperties.inlineAliases",
        "snippet": "  private final boolean inlineAliases;",
        "begin_line": 100,
        "end_line": 100,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CleanupPasses",
        "src_path": "src/com/google/javascript/jscomp/CleanupPasses.java",
        "signature": "com.google.javascript.jscomp.CleanupPasses.state",
        "snippet": "  private State state;",
        "begin_line": 38,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CleanupPasses",
        "src_path": "src/com/google/javascript/jscomp/CleanupPasses.java",
        "signature": "com.google.javascript.jscomp.CleanupPasses.fieldCleanupPassFactory",
        "snippet": "  final PassFactory fieldCleanupPassFactory =\n      new HotSwapPassFactory(\"FieldCleaupPassFactory\", false) {\n        @Override\n        protected HotSwapCompilerPass create(\n            AbstractCompiler compiler) {\n          return new FieldCleanupPass(compiler);\n        }\n      };",
        "begin_line": 68,
        "end_line": 75,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CleanupPasses",
        "src_path": "src/com/google/javascript/jscomp/CleanupPasses.java",
        "signature": "com.google.javascript.jscomp.CleanupPasses.scopeCleanupPassFactory",
        "snippet": "  final PassFactory scopeCleanupPassFactory =\n      new HotSwapPassFactory(\"ScopeCleanupPassFactory\", false) {\n        @Override\n        protected HotSwapCompilerPass create(\n            AbstractCompiler compiler) {\n          return new MemoizedScopeCleanupPass(compiler);\n        }\n      };",
        "begin_line": 77,
        "end_line": 84,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CleanupPasses",
        "src_path": "src/com/google/javascript/jscomp/CleanupPasses.java",
        "signature": "com.google.javascript.jscomp.CleanupPasses.globalVarRefCleanupPassFactory",
        "snippet": "  final PassFactory globalVarRefCleanupPassFactory =\n      new HotSwapPassFactory(\"GlobalVarRefCleanupPassFactory\", false) {\n        @Override\n        protected HotSwapCompilerPass create(\n            AbstractCompiler compiler) {\n          return new GlobalVarRefCleanupPass(compiler);\n        }\n  };",
        "begin_line": 86,
        "end_line": 93,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MemoizedScopeCleanupPass",
        "src_path": "src/com/google/javascript/jscomp/CleanupPasses.java",
        "signature": "com.google.javascript.jscomp.MemoizedScopeCleanupPass.compiler",
        "snippet": "    private final AbstractCompiler compiler;",
        "begin_line": 104,
        "end_line": 104,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MethodCompilerPass",
        "src_path": "src/com/google/javascript/jscomp/MethodCompilerPass.java",
        "signature": "com.google.javascript.jscomp.MethodCompilerPass.externMethods",
        "snippet": "  final Set<String> externMethods = Sets.newHashSet();",
        "begin_line": 38,
        "end_line": 38,
        "comment": " List of methods defined in externs "
    },
    {
        "class_name": "com.google.javascript.jscomp.MethodCompilerPass",
        "src_path": "src/com/google/javascript/jscomp/MethodCompilerPass.java",
        "signature": "com.google.javascript.jscomp.MethodCompilerPass.externMethodsWithoutSignatures",
        "snippet": "  final Set<String> externMethodsWithoutSignatures = Sets.newHashSet();",
        "begin_line": 41,
        "end_line": 41,
        "comment": " List of extern methods without signatures that we can't warn about "
    },
    {
        "class_name": "com.google.javascript.jscomp.MethodCompilerPass",
        "src_path": "src/com/google/javascript/jscomp/MethodCompilerPass.java",
        "signature": "com.google.javascript.jscomp.MethodCompilerPass.nonMethodProperties",
        "snippet": "  final Set<String> nonMethodProperties = Sets.newHashSet();",
        "begin_line": 44,
        "end_line": 44,
        "comment": " List of property names that may not be methods "
    },
    {
        "class_name": "com.google.javascript.jscomp.MethodCompilerPass",
        "src_path": "src/com/google/javascript/jscomp/MethodCompilerPass.java",
        "signature": "com.google.javascript.jscomp.MethodCompilerPass.methodDefinitions",
        "snippet": "  final Multimap<String, Node> methodDefinitions =\n      LinkedHashMultimap.create();",
        "begin_line": 49,
        "end_line": 50,
        "comment": " are found which causes problems in the source maps."
    },
    {
        "class_name": "com.google.javascript.jscomp.MethodCompilerPass",
        "src_path": "src/com/google/javascript/jscomp/MethodCompilerPass.java",
        "signature": "com.google.javascript.jscomp.MethodCompilerPass.compiler",
        "snippet": "  final AbstractCompiler compiler;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReferenceCollectingCallback",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.ReferenceCollectingCallback.referenceMap",
        "snippet": "  private final Map<Var, ReferenceCollection> referenceMap =\n      Maps.newHashMap();",
        "begin_line": 61,
        "end_line": 62,
        "comment": "\n   * Maps a given variable to a collection of references to that name. Note that\n   * Var objects are not stable across multiple traversals (unlike scope root or\n   * name).\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.ReferenceCollectingCallback",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.ReferenceCollectingCallback.blockStack",
        "snippet": "  private final Deque<BasicBlock> blockStack = new ArrayDeque<BasicBlock>();",
        "begin_line": 67,
        "end_line": 67,
        "comment": "\n   * The stack of basic blocks and scopes the current traversal is in.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.ReferenceCollectingCallback",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.ReferenceCollectingCallback.behavior",
        "snippet": "  private final Behavior behavior;",
        "begin_line": 72,
        "end_line": 72,
        "comment": "\n   * Source of behavior at various points in the traversal.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.ReferenceCollectingCallback",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.ReferenceCollectingCallback.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 77,
        "end_line": 77,
        "comment": "\n   * JavaScript compiler to use in traversing.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.ReferenceCollectingCallback",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.ReferenceCollectingCallback.varFilter",
        "snippet": "  private final Predicate<Var> varFilter;",
        "begin_line": 82,
        "end_line": 82,
        "comment": "\n   * Only collect references for filtered variables.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.ReferenceMapWrapper",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.ReferenceMapWrapper.referenceMap",
        "snippet": "    private final Map<Var, ReferenceCollection> referenceMap;",
        "begin_line": 256,
        "end_line": 256,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReferenceCollectingCallback",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR",
        "snippet": "  static Behavior DO_NOTHING_BEHAVIOR = new Behavior() {\n    @Override\n    public void afterExitScope(NodeTraversal t, ReferenceMap referenceMap) {}\n  };",
        "begin_line": 279,
        "end_line": 282,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReferenceCollection",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.ReferenceCollection.references",
        "snippet": "    List<Reference> references = Lists.newArrayList();",
        "begin_line": 290,
        "end_line": 290,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Reference",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.Reference.DECLARATION_PARENTS",
        "snippet": "    private static final Set<Integer> DECLARATION_PARENTS =\n        ImmutableSet.of(Token.VAR, Token.FUNCTION, Token.CATCH);",
        "begin_line": 488,
        "end_line": 489,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Reference",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.Reference.nameNode",
        "snippet": "    private final Node nameNode;",
        "begin_line": 491,
        "end_line": 491,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Reference",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.Reference.basicBlock",
        "snippet": "    private final BasicBlock basicBlock;",
        "begin_line": 492,
        "end_line": 492,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Reference",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.Reference.scope",
        "snippet": "    private final Scope scope;",
        "begin_line": 493,
        "end_line": 493,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Reference",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.Reference.inputId",
        "snippet": "    private final InputId inputId;",
        "begin_line": 494,
        "end_line": 494,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Reference",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.Reference.sourceFile",
        "snippet": "    private final StaticSourceFile sourceFile;",
        "begin_line": 495,
        "end_line": 495,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BasicBlock",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.BasicBlock.parent",
        "snippet": "    private final BasicBlock parent;",
        "begin_line": 642,
        "end_line": 642,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BasicBlock",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.BasicBlock.isHoisted",
        "snippet": "    private final boolean isHoisted;",
        "begin_line": 648,
        "end_line": 648,
        "comment": "\n     * Determines whether the block may not be part of the normal control flow,\n     * but instead \"hoisted\" to the top of the scope.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.BasicBlock",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.BasicBlock.isFunction",
        "snippet": "    private final boolean isFunction;",
        "begin_line": 653,
        "end_line": 653,
        "comment": "\n     * Whether this block denotes a function scope.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.BasicBlock",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.BasicBlock.isLoop",
        "snippet": "    private final boolean isLoop;",
        "begin_line": 658,
        "end_line": 658,
        "comment": "\n     * Whether this block denotes a loop.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeReplaceKnownMethods",
        "src_path": "src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java",
        "signature": "com.google.javascript.jscomp.PeepholeReplaceKnownMethods.ROOT_LOCALE",
        "snippet": "  private static final Locale ROOT_LOCALE = new Locale(\"\");",
        "begin_line": 33,
        "end_line": 33,
        "comment": " The LOCALE independent \"locale\""
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeReplaceKnownMethods",
        "src_path": "src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java",
        "signature": "com.google.javascript.jscomp.PeepholeReplaceKnownMethods.late",
        "snippet": "  private final boolean late;",
        "begin_line": 34,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TightenTypes",
        "src_path": "src/com/google/javascript/jscomp/TightenTypes.java",
        "signature": "com.google.javascript.jscomp.TightenTypes.NON_HALTING_ERROR_MSG",
        "snippet": "  public static final String NON_HALTING_ERROR_MSG =\n    \"TightenTypes pass appears to be stuck in an infinite loop.\";",
        "begin_line": 75,
        "end_line": 76,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TightenTypes",
        "src_path": "src/com/google/javascript/jscomp/TightenTypes.java",
        "signature": "com.google.javascript.jscomp.TightenTypes.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " The compiler that invoked this pass. "
    },
    {
        "class_name": "com.google.javascript.jscomp.TightenTypes",
        "src_path": "src/com/google/javascript/jscomp/TightenTypes.java",
        "signature": "com.google.javascript.jscomp.TightenTypes.functionFromDeclaration",
        "snippet": "  private final Map<Node, ConcreteFunctionType> functionFromDeclaration =\n      Maps.newHashMap();",
        "begin_line": 86,
        "end_line": 87,
        "comment": "\n   * Map of function type information to their concrete wrappers.  These must be\n   * reused so that each declaration has only a single concrete type, which will\n   * hold all the known types that flow to its arguments and return value.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.TightenTypes",
        "src_path": "src/com/google/javascript/jscomp/TightenTypes.java",
        "signature": "com.google.javascript.jscomp.TightenTypes.functionFromJSType",
        "snippet": "  private final Map<FunctionType, ConcreteFunctionType> functionFromJSType =\n      Maps.newIdentityHashMap();",
        "begin_line": 95,
        "end_line": 96,
        "comment": "\n   * Secondary index of concrete functions by JSType.  This is necessary for\n   * retrieving the concrete type of a superclass, where the actual declaration\n   * is not at hand.  Note that we must use an identity hash map here because\n   * functions are compared using the signature only.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.TightenTypes",
        "src_path": "src/com/google/javascript/jscomp/TightenTypes.java",
        "signature": "com.google.javascript.jscomp.TightenTypes.instanceFromJSType",
        "snippet": "  private final Map<ObjectType, ConcreteInstanceType> instanceFromJSType =\n      Maps.newHashMap();",
        "begin_line": 103,
        "end_line": 104,
        "comment": "\n   * Map of instance type information to their concrete wrappers.  These must be\n   * reused so that each property has only one variable, which will store all\n   * known types that flow to that variable.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.TightenTypes",
        "src_path": "src/com/google/javascript/jscomp/TightenTypes.java",
        "signature": "com.google.javascript.jscomp.TightenTypes.typeIntersectionMemos",
        "snippet": "  private final Map<ConcreteJSTypePair, ConcreteType> typeIntersectionMemos =\n      Maps.newHashMap();",
        "begin_line": 109,
        "end_line": 110,
        "comment": "\n   * Memoized results of \"createTypeIntersection\" calls.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.TightenTypes",
        "src_path": "src/com/google/javascript/jscomp/TightenTypes.java",
        "signature": "com.google.javascript.jscomp.TightenTypes.topScope",
        "snippet": "  private ConcreteScope topScope;",
        "begin_line": 113,
        "end_line": 113,
        "comment": " Scope storing the top-level variables and functions. "
    },
    {
        "class_name": "com.google.javascript.jscomp.TightenTypes",
        "src_path": "src/com/google/javascript/jscomp/TightenTypes.java",
        "signature": "com.google.javascript.jscomp.TightenTypes.allInstantiatedTypes",
        "snippet": "  private Set<ConcreteType> allInstantiatedTypes = Sets.newHashSet();",
        "begin_line": 127,
        "end_line": 127,
        "comment": " All concrete instance types encountered during flow analysis. "
    },
    {
        "class_name": "com.google.javascript.jscomp.ConcreteScope",
        "src_path": "src/com/google/javascript/jscomp/TightenTypes.java",
        "signature": "com.google.javascript.jscomp.ConcreteScope.parent",
        "snippet": "    private final ConcreteScope parent;",
        "begin_line": 177,
        "end_line": 177,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ConcreteScope",
        "src_path": "src/com/google/javascript/jscomp/TightenTypes.java",
        "signature": "com.google.javascript.jscomp.ConcreteScope.slots",
        "snippet": "    private final Map<String, ConcreteSlot> slots;",
        "begin_line": 178,
        "end_line": 178,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ConcreteScope",
        "src_path": "src/com/google/javascript/jscomp/TightenTypes.java",
        "signature": "com.google.javascript.jscomp.ConcreteScope.actions",
        "snippet": "    private final List<Action> actions;",
        "begin_line": 179,
        "end_line": 179,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ConcreteSlot",
        "src_path": "src/com/google/javascript/jscomp/TightenTypes.java",
        "signature": "com.google.javascript.jscomp.ConcreteSlot.scope",
        "snippet": "    private final ConcreteScope scope;",
        "begin_line": 265,
        "end_line": 265,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ConcreteSlot",
        "src_path": "src/com/google/javascript/jscomp/TightenTypes.java",
        "signature": "com.google.javascript.jscomp.ConcreteSlot.name",
        "snippet": "    private final String name;",
        "begin_line": 266,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ConcreteSlot",
        "src_path": "src/com/google/javascript/jscomp/TightenTypes.java",
        "signature": "com.google.javascript.jscomp.ConcreteSlot.type",
        "snippet": "    private ConcreteType type;",
        "begin_line": 267,
        "end_line": 267,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Assignment",
        "src_path": "src/com/google/javascript/jscomp/TightenTypes.java",
        "signature": "com.google.javascript.jscomp.Assignment.slot",
        "snippet": "    private final ConcreteSlot slot;",
        "begin_line": 324,
        "end_line": 324,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Assignment",
        "src_path": "src/com/google/javascript/jscomp/TightenTypes.java",
        "signature": "com.google.javascript.jscomp.Assignment.type",
        "snippet": "    private final ConcreteType type;",
        "begin_line": 325,
        "end_line": 325,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VariableAssignAction",
        "src_path": "src/com/google/javascript/jscomp/TightenTypes.java",
        "signature": "com.google.javascript.jscomp.VariableAssignAction.slot",
        "snippet": "    private final ConcreteSlot slot;",
        "begin_line": 338,
        "end_line": 338,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VariableAssignAction",
        "src_path": "src/com/google/javascript/jscomp/TightenTypes.java",
        "signature": "com.google.javascript.jscomp.VariableAssignAction.expression",
        "snippet": "    private final Node expression;",
        "begin_line": 339,
        "end_line": 339,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PropertyAssignAction",
        "src_path": "src/com/google/javascript/jscomp/TightenTypes.java",
        "signature": "com.google.javascript.jscomp.PropertyAssignAction.receiver",
        "snippet": "    private final Node receiver;",
        "begin_line": 358,
        "end_line": 358,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PropertyAssignAction",
        "src_path": "src/com/google/javascript/jscomp/TightenTypes.java",
        "signature": "com.google.javascript.jscomp.PropertyAssignAction.propName",
        "snippet": "    private final String propName;",
        "begin_line": 359,
        "end_line": 359,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PropertyAssignAction",
        "src_path": "src/com/google/javascript/jscomp/TightenTypes.java",
        "signature": "com.google.javascript.jscomp.PropertyAssignAction.expression",
        "snippet": "    private final Node expression;",
        "begin_line": 360,
        "end_line": 360,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionCallBuilder",
        "src_path": "src/com/google/javascript/jscomp/TightenTypes.java",
        "signature": "com.google.javascript.jscomp.FunctionCallBuilder.isNewCall",
        "snippet": "    private boolean isNewCall = false;",
        "begin_line": 394,
        "end_line": 394,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionCallBuilder",
        "src_path": "src/com/google/javascript/jscomp/TightenTypes.java",
        "signature": "com.google.javascript.jscomp.FunctionCallBuilder.isCallFunction",
        "snippet": "    private boolean isCallFunction = false;",
        "begin_line": 395,
        "end_line": 395,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionCallBuilder",
        "src_path": "src/com/google/javascript/jscomp/TightenTypes.java",
        "signature": "com.google.javascript.jscomp.FunctionCallBuilder.receiver",
        "snippet": "    private final Node receiver;",
        "begin_line": 396,
        "end_line": 396,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionCallBuilder",
        "src_path": "src/com/google/javascript/jscomp/TightenTypes.java",
        "signature": "com.google.javascript.jscomp.FunctionCallBuilder.firstArgument",
        "snippet": "    private final Node firstArgument;",
        "begin_line": 397,
        "end_line": 397,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionCallBuilder",
        "src_path": "src/com/google/javascript/jscomp/TightenTypes.java",
        "signature": "com.google.javascript.jscomp.FunctionCallBuilder.propName",
        "snippet": "    private String propName = null;",
        "begin_line": 398,
        "end_line": 398,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExternFunctionCall",
        "src_path": "src/com/google/javascript/jscomp/TightenTypes.java",
        "signature": "com.google.javascript.jscomp.ExternFunctionCall.receiver",
        "snippet": "    private Node receiver;",
        "begin_line": 468,
        "end_line": 468,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExternFunctionCall",
        "src_path": "src/com/google/javascript/jscomp/TightenTypes.java",
        "signature": "com.google.javascript.jscomp.ExternFunctionCall.thisType",
        "snippet": "    private ConcreteType thisType;",
        "begin_line": 469,
        "end_line": 469,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExternFunctionCall",
        "src_path": "src/com/google/javascript/jscomp/TightenTypes.java",
        "signature": "com.google.javascript.jscomp.ExternFunctionCall.argTypes",
        "snippet": "    private List<ConcreteType> argTypes;",
        "begin_line": 470,
        "end_line": 470,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionCall",
        "src_path": "src/com/google/javascript/jscomp/TightenTypes.java",
        "signature": "com.google.javascript.jscomp.FunctionCall.isNewCall",
        "snippet": "    private final boolean isNewCall;",
        "begin_line": 488,
        "end_line": 488,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionCall",
        "src_path": "src/com/google/javascript/jscomp/TightenTypes.java",
        "signature": "com.google.javascript.jscomp.FunctionCall.receiver",
        "snippet": "    private final Node receiver;",
        "begin_line": 489,
        "end_line": 489,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionCall",
        "src_path": "src/com/google/javascript/jscomp/TightenTypes.java",
        "signature": "com.google.javascript.jscomp.FunctionCall.propName",
        "snippet": "    private final String propName;",
        "begin_line": 490,
        "end_line": 490,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionCall",
        "src_path": "src/com/google/javascript/jscomp/TightenTypes.java",
        "signature": "com.google.javascript.jscomp.FunctionCall.firstArgument",
        "snippet": "    private final Node firstArgument;",
        "begin_line": 491,
        "end_line": 491,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NativeCallFunctionCall",
        "src_path": "src/com/google/javascript/jscomp/TightenTypes.java",
        "signature": "com.google.javascript.jscomp.NativeCallFunctionCall.receiver",
        "snippet": "    private final Node receiver;",
        "begin_line": 552,
        "end_line": 552,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NativeCallFunctionCall",
        "src_path": "src/com/google/javascript/jscomp/TightenTypes.java",
        "signature": "com.google.javascript.jscomp.NativeCallFunctionCall.propName",
        "snippet": "    private final String propName;",
        "begin_line": 553,
        "end_line": 553,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NativeCallFunctionCall",
        "src_path": "src/com/google/javascript/jscomp/TightenTypes.java",
        "signature": "com.google.javascript.jscomp.NativeCallFunctionCall.firstArgument",
        "snippet": "    private final Node firstArgument;",
        "begin_line": 554,
        "end_line": 554,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CreateScope",
        "src_path": "src/com/google/javascript/jscomp/TightenTypes.java",
        "signature": "com.google.javascript.jscomp.CreateScope.scope",
        "snippet": "    private final ConcreteScope scope;",
        "begin_line": 588,
        "end_line": 588,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CreateScope",
        "src_path": "src/com/google/javascript/jscomp/TightenTypes.java",
        "signature": "com.google.javascript.jscomp.CreateScope.inExterns",
        "snippet": "    private final boolean inExterns;",
        "begin_line": 589,
        "end_line": 589,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ConcreteJSTypePair",
        "src_path": "src/com/google/javascript/jscomp/TightenTypes.java",
        "signature": "com.google.javascript.jscomp.ConcreteJSTypePair.concrete",
        "snippet": "    final ConcreteType concrete;",
        "begin_line": 1375,
        "end_line": 1375,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ConcreteJSTypePair",
        "src_path": "src/com/google/javascript/jscomp/TightenTypes.java",
        "signature": "com.google.javascript.jscomp.ConcreteJSTypePair.jstype",
        "snippet": "    final JSType jstype;",
        "begin_line": 1376,
        "end_line": 1376,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ConcreteJSTypePair",
        "src_path": "src/com/google/javascript/jscomp/TightenTypes.java",
        "signature": "com.google.javascript.jscomp.ConcreteJSTypePair.hashcode",
        "snippet": "    final int hashcode;",
        "begin_line": 1377,
        "end_line": 1377,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StrictModeCheck",
        "src_path": "src/com/google/javascript/jscomp/StrictModeCheck.java",
        "signature": "com.google.javascript.jscomp.StrictModeCheck.UNKNOWN_VARIABLE",
        "snippet": "  static final DiagnosticType UNKNOWN_VARIABLE = DiagnosticType.warning(\n      \"JSC_UNKNOWN_VARIABLE\", \"unknown variable {0}\");",
        "begin_line": 40,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StrictModeCheck",
        "src_path": "src/com/google/javascript/jscomp/StrictModeCheck.java",
        "signature": "com.google.javascript.jscomp.StrictModeCheck.EVAL_USE",
        "snippet": "  static final DiagnosticType EVAL_USE = DiagnosticType.error(\n      \"JSC_EVAL_USE\", \"\\\"eval\\\" cannot be used in Caja\");",
        "begin_line": 43,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StrictModeCheck",
        "src_path": "src/com/google/javascript/jscomp/StrictModeCheck.java",
        "signature": "com.google.javascript.jscomp.StrictModeCheck.EVAL_DECLARATION",
        "snippet": "  static final DiagnosticType EVAL_DECLARATION = DiagnosticType.warning(\n      \"JSC_EVAL_DECLARATION\",\n      \"\\\"eval\\\" cannot be redeclared in ES5 strict mode\");",
        "begin_line": 46,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StrictModeCheck",
        "src_path": "src/com/google/javascript/jscomp/StrictModeCheck.java",
        "signature": "com.google.javascript.jscomp.StrictModeCheck.EVAL_ASSIGNMENT",
        "snippet": "  static final DiagnosticType EVAL_ASSIGNMENT = DiagnosticType.warning(\n      \"JSC_EVAL_ASSIGNMENT\",\n      \"the \\\"eval\\\" object cannot be reassigned in ES5 strict mode\");",
        "begin_line": 50,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StrictModeCheck",
        "src_path": "src/com/google/javascript/jscomp/StrictModeCheck.java",
        "signature": "com.google.javascript.jscomp.StrictModeCheck.ARGUMENTS_DECLARATION",
        "snippet": "  static final DiagnosticType ARGUMENTS_DECLARATION = DiagnosticType.warning(\n      \"JSC_ARGUMENTS_DECLARATION\",\n      \"\\\"arguments\\\" cannot be redeclared in ES5 strict mode\");",
        "begin_line": 54,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StrictModeCheck",
        "src_path": "src/com/google/javascript/jscomp/StrictModeCheck.java",
        "signature": "com.google.javascript.jscomp.StrictModeCheck.ARGUMENTS_ASSIGNMENT",
        "snippet": "  static final DiagnosticType ARGUMENTS_ASSIGNMENT = DiagnosticType.warning(\n      \"JSC_ARGUMENTS_ASSIGNMENT\",\n      \"the \\\"arguments\\\" object cannot be reassigned in ES5 strict mode\");",
        "begin_line": 58,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StrictModeCheck",
        "src_path": "src/com/google/javascript/jscomp/StrictModeCheck.java",
        "signature": "com.google.javascript.jscomp.StrictModeCheck.DELETE_VARIABLE",
        "snippet": "  static final DiagnosticType DELETE_VARIABLE = DiagnosticType.warning(\n      \"JSC_DELETE_VARIABLE\",\n      \"variables, functions, and arguments cannot be deleted in \"\n      + \"ES5 strict mode\");",
        "begin_line": 62,
        "end_line": 65,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StrictModeCheck",
        "src_path": "src/com/google/javascript/jscomp/StrictModeCheck.java",
        "signature": "com.google.javascript.jscomp.StrictModeCheck.ILLEGAL_NAME",
        "snippet": "  static final DiagnosticType ILLEGAL_NAME = DiagnosticType.error(\n      \"JSC_ILLEGAL_NAME\",\n      \"identifiers ending in '__' cannot be used in Caja\");",
        "begin_line": 67,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StrictModeCheck",
        "src_path": "src/com/google/javascript/jscomp/StrictModeCheck.java",
        "signature": "com.google.javascript.jscomp.StrictModeCheck.DUPLICATE_OBJECT_KEY",
        "snippet": "  static final DiagnosticType DUPLICATE_OBJECT_KEY = DiagnosticType.warning(\n      \"JSC_DUPLICATE_OBJECT_KEY\",\n      \"object literals cannot contain duplicate keys in ES5 strict mode\");",
        "begin_line": 71,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StrictModeCheck",
        "src_path": "src/com/google/javascript/jscomp/StrictModeCheck.java",
        "signature": "com.google.javascript.jscomp.StrictModeCheck.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 75,
        "end_line": 75,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StrictModeCheck",
        "src_path": "src/com/google/javascript/jscomp/StrictModeCheck.java",
        "signature": "com.google.javascript.jscomp.StrictModeCheck.noVarCheck",
        "snippet": "  private final boolean noVarCheck;",
        "begin_line": 76,
        "end_line": 76,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StrictModeCheck",
        "src_path": "src/com/google/javascript/jscomp/StrictModeCheck.java",
        "signature": "com.google.javascript.jscomp.StrictModeCheck.noCajaChecks",
        "snippet": "  private final boolean noCajaChecks;",
        "begin_line": 77,
        "end_line": 77,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.UnreachableCodeElimination",
        "src_path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "signature": "com.google.javascript.jscomp.UnreachableCodeElimination.logger",
        "snippet": "  private static final Logger logger =\n    Logger.getLogger(UnreachableCodeElimination.class.getName());",
        "begin_line": 48,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.UnreachableCodeElimination",
        "src_path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "signature": "com.google.javascript.jscomp.UnreachableCodeElimination.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.UnreachableCodeElimination",
        "src_path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "signature": "com.google.javascript.jscomp.UnreachableCodeElimination.removeNoOpStatements",
        "snippet": "  private final boolean removeNoOpStatements;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.EliminationPass",
        "src_path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "signature": "com.google.javascript.jscomp.EliminationPass.cfg",
        "snippet": "    private final ControlFlowGraph<Node> cfg;",
        "begin_line": 86,
        "end_line": 86,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GenerateExports",
        "src_path": "src/com/google/javascript/jscomp/GenerateExports.java",
        "signature": "com.google.javascript.jscomp.GenerateExports.PROTOTYPE_PROPERTY",
        "snippet": "  private static final String PROTOTYPE_PROPERTY = \"prototype\";",
        "begin_line": 31,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GenerateExports",
        "src_path": "src/com/google/javascript/jscomp/GenerateExports.java",
        "signature": "com.google.javascript.jscomp.GenerateExports.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 33,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GenerateExports",
        "src_path": "src/com/google/javascript/jscomp/GenerateExports.java",
        "signature": "com.google.javascript.jscomp.GenerateExports.exportSymbolFunction",
        "snippet": "  private final String exportSymbolFunction;",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GenerateExports",
        "src_path": "src/com/google/javascript/jscomp/GenerateExports.java",
        "signature": "com.google.javascript.jscomp.GenerateExports.exportPropertyFunction",
        "snippet": "  private final String exportPropertyFunction;",
        "begin_line": 37,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureRewriteClass",
        "src_path": "src/com/google/javascript/jscomp/ClosureRewriteClass.java",
        "signature": "com.google.javascript.jscomp.ClosureRewriteClass.GOOG_CLASS_TARGET_INVALID",
        "snippet": "  static final DiagnosticType GOOG_CLASS_TARGET_INVALID = DiagnosticType.error(\n      \"JSC_GOOG_CLASS_TARGET_INVALID\",\n      \"Unsupported class definition expression.\");",
        "begin_line": 38,
        "end_line": 40,
        "comment": " Errors"
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureRewriteClass",
        "src_path": "src/com/google/javascript/jscomp/ClosureRewriteClass.java",
        "signature": "com.google.javascript.jscomp.ClosureRewriteClass.GOOG_CLASS_SUPER_CLASS_NOT_VALID",
        "snippet": "  static final DiagnosticType GOOG_CLASS_SUPER_CLASS_NOT_VALID = DiagnosticType.error(\n      \"JSC_GOOG_CLASS_SUPER_CLASS_NOT_VALID\",\n      \"The super class must be null or a valid name reference\");",
        "begin_line": 42,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureRewriteClass",
        "src_path": "src/com/google/javascript/jscomp/ClosureRewriteClass.java",
        "signature": "com.google.javascript.jscomp.ClosureRewriteClass.GOOG_CLASS_DESCRIPTOR_NOT_VALID",
        "snippet": "  static final DiagnosticType GOOG_CLASS_DESCRIPTOR_NOT_VALID = DiagnosticType.error(\n      \"JSC_GOOG_CLASS_DESCRIPTOR_NOT_VALID\",\n      \"The class descriptor must be an object literal\");",
        "begin_line": 46,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureRewriteClass",
        "src_path": "src/com/google/javascript/jscomp/ClosureRewriteClass.java",
        "signature": "com.google.javascript.jscomp.ClosureRewriteClass.GOOG_CLASS_CONSTRUCTOR_MISING",
        "snippet": "  static final DiagnosticType GOOG_CLASS_CONSTRUCTOR_MISING = DiagnosticType.error(\n      \"JSC_GOOG_CLASS_CONSTRUCTOR_MISING\",\n      \"The constructor expression is missing for the class descriptor\");",
        "begin_line": 50,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureRewriteClass",
        "src_path": "src/com/google/javascript/jscomp/ClosureRewriteClass.java",
        "signature": "com.google.javascript.jscomp.ClosureRewriteClass.GOOG_CLASS_STATICS_NOT_VALID",
        "snippet": "  static final DiagnosticType GOOG_CLASS_STATICS_NOT_VALID = DiagnosticType.error(\n      \"JSC_GOOG_CLASS_STATICS_NOT_VALID\",\n      \"The class statics descriptor must be an object or function literal\");",
        "begin_line": 54,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureRewriteClass",
        "src_path": "src/com/google/javascript/jscomp/ClosureRewriteClass.java",
        "signature": "com.google.javascript.jscomp.ClosureRewriteClass.GOOG_CLASS_UNEXPECTED_PARAMS",
        "snippet": "  static final DiagnosticType GOOG_CLASS_UNEXPECTED_PARAMS = DiagnosticType.error(\n      \"JSC_GOOG_CLASS_UNEXPECTED_PARAMS\",\n      \"The class definition has too many arguments.\");",
        "begin_line": 58,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureRewriteClass",
        "src_path": "src/com/google/javascript/jscomp/ClosureRewriteClass.java",
        "signature": "com.google.javascript.jscomp.ClosureRewriteClass.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MemberDefinition",
        "src_path": "src/com/google/javascript/jscomp/ClosureRewriteClass.java",
        "signature": "com.google.javascript.jscomp.MemberDefinition.info",
        "snippet": "    final JSDocInfo info;",
        "begin_line": 149,
        "end_line": 149,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MemberDefinition",
        "src_path": "src/com/google/javascript/jscomp/ClosureRewriteClass.java",
        "signature": "com.google.javascript.jscomp.MemberDefinition.name",
        "snippet": "    final Node name;",
        "begin_line": 150,
        "end_line": 150,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MemberDefinition",
        "src_path": "src/com/google/javascript/jscomp/ClosureRewriteClass.java",
        "signature": "com.google.javascript.jscomp.MemberDefinition.value",
        "snippet": "    final Node value;",
        "begin_line": 151,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClassDefinition",
        "src_path": "src/com/google/javascript/jscomp/ClosureRewriteClass.java",
        "signature": "com.google.javascript.jscomp.ClassDefinition.name",
        "snippet": "    final Node name;",
        "begin_line": 161,
        "end_line": 161,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClassDefinition",
        "src_path": "src/com/google/javascript/jscomp/ClosureRewriteClass.java",
        "signature": "com.google.javascript.jscomp.ClassDefinition.superClass",
        "snippet": "    final Node superClass;",
        "begin_line": 162,
        "end_line": 162,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClassDefinition",
        "src_path": "src/com/google/javascript/jscomp/ClosureRewriteClass.java",
        "signature": "com.google.javascript.jscomp.ClassDefinition.constructor",
        "snippet": "    final MemberDefinition constructor;",
        "begin_line": 163,
        "end_line": 163,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClassDefinition",
        "src_path": "src/com/google/javascript/jscomp/ClosureRewriteClass.java",
        "signature": "com.google.javascript.jscomp.ClassDefinition.staticProps",
        "snippet": "    final List<MemberDefinition> staticProps;",
        "begin_line": 164,
        "end_line": 164,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClassDefinition",
        "src_path": "src/com/google/javascript/jscomp/ClosureRewriteClass.java",
        "signature": "com.google.javascript.jscomp.ClassDefinition.props",
        "snippet": "    final List<MemberDefinition> props;",
        "begin_line": 165,
        "end_line": 165,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClassDefinition",
        "src_path": "src/com/google/javascript/jscomp/ClosureRewriteClass.java",
        "signature": "com.google.javascript.jscomp.ClassDefinition.classModifier",
        "snippet": "    final Node classModifier;",
        "begin_line": 166,
        "end_line": 166,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.CodePrinter.DEFAULT_LINE_LENGTH_THRESHOLD",
        "snippet": "  static final int DEFAULT_LINE_LENGTH_THRESHOLD = 500;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " The number of characters after which we insert a line break in the code"
    },
    {
        "class_name": "com.google.javascript.jscomp.MappedCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.MappedCodePrinter.mappings",
        "snippet": "    final private Deque<Mapping> mappings;",
        "begin_line": 48,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MappedCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.MappedCodePrinter.allMappings",
        "snippet": "    final private List<Mapping> allMappings;",
        "begin_line": 49,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MappedCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.MappedCodePrinter.createSrcMap",
        "snippet": "    final private boolean createSrcMap;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MappedCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.MappedCodePrinter.sourceMapDetailLevel",
        "snippet": "    final private SourceMap.DetailLevel sourceMapDetailLevel;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MappedCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.MappedCodePrinter.code",
        "snippet": "    protected final StringBuilder code = new StringBuilder(1024);",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MappedCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.MappedCodePrinter.lineLengthThreshold",
        "snippet": "    protected final int lineLengthThreshold;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MappedCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.MappedCodePrinter.lineLength",
        "snippet": "    protected int lineLength = 0;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MappedCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.MappedCodePrinter.lineIndex",
        "snippet": "    protected int lineIndex = 0;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Mapping",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Mapping.node",
        "snippet": "      Node node;",
        "begin_line": 80,
        "end_line": 80,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Mapping",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Mapping.start",
        "snippet": "      FilePosition start;",
        "begin_line": 81,
        "end_line": 81,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Mapping",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Mapping.end",
        "snippet": "      FilePosition end;",
        "begin_line": 82,
        "end_line": 82,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrettyCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.PrettyCodePrinter.INDENT",
        "snippet": "    static final String INDENT = \"  \";",
        "begin_line": 222,
        "end_line": 222,
        "comment": " The number of characters after which we insert a line break in the code"
    },
    {
        "class_name": "com.google.javascript.jscomp.PrettyCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.PrettyCodePrinter.indent",
        "snippet": "    private int indent = 0;",
        "begin_line": 224,
        "end_line": 224,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompactCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.CompactCodePrinter.lineBreak",
        "snippet": "    private final boolean lineBreak;",
        "begin_line": 415,
        "end_line": 415,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompactCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.CompactCodePrinter.preferLineBreakAtEndOfFile",
        "snippet": "    private final boolean preferLineBreakAtEndOfFile;",
        "begin_line": 416,
        "end_line": 416,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompactCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.CompactCodePrinter.lineStartPosition",
        "snippet": "    private int lineStartPosition = 0;",
        "begin_line": 417,
        "end_line": 417,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompactCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.CompactCodePrinter.preferredBreakPosition",
        "snippet": "    private int preferredBreakPosition = 0;",
        "begin_line": 418,
        "end_line": 418,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompactCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.CompactCodePrinter.prevCutPosition",
        "snippet": "    private int prevCutPosition = 0;",
        "begin_line": 419,
        "end_line": 419,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompactCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.CompactCodePrinter.prevLineStartPosition",
        "snippet": "    private int prevLineStartPosition = 0;",
        "begin_line": 420,
        "end_line": 420,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.root",
        "snippet": "    private final Node root;",
        "begin_line": 546,
        "end_line": 546,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.options",
        "snippet": "    private CompilerOptions options = new CompilerOptions();",
        "begin_line": 547,
        "end_line": 547,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.outputTypes",
        "snippet": "    private boolean outputTypes = false;",
        "begin_line": 548,
        "end_line": 548,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.sourceMap",
        "snippet": "    private SourceMap sourceMap = null;",
        "begin_line": 549,
        "end_line": 549,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.tagAsStrict",
        "snippet": "    private boolean tagAsStrict;",
        "begin_line": 550,
        "end_line": 550,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
        "src_path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.excerpt",
        "snippet": "  private SourceExcerpt excerpt;",
        "begin_line": 32,
        "end_line": 32,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
        "src_path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.excerptFormatter",
        "snippet": "  private static final ExcerptFormatter excerptFormatter =\n      new LineNumberingFormatter();",
        "begin_line": 33,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IgnoreCajaProperties",
        "src_path": "src/com/google/javascript/jscomp/IgnoreCajaProperties.java",
        "signature": "com.google.javascript.jscomp.IgnoreCajaProperties.compiler",
        "snippet": "  final AbstractCompiler compiler;",
        "begin_line": 38,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IgnoreCajaProperties",
        "src_path": "src/com/google/javascript/jscomp/IgnoreCajaProperties.java",
        "signature": "com.google.javascript.jscomp.IgnoreCajaProperties.counter",
        "snippet": "  int counter;",
        "begin_line": 41,
        "end_line": 41,
        "comment": " Counts the number of temporary variables introduced."
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.ScopedAliases.SCOPING_METHOD_NAME",
        "snippet": "  static final String SCOPING_METHOD_NAME = \"goog.scope\";",
        "begin_line": 56,
        "end_line": 56,
        "comment": " Name used to denote an scoped function block used for aliasing. "
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.ScopedAliases.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.ScopedAliases.preprocessorSymbolTable",
        "snippet": "  private final PreprocessorSymbolTable preprocessorSymbolTable;",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.ScopedAliases.transformationHandler",
        "snippet": "  private final AliasTransformationHandler transformationHandler;",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.ScopedAliases.GOOG_SCOPE_USED_IMPROPERLY",
        "snippet": "  static final DiagnosticType GOOG_SCOPE_USED_IMPROPERLY = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_USED_IMPROPERLY\",\n      \"The call to goog.scope must be alone in a single statement.\");",
        "begin_line": 63,
        "end_line": 65,
        "comment": " Errors"
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.ScopedAliases.GOOG_SCOPE_HAS_BAD_PARAMETERS",
        "snippet": "  static final DiagnosticType GOOG_SCOPE_HAS_BAD_PARAMETERS =\n      DiagnosticType.error(\n          \"JSC_GOOG_SCOPE_HAS_BAD_PARAMETERS\",\n          \"The call to goog.scope must take only a single parameter.  It must\" +\n              \" be an anonymous function that itself takes no parameters.\");",
        "begin_line": 67,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.ScopedAliases.GOOG_SCOPE_REFERENCES_THIS",
        "snippet": "  static final DiagnosticType GOOG_SCOPE_REFERENCES_THIS = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_REFERENCES_THIS\",\n      \"The body of a goog.scope function cannot reference 'this'.\");",
        "begin_line": 73,
        "end_line": 75,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.ScopedAliases.GOOG_SCOPE_USES_RETURN",
        "snippet": "  static final DiagnosticType GOOG_SCOPE_USES_RETURN = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_USES_RETURN\",\n      \"The body of a goog.scope function cannot use 'return'.\");",
        "begin_line": 77,
        "end_line": 79,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.ScopedAliases.GOOG_SCOPE_USES_THROW",
        "snippet": "  static final DiagnosticType GOOG_SCOPE_USES_THROW = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_USES_THROW\",\n      \"The body of a goog.scope function cannot use 'throw'.\");",
        "begin_line": 81,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.ScopedAliases.GOOG_SCOPE_ALIAS_REDEFINED",
        "snippet": "  static final DiagnosticType GOOG_SCOPE_ALIAS_REDEFINED = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_ALIAS_REDEFINED\",\n      \"The alias {0} is assigned a value more than once.\");",
        "begin_line": 85,
        "end_line": 87,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL",
        "snippet": "  static final DiagnosticType GOOG_SCOPE_NON_ALIAS_LOCAL = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_NON_ALIAS_LOCAL\",\n      \"The local variable {0} is in a goog.scope and is not an alias.\");",
        "begin_line": 89,
        "end_line": 91,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasedNode",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.AliasedNode.aliasReference",
        "snippet": "    private final Node aliasReference;",
        "begin_line": 152,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasedNode",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.AliasedNode.aliasDefinition",
        "snippet": "    private final Node aliasDefinition;",
        "begin_line": 154,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasedTypeNode",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.AliasedTypeNode.typeReference",
        "snippet": "    private final Node typeReference;",
        "begin_line": 169,
        "end_line": 169,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasedTypeNode",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.AliasedTypeNode.aliasDefinition",
        "snippet": "    private final Node aliasDefinition;",
        "begin_line": 170,
        "end_line": 170,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasedTypeNode",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.AliasedTypeNode.aliasName",
        "snippet": "    private final String aliasName;",
        "begin_line": 171,
        "end_line": 171,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Traversal",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.Traversal.aliasDefinitionsInOrder",
        "snippet": "    private final List<Node> aliasDefinitionsInOrder = Lists.newArrayList();",
        "begin_line": 195,
        "end_line": 195,
        "comment": " The order of this list determines the order that aliases are applied."
    },
    {
        "class_name": "com.google.javascript.jscomp.Traversal",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.Traversal.scopeCalls",
        "snippet": "    private final List<Node> scopeCalls = Lists.newArrayList();",
        "begin_line": 197,
        "end_line": 197,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Traversal",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.Traversal.aliasUsages",
        "snippet": "    private final List<AliasUsage> aliasUsages = Lists.newArrayList();",
        "begin_line": 199,
        "end_line": 199,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Traversal",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.Traversal.aliases",
        "snippet": "    private final Map<String, Var> aliases = Maps.newHashMap();",
        "begin_line": 202,
        "end_line": 202,
        "comment": " This map is temporary and cleared for each scope."
    },
    {
        "class_name": "com.google.javascript.jscomp.Traversal",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.Traversal.forbiddenLocals",
        "snippet": "    private final Set<String> forbiddenLocals = Sets.newHashSet();",
        "begin_line": 214,
        "end_line": 214,
        "comment": " up warning messages downstream)."
    },
    {
        "class_name": "com.google.javascript.jscomp.Traversal",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.Traversal.hasNamespaceShadows",
        "snippet": "    private boolean hasNamespaceShadows = false;",
        "begin_line": 215,
        "end_line": 215,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Traversal",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.Traversal.hasErrors",
        "snippet": "    private boolean hasErrors = false;",
        "begin_line": 217,
        "end_line": 217,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Traversal",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.Traversal.transformation",
        "snippet": "    private AliasTransformation transformation = null;",
        "begin_line": 219,
        "end_line": 219,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Proxy",
        "src_path": "src/com/google/javascript/jscomp/CodingConventions.java",
        "signature": "com.google.javascript.jscomp.Proxy.nextConvention",
        "snippet": "    protected final CodingConvention nextConvention;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/CodingConventions.java",
        "signature": "com.google.javascript.jscomp.DefaultCodingConvention.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 251,
        "end_line": 251,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExpressionDecomposer",
        "src_path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
        "signature": "com.google.javascript.jscomp.ExpressionDecomposer.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExpressionDecomposer",
        "src_path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
        "signature": "com.google.javascript.jscomp.ExpressionDecomposer.safeNameIdSupplier",
        "snippet": "  private final Supplier<String> safeNameIdSupplier;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExpressionDecomposer",
        "src_path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
        "signature": "com.google.javascript.jscomp.ExpressionDecomposer.knownConstants",
        "snippet": "  private final Set<String> knownConstants;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExpressionDecomposer",
        "src_path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
        "signature": "com.google.javascript.jscomp.ExpressionDecomposer.MAX_INTERATIONS",
        "snippet": "  private static final int MAX_INTERATIONS = 100;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " An arbitrary limit to prevent catch infinite recursion."
    },
    {
        "class_name": "com.google.javascript.jscomp.DecompositionState",
        "src_path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
        "signature": "com.google.javascript.jscomp.DecompositionState.sideEffects",
        "snippet": "    boolean sideEffects;",
        "begin_line": 279,
        "end_line": 279,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DecompositionState",
        "src_path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
        "signature": "com.google.javascript.jscomp.DecompositionState.extractBeforeStatement",
        "snippet": "    Node extractBeforeStatement;",
        "begin_line": 280,
        "end_line": 280,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExpressionDecomposer",
        "src_path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
        "signature": "com.google.javascript.jscomp.ExpressionDecomposer.tempNamePrefix",
        "snippet": "  private String tempNamePrefix = \"JSCompiler_temp\";",
        "begin_line": 572,
        "end_line": 572,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExpressionDecomposer",
        "src_path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
        "signature": "com.google.javascript.jscomp.ExpressionDecomposer.resultNamePrefix",
        "snippet": "  private String resultNamePrefix = \"JSCompiler_inline_result\";",
        "begin_line": 573,
        "end_line": 573,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GlobalVarReferenceMap",
        "src_path": "src/com/google/javascript/jscomp/GlobalVarReferenceMap.java",
        "signature": "com.google.javascript.jscomp.GlobalVarReferenceMap.refMap",
        "snippet": "  private Map<String, ReferenceCollection> refMap = null;",
        "begin_line": 44,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GlobalVarReferenceMap",
        "src_path": "src/com/google/javascript/jscomp/GlobalVarReferenceMap.java",
        "signature": "com.google.javascript.jscomp.GlobalVarReferenceMap.inputOrder",
        "snippet": "  private final Map<InputId, Integer> inputOrder;",
        "begin_line": 46,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceRefRange",
        "src_path": "src/com/google/javascript/jscomp/GlobalVarReferenceMap.java",
        "signature": "com.google.javascript.jscomp.SourceRefRange.lastBefore",
        "snippet": "    private final int lastBefore;",
        "begin_line": 191,
        "end_line": 191,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceRefRange",
        "src_path": "src/com/google/javascript/jscomp/GlobalVarReferenceMap.java",
        "signature": "com.google.javascript.jscomp.SourceRefRange.firstAfter",
        "snippet": "    private final int firstAfter;",
        "begin_line": 192,
        "end_line": 192,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceRefRange",
        "src_path": "src/com/google/javascript/jscomp/GlobalVarReferenceMap.java",
        "signature": "com.google.javascript.jscomp.SourceRefRange.refList",
        "snippet": "    private final List<Reference> refList;",
        "begin_line": 193,
        "end_line": 193,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GlobalVarRefCleanupPass",
        "src_path": "src/com/google/javascript/jscomp/GlobalVarReferenceMap.java",
        "signature": "com.google.javascript.jscomp.GlobalVarRefCleanupPass.compiler",
        "snippet": "    private final AbstractCompiler compiler;",
        "begin_line": 241,
        "end_line": 241,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.orderOfAddition",
        "snippet": "  private final Map<WarningsGuard, Integer> orderOfAddition = Maps.newHashMap();",
        "begin_line": 45,
        "end_line": 45,
        "comment": " The order that the guards were added in."
    },
    {
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.numberOfAdds",
        "snippet": "  private int numberOfAdds = 0;",
        "begin_line": 46,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.guardComparator",
        "snippet": "  private final Comparator<WarningsGuard> guardComparator =\n      new GuardComparator(orderOfAddition);",
        "begin_line": 48,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.demoteErrors",
        "snippet": "  private boolean demoteErrors = false;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GuardComparator",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.GuardComparator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GuardComparator",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.GuardComparator.orderOfAddition",
        "snippet": "    private final Map<WarningsGuard, Integer> orderOfAddition;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.guards",
        "snippet": "  private final TreeSet<WarningsGuard> guards =\n      new TreeSet<WarningsGuard>(guardComparator);",
        "begin_line": 76,
        "end_line": 77,
        "comment": " The order that the guards are applied in."
    },
    {
        "class_name": "com.google.javascript.jscomp.Definition",
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "signature": "com.google.javascript.jscomp.Definition.isExtern",
        "snippet": "    private final boolean isExtern;",
        "begin_line": 98,
        "end_line": 98,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IncompleteDefinition",
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "signature": "com.google.javascript.jscomp.IncompleteDefinition.ALLOWED_TYPES",
        "snippet": "    private static final Set<Integer> ALLOWED_TYPES =\n        ImmutableSet.of(Token.NAME, Token.GETPROP, Token.GETELEM);",
        "begin_line": 154,
        "end_line": 155,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IncompleteDefinition",
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "signature": "com.google.javascript.jscomp.IncompleteDefinition.lValue",
        "snippet": "    private final Node lValue;",
        "begin_line": 156,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionDefinition",
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "signature": "com.google.javascript.jscomp.FunctionDefinition.function",
        "snippet": "    protected final Node function;",
        "begin_line": 232,
        "end_line": 232,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AssignmentDefinition",
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "signature": "com.google.javascript.jscomp.AssignmentDefinition.assignment",
        "snippet": "    private final Node assignment;",
        "begin_line": 288,
        "end_line": 288,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ObjectLiteralPropertyDefinition",
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "signature": "com.google.javascript.jscomp.ObjectLiteralPropertyDefinition.literal",
        "snippet": "    private final Node literal;",
        "begin_line": 322,
        "end_line": 322,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ObjectLiteralPropertyDefinition",
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "signature": "com.google.javascript.jscomp.ObjectLiteralPropertyDefinition.name",
        "snippet": "    private final Node name;",
        "begin_line": 323,
        "end_line": 323,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ObjectLiteralPropertyDefinition",
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "signature": "com.google.javascript.jscomp.ObjectLiteralPropertyDefinition.value",
        "snippet": "    private final Node value;",
        "begin_line": 324,
        "end_line": 324,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarDefinition",
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "signature": "com.google.javascript.jscomp.VarDefinition.name",
        "snippet": "    private final Node name;",
        "begin_line": 371,
        "end_line": 371,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessCommonJSModules",
        "src_path": "src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "signature": "com.google.javascript.jscomp.ProcessCommonJSModules.MODULE_SLASH",
        "snippet": "  private static final String MODULE_SLASH = \"/\";",
        "begin_line": 41,
        "end_line": 41,
        "comment": " all platforms."
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessCommonJSModules",
        "src_path": "src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "signature": "com.google.javascript.jscomp.ProcessCommonJSModules.DEFAULT_FILENAME_PREFIX",
        "snippet": "  public static final String DEFAULT_FILENAME_PREFIX = \".\" + MODULE_SLASH;",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessCommonJSModules",
        "src_path": "src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "signature": "com.google.javascript.jscomp.ProcessCommonJSModules.MODULE_NAME_SEPARATOR",
        "snippet": "  private static final String MODULE_NAME_SEPARATOR = \"\\\\$\";",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessCommonJSModules",
        "src_path": "src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "signature": "com.google.javascript.jscomp.ProcessCommonJSModules.MODULE_NAME_PREFIX",
        "snippet": "  private static final String MODULE_NAME_PREFIX = \"module$\";",
        "begin_line": 46,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessCommonJSModules",
        "src_path": "src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "signature": "com.google.javascript.jscomp.ProcessCommonJSModules.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 48,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessCommonJSModules",
        "src_path": "src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "signature": "com.google.javascript.jscomp.ProcessCommonJSModules.filenamePrefix",
        "snippet": "  private final String filenamePrefix;",
        "begin_line": 49,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessCommonJSModules",
        "src_path": "src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "signature": "com.google.javascript.jscomp.ProcessCommonJSModules.reportDependencies",
        "snippet": "  private final boolean reportDependencies;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessCommonJSModules",
        "src_path": "src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "signature": "com.google.javascript.jscomp.ProcessCommonJSModules.module",
        "snippet": "  private JSModule module;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessCommonJsModulesCallback",
        "src_path": "src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "signature": "com.google.javascript.jscomp.ProcessCommonJsModulesCallback.scriptNodeCount",
        "snippet": "    private int scriptNodeCount = 0;",
        "begin_line": 134,
        "end_line": 134,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessCommonJsModulesCallback",
        "src_path": "src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "signature": "com.google.javascript.jscomp.ProcessCommonJsModulesCallback.modulesWithExports",
        "snippet": "    private Set<String> modulesWithExports = Sets.newHashSet();",
        "begin_line": 135,
        "end_line": 135,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SuffixVarsCallback",
        "src_path": "src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "signature": "com.google.javascript.jscomp.SuffixVarsCallback.EXPORTS",
        "snippet": "    private static final String EXPORTS = \"exports\";",
        "begin_line": 259,
        "end_line": 259,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SuffixVarsCallback",
        "src_path": "src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "signature": "com.google.javascript.jscomp.SuffixVarsCallback.suffix",
        "snippet": "    private final String suffix;",
        "begin_line": 261,
        "end_line": 261,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PassFactory",
        "src_path": "src/com/google/javascript/jscomp/PassFactory.java",
        "signature": "com.google.javascript.jscomp.PassFactory.name",
        "snippet": "  private final String name;",
        "begin_line": 29,
        "end_line": 29,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PassFactory",
        "src_path": "src/com/google/javascript/jscomp/PassFactory.java",
        "signature": "com.google.javascript.jscomp.PassFactory.isOneTimePass",
        "snippet": "  private final boolean isOneTimePass;",
        "begin_line": 30,
        "end_line": 30,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DotFormatter",
        "src_path": "src/com/google/javascript/jscomp/DotFormatter.java",
        "signature": "com.google.javascript.jscomp.DotFormatter.INDENT",
        "snippet": "  private static final String INDENT = \"  \";",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DotFormatter",
        "src_path": "src/com/google/javascript/jscomp/DotFormatter.java",
        "signature": "com.google.javascript.jscomp.DotFormatter.ARROW",
        "snippet": "  private static final String ARROW = \" -> \";",
        "begin_line": 46,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DotFormatter",
        "src_path": "src/com/google/javascript/jscomp/DotFormatter.java",
        "signature": "com.google.javascript.jscomp.DotFormatter.LINE",
        "snippet": "  private static final String LINE = \" -- \";",
        "begin_line": 47,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DotFormatter",
        "src_path": "src/com/google/javascript/jscomp/DotFormatter.java",
        "signature": "com.google.javascript.jscomp.DotFormatter.assignments",
        "snippet": "  private HashMap<Node, Integer> assignments = new HashMap<Node, Integer>();",
        "begin_line": 50,
        "end_line": 50,
        "comment": " stores the current assignment of node to keys"
    },
    {
        "class_name": "com.google.javascript.jscomp.DotFormatter",
        "src_path": "src/com/google/javascript/jscomp/DotFormatter.java",
        "signature": "com.google.javascript.jscomp.DotFormatter.keyCount",
        "snippet": "  private int keyCount = 0;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " key count in order to assign a unique key to each node"
    },
    {
        "class_name": "com.google.javascript.jscomp.DotFormatter",
        "src_path": "src/com/google/javascript/jscomp/DotFormatter.java",
        "signature": "com.google.javascript.jscomp.DotFormatter.builder",
        "snippet": "  private Appendable builder;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " the builder used to generate the dot diagram"
    },
    {
        "class_name": "com.google.javascript.jscomp.DotFormatter",
        "src_path": "src/com/google/javascript/jscomp/DotFormatter.java",
        "signature": "com.google.javascript.jscomp.DotFormatter.cfg",
        "snippet": "  private final ControlFlowGraph<Node> cfg;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DotFormatter",
        "src_path": "src/com/google/javascript/jscomp/DotFormatter.java",
        "signature": "com.google.javascript.jscomp.DotFormatter.printAnnotations",
        "snippet": "  private final boolean printAnnotations;",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Normalize",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.Normalize.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 67,
        "end_line": 67,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Normalize",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.Normalize.assertOnChange",
        "snippet": "  private final boolean assertOnChange;",
        "begin_line": 68,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Normalize",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.Normalize.CONVERT_WHILE_TO_FOR",
        "snippet": "  private static final boolean CONVERT_WHILE_TO_FOR = true;",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Normalize",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.Normalize.MAKE_LOCAL_NAMES_UNIQUE",
        "snippet": "  static final boolean MAKE_LOCAL_NAMES_UNIQUE = true;",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Normalize",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.Normalize.CATCH_BLOCK_VAR_ERROR",
        "snippet": "  public static final DiagnosticType CATCH_BLOCK_VAR_ERROR =\n    DiagnosticType.error(\n        \"JSC_CATCH_BLOCK_VAR_ERROR\",\n        \"The use of scope variable {0} is not allowed within a catch block \" +\n        \"with a catch exception of the same name.\");",
        "begin_line": 72,
        "end_line": 76,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FindExposeAnnotations",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.FindExposeAnnotations.exposedProperties",
        "snippet": "    private final Set<String> exposedProperties = Sets.newHashSet();",
        "begin_line": 165,
        "end_line": 165,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RewriteExposedProperties",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.RewriteExposedProperties.exposedProperties",
        "snippet": "    private final Set<String> exposedProperties;",
        "begin_line": 190,
        "end_line": 190,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PropagateConstantAnnotationsOverVars",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.PropagateConstantAnnotationsOverVars.compiler",
        "snippet": "    private final AbstractCompiler compiler;",
        "begin_line": 221,
        "end_line": 221,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PropagateConstantAnnotationsOverVars",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.PropagateConstantAnnotationsOverVars.assertOnChange",
        "snippet": "    private final boolean assertOnChange;",
        "begin_line": 222,
        "end_line": 222,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VerifyConstants",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.VerifyConstants.compiler",
        "snippet": "    final private AbstractCompiler compiler;",
        "begin_line": 275,
        "end_line": 275,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VerifyConstants",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.VerifyConstants.checkUserDeclarations",
        "snippet": "    final private boolean checkUserDeclarations;",
        "begin_line": 276,
        "end_line": 276,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VerifyConstants",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.VerifyConstants.constantMap",
        "snippet": "    private Map<String, Boolean> constantMap = Maps.newHashMap();",
        "begin_line": 293,
        "end_line": 293,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeStatements",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.NormalizeStatements.compiler",
        "snippet": "    private final AbstractCompiler compiler;",
        "begin_line": 357,
        "end_line": 357,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeStatements",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.NormalizeStatements.assertOnChange",
        "snippet": "    private final boolean assertOnChange;",
        "begin_line": 358,
        "end_line": 358,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DuplicateDeclarationHandler",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.DuplicateDeclarationHandler.hasOkDuplicateDeclaration",
        "snippet": "    private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();",
        "begin_line": 710,
        "end_line": 710,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.WhitelistWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/WhitelistWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.WhitelistWarningsGuard.LINE_SPLITTER",
        "snippet": "  private static final Splitter LINE_SPLITTER = Splitter.on(\"\\n\");",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.WhitelistWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/WhitelistWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.WhitelistWarningsGuard.whitelist",
        "snippet": "  private final Set<String> whitelist;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " The set of white-listed warnings, same format as {@code formatWarning}. "
    },
    {
        "class_name": "com.google.javascript.jscomp.WhitelistWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/WhitelistWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.WhitelistWarningsGuard.LINE_NUMBER",
        "snippet": "  private static final Pattern LINE_NUMBER = Pattern.compile(\":-?\\\\d+\");",
        "begin_line": 59,
        "end_line": 59,
        "comment": " Pattern to match line number in error descriptions. "
    },
    {
        "class_name": "com.google.javascript.jscomp.WhitelistBuilder",
        "src_path": "src/com/google/javascript/jscomp/WhitelistWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.WhitelistBuilder.warnings",
        "snippet": "    private final Set<JSError> warnings = Sets.newLinkedHashSet();",
        "begin_line": 205,
        "end_line": 205,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.WhitelistBuilder",
        "src_path": "src/com/google/javascript/jscomp/WhitelistWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.WhitelistBuilder.productName",
        "snippet": "    private String productName = null;",
        "begin_line": 206,
        "end_line": 206,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.WhitelistBuilder",
        "src_path": "src/com/google/javascript/jscomp/WhitelistWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.WhitelistBuilder.generatorTarget",
        "snippet": "    private String generatorTarget = null;",
        "begin_line": 207,
        "end_line": 207,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.WhitelistBuilder",
        "src_path": "src/com/google/javascript/jscomp/WhitelistWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.WhitelistBuilder.headerNote",
        "snippet": "    private String headerNote = null;",
        "begin_line": 208,
        "end_line": 208,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CoalesceVariableNames",
        "src_path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "signature": "com.google.javascript.jscomp.CoalesceVariableNames.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CoalesceVariableNames",
        "src_path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "signature": "com.google.javascript.jscomp.CoalesceVariableNames.colorings",
        "snippet": "  private final Deque<GraphColoring<Var, Void>> colorings;",
        "begin_line": 63,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CoalesceVariableNames",
        "src_path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "signature": "com.google.javascript.jscomp.CoalesceVariableNames.usePseudoNames",
        "snippet": "  private final boolean usePseudoNames;",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CoalesceVariableNames",
        "src_path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "signature": "com.google.javascript.jscomp.CoalesceVariableNames.coloringTieBreaker",
        "snippet": "  private static final Comparator<Var> coloringTieBreaker =\n      new Comparator<Var>() {\n    @Override\n    public int compare(Var v1, Var v2) {\n      return v1.index - v2.index;\n    }\n  };",
        "begin_line": 66,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CombinedLiveRangeChecker",
        "src_path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "signature": "com.google.javascript.jscomp.CombinedLiveRangeChecker.callback1",
        "snippet": "    private final LiveRangeChecker callback1;",
        "begin_line": 315,
        "end_line": 315,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CombinedLiveRangeChecker",
        "src_path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "signature": "com.google.javascript.jscomp.CombinedLiveRangeChecker.callback2",
        "snippet": "    private final LiveRangeChecker callback2;",
        "begin_line": 316,
        "end_line": 316,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveRangeChecker",
        "src_path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "signature": "com.google.javascript.jscomp.LiveRangeChecker.defFound",
        "snippet": "    boolean defFound = false;",
        "begin_line": 384,
        "end_line": 384,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveRangeChecker",
        "src_path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "signature": "com.google.javascript.jscomp.LiveRangeChecker.crossed",
        "snippet": "    boolean crossed = false;",
        "begin_line": 385,
        "end_line": 385,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveRangeChecker",
        "src_path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "signature": "com.google.javascript.jscomp.LiveRangeChecker.def",
        "snippet": "    private final Var def;",
        "begin_line": 386,
        "end_line": 386,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveRangeChecker",
        "src_path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "signature": "com.google.javascript.jscomp.LiveRangeChecker.use",
        "snippet": "    private final Var use;",
        "begin_line": 387,
        "end_line": 387,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveVariablesAnalysis",
        "src_path": "src/com/google/javascript/jscomp/LiveVariablesAnalysis.java",
        "signature": "com.google.javascript.jscomp.LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE",
        "snippet": "  static final int MAX_VARIABLES_TO_ANALYZE = 100;",
        "begin_line": 54,
        "end_line": 54,
        "comment": "       (# of Ninja Turtles)"
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveVariablesAnalysis",
        "src_path": "src/com/google/javascript/jscomp/LiveVariablesAnalysis.java",
        "signature": "com.google.javascript.jscomp.LiveVariablesAnalysis.ARGUMENT_ARRAY_ALIAS",
        "snippet": "  public static final String ARGUMENT_ARRAY_ALIAS = \"arguments\";",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveVariableLattice",
        "src_path": "src/com/google/javascript/jscomp/LiveVariablesAnalysis.java",
        "signature": "com.google.javascript.jscomp.LiveVariableLattice.liveSet",
        "snippet": "    private final BitSet liveSet;",
        "begin_line": 76,
        "end_line": 76,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveVariablesAnalysis",
        "src_path": "src/com/google/javascript/jscomp/LiveVariablesAnalysis.java",
        "signature": "com.google.javascript.jscomp.LiveVariablesAnalysis.jsScope",
        "snippet": "  private final Scope jsScope;",
        "begin_line": 118,
        "end_line": 118,
        "comment": " The scope of the function that we are analyzing."
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveVariablesAnalysis",
        "src_path": "src/com/google/javascript/jscomp/LiveVariablesAnalysis.java",
        "signature": "com.google.javascript.jscomp.LiveVariablesAnalysis.escaped",
        "snippet": "  private final Set<Var> escaped;",
        "begin_line": 119,
        "end_line": 119,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameReferenceGraph",
        "src_path": "src/com/google/javascript/jscomp/NameReferenceGraph.java",
        "signature": "com.google.javascript.jscomp.NameReferenceGraph.referenceMap",
        "snippet": "  private final Multimap<Node, Name>\n      referenceMap = HashMultimap.create();",
        "begin_line": 66,
        "end_line": 67,
        "comment": " list of possible call edge destinations."
    },
    {
        "class_name": "com.google.javascript.jscomp.NameReferenceGraph",
        "src_path": "src/com/google/javascript/jscomp/NameReferenceGraph.java",
        "signature": "com.google.javascript.jscomp.NameReferenceGraph.nameMap",
        "snippet": "  private Map<String, Name> nameMap = Maps.newHashMap();",
        "begin_line": 70,
        "end_line": 70,
        "comment": " Given a qualified name, provides the Name object."
    },
    {
        "class_name": "com.google.javascript.jscomp.NameReferenceGraph",
        "src_path": "src/com/google/javascript/jscomp/NameReferenceGraph.java",
        "signature": "com.google.javascript.jscomp.NameReferenceGraph.UNKNOWN",
        "snippet": "  final Name UNKNOWN;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " it calls or reference, we'd point it to UNKNOWN."
    },
    {
        "class_name": "com.google.javascript.jscomp.NameReferenceGraph",
        "src_path": "src/com/google/javascript/jscomp/NameReferenceGraph.java",
        "signature": "com.google.javascript.jscomp.NameReferenceGraph.MAIN",
        "snippet": "  final Name MAIN;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " Represents the \"main\" global block as well as externs."
    },
    {
        "class_name": "com.google.javascript.jscomp.NameReferenceGraph",
        "src_path": "src/com/google/javascript/jscomp/NameReferenceGraph.java",
        "signature": "com.google.javascript.jscomp.NameReferenceGraph.WINDOW",
        "snippet": "  final Name WINDOW;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " The implicit \"window\" object."
    },
    {
        "class_name": "com.google.javascript.jscomp.NameReferenceGraph",
        "src_path": "src/com/google/javascript/jscomp/NameReferenceGraph.java",
        "signature": "com.google.javascript.jscomp.NameReferenceGraph.compiler",
        "snippet": "  final AbstractCompiler compiler;",
        "begin_line": 84,
        "end_line": 84,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/NameReferenceGraph.java",
        "signature": "com.google.javascript.jscomp.Name.qName",
        "snippet": "    private final String qName;",
        "begin_line": 173,
        "end_line": 173,
        "comment": " Full name"
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/NameReferenceGraph.java",
        "signature": "com.google.javascript.jscomp.Name.type",
        "snippet": "    private JSType type;",
        "begin_line": 175,
        "end_line": 175,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/NameReferenceGraph.java",
        "signature": "com.google.javascript.jscomp.Name.declarations",
        "snippet": "    private List<Definition> declarations = Lists.newLinkedList();",
        "begin_line": 178,
        "end_line": 178,
        "comment": " A list (re)declarations"
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/NameReferenceGraph.java",
        "signature": "com.google.javascript.jscomp.Name.isExtern",
        "snippet": "    final boolean isExtern;",
        "begin_line": 180,
        "end_line": 180,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/NameReferenceGraph.java",
        "signature": "com.google.javascript.jscomp.Name.isExported",
        "snippet": "    private boolean isExported = false;",
        "begin_line": 182,
        "end_line": 182,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/NameReferenceGraph.java",
        "signature": "com.google.javascript.jscomp.Name.isAliased",
        "snippet": "    private boolean isAliased = false;",
        "begin_line": 184,
        "end_line": 184,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/NameReferenceGraph.java",
        "signature": "com.google.javascript.jscomp.Name.exposedToCallOrApply",
        "snippet": "    private boolean exposedToCallOrApply = false;",
        "begin_line": 194,
        "end_line": 194,
        "comment": " becomes aware of those cases."
    },
    {
        "class_name": "com.google.javascript.jscomp.Reference",
        "src_path": "src/com/google/javascript/jscomp/NameReferenceGraph.java",
        "signature": "com.google.javascript.jscomp.Reference.site",
        "snippet": "    public final Node site;",
        "begin_line": 359,
        "end_line": 359,
        "comment": " The node that references the name."
    },
    {
        "class_name": "com.google.javascript.jscomp.Reference",
        "src_path": "src/com/google/javascript/jscomp/NameReferenceGraph.java",
        "signature": "com.google.javascript.jscomp.Reference.parent",
        "snippet": "    public final Node parent;",
        "begin_line": 362,
        "end_line": 362,
        "comment": " Parent pointer."
    },
    {
        "class_name": "com.google.javascript.jscomp.Reference",
        "src_path": "src/com/google/javascript/jscomp/NameReferenceGraph.java",
        "signature": "com.google.javascript.jscomp.Reference.module",
        "snippet": "    private JSModule module = null;",
        "begin_line": 364,
        "end_line": 364,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Reference",
        "src_path": "src/com/google/javascript/jscomp/NameReferenceGraph.java",
        "signature": "com.google.javascript.jscomp.Reference.isUnknown",
        "snippet": "    private boolean isUnknown = false;",
        "begin_line": 369,
        "end_line": 369,
        "comment": " A.x() reference to someObject.y and B.y MAY be the site."
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasStrings",
        "src_path": "src/com/google/javascript/jscomp/AliasStrings.java",
        "signature": "com.google.javascript.jscomp.AliasStrings.logger",
        "snippet": "  private static final Logger logger =\n      Logger.getLogger(AliasStrings.class.getName());",
        "begin_line": 48,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasStrings",
        "src_path": "src/com/google/javascript/jscomp/AliasStrings.java",
        "signature": "com.google.javascript.jscomp.AliasStrings.STRING_ALIAS_PREFIX",
        "snippet": "  private static final String STRING_ALIAS_PREFIX = \"$$S_\";",
        "begin_line": 52,
        "end_line": 52,
        "comment": " Prefix for variable names for the aliased strings "
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasStrings",
        "src_path": "src/com/google/javascript/jscomp/AliasStrings.java",
        "signature": "com.google.javascript.jscomp.AliasStrings.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasStrings",
        "src_path": "src/com/google/javascript/jscomp/AliasStrings.java",
        "signature": "com.google.javascript.jscomp.AliasStrings.moduleGraph",
        "snippet": "  private final JSModuleGraph moduleGraph;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasStrings",
        "src_path": "src/com/google/javascript/jscomp/AliasStrings.java",
        "signature": "com.google.javascript.jscomp.AliasStrings.blacklist",
        "snippet": "  private Matcher blacklist = null;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " Regular expression matcher for a blacklisting strings in aliasing."
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasStrings",
        "src_path": "src/com/google/javascript/jscomp/AliasStrings.java",
        "signature": "com.google.javascript.jscomp.AliasStrings.aliasableStrings",
        "snippet": "  private final Set<String> aliasableStrings;",
        "begin_line": 65,
        "end_line": 65,
        "comment": "\n   * Strings that can be aliased, or null if all strings except 'undefined'\n   * should be aliased\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasStrings",
        "src_path": "src/com/google/javascript/jscomp/AliasStrings.java",
        "signature": "com.google.javascript.jscomp.AliasStrings.outputStringUsage",
        "snippet": "  private final boolean outputStringUsage;",
        "begin_line": 67,
        "end_line": 67,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasStrings",
        "src_path": "src/com/google/javascript/jscomp/AliasStrings.java",
        "signature": "com.google.javascript.jscomp.AliasStrings.stringInfoMap",
        "snippet": "  private final SortedMap<String, StringInfo> stringInfoMap = Maps.newTreeMap();",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasStrings",
        "src_path": "src/com/google/javascript/jscomp/AliasStrings.java",
        "signature": "com.google.javascript.jscomp.AliasStrings.usedHashedAliases",
        "snippet": "  private final Set<String> usedHashedAliases = new LinkedHashSet<String>();",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasStrings",
        "src_path": "src/com/google/javascript/jscomp/AliasStrings.java",
        "signature": "com.google.javascript.jscomp.AliasStrings.moduleVarParentMap",
        "snippet": "  private final Map<JSModule, Node> moduleVarParentMap =\n      new HashMap<JSModule, Node>();",
        "begin_line": 77,
        "end_line": 78,
        "comment": "\n   * Map from module to the node in that module that should parent any string\n   * variable declarations that have to be moved into that module\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasStrings",
        "src_path": "src/com/google/javascript/jscomp/AliasStrings.java",
        "signature": "com.google.javascript.jscomp.AliasStrings.unitTestHashReductionMask",
        "snippet": "  long unitTestHashReductionMask = ~0L;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " package private.  This value is AND-ed with the hash function to allow\n   * unit tests to reduce the range of hash values to test collision cases "
    },
    {
        "class_name": "com.google.javascript.jscomp.StringOccurrence",
        "src_path": "src/com/google/javascript/jscomp/AliasStrings.java",
        "signature": "com.google.javascript.jscomp.StringOccurrence.node",
        "snippet": "    final Node node;",
        "begin_line": 341,
        "end_line": 341,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StringOccurrence",
        "src_path": "src/com/google/javascript/jscomp/AliasStrings.java",
        "signature": "com.google.javascript.jscomp.StringOccurrence.parent",
        "snippet": "    final Node parent;",
        "begin_line": 342,
        "end_line": 342,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StringInfo",
        "src_path": "src/com/google/javascript/jscomp/AliasStrings.java",
        "signature": "com.google.javascript.jscomp.StringInfo.id",
        "snippet": "    final int id;",
        "begin_line": 355,
        "end_line": 355,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StringInfo",
        "src_path": "src/com/google/javascript/jscomp/AliasStrings.java",
        "signature": "com.google.javascript.jscomp.StringInfo.isAliased",
        "snippet": "    boolean isAliased;      // set to 'true' when reference to alias created",
        "begin_line": 357,
        "end_line": 357,
        "comment": " set to 'true' when reference to alias created"
    },
    {
        "class_name": "com.google.javascript.jscomp.StringInfo",
        "src_path": "src/com/google/javascript/jscomp/AliasStrings.java",
        "signature": "com.google.javascript.jscomp.StringInfo.occurrences",
        "snippet": "    final List<StringOccurrence> occurrences;",
        "begin_line": 359,
        "end_line": 359,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StringInfo",
        "src_path": "src/com/google/javascript/jscomp/AliasStrings.java",
        "signature": "com.google.javascript.jscomp.StringInfo.numOccurrences",
        "snippet": "    int numOccurrences;",
        "begin_line": 360,
        "end_line": 360,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StringInfo",
        "src_path": "src/com/google/javascript/jscomp/AliasStrings.java",
        "signature": "com.google.javascript.jscomp.StringInfo.numOccurrencesInfrequentlyExecuted",
        "snippet": "    int numOccurrencesInfrequentlyExecuted;",
        "begin_line": 361,
        "end_line": 361,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StringInfo",
        "src_path": "src/com/google/javascript/jscomp/AliasStrings.java",
        "signature": "com.google.javascript.jscomp.StringInfo.moduleToContainDecl",
        "snippet": "    JSModule moduleToContainDecl;",
        "begin_line": 363,
        "end_line": 363,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StringInfo",
        "src_path": "src/com/google/javascript/jscomp/AliasStrings.java",
        "signature": "com.google.javascript.jscomp.StringInfo.parentForNewVarDecl",
        "snippet": "    Node parentForNewVarDecl;",
        "begin_line": 364,
        "end_line": 364,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StringInfo",
        "src_path": "src/com/google/javascript/jscomp/AliasStrings.java",
        "signature": "com.google.javascript.jscomp.StringInfo.siblingToInsertVarDeclBefore",
        "snippet": "    Node siblingToInsertVarDeclBefore;",
        "begin_line": 365,
        "end_line": 365,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StringInfo",
        "src_path": "src/com/google/javascript/jscomp/AliasStrings.java",
        "signature": "com.google.javascript.jscomp.StringInfo.aliasName",
        "snippet": "    String aliasName;",
        "begin_line": 367,
        "end_line": 367,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "signature": "com.google.javascript.jscomp.AstValidator.violationHandler",
        "snippet": "  private final ViolationHandler violationHandler;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.codingConvention",
        "snippet": "  private final CodingConvention codingConvention;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.removeGlobals",
        "snippet": "  private final boolean removeGlobals;",
        "begin_line": 76,
        "end_line": 76,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.preserveFunctionExpressionNames",
        "snippet": "  private boolean preserveFunctionExpressionNames;",
        "begin_line": 78,
        "end_line": 78,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.referenced",
        "snippet": "  private final Set<Var> referenced = Sets.newHashSet();",
        "begin_line": 83,
        "end_line": 83,
        "comment": "\n   * Keep track of variables that we've referenced.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.maybeUnreferenced",
        "snippet": "  private final List<Var> maybeUnreferenced = Lists.newArrayList();",
        "begin_line": 88,
        "end_line": 88,
        "comment": "\n   * Keep track of variables that might be unreferenced.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.allFunctionScopes",
        "snippet": "  private final List<Scope> allFunctionScopes = Lists.newArrayList();",
        "begin_line": 93,
        "end_line": 93,
        "comment": "\n   * Keep track of scopes that we've traversed.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.assignsByVar",
        "snippet": "  private final Multimap<Var, Assign> assignsByVar =\n      ArrayListMultimap.create();",
        "begin_line": 98,
        "end_line": 99,
        "comment": "\n   * Keep track of assigns to variables that we haven't referenced.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.assignsByNode",
        "snippet": "  private final Map<Node, Assign> assignsByNode = Maps.newHashMap();",
        "begin_line": 104,
        "end_line": 104,
        "comment": "\n   * The assigns, indexed by the NAME node that they assign to.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.classDefiningCalls",
        "snippet": "  private final Multimap<Var, Node> classDefiningCalls =\n      ArrayListMultimap.create();",
        "begin_line": 109,
        "end_line": 110,
        "comment": "\n   * Subclass name -> class-defining call EXPR node. (like inherits)\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.continuations",
        "snippet": "  private final Multimap<Var, Continuation> continuations =\n      ArrayListMultimap.create();",
        "begin_line": 116,
        "end_line": 117,
        "comment": "\n   * Keep track of continuations that are finished iff the variable they're\n   * indexed by is referenced.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.modifyCallSites",
        "snippet": "  private boolean modifyCallSites;",
        "begin_line": 119,
        "end_line": 119,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.callSiteOptimizer",
        "snippet": "  private CallSiteOptimizer callSiteOptimizer;",
        "begin_line": 121,
        "end_line": 121,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CallSiteOptimizer",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.CallSiteOptimizer.compiler",
        "snippet": "    private final AbstractCompiler compiler;",
        "begin_line": 409,
        "end_line": 409,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CallSiteOptimizer",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.CallSiteOptimizer.defFinder",
        "snippet": "    private final SimpleDefinitionFinder defFinder;",
        "begin_line": 410,
        "end_line": 410,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CallSiteOptimizer",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.CallSiteOptimizer.toRemove",
        "snippet": "    private final List<Node> toRemove = Lists.newArrayList();",
        "begin_line": 411,
        "end_line": 411,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CallSiteOptimizer",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.CallSiteOptimizer.toReplaceWithZero",
        "snippet": "    private final List<Node> toReplaceWithZero = Lists.newArrayList();",
        "begin_line": 412,
        "end_line": 412,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Continuation",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.Continuation.node",
        "snippet": "    private final Node node;",
        "begin_line": 867,
        "end_line": 867,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Continuation",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.Continuation.scope",
        "snippet": "    private final Scope scope;",
        "begin_line": 868,
        "end_line": 868,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Assign",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.Assign.assignNode",
        "snippet": "    final Node assignNode;",
        "begin_line": 889,
        "end_line": 889,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Assign",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.Assign.nameNode",
        "snippet": "    final Node nameNode;",
        "begin_line": 891,
        "end_line": 891,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Assign",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.Assign.isPropertyAssign",
        "snippet": "    final boolean isPropertyAssign;",
        "begin_line": 895,
        "end_line": 895,
        "comment": " this is an assign to a property of that variable."
    },
    {
        "class_name": "com.google.javascript.jscomp.Assign",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.Assign.mayHaveSecondarySideEffects",
        "snippet": "    final boolean mayHaveSecondarySideEffects;",
        "begin_line": 906,
        "end_line": 906,
        "comment": " way."
    },
    {
        "class_name": "com.google.javascript.jscomp.Assign",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.Assign.maybeAliased",
        "snippet": "    final boolean maybeAliased;",
        "begin_line": 909,
        "end_line": 909,
        "comment": " If true, the value may have escaped and any modification is a use."
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCompiler",
        "src_path": "src/com/google/javascript/jscomp/AbstractCompiler.java",
        "signature": "com.google.javascript.jscomp.AbstractCompiler.READ_ERROR",
        "snippet": "  static final DiagnosticType READ_ERROR = DiagnosticType.error(\n      \"JSC_READ_ERROR\", \"Cannot read: {0}\");",
        "begin_line": 44,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCompiler",
        "src_path": "src/com/google/javascript/jscomp/AbstractCompiler.java",
        "signature": "com.google.javascript.jscomp.AbstractCompiler.stage",
        "snippet": "  private LifeCycleStage stage = LifeCycleStage.RAW;",
        "begin_line": 47,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveTryCatch",
        "src_path": "src/com/google/javascript/jscomp/RemoveTryCatch.java",
        "signature": "com.google.javascript.jscomp.RemoveTryCatch.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 34,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveTryCatch",
        "src_path": "src/com/google/javascript/jscomp/RemoveTryCatch.java",
        "signature": "com.google.javascript.jscomp.RemoveTryCatch.tryNodesContainingReturnStatements",
        "snippet": "  private final Set<Node> tryNodesContainingReturnStatements;",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.typeRegistry",
        "snippet": "  private final JSTypeRegistry typeRegistry;",
        "begin_line": 61,
        "end_line": 61,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.allValueTypes",
        "snippet": "  private final JSType allValueTypes;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.shouldReport",
        "snippet": "  private boolean shouldReport = true;",
        "begin_line": 63,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.nullOrUndefined",
        "snippet": "  private final JSType nullOrUndefined;",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.mismatches",
        "snippet": "  private final List<TypeMismatch> mismatches = Lists.newArrayList();",
        "begin_line": 69,
        "end_line": 69,
        "comment": " allowed, that doesn't mean we should invalidate all Cakes."
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.FOUND_REQUIRED",
        "snippet": "  private static final String FOUND_REQUIRED =\n      \"{0}\\n\" +\n      \"found   : {1}\\n\" +\n      \"required: {2}\";",
        "begin_line": 72,
        "end_line": 75,
        "comment": " User warnings"
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.INVALID_CAST",
        "snippet": "  static final DiagnosticType INVALID_CAST =\n      DiagnosticType.disabled(\"JSC_INVALID_CAST\",\n          \"invalid cast - must be a subtype or supertype\\n\" +\n          \"from: {0}\\n\" +\n          \"to  : {1}\");",
        "begin_line": 78,
        "end_line": 82,
        "comment": " TODO(johnlenz): reenable this after after the next release."
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.TYPE_MISMATCH_WARNING",
        "snippet": "  static final DiagnosticType TYPE_MISMATCH_WARNING =\n      DiagnosticType.warning(\n          \"JSC_TYPE_MISMATCH\",\n          \"{0}\");",
        "begin_line": 84,
        "end_line": 87,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.MISSING_EXTENDS_TAG_WARNING",
        "snippet": "  static final DiagnosticType MISSING_EXTENDS_TAG_WARNING =\n      DiagnosticType.warning(\n          \"JSC_MISSING_EXTENDS_TAG\",\n          \"Missing @extends tag on type {0}\");",
        "begin_line": 89,
        "end_line": 92,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.DUP_VAR_DECLARATION",
        "snippet": "  static final DiagnosticType DUP_VAR_DECLARATION =\n      DiagnosticType.warning(\"JSC_DUP_VAR_DECLARATION\",\n          \"variable {0} redefined with type {1}, \" +\n          \"original definition at {2}:{3} with type {4}\");",
        "begin_line": 94,
        "end_line": 97,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.HIDDEN_PROPERTY_MISMATCH",
        "snippet": "  static final DiagnosticType HIDDEN_PROPERTY_MISMATCH =\n      DiagnosticType.warning(\"JSC_HIDDEN_PROPERTY_MISMATCH\",\n          \"mismatch of the {0} property type and the type \" +\n          \"of the property it overrides from superclass {1}\\n\" +\n          \"original: {2}\\n\" +\n          \"override: {3}\");",
        "begin_line": 99,
        "end_line": 104,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.INTERFACE_METHOD_NOT_IMPLEMENTED",
        "snippet": "  static final DiagnosticType INTERFACE_METHOD_NOT_IMPLEMENTED =\n      DiagnosticType.warning(\n          \"JSC_INTERFACE_METHOD_NOT_IMPLEMENTED\",\n          \"property {0} on interface {1} is not implemented by type {2}\");",
        "begin_line": 106,
        "end_line": 109,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.HIDDEN_INTERFACE_PROPERTY_MISMATCH",
        "snippet": "  static final DiagnosticType HIDDEN_INTERFACE_PROPERTY_MISMATCH =\n      DiagnosticType.warning(\n        \"JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH\",\n        \"mismatch of the {0} property type and the type \" +\n        \"of the property it overrides from interface {1}\\n\" +\n        \"original: {2}\\n\" +\n        \"override: {3}\");",
        "begin_line": 111,
        "end_line": 117,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.UNKNOWN_TYPEOF_VALUE",
        "snippet": "  static final DiagnosticType UNKNOWN_TYPEOF_VALUE =\n      DiagnosticType.warning(\"JSC_UNKNOWN_TYPEOF_VALUE\", \"unknown type: {0}\");",
        "begin_line": 119,
        "end_line": 120,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.ILLEGAL_PROPERTY_ACCESS",
        "snippet": "  static final DiagnosticType ILLEGAL_PROPERTY_ACCESS =\n      DiagnosticType.warning(\"JSC_ILLEGAL_PROPERTY_ACCESS\",\n                             \"Cannot do {0} access on a {1}\");",
        "begin_line": 122,
        "end_line": 124,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.ALL_DIAGNOSTICS",
        "snippet": "  static final DiagnosticGroup ALL_DIAGNOSTICS = new DiagnosticGroup(\n      INVALID_CAST,\n      TYPE_MISMATCH_WARNING,\n      MISSING_EXTENDS_TAG_WARNING,\n      DUP_VAR_DECLARATION,\n      HIDDEN_PROPERTY_MISMATCH,\n      INTERFACE_METHOD_NOT_IMPLEMENTED,\n      HIDDEN_INTERFACE_PROPERTY_MISMATCH,\n      UNKNOWN_TYPEOF_VALUE,\n      ILLEGAL_PROPERTY_ACCESS);",
        "begin_line": 126,
        "end_line": 135,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeMismatch",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeMismatch.typeA",
        "snippet": "    final JSType typeA;",
        "begin_line": 796,
        "end_line": 796,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeMismatch",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeMismatch.typeB",
        "snippet": "    final JSType typeB;",
        "begin_line": 797,
        "end_line": 797,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeMismatch",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeMismatch.src",
        "snippet": "    final JSError src;",
        "begin_line": 798,
        "end_line": 798,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedPrototypeProperties",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedPrototypeProperties.logger",
        "snippet": "  private static final Logger logger =\n    Logger.getLogger(RemoveUnusedPrototypeProperties.class.getName());",
        "begin_line": 37,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedPrototypeProperties",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedPrototypeProperties.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedPrototypeProperties",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedPrototypeProperties.canModifyExterns",
        "snippet": "  private final boolean canModifyExterns;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedPrototypeProperties",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedPrototypeProperties.anchorUnusedVars",
        "snippet": "  private final boolean anchorUnusedVars;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedPrototypeProperties",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedPrototypeProperties.specializationState",
        "snippet": "  private SpecializeModule.SpecializationState specializationState;",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CallGraph",
        "src_path": "src/com/google/javascript/jscomp/CallGraph.java",
        "signature": "com.google.javascript.jscomp.CallGraph.compiler",
        "snippet": "  private AbstractCompiler compiler;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CallGraph",
        "src_path": "src/com/google/javascript/jscomp/CallGraph.java",
        "signature": "com.google.javascript.jscomp.CallGraph.callsitesByNode",
        "snippet": "  private Map<Node, Callsite> callsitesByNode;",
        "begin_line": 67,
        "end_line": 67,
        "comment": "\n   * Maps an AST node (with type Token.CALL or Token.NEW) to a Callsite object.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CallGraph",
        "src_path": "src/com/google/javascript/jscomp/CallGraph.java",
        "signature": "com.google.javascript.jscomp.CallGraph.functionsByNode",
        "snippet": "  private Map<Node, Function> functionsByNode;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " Maps an AST node (with type Token.FUNCTION) to a Function object. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CallGraph",
        "src_path": "src/com/google/javascript/jscomp/CallGraph.java",
        "signature": "com.google.javascript.jscomp.CallGraph.computeBackwardGraph",
        "snippet": "  private boolean computeBackwardGraph;",
        "begin_line": 76,
        "end_line": 76,
        "comment": "\n   * Will the call graph support looking up the callsites that could call a\n   * given function?\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CallGraph",
        "src_path": "src/com/google/javascript/jscomp/CallGraph.java",
        "signature": "com.google.javascript.jscomp.CallGraph.computeForwardGraph",
        "snippet": "  private boolean computeForwardGraph;",
        "begin_line": 82,
        "end_line": 82,
        "comment": "\n   * Will the call graph support looking up the functions that a given callsite\n   * can call?\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CallGraph",
        "src_path": "src/com/google/javascript/jscomp/CallGraph.java",
        "signature": "com.google.javascript.jscomp.CallGraph.useNameReferenceGraph",
        "snippet": "  private boolean useNameReferenceGraph = false;",
        "begin_line": 88,
        "end_line": 88,
        "comment": "\n   * If true, then the callgraph will use NameReferenceGraph as a\n   * definition provider; otherwise, use the faster SimpleDefinitionProvider.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CallGraph",
        "src_path": "src/com/google/javascript/jscomp/CallGraph.java",
        "signature": "com.google.javascript.jscomp.CallGraph.alreadyRun",
        "snippet": "  private boolean alreadyRun = false;",
        "begin_line": 91,
        "end_line": 91,
        "comment": " Has the CallGraph already been constructed? "
    },
    {
        "class_name": "com.google.javascript.jscomp.CallGraph",
        "src_path": "src/com/google/javascript/jscomp/CallGraph.java",
        "signature": "com.google.javascript.jscomp.CallGraph.MAIN_FUNCTION_NAME",
        "snippet": "  @VisibleForTesting\n  public static final String MAIN_FUNCTION_NAME = \"{main}\";",
        "begin_line": 94,
        "end_line": 95,
        "comment": " The name we give the main function. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CallGraph",
        "src_path": "src/com/google/javascript/jscomp/CallGraph.java",
        "signature": "com.google.javascript.jscomp.CallGraph.mainFunction",
        "snippet": "  private Function mainFunction;",
        "begin_line": 105,
        "end_line": 105,
        "comment": "\n   *  Represents the global function. Calling getBody() on this\n   *  function will yield the global script/block.\n   *\n   *  TODO(dcc): having a single main function is somewhat misleading. Perhaps\n   *  it might be better to make CallGraph module aware and have one per\n   *  module?\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Function",
        "src_path": "src/com/google/javascript/jscomp/CallGraph.java",
        "signature": "com.google.javascript.jscomp.Function.astNode",
        "snippet": "    private Node astNode;",
        "begin_line": 606,
        "end_line": 606,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Function",
        "src_path": "src/com/google/javascript/jscomp/CallGraph.java",
        "signature": "com.google.javascript.jscomp.Function.isAliased",
        "snippet": "    private boolean isAliased = false;",
        "begin_line": 608,
        "end_line": 608,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Function",
        "src_path": "src/com/google/javascript/jscomp/CallGraph.java",
        "signature": "com.google.javascript.jscomp.Function.isExposedToCallOrApply",
        "snippet": "    private boolean isExposedToCallOrApply = false;",
        "begin_line": 610,
        "end_line": 610,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Function",
        "src_path": "src/com/google/javascript/jscomp/CallGraph.java",
        "signature": "com.google.javascript.jscomp.Function.callsitesInFunction",
        "snippet": "    private Collection<Callsite> callsitesInFunction;",
        "begin_line": 612,
        "end_line": 612,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Function",
        "src_path": "src/com/google/javascript/jscomp/CallGraph.java",
        "signature": "com.google.javascript.jscomp.Function.callsitesPossiblyTargetingFunction",
        "snippet": "    private Collection<Callsite> callsitesPossiblyTargetingFunction;",
        "begin_line": 614,
        "end_line": 614,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Callsite",
        "src_path": "src/com/google/javascript/jscomp/CallGraph.java",
        "signature": "com.google.javascript.jscomp.Callsite.astNode",
        "snippet": "    private Node astNode;",
        "begin_line": 733,
        "end_line": 733,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Callsite",
        "src_path": "src/com/google/javascript/jscomp/CallGraph.java",
        "signature": "com.google.javascript.jscomp.Callsite.hasUnknownTarget",
        "snippet": "    private boolean hasUnknownTarget = false;",
        "begin_line": 735,
        "end_line": 735,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Callsite",
        "src_path": "src/com/google/javascript/jscomp/CallGraph.java",
        "signature": "com.google.javascript.jscomp.Callsite.hasExternTarget",
        "snippet": "    private boolean hasExternTarget = false;",
        "begin_line": 736,
        "end_line": 736,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Callsite",
        "src_path": "src/com/google/javascript/jscomp/CallGraph.java",
        "signature": "com.google.javascript.jscomp.Callsite.containingFunction",
        "snippet": "    private Function containingFunction = null;",
        "begin_line": 738,
        "end_line": 738,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Callsite",
        "src_path": "src/com/google/javascript/jscomp/CallGraph.java",
        "signature": "com.google.javascript.jscomp.Callsite.possibleTargets",
        "snippet": "    private Collection<Function> possibleTargets;",
        "begin_line": 740,
        "end_line": 740,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER",
        "snippet": "  static final long MAX_POSITIVE_INTEGER_NUMBER = (long) Math.pow(2, 53);",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.JSC_PROPERTY_NAME_FN",
        "snippet": "  static final String JSC_PROPERTY_NAME_FN = \"JSCompiler_renameProperty\";",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.LARGEST_BASIC_LATIN",
        "snippet": "  static final char LARGEST_BASIC_LATIN = 0x7f;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS",
        "snippet": "  private static final Set<String> CONSTRUCTORS_WITHOUT_SIDE_EFFECTS =\n      new HashSet<String>(Arrays.asList(\n        \"Array\",\n        \"Date\",\n        \"Error\",\n        \"Object\",\n        \"RegExp\",\n        \"XMLHttpRequest\"));",
        "begin_line": 57,
        "end_line": 64,
        "comment": " the set of builtin constructors that don't have side effects. "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS",
        "snippet": "  private static final Set<String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS =\n      ImmutableSet.of(\n          \"Object\", \"Array\", \"String\", \"Number\", \"Boolean\", \"RegExp\", \"Error\");",
        "begin_line": 972,
        "end_line": 974,
        "comment": " TODO(johnlenz): consider adding an extern annotation for this."
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS",
        "snippet": "  private static final Set<String> OBJECT_METHODS_WITHOUT_SIDEEFFECTS =\n      ImmutableSet.of(\"toString\", \"valueOf\");",
        "begin_line": 975,
        "end_line": 976,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS",
        "snippet": "  private static final Set<String> REGEXP_METHODS =\n      ImmutableSet.of(\"test\", \"exec\");",
        "begin_line": 977,
        "end_line": 978,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS",
        "snippet": "  private static final Set<String> STRING_REGEXP_METHODS =\n      ImmutableSet.of(\"match\", \"replace\", \"search\", \"split\");",
        "begin_line": 979,
        "end_line": 980,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE",
        "snippet": "  static final NumbericResultPredicate NUMBERIC_RESULT_PREDICATE =\n      new NumbericResultPredicate();",
        "begin_line": 1317,
        "end_line": 1318,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE",
        "snippet": "  static final BooleanResultPredicate BOOLEAN_RESULT_PREDICATE =\n      new BooleanResultPredicate();",
        "begin_line": 1370,
        "end_line": 1371,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE",
        "snippet": "  static final MayBeStringResultPredicate MAY_BE_STRING_PREDICATE =\n      new MayBeStringResultPredicate();",
        "begin_line": 1416,
        "end_line": 1417,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCollector",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.VarCollector.vars",
        "snippet": "    final Map<String, Node> vars = Maps.newLinkedHashMap();",
        "begin_line": 2470,
        "end_line": 2470,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MatchNameNode",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.MatchNameNode.name",
        "snippet": "    final String name;",
        "begin_line": 2577,
        "end_line": 2577,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MatchNodeType",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.MatchNodeType.type",
        "snippet": "    final int type;",
        "begin_line": 2593,
        "end_line": 2593,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION",
        "snippet": "  static final Predicate<Node> MATCH_NOT_FUNCTION = new MatchNotFunction();",
        "begin_line": 2626,
        "end_line": 2626,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LoggerErrorManager",
        "src_path": "src/com/google/javascript/jscomp/LoggerErrorManager.java",
        "signature": "com.google.javascript.jscomp.LoggerErrorManager.formatter",
        "snippet": "  private final MessageFormatter formatter;",
        "begin_line": 31,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LoggerErrorManager",
        "src_path": "src/com/google/javascript/jscomp/LoggerErrorManager.java",
        "signature": "com.google.javascript.jscomp.LoggerErrorManager.logger",
        "snippet": "  private final Logger logger;",
        "begin_line": 32,
        "end_line": 32,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.OptimizeCalls",
        "src_path": "src/com/google/javascript/jscomp/OptimizeCalls.java",
        "signature": "com.google.javascript.jscomp.OptimizeCalls.passes",
        "snippet": "  List<CallGraphCompilerPass> passes = Lists.newArrayList();",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.OptimizeCalls",
        "src_path": "src/com/google/javascript/jscomp/OptimizeCalls.java",
        "signature": "com.google.javascript.jscomp.OptimizeCalls.compiler",
        "snippet": "  private AbstractCompiler compiler;",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnonymousFunctionsMapped",
        "src_path": "src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java",
        "signature": "com.google.javascript.jscomp.NameAnonymousFunctionsMapped.logger",
        "snippet": "  private static Logger logger = Logger.getLogger(\n      NameAnonymousFunctionsMapped.class.getName());",
        "begin_line": 45,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnonymousFunctionsMapped",
        "src_path": "src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java",
        "signature": "com.google.javascript.jscomp.NameAnonymousFunctionsMapped.PREFIX",
        "snippet": "  static final char PREFIX = '$';",
        "begin_line": 48,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnonymousFunctionsMapped",
        "src_path": "src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java",
        "signature": "com.google.javascript.jscomp.NameAnonymousFunctionsMapped.PREFIX_STRING",
        "snippet": "  static final String PREFIX_STRING = \"$\";",
        "begin_line": 49,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnonymousFunctionsMapped",
        "src_path": "src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java",
        "signature": "com.google.javascript.jscomp.NameAnonymousFunctionsMapped.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnonymousFunctionsMapped",
        "src_path": "src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java",
        "signature": "com.google.javascript.jscomp.NameAnonymousFunctionsMapped.nameGenerator",
        "snippet": "  private final NameGenerator nameGenerator;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnonymousFunctionsMapped",
        "src_path": "src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java",
        "signature": "com.google.javascript.jscomp.NameAnonymousFunctionsMapped.previousMap",
        "snippet": "  private final VariableMap previousMap;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnonymousFunctionsMapped",
        "src_path": "src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java",
        "signature": "com.google.javascript.jscomp.NameAnonymousFunctionsMapped.renameMap",
        "snippet": "  private final Map<String, String> renameMap;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnonymousFunctionsMapped",
        "src_path": "src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java",
        "signature": "com.google.javascript.jscomp.NameAnonymousFunctionsMapped.namedCount",
        "snippet": "  private int namedCount = 0;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnonymousFunctionsMapped",
        "src_path": "src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java",
        "signature": "com.google.javascript.jscomp.NameAnonymousFunctionsMapped.bytesUsed",
        "snippet": "  private int bytesUsed = 0;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MappedFunctionNamer",
        "src_path": "src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java",
        "signature": "com.google.javascript.jscomp.MappedFunctionNamer.DELIMITER",
        "snippet": "    static final char DELIMITER = '.';",
        "begin_line": 91,
        "end_line": 91,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ant.Warning",
        "src_path": "src/com/google/javascript/jscomp/ant/Warning.java",
        "signature": "com.google.javascript.jscomp.ant.Warning.group",
        "snippet": "  private String group;",
        "begin_line": 23,
        "end_line": 23,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ant.Warning",
        "src_path": "src/com/google/javascript/jscomp/ant/Warning.java",
        "signature": "com.google.javascript.jscomp.ant.Warning.level",
        "snippet": "  private CheckLevel level;",
        "begin_line": 24,
        "end_line": 24,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ant.CompileTask",
        "src_path": "src/com/google/javascript/jscomp/ant/CompileTask.java",
        "signature": "com.google.javascript.jscomp.ant.CompileTask.languageIn",
        "snippet": "  private CompilerOptions.LanguageMode languageIn;",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ant.CompileTask",
        "src_path": "src/com/google/javascript/jscomp/ant/CompileTask.java",
        "signature": "com.google.javascript.jscomp.ant.CompileTask.warningLevel",
        "snippet": "  private WarningLevel warningLevel;",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ant.CompileTask",
        "src_path": "src/com/google/javascript/jscomp/ant/CompileTask.java",
        "signature": "com.google.javascript.jscomp.ant.CompileTask.debugOptions",
        "snippet": "  private boolean debugOptions;",
        "begin_line": 61,
        "end_line": 61,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ant.CompileTask",
        "src_path": "src/com/google/javascript/jscomp/ant/CompileTask.java",
        "signature": "com.google.javascript.jscomp.ant.CompileTask.encoding",
        "snippet": "  private String encoding = \"UTF-8\";",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ant.CompileTask",
        "src_path": "src/com/google/javascript/jscomp/ant/CompileTask.java",
        "signature": "com.google.javascript.jscomp.ant.CompileTask.outputEncoding",
        "snippet": "  private String outputEncoding = \"UTF-8\";",
        "begin_line": 63,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ant.CompileTask",
        "src_path": "src/com/google/javascript/jscomp/ant/CompileTask.java",
        "signature": "com.google.javascript.jscomp.ant.CompileTask.compilationLevel",
        "snippet": "  private CompilationLevel compilationLevel;",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ant.CompileTask",
        "src_path": "src/com/google/javascript/jscomp/ant/CompileTask.java",
        "signature": "com.google.javascript.jscomp.ant.CompileTask.customExternsOnly",
        "snippet": "  private boolean customExternsOnly;",
        "begin_line": 65,
        "end_line": 65,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ant.CompileTask",
        "src_path": "src/com/google/javascript/jscomp/ant/CompileTask.java",
        "signature": "com.google.javascript.jscomp.ant.CompileTask.manageDependencies",
        "snippet": "  private boolean manageDependencies;",
        "begin_line": 66,
        "end_line": 66,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ant.CompileTask",
        "src_path": "src/com/google/javascript/jscomp/ant/CompileTask.java",
        "signature": "com.google.javascript.jscomp.ant.CompileTask.prettyPrint",
        "snippet": "  private boolean prettyPrint;",
        "begin_line": 67,
        "end_line": 67,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ant.CompileTask",
        "src_path": "src/com/google/javascript/jscomp/ant/CompileTask.java",
        "signature": "com.google.javascript.jscomp.ant.CompileTask.printInputDelimiter",
        "snippet": "  private boolean printInputDelimiter;",
        "begin_line": 68,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ant.CompileTask",
        "src_path": "src/com/google/javascript/jscomp/ant/CompileTask.java",
        "signature": "com.google.javascript.jscomp.ant.CompileTask.generateExports",
        "snippet": "  private boolean generateExports;",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ant.CompileTask",
        "src_path": "src/com/google/javascript/jscomp/ant/CompileTask.java",
        "signature": "com.google.javascript.jscomp.ant.CompileTask.replaceProperties",
        "snippet": "  private boolean replaceProperties;",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ant.CompileTask",
        "src_path": "src/com/google/javascript/jscomp/ant/CompileTask.java",
        "signature": "com.google.javascript.jscomp.ant.CompileTask.forceRecompile",
        "snippet": "  private boolean forceRecompile;",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ant.CompileTask",
        "src_path": "src/com/google/javascript/jscomp/ant/CompileTask.java",
        "signature": "com.google.javascript.jscomp.ant.CompileTask.replacePropertiesPrefix",
        "snippet": "  private String replacePropertiesPrefix;",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ant.CompileTask",
        "src_path": "src/com/google/javascript/jscomp/ant/CompileTask.java",
        "signature": "com.google.javascript.jscomp.ant.CompileTask.outputFile",
        "snippet": "  private File outputFile;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ant.CompileTask",
        "src_path": "src/com/google/javascript/jscomp/ant/CompileTask.java",
        "signature": "com.google.javascript.jscomp.ant.CompileTask.defineParams",
        "snippet": "  private final List<Parameter> defineParams;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ant.CompileTask",
        "src_path": "src/com/google/javascript/jscomp/ant/CompileTask.java",
        "signature": "com.google.javascript.jscomp.ant.CompileTask.externFileLists",
        "snippet": "  private final List<FileList> externFileLists;",
        "begin_line": 75,
        "end_line": 75,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ant.CompileTask",
        "src_path": "src/com/google/javascript/jscomp/ant/CompileTask.java",
        "signature": "com.google.javascript.jscomp.ant.CompileTask.sourceFileLists",
        "snippet": "  private final List<FileList> sourceFileLists;",
        "begin_line": 76,
        "end_line": 76,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ant.CompileTask",
        "src_path": "src/com/google/javascript/jscomp/ant/CompileTask.java",
        "signature": "com.google.javascript.jscomp.ant.CompileTask.sourcePaths",
        "snippet": "  private final List<Path> sourcePaths;",
        "begin_line": 77,
        "end_line": 77,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ant.CompileTask",
        "src_path": "src/com/google/javascript/jscomp/ant/CompileTask.java",
        "signature": "com.google.javascript.jscomp.ant.CompileTask.warnings",
        "snippet": "  private final List<Warning> warnings;",
        "begin_line": 78,
        "end_line": 78,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ant.AntErrorManager",
        "src_path": "src/com/google/javascript/jscomp/ant/AntErrorManager.java",
        "signature": "com.google.javascript.jscomp.ant.AntErrorManager.formatter",
        "snippet": "  private final MessageFormatter formatter;",
        "begin_line": 33,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ant.AntErrorManager",
        "src_path": "src/com/google/javascript/jscomp/ant/AntErrorManager.java",
        "signature": "com.google.javascript.jscomp.ant.AntErrorManager.task",
        "snippet": "  private final Task task;",
        "begin_line": 34,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter",
        "src_path": "src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java",
        "signature": "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter.restrictToArrayVisitor",
        "snippet": "  private final Visitor<JSType> restrictToArrayVisitor =\n      new RestrictByTrueTypeOfResultVisitor() {\n        @Override\n        protected JSType caseTopType(JSType topType) {\n          // Ideally, we would like to return any subtype of Array.\n          // Since that's not possible, we don't restrict the type.\n          return topType;\n        }\n\n        @Override\n        public JSType caseObjectType(ObjectType type) {\n          JSType arrayType = getNativeType(ARRAY_TYPE);\n          return arrayType.isSubtype(type) ? arrayType : null;\n        }\n      };",
        "begin_line": 50,
        "end_line": 64,
        "comment": "\n   * For when {@code goog.isArray} returns true.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter",
        "src_path": "src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java",
        "signature": "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter.restrictToNotArrayVisitor",
        "snippet": "  private final Visitor<JSType> restrictToNotArrayVisitor =\n      new RestrictByFalseTypeOfResultVisitor() {\n        @Override\n        public JSType caseObjectType(ObjectType type) {\n          return type.isSubtype(getNativeType(ARRAY_TYPE)) ? null : type;\n        }\n      };",
        "begin_line": 69,
        "end_line": 75,
        "comment": "\n   * For when {@code goog.isArray} returns false.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter",
        "src_path": "src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java",
        "signature": "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter.restrictToObjectVisitor",
        "snippet": "  private final Visitor<JSType> restrictToObjectVisitor =\n      new RestrictByTrueTypeOfResultVisitor() {\n        @Override\n        protected JSType caseTopType(JSType topType) {\n          return getNativeType(NO_OBJECT_TYPE);\n        }\n\n        @Override\n        public JSType caseObjectType(ObjectType type) {\n          return type;\n        }\n\n        @Override\n        public JSType caseFunctionType(FunctionType type) {\n          return type;\n        }\n      };",
        "begin_line": 81,
        "end_line": 97,
        "comment": "\n   * For when {@code goog.isObject} returns true. This includes functions, but\n   * not {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter",
        "src_path": "src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java",
        "signature": "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter.restrictToNotObjectVisitor",
        "snippet": "  private final Visitor<JSType> restrictToNotObjectVisitor =\n      new RestrictByFalseTypeOfResultVisitor() {\n\n        @Override\n        public JSType caseAllType() {\n          return typeRegistry.createUnionType(\n              getNativeType(NUMBER_STRING_BOOLEAN), getNativeType(NULL_VOID));\n        }\n\n        @Override\n        public JSType caseObjectType(ObjectType type) {\n          return null;\n        }\n\n        @Override\n        public JSType caseFunctionType(FunctionType type) {\n          return null;\n        }\n      };",
        "begin_line": 102,
        "end_line": 120,
        "comment": "\n   * For when {@code goog.isObject} returns false.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter",
        "src_path": "src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java",
        "signature": "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter.restricters",
        "snippet": "  private Map<String, Function<TypeRestriction, JSType>> restricters;",
        "begin_line": 123,
        "end_line": 123,
        "comment": " Functions used to restrict types. "
    },
    {
        "class_name": "com.google.javascript.jscomp.type.TypeRestriction",
        "src_path": "src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java",
        "signature": "com.google.javascript.jscomp.type.TypeRestriction.type",
        "snippet": "    private final JSType type;",
        "begin_line": 260,
        "end_line": 260,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.type.TypeRestriction",
        "src_path": "src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java",
        "signature": "com.google.javascript.jscomp.type.TypeRestriction.outcome",
        "snippet": "    private final boolean outcome;",
        "begin_line": 261,
        "end_line": 261,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
        "src_path": "src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
        "signature": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ",
        "snippet": "  private static final Function<TypePair, TypePair> EQ =\n    new Function<TypePair, TypePair>() {\n      @Override\n      public TypePair apply(TypePair p) {\n        if (p.typeA == null || p.typeB == null) {\n          return null;\n        }\n        return p.typeA.getTypesUnderEquality(p.typeB);\n      }\n    };",
        "begin_line": 47,
        "end_line": 56,
        "comment": "\n   * Merging function for equality between types.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
        "src_path": "src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
        "signature": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE",
        "snippet": "  private static final Function<TypePair, TypePair> NE =\n    new Function<TypePair, TypePair>() {\n      @Override\n      public TypePair apply(TypePair p) {\n        if (p.typeA == null || p.typeB == null) {\n          return null;\n        }\n        return p.typeA.getTypesUnderInequality(p.typeB);\n      }\n    };",
        "begin_line": 61,
        "end_line": 70,
        "comment": "\n   * Merging function for non-equality between types.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
        "src_path": "src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
        "signature": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ",
        "snippet": "  private static final\n      Function<TypePair, TypePair> SHEQ =\n    new Function<TypePair, TypePair>() {\n      @Override\n      public TypePair apply(TypePair p) {\n        if (p.typeA == null || p.typeB == null) {\n          return null;\n        }\n        return p.typeA.getTypesUnderShallowEquality(p.typeB);\n      }\n    };",
        "begin_line": 75,
        "end_line": 85,
        "comment": "\n   * Merging function for strict equality between types.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
        "src_path": "src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
        "signature": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE",
        "snippet": "  private static final\n      Function<TypePair, TypePair> SHNE =\n    new Function<TypePair, TypePair>() {\n      @Override\n      public TypePair apply(TypePair p) {\n        if (p.typeA == null || p.typeB == null) {\n          return null;\n        }\n        return p.typeA.getTypesUnderShallowInequality(p.typeB);\n      }\n    };",
        "begin_line": 90,
        "end_line": 100,
        "comment": "\n   * Merging function for strict non-equality between types.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
        "src_path": "src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
        "signature": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.INEQ",
        "snippet": "  private final\n      Function<TypePair, TypePair> INEQ =\n    new Function<TypePair, TypePair>() {\n      @Override\n      public TypePair apply(TypePair p) {\n        return new TypePair(\n            getRestrictedWithoutUndefined(p.typeA),\n            getRestrictedWithoutUndefined(p.typeB));\n      }\n    };",
        "begin_line": 105,
        "end_line": 114,
        "comment": "\n   * Merging function for inequality comparisons between types.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.type.RestrictByTrueInstanceOfResultVisitor",
        "src_path": "src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
        "signature": "com.google.javascript.jscomp.type.RestrictByTrueInstanceOfResultVisitor.target",
        "snippet": "    private final ObjectType target;",
        "begin_line": 505,
        "end_line": 505,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.type.RestrictByFalseInstanceOfResultVisitor",
        "src_path": "src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
        "signature": "com.google.javascript.jscomp.type.RestrictByFalseInstanceOfResultVisitor.target",
        "snippet": "    private final ObjectType target;",
        "begin_line": 559,
        "end_line": 559,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
        "src_path": "src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
        "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.convention",
        "snippet": "  protected final CodingConvention convention;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
        "src_path": "src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
        "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.typeRegistry",
        "snippet": "  final JSTypeRegistry typeRegistry;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
        "src_path": "src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
        "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.firstLink",
        "snippet": "  private ChainableReverseAbstractInterpreter firstLink;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
        "src_path": "src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
        "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.nextLink",
        "snippet": "  private ChainableReverseAbstractInterpreter nextLink;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
        "src_path": "src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
        "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.restrictUndefinedVisitor",
        "snippet": "  private final Visitor<JSType> restrictUndefinedVisitor =\n    new Visitor<JSType>() {\n      @Override\n      public JSType caseEnumElementType(EnumElementType enumElementType) {\n        JSType type = enumElementType.getPrimitiveType().visit(this);\n        if (type != null && enumElementType.getPrimitiveType().isEquivalentTo(type)) {\n          return enumElementType;\n        } else {\n          return type;\n        }\n      }\n\n      @Override\n      public JSType caseAllType() {\n        return typeRegistry.createUnionType(OBJECT_TYPE, NUMBER_TYPE,\n            STRING_TYPE, BOOLEAN_TYPE, NULL_TYPE);\n      }\n\n      @Override\n      public JSType caseNoObjectType() {\n        return getNativeType(NO_OBJECT_TYPE);\n      }\n\n      @Override\n      public JSType caseNoType() {\n        return getNativeType(NO_TYPE);\n      }\n\n      @Override\n      public JSType caseBooleanType() {\n        return getNativeType(BOOLEAN_TYPE);\n      }\n\n      @Override\n      public JSType caseFunctionType(FunctionType type) {\n        return type;\n      }\n\n      @Override\n      public JSType caseNullType() {\n        return getNativeType(NULL_TYPE);\n      }\n\n      @Override\n      public JSType caseNumberType() {\n        return getNativeType(NUMBER_TYPE);\n      }\n\n      @Override\n      public JSType caseObjectType(ObjectType type) {\n        return type;\n      }\n\n      @Override\n      public JSType caseStringType() {\n        return getNativeType(STRING_TYPE);\n      }\n\n      @Override\n      public JSType caseUnionType(UnionType type) {\n        return type.getRestrictedUnion(getNativeType(VOID_TYPE));\n      }\n\n      @Override\n      public JSType caseUnknownType() {\n        return getNativeType(UNKNOWN_TYPE);\n      }\n\n      @Override\n      public JSType caseVoidType() {\n        return null;\n      }\n\n      @Override\n      public JSType caseParameterizedType(ParameterizedType type) {\n        return caseObjectType(type);\n      }\n\n      @Override\n      public JSType caseTemplateType(TemplateType templateType) {\n        return caseObjectType(templateType);\n      }\n    };",
        "begin_line": 186,
        "end_line": 268,
        "comment": "\n   * @see #getRestrictedWithoutUndefined(JSType)\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
        "src_path": "src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
        "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.restrictNullVisitor",
        "snippet": "  private final Visitor<JSType> restrictNullVisitor =\n    new Visitor<JSType>() {\n      @Override\n      public JSType caseEnumElementType(EnumElementType enumElementType) {\n        JSType type = enumElementType.getPrimitiveType().visit(this);\n        if (type != null &&\n            enumElementType.getPrimitiveType().isEquivalentTo(type)) {\n          return enumElementType;\n        } else {\n          return type;\n        }\n      }\n\n      @Override\n      public JSType caseAllType() {\n        return typeRegistry.createUnionType(OBJECT_TYPE, NUMBER_TYPE,\n            STRING_TYPE, BOOLEAN_TYPE, VOID_TYPE);\n      }\n\n      @Override\n      public JSType caseNoObjectType() {\n        return getNativeType(NO_OBJECT_TYPE);\n      }\n\n      @Override\n      public JSType caseNoType() {\n        return getNativeType(NO_TYPE);\n      }\n\n      @Override\n      public JSType caseBooleanType() {\n        return getNativeType(BOOLEAN_TYPE);\n      }\n\n      @Override\n      public JSType caseFunctionType(FunctionType type) {\n        return type;\n      }\n\n      @Override\n      public JSType caseNullType() {\n        return null;\n      }\n\n      @Override\n      public JSType caseNumberType() {\n        return getNativeType(NUMBER_TYPE);\n      }\n\n      @Override\n      public JSType caseObjectType(ObjectType type) {\n        return type;\n      }\n\n      @Override\n      public JSType caseStringType() {\n        return getNativeType(STRING_TYPE);\n      }\n\n      @Override\n      public JSType caseUnionType(UnionType type) {\n        return type.getRestrictedUnion(getNativeType(NULL_TYPE));\n      }\n\n      @Override\n      public JSType caseUnknownType() {\n        return getNativeType(UNKNOWN_TYPE);\n      }\n\n      @Override\n      public JSType caseVoidType() {\n        return getNativeType(VOID_TYPE);\n      }\n\n      @Override\n      public JSType caseParameterizedType(ParameterizedType type) {\n        return caseObjectType(type);\n      }\n\n      @Override\n      public JSType caseTemplateType(TemplateType templateType) {\n        return caseObjectType(templateType);\n      }\n    };",
        "begin_line": 274,
        "end_line": 357,
        "comment": "\n   * @see #getRestrictedWithoutNull(JSType)\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.type.RestrictByOneTypeOfResultVisitor",
        "src_path": "src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
        "signature": "com.google.javascript.jscomp.type.RestrictByOneTypeOfResultVisitor.value",
        "snippet": "    private final String value;",
        "begin_line": 548,
        "end_line": 548,
        "comment": "\n     * A value known to be equal or not equal to the result of the\n     * {@code typeOf} operation.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.type.RestrictByOneTypeOfResultVisitor",
        "src_path": "src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
        "signature": "com.google.javascript.jscomp.type.RestrictByOneTypeOfResultVisitor.resultEqualsValue",
        "snippet": "    private final boolean resultEqualsValue;",
        "begin_line": 555,
        "end_line": 555,
        "comment": "\n     * {@code true} if the {@code typeOf} result is known to equal\n     * {@code value}; {@code false} if it is known <em>not</em> to equal\n     * {@code value}.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.EOF_CHAR",
        "snippet": "  private final static int\n      EOF_CHAR = -1;",
        "begin_line": 34,
        "end_line": 35,
        "comment": "\n   * For chars - because we need something out-of-range\n   * to check.  (And checking EOF by exception is annoying.)\n   * Note distinction from EOF token type!\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.string",
        "snippet": "  private String string = \"\";",
        "begin_line": 454,
        "end_line": 454,
        "comment": " code."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.stringBuffer",
        "snippet": "  private char[] stringBuffer = new char[128];",
        "begin_line": 456,
        "end_line": 456,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.stringBufferTop",
        "snippet": "  private int stringBufferTop;",
        "begin_line": 457,
        "end_line": 457,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.ungetBuffer",
        "snippet": "  private final int[] ungetBuffer = new int[3];",
        "begin_line": 460,
        "end_line": 460,
        "comment": " Room to backtrace from to < on failed match of the last - in <!--"
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.ungetCursor",
        "snippet": "  private int ungetCursor;",
        "begin_line": 461,
        "end_line": 461,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.hitEOF",
        "snippet": "  private boolean hitEOF = false;",
        "begin_line": 463,
        "end_line": 463,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.lineStart",
        "snippet": "  private int lineStart = 0;",
        "begin_line": 465,
        "end_line": 465,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.lineEndChar",
        "snippet": "  private int lineEndChar = -1;",
        "begin_line": 466,
        "end_line": 466,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.lineno",
        "snippet": "  int lineno;",
        "begin_line": 467,
        "end_line": 467,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.charno",
        "snippet": "  private int charno = -1;",
        "begin_line": 468,
        "end_line": 468,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.initCharno",
        "snippet": "  private int initCharno;",
        "begin_line": 469,
        "end_line": 469,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.initLineno",
        "snippet": "  private int initLineno;",
        "begin_line": 470,
        "end_line": 470,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.sourceString",
        "snippet": "  private String sourceString;",
        "begin_line": 472,
        "end_line": 472,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.sourceEnd",
        "snippet": "  private int sourceEnd;",
        "begin_line": 473,
        "end_line": 473,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.sourceCursor",
        "snippet": "  int sourceCursor;",
        "begin_line": 477,
        "end_line": 477,
        "comment": " sliding window of the source stream."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.cursor",
        "snippet": "  int cursor;",
        "begin_line": 482,
        "end_line": 482,
        "comment": " Its value is the index of the next character to be scanned."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.tokenBeg",
        "snippet": "  int tokenBeg;",
        "begin_line": 485,
        "end_line": 485,
        "comment": " Record start and end positions of last scanned token."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.tokenEnd",
        "snippet": "  int tokenEnd;",
        "begin_line": 486,
        "end_line": 486,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.GETTER_ERROR_MESSAGE",
        "snippet": "  static final String GETTER_ERROR_MESSAGE =\n      \"getters are not supported in older versions of JS. \" +\n      \"If you are targeting newer versions of JS, \" +\n      \"set the appropriate language_in option.\";",
        "begin_line": 83,
        "end_line": 86,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.SETTER_ERROR_MESSAGE",
        "snippet": "  static final String SETTER_ERROR_MESSAGE =\n      \"setters are not supported in older versions of JS. \" +\n      \"If you are targeting newer versions of JS, \" +\n      \"set the appropriate language_in option.\";",
        "begin_line": 88,
        "end_line": 91,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING",
        "snippet": "  static final String SUSPICIOUS_COMMENT_WARNING =\n      \"Non-JSDoc comment has annotations. \" +\n      \"Did you mean to start it with '/**'?\";",
        "begin_line": 93,
        "end_line": 95,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.MISPLACED_TYPE_ANNOTATION",
        "snippet": "  static final String MISPLACED_TYPE_ANNOTATION =\n      \"Type annotations are not allowed here. Are you missing parentheses?\";",
        "begin_line": 97,
        "end_line": 98,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.sourceString",
        "snippet": "  private final String sourceString;",
        "begin_line": 100,
        "end_line": 100,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.sourceFile",
        "snippet": "  private final StaticSourceFile sourceFile;",
        "begin_line": 101,
        "end_line": 101,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.sourceName",
        "snippet": "  private final String sourceName;",
        "begin_line": 102,
        "end_line": 102,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.config",
        "snippet": "  private final Config config;",
        "begin_line": 103,
        "end_line": 103,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.errorReporter",
        "snippet": "  private final ErrorReporter errorReporter;",
        "begin_line": 104,
        "end_line": 104,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transformDispatcher",
        "snippet": "  private final TransformDispatcher transformDispatcher;",
        "begin_line": 105,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.ALLOWED_DIRECTIVES",
        "snippet": "  private static final ImmutableSet<String> ALLOWED_DIRECTIVES =\n      ImmutableSet.of(\"use strict\");",
        "begin_line": 107,
        "end_line": 108,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS",
        "snippet": "  private static final ImmutableSet<String> ES5_RESERVED_KEYWORDS =\n      ImmutableSet.of(\n          // From Section 7.6.1.2\n          \"class\", \"const\", \"enum\", \"export\", \"extends\", \"import\", \"super\");",
        "begin_line": 110,
        "end_line": 113,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS",
        "snippet": "  private static final ImmutableSet<String> ES5_STRICT_RESERVED_KEYWORDS =\n      ImmutableSet.of(\n          // From Section 7.6.1.2\n          \"class\", \"const\", \"enum\", \"export\", \"extends\", \"import\", \"super\",\n          \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\",\n          \"public\", \"static\", \"yield\");",
        "begin_line": 114,
        "end_line": 119,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.reservedKeywords",
        "snippet": "  private final Set<String> reservedKeywords;",
        "begin_line": 121,
        "end_line": 121,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.parsedComments",
        "snippet": "  private final Set<Comment> parsedComments = Sets.newHashSet();",
        "begin_line": 122,
        "end_line": 122,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.rootNodeJsDocHolder",
        "snippet": "  Node rootNodeJsDocHolder = new Node(Token.SCRIPT);",
        "begin_line": 126,
        "end_line": 126,
        "comment": " and stored in JSDocInfo for placeholder node."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.fileLevelJsDocBuilder",
        "snippet": "  Node.FileLevelJsDocBuilder fileLevelJsDocBuilder =\n      rootNodeJsDocHolder.getJsDocBuilderForNode();",
        "begin_line": 127,
        "end_line": 128,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.fileOverviewInfo",
        "snippet": "  JSDocInfo fileOverviewInfo = null;",
        "begin_line": 129,
        "end_line": 129,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.templateNode",
        "snippet": "  private Node templateNode;",
        "begin_line": 133,
        "end_line": 133,
        "comment": " memory footprint associated with these."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.stream",
        "snippet": "  private final JsDocTokenStream stream;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.jsdocBuilder",
        "snippet": "  private final JSDocInfoBuilder jsdocBuilder;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.sourceFile",
        "snippet": "  private final StaticSourceFile sourceFile;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.associatedNode",
        "snippet": "  private final Node associatedNode;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.errorReporter",
        "snippet": "  private final ErrorReporter errorReporter;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parser",
        "snippet": "  private final ErrorReporterParser parser = new ErrorReporterParser();",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.templateNode",
        "snippet": "  private final Node templateNode;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " memory footprint associated with these (similar to IRFactory)."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.fileOverviewJSDocInfo",
        "snippet": "  private JSDocInfo fileOverviewJSDocInfo = null;",
        "begin_line": 90,
        "end_line": 90,
        "comment": " The DocInfo with the fileoverview tag for the whole file."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.state",
        "snippet": "  private State state;",
        "begin_line": 91,
        "end_line": 91,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.annotationNames",
        "snippet": "  private final Map<String, Annotation> annotationNames;",
        "begin_line": 93,
        "end_line": 93,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.suppressionNames",
        "snippet": "  private final Set<String> suppressionNames;",
        "begin_line": 94,
        "end_line": 94,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.modifiesAnnotationKeywords",
        "snippet": "  static private final Set<String> modifiesAnnotationKeywords =\n      ImmutableSet.<String>of(\"this\", \"arguments\");",
        "begin_line": 95,
        "end_line": 96,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.fileLevelJsDocBuilder",
        "snippet": "  private Node.FileLevelJsDocBuilder fileLevelJsDocBuilder;",
        "begin_line": 98,
        "end_line": 98,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ExtractionInfo",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.ExtractionInfo.string",
        "snippet": "    private final String string;",
        "begin_line": 1286,
        "end_line": 1286,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ExtractionInfo",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.ExtractionInfo.token",
        "snippet": "    private final JsDocToken token;",
        "begin_line": 1287,
        "end_line": 1287,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ExtendedTypeInfo",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.ExtendedTypeInfo.type",
        "snippet": "    final JSTypeExpression type;",
        "begin_line": 1299,
        "end_line": 1299,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ExtendedTypeInfo",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.ExtendedTypeInfo.lineno",
        "snippet": "    final int lineno;",
        "begin_line": 1300,
        "end_line": 1300,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ExtendedTypeInfo",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.ExtendedTypeInfo.charno",
        "snippet": "    final int charno;",
        "begin_line": 1301,
        "end_line": 1301,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.NO_UNREAD_TOKEN",
        "snippet": "  private static final JsDocToken NO_UNREAD_TOKEN = null;",
        "begin_line": 2289,
        "end_line": 2289,
        "comment": "\n   * Specific value indicating that the {@link #unreadToken} contains no token.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.unreadToken",
        "snippet": "  private JsDocToken unreadToken = NO_UNREAD_TOKEN;",
        "begin_line": 2294,
        "end_line": 2294,
        "comment": "\n   * One token buffer.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Annotation",
        "src_path": "src/com/google/javascript/jscomp/parsing/Annotation.java",
        "signature": "com.google.javascript.jscomp.parsing.Annotation.recognizedAnnotations",
        "snippet": "  static final Map<String, Annotation> recognizedAnnotations =\n      new ImmutableMap.Builder<String, Annotation>().\n      put(\"argument\", Annotation.PARAM).\n      put(\"author\", Annotation.AUTHOR).\n      put(\"consistentIdGenerator\", Annotation.CONSISTENTIDGENERATOR).\n      put(\"const\", Annotation.CONSTANT).\n      put(\"constant\", Annotation.CONSTANT).\n      put(\"constructor\", Annotation.CONSTRUCTOR).\n      put(\"define\", Annotation.DEFINE).\n      put(\"deprecated\", Annotation.DEPRECATED).\n      put(\"desc\", Annotation.DESC).\n      put(\"dict\", Annotation.DICT).\n      put(\"enum\", Annotation.ENUM).\n      put(\"export\", Annotation.EXPORT).\n      put(\"expose\", Annotation.EXPOSE).\n      put(\"extends\", Annotation.EXTENDS).\n      put(\"externs\", Annotation.EXTERNS).\n      put(\"fileoverview\", Annotation.FILE_OVERVIEW).\n      put(\"final\", Annotation.CONSTANT).\n      put(\"hidden\", Annotation.HIDDEN).\n      put(\"idGenerator\", Annotation.IDGENERATOR).\n      put(\"implements\", Annotation.IMPLEMENTS).\n      put(\"implicitCast\", Annotation.IMPLICIT_CAST).\n      put(\"inheritDoc\", Annotation.INHERIT_DOC).\n      put(\"interface\", Annotation.INTERFACE).\n      put(\"javadispatch\", Annotation.JAVA_DISPATCH).\n      put(\"lends\", Annotation.LENDS).\n      put(\"license\", Annotation.LICENSE).\n      put(\"meaning\", Annotation.MEANING).\n      put(\"modifies\", Annotation.MODIFIES).\n      put(\"noalias\", Annotation.NO_ALIAS).\n      put(\"nocompile\", Annotation.NO_COMPILE).\n      put(\"noshadow\", Annotation.NO_SHADOW).\n      put(\"nosideeffects\", Annotation.NO_SIDE_EFFECTS).\n      put(\"notypecheck\", Annotation.NO_TYPE_CHECK).\n      put(\"override\", Annotation.OVERRIDE).\n      put(\"owner\", Annotation.AUTHOR).\n      put(\"param\", Annotation.PARAM).\n      put(\"preserve\", Annotation.PRESERVE).\n      put(\"preserveTry\", Annotation.PRESERVE_TRY).\n      put(\"private\", Annotation.PRIVATE).\n      put(\"protected\", Annotation.PROTECTED).\n      put(\"public\", Annotation.PUBLIC).\n      put(\"return\", Annotation.RETURN).\n      put(\"returns\", Annotation.RETURN).\n      put(\"see\", Annotation.SEE).\n      put(\"stableIdGenerator\", Annotation.STABLEIDGENERATOR).\n      put(\"struct\", Annotation.STRUCT).\n      put(\"suppress\", Annotation.SUPPRESS).\n      put(\"template\", Annotation.TEMPLATE).\n      put(\"this\", Annotation.THIS).\n      put(\"throws\", Annotation.THROWS).\n      put(\"type\", Annotation.TYPE).\n      put(\"typedef\", Annotation.TYPEDEF).\n      put(\"version\", Annotation.VERSION).\n      build();",
        "begin_line": 78,
        "end_line": 133,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.configResource",
        "snippet": "  private static final String configResource =\n      \"com.google.javascript.jscomp.parsing.ParserConfig\";",
        "begin_line": 39,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.annotationNames",
        "snippet": "  private static Set<String> annotationNames = null;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.suppressionNames",
        "snippet": "  private static Set<String> suppressionNames = null;",
        "begin_line": 44,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.reservedVars",
        "snippet": "  private static Set<String> reservedVars = null;",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParseResult",
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "signature": "com.google.javascript.jscomp.parsing.ParseResult.ast",
        "snippet": "    public final Node ast;",
        "begin_line": 160,
        "end_line": 160,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParseResult",
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "signature": "com.google.javascript.jscomp.parsing.ParseResult.oldAst",
        "snippet": "    public final AstRoot oldAst;",
        "begin_line": 161,
        "end_line": 161,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.parseJsDocDocumentation",
        "snippet": "  final boolean parseJsDocDocumentation;",
        "begin_line": 41,
        "end_line": 41,
        "comment": "\n   * Whether to parse the descriptions of JsDoc comments.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.isIdeMode",
        "snippet": "  final boolean isIdeMode;",
        "begin_line": 46,
        "end_line": 46,
        "comment": "\n   * Whether we're in IDE mode.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.annotationNames",
        "snippet": "  final Map<String, Annotation> annotationNames;",
        "begin_line": 52,
        "end_line": 52,
        "comment": "\n   * Recognized JSDoc annotations, mapped from their name to their internal\n   * representation.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.suppressionNames",
        "snippet": "  final Set<String> suppressionNames;",
        "begin_line": 57,
        "end_line": 57,
        "comment": "\n   * Recognized names in a {@code @suppress} tag.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.languageMode",
        "snippet": "  final LanguageMode languageMode;",
        "begin_line": 62,
        "end_line": 62,
        "comment": "\n   * Accept ECMAScript5 syntax, such as getter/setter.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.acceptConstKeyword",
        "snippet": "  final boolean acceptConstKeyword;",
        "begin_line": 67,
        "end_line": 67,
        "comment": "\n   * Accept `const' keyword.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.CaseCanonicalize",
        "src_path": "src/com/google/javascript/jscomp/regex/CaseCanonicalize.java",
        "signature": "com.google.javascript.jscomp.regex.CaseCanonicalize.CASE_SENSITIVE",
        "snippet": "  public static final CharRanges CASE_SENSITIVE = CharRanges.withRanges(\n      0x41, 0x5b,\n      0x61, 0x7b,\n      0xb5, 0xb6,\n      0xc0, 0xd7,\n      0xd8, 0xdf,\n      0xe0, 0xf7,\n      0xf8, 0x130,\n      0x132, 0x138,\n      0x139, 0x149,\n      0x14a, 0x17f,\n      0x180, 0x18d,\n      0x18e, 0x19b,\n      0x19c, 0x1aa,\n      0x1ac, 0x1ba,\n      0x1bc, 0x1be,\n      0x1bf, 0x1c0,\n      0x1c4, 0x1f0,\n      0x1f1, 0x221,\n      0x222, 0x234,\n      0x23a, 0x23f,\n      0x241, 0x250,\n      0x253, 0x255,\n      0x256, 0x258,\n      0x259, 0x25a,\n      0x25b, 0x25c,\n      0x260, 0x261,\n      0x263, 0x264,\n      0x268, 0x26a,\n      0x26b, 0x26c,\n      0x26f, 0x270,\n      0x272, 0x273,\n      0x275, 0x276,\n      0x27d, 0x27e,\n      0x280, 0x281,\n      0x283, 0x284,\n      0x288, 0x28d,\n      0x292, 0x293,\n      0x345, 0x346,\n      0x37b, 0x37e,\n      0x386, 0x387,\n      0x388, 0x38b,\n      0x38c, 0x38d,\n      0x38e, 0x390,\n      0x391, 0x3a2,\n      0x3a3, 0x3b0,\n      0x3b1, 0x3cf,\n      0x3d0, 0x3d2,\n      0x3d5, 0x3d7,\n      0x3d8, 0x3f3,\n      0x3f5, 0x3f6,\n      0x3f7, 0x3fc,\n      0x3fd, 0x482,\n      0x48a, 0x514,\n      0x531, 0x557,\n      0x561, 0x587,\n      0x10a0, 0x10c6,\n      0x1d7d, 0x1d7e,\n      0x1e00, 0x1e96,\n      0x1e9b, 0x1e9c,\n      0x1ea0, 0x1efa,\n      0x1f00, 0x1f16,\n      0x1f18, 0x1f1e,\n      0x1f20, 0x1f46,\n      0x1f48, 0x1f4e,\n      0x1f51, 0x1f52,\n      0x1f53, 0x1f54,\n      0x1f55, 0x1f56,\n      0x1f57, 0x1f58,\n      0x1f59, 0x1f5a,\n      0x1f5b, 0x1f5c,\n      0x1f5d, 0x1f5e,\n      0x1f5f, 0x1f7e,\n      0x1fb0, 0x1fb2,\n      0x1fb8, 0x1fbc,\n      0x1fbe, 0x1fbf,\n      0x1fc8, 0x1fcc,\n      0x1fd0, 0x1fd2,\n      0x1fd8, 0x1fdc,\n      0x1fe0, 0x1fe2,\n      0x1fe5, 0x1fe6,\n      0x1fe8, 0x1fed,\n      0x1ff8, 0x1ffc,\n      0x2132, 0x2133,\n      0x214e, 0x214f,\n      0x2160, 0x2180,\n      0x2183, 0x2185,\n      0x24b6, 0x24ea,\n      0x2c00, 0x2c2f,\n      0x2c30, 0x2c5f,\n      0x2c60, 0x2c6d,\n      0x2c75, 0x2c77,\n      0x2c80, 0x2ce4,\n      0x2d00, 0x2d26,\n      0xff21, 0xff3b,\n      0xff41, 0xff5b\n      );",
        "begin_line": 88,
        "end_line": 184,
        "comment": "\n   * Set of code units that are case-insensitively equivalent to some other\n   * code unit according to the EcmaScript\n   * <a href=\"http://es5.github.com/#Canonicalize\">Canonicalize</a> operation\n   * described in section 15.10.2.8.\n   * The case sensitive characters are the ones that canonicalize to a character\n   * other than themselves or have a character that canonicalizes to them.\n   * Canonicalize is based on the definition of\n   * {@code String.prototype.toUpperCase} which is itself based on Unicode 3.0.0\n   * as specified at\n   * <a href=\"ftp://ftp.unicode.org/Public/3.0-Update/UnicodeData-3.0.0.txt\">\n   * UnicodeData-3.0.0\n   * </a>\n   * and <a href=\"ftp://ftp.unicode.org/Public/3.0-Update/SpecialCasing-2.txt\">\n   * SpecialCasings-2.txt\n   * </a>.\n   *\n   * <p>\n   * This table was generated by running the below on Chrome:\n   * </p>\n   * <pre>\n   * for (var cc = 0; cc < 0x10000; ++cc) {\n   *   var ch = String.fromCharCode(cc);\n   *   var u = ch.toUpperCase();\n   *   if (ch != u && u.length === 1) {\n   *     var cu = u.charCodeAt(0);\n   *     if (cc <= 128 || u.charCodeAt(0) > 128) {\n   *       print('0x' + cc.toString(16) + ', 0x' + cu.toString(16) + ',');\n   *     }\n   *   }\n   * }\n   * </pre>\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.CaseCanonicalize",
        "src_path": "src/com/google/javascript/jscomp/regex/CaseCanonicalize.java",
        "signature": "com.google.javascript.jscomp.regex.CaseCanonicalize.UCASE_ASCII_LETTERS",
        "snippet": "  private static final CharRanges UCASE_ASCII_LETTERS\n      = CharRanges.inclusive('A', 'Z');",
        "begin_line": 244,
        "end_line": 245,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.CaseCanonicalize",
        "src_path": "src/com/google/javascript/jscomp/regex/CaseCanonicalize.java",
        "signature": "com.google.javascript.jscomp.regex.CaseCanonicalize.DELTA_SETS",
        "snippet": "  private static final ImmutableList<DeltaSet> DELTA_SETS = ImmutableList.of(\n      new DeltaSet(-10795, CharRanges.withMembers(0x23a)),\n      new DeltaSet(-10792, CharRanges.withMembers(0x23e)),\n      new DeltaSet(-10743, CharRanges.withMembers(0x26b)),\n      new DeltaSet(-10727, CharRanges.withMembers(0x27d)),\n      new DeltaSet(-7264, CharRanges.withRanges(0x10a0, 0x10c6)),\n      new DeltaSet(-7205, CharRanges.withMembers(0x399)),\n      new DeltaSet(-3814, CharRanges.withMembers(0x1d7d)),\n      new DeltaSet(-743, CharRanges.withMembers(0xb5)),\n      new DeltaSet(-219, CharRanges.withMembers(0x1b7)),\n      new DeltaSet(-218, CharRanges.withMembers(0x1a6, 0x1a9, 0x1ae)),\n      new DeltaSet(-217, CharRanges.withRanges(0x1b1, 0x1b3)),\n      new DeltaSet(-214, CharRanges.withMembers(0x19f)),\n      new DeltaSet(-213, CharRanges.withMembers(0x19d)),\n      new DeltaSet(-211, CharRanges.withMembers(0x196, 0x19c)),\n      new DeltaSet(-210, CharRanges.withMembers(0x181)),\n      new DeltaSet(-209, CharRanges.withMembers(0x197)),\n      new DeltaSet(-207, CharRanges.withMembers(0x194)),\n      new DeltaSet(-206, CharRanges.withMembers(0x186)),\n      new DeltaSet(-205, CharRanges.withRanges(0x189, 0x18b, 0x193, 0x194)),\n      new DeltaSet(-203, CharRanges.withMembers(0x190)),\n      new DeltaSet(-202, CharRanges.withMembers(0x18f)),\n      new DeltaSet(-195, CharRanges.withMembers(0x180)),\n      new DeltaSet(-163, CharRanges.withMembers(0x19a)),\n      new DeltaSet(-130, CharRanges.withRanges(0x19e, 0x19f, 0x37b, 0x37e)),\n      new DeltaSet(-128, CharRanges.withRanges(0x1f78, 0x1f7a)),\n      new DeltaSet(-126, CharRanges.withRanges(0x1f7c, 0x1f7e)),\n      new DeltaSet(-121, CharRanges.withMembers(0xff)),\n      new DeltaSet(-112, CharRanges.withRanges(0x1f7a, 0x1f7c)),\n      new DeltaSet(-100, CharRanges.withRanges(0x1f76, 0x1f78)),\n      new DeltaSet(-97, CharRanges.withMembers(0x195)),\n      new DeltaSet(-96, CharRanges.withMembers(0x395)),\n      new DeltaSet(-86, CharRanges.withRanges(0x39a, 0x39b, 0x1f72, 0x1f76)),\n      new DeltaSet(-84, CharRanges.withMembers(0x345)),\n      new DeltaSet(-80, CharRanges.withRanges(0x3a1, 0x3a2, 0x400, 0x410)),\n      new DeltaSet(-79, CharRanges.withMembers(0x18e)),\n      new DeltaSet(-74, CharRanges.withRanges(0x1f70, 0x1f72)),\n      new DeltaSet(-71, CharRanges.withMembers(0x245)),\n      new DeltaSet(-69, CharRanges.withMembers(0x244)),\n      new DeltaSet(-64, CharRanges.withMembers(0x38c)),\n      new DeltaSet(-63, CharRanges.withRanges(0x38e, 0x390)),\n      new DeltaSet(-62, CharRanges.withMembers(0x392)),\n      new DeltaSet(-59, CharRanges.withMembers(0x1e60)),\n      new DeltaSet(-57, CharRanges.withMembers(0x398)),\n      new DeltaSet(-56, CharRanges.withMembers(0x1bf)),\n      new DeltaSet(-54, CharRanges.withMembers(0x3a0)),\n      new DeltaSet(-48, CharRanges.withRanges(0x531, 0x557, 0x2c00, 0x2c2f)),\n      new DeltaSet(-47, CharRanges.withMembers(0x3a6)),\n      new DeltaSet(-38, CharRanges.withMembers(0x386)),\n      new DeltaSet(-37, CharRanges.withRanges(0x388, 0x38b)),\n      new DeltaSet(-32, CharRanges.withRanges(\n          0x41, 0x5b, 0xc0, 0xd7, 0xd8, 0xdf, 0x391, 0x3a2, 0x3a3, 0x3ac,\n          0x410, 0x430, 0xff21, 0xff3b)),\n      new DeltaSet(-31, CharRanges.withMembers(0x3a3)),\n      new DeltaSet(-28, CharRanges.withMembers(0x2132)),\n      new DeltaSet(-26, CharRanges.withRanges(0x24b6, 0x24d0)),\n      new DeltaSet(-16, CharRanges.withRanges(0x2160, 0x2170)),\n      new DeltaSet(-15, CharRanges.withMembers(0x4c0)),\n      new DeltaSet(-8, CharRanges.withRanges(\n          0x1f00, 0x1f08, 0x1f10, 0x1f16, 0x1f20, 0x1f28, 0x1f30, 0x1f38,\n          0x1f40, 0x1f46, 0x1f51, 0x1f52, 0x1f53, 0x1f54, 0x1f55, 0x1f56,\n          0x1f57, 0x1f58, 0x1f60, 0x1f68, 0x1fb0, 0x1fb2, 0x1fd0, 0x1fd2,\n          0x1fe0, 0x1fe2)),\n      new DeltaSet(-7, CharRanges.withMembers(0x3f2, 0x1fe5)),\n      new DeltaSet(-2, CharRanges.withMembers(0x1c4, 0x1c7, 0x1ca, 0x1f1)),\n      new DeltaSet(-1, CharRanges.withMembers(\n          0x100, 0x102, 0x104, 0x106, 0x108, 0x10a, 0x10c, 0x10e, 0x110, 0x112,\n          0x114, 0x116, 0x118, 0x11a, 0x11c, 0x11e, 0x120, 0x122, 0x124, 0x126,\n          0x128, 0x12a, 0x12c, 0x12e, 0x132, 0x134, 0x136, 0x139, 0x13b, 0x13d,\n          0x13f, 0x141, 0x143, 0x145, 0x147, 0x14a, 0x14c, 0x14e, 0x150, 0x152,\n          0x154, 0x156, 0x158, 0x15a, 0x15c, 0x15e, 0x160, 0x162, 0x164, 0x166,\n          0x168, 0x16a, 0x16c, 0x16e, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17b,\n          0x17d, 0x182, 0x184, 0x187, 0x18b, 0x191, 0x198, 0x1a0, 0x1a2, 0x1a4,\n          0x1a7, 0x1ac, 0x1af, 0x1b3, 0x1b5, 0x1b8, 0x1bc, 0x1c4, 0x1c7, 0x1ca,\n          0x1cd, 0x1cf, 0x1d1, 0x1d3, 0x1d5, 0x1d7, 0x1d9, 0x1db, 0x1de, 0x1e0,\n          0x1e2, 0x1e4, 0x1e6, 0x1e8, 0x1ea, 0x1ec, 0x1ee, 0x1f1, 0x1f4, 0x1f8,\n          0x1fa, 0x1fc, 0x1fe, 0x200, 0x202, 0x204, 0x206, 0x208, 0x20a, 0x20c,\n          0x20e, 0x210, 0x212, 0x214, 0x216, 0x218, 0x21a, 0x21c, 0x21e, 0x222,\n          0x224, 0x226, 0x228, 0x22a, 0x22c, 0x22e, 0x230, 0x232, 0x23b, 0x241,\n          0x246, 0x248, 0x24a, 0x24c, 0x24e, 0x3d8, 0x3da, 0x3dc, 0x3de, 0x3e0,\n          0x3e2, 0x3e4, 0x3e6, 0x3e8, 0x3ea, 0x3ec, 0x3ee, 0x3f7, 0x3fa, 0x460,\n          0x462, 0x464, 0x466, 0x468, 0x46a, 0x46c, 0x46e, 0x470, 0x472, 0x474,\n          0x476, 0x478, 0x47a, 0x47c, 0x47e, 0x480, 0x48a, 0x48c, 0x48e, 0x490,\n          0x492, 0x494, 0x496, 0x498, 0x49a, 0x49c, 0x49e, 0x4a0, 0x4a2, 0x4a4,\n          0x4a6, 0x4a8, 0x4aa, 0x4ac, 0x4ae, 0x4b0, 0x4b2, 0x4b4, 0x4b6, 0x4b8,\n          0x4ba, 0x4bc, 0x4be, 0x4c1, 0x4c3, 0x4c5, 0x4c7, 0x4c9, 0x4cb, 0x4cd,\n          0x4d0, 0x4d2, 0x4d4, 0x4d6, 0x4d8, 0x4da, 0x4dc, 0x4de, 0x4e0, 0x4e2,\n          0x4e4, 0x4e6, 0x4e8, 0x4ea, 0x4ec, 0x4ee, 0x4f0, 0x4f2, 0x4f4, 0x4f6,\n          0x4f8, 0x4fa, 0x4fc, 0x4fe, 0x500, 0x502, 0x504, 0x506, 0x508, 0x50a,\n          0x50c, 0x50e, 0x510, 0x512, 0x1e00, 0x1e02, 0x1e04, 0x1e06, 0x1e08,\n          0x1e0a, 0x1e0c, 0x1e0e, 0x1e10, 0x1e12, 0x1e14, 0x1e16, 0x1e18,\n          0x1e1a, 0x1e1c, 0x1e1e, 0x1e20, 0x1e22, 0x1e24, 0x1e26, 0x1e28,\n          0x1e2a, 0x1e2c, 0x1e2e, 0x1e30, 0x1e32, 0x1e34, 0x1e36, 0x1e38,\n          0x1e3a, 0x1e3c, 0x1e3e, 0x1e40, 0x1e42, 0x1e44, 0x1e46, 0x1e48,\n          0x1e4a, 0x1e4c, 0x1e4e, 0x1e50, 0x1e52, 0x1e54, 0x1e56, 0x1e58,\n          0x1e5a, 0x1e5c, 0x1e5e, 0x1e60, 0x1e62, 0x1e64, 0x1e66, 0x1e68,\n          0x1e6a, 0x1e6c, 0x1e6e, 0x1e70, 0x1e72, 0x1e74, 0x1e76, 0x1e78,\n          0x1e7a, 0x1e7c, 0x1e7e, 0x1e80, 0x1e82, 0x1e84, 0x1e86, 0x1e88,\n          0x1e8a, 0x1e8c, 0x1e8e, 0x1e90, 0x1e92, 0x1e94, 0x1ea0, 0x1ea2,\n          0x1ea4, 0x1ea6, 0x1ea8, 0x1eaa, 0x1eac, 0x1eae, 0x1eb0, 0x1eb2,\n          0x1eb4, 0x1eb6, 0x1eb8, 0x1eba, 0x1ebc, 0x1ebe, 0x1ec0, 0x1ec2,\n          0x1ec4, 0x1ec6, 0x1ec8, 0x1eca, 0x1ecc, 0x1ece, 0x1ed0, 0x1ed2,\n          0x1ed4, 0x1ed6, 0x1ed8, 0x1eda, 0x1edc, 0x1ede, 0x1ee0, 0x1ee2,\n          0x1ee4, 0x1ee6, 0x1ee8, 0x1eea, 0x1eec, 0x1eee, 0x1ef0, 0x1ef2,\n          0x1ef4, 0x1ef6, 0x1ef8, 0x2183, 0x2c60, 0x2c67, 0x2c69, 0x2c6b,\n          0x2c75, 0x2c80, 0x2c82, 0x2c84, 0x2c86, 0x2c88, 0x2c8a, 0x2c8c,\n          0x2c8e, 0x2c90, 0x2c92, 0x2c94, 0x2c96, 0x2c98, 0x2c9a, 0x2c9c,\n          0x2c9e, 0x2ca0, 0x2ca2, 0x2ca4, 0x2ca6, 0x2ca8, 0x2caa, 0x2cac,\n          0x2cae, 0x2cb0, 0x2cb2, 0x2cb4, 0x2cb6, 0x2cb8, 0x2cba, 0x2cbc,\n          0x2cbe, 0x2cc0, 0x2cc2, 0x2cc4, 0x2cc6, 0x2cc8, 0x2cca, 0x2ccc,\n          0x2cce, 0x2cd0, 0x2cd2, 0x2cd4, 0x2cd6, 0x2cd8, 0x2cda, 0x2cdc,\n          0x2cde, 0x2ce0, 0x2ce2)),\n      new DeltaSet(1, CharRanges.withMembers(\n          0x101, 0x103, 0x105, 0x107, 0x109, 0x10b, 0x10d, 0x10f, 0x111, 0x113,\n          0x115, 0x117, 0x119, 0x11b, 0x11d, 0x11f, 0x121, 0x123, 0x125, 0x127,\n          0x129, 0x12b, 0x12d, 0x12f, 0x133, 0x135, 0x137, 0x13a, 0x13c, 0x13e,\n          0x140, 0x142, 0x144, 0x146, 0x148, 0x14b, 0x14d, 0x14f, 0x151, 0x153,\n          0x155, 0x157, 0x159, 0x15b, 0x15d, 0x15f, 0x161, 0x163, 0x165, 0x167,\n          0x169, 0x16b, 0x16d, 0x16f, 0x171, 0x173, 0x175, 0x177, 0x17a, 0x17c,\n          0x17e, 0x183, 0x185, 0x188, 0x18c, 0x192, 0x199, 0x1a1, 0x1a3, 0x1a5,\n          0x1a8, 0x1ad, 0x1b0, 0x1b4, 0x1b6, 0x1b9, 0x1bd, 0x1c5, 0x1c8, 0x1cb,\n          0x1ce, 0x1d0, 0x1d2, 0x1d4, 0x1d6, 0x1d8, 0x1da, 0x1dc, 0x1df, 0x1e1,\n          0x1e3, 0x1e5, 0x1e7, 0x1e9, 0x1eb, 0x1ed, 0x1ef, 0x1f2, 0x1f5, 0x1f9,\n          0x1fb, 0x1fd, 0x1ff, 0x201, 0x203, 0x205, 0x207, 0x209, 0x20b, 0x20d,\n          0x20f, 0x211, 0x213, 0x215, 0x217, 0x219, 0x21b, 0x21d, 0x21f, 0x223,\n          0x225, 0x227, 0x229, 0x22b, 0x22d, 0x22f, 0x231, 0x233, 0x23c, 0x242,\n          0x247, 0x249, 0x24b, 0x24d, 0x24f, 0x3d9, 0x3db, 0x3dd, 0x3df, 0x3e1,\n          0x3e3, 0x3e5, 0x3e7, 0x3e9, 0x3eb, 0x3ed, 0x3ef, 0x3f8, 0x3fb, 0x461,\n          0x463, 0x465, 0x467, 0x469, 0x46b, 0x46d, 0x46f, 0x471, 0x473, 0x475,\n          0x477, 0x479, 0x47b, 0x47d, 0x47f, 0x481, 0x48b, 0x48d, 0x48f, 0x491,\n          0x493, 0x495, 0x497, 0x499, 0x49b, 0x49d, 0x49f, 0x4a1, 0x4a3, 0x4a5,\n          0x4a7, 0x4a9, 0x4ab, 0x4ad, 0x4af, 0x4b1, 0x4b3, 0x4b5, 0x4b7, 0x4b9,\n          0x4bb, 0x4bd, 0x4bf, 0x4c2, 0x4c4, 0x4c6, 0x4c8, 0x4ca, 0x4cc, 0x4ce,\n          0x4d1, 0x4d3, 0x4d5, 0x4d7, 0x4d9, 0x4db, 0x4dd, 0x4df, 0x4e1, 0x4e3,\n          0x4e5, 0x4e7, 0x4e9, 0x4eb, 0x4ed, 0x4ef, 0x4f1, 0x4f3, 0x4f5, 0x4f7,\n          0x4f9, 0x4fb, 0x4fd, 0x4ff, 0x501, 0x503, 0x505, 0x507, 0x509, 0x50b,\n          0x50d, 0x50f, 0x511, 0x513, 0x1e01, 0x1e03, 0x1e05, 0x1e07, 0x1e09,\n          0x1e0b, 0x1e0d, 0x1e0f, 0x1e11, 0x1e13, 0x1e15, 0x1e17, 0x1e19,\n          0x1e1b, 0x1e1d, 0x1e1f, 0x1e21, 0x1e23, 0x1e25, 0x1e27, 0x1e29,\n          0x1e2b, 0x1e2d, 0x1e2f, 0x1e31, 0x1e33, 0x1e35, 0x1e37, 0x1e39,\n          0x1e3b, 0x1e3d, 0x1e3f, 0x1e41, 0x1e43, 0x1e45, 0x1e47, 0x1e49,\n          0x1e4b, 0x1e4d, 0x1e4f, 0x1e51, 0x1e53, 0x1e55, 0x1e57, 0x1e59,\n          0x1e5b, 0x1e5d, 0x1e5f, 0x1e61, 0x1e63, 0x1e65, 0x1e67, 0x1e69,\n          0x1e6b, 0x1e6d, 0x1e6f, 0x1e71, 0x1e73, 0x1e75, 0x1e77, 0x1e79,\n          0x1e7b, 0x1e7d, 0x1e7f, 0x1e81, 0x1e83, 0x1e85, 0x1e87, 0x1e89,\n          0x1e8b, 0x1e8d, 0x1e8f, 0x1e91, 0x1e93, 0x1e95, 0x1ea1, 0x1ea3,\n          0x1ea5, 0x1ea7, 0x1ea9, 0x1eab, 0x1ead, 0x1eaf, 0x1eb1, 0x1eb3,\n          0x1eb5, 0x1eb7, 0x1eb9, 0x1ebb, 0x1ebd, 0x1ebf, 0x1ec1, 0x1ec3,\n          0x1ec5, 0x1ec7, 0x1ec9, 0x1ecb, 0x1ecd, 0x1ecf, 0x1ed1, 0x1ed3,\n          0x1ed5, 0x1ed7, 0x1ed9, 0x1edb, 0x1edd, 0x1edf, 0x1ee1, 0x1ee3,\n          0x1ee5, 0x1ee7, 0x1ee9, 0x1eeb, 0x1eed, 0x1eef, 0x1ef1, 0x1ef3,\n          0x1ef5, 0x1ef7, 0x1ef9, 0x2184, 0x2c61, 0x2c68, 0x2c6a, 0x2c6c,\n          0x2c76, 0x2c81, 0x2c83, 0x2c85, 0x2c87, 0x2c89, 0x2c8b, 0x2c8d,\n          0x2c8f, 0x2c91, 0x2c93, 0x2c95, 0x2c97, 0x2c99, 0x2c9b, 0x2c9d,\n          0x2c9f, 0x2ca1, 0x2ca3, 0x2ca5, 0x2ca7, 0x2ca9, 0x2cab, 0x2cad,\n          0x2caf, 0x2cb1, 0x2cb3, 0x2cb5, 0x2cb7, 0x2cb9, 0x2cbb, 0x2cbd,\n          0x2cbf, 0x2cc1, 0x2cc3, 0x2cc5, 0x2cc7, 0x2cc9, 0x2ccb, 0x2ccd,\n          0x2ccf, 0x2cd1, 0x2cd3, 0x2cd5, 0x2cd7, 0x2cd9, 0x2cdb, 0x2cdd,\n          0x2cdf, 0x2ce1, 0x2ce3)),\n      new DeltaSet(2, CharRanges.withMembers(0x1c6, 0x1c9, 0x1cc, 0x1f3)),\n      new DeltaSet(7, CharRanges.withMembers(0x3f9, 0x1fec)),\n      new DeltaSet(8, CharRanges.withRanges(\n          0x1f08, 0x1f10, 0x1f18, 0x1f1e, 0x1f28, 0x1f30, 0x1f38, 0x1f40,\n          0x1f48, 0x1f4e, 0x1f59, 0x1f5a, 0x1f5b, 0x1f5c, 0x1f5d, 0x1f5e,\n          0x1f5f, 0x1f60, 0x1f68, 0x1f70, 0x1fb8, 0x1fba, 0x1fd8, 0x1fda,\n          0x1fe8, 0x1fea)),\n      new DeltaSet(15, CharRanges.withMembers(0x4cf)),\n      new DeltaSet(16, CharRanges.withRanges(0x2170, 0x2180)),\n      new DeltaSet(26, CharRanges.withRanges(0x24d0, 0x24ea)),\n      new DeltaSet(28, CharRanges.withMembers(0x214e)),\n      new DeltaSet(31, CharRanges.withMembers(0x3c2)),\n      new DeltaSet(32, CharRanges.withRanges(\n          0x61, 0x7b, 0xe0, 0xf7, 0xf8, 0xff, 0x3b1, 0x3c2, 0x3c3, 0x3cc,\n          0x430, 0x450, 0xff41, 0xff5b)),\n      new DeltaSet(37, CharRanges.withRanges(0x3ad, 0x3b0)),\n      new DeltaSet(38, CharRanges.withMembers(0x3ac)),\n      new DeltaSet(47, CharRanges.withMembers(0x3d5)),\n      new DeltaSet(48, CharRanges.withRanges(0x561, 0x587, 0x2c30, 0x2c5f)),\n      new DeltaSet(54, CharRanges.withMembers(0x3d6)),\n      new DeltaSet(56, CharRanges.withMembers(0x1f7)),\n      new DeltaSet(57, CharRanges.withMembers(0x3d1)),\n      new DeltaSet(59, CharRanges.withMembers(0x1e9b)),\n      new DeltaSet(62, CharRanges.withMembers(0x3d0)),\n      new DeltaSet(63, CharRanges.withRanges(0x3cd, 0x3cf)),\n      new DeltaSet(64, CharRanges.withMembers(0x3cc)),\n      new DeltaSet(69, CharRanges.withMembers(0x289)),\n      new DeltaSet(71, CharRanges.withMembers(0x28c)),\n      new DeltaSet(74, CharRanges.withRanges(0x1fba, 0x1fbc)),\n      new DeltaSet(79, CharRanges.withMembers(0x1dd)),\n      new DeltaSet(80, CharRanges.withRanges(0x3f1, 0x3f2, 0x450, 0x460)),\n      new DeltaSet(84, CharRanges.withMembers(0x399)),\n      new DeltaSet(86, CharRanges.withRanges(0x3f0, 0x3f1, 0x1fc8, 0x1fcc)),\n      new DeltaSet(96, CharRanges.withMembers(0x3f5)),\n      new DeltaSet(97, CharRanges.withMembers(0x1f6)),\n      new DeltaSet(100, CharRanges.withRanges(0x1fda, 0x1fdc)),\n      new DeltaSet(112, CharRanges.withRanges(0x1fea, 0x1fec)),\n      new DeltaSet(121, CharRanges.withMembers(0x178)),\n      new DeltaSet(126, CharRanges.withRanges(0x1ffa, 0x1ffc)),\n      new DeltaSet(128, CharRanges.withRanges(0x1ff8, 0x1ffa)),\n      new DeltaSet(130, CharRanges.withRanges(0x220, 0x221, 0x3fd, 0x400)),\n      new DeltaSet(163, CharRanges.withMembers(0x23d)),\n      new DeltaSet(195, CharRanges.withMembers(0x243)),\n      new DeltaSet(202, CharRanges.withMembers(0x259)),\n      new DeltaSet(203, CharRanges.withMembers(0x25b)),\n      new DeltaSet(205, CharRanges.withRanges(0x256, 0x258, 0x260, 0x261)),\n      new DeltaSet(206, CharRanges.withMembers(0x254)),\n      new DeltaSet(207, CharRanges.withMembers(0x263)),\n      new DeltaSet(209, CharRanges.withMembers(0x268)),\n      new DeltaSet(210, CharRanges.withMembers(0x253)),\n      new DeltaSet(211, CharRanges.withMembers(0x269, 0x26f)),\n      new DeltaSet(213, CharRanges.withMembers(0x272)),\n      new DeltaSet(214, CharRanges.withMembers(0x275)),\n      new DeltaSet(217, CharRanges.withRanges(0x28a, 0x28c)),\n      new DeltaSet(218, CharRanges.withMembers(0x280, 0x283, 0x288)),\n      new DeltaSet(219, CharRanges.withMembers(0x292)),\n      new DeltaSet(743, CharRanges.withMembers(0x39c)),\n      new DeltaSet(3814, CharRanges.withMembers(0x2c63)),\n      new DeltaSet(7205, CharRanges.withMembers(0x1fbe)),\n      new DeltaSet(7264, CharRanges.withRanges(0x2d00, 0x2d26)),\n      new DeltaSet(10727, CharRanges.withMembers(0x2c64)),\n      new DeltaSet(10743, CharRanges.withMembers(0x2c62)),\n      new DeltaSet(10792, CharRanges.withMembers(0x2c66)),\n      new DeltaSet(10795, CharRanges.withMembers(0x2c65))\n      );",
        "begin_line": 275,
        "end_line": 498,
        "comment": "\n   * Sets of code units broken down by delta that are case-insensitively\n   * equivalent to another code unit that differs from the first by that delta.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.CaseCanonicalize",
        "src_path": "src/com/google/javascript/jscomp/regex/CaseCanonicalize.java",
        "signature": "com.google.javascript.jscomp.regex.CaseCanonicalize.CANON_DELTA_SETS",
        "snippet": "  private static final ImmutableList<DeltaSet> CANON_DELTA_SETS\n      = ImmutableList.of(\n      new DeltaSet(-10743, CharRanges.withMembers(0x26b)),\n      new DeltaSet(-10727, CharRanges.withMembers(0x27d)),\n      new DeltaSet(-3814, CharRanges.withMembers(0x1d7d)),\n      new DeltaSet(-743, CharRanges.withMembers(0xb5)),\n      new DeltaSet(-195, CharRanges.withMembers(0x180)),\n      new DeltaSet(-163, CharRanges.withMembers(0x19a)),\n      new DeltaSet(-130, CharRanges.withRanges(0x19e, 0x19f, 0x37b, 0x37e)),\n      new DeltaSet(-128, CharRanges.withRanges(0x1f78, 0x1f7a)),\n      new DeltaSet(-126, CharRanges.withRanges(0x1f7c, 0x1f7e)),\n      new DeltaSet(-121, CharRanges.withMembers(0xff)),\n      new DeltaSet(-112, CharRanges.withRanges(0x1f7a, 0x1f7c)),\n      new DeltaSet(-100, CharRanges.withRanges(0x1f76, 0x1f78)),\n      new DeltaSet(-97, CharRanges.withMembers(0x195)),\n      new DeltaSet(-86, CharRanges.withRanges(0x1f72, 0x1f76)),\n      new DeltaSet(-84, CharRanges.withMembers(0x345)),\n      new DeltaSet(-74, CharRanges.withRanges(0x1f70, 0x1f72)),\n      new DeltaSet(-56, CharRanges.withMembers(0x1bf)),\n      new DeltaSet(-8, CharRanges.withRanges(\n          0x1f00, 0x1f08, 0x1f10, 0x1f16, 0x1f20, 0x1f28, 0x1f30, 0x1f38,\n          0x1f40, 0x1f46, 0x1f51, 0x1f52, 0x1f53, 0x1f54, 0x1f55, 0x1f56,\n          0x1f57, 0x1f58, 0x1f60, 0x1f68, 0x1fb0, 0x1fb2, 0x1fd0, 0x1fd2,\n          0x1fe0, 0x1fe2)),\n      new DeltaSet(-7, CharRanges.withMembers(0x3f2, 0x1fe5)),\n      new DeltaSet(1, CharRanges.withMembers(\n          0x101, 0x103, 0x105, 0x107, 0x109, 0x10b, 0x10d, 0x10f, 0x111, 0x113,\n          0x115, 0x117, 0x119, 0x11b, 0x11d, 0x11f, 0x121, 0x123, 0x125, 0x127,\n          0x129, 0x12b, 0x12d, 0x12f, 0x133, 0x135, 0x137, 0x13a, 0x13c, 0x13e,\n          0x140, 0x142, 0x144, 0x146, 0x148, 0x14b, 0x14d, 0x14f, 0x151, 0x153,\n          0x155, 0x157, 0x159, 0x15b, 0x15d, 0x15f, 0x161, 0x163, 0x165, 0x167,\n          0x169, 0x16b, 0x16d, 0x16f, 0x171, 0x173, 0x175, 0x177, 0x17a, 0x17c,\n          0x17e, 0x183, 0x185, 0x188, 0x18c, 0x192, 0x199, 0x1a1, 0x1a3, 0x1a5,\n          0x1a8, 0x1ad, 0x1b0, 0x1b4, 0x1b6, 0x1b9, 0x1bd, 0x1c5, 0x1c8, 0x1cb,\n          0x1ce, 0x1d0, 0x1d2, 0x1d4, 0x1d6, 0x1d8, 0x1da, 0x1dc, 0x1df, 0x1e1,\n          0x1e3, 0x1e5, 0x1e7, 0x1e9, 0x1eb, 0x1ed, 0x1ef, 0x1f2, 0x1f5, 0x1f9,\n          0x1fb, 0x1fd, 0x1ff, 0x201, 0x203, 0x205, 0x207, 0x209, 0x20b, 0x20d,\n          0x20f, 0x211, 0x213, 0x215, 0x217, 0x219, 0x21b, 0x21d, 0x21f, 0x223,\n          0x225, 0x227, 0x229, 0x22b, 0x22d, 0x22f, 0x231, 0x233, 0x23c, 0x242,\n          0x247, 0x249, 0x24b, 0x24d, 0x24f, 0x3d9, 0x3db, 0x3dd, 0x3df, 0x3e1,\n          0x3e3, 0x3e5, 0x3e7, 0x3e9, 0x3eb, 0x3ed, 0x3ef, 0x3f8, 0x3fb, 0x461,\n          0x463, 0x465, 0x467, 0x469, 0x46b, 0x46d, 0x46f, 0x471, 0x473, 0x475,\n          0x477, 0x479, 0x47b, 0x47d, 0x47f, 0x481, 0x48b, 0x48d, 0x48f, 0x491,\n          0x493, 0x495, 0x497, 0x499, 0x49b, 0x49d, 0x49f, 0x4a1, 0x4a3, 0x4a5,\n          0x4a7, 0x4a9, 0x4ab, 0x4ad, 0x4af, 0x4b1, 0x4b3, 0x4b5, 0x4b7, 0x4b9,\n          0x4bb, 0x4bd, 0x4bf, 0x4c2, 0x4c4, 0x4c6, 0x4c8, 0x4ca, 0x4cc, 0x4ce,\n          0x4d1, 0x4d3, 0x4d5, 0x4d7, 0x4d9, 0x4db, 0x4dd, 0x4df, 0x4e1, 0x4e3,\n          0x4e5, 0x4e7, 0x4e9, 0x4eb, 0x4ed, 0x4ef, 0x4f1, 0x4f3, 0x4f5, 0x4f7,\n          0x4f9, 0x4fb, 0x4fd, 0x4ff, 0x501, 0x503, 0x505, 0x507, 0x509, 0x50b,\n          0x50d, 0x50f, 0x511, 0x513, 0x1e01, 0x1e03, 0x1e05, 0x1e07, 0x1e09,\n          0x1e0b, 0x1e0d, 0x1e0f, 0x1e11, 0x1e13, 0x1e15, 0x1e17, 0x1e19,\n          0x1e1b, 0x1e1d, 0x1e1f, 0x1e21, 0x1e23, 0x1e25, 0x1e27, 0x1e29,\n          0x1e2b, 0x1e2d, 0x1e2f, 0x1e31, 0x1e33, 0x1e35, 0x1e37, 0x1e39,\n          0x1e3b, 0x1e3d, 0x1e3f, 0x1e41, 0x1e43, 0x1e45, 0x1e47, 0x1e49,\n          0x1e4b, 0x1e4d, 0x1e4f, 0x1e51, 0x1e53, 0x1e55, 0x1e57, 0x1e59,\n          0x1e5b, 0x1e5d, 0x1e5f, 0x1e61, 0x1e63, 0x1e65, 0x1e67, 0x1e69,\n          0x1e6b, 0x1e6d, 0x1e6f, 0x1e71, 0x1e73, 0x1e75, 0x1e77, 0x1e79,\n          0x1e7b, 0x1e7d, 0x1e7f, 0x1e81, 0x1e83, 0x1e85, 0x1e87, 0x1e89,\n          0x1e8b, 0x1e8d, 0x1e8f, 0x1e91, 0x1e93, 0x1e95, 0x1ea1, 0x1ea3,\n          0x1ea5, 0x1ea7, 0x1ea9, 0x1eab, 0x1ead, 0x1eaf, 0x1eb1, 0x1eb3,\n          0x1eb5, 0x1eb7, 0x1eb9, 0x1ebb, 0x1ebd, 0x1ebf, 0x1ec1, 0x1ec3,\n          0x1ec5, 0x1ec7, 0x1ec9, 0x1ecb, 0x1ecd, 0x1ecf, 0x1ed1, 0x1ed3,\n          0x1ed5, 0x1ed7, 0x1ed9, 0x1edb, 0x1edd, 0x1edf, 0x1ee1, 0x1ee3,\n          0x1ee5, 0x1ee7, 0x1ee9, 0x1eeb, 0x1eed, 0x1eef, 0x1ef1, 0x1ef3,\n          0x1ef5, 0x1ef7, 0x1ef9, 0x2184, 0x2c61, 0x2c68, 0x2c6a, 0x2c6c,\n          0x2c76, 0x2c81, 0x2c83, 0x2c85, 0x2c87, 0x2c89, 0x2c8b, 0x2c8d,\n          0x2c8f, 0x2c91, 0x2c93, 0x2c95, 0x2c97, 0x2c99, 0x2c9b, 0x2c9d,\n          0x2c9f, 0x2ca1, 0x2ca3, 0x2ca5, 0x2ca7, 0x2ca9, 0x2cab, 0x2cad,\n          0x2caf, 0x2cb1, 0x2cb3, 0x2cb5, 0x2cb7, 0x2cb9, 0x2cbb, 0x2cbd,\n          0x2cbf, 0x2cc1, 0x2cc3, 0x2cc5, 0x2cc7, 0x2cc9, 0x2ccb, 0x2ccd,\n          0x2ccf, 0x2cd1, 0x2cd3, 0x2cd5, 0x2cd7, 0x2cd9, 0x2cdb, 0x2cdd,\n          0x2cdf, 0x2ce1, 0x2ce3)),\n      new DeltaSet(2, CharRanges.withMembers(0x1c6, 0x1c9, 0x1cc, 0x1f3)),\n      new DeltaSet(15, CharRanges.withMembers(0x4cf)),\n      new DeltaSet(16, CharRanges.withRanges(0x2170, 0x2180)),\n      new DeltaSet(26, CharRanges.withRanges(0x24d0, 0x24ea)),\n      new DeltaSet(28, CharRanges.withMembers(0x214e)),\n      new DeltaSet(31, CharRanges.withMembers(0x3c2)),\n      new DeltaSet(32, CharRanges.withRanges(\n          0x61, 0x7b, 0xe0, 0xf7, 0xf8, 0xff, 0x3b1, 0x3c2, 0x3c3, 0x3cc, 0x430,\n          0x450, 0xff41, 0xff5b)),\n      new DeltaSet(37, CharRanges.withRanges(0x3ad, 0x3b0)),\n      new DeltaSet(38, CharRanges.withMembers(0x3ac)),\n      new DeltaSet(47, CharRanges.withMembers(0x3d5)),\n      new DeltaSet(48, CharRanges.withRanges(0x561, 0x587, 0x2c30, 0x2c5f)),\n      new DeltaSet(54, CharRanges.withMembers(0x3d6)),\n      new DeltaSet(57, CharRanges.withMembers(0x3d1)),\n      new DeltaSet(59, CharRanges.withMembers(0x1e9b)),\n      new DeltaSet(62, CharRanges.withMembers(0x3d0)),\n      new DeltaSet(63, CharRanges.withRanges(0x3cd, 0x3cf)),\n      new DeltaSet(64, CharRanges.withMembers(0x3cc)),\n      new DeltaSet(69, CharRanges.withMembers(0x289)),\n      new DeltaSet(71, CharRanges.withMembers(0x28c)),\n      new DeltaSet(79, CharRanges.withMembers(0x1dd)),\n      new DeltaSet(80, CharRanges.withRanges(0x3f1, 0x3f2, 0x450, 0x460)),\n      new DeltaSet(86, CharRanges.withMembers(0x3f0)),\n      new DeltaSet(96, CharRanges.withMembers(0x3f5)),\n      new DeltaSet(202, CharRanges.withMembers(0x259)),\n      new DeltaSet(203, CharRanges.withMembers(0x25b)),\n      new DeltaSet(205, CharRanges.withRanges(0x256, 0x258, 0x260, 0x261)),\n      new DeltaSet(206, CharRanges.withMembers(0x254)),\n      new DeltaSet(207, CharRanges.withMembers(0x263)),\n      new DeltaSet(209, CharRanges.withMembers(0x268)),\n      new DeltaSet(210, CharRanges.withMembers(0x253)),\n      new DeltaSet(211, CharRanges.withMembers(0x269, 0x26f)),\n      new DeltaSet(213, CharRanges.withMembers(0x272)),\n      new DeltaSet(214, CharRanges.withMembers(0x275)),\n      new DeltaSet(217, CharRanges.withRanges(0x28a, 0x28c)),\n      new DeltaSet(218, CharRanges.withMembers(0x280, 0x283, 0x288)),\n      new DeltaSet(219, CharRanges.withMembers(0x292)),\n      new DeltaSet(7205, CharRanges.withMembers(0x1fbe)),\n      new DeltaSet(7264, CharRanges.withRanges(0x2d00, 0x2d26)),\n      new DeltaSet(10792, CharRanges.withMembers(0x2c66)),\n      new DeltaSet(10795, CharRanges.withMembers(0x2c65))\n      );",
        "begin_line": 500,
        "end_line": 614,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.DeltaSet",
        "src_path": "src/com/google/javascript/jscomp/regex/CaseCanonicalize.java",
        "signature": "com.google.javascript.jscomp.regex.DeltaSet.delta",
        "snippet": "    final int delta;",
        "begin_line": 622,
        "end_line": 622,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.DeltaSet",
        "src_path": "src/com/google/javascript/jscomp/regex/CaseCanonicalize.java",
        "signature": "com.google.javascript.jscomp.regex.DeltaSet.codeUnits",
        "snippet": "    final CharRanges codeUnits;",
        "begin_line": 623,
        "end_line": 623,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.Parser",
        "src_path": "src/com/google/javascript/jscomp/regex/RegExpTree.java",
        "signature": "com.google.javascript.jscomp.regex.Parser.pos",
        "snippet": "      int pos;",
        "begin_line": 130,
        "end_line": 130,
        "comment": " The number of characters in pattern consumed. "
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.Parser",
        "src_path": "src/com/google/javascript/jscomp/regex/RegExpTree.java",
        "signature": "com.google.javascript.jscomp.regex.Parser.numCapturingGroups",
        "snippet": "      int numCapturingGroups = 0;",
        "begin_line": 132,
        "end_line": 132,
        "comment": " The number of capturing groups seen so far. "
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.Parser",
        "src_path": "src/com/google/javascript/jscomp/regex/RegExpTree.java",
        "signature": "com.google.javascript.jscomp.regex.Parser.limit",
        "snippet": "      final int limit = pattern.length();",
        "begin_line": 134,
        "end_line": 134,
        "comment": " The length of pattern. "
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.Empty",
        "src_path": "src/com/google/javascript/jscomp/regex/RegExpTree.java",
        "signature": "com.google.javascript.jscomp.regex.Empty.INSTANCE",
        "snippet": "    static final Empty INSTANCE = new Empty();",
        "begin_line": 604,
        "end_line": 604,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.Anchor",
        "src_path": "src/com/google/javascript/jscomp/regex/RegExpTree.java",
        "signature": "com.google.javascript.jscomp.regex.Anchor.type",
        "snippet": "    final char type;",
        "begin_line": 633,
        "end_line": 633,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.WordBoundary",
        "src_path": "src/com/google/javascript/jscomp/regex/RegExpTree.java",
        "signature": "com.google.javascript.jscomp.regex.WordBoundary.type",
        "snippet": "    final char type;",
        "begin_line": 668,
        "end_line": 668,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.BackReference",
        "src_path": "src/com/google/javascript/jscomp/regex/RegExpTree.java",
        "signature": "com.google.javascript.jscomp.regex.BackReference.groupIndex",
        "snippet": "    final int groupIndex;",
        "begin_line": 701,
        "end_line": 701,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.Text",
        "src_path": "src/com/google/javascript/jscomp/regex/RegExpTree.java",
        "signature": "com.google.javascript.jscomp.regex.Text.text",
        "snippet": "    final String text;",
        "begin_line": 736,
        "end_line": 736,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.Repetition",
        "src_path": "src/com/google/javascript/jscomp/regex/RegExpTree.java",
        "signature": "com.google.javascript.jscomp.regex.Repetition.body",
        "snippet": "    final RegExpTree body;",
        "begin_line": 824,
        "end_line": 824,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.Repetition",
        "src_path": "src/com/google/javascript/jscomp/regex/RegExpTree.java",
        "signature": "com.google.javascript.jscomp.regex.Repetition.min",
        "snippet": "    final int min, max;",
        "begin_line": 825,
        "end_line": 825,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.Repetition",
        "src_path": "src/com/google/javascript/jscomp/regex/RegExpTree.java",
        "signature": "com.google.javascript.jscomp.regex.Repetition.max",
        "snippet": "    final int min, max;",
        "begin_line": 825,
        "end_line": 825,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.Repetition",
        "src_path": "src/com/google/javascript/jscomp/regex/RegExpTree.java",
        "signature": "com.google.javascript.jscomp.regex.Repetition.greedy",
        "snippet": "    final boolean greedy;",
        "begin_line": 826,
        "end_line": 826,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.Alternation",
        "src_path": "src/com/google/javascript/jscomp/regex/RegExpTree.java",
        "signature": "com.google.javascript.jscomp.regex.Alternation.alternatives",
        "snippet": "    final ImmutableList<RegExpTree> alternatives;",
        "begin_line": 1009,
        "end_line": 1009,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.RegExpTree",
        "src_path": "src/com/google/javascript/jscomp/regex/RegExpTree.java",
        "signature": "com.google.javascript.jscomp.regex.RegExpTree.NEVER_MATCHES",
        "snippet": "  private static final RegExpTree NEVER_MATCHES = new LookaheadAssertion(\n      Empty.INSTANCE, false);",
        "begin_line": 1156,
        "end_line": 1157,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.LookaheadAssertion",
        "src_path": "src/com/google/javascript/jscomp/regex/RegExpTree.java",
        "signature": "com.google.javascript.jscomp.regex.LookaheadAssertion.body",
        "snippet": "    final RegExpTree body;",
        "begin_line": 1160,
        "end_line": 1160,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.LookaheadAssertion",
        "src_path": "src/com/google/javascript/jscomp/regex/RegExpTree.java",
        "signature": "com.google.javascript.jscomp.regex.LookaheadAssertion.positive",
        "snippet": "    final boolean positive;",
        "begin_line": 1161,
        "end_line": 1161,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.CapturingGroup",
        "src_path": "src/com/google/javascript/jscomp/regex/RegExpTree.java",
        "signature": "com.google.javascript.jscomp.regex.CapturingGroup.body",
        "snippet": "    final RegExpTree body;",
        "begin_line": 1225,
        "end_line": 1225,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.RegExpTree",
        "src_path": "src/com/google/javascript/jscomp/regex/RegExpTree.java",
        "signature": "com.google.javascript.jscomp.regex.RegExpTree.DIGITS",
        "snippet": "  private static final CharRanges DIGITS = CharRanges.inclusive('0', '9');",
        "begin_line": 1280,
        "end_line": 1280,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.RegExpTree",
        "src_path": "src/com/google/javascript/jscomp/regex/RegExpTree.java",
        "signature": "com.google.javascript.jscomp.regex.RegExpTree.UCASE_LETTERS",
        "snippet": "  private static final CharRanges UCASE_LETTERS\n      = CharRanges.inclusive('A', 'Z');",
        "begin_line": 1282,
        "end_line": 1283,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.RegExpTree",
        "src_path": "src/com/google/javascript/jscomp/regex/RegExpTree.java",
        "signature": "com.google.javascript.jscomp.regex.RegExpTree.LCASE_LETTERS",
        "snippet": "  private static final CharRanges LCASE_LETTERS\n      = CharRanges.inclusive('a', 'z');",
        "begin_line": 1285,
        "end_line": 1286,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.RegExpTree",
        "src_path": "src/com/google/javascript/jscomp/regex/RegExpTree.java",
        "signature": "com.google.javascript.jscomp.regex.RegExpTree.LETTERS",
        "snippet": "  private static final CharRanges LETTERS = UCASE_LETTERS.union(LCASE_LETTERS);",
        "begin_line": 1288,
        "end_line": 1288,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.RegExpTree",
        "src_path": "src/com/google/javascript/jscomp/regex/RegExpTree.java",
        "signature": "com.google.javascript.jscomp.regex.RegExpTree.WORD_CHARS",
        "snippet": "  private static final CharRanges WORD_CHARS = DIGITS\n      .union(LETTERS).union(CharRanges.withMembers('_'));",
        "begin_line": 1290,
        "end_line": 1291,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.RegExpTree",
        "src_path": "src/com/google/javascript/jscomp/regex/RegExpTree.java",
        "signature": "com.google.javascript.jscomp.regex.RegExpTree.INVERSE_WORD_CHARS",
        "snippet": "  private static final CharRanges INVERSE_WORD_CHARS\n      = CharRanges.ALL_CODE_UNITS.difference(WORD_CHARS);",
        "begin_line": 1293,
        "end_line": 1294,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.RegExpTree",
        "src_path": "src/com/google/javascript/jscomp/regex/RegExpTree.java",
        "signature": "com.google.javascript.jscomp.regex.RegExpTree.SPACE_CHARS",
        "snippet": "  private static final CharRanges SPACE_CHARS = CharRanges.withMembers(\n      '\\t', '\\n', '\\u000b', '\\u000c', '\\r', ' ', '\\u00a0',\n      // Unicode 3.0 Zs\n      '\\u1680', '\\u180e', '\\u2000', '\\u2001',\n      '\\u2002', '\\u2003', '\\u2004', '\\u2005',\n      '\\u2006', '\\u2007', '\\u2008', '\\u2009',\n      '\\u200a',\n      // Line terminator chars\n      '\\u2028', '\\u2029',\n      // Unicode 3.0 Zs\n      '\\u202f', '\\u205f', '\\u3000',\n      // Byte order marker is a space character in ES5 but not ES3.\n      '\\ufeff'\n      );",
        "begin_line": 1296,
        "end_line": 1309,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.RegExpTree",
        "src_path": "src/com/google/javascript/jscomp/regex/RegExpTree.java",
        "signature": "com.google.javascript.jscomp.regex.RegExpTree.IE_SPACE_CHARS",
        "snippet": "  private static final CharRanges IE_SPACE_CHARS = CharRanges.withMembers(\n    '\\t', '\\n', '\\u000b', '\\u000c', '\\r', ' '\n    );",
        "begin_line": 1312,
        "end_line": 1314,
        "comment": " IE is broken around \\s.  IE (6, 7, 8 at least), only recognize these. "
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.RegExpTree",
        "src_path": "src/com/google/javascript/jscomp/regex/RegExpTree.java",
        "signature": "com.google.javascript.jscomp.regex.RegExpTree.IE_SPEC_ERRORS",
        "snippet": "  private static final CharRanges IE_SPEC_ERRORS = SPACE_CHARS.difference(\n      IE_SPACE_CHARS);",
        "begin_line": 1317,
        "end_line": 1318,
        "comment": " IE is broken around \\s.  IE (6, 7, 8 at least), only recognize these. "
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.RegExpTree",
        "src_path": "src/com/google/javascript/jscomp/regex/RegExpTree.java",
        "signature": "com.google.javascript.jscomp.regex.RegExpTree.NAMED_CHAR_GROUPS",
        "snippet": "  private static final ImmutableMap<Character, CharRanges> NAMED_CHAR_GROUPS\n       = ImmutableMap.<Character, CharRanges>builder()\n          .put('d', DIGITS)\n          .put('D', CharRanges.ALL_CODE_UNITS.difference(DIGITS))\n          .put('s', SPACE_CHARS)\n          .put('S', CharRanges.ALL_CODE_UNITS.difference(SPACE_CHARS))\n          .put('w', WORD_CHARS)\n          .put('W', INVERSE_WORD_CHARS)\n          .build();",
        "begin_line": 1320,
        "end_line": 1328,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.RegExpTree",
        "src_path": "src/com/google/javascript/jscomp/regex/RegExpTree.java",
        "signature": "com.google.javascript.jscomp.regex.RegExpTree.DOT_CHARSET",
        "snippet": "  private static final Charset DOT_CHARSET = new Charset(\n      CharRanges.ALL_CODE_UNITS.difference(\n          CharRanges.withMembers('\\n', '\\r', '\\u2028', '\\u2029')),\n      CharRanges.EMPTY);",
        "begin_line": 1330,
        "end_line": 1333,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.Charset",
        "src_path": "src/com/google/javascript/jscomp/regex/RegExpTree.java",
        "signature": "com.google.javascript.jscomp.regex.Charset.ranges",
        "snippet": "    final CharRanges ranges;",
        "begin_line": 1336,
        "end_line": 1336,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.Charset",
        "src_path": "src/com/google/javascript/jscomp/regex/RegExpTree.java",
        "signature": "com.google.javascript.jscomp.regex.Charset.ieExplicits",
        "snippet": "    final CharRanges ieExplicits;",
        "begin_line": 1342,
        "end_line": 1342,
        "comment": "\n     * Code units that were mentioned explicitly and that might be matched by\n     * a group according to ECMAScript 5 but would not because of specification\n     * violations in IE.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.DecomposedCharset",
        "src_path": "src/com/google/javascript/jscomp/regex/RegExpTree.java",
        "signature": "com.google.javascript.jscomp.regex.DecomposedCharset.inverted",
        "snippet": "    boolean inverted;",
        "begin_line": 1507,
        "end_line": 1507,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.DecomposedCharset",
        "src_path": "src/com/google/javascript/jscomp/regex/RegExpTree.java",
        "signature": "com.google.javascript.jscomp.regex.DecomposedCharset.ranges",
        "snippet": "    final CharRanges ranges;",
        "begin_line": 1508,
        "end_line": 1508,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.DecomposedCharset",
        "src_path": "src/com/google/javascript/jscomp/regex/RegExpTree.java",
        "signature": "com.google.javascript.jscomp.regex.DecomposedCharset.namedGroups",
        "snippet": "    final String namedGroups;",
        "begin_line": 1509,
        "end_line": 1509,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.Concatenation",
        "src_path": "src/com/google/javascript/jscomp/regex/RegExpTree.java",
        "signature": "com.google.javascript.jscomp.regex.Concatenation.elements",
        "snippet": "    final ImmutableList<RegExpTree> elements;",
        "begin_line": 1631,
        "end_line": 1631,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.Simplifier",
        "src_path": "src/com/google/javascript/jscomp/regex/RegExpTree.java",
        "signature": "com.google.javascript.jscomp.regex.Simplifier.simplified",
        "snippet": "        final List<RegExpTree> simplified = Lists.newArrayList();",
        "begin_line": 1644,
        "end_line": 1644,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.CharRanges",
        "src_path": "src/com/google/javascript/jscomp/regex/CharRanges.java",
        "signature": "com.google.javascript.jscomp.regex.CharRanges.ranges",
        "snippet": "  private final int[] ranges;",
        "begin_line": 35,
        "end_line": 35,
        "comment": "\n   * A strictly increasing set of bit indices where even members are the\n   * inclusive starts of ranges, and odd members are the exclusive ends.\n   * <p>\n   * E.g., { 1, 5, 6, 10 } represents the set ( 1, 2, 3, 4, 6, 7, 8, 9 ).\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.CharRanges",
        "src_path": "src/com/google/javascript/jscomp/regex/CharRanges.java",
        "signature": "com.google.javascript.jscomp.regex.CharRanges.EMPTY",
        "snippet": "  public static final CharRanges EMPTY = new CharRanges(new int[0]);",
        "begin_line": 37,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.regex.CharRanges",
        "src_path": "src/com/google/javascript/jscomp/regex/CharRanges.java",
        "signature": "com.google.javascript.jscomp.regex.CharRanges.ALL_CODE_UNITS",
        "snippet": "  public static final CharRanges ALL_CODE_UNITS\n      = new CharRanges(new int[] { 0, 0x10000 });",
        "begin_line": 39,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.GraphPruner",
        "src_path": "src/com/google/javascript/jscomp/graph/GraphPruner.java",
        "signature": "com.google.javascript.jscomp.graph.GraphPruner.graph",
        "snippet": "  private final DiGraph<N, E> graph;",
        "begin_line": 37,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal",
        "src_path": "src/com/google/javascript/jscomp/graph/FixedPointGraphTraversal.java",
        "signature": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal.callback",
        "snippet": "  private final EdgeCallback<N, E> callback;",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal",
        "src_path": "src/com/google/javascript/jscomp/graph/FixedPointGraphTraversal.java",
        "signature": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal.NON_HALTING_ERROR_MSG",
        "snippet": "  public static final String NON_HALTING_ERROR_MSG =\n    \"Fixed point computation not halting\";",
        "begin_line": 45,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.AnnotationState",
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "signature": "com.google.javascript.jscomp.graph.AnnotationState.first",
        "snippet": "    private final Annotatable first;",
        "begin_line": 63,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.AnnotationState",
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "signature": "com.google.javascript.jscomp.graph.AnnotationState.second",
        "snippet": "    private final Annotation second;",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.GraphAnnotationState",
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "signature": "com.google.javascript.jscomp.graph.GraphAnnotationState.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 77,
        "end_line": 77,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.Graph",
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "signature": "com.google.javascript.jscomp.graph.Graph.nodeAnnotationStack",
        "snippet": "  private Deque<GraphAnnotationState> nodeAnnotationStack;",
        "begin_line": 87,
        "end_line": 87,
        "comment": "\n   * Used by {@link #pushNodeAnnotations()} and {@link #popNodeAnnotations()}.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.Graph",
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "signature": "com.google.javascript.jscomp.graph.Graph.edgeAnnotationStack",
        "snippet": "  private Deque<GraphAnnotationState> edgeAnnotationStack;",
        "begin_line": 92,
        "end_line": 92,
        "comment": "\n   * Used by {@link #pushEdgeAnnotations()} and {@link #popEdgeAnnotations()}.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.SimpleSubGraph",
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "signature": "com.google.javascript.jscomp.graph.SimpleSubGraph.graph",
        "snippet": "    private Graph<N, E> graph;",
        "begin_line": 307,
        "end_line": 307,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.SimpleSubGraph",
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "signature": "com.google.javascript.jscomp.graph.SimpleSubGraph.nodes",
        "snippet": "    private List<GraphNode<N, E>> nodes = Lists.newArrayList();",
        "begin_line": 308,
        "end_line": 308,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.GraphColoring",
        "src_path": "src/com/google/javascript/jscomp/graph/GraphColoring.java",
        "signature": "com.google.javascript.jscomp.graph.GraphColoring.colorToNodeMap",
        "snippet": "  protected N[] colorToNodeMap;",
        "begin_line": 51,
        "end_line": 51,
        "comment": " color 5 will now use the name \"foo\"."
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.GraphColoring",
        "src_path": "src/com/google/javascript/jscomp/graph/GraphColoring.java",
        "signature": "com.google.javascript.jscomp.graph.GraphColoring.graph",
        "snippet": "  protected final AdjacencyGraph<N, E> graph;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.Color",
        "src_path": "src/com/google/javascript/jscomp/graph/GraphColoring.java",
        "signature": "com.google.javascript.jscomp.graph.Color.value",
        "snippet": "    int value = 0;",
        "begin_line": 89,
        "end_line": 89,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.GreedyGraphColoring",
        "src_path": "src/com/google/javascript/jscomp/graph/GraphColoring.java",
        "signature": "com.google.javascript.jscomp.graph.GreedyGraphColoring.tieBreaker",
        "snippet": "    private final Comparator<N> tieBreaker;",
        "begin_line": 115,
        "end_line": 115,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.GraphReachability",
        "src_path": "src/com/google/javascript/jscomp/graph/GraphReachability.java",
        "signature": "com.google.javascript.jscomp.graph.GraphReachability.graph",
        "snippet": "  private final DiGraph<N, E> graph;",
        "begin_line": 34,
        "end_line": 34,
        "comment": " FixedPointGraphTraversal accepts them."
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.GraphReachability",
        "src_path": "src/com/google/javascript/jscomp/graph/GraphReachability.java",
        "signature": "com.google.javascript.jscomp.graph.GraphReachability.edgePredicate",
        "snippet": "  private final Predicate<EdgeTuple<N, E>> edgePredicate;",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.GraphReachability",
        "src_path": "src/com/google/javascript/jscomp/graph/GraphReachability.java",
        "signature": "com.google.javascript.jscomp.graph.GraphReachability.REACHABLE",
        "snippet": "  public static final Annotation REACHABLE = new Annotation() {};",
        "begin_line": 83,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.EdgeTuple",
        "src_path": "src/com/google/javascript/jscomp/graph/GraphReachability.java",
        "signature": "com.google.javascript.jscomp.graph.EdgeTuple.sourceNode",
        "snippet": "    public final N sourceNode;",
        "begin_line": 89,
        "end_line": 89,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.EdgeTuple",
        "src_path": "src/com/google/javascript/jscomp/graph/GraphReachability.java",
        "signature": "com.google.javascript.jscomp.graph.EdgeTuple.edge",
        "snippet": "    public final E edge;",
        "begin_line": 90,
        "end_line": 90,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.EdgeTuple",
        "src_path": "src/com/google/javascript/jscomp/graph/GraphReachability.java",
        "signature": "com.google.javascript.jscomp.graph.EdgeTuple.destNode",
        "snippet": "    public final N destNode;",
        "begin_line": 91,
        "end_line": 91,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.nodes",
        "snippet": "  protected final Map<N, LinkedDirectedGraphNode<N, E>> nodes =\n      Maps.newHashMap();",
        "begin_line": 44,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.useNodeAnnotations",
        "snippet": "  private final boolean useNodeAnnotations;",
        "begin_line": 68,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.useEdgeAnnotations",
        "snippet": "  private final boolean useEdgeAnnotations;",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraphNode",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraphNode.inEdgeList",
        "snippet": "    List<DiGraphEdge<N, E>> inEdgeList = Lists.newArrayList();",
        "begin_line": 335,
        "end_line": 335,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraphNode",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraphNode.outEdgeList",
        "snippet": "    List<DiGraphEdge<N, E>> outEdgeList =\n        Lists.newArrayList();",
        "begin_line": 336,
        "end_line": 337,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraphNode",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraphNode.value",
        "snippet": "    protected final N value;",
        "begin_line": 339,
        "end_line": 339,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.NeighborIterator",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.NeighborIterator.in",
        "snippet": "      private final Iterator<DiGraphEdge<N, E>> in = inEdgeList.iterator();",
        "begin_line": 403,
        "end_line": 403,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.NeighborIterator",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.NeighborIterator.out",
        "snippet": "      private final Iterator<DiGraphEdge<N, E>> out = outEdgeList.iterator();",
        "begin_line": 404,
        "end_line": 404,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.AnnotatedLinkedDirectedGraphNode",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.AnnotatedLinkedDirectedGraphNode.annotation",
        "snippet": "    protected Annotation annotation;",
        "begin_line": 432,
        "end_line": 432,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraphEdge",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraphEdge.sourceNode",
        "snippet": "    private DiGraphNode<N, E> sourceNode;",
        "begin_line": 460,
        "end_line": 460,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraphEdge",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraphEdge.destNode",
        "snippet": "    private DiGraphNode<N, E> destNode;",
        "begin_line": 462,
        "end_line": 462,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraphEdge",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraphEdge.value",
        "snippet": "    protected final E value;",
        "begin_line": 464,
        "end_line": 464,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.AnnotatedLinkedDirectedGraphEdge",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.AnnotatedLinkedDirectedGraphEdge.annotation",
        "snippet": "    protected Annotation annotation;",
        "begin_line": 558,
        "end_line": 558,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedUndirectedGraph",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedUndirectedGraph.nodes",
        "snippet": "  protected final Map<N, LinkedUndirectedGraphNode<N, E>> nodes =\n      Maps.newHashMap();",
        "begin_line": 41,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedUndirectedGraph",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedUndirectedGraph.useNodeAnnotations",
        "snippet": "  private final boolean useNodeAnnotations;",
        "begin_line": 65,
        "end_line": 65,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedUndirectedGraph",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedUndirectedGraph.useEdgeAnnotations",
        "snippet": "  private final boolean useEdgeAnnotations;",
        "begin_line": 66,
        "end_line": 66,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedUndirectedGraphNode",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedUndirectedGraphNode.neighborList",
        "snippet": "    private List<UndiGraphEdge<N, E>> neighborList =\n      Lists.newArrayList();",
        "begin_line": 285,
        "end_line": 286,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedUndirectedGraphNode",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedUndirectedGraphNode.value",
        "snippet": "    private final N value;",
        "begin_line": 287,
        "end_line": 287,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.NeighborIterator",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.NeighborIterator.edgeIterator",
        "snippet": "      private final Iterator<UndiGraphEdge<N, E>> edgeIterator =\n          neighborList.iterator();",
        "begin_line": 341,
        "end_line": 342,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.AnnotatedLinkedUndirectedGraphNode",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.AnnotatedLinkedUndirectedGraphNode.annotation",
        "snippet": "    protected Annotation annotation;",
        "begin_line": 372,
        "end_line": 372,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedUndirectedGraphEdge",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedUndirectedGraphEdge.nodeA",
        "snippet": "    private UndiGraphNode<N, E> nodeA;",
        "begin_line": 396,
        "end_line": 396,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedUndirectedGraphEdge",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedUndirectedGraphEdge.nodeB",
        "snippet": "    private UndiGraphNode<N, E> nodeB;",
        "begin_line": 397,
        "end_line": 397,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedUndirectedGraphEdge",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedUndirectedGraphEdge.value",
        "snippet": "    protected final E value;",
        "begin_line": 398,
        "end_line": 398,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.AnnotatedLinkedUndirectedGraphEdge",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.AnnotatedLinkedUndirectedGraphEdge.annotation",
        "snippet": "    protected Annotation annotation;",
        "begin_line": 468,
        "end_line": 468,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.StandardUnionFind",
        "src_path": "src/com/google/javascript/jscomp/graph/StandardUnionFind.java",
        "signature": "com.google.javascript.jscomp.graph.StandardUnionFind.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = -1L;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.StandardUnionFind",
        "src_path": "src/com/google/javascript/jscomp/graph/StandardUnionFind.java",
        "signature": "com.google.javascript.jscomp.graph.StandardUnionFind.elmap",
        "snippet": "  private final Map<E, Node<E>> elmap = Maps.newLinkedHashMap();",
        "begin_line": 53,
        "end_line": 53,
        "comment": " All values with the same root node are in the same equivalence set. "
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.StandardUnionFind",
        "src_path": "src/com/google/javascript/jscomp/graph/StandardUnionFind.java",
        "signature": "com.google.javascript.jscomp.graph.StandardUnionFind.nodeForValue",
        "snippet": "      Node<E> nodeForValue = elmap.get(value);",
        "begin_line": 172,
        "end_line": 172,
        "comment": " some node that's close to the root, or null "
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.Node",
        "src_path": "src/com/google/javascript/jscomp/graph/StandardUnionFind.java",
        "signature": "com.google.javascript.jscomp.graph.Node.parent",
        "snippet": "    Node<E> parent;",
        "begin_line": 208,
        "end_line": 208,
        "comment": " The parent node of this element. "
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.Node",
        "src_path": "src/com/google/javascript/jscomp/graph/StandardUnionFind.java",
        "signature": "com.google.javascript.jscomp.graph.Node.element",
        "snippet": "    final E element;",
        "begin_line": 211,
        "end_line": 211,
        "comment": " The element represented by this node. "
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.Node",
        "src_path": "src/com/google/javascript/jscomp/graph/StandardUnionFind.java",
        "signature": "com.google.javascript.jscomp.graph.Node.rank",
        "snippet": "    int rank = 0;",
        "begin_line": 214,
        "end_line": 214,
        "comment": " A bound on the depth of the subtree rooted to this node. "
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.Node",
        "src_path": "src/com/google/javascript/jscomp/graph/StandardUnionFind.java",
        "signature": "com.google.javascript.jscomp.graph.Node.size",
        "snippet": "    int size = 1;",
        "begin_line": 220,
        "end_line": 220,
        "comment": "\n     * If this node is the root of a tree, this is the number of elements in the\n     * tree. Otherwise, it's undefined.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.PathUtil",
        "src_path": "src/com/google/javascript/jscomp/deps/PathUtil.java",
        "signature": "com.google.javascript.jscomp.deps.PathUtil.SLASH_MATCHER",
        "snippet": "  private static final CharMatcher SLASH_MATCHER = CharMatcher.is('/');",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.PathUtil",
        "src_path": "src/com/google/javascript/jscomp/deps/PathUtil.java",
        "signature": "com.google.javascript.jscomp.deps.PathUtil.NON_SLASH_MATCHER",
        "snippet": "  private static final CharMatcher NON_SLASH_MATCHER = CharMatcher.isNot('/');",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.SortedDependencies",
        "src_path": "src/com/google/javascript/jscomp/deps/SortedDependencies.java",
        "signature": "com.google.javascript.jscomp.deps.SortedDependencies.inputs",
        "snippet": "  private final List<INPUT> inputs;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.SortedDependencies",
        "src_path": "src/com/google/javascript/jscomp/deps/SortedDependencies.java",
        "signature": "com.google.javascript.jscomp.deps.SortedDependencies.sortedList",
        "snippet": "  private final List<INPUT> sortedList;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " A topologically sorted list of the inputs."
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.SortedDependencies",
        "src_path": "src/com/google/javascript/jscomp/deps/SortedDependencies.java",
        "signature": "com.google.javascript.jscomp.deps.SortedDependencies.noProvides",
        "snippet": "  private final List<INPUT> noProvides;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " A list of all the inputs that do not have provides."
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.SortedDependencies",
        "src_path": "src/com/google/javascript/jscomp/deps/SortedDependencies.java",
        "signature": "com.google.javascript.jscomp.deps.SortedDependencies.provideMap",
        "snippet": "  private final Map<String, INPUT> provideMap = Maps.newHashMap();",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.SymbolInfo",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFunctionParser.java",
        "signature": "com.google.javascript.jscomp.deps.SymbolInfo.functionName",
        "snippet": "    public final String functionName;",
        "begin_line": 39,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.SymbolInfo",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFunctionParser.java",
        "signature": "com.google.javascript.jscomp.deps.SymbolInfo.symbol",
        "snippet": "    public final String symbol;",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.JsFunctionParser",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFunctionParser.java",
        "signature": "com.google.javascript.jscomp.deps.JsFunctionParser.logger",
        "snippet": "  private static Logger logger =\n      Logger.getLogger(JsFunctionParser.class.getName());",
        "begin_line": 48,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.JsFunctionParser",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFunctionParser.java",
        "signature": "com.google.javascript.jscomp.deps.JsFunctionParser.pattern",
        "snippet": "  private Pattern pattern;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " Pattern for matching functions. "
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.JsFunctionParser",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFunctionParser.java",
        "signature": "com.google.javascript.jscomp.deps.JsFunctionParser.matcher",
        "snippet": "  private Matcher matcher;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " Matcher used in the parsing. "
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.JsFunctionParser",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFunctionParser.java",
        "signature": "com.google.javascript.jscomp.deps.JsFunctionParser.symbols",
        "snippet": "  private Collection<SymbolInfo> symbols;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " Symbols parsed. "
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.JsFunctionParser",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFunctionParser.java",
        "signature": "com.google.javascript.jscomp.deps.JsFunctionParser.functionsToParse",
        "snippet": "  private Collection<String> functionsToParse;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " Functions to parse "
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.DepsGenerator",
        "src_path": "src/com/google/javascript/jscomp/deps/DepsGenerator.java",
        "signature": "com.google.javascript.jscomp.deps.DepsGenerator.logger",
        "snippet": "  private static Logger logger =\n      Logger.getLogger(DepsGenerator.class.getName());",
        "begin_line": 57,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.DepsGenerator",
        "src_path": "src/com/google/javascript/jscomp/deps/DepsGenerator.java",
        "signature": "com.google.javascript.jscomp.deps.DepsGenerator.srcs",
        "snippet": "  private final Collection<SourceFile> srcs;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " See the Flags in MakeJsDeps for descriptions of these."
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.DepsGenerator",
        "src_path": "src/com/google/javascript/jscomp/deps/DepsGenerator.java",
        "signature": "com.google.javascript.jscomp.deps.DepsGenerator.deps",
        "snippet": "  private final Collection<SourceFile> deps;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.DepsGenerator",
        "src_path": "src/com/google/javascript/jscomp/deps/DepsGenerator.java",
        "signature": "com.google.javascript.jscomp.deps.DepsGenerator.closurePathAbs",
        "snippet": "  private final String closurePathAbs;",
        "begin_line": 63,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.DepsGenerator",
        "src_path": "src/com/google/javascript/jscomp/deps/DepsGenerator.java",
        "signature": "com.google.javascript.jscomp.deps.DepsGenerator.mergeStrategy",
        "snippet": "  private final InclusionStrategy mergeStrategy;",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.DepsGenerator",
        "src_path": "src/com/google/javascript/jscomp/deps/DepsGenerator.java",
        "signature": "com.google.javascript.jscomp.deps.DepsGenerator.errorManager",
        "snippet": "  final ErrorManager errorManager;",
        "begin_line": 65,
        "end_line": 65,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.DepsGenerator",
        "src_path": "src/com/google/javascript/jscomp/deps/DepsGenerator.java",
        "signature": "com.google.javascript.jscomp.deps.DepsGenerator.SAME_FILE_WARNING",
        "snippet": "  static final DiagnosticType SAME_FILE_WARNING = DiagnosticType.warning(\n      \"DEPS_SAME_FILE\",\n      \"Namespace \\\"{0}\\\" is both required and provided in the same file.\");",
        "begin_line": 67,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.DepsGenerator",
        "src_path": "src/com/google/javascript/jscomp/deps/DepsGenerator.java",
        "signature": "com.google.javascript.jscomp.deps.DepsGenerator.NEVER_PROVIDED_ERROR",
        "snippet": "  static final DiagnosticType NEVER_PROVIDED_ERROR = DiagnosticType.error(\n      \"DEPS_NEVER_PROVIDED\",\n      \"Namespace \\\"{0}\\\" is required but never provided.\");",
        "begin_line": 71,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.DepsGenerator",
        "src_path": "src/com/google/javascript/jscomp/deps/DepsGenerator.java",
        "signature": "com.google.javascript.jscomp.deps.DepsGenerator.DUPE_PROVIDES_WARNING",
        "snippet": "  static final DiagnosticType DUPE_PROVIDES_WARNING = DiagnosticType.warning(\n      \"DEPS_DUPE_PROVIDES\",\n      \"Multiple calls to goog.provide(\\\"{0}\\\")\");",
        "begin_line": 75,
        "end_line": 77,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.DepsGenerator",
        "src_path": "src/com/google/javascript/jscomp/deps/DepsGenerator.java",
        "signature": "com.google.javascript.jscomp.deps.DepsGenerator.MULTIPLE_PROVIDES_ERROR",
        "snippet": "  static final DiagnosticType MULTIPLE_PROVIDES_ERROR = DiagnosticType.error(\n      \"DEPS_DUPE_PROVIDES\",\n      \"Namespace \\\"{0}\\\" is already provided in other file {1}\");",
        "begin_line": 79,
        "end_line": 81,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.DepsGenerator",
        "src_path": "src/com/google/javascript/jscomp/deps/DepsGenerator.java",
        "signature": "com.google.javascript.jscomp.deps.DepsGenerator.DUPE_REQUIRE_WARNING",
        "snippet": "  static final DiagnosticType DUPE_REQUIRE_WARNING = DiagnosticType.warning(\n      \"DEPS_DUPE_REQUIRES\",\n      \"Namespace \\\"{0}\\\" is required multiple times\");",
        "begin_line": 83,
        "end_line": 85,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.DepsGenerator",
        "src_path": "src/com/google/javascript/jscomp/deps/DepsGenerator.java",
        "signature": "com.google.javascript.jscomp.deps.DepsGenerator.NO_DEPS_WARNING",
        "snippet": "  static final DiagnosticType NO_DEPS_WARNING = DiagnosticType.warning(\n      \"DEPS_NO_DEPS\",\n      \"No dependencies found in file\");",
        "begin_line": 87,
        "end_line": 89,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.DepsFileParser",
        "src_path": "src/com/google/javascript/jscomp/deps/DepsFileParser.java",
        "signature": "com.google.javascript.jscomp.deps.DepsFileParser.logger",
        "snippet": "  private static Logger logger = Logger.getLogger(DepsFileParser.class.getName());",
        "begin_line": 44,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.DepsFileParser",
        "src_path": "src/com/google/javascript/jscomp/deps/DepsFileParser.java",
        "signature": "com.google.javascript.jscomp.deps.DepsFileParser.depMatcher",
        "snippet": "  private final Matcher depMatcher =\n      Pattern.compile(\"\\\\s*goog.addDependency\\\\((.*)\\\\);?\\\\s*\").matcher(\"\");",
        "begin_line": 50,
        "end_line": 51,
        "comment": "\n   * Pattern for matching JavaScript string literals. The group is:\n   * goog.addDependency({1});\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.DepsFileParser",
        "src_path": "src/com/google/javascript/jscomp/deps/DepsFileParser.java",
        "signature": "com.google.javascript.jscomp.deps.DepsFileParser.depArgsMatch",
        "snippet": "  private final Matcher depArgsMatch =\n      Pattern.compile(\"\\\\s*([^,]*), (\\\\[[^\\\\]]*\\\\]), (\\\\[[^\\\\]]*\\\\])\\\\s*\").matcher(\"\");",
        "begin_line": 57,
        "end_line": 58,
        "comment": "\n   * Pattern for matching the args of a goog.addDependency(). The group is:\n   * goog.addDependency({1}, {2}, {3});\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.DepsFileParser",
        "src_path": "src/com/google/javascript/jscomp/deps/DepsFileParser.java",
        "signature": "com.google.javascript.jscomp.deps.DepsFileParser.depInfos",
        "snippet": "  private List<DependencyInfo> depInfos;",
        "begin_line": 63,
        "end_line": 63,
        "comment": "\n   * The dependency information extracted from the current file.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.DepsFileParser",
        "src_path": "src/com/google/javascript/jscomp/deps/DepsFileParser.java",
        "signature": "com.google.javascript.jscomp.deps.DepsFileParser.pathTranslator",
        "snippet": "  private final Function<String, String> pathTranslator;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " Translates paths in different build systems. "
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.SimpleDependencyInfo",
        "src_path": "src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java",
        "signature": "com.google.javascript.jscomp.deps.SimpleDependencyInfo.provides",
        "snippet": "  private final List<String> provides;",
        "begin_line": 33,
        "end_line": 33,
        "comment": " A list of provided symbols. "
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.SimpleDependencyInfo",
        "src_path": "src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java",
        "signature": "com.google.javascript.jscomp.deps.SimpleDependencyInfo.requires",
        "snippet": "  private final List<String> requires;",
        "begin_line": 36,
        "end_line": 36,
        "comment": " A list of required symbols. "
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.SimpleDependencyInfo",
        "src_path": "src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java",
        "signature": "com.google.javascript.jscomp.deps.SimpleDependencyInfo.srcPathRelativeToClosure",
        "snippet": "  private final String srcPathRelativeToClosure;",
        "begin_line": 39,
        "end_line": 39,
        "comment": " The path of the file relative to closure. "
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.SimpleDependencyInfo",
        "src_path": "src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java",
        "signature": "com.google.javascript.jscomp.deps.SimpleDependencyInfo.pathOfDefiningFile",
        "snippet": "  private final String pathOfDefiningFile;",
        "begin_line": 42,
        "end_line": 42,
        "comment": " The path to the file from which we extracted the dependency information."
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.JsFileParser",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileParser.java",
        "signature": "com.google.javascript.jscomp.deps.JsFileParser.logger",
        "snippet": "  private static Logger logger = Logger.getLogger(JsFileParser.class.getName());",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.JsFileParser",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileParser.java",
        "signature": "com.google.javascript.jscomp.deps.JsFileParser.GOOG_PROVIDE_REQUIRE_PATTERN",
        "snippet": "  private static final Pattern GOOG_PROVIDE_REQUIRE_PATTERN = Pattern.compile(\n      \"(?:^|;)\\\\s*goog\\\\.(provide|require|addDependency)\\\\s*\\\\((.*?)\\\\)\");",
        "begin_line": 43,
        "end_line": 44,
        "comment": " Pattern for matching goog.provide(*) and goog.require(*). "
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.JsFileParser",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileParser.java",
        "signature": "com.google.javascript.jscomp.deps.JsFileParser.BASE_JS_START",
        "snippet": "  private static final String BASE_JS_START = \"var COMPILED = false;\";",
        "begin_line": 47,
        "end_line": 47,
        "comment": " The first non-comment line of base.js "
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.JsFileParser",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileParser.java",
        "signature": "com.google.javascript.jscomp.deps.JsFileParser.googMatcher",
        "snippet": "  private Matcher googMatcher = GOOG_PROVIDE_REQUIRE_PATTERN.matcher(\"\");",
        "begin_line": 50,
        "end_line": 50,
        "comment": " Matchers used in the parsing. "
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.JsFileParser",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileParser.java",
        "signature": "com.google.javascript.jscomp.deps.JsFileParser.provides",
        "snippet": "  private List<String> provides;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " The info for the file we are currently parsing. "
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.JsFileParser",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileParser.java",
        "signature": "com.google.javascript.jscomp.deps.JsFileParser.requires",
        "snippet": "  private List<String> requires;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.JsFileParser",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileParser.java",
        "signature": "com.google.javascript.jscomp.deps.JsFileParser.fileHasProvidesOrRequires",
        "snippet": "  private boolean fileHasProvidesOrRequires;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.JsFileParser",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileParser.java",
        "signature": "com.google.javascript.jscomp.deps.JsFileParser.includeGoogBase",
        "snippet": "  private boolean includeGoogBase = false;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " Whether to provide/require the root namespace. "
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.JsFileLineParser",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileLineParser.java",
        "signature": "com.google.javascript.jscomp.deps.JsFileLineParser.PARSE_WARNING",
        "snippet": "  static final DiagnosticType PARSE_WARNING = DiagnosticType.warning(\n      \"DEPS_PARSE_WARNING\", \"{0}\\n{1}\");",
        "begin_line": 40,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.JsFileLineParser",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileLineParser.java",
        "signature": "com.google.javascript.jscomp.deps.JsFileLineParser.PARSE_ERROR",
        "snippet": "  static final DiagnosticType PARSE_ERROR = DiagnosticType.error(\n      \"DEPS_PARSE_ERROR\", \"{0}\\n{1}\");",
        "begin_line": 42,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.JsFileLineParser",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileLineParser.java",
        "signature": "com.google.javascript.jscomp.deps.JsFileLineParser.shortcutMode",
        "snippet": "  boolean shortcutMode = false;",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.ParseException",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileLineParser.java",
        "signature": "com.google.javascript.jscomp.deps.ParseException.serialVersionUID",
        "snippet": "    public static final long serialVersionUID = 1L;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.ParseException",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileLineParser.java",
        "signature": "com.google.javascript.jscomp.deps.ParseException.fatal",
        "snippet": "    private boolean fatal;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.JsFileLineParser",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileLineParser.java",
        "signature": "com.google.javascript.jscomp.deps.JsFileLineParser.STRING_LITERAL_PATTERN",
        "snippet": "  private static final Pattern STRING_LITERAL_PATTERN = Pattern.compile(\n      \"\\\\s*(?:'((?:\\\\\\\\'|[^'])*?)'|\\\"((?:\\\\\\\\\\\"|[^\\\"])*?)\\\")\\\\s*\");",
        "begin_line": 71,
        "end_line": 72,
        "comment": " Pattern for matching JavaScript string literals. "
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.JsFileLineParser",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileLineParser.java",
        "signature": "com.google.javascript.jscomp.deps.JsFileLineParser.valueMatcher",
        "snippet": "  private Matcher valueMatcher = STRING_LITERAL_PATTERN.matcher(\"\");",
        "begin_line": 75,
        "end_line": 75,
        "comment": " Matcher used in the parsing string literals. "
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.JsFileLineParser",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileLineParser.java",
        "signature": "com.google.javascript.jscomp.deps.JsFileLineParser.filePath",
        "snippet": "  String filePath;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " Path of the file currently being parsed. "
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.JsFileLineParser",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileLineParser.java",
        "signature": "com.google.javascript.jscomp.deps.JsFileLineParser.lineNum",
        "snippet": "  int lineNum;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " The line number of the line currently being parsed. "
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.JsFileLineParser",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileLineParser.java",
        "signature": "com.google.javascript.jscomp.deps.JsFileLineParser.errorManager",
        "snippet": "  ErrorManager errorManager;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " Handles error messages. "
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.JsFileLineParser",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileLineParser.java",
        "signature": "com.google.javascript.jscomp.deps.JsFileLineParser.parseSucceeded",
        "snippet": "  boolean parseSucceeded;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " Did our parse succeed. "
    }
]