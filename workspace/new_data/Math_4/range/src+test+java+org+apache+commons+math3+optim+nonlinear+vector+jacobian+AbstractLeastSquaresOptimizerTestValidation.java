{
  "filepath": "/tmp/Math-4b/src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "AbstractLeastSquaresOptimizerTestValidation",
      "is_interface": false,
      "parent_types": [],
      "begin_line": 48,
      "end_line": 313,
      "comment": "\n * This class demonstrates the main functionality of the\n * {@link AbstractLeastSquaresOptimizer}, common to the\n * optimizer implementations in package\n * {@link org.apache.commons.math3.optimization.general}.\n * \u003cbr/\u003e\n * Not enabled by default, as the class name does not end with \"Test\".\n * \u003cbr/\u003e\n * Invoke by running\n * \u003cpre\u003e\u003ccode\u003e\n *  mvn test -Dtest\u003dAbstractLeastSquaresOptimizerTestValidation\n * \u003c/code\u003e\u003c/pre\u003e\n * or by running\n * \u003cpre\u003e\u003ccode\u003e\n *  mvn test -Dtest\u003dAbstractLeastSquaresOptimizerTestValidation -DargLine\u003d\"-DmcRuns\u003d1234 -server\"\n * \u003c/code\u003e\u003c/pre\u003e\n "
    },
    {
      "type": "field",
      "varNames": [
        "MONTE_CARLO_RUNS"
      ],
      "begin_line": 49,
      "end_line": 50,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerTestValidation.testParametersErrorMonteCarloObservations()",
      "begin_line": 67,
      "end_line": 167,
      "comment": "\n     * Using a Monte-Carlo procedure, this test checks the error estimations\n     * as provided by the square-root of the diagonal elements of the\n     * covariance matrix.\n     * \u003cbr/\u003e\n     * The test generates sets of observations, each sampled from\n     * a Gaussian distribution.\n     * \u003cbr/\u003e\n     * The optimization problem solved is defined in class\n     * {@link StraightLineProblem}.\n     * \u003cbr/\u003e\n     * The output (on stdout) will be a table summarizing the distribution\n     * of parameters generated by the Monte-Carlo process and by the direct\n     * estimation provided by the diagonal elements of the covariance matrix.\n     ",
      "child_ranges": [
        "(line 70,col 9)-(line 70,col 33)",
        "(line 73,col 9)-(line 73,col 37)",
        "(line 74,col 9)-(line 74,col 38)",
        "(line 77,col 9)-(line 81,col 60)",
        "(line 84,col 9)-(line 84,col 31)",
        "(line 86,col 9)-(line 86,col 32)",
        "(line 89,col 9)-(line 89,col 97)",
        "(line 92,col 9)-(line 92,col 83)",
        "(line 95,col 9)-(line 98,col 9)",
        "(line 101,col 9)-(line 101,col 73)",
        "(line 102,col 9)-(line 102,col 48)",
        "(line 105,col 9)-(line 105,col 46)",
        "(line 106,col 9)-(line 106,col 24)",
        "(line 107,col 9)-(line 139,col 9)",
        "(line 142,col 9)-(line 142,col 93)",
        "(line 143,col 9)-(line 143,col 90)",
        "(line 144,col 9)-(line 158,col 9)",
        "(line 159,col 9)-(line 159,col 33)",
        "(line 162,col 9)-(line 166,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerTestValidation.testParametersErrorMonteCarloParameters()",
      "begin_line": 193,
      "end_line": 293,
      "comment": "\n     * In this test, the set of observations is fixed.\n     * Using a Monte-Carlo procedure, it generates sets of parameters,\n     * and determine the parameter change that will result in the\n     * normalized chi-square becoming larger by one than the value from\n     * the best fit solution.\n     * \u003cbr/\u003e\n     * The optimization problem solved is defined in class\n     * {@link StraightLineProblem}.\n     * \u003cbr/\u003e\n     * The output (on stdout) will be a list of lines containing:\n     * \u003cul\u003e\n     *  \u003cli\u003eslope of the straight line,\u003c/li\u003e\n     *  \u003cli\u003eintercept of the straight line,\u003c/li\u003e\n     *  \u003cli\u003echi-square of the solution defined by the above two values.\u003c/li\u003e\n     * \u003c/ul\u003e\n     * The output is separated into two blocks (with a blank line between\n     * them); the first block will contain all parameter sets for which\n     * {@code chi2 \u003c chi2_b + 1}\n     * and the second block, all sets for which\n     * {@code chi2 \u003e\u003d chi2_b + 1}\n     * where {@code chi2_b} is the lowest chi-square (corresponding to the\n     * best solution).\n     ",
      "child_ranges": [
        "(line 196,col 9)-(line 196,col 33)",
        "(line 199,col 9)-(line 199,col 37)",
        "(line 200,col 9)-(line 200,col 38)",
        "(line 203,col 9)-(line 207,col 62)",
        "(line 210,col 9)-(line 210,col 30)",
        "(line 212,col 9)-(line 212,col 32)",
        "(line 215,col 9)-(line 215,col 68)",
        "(line 217,col 9)-(line 217,col 76)",
        "(line 218,col 9)-(line 221,col 9)",
        "(line 224,col 9)-(line 224,col 49)",
        "(line 227,col 9)-(line 227,col 73)",
        "(line 228,col 9)-(line 228,col 48)",
        "(line 231,col 9)-(line 231,col 67)",
        "(line 232,col 9)-(line 232,col 66)",
        "(line 235,col 9)-(line 235,col 46)",
        "(line 236,col 9)-(line 236,col 59)",
        "(line 242,col 9)-(line 242,col 90)",
        "(line 244,col 9)-(line 244,col 48)",
        "(line 245,col 9)-(line 245,col 49)",
        "(line 246,col 9)-(line 246,col 57)",
        "(line 247,col 9)-(line 247,col 60)",
        "(line 248,col 9)-(line 248,col 56)",
        "(line 249,col 9)-(line 249,col 58)",
        "(line 250,col 9)-(line 258,col 9)",
        "(line 265,col 9)-(line 265,col 50)",
        "(line 266,col 9)-(line 266,col 26)",
        "(line 268,col 9)-(line 268,col 56)",
        "(line 271,col 9)-(line 271,col 70)",
        "(line 272,col 9)-(line 272,col 29)",
        "(line 275,col 9)-(line 279,col 9)",
        "(line 280,col 9)-(line 280,col 29)",
        "(line 283,col 9)-(line 288,col 9)",
        "(line 289,col 9)-(line 289,col 29)",
        "(line 291,col 9)-(line 291,col 64)",
        "(line 292,col 9)-(line 292,col 68)"
      ]
    },
    {
      "type": "method",
      "signature": "getChi2N(AbstractLeastSquaresOptimizer, StraightLineProblem, double[])",
      "exception": "UnsolvedSymbolException{context\u003d\u0027null\u0027, name\u003d\u0027StraightLineProblem\u0027, cause\u003d\u0027null\u0027}",
      "begin_line": 298,
      "end_line": 312,
      "comment": "\n     * @return the normalized chi-square.\n     ",
      "child_ranges": [
        "(line 301,col 9)-(line 301,col 44)",
        "(line 302,col 9)-(line 302,col 44)",
        "(line 304,col 9)-(line 309,col 49)",
        "(line 311,col 9)-(line 311,col 65)"
      ]
    },
    {
      "type": "class_interface",
      "name": "DummyOptimizer",
      "is_interface": false,
      "parent_types": [
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer"
      ],
      "begin_line": 319,
      "end_line": 334,
      "comment": "\n * A dummy optimizer.\n * Used for computing the covariance matrix.\n "
    },
    {
      "type": "constructor",
      "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.DummyOptimizer.DummyOptimizer()",
      "begin_line": 320,
      "end_line": 322,
      "comment": "",
      "child_ranges": [
        "(line 321,col 9)-(line 321,col 20)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.DummyOptimizer.doOptimize()",
      "begin_line": 327,
      "end_line": 333,
      "comment": "\n     * This method does nothing and returns a dummy value.\n     ",
      "child_ranges": [
        "(line 329,col 9)-(line 329,col 48)",
        "(line 330,col 9)-(line 330,col 77)",
        "(line 331,col 9)-(line 331,col 34)",
        "(line 332,col 9)-(line 332,col 54)"
      ]
    }
  ]
}