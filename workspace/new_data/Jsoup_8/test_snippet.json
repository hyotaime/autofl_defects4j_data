[
    {
        "class_name": "org.jsoup.TextUtil",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/TextUtil.java",
        "signature": "org.jsoup.TextUtil.stripNewlines(java.lang.String)",
        "snippet": "    public static String stripNewlines(String text) {\n        text = text.replaceAll(\"\\\\n\\\\s*\", \"\");\n        return text;\n    }",
        "begin_line": 8,
        "end_line": 11,
        "comment": "",
        "child_ranges": [
            "(line 9,col 9)-(line 9,col 46)",
            "(line 10,col 9)-(line 10,col 20)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.AttributeParseTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/AttributeParseTest.java",
        "signature": "org.jsoup.parser.AttributeParseTest.parsesRoughAttributeString()",
        "snippet": "    @Test public void parsesRoughAttributeString() {\n        String html = \"<a id=\\\"123\\\" class=\\\"baz = 'bar'\\\" style = 'border: 2px'qux zim foo = 12 mux=18 />\";\n        // should be: <id=123>, <class=baz = 'bar'>, <qux=>, <zim=>, <foo=12>, <mux.=18>\n\n        Element el = Jsoup.parse(html).getElementsByTag(\"a\").get(0);\n        Attributes attr = el.attributes();\n        assertEquals(7, attr.size());\n        assertEquals(\"123\", attr.get(\"id\"));\n        assertEquals(\"baz = 'bar'\", attr.get(\"class\"));\n        assertEquals(\"border: 2px\", attr.get(\"style\"));\n        assertEquals(\"\", attr.get(\"qux\"));\n        assertEquals(\"\", attr.get(\"zim\"));\n        assertEquals(\"12\", attr.get(\"foo\"));\n        assertEquals(\"18\", attr.get(\"mux\"));\n    }",
        "begin_line": 16,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 17,col 9)-(line 17,col 108)",
            "(line 20,col 9)-(line 20,col 68)",
            "(line 21,col 9)-(line 21,col 42)",
            "(line 22,col 9)-(line 22,col 37)",
            "(line 23,col 9)-(line 23,col 44)",
            "(line 24,col 9)-(line 24,col 55)",
            "(line 25,col 9)-(line 25,col 55)",
            "(line 26,col 9)-(line 26,col 42)",
            "(line 27,col 9)-(line 27,col 42)",
            "(line 28,col 9)-(line 28,col 44)",
            "(line 29,col 9)-(line 29,col 44)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.AttributeParseTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/AttributeParseTest.java",
        "signature": "org.jsoup.parser.AttributeParseTest.parsesEmptyString()",
        "snippet": "    @Test public void parsesEmptyString() {\n        String html = \"<a />\";\n        Element el = Jsoup.parse(html).getElementsByTag(\"a\").get(0);\n        Attributes attr = el.attributes();\n        assertEquals(0, attr.size());\n    }",
        "begin_line": 32,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 30)",
            "(line 34,col 9)-(line 34,col 68)",
            "(line 35,col 9)-(line 35,col 42)",
            "(line 36,col 9)-(line 36,col 37)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.AttributeParseTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/AttributeParseTest.java",
        "signature": "org.jsoup.parser.AttributeParseTest.emptyOnNoKey()",
        "snippet": "    @Test public void emptyOnNoKey() {\n        String html = \"<a =empty />\";\n        Element el = Jsoup.parse(html).getElementsByTag(\"a\").get(0);\n        Attributes attr = el.attributes();\n        assertEquals(0, attr.size());\n    }",
        "begin_line": 39,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 37)",
            "(line 41,col 9)-(line 41,col 68)",
            "(line 42,col 9)-(line 42,col 42)",
            "(line 43,col 9)-(line 43,col 37)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.TagTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/TagTest.java",
        "signature": "org.jsoup.parser.TagTest.isCaseInsensitive()",
        "snippet": "    @Test public void isCaseInsensitive() {\n        Tag p1 = Tag.valueOf(\"P\");\n        Tag p2 = Tag.valueOf(\"p\");\n        assertEquals(p1, p2);\n    }",
        "begin_line": 11,
        "end_line": 15,
        "comment": "",
        "child_ranges": [
            "(line 12,col 9)-(line 12,col 34)",
            "(line 13,col 9)-(line 13,col 34)",
            "(line 14,col 9)-(line 14,col 29)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.TagTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/TagTest.java",
        "signature": "org.jsoup.parser.TagTest.trims()",
        "snippet": "    @Test public void trims() {\n        Tag p1 = Tag.valueOf(\"p\");\n        Tag p2 = Tag.valueOf(\" p \");\n        assertEquals(p1, p2);\n    }",
        "begin_line": 17,
        "end_line": 21,
        "comment": "",
        "child_ranges": [
            "(line 18,col 9)-(line 18,col 34)",
            "(line 19,col 9)-(line 19,col 36)",
            "(line 20,col 9)-(line 20,col 29)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.TagTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/TagTest.java",
        "signature": "org.jsoup.parser.TagTest.equality()",
        "snippet": "    @Test public void equality() {\n        Tag p1 = Tag.valueOf(\"p\");\n        Tag p2 = Tag.valueOf(\"p\");\n        assertTrue(p1.equals(p2));\n        assertTrue(p1 == p2);\n    }",
        "begin_line": 23,
        "end_line": 28,
        "comment": "",
        "child_ranges": [
            "(line 24,col 9)-(line 24,col 34)",
            "(line 25,col 9)-(line 25,col 34)",
            "(line 26,col 9)-(line 26,col 34)",
            "(line 27,col 9)-(line 27,col 29)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.TagTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/TagTest.java",
        "signature": "org.jsoup.parser.TagTest.divSemantics()",
        "snippet": "    @Test public void divSemantics() {\n        Tag div = Tag.valueOf(\"div\");\n        Tag p = Tag.valueOf(\"p\");\n\n        assertTrue(div.canContain(div));\n        assertTrue(div.canContain(p));\n    }",
        "begin_line": 30,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 37)",
            "(line 32,col 9)-(line 32,col 33)",
            "(line 34,col 9)-(line 34,col 40)",
            "(line 35,col 9)-(line 35,col 38)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.TagTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/TagTest.java",
        "signature": "org.jsoup.parser.TagTest.pSemantics()",
        "snippet": "    @Test public void pSemantics() {\n        Tag div = Tag.valueOf(\"div\");\n        Tag p = Tag.valueOf(\"p\");\n        Tag img = Tag.valueOf(\"img\");\n        Tag span = Tag.valueOf(\"span\");\n\n        assertTrue(p.canContain(img));\n        assertTrue(p.canContain(span));\n        assertFalse(p.canContain(div));\n        assertFalse(p.canContain(p));\n    }",
        "begin_line": 38,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 37)",
            "(line 40,col 9)-(line 40,col 33)",
            "(line 41,col 9)-(line 41,col 37)",
            "(line 42,col 9)-(line 42,col 39)",
            "(line 44,col 9)-(line 44,col 38)",
            "(line 45,col 9)-(line 45,col 39)",
            "(line 46,col 9)-(line 46,col 39)",
            "(line 47,col 9)-(line 47,col 37)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.TagTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/TagTest.java",
        "signature": "org.jsoup.parser.TagTest.spanSemantics()",
        "snippet": "    @Test public void spanSemantics() {\n        Tag span = Tag.valueOf(\"span\");\n        Tag p = Tag.valueOf(\"p\");\n        Tag div = Tag.valueOf(\"div\");\n\n        assertTrue(span.canContain(span));\n        assertTrue(span.canContain(p));\n        assertTrue(span.canContain(div));\n    }",
        "begin_line": 50,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 39)",
            "(line 52,col 9)-(line 52,col 33)",
            "(line 53,col 9)-(line 53,col 37)",
            "(line 55,col 9)-(line 55,col 42)",
            "(line 56,col 9)-(line 56,col 39)",
            "(line 57,col 9)-(line 57,col 41)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.TagTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/TagTest.java",
        "signature": "org.jsoup.parser.TagTest.imgSemantics()",
        "snippet": "    @Test public void imgSemantics() {\n        Tag img = Tag.valueOf(\"img\");\n        Tag p = Tag.valueOf(\"p\");\n\n        assertFalse(img.canContain(img));\n        assertFalse(img.canContain(p));\n    }",
        "begin_line": 60,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 37)",
            "(line 62,col 9)-(line 62,col 33)",
            "(line 64,col 9)-(line 64,col 41)",
            "(line 65,col 9)-(line 65,col 39)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.TagTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/TagTest.java",
        "signature": "org.jsoup.parser.TagTest.defaultSemantics()",
        "snippet": "    @Test public void defaultSemantics() {\n        Tag foo = Tag.valueOf(\"foo\"); // not defined\n        Tag foo2 = Tag.valueOf(\"FOO\");\n        Tag div = Tag.valueOf(\"div\");\n\n        assertEquals(foo, foo2);\n        assertTrue(foo.canContain(foo));\n        assertTrue(foo.canContain(div));\n        assertTrue(div.canContain(foo));\n    }",
        "begin_line": 68,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 37)",
            "(line 70,col 9)-(line 70,col 38)",
            "(line 71,col 9)-(line 71,col 37)",
            "(line 73,col 9)-(line 73,col 32)",
            "(line 74,col 9)-(line 74,col 40)",
            "(line 75,col 9)-(line 75,col 40)",
            "(line 76,col 9)-(line 76,col 40)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.TagTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/TagTest.java",
        "signature": "org.jsoup.parser.TagTest.valueOfChecksNotNull()",
        "snippet": "    @Test(expected = IllegalArgumentException.class) public void valueOfChecksNotNull() {\n        Tag.valueOf(null);\n    }",
        "begin_line": 79,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 26)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.TagTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/TagTest.java",
        "signature": "org.jsoup.parser.TagTest.valueOfChecksNotEmpty()",
        "snippet": "    @Test(expected = IllegalArgumentException.class) public void valueOfChecksNotEmpty() {\n        Tag.valueOf(\" \");\n    }",
        "begin_line": 83,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 25)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.parsesSimpleDocument()",
        "snippet": "    @Test public void parsesSimpleDocument() {\n        String html = \"<html><head><title>First!</title></head><body><p>First post! <img src=\\\"foo.png\\\" /></p></body></html>\";\n        Document doc = Jsoup.parse(html);\n        // need a better way to verify these:\n        Element p = doc.body().child(0);\n        assertEquals(\"p\", p.tagName());\n        Element img = p.child(0);\n        assertEquals(\"foo.png\", img.attr(\"src\"));\n        assertEquals(\"img\", img.tagName());\n    }",
        "begin_line": 22,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 127)",
            "(line 24,col 9)-(line 24,col 41)",
            "(line 26,col 9)-(line 26,col 40)",
            "(line 27,col 9)-(line 27,col 39)",
            "(line 28,col 9)-(line 28,col 33)",
            "(line 29,col 9)-(line 29,col 49)",
            "(line 30,col 9)-(line 30,col 43)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.parsesRoughAttributes()",
        "snippet": "    @Test public void parsesRoughAttributes() {\n        String html = \"<html><head><title>First!</title></head><body><p class=\\\"foo > bar\\\">First post! <img src=\\\"foo.png\\\" /></p></body></html>\";\n        Document doc = Jsoup.parse(html);\n\n        // need a better way to verify these:\n        Element p = doc.body().child(0);\n        assertEquals(\"p\", p.tagName());\n        assertEquals(\"foo > bar\", p.attr(\"class\"));\n    }",
        "begin_line": 33,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 147)",
            "(line 35,col 9)-(line 35,col 41)",
            "(line 38,col 9)-(line 38,col 40)",
            "(line 39,col 9)-(line 39,col 39)",
            "(line 40,col 9)-(line 40,col 51)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.parsesQuiteRoughAttributes()",
        "snippet": "    @Test public void parsesQuiteRoughAttributes() {\n        String html = \"<p =a>One<a =a\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(\"<p>One<a></a></p>\", doc.body().html());\n        \n        doc = Jsoup.parse(\"<p .....\");\n        assertEquals(\"<p></p>\", doc.body().html());\n        \n        doc = Jsoup.parse(\"<p .....<p!!\");\n        assertEquals(\"<p></p>\\n<p></p>\", doc.body().html());\n    }",
        "begin_line": 43,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 39)",
            "(line 45,col 9)-(line 45,col 41)",
            "(line 46,col 9)-(line 46,col 61)",
            "(line 48,col 9)-(line 48,col 38)",
            "(line 49,col 9)-(line 49,col 51)",
            "(line 51,col 9)-(line 51,col 42)",
            "(line 52,col 9)-(line 52,col 60)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.parsesComments()",
        "snippet": "    @Test public void parsesComments() {\n        String html = \"<html><head></head><body><img src=foo><!-- <table><tr><td></table> --><p>Hello</p></body></html>\";\n        Document doc = Jsoup.parse(html);\n        \n        Element body = doc.body();\n        Comment comment = (Comment) body.childNode(1); // comment should not be sub of img, as it's an empty tag\n        assertEquals(\" <table><tr><td></table> \", comment.getData());\n        Element p = body.child(1);\n        TextNode text = (TextNode) p.childNode(0);\n        assertEquals(\"Hello\", text.getWholeText());\n    }",
        "begin_line": 55,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 121)",
            "(line 57,col 9)-(line 57,col 41)",
            "(line 59,col 9)-(line 59,col 34)",
            "(line 60,col 9)-(line 60,col 54)",
            "(line 61,col 9)-(line 61,col 69)",
            "(line 62,col 9)-(line 62,col 34)",
            "(line 63,col 9)-(line 63,col 50)",
            "(line 64,col 9)-(line 64,col 51)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.parsesUnterminatedComments()",
        "snippet": "    @Test public void parsesUnterminatedComments() {\n        String html = \"<p>Hello<!-- <tr><td>\";\n        Document doc = Jsoup.parse(html);\n        Element p = doc.getElementsByTag(\"p\").get(0);\n        assertEquals(\"Hello\", p.text());\n        TextNode text = (TextNode) p.childNode(0);\n        assertEquals(\"Hello\", text.getWholeText());\n        Comment comment = (Comment) p.childNode(1);\n        assertEquals(\" <tr><td>\", comment.getData());\n    }",
        "begin_line": 67,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 46)",
            "(line 69,col 9)-(line 69,col 41)",
            "(line 70,col 9)-(line 70,col 53)",
            "(line 71,col 9)-(line 71,col 40)",
            "(line 72,col 9)-(line 72,col 50)",
            "(line 73,col 9)-(line 73,col 51)",
            "(line 74,col 9)-(line 74,col 51)",
            "(line 75,col 9)-(line 75,col 53)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.parsesUnterminatedTag()",
        "snippet": "    @Test public void parsesUnterminatedTag() {\n        String h1 = \"<p\";\n        Document doc = Jsoup.parse(h1);\n        assertEquals(1, doc.getElementsByTag(\"p\").size());\n\n        String h2 = \"<div id=1<p id='2'\";\n        doc = Jsoup.parse(h2);\n        Element d = doc.getElementById(\"1\");\n        assertEquals(1, d.children().size());\n        Element p = doc.getElementById(\"2\");\n        assertNotNull(p);\n    }",
        "begin_line": 78,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 25)",
            "(line 80,col 9)-(line 80,col 39)",
            "(line 81,col 9)-(line 81,col 58)",
            "(line 83,col 9)-(line 83,col 41)",
            "(line 84,col 9)-(line 84,col 30)",
            "(line 85,col 9)-(line 85,col 44)",
            "(line 86,col 9)-(line 86,col 45)",
            "(line 87,col 9)-(line 87,col 44)",
            "(line 88,col 9)-(line 88,col 25)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.parsesUnterminatedAttribute()",
        "snippet": "    @Test public void parsesUnterminatedAttribute() {\n        String h1 = \"<p id=\\\"foo\";\n        Document doc = Jsoup.parse(h1);\n        Element p = doc.getElementById(\"foo\");\n        assertNotNull(p);\n        assertEquals(\"p\", p.tagName());\n    }",
        "begin_line": 91,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 34)",
            "(line 93,col 9)-(line 93,col 39)",
            "(line 94,col 9)-(line 94,col 46)",
            "(line 95,col 9)-(line 95,col 25)",
            "(line 96,col 9)-(line 96,col 39)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.parsesUnterminatedTextarea()",
        "snippet": "    @Test public void parsesUnterminatedTextarea() {\n        Document doc = Jsoup.parse(\"<body><p><textarea>one<p>two\");\n        Element t = doc.select(\"textarea\").first();\n        assertEquals(\"one<p>two\", t.text());\n    }",
        "begin_line": 99,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 100,col 9)-(line 100,col 67)",
            "(line 101,col 9)-(line 101,col 51)",
            "(line 102,col 9)-(line 102,col 44)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.parsesUnterminatedOption()",
        "snippet": "    @Test public void parsesUnterminatedOption() {\n        Document doc = Jsoup.parse(\"<body><p><select><option>One<option>Two</p><p>Three</p>\");\n        Elements options = doc.select(\"option\");\n        assertEquals(2, options.size());\n        assertEquals(\"One\", options.first().text());\n        assertEquals(\"Two\", options.last().text());\n    }",
        "begin_line": 105,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 94)",
            "(line 107,col 9)-(line 107,col 48)",
            "(line 108,col 9)-(line 108,col 40)",
            "(line 109,col 9)-(line 109,col 52)",
            "(line 110,col 9)-(line 110,col 51)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.testSpaceAfterTag()",
        "snippet": "    @Test public void testSpaceAfterTag() {\n        Document doc = Jsoup.parse(\"<div > <a name=\\\"top\\\"></a ><p id=1 >Hello</p></div>\");\n        assertEquals(\"<div> <a name=\\\"top\\\"></a><p id=\\\"1\\\">Hello</p></div>\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 113,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 91)",
            "(line 115,col 9)-(line 115,col 121)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.createsDocumentStructure()",
        "snippet": "    @Test public void createsDocumentStructure() {\n        String html = \"<meta name=keywords /><link rel=stylesheet /><title>jsoup</title><p>Hello world</p>\";\n        Document doc = Jsoup.parse(html);\n        Element head = doc.head();\n        Element body = doc.body();\n\n        assertEquals(1, doc.children().size()); // root node: contains html node\n        assertEquals(2, doc.child(0).children().size()); // html node: head and body\n        assertEquals(3, head.children().size());\n        assertEquals(1, body.children().size());\n\n        assertEquals(\"keywords\", head.getElementsByTag(\"meta\").get(0).attr(\"name\"));\n        assertEquals(0, body.getElementsByTag(\"meta\").size());\n        assertEquals(\"jsoup\", doc.title());\n        assertEquals(\"Hello world\", body.text());\n        assertEquals(\"Hello world\", body.children().get(0).text());\n    }",
        "begin_line": 118,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 108)",
            "(line 120,col 9)-(line 120,col 41)",
            "(line 121,col 9)-(line 121,col 34)",
            "(line 122,col 9)-(line 122,col 34)",
            "(line 124,col 9)-(line 124,col 47)",
            "(line 125,col 9)-(line 125,col 56)",
            "(line 126,col 9)-(line 126,col 48)",
            "(line 127,col 9)-(line 127,col 48)",
            "(line 129,col 9)-(line 129,col 84)",
            "(line 130,col 9)-(line 130,col 62)",
            "(line 131,col 9)-(line 131,col 43)",
            "(line 132,col 9)-(line 132,col 49)",
            "(line 133,col 9)-(line 133,col 67)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.createsStructureFromBodySnippet()",
        "snippet": "    @Test public void createsStructureFromBodySnippet() {\n        // the bar baz stuff naturally goes into the body, but the 'foo' goes into root, and the normalisation routine\n        // needs to move into the start of the body\n        String html = \"foo <b>bar</b> baz\";\n        Document doc = Jsoup.parse(html);\n        assertEquals (\"foo bar baz\", doc.text());\n\n    }",
        "begin_line": 136,
        "end_line": 143,
        "comment": "",
        "child_ranges": [
            "(line 139,col 9)-(line 139,col 43)",
            "(line 140,col 9)-(line 140,col 41)",
            "(line 141,col 9)-(line 141,col 49)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.handlesEscapedData()",
        "snippet": "    @Test public void handlesEscapedData() {\n        String html = \"<div title='Surf &amp; Turf'>Reef &amp; Beef</div>\";\n        Document doc = Jsoup.parse(html);\n        Element div = doc.getElementsByTag(\"div\").get(0);\n\n        assertEquals(\"Surf & Turf\", div.attr(\"title\"));\n        assertEquals(\"Reef & Beef\", div.text());\n    }",
        "begin_line": 145,
        "end_line": 152,
        "comment": "",
        "child_ranges": [
            "(line 146,col 9)-(line 146,col 75)",
            "(line 147,col 9)-(line 147,col 41)",
            "(line 148,col 9)-(line 148,col 57)",
            "(line 150,col 9)-(line 150,col 55)",
            "(line 151,col 9)-(line 151,col 48)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.handlesDataOnlyTags()",
        "snippet": "    @Test public void handlesDataOnlyTags() {\n        String t = \"<style>font-family: bold</style>\";\n        List<Element> tels = Jsoup.parse(t).getElementsByTag(\"style\");\n        assertEquals(\"font-family: bold\", tels.get(0).data());\n        assertEquals(\"\", tels.get(0).text());\n\n        String s = \"<p>Hello</p><script>Nope</script><p>There</p>\";\n        Document doc = Jsoup.parse(s);\n        assertEquals(\"Hello There\", doc.text());\n        assertEquals(\"Nope\", doc.data());\n    }",
        "begin_line": 154,
        "end_line": 164,
        "comment": "",
        "child_ranges": [
            "(line 155,col 9)-(line 155,col 54)",
            "(line 156,col 9)-(line 156,col 70)",
            "(line 157,col 9)-(line 157,col 62)",
            "(line 158,col 9)-(line 158,col 45)",
            "(line 160,col 9)-(line 160,col 67)",
            "(line 161,col 9)-(line 161,col 38)",
            "(line 162,col 9)-(line 162,col 48)",
            "(line 163,col 9)-(line 163,col 41)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.handlesTextAfterData()",
        "snippet": "    @Test public void handlesTextAfterData() {\n        String h = \"<html><body>pre <script>inner</script> aft</body></html>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<html><head></head><body>pre <script>inner</script> aft</body></html>\", TextUtil.stripNewlines(doc.html()));\n    }",
        "begin_line": 166,
        "end_line": 170,
        "comment": "",
        "child_ranges": [
            "(line 167,col 9)-(line 167,col 78)",
            "(line 168,col 9)-(line 168,col 38)",
            "(line 169,col 9)-(line 169,col 130)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.handlesTextArea()",
        "snippet": "    @Test public void handlesTextArea() {\n        Document doc = Jsoup.parse(\"<textarea>Hello</textarea>\");\n        Elements els = doc.select(\"textarea\");\n        assertEquals(\"Hello\", els.text());\n        assertEquals(\"Hello\", els.val());\n    }",
        "begin_line": 172,
        "end_line": 177,
        "comment": "",
        "child_ranges": [
            "(line 173,col 9)-(line 173,col 65)",
            "(line 174,col 9)-(line 174,col 46)",
            "(line 175,col 9)-(line 175,col 42)",
            "(line 176,col 9)-(line 176,col 41)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.createsImplicitLists()",
        "snippet": "    @Test public void createsImplicitLists() {\n        String h = \"<li>Point one<li>Point two\";\n        Document doc = Jsoup.parse(h);\n        Elements ol = doc.select(\"ul\"); // should have created a default ul.\n        assertEquals(1, ol.size());\n        assertEquals(2, ol.get(0).children().size());\n\n        // no fiddling with non-implicit lists\n        String h2 = \"<ol><li><p>Point the first<li><p>Point the second\";\n        Document doc2 = Jsoup.parse(h2);\n\n        assertEquals(0, doc2.select(\"ul\").size());\n        assertEquals(1, doc2.select(\"ol\").size());\n        assertEquals(2, doc2.select(\"ol li\").size());\n        assertEquals(2, doc2.select(\"ol li p\").size());\n        assertEquals(1, doc2.select(\"ol li\").get(0).children().size()); // one p in first li\n    }",
        "begin_line": 179,
        "end_line": 195,
        "comment": "",
        "child_ranges": [
            "(line 180,col 9)-(line 180,col 48)",
            "(line 181,col 9)-(line 181,col 38)",
            "(line 182,col 9)-(line 182,col 39)",
            "(line 183,col 9)-(line 183,col 35)",
            "(line 184,col 9)-(line 184,col 53)",
            "(line 187,col 9)-(line 187,col 72)",
            "(line 188,col 9)-(line 188,col 40)",
            "(line 190,col 9)-(line 190,col 50)",
            "(line 191,col 9)-(line 191,col 50)",
            "(line 192,col 9)-(line 192,col 53)",
            "(line 193,col 9)-(line 193,col 55)",
            "(line 194,col 9)-(line 194,col 71)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.createsImplicitTable()",
        "snippet": "    @Test public void createsImplicitTable() {\n        String h = \"<td>Hello<td><p>There<p>now\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<table><tbody><tr><td>Hello</td><td><p>There</p><p>now</p></td></tr></tbody></table>\", TextUtil.stripNewlines(doc.body().html()));\n        // <tbody> is introduced if no implicitly creating table, but allows tr to be directly under table\n    }",
        "begin_line": 197,
        "end_line": 202,
        "comment": "",
        "child_ranges": [
            "(line 198,col 9)-(line 198,col 49)",
            "(line 199,col 9)-(line 199,col 38)",
            "(line 200,col 9)-(line 200,col 152)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.handlesNestedImplicitTable()",
        "snippet": "     @Test public void handlesNestedImplicitTable() {\n        Document doc = Jsoup.parse(\"<table><td>1</td></tr> <td>2</td></tr> <td> <table><td>3</td> <td>4</td></table> <tr><td>5</table>\");\n        assertEquals(\"<table><tr><td>1</td></tr> <tr><td>2</td></tr> <tr><td> <table><tr><td>3</td> <td>4</td></tr></table> </td></tr><tr><td>5</td></tr></table>\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 204,
        "end_line": 207,
        "comment": "",
        "child_ranges": [
            "(line 205,col 9)-(line 205,col 137)",
            "(line 206,col 9)-(line 206,col 207)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.handlesWhatWgExpensesTableExample()",
        "snippet": "    @Test public void handlesWhatWgExpensesTableExample() {\n        // http://www.whatwg.org/specs/web-apps/current-work/multipage/tabular-data.html#examples-0\n        Document doc = Jsoup.parse(\"<table> <colgroup> <col> <colgroup> <col> <col> <col> <thead> <tr> <th> <th>2008 <th>2007 <th>2006 <tbody> <tr> <th scope=rowgroup> Research and development <td> $ 1,109 <td> $ 782 <td> $ 712 <tr> <th scope=row> Percentage of net sales <td> 3.4% <td> 3.3% <td> 3.7% <tbody> <tr> <th scope=rowgroup> Selling, general, and administrative <td> $ 3,761 <td> $ 2,963 <td> $ 2,433 <tr> <th scope=row> Percentage of net sales <td> 11.6% <td> 12.3% <td> 12.6% </table>\");\n        assertEquals(\"<table> <colgroup> <col /> </colgroup><colgroup> <col /> <col /> <col /> </colgroup><thead> <tr> <th> </th><th>2008 </th><th>2007 </th><th>2006 </th></tr></thead><tbody> <tr> <th scope=\\\"rowgroup\\\">Research and development </th><td>$ 1,109 </td><td>$ 782 </td><td>$ 712 </td></tr><tr> <th scope=\\\"row\\\">Percentage of net sales </th><td>3.4% </td><td>3.3% </td><td>3.7% </td></tr></tbody><tbody> <tr> <th scope=\\\"rowgroup\\\">Selling, general, and administrative </th><td>$ 3,761 </td><td>$ 2,963 </td><td>$ 2,433 </td></tr><tr> <th scope=\\\"row\\\">Percentage of net sales </th><td>11.6% </td><td>12.3% </td><td>12.6% </td></tr></tbody></table>\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 209,
        "end_line": 213,
        "comment": "",
        "child_ranges": [
            "(line 211,col 9)-(line 211,col 499)",
            "(line 212,col 9)-(line 212,col 707)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.handlesTbodyTable()",
        "snippet": "    @Test public void handlesTbodyTable() {\n        Document doc = Jsoup.parse(\"<html><head></head><body><table><tbody><tr><td>aaa</td><td>bbb</td></tr></tbody></table></body></html>\");\n        assertEquals(\"<table><tbody><tr><td>aaa</td><td>bbb</td></tr></tbody></table>\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 215,
        "end_line": 218,
        "comment": "",
        "child_ranges": [
            "(line 216,col 9)-(line 216,col 141)",
            "(line 217,col 9)-(line 217,col 131)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.handlesImplicitCaptionClose()",
        "snippet": "    @Test public void handlesImplicitCaptionClose() {\n        Document doc = Jsoup.parse(\"<table><caption>A caption<td>One<td>Two\");\n        assertEquals(\"<table><caption>A caption</caption><tr><td>One</td><td>Two</td></tr></table>\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 220,
        "end_line": 223,
        "comment": "",
        "child_ranges": [
            "(line 221,col 9)-(line 221,col 78)",
            "(line 222,col 9)-(line 222,col 144)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.noTableDirectInTable()",
        "snippet": "    @Test public void noTableDirectInTable() {\n        Document doc = Jsoup.parse(\"<table> <td>One <td><table><td>Two</table> <table><td>Three\");\n        assertEquals(\"<table> <tr><td>One </td><td><table><tr><td>Two</td></tr></table> <table><tr><td>Three</td></tr></table></td></tr></table>\", \n            TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 225,
        "end_line": 229,
        "comment": "",
        "child_ranges": [
            "(line 226,col 9)-(line 226,col 98)",
            "(line 227,col 9)-(line 228,col 55)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.ignoresDupeEndTrTag()",
        "snippet": "    @Test public void ignoresDupeEndTrTag() {\n        Document doc = Jsoup.parse(\"<table><tr><td>One</td><td><table><tr><td>Two</td></tr></tr></table></td><td>Three</td></tr></table>\"); // two </tr></tr>, must ignore or will close table\n        assertEquals(\"<table><tr><td>One</td><td><table><tr><td>Two</td></tr></table></td><td>Three</td></tr></table>\",\n            TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 231,
        "end_line": 235,
        "comment": "",
        "child_ranges": [
            "(line 232,col 9)-(line 232,col 139)",
            "(line 233,col 9)-(line 234,col 55)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.handlesBaseTags()",
        "snippet": "    @Test public void handlesBaseTags() {\n        String h = \"<a href=1>#</a><base href='/2/'><a href='3'>#</a><base href='http://bar'><a href=4>#</a>\";\n        Document doc = Jsoup.parse(h, \"http://foo/\");\n        assertEquals(\"http://bar\", doc.baseUri()); // gets updated as base changes, so doc.createElement has latest.\n\n        Elements anchors = doc.getElementsByTag(\"a\");\n        assertEquals(3, anchors.size());\n\n        assertEquals(\"http://foo/\", anchors.get(0).baseUri());\n        assertEquals(\"http://foo/2/\", anchors.get(1).baseUri());\n        assertEquals(\"http://bar\", anchors.get(2).baseUri());\n\n        assertEquals(\"http://foo/1\", anchors.get(0).absUrl(\"href\"));\n        assertEquals(\"http://foo/2/3\", anchors.get(1).absUrl(\"href\"));\n        assertEquals(\"http://bar/4\", anchors.get(2).absUrl(\"href\"));\n    }",
        "begin_line": 237,
        "end_line": 252,
        "comment": "",
        "child_ranges": [
            "(line 238,col 9)-(line 238,col 110)",
            "(line 239,col 9)-(line 239,col 53)",
            "(line 240,col 9)-(line 240,col 50)",
            "(line 242,col 9)-(line 242,col 53)",
            "(line 243,col 9)-(line 243,col 40)",
            "(line 245,col 9)-(line 245,col 62)",
            "(line 246,col 9)-(line 246,col 64)",
            "(line 247,col 9)-(line 247,col 61)",
            "(line 249,col 9)-(line 249,col 68)",
            "(line 250,col 9)-(line 250,col 70)",
            "(line 251,col 9)-(line 251,col 68)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.handlesCdata()",
        "snippet": "    @Test public void handlesCdata() {\n        String h = \"<div id=1><![CData[<html>\\n<foo><&amp;]]></div>\"; // \"cdata\" insensitive. the &amp; in there should remain literal\n        Document doc = Jsoup.parse(h);\n        Element div = doc.getElementById(\"1\");\n        assertEquals(\"<html> <foo><&amp;\", div.text());\n        assertEquals(0, div.children().size());\n        assertEquals(1, div.childNodes().size()); // no elements, one text node\n    }",
        "begin_line": 254,
        "end_line": 261,
        "comment": "",
        "child_ranges": [
            "(line 255,col 9)-(line 255,col 69)",
            "(line 256,col 9)-(line 256,col 38)",
            "(line 257,col 9)-(line 257,col 46)",
            "(line 258,col 9)-(line 258,col 55)",
            "(line 259,col 9)-(line 259,col 47)",
            "(line 260,col 9)-(line 260,col 49)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.handlesInvalidStartTags()",
        "snippet": "    @Test public void handlesInvalidStartTags() {\n        String h = \"<div>Hello < There <&amp;></div>\"; // parse to <div {#text=Hello < There <&>}>\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"Hello < There <&>\", doc.select(\"div\").first().text());\n    }",
        "begin_line": 263,
        "end_line": 267,
        "comment": "",
        "child_ranges": [
            "(line 264,col 9)-(line 264,col 54)",
            "(line 265,col 9)-(line 265,col 38)",
            "(line 266,col 9)-(line 266,col 76)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.handlesUnknownTags()",
        "snippet": "    @Test public void handlesUnknownTags() {\n        String h = \"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\";\n        Document doc = Jsoup.parse(h);\n        Elements foos = doc.select(\"foo\");\n        assertEquals(2, foos.size());\n        assertEquals(\"bar\", foos.first().attr(\"title\"));\n        assertEquals(\"qux\", foos.last().attr(\"title\"));\n        assertEquals(\"there\", foos.last().text());\n    }",
        "begin_line": 269,
        "end_line": 277,
        "comment": "",
        "child_ranges": [
            "(line 270,col 9)-(line 270,col 79)",
            "(line 271,col 9)-(line 271,col 38)",
            "(line 272,col 9)-(line 272,col 42)",
            "(line 273,col 9)-(line 273,col 37)",
            "(line 274,col 9)-(line 274,col 56)",
            "(line 275,col 9)-(line 275,col 55)",
            "(line 276,col 9)-(line 276,col 50)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.handlesUnknownInlineTags()",
        "snippet": "    @Test public void handlesUnknownInlineTags() {\n        String h = \"<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>\";\n        Document doc = Jsoup.parseBodyFragment(h);\n        String out = doc.body().html();\n        assertEquals(h, TextUtil.stripNewlines(out));\n    }",
        "begin_line": 279,
        "end_line": 284,
        "comment": "",
        "child_ranges": [
            "(line 280,col 9)-(line 280,col 83)",
            "(line 281,col 9)-(line 281,col 50)",
            "(line 282,col 9)-(line 282,col 39)",
            "(line 283,col 9)-(line 283,col 53)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.handlesUnknownNamespaceTags()",
        "snippet": "    @Test public void handlesUnknownNamespaceTags() {\n        String h = \"<foo:bar id=1/><abc:def id=2>Foo<p>Hello</abc:def><foo:bar>There</foo:bar>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<foo:bar id=\\\"1\\\" /><abc:def id=\\\"2\\\">Foo<p>Hello</p></abc:def><foo:bar>There</foo:bar>\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 286,
        "end_line": 290,
        "comment": "",
        "child_ranges": [
            "(line 287,col 9)-(line 287,col 96)",
            "(line 288,col 9)-(line 288,col 38)",
            "(line 289,col 9)-(line 289,col 155)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.handlesEmptyBlocks()",
        "snippet": "    @Test public void handlesEmptyBlocks() {\n        String h = \"<div id=1/><div id=2><img /></div>\";\n        Document doc = Jsoup.parse(h);\n        Element div1 = doc.getElementById(\"1\");\n        assertTrue(div1.children().isEmpty());\n    }",
        "begin_line": 292,
        "end_line": 297,
        "comment": "",
        "child_ranges": [
            "(line 293,col 9)-(line 293,col 56)",
            "(line 294,col 9)-(line 294,col 38)",
            "(line 295,col 9)-(line 295,col 47)",
            "(line 296,col 9)-(line 296,col 46)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.handlesMultiClosingBody()",
        "snippet": "    @Test public void handlesMultiClosingBody() {\n        String h = \"<body><p>Hello</body><p>there</p></body></body></html><p>now\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(3, doc.select(\"p\").size());\n        assertEquals(3, doc.body().children().size());\n    }",
        "begin_line": 299,
        "end_line": 304,
        "comment": "",
        "child_ranges": [
            "(line 300,col 9)-(line 300,col 82)",
            "(line 301,col 9)-(line 301,col 38)",
            "(line 302,col 9)-(line 302,col 48)",
            "(line 303,col 9)-(line 303,col 54)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.handlesUnclosedDefinitionLists()",
        "snippet": "    @Test public void handlesUnclosedDefinitionLists() {\n        String h = \"<dt>Foo<dd>Bar<dt>Qux<dd>Zug\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(4, doc.body().getElementsByTag(\"dl\").first().children().size());\n        Elements dts = doc.select(\"dt\");\n        assertEquals(2, dts.size());\n        assertEquals(\"Zug\", dts.get(1).nextElementSibling().text());\n    }",
        "begin_line": 306,
        "end_line": 313,
        "comment": "",
        "child_ranges": [
            "(line 307,col 9)-(line 307,col 50)",
            "(line 308,col 9)-(line 308,col 38)",
            "(line 309,col 9)-(line 309,col 85)",
            "(line 310,col 9)-(line 310,col 40)",
            "(line 311,col 9)-(line 311,col 36)",
            "(line 312,col 9)-(line 312,col 68)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.handlesBlocksInDefinitions()",
        "snippet": "    @Test public void handlesBlocksInDefinitions() {\n        // per the spec, dt and dd are inline, but in practise are block\n        String h = \"<dl><dt><div id=1>Term</div></dt><dd><div id=2>Def</div></dd></dl>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"dt\", doc.select(\"#1\").first().parent().tagName());\n        assertEquals(\"dd\", doc.select(\"#2\").first().parent().tagName());\n        assertEquals(\"<dl><dt><div id=\\\"1\\\">Term</div></dt><dd><div id=\\\"2\\\">Def</div></dd></dl>\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 315,
        "end_line": 322,
        "comment": "",
        "child_ranges": [
            "(line 317,col 9)-(line 317,col 88)",
            "(line 318,col 9)-(line 318,col 38)",
            "(line 319,col 9)-(line 319,col 72)",
            "(line 320,col 9)-(line 320,col 72)",
            "(line 321,col 9)-(line 321,col 142)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.handlesFrames()",
        "snippet": "    @Test public void handlesFrames() {\n        String h = \"<html><head><script></script><noscript></noscript></head><frameset><frame src=foo></frame><frame src=foo></frameset></html>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<html><head><script></script><noscript></noscript></head><frameset><frame src=\\\"foo\\\" /><frame src=\\\"foo\\\" /></frameset><body></body></html>\",\n                TextUtil.stripNewlines(doc.html()));\n    }",
        "begin_line": 324,
        "end_line": 329,
        "comment": "",
        "child_ranges": [
            "(line 325,col 9)-(line 325,col 145)",
            "(line 326,col 9)-(line 326,col 38)",
            "(line 327,col 9)-(line 328,col 52)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.handlesJavadocFont()",
        "snippet": "    @Test public void handlesJavadocFont() {\n        String h = \"<TD BGCOLOR=\\\"#EEEEFF\\\" CLASS=\\\"NavBarCell1\\\">    <A HREF=\\\"deprecated-list.html\\\"><FONT CLASS=\\\"NavBarFont1\\\"><B>Deprecated</B></FONT></A>&nbsp;</TD>\";\n        Document doc = Jsoup.parse(h);\n        Element a = doc.select(\"a\").first();\n        assertEquals(\"Deprecated\", a.text());\n        assertEquals(\"font\", a.child(0).tagName());\n        assertEquals(\"b\", a.child(0).child(0).tagName());\n    }",
        "begin_line": 331,
        "end_line": 338,
        "comment": "",
        "child_ranges": [
            "(line 332,col 9)-(line 332,col 172)",
            "(line 333,col 9)-(line 333,col 38)",
            "(line 334,col 9)-(line 334,col 44)",
            "(line 335,col 9)-(line 335,col 45)",
            "(line 336,col 9)-(line 336,col 51)",
            "(line 337,col 9)-(line 337,col 57)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.handlesBaseWithoutHref()",
        "snippet": "    @Test public void handlesBaseWithoutHref() {\n        String h = \"<head><base target='_blank'></head><body><a href=/foo>Test</a></body>\";\n        Document doc = Jsoup.parse(h, \"http://example.com/\");\n        Element a = doc.select(\"a\").first();\n        assertEquals(\"/foo\", a.attr(\"href\"));\n        assertEquals(\"http://example.com/foo\", a.attr(\"abs:href\"));\n    }",
        "begin_line": 340,
        "end_line": 346,
        "comment": "",
        "child_ranges": [
            "(line 341,col 9)-(line 341,col 91)",
            "(line 342,col 9)-(line 342,col 61)",
            "(line 343,col 9)-(line 343,col 44)",
            "(line 344,col 9)-(line 344,col 45)",
            "(line 345,col 9)-(line 345,col 67)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.normalisesDocument()",
        "snippet": "    @Test public void normalisesDocument() {\n        String h = \"<!doctype html>One<html>Two<head>Three<link></head>Four<body>Five </body>Six </html>Seven \";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<!doctype html><html><head><link /></head><body>One Two Four Three Five Six Seven </body></html>\",\n                TextUtil.stripNewlines(doc.html())); // is spaced OK if not newline & space stripped\n    }",
        "begin_line": 348,
        "end_line": 353,
        "comment": "",
        "child_ranges": [
            "(line 349,col 9)-(line 349,col 112)",
            "(line 350,col 9)-(line 350,col 38)",
            "(line 351,col 9)-(line 352,col 52)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.normalisesEmptyDocument()",
        "snippet": "    @Test public void normalisesEmptyDocument() {\n        Document doc = Jsoup.parse(\"\");\n        assertEquals(\"<html><head></head><body></body></html>\",TextUtil.stripNewlines(doc.html()));\n    }",
        "begin_line": 355,
        "end_line": 358,
        "comment": "",
        "child_ranges": [
            "(line 356,col 9)-(line 356,col 39)",
            "(line 357,col 9)-(line 357,col 99)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.normalisesHeadlessBody()",
        "snippet": "    @Test public void normalisesHeadlessBody() {\n        Document doc = Jsoup.parse(\"<html><body><span class=\\\"foo\\\">bar</span>\");\n        assertEquals(\"<html><head></head><body><span class=\\\"foo\\\">bar</span></body></html>\",\n                TextUtil.stripNewlines(doc.html()));\n    }",
        "begin_line": 360,
        "end_line": 364,
        "comment": "",
        "child_ranges": [
            "(line 361,col 9)-(line 361,col 81)",
            "(line 362,col 9)-(line 363,col 52)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.findsCharsetInMalformedMeta()",
        "snippet": "    @Test public void findsCharsetInMalformedMeta() {\n        String h = \"<meta http-equiv=Content-Type content=text/html; charset=gb2312>\";\n        // example cited for reason of html5's <meta charset> element\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"gb2312\", doc.select(\"meta\").attr(\"charset\"));\n    }",
        "begin_line": 366,
        "end_line": 371,
        "comment": "",
        "child_ranges": [
            "(line 367,col 9)-(line 367,col 86)",
            "(line 369,col 9)-(line 369,col 38)",
            "(line 370,col 9)-(line 370,col 67)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.testHgroup()",
        "snippet": "    @Test public void testHgroup() {\n        Document doc = Jsoup.parse(\"<h1>Hello <h2>There <hgroup><h1>Another<h2>headline</hgroup> <hgroup><h1>More</h1><p>stuff</p></hgroup>\");\n        assertEquals(\"<h1>Hello </h1><h2>There </h2><hgroup><h1>Another</h1><h2>headline</h2></hgroup> <hgroup><h1>More</h1></hgroup><p>stuff</p>\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 373,
        "end_line": 376,
        "comment": "",
        "child_ranges": [
            "(line 374,col 9)-(line 374,col 142)",
            "(line 375,col 9)-(line 375,col 191)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.testRelaxedTags()",
        "snippet": "    @Test public void testRelaxedTags() {\n        Document doc = Jsoup.parse(\"<abc_def id=1>Hello</abc_def> <abc-def>There</abc-def>\");\n        assertEquals(\"<abc_def id=\\\"1\\\">Hello</abc_def> <abc-def>There</abc-def>\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 378,
        "end_line": 381,
        "comment": "",
        "child_ranges": [
            "(line 379,col 9)-(line 379,col 93)",
            "(line 380,col 9)-(line 380,col 126)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.testHeaderContents()",
        "snippet": "    @Test public void testHeaderContents() {\n        // h* tags (h1 .. h9) in browsers can handle any internal content other than other h*. which is not per any\n        // spec, which defines them as containing phrasing content only. so, reality over theory.\n        Document doc = Jsoup.parse(\"<h1>Hello <div>There</div> now</h1> <h2>More <h3>Content</h3></h2>\");\n        assertEquals(\"<h1>Hello <div>There</div> now</h1> <h2>More </h2><h3>Content</h3>\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 383,
        "end_line": 388,
        "comment": "",
        "child_ranges": [
            "(line 386,col 9)-(line 386,col 105)",
            "(line 387,col 9)-(line 387,col 134)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserTest.java",
        "signature": "org.jsoup.parser.ParserTest.testSpanContents()",
        "snippet": "    @Test public void testSpanContents() {\n        // like h1 tags, the spec says SPAN is phrasing only, but browsers and publisher treat span as a block tag\n        Document doc = Jsoup.parse(\"<span>Hello <div>there</div> <span>now</span></span>\");\n        assertEquals(\"<span>Hello <div>there</div> <span>now</span></span>\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 390,
        "end_line": 394,
        "comment": "",
        "child_ranges": [
            "(line 392,col 9)-(line 392,col 91)",
            "(line 393,col 9)-(line 393,col 120)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.TokenQueueTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/TokenQueueTest.java",
        "signature": "org.jsoup.parser.TokenQueueTest.chompBalanced()",
        "snippet": "    @Test public void chompBalanced() {\n        TokenQueue tq = new TokenQueue(\":contains(one (two) three) four\");\n        String pre = tq.consumeTo(\"(\");\n        String guts = tq.chompBalanced('(', ')');\n        String remainder = tq.remainder();\n\n        assertEquals(\":contains\", pre);\n        assertEquals(\"one (two) three\", guts);\n        assertEquals(\" four\", remainder);\n    }",
        "begin_line": 10,
        "end_line": 19,
        "comment": "",
        "child_ranges": [
            "(line 11,col 9)-(line 11,col 74)",
            "(line 12,col 9)-(line 12,col 39)",
            "(line 13,col 9)-(line 13,col 49)",
            "(line 14,col 9)-(line 14,col 42)",
            "(line 16,col 9)-(line 16,col 39)",
            "(line 17,col 9)-(line 17,col 46)",
            "(line 18,col 9)-(line 18,col 41)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.TokenQueueTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/TokenQueueTest.java",
        "signature": "org.jsoup.parser.TokenQueueTest.chompEscapedBalanced()",
        "snippet": "    @Test public void chompEscapedBalanced() {\n        TokenQueue tq = new TokenQueue(\":contains(one (two) \\\\( \\\\) \\\\) three) four\");\n        String pre = tq.consumeTo(\"(\");\n        String guts = tq.chompBalanced('(', ')');\n        String remainder = tq.remainder();\n\n        assertEquals(\":contains\", pre);\n        assertEquals(\"one (two) \\\\( \\\\) \\\\) three\", guts);\n        assertEquals(\"one (two) ( ) ) three\", TokenQueue.unescape(guts));\n        assertEquals(\" four\", remainder);\n    }",
        "begin_line": 21,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 22,col 9)-(line 22,col 86)",
            "(line 23,col 9)-(line 23,col 39)",
            "(line 24,col 9)-(line 24,col 49)",
            "(line 25,col 9)-(line 25,col 42)",
            "(line 27,col 9)-(line 27,col 39)",
            "(line 28,col 9)-(line 28,col 58)",
            "(line 29,col 9)-(line 29,col 73)",
            "(line 30,col 9)-(line 30,col 41)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.TokenQueueTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/TokenQueueTest.java",
        "signature": "org.jsoup.parser.TokenQueueTest.chompBalancedMatchesAsMuchAsPossible()",
        "snippet": "    @Test public void chompBalancedMatchesAsMuchAsPossible() {\n        TokenQueue tq = new TokenQueue(\"unbalanced(something(or another\");\n        tq.consumeTo(\"(\");\n        String match = tq.chompBalanced('(', ')');\n        assertEquals(\"something(or another\", match);\n    }",
        "begin_line": 33,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 74)",
            "(line 35,col 9)-(line 35,col 26)",
            "(line 36,col 9)-(line 36,col 50)",
            "(line 37,col 9)-(line 37,col 52)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.TokenQueueTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/TokenQueueTest.java",
        "signature": "org.jsoup.parser.TokenQueueTest.unescape()",
        "snippet": "    @Test public void unescape() {\n        assertEquals(\"one ( ) \\\\\", TokenQueue.unescape(\"one \\\\( \\\\) \\\\\\\\\"));\n    }",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 76)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.TokenQueueTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/TokenQueueTest.java",
        "signature": "org.jsoup.parser.TokenQueueTest.chompToIgnoreCase()",
        "snippet": "    @Test public void chompToIgnoreCase() {\n        String t = \"<textarea>one < two </TEXTarea>\";\n        TokenQueue tq = new TokenQueue(t);\n        String data = tq.chompToIgnoreCase(\"</textarea\");\n        assertEquals(\"<textarea>one < two \", data);\n        \n        tq = new TokenQueue(\"<textarea> one two < three </oops>\");\n        data = tq.chompToIgnoreCase(\"</textarea\");\n        assertEquals(\"<textarea> one two < three </oops>\", data);\n    }",
        "begin_line": 44,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 53)",
            "(line 46,col 9)-(line 46,col 42)",
            "(line 47,col 9)-(line 47,col 57)",
            "(line 48,col 9)-(line 48,col 51)",
            "(line 50,col 9)-(line 50,col 66)",
            "(line 51,col 9)-(line 51,col 50)",
            "(line 52,col 9)-(line 52,col 65)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.TokenQueueTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/TokenQueueTest.java",
        "signature": "org.jsoup.parser.TokenQueueTest.addFirst()",
        "snippet": "    @Test public void addFirst() {\n        TokenQueue tq = new TokenQueue(\"One Two\");\n        tq.consumeWord();\n        tq.addFirst(\"Three\");\n        assertEquals(\"Three Two\", tq.remainder());\n    }",
        "begin_line": 55,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 50)",
            "(line 57,col 9)-(line 57,col 25)",
            "(line 58,col 9)-(line 58,col 29)",
            "(line 59,col 9)-(line 59,col 50)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.ParseTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/ParseTest.java",
        "signature": "org.jsoup.integration.ParseTest.testSmhBizArticle()",
        "snippet": "    @Test\n    public void testSmhBizArticle() throws IOException {\n        File in = getFile(\"/htmltests/smh-biz-article-1.html\");\n        Document doc = Jsoup.parse(in, \"UTF-8\",\n            \"http://www.smh.com.au/business/the-boards-next-fear-the-female-quota-20100106-lteq.html\");\n        assertEquals(\"The board\u2019s next fear: the female quota\",\n            doc.title()); // note that the apos in the source is a literal \u2019 (8217), not escaped or '\n        assertEquals(\"en\", doc.select(\"html\").attr(\"xml:lang\"));\n\n        Elements articleBody = doc.select(\".articleBody > *\");\n        assertEquals(17, articleBody.size());\n        // todo: more tests!\n\n    }",
        "begin_line": 21,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 63)",
            "(line 24,col 9)-(line 25,col 103)",
            "(line 26,col 9)-(line 27,col 25)",
            "(line 28,col 9)-(line 28,col 64)",
            "(line 30,col 9)-(line 30,col 62)",
            "(line 31,col 9)-(line 31,col 45)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.ParseTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/ParseTest.java",
        "signature": "org.jsoup.integration.ParseTest.testNewsHomepage()",
        "snippet": "    @Test\n    public void testNewsHomepage() throws IOException {\n        File in = getFile(\"/htmltests/news-com-au-home.html\");\n        Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.news.com.au/\");\n        assertEquals(\"News.com.au | News from Australia and around the world online | NewsComAu\", doc.title());\n        assertEquals(\"Brace yourself for Metro meltdown\", doc.select(\".id1225817868581 h4\").text().trim());\n\n        Element a = doc.select(\"a[href=/entertainment/horoscopes]\").first();\n        assertEquals(\"/entertainment/horoscopes\", a.attr(\"href\"));\n        assertEquals(\"http://www.news.com.au/entertainment/horoscopes\", a.attr(\"abs:href\"));\n\n        Element hs = doc.select(\"a[href*=naughty-corners-are-a-bad-idea]\").first();\n        assertEquals(\n            \"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\",\n            hs.attr(\"href\"));\n        assertEquals(hs.attr(\"href\"), hs.attr(\"abs:href\"));\n    }",
        "begin_line": 36,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 62)",
            "(line 39,col 9)-(line 39,col 75)",
            "(line 40,col 9)-(line 40,col 111)",
            "(line 41,col 9)-(line 41,col 107)",
            "(line 43,col 9)-(line 43,col 76)",
            "(line 44,col 9)-(line 44,col 66)",
            "(line 45,col 9)-(line 45,col 92)",
            "(line 47,col 9)-(line 47,col 83)",
            "(line 48,col 9)-(line 50,col 29)",
            "(line 51,col 9)-(line 51,col 59)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.ParseTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/ParseTest.java",
        "signature": "org.jsoup.integration.ParseTest.testGoogleSearchIpod()",
        "snippet": "    @Test\n    public void testGoogleSearchIpod() throws IOException {\n        File in = getFile(\"/htmltests/google-ipod.html\");\n        Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\");\n        assertEquals(\"ipod - Google Search\", doc.title());\n        Elements results = doc.select(\"h3.r > a\");\n        assertEquals(12, results.size());\n        assertEquals(\n            \"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\",\n            results.get(0).attr(\"href\"));\n        assertEquals(\"http://www.apple.com/itunes/\",\n            results.get(1).attr(\"href\"));\n    }",
        "begin_line": 54,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 57)",
            "(line 57,col 9)-(line 57,col 110)",
            "(line 58,col 9)-(line 58,col 58)",
            "(line 59,col 9)-(line 59,col 50)",
            "(line 60,col 9)-(line 60,col 41)",
            "(line 61,col 9)-(line 63,col 41)",
            "(line 64,col 9)-(line 65,col 41)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.ParseTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/ParseTest.java",
        "signature": "org.jsoup.integration.ParseTest.testBinary()",
        "snippet": "    @Test\n    public void testBinary() throws IOException {\n        File in = getFile(\"/htmltests/thumb.jpg\");\n        Document doc = Jsoup.parse(in, \"UTF-8\");\n        // nothing useful, but did not blow up\n        assertTrue(doc.text().contains(\"gd-jpeg\"));\n    }",
        "begin_line": 68,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 50)",
            "(line 71,col 9)-(line 71,col 48)",
            "(line 73,col 9)-(line 73,col 51)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.ParseTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/ParseTest.java",
        "signature": "org.jsoup.integration.ParseTest.testYahooJp()",
        "snippet": "    @Test\n    public void testYahooJp() throws IOException {\n        File in = getFile(\"/htmltests/yahoo-jp.html\");\n        Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.yahoo.co.jp/index.html\"); // http charset is utf-8.\n        assertEquals(\"Yahoo! JAPAN\", doc.title());\n        Element a = doc.select(\"a[href=t/2322m2]\").first();\n        assertEquals(\"http://www.yahoo.co.jp/_ylh=X3oDMTB0NWxnaGxsBF9TAzIwNzcyOTYyNjUEdGlkAzEyBHRtcGwDZ2Ex/t/2322m2\",\n            a.attr(\"abs:href\")); // session put into <base>\n        assertEquals(\"\u5168\u56fd\u3001\u4eba\u6c17\u306e\u99c5\u30e9\u30f3\u30ad\u30f3\u30b0\", a.text());\n    }",
        "begin_line": 76,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 54)",
            "(line 79,col 9)-(line 79,col 85)",
            "(line 80,col 9)-(line 80,col 50)",
            "(line 81,col 9)-(line 81,col 59)",
            "(line 82,col 9)-(line 83,col 32)",
            "(line 84,col 9)-(line 84,col 47)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.ParseTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/ParseTest.java",
        "signature": "org.jsoup.integration.ParseTest.testBaidu()",
        "snippet": "    @Test\n    public void testBaidu() throws IOException {\n        // tests <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\">\n        File in = getFile(\"/htmltests/baidu-cn-home.html\");\n        Document doc = Jsoup.parse(in, null,\n            \"http://www.baidu.com/\"); // http charset is gb2312, but NOT specifying it, to test http-equiv parse\n        Element submit = doc.select(\"#su\").first();\n        assertEquals(\"\u767e\u5ea6\u4e00\u4e0b\", submit.attr(\"value\"));\n\n        // test from attribute match\n        submit = doc.select(\"input[value=\u767e\u5ea6\u4e00\u4e0b]\").first();\n        assertEquals(\"su\", submit.id());\n        Element newsLink = doc.select(\"a:contains(\u65b0)\").first();\n        assertEquals(\"http://news.baidu.com\", newsLink.absUrl(\"href\"));\n\n        // check auto-detect from meta\n        assertEquals(\"GB2312\", doc.outputSettings().charset().displayName());\n        assertEquals(\"\\n<title>\u767e\u5ea6\u4e00\u4e0b\uff0c\u4f60\u5c31\u77e5\u9053      </title>\", doc.select(\"title\").outerHtml());\n\n        doc.outputSettings().charset(\"ascii\");\n        assertEquals(\"\\n<title>&#30334;&#24230;&#19968;&#19979;&#65292;&#20320;&#23601;&#30693;&#36947;      </title>\",\n            doc.select(\"title\").outerHtml());\n    }",
        "begin_line": 87,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 59)",
            "(line 91,col 9)-(line 92,col 37)",
            "(line 93,col 9)-(line 93,col 51)",
            "(line 94,col 9)-(line 94,col 51)",
            "(line 97,col 9)-(line 97,col 57)",
            "(line 98,col 9)-(line 98,col 40)",
            "(line 99,col 9)-(line 99,col 63)",
            "(line 100,col 9)-(line 100,col 71)",
            "(line 103,col 9)-(line 103,col 77)",
            "(line 104,col 9)-(line 104,col 90)",
            "(line 106,col 9)-(line 106,col 46)",
            "(line 107,col 9)-(line 108,col 45)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.ParseTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/ParseTest.java",
        "signature": "org.jsoup.integration.ParseTest.testHtml5Charset()",
        "snippet": "    @Test\n    public void testHtml5Charset() throws IOException {\n        // test that <meta charset=\"gb2312\"> works\n        File in = getFile(\"/htmltests/meta-charset-1.html\");\n        Document doc = Jsoup.parse(in, null, \"http://example.com/\"); //gb2312, has html5 <meta charset>\n        assertEquals(\"\u65b0\", doc.text());\n        assertEquals(\"GB2312\", doc.outputSettings().charset().displayName());\n\n        // double check, no charset, falls back to utf8 which is incorrect\n        in = getFile(\"/htmltests/meta-charset-2.html\"); //\n        doc = Jsoup.parse(in, null, \"http://example.com\"); // gb2312, no charset\n        assertEquals(\"UTF-8\", doc.outputSettings().charset().displayName());\n        assertFalse(\"\u65b0\".equals(doc.text()));\n\n        // confirm fallback to utf8\n        in = getFile(\"/htmltests/meta-charset-3.html\");\n        doc = Jsoup.parse(in, null, \"http://example.com/\"); // utf8, no charset\n        assertEquals(\"UTF-8\", doc.outputSettings().charset().displayName());\n        assertEquals(\"\u65b0\", doc.text());\n    }",
        "begin_line": 111,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 60)",
            "(line 115,col 9)-(line 115,col 68)",
            "(line 116,col 9)-(line 116,col 38)",
            "(line 117,col 9)-(line 117,col 77)",
            "(line 120,col 9)-(line 120,col 55)",
            "(line 121,col 9)-(line 121,col 58)",
            "(line 122,col 9)-(line 122,col 76)",
            "(line 123,col 9)-(line 123,col 44)",
            "(line 126,col 9)-(line 126,col 55)",
            "(line 127,col 9)-(line 127,col 59)",
            "(line 128,col 9)-(line 128,col 76)",
            "(line 129,col 9)-(line 129,col 38)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.ParseTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/ParseTest.java",
        "signature": "org.jsoup.integration.ParseTest.testNytArticle()",
        "snippet": "    @Test\n    public void testNytArticle() throws IOException {\n        // has tags like <nyt_text>\n        File in = getFile(\"/htmltests/nyt-article-1.html\");\n        Document doc = Jsoup.parse(in, null, \"http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp\");\n\n        Element headline = doc.select(\"nyt_headline[version=1.0]\").first();\n        assertEquals(\"As BP Lays Out Future, It Will Not Include Hayward\", headline.text());\n    }",
        "begin_line": 132,
        "end_line": 140,
        "comment": "",
        "child_ranges": [
            "(line 135,col 9)-(line 135,col 59)",
            "(line 136,col 9)-(line 136,col 111)",
            "(line 138,col 9)-(line 138,col 75)",
            "(line 139,col 9)-(line 139,col 92)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.ParseTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/ParseTest.java",
        "signature": "org.jsoup.integration.ParseTest.testYahooArticle()",
        "snippet": "    @Test\n    public void testYahooArticle() throws IOException {\n        File in = getFile(\"/htmltests/yahoo-article-1.html\");\n        Document doc = Jsoup.parse(in, \"UTF-8\", \"http://news.yahoo.com/s/nm/20100831/bs_nm/us_gm_china\");\n        Element p = doc.select(\"p:contains(Volt will be sold in the United States\").first();\n        assertEquals(\"In July, GM said its electric Chevrolet Volt will be sold in the United States at $41,000 -- $8,000 more than its nearest competitor, the Nissan Leaf.\", p.text());\n    }",
        "begin_line": 142,
        "end_line": 148,
        "comment": "",
        "child_ranges": [
            "(line 144,col 9)-(line 144,col 61)",
            "(line 145,col 9)-(line 145,col 105)",
            "(line 146,col 9)-(line 146,col 92)",
            "(line 147,col 9)-(line 147,col 185)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.ParseTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/ParseTest.java",
        "signature": "org.jsoup.integration.ParseTest.getFile(java.lang.String)",
        "snippet": "    File getFile(String resourceName) {\n        try {\n            File file = new File(ParseTest.class.getResource(resourceName).toURI());\n            return file;\n        }\n        catch (URISyntaxException e) {\n            throw new IllegalStateException(e);\n        }\n    }",
        "begin_line": 150,
        "end_line": 158,
        "comment": "",
        "child_ranges": [
            "(line 151,col 9)-(line 157,col 9)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.fetchURl()",
        "snippet": "    @Test\n    public void fetchURl() throws IOException {\n        String url = \"http://www.google.com\"; // no trailing / to force redir\n        Document doc = Jsoup.parse(new URL(url), 10*1000);\n        assertTrue(doc.title().contains(\"Google\"));\n    }",
        "begin_line": 21,
        "end_line": 26,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 45)",
            "(line 24,col 9)-(line 24,col 58)",
            "(line 25,col 9)-(line 25,col 51)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.fetchBaidu()",
        "snippet": "    @Test\n    public void fetchBaidu() throws IOException {\n        Connection.Response res = Jsoup.connect(\"http://www.baidu.com/\").timeout(10*1000).execute();\n        Document doc = res.parse();\n\n        assertEquals(\"GB2312\", doc.outputSettings().charset().displayName());\n        assertEquals(\"GB2312\", res.charset());\n        assert(res.hasCookie(\"BAIDUID\"));\n        assertEquals(\"text/html;charset=gb2312\", res.contentType());\n    }",
        "begin_line": 28,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 100)",
            "(line 31,col 9)-(line 31,col 35)",
            "(line 33,col 9)-(line 33,col 77)",
            "(line 34,col 9)-(line 34,col 46)",
            "(line 35,col 9)-(line 35,col 41)",
            "(line 36,col 9)-(line 36,col 68)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.exceptOnUnknownContentType()",
        "snippet": "    @Test\n    public void exceptOnUnknownContentType() {\n        String url = \"http://jsoup.org/rez/osi_logo.png\"; // not text/* but image/png, should throw\n        boolean threw = false;\n        try {\n            Document doc = Jsoup.parse(new URL(url), 3000);\n        } catch (IOException e) {\n            threw = true;\n        }\n        assertTrue(threw);\n    }",
        "begin_line": 39,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 57)",
            "(line 42,col 9)-(line 42,col 30)",
            "(line 43,col 9)-(line 47,col 9)",
            "(line 48,col 9)-(line 48,col 26)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.doesPost()",
        "snippet": "    @Test\n    public void doesPost() throws IOException {\n        Document doc = Jsoup.connect(echoURL)\n            .data(\"uname\", \"Jsoup\", \"uname\", \"Jonathan\", \"\u767e\", \"\u5ea6\u4e00\u4e0b\")\n            .cookie(\"auth\", \"token\")\n            .post();\n\n        assertEquals(\"POST\", ihVal(\"REQUEST_METHOD\", doc));\n        assertEquals(\"gzip\", ihVal(\"HTTP_ACCEPT_ENCODING\", doc));\n        assertEquals(\"auth=token\", ihVal(\"HTTP_COOKIE\", doc));\n        assertEquals(\"\u5ea6\u4e00\u4e0b\", ihVal(\"\u767e\", doc));\n        assertEquals(\"Jsoup, Jonathan\", ihVal(\"uname\", doc));\n    }",
        "begin_line": 51,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 56,col 20)",
            "(line 58,col 9)-(line 58,col 59)",
            "(line 59,col 9)-(line 59,col 65)",
            "(line 60,col 9)-(line 60,col 62)",
            "(line 61,col 9)-(line 61,col 45)",
            "(line 62,col 9)-(line 62,col 61)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.doesGet()",
        "snippet": "    @Test\n    public void doesGet() throws IOException {\n        Connection con = Jsoup.connect(echoURL + \"?what=the\")\n            .userAgent(\"Mozilla\")\n            .referrer(\"http://example.com\")\n            .data(\"what\", \"about & me?\");\n\n        Document doc = con.get();\n        assertEquals(\"what=the&what=about+%26+me%3F\", ihVal(\"QUERY_STRING\", doc));\n        assertEquals(\"the, about & me?\", ihVal(\"what\", doc));\n        assertEquals(\"Mozilla\", ihVal(\"HTTP_USER_AGENT\", doc));\n        assertEquals(\"http://example.com\", ihVal(\"HTTP_REFERER\", doc));\n    }",
        "begin_line": 65,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 70,col 41)",
            "(line 72,col 9)-(line 72,col 33)",
            "(line 73,col 9)-(line 73,col 82)",
            "(line 74,col 9)-(line 74,col 61)",
            "(line 75,col 9)-(line 75,col 63)",
            "(line 76,col 9)-(line 76,col 71)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.ihVal(java.lang.String, org.jsoup.nodes.Document)",
        "snippet": "    private static String ihVal(String key, Document doc) {\n        return doc.select(\"th:contains(\"+key+\") + td\").first().text();\n    }",
        "begin_line": 79,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 70)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.followsTempRedirect()",
        "snippet": "    @Test\n    public void followsTempRedirect() throws IOException {\n        Connection con = Jsoup.connect(\"http://infohound.net/tools/302.pl\"); // http://jsoup.org\n        Document doc = con.get();\n        assertTrue(doc.title().contains(\"jsoup\"));\n    }",
        "begin_line": 83,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 76)",
            "(line 86,col 9)-(line 86,col 33)",
            "(line 87,col 9)-(line 87,col 50)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.followsRedirectToHttps()",
        "snippet": "    @Test\n    public void followsRedirectToHttps() throws IOException {\n        Connection con = Jsoup.connect(\"http://infohound.net/tools/302-secure.pl\"); // https://www.google.com\n        con.data(\"id\", \"5\");\n        Document doc = con.get();\n        assertTrue(doc.title().contains(\"Google\"));\n    }",
        "begin_line": 90,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 83)",
            "(line 93,col 9)-(line 93,col 28)",
            "(line 94,col 9)-(line 94,col 33)",
            "(line 95,col 9)-(line 95,col 51)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.Benchmark",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/Benchmark.java",
        "signature": "org.jsoup.integration.Benchmark.run(java.lang.Runnable, java.lang.Runnable, int)",
        "snippet": "    public static void run(Runnable a, Runnable b, int count) {\n        long aMillis;\n        long bMillis;\n\n        print(\"Running test A (x%d)\", count);\n        aMillis = time(a, count);\n        print(\"Running test B\");\n        bMillis = time(b, count);\n\n        print(\"\\nResults:\");\n        print(\"A: %.2fs\", aMillis / 1000f);\n        print(\"B: %.2fs\", bMillis / 1000f);\n        print(\"\\nB ran in %.2f %% time of A\\n\", (bMillis *1f / aMillis * 1f) * 100f);\n    }",
        "begin_line": 10,
        "end_line": 23,
        "comment": "",
        "child_ranges": [
            "(line 11,col 9)-(line 11,col 21)",
            "(line 12,col 9)-(line 12,col 21)",
            "(line 14,col 9)-(line 14,col 45)",
            "(line 15,col 9)-(line 15,col 33)",
            "(line 16,col 9)-(line 16,col 32)",
            "(line 17,col 9)-(line 17,col 33)",
            "(line 19,col 9)-(line 19,col 28)",
            "(line 20,col 9)-(line 20,col 43)",
            "(line 21,col 9)-(line 21,col 43)",
            "(line 22,col 9)-(line 22,col 85)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.Benchmark",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/Benchmark.java",
        "signature": "org.jsoup.integration.Benchmark.time(java.lang.Runnable, int)",
        "snippet": "    private static long time(Runnable test, int count) {\n        Date start = new Date();\n        for (int i = 0; i < count; i++) {\n            test.run();\n        }\n        Date end = new Date();\n        return end.getTime() - start.getTime();\n    }",
        "begin_line": 25,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 32)",
            "(line 27,col 9)-(line 29,col 9)",
            "(line 30,col 9)-(line 30,col 30)",
            "(line 31,col 9)-(line 31,col 47)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.Benchmark",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/Benchmark.java",
        "signature": "org.jsoup.integration.Benchmark.print(java.lang.String, java.lang.Object...)",
        "snippet": "    private static void print(String msgFormat, Object... msgParams) {\n        System.out.println(String.format(msgFormat, msgParams));\n    }",
        "begin_line": 34,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 64)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.HttpConnectionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/HttpConnectionTest.java",
        "signature": "org.jsoup.helper.HttpConnectionTest.throwsExceptionOnParseWithoutExecute()",
        "snippet": "    @Test(expected=IllegalArgumentException.class) public void throwsExceptionOnParseWithoutExecute() throws IOException {\n        Connection con = HttpConnection.connect(\"http://example.com\");\n        con.response().parse();\n    }",
        "begin_line": 16,
        "end_line": 19,
        "comment": "",
        "child_ranges": [
            "(line 17,col 9)-(line 17,col 70)",
            "(line 18,col 9)-(line 18,col 31)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.HttpConnectionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/HttpConnectionTest.java",
        "signature": "org.jsoup.helper.HttpConnectionTest.throwsExceptionOnBodyWithoutExecute()",
        "snippet": "    @Test(expected=IllegalArgumentException.class) public void throwsExceptionOnBodyWithoutExecute() throws IOException {\n        Connection con = HttpConnection.connect(\"http://example.com\");\n        con.response().body();\n    }",
        "begin_line": 21,
        "end_line": 24,
        "comment": "",
        "child_ranges": [
            "(line 22,col 9)-(line 22,col 70)",
            "(line 23,col 9)-(line 23,col 30)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.HttpConnectionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/HttpConnectionTest.java",
        "signature": "org.jsoup.helper.HttpConnectionTest.throwsExceptionOnBodyAsBytesWithoutExecute()",
        "snippet": "    @Test(expected=IllegalArgumentException.class) public void throwsExceptionOnBodyAsBytesWithoutExecute() throws IOException {\n        Connection con = HttpConnection.connect(\"http://example.com\");\n        con.response().bodyAsBytes();\n    }",
        "begin_line": 26,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 27,col 9)-(line 27,col 70)",
            "(line 28,col 9)-(line 28,col 37)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.HttpConnectionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/HttpConnectionTest.java",
        "signature": "org.jsoup.helper.HttpConnectionTest.caseInsensitiveHeaders()",
        "snippet": "    @Test public void caseInsensitiveHeaders() {\n        Connection.Response res = new HttpConnection.Response();\n        Map<String, String> headers = res.headers();\n        headers.put(\"Accept-Encoding\", \"gzip\");\n        headers.put(\"content-type\", \"text/html\");\n        headers.put(\"refErrer\", \"http://example.com\");\n\n        assertTrue(res.hasHeader(\"Accept-Encoding\"));\n        assertTrue(res.hasHeader(\"accept-encoding\"));\n        assertTrue(res.hasHeader(\"accept-Encoding\"));\n\n        assertEquals(\"gzip\", res.header(\"accept-Encoding\"));\n        assertEquals(\"text/html\", res.header(\"Content-Type\"));\n        assertEquals(\"http://example.com\", res.header(\"Referrer\"));\n\n        res.removeHeader(\"Content-Type\");\n        assertFalse(res.hasHeader(\"content-type\"));\n\n        res.header(\"accept-encoding\", \"deflate\");\n        assertEquals(\"deflate\", res.header(\"Accept-Encoding\"));\n        assertEquals(\"deflate\", res.header(\"accept-Encoding\"));\n    }",
        "begin_line": 31,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 64)",
            "(line 33,col 9)-(line 33,col 52)",
            "(line 34,col 9)-(line 34,col 47)",
            "(line 35,col 9)-(line 35,col 49)",
            "(line 36,col 9)-(line 36,col 54)",
            "(line 38,col 9)-(line 38,col 53)",
            "(line 39,col 9)-(line 39,col 53)",
            "(line 40,col 9)-(line 40,col 53)",
            "(line 42,col 9)-(line 42,col 60)",
            "(line 43,col 9)-(line 43,col 62)",
            "(line 44,col 9)-(line 44,col 67)",
            "(line 46,col 9)-(line 46,col 41)",
            "(line 47,col 9)-(line 47,col 51)",
            "(line 49,col 9)-(line 49,col 49)",
            "(line 50,col 9)-(line 50,col 63)",
            "(line 51,col 9)-(line 51,col 63)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.HttpConnectionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/HttpConnectionTest.java",
        "signature": "org.jsoup.helper.HttpConnectionTest.connectWithUrl()",
        "snippet": "    @Test public void connectWithUrl() throws MalformedURLException {\n        Connection con = HttpConnection.connect(new URL(\"http://example.com\"));\n        assertEquals(\"http://example.com\", con.request().url().toExternalForm());\n    }",
        "begin_line": 54,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 79)",
            "(line 56,col 9)-(line 56,col 81)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.HttpConnectionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/HttpConnectionTest.java",
        "signature": "org.jsoup.helper.HttpConnectionTest.throwsOnMalformedUrl()",
        "snippet": "    @Test(expected=IllegalArgumentException.class) public void throwsOnMalformedUrl() {\n        Connection con = HttpConnection.connect(\"bzzt\");\n    }",
        "begin_line": 59,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 56)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.HttpConnectionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/HttpConnectionTest.java",
        "signature": "org.jsoup.helper.HttpConnectionTest.userAgent()",
        "snippet": "    @Test public void userAgent() {\n        Connection con = HttpConnection.connect(\"http://example.com/\");\n        con.userAgent(\"Mozilla\");\n        assertEquals(\"Mozilla\", con.request().header(\"User-Agent\"));\n    }",
        "begin_line": 63,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 71)",
            "(line 65,col 9)-(line 65,col 33)",
            "(line 66,col 9)-(line 66,col 68)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.HttpConnectionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/HttpConnectionTest.java",
        "signature": "org.jsoup.helper.HttpConnectionTest.timeout()",
        "snippet": "    @Test public void timeout() {\n        Connection con = HttpConnection.connect(\"http://example.com/\");\n        con.timeout(1000);\n        assertEquals(1000, con.request().timeout());\n    }",
        "begin_line": 69,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 71)",
            "(line 71,col 9)-(line 71,col 26)",
            "(line 72,col 9)-(line 72,col 52)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.HttpConnectionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/HttpConnectionTest.java",
        "signature": "org.jsoup.helper.HttpConnectionTest.referrer()",
        "snippet": "    @Test public void referrer() {\n        Connection con = HttpConnection.connect(\"http://example.com/\");\n        con.referrer(\"http://foo.com\");\n        assertEquals(\"http://foo.com\", con.request().header(\"Referer\"));\n    }",
        "begin_line": 75,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 71)",
            "(line 77,col 9)-(line 77,col 39)",
            "(line 78,col 9)-(line 78,col 72)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.HttpConnectionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/HttpConnectionTest.java",
        "signature": "org.jsoup.helper.HttpConnectionTest.method()",
        "snippet": "    @Test public void method() {\n        Connection con = HttpConnection.connect(\"http://example.com/\");\n        assertEquals(Connection.Method.GET, con.request().method());\n        con.method(Connection.Method.POST);\n        assertEquals(Connection.Method.POST, con.request().method());\n    }",
        "begin_line": 81,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 71)",
            "(line 83,col 9)-(line 83,col 68)",
            "(line 84,col 9)-(line 84,col 43)",
            "(line 85,col 9)-(line 85,col 69)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.HttpConnectionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/HttpConnectionTest.java",
        "signature": "org.jsoup.helper.HttpConnectionTest.throwsOnOdddData()",
        "snippet": "    @Test(expected=IllegalArgumentException.class) public void throwsOnOdddData() {\n        Connection con = HttpConnection.connect(\"http://example.com/\");\n        con.data(\"Name\", \"val\", \"what\");\n    }",
        "begin_line": 88,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 71)",
            "(line 90,col 9)-(line 90,col 40)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.HttpConnectionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/HttpConnectionTest.java",
        "signature": "org.jsoup.helper.HttpConnectionTest.data()",
        "snippet": "    @Test public void data() {\n        Connection con = HttpConnection.connect(\"http://example.com/\");\n        con.data(\"Name\", \"Val\", \"Foo\", \"bar\");\n        Collection<Connection.KeyVal> values = con.request().data();\n        Object[] data =  values.toArray();\n        Connection.KeyVal one = (Connection.KeyVal) data[0];\n        Connection.KeyVal two = (Connection.KeyVal) data[1];\n        assertEquals(\"Name\", one.key());\n        assertEquals(\"Val\", one.value());\n        assertEquals(\"Foo\", two.key());\n        assertEquals(\"bar\", two.value());\n    }",
        "begin_line": 93,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 71)",
            "(line 95,col 9)-(line 95,col 46)",
            "(line 96,col 9)-(line 96,col 68)",
            "(line 97,col 9)-(line 97,col 42)",
            "(line 98,col 9)-(line 98,col 60)",
            "(line 99,col 9)-(line 99,col 60)",
            "(line 100,col 9)-(line 100,col 40)",
            "(line 101,col 9)-(line 101,col 41)",
            "(line 102,col 9)-(line 102,col 39)",
            "(line 103,col 9)-(line 103,col 41)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.HttpConnectionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/HttpConnectionTest.java",
        "signature": "org.jsoup.helper.HttpConnectionTest.cookie()",
        "snippet": "    @Test public void cookie() {\n        Connection con = HttpConnection.connect(\"http://example.com/\");\n        con.cookie(\"Name\", \"Val\");\n        assertEquals(\"Val\", con.request().cookie(\"Name\"));\n    }",
        "begin_line": 106,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 71)",
            "(line 108,col 9)-(line 108,col 34)",
            "(line 109,col 9)-(line 109,col 58)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.DataUtilTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/DataUtilTest.java",
        "signature": "org.jsoup.helper.DataUtilTest.testCharset()",
        "snippet": "    @Test\n    public void testCharset() {\n        assertEquals(\"UTF-8\", DataUtil.getCharsetFromContentType(\"text/html;charset=utf-8 \"));\n        assertEquals(\"UTF-8\", DataUtil.getCharsetFromContentType(\"text/html; charset=UTF-8\"));\n        assertEquals(\"ISO-8859-1\", DataUtil.getCharsetFromContentType(\"text/html; charset=ISO-8859-1\"));\n        assertEquals(null, DataUtil.getCharsetFromContentType(\"text/html\"));\n        assertEquals(null, DataUtil.getCharsetFromContentType(null));\n    }",
        "begin_line": 7,
        "end_line": 14,
        "comment": "",
        "child_ranges": [
            "(line 9,col 9)-(line 9,col 94)",
            "(line 10,col 9)-(line 10,col 94)",
            "(line 11,col 9)-(line 11,col 104)",
            "(line 12,col 9)-(line 12,col 76)",
            "(line 13,col 9)-(line 13,col 69)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.DataUtilTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/DataUtilTest.java",
        "signature": "org.jsoup.helper.DataUtilTest.testQuotedCharset()",
        "snippet": "    @Test public void testQuotedCharset() {\n        assertEquals(\"UTF-8\", DataUtil.getCharsetFromContentType(\"text/html; charset=\\\"utf-8\\\"\"));\n        assertEquals(\"UTF-8\", DataUtil.getCharsetFromContentType(\"text/html;charset=\\\"utf-8\\\"\"));\n        assertEquals(\"ISO-8859-1\", DataUtil.getCharsetFromContentType(\"text/html; charset=\\\"ISO-8859-1\\\"\"));\n    }",
        "begin_line": 16,
        "end_line": 20,
        "comment": "",
        "child_ranges": [
            "(line 17,col 9)-(line 17,col 98)",
            "(line 18,col 9)-(line 18,col 97)",
            "(line 19,col 9)-(line 19,col 108)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.StringUtilTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/StringUtilTest.java",
        "signature": "org.jsoup.helper.StringUtilTest.join()",
        "snippet": "    @Test public void join() {\n        assertEquals(\"\", StringUtil.join(Arrays.<String>asList(\"\"), \" \"));\n        assertEquals(\"one\", StringUtil.join(Arrays.<String>asList(\"one\"), \" \"));\n        assertEquals(\"one two three\", StringUtil.join(Arrays.<String>asList(\"one\", \"two\", \"three\"), \" \"));\n    }",
        "begin_line": 11,
        "end_line": 15,
        "comment": "",
        "child_ranges": [
            "(line 12,col 9)-(line 12,col 74)",
            "(line 13,col 9)-(line 13,col 80)",
            "(line 14,col 9)-(line 14,col 106)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.StringUtilTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/StringUtilTest.java",
        "signature": "org.jsoup.helper.StringUtilTest.padding()",
        "snippet": "    @Test public void padding() {\n        assertEquals(\"\", StringUtil.padding(0));\n        assertEquals(\" \", StringUtil.padding(1));\n        assertEquals(\"  \", StringUtil.padding(2));\n        assertEquals(\"               \", StringUtil.padding(15));\n    }",
        "begin_line": 17,
        "end_line": 22,
        "comment": "",
        "child_ranges": [
            "(line 18,col 9)-(line 18,col 48)",
            "(line 19,col 9)-(line 19,col 49)",
            "(line 20,col 9)-(line 20,col 50)",
            "(line 21,col 9)-(line 21,col 64)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.StringUtilTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/StringUtilTest.java",
        "signature": "org.jsoup.helper.StringUtilTest.isBlank()",
        "snippet": "    @Test public void isBlank() {\n        assertTrue(StringUtil.isBlank(null));\n        assertTrue(StringUtil.isBlank(\"\"));\n        assertTrue(StringUtil.isBlank(\"      \"));\n        assertTrue(StringUtil.isBlank(\"   \\r\\n  \"));\n\n        assertFalse(StringUtil.isBlank(\"hello\"));\n        assertFalse(StringUtil.isBlank(\"   hello   \"));\n    }",
        "begin_line": 24,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 25,col 9)-(line 25,col 45)",
            "(line 26,col 9)-(line 26,col 43)",
            "(line 27,col 9)-(line 27,col 49)",
            "(line 28,col 9)-(line 28,col 52)",
            "(line 30,col 9)-(line 30,col 49)",
            "(line 31,col 9)-(line 31,col 55)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.StringUtilTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/StringUtilTest.java",
        "signature": "org.jsoup.helper.StringUtilTest.isNumeric()",
        "snippet": "    @Test public void isNumeric() {\n        assertFalse(StringUtil.isNumeric(null));\n        assertFalse(StringUtil.isNumeric(\" \"));\n        assertFalse(StringUtil.isNumeric(\"123 546\"));\n        assertFalse(StringUtil.isNumeric(\"hello\"));\n        assertFalse(StringUtil.isNumeric(\"123.334\"));\n\n        assertTrue(StringUtil.isNumeric(\"1\"));\n        assertTrue(StringUtil.isNumeric(\"1234\"));\n    }",
        "begin_line": 34,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 48)",
            "(line 36,col 9)-(line 36,col 47)",
            "(line 37,col 9)-(line 37,col 53)",
            "(line 38,col 9)-(line 38,col 51)",
            "(line 39,col 9)-(line 39,col 53)",
            "(line 41,col 9)-(line 41,col 46)",
            "(line 42,col 9)-(line 42,col 49)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.StringUtilTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/StringUtilTest.java",
        "signature": "org.jsoup.helper.StringUtilTest.normaliseWhiteSpace()",
        "snippet": "    @Test public void normaliseWhiteSpace() {\n        assertEquals(\" \", StringUtil.normaliseWhitespace(\"    \\r \\n \\r\\n\"));\n        assertEquals(\" hello there \", StringUtil.normaliseWhitespace(\"   hello   \\r \\n  there    \\n\"));\n        assertEquals(\"hello\", StringUtil.normaliseWhitespace(\"hello\"));\n        assertEquals(\"hello there\", StringUtil.normaliseWhitespace(\"hello\\nthere\"));\n    }",
        "begin_line": 45,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 76)",
            "(line 47,col 9)-(line 47,col 103)",
            "(line 48,col 9)-(line 48,col 71)",
            "(line 49,col 9)-(line 49,col 84)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.StringUtilTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/StringUtilTest.java",
        "signature": "org.jsoup.helper.StringUtilTest.normaliseWhiteSpaceModified()",
        "snippet": "    @Test public void normaliseWhiteSpaceModified() {\n        String check1 = \"Hello there\";\n        String check2 = \"Hello\\nthere\";\n        String check3 = \"Hello  there\";\n\n        // does not create new string no mods done\n        assertTrue(check1 == StringUtil.normaliseWhitespace(check1));\n        assertTrue(check2 != StringUtil.normaliseWhitespace(check2));\n        assertTrue(check3 != StringUtil.normaliseWhitespace(check3));\n    }",
        "begin_line": 52,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 38)",
            "(line 54,col 9)-(line 54,col 39)",
            "(line 55,col 9)-(line 55,col 39)",
            "(line 58,col 9)-(line 58,col 69)",
            "(line 59,col 9)-(line 59,col 69)",
            "(line 60,col 9)-(line 60,col 69)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.AttributesTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/AttributesTest.java",
        "signature": "org.jsoup.nodes.AttributesTest.html()",
        "snippet": "    @Test public void html() {\n        Attributes a = new Attributes();\n        a.put(\"Tot\", \"a&p\");\n        a.put(\"Hello\", \"There\");\n        a.put(\"data-name\", \"Jsoup\");\n\n        assertEquals(3, a.size());\n        assertTrue(a.hasKey(\"tot\"));\n        assertTrue(a.hasKey(\"Hello\"));\n        assertTrue(a.hasKey(\"data-name\"));\n        assertEquals(1, a.dataset().size());\n        assertEquals(\"Jsoup\", a.dataset().get(\"name\"));\n        assertEquals(\"a&p\", a.get(\"tot\"));\n\n        assertEquals(\" tot=\\\"a&amp;p\\\" hello=\\\"There\\\" data-name=\\\"Jsoup\\\"\", a.html());\n        assertEquals(a.html(), a.toString());\n    }",
        "begin_line": 13,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 14,col 9)-(line 14,col 40)",
            "(line 15,col 9)-(line 15,col 28)",
            "(line 16,col 9)-(line 16,col 32)",
            "(line 17,col 9)-(line 17,col 36)",
            "(line 19,col 9)-(line 19,col 34)",
            "(line 20,col 9)-(line 20,col 36)",
            "(line 21,col 9)-(line 21,col 38)",
            "(line 22,col 9)-(line 22,col 42)",
            "(line 23,col 9)-(line 23,col 44)",
            "(line 24,col 9)-(line 24,col 55)",
            "(line 25,col 9)-(line 25,col 42)",
            "(line 27,col 9)-(line 27,col 87)",
            "(line 28,col 9)-(line 28,col 45)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.getElementsByTagName()",
        "snippet": "    @Test public void getElementsByTagName() {\n        Document doc = Jsoup.parse(reference);\n        List<Element> divs = doc.getElementsByTag(\"div\");\n        assertEquals(2, divs.size());\n        assertEquals(\"div1\", divs.get(0).id());\n        assertEquals(\"div2\", divs.get(1).id());\n\n        List<Element> ps = doc.getElementsByTag(\"p\");\n        assertEquals(2, ps.size());\n        assertEquals(\"Hello\", ((TextNode) ps.get(0).childNode(0)).getWholeText());\n        assertEquals(\"Another \", ((TextNode) ps.get(1).childNode(0)).getWholeText());\n        List<Element> ps2 = doc.getElementsByTag(\"P\");\n        assertEquals(ps, ps2);\n\n        List<Element> imgs = doc.getElementsByTag(\"img\");\n        assertEquals(\"foo.png\", imgs.get(0).attr(\"src\"));\n\n        List<Element> empty = doc.getElementsByTag(\"wtf\");\n        assertEquals(0, empty.size());\n    }",
        "begin_line": 22,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 46)",
            "(line 24,col 9)-(line 24,col 57)",
            "(line 25,col 9)-(line 25,col 37)",
            "(line 26,col 9)-(line 26,col 47)",
            "(line 27,col 9)-(line 27,col 47)",
            "(line 29,col 9)-(line 29,col 53)",
            "(line 30,col 9)-(line 30,col 35)",
            "(line 31,col 9)-(line 31,col 82)",
            "(line 32,col 9)-(line 32,col 85)",
            "(line 33,col 9)-(line 33,col 54)",
            "(line 34,col 9)-(line 34,col 30)",
            "(line 36,col 9)-(line 36,col 57)",
            "(line 37,col 9)-(line 37,col 57)",
            "(line 39,col 9)-(line 39,col 58)",
            "(line 40,col 9)-(line 40,col 38)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.getNamespacedElementsByTag()",
        "snippet": "    @Test public void getNamespacedElementsByTag() {\n        Document doc = Jsoup.parse(\"<div><abc:def id=1>Hello</abc:def></div>\");\n        Elements els = doc.getElementsByTag(\"abc:def\");\n        assertEquals(1, els.size());\n        assertEquals(\"1\", els.first().id());\n        assertEquals(\"abc:def\", els.first().tagName());\n    }",
        "begin_line": 43,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 79)",
            "(line 45,col 9)-(line 45,col 55)",
            "(line 46,col 9)-(line 46,col 36)",
            "(line 47,col 9)-(line 47,col 44)",
            "(line 48,col 9)-(line 48,col 55)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testGetElementById()",
        "snippet": "    @Test public void testGetElementById() {\n        Document doc = Jsoup.parse(reference);\n        Element div = doc.getElementById(\"div1\");\n        assertEquals(\"div1\", div.id());\n        assertNull(doc.getElementById(\"none\"));\n\n        Document doc2 = Jsoup.parse(\"<div id=1><div id=2><p>Hello <span id=2>world!</span></p></div></div>\");\n        Element div2 = doc2.getElementById(\"2\");\n        assertEquals(\"div\", div2.tagName()); // not the span\n        Element span = div2.child(0).getElementById(\"2\"); // called from <p> context should be span\n        assertEquals(\"span\", span.tagName());\n    }",
        "begin_line": 51,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 46)",
            "(line 53,col 9)-(line 53,col 49)",
            "(line 54,col 9)-(line 54,col 39)",
            "(line 55,col 9)-(line 55,col 47)",
            "(line 57,col 9)-(line 57,col 109)",
            "(line 58,col 9)-(line 58,col 48)",
            "(line 59,col 9)-(line 59,col 44)",
            "(line 60,col 9)-(line 60,col 57)",
            "(line 61,col 9)-(line 61,col 45)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testGetText()",
        "snippet": "    @Test public void testGetText() {\n        Document doc = Jsoup.parse(reference);\n        assertEquals(\"Hello Another element\", doc.text());\n        assertEquals(\"Another element\", doc.getElementsByTag(\"p\").get(1).text());\n    }",
        "begin_line": 64,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 46)",
            "(line 66,col 9)-(line 66,col 58)",
            "(line 67,col 9)-(line 67,col 81)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testGetChildText()",
        "snippet": "    @Test public void testGetChildText() {\n        Document doc = Jsoup.parse(\"<p>Hello <b>there</b> now\");\n        Element p = doc.select(\"p\").first();\n        assertEquals(\"Hello there now\", p.text());\n        assertEquals(\"Hello now\", p.ownText());\n    }",
        "begin_line": 70,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 64)",
            "(line 72,col 9)-(line 72,col 44)",
            "(line 73,col 9)-(line 73,col 50)",
            "(line 74,col 9)-(line 74,col 47)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testNormalisesText()",
        "snippet": "    @Test public void testNormalisesText() {\n        String h = \"<p>Hello<p>There.</p> \\n <p>Here <b>is</b> \\n s<b>om</b>e text.\";\n        Document doc = Jsoup.parse(h);\n        String text = doc.text();\n        assertEquals(\"Hello There. Here is some text.\", text);\n    }",
        "begin_line": 77,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 85)",
            "(line 79,col 9)-(line 79,col 38)",
            "(line 80,col 9)-(line 80,col 33)",
            "(line 81,col 9)-(line 81,col 62)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testKeepsPreText()",
        "snippet": "    @Test public void testKeepsPreText() {\n        String h = \"<p>Hello \\n \\n there.</p> <div><pre>  What's \\n\\n  that?</pre>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"Hello there.   What's \\n\\n  that?\", doc.text());\n    }",
        "begin_line": 84,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 84)",
            "(line 86,col 9)-(line 86,col 38)",
            "(line 87,col 9)-(line 87,col 70)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testKeepsPreTextInCode()",
        "snippet": "    @Test public void testKeepsPreTextInCode() {\n        String h = \"<pre><code>code\\n\\ncode</code></pre>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"code\\n\\ncode\", doc.text());\n        assertEquals(\"<pre><code>code\\n\\ncode</code></pre>\", doc.body().html());\n    }",
        "begin_line": 90,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 58)",
            "(line 92,col 9)-(line 92,col 38)",
            "(line 93,col 9)-(line 93,col 49)",
            "(line 94,col 9)-(line 94,col 80)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testGetSiblings()",
        "snippet": "    @Test public void testGetSiblings() {\n        Document doc = Jsoup.parse(\"<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>\");\n        Element p = doc.getElementById(\"1\");\n        assertEquals(\"there\", p.text());\n        assertEquals(\"Hello\", p.previousElementSibling().text());\n        assertEquals(\"this\", p.nextElementSibling().text());\n        assertEquals(\"Hello\", p.firstElementSibling().text());\n        assertEquals(\"element\", p.lastElementSibling().text());\n    }",
        "begin_line": 97,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 106)",
            "(line 99,col 9)-(line 99,col 44)",
            "(line 100,col 9)-(line 100,col 40)",
            "(line 101,col 9)-(line 101,col 65)",
            "(line 102,col 9)-(line 102,col 60)",
            "(line 103,col 9)-(line 103,col 62)",
            "(line 104,col 9)-(line 104,col 63)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testGetParents()",
        "snippet": "    @Test public void testGetParents() {\n        Document doc = Jsoup.parse(\"<div><p>Hello <span>there</span></div>\");\n        Element span = doc.select(\"span\").first();\n        Elements parents = span.parents();\n\n        assertEquals(4, parents.size());\n        assertEquals(\"p\", parents.get(0).tagName());\n        assertEquals(\"div\", parents.get(1).tagName());\n        assertEquals(\"body\", parents.get(2).tagName());\n        assertEquals(\"html\", parents.get(3).tagName());\n    }",
        "begin_line": 107,
        "end_line": 117,
        "comment": "",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 77)",
            "(line 109,col 9)-(line 109,col 50)",
            "(line 110,col 9)-(line 110,col 42)",
            "(line 112,col 9)-(line 112,col 40)",
            "(line 113,col 9)-(line 113,col 52)",
            "(line 114,col 9)-(line 114,col 54)",
            "(line 115,col 9)-(line 115,col 55)",
            "(line 116,col 9)-(line 116,col 55)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testElementSiblingIndex()",
        "snippet": "    @Test public void testElementSiblingIndex() {\n        Document doc = Jsoup.parse(\"<div><p>One</p>...<p>Two</p>...<p>Three</p>\");\n        Elements ps = doc.select(\"p\");\n        assertTrue(0 == ps.get(0).elementSiblingIndex());\n        assertTrue(1 == ps.get(1).elementSiblingIndex());\n        assertTrue(2 == ps.get(2).elementSiblingIndex());\n    }",
        "begin_line": 119,
        "end_line": 125,
        "comment": "",
        "child_ranges": [
            "(line 120,col 9)-(line 120,col 82)",
            "(line 121,col 9)-(line 121,col 38)",
            "(line 122,col 9)-(line 122,col 57)",
            "(line 123,col 9)-(line 123,col 57)",
            "(line 124,col 9)-(line 124,col 57)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testGetElementsWithClass()",
        "snippet": "    @Test public void testGetElementsWithClass() {\n        Document doc = Jsoup.parse(\"<div class='mellow yellow'><span class=mellow>Hello <b class='yellow'>Yellow!</b></span><p>Empty</p></div>\");\n\n        List<Element> els = doc.getElementsByClass(\"mellow\");\n        assertEquals(2, els.size());\n        assertEquals(\"div\", els.get(0).tagName());\n        assertEquals(\"span\", els.get(1).tagName());\n\n        List<Element> els2 = doc.getElementsByClass(\"yellow\");\n        assertEquals(2, els2.size());\n        assertEquals(\"div\", els2.get(0).tagName());\n        assertEquals(\"b\", els2.get(1).tagName());\n\n        List<Element> none = doc.getElementsByClass(\"solo\");\n        assertEquals(0, none.size());\n    }",
        "begin_line": 127,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 145)",
            "(line 130,col 9)-(line 130,col 61)",
            "(line 131,col 9)-(line 131,col 36)",
            "(line 132,col 9)-(line 132,col 50)",
            "(line 133,col 9)-(line 133,col 51)",
            "(line 135,col 9)-(line 135,col 62)",
            "(line 136,col 9)-(line 136,col 37)",
            "(line 137,col 9)-(line 137,col 51)",
            "(line 138,col 9)-(line 138,col 49)",
            "(line 140,col 9)-(line 140,col 60)",
            "(line 141,col 9)-(line 141,col 37)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testGetElementsWithAttribute()",
        "snippet": "    @Test public void testGetElementsWithAttribute() {\n        Document doc = Jsoup.parse(\"<div style='bold'><p title=qux><p><b style></b></p></div>\");\n        List<Element> els = doc.getElementsByAttribute(\"style\");\n        assertEquals(2, els.size());\n        assertEquals(\"div\", els.get(0).tagName());\n        assertEquals(\"b\", els.get(1).tagName());\n\n        List<Element> none = doc.getElementsByAttribute(\"class\");\n        assertEquals(0, none.size());\n    }",
        "begin_line": 144,
        "end_line": 153,
        "comment": "",
        "child_ranges": [
            "(line 145,col 9)-(line 145,col 96)",
            "(line 146,col 9)-(line 146,col 64)",
            "(line 147,col 9)-(line 147,col 36)",
            "(line 148,col 9)-(line 148,col 50)",
            "(line 149,col 9)-(line 149,col 48)",
            "(line 151,col 9)-(line 151,col 65)",
            "(line 152,col 9)-(line 152,col 37)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testGetElementsWithAttributeValue()",
        "snippet": "    @Test public void testGetElementsWithAttributeValue() {\n        Document doc = Jsoup.parse(\"<div style='bold'><p><p><b style></b></p></div>\");\n        List<Element> els = doc.getElementsByAttributeValue(\"style\", \"bold\");\n        assertEquals(1, els.size());\n        assertEquals(\"div\", els.get(0).tagName());\n\n        List<Element> none = doc.getElementsByAttributeValue(\"style\", \"none\");\n        assertEquals(0, none.size());\n    }",
        "begin_line": 155,
        "end_line": 163,
        "comment": "",
        "child_ranges": [
            "(line 156,col 9)-(line 156,col 86)",
            "(line 157,col 9)-(line 157,col 77)",
            "(line 158,col 9)-(line 158,col 36)",
            "(line 159,col 9)-(line 159,col 50)",
            "(line 161,col 9)-(line 161,col 78)",
            "(line 162,col 9)-(line 162,col 37)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testClassDomMethods()",
        "snippet": "    @Test public void testClassDomMethods() {\n        Document doc = Jsoup.parse(\"<div><span class='mellow yellow'>Hello <b>Yellow</b></span></div>\");\n        List<Element> els = doc.getElementsByAttribute(\"class\");\n        Element span = els.get(0);\n        assertEquals(\"mellow yellow\", span.className());\n        assertTrue(span.hasClass(\"mellow\"));\n        assertTrue(span.hasClass(\"yellow\"));\n        Set<String> classes = span.classNames();\n        assertEquals(2, classes.size());\n        assertTrue(classes.contains(\"mellow\"));\n        assertTrue(classes.contains(\"yellow\"));\n\n        assertEquals(\"\", doc.className());\n        assertFalse(doc.hasClass(\"mellow\"));\n    }",
        "begin_line": 165,
        "end_line": 179,
        "comment": "",
        "child_ranges": [
            "(line 166,col 9)-(line 166,col 104)",
            "(line 167,col 9)-(line 167,col 64)",
            "(line 168,col 9)-(line 168,col 34)",
            "(line 169,col 9)-(line 169,col 56)",
            "(line 170,col 9)-(line 170,col 44)",
            "(line 171,col 9)-(line 171,col 44)",
            "(line 172,col 9)-(line 172,col 48)",
            "(line 173,col 9)-(line 173,col 40)",
            "(line 174,col 9)-(line 174,col 47)",
            "(line 175,col 9)-(line 175,col 47)",
            "(line 177,col 9)-(line 177,col 42)",
            "(line 178,col 9)-(line 178,col 44)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testClassUpdates()",
        "snippet": "    @Test public void testClassUpdates() {\n        Document doc = Jsoup.parse(\"<div class='mellow yellow'></div>\");\n        Element div = doc.select(\"div\").first();\n\n        div.addClass(\"green\");\n        assertEquals(\"mellow yellow green\", div.className());\n        div.removeClass(\"red\"); // noop\n        div.removeClass(\"yellow\");\n        assertEquals(\"mellow green\", div.className());\n        div.toggleClass(\"green\").toggleClass(\"red\");\n        assertEquals(\"mellow red\", div.className());\n    }",
        "begin_line": 181,
        "end_line": 192,
        "comment": "",
        "child_ranges": [
            "(line 182,col 9)-(line 182,col 72)",
            "(line 183,col 9)-(line 183,col 48)",
            "(line 185,col 9)-(line 185,col 30)",
            "(line 186,col 9)-(line 186,col 61)",
            "(line 187,col 9)-(line 187,col 31)",
            "(line 188,col 9)-(line 188,col 34)",
            "(line 189,col 9)-(line 189,col 54)",
            "(line 190,col 9)-(line 190,col 52)",
            "(line 191,col 9)-(line 191,col 52)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testOuterHtml()",
        "snippet": "    @Test public void testOuterHtml() {\n        Document doc = Jsoup.parse(\"<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there\");\n        assertEquals(\"<html><head></head><body><div title=\\\"Tags &amp;c.\\\"><img src=\\\"foo.png\\\" /><p><!-- comment -->Hello</p><p>there</p></div></body></html>\",\n                TextUtil.stripNewlines(doc.outerHtml()));\n    }",
        "begin_line": 194,
        "end_line": 198,
        "comment": "",
        "child_ranges": [
            "(line 195,col 9)-(line 195,col 114)",
            "(line 196,col 9)-(line 197,col 57)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testInnerHtml()",
        "snippet": "    @Test public void testInnerHtml() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p></div>\");\n        assertEquals(\"<p>Hello</p>\", doc.getElementsByTag(\"div\").get(0).html());\n    }",
        "begin_line": 200,
        "end_line": 203,
        "comment": "",
        "child_ranges": [
            "(line 201,col 9)-(line 201,col 62)",
            "(line 202,col 9)-(line 202,col 80)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testFormatHtml()",
        "snippet": "    @Test public void testFormatHtml() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p></div>\");\n        assertEquals(\"<html>\\n <head></head>\\n <body>\\n  <div>\\n   <p>Hello</p>\\n  </div>\\n </body>\\n</html>\", doc.html());\n    }",
        "begin_line": 205,
        "end_line": 208,
        "comment": "",
        "child_ranges": [
            "(line 206,col 9)-(line 206,col 62)",
            "(line 207,col 9)-(line 207,col 123)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testSetIndent()",
        "snippet": "    @Test public void testSetIndent() {\n        Document doc = Jsoup.parse(\"<div><p>Hello\\nthere</p></div>\");\n        doc.outputSettings().indentAmount(0);\n        assertEquals(\"<html>\\n<head></head>\\n<body>\\n<div>\\n<p>Hello there</p>\\n</div>\\n</body>\\n</html>\", doc.html());\n    }",
        "begin_line": 210,
        "end_line": 214,
        "comment": "",
        "child_ranges": [
            "(line 211,col 9)-(line 211,col 69)",
            "(line 212,col 9)-(line 212,col 45)",
            "(line 213,col 9)-(line 213,col 119)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testNotPretty()",
        "snippet": "    @Test public void testNotPretty() {\n        Document doc = Jsoup.parse(\"<div>   \\n<p>Hello\\n there</p></div>\");\n        doc.outputSettings().prettyPrint(false);\n        assertEquals(\"<html><head></head><body><div>   \\n<p>Hello\\n there</p></div></body></html>\", doc.html());\n    }",
        "begin_line": 216,
        "end_line": 220,
        "comment": "",
        "child_ranges": [
            "(line 217,col 9)-(line 217,col 75)",
            "(line 218,col 9)-(line 218,col 48)",
            "(line 219,col 9)-(line 219,col 112)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testEmptyElementFormatHtml()",
        "snippet": "    @Test public void testEmptyElementFormatHtml() {\n        // don't put newlines into empty blocks\n        Document doc = Jsoup.parse(\"<section><div></div></section>\");\n        assertEquals(\"\\n<section>\\n <div></div>\\n</section>\", doc.select(\"section\").first().outerHtml());\n    }",
        "begin_line": 222,
        "end_line": 226,
        "comment": "",
        "child_ranges": [
            "(line 224,col 9)-(line 224,col 69)",
            "(line 225,col 9)-(line 225,col 105)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testSetText()",
        "snippet": "    @Test public void testSetText() {\n        String h = \"<div id=1>Hello <p>there <b>now</b></p></div>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"Hello there now\", doc.text()); // need to sort out node whitespace\n        assertEquals(\"there now\", doc.select(\"p\").get(0).text());\n\n        Element div = doc.getElementById(\"1\").text(\"Gone\");\n        assertEquals(\"Gone\", div.text());\n        assertEquals(0, doc.select(\"p\").size());\n    }",
        "begin_line": 228,
        "end_line": 237,
        "comment": "",
        "child_ranges": [
            "(line 229,col 9)-(line 229,col 67)",
            "(line 230,col 9)-(line 230,col 38)",
            "(line 231,col 9)-(line 231,col 52)",
            "(line 232,col 9)-(line 232,col 65)",
            "(line 234,col 9)-(line 234,col 59)",
            "(line 235,col 9)-(line 235,col 41)",
            "(line 236,col 9)-(line 236,col 48)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testAddNewElement()",
        "snippet": "    @Test public void testAddNewElement() {\n        Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\");\n        Element div = doc.getElementById(\"1\");\n        div.appendElement(\"p\").text(\"there\");\n        div.appendElement(\"P\").attr(\"class\", \"second\").text(\"now\");\n        assertEquals(\"<html><head></head><body><div id=\\\"1\\\"><p>Hello</p><p>there</p><p class=\\\"second\\\">now</p></div></body></html>\",\n                TextUtil.stripNewlines(doc.html()));\n\n        // check sibling index (with short circuit on reindexChildren):\n        Elements ps = doc.select(\"p\");\n        for (int i = 0; i < ps.size(); i++) {\n            assertEquals(i, ps.get(i).siblingIndex);\n        }\n    }",
        "begin_line": 239,
        "end_line": 252,
        "comment": "",
        "child_ranges": [
            "(line 240,col 9)-(line 240,col 67)",
            "(line 241,col 9)-(line 241,col 46)",
            "(line 242,col 9)-(line 242,col 45)",
            "(line 243,col 9)-(line 243,col 67)",
            "(line 244,col 9)-(line 245,col 52)",
            "(line 248,col 9)-(line 248,col 38)",
            "(line 249,col 9)-(line 251,col 9)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testAppendRowToTable()",
        "snippet": "    @Test public void testAppendRowToTable() {\n        Document doc = Jsoup.parse(\"<table><tr><td>1</td></tr></table>\");\n        Element table = doc.select(\"table\").first();\n        table.append(\"<tr><td>2</td></tr>\");\n\n        assertEquals(\"<table><tr><td>1</td></tr><tr><td>2</td></tr></table>\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 254,
        "end_line": 260,
        "comment": "",
        "child_ranges": [
            "(line 255,col 9)-(line 255,col 73)",
            "(line 256,col 9)-(line 256,col 52)",
            "(line 257,col 9)-(line 257,col 44)",
            "(line 259,col 9)-(line 259,col 121)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testPrependRowToTable()",
        "snippet": "        @Test public void testPrependRowToTable() {\n        Document doc = Jsoup.parse(\"<table><tr><td>1</td></tr></table>\");\n        Element table = doc.select(\"table\").first();\n        table.prepend(\"<tr><td>2</td></tr>\");\n\n        assertEquals(\"<table><tr><td>2</td></tr><tr><td>1</td></tr></table>\", TextUtil.stripNewlines(doc.body().html()));\n\n        // check sibling index (reindexChildren):\n        Elements ps = doc.select(\"tr\");\n        for (int i = 0; i < ps.size(); i++) {\n            assertEquals(i, ps.get(i).siblingIndex);\n        }\n    }",
        "begin_line": 262,
        "end_line": 274,
        "comment": "",
        "child_ranges": [
            "(line 263,col 9)-(line 263,col 73)",
            "(line 264,col 9)-(line 264,col 52)",
            "(line 265,col 9)-(line 265,col 45)",
            "(line 267,col 9)-(line 267,col 121)",
            "(line 270,col 9)-(line 270,col 39)",
            "(line 271,col 9)-(line 273,col 9)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testPrependElement()",
        "snippet": "    @Test public void testPrependElement() {\n        Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\");\n        Element div = doc.getElementById(\"1\");\n        div.prependElement(\"p\").text(\"Before\");\n        assertEquals(\"Before\", div.child(0).text());\n        assertEquals(\"Hello\", div.child(1).text());\n    }",
        "begin_line": 276,
        "end_line": 282,
        "comment": "",
        "child_ranges": [
            "(line 277,col 9)-(line 277,col 67)",
            "(line 278,col 9)-(line 278,col 46)",
            "(line 279,col 9)-(line 279,col 47)",
            "(line 280,col 9)-(line 280,col 52)",
            "(line 281,col 9)-(line 281,col 51)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testAddNewText()",
        "snippet": "    @Test public void testAddNewText() {\n        Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\");\n        Element div = doc.getElementById(\"1\");\n        div.appendText(\" there & now >\");\n        assertEquals(\"<p>Hello</p> there &amp; now &gt;\", TextUtil.stripNewlines(div.html()));\n    }",
        "begin_line": 284,
        "end_line": 289,
        "comment": "",
        "child_ranges": [
            "(line 285,col 9)-(line 285,col 67)",
            "(line 286,col 9)-(line 286,col 46)",
            "(line 287,col 9)-(line 287,col 41)",
            "(line 288,col 9)-(line 288,col 94)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testPrependText()",
        "snippet": "    @Test public void testPrependText() {\n        Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\");\n        Element div = doc.getElementById(\"1\");\n        div.prependText(\"there & now > \");\n        assertEquals(\"there & now > Hello\", div.text());\n        assertEquals(\"there &amp; now &gt; <p>Hello</p>\", TextUtil.stripNewlines(div.html()));\n    }",
        "begin_line": 291,
        "end_line": 297,
        "comment": "",
        "child_ranges": [
            "(line 292,col 9)-(line 292,col 67)",
            "(line 293,col 9)-(line 293,col 46)",
            "(line 294,col 9)-(line 294,col 42)",
            "(line 295,col 9)-(line 295,col 56)",
            "(line 296,col 9)-(line 296,col 94)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testAddNewHtml()",
        "snippet": "    @Test public void testAddNewHtml() {\n        Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\");\n        Element div = doc.getElementById(\"1\");\n        div.append(\"<p>there</p><p>now</p>\");\n        assertEquals(\"<p>Hello</p><p>there</p><p>now</p>\", TextUtil.stripNewlines(div.html()));\n\n        // check sibling index (no reindexChildren):\n        Elements ps = doc.select(\"p\");\n        for (int i = 0; i < ps.size(); i++) {\n            assertEquals(i, ps.get(i).siblingIndex);\n        }\n    }",
        "begin_line": 299,
        "end_line": 310,
        "comment": "",
        "child_ranges": [
            "(line 300,col 9)-(line 300,col 67)",
            "(line 301,col 9)-(line 301,col 46)",
            "(line 302,col 9)-(line 302,col 45)",
            "(line 303,col 9)-(line 303,col 95)",
            "(line 306,col 9)-(line 306,col 38)",
            "(line 307,col 9)-(line 309,col 9)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testPrependNewHtml()",
        "snippet": "    @Test public void testPrependNewHtml() {\n        Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\");\n        Element div = doc.getElementById(\"1\");\n        div.prepend(\"<p>there</p><p>now</p>\");\n        assertEquals(\"<p>there</p><p>now</p><p>Hello</p>\", TextUtil.stripNewlines(div.html()));\n\n        // check sibling index (reindexChildren):\n        Elements ps = doc.select(\"p\");\n        for (int i = 0; i < ps.size(); i++) {\n            assertEquals(i, ps.get(i).siblingIndex);\n        }\n    }",
        "begin_line": 312,
        "end_line": 323,
        "comment": "",
        "child_ranges": [
            "(line 313,col 9)-(line 313,col 67)",
            "(line 314,col 9)-(line 314,col 46)",
            "(line 315,col 9)-(line 315,col 46)",
            "(line 316,col 9)-(line 316,col 95)",
            "(line 319,col 9)-(line 319,col 38)",
            "(line 320,col 9)-(line 322,col 9)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testSetHtml()",
        "snippet": "    @Test public void testSetHtml() {\n        Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\");\n        Element div = doc.getElementById(\"1\");\n        div.html(\"<p>there</p><p>now</p>\");\n        assertEquals(\"<p>there</p><p>now</p>\", TextUtil.stripNewlines(div.html()));\n    }",
        "begin_line": 325,
        "end_line": 330,
        "comment": "",
        "child_ranges": [
            "(line 326,col 9)-(line 326,col 67)",
            "(line 327,col 9)-(line 327,col 46)",
            "(line 328,col 9)-(line 328,col 43)",
            "(line 329,col 9)-(line 329,col 83)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testWrap()",
        "snippet": "    @Test public void testWrap() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p><p>There</p></div>\");\n        Element p = doc.select(\"p\").first();\n        p.wrap(\"<div class='head'></div>\");\n        assertEquals(\"<div><div class=\\\"head\\\"><p>Hello</p></div><p>There</p></div>\", TextUtil.stripNewlines(doc.body().html()));\n\n        Element ret = p.wrap(\"<div><div class=foo></div><p>What?</p></div>\");\n        assertEquals(\"<div><div class=\\\"head\\\"><div><div class=\\\"foo\\\"><p>Hello</p></div><p>What?</p></div></div><p>There</p></div>\", \n                TextUtil.stripNewlines(doc.body().html()));\n\n        assertEquals(ret, p);\n    }",
        "begin_line": 332,
        "end_line": 343,
        "comment": "",
        "child_ranges": [
            "(line 333,col 9)-(line 333,col 74)",
            "(line 334,col 9)-(line 334,col 44)",
            "(line 335,col 9)-(line 335,col 43)",
            "(line 336,col 9)-(line 336,col 129)",
            "(line 338,col 9)-(line 338,col 77)",
            "(line 339,col 9)-(line 340,col 59)",
            "(line 342,col 9)-(line 342,col 29)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.before()",
        "snippet": "    @Test public void before() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p><p>There</p></div>\");\n        Element p1 = doc.select(\"p\").first();\n        p1.before(\"<div>one</div><div>two</div>\");\n        assertEquals(\"<div><div>one</div><div>two</div><p>Hello</p><p>There</p></div>\", TextUtil.stripNewlines(doc.body().html()));\n        \n        doc.select(\"p\").last().before(\"<p>Three</p><!-- four -->\");\n        assertEquals(\"<div><div>one</div><div>two</div><p>Hello</p><p>Three</p><!-- four --><p>There</p></div>\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 345,
        "end_line": 353,
        "comment": "",
        "child_ranges": [
            "(line 346,col 9)-(line 346,col 74)",
            "(line 347,col 9)-(line 347,col 45)",
            "(line 348,col 9)-(line 348,col 50)",
            "(line 349,col 9)-(line 349,col 131)",
            "(line 351,col 9)-(line 351,col 67)",
            "(line 352,col 9)-(line 352,col 156)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.after()",
        "snippet": "    @Test public void after() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p><p>There</p></div>\");\n        Element p1 = doc.select(\"p\").first();\n        p1.after(\"<div>one</div><div>two</div>\");\n        assertEquals(\"<div><p>Hello</p><div>one</div><div>two</div><p>There</p></div>\", TextUtil.stripNewlines(doc.body().html()));\n        \n        doc.select(\"p\").last().after(\"<p>Three</p><!-- four -->\");\n        assertEquals(\"<div><p>Hello</p><div>one</div><div>two</div><p>There</p><p>Three</p><!-- four --></div>\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 355,
        "end_line": 363,
        "comment": "",
        "child_ranges": [
            "(line 356,col 9)-(line 356,col 74)",
            "(line 357,col 9)-(line 357,col 45)",
            "(line 358,col 9)-(line 358,col 49)",
            "(line 359,col 9)-(line 359,col 131)",
            "(line 361,col 9)-(line 361,col 66)",
            "(line 362,col 9)-(line 362,col 156)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testWrapWithRemainder()",
        "snippet": "    @Test public void testWrapWithRemainder() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p></div>\");\n        Element p = doc.select(\"p\").first();\n        p.wrap(\"<div class='head'></div><p>There!</p>\");\n        assertEquals(\"<div><div class=\\\"head\\\"><p>Hello</p><p>There!</p></div></div>\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 365,
        "end_line": 370,
        "comment": "",
        "child_ranges": [
            "(line 366,col 9)-(line 366,col 62)",
            "(line 367,col 9)-(line 367,col 44)",
            "(line 368,col 9)-(line 368,col 56)",
            "(line 369,col 9)-(line 369,col 130)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testHasText()",
        "snippet": "    @Test public void testHasText() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p><p></p></div>\");\n        Element div = doc.select(\"div\").first();\n        Elements ps = doc.select(\"p\");\n\n        assertTrue(div.hasText());\n        assertTrue(ps.first().hasText());\n        assertFalse(ps.last().hasText());\n    }",
        "begin_line": 372,
        "end_line": 380,
        "comment": "",
        "child_ranges": [
            "(line 373,col 9)-(line 373,col 69)",
            "(line 374,col 9)-(line 374,col 48)",
            "(line 375,col 9)-(line 375,col 38)",
            "(line 377,col 9)-(line 377,col 34)",
            "(line 378,col 9)-(line 378,col 41)",
            "(line 379,col 9)-(line 379,col 41)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.dataset()",
        "snippet": "    @Test public void dataset() {\n        Document doc = Jsoup.parse(\"<div id=1 data-name=jsoup class=new data-package=jar>Hello</div><p id=2>Hello</p>\");\n        Element div = doc.select(\"div\").first();\n        Map<String, String> dataset = div.dataset();\n        Attributes attributes = div.attributes();\n\n        // size, get, set, add, remove\n        assertEquals(2, dataset.size());\n        assertEquals(\"jsoup\", dataset.get(\"name\"));\n        assertEquals(\"jar\", dataset.get(\"package\"));\n\n        dataset.put(\"name\", \"jsoup updated\");\n        dataset.put(\"language\", \"java\");\n        dataset.remove(\"package\");\n\n        assertEquals(2, dataset.size());\n        assertEquals(4, attributes.size());\n        assertEquals(\"jsoup updated\", attributes.get(\"data-name\"));\n        assertEquals(\"jsoup updated\", dataset.get(\"name\"));\n        assertEquals(\"java\", attributes.get(\"data-language\"));\n        assertEquals(\"java\", dataset.get(\"language\"));\n\n        attributes.put(\"data-food\", \"bacon\");\n        assertEquals(3, dataset.size());\n        assertEquals(\"bacon\", dataset.get(\"food\"));\n\n        attributes.put(\"data-\", \"empty\");\n        assertEquals(null, dataset.get(\"\")); // data- is not a data attribute\n\n        Element p = doc.select(\"p\").first();\n        assertEquals(0, p.dataset().size());\n\n    }",
        "begin_line": 382,
        "end_line": 414,
        "comment": "",
        "child_ranges": [
            "(line 383,col 9)-(line 383,col 120)",
            "(line 384,col 9)-(line 384,col 48)",
            "(line 385,col 9)-(line 385,col 52)",
            "(line 386,col 9)-(line 386,col 49)",
            "(line 389,col 9)-(line 389,col 40)",
            "(line 390,col 9)-(line 390,col 51)",
            "(line 391,col 9)-(line 391,col 52)",
            "(line 393,col 9)-(line 393,col 45)",
            "(line 394,col 9)-(line 394,col 40)",
            "(line 395,col 9)-(line 395,col 34)",
            "(line 397,col 9)-(line 397,col 40)",
            "(line 398,col 9)-(line 398,col 43)",
            "(line 399,col 9)-(line 399,col 67)",
            "(line 400,col 9)-(line 400,col 59)",
            "(line 401,col 9)-(line 401,col 62)",
            "(line 402,col 9)-(line 402,col 54)",
            "(line 404,col 9)-(line 404,col 45)",
            "(line 405,col 9)-(line 405,col 40)",
            "(line 406,col 9)-(line 406,col 51)",
            "(line 408,col 9)-(line 408,col 41)",
            "(line 409,col 9)-(line 409,col 44)",
            "(line 411,col 9)-(line 411,col 44)",
            "(line 412,col 9)-(line 412,col 44)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.parentlessToString()",
        "snippet": "    @Test public void parentlessToString() {\n        Document doc = Jsoup.parse(\"<img src='foo'>\");\n        Element img = doc.select(\"img\").first();\n        assertEquals(\"\\n<img src=\\\"foo\\\" />\", img.toString());\n\n        img.remove(); // lost its parent\n        assertEquals(\"<img src=\\\"foo\\\" />\", img.toString());\n    }",
        "begin_line": 416,
        "end_line": 423,
        "comment": "",
        "child_ranges": [
            "(line 417,col 9)-(line 417,col 54)",
            "(line 418,col 9)-(line 418,col 48)",
            "(line 419,col 9)-(line 419,col 62)",
            "(line 421,col 9)-(line 421,col 21)",
            "(line 422,col 9)-(line 422,col 60)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.TextNodeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/TextNodeTest.java",
        "signature": "org.jsoup.nodes.TextNodeTest.testBlank()",
        "snippet": "    @Test public void testBlank() {\n        TextNode one = new TextNode(\"\", \"\");\n        TextNode two = new TextNode(\"     \", \"\");\n        TextNode three = new TextNode(\"  \\n\\n   \", \"\");\n        TextNode four = new TextNode(\"Hello\", \"\");\n        TextNode five = new TextNode(\"  \\nHello \", \"\");\n\n        assertTrue(one.isBlank());\n        assertTrue(two.isBlank());\n        assertTrue(three.isBlank());\n        assertFalse(four.isBlank());\n        assertFalse(five.isBlank());\n    }",
        "begin_line": 14,
        "end_line": 26,
        "comment": "",
        "child_ranges": [
            "(line 15,col 9)-(line 15,col 44)",
            "(line 16,col 9)-(line 16,col 49)",
            "(line 17,col 9)-(line 17,col 55)",
            "(line 18,col 9)-(line 18,col 50)",
            "(line 19,col 9)-(line 19,col 55)",
            "(line 21,col 9)-(line 21,col 34)",
            "(line 22,col 9)-(line 22,col 34)",
            "(line 23,col 9)-(line 23,col 36)",
            "(line 24,col 9)-(line 24,col 36)",
            "(line 25,col 9)-(line 25,col 36)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.TextNodeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/TextNodeTest.java",
        "signature": "org.jsoup.nodes.TextNodeTest.testTextBean()",
        "snippet": "    @Test public void testTextBean() {\n        Document doc = Jsoup.parse(\"<p>One <span>two &amp;</span> three &amp;</p>\");\n        Element p = doc.select(\"p\").first();\n\n        Element span = doc.select(\"span\").first();\n        assertEquals(\"two &\", span.text());\n        TextNode spanText = (TextNode) span.childNode(0);\n        assertEquals(\"two &\", spanText.text());\n        \n        TextNode tn = (TextNode) p.childNode(2);\n        assertEquals(\" three &\", tn.text());\n        \n        tn.text(\" POW!\");\n        assertEquals(\"One <span>two &amp;</span> POW!\", TextUtil.stripNewlines(p.html()));\n\n        tn.attr(\"text\", \"kablam &\");\n        assertEquals(\"kablam &\", tn.text());\n        assertEquals(\"One <span>two &amp;</span>kablam &amp;\", TextUtil.stripNewlines(p.html()));\n    }",
        "begin_line": 28,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 84)",
            "(line 30,col 9)-(line 30,col 44)",
            "(line 32,col 9)-(line 32,col 50)",
            "(line 33,col 9)-(line 33,col 43)",
            "(line 34,col 9)-(line 34,col 57)",
            "(line 35,col 9)-(line 35,col 47)",
            "(line 37,col 9)-(line 37,col 48)",
            "(line 38,col 9)-(line 38,col 44)",
            "(line 40,col 9)-(line 40,col 25)",
            "(line 41,col 9)-(line 41,col 90)",
            "(line 43,col 9)-(line 43,col 36)",
            "(line 44,col 9)-(line 44,col 44)",
            "(line 45,col 9)-(line 45,col 97)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.AttributeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/AttributeTest.java",
        "signature": "org.jsoup.nodes.AttributeTest.html()",
        "snippet": "    @Test public void html() {\n        Attribute attr = new Attribute(\"key\", \"value &\");\n        assertEquals(\"key=\\\"value &amp;\\\"\", attr.html());\n        assertEquals(attr.html(), attr.toString());\n    }",
        "begin_line": 8,
        "end_line": 12,
        "comment": "",
        "child_ranges": [
            "(line 9,col 9)-(line 9,col 57)",
            "(line 10,col 9)-(line 10,col 57)",
            "(line 11,col 9)-(line 11,col 51)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.NodeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/NodeTest.java",
        "signature": "org.jsoup.nodes.NodeTest.handlesBaseUri()",
        "snippet": "    @Test public void handlesBaseUri() {\n        Tag tag = Tag.valueOf(\"a\");\n        Attributes attribs = new Attributes();\n        attribs.put(\"relHref\", \"/foo\");\n        attribs.put(\"absHref\", \"http://bar/qux\");\n\n        Element noBase = new Element(tag, \"\", attribs);\n        assertEquals(\"\", noBase.absUrl(\"relHref\")); // with no base, should NOT fallback to href attrib, whatever it is\n        assertEquals(\"http://bar/qux\", noBase.absUrl(\"absHref\")); // no base but valid attrib, return attrib\n\n        Element withBase = new Element(tag, \"http://foo/\", attribs);\n        assertEquals(\"http://foo/foo\", withBase.absUrl(\"relHref\")); // construct abs from base + rel\n        assertEquals(\"http://bar/qux\", withBase.absUrl(\"absHref\")); // href is abs, so returns that\n        assertEquals(\"\", withBase.absUrl(\"noval\"));\n\n        Element dodgyBase = new Element(tag, \"wtf://no-such-protocol/\", attribs);\n        assertEquals(\"http://bar/qux\", dodgyBase.absUrl(\"absHref\")); // base fails, but href good, so get that\n        assertEquals(\"\", dodgyBase.absUrl(\"relHref\")); // base fails, only rel href, so return nothing \n    }",
        "begin_line": 14,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 15,col 9)-(line 15,col 35)",
            "(line 16,col 9)-(line 16,col 46)",
            "(line 17,col 9)-(line 17,col 39)",
            "(line 18,col 9)-(line 18,col 49)",
            "(line 20,col 9)-(line 20,col 55)",
            "(line 21,col 9)-(line 21,col 51)",
            "(line 22,col 9)-(line 22,col 65)",
            "(line 24,col 9)-(line 24,col 68)",
            "(line 25,col 9)-(line 25,col 67)",
            "(line 26,col 9)-(line 26,col 67)",
            "(line 27,col 9)-(line 27,col 51)",
            "(line 29,col 9)-(line 29,col 81)",
            "(line 30,col 9)-(line 30,col 68)",
            "(line 31,col 9)-(line 31,col 54)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.NodeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/NodeTest.java",
        "signature": "org.jsoup.nodes.NodeTest.handlesAbsPrefix()",
        "snippet": "    @Test public void handlesAbsPrefix() {\n        Document doc = Jsoup.parse(\"<a href=/foo>Hello</a>\", \"http://jsoup.org/\");\n        Element a = doc.select(\"a\").first();\n        assertEquals(\"/foo\", a.attr(\"href\"));\n        assertEquals(\"http://jsoup.org/foo\", a.attr(\"abs:href\"));\n        assertFalse(a.hasAttr(\"abs:href\")); // only realised on the get method, not in has or iterator\n    }",
        "begin_line": 34,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 82)",
            "(line 36,col 9)-(line 36,col 44)",
            "(line 37,col 9)-(line 37,col 45)",
            "(line 38,col 9)-(line 38,col 65)",
            "(line 39,col 9)-(line 39,col 43)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.NodeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/NodeTest.java",
        "signature": "org.jsoup.nodes.NodeTest.testRemove()",
        "snippet": "    @Test public void testRemove() {\n        Document doc = Jsoup.parse(\"<p>One <span>two</span> three</p>\");\n        Element p = doc.select(\"p\").first();\n        p.childNode(0).remove();\n        \n        assertEquals(\"two three\", p.text());\n        assertEquals(\"<span>two</span> three\", TextUtil.stripNewlines(p.html()));\n    }",
        "begin_line": 42,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 72)",
            "(line 44,col 9)-(line 44,col 44)",
            "(line 45,col 9)-(line 45,col 32)",
            "(line 47,col 9)-(line 47,col 44)",
            "(line 48,col 9)-(line 48,col 81)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.NodeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/NodeTest.java",
        "signature": "org.jsoup.nodes.NodeTest.testReplace()",
        "snippet": "    @Test public void testReplace() {\n        Document doc = Jsoup.parse(\"<p>One <span>two</span> three</p>\");\n        Element p = doc.select(\"p\").first();\n        Element insert = doc.createElement(\"em\").text(\"foo\");\n        p.childNode(1).replaceWith(insert);\n        \n        assertEquals(\"One <em>foo</em> three\", p.html());\n    }",
        "begin_line": 51,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 72)",
            "(line 53,col 9)-(line 53,col 44)",
            "(line 54,col 9)-(line 54,col 61)",
            "(line 55,col 9)-(line 55,col 43)",
            "(line 57,col 9)-(line 57,col 57)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.NodeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/NodeTest.java",
        "signature": "org.jsoup.nodes.NodeTest.ownerDocument()",
        "snippet": "    @Test public void ownerDocument() {\n        Document doc = Jsoup.parse(\"<p>Hello\");\n        Element p = doc.select(\"p\").first();\n        assertTrue(p.ownerDocument() == doc);\n        assertTrue(doc.ownerDocument() == doc);\n        assertNull(doc.parent());\n    }",
        "begin_line": 60,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 47)",
            "(line 62,col 9)-(line 62,col 44)",
            "(line 63,col 9)-(line 63,col 45)",
            "(line 64,col 9)-(line 64,col 47)",
            "(line 65,col 9)-(line 65,col 33)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTest.java",
        "signature": "org.jsoup.nodes.DocumentTest.setTextPreservesDocumentStructure()",
        "snippet": "    @Test public void setTextPreservesDocumentStructure() {\n        Document doc = Jsoup.parse(\"<p>Hello</p>\");\n        doc.text(\"Replaced\");\n        assertEquals(\"Replaced\", doc.text());\n        assertEquals(\"Replaced\", doc.body().text());\n        assertEquals(1, doc.select(\"head\").size());\n    }",
        "begin_line": 14,
        "end_line": 20,
        "comment": "",
        "child_ranges": [
            "(line 15,col 9)-(line 15,col 51)",
            "(line 16,col 9)-(line 16,col 29)",
            "(line 17,col 9)-(line 17,col 45)",
            "(line 18,col 9)-(line 18,col 52)",
            "(line 19,col 9)-(line 19,col 51)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTest.java",
        "signature": "org.jsoup.nodes.DocumentTest.testTitles()",
        "snippet": "    @Test public void testTitles() {\n        Document noTitle = Jsoup.parse(\"<p>Hello</p>\");\n        Document withTitle = Jsoup.parse(\"<title>First</title><title>Ignore</title><p>Hello</p>\");\n        \n        assertEquals(\"\", noTitle.title());\n        noTitle.title(\"Hello\");\n        assertEquals(\"Hello\", noTitle.title());\n        assertEquals(\"Hello\", noTitle.select(\"title\").first().text());\n        \n        assertEquals(\"First\", withTitle.title());\n        withTitle.title(\"Hello\");\n        assertEquals(\"Hello\", withTitle.title());\n        assertEquals(\"Hello\", withTitle.select(\"title\").first().text());\n    }",
        "begin_line": 22,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 55)",
            "(line 24,col 9)-(line 24,col 98)",
            "(line 26,col 9)-(line 26,col 42)",
            "(line 27,col 9)-(line 27,col 31)",
            "(line 28,col 9)-(line 28,col 47)",
            "(line 29,col 9)-(line 29,col 70)",
            "(line 31,col 9)-(line 31,col 49)",
            "(line 32,col 9)-(line 32,col 33)",
            "(line 33,col 9)-(line 33,col 49)",
            "(line 34,col 9)-(line 34,col 72)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTest.java",
        "signature": "org.jsoup.nodes.DocumentTest.testOutputEncoding()",
        "snippet": "    @Test public void testOutputEncoding() {\n        Document doc = Jsoup.parse(\"<p title=\u03c0>\u03c0 & < > </p>\");\n        // default is utf-8\n        assertEquals(\"<p title=\\\"\u03c0\\\">\u03c0 &amp; &lt; &gt; </p>\", doc.body().html());\n        assertEquals(\"UTF-8\", doc.outputSettings().charset().displayName());\n\n        doc.outputSettings().charset(\"ascii\");\n        assertEquals(Entities.EscapeMode.base, doc.outputSettings().escapeMode());\n        assertEquals(\"<p title=\\\"&#960;\\\">&#960; &amp; &lt; &gt; </p>\", doc.body().html());\n\n        doc.outputSettings().escapeMode(Entities.EscapeMode.extended);\n        assertEquals(\"<p title=\\\"&pi;\\\">&pi; &amp; &lt; &gt; </p>\", doc.body().html());\n    }",
        "begin_line": 37,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 62)",
            "(line 40,col 9)-(line 40,col 81)",
            "(line 41,col 9)-(line 41,col 76)",
            "(line 43,col 9)-(line 43,col 46)",
            "(line 44,col 9)-(line 44,col 82)",
            "(line 45,col 9)-(line 45,col 91)",
            "(line 47,col 9)-(line 47,col 70)",
            "(line 48,col 9)-(line 48,col 87)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTest.java",
        "signature": "org.jsoup.nodes.DocumentTest.testXhtmlReferences()",
        "snippet": "    @Test public void testXhtmlReferences() {\n        Document doc = Jsoup.parse(\"&lt; &gt; &amp; &quot; &apos; &times;\");\n        doc.outputSettings().escapeMode(Entities.EscapeMode.xhtml);\n        assertEquals(\"&lt; &gt; &amp; &quot; &apos; \u00d7\", doc.body().html());\n    }",
        "begin_line": 51,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 76)",
            "(line 53,col 9)-(line 53,col 67)",
            "(line 54,col 9)-(line 54,col 75)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTest.java",
        "signature": "org.jsoup.nodes.DocumentTest.testNormalisesStructure()",
        "snippet": "    @Test public void testNormalisesStructure() {\n        Document doc = Jsoup.parse(\"<html><head><script>one</script><noscript><p>two</p></noscript></head><body><p>three</p></body></html>\");\n        assertEquals(\"<html><head><script>one</script><noscript></noscript></head><body><p>two</p><p>three</p></body></html>\", TextUtil.stripNewlines(doc.html()));\n    }",
        "begin_line": 57,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 58,col 9)-(line 58,col 141)",
            "(line 59,col 9)-(line 59,col 163)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/EntitiesTest.java",
        "signature": "org.jsoup.nodes.EntitiesTest.escape()",
        "snippet": "    @Test public void escape() {\n        String text = \"Hello &<> \u00c5 \u00e5 \u03c0 \u65b0 there\";\n        String escapedAscii = Entities.escape(text, Charset.forName(\"ascii\").newEncoder(), Entities.EscapeMode.base);\n        String escapedAsciiFull = Entities.escape(text, Charset.forName(\"ascii\").newEncoder(), Entities.EscapeMode.extended);\n        String escapedAsciiXhtml = Entities.escape(text, Charset.forName(\"ascii\").newEncoder(), Entities.EscapeMode.xhtml);\n        String escapedUtf = Entities.escape(text, Charset.forName(\"UTF-8\").newEncoder(), Entities.EscapeMode.base);\n\n        assertEquals(\"Hello &amp;&lt;&gt; &Aring; &aring; &#960; &#26032; there\", escapedAscii);\n        assertEquals(\"Hello &amp;&lt;&gt; &angst; &aring; &pi; &#26032; there\", escapedAsciiFull);\n        assertEquals(\"Hello &amp;&lt;&gt; &#197; &#229; &#960; &#26032; there\", escapedAsciiXhtml);\n        assertEquals(\"Hello &amp;&lt;&gt; &Aring; &aring; \u03c0 \u65b0 there\", escapedUtf);\n        // odd that it's defined as aring in base but angst in full\n    }",
        "begin_line": 11,
        "end_line": 23,
        "comment": "",
        "child_ranges": [
            "(line 12,col 9)-(line 12,col 48)",
            "(line 13,col 9)-(line 13,col 117)",
            "(line 14,col 9)-(line 14,col 125)",
            "(line 15,col 9)-(line 15,col 123)",
            "(line 16,col 9)-(line 16,col 115)",
            "(line 18,col 9)-(line 18,col 96)",
            "(line 19,col 9)-(line 19,col 98)",
            "(line 20,col 9)-(line 20,col 99)",
            "(line 21,col 9)-(line 21,col 82)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/EntitiesTest.java",
        "signature": "org.jsoup.nodes.EntitiesTest.unescape()",
        "snippet": "    @Test public void unescape() {\n        String text = \"Hello &amp;&LT&gt; &angst &#960; &#960 &#x65B0; there &!\";\n        assertEquals(\"Hello &<> \u00c5 \u03c0 \u03c0 \u65b0 there &!\", Entities.unescape(text));\n\n        assertEquals(\"&0987654321; &unknown\", Entities.unescape(\"&0987654321; &unknown\"));\n    }",
        "begin_line": 25,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 81)",
            "(line 27,col 9)-(line 27,col 76)",
            "(line 29,col 9)-(line 29,col 90)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/EntitiesTest.java",
        "signature": "org.jsoup.nodes.EntitiesTest.caseSensitive()",
        "snippet": "    @Test public void caseSensitive() {\n        String unescaped = \"\u00dc \u00fc & &\";\n        assertEquals(\"&Uuml; &uuml; &amp; &amp;\", Entities.escape(unescaped, Charset.forName(\"ascii\").newEncoder(), Entities.EscapeMode.extended));\n        \n        String escaped = \"&Uuml; &uuml; &amp; &AMP\";\n        assertEquals(\"\u00dc \u00fc & &\", Entities.unescape(escaped));\n    }",
        "begin_line": 32,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 37)",
            "(line 34,col 9)-(line 34,col 147)",
            "(line 36,col 9)-(line 36,col 52)",
            "(line 37,col 9)-(line 37,col 60)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/EntitiesTest.java",
        "signature": "org.jsoup.nodes.EntitiesTest.quoteReplacements()",
        "snippet": "    @Test public void quoteReplacements() {\n        String escaped = \"&#92; &#36;\";\n        String unescaped = \"\\\\ $\";\n        \n        assertEquals(unescaped, Entities.unescape(escaped));\n    }",
        "begin_line": 40,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 39)",
            "(line 42,col 9)-(line 42,col 34)",
            "(line 44,col 9)-(line 44,col 60)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testByTag()",
        "snippet": "    @Test public void testByTag() {\n        Elements els = Jsoup.parse(\"<div id=1><div id=2><p>Hello</p></div></div><div id=3>\").select(\"div\");\n        assertEquals(3, els.size());\n        assertEquals(\"1\", els.get(0).id());\n        assertEquals(\"2\", els.get(1).id());\n        assertEquals(\"3\", els.get(2).id());\n\n        Elements none = Jsoup.parse(\"<div id=1><div id=2><p>Hello</p></div></div><div id=3>\").select(\"span\");\n        assertEquals(0, none.size());\n    }",
        "begin_line": 14,
        "end_line": 23,
        "comment": "",
        "child_ranges": [
            "(line 15,col 9)-(line 15,col 107)",
            "(line 16,col 9)-(line 16,col 36)",
            "(line 17,col 9)-(line 17,col 43)",
            "(line 18,col 9)-(line 18,col 43)",
            "(line 19,col 9)-(line 19,col 43)",
            "(line 21,col 9)-(line 21,col 109)",
            "(line 22,col 9)-(line 22,col 37)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testById()",
        "snippet": "    @Test public void testById() {\n        Elements els = Jsoup.parse(\"<div><p id=foo>Hello</p><p id=foo>Foo two!</p></div>\").select(\"#foo\");\n        assertEquals(1, els.size());\n        assertEquals(\"Hello\", els.get(0).text());\n\n        Elements none = Jsoup.parse(\"<div id=1></div>\").select(\"#foo\");\n        assertEquals(0, none.size());\n    }",
        "begin_line": 25,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 106)",
            "(line 27,col 9)-(line 27,col 36)",
            "(line 28,col 9)-(line 28,col 49)",
            "(line 30,col 9)-(line 30,col 71)",
            "(line 31,col 9)-(line 31,col 37)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testByClass()",
        "snippet": "    @Test public void testByClass() {\n        Elements els = Jsoup.parse(\"<p id=0 class='one two'><p id=1 class='one'><p id=2 class='two'>\").select(\"p.one\");\n        assertEquals(2, els.size());\n        assertEquals(\"0\", els.get(0).id());\n        assertEquals(\"1\", els.get(1).id());\n\n        Elements none = Jsoup.parse(\"<div class='one'></div>\").select(\".foo\");\n        assertEquals(0, none.size());\n\n        Elements els2 = Jsoup.parse(\"<div class='one-two'></div>\").select(\".one-two\");\n        assertEquals(1, els2.size());\n    }",
        "begin_line": 34,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 119)",
            "(line 36,col 9)-(line 36,col 36)",
            "(line 37,col 9)-(line 37,col 43)",
            "(line 38,col 9)-(line 38,col 43)",
            "(line 40,col 9)-(line 40,col 78)",
            "(line 41,col 9)-(line 41,col 37)",
            "(line 43,col 9)-(line 43,col 86)",
            "(line 44,col 9)-(line 44,col 37)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testByAttribute()",
        "snippet": "    @Test public void testByAttribute() {\n        String h = \"<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Bam /><div title=SLAM /><div />\";\n        Document doc = Jsoup.parse(h);\n\n        Elements withTitle = doc.select(\"[title]\");\n        assertEquals(4, withTitle.size());\n\n        Elements foo = doc.select(\"[title=foo]\");\n        assertEquals(1, foo.size());\n\n        Elements not = doc.select(\"div[title!=bar]\");\n        assertEquals(5, not.size());\n        assertEquals(\"Foo\", not.first().attr(\"title\"));\n\n        Elements starts = doc.select(\"[title^=ba]\");\n        assertEquals(2, starts.size());\n        assertEquals(\"Bar\", starts.first().attr(\"title\"));\n        assertEquals(\"Bam\", starts.last().attr(\"title\"));\n\n        Elements ends = doc.select(\"[title$=am]\");\n        assertEquals(2, ends.size());\n        assertEquals(\"Bam\", ends.first().attr(\"title\"));\n        assertEquals(\"SLAM\", ends.last().attr(\"title\"));\n\n        Elements contains = doc.select(\"[title*=a]\");\n        assertEquals(3, contains.size());\n        assertEquals(\"Bar\", contains.first().attr(\"title\"));\n        assertEquals(\"SLAM\", contains.last().attr(\"title\"));\n    }",
        "begin_line": 47,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 115)",
            "(line 49,col 9)-(line 49,col 38)",
            "(line 51,col 9)-(line 51,col 51)",
            "(line 52,col 9)-(line 52,col 42)",
            "(line 54,col 9)-(line 54,col 49)",
            "(line 55,col 9)-(line 55,col 36)",
            "(line 57,col 9)-(line 57,col 53)",
            "(line 58,col 9)-(line 58,col 36)",
            "(line 59,col 9)-(line 59,col 55)",
            "(line 61,col 9)-(line 61,col 52)",
            "(line 62,col 9)-(line 62,col 39)",
            "(line 63,col 9)-(line 63,col 58)",
            "(line 64,col 9)-(line 64,col 57)",
            "(line 66,col 9)-(line 66,col 50)",
            "(line 67,col 9)-(line 67,col 37)",
            "(line 68,col 9)-(line 68,col 56)",
            "(line 69,col 9)-(line 69,col 56)",
            "(line 71,col 9)-(line 71,col 53)",
            "(line 72,col 9)-(line 72,col 41)",
            "(line 73,col 9)-(line 73,col 60)",
            "(line 74,col 9)-(line 74,col 60)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testNamespacedTag()",
        "snippet": "    @Test public void testNamespacedTag() {\n        Document doc = Jsoup.parse(\"<div><abc:def id=1>Hello</abc:def></div> <abc:def class=bold id=2>There</abc:def>\");\n        Elements byTag = doc.select(\"abc|def\");\n        assertEquals(2, byTag.size());\n        assertEquals(\"1\", byTag.first().id());\n        assertEquals(\"2\", byTag.last().id());\n        \n        Elements byAttr = doc.select(\".bold\");\n        assertEquals(1, byAttr.size());\n        assertEquals(\"2\", byAttr.last().id());\n        \n        Elements byTagAttr = doc.select(\"abc|def.bold\");\n        assertEquals(1, byTagAttr.size());\n        assertEquals(\"2\", byTagAttr.last().id());\n        \n        Elements byContains = doc.select(\"abc|def:contains(e)\");\n        assertEquals(2, byContains.size());\n        assertEquals(\"1\", byContains.first().id());\n        assertEquals(\"2\", byContains.last().id());\n    }",
        "begin_line": 77,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 120)",
            "(line 79,col 9)-(line 79,col 47)",
            "(line 80,col 9)-(line 80,col 38)",
            "(line 81,col 9)-(line 81,col 46)",
            "(line 82,col 9)-(line 82,col 45)",
            "(line 84,col 9)-(line 84,col 46)",
            "(line 85,col 9)-(line 85,col 39)",
            "(line 86,col 9)-(line 86,col 46)",
            "(line 88,col 9)-(line 88,col 56)",
            "(line 89,col 9)-(line 89,col 42)",
            "(line 90,col 9)-(line 90,col 49)",
            "(line 92,col 9)-(line 92,col 64)",
            "(line 93,col 9)-(line 93,col 43)",
            "(line 94,col 9)-(line 94,col 51)",
            "(line 95,col 9)-(line 95,col 50)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testByAttributeStarting()",
        "snippet": "    @Test public void testByAttributeStarting() {\n        Document doc = Jsoup.parse(\"<div id=1 data-name=jsoup>Hello</div><p data-val=5 id=2>There</p><p id=3>No</p>\");\n        Elements withData = doc.select(\"[^data-]\");\n        assertEquals(2, withData.size());\n        assertEquals(\"1\", withData.first().id());\n        assertEquals(\"2\", withData.last().id());\n\n        withData = doc.select(\"p[^data-]\");\n        assertEquals(1, withData.size());\n        assertEquals(\"2\", withData.first().id());\n    }",
        "begin_line": 98,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 118)",
            "(line 100,col 9)-(line 100,col 51)",
            "(line 101,col 9)-(line 101,col 41)",
            "(line 102,col 9)-(line 102,col 49)",
            "(line 103,col 9)-(line 103,col 48)",
            "(line 105,col 9)-(line 105,col 43)",
            "(line 106,col 9)-(line 106,col 41)",
            "(line 107,col 9)-(line 107,col 49)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testByAttributeRegex()",
        "snippet": "    @Test public void testByAttributeRegex() {\n        Document doc = Jsoup.parse(\"<p><img src=foo.png id=1><img src=bar.jpg id=2><img src=qux.JPEG id=3><img src=old.gif><img></p>\");\n        Elements imgs = doc.select(\"img[src~=(?i)\\\\.(png|jpe?g)]\");\n        assertEquals(3, imgs.size());\n        assertEquals(\"1\", imgs.get(0).id());\n        assertEquals(\"2\", imgs.get(1).id());\n        assertEquals(\"3\", imgs.get(2).id());\n    }",
        "begin_line": 110,
        "end_line": 117,
        "comment": "",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 135)",
            "(line 112,col 9)-(line 112,col 67)",
            "(line 113,col 9)-(line 113,col 37)",
            "(line 114,col 9)-(line 114,col 44)",
            "(line 115,col 9)-(line 115,col 44)",
            "(line 116,col 9)-(line 116,col 44)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testByAttributeRegexCharacterClass()",
        "snippet": "    @Test public void testByAttributeRegexCharacterClass() {\n        Document doc = Jsoup.parse(\"<p><img src=foo.png id=1><img src=bar.jpg id=2><img src=qux.JPEG id=3><img src=old.gif id=4></p>\");\n        Elements imgs = doc.select(\"img[src~=[o]]\");\n        assertEquals(2, imgs.size());\n        assertEquals(\"1\", imgs.get(0).id());\n        assertEquals(\"4\", imgs.get(1).id());\n    }",
        "begin_line": 119,
        "end_line": 125,
        "comment": "",
        "child_ranges": [
            "(line 120,col 9)-(line 120,col 135)",
            "(line 121,col 9)-(line 121,col 52)",
            "(line 122,col 9)-(line 122,col 37)",
            "(line 123,col 9)-(line 123,col 44)",
            "(line 124,col 9)-(line 124,col 44)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testAllElements()",
        "snippet": "    @Test public void testAllElements() {\n        String h = \"<div><p>Hello</p><p><b>there</b></p></div>\";\n        Document doc = Jsoup.parse(h);\n        Elements allDoc = doc.select(\"*\");\n        Elements allUnderDiv = doc.select(\"div *\");\n        assertEquals(8, allDoc.size());\n        assertEquals(3, allUnderDiv.size());\n        assertEquals(\"p\", allUnderDiv.first().tagName());\n    }",
        "begin_line": 127,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 64)",
            "(line 129,col 9)-(line 129,col 38)",
            "(line 130,col 9)-(line 130,col 42)",
            "(line 131,col 9)-(line 131,col 51)",
            "(line 132,col 9)-(line 132,col 39)",
            "(line 133,col 9)-(line 133,col 44)",
            "(line 134,col 9)-(line 134,col 57)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testAllWithClass()",
        "snippet": "    @Test public void testAllWithClass() {\n        String h = \"<p class=first>One<p class=first>Two<p>Three\";\n        Document doc = Jsoup.parse(h);\n        Elements ps = doc.select(\"*.first\");\n        assertEquals(2, ps.size());\n    }",
        "begin_line": 137,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 138,col 9)-(line 138,col 66)",
            "(line 139,col 9)-(line 139,col 38)",
            "(line 140,col 9)-(line 140,col 44)",
            "(line 141,col 9)-(line 141,col 35)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testGroupOr()",
        "snippet": "    @Test public void testGroupOr() {\n        String h = \"<div title=foo /><div title=bar /><div /><p></p><img /><span title=qux>\";\n        Document doc = Jsoup.parse(h);\n        Elements els = doc.select(\"p,div,[title]\");\n\n        assertEquals(5, els.size());\n        assertEquals(\"p\", els.get(0).tagName());\n        assertEquals(\"div\", els.get(1).tagName());\n        assertEquals(\"foo\", els.get(1).attr(\"title\"));\n        assertEquals(\"div\", els.get(2).tagName());\n        assertEquals(\"bar\", els.get(2).attr(\"title\"));\n        assertEquals(\"div\", els.get(3).tagName());\n        assertTrue(els.get(3).attr(\"title\").length() == 0); // missing attributes come back as empty string\n        assertFalse(els.get(3).hasAttr(\"title\"));\n        assertEquals(\"span\", els.get(4).tagName());\n    }",
        "begin_line": 144,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 145,col 9)-(line 145,col 93)",
            "(line 146,col 9)-(line 146,col 38)",
            "(line 147,col 9)-(line 147,col 51)",
            "(line 149,col 9)-(line 149,col 36)",
            "(line 150,col 9)-(line 150,col 48)",
            "(line 151,col 9)-(line 151,col 50)",
            "(line 152,col 9)-(line 152,col 54)",
            "(line 153,col 9)-(line 153,col 50)",
            "(line 154,col 9)-(line 154,col 54)",
            "(line 155,col 9)-(line 155,col 50)",
            "(line 156,col 9)-(line 156,col 59)",
            "(line 157,col 9)-(line 157,col 49)",
            "(line 158,col 9)-(line 158,col 51)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testGroupOrAttribute()",
        "snippet": "    @Test public void testGroupOrAttribute() {\n        String h = \"<div id=1 /><div id=2 /><div title=foo /><div title=bar />\";\n        Elements els = Jsoup.parse(h).select(\"[id],[title=foo]\");\n\n        assertEquals(3, els.size());\n        assertEquals(\"1\", els.get(0).id());\n        assertEquals(\"2\", els.get(1).id());\n        assertEquals(\"foo\", els.get(2).attr(\"title\"));\n    }",
        "begin_line": 161,
        "end_line": 169,
        "comment": "",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 80)",
            "(line 163,col 9)-(line 163,col 65)",
            "(line 165,col 9)-(line 165,col 36)",
            "(line 166,col 9)-(line 166,col 43)",
            "(line 167,col 9)-(line 167,col 43)",
            "(line 168,col 9)-(line 168,col 54)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.descendant()",
        "snippet": "    @Test public void descendant() {\n        String h = \"<div class=head><p class=first>Hello</p><p>There</p></div><p>None</p>\";\n        Document doc = Jsoup.parse(h);\n        Elements els = doc.select(\".head p\");\n        assertEquals(2, els.size());\n        assertEquals(\"Hello\", els.get(0).text());\n        assertEquals(\"There\", els.get(1).text());\n\n        Elements p = doc.select(\"p.first\");\n        assertEquals(1, p.size());\n        assertEquals(\"Hello\", p.get(0).text());\n\n        Elements empty = doc.select(\"p .first\"); // self, not descend, should not match\n        assertEquals(0, empty.size());\n    }",
        "begin_line": 171,
        "end_line": 185,
        "comment": "",
        "child_ranges": [
            "(line 172,col 9)-(line 172,col 91)",
            "(line 173,col 9)-(line 173,col 38)",
            "(line 174,col 9)-(line 174,col 45)",
            "(line 175,col 9)-(line 175,col 36)",
            "(line 176,col 9)-(line 176,col 49)",
            "(line 177,col 9)-(line 177,col 49)",
            "(line 179,col 9)-(line 179,col 43)",
            "(line 180,col 9)-(line 180,col 34)",
            "(line 181,col 9)-(line 181,col 47)",
            "(line 183,col 9)-(line 183,col 48)",
            "(line 184,col 9)-(line 184,col 38)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.and()",
        "snippet": "    @Test public void and() {\n        String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\";\n        Document doc = Jsoup.parse(h);\n        \n        Elements div = doc.select(\"div.foo\");\n        assertEquals(1, div.size());\n        assertEquals(\"div\", div.first().tagName());\n        \n        Elements p = doc.select(\"div .foo\"); // space indicates like \"div *.foo\"\n        assertEquals(1, p.size());\n        assertEquals(\"p\", p.first().tagName());\n        \n        Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); // very specific!\n        assertEquals(1, div2.size());\n        assertEquals(\"div\", div2.first().tagName());\n        \n        Elements p2 = doc.select(\"div *.foo\"); // space indicates like \"div *.foo\"\n        assertEquals(1, p2.size());\n        assertEquals(\"p\", p2.first().tagName());\n    }",
        "begin_line": 187,
        "end_line": 206,
        "comment": "",
        "child_ranges": [
            "(line 188,col 9)-(line 188,col 104)",
            "(line 189,col 9)-(line 189,col 38)",
            "(line 191,col 9)-(line 191,col 45)",
            "(line 192,col 9)-(line 192,col 36)",
            "(line 193,col 9)-(line 193,col 51)",
            "(line 195,col 9)-(line 195,col 44)",
            "(line 196,col 9)-(line 196,col 34)",
            "(line 197,col 9)-(line 197,col 47)",
            "(line 199,col 9)-(line 199,col 73)",
            "(line 200,col 9)-(line 200,col 37)",
            "(line 201,col 9)-(line 201,col 52)",
            "(line 203,col 9)-(line 203,col 46)",
            "(line 204,col 9)-(line 204,col 35)",
            "(line 205,col 9)-(line 205,col 48)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.deeperDescendant()",
        "snippet": "    @Test public void deeperDescendant() {\n        String h = \"<div class=head><p><span class=first>Hello</div><div class=head><p class=first><span>Another</span><p>Again</div>\";\n        Elements els = Jsoup.parse(h).select(\"div p .first\");\n        assertEquals(1, els.size());\n        assertEquals(\"Hello\", els.first().text());\n        assertEquals(\"span\", els.first().tagName());\n    }",
        "begin_line": 208,
        "end_line": 214,
        "comment": "",
        "child_ranges": [
            "(line 209,col 9)-(line 209,col 135)",
            "(line 210,col 9)-(line 210,col 61)",
            "(line 211,col 9)-(line 211,col 36)",
            "(line 212,col 9)-(line 212,col 50)",
            "(line 213,col 9)-(line 213,col 52)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.parentChildElement()",
        "snippet": "    @Test public void parentChildElement() {\n        String h = \"<div id=1><div id=2><div id = 3></div></div></div><div id=4></div>\";\n        Document doc = Jsoup.parse(h);\n\n        Elements divs = doc.select(\"div > div\");\n        assertEquals(2, divs.size());\n        assertEquals(\"2\", divs.get(0).id()); // 2 is child of 1\n        assertEquals(\"3\", divs.get(1).id()); // 3 is child of 2\n\n        Elements div2 = doc.select(\"div#1 > div\");\n        assertEquals(1, div2.size());\n        assertEquals(\"2\", div2.get(0).id());\n    }",
        "begin_line": 216,
        "end_line": 228,
        "comment": "",
        "child_ranges": [
            "(line 217,col 9)-(line 217,col 88)",
            "(line 218,col 9)-(line 218,col 38)",
            "(line 220,col 9)-(line 220,col 48)",
            "(line 221,col 9)-(line 221,col 37)",
            "(line 222,col 9)-(line 222,col 44)",
            "(line 223,col 9)-(line 223,col 44)",
            "(line 225,col 9)-(line 225,col 50)",
            "(line 226,col 9)-(line 226,col 37)",
            "(line 227,col 9)-(line 227,col 44)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.parentWithClassChild()",
        "snippet": "    @Test public void parentWithClassChild() {\n        String h = \"<h1 class=foo><a href=1 /></h1><h1 class=foo><a href=2 class=bar /></h1><h1><a href=3 /></h1>\";\n        Document doc = Jsoup.parse(h);\n        \n        Elements allAs = doc.select(\"h1 > a\");\n        assertEquals(3, allAs.size());\n        assertEquals(\"a\", allAs.first().tagName());\n        \n        Elements fooAs = doc.select(\"h1.foo > a\");\n        assertEquals(2, fooAs.size());\n        assertEquals(\"a\", fooAs.first().tagName());\n        \n        Elements barAs = doc.select(\"h1.foo > a.bar\");\n        assertEquals(1, barAs.size());\n    }",
        "begin_line": 230,
        "end_line": 244,
        "comment": "",
        "child_ranges": [
            "(line 231,col 9)-(line 231,col 115)",
            "(line 232,col 9)-(line 232,col 38)",
            "(line 234,col 9)-(line 234,col 46)",
            "(line 235,col 9)-(line 235,col 38)",
            "(line 236,col 9)-(line 236,col 51)",
            "(line 238,col 9)-(line 238,col 50)",
            "(line 239,col 9)-(line 239,col 38)",
            "(line 240,col 9)-(line 240,col 51)",
            "(line 242,col 9)-(line 242,col 54)",
            "(line 243,col 9)-(line 243,col 38)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.parentChildStar()",
        "snippet": "    @Test public void parentChildStar() {\n        String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\";\n        Document doc = Jsoup.parse(h);\n        Elements divChilds = doc.select(\"div > *\");\n        assertEquals(3, divChilds.size());\n        assertEquals(\"p\", divChilds.get(0).tagName());\n        assertEquals(\"p\", divChilds.get(1).tagName());\n        assertEquals(\"span\", divChilds.get(2).tagName());\n    }",
        "begin_line": 246,
        "end_line": 254,
        "comment": "",
        "child_ranges": [
            "(line 247,col 9)-(line 247,col 96)",
            "(line 248,col 9)-(line 248,col 38)",
            "(line 249,col 9)-(line 249,col 51)",
            "(line 250,col 9)-(line 250,col 42)",
            "(line 251,col 9)-(line 251,col 54)",
            "(line 252,col 9)-(line 252,col 54)",
            "(line 253,col 9)-(line 253,col 57)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.multiChildDescent()",
        "snippet": "    @Test public void multiChildDescent() {\n        String h = \"<div id=foo><h1 class=bar><a href=http://example.com/>One</a></h1></div>\";\n        Document doc = Jsoup.parse(h);\n        Elements els = doc.select(\"div#foo > h1.bar > a[href*=example]\");\n        assertEquals(1, els.size());\n        assertEquals(\"a\", els.first().tagName());\n    }",
        "begin_line": 256,
        "end_line": 262,
        "comment": "",
        "child_ranges": [
            "(line 257,col 9)-(line 257,col 94)",
            "(line 258,col 9)-(line 258,col 38)",
            "(line 259,col 9)-(line 259,col 73)",
            "(line 260,col 9)-(line 260,col 36)",
            "(line 261,col 9)-(line 261,col 49)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.caseInsensitive()",
        "snippet": "    @Test public void caseInsensitive() {\n        String h = \"<dIv tItle=bAr><div>\"; // mixed case so a simple toLowerCase() on value doesn't catch\n        Document doc = Jsoup.parse(h);\n\n        assertEquals(2, doc.select(\"DIV\").size());\n        assertEquals(1, doc.select(\"DIV[TITLE]\").size());\n        assertEquals(1, doc.select(\"DIV[TITLE=BAR]\").size());\n        assertEquals(0, doc.select(\"DIV[TITLE=BARBARELLA\").size());\n    }",
        "begin_line": 264,
        "end_line": 272,
        "comment": "",
        "child_ranges": [
            "(line 265,col 9)-(line 265,col 42)",
            "(line 266,col 9)-(line 266,col 38)",
            "(line 268,col 9)-(line 268,col 50)",
            "(line 269,col 9)-(line 269,col 57)",
            "(line 270,col 9)-(line 270,col 61)",
            "(line 271,col 9)-(line 271,col 67)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.adjacentSiblings()",
        "snippet": "    @Test public void adjacentSiblings() {\n        String h = \"<ol><li>One<li>Two<li>Three</ol>\";\n        Document doc = Jsoup.parse(h);\n        Elements sibs = doc.select(\"li + li\");\n        assertEquals(2, sibs.size());\n        assertEquals(\"Two\", sibs.get(0).text());\n        assertEquals(\"Three\", sibs.get(1).text());\n    }",
        "begin_line": 274,
        "end_line": 281,
        "comment": "",
        "child_ranges": [
            "(line 275,col 9)-(line 275,col 54)",
            "(line 276,col 9)-(line 276,col 38)",
            "(line 277,col 9)-(line 277,col 46)",
            "(line 278,col 9)-(line 278,col 37)",
            "(line 279,col 9)-(line 279,col 48)",
            "(line 280,col 9)-(line 280,col 50)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.adjacentSiblingsWithId()",
        "snippet": "    @Test public void adjacentSiblingsWithId() {\n        String h = \"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\";\n        Document doc = Jsoup.parse(h);\n        Elements sibs = doc.select(\"li#1 + li#2\");\n        assertEquals(1, sibs.size());\n        assertEquals(\"Two\", sibs.get(0).text());\n    }",
        "begin_line": 283,
        "end_line": 289,
        "comment": "",
        "child_ranges": [
            "(line 284,col 9)-(line 284,col 69)",
            "(line 285,col 9)-(line 285,col 38)",
            "(line 286,col 9)-(line 286,col 50)",
            "(line 287,col 9)-(line 287,col 37)",
            "(line 288,col 9)-(line 288,col 48)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.notAdjacent()",
        "snippet": "    @Test public void notAdjacent() {\n        String h = \"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\";\n        Document doc = Jsoup.parse(h);\n        Elements sibs = doc.select(\"li#1 + li#3\");\n        assertEquals(0, sibs.size());\n    }",
        "begin_line": 291,
        "end_line": 296,
        "comment": "",
        "child_ranges": [
            "(line 292,col 9)-(line 292,col 69)",
            "(line 293,col 9)-(line 293,col 38)",
            "(line 294,col 9)-(line 294,col 50)",
            "(line 295,col 9)-(line 295,col 37)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.mixCombinator()",
        "snippet": "    @Test public void mixCombinator() {\n        String h = \"<div class=foo><ol><li>One<li>Two<li>Three</ol></div>\";\n        Document doc = Jsoup.parse(h);\n        Elements sibs = doc.select(\"body > div.foo li + li\");\n        \n        assertEquals(2, sibs.size());\n        assertEquals(\"Two\", sibs.get(0).text());\n        assertEquals(\"Three\", sibs.get(1).text());\n    }",
        "begin_line": 298,
        "end_line": 306,
        "comment": "",
        "child_ranges": [
            "(line 299,col 9)-(line 299,col 75)",
            "(line 300,col 9)-(line 300,col 38)",
            "(line 301,col 9)-(line 301,col 61)",
            "(line 303,col 9)-(line 303,col 37)",
            "(line 304,col 9)-(line 304,col 48)",
            "(line 305,col 9)-(line 305,col 50)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.mixCombinatorGroup()",
        "snippet": "    @Test public void mixCombinatorGroup() {\n        String h = \"<div class=foo><ol><li>One<li>Two<li>Three</ol></div>\";\n        Document doc = Jsoup.parse(h);\n        Elements els = doc.select(\".foo > ol, ol > li + li\");\n        \n        assertEquals(3, els.size());\n        assertEquals(\"ol\", els.get(0).tagName());\n        assertEquals(\"Two\", els.get(1).text());\n        assertEquals(\"Three\", els.get(2).text());\n    }",
        "begin_line": 308,
        "end_line": 317,
        "comment": "",
        "child_ranges": [
            "(line 309,col 9)-(line 309,col 75)",
            "(line 310,col 9)-(line 310,col 38)",
            "(line 311,col 9)-(line 311,col 61)",
            "(line 313,col 9)-(line 313,col 36)",
            "(line 314,col 9)-(line 314,col 49)",
            "(line 315,col 9)-(line 315,col 47)",
            "(line 316,col 9)-(line 316,col 49)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.generalSiblings()",
        "snippet": "    @Test public void generalSiblings() {\n        String h = \"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\";\n        Document doc = Jsoup.parse(h);\n        Elements els = doc.select(\"#1 ~ #3\");\n        assertEquals(1, els.size());\n        assertEquals(\"Three\", els.first().text());\n    }",
        "begin_line": 319,
        "end_line": 325,
        "comment": "",
        "child_ranges": [
            "(line 320,col 9)-(line 320,col 69)",
            "(line 321,col 9)-(line 321,col 38)",
            "(line 322,col 9)-(line 322,col 45)",
            "(line 323,col 9)-(line 323,col 36)",
            "(line 324,col 9)-(line 324,col 50)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testCharactersInIdAndClass()",
        "snippet": "    @Test public void testCharactersInIdAndClass() {\n        // using CSS spec for identifiers (id and class): a-z0-9, -, _. NOT . (which is OK in html spec, but not css)\n        String h = \"<div><p id='a1-foo_bar'>One</p><p class='b2-qux_bif'>Two</p></div>\";\n        Document doc = Jsoup.parse(h);\n        \n        Element el1 = doc.getElementById(\"a1-foo_bar\");\n        assertEquals(\"One\", el1.text());\n        Element el2 = doc.getElementsByClass(\"b2-qux_bif\").first();\n        assertEquals(\"Two\", el2.text());\n        \n        Element el3 = doc.select(\"#a1-foo_bar\").first();\n        assertEquals(\"One\", el3.text());\n        Element el4 = doc.select(\".b2-qux_bif\").first();\n        assertEquals(\"Two\", el4.text());\n    }",
        "begin_line": 328,
        "end_line": 342,
        "comment": " for http://github.com/jhy/jsoup/issues#issue/10",
        "child_ranges": [
            "(line 330,col 9)-(line 330,col 88)",
            "(line 331,col 9)-(line 331,col 38)",
            "(line 333,col 9)-(line 333,col 55)",
            "(line 334,col 9)-(line 334,col 40)",
            "(line 335,col 9)-(line 335,col 67)",
            "(line 336,col 9)-(line 336,col 40)",
            "(line 338,col 9)-(line 338,col 56)",
            "(line 339,col 9)-(line 339,col 40)",
            "(line 340,col 9)-(line 340,col 56)",
            "(line 341,col 9)-(line 341,col 40)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testSupportsLeadingCombinator()",
        "snippet": "    @Test public void testSupportsLeadingCombinator() {\n        String h = \"<div><p><span>One</span><span>Two</span></p></div>\";\n        Document doc = Jsoup.parse(h);\n        \n        Element p = doc.select(\"div > p\").first();\n        Elements spans = p.select(\"> span\");\n        assertEquals(2, spans.size());\n        assertEquals(\"One\", spans.first().text());\n        \n        // make sure doesn't get nested\n        h = \"<div id=1><div id=2><div id=3></div></div></div>\";\n        doc = Jsoup.parse(h);\n        Element div = doc.select(\"div\").select(\" > div\").first();\n        assertEquals(\"2\", div.id());\n    }",
        "begin_line": 345,
        "end_line": 359,
        "comment": " for http://github.com/jhy/jsoup/issues#issue/13",
        "child_ranges": [
            "(line 346,col 9)-(line 346,col 72)",
            "(line 347,col 9)-(line 347,col 38)",
            "(line 349,col 9)-(line 349,col 50)",
            "(line 350,col 9)-(line 350,col 44)",
            "(line 351,col 9)-(line 351,col 38)",
            "(line 352,col 9)-(line 352,col 50)",
            "(line 355,col 9)-(line 355,col 63)",
            "(line 356,col 9)-(line 356,col 29)",
            "(line 357,col 9)-(line 357,col 65)",
            "(line 358,col 9)-(line 358,col 36)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testPseudoLessThan()",
        "snippet": "    @Test public void testPseudoLessThan() {\n        Document doc = Jsoup.parse(\"<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>\");\n        Elements ps = doc.select(\"div p:lt(2)\");\n        assertEquals(3, ps.size());\n        assertEquals(\"One\", ps.get(0).text());\n        assertEquals(\"Two\", ps.get(1).text());\n        assertEquals(\"Four\", ps.get(2).text());\n    }",
        "begin_line": 361,
        "end_line": 368,
        "comment": "",
        "child_ranges": [
            "(line 362,col 9)-(line 362,col 99)",
            "(line 363,col 9)-(line 363,col 48)",
            "(line 364,col 9)-(line 364,col 35)",
            "(line 365,col 9)-(line 365,col 46)",
            "(line 366,col 9)-(line 366,col 46)",
            "(line 367,col 9)-(line 367,col 47)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testPseudoGreaterThan()",
        "snippet": "    @Test public void testPseudoGreaterThan() {\n        Document doc = Jsoup.parse(\"<div><p>One</p><p>Two</p><p>Three</p></div><div><p>Four</p>\");\n        Elements ps = doc.select(\"div p:gt(0)\");\n        assertEquals(2, ps.size());\n        assertEquals(\"Two\", ps.get(0).text());\n        assertEquals(\"Three\", ps.get(1).text());\n    }",
        "begin_line": 370,
        "end_line": 376,
        "comment": "",
        "child_ranges": [
            "(line 371,col 9)-(line 371,col 98)",
            "(line 372,col 9)-(line 372,col 48)",
            "(line 373,col 9)-(line 373,col 35)",
            "(line 374,col 9)-(line 374,col 46)",
            "(line 375,col 9)-(line 375,col 48)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testPseudoEquals()",
        "snippet": "    @Test public void testPseudoEquals() {\n        Document doc = Jsoup.parse(\"<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>\");\n        Elements ps = doc.select(\"div p:eq(0)\");\n        assertEquals(2, ps.size());\n        assertEquals(\"One\", ps.get(0).text());\n        assertEquals(\"Four\", ps.get(1).text());\n        \n        Elements ps2 = doc.select(\"div:eq(0) p:eq(0)\");\n        assertEquals(1, ps2.size());\n        assertEquals(\"One\", ps2.get(0).text());\n        assertEquals(\"p\", ps2.get(0).tagName());\n    }",
        "begin_line": 378,
        "end_line": 389,
        "comment": "",
        "child_ranges": [
            "(line 379,col 9)-(line 379,col 99)",
            "(line 380,col 9)-(line 380,col 48)",
            "(line 381,col 9)-(line 381,col 35)",
            "(line 382,col 9)-(line 382,col 46)",
            "(line 383,col 9)-(line 383,col 47)",
            "(line 385,col 9)-(line 385,col 55)",
            "(line 386,col 9)-(line 386,col 36)",
            "(line 387,col 9)-(line 387,col 47)",
            "(line 388,col 9)-(line 388,col 48)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testPseudoBetween()",
        "snippet": "    @Test public void testPseudoBetween() {\n        Document doc = Jsoup.parse(\"<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>\");\n        Elements ps = doc.select(\"div p:gt(0):lt(2)\");\n        assertEquals(1, ps.size());\n        assertEquals(\"Two\", ps.get(0).text());\n    }",
        "begin_line": 391,
        "end_line": 396,
        "comment": "",
        "child_ranges": [
            "(line 392,col 9)-(line 392,col 99)",
            "(line 393,col 9)-(line 393,col 54)",
            "(line 394,col 9)-(line 394,col 35)",
            "(line 395,col 9)-(line 395,col 46)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testPseudoCombined()",
        "snippet": "    @Test public void testPseudoCombined() {\n        Document doc = Jsoup.parse(\"<div class='foo'><p>One</p><p>Two</p></div><div><p>Three</p><p>Four</p></div>\");\n        Elements ps = doc.select(\"div.foo p:gt(0)\");\n        assertEquals(1, ps.size());\n        assertEquals(\"Two\", ps.get(0).text());\n    }",
        "begin_line": 398,
        "end_line": 403,
        "comment": "",
        "child_ranges": [
            "(line 399,col 9)-(line 399,col 116)",
            "(line 400,col 9)-(line 400,col 52)",
            "(line 401,col 9)-(line 401,col 35)",
            "(line 402,col 9)-(line 402,col 46)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testPseudoHas()",
        "snippet": "    @Test public void testPseudoHas() {\n        Document doc = Jsoup.parse(\"<div id=0><p><span>Hello</span></p></div> <div id=1><span class=foo>There</span></div> <div id=2><p>Not</p></div>\");\n\n        Elements divs1 = doc.select(\"div:has(span)\");\n        assertEquals(2, divs1.size());\n        assertEquals(\"0\", divs1.get(0).id());\n        assertEquals(\"1\", divs1.get(1).id());\n\n        Elements divs2 = doc.select(\"div:has([class]\");\n        assertEquals(1, divs2.size());\n        assertEquals(\"1\", divs2.get(0).id());\n\n        Elements divs3 = doc.select(\"div:has(span, p)\");\n        assertEquals(3, divs3.size());\n        assertEquals(\"0\", divs3.get(0).id());\n        assertEquals(\"1\", divs3.get(1).id());\n        assertEquals(\"2\", divs3.get(2).id());\n    }",
        "begin_line": 405,
        "end_line": 422,
        "comment": "",
        "child_ranges": [
            "(line 406,col 9)-(line 406,col 152)",
            "(line 408,col 9)-(line 408,col 53)",
            "(line 409,col 9)-(line 409,col 38)",
            "(line 410,col 9)-(line 410,col 45)",
            "(line 411,col 9)-(line 411,col 45)",
            "(line 413,col 9)-(line 413,col 55)",
            "(line 414,col 9)-(line 414,col 38)",
            "(line 415,col 9)-(line 415,col 45)",
            "(line 417,col 9)-(line 417,col 56)",
            "(line 418,col 9)-(line 418,col 38)",
            "(line 419,col 9)-(line 419,col 45)",
            "(line 420,col 9)-(line 420,col 45)",
            "(line 421,col 9)-(line 421,col 45)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testNestedHas()",
        "snippet": "    @Test public void testNestedHas() {\n        Document doc = Jsoup.parse(\"<div><p><span>One</span></p></div> <div><p>Two</p></div>\");\n        Elements divs = doc.select(\"div:has(p:has(span))\");\n        assertEquals(1, divs.size());\n        assertEquals(\"One\", divs.first().text());\n\n        // test matches in has\n        divs = doc.select(\"div:has(p:matches((?i)two))\");\n        assertEquals(1, divs.size());\n        assertEquals(\"div\", divs.first().tagName());\n        assertEquals(\"Two\", divs.first().text());\n\n        // test contains in has\n        divs = doc.select(\"div:has(p:contains(two))\");\n        assertEquals(1, divs.size());\n        assertEquals(\"div\", divs.first().tagName());\n        assertEquals(\"Two\", divs.first().text());\n    }",
        "begin_line": 424,
        "end_line": 441,
        "comment": "",
        "child_ranges": [
            "(line 425,col 9)-(line 425,col 95)",
            "(line 426,col 9)-(line 426,col 59)",
            "(line 427,col 9)-(line 427,col 37)",
            "(line 428,col 9)-(line 428,col 49)",
            "(line 431,col 9)-(line 431,col 57)",
            "(line 432,col 9)-(line 432,col 37)",
            "(line 433,col 9)-(line 433,col 52)",
            "(line 434,col 9)-(line 434,col 49)",
            "(line 437,col 9)-(line 437,col 54)",
            "(line 438,col 9)-(line 438,col 37)",
            "(line 439,col 9)-(line 439,col 52)",
            "(line 440,col 9)-(line 440,col 49)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testPseudoContains()",
        "snippet": "    @Test public void testPseudoContains() {\n        Document doc = Jsoup.parse(\"<div><p>The Rain.</p> <p class=light>The <i>rain</i>.</p> <p>Rain, the.</p></div>\");\n        \n        Elements ps1 = doc.select(\"p:contains(Rain)\");\n        assertEquals(3, ps1.size());\n        \n        Elements ps2 = doc.select(\"p:contains(the rain)\");\n        assertEquals(2, ps2.size());\n        assertEquals(\"The Rain.\", ps2.first().html());\n        assertEquals(\"The <i>rain</i>.\", ps2.last().html());\n        \n        Elements ps3 = doc.select(\"p:contains(the Rain):has(i)\");\n        assertEquals(1, ps3.size());\n        assertEquals(\"light\", ps3.first().className());\n\n        Elements ps4 = doc.select(\".light:contains(rain)\");\n        assertEquals(1, ps4.size());\n        assertEquals(\"light\", ps3.first().className());\n\n        Elements ps5 = doc.select(\":contains(rain)\");\n        assertEquals(8, ps5.size()); // html, body, div,...\n    }",
        "begin_line": 443,
        "end_line": 464,
        "comment": "",
        "child_ranges": [
            "(line 444,col 9)-(line 444,col 120)",
            "(line 446,col 9)-(line 446,col 54)",
            "(line 447,col 9)-(line 447,col 36)",
            "(line 449,col 9)-(line 449,col 58)",
            "(line 450,col 9)-(line 450,col 36)",
            "(line 451,col 9)-(line 451,col 54)",
            "(line 452,col 9)-(line 452,col 60)",
            "(line 454,col 9)-(line 454,col 65)",
            "(line 455,col 9)-(line 455,col 36)",
            "(line 456,col 9)-(line 456,col 55)",
            "(line 458,col 9)-(line 458,col 59)",
            "(line 459,col 9)-(line 459,col 36)",
            "(line 460,col 9)-(line 460,col 55)",
            "(line 462,col 9)-(line 462,col 53)",
            "(line 463,col 9)-(line 463,col 36)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testPsuedoContainsWithParentheses()",
        "snippet": "    @Test public void testPsuedoContainsWithParentheses() {\n        Document doc = Jsoup.parse(\"<div><p id=1>This (is good)</p><p id=2>This is bad)</p>\");\n        \n        Elements ps1 = doc.select(\"p:contains(this (is good))\");\n        assertEquals(1, ps1.size());\n        assertEquals(\"1\", ps1.first().id());\n        \n        Elements ps2 = doc.select(\"p:contains(this is bad\\\\))\");\n        assertEquals(1, ps2.size());\n        assertEquals(\"2\", ps2.first().id());\n    }",
        "begin_line": 466,
        "end_line": 476,
        "comment": "",
        "child_ranges": [
            "(line 467,col 9)-(line 467,col 94)",
            "(line 469,col 9)-(line 469,col 64)",
            "(line 470,col 9)-(line 470,col 36)",
            "(line 471,col 9)-(line 471,col 44)",
            "(line 473,col 9)-(line 473,col 64)",
            "(line 474,col 9)-(line 474,col 36)",
            "(line 475,col 9)-(line 475,col 44)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.containsOwn()",
        "snippet": "    @Test public void containsOwn() {\n        Document doc = Jsoup.parse(\"<p id=1>Hello <b>there</b> now</p>\");\n        Elements ps = doc.select(\"p:containsOwn(Hello now)\");\n        assertEquals(1, ps.size());\n        assertEquals(\"1\", ps.first().id());\n        \n        assertEquals(0, doc.select(\"p:containsOwn(there)\").size());\n    }",
        "begin_line": 478,
        "end_line": 485,
        "comment": "",
        "child_ranges": [
            "(line 479,col 9)-(line 479,col 73)",
            "(line 480,col 9)-(line 480,col 61)",
            "(line 481,col 9)-(line 481,col 35)",
            "(line 482,col 9)-(line 482,col 43)",
            "(line 484,col 9)-(line 484,col 67)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testMatches()",
        "snippet": "    @Test public void testMatches() {       \n        Document doc = Jsoup.parse(\"<p id=1>The <i>Rain</i></p> <p id=2>There are 99 bottles.</p> <p id=3>Harder (this)</p> <p id=4>Rain</p>\");\n        \n        Elements p1 = doc.select(\"p:matches(The rain)\"); // no match, case sensitive\n        assertEquals(0, p1.size());\n        \n        Elements p2 = doc.select(\"p:matches((?i)the rain)\"); // case insense. should include root, html, body\n        assertEquals(1, p2.size());\n        assertEquals(\"1\", p2.first().id());\n        \n        Elements p4 = doc.select(\"p:matches((?i)^rain$)\"); // bounding\n        assertEquals(1, p4.size());\n        assertEquals(\"4\", p4.first().id());\n        \n        Elements p5 = doc.select(\"p:matches(\\\\d+)\");\n        assertEquals(1, p5.size());\n        assertEquals(\"2\", p5.first().id());\n        \n        Elements p6 = doc.select(\"p:matches(\\\\w+\\\\s+\\\\(\\\\w+\\\\))\"); // test bracket matching\n        assertEquals(1, p6.size());\n        assertEquals(\"3\", p6.first().id());\n        \n        Elements p7 = doc.select(\"p:matches((?i)the):has(i)\"); // multi\n        assertEquals(1, p7.size());\n        assertEquals(\"1\", p7.first().id());\n    }",
        "begin_line": 487,
        "end_line": 512,
        "comment": "",
        "child_ranges": [
            "(line 488,col 9)-(line 488,col 143)",
            "(line 490,col 9)-(line 490,col 56)",
            "(line 491,col 9)-(line 491,col 35)",
            "(line 493,col 9)-(line 493,col 60)",
            "(line 494,col 9)-(line 494,col 35)",
            "(line 495,col 9)-(line 495,col 43)",
            "(line 497,col 9)-(line 497,col 58)",
            "(line 498,col 9)-(line 498,col 35)",
            "(line 499,col 9)-(line 499,col 43)",
            "(line 501,col 9)-(line 501,col 52)",
            "(line 502,col 9)-(line 502,col 35)",
            "(line 503,col 9)-(line 503,col 43)",
            "(line 505,col 9)-(line 505,col 66)",
            "(line 506,col 9)-(line 506,col 35)",
            "(line 507,col 9)-(line 507,col 43)",
            "(line 509,col 9)-(line 509,col 62)",
            "(line 510,col 9)-(line 510,col 35)",
            "(line 511,col 9)-(line 511,col 43)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.matchesOwn()",
        "snippet": "    @Test public void matchesOwn() {\n        Document doc = Jsoup.parse(\"<p id=1>Hello <b>there</b> now</p>\");\n        \n        Elements p1 = doc.select(\"p:matchesOwn((?i)hello now)\");\n        assertEquals(1, p1.size());\n        assertEquals(\"1\", p1.first().id());\n        \n        assertEquals(0, doc.select(\"p:matchesOwn(there)\").size());\n    }",
        "begin_line": 514,
        "end_line": 522,
        "comment": "",
        "child_ranges": [
            "(line 515,col 9)-(line 515,col 73)",
            "(line 517,col 9)-(line 517,col 64)",
            "(line 518,col 9)-(line 518,col 35)",
            "(line 519,col 9)-(line 519,col 43)",
            "(line 521,col 9)-(line 521,col 66)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testRelaxedTags()",
        "snippet": "    @Test public void testRelaxedTags() {\n        Document doc = Jsoup.parse(\"<abc_def id=1>Hello</abc_def> <abc-def id=2>There</abc-def>\");\n        \n        Elements el1 = doc.select(\"abc_def\");\n        assertEquals(1, el1.size());\n        assertEquals(\"1\", el1.first().id());\n        \n        Elements el2 = doc.select(\"abc-def\");\n        assertEquals(1, el2.size());\n        assertEquals(\"2\", el2.first().id());\n    }",
        "begin_line": 524,
        "end_line": 534,
        "comment": "",
        "child_ranges": [
            "(line 525,col 9)-(line 525,col 98)",
            "(line 527,col 9)-(line 527,col 45)",
            "(line 528,col 9)-(line 528,col 36)",
            "(line 529,col 9)-(line 529,col 44)",
            "(line 531,col 9)-(line 531,col 45)",
            "(line 532,col 9)-(line 532,col 36)",
            "(line 533,col 9)-(line 533,col 44)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.filter()",
        "snippet": "    @Test public void filter() {\n        String h = \"<p>Excl</p><div class=headline><p>Hello</p><p>There</p></div><div class=headline><h1>Headline</h1></div>\";\n        Document doc = Jsoup.parse(h);\n        Elements els = doc.select(\".headline\").select(\"p\");\n        assertEquals(2, els.size());\n        assertEquals(\"Hello\", els.get(0).text());\n        assertEquals(\"There\", els.get(1).text());\n    }",
        "begin_line": 14,
        "end_line": 21,
        "comment": "",
        "child_ranges": [
            "(line 15,col 9)-(line 15,col 126)",
            "(line 16,col 9)-(line 16,col 38)",
            "(line 17,col 9)-(line 17,col 59)",
            "(line 18,col 9)-(line 18,col 36)",
            "(line 19,col 9)-(line 19,col 49)",
            "(line 20,col 9)-(line 20,col 49)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.attributes()",
        "snippet": "    @Test public void attributes() {\n        String h = \"<p title=foo><p title=bar><p class=foo><p class=bar>\";\n        Document doc = Jsoup.parse(h);\n        Elements withTitle = doc.select(\"p[title]\");\n        assertEquals(2, withTitle.size());\n        assertTrue(withTitle.hasAttr(\"title\"));\n        assertFalse(withTitle.hasAttr(\"class\"));\n        assertEquals(\"foo\", withTitle.attr(\"title\"));\n\n        withTitle.removeAttr(\"title\");\n        assertEquals(2, withTitle.size()); // existing Elements are not reevaluated\n        assertEquals(0, doc.select(\"p[title]\").size());\n\n        Elements ps = doc.select(\"p\").attr(\"style\", \"classy\");\n        assertEquals(4, ps.size());\n        assertEquals(\"classy\", ps.last().attr(\"style\"));\n        assertEquals(\"bar\", ps.last().attr(\"class\"));\n    }",
        "begin_line": 23,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 24,col 9)-(line 24,col 74)",
            "(line 25,col 9)-(line 25,col 38)",
            "(line 26,col 9)-(line 26,col 52)",
            "(line 27,col 9)-(line 27,col 42)",
            "(line 28,col 9)-(line 28,col 47)",
            "(line 29,col 9)-(line 29,col 48)",
            "(line 30,col 9)-(line 30,col 53)",
            "(line 32,col 9)-(line 32,col 38)",
            "(line 33,col 9)-(line 33,col 42)",
            "(line 34,col 9)-(line 34,col 55)",
            "(line 36,col 9)-(line 36,col 62)",
            "(line 37,col 9)-(line 37,col 35)",
            "(line 38,col 9)-(line 38,col 56)",
            "(line 39,col 9)-(line 39,col 53)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.hasAttr()",
        "snippet": "    @Test public void hasAttr() {\n        Document doc = Jsoup.parse(\"<p title=foo><p title=bar><p class=foo><p class=bar>\");\n        Elements ps = doc.select(\"p\");\n        assertTrue(ps.hasAttr(\"class\"));\n        assertFalse(ps.hasAttr(\"style\"));\n    }",
        "begin_line": 42,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 91)",
            "(line 44,col 9)-(line 44,col 38)",
            "(line 45,col 9)-(line 45,col 40)",
            "(line 46,col 9)-(line 46,col 41)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.attr()",
        "snippet": "    @Test public void attr() {\n        Document doc = Jsoup.parse(\"<p title=foo><p title=bar><p class=foo><p class=bar>\");\n        String classVal = doc.select(\"p\").attr(\"class\");\n        assertEquals(\"foo\", classVal);\n    }",
        "begin_line": 49,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 91)",
            "(line 51,col 9)-(line 51,col 56)",
            "(line 52,col 9)-(line 52,col 38)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.classes()",
        "snippet": "    @Test public void classes() {\n        Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\");\n\n        Elements els = doc.select(\"p\");\n        assertTrue(els.hasClass(\"red\"));\n        assertFalse(els.hasClass(\"blue\"));\n        els.addClass(\"blue\");\n        els.removeClass(\"yellow\");\n        els.toggleClass(\"mellow\");\n\n        assertEquals(\"blue\", els.get(0).className());\n        assertEquals(\"red green blue mellow\", els.get(1).className());\n    }",
        "begin_line": 55,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 98)",
            "(line 58,col 9)-(line 58,col 39)",
            "(line 59,col 9)-(line 59,col 40)",
            "(line 60,col 9)-(line 60,col 42)",
            "(line 61,col 9)-(line 61,col 29)",
            "(line 62,col 9)-(line 62,col 34)",
            "(line 63,col 9)-(line 63,col 34)",
            "(line 65,col 9)-(line 65,col 53)",
            "(line 66,col 9)-(line 66,col 70)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.text()",
        "snippet": "    @Test public void text() {\n        String h = \"<div><p>Hello<p>there<p>world</div>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"Hello there world\", doc.select(\"div > *\").text());\n    }",
        "begin_line": 69,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 57)",
            "(line 71,col 9)-(line 71,col 38)",
            "(line 72,col 9)-(line 72,col 72)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.hasText()",
        "snippet": "    @Test public void hasText() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div><p></p></div>\");\n        Elements divs = doc.select(\"div\");\n        assertTrue(divs.hasText());\n        assertFalse(doc.select(\"div + div\").hasText());\n    }",
        "begin_line": 75,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 80)",
            "(line 77,col 9)-(line 77,col 42)",
            "(line 78,col 9)-(line 78,col 35)",
            "(line 79,col 9)-(line 79,col 55)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.html()",
        "snippet": "    @Test public void html() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div><p>There</p></div>\");\n        Elements divs = doc.select(\"div\");\n        assertEquals(\"<p>Hello</p>\\n<p>There</p>\", divs.html());\n    }",
        "begin_line": 82,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 85)",
            "(line 84,col 9)-(line 84,col 42)",
            "(line 85,col 9)-(line 85,col 64)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.outerHtml()",
        "snippet": "    @Test public void outerHtml() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div><p>There</p></div>\");\n        Elements divs = doc.select(\"div\");\n        assertEquals(\"<div><p>Hello</p></div><div><p>There</p></div>\", TextUtil.stripNewlines(divs.outerHtml()));\n    }",
        "begin_line": 88,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 85)",
            "(line 90,col 9)-(line 90,col 42)",
            "(line 91,col 9)-(line 91,col 113)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.setHtml()",
        "snippet": "    @Test public void setHtml() {\n        Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\");\n        Elements ps = doc.select(\"p\");\n        \n        ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\");\n        assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml()));\n        \n        ps.html(\"<span>Gone</span>\");\n        assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml()));\n    }",
        "begin_line": 94,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 71)",
            "(line 96,col 9)-(line 96,col 38)",
            "(line 98,col 9)-(line 98,col 56)",
            "(line 99,col 9)-(line 99,col 104)",
            "(line 101,col 9)-(line 101,col 37)",
            "(line 102,col 9)-(line 102,col 96)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.val()",
        "snippet": "    @Test public void val() {\n        Document doc = Jsoup.parse(\"<input value='one' /><textarea>two</textarea>\");\n        Elements els = doc.select(\"form > *\");\n        assertEquals(2, els.size());\n        assertEquals(\"one\", els.val());\n        assertEquals(\"two\", els.last().val());\n        \n        els.val(\"three\");\n        assertEquals(\"three\", els.first().val());\n        assertEquals(\"three\", els.last().val());\n        assertEquals(\"<textarea>three</textarea>\", els.last().outerHtml());\n    }",
        "begin_line": 105,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 84)",
            "(line 107,col 9)-(line 107,col 46)",
            "(line 108,col 9)-(line 108,col 36)",
            "(line 109,col 9)-(line 109,col 39)",
            "(line 110,col 9)-(line 110,col 46)",
            "(line 112,col 9)-(line 112,col 25)",
            "(line 113,col 9)-(line 113,col 49)",
            "(line 114,col 9)-(line 114,col 48)",
            "(line 115,col 9)-(line 115,col 75)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.before()",
        "snippet": "    @Test public void before() {\n        Document doc = Jsoup.parse(\"<p>This <a>is</a> <a>jsoup</a>.</p>\");\n        doc.select(\"a\").before(\"<span>foo</span>\");\n        assertEquals(\"<p>This <span>foo</span><a>is</a> <span>foo</span><a>jsoup</a>.</p>\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 118,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 74)",
            "(line 120,col 9)-(line 120,col 51)",
            "(line 121,col 9)-(line 121,col 135)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.after()",
        "snippet": "    @Test public void after() {\n        Document doc = Jsoup.parse(\"<p>This <a>is</a> <a>jsoup</a>.</p>\");\n        doc.select(\"a\").after(\"<span>foo</span>\");\n        assertEquals(\"<p>This <a>is</a><span>foo</span> <a>jsoup</a><span>foo</span>.</p>\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 124,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 74)",
            "(line 126,col 9)-(line 126,col 50)",
            "(line 127,col 9)-(line 127,col 135)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.wrap()",
        "snippet": "    @Test public void wrap() {\n        String h = \"<p><b>This</b> is <b>jsoup</b></p>\";\n        Document doc = Jsoup.parse(h);\n        doc.select(\"b\").wrap(\"<i></i>\");\n        assertEquals(\"<p><i><b>This</b></i> is <i><b>jsoup</b></i></p>\", doc.body().html());\n    }",
        "begin_line": 130,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 131,col 9)-(line 131,col 56)",
            "(line 132,col 9)-(line 132,col 38)",
            "(line 133,col 9)-(line 133,col 40)",
            "(line 134,col 9)-(line 134,col 92)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.empty()",
        "snippet": "    @Test public void empty() {\n        Document doc = Jsoup.parse(\"<div><p>Hello <b>there</b></p> <p>now!</p></div>\");\n        doc.outputSettings().prettyPrint(false);\n\n        doc.select(\"p\").empty();\n        assertEquals(\"<div><p></p> <p></p></div>\", doc.body().html());\n    }",
        "begin_line": 137,
        "end_line": 143,
        "comment": "",
        "child_ranges": [
            "(line 138,col 9)-(line 138,col 87)",
            "(line 139,col 9)-(line 139,col 48)",
            "(line 141,col 9)-(line 141,col 32)",
            "(line 142,col 9)-(line 142,col 70)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.remove()",
        "snippet": "    @Test public void remove() {\n        Document doc = Jsoup.parse(\"<div><p>Hello <b>there</b></p> jsoup <p>now!</p></div>\");\n        doc.outputSettings().prettyPrint(false);\n        \n        doc.select(\"p\").remove();\n        assertEquals(\"<div> jsoup </div>\", doc.body().html());\n    }",
        "begin_line": 145,
        "end_line": 151,
        "comment": "",
        "child_ranges": [
            "(line 146,col 9)-(line 146,col 93)",
            "(line 147,col 9)-(line 147,col 48)",
            "(line 149,col 9)-(line 149,col 33)",
            "(line 150,col 9)-(line 150,col 62)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.eq()",
        "snippet": "    @Test public void eq() {\n        String h = \"<p>Hello<p>there<p>world\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"there\", doc.select(\"p\").eq(1).text());\n        assertEquals(\"there\", doc.select(\"p\").get(1).text());\n    }",
        "begin_line": 153,
        "end_line": 158,
        "comment": "",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 46)",
            "(line 155,col 9)-(line 155,col 38)",
            "(line 156,col 9)-(line 156,col 60)",
            "(line 157,col 9)-(line 157,col 61)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.is()",
        "snippet": "    @Test public void is() {\n        String h = \"<p>Hello<p title=foo>there<p>world\";\n        Document doc = Jsoup.parse(h);\n        Elements ps = doc.select(\"p\");\n        assertTrue(ps.is(\"[title=foo]\"));\n        assertFalse(ps.is(\"[title=bar]\"));\n    }",
        "begin_line": 160,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 161,col 9)-(line 161,col 56)",
            "(line 162,col 9)-(line 162,col 38)",
            "(line 163,col 9)-(line 163,col 38)",
            "(line 164,col 9)-(line 164,col 41)",
            "(line 165,col 9)-(line 165,col 42)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.parents()",
        "snippet": "    @Test public void parents() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p></div><p>There</p>\");\n        Elements parents = doc.select(\"p\").parents();\n\n        assertEquals(3, parents.size());\n        assertEquals(\"div\", parents.get(0).tagName());\n        assertEquals(\"body\", parents.get(1).tagName());\n        assertEquals(\"html\", parents.get(2).tagName());\n    }",
        "begin_line": 168,
        "end_line": 176,
        "comment": "",
        "child_ranges": [
            "(line 169,col 9)-(line 169,col 74)",
            "(line 170,col 9)-(line 170,col 53)",
            "(line 172,col 9)-(line 172,col 40)",
            "(line 173,col 9)-(line 173,col 54)",
            "(line 174,col 9)-(line 174,col 55)",
            "(line 175,col 9)-(line 175,col 55)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.simpleBehaviourTest()",
        "snippet": "    @Test public void simpleBehaviourTest() {\n        String h = \"<div><p class=foo><a href='http://evil.com'>Hello <b id=bar>there</b>!</a></div>\";\n        String cleanHtml = Jsoup.clean(h, Whitelist.simpleText());\n\n        assertEquals(\"Hello <b>there</b>!\", TextUtil.stripNewlines(cleanHtml));\n    }",
        "begin_line": 14,
        "end_line": 19,
        "comment": "",
        "child_ranges": [
            "(line 15,col 9)-(line 15,col 102)",
            "(line 16,col 9)-(line 16,col 66)",
            "(line 18,col 9)-(line 18,col 79)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.simpleBehaviourTest2()",
        "snippet": "    @Test public void simpleBehaviourTest2() {\n        String h = \"Hello <b>there</b>!\";\n        String cleanHtml = Jsoup.clean(h, Whitelist.simpleText());\n\n        assertEquals(\"Hello <b>there</b>!\", TextUtil.stripNewlines(cleanHtml));\n    }",
        "begin_line": 21,
        "end_line": 26,
        "comment": "",
        "child_ranges": [
            "(line 22,col 9)-(line 22,col 41)",
            "(line 23,col 9)-(line 23,col 66)",
            "(line 25,col 9)-(line 25,col 79)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.basicBehaviourTest()",
        "snippet": "    @Test public void basicBehaviourTest() {\n        String h = \"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\";\n        String cleanHtml = Jsoup.clean(h, Whitelist.basic());\n\n        assertEquals(\"<p><a rel=\\\"nofollow\\\">Dodgy</a> <a href=\\\"http://nice.com\\\" rel=\\\"nofollow\\\">Nice</a></p><blockquote>Hello</blockquote>\",\n                TextUtil.stripNewlines(cleanHtml));\n    }",
        "begin_line": 28,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 140)",
            "(line 30,col 9)-(line 30,col 61)",
            "(line 32,col 9)-(line 33,col 51)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.basicWithImagesTest()",
        "snippet": "    @Test public void basicWithImagesTest() {\n        String h = \"<div><p><img src='http://example.com/' alt=Image></p><p><img src='ftp://ftp.example.com'></p></div>\";\n        String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages());\n        assertEquals(\"<p><img src=\\\"http://example.com/\\\" alt=\\\"Image\\\" /></p><p><img /></p>\", TextUtil.stripNewlines(cleanHtml));\n    }",
        "begin_line": 36,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 121)",
            "(line 38,col 9)-(line 38,col 71)",
            "(line 39,col 9)-(line 39,col 130)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.testRelaxed()",
        "snippet": "    @Test public void testRelaxed() {\n        String h = \"<h1>Head</h1><td>One<td>Two</td>\";\n        String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());\n        assertEquals(\"<h1>Head</h1><table><tbody><tr><td>One</td><td>Two</td></tr></tbody></table>\", TextUtil.stripNewlines(cleanHtml));\n    }",
        "begin_line": 42,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 54)",
            "(line 44,col 9)-(line 44,col 63)",
            "(line 45,col 9)-(line 45,col 136)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.testDropComments()",
        "snippet": "    @Test public void testDropComments() {\n        String h = \"<p>Hello<!-- no --></p>\";\n        String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());\n        assertEquals(\"<p>Hello</p>\", cleanHtml);\n    }",
        "begin_line": 48,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 45)",
            "(line 50,col 9)-(line 50,col 63)",
            "(line 51,col 9)-(line 51,col 48)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.testDropXmlProc()",
        "snippet": "    @Test public void testDropXmlProc() {\n        String h = \"<?import namespace=\\\"xss\\\"><p>Hello</p>\";\n        String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());\n        assertEquals(\"<p>Hello</p>\", cleanHtml);\n    }",
        "begin_line": 54,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 61)",
            "(line 56,col 9)-(line 56,col 63)",
            "(line 57,col 9)-(line 57,col 48)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.testDropScript()",
        "snippet": "    @Test public void testDropScript() {\n        String h = \"<SCRIPT SRC=//ha.ckers.org/.j><SCRIPT>alert(/XSS/.source)</SCRIPT>\";\n        String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());\n        assertEquals(\"\", cleanHtml);\n    }",
        "begin_line": 60,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 88)",
            "(line 62,col 9)-(line 62,col 63)",
            "(line 63,col 9)-(line 63,col 36)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.testDropImageScript()",
        "snippet": "    @Test public void testDropImageScript() {\n        String h = \"<IMG SRC=\\\"javascript:alert('XSS')\\\">\";\n        String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());\n        assertEquals(\"<img />\", cleanHtml);\n    }",
        "begin_line": 66,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 59)",
            "(line 68,col 9)-(line 68,col 63)",
            "(line 69,col 9)-(line 69,col 43)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.testCleanJavascriptHref()",
        "snippet": "    @Test public void testCleanJavascriptHref() {\n        String h = \"<A HREF=\\\"javascript:document.location='http://www.google.com/'\\\">XSS</A>\";\n        String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());\n        assertEquals(\"<a>XSS</a>\", cleanHtml);\n    }",
        "begin_line": 72,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 95)",
            "(line 74,col 9)-(line 74,col 63)",
            "(line 75,col 9)-(line 75,col 46)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.testDropsUnknownTags()",
        "snippet": "    @Test public void testDropsUnknownTags() {\n        String h = \"<p><custom foo=true>Test</custom></p>\";\n        String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());\n        assertEquals(\"<p>Test</p>\", cleanHtml);\n    }",
        "begin_line": 78,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 59)",
            "(line 80,col 9)-(line 80,col 63)",
            "(line 81,col 9)-(line 81,col 47)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.testHandlesEmptyAttributes()",
        "snippet": "    @Test public void testHandlesEmptyAttributes() {\n        String h = \"<img alt=\\\"\\\" src= unknown=''>\";\n        String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages());\n        assertEquals(\"<img alt=\\\"\\\" />\", cleanHtml);\n    }",
        "begin_line": 84,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 52)",
            "(line 86,col 9)-(line 86,col 71)",
            "(line 87,col 9)-(line 87,col 52)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.testIsValid()",
        "snippet": "    @Test public void testIsValid() {\n        String ok = \"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\";\n        String nok1 = \"<p><script></script>Not <b>OK</b></p>\";\n        String nok2 = \"<p align=right>Test Not <b>OK</b></p>\";\n        assertTrue(Jsoup.isValid(ok, Whitelist.basic()));\n        assertFalse(Jsoup.isValid(nok1, Whitelist.basic()));\n        assertFalse(Jsoup.isValid(nok2, Whitelist.basic()));\n    }",
        "begin_line": 90,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 78)",
            "(line 92,col 9)-(line 92,col 62)",
            "(line 93,col 9)-(line 93,col 62)",
            "(line 94,col 9)-(line 94,col 57)",
            "(line 95,col 9)-(line 95,col 60)",
            "(line 96,col 9)-(line 96,col 60)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.resolvesRelativeLinks()",
        "snippet": "    @Test public void resolvesRelativeLinks() {\n        String html = \"<a href='/foo'>Link</a>\";\n        String clean = Jsoup.clean(html, \"http://example.com/\", Whitelist.basic());\n        assertEquals(\"<a href=\\\"http://example.com/foo\\\" rel=\\\"nofollow\\\">Link</a>\", clean);\n    }",
        "begin_line": 99,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 100,col 9)-(line 100,col 48)",
            "(line 101,col 9)-(line 101,col 83)",
            "(line 102,col 9)-(line 102,col 92)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.dropsUnresolvableRelativeLinks()",
        "snippet": "    @Test public void dropsUnresolvableRelativeLinks() {\n        String html = \"<a href='/foo'>Link</a>\";\n        String clean = Jsoup.clean(html, Whitelist.basic());\n        assertEquals(\"<a rel=\\\"nofollow\\\">Link</a>\", clean);\n    }",
        "begin_line": 105,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 48)",
            "(line 107,col 9)-(line 107,col 60)",
            "(line 108,col 9)-(line 108,col 60)"
        ]
    }
]