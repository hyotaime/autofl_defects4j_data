[
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.url(java.net.URL)",
        "snippet": "    public Connection url(URL url);",
        "begin_line": 36,
        "end_line": 36,
        "comment": "\n     * Set the request URL to fetch. The protocol must be HTTP or HTTPS.\n     * @param url URL to connect to\n     * @return this Connection, for chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.url(java.lang.String)",
        "snippet": "    public Connection url(String url);",
        "begin_line": 43,
        "end_line": 43,
        "comment": "\n     * Set the request URL to fetch. The protocol must be HTTP or HTTPS.\n     * @param url URL to connect to\n     * @return this Connection, for chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.userAgent(java.lang.String)",
        "snippet": "    public Connection userAgent(String userAgent);",
        "begin_line": 50,
        "end_line": 50,
        "comment": "\n     * Set the request user-agent header.\n     * @param userAgent user-agent to use\n     * @return this Connection, for chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.timeout(int)",
        "snippet": "    public Connection timeout(int millis);",
        "begin_line": 58,
        "end_line": 58,
        "comment": "\n     * Set the request timeouts (connect and read). If a timeout occurs, an IOException will be thrown. The default\n     * timeout is 3 seconds (3000 millis). A timeout of zero is treated as an infinite timeout.\n     * @param millis number of milliseconds (thousandths of a second) before timing out connects or reads.\n     * @return this Connection, for chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.referrer(java.lang.String)",
        "snippet": "    public Connection referrer(String referrer);",
        "begin_line": 65,
        "end_line": 65,
        "comment": "\n     * Set the request referrer (aka \"referer\") header.\n     * @param referrer referrer to use\n     * @return this Connection, for chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.method(org.jsoup.Connection.Method)",
        "snippet": "    public Connection method(Method method);",
        "begin_line": 72,
        "end_line": 72,
        "comment": "\n     * Set the request method to use, GET or POST. Default is GET.\n     * @param method HTTP request method\n     * @return this Connection, for chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.data(java.lang.String, java.lang.String)",
        "snippet": "    public Connection data(String key, String value);",
        "begin_line": 81,
        "end_line": 81,
        "comment": "\n     * Add a request data parameter. Request parameters are sent in the request query string for GETs, and in the request\n     * body for POSTs. A request may have multiple values of the same name.\n     * @param key data key\n     * @param value data value\n     * @return this Connection, for chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.data(java.util.Map<java.lang.String, java.lang.String>)",
        "snippet": "    public Connection data(Map<String, String> data);",
        "begin_line": 88,
        "end_line": 88,
        "comment": "\n     * Adds all of the supplied data to the request data parameters\n     * @param data map of data parameters\n     * @return this Connection, for chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.data(java.lang.String...)",
        "snippet": "    public Connection data(String... keyvals);",
        "begin_line": 97,
        "end_line": 97,
        "comment": "\n     * Add a number of request data parameters. Multiple parameters may be set at once, e.g.:\n     * <code>.data(\"name\", \"jsoup\", \"language\", \"Java\", \"language\", \"English\");</code> creates a query string like:\n     * <code>?name=jsoup&language=Java&language=English</code>\n     * @param keyvals a set of key value pairs.\n     * @return this Connection, for chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.header(java.lang.String, java.lang.String)",
        "snippet": "    public Connection header(String name, String value);",
        "begin_line": 106,
        "end_line": 106,
        "comment": "\n     * Set a request header.\n     * @param name header name\n     * @param value header value\n     * @return this Connection, for chaining\n     * @see org.jsoup.Connection.Request#headers()\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.cookie(java.lang.String, java.lang.String)",
        "snippet": "    public Connection cookie(String name, String value);",
        "begin_line": 114,
        "end_line": 114,
        "comment": "\n     * Set a cookie to be sent in the request\n     * @param name name of cookie\n     * @param value value of cookie\n     * @return this Connection, for chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.get()",
        "snippet": "    public Document get() throws IOException;",
        "begin_line": 121,
        "end_line": 121,
        "comment": "\n     * Execute the request as a GET, and parse the result.\n     * @return parsed Document\n     * @throws IOException on error\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.post()",
        "snippet": "    public Document post() throws IOException;",
        "begin_line": 128,
        "end_line": 128,
        "comment": "\n     * Execute the request as a POST, and parse the result.\n     * @return parsed Document\n     * @throws IOException on error\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.execute()",
        "snippet": "    public Response execute() throws IOException;",
        "begin_line": 135,
        "end_line": 135,
        "comment": "\n     * Execute the request.\n     * @return a response object\n     * @throws IOException on error\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.request()",
        "snippet": "    public Request request();",
        "begin_line": 141,
        "end_line": 141,
        "comment": "\n     * Get the request object associatated with this connection\n     * @return request\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.request(org.jsoup.Connection.Request)",
        "snippet": "    public Connection request(Request request);",
        "begin_line": 148,
        "end_line": 148,
        "comment": "\n     * Set the connection's request\n     * @param request new request object\n     * @return this Connection, for chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.response()",
        "snippet": "    public Response response();",
        "begin_line": 154,
        "end_line": 154,
        "comment": "\n     * Get the response, once the request has been executed\n     * @return response\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.response(org.jsoup.Connection.Response)",
        "snippet": "    public Connection response(Response response);",
        "begin_line": 161,
        "end_line": 161,
        "comment": "\n     * Set the conenction's response\n     * @param response new response\n     * @return this Connection, for chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.Base.url()",
        "snippet": "        public URL url();",
        "begin_line": 174,
        "end_line": 174,
        "comment": "\n         * Get the URL\n         * @return URL\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.Base.url(java.net.URL)",
        "snippet": "        public T url(URL url);",
        "begin_line": 181,
        "end_line": 181,
        "comment": "\n         * Set the URL\n         * @param url new URL\n         * @return this, for chaining\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.Base.method()",
        "snippet": "        public Method method();",
        "begin_line": 187,
        "end_line": 187,
        "comment": "\n         * Get the request method\n         * @return method\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.Base.method(org.jsoup.Connection.Method)",
        "snippet": "        public T method(Method method);",
        "begin_line": 194,
        "end_line": 194,
        "comment": "\n         * Set the request method\n         * @param method new method\n         * @return this, for chaining\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.Base.header(java.lang.String)",
        "snippet": "        public String header(String name);",
        "begin_line": 205,
        "end_line": 205,
        "comment": "\n         * Get the value of a header. This is a simplified header model, where a header may only have one value.\n         * <p>\n         * Header names are case insensitive.\n         * @param name name of header (case insensitive)\n         * @return value of header, or null if not set.\n         * @see #hasHeader(String)\n         * @see #cookie(String)\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.Base.header(java.lang.String, java.lang.String)",
        "snippet": "        public T header(String name, String value);",
        "begin_line": 213,
        "end_line": 213,
        "comment": "\n         * Set a header. This method will overwrite any existing header with the same case insensitive name. \n         * @param name Name of header\n         * @param value Value of header\n         * @return this, for chaining\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.Base.hasHeader(java.lang.String)",
        "snippet": "        public boolean hasHeader(String name);",
        "begin_line": 220,
        "end_line": 220,
        "comment": "\n         * Check if a header is present\n         * @param name name of header (case insensitive)\n         * @return if the header is present in this request/response\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.Base.removeHeader(java.lang.String)",
        "snippet": "        public T removeHeader(String name);",
        "begin_line": 227,
        "end_line": 227,
        "comment": "\n         * Remove a header by name\n         * @param name name of header to remove (case insensitive)\n         * @return this, for chianing\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.Base.headers()",
        "snippet": "        public Map<String, String> headers();",
        "begin_line": 233,
        "end_line": 233,
        "comment": "\n         * Retrieve all of the request/response headers as a map\n         * @return headers\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.Base.cookie(java.lang.String)",
        "snippet": "        public String cookie(String name);",
        "begin_line": 243,
        "end_line": 243,
        "comment": "\n         * Get a cookie value by name from this request/response.\n         * <p>\n         * Response objects have a simplified cookie model. Each cookie set in the response is added to the response\n         * object's cookie key=value map. The cookie's path, domain, and expiry date are ignored.\n         * @param name name of cookie to retrieve.\n         * @return value of cookie, or null if not set\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.Base.cookie(java.lang.String, java.lang.String)",
        "snippet": "        public T cookie(String name, String value);",
        "begin_line": 251,
        "end_line": 251,
        "comment": "\n         * Set a cookie in this request/response.\n         * @param name name of cookie\n         * @param value value of cookie\n         * @return this, for chianing\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.Base.hasCookie(java.lang.String)",
        "snippet": "        public boolean hasCookie(String name);",
        "begin_line": 258,
        "end_line": 258,
        "comment": "\n         * Check if a cookie is present\n         * @param name name of cookie\n         * @return if the cookie is present in this request/response\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.Base.removeCookie(java.lang.String)",
        "snippet": "        public T removeCookie(String name);",
        "begin_line": 265,
        "end_line": 265,
        "comment": "\n         * Remove a cookie by name\n         * @param name name of cookie to remove\n         * @return this, for chianing\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.Base.cookies()",
        "snippet": "        public Map<String, String> cookies();",
        "begin_line": 271,
        "end_line": 271,
        "comment": "\n         * Retrieve all of the request/response cookies as a map\n         * @return cookies\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.Request.timeout()",
        "snippet": "        public int timeout();",
        "begin_line": 284,
        "end_line": 284,
        "comment": "\n         * Get the request timeout, in milliseconds.\n         * @return the timeout in milliseconds.\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.Request.timeout(int)",
        "snippet": "        public Request timeout(int millis);",
        "begin_line": 291,
        "end_line": 291,
        "comment": "\n         * Update the request timeout.\n         * @param millis timeout, in milliseconds\n         * @return this Request, for chaining\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.Request.data(org.jsoup.Connection.KeyVal)",
        "snippet": "        public Request data(KeyVal keyval);",
        "begin_line": 298,
        "end_line": 298,
        "comment": "\n         * Add a data parameter to the request\n         * @param keyval data to add.\n         * @return this Request, for chaining\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.Request.data()",
        "snippet": "        public Collection<KeyVal> data();",
        "begin_line": 304,
        "end_line": 304,
        "comment": "\n         * Get all of the request's data parameters\n         * @return collection of keyvals\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.Response.statusCode()",
        "snippet": "        public int statusCode();",
        "begin_line": 317,
        "end_line": 317,
        "comment": "\n         * Get the status code of the response.\n         * @return status code\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.Response.statusMessage()",
        "snippet": "        public String statusMessage();",
        "begin_line": 323,
        "end_line": 323,
        "comment": "\n         * Get the status message of the response.\n         * @return status message\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.Response.charset()",
        "snippet": "        public String charset();",
        "begin_line": 329,
        "end_line": 329,
        "comment": "\n         * Get the character set name of the response.\n         * @return character set name\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.Response.contentType()",
        "snippet": "        public String contentType();",
        "begin_line": 335,
        "end_line": 335,
        "comment": "\n         * Get the response content type (e.g. \"text/html\");\n         * @return the response content type\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.Response.parse()",
        "snippet": "        public Document parse() throws IOException;",
        "begin_line": 342,
        "end_line": 342,
        "comment": "\n         * Parse the body of the response as a Document.\n         * @return a parsed Document\n         * @throws IOException on error\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.Response.body()",
        "snippet": "        public String body();",
        "begin_line": 348,
        "end_line": 348,
        "comment": "\n         * Get the body of the response as a plain string.\n         * @return body\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.Response.bodyAsBytes()",
        "snippet": "        public byte[] bodyAsBytes();",
        "begin_line": 354,
        "end_line": 354,
        "comment": "\n         * Get the body of the response as an array of bytes.\n         * @return body bytes\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.KeyVal.key(java.lang.String)",
        "snippet": "        public KeyVal key(String key);",
        "begin_line": 367,
        "end_line": 367,
        "comment": "\n         * Update the key of a keyval\n         * @param key new key\n         * @return this KeyVal, for chaining\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.KeyVal.key()",
        "snippet": "        public String key();",
        "begin_line": 373,
        "end_line": 373,
        "comment": "\n         * Get the key of a keyval\n         * @return the key\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.KeyVal.value(java.lang.String)",
        "snippet": "        public KeyVal value(String value);",
        "begin_line": 380,
        "end_line": 380,
        "comment": "\n         * Update the value of a keyval\n         * @param value the new value\n         * @return this KeyVal, for chaining\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Connection.java",
        "class_name": "org.jsoup.Connection",
        "signature": "org.jsoup.Connection.KeyVal.value()",
        "snippet": "        public String value();",
        "begin_line": 386,
        "end_line": 386,
        "comment": "\n         * Get the value of a keyval\n         * @return the value\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Jsoup.java",
        "class_name": "org.jsoup.Jsoup",
        "signature": "org.jsoup.Jsoup.Jsoup()",
        "snippet": "    private Jsoup() {}",
        "begin_line": 20,
        "end_line": 20,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Jsoup.java",
        "class_name": "org.jsoup.Jsoup",
        "signature": "org.jsoup.Jsoup.parse(java.lang.String, java.lang.String)",
        "snippet": "    public static Document parse(String html, String baseUri) {\n        return Parser.parse(html, baseUri);\n    }",
        "begin_line": 30,
        "end_line": 32,
        "comment": "\n     Parse HTML into a Document. The parser will make a sensible, balanced document tree out of any HTML.\n\n     @param html    HTML to parse\n     @param baseUri The URL where the HTML was retrieved from. Used to resolve relative URLs to absolute URLs, that occur\n     before the HTML declares a {@code <base href>} tag.\n     @return sane HTML\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Jsoup.java",
        "class_name": "org.jsoup.Jsoup",
        "signature": "org.jsoup.Jsoup.parse(java.lang.String)",
        "snippet": "    public static Document parse(String html) {\n        return Parser.parse(html, \"\");\n    }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "\n     Parse HTML into a Document. As no base URI is specified, absolute URL detection relies on the HTML including a\n     {@code <base href>} tag.\n\n     @param html HTML to parse\n     @return sane HTML\n\n     @see #parse(String, String)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Jsoup.java",
        "class_name": "org.jsoup.Jsoup",
        "signature": "org.jsoup.Jsoup.connect(java.lang.String)",
        "snippet": "    public static Connection connect(String url) {\n        return HttpConnection.connect(url);\n    }",
        "begin_line": 58,
        "end_line": 60,
        "comment": "\n     * Creates a new {@link Connection} to a URL. Use to fetch and parse a HTML page.\n     * <p>\n     * Use examples:\n     * <ul>\n     *  <li><code>Document doc = Jsoup.connect(\"http://example.com\").userAgent(\"Mozilla\").data(\"name\", \"jsoup\").get();</code></li>\n     *  <li><code>Document doc = Jsoup.connect(\"http://example.com\").cookie(\"auth\", \"token\").post();\n     * </ul>\n     * @param url URL to connect to. The protocol must be {@code http} or {@code https}.\n     * @return the connection. You can add data, cookies, and headers; set the user-agent, referrer, method; and then execute.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Jsoup.java",
        "class_name": "org.jsoup.Jsoup",
        "signature": "org.jsoup.Jsoup.parse(java.io.File, java.lang.String, java.lang.String)",
        "snippet": "    public static Document parse(File in, String charsetName, String baseUri) throws IOException {\n        return DataUtil.load(in, charsetName, baseUri);\n    }",
        "begin_line": 73,
        "end_line": 75,
        "comment": "\n     Parse the contents of a file as HTML.\n\n     @param in          file to load HTML from\n     @param charsetName (optional) character set of file contents. Set to {@code null} to determine from {@code http-equiv} meta tag, if\n     present, or fall back to {@code UTF-8} (which is often safe to do).\n     @param baseUri     The URL where the HTML was retrieved from, to resolve relative links against.\n     @return sane HTML\n\n     @throws IOException if the file could not be found, or read, or if the charsetName is invalid.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Jsoup.java",
        "class_name": "org.jsoup.Jsoup",
        "signature": "org.jsoup.Jsoup.parse(java.io.File, java.lang.String)",
        "snippet": "    public static Document parse(File in, String charsetName) throws IOException {\n        return DataUtil.load(in, charsetName, in.getAbsolutePath());\n    }",
        "begin_line": 88,
        "end_line": 90,
        "comment": "\n     Parse the contents of a file as HTML. The location of the file is used as the base URI to qualify relative URLs.\n\n     @param in          file to load HTML from\n     @param charsetName (optional) character set of file contents. Set to {@code null} to determine from {@code http-equiv} meta tag, if\n     present, or fall back to {@code UTF-8} (which is often safe to do).\n     @return sane HTML\n\n     @throws IOException if the file could not be found, or read, or if the charsetName is invalid.\n     @see #parse(File, String, String)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Jsoup.java",
        "class_name": "org.jsoup.Jsoup",
        "signature": "org.jsoup.Jsoup.parse(java.io.InputStream, java.lang.String, java.lang.String)",
        "snippet": "    public static Document parse(InputStream in, String charsetName, String baseUri) throws IOException {\n        return DataUtil.load(in, charsetName, baseUri);\n    }",
        "begin_line": 103,
        "end_line": 105,
        "comment": "\n     Read an input stream, and parse it to a Document.\n\n     @param in          input stream to read. Make sure to close it after parsing.\n     @param charsetName (optional) character set of file contents. Set to {@code null} to determine from {@code http-equiv} meta tag, if\n     present, or fall back to {@code UTF-8} (which is often safe to do).\n     @param baseUri     The URL where the HTML was retrieved from, to resolve relative links against.\n     @return sane HTML\n\n     @throws IOException if the file could not be found, or read, or if the charsetName is invalid.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Jsoup.java",
        "class_name": "org.jsoup.Jsoup",
        "signature": "org.jsoup.Jsoup.parseBodyFragment(java.lang.String, java.lang.String)",
        "snippet": "    public static Document parseBodyFragment(String bodyHtml, String baseUri) {\n        return Parser.parseBodyFragment(bodyHtml, baseUri);\n    }",
        "begin_line": 116,
        "end_line": 118,
        "comment": "\n     Parse a fragment of HTML, with the assumption that it forms the {@code body} of the HTML.\n\n     @param bodyHtml body HTML fragment\n     @param baseUri  URL to resolve relative URLs against.\n     @return sane HTML document\n\n     @see Document#body()\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Jsoup.java",
        "class_name": "org.jsoup.Jsoup",
        "signature": "org.jsoup.Jsoup.parseBodyFragment(java.lang.String)",
        "snippet": "    public static Document parseBodyFragment(String bodyHtml) {\n        return Parser.parseBodyFragment(bodyHtml, \"\");\n    }",
        "begin_line": 128,
        "end_line": 130,
        "comment": "\n     Parse a fragment of HTML, with the assumption that it forms the {@code body} of the HTML.\n\n     @param bodyHtml body HTML fragment\n     @return sane HTML document\n\n     @see Document#body()\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Jsoup.java",
        "class_name": "org.jsoup.Jsoup",
        "signature": "org.jsoup.Jsoup.parse(java.net.URL, int)",
        "snippet": "    public static Document parse(URL url, int timeoutMillis) throws IOException {\n        Connection con = HttpConnection.connect(url);\n        con.timeout(timeoutMillis);\n        return con.get();\n    }",
        "begin_line": 146,
        "end_line": 150,
        "comment": "\n     Fetch a URL, and parse it as HTML. Provided for compatibility; in most cases use {@link #connect(String)} instead.\n     <p>\n     The encoding character set is determined by the content-type header or http-equiv meta tag, or falls back to {@code UTF-8}.\n\n     @param url           URL to fetch (with a GET). The protocol must be {@code http} or {@code https}.\n     @param timeoutMillis Connection and read timeout, in milliseconds. If exceeded, IOException is thrown.\n     @return The parsed HTML.\n\n     @throws IOException If the final server response != 200 OK (redirects are followed), or if there's an error reading\n     the response stream.\n\n     @see #connect(String)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Jsoup.java",
        "class_name": "org.jsoup.Jsoup",
        "signature": "org.jsoup.Jsoup.clean(java.lang.String, java.lang.String, org.jsoup.safety.Whitelist)",
        "snippet": "    public static String clean(String bodyHtml, String baseUri, Whitelist whitelist) {\n        Document dirty = parseBodyFragment(bodyHtml, baseUri);\n        Cleaner cleaner = new Cleaner(whitelist);\n        Document clean = cleaner.clean(dirty);\n        return clean.body().html();\n    }",
        "begin_line": 163,
        "end_line": 168,
        "comment": "\n     Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted\n     tags and attributes.\n\n     @param bodyHtml  input untrusted HMTL\n     @param baseUri   URL to resolve relative URLs against\n     @param whitelist white-list of permitted HTML elements\n     @return safe HTML\n\n     @see Cleaner#clean(Document)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Jsoup.java",
        "class_name": "org.jsoup.Jsoup",
        "signature": "org.jsoup.Jsoup.clean(java.lang.String, org.jsoup.safety.Whitelist)",
        "snippet": "    public static String clean(String bodyHtml, Whitelist whitelist) {\n        return clean(bodyHtml, \"\", whitelist);\n    }",
        "begin_line": 180,
        "end_line": 182,
        "comment": "\n     Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted\n     tags and attributes.\n\n     @param bodyHtml  input untrusted HTML\n     @param whitelist white-list of permitted HTML elements\n     @return safe HTML\n\n     @see Cleaner#clean(Document)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/Jsoup.java",
        "class_name": "org.jsoup.Jsoup",
        "signature": "org.jsoup.Jsoup.isValid(java.lang.String, org.jsoup.safety.Whitelist)",
        "snippet": "    public static boolean isValid(String bodyHtml, Whitelist whitelist) {\n        Document dirty = parseBodyFragment(bodyHtml, \"\");\n        Cleaner cleaner = new Cleaner(whitelist);\n        return cleaner.isValid(dirty);\n    }",
        "begin_line": 192,
        "end_line": 196,
        "comment": "\n     Test if the input HTML has only tags and attributes allowed by the Whitelist. Useful for form validation. The input HTML should\n     still be run through the cleaner to set up enforced attributes, and to tidy the output.\n     @param bodyHtml HTML to test\n     @param whitelist whitelist to test against\n     @return true if no tags or attributes were removed; false otherwise\n     @see #clean(String, org.jsoup.safety.Whitelist) \n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/examples/ListLinks.java",
        "class_name": "org.jsoup.examples.ListLinks",
        "signature": "org.jsoup.examples.ListLinks.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) throws IOException {\n        Validate.isTrue(args.length == 1, \"usage: supply url to fetch\");\n        String url = args[0];\n        print(\"Fetching %s...\", url);\n\n        Document doc = Jsoup.connect(url).get();\n        Elements links = doc.select(\"a[href]\");\n        Elements media = doc.select(\"[src]\");\n        Elements imports = doc.select(\"link[href]\");\n\n        print(\"\\nMedia: (%d)\", media.size());\n        for (Element src : media) {\n            if (src.tagName().equals(\"img\"))\n                print(\" * %s: <%s> %sx%s (%s)\",\n                        src.tagName(), src.attr(\"abs:src\"), src.attr(\"width\"), src.attr(\"height\"),\n                        trim(src.attr(\"alt\"), 20));\n            else\n                print(\" * %s: <%s>\", src.tagName(), src.attr(\"abs:src\"));\n        }\n\n        print(\"\\nImports: (%d)\", imports.size());\n        for (Element link : imports) {\n            print(\" * %s <%s> (%s)\", link.tagName(),link.attr(\"abs:href\"), link.attr(\"rel\"));\n        }\n\n        print(\"\\nLinks: (%d)\", links.size());\n        for (Element link : links) {\n            print(\" * a: <%s>  (%s)\", link.attr(\"abs:href\"), trim(link.text(), 35));\n        }\n    }",
        "begin_line": 15,
        "end_line": 44,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/examples/ListLinks.java",
        "class_name": "org.jsoup.examples.ListLinks",
        "signature": "org.jsoup.examples.ListLinks.print(java.lang.String, java.lang.Object...)",
        "snippet": "    private static void print(String msg, Object... args) {\n        System.out.println(String.format(msg, args));\n    }",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/examples/ListLinks.java",
        "class_name": "org.jsoup.examples.ListLinks",
        "signature": "org.jsoup.examples.ListLinks.trim(java.lang.String, int)",
        "snippet": "    private static String trim(String s, int width) {\n        if (s.length() > width)\n            return s.substring(0, width-1) + \".\";\n        else\n            return s;\n    }",
        "begin_line": 50,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Parser.java",
        "class_name": "org.jsoup.parser.Parser",
        "signature": "org.jsoup.parser.Parser.Parser(java.lang.String, java.lang.String, boolean)",
        "snippet": "    private Parser(String html, String baseUri, boolean isBodyFragment) {\n        Validate.notNull(html);\n        Validate.notNull(baseUri);\n\n        stack = new LinkedList<Element>();\n        tq = new TokenQueue(html);\n        this.baseUri = baseUri;\n\n        if (isBodyFragment) {\n            doc = Document.createShell(baseUri);\n            stack.add(doc.body());\n        } else {\n            doc = new Document(baseUri);\n            stack.add(doc);\n        }\n    }",
        "begin_line": 29,
        "end_line": 44,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Parser.java",
        "class_name": "org.jsoup.parser.Parser",
        "signature": "org.jsoup.parser.Parser.parse(java.lang.String, java.lang.String)",
        "snippet": "    public static Document parse(String html, String baseUri) {\n        Parser parser = new Parser(html, baseUri, false);\n        return parser.parse();\n    }",
        "begin_line": 52,
        "end_line": 55,
        "comment": "\n     Parse HTML into a Document.\n     @param html HTML to parse\n     @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.\n     @return parsed Document\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Parser.java",
        "class_name": "org.jsoup.parser.Parser",
        "signature": "org.jsoup.parser.Parser.parseBodyFragment(java.lang.String, java.lang.String)",
        "snippet": "    public static Document parseBodyFragment(String bodyHtml, String baseUri) {\n        Parser parser = new Parser(bodyHtml, baseUri, true);\n        return parser.parse();\n    }",
        "begin_line": 63,
        "end_line": 66,
        "comment": "\n     Parse a fragment of HTML into the {@code body} of a Document.\n     @param bodyHtml fragment of HTML\n     @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.\n     @return Document, with empty head, and HTML parsed into body\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Parser.java",
        "class_name": "org.jsoup.parser.Parser",
        "signature": "org.jsoup.parser.Parser.parseBodyFragmentRelaxed(java.lang.String, java.lang.String)",
        "snippet": "    public static Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {\n        Parser parser = new Parser(bodyHtml, baseUri, true);\n        parser.relaxed = true;\n        return parser.parse();\n    }",
        "begin_line": 75,
        "end_line": 79,
        "comment": "\n     Parse a fragment of HTML into the {@code body} of a Document, with relaxed parsing enabled. Relaxed, in this\n     context, means that implicit tags are not automatically created when missing.\n     @param bodyHtml fragment of HTML\n     @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.\n     @return Document, with empty head, and HTML parsed into body\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Parser.java",
        "class_name": "org.jsoup.parser.Parser",
        "signature": "org.jsoup.parser.Parser.parse()",
        "snippet": "    private Document parse() {\n        while (!tq.isEmpty()) {\n            if (tq.matchesStartTag()) {\n                parseStartTag();\n            } else if (tq.matchesCS(\"</\")) {\n                parseEndTag();\n            } else if (tq.matchesCS(\"<!--\")) {\n                parseComment();\n            } else if (tq.matches(\"<![CDATA[\")) {\n                parseCdata();\n            } else if (tq.matchesCS(\"<?\") || tq.matchesCS(\"<!\")) {\n                parseXmlDecl();\n            } else {\n                parseTextNode();\n            }\n        }\n        return doc.normalise();\n    }",
        "begin_line": 81,
        "end_line": 98,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Parser.java",
        "class_name": "org.jsoup.parser.Parser",
        "signature": "org.jsoup.parser.Parser.parseComment()",
        "snippet": "    private void parseComment() {\n        tq.consume(\"<!--\");\n        String data = tq.chompTo(\"->\");\n\n        if (data.endsWith(\"-\")) // i.e. was -->\n            data = data.substring(0, data.length()-1);\n        Comment comment = new Comment(data, baseUri);\n        last().appendChild(comment);\n    }",
        "begin_line": 100,
        "end_line": 108,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Parser.java",
        "class_name": "org.jsoup.parser.Parser",
        "signature": "org.jsoup.parser.Parser.parseXmlDecl()",
        "snippet": "    private void parseXmlDecl() {\n        tq.consume(\"<\");\n        Character firstChar = tq.consume(); // <? or <!, from initial match.\n        boolean procInstr = firstChar.toString().equals(\"!\");\n        String data = tq.chompTo(\">\");\n\n        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);\n        last().appendChild(decl);\n    }",
        "begin_line": 110,
        "end_line": 118,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Parser.java",
        "class_name": "org.jsoup.parser.Parser",
        "signature": "org.jsoup.parser.Parser.parseEndTag()",
        "snippet": "    private void parseEndTag() {\n        tq.consume(\"</\");\n        String tagName = tq.consumeTagName();\n        tq.chompTo(\">\");\n\n        if (tagName.length() != 0) {\n            Tag tag = Tag.valueOf(tagName);\n            if (!last().tag().isIgnorableEndTag(tag)) // skips </tr> if in <table>\n                popStackToClose(tag);\n        }\n    }",
        "begin_line": 120,
        "end_line": 130,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Parser.java",
        "class_name": "org.jsoup.parser.Parser",
        "signature": "org.jsoup.parser.Parser.parseStartTag()",
        "snippet": "    private void parseStartTag() {\n        tq.consume(\"<\");\n        String tagName = tq.consumeTagName();\n        Validate.notEmpty(tagName, \"Unexpectedly empty tagname. (This should not occur, please report!)\");\n        \n        tq.consumeWhitespace();\n        Attributes attributes = new Attributes();\n        while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.isEmpty()) {\n            Attribute attribute = parseAttribute();\n            if (attribute != null)\n                attributes.put(attribute);\n        }\n\n        Tag tag = Tag.valueOf(tagName);\n        Element child = new Element(tag, baseUri, attributes);\n\n        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>\n        if (tq.matchChomp(\"/>\")) { // close empty element or tag\n            isEmptyElement = true;\n            if (!tag.isKnownTag()) // if unknown and a self closed, allow it to be self closed on output. this doesn't force all instances to be empty\n                tag.setSelfClosing();\n        } else {\n            tq.matchChomp(\">\");\n        }\n        addChildToParent(child, isEmptyElement);\n\n        // pc data only tags (textarea, script): chomp to end tag, add content as text node\n        if (tag.isData()) {\n            String data = tq.chompToIgnoreCase(\"</\" + tagName);\n            tq.chompTo(\">\");\n            popStackToClose(tag);\n            \n            Node dataNode;\n            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)\n                dataNode = TextNode.createFromEncoded(data, baseUri);\n            else\n                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for \" in script)\n            child.appendChild(dataNode);   \n        }\n\n        // <base href>: update the base uri\n        if (child.tagName().equals(\"base\")) {\n            String href = child.absUrl(\"href\");\n            if (href.length() != 0) { // ignore <base target> etc\n                baseUri = href;\n                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base\n            }\n        }\n    }",
        "begin_line": 132,
        "end_line": 180,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Parser.java",
        "class_name": "org.jsoup.parser.Parser",
        "signature": "org.jsoup.parser.Parser.parseAttribute()",
        "snippet": "    private Attribute parseAttribute() {\n        tq.consumeWhitespace();\n        String key = tq.consumeAttributeKey();\n        String value = \"\";\n        tq.consumeWhitespace();\n        if (tq.matchChomp(\"=\")) {\n            tq.consumeWhitespace();\n\n            if (tq.matchChomp(SQ)) {\n                value = tq.chompTo(SQ);\n            } else if (tq.matchChomp(DQ)) {\n                value = tq.chompTo(DQ);\n            } else {\n                StringBuilder valueAccum = new StringBuilder();\n                // no ' or \" to look for, so scan to end tag or space (or end of stream)\n                while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.matchesWhitespace() && !tq.isEmpty()) {\n                    valueAccum.append(tq.consume());\n                }\n                value = valueAccum.toString();\n            }\n            tq.consumeWhitespace();\n        }\n        if (key.length() != 0)\n            return Attribute.createFromEncoded(key, value);\n        else {\n            if (value.length() == 0) // no key, no val; unknown char, keep popping so not get stuck\n                tq.advance();\n                \n            return null;\n        }\n    }",
        "begin_line": 182,
        "end_line": 212,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Parser.java",
        "class_name": "org.jsoup.parser.Parser",
        "signature": "org.jsoup.parser.Parser.parseTextNode()",
        "snippet": "    private void parseTextNode() {\n        TextNode textNode;\n        // special case: handle string like \"hello < there\". first char will be \"<\", because of matchStartTag\n        if (tq.peek().equals('<')) {\n            tq.advance();\n            textNode = new TextNode(\"<\", baseUri);\n        } else {\n            String text = tq.consumeTo(\"<\");\n            textNode = TextNode.createFromEncoded(text, baseUri);\n        }\n        last().appendChild(textNode);\n    }",
        "begin_line": 214,
        "end_line": 225,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Parser.java",
        "class_name": "org.jsoup.parser.Parser",
        "signature": "org.jsoup.parser.Parser.parseCdata()",
        "snippet": "    private void parseCdata() {\n        tq.consume(\"<![CDATA[\");\n        String rawText = tq.chompTo(\"]]>\");\n        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape\n        last().appendChild(textNode);\n    }",
        "begin_line": 227,
        "end_line": 232,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Parser.java",
        "class_name": "org.jsoup.parser.Parser",
        "signature": "org.jsoup.parser.Parser.addChildToParent(org.jsoup.nodes.Element, boolean)",
        "snippet": "    private Element addChildToParent(Element child, boolean isEmptyElement) {\n        Element parent = popStackToSuitableContainer(child.tag());\n        Tag childTag = child.tag();\n        boolean validAncestor = stackHasValidParent(childTag);\n\n        if (!validAncestor && !relaxed) {\n            // create implicit parent around this child\n            Tag parentTag = childTag.getImplicitParent();\n            Element implicit = new Element(parentTag, baseUri);\n            // special case: make sure there's a head before putting in body\n            if (child.tag().equals(bodyTag)) {\n                Element head = new Element(headTag, baseUri);\n                implicit.appendChild(head);\n            }\n            implicit.appendChild(child);\n\n            // recurse to ensure somewhere to put parent\n            Element root = addChildToParent(implicit, false);\n            if (!isEmptyElement)\n                stack.addLast(child);\n            return root;\n        }\n\n        parent.appendChild(child);\n\n        if (!isEmptyElement)\n            stack.addLast(child);\n        return parent;\n    }",
        "begin_line": 234,
        "end_line": 262,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Parser.java",
        "class_name": "org.jsoup.parser.Parser",
        "signature": "org.jsoup.parser.Parser.stackHasValidParent(org.jsoup.parser.Tag)",
        "snippet": "    private boolean stackHasValidParent(Tag childTag) {\n        if (stack.size() == 1 && childTag.equals(htmlTag))\n            return true; // root is valid for html node\n\n        if (childTag.requiresSpecificParent())\n            return stack.getLast().tag().isValidParent(childTag);\n\n        // otherwise, look up the stack for valid ancestors\n        for (int i = stack.size() -1; i >= 0; i--) {\n            Element el = stack.get(i);\n            Tag parent2 = el.tag();\n            if (parent2.isValidAncestor(childTag)) {\n                return true;\n            }\n        }\n        return false;\n    }",
        "begin_line": 264,
        "end_line": 280,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Parser.java",
        "class_name": "org.jsoup.parser.Parser",
        "signature": "org.jsoup.parser.Parser.popStackToSuitableContainer(org.jsoup.parser.Tag)",
        "snippet": "    private Element popStackToSuitableContainer(Tag tag) {\n        while (!stack.isEmpty()) {\n            if (last().tag().canContain(tag))\n                return last();\n            else\n                stack.removeLast();\n        }\n        return null;\n    }",
        "begin_line": 282,
        "end_line": 290,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Parser.java",
        "class_name": "org.jsoup.parser.Parser",
        "signature": "org.jsoup.parser.Parser.popStackToClose(org.jsoup.parser.Tag)",
        "snippet": "    private Element popStackToClose(Tag tag) {\n        // first check to see if stack contains this tag; if so pop to there, otherwise ignore\n        int counter = 0;\n        Element elToClose = null;\n        for (int i = stack.size() -1; i > 0; i--) {\n            counter++;\n            Element el = stack.get(i);\n            Tag elTag = el.tag();\n            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body\n                break;\n            } else if (elTag.equals(tag)) {\n                elToClose = el;\n                break;\n            }\n        }\n        if (elToClose != null) {\n            for (int i = 0; i < counter; i++) {\n                stack.removeLast();\n            }\n        }\n        return elToClose;\n    }",
        "begin_line": 292,
        "end_line": 313,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Parser.java",
        "class_name": "org.jsoup.parser.Parser",
        "signature": "org.jsoup.parser.Parser.last()",
        "snippet": "    private Element last() {\n        return stack.getLast();\n    }",
        "begin_line": 315,
        "end_line": 317,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Tag.java",
        "class_name": "org.jsoup.parser.Tag",
        "signature": "org.jsoup.parser.Tag.Tag(java.lang.String)",
        "snippet": "    private Tag(String tagName) {\n        this.tagName = tagName.toLowerCase();\n    }",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Tag.java",
        "class_name": "org.jsoup.parser.Tag",
        "signature": "org.jsoup.parser.Tag.getName()",
        "snippet": "    public String getName() {\n        return tagName;\n    }",
        "begin_line": 39,
        "end_line": 41,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Tag.java",
        "class_name": "org.jsoup.parser.Tag",
        "signature": "org.jsoup.parser.Tag.valueOf(java.lang.String)",
        "snippet": "    public static Tag valueOf(String tagName) {\n        Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n\n        synchronized (tags) {\n            Tag tag = tags.get(tagName);\n            if (tag == null) {\n                // not defined: create default; go anywhere, do anything! (incl be inside a <p>)\n                tag = new Tag(tagName);\n                tag.setAncestor(defaultAncestor.tagName);\n                tag.setExcludes();\n                tag.isBlock = false;\n                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }",
        "begin_line": 50,
        "end_line": 67,
        "comment": "\n     Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.\n     <p>\n     Pre-defined tags (P, DIV etc) will be ==, but unknown tags are not registered and will only .equals().\n     @param tagName Name of tag, e.g. \"p\". Case insensitive.\n     @return The tag, either defined or new generic.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Tag.java",
        "class_name": "org.jsoup.parser.Tag",
        "signature": "org.jsoup.parser.Tag.canContain(org.jsoup.parser.Tag)",
        "snippet": "    boolean canContain(Tag child) {\n        Validate.notNull(child);\n\n        if (child.isBlock && !this.canContainBlock)\n            return false;\n\n        if (!child.isBlock && !this.canContainInline) // not block == inline\n            return false;\n\n        if (this.optionalClosing && this.equals(child))\n            return false;\n\n        if (this.empty || this.isData())\n            return false;\n        \n        // don't allow children to contain their parent (directly)\n        if (this.requiresSpecificParent() && this.getImplicitParent().equals(child))\n            return false;\n\n        // confirm limited children\n        if (limitChildren) {\n            for (Tag childParent : child.ancestors) {\n                if (childParent.equals(this))\n                    return true;\n            }\n            return false;\n        }\n        \n        // exclude children\n        if (!excludes.isEmpty()) {\n            for (Tag excluded: excludes) {\n                if (child.equals(excluded))\n                    return false;\n            }\n        }\n        \n        return true;\n    }",
        "begin_line": 74,
        "end_line": 111,
        "comment": "\n     Test if this tag, the prospective parent, can accept the proposed child.\n     @param child potential child tag.\n     @return true if this can contain child.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Tag.java",
        "class_name": "org.jsoup.parser.Tag",
        "signature": "org.jsoup.parser.Tag.isBlock()",
        "snippet": "    public boolean isBlock() {\n        return isBlock;\n    }",
        "begin_line": 117,
        "end_line": 119,
        "comment": "\n     Gets if this is a block tag.\n     @return if block tag\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Tag.java",
        "class_name": "org.jsoup.parser.Tag",
        "signature": "org.jsoup.parser.Tag.canContainBlock()",
        "snippet": "    public boolean canContainBlock() {\n        return canContainBlock;\n    }",
        "begin_line": 125,
        "end_line": 127,
        "comment": "\n     Gets if this tag can contain block tags.\n     @return if tag can contain block tags\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Tag.java",
        "class_name": "org.jsoup.parser.Tag",
        "signature": "org.jsoup.parser.Tag.isInline()",
        "snippet": "    public boolean isInline() {\n        return !isBlock;\n    }",
        "begin_line": 133,
        "end_line": 135,
        "comment": "\n     Gets if this tag is an inline tag.\n     @return if this tag is an inline tag.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Tag.java",
        "class_name": "org.jsoup.parser.Tag",
        "signature": "org.jsoup.parser.Tag.isData()",
        "snippet": "    public boolean isData() {\n        return !canContainInline && !isEmpty();\n    }",
        "begin_line": 141,
        "end_line": 143,
        "comment": "\n     Gets if this tag is a data only tag.\n     @return if this tag is a data only tag\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Tag.java",
        "class_name": "org.jsoup.parser.Tag",
        "signature": "org.jsoup.parser.Tag.isEmpty()",
        "snippet": "    public boolean isEmpty() {\n        return empty;\n    }",
        "begin_line": 149,
        "end_line": 151,
        "comment": "\n     Get if this is an empty tag\n     @return if this is an emtpy tag\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Tag.java",
        "class_name": "org.jsoup.parser.Tag",
        "signature": "org.jsoup.parser.Tag.isSelfClosing()",
        "snippet": "    public boolean isSelfClosing() {\n        return empty || selfClosing;\n    }",
        "begin_line": 157,
        "end_line": 159,
        "comment": "\n     * Get if this tag is self closing.\n     * @return if this tag should be output as self closing.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Tag.java",
        "class_name": "org.jsoup.parser.Tag",
        "signature": "org.jsoup.parser.Tag.isKnownTag()",
        "snippet": "    public boolean isKnownTag() {\n        return knownTag;\n    }",
        "begin_line": 165,
        "end_line": 167,
        "comment": "\n     * Get if this is a pre-defined tag, or was auto created on parsing.\n     * @return if a known tag\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Tag.java",
        "class_name": "org.jsoup.parser.Tag",
        "signature": "org.jsoup.parser.Tag.preserveWhitespace()",
        "snippet": "    public boolean preserveWhitespace() {\n        return preserveWhitespace;\n    }",
        "begin_line": 173,
        "end_line": 175,
        "comment": "\n     Get if this tag should preserve whitespace within child text nodes.\n     @return if preserve whitepace\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Tag.java",
        "class_name": "org.jsoup.parser.Tag",
        "signature": "org.jsoup.parser.Tag.getImplicitParent()",
        "snippet": "    Tag getImplicitParent() {\n        return (!ancestors.isEmpty()) ? ancestors.get(0) : null;\n    }",
        "begin_line": 177,
        "end_line": 179,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Tag.java",
        "class_name": "org.jsoup.parser.Tag",
        "signature": "org.jsoup.parser.Tag.requiresSpecificParent()",
        "snippet": "    boolean requiresSpecificParent() {\n        return directDescendant;\n    }",
        "begin_line": 181,
        "end_line": 183,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Tag.java",
        "class_name": "org.jsoup.parser.Tag",
        "signature": "org.jsoup.parser.Tag.isValidParent(org.jsoup.parser.Tag)",
        "snippet": "    boolean isValidParent(Tag child) {\n        return isValidAncestor(child);\n    }",
        "begin_line": 185,
        "end_line": 187,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Tag.java",
        "class_name": "org.jsoup.parser.Tag",
        "signature": "org.jsoup.parser.Tag.isValidAncestor(org.jsoup.parser.Tag)",
        "snippet": "    boolean isValidAncestor(Tag child) {\n        if (child.ancestors.isEmpty())\n            return true; // HTML tag\n\n        for (int i = 0; i < child.ancestors.size(); i++)\n            if (this.equals(child.ancestors.get(i)))\n                return true;\n        \n        return false;\n    }",
        "begin_line": 189,
        "end_line": 198,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Tag.java",
        "class_name": "org.jsoup.parser.Tag",
        "signature": "org.jsoup.parser.Tag.isIgnorableEndTag(org.jsoup.parser.Tag)",
        "snippet": "    boolean isIgnorableEndTag(Tag child) {\n        for (Tag endTag : ignoreEndTags) {\n            if (child.equals(endTag))\n                return true;\n        }\n        return false;        \n    }",
        "begin_line": 200,
        "end_line": 206,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Tag.java",
        "class_name": "org.jsoup.parser.Tag",
        "signature": "org.jsoup.parser.Tag.equals(java.lang.Object)",
        "snippet": "    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n\n        Tag tag = (Tag) o;\n\n        if (tagName != null ? !tagName.equals(tag.tagName) : tag.tagName != null) return false;\n\n        return true;\n    }",
        "begin_line": 208,
        "end_line": 218,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Tag.java",
        "class_name": "org.jsoup.parser.Tag",
        "signature": "org.jsoup.parser.Tag.hashCode()",
        "snippet": "    @Override\n    public int hashCode() {\n        int result = tagName != null ? tagName.hashCode() : 0;\n        result = 31 * result + (isBlock ? 1 : 0);\n        result = 31 * result + (canContainBlock ? 1 : 0);\n        result = 31 * result + (canContainInline ? 1 : 0);\n        result = 31 * result + (optionalClosing ? 1 : 0);\n        result = 31 * result + (empty ? 1 : 0);\n        return result;\n    }",
        "begin_line": 220,
        "end_line": 229,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Tag.java",
        "class_name": "org.jsoup.parser.Tag",
        "signature": "org.jsoup.parser.Tag.toString()",
        "snippet": "    public String toString() {\n        return tagName;\n    }",
        "begin_line": 231,
        "end_line": 233,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Tag.java",
        "class_name": "org.jsoup.parser.Tag",
        "signature": "org.jsoup.parser.Tag.createBlock(java.lang.String)",
        "snippet": "    private static Tag createBlock(String tagName) {\n        return register(new Tag(tagName));\n    }",
        "begin_line": 393,
        "end_line": 395,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Tag.java",
        "class_name": "org.jsoup.parser.Tag",
        "signature": "org.jsoup.parser.Tag.createInline(java.lang.String)",
        "snippet": "    private static Tag createInline(String tagName) {\n        Tag inline = new Tag(tagName);\n        inline.isBlock = false;\n        inline.canContainBlock = false;\n        return register(inline);\n    }",
        "begin_line": 397,
        "end_line": 402,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Tag.java",
        "class_name": "org.jsoup.parser.Tag",
        "signature": "org.jsoup.parser.Tag.register(org.jsoup.parser.Tag)",
        "snippet": "    private static Tag register(Tag tag) {\n        tag.setAncestor(defaultAncestor.tagName);\n        tag.setKnownTag();\n        synchronized (tags) {\n            tags.put(tag.tagName, tag);\n        }\n        return tag;\n    }",
        "begin_line": 404,
        "end_line": 411,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Tag.java",
        "class_name": "org.jsoup.parser.Tag",
        "signature": "org.jsoup.parser.Tag.setCanContainBlock()",
        "snippet": "    private Tag setCanContainBlock() {\n        canContainBlock = true;\n        return this;\n    }",
        "begin_line": 413,
        "end_line": 416,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Tag.java",
        "class_name": "org.jsoup.parser.Tag",
        "signature": "org.jsoup.parser.Tag.setContainInlineOnly()",
        "snippet": "    private Tag setContainInlineOnly() {\n        canContainBlock = false;\n        canContainInline = true;\n        return this;\n    }",
        "begin_line": 418,
        "end_line": 422,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Tag.java",
        "class_name": "org.jsoup.parser.Tag",
        "signature": "org.jsoup.parser.Tag.setContainDataOnly()",
        "snippet": "    private Tag setContainDataOnly() {\n        canContainBlock = false;\n        canContainInline = false;\n        preserveWhitespace = true;\n        return this;\n    }",
        "begin_line": 424,
        "end_line": 429,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Tag.java",
        "class_name": "org.jsoup.parser.Tag",
        "signature": "org.jsoup.parser.Tag.setEmpty()",
        "snippet": "    private Tag setEmpty() {\n        canContainBlock = false;\n        canContainInline = false;\n        empty = true;\n        return this;\n    }",
        "begin_line": 431,
        "end_line": 436,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Tag.java",
        "class_name": "org.jsoup.parser.Tag",
        "signature": "org.jsoup.parser.Tag.setOptionalClosing()",
        "snippet": "    private Tag setOptionalClosing() {\n        optionalClosing = true;\n        return this;\n    }",
        "begin_line": 438,
        "end_line": 441,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Tag.java",
        "class_name": "org.jsoup.parser.Tag",
        "signature": "org.jsoup.parser.Tag.setPreserveWhitespace()",
        "snippet": "    private Tag setPreserveWhitespace() {\n        preserveWhitespace = true;\n        return this;\n    }",
        "begin_line": 443,
        "end_line": 446,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Tag.java",
        "class_name": "org.jsoup.parser.Tag",
        "signature": "org.jsoup.parser.Tag.setAncestor(java.lang.String...)",
        "snippet": "    private Tag setAncestor(String... tagNames) {\n        if (tagNames == null || tagNames.length == 0) {\n            ancestors = Collections.emptyList();\n        } else {\n            ancestors = new ArrayList<Tag>(tagNames.length);\n            for (String name : tagNames) {\n                ancestors.add(Tag.valueOf(name));\n            }\n        }\n        return this;\n    }",
        "begin_line": 448,
        "end_line": 458,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Tag.java",
        "class_name": "org.jsoup.parser.Tag",
        "signature": "org.jsoup.parser.Tag.setExcludes(java.lang.String...)",
        "snippet": "    private Tag setExcludes(String... tagNames) {\n        if (tagNames == null || tagNames.length == 0) {\n            excludes = Collections.emptyList();\n        } else {\n            excludes = new ArrayList<Tag>(tagNames.length);\n            for (String name : tagNames) {\n                excludes.add(Tag.valueOf(name));\n            }\n        }\n        return this;\n    }",
        "begin_line": 460,
        "end_line": 470,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Tag.java",
        "class_name": "org.jsoup.parser.Tag",
        "signature": "org.jsoup.parser.Tag.setIgnoreEnd(java.lang.String...)",
        "snippet": "    private Tag setIgnoreEnd(String... tagNames) {\n        if (tagNames == null || tagNames.length == 0) {\n            ignoreEndTags = Collections.emptyList();\n        } else {\n            ignoreEndTags = new ArrayList<Tag>(tagNames.length);\n            for (String name : tagNames) {\n                ignoreEndTags.add(Tag.valueOf(name));\n            }\n        }\n        return this;\n    }",
        "begin_line": 472,
        "end_line": 482,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Tag.java",
        "class_name": "org.jsoup.parser.Tag",
        "signature": "org.jsoup.parser.Tag.setParent(java.lang.String...)",
        "snippet": "    private Tag setParent(String... tagNames) {\n        directDescendant = true;\n        setAncestor(tagNames);\n        return this;\n    }",
        "begin_line": 484,
        "end_line": 488,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Tag.java",
        "class_name": "org.jsoup.parser.Tag",
        "signature": "org.jsoup.parser.Tag.setLimitChildren()",
        "snippet": "    private Tag setLimitChildren() {\n        limitChildren = true;\n        return this;\n    }",
        "begin_line": 490,
        "end_line": 493,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Tag.java",
        "class_name": "org.jsoup.parser.Tag",
        "signature": "org.jsoup.parser.Tag.setSelfClosing()",
        "snippet": "    Tag setSelfClosing() {\n        selfClosing = true;\n        return this;\n    }",
        "begin_line": 495,
        "end_line": 498,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/Tag.java",
        "class_name": "org.jsoup.parser.Tag",
        "signature": "org.jsoup.parser.Tag.setKnownTag()",
        "snippet": "    private Tag setKnownTag() {\n        knownTag = true;\n        return this;\n    }",
        "begin_line": 500,
        "end_line": 503,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/TokenQueue.java",
        "class_name": "org.jsoup.parser.TokenQueue",
        "signature": "org.jsoup.parser.TokenQueue.TokenQueue(java.lang.String)",
        "snippet": "    public TokenQueue(String data) {\n        Validate.notNull(data);\n        queue = data;\n    }",
        "begin_line": 20,
        "end_line": 23,
        "comment": "\n     Create a new TokenQueue.\n     @param data string of data to back queue.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/TokenQueue.java",
        "class_name": "org.jsoup.parser.TokenQueue",
        "signature": "org.jsoup.parser.TokenQueue.isEmpty()",
        "snippet": "    public boolean isEmpty() {\n        return remainingLength() == 0;\n    }",
        "begin_line": 29,
        "end_line": 31,
        "comment": "\n     * Is the queue empty?\n     * @return true if no data left in queue.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/TokenQueue.java",
        "class_name": "org.jsoup.parser.TokenQueue",
        "signature": "org.jsoup.parser.TokenQueue.remainingLength()",
        "snippet": "    private int remainingLength() {\n        return queue.length() - pos;\n    }",
        "begin_line": 33,
        "end_line": 35,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/TokenQueue.java",
        "class_name": "org.jsoup.parser.TokenQueue",
        "signature": "org.jsoup.parser.TokenQueue.peek()",
        "snippet": "    public Character peek() {\n        return isEmpty() ? null : queue.charAt(pos);\n    }",
        "begin_line": 41,
        "end_line": 43,
        "comment": "\n     * Retrieves but does not remove the first character from the queue.\n     * @return First character, or null if empty.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/TokenQueue.java",
        "class_name": "org.jsoup.parser.TokenQueue",
        "signature": "org.jsoup.parser.TokenQueue.addFirst(java.lang.Character)",
        "snippet": "    public void addFirst(Character c) {\n        addFirst(c.toString());\n    }",
        "begin_line": 49,
        "end_line": 51,
        "comment": "\n     Add a character to the start of the queue (will be the next character retrieved).\n     @param c character to add\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/TokenQueue.java",
        "class_name": "org.jsoup.parser.TokenQueue",
        "signature": "org.jsoup.parser.TokenQueue.addFirst(java.lang.String)",
        "snippet": "    public void addFirst(String seq) {\n        // not very performant, but an edge case\n        queue = seq + queue.substring(pos);\n        pos = 0;\n    }",
        "begin_line": 57,
        "end_line": 61,
        "comment": "\n     Add a string to the start of the queue.\n     @param seq string to add.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/TokenQueue.java",
        "class_name": "org.jsoup.parser.TokenQueue",
        "signature": "org.jsoup.parser.TokenQueue.matches(java.lang.String)",
        "snippet": "    public boolean matches(String seq) {\n        int count = seq.length();\n        if (count > remainingLength())\n            return false;\n\n        while (--count >= 0) {\n            if (Character.toLowerCase(seq.charAt(count)) != Character.toLowerCase(queue.charAt(pos+count)))\n                return false;\n        }\n        return true;\n    }",
        "begin_line": 68,
        "end_line": 78,
        "comment": "\n     * Tests if the next characters on the queue match the sequence. Case insensitive.\n     * @param seq String to check queue for.\n     * @return true if the next characters match.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/TokenQueue.java",
        "class_name": "org.jsoup.parser.TokenQueue",
        "signature": "org.jsoup.parser.TokenQueue.matchesCS(java.lang.String)",
        "snippet": "    public boolean matchesCS(String seq) {\n        return queue.startsWith(seq, pos);\n    }",
        "begin_line": 85,
        "end_line": 87,
        "comment": "\n     * Case sensitive match test.\n     * @param seq\n     * @return\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/TokenQueue.java",
        "class_name": "org.jsoup.parser.TokenQueue",
        "signature": "org.jsoup.parser.TokenQueue.matchesAny(java.lang.String...)",
        "snippet": "    public boolean matchesAny(String... seq) {\n        for (String s : seq) {\n            if (matches(s))\n                return true;\n        }\n        return false;\n    }",
        "begin_line": 95,
        "end_line": 101,
        "comment": "\n     Tests if the next characters match any of the sequences. Case insensitive.\n     @param seq\n     @return\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/TokenQueue.java",
        "class_name": "org.jsoup.parser.TokenQueue",
        "signature": "org.jsoup.parser.TokenQueue.matchesAny(char...)",
        "snippet": "    public boolean matchesAny(char... seq) {\n        if (isEmpty())\n            return false;\n\n        for (char c: seq) {\n            if (queue.charAt(pos) == c)\n                return true;\n        }\n        return false;\n    }",
        "begin_line": 103,
        "end_line": 112,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/TokenQueue.java",
        "class_name": "org.jsoup.parser.TokenQueue",
        "signature": "org.jsoup.parser.TokenQueue.matchesStartTag()",
        "snippet": "    public boolean matchesStartTag() {\n        // micro opt for matching \"<x\"\n        return (remainingLength() >= 2 && queue.charAt(pos) == '<' && Character.isLetterOrDigit(queue.charAt(pos+1)));\n    }",
        "begin_line": 114,
        "end_line": 117,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/TokenQueue.java",
        "class_name": "org.jsoup.parser.TokenQueue",
        "signature": "org.jsoup.parser.TokenQueue.matchChomp(java.lang.String)",
        "snippet": "    public boolean matchChomp(String seq) {\n        if (matches(seq)) {\n            pos += seq.length();\n            return true;\n        } else {\n            return false;\n        }\n    }",
        "begin_line": 125,
        "end_line": 132,
        "comment": "\n     * Tests if the queue matches the sequence (as with match), and if they do, removes the matched string from the\n     * queue.\n     * @param seq String to search for, and if found, remove from queue.\n     * @return true if found and removed, false if not found.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/TokenQueue.java",
        "class_name": "org.jsoup.parser.TokenQueue",
        "signature": "org.jsoup.parser.TokenQueue.matchesWhitespace()",
        "snippet": "    public boolean matchesWhitespace() {\n        return !isEmpty() && Character.isWhitespace(queue.charAt(pos));\n    }",
        "begin_line": 138,
        "end_line": 140,
        "comment": "\n     Tests if queue starts with a whitespace character.\n     @return if starts with whitespace\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/TokenQueue.java",
        "class_name": "org.jsoup.parser.TokenQueue",
        "signature": "org.jsoup.parser.TokenQueue.matchesWord()",
        "snippet": "    public boolean matchesWord() {\n        return !isEmpty() && Character.isLetterOrDigit(queue.charAt(pos));\n    }",
        "begin_line": 146,
        "end_line": 148,
        "comment": "\n     Test if the queue matches a word character (letter or digit).\n     @return if matches a word character\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/TokenQueue.java",
        "class_name": "org.jsoup.parser.TokenQueue",
        "signature": "org.jsoup.parser.TokenQueue.advance()",
        "snippet": "    public void advance() {\n        if (!isEmpty()) pos++;\n    }",
        "begin_line": 153,
        "end_line": 155,
        "comment": "\n     * Drops the next character off the queue.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/TokenQueue.java",
        "class_name": "org.jsoup.parser.TokenQueue",
        "signature": "org.jsoup.parser.TokenQueue.consume()",
        "snippet": "    public Character consume() {\n        Character c = queue.charAt(pos);\n        pos++;\n        return c;\n    }",
        "begin_line": 161,
        "end_line": 165,
        "comment": "\n     * Consume one character off queue.\n     * @return first character on queue.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/TokenQueue.java",
        "class_name": "org.jsoup.parser.TokenQueue",
        "signature": "org.jsoup.parser.TokenQueue.consume(java.lang.String)",
        "snippet": "    public void consume(String seq) {\n        if (!matches(seq))\n            throw new IllegalStateException(\"Queue did not match expected sequence\");\n        int len = seq.length();\n        if (len > remainingLength())\n            throw new IllegalStateException(\"Queue not long enough to consume sequence\");\n        \n        pos += len;\n    }",
        "begin_line": 174,
        "end_line": 182,
        "comment": "\n     * Consumes the supplied sequence of the queue. If the queue does not start with the supplied sequence, will\n     * throw an illegal state exception -- but you should be running match() against that condition.\n     <p>\n     Case insensitive.\n     * @param seq sequence to remove from head of queue.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/TokenQueue.java",
        "class_name": "org.jsoup.parser.TokenQueue",
        "signature": "org.jsoup.parser.TokenQueue.consumeTo(java.lang.String)",
        "snippet": "    public String consumeTo(String seq) {\n        int offset = queue.indexOf(seq, pos);\n        if (offset != -1) {\n            String consumed = queue.substring(pos, offset);\n            pos += consumed.length();\n            return consumed;\n        } else {\n            return remainder();\n        }\n    }",
        "begin_line": 189,
        "end_line": 198,
        "comment": "\n     * Pulls a string off the queue, up to but exclusive of the match sequence, or to the queue running out.\n     * @param seq String to end on (and not include in return, but leave on queue). <b>Case sensitive.</b>\n     * @return The matched data consumed from queue.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/TokenQueue.java",
        "class_name": "org.jsoup.parser.TokenQueue",
        "signature": "org.jsoup.parser.TokenQueue.consumeToIgnoreCase(java.lang.String)",
        "snippet": "    public String consumeToIgnoreCase(String seq) {\n        int start = pos;\n        String first = seq.substring(0, 1);\n        boolean canScan = first.toLowerCase().equals(first.toUpperCase()); // if first is not cased, use index of\n        while (!isEmpty() && !matches(seq)) {\n            if (canScan) {\n                int skip = queue.indexOf(first, pos) - pos;\n                if (skip <= 0)\n                    pos++;\n                else if (skip < 0) // no chance of finding, grab to end\n                    pos = queue.length() - 1;\n                else\n                    pos += skip;\n            }\n            else\n                pos++;\n        }\n\n        String data = queue.substring(start, pos); \n        return data; \n    }",
        "begin_line": 200,
        "end_line": 220,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/TokenQueue.java",
        "class_name": "org.jsoup.parser.TokenQueue",
        "signature": "org.jsoup.parser.TokenQueue.consumeToAny(java.lang.String...)",
        "snippet": "    public String consumeToAny(String... seq) {\n        int start = pos;\n        while (!isEmpty() && !matchesAny(seq)) {\n            pos++;\n        }\n\n        String data = queue.substring(start, pos); \n        return data; \n    }",
        "begin_line": 229,
        "end_line": 237,
        "comment": " is is a case sensitive time...",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/TokenQueue.java",
        "class_name": "org.jsoup.parser.TokenQueue",
        "signature": "org.jsoup.parser.TokenQueue.chompTo(java.lang.String)",
        "snippet": "    public String chompTo(String seq) {\n        String data = consumeTo(seq);\n        matchChomp(seq);\n        return data;\n    }",
        "begin_line": 247,
        "end_line": 251,
        "comment": "\n     * Pulls a string off the queue (like consumeTo), and then pulls off the matched string (but does not return it).\n     * <p>\n     * If the queue runs out of characters before finding the seq, will return as much as it can (and queue will go\n     * isEmpty() == true).\n     * @param seq String to match up to, and not include in return, and to pull off queue. <b>Case sensitive.</b>\n     * @return Data matched from queue.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/TokenQueue.java",
        "class_name": "org.jsoup.parser.TokenQueue",
        "signature": "org.jsoup.parser.TokenQueue.chompToIgnoreCase(java.lang.String)",
        "snippet": "    public String chompToIgnoreCase(String seq) {\n        String data = consumeToIgnoreCase(seq); // case insensitive scan\n        matchChomp(seq);\n        return data;\n    }",
        "begin_line": 253,
        "end_line": 257,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/TokenQueue.java",
        "class_name": "org.jsoup.parser.TokenQueue",
        "signature": "org.jsoup.parser.TokenQueue.chompBalanced(java.lang.Character, java.lang.Character)",
        "snippet": "    public String chompBalanced(Character open, Character close) {\n        StringBuilder accum = new StringBuilder();\n        int depth = 0;\n        Character last = null;\n\n        do {\n            if (isEmpty()) break;\n            Character c = consume();\n            if (last == null || !last.equals(ESC)) {\n                if (c.equals(open))\n                    depth++;\n                else if (c.equals(close))\n                    depth--;\n            }\n\n            if (depth > 0 && last != null)\n                accum.append(c); // don't include the outer match pair in the return\n            last = c;\n        } while (depth > 0);\n        return accum.toString();\n    }",
        "begin_line": 268,
        "end_line": 288,
        "comment": "\n     * Pulls a balanced string off the queue. E.g. if queue is \"(one (two) three) four\", (,) will return \"one (two) three\",\n     * and leave \" four\" on the queue. Unbalanced openers and closers can be escaped (with \\). Those escapes will be left\n     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for\n     * contains text strings; use unescape for that.\n     * @param open opener\n     * @param close closer\n     * @return data matched from the queue\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/TokenQueue.java",
        "class_name": "org.jsoup.parser.TokenQueue",
        "signature": "org.jsoup.parser.TokenQueue.unescape(java.lang.String)",
        "snippet": "    public static String unescape(String in) {\n        StringBuilder out = new StringBuilder();\n        Character last = null;\n        for (Character c : in.toCharArray()) {\n            if (c.equals(ESC)) {\n                if (last != null && last.equals(ESC))\n                    out.append(c);\n            }\n            else \n                out.append(c);\n            last = c;\n        }\n        return out.toString();\n    }",
        "begin_line": 295,
        "end_line": 308,
        "comment": "\n     * Unescaped a \\ escaped string.\n     * @param in backslash escaped string\n     * @return unescaped string\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/TokenQueue.java",
        "class_name": "org.jsoup.parser.TokenQueue",
        "signature": "org.jsoup.parser.TokenQueue.consumeWhitespace()",
        "snippet": "    public boolean consumeWhitespace() {\n        boolean seen = false;\n        while (matchesWhitespace()) {\n            pos++;\n            seen = true;\n        }\n        return seen;\n    }",
        "begin_line": 313,
        "end_line": 320,
        "comment": "\n     * Pulls the next run of whitespace characters of the queue.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/TokenQueue.java",
        "class_name": "org.jsoup.parser.TokenQueue",
        "signature": "org.jsoup.parser.TokenQueue.consumeWord()",
        "snippet": "    public String consumeWord() {\n        int start = pos;\n        while (matchesWord())\n            pos++;\n        return queue.substring(start, pos);\n    }",
        "begin_line": 326,
        "end_line": 331,
        "comment": "\n     * Retrieves the next run of word type (letter or digit) off the queue.\n     * @return String of word characters from queue, or empty string if none.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/TokenQueue.java",
        "class_name": "org.jsoup.parser.TokenQueue",
        "signature": "org.jsoup.parser.TokenQueue.consumeTagName()",
        "snippet": "    public String consumeTagName() {\n        int start = pos;\n        while (!isEmpty() && (matchesWord() || matchesAny(':', '_', '-')))\n            pos++;\n        \n        return queue.substring(start, pos);\n    }",
        "begin_line": 338,
        "end_line": 344,
        "comment": "\n     * Consume an tag name off the queue (word or :, _, -)\n     * \n     * @return tag name\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/TokenQueue.java",
        "class_name": "org.jsoup.parser.TokenQueue",
        "signature": "org.jsoup.parser.TokenQueue.consumeElementSelector()",
        "snippet": "    public String consumeElementSelector() {\n        int start = pos;\n        while (!isEmpty() && (matchesWord() || matchesAny('|', '_', '-')))\n            pos++;\n        \n        return queue.substring(start, pos);\n    }",
        "begin_line": 351,
        "end_line": 357,
        "comment": "\n     * Consume a CSS element selector (tag name, but | instead of : for namespaces, to not conflict with :pseudo selects).\n     * \n     * @return tag name\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/TokenQueue.java",
        "class_name": "org.jsoup.parser.TokenQueue",
        "signature": "org.jsoup.parser.TokenQueue.consumeCssIdentifier()",
        "snippet": "    public String consumeCssIdentifier() {\n        int start = pos;\n        while (!isEmpty() && (matchesWord() || matchesAny('-', '_')))\n            pos++;\n\n        return queue.substring(start, pos);\n    }",
        "begin_line": 364,
        "end_line": 370,
        "comment": "\n     Consume a CSS identifier (ID or class) off the queue (letter, digit, -, _)\n     http://www.w3.org/TR/CSS2/syndata.html#value-def-identifier\n     @return identifier\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/TokenQueue.java",
        "class_name": "org.jsoup.parser.TokenQueue",
        "signature": "org.jsoup.parser.TokenQueue.consumeAttributeKey()",
        "snippet": "    public String consumeAttributeKey() {\n        int start = pos;\n        while (!isEmpty() && (matchesWord() || matchesAny('-', '_', ':')))\n            pos++;\n        \n        return queue.substring(start, pos);\n    }",
        "begin_line": 376,
        "end_line": 382,
        "comment": "\n     Consume an attribute key off the queue (letter, digit, -, _, :\")\n     @return attribute key\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/TokenQueue.java",
        "class_name": "org.jsoup.parser.TokenQueue",
        "signature": "org.jsoup.parser.TokenQueue.remainder()",
        "snippet": "    public String remainder() {\n        StringBuilder accum = new StringBuilder();\n        while (!isEmpty()) {\n            accum.append(consume());\n        }\n        return accum.toString();\n    }",
        "begin_line": 388,
        "end_line": 394,
        "comment": "\n     Consume and return whatever is left on the queue.\n     @return remained of queue.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/parser/TokenQueue.java",
        "class_name": "org.jsoup.parser.TokenQueue",
        "signature": "org.jsoup.parser.TokenQueue.toString()",
        "snippet": "    public String toString() {\n        return queue.substring(pos);\n    }",
        "begin_line": 396,
        "end_line": 398,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.connect(java.lang.String)",
        "snippet": "    public static Connection connect(String url) {\n        Connection con = new HttpConnection();\n        con.url(url);\n        return con;\n    }",
        "begin_line": 24,
        "end_line": 28,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.connect(java.net.URL)",
        "snippet": "    public static Connection connect(URL url) {\n        Connection con = new HttpConnection();\n        con.url(url);\n        return con;\n    }",
        "begin_line": 30,
        "end_line": 34,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.HttpConnection()",
        "snippet": "    private HttpConnection() {\n        req = new Request();\n        res = new Response();\n    }",
        "begin_line": 39,
        "end_line": 42,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.url(java.net.URL)",
        "snippet": "    public Connection url(URL url) {\n        req.url(url);\n        return this;\n    }",
        "begin_line": 44,
        "end_line": 47,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.url(java.lang.String)",
        "snippet": "    public Connection url(String url) {\n        Validate.notEmpty(url, \"Must supply a valid URL\");\n        try {\n            req.url(new URL(url));\n        } catch (MalformedURLException e) {\n            throw new IllegalArgumentException(\"Malformed URL: \" + url, e);\n        }\n        return this;\n    }",
        "begin_line": 49,
        "end_line": 57,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.userAgent(java.lang.String)",
        "snippet": "    public Connection userAgent(String userAgent) {\n        Validate.notNull(userAgent, \"User agent must not be null\");\n        req.header(\"User-Agent\", userAgent);\n        return this;\n    }",
        "begin_line": 59,
        "end_line": 63,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.timeout(int)",
        "snippet": "    public Connection timeout(int millis) {\n        req.timeout(millis);\n        return this;\n    }",
        "begin_line": 65,
        "end_line": 68,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.referrer(java.lang.String)",
        "snippet": "    public Connection referrer(String referrer) {\n        Validate.notNull(referrer, \"Referrer must not be null\");\n        req.header(\"Referer\", referrer);\n        return this;\n    }",
        "begin_line": 70,
        "end_line": 74,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.method(org.jsoup.Connection.Method)",
        "snippet": "    public Connection method(Method method) {\n        req.method(method);\n        return this;\n    }",
        "begin_line": 76,
        "end_line": 79,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.data(java.lang.String, java.lang.String)",
        "snippet": "    public Connection data(String key, String value) {\n        req.data(KeyVal.create(key, value));\n        return this;\n    }",
        "begin_line": 81,
        "end_line": 84,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.data(java.util.Map<java.lang.String, java.lang.String>)",
        "snippet": "    public Connection data(Map<String, String> data) {\n        Validate.notNull(data, \"Data map must not be null\");\n        for (Map.Entry<String, String> entry : data.entrySet()) {\n            req.data(KeyVal.create(entry.getKey(), entry.getValue()));\n        }\n        return this;\n    }",
        "begin_line": 86,
        "end_line": 92,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.data(java.lang.String...)",
        "snippet": "    public Connection data(String... keyvals) {\n        Validate.notNull(keyvals, \"Data key value pairs must not be null\");\n        Validate.isTrue(keyvals.length %2 == 0, \"Must supply an even number of key value pairs\");\n        for (int i = 0; i < keyvals.length; i += 2) {\n            String key = keyvals[i];\n            String value = keyvals[i+1];\n            Validate.notEmpty(key, \"Data key must not be empty\");\n            Validate.notNull(value, \"Data value must not be null\");\n            req.data(KeyVal.create(key, value));\n        }\n        return this;\n    }",
        "begin_line": 94,
        "end_line": 105,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.header(java.lang.String, java.lang.String)",
        "snippet": "    public Connection header(String name, String value) {\n        req.header(name, value);\n        return this;\n    }",
        "begin_line": 107,
        "end_line": 110,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.cookie(java.lang.String, java.lang.String)",
        "snippet": "    public Connection cookie(String name, String value) {\n        req.cookie(name, value);\n        return this;\n    }",
        "begin_line": 112,
        "end_line": 115,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.get()",
        "snippet": "    public Document get() throws IOException {\n        req.method(Method.GET);\n        execute();\n        return res.parse();\n    }",
        "begin_line": 117,
        "end_line": 121,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.post()",
        "snippet": "    public Document post() throws IOException {\n        req.method(Method.POST);\n        execute();\n        return res.parse();\n    }",
        "begin_line": 123,
        "end_line": 127,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.execute()",
        "snippet": "    public Connection.Response execute() throws IOException {\n        res = Response.execute(req);\n        return res;\n    }",
        "begin_line": 129,
        "end_line": 132,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.request()",
        "snippet": "    public Connection.Request request() {\n        return req;\n    }",
        "begin_line": 134,
        "end_line": 136,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.request(org.jsoup.Connection.Request)",
        "snippet": "    public Connection request(Connection.Request request) {\n        req = request;\n        return this;\n    }",
        "begin_line": 138,
        "end_line": 141,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.response()",
        "snippet": "    public Connection.Response response() {\n        return res;\n    }",
        "begin_line": 143,
        "end_line": 145,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.response(org.jsoup.Connection.Response)",
        "snippet": "    public Connection response(Connection.Response response) {\n        res = response;\n        return this;\n    }",
        "begin_line": 147,
        "end_line": 150,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.Base.Base()",
        "snippet": "        private Base() {\n            headers = new LinkedHashMap<String, String>();\n            cookies = new LinkedHashMap<String, String>();\n        }",
        "begin_line": 159,
        "end_line": 162,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.Base.url()",
        "snippet": "        public URL url() {\n            return url;\n        }",
        "begin_line": 164,
        "end_line": 166,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.Base.url(java.net.URL)",
        "snippet": "        public T url(URL url) {\n            Validate.notNull(url, \"URL must not be null\");\n            this.url = url;\n            return (T) this;\n        }",
        "begin_line": 168,
        "end_line": 172,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.Base.method()",
        "snippet": "        public Method method() {\n            return method;\n        }",
        "begin_line": 174,
        "end_line": 176,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.Base.method(org.jsoup.Connection.Method)",
        "snippet": "        public T method(Method method) {\n            Validate.notNull(method, \"Method must not be null\");\n            this.method = method;\n            return (T) this;\n        }",
        "begin_line": 178,
        "end_line": 182,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.Base.header(java.lang.String)",
        "snippet": "        public String header(String name) {\n            Validate.notNull(name, \"Header name must not be null\");\n            return getHeaderCaseInsensitive(name);\n        }",
        "begin_line": 184,
        "end_line": 187,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.Base.header(java.lang.String, java.lang.String)",
        "snippet": "        public T header(String name, String value) {\n            Validate.notEmpty(name, \"Header name must not be empty\");\n            Validate.notNull(value, \"Header value must not be null\");\n            removeHeader(name); // ensures we don't get an \"accept-encoding\" and a \"Accept-Encoding\"\n            headers.put(name, value);\n            return (T) this;\n        }",
        "begin_line": 189,
        "end_line": 195,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.Base.hasHeader(java.lang.String)",
        "snippet": "        public boolean hasHeader(String name) {\n            Validate.notEmpty(name, \"Header name must not be empty\");\n            return getHeaderCaseInsensitive(name) != null;\n        }",
        "begin_line": 197,
        "end_line": 200,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.Base.removeHeader(java.lang.String)",
        "snippet": "        public T removeHeader(String name) {\n            Validate.notEmpty(name, \"Header name must not be empty\");\n            Map.Entry<String, String> entry = scanHeaders(name); // remove is case insensitive too\n            if (entry != null)\n                headers.remove(entry.getKey()); // ensures correct case\n            return (T) this;\n        }",
        "begin_line": 202,
        "end_line": 208,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.Base.headers()",
        "snippet": "        public Map<String, String> headers() {\n            return headers;\n        }",
        "begin_line": 210,
        "end_line": 212,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.Base.getHeaderCaseInsensitive(java.lang.String)",
        "snippet": "        private String getHeaderCaseInsensitive(String name) {\n            Validate.notNull(name, \"Header name must not be null\");\n            // quick evals for common case of title case, lower case, then scan for mixed\n            String value = headers.get(name);\n            if (value == null)\n                value = headers.get(name.toLowerCase());\n            if (value == null) {\n                Map.Entry<String, String> entry = scanHeaders(name);\n                if (entry != null)\n                    value = entry.getValue();\n            }\n            return value;\n        }",
        "begin_line": 214,
        "end_line": 226,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.Base.scanHeaders(java.lang.String)",
        "snippet": "        private Map.Entry<String, String> scanHeaders(String name) {\n            String lc = name.toLowerCase();\n            for (Map.Entry<String, String> entry : headers.entrySet()) {\n                if (entry.getKey().toLowerCase().equals(lc))\n                    return entry;\n            }\n            return null;\n        }",
        "begin_line": 228,
        "end_line": 235,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.Base.cookie(java.lang.String)",
        "snippet": "        public String cookie(String name) {\n            Validate.notNull(name, \"Cookie name must not be null\");\n            return cookies.get(name);\n        }",
        "begin_line": 237,
        "end_line": 240,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.Base.cookie(java.lang.String, java.lang.String)",
        "snippet": "        public T cookie(String name, String value) {\n            Validate.notEmpty(name, \"Cookie name must not be empty\");\n            Validate.notNull(value, \"Cookie value must not be null\");\n            cookies.put(name, value);\n            return (T) this;\n        }",
        "begin_line": 242,
        "end_line": 247,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.Base.hasCookie(java.lang.String)",
        "snippet": "        public boolean hasCookie(String name) {\n            Validate.notEmpty(\"Cookie name must not be empty\");\n            return cookies.containsKey(name);\n        }",
        "begin_line": 249,
        "end_line": 252,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.Base.removeCookie(java.lang.String)",
        "snippet": "        public T removeCookie(String name) {\n            Validate.notEmpty(\"Cookie name must not be empty\");\n            cookies.remove(name);\n            return (T) this;\n        }",
        "begin_line": 254,
        "end_line": 258,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.Base.cookies()",
        "snippet": "        public Map<String, String> cookies() {\n            return cookies;\n        }",
        "begin_line": 260,
        "end_line": 262,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.Request.Request()",
        "snippet": "        private Request() {\n            timeoutMilliseconds = 3000;\n            data = new ArrayList<Connection.KeyVal>();\n            method = Connection.Method.GET;\n            headers.put(\"Accept-Encoding\", \"gzip\");\n        }",
        "begin_line": 269,
        "end_line": 274,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.Request.timeout()",
        "snippet": "        public int timeout() {\n            return timeoutMilliseconds;\n        }",
        "begin_line": 276,
        "end_line": 278,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.Request.timeout(int)",
        "snippet": "        public Request timeout(int millis) {\n            Validate.isTrue(millis >= 0, \"Timeout milliseconds must be 0 (infinite) or greater\");\n            timeoutMilliseconds = millis;\n            return this;\n        }",
        "begin_line": 280,
        "end_line": 284,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.Request.data(org.jsoup.Connection.KeyVal)",
        "snippet": "        public Request data(Connection.KeyVal keyval) {\n            Validate.notNull(keyval, \"Key val must not be null\");\n            data.add(keyval);\n            return this;\n        }",
        "begin_line": 286,
        "end_line": 290,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.Request.data()",
        "snippet": "        public Collection<Connection.KeyVal> data() {\n            return data;\n        }",
        "begin_line": 292,
        "end_line": 294,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.Response.execute(org.jsoup.Connection.Request)",
        "snippet": "        static Response execute(Connection.Request req) throws IOException {\n            Validate.notNull(req, \"Request must not be null\");\n            String protocol = req.url().getProtocol();\n            Validate\n                .isTrue(protocol.equals(\"http\") || protocol.equals(\"https\"), \"Only http & https protocols supported\");\n\n            // set up the request for execution\n            if (req.method() == Connection.Method.GET && req.data().size() > 0)\n                serialiseRequestUrl(req); // appends query string\n            HttpURLConnection conn = createConnection(req);\n            conn.connect();\n            if (req.method() == Connection.Method.POST)\n                writePost(req.data(), conn.getOutputStream());          \n\n            // todo: error handling options, allow user to get !200 without exception\n            int status = conn.getResponseCode();\n            boolean needsRedirect = false;\n            if (status != HttpURLConnection.HTTP_OK) {\n                // java url connection will follow redirects on same protocol, but not switch between http & https, so do that here\n                if (status == HttpURLConnection.HTTP_MOVED_TEMP || status == HttpURLConnection.HTTP_MOVED_PERM || status == HttpURLConnection.HTTP_SEE_OTHER)\n                    needsRedirect = true;\n                else\n                    throw new IOException(status + \" error loading URL \" + req.url().toString());\n            }\n            Response res = new Response();\n            res.setupFromConnection(conn);\n            if (needsRedirect) {\n                req.url(new URL(res.header(\"Location\")));\n                return execute(req);\n            }\n\n            InputStream inStream = null;\n            try {\n                inStream = res.hasHeader(\"Content-Encoding\") && res.header(\"Content-Encoding\").equalsIgnoreCase(\"gzip\") ?\n                        new BufferedInputStream(new GZIPInputStream(conn.getInputStream())) :\n                        new BufferedInputStream(conn.getInputStream());\n                res.byteData = DataUtil.readToByteBuffer(inStream);\n                res.charset = DataUtil.getCharsetFromContentType(res.contentType); // may be null, readInputStream deals with it\n            } finally {\n                if (inStream != null) inStream.close();\n            }\n\n            res.executed = true;\n            return res;\n        }",
        "begin_line": 305,
        "end_line": 349,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.Response.statusCode()",
        "snippet": "        public int statusCode() {\n            return statusCode;\n        }",
        "begin_line": 351,
        "end_line": 353,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.Response.statusMessage()",
        "snippet": "        public String statusMessage() {\n            return statusMessage;\n        }",
        "begin_line": 355,
        "end_line": 357,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.Response.charset()",
        "snippet": "        public String charset() {\n            return charset;\n        }",
        "begin_line": 359,
        "end_line": 361,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.Response.contentType()",
        "snippet": "        public String contentType() {\n            return contentType;\n        }",
        "begin_line": 363,
        "end_line": 365,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.Response.parse()",
        "snippet": "        public Document parse() throws IOException {\n            Validate.isTrue(executed, \"Request must be executed (with .execute(), .get(), or .post() before parsing response\");\n            if (contentType == null || !contentType.startsWith(\"text/\"))\n                throw new IOException(String.format(\"Unhandled content type \\\"%s\\\" on URL %s. Must be text/*\",\n                    contentType, url.toString()));\n            Document doc = DataUtil.parseByteData(byteData, charset, url.toExternalForm());\n            byteData.rewind();\n            charset = doc.outputSettings().charset().name(); // update charset from meta-equiv, possibly\n            return doc;\n        }",
        "begin_line": 367,
        "end_line": 376,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.Response.body()",
        "snippet": "        public String body() {\n            Validate.isTrue(executed, \"Request must be executed (with .execute(), .get(), or .post() before getting response body\");\n            // charset gets set from header on execute, and from meta-equiv on parse. parse may not have happened yet\n            String body;\n            if (charset == null)\n                body = Charset.forName(DataUtil.defaultCharset).decode(byteData).toString();\n            else\n                body = Charset.forName(charset).decode(byteData).toString();\n            byteData.rewind();\n            return body;\n        }",
        "begin_line": 378,
        "end_line": 388,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.Response.bodyAsBytes()",
        "snippet": "        public byte[] bodyAsBytes() {\n            Validate.isTrue(executed, \"Request must be executed (with .execute(), .get(), or .post() before getting response body\");\n            return byteData.array();\n        }",
        "begin_line": 390,
        "end_line": 393,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.Response.createConnection(org.jsoup.Connection.Request)",
        "snippet": "        private static HttpURLConnection createConnection(Connection.Request req) throws IOException {\n            HttpURLConnection conn = (HttpURLConnection) req.url().openConnection();\n            conn.setRequestMethod(req.method().name());\n            conn.setInstanceFollowRedirects(true);\n            conn.setConnectTimeout(req.timeout());\n            conn.setReadTimeout(req.timeout());\n            if (req.method() == Method.POST)\n                conn.setDoOutput(true);\n            if (req.cookies().size() > 0)\n                conn.addRequestProperty(\"Cookie\", getRequestCookieString(req));\n            for (Map.Entry<String, String> header : req.headers().entrySet()) {\n                conn.addRequestProperty(header.getKey(), header.getValue());\n            }\n            return conn;\n        }",
        "begin_line": 396,
        "end_line": 410,
        "comment": " set up connection defaults, and details from request",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.Response.setupFromConnection(java.net.HttpURLConnection)",
        "snippet": "        private void setupFromConnection(HttpURLConnection conn) throws IOException {\n            method = Connection.Method.valueOf(conn.getRequestMethod());\n            url = conn.getURL();\n            statusCode = conn.getResponseCode();\n            statusMessage = conn.getResponseMessage();\n            contentType = conn.getContentType();\n\n            Map<String, List<String>> resHeaders = conn.getHeaderFields();\n            for (Map.Entry<String, List<String>> entry : resHeaders.entrySet()) {\n                String name = entry.getKey();\n                if (name == null)\n                    continue; // http/1.1 line\n\n                List<String> values = entry.getValue();\n\n                if (name.equalsIgnoreCase(\"Set-Cookie\")) {\n                    for (String value : values) {\n                        TokenQueue cd = new TokenQueue(value);\n                        String cookieName = cd.chompTo(\"=\").trim();\n                        String cookieVal = cd.consumeTo(\";\").trim();\n                        // ignores path, date, domain, secure et al. req'd?\n                        cookie(cookieName, cookieVal);\n                    }\n                } else { // only take the first instance of each header\n                    header(name, values.get(0));\n                }\n            }\n        }",
        "begin_line": 413,
        "end_line": 440,
        "comment": " set up url, method, header, cookies",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.Response.writePost(java.util.Collection<org.jsoup.Connection.KeyVal>, java.io.OutputStream)",
        "snippet": "        private static void writePost(Collection<Connection.KeyVal> data, OutputStream outputStream) throws IOException {\n            OutputStreamWriter w = new OutputStreamWriter(outputStream, DataUtil.defaultCharset);\n            boolean first = true;\n            for (Connection.KeyVal keyVal : data) {\n                if (!first) \n                    w.append('&');\n                else\n                    first = false;\n                \n                w.write(URLEncoder.encode(keyVal.key(), DataUtil.defaultCharset));\n                w.write('=');\n                w.write(URLEncoder.encode(keyVal.value(), DataUtil.defaultCharset));\n            }\n            w.close();\n        }",
        "begin_line": 442,
        "end_line": 456,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.Response.getRequestCookieString(org.jsoup.Connection.Request)",
        "snippet": "        private static String getRequestCookieString(Connection.Request req) {\n            StringBuilder sb = new StringBuilder();\n            boolean first = true;\n            for (Map.Entry<String, String> cookie : req.cookies().entrySet()) {\n                if (!first)\n                    sb.append(\"; \");\n                else\n                    first = false;\n                sb.append(cookie.getKey()).append('=').append(cookie.getValue());\n                // todo: spec says only ascii, no escaping / encoding defined. validate on set? or escape somehow here?\n            }\n            return sb.toString();\n        }",
        "begin_line": 458,
        "end_line": 470,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.Response.serialiseRequestUrl(org.jsoup.Connection.Request)",
        "snippet": "        private static void serialiseRequestUrl(Connection.Request req) throws IOException {\n            URL in = req.url();\n            StringBuilder url = new StringBuilder();\n            boolean first = true;\n            // reconstitute the query, ready for appends\n            url\n                .append(in.getProtocol())\n                .append(\"://\")\n                .append(in.getAuthority()) // includes host, port\n                .append(in.getPath())\n                .append(\"?\");\n            if (in.getQuery() != null) {\n                url.append(in.getQuery());\n                first = false;\n            }\n            for (Connection.KeyVal keyVal : req.data()) {\n                if (!first)\n                    url.append('&');\n                else\n                    first = false;\n                url\n                    .append(URLEncoder.encode(keyVal.key(), DataUtil.defaultCharset))\n                    .append('=')\n                    .append(URLEncoder.encode(keyVal.value(), DataUtil.defaultCharset));\n            }\n            req.url(new URL(url.toString()));\n            req.data().clear(); // moved into url as get params\n        }",
        "begin_line": 473,
        "end_line": 500,
        "comment": " for get url reqs, serialise the data map into the url",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.KeyVal.create(java.lang.String, java.lang.String)",
        "snippet": "        public static KeyVal create(String key, String value) {\n            Validate.notEmpty(key, \"Data key must not be empty\");\n            Validate.notNull(value, \"Data value must not be null\");\n            return new KeyVal(key, value);\n        }",
        "begin_line": 507,
        "end_line": 511,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.KeyVal.KeyVal(java.lang.String, java.lang.String)",
        "snippet": "        private KeyVal(String key, String value) {\n            this.key = key;\n            this.value = value;\n        }",
        "begin_line": 513,
        "end_line": 516,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.KeyVal.key(java.lang.String)",
        "snippet": "        public KeyVal key(String key) {\n            Validate.notEmpty(key, \"Data key must not be empty\");\n            this.key = key;\n            return this;\n        }",
        "begin_line": 518,
        "end_line": 522,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.KeyVal.key()",
        "snippet": "        public String key() {\n            return key;\n        }",
        "begin_line": 524,
        "end_line": 526,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.KeyVal.value(java.lang.String)",
        "snippet": "        public KeyVal value(String value) {\n            Validate.notNull(value, \"Data value must not be null\");\n            this.value = value;\n            return this;\n        }",
        "begin_line": 528,
        "end_line": 532,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.KeyVal.value()",
        "snippet": "        public String value() {\n            return value;\n        }",
        "begin_line": 534,
        "end_line": 536,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
        "class_name": "org.jsoup.helper.HttpConnection",
        "signature": "org.jsoup.helper.HttpConnection.KeyVal.toString()",
        "snippet": "        @Override\n        public String toString() {\n            return key + \"=\" + value;\n        }      ",
        "begin_line": 538,
        "end_line": 541,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/StringUtil.java",
        "class_name": "org.jsoup.helper.StringUtil",
        "signature": "org.jsoup.helper.StringUtil.join(java.util.Collection<java.lang.String>, java.lang.String)",
        "snippet": "    public static String join(Collection<String> strings, String sep) {\n        return join(strings.iterator(), sep);\n    }",
        "begin_line": 19,
        "end_line": 21,
        "comment": "\n     * Join a collection of strings by a seperator\n     * @param strings collection of string objects\n     * @param sep string to place between strings\n     * @return joined string\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/StringUtil.java",
        "class_name": "org.jsoup.helper.StringUtil",
        "signature": "org.jsoup.helper.StringUtil.join(java.util.Iterator<java.lang.String>, java.lang.String)",
        "snippet": "    public static String join(Iterator<String> strings, String sep) {\n        if (!strings.hasNext())\n            return \"\";\n\n        String start = strings.next();\n        if (!strings.hasNext()) // only one, avoid builder\n            return start;\n\n        StringBuilder sb = new StringBuilder(64).append(start);\n        while (strings.hasNext()) {\n            sb.append(sep);\n            sb.append(strings.next());\n        }\n        return sb.toString();\n    }",
        "begin_line": 29,
        "end_line": 43,
        "comment": "\n     * Join a collection of strings by a seperator\n     * @param strings iterator of string objects\n     * @param sep string to place between strings\n     * @return joined string\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/StringUtil.java",
        "class_name": "org.jsoup.helper.StringUtil",
        "signature": "org.jsoup.helper.StringUtil.padding(int)",
        "snippet": "    public static String padding(int width) {\n        if (width < 0)\n            throw new IllegalArgumentException(\"width must be > 0\");\n\n        if (width < padding.length)\n            return padding[width];\n\n        char[] out = new char[width];\n        for (int i = 0; i < width; i++)\n            out[i] = ' ';\n        return String.valueOf(out);\n    }",
        "begin_line": 50,
        "end_line": 61,
        "comment": "\n     * Returns space padding\n     * @param width amount of padding desired\n     * @return string of spaces * width\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/StringUtil.java",
        "class_name": "org.jsoup.helper.StringUtil",
        "signature": "org.jsoup.helper.StringUtil.isBlank(java.lang.String)",
        "snippet": "    public static boolean isBlank(String string) {\n        if (string == null || string.length() == 0)\n            return true;\n\n        int l = string.length();\n        for (int i = 0; i < l; i++) {\n            if (!Character.isWhitespace(string.codePointAt(i)))\n                return false;\n        }\n        return true;\n    }",
        "begin_line": 68,
        "end_line": 78,
        "comment": "\n     * Tests if a string is blank: null, emtpy, or only whitespace (\" \", \\r\\n, \\t, etc)\n     * @param string string to test\n     * @return if string is blank\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/StringUtil.java",
        "class_name": "org.jsoup.helper.StringUtil",
        "signature": "org.jsoup.helper.StringUtil.isNumeric(java.lang.String)",
        "snippet": "    public static boolean isNumeric(String string) {\n        if (string == null || string.length() == 0)\n            return false;\n\n        int l = string.length();\n        for (int i = 0; i < l; i++) {\n            if (!Character.isDigit(string.codePointAt(i)))\n                return false;\n        }\n        return true;\n    }",
        "begin_line": 85,
        "end_line": 95,
        "comment": "\n     * Tests if a string is numeric, i.e. contains only digit characters\n     * @param string string to test\n     * @return true if only digit chars, false if empty or null or contains non-digit chrs\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/StringUtil.java",
        "class_name": "org.jsoup.helper.StringUtil",
        "signature": "org.jsoup.helper.StringUtil.normaliseWhitespace(java.lang.String)",
        "snippet": "    public static String normaliseWhitespace(String string) {\n        StringBuilder sb = new StringBuilder(string.length());\n\n        boolean lastWasWhite = false;\n        boolean modified = false;\n\n        int l = string.length();\n        for (int i = 0; i < l; i++) {\n            int c = string.codePointAt(i);\n            if (Character.isWhitespace(c)) {\n                if (lastWasWhite) {\n                    modified = true;\n                    continue;\n                }\n                if (c != ' ')\n                    modified = true;\n                sb.append(' ');\n                lastWasWhite = true;\n            }\n            else {\n                sb.appendCodePoint(c);\n                lastWasWhite = false;\n            }\n        }\n        return modified ? sb.toString() : string;\n    }",
        "begin_line": 97,
        "end_line": 122,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/Validate.java",
        "class_name": "org.jsoup.helper.Validate",
        "signature": "org.jsoup.helper.Validate.Validate()",
        "snippet": "    private Validate() {}",
        "begin_line": 8,
        "end_line": 8,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/Validate.java",
        "class_name": "org.jsoup.helper.Validate",
        "signature": "org.jsoup.helper.Validate.notNull(java.lang.Object)",
        "snippet": "    public static void notNull(Object obj) {\n        if (obj == null)\n            throw new IllegalArgumentException(\"Object must not be null\");\n    }",
        "begin_line": 14,
        "end_line": 17,
        "comment": "\n     * Validates that the obect is not null\n     * @param obj object to test\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/Validate.java",
        "class_name": "org.jsoup.helper.Validate",
        "signature": "org.jsoup.helper.Validate.notNull(java.lang.Object, java.lang.String)",
        "snippet": "    public static void notNull(Object obj, String msg) {\n        if (obj == null)\n            throw new IllegalArgumentException(msg);\n    }",
        "begin_line": 24,
        "end_line": 27,
        "comment": "\n     * Validates that the object is not null\n     * @param obj object to test\n     * @param msg message to output if validation fails\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/Validate.java",
        "class_name": "org.jsoup.helper.Validate",
        "signature": "org.jsoup.helper.Validate.isTrue(boolean)",
        "snippet": "    public static void isTrue(boolean val) {\n        if (!val)\n            throw new IllegalArgumentException(\"Must be true\");\n    }",
        "begin_line": 33,
        "end_line": 36,
        "comment": "\n     * Validates that the value is true\n     * @param val object to test\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/Validate.java",
        "class_name": "org.jsoup.helper.Validate",
        "signature": "org.jsoup.helper.Validate.isTrue(boolean, java.lang.String)",
        "snippet": "    public static void isTrue(boolean val, String msg) {\n        if (!val)\n            throw new IllegalArgumentException(msg);\n    }",
        "begin_line": 43,
        "end_line": 46,
        "comment": "\n     * Validates that the value is true\n     * @param val object to test\n     * @param msg message to output if validation fails\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/Validate.java",
        "class_name": "org.jsoup.helper.Validate",
        "signature": "org.jsoup.helper.Validate.noNullElements(java.lang.Object[])",
        "snippet": "    public static void noNullElements(Object[] objects) {\n        noNullElements(objects, \"Array must not contain any null objects\");\n    }",
        "begin_line": 52,
        "end_line": 54,
        "comment": "\n     * Validates that the array contains no null elements\n     * @param objects the array to test\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/Validate.java",
        "class_name": "org.jsoup.helper.Validate",
        "signature": "org.jsoup.helper.Validate.noNullElements(java.lang.Object[], java.lang.String)",
        "snippet": "    public static void noNullElements(Object[] objects, String msg) {\n        for (Object obj : objects)\n            if (obj == null)\n                throw new IllegalArgumentException(msg);\n    }",
        "begin_line": 61,
        "end_line": 65,
        "comment": "\n     * Validates that the array contains no null elements\n     * @param objects the array to test\n     * @param msg message to output if validation fails\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/Validate.java",
        "class_name": "org.jsoup.helper.Validate",
        "signature": "org.jsoup.helper.Validate.notEmpty(java.lang.String)",
        "snippet": "    public static void notEmpty(String string) {\n        if (string == null || string.length() == 0)\n            throw new IllegalArgumentException(\"String must not be empty\");\n    }",
        "begin_line": 71,
        "end_line": 74,
        "comment": "\n     * Validates that the string is not empty\n     * @param string the string to test\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/Validate.java",
        "class_name": "org.jsoup.helper.Validate",
        "signature": "org.jsoup.helper.Validate.notEmpty(java.lang.String, java.lang.String)",
        "snippet": "    public static void notEmpty(String string, String msg) {\n        if (string == null || string.length() == 0)\n            throw new IllegalArgumentException(msg);\n    }",
        "begin_line": 81,
        "end_line": 84,
        "comment": "\n     * Validates that the string is not empty\n     * @param string the string to test\n     * @param msg message to output if validation fails\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/DataUtil.java",
        "class_name": "org.jsoup.helper.DataUtil",
        "signature": "org.jsoup.helper.DataUtil.DataUtil()",
        "snippet": "    private DataUtil() {}",
        "begin_line": 22,
        "end_line": 22,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/DataUtil.java",
        "class_name": "org.jsoup.helper.DataUtil",
        "signature": "org.jsoup.helper.DataUtil.load(java.io.File, java.lang.String, java.lang.String)",
        "snippet": "    public static Document load(File in, String charsetName, String baseUri) throws IOException {\n        InputStream inStream = null;\n        try {\n            inStream = new FileInputStream(in);\n            return load(inStream, charsetName, baseUri);\n        } finally {\n            if (inStream != null)\n                inStream.close();\n        }\n    }",
        "begin_line": 32,
        "end_line": 41,
        "comment": "\n     * Loads a file to a Document.\n     * @param in file to load\n     * @param charsetName character set of input\n     * @param baseUri base URI of document, to resolve relative links against\n     * @return Document\n     * @throws IOException on IO error\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/DataUtil.java",
        "class_name": "org.jsoup.helper.DataUtil",
        "signature": "org.jsoup.helper.DataUtil.load(java.io.InputStream, java.lang.String, java.lang.String)",
        "snippet": "    public static Document load(InputStream in, String charsetName, String baseUri) throws IOException {\n        ByteBuffer byteData = readToByteBuffer(in);\n        return parseByteData(byteData, charsetName, baseUri);\n    }",
        "begin_line": 51,
        "end_line": 54,
        "comment": "\n     * Parses a Document from an input steam.\n     * @param in input stream to parse. You will need to close it.\n     * @param charsetName character set of input\n     * @param baseUri base URI of document, to resolve relative links against\n     * @return Document\n     * @throws IOException on IO error\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/DataUtil.java",
        "class_name": "org.jsoup.helper.DataUtil",
        "signature": "org.jsoup.helper.DataUtil.parseByteData(java.nio.ByteBuffer, java.lang.String, java.lang.String)",
        "snippet": "    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri) {\n        String docData;\n        Document doc = null;\n        if (charsetName == null) { // determine from meta. safe parse as UTF-8\n            // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n            docData = Charset.forName(defaultCharset).decode(byteData).toString();\n            doc = Jsoup.parse(docData, baseUri);\n            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n            if (meta != null) { // if not found, will keep utf-8 as best attempt\n                String foundCharset = meta.hasAttr(\"http-equiv\") ? getCharsetFromContentType(meta.attr(\"content\")) : meta.attr(\"charset\");\n                if (foundCharset != null && !foundCharset.equals(defaultCharset)) { // need to re-decode\n                    charsetName = foundCharset;\n                    byteData.rewind();\n                    docData = Charset.forName(foundCharset).decode(byteData).toString();\n                    doc = null;\n                }\n            }\n        } else { // specified by content type header (or by user on file load)\n            Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n            docData = Charset.forName(charsetName).decode(byteData).toString();\n        }\n        if (doc == null) {\n            doc = Jsoup.parse(docData, baseUri);\n            doc.outputSettings().charset(charsetName);\n        }\n        return doc;\n    }",
        "begin_line": 58,
        "end_line": 84,
        "comment": " switching the chartset midstream when a meta http-equiv tag defines the charset.",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/DataUtil.java",
        "class_name": "org.jsoup.helper.DataUtil",
        "signature": "org.jsoup.helper.DataUtil.readToByteBuffer(java.io.InputStream)",
        "snippet": "    static ByteBuffer readToByteBuffer(InputStream inStream) throws IOException {\n        byte[] buffer = new byte[bufferSize];\n        ByteArrayOutputStream outStream = new ByteArrayOutputStream(bufferSize);\n        int read;\n        while(true) {\n            read  = inStream.read(buffer);\n            if (read == -1) break;\n            outStream.write(buffer, 0, read);\n        }\n        ByteBuffer byteData = ByteBuffer.wrap(outStream.toByteArray());\n        return byteData;\n    }",
        "begin_line": 86,
        "end_line": 97,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/helper/DataUtil.java",
        "class_name": "org.jsoup.helper.DataUtil",
        "signature": "org.jsoup.helper.DataUtil.getCharsetFromContentType(java.lang.String)",
        "snippet": "    static String getCharsetFromContentType(String contentType) {\n        if (contentType == null) return null;\n        \n        Matcher m = charsetPattern.matcher(contentType);\n        if (m.find()) {\n            return m.group(1).trim().toUpperCase();\n        }\n        return null;\n    }",
        "begin_line": 104,
        "end_line": 112,
        "comment": "\n     * Parse out a charset from a content type header.\n     * @param contentType e.g. \"text/html; charset=EUC-JP\"\n     * @return \"EUC-JP\", or null if not found. Charset is trimmed and uppercased.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Comment.java",
        "class_name": "org.jsoup.nodes.Comment",
        "signature": "org.jsoup.nodes.Comment.Comment(java.lang.String, java.lang.String)",
        "snippet": "    public Comment(String data, String baseUri) {\n        super(baseUri);\n        attributes.put(COMMENT_KEY, data);\n    }",
        "begin_line": 15,
        "end_line": 18,
        "comment": "\n     Create a new comment node.\n     @param data The contents of the comment\n     @param baseUri base URI\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Comment.java",
        "class_name": "org.jsoup.nodes.Comment",
        "signature": "org.jsoup.nodes.Comment.nodeName()",
        "snippet": "    public String nodeName() {\n        return \"#comment\";\n    }",
        "begin_line": 20,
        "end_line": 22,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Comment.java",
        "class_name": "org.jsoup.nodes.Comment",
        "signature": "org.jsoup.nodes.Comment.getData()",
        "snippet": "    public String getData() {\n        return attributes.get(COMMENT_KEY);\n    }",
        "begin_line": 28,
        "end_line": 30,
        "comment": "\n     Get the contents of the comment.\n     @return comment content\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Comment.java",
        "class_name": "org.jsoup.nodes.Comment",
        "signature": "org.jsoup.nodes.Comment.outerHtmlHead(java.lang.StringBuilder, int, org.jsoup.nodes.Document.OutputSettings)",
        "snippet": "    void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n        if (out.prettyPrint())\n            indent(accum, depth, out);\n        accum\n                .append(\"<!--\")\n                .append(getData())\n                .append(\"-->\");\n    }",
        "begin_line": 32,
        "end_line": 39,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Comment.java",
        "class_name": "org.jsoup.nodes.Comment",
        "signature": "org.jsoup.nodes.Comment.outerHtmlTail(java.lang.StringBuilder, int, org.jsoup.nodes.Document.OutputSettings)",
        "snippet": "    void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out) {}",
        "begin_line": 41,
        "end_line": 41,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Comment.java",
        "class_name": "org.jsoup.nodes.Comment",
        "signature": "org.jsoup.nodes.Comment.toString()",
        "snippet": "    public String toString() {\n        return outerHtml();\n    }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/DataNode.java",
        "class_name": "org.jsoup.nodes.DataNode",
        "signature": "org.jsoup.nodes.DataNode.DataNode(java.lang.String, java.lang.String)",
        "snippet": "    public DataNode(String data, String baseUri) {\n        super(baseUri);\n        attributes.put(DATA_KEY, data);\n    }",
        "begin_line": 15,
        "end_line": 18,
        "comment": "\n     Create a new DataNode.\n     @param data data contents\n     @param baseUri base URI\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/DataNode.java",
        "class_name": "org.jsoup.nodes.DataNode",
        "signature": "org.jsoup.nodes.DataNode.nodeName()",
        "snippet": "    public String nodeName() {\n        return \"#data\";\n    }",
        "begin_line": 20,
        "end_line": 22,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/DataNode.java",
        "class_name": "org.jsoup.nodes.DataNode",
        "signature": "org.jsoup.nodes.DataNode.getWholeData()",
        "snippet": "    public String getWholeData() {\n        return attributes.get(DATA_KEY);\n    }",
        "begin_line": 28,
        "end_line": 30,
        "comment": "\n     Get the data contents of this node. Will be unescaped and with original new lines, space etc.\n     @return data\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/DataNode.java",
        "class_name": "org.jsoup.nodes.DataNode",
        "signature": "org.jsoup.nodes.DataNode.setWholeData(java.lang.String)",
        "snippet": "    public DataNode setWholeData(String data) {\n        attributes.put(DATA_KEY, data);\n        return this;\n    }",
        "begin_line": 37,
        "end_line": 40,
        "comment": "\n     * Set the data contents of this node.\n     * @param data unencoded data\n     * @return this node, for chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/DataNode.java",
        "class_name": "org.jsoup.nodes.DataNode",
        "signature": "org.jsoup.nodes.DataNode.outerHtmlHead(java.lang.StringBuilder, int, org.jsoup.nodes.Document.OutputSettings)",
        "snippet": "    void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n        accum.append(getWholeData()); // data is not escaped in return from data nodes, so \" in script, style is plain\n    }",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/DataNode.java",
        "class_name": "org.jsoup.nodes.DataNode",
        "signature": "org.jsoup.nodes.DataNode.outerHtmlTail(java.lang.StringBuilder, int, org.jsoup.nodes.Document.OutputSettings)",
        "snippet": "    void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out) {}",
        "begin_line": 46,
        "end_line": 46,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/DataNode.java",
        "class_name": "org.jsoup.nodes.DataNode",
        "signature": "org.jsoup.nodes.DataNode.toString()",
        "snippet": "    public String toString() {\n        return outerHtml();\n    }",
        "begin_line": 48,
        "end_line": 50,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/DataNode.java",
        "class_name": "org.jsoup.nodes.DataNode",
        "signature": "org.jsoup.nodes.DataNode.createFromEncoded(java.lang.String, java.lang.String)",
        "snippet": "    public static DataNode createFromEncoded(String encodedData, String baseUri) {\n        String data = Entities.unescape(encodedData);\n        return new DataNode(data, baseUri);\n    }",
        "begin_line": 58,
        "end_line": 61,
        "comment": "\n     Create a new DataNode from HTML encoded data.\n     @param encodedData encoded data\n     @param baseUri bass URI\n     @return new DataNode\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Attributes.java",
        "class_name": "org.jsoup.nodes.Attributes",
        "signature": "org.jsoup.nodes.Attributes.get(java.lang.String)",
        "snippet": "    public String get(String key) {\n        Validate.notEmpty(key);\n        \n        Attribute attr = attributes.get(key.toLowerCase());\n        return attr != null ? attr.getValue() : \"\";\n    }",
        "begin_line": 29,
        "end_line": 34,
        "comment": "\n     Get an attribute value by key.\n     @param key the attribute key\n     @return the attribute value if set; or empty string if not set.\n     @see #hasKey(String)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Attributes.java",
        "class_name": "org.jsoup.nodes.Attributes",
        "signature": "org.jsoup.nodes.Attributes.put(java.lang.String, java.lang.String)",
        "snippet": "    public void put(String key, String value) {\n        Attribute attr = new Attribute(key, value);\n        put(attr);\n    }",
        "begin_line": 41,
        "end_line": 44,
        "comment": "\n     Set a new attribute, or replace an existing one by key.\n     @param key attribute key\n     @param value attribute value\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Attributes.java",
        "class_name": "org.jsoup.nodes.Attributes",
        "signature": "org.jsoup.nodes.Attributes.put(org.jsoup.nodes.Attribute)",
        "snippet": "    public void put(Attribute attribute) {\n        Validate.notNull(attribute);\n        attributes.put(attribute.getKey(), attribute);\n    }",
        "begin_line": 50,
        "end_line": 53,
        "comment": "\n     Set a new attribute, or replace an existing one by key.\n     @param attribute attribute\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Attributes.java",
        "class_name": "org.jsoup.nodes.Attributes",
        "signature": "org.jsoup.nodes.Attributes.remove(java.lang.String)",
        "snippet": "    public void remove(String key) {\n        Validate.notEmpty(key);\n        attributes.remove(key.toLowerCase());\n    }",
        "begin_line": 59,
        "end_line": 62,
        "comment": "\n     Remove an attribute by key.\n     @param key attribute key to remove\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Attributes.java",
        "class_name": "org.jsoup.nodes.Attributes",
        "signature": "org.jsoup.nodes.Attributes.hasKey(java.lang.String)",
        "snippet": "    public boolean hasKey(String key) {\n        return attributes.containsKey(key.toLowerCase());\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     Tests if these attributes contain an attribute with this key.\n     @param key key to check for\n     @return true if key exists, false otherwise\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Attributes.java",
        "class_name": "org.jsoup.nodes.Attributes",
        "signature": "org.jsoup.nodes.Attributes.size()",
        "snippet": "    public int size() {\n        return attributes.size();\n    }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n     Get the number of attributes in this set.\n     @return size\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Attributes.java",
        "class_name": "org.jsoup.nodes.Attributes",
        "signature": "org.jsoup.nodes.Attributes.addAll(org.jsoup.nodes.Attributes)",
        "snippet": "    public void addAll(Attributes incoming) {\n        attributes.putAll(incoming.attributes);\n    }",
        "begin_line": 85,
        "end_line": 87,
        "comment": "\n     Add all the attributes from the incoming set to this set.\n     @param incoming attributes to add to these attributes.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Attributes.java",
        "class_name": "org.jsoup.nodes.Attributes",
        "signature": "org.jsoup.nodes.Attributes.iterator()",
        "snippet": "    public Iterator<Attribute> iterator() {\n        return asList().iterator();\n    }",
        "begin_line": 89,
        "end_line": 91,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Attributes.java",
        "class_name": "org.jsoup.nodes.Attributes",
        "signature": "org.jsoup.nodes.Attributes.asList()",
        "snippet": "    public List<Attribute> asList() {\n        List<Attribute> list = new ArrayList<Attribute>(attributes.size());\n        for (Map.Entry<String, Attribute> entry : attributes.entrySet()) {\n            list.add(entry.getValue());\n        }\n        return Collections.unmodifiableList(list);\n    }",
        "begin_line": 98,
        "end_line": 104,
        "comment": "\n     Get the attributes as a List, for iteration. Do not modify the keys of the attributes via this view, as changes\n     to keys will not be recognised in the containing set.\n     @return an view of the attributes as a List.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Attributes.java",
        "class_name": "org.jsoup.nodes.Attributes",
        "signature": "org.jsoup.nodes.Attributes.dataset()",
        "snippet": "    public Map<String, String> dataset() {\n        return new Dataset();\n    }",
        "begin_line": 111,
        "end_line": 113,
        "comment": "\n     * Retrieves a filtered view of attributes that are HTML5 custom data attributes; that is, attributes with keys\n     * starting with {@code data-}.\n     * @return map of custom data attributes.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Attributes.java",
        "class_name": "org.jsoup.nodes.Attributes",
        "signature": "org.jsoup.nodes.Attributes.html()",
        "snippet": "    public String html() {\n        StringBuilder accum = new StringBuilder();\n        html(accum, (new Document(\"\")).outputSettings()); // output settings a bit funky, but this html() seldom used\n        return accum.toString();\n    }",
        "begin_line": 119,
        "end_line": 123,
        "comment": "\n     Get the HTML representation of these attributes.\n     @return HTML\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Attributes.java",
        "class_name": "org.jsoup.nodes.Attributes",
        "signature": "org.jsoup.nodes.Attributes.html(java.lang.StringBuilder, org.jsoup.nodes.Document.OutputSettings)",
        "snippet": "    void html(StringBuilder accum, Document.OutputSettings out) {\n        for (Map.Entry<String, Attribute> entry : attributes.entrySet()) {\n            Attribute attribute = entry.getValue();\n            accum.append(\" \");\n            attribute.html(accum, out);\n        }\n    }",
        "begin_line": 125,
        "end_line": 131,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Attributes.java",
        "class_name": "org.jsoup.nodes.Attributes",
        "signature": "org.jsoup.nodes.Attributes.toString()",
        "snippet": "    public String toString() {\n        return html();\n    }",
        "begin_line": 133,
        "end_line": 135,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Attributes.java",
        "class_name": "org.jsoup.nodes.Attributes",
        "signature": "org.jsoup.nodes.Attributes.equals(java.lang.Object)",
        "snippet": "    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof Attributes)) return false;\n        \n        Attributes that = (Attributes) o;\n        \n        if (attributes != null ? !attributes.equals(that.attributes) : that.attributes != null) return false;\n        \n        return true;\n    }",
        "begin_line": 137,
        "end_line": 147,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Attributes.java",
        "class_name": "org.jsoup.nodes.Attributes",
        "signature": "org.jsoup.nodes.Attributes.hashCode()",
        "snippet": "    @Override\n    public int hashCode() {\n        return attributes != null ? attributes.hashCode() : 0;\n    }",
        "begin_line": 149,
        "end_line": 152,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Attributes.java",
        "class_name": "org.jsoup.nodes.Attributes",
        "signature": "org.jsoup.nodes.Attributes.Dataset.entrySet()",
        "snippet": "        public Set<Entry<String, String>> entrySet() {\n            return new EntrySet();\n        }",
        "begin_line": 156,
        "end_line": 158,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Attributes.java",
        "class_name": "org.jsoup.nodes.Attributes",
        "signature": "org.jsoup.nodes.Attributes.Dataset.put(java.lang.String, java.lang.String)",
        "snippet": "        @Override\n        public String put(String key, String value) {\n            String dataKey = dataKey(key);\n            String oldValue = hasKey(dataKey) ? attributes.get(dataKey).getValue() : null;\n            Attribute attr = new Attribute(dataKey, value);\n            attributes.put(dataKey, attr);\n            return oldValue;\n        }",
        "begin_line": 160,
        "end_line": 167,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Attributes.java",
        "class_name": "org.jsoup.nodes.Attributes",
        "signature": "org.jsoup.nodes.Attributes.Dataset.EntrySet.iterator()",
        "snippet": "            public Iterator<Map.Entry<String, String>> iterator() {\n                return new DatasetIterator();\n            }",
        "begin_line": 170,
        "end_line": 172,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Attributes.java",
        "class_name": "org.jsoup.nodes.Attributes",
        "signature": "org.jsoup.nodes.Attributes.Dataset.EntrySet.size()",
        "snippet": "            public int size() {\n                int count = 0;\n                Iterator iter = new DatasetIterator();\n                while (iter.hasNext())\n                    count++;\n                return count;\n            }",
        "begin_line": 174,
        "end_line": 180,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Attributes.java",
        "class_name": "org.jsoup.nodes.Attributes",
        "signature": "org.jsoup.nodes.Attributes.Dataset.DatasetIterator.hasNext()",
        "snippet": "            public boolean hasNext() {\n                while (attrIter.hasNext()) {\n                    attr = attrIter.next();\n                    if (attr.isDataAttribute()) return true;\n                }\n                return false;\n            }",
        "begin_line": 186,
        "end_line": 192,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Attributes.java",
        "class_name": "org.jsoup.nodes.Attributes",
        "signature": "org.jsoup.nodes.Attributes.Dataset.DatasetIterator.next()",
        "snippet": "            public Entry<String, String> next() {\n                return new Attribute(attr.getKey().substring(dataPrefix.length()), attr.getValue());\n            }",
        "begin_line": 194,
        "end_line": 196,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Attributes.java",
        "class_name": "org.jsoup.nodes.Attributes",
        "signature": "org.jsoup.nodes.Attributes.Dataset.DatasetIterator.remove()",
        "snippet": "            public void remove() {\n                attributes.remove(attr.getKey());\n            }",
        "begin_line": 198,
        "end_line": 200,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Attributes.java",
        "class_name": "org.jsoup.nodes.Attributes",
        "signature": "org.jsoup.nodes.Attributes.dataKey(java.lang.String)",
        "snippet": "    private static String dataKey(String key) {\n        return dataPrefix + key;\n    }",
        "begin_line": 204,
        "end_line": 206,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Entities.java",
        "class_name": "org.jsoup.nodes.Entities",
        "signature": "org.jsoup.nodes.Entities.EscapeMode.EscapeMode(java.util.Map<java.lang.Character, java.lang.String>)",
        "snippet": "        EscapeMode(Map<Character, String> map) {\n            this.map = map;\n        }",
        "begin_line": 25,
        "end_line": 27,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Entities.java",
        "class_name": "org.jsoup.nodes.Entities",
        "signature": "org.jsoup.nodes.Entities.EscapeMode.getMap()",
        "snippet": "        public Map<Character, String> getMap() {\n            return map;\n        }",
        "begin_line": 29,
        "end_line": 31,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Entities.java",
        "class_name": "org.jsoup.nodes.Entities",
        "signature": "org.jsoup.nodes.Entities.escape(java.lang.String, org.jsoup.nodes.Document.OutputSettings)",
        "snippet": "    static String escape(String string, Document.OutputSettings out) {\n        return escape(string, out.encoder(), out.escapeMode());\n    }",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Entities.java",
        "class_name": "org.jsoup.nodes.Entities",
        "signature": "org.jsoup.nodes.Entities.escape(java.lang.String, java.nio.charset.CharsetEncoder, org.jsoup.nodes.Entities.EscapeMode)",
        "snippet": "    static String escape(String string, CharsetEncoder encoder, EscapeMode escapeMode) {\n        StringBuilder accum = new StringBuilder(string.length() * 2);\n        Map<Character, String> map = escapeMode.getMap();\n\n        for (int pos = 0; pos < string.length(); pos++) {\n            Character c = string.charAt(pos);\n            if (map.containsKey(c))\n                accum.append('&').append(map.get(c)).append(';');\n            else if (encoder.canEncode(c))\n                accum.append(c.charValue());\n            else\n                accum.append(\"&#\").append((int) c).append(';');\n        }\n\n        return accum.toString();\n    }",
        "begin_line": 44,
        "end_line": 59,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Entities.java",
        "class_name": "org.jsoup.nodes.Entities",
        "signature": "org.jsoup.nodes.Entities.unescape(java.lang.String)",
        "snippet": "    static String unescape(String string) {\n        if (!string.contains(\"&\"))\n            return string;\n\n        Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?\n        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs\n        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required\n\n        while (m.find()) {\n            int charval = -1;\n            String num = m.group(3);\n            if (num != null) {\n                try {\n                    int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator\n                    charval = Integer.valueOf(num, base);\n                } catch (NumberFormatException e) {\n                } // skip\n            } else {\n                String name = m.group(1);\n                if (full.containsKey(name))\n                    charval = full.get(name);\n            }\n\n            if (charval != -1 || charval > 0xFFFF) { // out of range\n                String c = Character.toString((char) charval);\n                m.appendReplacement(accum, Matcher.quoteReplacement(c));\n            } else {\n                m.appendReplacement(accum, Matcher.quoteReplacement(m.group(0))); // replace with original string\n            }\n        }\n        m.appendTail(accum);\n        return accum.toString();\n    }",
        "begin_line": 61,
        "end_line": 93,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Attribute.java",
        "class_name": "org.jsoup.nodes.Attribute",
        "signature": "org.jsoup.nodes.Attribute.Attribute(java.lang.String, java.lang.String)",
        "snippet": "    public Attribute(String key, String value) {\n        Validate.notEmpty(key);\n        Validate.notNull(value);\n        this.key = key.trim().toLowerCase();\n        this.value = value;\n    }",
        "begin_line": 21,
        "end_line": 26,
        "comment": "\n     * Create a new attribute from unencoded (raw) key and value.\n     * @param key attribute key\n     * @param value attribute value\n     * @see #createFromEncoded\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Attribute.java",
        "class_name": "org.jsoup.nodes.Attribute",
        "signature": "org.jsoup.nodes.Attribute.getKey()",
        "snippet": "    public String getKey() {\n        return key;\n    }",
        "begin_line": 32,
        "end_line": 34,
        "comment": "\n     Get the attribute key.\n     @return the attribute key\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Attribute.java",
        "class_name": "org.jsoup.nodes.Attribute",
        "signature": "org.jsoup.nodes.Attribute.setKey(java.lang.String)",
        "snippet": "    public void setKey(String key) {\n        Validate.notEmpty(key);\n        this.key = key.trim().toLowerCase();\n    }",
        "begin_line": 40,
        "end_line": 43,
        "comment": "\n     Set the attribute key. Gets normalised as per the constructor method.\n     @param key the new key; must not be null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Attribute.java",
        "class_name": "org.jsoup.nodes.Attribute",
        "signature": "org.jsoup.nodes.Attribute.getValue()",
        "snippet": "    public String getValue() {\n        return value;\n    }",
        "begin_line": 49,
        "end_line": 51,
        "comment": "\n     Get the attribute value.\n     @return the attribute value\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Attribute.java",
        "class_name": "org.jsoup.nodes.Attribute",
        "signature": "org.jsoup.nodes.Attribute.setValue(java.lang.String)",
        "snippet": "    public String setValue(String value) {\n        Validate.notNull(value);\n        String old = this.value;\n        this.value = value;\n        return old;\n    }",
        "begin_line": 57,
        "end_line": 62,
        "comment": "\n     Set the attribute value.\n     @param value the new attribute value; must not be null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Attribute.java",
        "class_name": "org.jsoup.nodes.Attribute",
        "signature": "org.jsoup.nodes.Attribute.html()",
        "snippet": "    public String html() {\n        return key + \"=\\\"\" + Entities.escape(value, (new Document(\"\")).outputSettings()) + \"\\\"\";\n    }",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\n     Get the HTML representation of this attribute; e.g. {@code href=\"index.html\"}.\n     @return HTML\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Attribute.java",
        "class_name": "org.jsoup.nodes.Attribute",
        "signature": "org.jsoup.nodes.Attribute.html(java.lang.StringBuilder, org.jsoup.nodes.Document.OutputSettings)",
        "snippet": "    protected void html(StringBuilder accum, Document.OutputSettings out) {\n        accum\n            .append(key)\n            .append(\"=\\\"\")\n            .append(Entities.escape(value, out))\n            .append(\"\\\"\");\n    }",
        "begin_line": 72,
        "end_line": 78,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Attribute.java",
        "class_name": "org.jsoup.nodes.Attribute",
        "signature": "org.jsoup.nodes.Attribute.toString()",
        "snippet": "    public String toString() {\n        return html();\n    }",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\n     Get the string representation of this attribute, implemented as {@link #html()}.\n     @return string\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Attribute.java",
        "class_name": "org.jsoup.nodes.Attribute",
        "signature": "org.jsoup.nodes.Attribute.createFromEncoded(java.lang.String, java.lang.String)",
        "snippet": "    public static Attribute createFromEncoded(String unencodedKey, String encodedValue) {\n        String value = Entities.unescape(encodedValue);\n        return new Attribute(unencodedKey, value);\n    }",
        "begin_line": 94,
        "end_line": 97,
        "comment": "\n     * Create a new Attribute from an unencoded key and a HMTL attribute encoded value.\n     * @param unencodedKey assumes the key is not encoded, as can be only run of simple \\w chars.\n     * @param encodedValue HTML attribute encoded value\n     * @return attribute\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Attribute.java",
        "class_name": "org.jsoup.nodes.Attribute",
        "signature": "org.jsoup.nodes.Attribute.isDataAttribute()",
        "snippet": "    protected boolean isDataAttribute() {\n        return key.startsWith(Attributes.dataPrefix) && key.length() > Attributes.dataPrefix.length();\n    }",
        "begin_line": 99,
        "end_line": 101,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Attribute.java",
        "class_name": "org.jsoup.nodes.Attribute",
        "signature": "org.jsoup.nodes.Attribute.equals(java.lang.Object)",
        "snippet": "    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof Attribute)) return false;\n\n        Attribute attribute = (Attribute) o;\n\n        if (key != null ? !key.equals(attribute.key) : attribute.key != null) return false;\n        if (value != null ? !value.equals(attribute.value) : attribute.value != null) return false;\n\n        return true;\n    }",
        "begin_line": 103,
        "end_line": 114,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Attribute.java",
        "class_name": "org.jsoup.nodes.Attribute",
        "signature": "org.jsoup.nodes.Attribute.hashCode()",
        "snippet": "    @Override\n    public int hashCode() {\n        int result = key != null ? key.hashCode() : 0;\n        result = 31 * result + (value != null ? value.hashCode() : 0);\n        return result;\n    }",
        "begin_line": 116,
        "end_line": 121,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/XmlDeclaration.java",
        "class_name": "org.jsoup.nodes.XmlDeclaration",
        "signature": "org.jsoup.nodes.XmlDeclaration.XmlDeclaration(java.lang.String, java.lang.String, boolean)",
        "snippet": "    public XmlDeclaration(String data, String baseUri, boolean isProcessingInstruction) {\n        super(baseUri);\n        attributes.put(DECL_KEY, data);\n        this.isProcessingInstruction = isProcessingInstruction;\n    }",
        "begin_line": 17,
        "end_line": 21,
        "comment": "\n     Create a new XML declaration\n     @param data data\n     @param baseUri base uri\n     @param isProcessingInstruction is processing instruction\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/XmlDeclaration.java",
        "class_name": "org.jsoup.nodes.XmlDeclaration",
        "signature": "org.jsoup.nodes.XmlDeclaration.nodeName()",
        "snippet": "    public String nodeName() {\n        return \"#declaration\";\n    }",
        "begin_line": 23,
        "end_line": 25,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/XmlDeclaration.java",
        "class_name": "org.jsoup.nodes.XmlDeclaration",
        "signature": "org.jsoup.nodes.XmlDeclaration.getWholeDeclaration()",
        "snippet": "    public String getWholeDeclaration() {\n        return attributes.get(DECL_KEY);\n    }",
        "begin_line": 31,
        "end_line": 33,
        "comment": "\n     Get the unencoded XML declaration.\n     @return XML declaration\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/XmlDeclaration.java",
        "class_name": "org.jsoup.nodes.XmlDeclaration",
        "signature": "org.jsoup.nodes.XmlDeclaration.outerHtmlHead(java.lang.StringBuilder, int, org.jsoup.nodes.Document.OutputSettings)",
        "snippet": "    void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n        accum\n                .append(\"<\")\n                .append(isProcessingInstruction ? \"!\" : \"?\")\n                .append(getWholeDeclaration())\n                .append(\">\");\n    }",
        "begin_line": 35,
        "end_line": 41,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/XmlDeclaration.java",
        "class_name": "org.jsoup.nodes.XmlDeclaration",
        "signature": "org.jsoup.nodes.XmlDeclaration.outerHtmlTail(java.lang.StringBuilder, int, org.jsoup.nodes.Document.OutputSettings)",
        "snippet": "    void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out) {}",
        "begin_line": 43,
        "end_line": 43,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/XmlDeclaration.java",
        "class_name": "org.jsoup.nodes.XmlDeclaration",
        "signature": "org.jsoup.nodes.XmlDeclaration.toString()",
        "snippet": "    public String toString() {\n        return outerHtml();\n    }",
        "begin_line": 45,
        "end_line": 47,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.Element(org.jsoup.parser.Tag, java.lang.String, org.jsoup.nodes.Attributes)",
        "snippet": "    public Element(Tag tag, String baseUri, Attributes attributes) {\n        super(baseUri, attributes);\n        \n        Validate.notNull(tag);    \n        this.tag = tag;\n    }",
        "begin_line": 36,
        "end_line": 41,
        "comment": "\n     * Create a new, standalone Element. (Standalone in that is has no parent.)\n     * \n     * @param tag tag of this element\n     * @param baseUri the base URI\n     * @param attributes initial attributes\n     * @see #appendChild(Node)\n     * @see #appendElement(String)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.Element(org.jsoup.parser.Tag, java.lang.String)",
        "snippet": "    public Element(Tag tag, String baseUri) {\n        this(tag, baseUri, new Attributes());\n    }",
        "begin_line": 51,
        "end_line": 53,
        "comment": "\n     * Create a new Element from a tag and a base URI.\n     * \n     * @param tag element tag\n     * @param baseUri the base URI of this element. It is acceptable for the base URI to be an empty\n     *            string, but not null.\n     * @see Tag#valueOf(String)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.nodeName()",
        "snippet": "    @Override\n    public String nodeName() {\n        return tag.getName();\n    }",
        "begin_line": 55,
        "end_line": 58,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.tagName()",
        "snippet": "    public String tagName() {\n        return tag.getName();\n    }",
        "begin_line": 65,
        "end_line": 67,
        "comment": "\n     * Get the name of the tag for this element. E.g. {@code div}\n     * \n     * @return the tag name\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.tag()",
        "snippet": "    public Tag tag() {\n        return tag;\n    }",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\n     * Get the Tag for this element.\n     * \n     * @return the tag object\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.isBlock()",
        "snippet": "    public boolean isBlock() {\n        return tag.isBlock();\n    }",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\n     * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element\n     * {@code <p> == false}).\n     * \n     * @return true if block, false if not (and thus inline)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.id()",
        "snippet": "    public String id() {\n        String id = attr(\"id\");\n        return id == null ? \"\" : id;\n    }",
        "begin_line": 93,
        "end_line": 96,
        "comment": "\n     * Get the {@code id} attribute of this element.\n     * \n     * @return The id attribute, if present, or an empty string if not.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.attr(java.lang.String, java.lang.String)",
        "snippet": "    public Element attr(String attributeKey, String attributeValue) {\n        super.attr(attributeKey, attributeValue);\n        return this;\n    }",
        "begin_line": 104,
        "end_line": 107,
        "comment": "\n     * Set an attribute value on this element. If this element already has an attribute with the\n     * key, its value is updated; otherwise, a new attribute is added.\n     * \n     * @return this element\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.dataset()",
        "snippet": "    public Map<String, String> dataset() {\n        return attributes.dataset();\n    }",
        "begin_line": 122,
        "end_line": 124,
        "comment": "\n     * Get this element's HTML5 custom data attributes. Each attribute in the element that has a key\n     * starting with \"data-\" is included the dataset.\n     * <p>\n     * E.g., the element {@code <div data-package=\"jsoup\" data-language=\"Java\" class=\"group\">...} has the dataset\n     * {@code package=jsoup, language=java}.\n     * <p>\n     * This map is a filtered view of the element's attribute map. Changes to one map (add, remove, update) are reflected\n     * in the other map.\n     * <p>\n     * You can find elements that have data attributes using the {@code [^data-]} attribute key prefix selector.\n     * @return a map of {@code key=value} custom data attributes.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.parent()",
        "snippet": "    @Override\n    public final Element parent() {\n        return (Element) parentNode;\n    }",
        "begin_line": 126,
        "end_line": 129,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.parents()",
        "snippet": "    public Elements parents() {\n        Elements parents = new Elements();\n        accumulateParents(this, parents);\n        return parents;\n    }",
        "begin_line": 135,
        "end_line": 139,
        "comment": "\n     * Get this element's parent and ancestors, up to the document root.\n     * @return this element's stack of parents, closest first.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.accumulateParents(org.jsoup.nodes.Element, org.jsoup.select.Elements)",
        "snippet": "    private static void accumulateParents(Element el, Elements parents) {\n        Element parent = el.parent();\n        if (parent != null && !parent.tagName().equals(\"#root\")) {\n            parents.add(parent);\n            accumulateParents(parent, parents);\n        }\n    }",
        "begin_line": 141,
        "end_line": 147,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.child(int)",
        "snippet": "    public Element child(int index) {\n        return children().get(index);\n    }",
        "begin_line": 159,
        "end_line": 161,
        "comment": "\n     * Get a child element of this element, by its 0-based index number.\n     * <p/>\n     * Note that an element can have both mixed Nodes and Elements as children. This method inspects\n     * a filtered list of children that are elements, and the index is based on that filtered list.\n     * \n     * @param index the index number of the element to retrieve\n     * @return the child element, if it exists, or {@code null} if absent.\n     * @see #childNode(int)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.children()",
        "snippet": "    public Elements children() {\n        // create on the fly rather than maintaining two lists. if gets slow, memoize, and mark dirty on change\n        List<Element> elements = new ArrayList<Element>();\n        for (Node node : childNodes) {\n            if (node instanceof Element)\n                elements.add((Element) node);\n        }\n        return new Elements(elements);\n    }",
        "begin_line": 171,
        "end_line": 179,
        "comment": "\n     * Get this element's child elements.\n     * <p/>\n     * This is effectively a filter on {@link #childNodes()} to get Element nodes.\n     * @return child elements. If this element has no children, returns an\n     * empty list.\n     * @see #childNodes()\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.select(java.lang.String)",
        "snippet": "    public Elements select(String query) {\n        return Selector.select(query, this);\n    }",
        "begin_line": 198,
        "end_line": 200,
        "comment": "\n     * Find elements that match the selector query, with this element as the starting context. Matched elements\n     * may include this element, or any of its children.\n     * <p/>\n     * This method is generally more powerful to use than the DOM-type {@code getElementBy*} methods, because\n     * multiple filters can be combined, e.g.:\n     * <ul>\n     * <li>{@code el.select(\"a[href]\")} - finds links ({@code a} tags with {@code href} attributes)\n     * <li>{@code el.select(\"a[href*=example.com]\")} - finds links pointing to example.com (loosely)\n     * </ul>\n     * <p/>\n     * See the query syntax documentation in {@link org.jsoup.select.Selector}.\n     *\n     * @param query a {@link Selector} query\n     * @return elements that match the query (empty if none match)\n     * @see org.jsoup.select.Selector\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.appendChild(org.jsoup.nodes.Node)",
        "snippet": "    public Element appendChild(Node child) {\n        Validate.notNull(child);\n        \n        addChildren(child);\n        return this;\n    }",
        "begin_line": 208,
        "end_line": 213,
        "comment": "\n     * Add a node to the last child of this element.\n     * \n     * @param child node to add. Must not already have a parent.\n     * @return this element, so that you can add more child nodes or elements.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.prependChild(org.jsoup.nodes.Node)",
        "snippet": "    public Element prependChild(Node child) {\n        Validate.notNull(child);\n        \n        addChildren(0, child);\n        return this;\n    }",
        "begin_line": 221,
        "end_line": 226,
        "comment": "\n     * Add a node to the start of this element's children.\n     * \n     * @param child node to add. Must not already have a parent.\n     * @return this element, so that you can add more child nodes or elements.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.appendElement(java.lang.String)",
        "snippet": "    public Element appendElement(String tagName) {\n        Element child = new Element(Tag.valueOf(tagName), baseUri());\n        appendChild(child);\n        return child;\n    }",
        "begin_line": 235,
        "end_line": 239,
        "comment": "\n     * Create a new element by tag name, and add it as the last child.\n     * \n     * @param tagName the name of the tag (e.g. {@code div}).\n     * @return the new element, to allow you to add content to it, e.g.:\n     *  {@code parent.appendElement(\"h1\").attr(\"id\", \"header\").text(\"Welcome\");}\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.prependElement(java.lang.String)",
        "snippet": "    public Element prependElement(String tagName) {\n        Element child = new Element(Tag.valueOf(tagName), baseUri());\n        prependChild(child);\n        return child;\n    }",
        "begin_line": 248,
        "end_line": 252,
        "comment": "\n     * Create a new element by tag name, and add it as the first child.\n     * \n     * @param tagName the name of the tag (e.g. {@code div}).\n     * @return the new element, to allow you to add content to it, e.g.:\n     *  {@code parent.prependElement(\"h1\").attr(\"id\", \"header\").text(\"Welcome\");}\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.appendText(java.lang.String)",
        "snippet": "    public Element appendText(String text) {\n        TextNode node = new TextNode(text, baseUri());\n        appendChild(node);\n        return this;\n    }",
        "begin_line": 260,
        "end_line": 264,
        "comment": "\n     * Create and append a new TextNode to this element.\n     * \n     * @param text the unencoded text to add\n     * @return this element\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.prependText(java.lang.String)",
        "snippet": "    public Element prependText(String text) {\n        TextNode node = new TextNode(text, baseUri());\n        prependChild(node);\n        return this;\n    }",
        "begin_line": 272,
        "end_line": 276,
        "comment": "\n     * Create and prepend a new TextNode to this element.\n     * \n     * @param text the unencoded text to add\n     * @return this element\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.append(java.lang.String)",
        "snippet": "    public Element append(String html) {\n        Validate.notNull(html);\n        \n        Element fragment = Parser.parseBodyFragmentRelaxed(html, baseUri()).body();\n        addChildren(fragment.childNodesAsArray());\n        return this;\n    }",
        "begin_line": 284,
        "end_line": 290,
        "comment": "\n     * Add inner HTML to this element. The supplied HTML will be parsed, and each node appended to the end of the children.\n     * @param html HTML to add inside this element, after the existing HTML\n     * @return this element\n     * @see #html(String)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.prepend(java.lang.String)",
        "snippet": "    public Element prepend(String html) {\n        Validate.notNull(html);\n        \n        Element fragment = Parser.parseBodyFragmentRelaxed(html, baseUri()).body();\n        addChildren(0, fragment.childNodesAsArray());\n        return this;\n    }",
        "begin_line": 298,
        "end_line": 304,
        "comment": "\n     * Add inner HTML into this element. The supplied HTML will be parsed, and each node prepended to the start of the element's children.\n     * @param html HTML to add inside this element, before the existing HTML\n     * @return this element\n     * @see #html(String)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.before(java.lang.String)",
        "snippet": "    public Element before(String html) {\n        addSiblingHtml(siblingIndex(), html);\n        return this;\n    }",
        "begin_line": 312,
        "end_line": 315,
        "comment": "\n     * Insert the specified HTML into the DOM before this element (i.e. as a preceeding sibling).\n     * @param html HTML to add before this element\n     * @return this element, for chaining\n     * @see #after(String)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.after(java.lang.String)",
        "snippet": "    public Element after(String html) {\n        addSiblingHtml(siblingIndex()+1, html);\n        return this;\n    }",
        "begin_line": 323,
        "end_line": 326,
        "comment": "\n     * Insert the specified HTML into the DOM after this element (i.e. as a following sibling).\n     * @param html HTML to add after this element\n     * @return this element, for chaining\n     * @see #before(String)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.addSiblingHtml(int, java.lang.String)",
        "snippet": "    private void addSiblingHtml(int index, String html) {\n        Validate.notNull(html);\n        Validate.notNull(parentNode);\n        \n        Element fragment = Parser.parseBodyFragmentRelaxed(html, baseUri()).body();\n        parentNode.addChildren(index, fragment.childNodesAsArray());\n    }",
        "begin_line": 328,
        "end_line": 334,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.empty()",
        "snippet": "    public Element empty() {\n        childNodes.clear();\n        return this;\n    }",
        "begin_line": 340,
        "end_line": 343,
        "comment": "\n     * Remove all of the element's child nodes. Any attributes are left as-is.\n     * @return this element\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.wrap(java.lang.String)",
        "snippet": "    public Element wrap(String html) {\n        Validate.notEmpty(html);\n\n        Element wrapBody = Parser.parseBodyFragmentRelaxed(html, baseUri).body();\n        Elements wrapChildren = wrapBody.children();\n        Element wrap = wrapChildren.first();\n        if (wrap == null) // nothing to wrap with; noop\n            return null;\n\n        Element deepest = getDeepChild(wrap);\n        parentNode.replaceChild(this, wrap);\n        deepest.addChildren(this);\n\n        // remainder (unbalananced wrap, like <div></div><p></p> -- The <p> is remainder\n        if (wrapChildren.size() > 1) {\n            for (int i = 1; i < wrapChildren.size(); i++) { // skip first\n                Element remainder = wrapChildren.get(i);\n                remainder.parentNode.removeChild(remainder);\n                wrap.appendChild(remainder);\n            }\n        }\n        return this;\n    }",
        "begin_line": 350,
        "end_line": 372,
        "comment": "\n     Wrap the supplied HTML around this element.\n     @param html HTML to wrap around this element, e.g. {@code <div class=\"head\"></div>}. Can be arbitralily deep.\n     @return this element, for chaining.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.getDeepChild(org.jsoup.nodes.Element)",
        "snippet": "    private Element getDeepChild(Element el) {\n        List<Element> children = el.children();\n        if (children.size() > 0)\n            return getDeepChild(children.get(0));\n        else\n            return el;\n    }",
        "begin_line": 374,
        "end_line": 380,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.siblingElements()",
        "snippet": "    public Elements siblingElements() {\n        return parent().children();\n    }",
        "begin_line": 386,
        "end_line": 388,
        "comment": "\n     * Get sibling elements.\n     * @return sibling elements\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.nextElementSibling()",
        "snippet": "    public Element nextElementSibling() {\n        List<Element> siblings = parent().children();\n        Integer index = indexInList(this, siblings);\n        Validate.notNull(index);\n        if (siblings.size() > index+1)\n            return siblings.get(index+1);\n        else\n            return null;\n    }",
        "begin_line": 398,
        "end_line": 406,
        "comment": "\n     * Gets the next sibling element of this element. E.g., if a {@code div} contains two {@code p}s, \n     * the {@code nextElementSibling} of the first {@code p} is the second {@code p}.\n     * <p/>\n     * This is similar to {@link #nextSibling()}, but specifically finds only Elements\n     * @return the next element, or null if there is no next element\n     * @see #previousElementSibling()\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.previousElementSibling()",
        "snippet": "    public Element previousElementSibling() {\n        List<Element> siblings = parent().children();\n        Integer index = indexInList(this, siblings);\n        Validate.notNull(index);\n        if (index > 0)\n            return siblings.get(index-1);\n        else\n            return null;\n    }",
        "begin_line": 413,
        "end_line": 421,
        "comment": "\n     * Gets the previous element sibling of this element.\n     * @return the previous element, or null if there is no previous element\n     * @see #nextElementSibling()\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.firstElementSibling()",
        "snippet": "    public Element firstElementSibling() {\n        // todo: should firstSibling() exclude this?\n        List<Element> siblings = parent().children();\n        return siblings.size() > 1 ? siblings.get(0) : null;\n    }",
        "begin_line": 427,
        "end_line": 431,
        "comment": "\n     * Gets the first element sibling of this element.\n     * @return the first sibling that is an element (aka the parent's first element child) \n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.elementSiblingIndex()",
        "snippet": "    public Integer elementSiblingIndex() {\n       if (parent() == null) return 0;\n       return indexInList(this, parent().children()); \n    }",
        "begin_line": 438,
        "end_line": 441,
        "comment": "\n     * Get the list index of this element in its element sibling list. I.e. if this is the first element\n     * sibling, returns 0.\n     * @return position in element sibling list\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.lastElementSibling()",
        "snippet": "    public Element lastElementSibling() {\n        List<Element> siblings = parent().children();\n        return siblings.size() > 1 ? siblings.get(siblings.size() - 1) : null;\n    }",
        "begin_line": 447,
        "end_line": 450,
        "comment": "\n     * Gets the last element sibling of this element\n     * @return the last sibling that is an element (aka the parent's last element child) \n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.indexInList(org.jsoup.nodes.Element, java.util.List<E>)",
        "snippet": "    private static <E extends Element> Integer indexInList(Element search, List<E> elements) {\n        Validate.notNull(search);\n        Validate.notNull(elements);\n\n        for (int i = 0; i < elements.size(); i++) {\n            E element = elements.get(i);\n            if (element.equals(search))\n                return i;\n        }\n        return null;\n    }",
        "begin_line": 452,
        "end_line": 462,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.getElementsByTag(java.lang.String)",
        "snippet": "    public Elements getElementsByTag(String tagName) {\n        Validate.notEmpty(tagName);\n        tagName = tagName.toLowerCase().trim();\n\n        return Collector.collect(new Evaluator.Tag(tagName), this);\n    }",
        "begin_line": 471,
        "end_line": 476,
        "comment": "\n     * Finds elements, including and recursively under this element, with the specified tag name.\n     * @param tagName The tag name to search for (case insensitively).\n     * @return a matching unmodifiable list of elements. Will be empty if this element and none of its children match.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.getElementById(java.lang.String)",
        "snippet": "    public Element getElementById(String id) {\n        Validate.notEmpty(id);\n        \n        Elements elements = Collector.collect(new Evaluator.Id(id), this);\n        if (elements.size() > 0)\n            return elements.get(0);\n        else\n            return null;\n    }",
        "begin_line": 487,
        "end_line": 495,
        "comment": "\n     * Find an element by ID, including or under this element.\n     * <p>\n     * Note that this finds the first matching ID, starting with this element. If you search down from a different\n     * starting point, it is possible to find a different element by ID. For unique element by ID within a Document,\n     * use {@link Document#getElementById(String)}\n     * @param id The ID to search for.\n     * @return The first matching element by ID, starting with this element, or null if none found.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.getElementsByClass(java.lang.String)",
        "snippet": "    public Elements getElementsByClass(String className) {\n        Validate.notEmpty(className);\n\n        return Collector.collect(new Evaluator.Class(className), this);\n    }",
        "begin_line": 508,
        "end_line": 512,
        "comment": "\n     * Find elements that have this class, including or under this element. Case insensitive.\n     * <p>\n     * Elements can have multiple classes (e.g. {@code <div class=\"header round first\">}. This method\n     * checks each class, so you can find the above with {@code el.getElementsByClass(\"header\");}.\n     * \n     * @param className the name of the class to search for.\n     * @return elements with the supplied class name, empty if none\n     * @see #hasClass(String)\n     * @see #classNames()\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.getElementsByAttribute(java.lang.String)",
        "snippet": "    public Elements getElementsByAttribute(String key) {\n        Validate.notEmpty(key);\n        key = key.trim().toLowerCase();\n\n        return Collector.collect(new Evaluator.Attribute(key), this);\n    }",
        "begin_line": 520,
        "end_line": 525,
        "comment": "\n     * Find elements that have a named attribute set. Case insensitive.\n     *\n     * @param key name of the attribute, e.g. {@code href}\n     * @return elements that have this attribute, empty if none\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.getElementsByAttributeStarting(java.lang.String)",
        "snippet": "    public Elements getElementsByAttributeStarting(String keyPrefix) {\n        Validate.notEmpty(keyPrefix);\n        keyPrefix = keyPrefix.trim().toLowerCase();\n\n        return Collector.collect(new Evaluator.AttributeStarting(keyPrefix), this);\n    }",
        "begin_line": 533,
        "end_line": 538,
        "comment": "\n     * Find elements that have an attribute name starting with the supplied prefix. Use {@code data-} to find elements\n     * that have HTML5 datasets.\n     * @param keyPrefix name prefix of the attribute e.g. {@code data-}\n     * @return elements that have attribute names that start with with the prefix, empty if none.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.getElementsByAttributeValue(java.lang.String, java.lang.String)",
        "snippet": "    public Elements getElementsByAttributeValue(String key, String value) {\n        return Collector.collect(new Evaluator.AttributeWithValue(key, value), this);\n    }",
        "begin_line": 547,
        "end_line": 549,
        "comment": "\n     * Find elements that have an attribute with the specific value. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param value value of the attribute\n     * @return elements that have this attribute with this value, empty if none\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.getElementsByAttributeValueNot(java.lang.String, java.lang.String)",
        "snippet": "    public Elements getElementsByAttributeValueNot(String key, String value) {\n        return Collector.collect(new Evaluator.AttributeWithValueNot(key, value), this);\n    }",
        "begin_line": 558,
        "end_line": 560,
        "comment": "\n     * Find elements that either do not have this attribute, or have it with a different value. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param value value of the attribute\n     * @return elements that do not have a matching attribute\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.getElementsByAttributeValueStarting(java.lang.String, java.lang.String)",
        "snippet": "    public Elements getElementsByAttributeValueStarting(String key, String valuePrefix) {\n        return Collector.collect(new Evaluator.AttributeWithValueStarting(key, valuePrefix), this);\n    }",
        "begin_line": 569,
        "end_line": 571,
        "comment": "\n     * Find elements that have attributes that start with the value prefix. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param valuePrefix start of attribute value\n     * @return elements that have attributes that start with the value prefix\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.getElementsByAttributeValueEnding(java.lang.String, java.lang.String)",
        "snippet": "    public Elements getElementsByAttributeValueEnding(String key, String valueSuffix) {\n        return Collector.collect(new Evaluator.AttributeWithValueEnding(key, valueSuffix), this);\n    }",
        "begin_line": 580,
        "end_line": 582,
        "comment": "\n     * Find elements that have attributes that end with the value suffix. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param valueSuffix end of the attribute value\n     * @return elements that have attributes that end with the value suffix\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.getElementsByAttributeValueContaining(java.lang.String, java.lang.String)",
        "snippet": "    public Elements getElementsByAttributeValueContaining(String key, String match) {\n        return Collector.collect(new Evaluator.AttributeWithValueContaining(key, match), this);\n    }",
        "begin_line": 591,
        "end_line": 593,
        "comment": "\n     * Find elements that have attributes whose value contains the match string. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param match substring of value to search for\n     * @return elements that have attributes containing this text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.getElementsByAttributeValueMatching(java.lang.String, java.util.regex.Pattern)",
        "snippet": "    public Elements getElementsByAttributeValueMatching(String key, Pattern pattern) {\n        return Collector.collect(new Evaluator.AttributeWithValueMatching(key, pattern), this);\n        \n    }",
        "begin_line": 601,
        "end_line": 604,
        "comment": "\n     * Find elements that have attributes whose values match the supplied regular expression.\n     * @param key name of the attribute\n     * @param pattern compiled regular expression to match against attribute values\n     * @return elements that have attributes matching this regular expression\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.getElementsByAttributeValueMatching(java.lang.String, java.lang.String)",
        "snippet": "    public Elements getElementsByAttributeValueMatching(String key, String regex) {\n        Pattern pattern;\n        try {\n            pattern = Pattern.compile(regex);\n        } catch (PatternSyntaxException e) {\n            throw new IllegalArgumentException(\"Pattern syntax error: \" + regex, e);\n        }\n        return getElementsByAttributeValueMatching(key, pattern);\n    }",
        "begin_line": 612,
        "end_line": 620,
        "comment": "\n     * Find elements that have attributes whose values match the supplied regular expression.\n     * @param key name of the attribute\n     * @param regex regular expression to match agaisnt attribute values. You can use <a href=\"http://java.sun.com/docs/books/tutorial/essential/regex/pattern.html#embedded\">embedded flags</a> (such as (?i) and (?m) to control regex options.\n     * @return elements that have attributes matching this regular expression\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.getElementsByIndexLessThan(int)",
        "snippet": "    public Elements getElementsByIndexLessThan(int index) {\n        return Collector.collect(new Evaluator.IndexLessThan(index), this);\n    }",
        "begin_line": 627,
        "end_line": 629,
        "comment": "\n     * Find elements whose sibling index is less than the supplied index.\n     * @param index 0-based index\n     * @return elements less than index\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.getElementsByIndexGreaterThan(int)",
        "snippet": "    public Elements getElementsByIndexGreaterThan(int index) {\n        return Collector.collect(new Evaluator.IndexGreaterThan(index), this);\n    }",
        "begin_line": 636,
        "end_line": 638,
        "comment": "\n     * Find elements whose sibling index is greater than the supplied index.\n     * @param index 0-based index\n     * @return elements greater than index\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.getElementsByIndexEquals(int)",
        "snippet": "    public Elements getElementsByIndexEquals(int index) {\n        return Collector.collect(new Evaluator.IndexEquals(index), this);\n    }",
        "begin_line": 645,
        "end_line": 647,
        "comment": "\n     * Find elements whose sibling index is equal to the supplied index.\n     * @param index 0-based index\n     * @return elements equal to index\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.getElementsContainingText(java.lang.String)",
        "snippet": "    public Elements getElementsContainingText(String searchText) {\n        return Collector.collect(new Evaluator.ContainsText(searchText), this);\n    }",
        "begin_line": 656,
        "end_line": 658,
        "comment": "\n     * Find elements that contain the specified string. The search is case insensitive. The text may appear directly\n     * in the element, or in any of its descendants.\n     * @param searchText to look for in the element's text\n     * @return elements that contain the string, case insensitive.\n     * @see Element#text()\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.getElementsContainingOwnText(java.lang.String)",
        "snippet": "    public Elements getElementsContainingOwnText(String searchText) {\n        return Collector.collect(new Evaluator.ContainsOwnText(searchText), this);\n    }",
        "begin_line": 667,
        "end_line": 669,
        "comment": "\n     * Find elements that directly contain the specified string. The search is case insensitive. The text must appear directly\n     * in the element, not in any of its descendants.\n     * @param searchText to look for in the element's own text\n     * @return elements that contain the string, case insensitive.\n     * @see Element#ownText()\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.getElementsMatchingText(java.util.regex.Pattern)",
        "snippet": "    public Elements getElementsMatchingText(Pattern pattern) {\n        return Collector.collect(new Evaluator.Matches(pattern), this);\n    }",
        "begin_line": 677,
        "end_line": 679,
        "comment": "\n     * Find elements whose text matches the supplied regular expression.\n     * @param pattern regular expression to match text against\n     * @return elements matching the supplied regular expression.\n     * @see Element#text()\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.getElementsMatchingText(java.lang.String)",
        "snippet": "    public Elements getElementsMatchingText(String regex) {\n        Pattern pattern;\n        try {\n            pattern = Pattern.compile(regex);\n        } catch (PatternSyntaxException e) {\n            throw new IllegalArgumentException(\"Pattern syntax error: \" + regex, e);\n        }\n        return getElementsMatchingText(pattern);\n    }",
        "begin_line": 687,
        "end_line": 695,
        "comment": "\n     * Find elements whose text matches the supplied regular expression.\n     * @param regex regular expression to match text against. You can use <a href=\"http://java.sun.com/docs/books/tutorial/essential/regex/pattern.html#embedded\">embedded flags</a> (such as (?i) and (?m) to control regex options.\n     * @return elements matching the supplied regular expression.\n     * @see Element#text()\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.getElementsMatchingOwnText(java.util.regex.Pattern)",
        "snippet": "    public Elements getElementsMatchingOwnText(Pattern pattern) {\n        return Collector.collect(new Evaluator.MatchesOwn(pattern), this);\n    }",
        "begin_line": 703,
        "end_line": 705,
        "comment": "\n     * Find elements whose own text matches the supplied regular expression.\n     * @param pattern regular expression to match text against\n     * @return elements matching the supplied regular expression.\n     * @see Element#ownText()\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.getElementsMatchingOwnText(java.lang.String)",
        "snippet": "    public Elements getElementsMatchingOwnText(String regex) {\n        Pattern pattern;\n        try {\n            pattern = Pattern.compile(regex);\n        } catch (PatternSyntaxException e) {\n            throw new IllegalArgumentException(\"Pattern syntax error: \" + regex, e);\n        }\n        return getElementsMatchingOwnText(pattern);\n    }",
        "begin_line": 713,
        "end_line": 721,
        "comment": "\n     * Find elements whose text matches the supplied regular expression.\n     * @param regex regular expression to match text against. You can use <a href=\"http://java.sun.com/docs/books/tutorial/essential/regex/pattern.html#embedded\">embedded flags</a> (such as (?i) and (?m) to control regex options.\n     * @return elements matching the supplied regular expression.\n     * @see Element#ownText()\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.getAllElements()",
        "snippet": "    public Elements getAllElements() {\n        return Collector.collect(new Evaluator.AllElements(), this);\n    }",
        "begin_line": 728,
        "end_line": 730,
        "comment": "\n     * Find all elements under this element (including self, and children of children).\n     * \n     * @return all elements\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.text()",
        "snippet": "    public String text() {\n        StringBuilder sb = new StringBuilder();\n        text(sb);\n        return sb.toString().trim();\n    }",
        "begin_line": 740,
        "end_line": 744,
        "comment": "\n     * Gets the combined text of this element and all its children.\n     * <p>\n     * For example, given HTML {@code <p>Hello <b>there</b> now!</p>}, {@code p.text()} returns {@code \"Hello there now!\"}\n     *\n     * @return unencoded text, or empty string if none.\n     * @see #ownText()\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.text(java.lang.StringBuilder)",
        "snippet": "    private void text(StringBuilder accum) {\n        for (Node child : childNodes) {\n            if (child instanceof TextNode) {\n                TextNode textNode = (TextNode) child;\n                appendNormalisedText(accum, textNode);\n            } else if (child instanceof Element) {\n                Element element = (Element) child;\n                if (accum.length() > 0 && element.isBlock() && !TextNode.lastCharIsWhitespace(accum))\n                    accum.append(\" \");\n                element.text(accum);\n            }\n        }\n    }",
        "begin_line": 746,
        "end_line": 758,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.ownText()",
        "snippet": "    public String ownText() {\n        StringBuilder sb = new StringBuilder();\n        ownText(sb);\n        return sb.toString().trim();\n    }",
        "begin_line": 770,
        "end_line": 774,
        "comment": "\n     * Gets the text owned by this element only; does not get the combined text of all children.\n     * <p>\n     * For example, given HTML {@code <p>Hello <b>there</b> now!</p>}, {@code p.ownText()} returns {@code \"Hello now!\"},\n     * whereas {@code p.text()} returns {@code \"Hello there now!\"}.\n     * Note that the text within the {@code b} element is not returned, as it is not a direct child of the {@code p} element.\n     *\n     * @return unencoded text, or empty string if none.\n     * @see #text()\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.ownText(java.lang.StringBuilder)",
        "snippet": "    private void ownText(StringBuilder accum) {\n        for (Node child : childNodes) {\n            if (child instanceof TextNode) {\n                TextNode textNode = (TextNode) child;\n                appendNormalisedText(accum, textNode);\n            }\n        }\n    }",
        "begin_line": 776,
        "end_line": 783,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.appendNormalisedText(java.lang.StringBuilder, org.jsoup.nodes.TextNode)",
        "snippet": "    private void appendNormalisedText(StringBuilder accum, TextNode textNode) {\n        String text = textNode.getWholeText();\n\n        if (!preserveWhitespace()) {\n            text = TextNode.normaliseWhitespace(text);\n            if (TextNode.lastCharIsWhitespace(accum))\n                text = TextNode.stripLeadingWhitespace(text);\n        }\n        accum.append(text);\n    }",
        "begin_line": 785,
        "end_line": 794,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.preserveWhitespace()",
        "snippet": "    boolean preserveWhitespace() {\n        return tag.preserveWhitespace() || parent() != null && parent().preserveWhitespace();\n    }",
        "begin_line": 796,
        "end_line": 798,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.text(java.lang.String)",
        "snippet": "    public Element text(String text) {\n        Validate.notNull(text);\n\n        empty();\n        TextNode textNode = new TextNode(text, baseUri);\n        appendChild(textNode);\n\n        return this;\n    }",
        "begin_line": 805,
        "end_line": 813,
        "comment": "\n     * Set the text of this element. Any existing contents (text or elements) will be cleared\n     * @param text unencoded text\n     * @return this element\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.hasText()",
        "snippet": "    public boolean hasText() {\n        for (Node child: childNodes) {\n            if (child instanceof TextNode) {\n                TextNode textNode = (TextNode) child;\n                if (!textNode.isBlank())\n                    return true;\n            } else if (child instanceof Element) {\n                Element el = (Element) child;\n                if (el.hasText())\n                    return true;\n            }\n        }\n        return false;\n    }",
        "begin_line": 819,
        "end_line": 832,
        "comment": "\n     Test if this element has any text content (that is not just whitespace).\n     @return true if element has non-blank text content.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.data()",
        "snippet": "    public String data() {\n        StringBuilder sb = new StringBuilder();\n\n        for (Node childNode : childNodes) {\n            if (childNode instanceof DataNode) {\n                DataNode data = (DataNode) childNode;\n                sb.append(data.getWholeData());\n            } else if (childNode instanceof Element) {\n                Element element = (Element) childNode;\n                String elementData = element.data();\n                sb.append(elementData);\n            }\n        }\n        return sb.toString();\n    }   ",
        "begin_line": 838,
        "end_line": 852,
        "comment": "\n     * Get the combined data of this element. Data is e.g. the inside of a {@code script} tag.\n     * @return the data, or empty string if none\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.className()",
        "snippet": "    public String className() {\n        return attributes.hasKey(\"class\") ? attributes.get(\"class\") : \"\";\n    }",
        "begin_line": 859,
        "end_line": 861,
        "comment": "\n     * Gets the literal value of this element's \"class\" attribute, which may include multiple class names, space\n     * separated. (E.g. on <code>&lt;div class=\"header gray\"></code> returns, \"<code>header gray</code>\")\n     * @return The literal class attribute, or <b>empty string</b> if no class attribute set.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.classNames()",
        "snippet": "    public Set<String> classNames() {\n        if (classNames == null) {\n            String[] names = className().split(\"\\\\s+\");\n            classNames = new LinkedHashSet<String>(Arrays.asList(names));\n        }\n        return classNames;\n    }",
        "begin_line": 869,
        "end_line": 875,
        "comment": "\n     * Get all of the element's class names. E.g. on element {@code <div class=\"header gray\"}>},\n     * returns a set of two elements {@code \"header\", \"gray\"}. Note that modifications to this set are not pushed to\n     * the backing {@code class} attribute; use the {@link #classNames(java.util.Set)} method to persist them.\n     * @return set of classnames, empty if no class attribute\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.classNames(java.util.Set<java.lang.String>)",
        "snippet": "    public Element classNames(Set<String> classNames) {\n        Validate.notNull(classNames);\n        attributes.put(\"class\", StringUtil.join(classNames, \" \"));\n        return this;\n    }",
        "begin_line": 882,
        "end_line": 886,
        "comment": "\n     Set the element's {@code class} attribute to the supplied class names.\n     @param classNames set of classes\n     @return this element, for chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.hasClass(java.lang.String)",
        "snippet": "    public boolean hasClass(String className) {\n        return classNames().contains(className);\n    }",
        "begin_line": 893,
        "end_line": 895,
        "comment": "\n     * Tests if this element has a class.\n     * @param className name of class to check for\n     * @return true if it does, false if not\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.addClass(java.lang.String)",
        "snippet": "    public Element addClass(String className) {\n        Validate.notNull(className);\n\n        Set<String> classes = classNames();\n        classes.add(className);\n        classNames(classes);\n\n        return this;\n    }",
        "begin_line": 902,
        "end_line": 910,
        "comment": "\n     Add a class name to this element's {@code class} attribute.\n     @param className class name to add\n     @return this element\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.removeClass(java.lang.String)",
        "snippet": "    public Element removeClass(String className) {\n        Validate.notNull(className);\n\n        Set<String> classes = classNames();\n        classes.remove(className);\n        classNames(classes);\n\n        return this;\n    }",
        "begin_line": 917,
        "end_line": 925,
        "comment": "\n     Remove a class name from this element's {@code class} attribute.\n     @param className class name to remove\n     @return this element\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.toggleClass(java.lang.String)",
        "snippet": "    public Element toggleClass(String className) {\n        Validate.notNull(className);\n\n        Set<String> classes = classNames();\n        if (classes.contains(className))\n            classes.remove(className);\n        else\n            classes.add(className);\n        classNames(classes);\n\n        return this;\n    }",
        "begin_line": 932,
        "end_line": 943,
        "comment": "\n     Toggle a class name on this element's {@code class} attribute: if present, remove it; otherwise add it.\n     @param className class name to toggle\n     @return this element\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.val()",
        "snippet": "    public String val() {\n        if (tagName().equals(\"textarea\"))\n            return text();\n        else\n            return attr(\"value\");\n    }",
        "begin_line": 949,
        "end_line": 954,
        "comment": "\n     * Get the value of a form element (input, textarea, etc).\n     * @return the value of the form element, or empty string if not set.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.val(java.lang.String)",
        "snippet": "    public Element val(String value) {\n        if (tagName().equals(\"textarea\"))\n            text(value);\n        else\n            attr(\"value\", value);\n        return this;\n    }",
        "begin_line": 961,
        "end_line": 967,
        "comment": "\n     * Set the value of a form element (input, textarea, etc).\n     * @param value value to set\n     * @return this element (for chaining)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.outerHtmlHead(java.lang.StringBuilder, int, org.jsoup.nodes.Document.OutputSettings)",
        "snippet": "    void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n        if (out.prettyPrint() && (isBlock() || (parent() != null && parent().tag().canContainBlock() && siblingIndex() == 0)))\n            indent(accum, depth, out);\n        accum\n                .append(\"<\")\n                .append(tagName());\n        attributes.html(accum, out);\n\n        if (childNodes.isEmpty() && tag.isSelfClosing())\n            accum.append(\" />\");\n        else\n            accum.append(\">\");\n    }",
        "begin_line": 969,
        "end_line": 981,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.outerHtmlTail(java.lang.StringBuilder, int, org.jsoup.nodes.Document.OutputSettings)",
        "snippet": "    void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out) {\n        if (!(childNodes.isEmpty() && tag.isSelfClosing())) {\n            if (out.prettyPrint() && !childNodes.isEmpty() && tag.canContainBlock())\n                indent(accum, depth, out);\n            accum.append(\"</\").append(tagName()).append(\">\");\n        }\n    }",
        "begin_line": 983,
        "end_line": 989,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.html()",
        "snippet": "    public String html() {\n        StringBuilder accum = new StringBuilder();\n        html(accum); \n        return accum.toString().trim();\n    }",
        "begin_line": 998,
        "end_line": 1002,
        "comment": "\n     * Retrieves the element's inner HTML. E.g. on a {@code <div>} with one empty {@code <p>}, would return\n     * {@code <p></p>}. (Whereas {@link #outerHtml()} would return {@code <div><p></p></div>}.)\n     * \n     * @return String of HTML.\n     * @see #outerHtml()\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.html(java.lang.StringBuilder)",
        "snippet": "    private void html(StringBuilder accum) {\n        for (Node node : childNodes)\n            node.outerHtml(accum);\n    }",
        "begin_line": 1004,
        "end_line": 1007,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.html(java.lang.String)",
        "snippet": "    public Element html(String html) {\n        empty();\n        append(html);\n        return this;\n    }",
        "begin_line": 1015,
        "end_line": 1019,
        "comment": "\n     * Set this element's inner HTML. Clears the existing HTML first.\n     * @param html HTML to parse and set into this element\n     * @return this element\n     * @see #append(String)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.toString()",
        "snippet": "    public String toString() {\n        return outerHtml();\n    }",
        "begin_line": 1021,
        "end_line": 1023,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.equals(java.lang.Object)",
        "snippet": "    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof Element)) return false;\n        if (!super.equals(o)) return false;\n\n        Element element = (Element) o;\n\n        if (tag != null ? !tag.equals(element.tag) : element.tag != null) return false;\n\n        return true;\n    }",
        "begin_line": 1025,
        "end_line": 1036,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Element.java",
        "class_name": "org.jsoup.nodes.Element",
        "signature": "org.jsoup.nodes.Element.hashCode()",
        "snippet": "    @Override\n    public int hashCode() {\n        int result = super.hashCode();\n        result = 31 * result + (tag != null ? tag.hashCode() : 0);\n        return result;\n    }",
        "begin_line": 1038,
        "end_line": 1043,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Document.java",
        "class_name": "org.jsoup.nodes.Document",
        "signature": "org.jsoup.nodes.Document.Document(java.lang.String)",
        "snippet": "    public Document(String baseUri) {\n        super(Tag.valueOf(\"#root\"), baseUri);\n    }",
        "begin_line": 25,
        "end_line": 27,
        "comment": "\n     Create a new, empty Document.\n     @param baseUri base URI of document\n     @see org.jsoup.Jsoup#parse\n     @see #createShell\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Document.java",
        "class_name": "org.jsoup.nodes.Document",
        "signature": "org.jsoup.nodes.Document.createShell(java.lang.String)",
        "snippet": "    static public Document createShell(String baseUri) {\n        Validate.notNull(baseUri);\n\n        Document doc = new Document(baseUri);\n        Element html = doc.appendElement(\"html\");\n        html.appendElement(\"head\");\n        html.appendElement(\"body\");\n\n        return doc;\n    }",
        "begin_line": 34,
        "end_line": 43,
        "comment": "\n     Create a valid, empty shell of a document, suitable for adding more elements to.\n     @param baseUri baseUri of document\n     @return document with html, head, and body elements.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Document.java",
        "class_name": "org.jsoup.nodes.Document",
        "signature": "org.jsoup.nodes.Document.head()",
        "snippet": "    public Element head() {\n        return findFirstElementByTagName(\"head\", this);\n    }",
        "begin_line": 49,
        "end_line": 51,
        "comment": "\n     Accessor to the document's {@code head} element.\n     @return {@code head}\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Document.java",
        "class_name": "org.jsoup.nodes.Document",
        "signature": "org.jsoup.nodes.Document.body()",
        "snippet": "    public Element body() {\n        return findFirstElementByTagName(\"body\", this);\n    }",
        "begin_line": 57,
        "end_line": 59,
        "comment": "\n     Accessor to the document's {@code body} element.\n     @return {@code body}\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Document.java",
        "class_name": "org.jsoup.nodes.Document",
        "signature": "org.jsoup.nodes.Document.title()",
        "snippet": "    public String title() {\n        Element titleEl = getElementsByTag(\"title\").first();\n        return titleEl != null ? titleEl.text().trim() : \"\";\n    }",
        "begin_line": 65,
        "end_line": 68,
        "comment": "\n     Get the string contents of the document's {@code title} element.\n     @return Trimed title, or empty string if none set.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Document.java",
        "class_name": "org.jsoup.nodes.Document",
        "signature": "org.jsoup.nodes.Document.title(java.lang.String)",
        "snippet": "    public void title(String title) {\n        Validate.notNull(title);\n        Element titleEl = getElementsByTag(\"title\").first();\n        if (titleEl == null) { // add to head\n            head().appendElement(\"title\").text(title);\n        } else {\n            titleEl.text(title);\n        }\n    }",
        "begin_line": 75,
        "end_line": 83,
        "comment": "\n     Set the document's {@code title} element. Updates the existing element, or adds {@code title} to {@code head} if\n     not present\n     @param title string to set as title\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Document.java",
        "class_name": "org.jsoup.nodes.Document",
        "signature": "org.jsoup.nodes.Document.createElement(java.lang.String)",
        "snippet": "    public Element createElement(String tagName) {\n        return new Element(Tag.valueOf(tagName), this.baseUri());\n    }",
        "begin_line": 90,
        "end_line": 92,
        "comment": "\n     Create a new Element, with this document's base uri. Does not make the new element a child of this document.\n     @param tagName element tag name (e.g. {@code a})\n     @return new element\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Document.java",
        "class_name": "org.jsoup.nodes.Document",
        "signature": "org.jsoup.nodes.Document.normalise()",
        "snippet": "    public Document normalise() {\n        Element htmlEl = findFirstElementByTagName(\"html\", this);\n        if (htmlEl == null)\n            htmlEl = appendElement(\"html\");\n        if (head() == null)\n            htmlEl.prependElement(\"head\");\n        if (body() == null)\n            htmlEl.appendElement(\"body\");\n\n        // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care\n        // of. do in inverse order to maintain text order.\n        normaliseTextNodes(head());\n        normaliseTextNodes(htmlEl);\n        normaliseTextNodes(this);\n\n        normaliseStructure(\"head\", htmlEl);\n        normaliseStructure(\"body\", htmlEl);\n        \n        return this;\n    }",
        "begin_line": 99,
        "end_line": 118,
        "comment": "\n     Normalise the document. This happens after the parse phase so generally does not need to be called.\n     Moves any text content that is not in the body element into the body.\n     @return this document after normalisation\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Document.java",
        "class_name": "org.jsoup.nodes.Document",
        "signature": "org.jsoup.nodes.Document.normaliseTextNodes(org.jsoup.nodes.Element)",
        "snippet": "    private void normaliseTextNodes(Element element) {\n        List<Node> toMove = new ArrayList<Node>();\n        for (Node node: element.childNodes) {\n            if (node instanceof TextNode) {\n                TextNode tn = (TextNode) node;\n                if (!tn.isBlank())\n                    toMove.add(tn);\n            }\n        }\n\n        for (int i = toMove.size()-1; i >= 0; i--) {\n            Node node = toMove.get(i);\n            element.removeChild(node);\n            body().prependChild(new TextNode(\" \", \"\"));\n            body().prependChild(node);\n        }\n    }",
        "begin_line": 121,
        "end_line": 137,
        "comment": " does not recurse.",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Document.java",
        "class_name": "org.jsoup.nodes.Document",
        "signature": "org.jsoup.nodes.Document.normaliseStructure(java.lang.String, org.jsoup.nodes.Element)",
        "snippet": "    private void normaliseStructure(String tag, Element htmlEl) {\n        Elements elements = this.getElementsByTag(tag);\n        Element master = elements.first(); // will always be available as created above if not existent\n        if (elements.size() > 1) { // dupes, move contents to master\n            List<Node> toMove = new ArrayList<Node>();\n            for (int i = 1; i < elements.size(); i++) {\n                Node dupe = elements.get(i);\n                for (Node node : dupe.childNodes)\n                    toMove.add(node);\n                dupe.remove();\n            }\n\n            for (Node dupe : toMove)\n                master.appendChild(dupe);\n        }\n        // ensure parented by <html>\n        if (!master.parent().equals(htmlEl)) {\n            htmlEl.appendChild(master); // includes remove()            \n        }\n    }",
        "begin_line": 140,
        "end_line": 159,
        "comment": " merge multiple <head> or <body> contents into one, delete the remainder, and ensure they are owned by <html>",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Document.java",
        "class_name": "org.jsoup.nodes.Document",
        "signature": "org.jsoup.nodes.Document.findFirstElementByTagName(java.lang.String, org.jsoup.nodes.Node)",
        "snippet": "    private Element findFirstElementByTagName(String tag, Node node) {\n        if (node.nodeName().equals(tag))\n            return (Element) node;\n        else {\n            for (Node child: node.childNodes) {\n                Element found = findFirstElementByTagName(tag, child);\n                if (found != null)\n                    return found;\n            }\n        }\n        return null;\n    }",
        "begin_line": 162,
        "end_line": 173,
        "comment": " fast method to get first by tag name, used for html, head, body finders",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Document.java",
        "class_name": "org.jsoup.nodes.Document",
        "signature": "org.jsoup.nodes.Document.outerHtml()",
        "snippet": "    @Override\n    public String outerHtml() {\n        return super.html(); // no outer wrapper tag\n    }",
        "begin_line": 175,
        "end_line": 178,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Document.java",
        "class_name": "org.jsoup.nodes.Document",
        "signature": "org.jsoup.nodes.Document.text(java.lang.String)",
        "snippet": "    @Override\n    public Element text(String text) {\n        body().text(text); // overridden to not nuke doc structure\n        return this;\n    }",
        "begin_line": 185,
        "end_line": 189,
        "comment": "\n     Set the text of the {@code body} of this document. Any existing nodes within the body will be cleared.\n     @param text unencoded text\n     @return this document\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Document.java",
        "class_name": "org.jsoup.nodes.Document",
        "signature": "org.jsoup.nodes.Document.nodeName()",
        "snippet": "    @Override\n    public String nodeName() {\n        return \"#document\";\n    }",
        "begin_line": 191,
        "end_line": 194,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Document.java",
        "class_name": "org.jsoup.nodes.Document",
        "signature": "org.jsoup.nodes.Document.OutputSettings.OutputSettings()",
        "snippet": "        public OutputSettings() {}",
        "begin_line": 206,
        "end_line": 206,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Document.java",
        "class_name": "org.jsoup.nodes.Document",
        "signature": "org.jsoup.nodes.Document.OutputSettings.escapeMode()",
        "snippet": "        public Entities.EscapeMode escapeMode() {\n            return escapeMode;\n        }",
        "begin_line": 216,
        "end_line": 218,
        "comment": "\n         * Get the document's current HTML escape mode: <code>base</code>, which provides a limited set of named HTML\n         * entities and escapes other characters as numbered entities for maximum compatibility; or <code>extended</code>,\n         * which uses the complete set of HTML named entities.\n         * <p>\n         * The default escape mode is <code>base</code>.\n         * @return the document's current escape mode\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Document.java",
        "class_name": "org.jsoup.nodes.Document",
        "signature": "org.jsoup.nodes.Document.OutputSettings.escapeMode(org.jsoup.nodes.Entities.EscapeMode)",
        "snippet": "        public OutputSettings escapeMode(Entities.EscapeMode escapeMode) {\n            this.escapeMode = escapeMode;\n            return this;\n        }",
        "begin_line": 225,
        "end_line": 228,
        "comment": "\n         * Set the document's escape mode\n         * @param escapeMode the new escape mode to use\n         * @return the document's output settings, for chaining\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Document.java",
        "class_name": "org.jsoup.nodes.Document",
        "signature": "org.jsoup.nodes.Document.OutputSettings.charset()",
        "snippet": "        public Charset charset() {\n            return charset;\n        }",
        "begin_line": 238,
        "end_line": 240,
        "comment": "\n         * Get the document's current output charset, which is used to control which characters are escaped when\n         * generating HTML (via the <code>html()</code> methods), and which are kept intact.\n         * <p>\n         * Where possible (when parsing from a URL or File), the document's output charset is automatically set to the\n         * input charset. Otherwise, it defaults to UTF-8.\n         * @return the document's current charset.\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Document.java",
        "class_name": "org.jsoup.nodes.Document",
        "signature": "org.jsoup.nodes.Document.OutputSettings.charset(java.nio.charset.Charset)",
        "snippet": "        public OutputSettings charset(Charset charset) {\n            // todo: this should probably update the doc's meta charset\n            this.charset = charset;\n            charsetEncoder = charset.newEncoder();\n            return this;\n        }",
        "begin_line": 247,
        "end_line": 252,
        "comment": "\n         * Update the document's output charset.\n         * @param charset the new charset to use.\n         * @return the document's output settings, for chaining\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Document.java",
        "class_name": "org.jsoup.nodes.Document",
        "signature": "org.jsoup.nodes.Document.OutputSettings.charset(java.lang.String)",
        "snippet": "        public OutputSettings charset(String charset) {\n            charset(Charset.forName(charset));\n            return this;\n        }",
        "begin_line": 259,
        "end_line": 262,
        "comment": "\n         * Update the document's output charset.\n         * @param charset the new charset (by name) to use.\n         * @return the document's output settings, for chaining\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Document.java",
        "class_name": "org.jsoup.nodes.Document",
        "signature": "org.jsoup.nodes.Document.OutputSettings.encoder()",
        "snippet": "        CharsetEncoder encoder() {\n            return charsetEncoder;\n        }",
        "begin_line": 264,
        "end_line": 266,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Document.java",
        "class_name": "org.jsoup.nodes.Document",
        "signature": "org.jsoup.nodes.Document.OutputSettings.prettyPrint()",
        "snippet": "        public boolean prettyPrint() {\n            return prettyPrint;\n        }",
        "begin_line": 273,
        "end_line": 275,
        "comment": "\n         * Get if pretty printing is enabled. Default is true. If disabled, the HTML output methods will not re-format\n         * the output, and the output will generally look like the input.\n         * @return if pretty printing is enabled.\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Document.java",
        "class_name": "org.jsoup.nodes.Document",
        "signature": "org.jsoup.nodes.Document.OutputSettings.prettyPrint(boolean)",
        "snippet": "        public OutputSettings prettyPrint(boolean pretty) {\n            prettyPrint = pretty;\n            return this;\n        }",
        "begin_line": 282,
        "end_line": 285,
        "comment": "\n         * Enable or disable pretty printing.\n         * @param pretty new pretty print setting\n         * @return this, for chaining\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Document.java",
        "class_name": "org.jsoup.nodes.Document",
        "signature": "org.jsoup.nodes.Document.OutputSettings.indentAmount()",
        "snippet": "        public int indentAmount() {\n            return indentAmount;\n        }",
        "begin_line": 291,
        "end_line": 293,
        "comment": "\n         * Get the current tag indent amount, used when pretty printing.\n         * @return the current indent amount\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Document.java",
        "class_name": "org.jsoup.nodes.Document",
        "signature": "org.jsoup.nodes.Document.OutputSettings.indentAmount(int)",
        "snippet": "        public OutputSettings indentAmount(int indentAmount) {\n            Validate.isTrue(indentAmount >= 0);\n            this.indentAmount = indentAmount;\n            return this;\n        }",
        "begin_line": 300,
        "end_line": 304,
        "comment": "\n         * Set the indent amount for pretty printing\n         * @param indentAmount number of spaces to use for indenting each level. Must be >= 0.\n         * @return this, for chaining\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Document.java",
        "class_name": "org.jsoup.nodes.Document",
        "signature": "org.jsoup.nodes.Document.outputSettings()",
        "snippet": "    public OutputSettings outputSettings() {\n        return outputSettings;\n    }",
        "begin_line": 311,
        "end_line": 313,
        "comment": "\n     * Get the document's current output settings.\n     * @return the document's current output settings.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Evaluator.java",
        "class_name": "org.jsoup.nodes.Evaluator",
        "signature": "org.jsoup.nodes.Evaluator.Evaluator()",
        "snippet": "    private Evaluator() {}",
        "begin_line": 16,
        "end_line": 16,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Evaluator.java",
        "class_name": "org.jsoup.nodes.Evaluator",
        "signature": "org.jsoup.nodes.Evaluator.matches(org.jsoup.nodes.Element)",
        "snippet": "    public abstract boolean matches(Element element);",
        "begin_line": 21,
        "end_line": 21,
        "comment": "\n     * Test if the element meets the evaluator's requirements.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Evaluator.java",
        "class_name": "org.jsoup.nodes.Evaluator",
        "signature": "org.jsoup.nodes.Evaluator.Tag.Tag(java.lang.String)",
        "snippet": "        Tag (String tagName) {\n            this.tagName = tagName;\n        }",
        "begin_line": 25,
        "end_line": 27,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Evaluator.java",
        "class_name": "org.jsoup.nodes.Evaluator",
        "signature": "org.jsoup.nodes.Evaluator.Tag.matches(org.jsoup.nodes.Element)",
        "snippet": "        public boolean matches(Element element) {\n            return (element.tagName().equals(tagName));\n        }",
        "begin_line": 29,
        "end_line": 31,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Evaluator.java",
        "class_name": "org.jsoup.nodes.Evaluator",
        "signature": "org.jsoup.nodes.Evaluator.Id.Id(java.lang.String)",
        "snippet": "        Id (String id) {\n            this.id = id;\n        }",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Evaluator.java",
        "class_name": "org.jsoup.nodes.Evaluator",
        "signature": "org.jsoup.nodes.Evaluator.Id.matches(org.jsoup.nodes.Element)",
        "snippet": "        public boolean matches(Element element) {\n            return (id.equals(element.id()));\n        }",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Evaluator.java",
        "class_name": "org.jsoup.nodes.Evaluator",
        "signature": "org.jsoup.nodes.Evaluator.Class.Class(java.lang.String)",
        "snippet": "        Class(String className) {\n            this.className = className;\n        }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Evaluator.java",
        "class_name": "org.jsoup.nodes.Evaluator",
        "signature": "org.jsoup.nodes.Evaluator.Class.matches(org.jsoup.nodes.Element)",
        "snippet": "        public boolean matches(Element element) {\n            return (element.hasClass(className));\n        }",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Evaluator.java",
        "class_name": "org.jsoup.nodes.Evaluator",
        "signature": "org.jsoup.nodes.Evaluator.Attribute.Attribute(java.lang.String)",
        "snippet": "        Attribute (String key) {\n            this.key = key;\n        }",
        "begin_line": 59,
        "end_line": 61,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Evaluator.java",
        "class_name": "org.jsoup.nodes.Evaluator",
        "signature": "org.jsoup.nodes.Evaluator.Attribute.matches(org.jsoup.nodes.Element)",
        "snippet": "        public boolean matches(Element element) {\n            return element.hasAttr(key);\n        }",
        "begin_line": 63,
        "end_line": 65,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Evaluator.java",
        "class_name": "org.jsoup.nodes.Evaluator",
        "signature": "org.jsoup.nodes.Evaluator.AttributeStarting.AttributeStarting(java.lang.String)",
        "snippet": "        AttributeStarting (String keyPrefix) {\n            this.keyPrefix = keyPrefix;\n        }",
        "begin_line": 71,
        "end_line": 73,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Evaluator.java",
        "class_name": "org.jsoup.nodes.Evaluator",
        "signature": "org.jsoup.nodes.Evaluator.AttributeStarting.matches(org.jsoup.nodes.Element)",
        "snippet": "        public boolean matches(Element element) {\n            List<org.jsoup.nodes.Attribute> values = element.attributes.asList();\n            for (org.jsoup.nodes.Attribute attribute : values) {\n                if (attribute.getKey().startsWith(keyPrefix))\n                    return true;\n            }\n            return false;\n        }",
        "begin_line": 75,
        "end_line": 82,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Evaluator.java",
        "class_name": "org.jsoup.nodes.Evaluator",
        "signature": "org.jsoup.nodes.Evaluator.AttributeWithValue.AttributeWithValue(java.lang.String, java.lang.String)",
        "snippet": "        AttributeWithValue(String key, String value) {\n            super(key, value);\n        }",
        "begin_line": 86,
        "end_line": 88,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Evaluator.java",
        "class_name": "org.jsoup.nodes.Evaluator",
        "signature": "org.jsoup.nodes.Evaluator.AttributeWithValue.matches(org.jsoup.nodes.Element)",
        "snippet": "        public boolean matches(Element element) {\n            return element.hasAttr(key) && value.equalsIgnoreCase(element.attr(key));\n        }",
        "begin_line": 90,
        "end_line": 92,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Evaluator.java",
        "class_name": "org.jsoup.nodes.Evaluator",
        "signature": "org.jsoup.nodes.Evaluator.AttributeWithValueNot.AttributeWithValueNot(java.lang.String, java.lang.String)",
        "snippet": "        AttributeWithValueNot(String key, String value) {\n            super(key, value);\n        }",
        "begin_line": 96,
        "end_line": 98,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Evaluator.java",
        "class_name": "org.jsoup.nodes.Evaluator",
        "signature": "org.jsoup.nodes.Evaluator.AttributeWithValueNot.matches(org.jsoup.nodes.Element)",
        "snippet": "        public boolean matches(Element element) {\n            return !value.equalsIgnoreCase(element.attr(key));\n        }",
        "begin_line": 100,
        "end_line": 102,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Evaluator.java",
        "class_name": "org.jsoup.nodes.Evaluator",
        "signature": "org.jsoup.nodes.Evaluator.AttributeWithValueStarting.AttributeWithValueStarting(java.lang.String, java.lang.String)",
        "snippet": "        AttributeWithValueStarting(String key, String value) {\n            super(key, value);\n        }",
        "begin_line": 106,
        "end_line": 108,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Evaluator.java",
        "class_name": "org.jsoup.nodes.Evaluator",
        "signature": "org.jsoup.nodes.Evaluator.AttributeWithValueStarting.matches(org.jsoup.nodes.Element)",
        "snippet": "        public boolean matches(Element element) {\n            return element.hasAttr(key) && element.attr(key).toLowerCase().startsWith(value); // value is lower case already\n        }",
        "begin_line": 110,
        "end_line": 112,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Evaluator.java",
        "class_name": "org.jsoup.nodes.Evaluator",
        "signature": "org.jsoup.nodes.Evaluator.AttributeWithValueEnding.AttributeWithValueEnding(java.lang.String, java.lang.String)",
        "snippet": "        AttributeWithValueEnding(String key, String value) {\n            super(key, value);\n        }",
        "begin_line": 116,
        "end_line": 118,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Evaluator.java",
        "class_name": "org.jsoup.nodes.Evaluator",
        "signature": "org.jsoup.nodes.Evaluator.AttributeWithValueEnding.matches(org.jsoup.nodes.Element)",
        "snippet": "        public boolean matches(Element element) {\n            return element.hasAttr(key) && element.attr(key).toLowerCase().endsWith(value); // value is lower case\n        }",
        "begin_line": 120,
        "end_line": 122,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Evaluator.java",
        "class_name": "org.jsoup.nodes.Evaluator",
        "signature": "org.jsoup.nodes.Evaluator.AttributeWithValueContaining.AttributeWithValueContaining(java.lang.String, java.lang.String)",
        "snippet": "        AttributeWithValueContaining(String key, String value) {\n            super(key, value);\n        }",
        "begin_line": 126,
        "end_line": 128,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Evaluator.java",
        "class_name": "org.jsoup.nodes.Evaluator",
        "signature": "org.jsoup.nodes.Evaluator.AttributeWithValueContaining.matches(org.jsoup.nodes.Element)",
        "snippet": "        public boolean matches(Element element) {\n            return element.hasAttr(key) && element.attr(key).toLowerCase().contains(value); // value is lower case\n        }",
        "begin_line": 130,
        "end_line": 132,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Evaluator.java",
        "class_name": "org.jsoup.nodes.Evaluator",
        "signature": "org.jsoup.nodes.Evaluator.AttributeWithValueMatching.AttributeWithValueMatching(java.lang.String, java.util.regex.Pattern)",
        "snippet": "        AttributeWithValueMatching(String key, Pattern pattern) {\n            this.key = key.trim().toLowerCase();\n            this.pattern = pattern;\n        }",
        "begin_line": 139,
        "end_line": 142,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Evaluator.java",
        "class_name": "org.jsoup.nodes.Evaluator",
        "signature": "org.jsoup.nodes.Evaluator.AttributeWithValueMatching.matches(org.jsoup.nodes.Element)",
        "snippet": "        public boolean matches(Element element) {\n            return element.hasAttr(key) && pattern.matcher(element.attr(key)).find();\n        }",
        "begin_line": 144,
        "end_line": 146,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Evaluator.java",
        "class_name": "org.jsoup.nodes.Evaluator",
        "signature": "org.jsoup.nodes.Evaluator.AttributeKeyPair.AttributeKeyPair(java.lang.String, java.lang.String)",
        "snippet": "        AttributeKeyPair(String key, String value) {\n            Validate.notEmpty(key);\n            Validate.notEmpty(value);\n            \n            this.key = key.trim().toLowerCase();\n            this.value = value.trim().toLowerCase();\n        }",
        "begin_line": 153,
        "end_line": 159,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Evaluator.java",
        "class_name": "org.jsoup.nodes.Evaluator",
        "signature": "org.jsoup.nodes.Evaluator.AllElements.matches(org.jsoup.nodes.Element)",
        "snippet": "        public boolean matches(Element element) {\n            return true;\n        }",
        "begin_line": 163,
        "end_line": 165,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Evaluator.java",
        "class_name": "org.jsoup.nodes.Evaluator",
        "signature": "org.jsoup.nodes.Evaluator.IndexLessThan.IndexLessThan(int)",
        "snippet": "        IndexLessThan(int index) {\n            super(index);\n        }",
        "begin_line": 169,
        "end_line": 171,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Evaluator.java",
        "class_name": "org.jsoup.nodes.Evaluator",
        "signature": "org.jsoup.nodes.Evaluator.IndexLessThan.matches(org.jsoup.nodes.Element)",
        "snippet": "        public boolean matches(Element element) {\n            return element.elementSiblingIndex() < index;\n        }",
        "begin_line": 173,
        "end_line": 175,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Evaluator.java",
        "class_name": "org.jsoup.nodes.Evaluator",
        "signature": "org.jsoup.nodes.Evaluator.IndexGreaterThan.IndexGreaterThan(int)",
        "snippet": "        IndexGreaterThan(int index) {\n            super(index);\n        }",
        "begin_line": 179,
        "end_line": 181,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Evaluator.java",
        "class_name": "org.jsoup.nodes.Evaluator",
        "signature": "org.jsoup.nodes.Evaluator.IndexGreaterThan.matches(org.jsoup.nodes.Element)",
        "snippet": "        public boolean matches(Element element) {\n            return element.elementSiblingIndex() > index;\n        }",
        "begin_line": 183,
        "end_line": 185,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Evaluator.java",
        "class_name": "org.jsoup.nodes.Evaluator",
        "signature": "org.jsoup.nodes.Evaluator.IndexEquals.IndexEquals(int)",
        "snippet": "        IndexEquals(int index) {\n            super(index);\n        }",
        "begin_line": 189,
        "end_line": 191,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Evaluator.java",
        "class_name": "org.jsoup.nodes.Evaluator",
        "signature": "org.jsoup.nodes.Evaluator.IndexEquals.matches(org.jsoup.nodes.Element)",
        "snippet": "        public boolean matches(Element element) {\n            return element.elementSiblingIndex() == index;\n        }",
        "begin_line": 193,
        "end_line": 195,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Evaluator.java",
        "class_name": "org.jsoup.nodes.Evaluator",
        "signature": "org.jsoup.nodes.Evaluator.IndexEvaluator.IndexEvaluator(int)",
        "snippet": "        IndexEvaluator(int index) {\n            this.index = index;\n        }",
        "begin_line": 201,
        "end_line": 203,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Evaluator.java",
        "class_name": "org.jsoup.nodes.Evaluator",
        "signature": "org.jsoup.nodes.Evaluator.ContainsText.ContainsText(java.lang.String)",
        "snippet": "        ContainsText(String searchText) {\n            this.searchText = searchText.toLowerCase();\n        }",
        "begin_line": 208,
        "end_line": 210,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Evaluator.java",
        "class_name": "org.jsoup.nodes.Evaluator",
        "signature": "org.jsoup.nodes.Evaluator.ContainsText.matches(org.jsoup.nodes.Element)",
        "snippet": "        public boolean matches(Element element) {\n            return (element.text().toLowerCase().contains(searchText));\n        }",
        "begin_line": 212,
        "end_line": 214,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Evaluator.java",
        "class_name": "org.jsoup.nodes.Evaluator",
        "signature": "org.jsoup.nodes.Evaluator.ContainsOwnText.ContainsOwnText(java.lang.String)",
        "snippet": "        ContainsOwnText(String searchText) {\n            this.searchText = searchText.toLowerCase();\n        }",
        "begin_line": 219,
        "end_line": 221,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Evaluator.java",
        "class_name": "org.jsoup.nodes.Evaluator",
        "signature": "org.jsoup.nodes.Evaluator.ContainsOwnText.matches(org.jsoup.nodes.Element)",
        "snippet": "        public boolean matches(Element element) {\n            return (element.ownText().toLowerCase().contains(searchText));\n        }",
        "begin_line": 223,
        "end_line": 225,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Evaluator.java",
        "class_name": "org.jsoup.nodes.Evaluator",
        "signature": "org.jsoup.nodes.Evaluator.Matches.Matches(java.util.regex.Pattern)",
        "snippet": "        Matches(Pattern pattern) {\n            this.pattern = pattern;\n        }",
        "begin_line": 230,
        "end_line": 232,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Evaluator.java",
        "class_name": "org.jsoup.nodes.Evaluator",
        "signature": "org.jsoup.nodes.Evaluator.Matches.matches(org.jsoup.nodes.Element)",
        "snippet": "        public boolean matches(Element element) {\n            Matcher m = pattern.matcher(element.text());\n            return m.find();\n        }",
        "begin_line": 234,
        "end_line": 237,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Evaluator.java",
        "class_name": "org.jsoup.nodes.Evaluator",
        "signature": "org.jsoup.nodes.Evaluator.MatchesOwn.MatchesOwn(java.util.regex.Pattern)",
        "snippet": "        MatchesOwn(Pattern pattern) {\n            this.pattern = pattern;\n        }",
        "begin_line": 242,
        "end_line": 244,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Evaluator.java",
        "class_name": "org.jsoup.nodes.Evaluator",
        "signature": "org.jsoup.nodes.Evaluator.MatchesOwn.matches(org.jsoup.nodes.Element)",
        "snippet": "        public boolean matches(Element element) {\n            Matcher m = pattern.matcher(element.ownText());\n            return m.find();\n        }",
        "begin_line": 246,
        "end_line": 249,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Node.java",
        "class_name": "org.jsoup.nodes.Node",
        "signature": "org.jsoup.nodes.Node.Node(java.lang.String, org.jsoup.nodes.Attributes)",
        "snippet": "    protected Node(String baseUri, Attributes attributes) {\n        Validate.notNull(baseUri);\n        Validate.notNull(attributes);\n        \n        childNodes = new ArrayList<Node>(4);\n        this.baseUri = baseUri.trim();\n        this.attributes = attributes;\n    }",
        "begin_line": 30,
        "end_line": 37,
        "comment": "\n     Create a new Node.\n     @param baseUri base URI\n     @param attributes attributes (not null, but may be empty)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Node.java",
        "class_name": "org.jsoup.nodes.Node",
        "signature": "org.jsoup.nodes.Node.Node(java.lang.String)",
        "snippet": "    protected Node(String baseUri) {\n        this(baseUri, new Attributes());\n    }",
        "begin_line": 39,
        "end_line": 41,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Node.java",
        "class_name": "org.jsoup.nodes.Node",
        "signature": "org.jsoup.nodes.Node.Node()",
        "snippet": "    protected Node() {\n        childNodes = Collections.EMPTY_LIST;\n        attributes = null;\n    }",
        "begin_line": 46,
        "end_line": 49,
        "comment": "\n     * Default constructor. Doesn't setup base uri, children, or attributes; use with caution.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Node.java",
        "class_name": "org.jsoup.nodes.Node",
        "signature": "org.jsoup.nodes.Node.nodeName()",
        "snippet": "    public abstract String nodeName();",
        "begin_line": 55,
        "end_line": 55,
        "comment": "\n     Get the node name of this node. Use for debugging purposes and not logic switching (for that, use instanceof).\n     @return node name\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Node.java",
        "class_name": "org.jsoup.nodes.Node",
        "signature": "org.jsoup.nodes.Node.attr(java.lang.String)",
        "snippet": "    public String attr(String attributeKey) {\n        Validate.notNull(attributeKey);\n\n        if (hasAttr(attributeKey))\n            return attributes.get(attributeKey);\n        else if (attributeKey.toLowerCase().startsWith(\"abs:\"))\n            return absUrl(attributeKey.substring(\"abs:\".length()));\n        else return \"\";\n    }",
        "begin_line": 69,
        "end_line": 77,
        "comment": "\n     * Get an attribute's value by its key.\n     * <p/>\n     * To get an absolute URL from an attribute that may be a relative URL, prefix the key with <code><b>abs</b></code>,\n     * which is a shortcut to the {@link #absUrl} method.\n     * E.g.: <blockquote><code>String url = a.attr(\"abs:href\");</code></blockquote>\n     * @param attributeKey The attribute key.\n     * @return The attribute, or empty string if not present (to avoid nulls).\n     * @see #attributes()\n     * @see #hasAttr(String)\n     * @see #absUrl(String)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Node.java",
        "class_name": "org.jsoup.nodes.Node",
        "signature": "org.jsoup.nodes.Node.attributes()",
        "snippet": "    public Attributes attributes() {\n        return attributes;\n    }",
        "begin_line": 83,
        "end_line": 85,
        "comment": "\n     * Get all of the element's attributes.\n     * @return attributes (which implements iterable, in same order as presented in original HTML).\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Node.java",
        "class_name": "org.jsoup.nodes.Node",
        "signature": "org.jsoup.nodes.Node.attr(java.lang.String, java.lang.String)",
        "snippet": "    public Node attr(String attributeKey, String attributeValue) {\n        attributes.put(attributeKey, attributeValue);\n        return this;\n    }",
        "begin_line": 93,
        "end_line": 96,
        "comment": "\n     * Set an attribute (key=value). If the attribute already exists, it is replaced.\n     * @param attributeKey The attribute key.\n     * @param attributeValue The attribute value.\n     * @return this (for chaining)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Node.java",
        "class_name": "org.jsoup.nodes.Node",
        "signature": "org.jsoup.nodes.Node.hasAttr(java.lang.String)",
        "snippet": "    public boolean hasAttr(String attributeKey) {\n        Validate.notNull(attributeKey);\n        return attributes.hasKey(attributeKey);\n    }",
        "begin_line": 103,
        "end_line": 106,
        "comment": "\n     * Test if this element has an attribute.\n     * @param attributeKey The attribute key to check.\n     * @return true if the attribute exists, false if not.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Node.java",
        "class_name": "org.jsoup.nodes.Node",
        "signature": "org.jsoup.nodes.Node.removeAttr(java.lang.String)",
        "snippet": "    public Node removeAttr(String attributeKey) {\n        Validate.notNull(attributeKey);\n        attributes.remove(attributeKey);\n        return this;\n    }",
        "begin_line": 113,
        "end_line": 117,
        "comment": "\n     * Remove an attribute from this element.\n     * @param attributeKey The attribute to remove.\n     * @return this (for chaining)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Node.java",
        "class_name": "org.jsoup.nodes.Node",
        "signature": "org.jsoup.nodes.Node.baseUri()",
        "snippet": "    public String baseUri() {\n        return baseUri;\n    }",
        "begin_line": 123,
        "end_line": 125,
        "comment": "\n     Get the base URI of this node.\n     @return base URI\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Node.java",
        "class_name": "org.jsoup.nodes.Node",
        "signature": "org.jsoup.nodes.Node.setBaseUri(java.lang.String)",
        "snippet": "    public void setBaseUri(String baseUri) {\n        Validate.notNull(baseUri);\n        this.baseUri = baseUri;\n    }",
        "begin_line": 131,
        "end_line": 134,
        "comment": "\n     Update the base URI of this node.\n     @param baseUri base URI to set\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Node.java",
        "class_name": "org.jsoup.nodes.Node",
        "signature": "org.jsoup.nodes.Node.absUrl(java.lang.String)",
        "snippet": "    public String absUrl(String attributeKey) {\n        Validate.notEmpty(attributeKey);\n\n        String relUrl = attr(attributeKey);\n        if (!hasAttr(attributeKey)) {\n            return \"\"; // nothing to make absolute with\n        } else {\n            URL base;\n            try {\n                try {\n                    base = new URL(baseUri);\n                } catch (MalformedURLException e) {\n                    // the base is unsuitable, but the attribute may be abs on its own, so try that\n                    URL abs = new URL(relUrl);\n                    return abs.toExternalForm();\n                }\n                URL abs = new URL(base, relUrl);\n                return abs.toExternalForm();\n            } catch (MalformedURLException e) {\n                return \"\";\n            }\n        }\n    }",
        "begin_line": 156,
        "end_line": 178,
        "comment": "\n     * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or\n     * <code>&lt;img src></code>).\n     * <p/>\n     * E.g.: <code>String absUrl = linkEl.absUrl(\"href\");</code>\n     * <p/>\n     * If the attribute value is already absolute (i.e. it starts with a protocol, like\n     * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is\n     * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made\n     * absolute using that.\n     * <p/>\n     * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:\n     * <code>String absUrl = linkEl.attr(\"abs:href\");</code>\n     *\n     * @param attributeKey The attribute key\n     * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or\n     * could not be made successfully into a URL.\n     * @see #attr\n     * @see java.net.URL#URL(java.net.URL, String)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Node.java",
        "class_name": "org.jsoup.nodes.Node",
        "signature": "org.jsoup.nodes.Node.childNode(int)",
        "snippet": "    public Node childNode(int index) {\n        return childNodes.get(index);\n    }",
        "begin_line": 185,
        "end_line": 187,
        "comment": "\n     Get a child node by index\n     @param index index of child node\n     @return the child node at this index.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Node.java",
        "class_name": "org.jsoup.nodes.Node",
        "signature": "org.jsoup.nodes.Node.childNodes()",
        "snippet": "    public List<Node> childNodes() {\n        return Collections.unmodifiableList(childNodes);\n    }",
        "begin_line": 194,
        "end_line": 196,
        "comment": "\n     Get this node's children. Presented as an unmodifiable list: new children can not be added, but the child nodes\n     themselves can be manipulated.\n     @return list of children. If no children, returns an empty list.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Node.java",
        "class_name": "org.jsoup.nodes.Node",
        "signature": "org.jsoup.nodes.Node.childNodesAsArray()",
        "snippet": "    protected Node[] childNodesAsArray() {\n        return childNodes.toArray(new Node[childNodes().size()]);\n    }",
        "begin_line": 198,
        "end_line": 200,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Node.java",
        "class_name": "org.jsoup.nodes.Node",
        "signature": "org.jsoup.nodes.Node.parent()",
        "snippet": "    public Node parent() {\n        return parentNode;\n    }",
        "begin_line": 206,
        "end_line": 208,
        "comment": "\n     Gets this node's parent node.\n     @return parent node; or null if no parent.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Node.java",
        "class_name": "org.jsoup.nodes.Node",
        "signature": "org.jsoup.nodes.Node.ownerDocument()",
        "snippet": "    public Document ownerDocument() {\n        if (this instanceof Document)\n            return (Document) this;\n        else if (parentNode == null)\n            return null;\n        else\n            return parentNode.ownerDocument();\n    }",
        "begin_line": 214,
        "end_line": 221,
        "comment": "\n     * Gets the Document associated with this Node. \n     * @return the Document associated with this Node, or null if there is no such Document.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Node.java",
        "class_name": "org.jsoup.nodes.Node",
        "signature": "org.jsoup.nodes.Node.remove()",
        "snippet": "    public void remove() {\n        Validate.notNull(parentNode);\n        parentNode.removeChild(this);\n    }",
        "begin_line": 226,
        "end_line": 229,
        "comment": "\n     * Remove (delete) this node from the DOM tree. If this node has children, they are also removed.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Node.java",
        "class_name": "org.jsoup.nodes.Node",
        "signature": "org.jsoup.nodes.Node.replaceWith(org.jsoup.nodes.Node)",
        "snippet": "    public void replaceWith(Node in) {\n        Validate.notNull(in);\n        Validate.notNull(parentNode);\n        parentNode.replaceChild(this, in);\n    }",
        "begin_line": 235,
        "end_line": 239,
        "comment": "\n     * Replace this node in the DOM with the supplied node.\n     * @param in the node that will will replace the existing node.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Node.java",
        "class_name": "org.jsoup.nodes.Node",
        "signature": "org.jsoup.nodes.Node.setParentNode(org.jsoup.nodes.Node)",
        "snippet": "    protected void setParentNode(Node parentNode) {\n        if (this.parentNode != null)\n            this.parentNode.removeChild(this);\n        this.parentNode = parentNode;\n    }",
        "begin_line": 241,
        "end_line": 245,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Node.java",
        "class_name": "org.jsoup.nodes.Node",
        "signature": "org.jsoup.nodes.Node.replaceChild(org.jsoup.nodes.Node, org.jsoup.nodes.Node)",
        "snippet": "    protected void replaceChild(Node out, Node in) {\n        Validate.isTrue(out.parentNode == this);\n        Validate.notNull(in);\n        if (in.parentNode != null)\n            in.parentNode.removeChild(in);\n        \n        Integer index = out.siblingIndex();\n        childNodes.set(index, in);\n        in.parentNode = this;\n        in.setSiblingIndex(index);\n        out.parentNode = null;\n    }",
        "begin_line": 247,
        "end_line": 258,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Node.java",
        "class_name": "org.jsoup.nodes.Node",
        "signature": "org.jsoup.nodes.Node.removeChild(org.jsoup.nodes.Node)",
        "snippet": "    protected void removeChild(Node out) {\n        Validate.isTrue(out.parentNode == this);\n        int index = out.siblingIndex();\n        childNodes.remove(index);\n        reindexChildren();\n        out.parentNode = null;\n    }",
        "begin_line": 260,
        "end_line": 266,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Node.java",
        "class_name": "org.jsoup.nodes.Node",
        "signature": "org.jsoup.nodes.Node.addChildren(org.jsoup.nodes.Node...)",
        "snippet": "    protected void addChildren(Node... children) {\n        //most used. short circuit addChildren(int), which hits reindex children and array copy\n        for (Node child: children) {\n            reparentChild(child);\n            childNodes.add(child);\n            child.setSiblingIndex(childNodes.size()-1);\n        }\n    }",
        "begin_line": 268,
        "end_line": 275,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Node.java",
        "class_name": "org.jsoup.nodes.Node",
        "signature": "org.jsoup.nodes.Node.addChildren(int, org.jsoup.nodes.Node...)",
        "snippet": "    protected void addChildren(int index, Node... children) {\n        Validate.noNullElements(children);\n        for (int i = children.length - 1; i >= 0; i--) {\n            Node in = children[i];\n            reparentChild(in);\n            childNodes.add(index, in);\n        }\n        reindexChildren();\n    }",
        "begin_line": 277,
        "end_line": 285,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Node.java",
        "class_name": "org.jsoup.nodes.Node",
        "signature": "org.jsoup.nodes.Node.reparentChild(org.jsoup.nodes.Node)",
        "snippet": "    private void reparentChild(Node child) {\n        if (child.parentNode != null)\n            child.parentNode.removeChild(child);\n        child.setParentNode(this);\n    }",
        "begin_line": 287,
        "end_line": 291,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Node.java",
        "class_name": "org.jsoup.nodes.Node",
        "signature": "org.jsoup.nodes.Node.reindexChildren()",
        "snippet": "    private void reindexChildren() {\n        for (int i = 0; i < childNodes.size(); i++) {\n            childNodes.get(i).setSiblingIndex(i);\n        }\n    }",
        "begin_line": 293,
        "end_line": 297,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Node.java",
        "class_name": "org.jsoup.nodes.Node",
        "signature": "org.jsoup.nodes.Node.siblingNodes()",
        "snippet": "    public List<Node> siblingNodes() {\n        return parent().childNodes(); // TODO: should this strip out this node? i.e. not a sibling of self?\n    }",
        "begin_line": 303,
        "end_line": 305,
        "comment": "\n     Retrieves this node's sibling nodes. Effectively, {@link #childNodes()  node.parent.childNodes()}.\n     @return node siblings, including this node\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Node.java",
        "class_name": "org.jsoup.nodes.Node",
        "signature": "org.jsoup.nodes.Node.nextSibling()",
        "snippet": "    public Node nextSibling() {\n        if (parentNode == null)\n            return null; // root\n        \n        List<Node> siblings = parentNode.childNodes;\n        Integer index = siblingIndex();\n        Validate.notNull(index);\n        if (siblings.size() > index+1)\n            return siblings.get(index+1);\n        else\n            return null;\n    }",
        "begin_line": 311,
        "end_line": 322,
        "comment": "\n     Get this node's next sibling.\n     @return next sibling, or null if this is the last sibling\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Node.java",
        "class_name": "org.jsoup.nodes.Node",
        "signature": "org.jsoup.nodes.Node.previousSibling()",
        "snippet": "    public Node previousSibling() {\n        List<Node> siblings = parentNode.childNodes;\n        Integer index = siblingIndex();\n        Validate.notNull(index);\n        if (index > 0)\n            return siblings.get(index-1);\n        else\n            return null;\n    }",
        "begin_line": 328,
        "end_line": 336,
        "comment": "\n     Get this node's previous sibling.\n     @return the previous sibling, or null if this is the first sibling\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Node.java",
        "class_name": "org.jsoup.nodes.Node",
        "signature": "org.jsoup.nodes.Node.siblingIndex()",
        "snippet": "    public Integer siblingIndex() {\n        return siblingIndex;\n    }",
        "begin_line": 344,
        "end_line": 346,
        "comment": "\n     * Get the list index of this node in its node sibling list. I.e. if this is the first node\n     * sibling, returns 0.\n     * @return position in node sibling list\n     * @see org.jsoup.nodes.Element#elementSiblingIndex()\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Node.java",
        "class_name": "org.jsoup.nodes.Node",
        "signature": "org.jsoup.nodes.Node.setSiblingIndex(int)",
        "snippet": "    protected void setSiblingIndex(int siblingIndex) {\n        this.siblingIndex = siblingIndex;\n    }",
        "begin_line": 348,
        "end_line": 350,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Node.java",
        "class_name": "org.jsoup.nodes.Node",
        "signature": "org.jsoup.nodes.Node.outerHtml()",
        "snippet": "    public String outerHtml() {\n        StringBuilder accum = new StringBuilder(32*1024);\n        outerHtml(accum);\n        return accum.toString();\n    }",
        "begin_line": 356,
        "end_line": 360,
        "comment": "\n     Get the outer HTML of this node.\n     @return HTML\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Node.java",
        "class_name": "org.jsoup.nodes.Node",
        "signature": "org.jsoup.nodes.Node.outerHtml(java.lang.StringBuilder)",
        "snippet": "    protected void outerHtml(StringBuilder accum) {\n        new NodeTraversor(new OuterHtmlVisitor(accum, ownerDocument().outputSettings())).traverse(this);\n    }",
        "begin_line": 362,
        "end_line": 364,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Node.java",
        "class_name": "org.jsoup.nodes.Node",
        "signature": "org.jsoup.nodes.Node.outerHtmlHead(java.lang.StringBuilder, int, org.jsoup.nodes.Document.OutputSettings)",
        "snippet": "    abstract void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out);",
        "begin_line": 372,
        "end_line": 372,
        "comment": "\n     Get the outer HTML of this node.\n     @param accum accumulator to place HTML into\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Node.java",
        "class_name": "org.jsoup.nodes.Node",
        "signature": "org.jsoup.nodes.Node.outerHtmlTail(java.lang.StringBuilder, int, org.jsoup.nodes.Document.OutputSettings)",
        "snippet": "    abstract void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out);",
        "begin_line": 374,
        "end_line": 374,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Node.java",
        "class_name": "org.jsoup.nodes.Node",
        "signature": "org.jsoup.nodes.Node.toString()",
        "snippet": "    public String toString() {\n        return outerHtml();\n    }",
        "begin_line": 376,
        "end_line": 378,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Node.java",
        "class_name": "org.jsoup.nodes.Node",
        "signature": "org.jsoup.nodes.Node.indent(java.lang.StringBuilder, int, org.jsoup.nodes.Document.OutputSettings)",
        "snippet": "    protected void indent(StringBuilder accum, int depth, Document.OutputSettings out) {\n        accum.append(\"\\n\").append(StringUtil.padding(depth * out.indentAmount()));\n    }",
        "begin_line": 380,
        "end_line": 382,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Node.java",
        "class_name": "org.jsoup.nodes.Node",
        "signature": "org.jsoup.nodes.Node.equals(java.lang.Object)",
        "snippet": "    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        // todo: have nodes hold a child index, compare against that and parent (not children)\n        return false;\n    }",
        "begin_line": 384,
        "end_line": 389,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Node.java",
        "class_name": "org.jsoup.nodes.Node",
        "signature": "org.jsoup.nodes.Node.hashCode()",
        "snippet": "    @Override\n    public int hashCode() {\n        int result = parentNode != null ? parentNode.hashCode() : 0;\n        // not children, or will block stack as they go back up to parent)\n        result = 31 * result + (attributes != null ? attributes.hashCode() : 0);\n        return result;\n    }",
        "begin_line": 391,
        "end_line": 397,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Node.java",
        "class_name": "org.jsoup.nodes.Node",
        "signature": "org.jsoup.nodes.Node.OuterHtmlVisitor.OuterHtmlVisitor(java.lang.StringBuilder, org.jsoup.nodes.Document.OutputSettings)",
        "snippet": "        OuterHtmlVisitor(StringBuilder accum, Document.OutputSettings out) {\n            this.accum = accum;\n            this.out = out;\n        }",
        "begin_line": 403,
        "end_line": 406,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Node.java",
        "class_name": "org.jsoup.nodes.Node",
        "signature": "org.jsoup.nodes.Node.OuterHtmlVisitor.head(org.jsoup.nodes.Node, int)",
        "snippet": "        public void head(Node node, int depth) {\n            node.outerHtmlHead(accum, depth, out);\n        }",
        "begin_line": 408,
        "end_line": 410,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/Node.java",
        "class_name": "org.jsoup.nodes.Node",
        "signature": "org.jsoup.nodes.Node.OuterHtmlVisitor.tail(org.jsoup.nodes.Node, int)",
        "snippet": "        public void tail(Node node, int depth) {\n            if (!node.nodeName().equals(\"#text\")) // saves a void hit.\n                node.outerHtmlTail(accum, depth, out);\n        }",
        "begin_line": 412,
        "end_line": 415,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/TextNode.java",
        "class_name": "org.jsoup.nodes.TextNode",
        "signature": "org.jsoup.nodes.TextNode.TextNode(java.lang.String, java.lang.String)",
        "snippet": "    public TextNode(String text, String baseUri) {\n        this.baseUri = baseUri;\n        this.text = text;\n    }",
        "begin_line": 25,
        "end_line": 28,
        "comment": "\n     Create a new TextNode representing the supplied (unencoded) text).\n\n     @param text raw text\n     @param baseUri base uri\n     @see #createFromEncoded(String, String)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/TextNode.java",
        "class_name": "org.jsoup.nodes.TextNode",
        "signature": "org.jsoup.nodes.TextNode.nodeName()",
        "snippet": "    public String nodeName() {\n        return \"#text\";\n    }",
        "begin_line": 30,
        "end_line": 32,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/TextNode.java",
        "class_name": "org.jsoup.nodes.TextNode",
        "signature": "org.jsoup.nodes.TextNode.text()",
        "snippet": "    public String text() {\n        return normaliseWhitespace(getWholeText());\n    }",
        "begin_line": 39,
        "end_line": 41,
        "comment": "\n     * Get the text content of this text node.\n     * @return Unencoded, normalised text.\n     * @see TextNode#getWholeText()\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/TextNode.java",
        "class_name": "org.jsoup.nodes.TextNode",
        "signature": "org.jsoup.nodes.TextNode.text(java.lang.String)",
        "snippet": "    public TextNode text(String text) {\n        this.text = text;\n        if (attributes != null)\n            attributes.put(TEXT_KEY, text);\n        return this;\n    }",
        "begin_line": 48,
        "end_line": 53,
        "comment": "\n     * Set the text content of this text node.\n     * @param text unencoded text\n     * @return this, for chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/TextNode.java",
        "class_name": "org.jsoup.nodes.TextNode",
        "signature": "org.jsoup.nodes.TextNode.getWholeText()",
        "snippet": "    public String getWholeText() {\n        return attributes == null ? text : attributes.get(TEXT_KEY);\n    }",
        "begin_line": 59,
        "end_line": 61,
        "comment": "\n     Get the (unencoded) text of this text node, including any newlines and spaces present in the original.\n     @return text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/TextNode.java",
        "class_name": "org.jsoup.nodes.TextNode",
        "signature": "org.jsoup.nodes.TextNode.isBlank()",
        "snippet": "    public boolean isBlank() {\n        return StringUtil.isBlank(getWholeText());\n    }",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\n     Test if this text node is blank -- that is, empty or only whitespace (including newlines).\n     @return true if this document is empty or only whitespace, false if it contains any text content.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/TextNode.java",
        "class_name": "org.jsoup.nodes.TextNode",
        "signature": "org.jsoup.nodes.TextNode.outerHtmlHead(java.lang.StringBuilder, int, org.jsoup.nodes.Document.OutputSettings)",
        "snippet": "    void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n        String html = Entities.escape(getWholeText(), out);\n        if (out.prettyPrint() && parent() instanceof Element && !((Element) parent()).preserveWhitespace()) {\n            html = normaliseWhitespace(html);\n        }\n\n        if (out.prettyPrint() && siblingIndex() == 0 && parentNode instanceof Element && ((Element) parentNode).tag().canContainBlock() && !isBlank())\n            indent(accum, depth, out);\n        accum.append(html);\n    }",
        "begin_line": 72,
        "end_line": 81,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/TextNode.java",
        "class_name": "org.jsoup.nodes.TextNode",
        "signature": "org.jsoup.nodes.TextNode.outerHtmlTail(java.lang.StringBuilder, int, org.jsoup.nodes.Document.OutputSettings)",
        "snippet": "    void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out) {}",
        "begin_line": 83,
        "end_line": 83,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/TextNode.java",
        "class_name": "org.jsoup.nodes.TextNode",
        "signature": "org.jsoup.nodes.TextNode.toString()",
        "snippet": "    public String toString() {\n        return outerHtml();\n    }",
        "begin_line": 85,
        "end_line": 87,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/TextNode.java",
        "class_name": "org.jsoup.nodes.TextNode",
        "signature": "org.jsoup.nodes.TextNode.createFromEncoded(java.lang.String, java.lang.String)",
        "snippet": "    public static TextNode createFromEncoded(String encodedText, String baseUri) {\n        String text = Entities.unescape(encodedText);\n        return new TextNode(text, baseUri);\n    }",
        "begin_line": 94,
        "end_line": 97,
        "comment": "\n     * Create a new TextNode from HTML encoded (aka escaped) data.\n     * @param encodedText Text containing encoded HTML (e.g. &amp;lt;)\n     * @return TextNode containing unencoded data (e.g. &lt;)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/TextNode.java",
        "class_name": "org.jsoup.nodes.TextNode",
        "signature": "org.jsoup.nodes.TextNode.normaliseWhitespace(java.lang.String)",
        "snippet": "    static String normaliseWhitespace(String text) {\n        text = StringUtil.normaliseWhitespace(text);\n        return text;\n    }",
        "begin_line": 99,
        "end_line": 102,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/TextNode.java",
        "class_name": "org.jsoup.nodes.TextNode",
        "signature": "org.jsoup.nodes.TextNode.stripLeadingWhitespace(java.lang.String)",
        "snippet": "    static String stripLeadingWhitespace(String text) {\n        return text.replaceFirst(\"^\\\\s+\", \"\");\n    }",
        "begin_line": 104,
        "end_line": 106,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/TextNode.java",
        "class_name": "org.jsoup.nodes.TextNode",
        "signature": "org.jsoup.nodes.TextNode.lastCharIsWhitespace(java.lang.StringBuilder)",
        "snippet": "    static boolean lastCharIsWhitespace(StringBuilder sb) {\n        return sb.length() != 0 && sb.charAt(sb.length() - 1) == ' ';\n    }",
        "begin_line": 108,
        "end_line": 110,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/TextNode.java",
        "class_name": "org.jsoup.nodes.TextNode",
        "signature": "org.jsoup.nodes.TextNode.ensureAttributes()",
        "snippet": "    private void ensureAttributes() {\n        if (attributes == null) {\n            attributes = new Attributes();\n            attributes.put(TEXT_KEY, text);\n        }\n    }",
        "begin_line": 113,
        "end_line": 118,
        "comment": " attribute fiddling. create on first access.",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/TextNode.java",
        "class_name": "org.jsoup.nodes.TextNode",
        "signature": "org.jsoup.nodes.TextNode.attr(java.lang.String)",
        "snippet": "    @Override\n    public String attr(String attributeKey) {\n        ensureAttributes();\n        return super.attr(attributeKey);\n    }",
        "begin_line": 120,
        "end_line": 124,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/TextNode.java",
        "class_name": "org.jsoup.nodes.TextNode",
        "signature": "org.jsoup.nodes.TextNode.attributes()",
        "snippet": "    @Override\n    public Attributes attributes() {\n        ensureAttributes();\n        return super.attributes();\n    }",
        "begin_line": 126,
        "end_line": 130,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/TextNode.java",
        "class_name": "org.jsoup.nodes.TextNode",
        "signature": "org.jsoup.nodes.TextNode.attr(java.lang.String, java.lang.String)",
        "snippet": "    @Override\n    public Node attr(String attributeKey, String attributeValue) {\n        ensureAttributes();\n        return super.attr(attributeKey, attributeValue);\n    }",
        "begin_line": 132,
        "end_line": 136,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/TextNode.java",
        "class_name": "org.jsoup.nodes.TextNode",
        "signature": "org.jsoup.nodes.TextNode.hasAttr(java.lang.String)",
        "snippet": "    @Override\n    public boolean hasAttr(String attributeKey) {\n        ensureAttributes();\n        return super.hasAttr(attributeKey);\n    }",
        "begin_line": 138,
        "end_line": 142,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/TextNode.java",
        "class_name": "org.jsoup.nodes.TextNode",
        "signature": "org.jsoup.nodes.TextNode.removeAttr(java.lang.String)",
        "snippet": "    @Override\n    public Node removeAttr(String attributeKey) {\n        ensureAttributes();\n        return super.removeAttr(attributeKey);\n    }",
        "begin_line": 144,
        "end_line": 148,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/nodes/TextNode.java",
        "class_name": "org.jsoup.nodes.TextNode",
        "signature": "org.jsoup.nodes.TextNode.absUrl(java.lang.String)",
        "snippet": "    @Override\n    public String absUrl(String attributeKey) {\n        ensureAttributes();\n        return super.absUrl(attributeKey);\n    }",
        "begin_line": 150,
        "end_line": 154,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Collector.java",
        "class_name": "org.jsoup.select.Collector",
        "signature": "org.jsoup.select.Collector.Collector()",
        "snippet": "    private Collector() {\n    }",
        "begin_line": 14,
        "end_line": 15,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Collector.java",
        "class_name": "org.jsoup.select.Collector",
        "signature": "org.jsoup.select.Collector.collect(org.jsoup.nodes.Evaluator, org.jsoup.nodes.Element)",
        "snippet": "    public static Elements collect (Evaluator eval, Element root) {\n        Elements elements = new Elements();\n        new NodeTraversor(new Accumulator(elements, eval)).traverse(root);\n        return elements;\n    }",
        "begin_line": 23,
        "end_line": 27,
        "comment": "\n     Build a list of elements, by visiting root and every descendant of root, and testing it against the evaluator.\n     @param eval Evaluator to test elements against\n     @param root root of tree to descend\n     @return list of matches; empty if none\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Collector.java",
        "class_name": "org.jsoup.select.Collector",
        "signature": "org.jsoup.select.Collector.Accumulator.Accumulator(org.jsoup.select.Elements, org.jsoup.nodes.Evaluator)",
        "snippet": "        Accumulator(Elements elements, Evaluator eval) {\n            this.elements = elements;\n            this.eval = eval;\n        }",
        "begin_line": 33,
        "end_line": 36,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Collector.java",
        "class_name": "org.jsoup.select.Collector",
        "signature": "org.jsoup.select.Collector.Accumulator.head(org.jsoup.nodes.Node, int)",
        "snippet": "        public void head(Node node, int depth) {\n            if (node instanceof Element) {\n                Element el = (Element) node;\n                if (eval.matches(el))\n                    elements.add(el);\n            }\n        }",
        "begin_line": 38,
        "end_line": 44,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Collector.java",
        "class_name": "org.jsoup.select.Collector",
        "signature": "org.jsoup.select.Collector.Accumulator.tail(org.jsoup.nodes.Node, int)",
        "snippet": "        public void tail(Node node, int depth) {\n            // void\n        }",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.Elements()",
        "snippet": "    public Elements() {\n        contents = new ArrayList<Element>();\n    }",
        "begin_line": 15,
        "end_line": 17,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.Elements(java.util.Collection<org.jsoup.nodes.Element>)",
        "snippet": "    public Elements(Collection<Element> elements) {\n        contents = new ArrayList<Element>(elements);\n    }",
        "begin_line": 19,
        "end_line": 21,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.Elements(java.util.List<org.jsoup.nodes.Element>)",
        "snippet": "    public Elements(List<Element> elements) {\n        contents = elements;\n    }",
        "begin_line": 23,
        "end_line": 25,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.Elements(org.jsoup.nodes.Element...)",
        "snippet": "    public Elements(Element... elements) {\n        this(Arrays.asList(elements));\n    }",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.attr(java.lang.String)",
        "snippet": "    public String attr(String attributeKey) {\n        for (Element element : contents) {\n            if (element.hasAttr(attributeKey))\n                return element.attr(attributeKey);\n        }\n        return \"\";\n    }",
        "begin_line": 39,
        "end_line": 45,
        "comment": "\n     Get an attribute value from the first matched element that has the attribute.\n     @param attributeKey The attribute key.\n     @return The attribute value from the first matched element that has the attribute.. If no elements were matched (isEmpty() == true),\n     or if the no elements have the attribute, returns empty string.\n     @see #hasAttr(String)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.hasAttr(java.lang.String)",
        "snippet": "    public boolean hasAttr(String attributeKey) {\n        for (Element element : contents) {\n            if (element.hasAttr(attributeKey))\n                return true;\n        }\n        return false;\n    }",
        "begin_line": 52,
        "end_line": 58,
        "comment": "\n     Checks if any of the matched elements have this attribute set.\n     @param attributeKey attribute key\n     @return true if any of the elements have the attribute; false if none do.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.attr(java.lang.String, java.lang.String)",
        "snippet": "    public Elements attr(String attributeKey, String attributeValue) {\n        for (Element element : contents) {\n            element.attr(attributeKey, attributeValue);\n        }\n        return this;\n    }",
        "begin_line": 66,
        "end_line": 71,
        "comment": "\n     * Set an attribute on all matched elements.\n     * @param attributeKey attribute key\n     * @param attributeValue attribute value\n     * @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.removeAttr(java.lang.String)",
        "snippet": "    public Elements removeAttr(String attributeKey) {\n        for (Element element : contents) {\n            element.removeAttr(attributeKey);\n        }\n        return this;\n    }",
        "begin_line": 78,
        "end_line": 83,
        "comment": "\n     * Remove an attribute from every matched element.\n     * @param attributeKey The attribute to remove.\n     * @return this (for chaining)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.addClass(java.lang.String)",
        "snippet": "    public Elements addClass(String className) {\n        for (Element element : contents) {\n            element.addClass(className);\n        }\n        return this;\n    }",
        "begin_line": 90,
        "end_line": 95,
        "comment": "\n     Add the class name to every matched element's {@code class} attribute.\n     @param className class name to add\n     @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.removeClass(java.lang.String)",
        "snippet": "    public Elements removeClass(String className) {\n        for (Element element : contents) {\n            element.removeClass(className);\n        }\n        return this;\n    }",
        "begin_line": 102,
        "end_line": 107,
        "comment": "\n     Remove the class name from every matched element's {@code class} attribute, if present.\n     @param className class name to remove\n     @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.toggleClass(java.lang.String)",
        "snippet": "    public Elements toggleClass(String className) {\n        for (Element element : contents) {\n            element.toggleClass(className);\n        }\n        return this;\n    }",
        "begin_line": 114,
        "end_line": 119,
        "comment": "\n     Toggle the class name on every matched element's {@code class} attribute.\n     @param className class name to add if missing, or remove if present, from every element.\n     @return this\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.hasClass(java.lang.String)",
        "snippet": "    public boolean hasClass(String className) {\n        for (Element element : contents) {\n            if (element.hasClass(className))\n                return true;\n        }\n        return false;\n    }",
        "begin_line": 126,
        "end_line": 132,
        "comment": "\n     Determine if any of the matched elements have this class name set in their {@code class} attribute.\n     @param className class name to check for\n     @return true if any do, false if none do\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.val()",
        "snippet": "    public String val() {\n        if (size() > 0)\n            return first().val();\n        else\n            return \"\";\n    }",
        "begin_line": 139,
        "end_line": 144,
        "comment": "\n     * Get the form element's value of the first matched element.\n     * @return The form element's value, or empty if not set.\n     * @see Element#val()\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.val(java.lang.String)",
        "snippet": "    public Elements val(String value) {\n        for (Element element : contents)\n            element.val(value);\n        return this;\n    }",
        "begin_line": 151,
        "end_line": 155,
        "comment": "\n     * Set the form element's value in each of the matched elements.\n     * @param value The value to set into each matched element\n     * @return this (for chaining)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.text()",
        "snippet": "    public String text() {\n        StringBuilder sb = new StringBuilder();\n        for (Element element : contents) {\n            if (sb.length() != 0)\n                sb.append(\" \");\n            sb.append(element.text());\n        }\n        return sb.toString();\n    }",
        "begin_line": 165,
        "end_line": 173,
        "comment": "\n     * Get the combined text of all the matched elements.\n     * <p>\n     * Note that it is possible to get repeats if the matched elements contain both parent elements and their own\n     * children, as the Element.text() method returns the combined text of a parent and all its children.\n     * @return string of all text: unescaped and no HTML.\n     * @see Element#text()\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.hasText()",
        "snippet": "    public boolean hasText() {\n        for (Element element: contents) {\n            if (element.hasText())\n                return true;\n        }\n        return false;\n    }",
        "begin_line": 175,
        "end_line": 181,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.html()",
        "snippet": "    public String html() {\n        StringBuilder sb = new StringBuilder();\n        for (Element element : contents) {\n            if (sb.length() != 0)\n                sb.append(\"\\n\");\n            sb.append(element.html());\n        }\n        return sb.toString();\n    }",
        "begin_line": 189,
        "end_line": 197,
        "comment": "\n     * Get the combined inner HTML of all matched elements.\n     * @return string of all element's inner HTML.\n     * @see #text()\n     * @see #outerHtml()\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.outerHtml()",
        "snippet": "    public String outerHtml() {\n        StringBuilder sb = new StringBuilder();\n        for (Element element : contents) {\n            if (sb.length() != 0)\n                sb.append(\"\\n\");\n            sb.append(element.outerHtml());\n        }\n        return sb.toString();\n    }",
        "begin_line": 205,
        "end_line": 213,
        "comment": "\n     * Get the combined outer HTML of all matched elements.\n     * @return string of all element's outer HTML.\n     * @see #text()\n     * @see #html()\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.toString()",
        "snippet": "    public String toString() {\n        return outerHtml();\n    }",
        "begin_line": 221,
        "end_line": 223,
        "comment": "\n     * Get the combined outer HTML of all matched elements. Alias of {@link #outerHtml()}.\n     * @return string of all element's outer HTML.\n     * @see #text()\n     * @see #html()\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.html(java.lang.String)",
        "snippet": "    public Elements html(String html) {\n        for (Element element : contents) {\n            element.html(html);\n        }\n        return this;\n    }",
        "begin_line": 231,
        "end_line": 236,
        "comment": "\n     * Set the inner HTML of each matched element.\n     * @param html HTML to parse and set into each matched element.\n     * @return this, for chaining\n     * @see Element#html(String)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.prepend(java.lang.String)",
        "snippet": "    public Elements prepend(String html) {\n        for (Element element : contents) {\n            element.prepend(html);\n        }\n        return this;\n    }",
        "begin_line": 244,
        "end_line": 249,
        "comment": "\n     * Add the supplied HTML to the start of each matched element's inner HTML.\n     * @param html HTML to add inside each element, before the existing HTML\n     * @return this, for chaining\n     * @see Element#prepend(String)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.append(java.lang.String)",
        "snippet": "    public Elements append(String html) {\n        for (Element element : contents) {\n            element.append(html);\n        }\n        return this;\n    }",
        "begin_line": 257,
        "end_line": 262,
        "comment": "\n     * Add the supplied HTML to the end of each matched element's inner HTML.\n     * @param html HTML to add inside each element, after the existing HTML\n     * @return this, for chaining\n     * @see Element#append(String)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.before(java.lang.String)",
        "snippet": "    public Elements before(String html) {\n        for (Element element : contents) {\n            element.before(html);\n        }\n        return this;\n    }",
        "begin_line": 270,
        "end_line": 275,
        "comment": "\n     * Insert the supplied HTML before each matched element's outer HTML.\n     * @param html HTML to insert before each element\n     * @return this, for chaining\n     * @see Element#before(String)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.after(java.lang.String)",
        "snippet": "    public Elements after(String html) {\n        for (Element element : contents) {\n            element.after(html);\n        }\n        return this;\n    }",
        "begin_line": 283,
        "end_line": 288,
        "comment": "\n     * Insert the supplied HTML after each matched element's outer HTML.\n     * @param html HTML to insert after each element\n     * @return this, for chaining\n     * @see Element#after(String)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.wrap(java.lang.String)",
        "snippet": "    public Elements wrap(String html) {\n        Validate.notEmpty(html);\n        for (Element element : contents) {\n            element.wrap(html);\n        }\n        return this;\n    }",
        "begin_line": 299,
        "end_line": 305,
        "comment": "\n     Wrap the supplied HTML around each matched elements. For example, with HTML\n     {@code <p><b>This</b> is <b>Jsoup</b></p>},\n     <code>doc.select(\"b\").wrap(\"&lt;i&gt;&lt;/i&gt;\");</code>\n     becomes {@code <p><i><b>This</b></i> is <i><b>jsoup</b></i></p>}\n     @param html HTML to wrap around each element, e.g. {@code <div class=\"head\"></div>}. Can be arbitrarily deep.\n     @return this (for chaining)\n     @see Element#wrap\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.empty()",
        "snippet": "    public Elements empty() {\n        for (Element element : contents) {\n            element.empty();\n        }\n        return this;\n    }",
        "begin_line": 318,
        "end_line": 323,
        "comment": "\n     * Empty (remove all child nodes from) each matched element. This is similar to setting the inner HTML of each\n     * element to nothing.\n     * <p>\n     * E.g. HTML: {@code <div><p>Hello <b>there</b></p> <p>now</p></div>}<br>\n     * <code>doc.select(\"p\").empty();</code><br>\n     * HTML = {@code <div><p></p> <p></p></div>}\n     * @return this, for chaining\n     * @see Element#empty()\n     * @see #remove()\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.remove()",
        "snippet": "    public Elements remove() {\n        for (Element element : contents) {\n            element.remove();\n        }\n        return this;\n    }",
        "begin_line": 337,
        "end_line": 342,
        "comment": "\n     * Remove each matched element from the DOM. This is similar to setting the outer HTML of each element to nothing.\n     * <p>\n     * E.g. HTML: {@code <div><p>Hello</p> <p>there</p> <img /></div>}<br>\n     * <code>doc.select(\"p\").remove();</code><br>\n     * HTML = {@code <div> <img /></div>}\n     * <p>\n     * Note that this method should not be used to clean user-submitted HTML; rather, use {@link org.jsoup.safety.Cleaner} to clean HTML.\n     * @return this, for chaining\n     * @see Element#empty()\n     * @see #empty()\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.select(java.lang.String)",
        "snippet": "    public Elements select(String query) {\n        return Selector.select(query, this);\n    }",
        "begin_line": 351,
        "end_line": 353,
        "comment": "\n     * Find matching elements within this element list.\n     * @param query A selector query\n     * @return the filtered list of elements, or an empty list if none match.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.eq(int)",
        "snippet": "    public Elements eq(int index) {\n        return contents.size() > index ? new Elements(get(index)) : new Elements();\n    }",
        "begin_line": 362,
        "end_line": 364,
        "comment": "\n     * Get the <i>nth</i> matched element as an Elements object.\n     * <p>\n     * See also {@link #get(int)} to retrieve an Element.\n     * @param index the (zero-based) index of the element in the list to retain\n     * @return Elements containing only the specified element, or, if that element did not exist, an empty list.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.is(java.lang.String)",
        "snippet": "    public boolean is(String query) {\n        Elements children = select(query);\n        return !children.isEmpty();\n    }",
        "begin_line": 371,
        "end_line": 374,
        "comment": "\n     * Test if any of the matched elements match the supplied query.\n     * @param query A selector\n     * @return true if at least one element in the list matches the query.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.parents()",
        "snippet": "    public Elements parents() {\n        HashSet<Element> combo = new LinkedHashSet<Element>();\n        for (Element e: contents) {\n            combo.addAll(e.parents());\n        }\n        return new Elements(combo);\n    }",
        "begin_line": 380,
        "end_line": 386,
        "comment": "\n     * Get all of the parents and ancestor elements of the matched elements.\n     * @return\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.first()",
        "snippet": "    public Element first() {\n        return contents.isEmpty() ? null : contents.get(0);\n    }",
        "begin_line": 393,
        "end_line": 395,
        "comment": "\n     Get the first matched element.\n     @return The first matched element, or <code>null</code> if contents is empty;\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.last()",
        "snippet": "    public Element last() {\n        return contents.isEmpty() ? null : contents.get(contents.size() - 1);\n    }",
        "begin_line": 401,
        "end_line": 403,
        "comment": "\n     Get the last matched element.\n     @return The last matched element, or <code>null</code> if contents is empty.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.size()",
        "snippet": "    public int size() {return contents.size();}",
        "begin_line": 406,
        "end_line": 406,
        "comment": " implements List<Element> delegates:",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.isEmpty()",
        "snippet": "    public boolean isEmpty() {return contents.isEmpty();}",
        "begin_line": 408,
        "end_line": 408,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.contains(java.lang.Object)",
        "snippet": "    public boolean contains(Object o) {return contents.contains(o);}",
        "begin_line": 410,
        "end_line": 410,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.iterator()",
        "snippet": "    public Iterator<Element> iterator() {return contents.iterator();}",
        "begin_line": 412,
        "end_line": 412,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.toArray()",
        "snippet": "    public Object[] toArray() {return contents.toArray();}",
        "begin_line": 414,
        "end_line": 414,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.toArray(T[])",
        "snippet": "    public <T> T[] toArray(T[] a) {return contents.toArray(a);}",
        "begin_line": 416,
        "end_line": 416,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.add(org.jsoup.nodes.Element)",
        "snippet": "    public boolean add(Element element) {return contents.add(element);}",
        "begin_line": 418,
        "end_line": 418,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.remove(java.lang.Object)",
        "snippet": "    public boolean remove(Object o) {return contents.remove(o);}",
        "begin_line": 420,
        "end_line": 420,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.containsAll(java.util.Collection<?>)",
        "snippet": "    public boolean containsAll(Collection<?> c) {return contents.containsAll(c);}",
        "begin_line": 422,
        "end_line": 422,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.addAll(java.util.Collection<? extends org.jsoup.nodes.Element>)",
        "snippet": "    public boolean addAll(Collection<? extends Element> c) {return contents.addAll(c);}",
        "begin_line": 424,
        "end_line": 424,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.addAll(int, java.util.Collection<? extends org.jsoup.nodes.Element>)",
        "snippet": "    public boolean addAll(int index, Collection<? extends Element> c) {return contents.addAll(index, c);}",
        "begin_line": 426,
        "end_line": 426,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.removeAll(java.util.Collection<?>)",
        "snippet": "    public boolean removeAll(Collection<?> c) {return contents.removeAll(c);}",
        "begin_line": 428,
        "end_line": 428,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.retainAll(java.util.Collection<?>)",
        "snippet": "    public boolean retainAll(Collection<?> c) {return contents.retainAll(c);}",
        "begin_line": 430,
        "end_line": 430,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.clear()",
        "snippet": "    public void clear() {contents.clear();}",
        "begin_line": 432,
        "end_line": 432,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object o) {return contents.equals(o);}",
        "begin_line": 434,
        "end_line": 434,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.hashCode()",
        "snippet": "    public int hashCode() {return contents.hashCode();}",
        "begin_line": 436,
        "end_line": 436,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.get(int)",
        "snippet": "    public Element get(int index) {return contents.get(index);}",
        "begin_line": 438,
        "end_line": 438,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.set(int, org.jsoup.nodes.Element)",
        "snippet": "    public Element set(int index, Element element) {return contents.set(index, element);}",
        "begin_line": 440,
        "end_line": 440,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.add(int, org.jsoup.nodes.Element)",
        "snippet": "    public void add(int index, Element element) {contents.add(index, element);}",
        "begin_line": 442,
        "end_line": 442,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.remove(int)",
        "snippet": "    public Element remove(int index) {return contents.remove(index);}",
        "begin_line": 444,
        "end_line": 444,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.indexOf(java.lang.Object)",
        "snippet": "    public int indexOf(Object o) {return contents.indexOf(o);}",
        "begin_line": 446,
        "end_line": 446,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.lastIndexOf(java.lang.Object)",
        "snippet": "    public int lastIndexOf(Object o) {return contents.lastIndexOf(o);}",
        "begin_line": 448,
        "end_line": 448,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.listIterator()",
        "snippet": "    public ListIterator<Element> listIterator() {return contents.listIterator();}",
        "begin_line": 450,
        "end_line": 450,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.listIterator(int)",
        "snippet": "    public ListIterator<Element> listIterator(int index) {return contents.listIterator(index);}",
        "begin_line": 452,
        "end_line": 452,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Elements.java",
        "class_name": "org.jsoup.select.Elements",
        "signature": "org.jsoup.select.Elements.subList(int, int)",
        "snippet": "    public List<Element> subList(int fromIndex, int toIndex) {return contents.subList(fromIndex, toIndex);}",
        "begin_line": 454,
        "end_line": 454,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/NodeVisitor.java",
        "class_name": "org.jsoup.select.NodeVisitor",
        "signature": "org.jsoup.select.NodeVisitor.head(org.jsoup.nodes.Node, int)",
        "snippet": "    public void head(Node node, int depth);",
        "begin_line": 9,
        "end_line": 9,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/NodeVisitor.java",
        "class_name": "org.jsoup.select.NodeVisitor",
        "signature": "org.jsoup.select.NodeVisitor.tail(org.jsoup.nodes.Node, int)",
        "snippet": "    public void tail(Node node, int depth);",
        "begin_line": 10,
        "end_line": 10,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/NodeTraversor.java",
        "class_name": "org.jsoup.select.NodeTraversor",
        "signature": "org.jsoup.select.NodeTraversor.NodeTraversor(org.jsoup.select.NodeVisitor)",
        "snippet": "    public NodeTraversor(NodeVisitor visitor) {\n        this.visitor = visitor;\n    }",
        "begin_line": 11,
        "end_line": 13,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/NodeTraversor.java",
        "class_name": "org.jsoup.select.NodeTraversor",
        "signature": "org.jsoup.select.NodeTraversor.traverse(org.jsoup.nodes.Node)",
        "snippet": "    public void traverse(Node root) {\n        Node node = root;\n        int depth = 0;\n        \n        while (node != null) {\n            visitor.head(node, depth);\n            if (node.childNodes().size() > 0) {\n                node = node.childNode(0);\n                depth++;\n            } else {\n                while (node.nextSibling() == null && depth > 0) {\n                    visitor.tail(node, depth);\n                    node = node.parent();\n                    depth--;\n                }\n                visitor.tail(node, depth);\n                if (node == root)\n                    break;\n                node = node.nextSibling();\n            }\n        }\n    }",
        "begin_line": 15,
        "end_line": 36,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Selector.java",
        "class_name": "org.jsoup.select.Selector",
        "signature": "org.jsoup.select.Selector.Selector(java.lang.String, org.jsoup.nodes.Element)",
        "snippet": "    private Selector(String query, Element root) {\n        Validate.notNull(query);\n        query = query.trim();\n        Validate.notEmpty(query);\n        Validate.notNull(root);\n\n        this.elements = new LinkedHashSet<Element>();\n        this.query = query;\n        this.root = root;\n        this.tq = new TokenQueue(query);\n    }",
        "begin_line": 64,
        "end_line": 74,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Selector.java",
        "class_name": "org.jsoup.select.Selector",
        "signature": "org.jsoup.select.Selector.select(java.lang.String, org.jsoup.nodes.Element)",
        "snippet": "    public static Elements select(String query, Element root) {\n        return new Selector(query, root).select();\n    }",
        "begin_line": 82,
        "end_line": 84,
        "comment": "\n     Find elements matching selector.\n     @param query CSS selector\n     @param root root element to descend into\n     @return matching elements, empty if not\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Selector.java",
        "class_name": "org.jsoup.select.Selector",
        "signature": "org.jsoup.select.Selector.select(java.lang.String, java.lang.Iterable<org.jsoup.nodes.Element>)",
        "snippet": "    public static Elements select(String query, Iterable<Element> roots) {\n        Validate.notEmpty(query);\n        Validate.notNull(roots);\n        LinkedHashSet<Element> elements = new LinkedHashSet<Element>();\n\n        for (Element root : roots) {\n            elements.addAll(select(query, root));\n        }\n        return new Elements(elements);\n    }",
        "begin_line": 92,
        "end_line": 101,
        "comment": "\n     Find elements matching selector.\n     @param query CSS selector\n     @param roots root elements to descend into\n     @return matching elements, empty if not\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Selector.java",
        "class_name": "org.jsoup.select.Selector",
        "signature": "org.jsoup.select.Selector.select()",
        "snippet": "    private Elements select() {\n        tq.consumeWhitespace();\n        \n        if (tq.matchesAny(combinators)) { // if starts with a combinator, use root as elements\n            elements.add(root);\n            combinator(tq.consume().toString());\n        } else {\n            addElements(findElements()); // chomp first element matcher off queue \n        }            \n               \n        while (!tq.isEmpty()) {\n            // hierarchy and extras\n            boolean seenWhite = tq.consumeWhitespace();\n            \n            if (tq.matchChomp(\",\")) { // group or\n                while (!tq.isEmpty()) {\n                    String subQuery = tq.chompTo(\",\");\n                    elements.addAll(select(subQuery, root));\n                }\n            } else if (tq.matchesAny(combinators)) {\n                combinator(tq.consume().toString());\n            } else if (seenWhite) {\n                combinator(\" \");\n            } else { // E.class, E#id, E[attr] etc. AND\n                Elements candidates = findElements(); // take next el, #. etc off queue\n                intersectElements(filterForSelf(elements, candidates));\n            }\n        }\n        return new Elements(elements);\n    }",
        "begin_line": 103,
        "end_line": 132,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Selector.java",
        "class_name": "org.jsoup.select.Selector",
        "signature": "org.jsoup.select.Selector.combinator(java.lang.String)",
        "snippet": "    private void combinator(String combinator) {\n        tq.consumeWhitespace();\n        String subQuery = tq.consumeToAny(combinators); // support multi > childs\n        \n        Elements output;\n        if (combinator.equals(\">\"))\n            output = filterForChildren(elements, select(subQuery, elements));\n        else if (combinator.equals(\" \"))\n            output = filterForDescendants(elements, select(subQuery, elements));\n        else if (combinator.equals(\"+\"))\n            output = filterForAdjacentSiblings(elements, select(subQuery, root));\n        else if (combinator.equals(\"~\"))\n            output = filterForGeneralSiblings(elements, select(subQuery, root));\n        else\n            throw new IllegalStateException(\"Unknown combinator: \" + combinator);\n        \n        elements.clear(); elements.addAll(output);\n    }",
        "begin_line": 134,
        "end_line": 151,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Selector.java",
        "class_name": "org.jsoup.select.Selector",
        "signature": "org.jsoup.select.Selector.findElements()",
        "snippet": "    private Elements findElements() {\n        if (tq.matchChomp(\"#\")) {\n            return byId();\n        } else if (tq.matchChomp(\".\")) {\n            return byClass();\n        } else if (tq.matchesWord()) {\n            return byTag();\n        } else if (tq.matches(\"[\")) {\n            return byAttribute();\n        } else if (tq.matchChomp(\"*\")) {\n            return allElements();\n        } else if (tq.matchChomp(\":lt(\")) {\n            return indexLessThan();\n        } else if (tq.matchChomp(\":gt(\")) {\n            return indexGreaterThan();\n        } else if (tq.matchChomp(\":eq(\")) {\n            return indexEquals();\n        } else if (tq.matches(\":has(\")) {\n            return has();\n        } else if (tq.matches(\":contains(\")) {\n            return contains(false);\n        } else if (tq.matches(\":containsOwn(\")) {\n            return contains(true);\n        } else if (tq.matches(\":matches(\")) {\n            return matches(false);\n        } else if (tq.matches(\":matchesOwn(\")) {\n            return matches(true);\n        } else { // unhandled\n            throw new SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n        }\n    }",
        "begin_line": 153,
        "end_line": 183,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Selector.java",
        "class_name": "org.jsoup.select.Selector",
        "signature": "org.jsoup.select.Selector.addElements(java.util.Collection<org.jsoup.nodes.Element>)",
        "snippet": "    private void addElements(Collection<Element> add) {\n        elements.addAll(add);\n    }",
        "begin_line": 185,
        "end_line": 187,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Selector.java",
        "class_name": "org.jsoup.select.Selector",
        "signature": "org.jsoup.select.Selector.intersectElements(java.util.Collection<org.jsoup.nodes.Element>)",
        "snippet": "    private void intersectElements(Collection<Element> intersect) {\n        elements.retainAll(intersect);\n    }",
        "begin_line": 189,
        "end_line": 191,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Selector.java",
        "class_name": "org.jsoup.select.Selector",
        "signature": "org.jsoup.select.Selector.byId()",
        "snippet": "    private Elements byId() {\n        String id = tq.consumeCssIdentifier();\n        Validate.notEmpty(id);\n\n        Element found = root.getElementById(id);\n        Elements byId = new Elements();\n        if(found != null)\n            byId.add(found);\n        return byId;\n    }",
        "begin_line": 193,
        "end_line": 202,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Selector.java",
        "class_name": "org.jsoup.select.Selector",
        "signature": "org.jsoup.select.Selector.byClass()",
        "snippet": "    private Elements byClass() {\n        String className = tq.consumeCssIdentifier();\n        Validate.notEmpty(className);\n\n        return root.getElementsByClass(className);\n    }",
        "begin_line": 204,
        "end_line": 209,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Selector.java",
        "class_name": "org.jsoup.select.Selector",
        "signature": "org.jsoup.select.Selector.byTag()",
        "snippet": "    private Elements byTag() {\n        String tagName = tq.consumeElementSelector();\n        Validate.notEmpty(tagName);\n        \n        // namespaces: if element name is \"abc:def\", selector must be \"abc|def\", so flip:\n        if (tagName.contains(\"|\"))\n            tagName = tagName.replace(\"|\", \":\");\n        return root.getElementsByTag(tagName);\n    }",
        "begin_line": 211,
        "end_line": 219,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Selector.java",
        "class_name": "org.jsoup.select.Selector",
        "signature": "org.jsoup.select.Selector.byAttribute()",
        "snippet": "    private Elements byAttribute() {\n        TokenQueue cq = new TokenQueue(tq.chompBalanced('[', ']')); // content queue\n        String key = cq.consumeToAny(\"=\", \"!=\", \"^=\", \"$=\", \"*=\", \"~=\"); // eq, not, start, end, contain, match, (no val)\n        Validate.notEmpty(key);\n        cq.consumeWhitespace();\n\n        if (cq.isEmpty()) {\n            return key.startsWith(\"^\") ? root.getElementsByAttributeStarting(key.substring(1)) : root.getElementsByAttribute(key);\n        } else {\n            if (cq.matchChomp(\"=\"))\n                return root.getElementsByAttributeValue(key, cq.remainder());\n\n            else if (cq.matchChomp(\"!=\"))\n                return root.getElementsByAttributeValueNot(key, cq.remainder());\n\n            else if (cq.matchChomp(\"^=\"))\n                return root.getElementsByAttributeValueStarting(key, cq.remainder());\n\n            else if (cq.matchChomp(\"$=\"))\n                return root.getElementsByAttributeValueEnding(key, cq.remainder());\n\n            else if (cq.matchChomp(\"*=\"))\n                return root.getElementsByAttributeValueContaining(key, cq.remainder());\n            \n            else if (cq.matchChomp(\"~=\"))\n                return root.getElementsByAttributeValueMatching(key, cq.remainder());\n            \n            else\n                throw new SelectorParseException(\"Could not parse attribute query '%s': unexpected token at '%s'\", query, cq.remainder());\n        }\n    }",
        "begin_line": 221,
        "end_line": 251,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Selector.java",
        "class_name": "org.jsoup.select.Selector",
        "signature": "org.jsoup.select.Selector.allElements()",
        "snippet": "    private Elements allElements() {\n        return root.getAllElements();\n    }",
        "begin_line": 253,
        "end_line": 255,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Selector.java",
        "class_name": "org.jsoup.select.Selector",
        "signature": "org.jsoup.select.Selector.indexLessThan()",
        "snippet": "    private Elements indexLessThan() {\n        return root.getElementsByIndexLessThan(consumeIndex());\n    }",
        "begin_line": 258,
        "end_line": 260,
        "comment": " pseudo selectors :lt, :gt, :eq",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Selector.java",
        "class_name": "org.jsoup.select.Selector",
        "signature": "org.jsoup.select.Selector.indexGreaterThan()",
        "snippet": "    private Elements indexGreaterThan() {\n        return root.getElementsByIndexGreaterThan(consumeIndex());\n    }",
        "begin_line": 262,
        "end_line": 264,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Selector.java",
        "class_name": "org.jsoup.select.Selector",
        "signature": "org.jsoup.select.Selector.indexEquals()",
        "snippet": "    private Elements indexEquals() {\n        return root.getElementsByIndexEquals(consumeIndex());\n    }",
        "begin_line": 266,
        "end_line": 268,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Selector.java",
        "class_name": "org.jsoup.select.Selector",
        "signature": "org.jsoup.select.Selector.consumeIndex()",
        "snippet": "    private int consumeIndex() {\n        String indexS = tq.chompTo(\")\").trim();\n        Validate.isTrue(StringUtil.isNumeric(indexS), \"Index must be numeric\");\n        return Integer.parseInt(indexS);\n    }",
        "begin_line": 270,
        "end_line": 274,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Selector.java",
        "class_name": "org.jsoup.select.Selector",
        "signature": "org.jsoup.select.Selector.has()",
        "snippet": "    private Elements has() {\n        tq.consume(\":has\");\n        String subQuery = tq.chompBalanced('(',')');\n        Validate.notEmpty(subQuery, \":has(el) subselect must not be empty\");\n\n        return filterForParentsOfDescendants(elements, select(subQuery, elements));\n    }",
        "begin_line": 277,
        "end_line": 283,
        "comment": " pseudo selector :has(el)",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Selector.java",
        "class_name": "org.jsoup.select.Selector",
        "signature": "org.jsoup.select.Selector.contains(boolean)",
        "snippet": "    private Elements contains(boolean own) {\n        tq.consume(own ? \":containsOwn\" : \":contains\");\n        String searchText = TokenQueue.unescape(tq.chompBalanced('(',')'));\n        Validate.notEmpty(searchText, \":contains(text) query must not be empty\");\n        \n        return own ? root.getElementsContainingOwnText(searchText) : root.getElementsContainingText(searchText);\n    }",
        "begin_line": 286,
        "end_line": 292,
        "comment": " pseudo selector :contains(text), containsOwn(text)",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Selector.java",
        "class_name": "org.jsoup.select.Selector",
        "signature": "org.jsoup.select.Selector.matches(boolean)",
        "snippet": "    private Elements matches(boolean own) {\n        tq.consume(own? \":matchesOwn\" : \":matches\");\n        String regex = tq.chompBalanced('(', ')'); // don't unescape, as regex bits will be escaped\n        Validate.notEmpty(regex, \":matches(regex) query must not be empty\");\n        \n        return own ? root.getElementsMatchingOwnText(regex) : root.getElementsMatchingText(regex);\n    }",
        "begin_line": 295,
        "end_line": 301,
        "comment": " :matches(regex), matchesOwn(regex)",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Selector.java",
        "class_name": "org.jsoup.select.Selector",
        "signature": "org.jsoup.select.Selector.filterForChildren(java.util.Collection<org.jsoup.nodes.Element>, java.util.Collection<org.jsoup.nodes.Element>)",
        "snippet": "    private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates) {\n        Elements children = new Elements();\n        CHILD: for (Element c : candidates) {\n            for (Element p : parents) {\n                if (c.parent() != null && c.parent().equals(p)) {\n                    children.add(c);\n                    continue CHILD;\n                }\n            }\n        }\n        return children;\n    }",
        "begin_line": 304,
        "end_line": 315,
        "comment": " direct child descendants",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Selector.java",
        "class_name": "org.jsoup.select.Selector",
        "signature": "org.jsoup.select.Selector.filterForDescendants(java.util.Collection<org.jsoup.nodes.Element>, java.util.Collection<org.jsoup.nodes.Element>)",
        "snippet": "    private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates) {\n        Elements children = new Elements();\n        CHILD: for (Element c : candidates) {\n            for (Element p : parents) {\n                if (c.equals(p)) {\n                    continue CHILD;\n                }\n            }\n            children.add(c);\n        }\n        return children;\n    }",
        "begin_line": 319,
        "end_line": 330,
        "comment": " or the original element; so check that parent is not child",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Selector.java",
        "class_name": "org.jsoup.select.Selector",
        "signature": "org.jsoup.select.Selector.filterForParentsOfDescendants(java.util.Collection<org.jsoup.nodes.Element>, java.util.Collection<org.jsoup.nodes.Element>)",
        "snippet": "    private static Elements filterForParentsOfDescendants(Collection<Element> parents, Collection<Element> children) {\n        Elements filteredParents = new Elements();\n        for (Element p : parents) {\n            for (Element c : children) {\n                if (c.parents().contains(p)) {\n                    filteredParents.add(p);\n                }\n            }\n        }\n        return filteredParents;\n    }",
        "begin_line": 333,
        "end_line": 343,
        "comment": " implements :has(el). Finds elements that contain the matched elements",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Selector.java",
        "class_name": "org.jsoup.select.Selector",
        "signature": "org.jsoup.select.Selector.filterForAdjacentSiblings(java.util.Collection<org.jsoup.nodes.Element>, java.util.Collection<org.jsoup.nodes.Element>)",
        "snippet": "    private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates) {\n        Elements siblings = new Elements();\n        SIBLING: for (Element c: candidates) {\n            for (Element e: elements) {\n                if (!e.parent().equals(c.parent()))\n                    continue;\n                Element previousSib = c.previousElementSibling();\n                if (previousSib != null && previousSib.equals(e)) {\n                    siblings.add(c);\n                    continue SIBLING;\n                }\n            }\n        }\n        return siblings;\n    }",
        "begin_line": 346,
        "end_line": 360,
        "comment": " adjacent siblings",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Selector.java",
        "class_name": "org.jsoup.select.Selector",
        "signature": "org.jsoup.select.Selector.filterForGeneralSiblings(java.util.Collection<org.jsoup.nodes.Element>, java.util.Collection<org.jsoup.nodes.Element>)",
        "snippet": "    private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates) {\n        Elements output = new Elements();\n        SIBLING: for (Element c: candidates) {\n            for (Element e: elements) {\n                if (!e.parent().equals(c.parent()))\n                    continue;\n                int ePos = e.elementSiblingIndex();\n                int cPos = c.elementSiblingIndex();\n                if (cPos > ePos) {\n                    output.add(c);\n                    continue SIBLING;\n                }\n            }\n        }\n        return output;\n    }",
        "begin_line": 363,
        "end_line": 378,
        "comment": " preceeding siblings",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Selector.java",
        "class_name": "org.jsoup.select.Selector",
        "signature": "org.jsoup.select.Selector.filterForSelf(java.util.Collection<org.jsoup.nodes.Element>, java.util.Collection<org.jsoup.nodes.Element>)",
        "snippet": "    private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates) {\n        Elements children = new Elements();\n        CHILD: for (Element c : candidates) {\n            for (Element p : parents) {\n                if (c.equals(p)) {\n                    children.add(c);\n                    continue CHILD;\n                }\n            }   \n        }\n        return children;\n    }",
        "begin_line": 381,
        "end_line": 392,
        "comment": " union of both sets, for e.class type selectors",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/select/Selector.java",
        "class_name": "org.jsoup.select.Selector",
        "signature": "org.jsoup.select.Selector.SelectorParseException.SelectorParseException(java.lang.String, java.lang.Object...)",
        "snippet": "        public SelectorParseException(String msg, Object... params) {\n            super(String.format(msg, params));\n        }",
        "begin_line": 395,
        "end_line": 397,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/safety/Whitelist.java",
        "class_name": "org.jsoup.safety.Whitelist",
        "signature": "org.jsoup.safety.Whitelist.none()",
        "snippet": "    public static Whitelist none() {\n        return new Whitelist();\n    }",
        "begin_line": 61,
        "end_line": 63,
        "comment": "\n     This whitelist allows only text nodes: all HTML will be stripped.\n\n     @return whitelist\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/safety/Whitelist.java",
        "class_name": "org.jsoup.safety.Whitelist",
        "signature": "org.jsoup.safety.Whitelist.simpleText()",
        "snippet": "    public static Whitelist simpleText() {\n        return new Whitelist()\n                .addTags(\"b\", \"em\", \"i\", \"strong\", \"u\")\n                ;\n    }",
        "begin_line": 71,
        "end_line": 75,
        "comment": "\n     This whitelist allows only simple text formatting: <code>b, em, i, strong, u</code>. All other HTML (tags and\n     attributes) will be removed.\n\n     @return whitelist\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/safety/Whitelist.java",
        "class_name": "org.jsoup.safety.Whitelist",
        "signature": "org.jsoup.safety.Whitelist.basic()",
        "snippet": "    public static Whitelist basic() {\n        return new Whitelist()\n                .addTags(\n                        \"a\", \"b\", \"blockquote\", \"br\", \"cite\", \"code\", \"dd\", \"dl\", \"dt\", \"em\",\n                        \"i\", \"li\", \"ol\", \"p\", \"pre\", \"q\", \"small\", \"strike\", \"strong\", \"sub\",\n                        \"sup\", \"u\", \"ul\")\n\n                .addAttributes(\"a\", \"href\")\n                .addAttributes(\"blockquote\", \"cite\")\n                .addAttributes(\"q\", \"cite\")\n\n                .addProtocols(\"a\", \"href\", \"ftp\", \"http\", \"https\", \"mailto\")\n                .addProtocols(\"blockquote\", \"cite\", \"http\", \"https\")\n                .addProtocols(\"cite\", \"cite\", \"http\", \"https\")\n\n                .addEnforcedAttribute(\"a\", \"rel\", \"nofollow\")\n                ;\n\n    }",
        "begin_line": 88,
        "end_line": 106,
        "comment": "\n     This whitelist allows a fuller range of text nodes: <code>a, b, blockquote, br, cite, code, dd, dl, dt, em, i, li,\n     ol, p, pre, q, small, strike, strong, sub, sup, u, ul</code>, and appropriate attributes.\n     <p/>\n     Links (<code>a</code> elements) can point to <code>http, https, ftp, mailto</code>, and have an enforced\n     <code>rel=nofollow</code> attribute.\n     <p/>\n     Does not allow images.\n\n     @return whitelist\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/safety/Whitelist.java",
        "class_name": "org.jsoup.safety.Whitelist",
        "signature": "org.jsoup.safety.Whitelist.basicWithImages()",
        "snippet": "    public static Whitelist basicWithImages() {\n        return basic()\n                .addTags(\"img\")\n                .addAttributes(\"img\", \"align\", \"alt\", \"height\", \"src\", \"title\", \"width\")\n                .addProtocols(\"img\", \"src\", \"http\", \"https\")\n                ;\n    }",
        "begin_line": 114,
        "end_line": 120,
        "comment": "\n     This whitelist allows the same text tags as {@link #basic}, and also allows <code>img</code> tags, with appropriate\n     attributes, with <code>src</code> pointing to <code>http</code> or <code>https</code>.\n\n     @return whitelist\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/safety/Whitelist.java",
        "class_name": "org.jsoup.safety.Whitelist",
        "signature": "org.jsoup.safety.Whitelist.relaxed()",
        "snippet": "    public static Whitelist relaxed() {\n        return new Whitelist()\n                .addTags(\n                        \"a\", \"b\", \"blockquote\", \"br\", \"caption\", \"cite\", \"code\", \"col\",\n                        \"colgroup\", \"dd\", \"div\", \"dl\", \"dt\", \"em\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\",\n                        \"i\", \"img\", \"li\", \"ol\", \"p\", \"pre\", \"q\", \"small\", \"strike\", \"strong\",\n                        \"sub\", \"sup\", \"table\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\", \"u\",\n                        \"ul\")\n\n                .addAttributes(\"a\", \"href\", \"title\")\n                .addAttributes(\"blockquote\", \"cite\")\n                .addAttributes(\"col\", \"span\", \"width\")\n                .addAttributes(\"colgroup\", \"span\", \"width\")\n                .addAttributes(\"img\", \"align\", \"alt\", \"height\", \"src\", \"title\", \"width\")\n                .addAttributes(\"ol\", \"start\", \"type\")\n                .addAttributes(\"q\", \"cite\")\n                .addAttributes(\"table\", \"summary\", \"width\")\n                .addAttributes(\"td\", \"abbr\", \"axis\", \"colspan\", \"rowspan\", \"width\")\n                .addAttributes(\n                        \"th\", \"abbr\", \"axis\", \"colspan\", \"rowspan\", \"scope\",\n                        \"width\")\n                .addAttributes(\"ul\", \"type\")\n\n                .addProtocols(\"a\", \"href\", \"ftp\", \"http\", \"https\", \"mailto\")\n                .addProtocols(\"blockquote\", \"cite\", \"http\", \"https\")\n                .addProtocols(\"img\", \"src\", \"http\", \"https\")\n                .addProtocols(\"q\", \"cite\", \"http\", \"https\")\n                ;\n    }",
        "begin_line": 131,
        "end_line": 159,
        "comment": "\n     This whitelist allows a full range of text and structural body HTML: <code>a, b, blockquote, br, caption, cite,\n     code, col, colgroup, dd, dl, dt, em, h1, h2, h3, h4, h5, h6, i, img, li, ol, p, pre, q, small, strike, strong, sub,\n     sup, table, tbody, td, tfoot, th, thead, tr, u, ul</code>\n     <p/>\n     Links do not have an enforced <code>rel=nofollow</code> attribute, but you can add that if desired.\n\n     @return whitelist\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/safety/Whitelist.java",
        "class_name": "org.jsoup.safety.Whitelist",
        "signature": "org.jsoup.safety.Whitelist.Whitelist()",
        "snippet": "    public Whitelist() {\n        tagNames = new HashSet<TagName>();\n        attributes = new HashMap<TagName, Set<AttributeKey>>();\n        enforcedAttributes = new HashMap<TagName, Map<AttributeKey, AttributeValue>>();\n        protocols = new HashMap<TagName, Map<AttributeKey, Set<Protocol>>>();\n    }",
        "begin_line": 169,
        "end_line": 174,
        "comment": "\n     Create a new, empty whitelist. Generally it will be better to start with a default prepared whitelist instead.\n\n     @see #basic()\n     @see #basicWithImages()\n     @see #simpleText()\n     @see #relaxed()\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/safety/Whitelist.java",
        "class_name": "org.jsoup.safety.Whitelist",
        "signature": "org.jsoup.safety.Whitelist.addTags(java.lang.String...)",
        "snippet": "    public Whitelist addTags(String... tags) {\n        Validate.notNull(tags);\n\n        for (String tagName : tags) {\n            Validate.notEmpty(tagName);\n            tagNames.add(TagName.valueOf(tagName));\n        }\n        return this;\n    }",
        "begin_line": 182,
        "end_line": 190,
        "comment": "\n     Add a list of allowed elements to a whitelist. (If a tag is not allowed, it will be removed from the HTML.)\n\n     @param tags tag names to allow\n     @return this (for chaining)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/safety/Whitelist.java",
        "class_name": "org.jsoup.safety.Whitelist",
        "signature": "org.jsoup.safety.Whitelist.addAttributes(java.lang.String, java.lang.String...)",
        "snippet": "    public Whitelist addAttributes(String tag, String... keys) {\n        Validate.notEmpty(tag);\n        Validate.notNull(keys);\n\n        TagName tagName = TagName.valueOf(tag);\n        Set<AttributeKey> attributeSet = new HashSet<AttributeKey>();\n        for (String key : keys) {\n            Validate.notEmpty(key);\n            attributeSet.add(AttributeKey.valueOf(key));\n        }\n        if (attributes.containsKey(tagName)) {\n            Set<AttributeKey> currentSet = attributes.get(tagName);\n            currentSet.addAll(attributeSet);\n        } else {\n            attributes.put(tagName, attributeSet);\n        }\n        return this;\n    }",
        "begin_line": 202,
        "end_line": 219,
        "comment": "\n     Add a list of allowed attributes to a tag. (If an attribute is not allowed on an element, it will be removed.)\n     <p/>\n     To make an attribute valid for <b>all tags</b>, use the pseudo tag <code>:all</code>, e.g.\n     <code>addAttributes(\":all\", \"class\")</code>.\n\n     @param tag  The tag the attributes are for\n     @param keys List of valid attributes for the tag\n     @return this (for chaining)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/safety/Whitelist.java",
        "class_name": "org.jsoup.safety.Whitelist",
        "signature": "org.jsoup.safety.Whitelist.addEnforcedAttribute(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    public Whitelist addEnforcedAttribute(String tag, String key, String value) {\n        Validate.notEmpty(tag);\n        Validate.notEmpty(key);\n        Validate.notEmpty(value);\n\n        TagName tagName = TagName.valueOf(tag);\n        AttributeKey attrKey = AttributeKey.valueOf(key);\n        AttributeValue attrVal = AttributeValue.valueOf(value);\n\n        if (enforcedAttributes.containsKey(tagName)) {\n            enforcedAttributes.get(tagName).put(attrKey, attrVal);\n        } else {\n            Map<AttributeKey, AttributeValue> attrMap = new HashMap<AttributeKey, AttributeValue>();\n            attrMap.put(attrKey, attrVal);\n            enforcedAttributes.put(tagName, attrMap);\n        }\n        return this;\n    }",
        "begin_line": 233,
        "end_line": 250,
        "comment": "\n     Add an enforced attribute to a tag. An enforced attribute will always be added to the element. If the element\n     already has the attribute set, it will be overridden.\n     <p/>\n     E.g.: <code>addEnforcedAttribute(\"a\", \"rel\", \"nofollow\")</code> will make all <code>a</code> tags output as\n     <code>&lt;a href=\"...\" rel=\"nofollow\"></code>\n\n     @param tag   The tag the enforced attribute is for\n     @param key   The attribute key\n     @param value The enforced attribute value\n     @return this (for chaining)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/safety/Whitelist.java",
        "class_name": "org.jsoup.safety.Whitelist",
        "signature": "org.jsoup.safety.Whitelist.addProtocols(java.lang.String, java.lang.String, java.lang.String...)",
        "snippet": "    public Whitelist addProtocols(String tag, String key, String... protocols) {\n        Validate.notEmpty(tag);\n        Validate.notEmpty(key);\n        Validate.notNull(protocols);\n\n        TagName tagName = TagName.valueOf(tag);\n        AttributeKey attrKey = AttributeKey.valueOf(key);\n        Map<AttributeKey, Set<Protocol>> attrMap;\n        Set<Protocol> protSet;\n\n        if (this.protocols.containsKey(tagName)) {\n            attrMap = this.protocols.get(tagName);\n        } else {\n            attrMap = new HashMap<AttributeKey, Set<Protocol>>();\n            this.protocols.put(tagName, attrMap);\n        }\n        if (attrMap.containsKey(attrKey)) {\n            protSet = attrMap.get(attrKey);\n        } else {\n            protSet = new HashSet<Protocol>();\n            attrMap.put(attrKey, protSet);\n        }\n        for (String protocol : protocols) {\n            Validate.notEmpty(protocol);\n            Protocol prot = Protocol.valueOf(protocol);\n            protSet.add(prot);\n        }\n        return this;\n    }",
        "begin_line": 263,
        "end_line": 291,
        "comment": "\n     Add allowed URL protocols for an element's URL attribute. This restricts the possible values of the attribute to\n     URLs with the defined protocol.\n     <p/>\n     E.g.: <code>addProtocols(\"a\", \"href\", \"ftp\", \"http\", \"https\")</code>\n\n     @param tag       Tag the URL protocol is for\n     @param key       Attribute key\n     @param protocols List of valid protocols\n     @return this, for chaining\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/safety/Whitelist.java",
        "class_name": "org.jsoup.safety.Whitelist",
        "signature": "org.jsoup.safety.Whitelist.isSafeTag(java.lang.String)",
        "snippet": "    boolean isSafeTag(String tag) {\n        return tagNames.contains(TagName.valueOf(tag));\n    }",
        "begin_line": 293,
        "end_line": 295,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/safety/Whitelist.java",
        "class_name": "org.jsoup.safety.Whitelist",
        "signature": "org.jsoup.safety.Whitelist.isSafeAttribute(java.lang.String, org.jsoup.nodes.Element, org.jsoup.nodes.Attribute)",
        "snippet": "    boolean isSafeAttribute(String tagName, Element el, Attribute attr) {\n        TagName tag = TagName.valueOf(tagName);\n        AttributeKey key = AttributeKey.valueOf(attr.getKey());\n\n        if (attributes.containsKey(tag)) {\n            if (attributes.get(tag).contains(key)) {\n                if (protocols.containsKey(tag)) {\n                    Map<AttributeKey, Set<Protocol>> attrProts = protocols.get(tag);\n                    // ok if not defined protocol; otherwise test\n                    return !attrProts.containsKey(key) || testValidProtocol(el, attr, attrProts.get(key));\n                } else { // attribute found, no protocols defined, so OK\n                    return true;\n                }\n            }\n        } else { // no attributes defined for tag, try :all tag\n            return !tagName.equals(\":all\") && isSafeAttribute(\":all\", el, attr);\n        }\n        return false;\n    }",
        "begin_line": 297,
        "end_line": 315,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/safety/Whitelist.java",
        "class_name": "org.jsoup.safety.Whitelist",
        "signature": "org.jsoup.safety.Whitelist.testValidProtocol(org.jsoup.nodes.Element, org.jsoup.nodes.Attribute, java.util.Set<org.jsoup.safety.Whitelist.Protocol>)",
        "snippet": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // resolve relative urls to abs, and update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toString().toLowerCase().startsWith(prot)) {\n                return true;\n            }\n        }\n        return false;\n    }",
        "begin_line": 317,
        "end_line": 330,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/safety/Whitelist.java",
        "class_name": "org.jsoup.safety.Whitelist",
        "signature": "org.jsoup.safety.Whitelist.getEnforcedAttributes(java.lang.String)",
        "snippet": "    Attributes getEnforcedAttributes(String tagName) {\n        Attributes attrs = new Attributes();\n        TagName tag = TagName.valueOf(tagName);\n        if (enforcedAttributes.containsKey(tag)) {\n            Map<AttributeKey, AttributeValue> keyVals = enforcedAttributes.get(tag);\n            for (Map.Entry<AttributeKey, AttributeValue> entry : keyVals.entrySet()) {\n                attrs.put(entry.getKey().toString(), entry.getValue().toString());\n            }\n        }\n        return attrs;\n    }",
        "begin_line": 332,
        "end_line": 342,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/safety/Whitelist.java",
        "class_name": "org.jsoup.safety.Whitelist",
        "signature": "org.jsoup.safety.Whitelist.TagName.TagName(java.lang.String)",
        "snippet": "        TagName(String value) {\n            super(value);\n        }",
        "begin_line": 347,
        "end_line": 349,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/safety/Whitelist.java",
        "class_name": "org.jsoup.safety.Whitelist",
        "signature": "org.jsoup.safety.Whitelist.TagName.valueOf(java.lang.String)",
        "snippet": "        static TagName valueOf(String value) {\n            return new TagName(value);\n        }",
        "begin_line": 351,
        "end_line": 353,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/safety/Whitelist.java",
        "class_name": "org.jsoup.safety.Whitelist",
        "signature": "org.jsoup.safety.Whitelist.AttributeKey.AttributeKey(java.lang.String)",
        "snippet": "        AttributeKey(String value) {\n            super(value);\n        }",
        "begin_line": 357,
        "end_line": 359,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/safety/Whitelist.java",
        "class_name": "org.jsoup.safety.Whitelist",
        "signature": "org.jsoup.safety.Whitelist.AttributeKey.valueOf(java.lang.String)",
        "snippet": "        static AttributeKey valueOf(String value) {\n            return new AttributeKey(value);\n        }",
        "begin_line": 361,
        "end_line": 363,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/safety/Whitelist.java",
        "class_name": "org.jsoup.safety.Whitelist",
        "signature": "org.jsoup.safety.Whitelist.AttributeValue.AttributeValue(java.lang.String)",
        "snippet": "        AttributeValue(String value) {\n            super(value);\n        }",
        "begin_line": 367,
        "end_line": 369,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/safety/Whitelist.java",
        "class_name": "org.jsoup.safety.Whitelist",
        "signature": "org.jsoup.safety.Whitelist.AttributeValue.valueOf(java.lang.String)",
        "snippet": "        static AttributeValue valueOf(String value) {\n            return new AttributeValue(value);\n        }",
        "begin_line": 371,
        "end_line": 373,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/safety/Whitelist.java",
        "class_name": "org.jsoup.safety.Whitelist",
        "signature": "org.jsoup.safety.Whitelist.Protocol.Protocol(java.lang.String)",
        "snippet": "        Protocol(String value) {\n            super(value);\n        }",
        "begin_line": 377,
        "end_line": 379,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/safety/Whitelist.java",
        "class_name": "org.jsoup.safety.Whitelist",
        "signature": "org.jsoup.safety.Whitelist.Protocol.valueOf(java.lang.String)",
        "snippet": "        static Protocol valueOf(String value) {\n            return new Protocol(value);\n        }",
        "begin_line": 381,
        "end_line": 383,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/safety/Whitelist.java",
        "class_name": "org.jsoup.safety.Whitelist",
        "signature": "org.jsoup.safety.Whitelist.TypedValue.TypedValue(java.lang.String)",
        "snippet": "        TypedValue(String value) {\n            Validate.notNull(value);\n            this.value = value;\n        }",
        "begin_line": 389,
        "end_line": 392,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/safety/Whitelist.java",
        "class_name": "org.jsoup.safety.Whitelist",
        "signature": "org.jsoup.safety.Whitelist.TypedValue.hashCode()",
        "snippet": "        @Override\n        public int hashCode() {\n            final int prime = 31;\n            int result = 1;\n            result = prime * result + ((value == null) ? 0 : value.hashCode());\n            return result;\n        }",
        "begin_line": 394,
        "end_line": 400,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/safety/Whitelist.java",
        "class_name": "org.jsoup.safety.Whitelist",
        "signature": "org.jsoup.safety.Whitelist.TypedValue.equals(java.lang.Object)",
        "snippet": "        @Override\n        public boolean equals(Object obj) {\n            if (this == obj) return true;\n            if (obj == null) return false;\n            if (getClass() != obj.getClass()) return false;\n            TypedValue other = (TypedValue) obj;\n            if (value == null) {\n                if (other.value != null) return false;\n            } else if (!value.equals(other.value)) return false;\n            return true;\n        }",
        "begin_line": 402,
        "end_line": 412,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/safety/Whitelist.java",
        "class_name": "org.jsoup.safety.Whitelist",
        "signature": "org.jsoup.safety.Whitelist.TypedValue.toString()",
        "snippet": "        @Override\n        public String toString() {\n            return value;\n        }",
        "begin_line": 414,
        "end_line": 417,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/safety/Cleaner.java",
        "class_name": "org.jsoup.safety.Cleaner",
        "signature": "org.jsoup.safety.Cleaner.Cleaner(org.jsoup.safety.Whitelist)",
        "snippet": "    public Cleaner(Whitelist whitelist) {\n        Validate.notNull(whitelist);\n        this.whitelist = whitelist;\n    }",
        "begin_line": 28,
        "end_line": 31,
        "comment": "\n     Create a new cleaner, that sanitizes documents using the supplied whitelist.\n     @param whitelist white-list to clean with\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/safety/Cleaner.java",
        "class_name": "org.jsoup.safety.Cleaner",
        "signature": "org.jsoup.safety.Cleaner.clean(org.jsoup.nodes.Document)",
        "snippet": "    public Document clean(Document dirtyDocument) {\n        Validate.notNull(dirtyDocument);\n\n        Document clean = Document.createShell(dirtyDocument.baseUri());\n        copySafeNodes(dirtyDocument.body(), clean.body());\n\n        return clean;\n    }",
        "begin_line": 39,
        "end_line": 46,
        "comment": "\n     Creates a new, clean document, from the original dirty document, containing only elements allowed by the whitelist.\n     The original document is not modified. Only elements from the dirt document's <code>body</code> are used.\n     @param dirtyDocument Untrusted base document to clean.\n     @return cleaned document.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/safety/Cleaner.java",
        "class_name": "org.jsoup.safety.Cleaner",
        "signature": "org.jsoup.safety.Cleaner.isValid(org.jsoup.nodes.Document)",
        "snippet": "    public boolean isValid(Document dirtyDocument) {\n        Validate.notNull(dirtyDocument);\n\n        Document clean = Document.createShell(dirtyDocument.baseUri());\n        int numDiscarded = copySafeNodes(dirtyDocument.body(), clean.body());\n        return numDiscarded == 0;\n    }",
        "begin_line": 58,
        "end_line": 64,
        "comment": "\n     Dertmines if the input document is valid, against the whitelist. It is considered valid if all the tags and attributes\n     in the input HTML are allowed by the whitelist.\n     <p/>\n     This method can be used as a validator for user input forms. An invalid document will still be cleaned successfully\n     using the {@link #clean(Document)} document. If using as a validator, it is recommended to still clean the document\n     to ensure enforced attributes are set correctly, and that the output is tidied.\n     @param dirtyDocument document to test\n     @return true if no tags or attributes need to be removed; false if they do\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/safety/Cleaner.java",
        "class_name": "org.jsoup.safety.Cleaner",
        "signature": "org.jsoup.safety.Cleaner.copySafeNodes(org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
        "snippet": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\n        int numDiscarded = 0;\n\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
        "begin_line": 72,
        "end_line": 98,
        "comment": "\n     Iterates the input and copies trusted nodes (tags, attributes, text) into the destination.\n     @param source source of HTML\n     @param dest destination element to copy into\n     @return number of discarded elements (that were considered unsafe)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/safety/Cleaner.java",
        "class_name": "org.jsoup.safety.Cleaner",
        "signature": "org.jsoup.safety.Cleaner.createSafeElement(org.jsoup.nodes.Element)",
        "snippet": "    private ElementMeta createSafeElement(Element sourceEl) {\n        String sourceTag = sourceEl.tagName();\n        Attributes destAttrs = new Attributes();\n        Element dest = new Element(Tag.valueOf(sourceTag), sourceEl.baseUri(), destAttrs);\n        int numDiscarded = 0;\n\n        Attributes sourceAttrs = sourceEl.attributes();\n        for (Attribute sourceAttr : sourceAttrs) {\n            if (whitelist.isSafeAttribute(sourceTag, sourceEl, sourceAttr))\n                destAttrs.put(sourceAttr);\n            else\n                numDiscarded++;\n        }\n        Attributes enforcedAttrs = whitelist.getEnforcedAttributes(sourceTag);\n        destAttrs.addAll(enforcedAttrs);\n\n        return new ElementMeta(dest, numDiscarded);\n    }",
        "begin_line": 100,
        "end_line": 117,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/main/java/org/jsoup/safety/Cleaner.java",
        "class_name": "org.jsoup.safety.Cleaner",
        "signature": "org.jsoup.safety.Cleaner.ElementMeta.ElementMeta(org.jsoup.nodes.Element, int)",
        "snippet": "        ElementMeta(Element el, int numAttribsDiscarded) {\n            this.el = el;\n            this.numAttribsDiscarded = numAttribsDiscarded;\n        }",
        "begin_line": 123,
        "end_line": 126,
        "comment": "",
        "resolved_comments": {}
    }
]