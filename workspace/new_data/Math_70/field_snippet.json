[
    {
        "class_name": "org.apache.commons.math.FunctionEvaluationException",
        "src_path": "src/main/java/org/apache/commons/math/FunctionEvaluationException.java",
        "signature": "org.apache.commons.math.FunctionEvaluationException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -4305020489115478365L;",
        "begin_line": 32,
        "end_line": 32,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.FunctionEvaluationException",
        "src_path": "src/main/java/org/apache/commons/math/FunctionEvaluationException.java",
        "signature": "org.apache.commons.math.FunctionEvaluationException.FAILED_EVALUATION_MESSAGE",
        "snippet": "    private static final String FAILED_EVALUATION_MESSAGE =\n        \"evaluation failed for argument = {0}\";",
        "begin_line": 35,
        "end_line": 36,
        "comment": " Message for failed evaluation. "
    },
    {
        "class_name": "org.apache.commons.math.FunctionEvaluationException",
        "src_path": "src/main/java/org/apache/commons/math/FunctionEvaluationException.java",
        "signature": "org.apache.commons.math.FunctionEvaluationException.argument",
        "snippet": "    private double[] argument;",
        "begin_line": 39,
        "end_line": 39,
        "comment": " Argument causing function evaluation failure "
    },
    {
        "class_name": "org.apache.commons.math.DuplicateSampleAbscissaException",
        "src_path": "src/main/java/org/apache/commons/math/DuplicateSampleAbscissaException.java",
        "signature": "org.apache.commons.math.DuplicateSampleAbscissaException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -2271007547170169872L;",
        "begin_line": 28,
        "end_line": 28,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.MessagesResources_fr",
        "src_path": "src/main/java/org/apache/commons/math/MessagesResources_fr.java",
        "signature": "org.apache.commons.math.MessagesResources_fr.CONTENTS",
        "snippet": "  private static final Object[][] CONTENTS = {\n\n    // org.apache.commons.math.util.MathUtils\n    { \"must have n >= k for binomial coefficient (n,k), got n = {0}, k = {1}\",\n      \"n doit \\u00eatre sup\\u00e9rieur ou \\u00e9gal \\u00e0 k \" +\n      \"pour le coefficient du bin\\u00f4me (n,k), or n = {0}, k = {1}\" },\n    { \"must have n >= 0 for binomial coefficient (n,k), got n = {0}\",\n      \"n doit \\u00eatre positif pour le coefficient du bin\\u00f4me (n,k), or n = {0}\" },\n    { \"must have n >= 0 for n!, got n = {0}\",\n      \"n doit \\u00eatre positif pour le calcul de n!, or n = {0}\" },\n    { \"overflow: gcd({0}, {1}) is 2^31\",\n      \"d\\u00e9passement de capacit\\u00e9 : le PGCD de {0} et {1} vaut 2^31\" },\n    { \"overflow: gcd({0}, {1}) is 2^63\",\n      \"d\\u00e9passement de capacit\\u00e9 : le PGCD de {0} et {1} vaut 2^63\" },\n    { \"overflow: lcm({0}, {1}) is 2^31\",\n      \"d\\u00e9passement de capacit\\u00e9 : le MCM de {0} et {1} vaut 2^31\" },\n    { \"overflow: lcm({0}, {1}) is 2^63\",\n      \"d\\u00e9passement de capacit\\u00e9 : le MCM de {0} et {1} vaut 2^63\" },\n    { \"cannot raise an integral value to a negative power ({0}^{1})\",\n      \"impossible d''\\u00e9lever une valeur enti\\u00e8re \" +\n      \"\\u00e0 une puissance n\\u00e9gative ({0}^{1})\" },\n    { \"invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})\",\n      \"m\\u00e9thode d''arondi {0} invalide, m\\u00e9thodes valides : {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})\" },\n    { \"Cannot normalize to an infinite value\",\n      \"impossible de normaliser vers une valeur infinie\" },\n    { \"Cannot normalize to NaN\",\n      \"impossible de normaliser vers NaN\" },\n    { \"Array contains an infinite element, {0} at index {1}\",\n      \"le tableau contient l''\\u00e9l\\u00e9ment infini {0} \\u00e0 l''index {1}\" },\n\n    // org.apache.commons.math.FunctionEvaluationException\n    { \"evaluation failed for argument = {0}\",\n      \"erreur d''\\u00e9valuation pour l''argument {0}\" },\n\n    // org.apache.commons.math.DuplicateSampleAbscissaException\n    { \"Abscissa {0} is duplicated at both indices {1} and {2}\",\n      \"Abscisse {0} dupliqu\\u00e9e aux indices {1} et {2}\" },\n\n    // org.apache.commons.math.ConvergenceException\n    { \"Convergence failed\",\n      \"\\u00c9chec de convergence\" },\n\n    // org.apache.commons.math.ArgumentOutsideDomainException\n    { \"Argument {0} outside domain [{1} ; {2}]\",\n      \"Argument {0} hors du domaine [{1} ; {2}]\" },\n\n    // org.apache.commons.math.MaxIterationsExceededException\n    { \"Maximal number of iterations ({0}) exceeded\",\n      \"Nombre maximal d''it\\u00e9rations ({0}) d\\u00e9pass\\u00e9\" },\n\n    // org.apache.commons.math.MaxEvaluationsExceededException\n    { \"Maximal number of evaluations ({0}) exceeded\",\n      \"Nombre maximal d''\\u00e9valuations ({0}) d\\u00e9pass\\u00e9\" },\n\n    // org.apache.commons.math.analysis.interpolation.SplineInterpolator\n    // org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm\n    // org.apache.commons.math.DimensionMismatchException\n    // org.apache.commons.math.optimization.LeastSquaresConverter\n    // org.apache.commons.math.optimization.direct.DirectSearchOptimizer\n    // org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer\n    // org.apache.commons.math.ode.ContinuousOutputModel\n    // org.apache.commons.math.random.UncorrelatedRandomVectorGenerator\n    // org.apache.commons.math.stat.regression.AbstractMultipleLinearRegression\n    // org.apache.commons.math.stat.inference.ChiSquareTestImpl\n    // org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatingFunction\n    { \"dimension mismatch {0} != {1}\",\n      \"dimensions incompatibles {0} != {1}\" },\n\n    // org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatingFunction\n    { \"no data\",\n      \"aucune donn\\u00e9e\" },\n\n    // org.apache.commons.math.analysis.interpolation.MicrosphereInterpolator\n    { \"brightness exponent should be positive or null, but got {0}\",\n      \"l''exposant de brillance devrait \\u00eatre positif ou null, or e = {0}\" },\n    { \"number of microsphere elements must be positive, but got {0}\",\n      \"le nombre d''\\u00e9l\\u00e9ments de la microsph\\u00e8re devrait \\u00eatre positif, or n = {0}\" },\n\n   // org.apache.commons.math.linear.decomposition.NotPositiveDefiniteMatrixException\n    { \"not positive definite matrix\",\n      \"matrice non d\\u00e9finie positive\" },\n\n    // org.apache.commons.math.linear.decomposition.NotSymmetricMatrixException\n    { \"not symmetric matrix\",\n      \"matrice non symm\\u00e9trique\" },\n\n    // org.apache.commons.math.fraction.FractionConversionException\n    { \"Unable to convert {0} to fraction after {1} iterations\",\n      \"Impossible de convertir {0} en fraction apr\\u00e8s {1} it\\u00e9rations\" },\n    { \"Overflow trying to convert {0} to fraction ({1}/{2})\",\n      \"D\\u00e9passement de capacit\\u00e9 lors de la conversion de {0} en fraction ({1}/{2})\" },\n\n    // org.apache.commons.math.fraction.BigFraction\n    { \"numerator is null\",\n      \"le num\\u00e9rateur est null\" },\n    { \"denimonator is null\",\n      \"le d\\u00e9nominateur est null\" },\n    { \"denominator must be different from 0\",\n      \"le d\\u00e9nominateur doit \\u00eatre diff\\u00e9rent de 0\" },\n    { \"cannot convert NaN value\",\n      \"les valeurs NaN ne peuvent \\u00eatre converties\" },\n    { \"cannot convert infinite value\",\n      \"les valeurs infinies ne peuvent \\u00eatre converties\" },\n\n    // org.apache.commons.math.fraction.AbstractFormat\n    { \"denominator format can not be null\",\n      \"le format du d\\u00e9nominateur ne doit pas \\u00eatre nul\" },\n    { \"numerator format can not be null\",\n      \"le format du num\\u00e9rateur ne doit pas \\u00eatre nul\" },\n\n    // org.apache.commons.math.fraction.FractionFormat\n    { \"cannot convert given object to a fraction number: {0}\",\n      \"impossible de convertir l''objet sous forme d''un nombre rationnel : {0}\" },\n\n    // org.apache.commons.math.fraction.FractionFormat\n    // org.apache.commons.math.fraction.BigFractionFormat\n    { \"unparseable fraction number: \\\"{0}\\\"\",\n      \"\\u00e9chec d''analyse du nombre rationnel \\\"{0}\\\"\" },\n    { \"cannot format given object as a fraction number\",\n      \"impossible de formater l''objet sous forme d''un nombre rationnel\" },\n\n    // org.apache.commons.math.fraction.ProperFractionFormat\n    // org.apache.commons.math.fraction.ProperBigFractionFormat\n    { \"whole format can not be null\",\n      \"le format complet ne doit pas \\u00eatre nul\" },\n\n    // org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils\n    { \"function is null\",\n      \"la fonction est nulle\" },\n    { \"bad value for maximum iterations number: {0}\",\n      \"valeur invalide pour le nombre maximal d''it\\u00e9rations : {0}\" },\n    { \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n      \"param\\u00e8tres d''encadrement invalides : borne inf\\u00e9rieure = {0}, valeur initiale = {1}, borne sup\\u00e9rieure = {2}\" },\n    { \"number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper bound={4},\" +\n        \" final a value={5}, final b value={6}, f(a)={7}, f(b)={8}\",\n      \"nombre d''it\\u00e9rations = {0}, it\\u00e9rations maximum = {1}, valeur initiale = {2},\" +\n        \" borne inf\\u00e9rieure = {3}, borne sup\\u00e9rieure = {4},\" +\n        \" valeur a finale = {5}, valeur b finale = {6}, f(a) = {7}, f(b) = {8}\" },\n\n    // org.apache.commons.math.analysis.solvers.LaguerreSolver\n    { \"polynomial degree must be positive: degree={0}\",\n      \"le polyn\\u00f4me doit \\u00eatre de degr\\u00e9 positif : degr\\u00e9 = {0}\" },\n\n    // org.apache.commons.math.analysis.solvers.SecantSolver\n    { \"function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]\",\n      \"les valeurs de la fonctions aux bornes sont de m\\u00eame signe, bornes : [{0}, {1}], valeurs : [{2}, {3}]\" },\n\n    // org.apache.commons.math.analysis.interpolation.SplineInterpolator\n    // org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm\n    { \"{0} points are required, got only {1}\",\n      \"{0} sont n\\u00e9cessaires, seuls {1} ont \\u00e9t\\u00e9 fournis\" },\n\n    // org.apache.commons.math.analysis.interpolation.SplineInterpolator\n    { \"points {0} and {1} are not strictly increasing ({2} >= {3})\",\n      \"les points {0} et {1} ne sont pas strictement croissants ({2} >= {3})\" },\n    { \"points {0} and {1} are not strictly decreasing ({2} <= {3})\",\n      \"les points {0} et {1} ne sont pas strictement d\\u00e9croissants ({2} <= {3})\" },\n    { \"points {0} and {1} are not increasing ({2} > {3})\",\n      \"les points {0} et {1} ne sont pas croissants ({2} > {3})\" },\n    { \"points {0} and {1} are not decreasing ({2} < {3})\",\n      \"les points {0} et {1} ne sont pas d\\u00e9croissants ({2} < {3})\" },\n\n    // org.apache.commons.math.analysis.interpolation.LoessInterpolator\n    { \"bandwidth must be in the interval [0,1], but got {0}\",\n      \"la largeur de bande doit \\u00eatre dans l''intervalle [0, 1], alors qu'elle vaut {0}\" },\n    { \"the number of robustness iterations must be non-negative, but got {0}\",\n      \"le nombre d''it\\u00e9rations robuste ne peut \\u00eatre n\\u00e9gatif, alors qu''il est de {0}\" },\n    { \"Loess expects the abscissa and ordinate arrays to be of the same size, \" +\n      \"but got {0} abscissae and {1} ordinatae\",\n      \"la r\\u00e9gression Loess n\\u00e9cessite autant d''abscisses que d''ordonn\\u00e9es, \" +\n      \"mais {0} abscisses et {1} ordonn\\u00e9es ont \\u00e9t\\u00e9 fournies\" },\n    { \"Loess expects at least 1 point\",\n      \"la r\\u00e9gression Loess n\\u00e9cessite au moins un point\" },\n    { \"the bandwidth must be large enough to accomodate at least 2 points. There are {0} \" +\n      \" data points, and bandwidth must be at least {1}  but it is only {2}\",\n      \"la largeur de bande doit \\u00eatre assez grande pour supporter au moins 2 points. Il y a {0}\" +\n      \"donn\\u00e9es et la largeur de bande doit \\u00eatre au moins de {1}, or elle est seulement de {2}\" },\n    { \"all abscissae must be finite real numbers, but {0}-th is {1}\",\n      \"toutes les abscisses doivent \\u00eatre des nombres r\\u00e9els finis, mais l''abscisse {0} vaut {1}\" },\n    { \"all ordinatae must be finite real numbers, but {0}-th is {1}\",\n      \"toutes les ordonn\\u00e9es doivent \\u00eatre des nombres r\\u00e9els finis, mais l''ordonn\\u00e9e {0} vaut {1}\" },\n    { \"all weights must be finite real numbers, but {0}-th is {1}\",\n      \"tous les poids doivent \\u00eatre des nombres r\\u00e9els finis, mais le poids {0} vaut {1}\" },\n    { \"the abscissae array must be sorted in a strictly increasing order, \" +\n      \"but the {0}-th element is {1} whereas {2}-th is {3}\",\n      \"les abscisses doivent \\u00eatre en ordre strictement croissant, \" +\n      \"mais l''\\u00e9l\\u00e9ment {0} vaut {1} alors que l''\\u00e9l\\u00e9ment {2} vaut {3}\" },\n\n    // org.apache.commons.math.util.ContinuedFraction\n    { \"Continued fraction convergents diverged to +/- infinity for value {0}\",\n      \"Divergence de fraction continue \\u00e0 l''infini pour la valeur {0}\" },\n    { \"Continued fraction convergents failed to converge for value {0}\",\n      \"\\u00c9chec de convergence de fraction continue pour la valeur {0}\" },\n    { \"Continued fraction diverged to NaN for value {0}\",\n      \"Divergence de fraction continue \\u00e0 NaN pour la valeur {0}\"},\n\n    // org.apache.commons.math.util.DefaultTransformer\n    { \"Conversion Exception in Transformation, Object is null\",\n      \"Exception de conversion dans une transformation, l''objet est nul\" },\n    { \"Conversion Exception in Transformation: {0}\",\n      \"Exception de conversion dans une transformation : {0}\" },\n\n    // org.apache.commons.math.optimization.MultiStartOptimizer\n    { \"no optimum computed yet\",\n      \"aucun optimum n''a encore \\u00e9t\\u00e9 calcul\\u00e9\" },\n\n    // org.apache.commons.math.optimization.direct.DirectSearchOptimizer\n    { \"simplex must contain at least one point\",\n      \"le simplex doit contenir au moins un point\" },\n    { \"equal vertices {0} and {1} in simplex configuration\",\n      \"sommets {0} et {1} \\u00e9gaux dans la configuration du simplex\" },\n\n    // org.apache.commons.math.estimation.AbstractEstimation\n    { \"maximal number of evaluations exceeded ({0})\",\n      \"nombre maximal d''\\u00e9valuations d\\u00e9pass\\u00e9 ({0})\" },\n\n    // org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer\n    { \"unable to compute covariances: singular problem\",\n      \"impossible de calculer les covariances : probl\\u00e8me singulier\"},\n    { \"no degrees of freedom ({0} measurements, {1} parameters)\",\n      \"aucun degr\\u00e9 de libert\\u00e9 ({0} mesures, {1} param\\u00e8tres)\" },\n\n    // org.apache.commons.math.optimization.general.GaussNewtonOptimizer\n    { \"unable to solve: singular problem\",\n      \"r\\u00e9solution impossible : probl\\u00e8me singulier\" },\n\n    // org.apache.commons.math.optimization.general.LevenbergMarquardtEstimator\n    { \"cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible\",\n      \"trop petite tol\\u00e9rance relative sur le co\\u00fbt ({0}), aucune r\\u00e9duction de la somme des carr\\u00e9s n''est possible\" },\n    { \"parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible\",\n      \"trop petite tol\\u00e9rance relative sur les param\\u00e8tres ({0}), aucune am\\u00e9lioration de la solution approximative n''est possible\" },\n    { \"orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian\",\n      \"trop petite tol\\u00e9rance sur l''orthogonalit\\u00e9 ({0}), la solution est orthogonale \\u00e0 la jacobienne\" },\n    { \"unable to perform Q.R decomposition on the {0}x{1} jacobian matrix\",\n      \"impossible de calculer la factorisation Q.R de la matrice jacobienne {0}x{1}\" },\n\n    // org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizer\n    { \"unable to bracket optimum in line search\",\n      \"impossible d''encadrer l''optimum lors de la recherche lin\\u00e9aire\" },\n\n    // org.apache.commons.math.optimization.fitting.HarmonicCoefficientsGuesser\n    { \"unable to first guess the harmonic coefficients\",\n      \"impossible de faire une premi\\u00e8re estimation des coefficients harmoniques\" },\n\n    // org.apache.commons.math.optimization.fitting.HarmonicCoefficientsGuesser\n    { \"sample contains {0} observed points, at least {1} are required\",\n      \"l''\\u00e9chantillon ne contient que {0} points alors qu''au moins {1} sont n\\u00e9cessaires\" },\n\n    // org.apache.commons.math.optimization.linear.NoFeasibleSolutionException\n    { \"no feasible solution\",\n      \"aucune solution r\\u00e9alisable\" },\n\n    // org.apache.commons.math.optimization.linear.UnboundedSolutionException\n    { \"unbounded solution\",\n      \"solution non born\\u00e9e\" },\n\n    // org.apache.commons.math.geometry.CardanEulerSingularityException\n    { \"Cardan angles singularity\",\n      \"singularit\\u00e9 d''angles de Cardan\" },\n    { \"Euler angles singularity\",\n      \"singularit\\u00e9 d''angles d''Euler\" },\n\n    // org.apache.commons.math.geometry.Rotation\n    { \"a {0}x{1} matrix cannot be a rotation matrix\",\n      \"une matrice {0}x{1} ne peut pas \\u00eatre une matrice de rotation\" },\n    { \"the closest orthogonal matrix has a negative determinant {0}\",\n      \"la matrice orthogonale la plus proche a un d\\u00e9terminant n\\u00e9gatif {0}\" },\n    { \"unable to orthogonalize matrix in {0} iterations\",\n      \"impossible de rendre la matrice orthogonale en {0} it\\u00e9rations\" },\n\n    // org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator\n    { \"minimal step size ({0,number,0.00E00}) reached, integration needs {1,number,0.00E00}\",\n      \"pas minimal ({0,number,0.00E00}) atteint, l''int\\u00e9gration n\\u00e9cessite {1,number,0.00E00}\" },\n    { \"dimensions mismatch: state vector has dimension {0}, absolute tolerance vector has dimension {1}\",\n      \"incompatibilit\\u00e9 de dimensions entre le vecteur d''\\u00e9tat ({0}), et le vecteur de tol\\u00e9rance absolue ({1})\" },\n    { \"dimensions mismatch: state vector has dimension {0}, relative tolerance vector has dimension {1}\",\n      \"incompatibilit\\u00e9 de dimensions entre le vecteur d''\\u00e9tat ({0}), et le vecteur de tol\\u00e9rance relative ({1})\" },\n\n    // org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator,\n    // org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator\n    { \"dimensions mismatch: ODE problem has dimension {0}, initial state vector has dimension {1}\",\n      \"incompatibilit\\u00e9 de dimensions entre le probl\\u00e8me ODE ({0}), et le vecteur d''\\u00e9tat initial ({1})\" },\n    { \"dimensions mismatch: ODE problem has dimension {0}, final state vector has dimension {1}\",\n      \"incompatibilit\\u00e9 de dimensions entre le probl\\u00e8me ODE ({0}), et le vecteur d''\\u00e9tat final ({1})\" },\n    { \"too small integration interval: length = {0}\",\n      \"intervalle d''int\\u00e9gration trop petit : {0}\" },\n\n    // org.apache.commons.math.ode.MultistepIntegrator\n    { \"{0} method needs at least one previous point\",\n      \"la m\\u00e9thode {0} n\\u00e9cessite au moins un point pr\\u00e9c\\u00e9dent\" },\n\n    // org.apache.commons.math.ode.ContinuousOutputModel\n    // org.apache.commons.math.optimization.direct.DirectSearchOptimizer\n    { \"unexpected exception caught\",\n      \"exception inattendue lev\\u00e9e\" },\n    { \"propagation direction mismatch\",\n      \"directions de propagation incoh\\u00e9rentes\" },\n    { \"{0} wide hole between models time ranges\",\n      \"trou de longueur {0} entre les domaines temporels des mod\\u00e8les\" },\n\n    // org.apache.commons.math.optimization.direct.DirectSearchOptimizer\n    { \"none of the {0} start points lead to convergence\",\n      \"aucun des {0} points de d\\u00e9part n''aboutit \\u00e0 une convergence\"  },\n\n    // org.apache.commons.math.random.ValueServer\n    { \"unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})\",\n      \"mode {0} inconnu, modes connus : {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) et {11} ({12})\" },\n    { \"digest not initialized\",\n      \"mod\\u00e8le empirique non initialis\\u00e9\" },\n\n    // org.apache.commons.math.random.EmpiricalDistributionImpl\n    { \"distribution not loaded\",\n      \"aucune distribution n''a \\u00e9t\\u00e9 charg\\u00e9e\" },\n    { \"no bin selected\",\n      \"aucun compartiment s\\u00e9lectionn\\u00e9\" },\n    { \"input data comes from unsupported datasource: {0}, supported sources: {1}, {2}\",\n      \"les donn\\u00e9es d''entr\\u00e9e proviennent \" +\n      \"d''une source non support\\u00e9e : {0}, sources support\\u00e9es : {1}, {2}\" },\n\n    // org.apache.commons.math.random.EmpiricalDistributionImpl\n    // org.apache.commons.math.random.ValueServer\n    { \"URL {0} contains no data\",\n      \"l''adresse {0} ne contient aucune donn\\u00e9e\" },\n\n    // org.apache.commons.math.random.AbstractRandomGenerator\n    // org.apache.commons.math.random.BitsStreamGenerator\n    { \"upper bound must be positive ({0})\",\n      \"la borne sup\\u00e9rieure doit \\u00eatre positive ({0})\" },\n\n    // org.apache.commons.math.random.RandomDataImpl\n    { \"length must be positive ({0})\",\n      \"la longueur doit \\u00eatre positive ({0})\" },\n    { \"upper bound ({0}) must be greater than lower bound ({1})\",\n      \"la borne sup\\u00e9rieure ({0}) doit \\u00eatre sup\\u00e9rieure\" +\n      \" \\u00e0 la borne inf\\u00e9rieure ({1})\" },\n    { \"permutation k ({0}) exceeds n ({1})\",\n      \"la permutation k ({0}) d\\u00e9passe n ({1})\" },\n    { \"permutation k ({0}) must be positive\",\n      \"la permutation k ({0}) doit \\u00eatre positive\" },\n    { \"sample size ({0}) exceeds collection size ({1})\",\n      \"la taille de l''\\u00e9chantillon ({0}) d\\u00e9passe la taille de la collection ({1})\" },\n\n    // org.apache.commons.math.linear.decomposition.EigenDecompositionImpl\n    { \"cannot solve degree {0} equation\",\n      \"impossible de r\\u00e9soudre une \\u00e9quation de degr\\u00e9 {0}\" },\n    { \"eigen decomposition of assymetric matrices not supported yet\",\n      \"la d\\u00e9composition en valeurs/vecteurs propres de matrices \" +\n      \"non sym\\u00e9triques n''est pas encore disponible\" },\n\n    // org.apache.commons.math.linear.decomposition.NonSquareMatrixException\n    // org.apache.commons.math.stat.regression.AbstractMultipleLinearRegression\n    { \"a {0}x{1} matrix was provided instead of a square matrix\",\n      \"une matrice {0}x{1} a \\u00e9t\\u00e9 fournie \\u00e0 la place d''une matrice carr\\u00e9e\" },\n\n    // org.apache.commons.math.linear.decomposition.SingularMatrixException\n    { \"matrix is singular\",\n      \"matrice singuli\\u00e8re\" },\n\n    // org.apache.commons.math.linear.decomposition.SingularValueDecompositionImpl\n    { \"cutoff singular value is {0}, should be at most {1}\",\n      \"la valeur singuli\\u00e8re de coupure vaut {0}, elle ne devrait pas d\\u00e9passer {1}\" },\n\n    // org.apache.commons.math.linear.decomposition.CholeskyDecompositionImpl\n    // org.apache.commons.math.linear.decomposition.EigenDecompositionImpl\n    // org.apache.commons.math.linear.decomposition.LUDecompositionImpl\n    // org.apache.commons.math.linear.decomposition.QRDecompositionImpl\n    // org.apache.commons.math.linear.decomposition.SingularValueDecompositionImpl\n    { \"dimensions mismatch: got {0}x{1} but expected {2}x{3}\",\n      \"dimensions incoh\\u00e9rentes : {0}x{1} \\u00e0 la place de {2}x{3}\" },\n\n    // org.apache.commons.math.linear.decomposition.CholeskyDecompositionImpl\n    // org.apache.commons.math.linear.decomposition.EigenDecompositionImpl\n    // org.apache.commons.math.linear.decomposition.LUDecompositionImpl\n    // org.apache.commons.math.linear.decomposition.QRDecompositionImpl\n    // org.apache.commons.math.linear.decomposition.SingularValueDecompositionImpl\n    // org.apache.commons.math.linear.ArrayRealVector\n    // org.apache.commons.math.linear.SparseRealVector\n    { \"vector length mismatch: got {0} but expected {1}\",\n      \"taille de vecteur invalide : {0} au lieu de {1} attendue\" },\n\n    // org.apache.commons.math.linear.ArrayRealVector\n    // org.apache.commons.math.linear.ArrayFieldVector\n    // org.apache.commons.math.linear.SparseRealVector\n    { \"index {0} out of allowed range [{1}, {2}]\",\n      \"index {0} hors de la plage autoris\\u00e9e [{1}, {2}]\" },\n    { \"vector must have at least one element\",\n      \"un vecteur doit comporter au moins un \\u00e9l\\u00e9ment\" },\n    { \"position {0} and size {1} don't fit to the size of the input array {2}\",\n      \"la position {0} et la taille {1} sont incompatibles avec la taille du tableau d''entr\\u00e9e {2}\"},\n\n    // org.apache.commons.math.linear.AbstractRealMatrix\n    // org.apache.commons.math.linear.AbstractFieldMatrix\n    { \"invalid row dimension: {0} (must be positive)\",\n      \"nombre de lignes invalide : {0} (doit \\u00eatre positif)\" },\n    { \"invalid column dimension: {0} (must be positive)\",\n      \"nombre de colonnes invalide : {0} (doit \\u00eatre positif)\" },\n    { \"matrix must have at least one row\",\n      \"une matrice doit comporter au moins une ligne\" },\n    { \"matrix must have at least one column\",\n      \"une matrice doit comporter au moins une colonne\" },\n\n    // org.apache.commons.math.linear.AbstractRealMatrix\n    // org.apache.commons.math.linear.AbstractFieldMatrix\n    // org.apache.commons.math.stat.inference.ChiSquareTestImpl\n    { \"some rows have length {0} while others have length {1}\",\n      \"certaines lignes ont une longueur de {0} alors que d''autres ont une longueur de {1}\" },\n\n    // org.apache.commons.math.linear.MatrixUtils\n    { \"row index {0} out of allowed range [{1}, {2}]\",\n      \"index de ligne {0} hors de la plage autoris\\u00e9e [{1}, {2}]\" },\n    { \"column index {0} out of allowed range [{1}, {2}]\",\n      \"index de colonne {0} hors de la plage autoris\\u00e9e [{1}, {2}]\" },\n    { \"initial row {0} after final row {1}\",\n      \"ligne initiale {0} apr\\u00e8s la ligne finale {1}\" },\n    { \"initial column {0} after final column {1}\",\n      \"colonne initiale {0} apr\\u00e8s la colonne finale {1}\" },\n    { \"empty selected row index array\",\n      \"tableau des indices de lignes s\\u00e9lectionn\\u00e9es vide\" },\n    { \"empty selected column index array\",\n      \"tableau des indices de colonnes s\\u00e9lectionn\\u00e9es vide\" },\n    { \"{0}x{1} and {2}x{3} matrices are not addition compatible\",\n      \"les dimensions {0}x{1} et {2}x{3} sont incompatibles pour l'addition matricielle\" },\n    { \"{0}x{1} and {2}x{3} matrices are not subtraction compatible\",\n      \"les dimensions {0}x{1} et {2}x{3} sont incompatibles pour la soustraction matricielle\" },\n    { \"{0}x{1} and {2}x{3} matrices are not multiplication compatible\",\n      \"les dimensions {0}x{1} et {2}x{3} sont incompatibles pour la multiplication matricielle\" },\n\n    // org.apache.commons.math.linear.BlockRealMatrix\n    { \"wrong array shape (block length = {0}, expected {1})\",\n      \"forme de tableau erron\\u00e9e (bloc de longueur {0} au lieu des {1} attendus)\" },\n\n    // org.apache.commons.math.complex.Complex\n    { \"cannot compute nth root for null or negative n: {0}\",\n     \"impossible de calculer la racine ni\\u00e8me pour n n\\u00e9gatif ou nul : {0}\" },\n\n   // org.apache.commons.math.complex.ComplexFormat\n   { \"unparseable complex number: \\\"{0}\\\"\",\n     \"\\u00e9chec d''analyse du nombre complexe \\\"{0}\\\"\" },\n   { \"cannot format a {0} instance as a complex number\",\n     \"impossible de formater une instance de {0} comme un nombre complexe\" },\n   { \"empty string for imaginary character\",\n     \"cha\\u00eene vide pour le caract\\u00e8 imaginaire\" },\n   { \"null imaginary format\",\n     \"format imaginaire nul\" },\n   { \"null real format\",\n     \"format r\\u00e9el nul\" },\n\n   // org.apache.commons.math.complex.ComplexUtils\n   { \"negative complex module {0}\",\n     \"module n\\u00e9gatif ({0}) pour un nombre complexe\" },\n\n   // org.apache.commons.math.geometry.Vector3DFormat\n   { \"unparseable 3D vector: \\\"{0}\\\"\",\n     \"\\u00e9chec d''analyse du vecteur de dimension 3 \\\"{0}\\\"\" },\n   { \"cannot format a {0} instance as a 3D vector\",\n     \"impossible de formater une instance de {0} comme un vecteur de dimension 3\" },\n\n   // org.apache.commons.math.linear.RealVectorFormat\n   { \"unparseable real vector: \\\"{0}\\\"\",\n     \"\\u00e9chec d''analyse du vecteur r\\u00e9el \\\"{0}\\\"\" },\n   { \"cannot format a {0} instance as a real vector\",\n     \"impossible de formater une instance de {0} comme un vecteur r\\u00e9el\" },\n\n   // org.apache.commons.math.util.ResizableDoubleArray\n   { \"the index specified: {0} is larger than the current maximal index {1}\",\n     \"l''index sp\\u00e9cifi\\u00e9 ({0}) d\\u00e9passe l''index maximal courant ({1})\" },\n   { \"elements cannot be retrieved from a negative array index {0}\",\n     \"impossible d''extraire un \\u00e9l\\u00e9ment \\u00e0 un index n\\u00e9gatif ({0})\" },\n   { \"cannot set an element at a negative index {0}\",\n     \"impossible de mettre un \\u00e9l\\u00e9ment \\u00e0 un index n\\u00e9gatif ({0})\" },\n   { \"cannot substitute an element from an empty array\",\n     \"impossible de substituer un \\u00e9l\\u00e9ment dans un tableau vide\" },\n   { \"contraction criteria ({0}) smaller than the expansion factor ({1}).  This would \" +\n     \"lead to a never ending loop of expansion and contraction as a newly expanded \" +\n     \"internal storage array would immediately satisfy the criteria for contraction.\",\n     \"crit\\u00e8re de contraction ({0}) inf\\u00e9rieur au facteur d''extension. Ceci \" +\n     \"induit une boucle infinie d''extensions/contractions car tout tableau de stockage \" +\n     \"fra\\u00eechement \\u00e9tendu respecte imm\\u00e9diatement le crit\\u00e8re de contraction.\"},\n   { \"contraction criteria smaller than one ({0}).  This would lead to a never ending \" +\n     \"loop of expansion and contraction as an internal storage array length equal \" +\n     \"to the number of elements would satisfy the contraction criteria.\",\n     \"crit\\u00e8re de contraction inf\\u00e9rieur \\u00e0 un ({0}). Ceci induit une boucle \" +\n     \"infinie d''extensions/contractions car tout tableau de stockage de longueur \\u00e9gale \" +\n     \"au nombre d''\\u00e9l\\u00e9ments respecte le crit\\u00e8re de contraction.\" },\n   { \"expansion factor smaller than one ({0})\",\n     \"facteur d''extension inf\\u00e9rieur \\u00e0 un ({0})\"},\n   { \"cannot discard {0} elements from a {1} elements array\",\n     \"impossible d''enlever {0} \\u00e9l\\u00e9ments d''un tableau en contenant {1}\"},\n   { \"cannot discard a negative number of elements ({0})\",\n     \"impossible d''enlever un nombre d''\\u00e9l\\u00e9ments{0} n\\u00e9gatif\"},\n   { \"unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})\",\n     \"mode d''extension {0} no support\\u00e9, les modes support\\u00e9s sont {1} ({2}) et {3} ({4})\" },\n   { \"initial capacity ({0}) is not positive\",\n     \"la capacit\\u00e9 initiale ({0}) n''est pas positive\" },\n   { \"index ({0}) is not positive\",\n     \"l''indice ({0}) n''est pas positif\" },\n\n   // org.apache.commons.math.analysis.polynomials.PolynomialFunction\n   // org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm\n   { \"empty polynomials coefficients array\",\n     \"tableau de coefficients polyn\\u00f4miaux vide\" },\n\n   // org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm\n   { \"array sizes should have difference 1 ({0} != {1} + 1)\",\n     \"les tableaux devraient avoir une diff\\u00e9rence de taille de 1 ({0} != {1} + 1)\" },\n\n   // org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm\n   { \"identical abscissas x[{0}] == x[{1}] == {2} cause division by zero\",\n     \"division par z\\u00e9ro caus\\u00e9e par les abscisses identiques x[{0}] == x[{1}] == {2}\" },\n\n   // org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction\n   { \"spline partition must have at least {0} points, got {1}\",\n     \"une partiction spline n\\u00e9cessite au moins {0} points, seuls {1} ont \\u00e9t\\u00e9 fournis\" },\n   { \"knot values must be strictly increasing\",\n     \"les n\\u0153uds d''interpolation doivent \\u00eatre strictement croissants\" },\n   { \"number of polynomial interpolants must match the number of segments ({0} != {1} - 1)\",\n     \"le nombre d''interpolants polyn\\u00f4miaux doit correspondre au nombre de segments ({0} != {1} - 1)\" },\n\n   // org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl\n   { \"function to solve cannot be null\",\n     \"la fonction \\u00e0 r\\u00e9soudre ne peux pas \\u00eatre nulle\" },\n   { \"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",\n     \"param\\u00e8tres de l''intervalle initial invalides : borne inf = {0}, valeur initiale = {1}, borne sup = {2}\" },\n\n   // org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl\n   // org.apache.commons.math.analysis.solvers.BrentSolver\n   { \"function values at endpoints do not have different signs.  Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n     \"les valeurs de la fonction aux bornes n''ont pas des signes diff\\u00e9rents. Bornes : [{0}, {1}], valeurs : [{2}, {3}]\" },\n\n   // org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl\n   // org.apache.commons.math.analysis.integration.UnivariateRealIntegratorImpl\n   // org.apache.commons.math.transform.FastFourierTransformer\n   { \"endpoints do not specify an interval: [{0}, {1}]\",\n     \"les extr\\u00e9mit\\u00e9s ne constituent pas un intervalle : [{0}, {1}]\" },\n\n   // org.apache.commons.math.analysis.solvers.LaguerreSolver\n   { \"function is not polynomial\",\n     \"la fonction n''est pas p\\u00f4lynomiale\" },\n\n   // org.apache.commons.math.analysis.solvers.NewtonSolver\n   { \"function is not differentiable\",\n     \"la fonction n''est pas diff\\u00e9rentiable\" },\n\n   // org.apache.commons.math.analysis.integration.UnivariateRealIntegratorImpl\n   { \"invalid iteration limits: min={0}, max={1}\",\n     \"limites d''it\\u00e9rations invalides : min = {0}, max = {1}\" },\n\n   // org.apache.commons.math.analysis.integration.LegendreGaussIntegrator\n   { \"{0} points Legendre-Gauss integrator not supported,\" +\n     \" number of points must be in the {1}-{2} range\",\n     \"int\\u00e9grateur de Legendre-Gauss non support\\u00e9 en {0} points, \" +\n     \"le nombre de points doit \\u00eatre entre {1} et {2}\" },\n\n   // org.apache.commons.math.fraction.Fraction\n   { \"zero denominator in fraction {0}/{1}\",\n     \"d\\u00e9nominateur null dans le nombre rationnel {0}/{1}\" },\n   { \"overflow in fraction {0}/{1}, cannot negate\",\n     \"d\\u00e9passement de capacit\\u00e9 pour la fraction {0}/{1}, son signe ne peut \\u00eatre chang\\u00e9\" },\n   { \"overflow, numerator too large after multiply: {0}\",\n     \"d\\u00e9passement de capacit\\u00e9 pour le num\\u00e9rateur apr\\u00e8s multiplication : {0}\" },\n   { \"the fraction to divide by must not be zero: {0}/{1}\",\n     \"division par un nombre rationnel nul : {0}/{1}\" },\n   { \"null fraction\",\n     \"fraction nulle\" },\n\n   // org.apache.commons.math.geometry.Rotation\n   { \"zero norm for rotation axis\",\n     \"norme nulle pour un axe de rotation\" },\n   { \"zero norm for rotation defining vector\",\n     \"norme nulle pour un axe de d\\u00e9finition de rotation\" },\n\n   // org.apache.commons.math.geometry.Vector3D\n   // org.apache.commons.math.linear.ArrayRealVector\n   { \"cannot normalize a zero norm vector\",\n     \"impossible de normer un vecteur de norme nulle\" },\n   { \"zero norm\",\n     \"norme nulle\" },\n\n   // org.apache.commons.math.ConvergingAlgorithmImpl\n   { \"no result available\",\n     \"aucun r\\u00e9sultat n''est disponible\" },\n\n   // org.apache.commons.math.linear.BigMatrixImpl\n   { \"first {0} rows are not initialized yet\",\n     \"les {0} premi\\u00e8res lignes ne sont pas encore initialis\\u00e9es\" },\n   { \"first {0} columns are not initialized yet\",\n     \"les {0} premi\\u00e8res colonnes ne sont pas encore initialis\\u00e9es\" },\n\n   // org.apache.commons.math.stat.Frequency\n   { \"class ({0}) does not implement Comparable\",\n     \"la classe ({0}) n''implante pas l''interface Comparable\" },\n   { \"instance of class {0} not comparable to existing values\",\n     \"l''instance de la classe {0} n''est pas comparable aux valeurs existantes\" },\n\n   // org.apache.commons.math.stat.StatUtils\n   { \"input arrays must have the same positive length ({0} and {1})\",\n     \"les tableaux d''entr\\u00e9e doivent avoir la m\\u00eame taille positive ({0} et {1})\" },\n   { \"input arrays must have the same length and at least two elements ({0} and {1})\",\n     \"les tableaux d''entr\\u00e9e doivent avoir la m\\u00eame taille\" +\n     \" et au moins deux \\u00e9l\\u00e9ments ({0} et {1})\" },\n\n   // org.apache.commons.math.stat.correlation.Covariance\n   { \"arrays must have the same length and both must have at \" +\n     \"least two elements. xArray has size {0}, yArray has {1} elements\",\n     \"les tableaux doivent avoir la m\\u00eame taille \" +\n     \"et comporter au moins deux \\u00e9l\\u00e9ments. \" +\n     \"xArray a une taille de {0}, yArray a {1} \\u00e9l\\u00e9ments\"},\n   { \"insufficient data: only {0} rows and {1} columns.\",\n     \"donn\\u00e9es insuffisantes : seulement {0} lignes et {1} colonnes.\" },\n\n   // org.apache.commons.math.stat.correlation.PearsonsCorrelation\n   { \"covariance matrix is null\",\n     \"la matrice de covariance est nulle\" },\n   { \"invalid array dimensions. xArray has size {0}; yArray has {1} elements\",\n     \"dimensions de tableaux invalides. xArray a une taille de {0}, \" +\n     \"yArray a {1} \\u00e9l\\u00e9ments\" },\n\n   // org.apache.commons.math.stat.descriptive.DescriptiveStatistics\n   { \"window size must be positive ({0})\",\n     \"la taille de la fen\\u00eatre doit \\u00eatre positive ({0})\" },\n   { \"percentile implementation {0} does not support {1}\",\n     \"l''implantation de pourcentage {0} ne dispose pas de la m\\u00e9thode {1}\" },\n   { \"cannot access {0} method in percentile implementation {1}\",\n     \"acc\\u00e8s impossible \\u00e0 la m\\u00e9thode {0}\" +\n     \" dans l''implantation de pourcentage {1}\" },\n   { \"out of bounds quantile value: {0}, must be in (0, 100]\",\n     \"valeur de quantile {0} hors bornes, doit \\u00eatre dans l''intervalle ]0, 100]\" },\n\n   // org.apache.commons.math.stat.descriptive.moment.Variance\n   // org.apache.commons.math.stat.descriptive.moment.SemiVariance\n   // org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic\n   // org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic\n   { \"input values array is null\",\n     \"le tableau des valeurs d''entr\\u00e9es est nul\" },\n\n   // org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic\n   { \"start position cannot be negative ({0})\",\n     \"la position de d\\u00e9part ne peut pas \\u00eatre n\\u00e9gative\" },\n   { \"length cannot be negative ({0})\",\n     \"la longueur ne peut pas \\u00eatre n\\u00e9gative\" },\n   { \"subarray ends after array end\",\n     \"le sous-tableau se termine apr\\u00e8s la fin du tableau\" },\n\n   // org.apache.commons.math.stat.descriptive.moment.GeometricMean\n   // org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics\n   // org.apache.commons.math.stat.descriptive.SummaryStatistics\n   { \"{0} values have been added before statistic is configured\",\n     \"{0} valeurs ont \\u00e9t\\u00e9 ajout\\u00e9es \" +\n     \"avant que la statistique ne soit configur\\u00e9e\" },\n\n   // org.apache.commons.math.stat.descriptive.moment.Kurtosis\n   { \"statistics constructed from external moments cannot be incremented\",\n     \"les statistiques bas\\u00e9es sur des moments externes ne peuvent pas \\u00eatre incr\\u00e9ment\\u00e9es\" },\n   { \"statistics constructed from external moments cannot be cleared\",\n     \"les statistiques bas\\u00e9es sur des moments externes ne peuvent pas \\u00eatre remises \\u00e0 z\\u00e9ro\" },\n\n   // org.apache.commons.math.stat.inference.ChiSquareTestImpl\n   { \"expected array length = {0}, must be at least 2\",\n     \"le tableau des valeurs attendues a une longueur de {0}, elle devrait \\u00eatre au moins de 2\" },\n   { \"observed array length = {0}, must be at least 2\",\n     \"le tableau des valeurs observ\\u00e9es a une longueur de {0}, elle devrait \\u00eatre au moins de 2\" },\n   { \"observed counts are all 0 in first observed array\",\n     \"aucune occurrence dans le premier tableau des observations\" },\n   { \"observed counts are all 0 in second observed array\",\n     \"aucune occurrence dans le second tableau des observations\" },\n   { \"observed counts are both zero for entry {0}\",\n     \"les occurrences observ\\u00e9es sont toutes deux nulles pour l'entr\\u00e9e {0}\" },\n   { \"invalid row dimension: {0} (must be at least 2)\",\n     \"nombre de lignes invalide : {0} (doit \\u00eatre au moins de 2)\" },\n   { \"invalid column dimension: {0} (must be at least 2)\",\n     \"nombre de colonnes invalide : {0} (doit \\u00eatre au moins de 2)\" },\n   { \"element {0} is not positive: {1}\",\n     \"l''\\u00e9l\\u00e9ment {0} n''est pas positif : {1}\" },\n   { \"element {0} is negative: {1}\",\n     \"l''\\u00e9l\\u00e9ment {0} est n\\u00e9gatif : {1}\" },\n   { \"element ({0}, {1}) is negative: {2}\",\n     \"l''\\u00e9l\\u00e9ment ({0}, {1}) est n\\u00e9gatif : {2}\" },\n\n   // org.apache.commons.math.stat.inference.OneWayAnovaImpl\n   { \"two or more categories required, got {0}\",\n     \"deux cat\\u00e9gories ou plus sont n\\u00e9cessaires, il y en a {0}\" },\n   { \"two or more values required in each category, one has {0}\",\n     \"deux valeurs ou plus sont n\\u00e9cessaires pour chaque cat\\u00e9gorie, une cat\\u00e9gorie en a {0}\" },\n\n   // org.apache.commons.math.stat.inference.TTestImpl\n   { \"insufficient data for t statistic, needs at least 2, got {0}\",\n     \"deux valeurs ou plus sont n\\u00e9cessaires pour la statistique t, il y en a {0}\" },\n\n   // org.apache.commons.math.stat.inference.ChiSquareTestImpl\n   // org.apache.commons.math.stat.inference.TTestImpl\n   // org.apache.commons.math.stat.inference.OneWayAnovaImpl\n   // org.apache.commons.math.stat.Regression\n   { \"out of bounds significance level {0}, must be between {1} and {2}\",\n     \"niveau de signification {0} hors domaine, doit \\u00eatre entre {1} et {2}\" },\n\n   // org.apache.commons.math.stat.regression.AbstractMultipleLinearRegression\n   { \"not enough data ({0} rows) for this many predictors ({1} predictors)\",\n     \"pas assez de donn\\u00e9es ({0} lignes) pour {1} pr\\u00e9dicteurs\" },\n\n   // org.apache.commons.math.distribution.AbstractContinuousDistribution\n   // org.apache.commons.math.distribution.AbstractIntegerDistribution\n   // org.apache.commons.math.distribution.ExponentialDistributionImpl\n   // org.apache.commons.math.distribution.BinomialDistributionImpl\n   // org.apache.commons.math.distribution.CauchyDistributionImpl\n   // org.apache.commons.math.distribution.PascalDistributionImpl\n   // org.apache.commons.math.distribution.WeibullDistributionImpl\n   { \"{0} out of [{1}, {2}] range\",\n     \"{0} hors du domaine [{1}, {2}]\" },\n\n   // org.apache.commons.math.distribution.AbstractDistribution\n   // org.apache.commons.math.distribution.AbstractIntegerDistribution\n   { \"lower endpoint ({0}) must be less than or equal to upper endpoint ({1})\",\n     \"la borne inf\\u00e9rieure ({0}) devrait \\u00eatre inf\\u00e9rieure \" +\n     \"ou \\u00e9gale \\u00e0 la borne sup\\u00e9rieure ({1})\" },\n\n   // org.apache.commons.math.distribution.AbstractContinuousDistribution\n   { \"Cumulative probability function returned NaN for argument {0} p = {1}\",\n     \"Fonction de probabilit\\u00e9 cumulative retourn\\u00e9 NaN \\u00e0 l''argument de {0} p = {1}\" },\n   { \"This distribution does not have a density function implemented\",\n     \"La fonction de densit\\u00e9 pour cette distribution n'a pas \\u00e9t\\u00e9 mis en oeuvre\" },\n\n   // org.apache.commons.math.distribution.AbstractIntegerDistribution\n   { \"Discrete cumulative probability function returned NaN for argument {0}\",\n     \"Discr\\u00e8tes fonction de probabilit\\u00e9 cumulative retourn\\u00e9 NaN \\u00e0 l''argument de {0}\" },\n\n\n   // org.apache.commons.math.distribution.BinomialDistributionImpl\n   { \"number of trials must be non-negative ({0})\",\n     \"le nombre d''essais ne doit pas \\u00eatre n\\u00e9gatif ({0})\" },\n\n   // org.apache.commons.math.distribution.ExponentialDistributionImpl\n   // org.apache.commons.math.random.RandomDataImpl\n   { \"mean must be positive ({0})\",\n     \"la moyenne doit \\u00eatre positive ({0})\" },\n\n   // org.apache.commons.math.distribution.FDistributionImpl\n   // org.apache.commons.math.distribution.TDistributionImpl\n   { \"degrees of freedom must be positive ({0})\",\n     \"les degr\\u00e9s de libert\\u00e9 doivent \\u00eatre positifs ({0})\" },\n\n   // org.apache.commons.math.distribution.GammaDistributionImpl\n   { \"alpha must be positive ({0})\",\n     \"alpha doit \\u00eatre positif ({0})\" },\n   { \"beta must be positive ({0})\",\n     \"beta doit \\u00eatre positif ({0})\" },\n\n   // org.apache.commons.math.distribution.HypergeometricDistributionImpl\n   { \"number of successes ({0}) must be less than or equal to population size ({1})\",\n     \"le nombre de succ\\u00e8s doit \\u00eatre inf\\u00e9rieur \" +\n     \"ou \\u00e9gal \\u00e0 la taille de la population ({1})\" },\n   { \"sample size ({0}) must be less than or equal to population size ({1})\",\n     \"la taille de l''\\u00e9chantillon doit \\u00eatre inf\\u00e9rieure \" +\n     \"ou \\u00e9gale \\u00e0 la taille de la population ({1})\" },\n   { \"population size must be positive ({0})\",\n     \"la taille de la population doit \\u00eatre positive ({0})\" },\n\n   // org.apache.commons.math.distribution.HypergeometricDistributionImpl\n   // org.apache.commons.math.random.RandomDataImpl\n   { \"sample size must be positive ({0})\",\n     \"la taille de l''\\u00e9chantillon doit \\u00eatre positive ({0})\" },\n\n   // org.apache.commons.math.distribution.HypergeometricDistributionImpl\n   // org.apache.commons.math.distribution.PascalDistributionImpl\n   { \"number of successes must be non-negative ({0})\",\n     \"le nombre de succ\\u00e8s ne doit pas \\u00eatre n\\u00e9gatif ({0})\" },\n\n   // org.apache.commons.math.distribution.NormalDistributionImpl\n   // org.apache.commons.math.random.RandomDataImpl\n   { \"standard deviation must be positive ({0})\",\n     \"l''\\u00e9cart type doit \\u00eatre positif ({0})\" },\n\n   // org.apache.commons.math.distribution.PoissonDistributionImpl\n   // org.apache.commons.math.random.RandomDataImpl\n   { \"the Poisson mean must be positive ({0})\",\n     \"la moyenne de Poisson doit \\u00eatre positive ({0})\" },\n\n   // org.apache.commons.math.distribution.WeibullDistributionImpl\n   { \"shape must be positive ({0})\",\n     \"le facteur de forme doit \\u00eatre positif ({0})\" },\n\n   // org.apache.commons.math.distribution.WeibullDistributionImpl\n   // org.apache.commons.math.distribution.CauchyDistributionImpl\n   { \"scale must be positive ({0})\",\n     \"l''\\u00e9chelle doit \\u00eatre positive ({0})\" },\n\n   // org.apache.commons.math.distribution.ZipfDistributionImpl\n   { \"invalid number of elements {0} (must be positive)\",\n     \"nombre d''\\u00e9l\\u00e9ments {0} invalide (doit \\u00eatre positif)\" },\n   { \"invalid exponent {0} (must be positive)\",\n     \"exposant {0} invalide (doit \\u00eatre positif)\" },\n\n   // org.apache.commons.math.transform.FastHadamardTransformer\n   { \"{0} is not a power of 2\",\n     \"{0} n''est pas une puissance de 2\" },\n\n   // org.apache.commons.math.transform.FastFourierTransformer\n   { \"cannot compute 0-th root of unity, indefinite result\",\n     \"impossible de calculer la racine z\\u00e9roi\\u00e8me de l''unit\\u00e9, \" +\n     \"r\\u00e9sultat ind\\u00e9fini\" },\n   { \"roots of unity have not been computed yet\",\n     \"les racines de l''unit\\u00e9 n''ont pas encore \\u00e9t\\u00e9 calcul\\u00e9es\" },\n   { \"out of range root of unity index {0} (must be in [{1};{2}])\",\n     \"index de racine de l''unit\\u00e9 hors domaine (devrait \\u00eatre dans [{1}; {2}])\" },\n   { \"number of sample is not positive: {0}\",\n     \"le nombre d''\\u00e9chantillons n''est pas positif : {0}\" },\n   { \"{0} is not a power of 2, consider padding for fix\",\n     \"{0} n''est pas une puissance de 2, ajoutez des \\u00e9l\\u00e9ments pour corriger\" },\n   { \"some dimensions don't match: {0} != {1}\",\n     \"certaines dimensions sont incoh\\u00e9rentes : {0} != {1}\" },\n\n   // org.apache.commons.math.transform.FastCosineTransformer\n   { \"{0} is not a power of 2 plus one\",\n     \"{0} n''est pas une puissance de 2 plus un\" },\n\n   // org.apache.commons.math.transform.FastSineTransformer\n   { \"first element is not 0: {0}\",\n     \"le premier \\u00e9l\\u00e9ment n''est pas nul : {0}\" },\n\n   // org.apache.commons.math.util.OpenIntToDoubleHashMap\n   { \"map has been modified while iterating\",\n     \"la table d''adressage a \\u00e9t\\u00e9 modifi\\u00e9e pendant l''it\\u00e9ration\" },\n   { \"iterator exhausted\",\n     \"it\\u00e9ration achev\\u00e9e\" },\n\n   // org.apache.commons.math.MathRuntimeException\n   { \"internal error, please fill a bug report at {0}\",\n     \"erreur interne, veuillez signaler l''erreur \\u00e0 {0}\" }\n\n  };",
        "begin_line": 31,
        "end_line": 859,
        "comment": " Non-translated/translated messages arrays. "
    },
    {
        "class_name": "org.apache.commons.math.MaxEvaluationsExceededException",
        "src_path": "src/main/java/org/apache/commons/math/MaxEvaluationsExceededException.java",
        "signature": "org.apache.commons.math.MaxEvaluationsExceededException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -5921271447220129118L;",
        "begin_line": 32,
        "end_line": 32,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.MaxEvaluationsExceededException",
        "src_path": "src/main/java/org/apache/commons/math/MaxEvaluationsExceededException.java",
        "signature": "org.apache.commons.math.MaxEvaluationsExceededException.maxEvaluations",
        "snippet": "    private final int maxEvaluations;",
        "begin_line": 35,
        "end_line": 35,
        "comment": " Maximal number of evaluations allowed. "
    },
    {
        "class_name": "org.apache.commons.math.ConvergenceException",
        "src_path": "src/main/java/org/apache/commons/math/ConvergenceException.java",
        "signature": "org.apache.commons.math.ConvergenceException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 4883703247677159141L;",
        "begin_line": 28,
        "end_line": 28,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.DimensionMismatchException",
        "src_path": "src/main/java/org/apache/commons/math/DimensionMismatchException.java",
        "signature": "org.apache.commons.math.DimensionMismatchException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -1316089546353786411L;",
        "begin_line": 28,
        "end_line": 28,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.DimensionMismatchException",
        "src_path": "src/main/java/org/apache/commons/math/DimensionMismatchException.java",
        "signature": "org.apache.commons.math.DimensionMismatchException.dimension1",
        "snippet": "    private final int dimension1;",
        "begin_line": 31,
        "end_line": 31,
        "comment": " First dimension. "
    },
    {
        "class_name": "org.apache.commons.math.DimensionMismatchException",
        "src_path": "src/main/java/org/apache/commons/math/DimensionMismatchException.java",
        "signature": "org.apache.commons.math.DimensionMismatchException.dimension2",
        "snippet": "    private final int dimension2;",
        "begin_line": 34,
        "end_line": 34,
        "comment": " Second dimension. "
    },
    {
        "class_name": "org.apache.commons.math.MathConfigurationException",
        "src_path": "src/main/java/org/apache/commons/math/MathConfigurationException.java",
        "signature": "org.apache.commons.math.MathConfigurationException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 5261476508226103366L;",
        "begin_line": 28,
        "end_line": 28,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.ConvergingAlgorithmImpl",
        "src_path": "src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java",
        "signature": "org.apache.commons.math.ConvergingAlgorithmImpl.absoluteAccuracy",
        "snippet": "    protected double absoluteAccuracy;",
        "begin_line": 31,
        "end_line": 31,
        "comment": " Maximum absolute error. "
    },
    {
        "class_name": "org.apache.commons.math.ConvergingAlgorithmImpl",
        "src_path": "src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java",
        "signature": "org.apache.commons.math.ConvergingAlgorithmImpl.relativeAccuracy",
        "snippet": "    protected double relativeAccuracy;",
        "begin_line": 34,
        "end_line": 34,
        "comment": " Maximum relative error. "
    },
    {
        "class_name": "org.apache.commons.math.ConvergingAlgorithmImpl",
        "src_path": "src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java",
        "signature": "org.apache.commons.math.ConvergingAlgorithmImpl.maximalIterationCount",
        "snippet": "    protected int maximalIterationCount;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " Maximum number of iterations. "
    },
    {
        "class_name": "org.apache.commons.math.ConvergingAlgorithmImpl",
        "src_path": "src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java",
        "signature": "org.apache.commons.math.ConvergingAlgorithmImpl.defaultAbsoluteAccuracy",
        "snippet": "    protected double defaultAbsoluteAccuracy;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Default maximum absolute error. "
    },
    {
        "class_name": "org.apache.commons.math.ConvergingAlgorithmImpl",
        "src_path": "src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java",
        "signature": "org.apache.commons.math.ConvergingAlgorithmImpl.defaultRelativeAccuracy",
        "snippet": "    protected double defaultRelativeAccuracy;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " Default maximum relative error. "
    },
    {
        "class_name": "org.apache.commons.math.ConvergingAlgorithmImpl",
        "src_path": "src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java",
        "signature": "org.apache.commons.math.ConvergingAlgorithmImpl.defaultMaximalIterationCount",
        "snippet": "    protected int defaultMaximalIterationCount;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Default maximum number of iterations. "
    },
    {
        "class_name": "org.apache.commons.math.ConvergingAlgorithmImpl",
        "src_path": "src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java",
        "signature": "org.apache.commons.math.ConvergingAlgorithmImpl.iterationCount",
        "snippet": "    protected int iterationCount;",
        "begin_line": 50,
        "end_line": 50,
        "comment": " The last iteration count. "
    },
    {
        "class_name": "org.apache.commons.math.ArgumentOutsideDomainException",
        "src_path": "src/main/java/org/apache/commons/math/ArgumentOutsideDomainException.java",
        "signature": "org.apache.commons.math.ArgumentOutsideDomainException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -4965972841162580234L;",
        "begin_line": 29,
        "end_line": 29,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.MathException",
        "src_path": "src/main/java/org/apache/commons/math/MathException.java",
        "signature": "org.apache.commons.math.MathException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -9004610152740737812L;",
        "begin_line": 39,
        "end_line": 39,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.MathException",
        "src_path": "src/main/java/org/apache/commons/math/MathException.java",
        "signature": "org.apache.commons.math.MathException.pattern",
        "snippet": "    private final String pattern;",
        "begin_line": 44,
        "end_line": 44,
        "comment": "\n     * Pattern used to build the message.\n     "
    },
    {
        "class_name": "org.apache.commons.math.MathException",
        "src_path": "src/main/java/org/apache/commons/math/MathException.java",
        "signature": "org.apache.commons.math.MathException.arguments",
        "snippet": "    private final Object[] arguments;",
        "begin_line": 49,
        "end_line": 49,
        "comment": "\n     * Arguments used to build the message.\n     "
    },
    {
        "class_name": "org.apache.commons.math.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/MathRuntimeException.java",
        "signature": "org.apache.commons.math.MathRuntimeException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -5128983364075381060L;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/MathRuntimeException.java",
        "signature": "org.apache.commons.math.MathRuntimeException.pattern",
        "snippet": "    private final String pattern;",
        "begin_line": 45,
        "end_line": 45,
        "comment": "\n     * Pattern used to build the message.\n     "
    },
    {
        "class_name": "org.apache.commons.math.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/MathRuntimeException.java",
        "signature": "org.apache.commons.math.MathRuntimeException.arguments",
        "snippet": "    private final Object[] arguments;",
        "begin_line": 50,
        "end_line": 50,
        "comment": "\n     * Arguments used to build the message.\n     "
    },
    {
        "class_name": "org.apache.commons.math.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/MathRuntimeException.java",
        "signature": "org.apache.commons.math.MathRuntimeException.serialVersionUID",
        "snippet": "            private static final long serialVersionUID = 7705628723242533939L;",
        "begin_line": 204,
        "end_line": 204,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/MathRuntimeException.java",
        "signature": "org.apache.commons.math.MathRuntimeException.serialVersionUID",
        "snippet": "            private static final long serialVersionUID = -3394748305449283486L;",
        "begin_line": 233,
        "end_line": 233,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/MathRuntimeException.java",
        "signature": "org.apache.commons.math.MathRuntimeException.serialVersionUID",
        "snippet": "            private static final long serialVersionUID = 279461544586092584L;",
        "begin_line": 262,
        "end_line": 262,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/MathRuntimeException.java",
        "signature": "org.apache.commons.math.MathRuntimeException.serialVersionUID",
        "snippet": "            private static final long serialVersionUID = -6555453980658317913L;",
        "begin_line": 308,
        "end_line": 308,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/MathRuntimeException.java",
        "signature": "org.apache.commons.math.MathRuntimeException.serialVersionUID",
        "snippet": "            private static final long serialVersionUID = -95247648156277208L;",
        "begin_line": 350,
        "end_line": 350,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/MathRuntimeException.java",
        "signature": "org.apache.commons.math.MathRuntimeException.serialVersionUID",
        "snippet": "            private static final long serialVersionUID = 6134247282754009421L;",
        "begin_line": 379,
        "end_line": 379,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/MathRuntimeException.java",
        "signature": "org.apache.commons.math.MathRuntimeException.serialVersionUID",
        "snippet": "            private static final long serialVersionUID = 7304273322489425799L;",
        "begin_line": 408,
        "end_line": 408,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/MathRuntimeException.java",
        "signature": "org.apache.commons.math.MathRuntimeException.serialVersionUID",
        "snippet": "            private static final long serialVersionUID = -3075660477939965216L;",
        "begin_line": 437,
        "end_line": 437,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/MathRuntimeException.java",
        "signature": "org.apache.commons.math.MathRuntimeException.serialVersionUID",
        "snippet": "            private static final long serialVersionUID = -1103502177342465975L;",
        "begin_line": 469,
        "end_line": 469,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/MathRuntimeException.java",
        "signature": "org.apache.commons.math.MathRuntimeException.serialVersionUID",
        "snippet": "            private static final long serialVersionUID = -201865440834027016L;",
        "begin_line": 498,
        "end_line": 498,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.MaxIterationsExceededException",
        "src_path": "src/main/java/org/apache/commons/math/MaxIterationsExceededException.java",
        "signature": "org.apache.commons.math.MaxIterationsExceededException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -7821226672760574694L;",
        "begin_line": 32,
        "end_line": 32,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.MaxIterationsExceededException",
        "src_path": "src/main/java/org/apache/commons/math/MaxIterationsExceededException.java",
        "signature": "org.apache.commons.math.MaxIterationsExceededException.maxIterations",
        "snippet": "    private final int maxIterations;",
        "begin_line": 35,
        "end_line": 35,
        "comment": " Maximal number of iterations allowed. "
    },
    {
        "class_name": "org.apache.commons.math.genetics.GeneticAlgorithm",
        "src_path": "src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java",
        "signature": "org.apache.commons.math.genetics.GeneticAlgorithm.randomGenerator",
        "snippet": "    private static RandomGenerator randomGenerator = new JDKRandomGenerator();",
        "begin_line": 38,
        "end_line": 38,
        "comment": "@GuardedBy(\"this\")"
    },
    {
        "class_name": "org.apache.commons.math.genetics.GeneticAlgorithm",
        "src_path": "src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java",
        "signature": "org.apache.commons.math.genetics.GeneticAlgorithm.crossoverPolicy",
        "snippet": "    private final CrossoverPolicy crossoverPolicy;",
        "begin_line": 41,
        "end_line": 41,
        "comment": " the crossover policy used by the algorithm. "
    },
    {
        "class_name": "org.apache.commons.math.genetics.GeneticAlgorithm",
        "src_path": "src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java",
        "signature": "org.apache.commons.math.genetics.GeneticAlgorithm.crossoverRate",
        "snippet": "    private final double crossoverRate;",
        "begin_line": 44,
        "end_line": 44,
        "comment": " the rate of crossover for the algorithm. "
    },
    {
        "class_name": "org.apache.commons.math.genetics.GeneticAlgorithm",
        "src_path": "src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java",
        "signature": "org.apache.commons.math.genetics.GeneticAlgorithm.mutationPolicy",
        "snippet": "    private final MutationPolicy mutationPolicy;",
        "begin_line": 47,
        "end_line": 47,
        "comment": " the mutation policy used by the algorithm. "
    },
    {
        "class_name": "org.apache.commons.math.genetics.GeneticAlgorithm",
        "src_path": "src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java",
        "signature": "org.apache.commons.math.genetics.GeneticAlgorithm.mutationRate",
        "snippet": "    private final double mutationRate;",
        "begin_line": 50,
        "end_line": 50,
        "comment": " the rate of mutation for the algorithm. "
    },
    {
        "class_name": "org.apache.commons.math.genetics.GeneticAlgorithm",
        "src_path": "src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java",
        "signature": "org.apache.commons.math.genetics.GeneticAlgorithm.selectionPolicy",
        "snippet": "    private final SelectionPolicy selectionPolicy;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " the selection policy used by the algorithm. "
    },
    {
        "class_name": "org.apache.commons.math.genetics.GeneticAlgorithm",
        "src_path": "src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java",
        "signature": "org.apache.commons.math.genetics.GeneticAlgorithm.generationsEvolved",
        "snippet": "    private int generationsEvolved = 0;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " the number of generations evolved to reach {@link StoppingCondition} in the last run. "
    },
    {
        "class_name": "org.apache.commons.math.genetics.Chromosome",
        "src_path": "src/main/java/org/apache/commons/math/genetics/Chromosome.java",
        "signature": "org.apache.commons.math.genetics.Chromosome.fitness",
        "snippet": "    private double fitness = Double.MIN_VALUE;",
        "begin_line": 33,
        "end_line": 33,
        "comment": "\n     * Cached value of the fitness of this chromosome.\n     "
    },
    {
        "class_name": "org.apache.commons.math.genetics.TournamentSelection",
        "src_path": "src/main/java/org/apache/commons/math/genetics/TournamentSelection.java",
        "signature": "org.apache.commons.math.genetics.TournamentSelection.arity",
        "snippet": "    private int arity;",
        "begin_line": 34,
        "end_line": 34,
        "comment": " number of chromosomes included in the tournament selections "
    },
    {
        "class_name": "org.apache.commons.math.genetics.ChromosomePair",
        "src_path": "src/main/java/org/apache/commons/math/genetics/ChromosomePair.java",
        "signature": "org.apache.commons.math.genetics.ChromosomePair.first",
        "snippet": "    private final Chromosome first;",
        "begin_line": 27,
        "end_line": 27,
        "comment": " the first chromosome in the pair. "
    },
    {
        "class_name": "org.apache.commons.math.genetics.ChromosomePair",
        "src_path": "src/main/java/org/apache/commons/math/genetics/ChromosomePair.java",
        "signature": "org.apache.commons.math.genetics.ChromosomePair.second",
        "snippet": "    private final Chromosome second;",
        "begin_line": 30,
        "end_line": 30,
        "comment": " the second chromosome in the pair. "
    },
    {
        "class_name": "org.apache.commons.math.genetics.InvalidRepresentationException",
        "src_path": "src/main/java/org/apache/commons/math/genetics/InvalidRepresentationException.java",
        "signature": "org.apache.commons.math.genetics.InvalidRepresentationException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 28,
        "end_line": 28,
        "comment": " Serialization version id "
    },
    {
        "class_name": "org.apache.commons.math.genetics.FixedGenerationCount",
        "src_path": "src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java",
        "signature": "org.apache.commons.math.genetics.FixedGenerationCount.numGenerations",
        "snippet": "    private int numGenerations = 0;",
        "begin_line": 31,
        "end_line": 31,
        "comment": " Number of generations that have passed "
    },
    {
        "class_name": "org.apache.commons.math.genetics.FixedGenerationCount",
        "src_path": "src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java",
        "signature": "org.apache.commons.math.genetics.FixedGenerationCount.maxGenerations",
        "snippet": "    private final int maxGenerations;",
        "begin_line": 34,
        "end_line": 34,
        "comment": " Maximum number of generations (stopping criteria) "
    },
    {
        "class_name": "org.apache.commons.math.genetics.ElitisticListPopulation",
        "src_path": "src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java",
        "signature": "org.apache.commons.math.genetics.ElitisticListPopulation.elitismRate",
        "snippet": "    private double elitismRate = 0.9;",
        "begin_line": 32,
        "end_line": 32,
        "comment": " percentage of chromosomes copied to the next generation "
    },
    {
        "class_name": "org.apache.commons.math.genetics.ListPopulation",
        "src_path": "src/main/java/org/apache/commons/math/genetics/ListPopulation.java",
        "signature": "org.apache.commons.math.genetics.ListPopulation.chromosomes",
        "snippet": "    private List<Chromosome> chromosomes;",
        "begin_line": 32,
        "end_line": 32,
        "comment": " List of chromosomes "
    },
    {
        "class_name": "org.apache.commons.math.genetics.ListPopulation",
        "src_path": "src/main/java/org/apache/commons/math/genetics/ListPopulation.java",
        "signature": "org.apache.commons.math.genetics.ListPopulation.populationLimit",
        "snippet": "    private int populationLimit;",
        "begin_line": 35,
        "end_line": 35,
        "comment": " maximial size of the population "
    },
    {
        "class_name": "org.apache.commons.math.genetics.AbstractListChromosome",
        "src_path": "src/main/java/org/apache/commons/math/genetics/AbstractListChromosome.java",
        "signature": "org.apache.commons.math.genetics.AbstractListChromosome.representation",
        "snippet": "    private final List<T> representation;",
        "begin_line": 34,
        "end_line": 34,
        "comment": " List representing the chromosome "
    },
    {
        "class_name": "org.apache.commons.math.genetics.RandomKey",
        "src_path": "src/main/java/org/apache/commons/math/genetics/RandomKey.java",
        "signature": "org.apache.commons.math.genetics.RandomKey.sortedRepresentation",
        "snippet": "    private final List<Double> sortedRepresentation;",
        "begin_line": 69,
        "end_line": 69,
        "comment": "\n     * Cache of sorted representation (unmodifiable).\n     "
    },
    {
        "class_name": "org.apache.commons.math.genetics.RandomKey",
        "src_path": "src/main/java/org/apache/commons/math/genetics/RandomKey.java",
        "signature": "org.apache.commons.math.genetics.RandomKey.baseSeqPermutation",
        "snippet": "    private final List<Integer> baseSeqPermutation;",
        "begin_line": 74,
        "end_line": 74,
        "comment": "\n     * Base sequence [0,1,...,n-1], permuted accorting to the representation (unmodifiable).\n     "
    },
    {
        "class_name": "org.apache.commons.math.random.MersenneTwister",
        "src_path": "src/main/java/org/apache/commons/math/random/MersenneTwister.java",
        "signature": "org.apache.commons.math.random.MersenneTwister.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 8661194735290153518L;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.random.MersenneTwister",
        "src_path": "src/main/java/org/apache/commons/math/random/MersenneTwister.java",
        "signature": "org.apache.commons.math.random.MersenneTwister.N",
        "snippet": "    private static final int   N     = 624;",
        "begin_line": 86,
        "end_line": 86,
        "comment": " Size of the bytes pool. "
    },
    {
        "class_name": "org.apache.commons.math.random.MersenneTwister",
        "src_path": "src/main/java/org/apache/commons/math/random/MersenneTwister.java",
        "signature": "org.apache.commons.math.random.MersenneTwister.M",
        "snippet": "    private static final int   M     = 397;",
        "begin_line": 89,
        "end_line": 89,
        "comment": " Period second parameter. "
    },
    {
        "class_name": "org.apache.commons.math.random.MersenneTwister",
        "src_path": "src/main/java/org/apache/commons/math/random/MersenneTwister.java",
        "signature": "org.apache.commons.math.random.MersenneTwister.MAG01",
        "snippet": "    private static final int[] MAG01 = { 0x0, 0x9908b0df };",
        "begin_line": 92,
        "end_line": 92,
        "comment": " X * MATRIX_A for X = {0, 1}. "
    },
    {
        "class_name": "org.apache.commons.math.random.MersenneTwister",
        "src_path": "src/main/java/org/apache/commons/math/random/MersenneTwister.java",
        "signature": "org.apache.commons.math.random.MersenneTwister.mt",
        "snippet": "    private int[] mt;",
        "begin_line": 95,
        "end_line": 95,
        "comment": " Bytes pool. "
    },
    {
        "class_name": "org.apache.commons.math.random.MersenneTwister",
        "src_path": "src/main/java/org/apache/commons/math/random/MersenneTwister.java",
        "signature": "org.apache.commons.math.random.MersenneTwister.mti",
        "snippet": "    private int   mti;",
        "begin_line": 98,
        "end_line": 98,
        "comment": " Current index in the bytes pool. "
    },
    {
        "class_name": "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator",
        "src_path": "src/main/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java",
        "signature": "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator.generator",
        "snippet": "    private final NormalizedRandomGenerator generator;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " Underlying scalar generator. "
    },
    {
        "class_name": "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator",
        "src_path": "src/main/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java",
        "signature": "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator.mean",
        "snippet": "    private final double[] mean;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Mean vector. "
    },
    {
        "class_name": "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator",
        "src_path": "src/main/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java",
        "signature": "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator.standardDeviation",
        "snippet": "    private final double[] standardDeviation;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " Standard deviation vector. "
    },
    {
        "class_name": "org.apache.commons.math.random.UnitSphereRandomVectorGenerator",
        "src_path": "src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java",
        "signature": "org.apache.commons.math.random.UnitSphereRandomVectorGenerator.rand",
        "snippet": "    private final RandomGenerator rand;",
        "begin_line": 33,
        "end_line": 33,
        "comment": "\n     * RNG used for generating the individual components of the vectors.\n     "
    },
    {
        "class_name": "org.apache.commons.math.random.UnitSphereRandomVectorGenerator",
        "src_path": "src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java",
        "signature": "org.apache.commons.math.random.UnitSphereRandomVectorGenerator.dimension",
        "snippet": "    private final int dimension;",
        "begin_line": 37,
        "end_line": 37,
        "comment": "\n     * Space dimension.\n     "
    },
    {
        "class_name": "org.apache.commons.math.random.CorrelatedRandomVectorGenerator",
        "src_path": "src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java",
        "signature": "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.mean",
        "snippet": "    private final double[] mean;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " Mean vector. "
    },
    {
        "class_name": "org.apache.commons.math.random.CorrelatedRandomVectorGenerator",
        "src_path": "src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java",
        "signature": "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.generator",
        "snippet": "    private final NormalizedRandomGenerator generator;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " Underlying generator. "
    },
    {
        "class_name": "org.apache.commons.math.random.CorrelatedRandomVectorGenerator",
        "src_path": "src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java",
        "signature": "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.normalized",
        "snippet": "    private final double[] normalized;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " Storage for the normalized vector. "
    },
    {
        "class_name": "org.apache.commons.math.random.CorrelatedRandomVectorGenerator",
        "src_path": "src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java",
        "signature": "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.root",
        "snippet": "    private RealMatrix root;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " Permutated Cholesky root of the covariance matrix. "
    },
    {
        "class_name": "org.apache.commons.math.random.CorrelatedRandomVectorGenerator",
        "src_path": "src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java",
        "signature": "org.apache.commons.math.random.CorrelatedRandomVectorGenerator.rank",
        "snippet": "    private int rank;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " Rank of the covariance matrix. "
    },
    {
        "class_name": "org.apache.commons.math.random.RandomDataImpl",
        "src_path": "src/main/java/org/apache/commons/math/random/RandomDataImpl.java",
        "signature": "org.apache.commons.math.random.RandomDataImpl.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -626730818244969716L;",
        "begin_line": 90,
        "end_line": 90,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.random.RandomDataImpl",
        "src_path": "src/main/java/org/apache/commons/math/random/RandomDataImpl.java",
        "signature": "org.apache.commons.math.random.RandomDataImpl.rand",
        "snippet": "    private RandomGenerator rand = null;",
        "begin_line": 93,
        "end_line": 93,
        "comment": " underlying random number generator "
    },
    {
        "class_name": "org.apache.commons.math.random.RandomDataImpl",
        "src_path": "src/main/java/org/apache/commons/math/random/RandomDataImpl.java",
        "signature": "org.apache.commons.math.random.RandomDataImpl.secRand",
        "snippet": "    private SecureRandom secRand = null;",
        "begin_line": 96,
        "end_line": 96,
        "comment": " underlying secure random number generator "
    },
    {
        "class_name": "org.apache.commons.math.random.ValueServer",
        "src_path": "src/main/java/org/apache/commons/math/random/ValueServer.java",
        "signature": "org.apache.commons.math.random.ValueServer.DIGEST_MODE",
        "snippet": "    public static final int DIGEST_MODE = 0;",
        "begin_line": 51,
        "end_line": 51,
        "comment": " Use empirical distribution.  "
    },
    {
        "class_name": "org.apache.commons.math.random.ValueServer",
        "src_path": "src/main/java/org/apache/commons/math/random/ValueServer.java",
        "signature": "org.apache.commons.math.random.ValueServer.REPLAY_MODE",
        "snippet": "    public static final int REPLAY_MODE = 1;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " Replay data from valuesFilePath. "
    },
    {
        "class_name": "org.apache.commons.math.random.ValueServer",
        "src_path": "src/main/java/org/apache/commons/math/random/ValueServer.java",
        "signature": "org.apache.commons.math.random.ValueServer.UNIFORM_MODE",
        "snippet": "    public static final int UNIFORM_MODE = 2;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " Uniform random deviates with mean = &mu;. "
    },
    {
        "class_name": "org.apache.commons.math.random.ValueServer",
        "src_path": "src/main/java/org/apache/commons/math/random/ValueServer.java",
        "signature": "org.apache.commons.math.random.ValueServer.EXPONENTIAL_MODE",
        "snippet": "    public static final int EXPONENTIAL_MODE = 3;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " Exponential random deviates with mean = &mu;. "
    },
    {
        "class_name": "org.apache.commons.math.random.ValueServer",
        "src_path": "src/main/java/org/apache/commons/math/random/ValueServer.java",
        "signature": "org.apache.commons.math.random.ValueServer.GAUSSIAN_MODE",
        "snippet": "    public static final int GAUSSIAN_MODE = 4;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " Gaussian random deviates with mean = &mu;, std dev = &sigma;. "
    },
    {
        "class_name": "org.apache.commons.math.random.ValueServer",
        "src_path": "src/main/java/org/apache/commons/math/random/ValueServer.java",
        "signature": "org.apache.commons.math.random.ValueServer.CONSTANT_MODE",
        "snippet": "    public static final int CONSTANT_MODE = 5;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " Always return mu "
    },
    {
        "class_name": "org.apache.commons.math.random.ValueServer",
        "src_path": "src/main/java/org/apache/commons/math/random/ValueServer.java",
        "signature": "org.apache.commons.math.random.ValueServer.mode",
        "snippet": "    private int mode = 5;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " mode determines how values are generated. "
    },
    {
        "class_name": "org.apache.commons.math.random.ValueServer",
        "src_path": "src/main/java/org/apache/commons/math/random/ValueServer.java",
        "signature": "org.apache.commons.math.random.ValueServer.valuesFileURL",
        "snippet": "    private URL valuesFileURL = null;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " URI to raw data values. "
    },
    {
        "class_name": "org.apache.commons.math.random.ValueServer",
        "src_path": "src/main/java/org/apache/commons/math/random/ValueServer.java",
        "signature": "org.apache.commons.math.random.ValueServer.mu",
        "snippet": "    private double mu = 0.0;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " Mean for use with non-data-driven modes. "
    },
    {
        "class_name": "org.apache.commons.math.random.ValueServer",
        "src_path": "src/main/java/org/apache/commons/math/random/ValueServer.java",
        "signature": "org.apache.commons.math.random.ValueServer.sigma",
        "snippet": "    private double sigma = 0.0;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " Standard deviation for use with GAUSSIAN_MODE. "
    },
    {
        "class_name": "org.apache.commons.math.random.ValueServer",
        "src_path": "src/main/java/org/apache/commons/math/random/ValueServer.java",
        "signature": "org.apache.commons.math.random.ValueServer.empiricalDistribution",
        "snippet": "    private EmpiricalDistribution empiricalDistribution = null;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " Empirical probability distribution for use with DIGEST_MODE. "
    },
    {
        "class_name": "org.apache.commons.math.random.ValueServer",
        "src_path": "src/main/java/org/apache/commons/math/random/ValueServer.java",
        "signature": "org.apache.commons.math.random.ValueServer.filePointer",
        "snippet": "    private BufferedReader filePointer = null;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " File pointer for REPLAY_MODE. "
    },
    {
        "class_name": "org.apache.commons.math.random.ValueServer",
        "src_path": "src/main/java/org/apache/commons/math/random/ValueServer.java",
        "signature": "org.apache.commons.math.random.ValueServer.randomData",
        "snippet": "    private RandomData randomData = new RandomDataImpl();",
        "begin_line": 87,
        "end_line": 87,
        "comment": " RandomDataImpl to use for random data generation. "
    },
    {
        "class_name": "org.apache.commons.math.random.EmpiricalDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java",
        "signature": "org.apache.commons.math.random.EmpiricalDistributionImpl.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 5729073523949762654L;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.random.EmpiricalDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java",
        "signature": "org.apache.commons.math.random.EmpiricalDistributionImpl.binStats",
        "snippet": "    private List<SummaryStatistics> binStats = null;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " List of SummaryStatistics objects characterizing the bins "
    },
    {
        "class_name": "org.apache.commons.math.random.EmpiricalDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java",
        "signature": "org.apache.commons.math.random.EmpiricalDistributionImpl.sampleStats",
        "snippet": "    private SummaryStatistics sampleStats = null;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " Sample statistics "
    },
    {
        "class_name": "org.apache.commons.math.random.EmpiricalDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java",
        "signature": "org.apache.commons.math.random.EmpiricalDistributionImpl.max",
        "snippet": "    private double max = Double.NEGATIVE_INFINITY;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " Max loaded value "
    },
    {
        "class_name": "org.apache.commons.math.random.EmpiricalDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java",
        "signature": "org.apache.commons.math.random.EmpiricalDistributionImpl.min",
        "snippet": "    private double min = Double.POSITIVE_INFINITY;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " Min loaded value "
    },
    {
        "class_name": "org.apache.commons.math.random.EmpiricalDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java",
        "signature": "org.apache.commons.math.random.EmpiricalDistributionImpl.delta",
        "snippet": "    private double delta = 0d;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " Grid size "
    },
    {
        "class_name": "org.apache.commons.math.random.EmpiricalDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java",
        "signature": "org.apache.commons.math.random.EmpiricalDistributionImpl.binCount",
        "snippet": "    private int binCount = 1000;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " number of bins "
    },
    {
        "class_name": "org.apache.commons.math.random.EmpiricalDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java",
        "signature": "org.apache.commons.math.random.EmpiricalDistributionImpl.loaded",
        "snippet": "    private boolean loaded = false;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " is the distribution loaded? "
    },
    {
        "class_name": "org.apache.commons.math.random.EmpiricalDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java",
        "signature": "org.apache.commons.math.random.EmpiricalDistributionImpl.upperBounds",
        "snippet": "    private double[] upperBounds = null;",
        "begin_line": 88,
        "end_line": 88,
        "comment": " upper bounds of subintervals in (0,1) \"belonging\" to the bins "
    },
    {
        "class_name": "org.apache.commons.math.random.EmpiricalDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java",
        "signature": "org.apache.commons.math.random.EmpiricalDistributionImpl.randomData",
        "snippet": "    private RandomData randomData = new RandomDataImpl();",
        "begin_line": 91,
        "end_line": 91,
        "comment": " RandomData instance to use in repeated calls to getNext() "
    },
    {
        "class_name": "org.apache.commons.math.random.StreamDataAdapter",
        "src_path": "src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java",
        "signature": "org.apache.commons.math.random.StreamDataAdapter.inputStream",
        "snippet": "        private BufferedReader inputStream;",
        "begin_line": 235,
        "end_line": 235,
        "comment": " Input stream providing access to the data "
    },
    {
        "class_name": "org.apache.commons.math.random.ArrayDataAdapter",
        "src_path": "src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java",
        "signature": "org.apache.commons.math.random.ArrayDataAdapter.inputArray",
        "snippet": "        private double[] inputArray;",
        "begin_line": 283,
        "end_line": 283,
        "comment": " Array of input  data values "
    },
    {
        "class_name": "org.apache.commons.math.random.JDKRandomGenerator",
        "src_path": "src/main/java/org/apache/commons/math/random/JDKRandomGenerator.java",
        "signature": "org.apache.commons.math.random.JDKRandomGenerator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -7745277476784028798L;",
        "begin_line": 31,
        "end_line": 31,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.random.AbstractRandomGenerator",
        "src_path": "src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java",
        "signature": "org.apache.commons.math.random.AbstractRandomGenerator.cachedNormalDeviate",
        "snippet": "    private double cachedNormalDeviate = Double.NaN;",
        "begin_line": 44,
        "end_line": 44,
        "comment": "\n     * Cached random normal value.  The default implementation for\n     * {@link #nextGaussian} generates pairs of values and this field caches the\n     * second value so that the full algorithm is not executed for every\n     * activation.  The value <code>Double.NaN</code> signals that there is\n     * no cached value.  Use {@link #clear} to clear the cached value.\n     "
    },
    {
        "class_name": "org.apache.commons.math.random.UniformRandomGenerator",
        "src_path": "src/main/java/org/apache/commons/math/random/UniformRandomGenerator.java",
        "signature": "org.apache.commons.math.random.UniformRandomGenerator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1569292426375546027L;",
        "begin_line": 35,
        "end_line": 35,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.random.UniformRandomGenerator",
        "src_path": "src/main/java/org/apache/commons/math/random/UniformRandomGenerator.java",
        "signature": "org.apache.commons.math.random.UniformRandomGenerator.SQRT3",
        "snippet": "    private static final double SQRT3 = Math.sqrt(3.0);",
        "begin_line": 38,
        "end_line": 38,
        "comment": " Square root of three. "
    },
    {
        "class_name": "org.apache.commons.math.random.UniformRandomGenerator",
        "src_path": "src/main/java/org/apache/commons/math/random/UniformRandomGenerator.java",
        "signature": "org.apache.commons.math.random.UniformRandomGenerator.generator",
        "snippet": "    private final RandomGenerator generator;",
        "begin_line": 41,
        "end_line": 41,
        "comment": " Underlying generator. "
    },
    {
        "class_name": "org.apache.commons.math.random.RandomAdaptor",
        "src_path": "src/main/java/org/apache/commons/math/random/RandomAdaptor.java",
        "signature": "org.apache.commons.math.random.RandomAdaptor.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 2306581345647615033L;",
        "begin_line": 31,
        "end_line": 31,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.random.RandomAdaptor",
        "src_path": "src/main/java/org/apache/commons/math/random/RandomAdaptor.java",
        "signature": "org.apache.commons.math.random.RandomAdaptor.randomGenerator",
        "snippet": "    private RandomGenerator randomGenerator = null;",
        "begin_line": 34,
        "end_line": 34,
        "comment": " Wrapped randomGenerator instance "
    },
    {
        "class_name": "org.apache.commons.math.random.GaussianRandomGenerator",
        "src_path": "src/main/java/org/apache/commons/math/random/GaussianRandomGenerator.java",
        "signature": "org.apache.commons.math.random.GaussianRandomGenerator.generator",
        "snippet": "    private final RandomGenerator generator;",
        "begin_line": 31,
        "end_line": 31,
        "comment": " Underlying generator. "
    },
    {
        "class_name": "org.apache.commons.math.random.BitsStreamGenerator",
        "src_path": "src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java",
        "signature": "org.apache.commons.math.random.BitsStreamGenerator.nextGaussian",
        "snippet": "    private double nextGaussian;",
        "begin_line": 30,
        "end_line": 30,
        "comment": " Next gaussian. "
    },
    {
        "class_name": "org.apache.commons.math.ode.ContinuousOutputModel",
        "src_path": "src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java",
        "signature": "org.apache.commons.math.ode.ContinuousOutputModel.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -1417964919405031606L;",
        "begin_line": 90,
        "end_line": 90,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.ode.ContinuousOutputModel",
        "src_path": "src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java",
        "signature": "org.apache.commons.math.ode.ContinuousOutputModel.initialTime",
        "snippet": "    private double initialTime;",
        "begin_line": 93,
        "end_line": 93,
        "comment": " Initial integration time. "
    },
    {
        "class_name": "org.apache.commons.math.ode.ContinuousOutputModel",
        "src_path": "src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java",
        "signature": "org.apache.commons.math.ode.ContinuousOutputModel.finalTime",
        "snippet": "    private double finalTime;",
        "begin_line": 96,
        "end_line": 96,
        "comment": " Final integration time. "
    },
    {
        "class_name": "org.apache.commons.math.ode.ContinuousOutputModel",
        "src_path": "src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java",
        "signature": "org.apache.commons.math.ode.ContinuousOutputModel.forward",
        "snippet": "    private boolean forward;",
        "begin_line": 99,
        "end_line": 99,
        "comment": " Integration direction indicator. "
    },
    {
        "class_name": "org.apache.commons.math.ode.ContinuousOutputModel",
        "src_path": "src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java",
        "signature": "org.apache.commons.math.ode.ContinuousOutputModel.index",
        "snippet": "    private int index;",
        "begin_line": 102,
        "end_line": 102,
        "comment": " Current interpolator index. "
    },
    {
        "class_name": "org.apache.commons.math.ode.ContinuousOutputModel",
        "src_path": "src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java",
        "signature": "org.apache.commons.math.ode.ContinuousOutputModel.steps",
        "snippet": "    private List<StepInterpolator> steps;",
        "begin_line": 105,
        "end_line": 105,
        "comment": " Steps table. "
    },
    {
        "class_name": "org.apache.commons.math.ode.FirstOrderConverter",
        "src_path": "src/main/java/org/apache/commons/math/ode/FirstOrderConverter.java",
        "signature": "org.apache.commons.math.ode.FirstOrderConverter.equations",
        "snippet": "    private final SecondOrderDifferentialEquations equations;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " Underlying second order equations set. "
    },
    {
        "class_name": "org.apache.commons.math.ode.FirstOrderConverter",
        "src_path": "src/main/java/org/apache/commons/math/ode/FirstOrderConverter.java",
        "signature": "org.apache.commons.math.ode.FirstOrderConverter.dimension",
        "snippet": "    private final int dimension;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " second order problem dimension. "
    },
    {
        "class_name": "org.apache.commons.math.ode.FirstOrderConverter",
        "src_path": "src/main/java/org/apache/commons/math/ode/FirstOrderConverter.java",
        "signature": "org.apache.commons.math.ode.FirstOrderConverter.z",
        "snippet": "    private final double[] z;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " state vector. "
    },
    {
        "class_name": "org.apache.commons.math.ode.FirstOrderConverter",
        "src_path": "src/main/java/org/apache/commons/math/ode/FirstOrderConverter.java",
        "signature": "org.apache.commons.math.ode.FirstOrderConverter.zDot",
        "snippet": "    private final double[] zDot;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " first time derivative of the state vector. "
    },
    {
        "class_name": "org.apache.commons.math.ode.FirstOrderConverter",
        "src_path": "src/main/java/org/apache/commons/math/ode/FirstOrderConverter.java",
        "signature": "org.apache.commons.math.ode.FirstOrderConverter.zDDot",
        "snippet": "    private final double[] zDDot;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " second time derivative of the state vector. "
    },
    {
        "class_name": "org.apache.commons.math.ode.MultistepIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java",
        "signature": "org.apache.commons.math.ode.MultistepIntegrator.scaled",
        "snippet": "    protected double[] scaled;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " First scaled derivative (h y'). "
    },
    {
        "class_name": "org.apache.commons.math.ode.MultistepIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java",
        "signature": "org.apache.commons.math.ode.MultistepIntegrator.nordsieck",
        "snippet": "    protected Array2DRowRealMatrix nordsieck;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " Nordsieck matrix of the higher scaled derivatives.\n     * <p>(h<sup>2</sup>/2 y'', h<sup>3</sup>/6 y''' ..., h<sup>k</sup>/k! y(k))</p>\n     "
    },
    {
        "class_name": "org.apache.commons.math.ode.MultistepIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java",
        "signature": "org.apache.commons.math.ode.MultistepIntegrator.starter",
        "snippet": "    private FirstOrderIntegrator starter;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " Starter integrator. "
    },
    {
        "class_name": "org.apache.commons.math.ode.MultistepIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java",
        "signature": "org.apache.commons.math.ode.MultistepIntegrator.nSteps",
        "snippet": "    private final int nSteps;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " Number of steps of the multistep method (excluding the one being computed). "
    },
    {
        "class_name": "org.apache.commons.math.ode.MultistepIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java",
        "signature": "org.apache.commons.math.ode.MultistepIntegrator.exp",
        "snippet": "    private double exp;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " Stepsize control exponent. "
    },
    {
        "class_name": "org.apache.commons.math.ode.MultistepIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java",
        "signature": "org.apache.commons.math.ode.MultistepIntegrator.safety",
        "snippet": "    private double safety;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " Safety factor for stepsize control. "
    },
    {
        "class_name": "org.apache.commons.math.ode.MultistepIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java",
        "signature": "org.apache.commons.math.ode.MultistepIntegrator.minReduction",
        "snippet": "    private double minReduction;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " Minimal reduction factor for stepsize control. "
    },
    {
        "class_name": "org.apache.commons.math.ode.MultistepIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java",
        "signature": "org.apache.commons.math.ode.MultistepIntegrator.maxGrowth",
        "snippet": "    private double maxGrowth;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " Maximal growth factor for stepsize control. "
    },
    {
        "class_name": "org.apache.commons.math.ode.NordsieckInitializer",
        "src_path": "src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java",
        "signature": "org.apache.commons.math.ode.NordsieckInitializer.n",
        "snippet": "        private final int n;",
        "begin_line": 311,
        "end_line": 311,
        "comment": " Problem dimension. "
    },
    {
        "class_name": "org.apache.commons.math.ode.InitializationCompletedMarkerException",
        "src_path": "src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java",
        "signature": "org.apache.commons.math.ode.InitializationCompletedMarkerException.serialVersionUID",
        "snippet": "        private static final long serialVersionUID = -4105805787353488365L;",
        "begin_line": 370,
        "end_line": 370,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.ode.CountingDifferentialEquations",
        "src_path": "src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java",
        "signature": "org.apache.commons.math.ode.CountingDifferentialEquations.dimension",
        "snippet": "        private final int dimension;",
        "begin_line": 383,
        "end_line": 383,
        "comment": " Dimension of the problem. "
    },
    {
        "class_name": "org.apache.commons.math.ode.DerivativeException",
        "src_path": "src/main/java/org/apache/commons/math/ode/DerivativeException.java",
        "signature": "org.apache.commons.math.ode.DerivativeException.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 5666710788967425123L;",
        "begin_line": 33,
        "end_line": 33,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.ode.IntegratorException",
        "src_path": "src/main/java/org/apache/commons/math/ode/IntegratorException.java",
        "signature": "org.apache.commons.math.ode.IntegratorException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -1607588949778036796L;",
        "begin_line": 32,
        "end_line": 32,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.ode.AbstractIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java",
        "signature": "org.apache.commons.math.ode.AbstractIntegrator.stepHandlers",
        "snippet": "    protected Collection<StepHandler> stepHandlers;",
        "begin_line": 38,
        "end_line": 38,
        "comment": " Step handler. "
    },
    {
        "class_name": "org.apache.commons.math.ode.AbstractIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java",
        "signature": "org.apache.commons.math.ode.AbstractIntegrator.stepStart",
        "snippet": "    protected double stepStart;",
        "begin_line": 41,
        "end_line": 41,
        "comment": " Current step start time. "
    },
    {
        "class_name": "org.apache.commons.math.ode.AbstractIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java",
        "signature": "org.apache.commons.math.ode.AbstractIntegrator.stepSize",
        "snippet": "    protected double stepSize;",
        "begin_line": 44,
        "end_line": 44,
        "comment": " Current stepsize. "
    },
    {
        "class_name": "org.apache.commons.math.ode.AbstractIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java",
        "signature": "org.apache.commons.math.ode.AbstractIntegrator.eventsHandlersManager",
        "snippet": "    protected CombinedEventsManager eventsHandlersManager;",
        "begin_line": 47,
        "end_line": 47,
        "comment": " Events handlers manager. "
    },
    {
        "class_name": "org.apache.commons.math.ode.AbstractIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java",
        "signature": "org.apache.commons.math.ode.AbstractIntegrator.name",
        "snippet": "    private final String name;",
        "begin_line": 50,
        "end_line": 50,
        "comment": " Name of the method. "
    },
    {
        "class_name": "org.apache.commons.math.ode.AbstractIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java",
        "signature": "org.apache.commons.math.ode.AbstractIntegrator.maxEvaluations",
        "snippet": "    private int maxEvaluations;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " Maximal number of evaluations allowed. "
    },
    {
        "class_name": "org.apache.commons.math.ode.AbstractIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java",
        "signature": "org.apache.commons.math.ode.AbstractIntegrator.evaluations",
        "snippet": "    private int evaluations;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " Number of evaluations already performed. "
    },
    {
        "class_name": "org.apache.commons.math.ode.AbstractIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java",
        "signature": "org.apache.commons.math.ode.AbstractIntegrator.equations",
        "snippet": "    private transient FirstOrderDifferentialEquations equations;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " Differential equations to integrate. "
    },
    {
        "class_name": "org.apache.commons.math.ode.EndTimeChecker",
        "src_path": "src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java",
        "signature": "org.apache.commons.math.ode.EndTimeChecker.endTime",
        "snippet": "        private final double endTime;",
        "begin_line": 251,
        "end_line": 251,
        "comment": " Desired end time. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolator.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = -3583240427587318654L;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.GillIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/GillIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.GillIntegrator.STATIC_C",
        "snippet": "  private static final double[] STATIC_C = {\n    1.0 / 2.0, 1.0 / 2.0, 1.0\n  };",
        "begin_line": 48,
        "end_line": 50,
        "comment": " Time steps Butcher array. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.GillIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/GillIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.GillIntegrator.STATIC_A",
        "snippet": "  private static final double[][] STATIC_A = {\n    { 1.0 / 2.0 },\n    { (Math.sqrt(2.0) - 1.0) / 2.0, (2.0 - Math.sqrt(2.0)) / 2.0 },\n    { 0.0, -Math.sqrt(2.0) / 2.0, (2.0 + Math.sqrt(2.0)) / 2.0 }\n  };",
        "begin_line": 53,
        "end_line": 57,
        "comment": " Internal weights Butcher array. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.GillIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/GillIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.GillIntegrator.STATIC_B",
        "snippet": "  private static final double[] STATIC_B = {\n    1.0 / 6.0, (2.0 - Math.sqrt(2.0)) / 6.0, (2.0 + Math.sqrt(2.0)) / 6.0, 1.0 / 6.0\n  };",
        "begin_line": 60,
        "end_line": 62,
        "comment": " Propagation weights Butcher array. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.EulerIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/EulerIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.EulerIntegrator.STATIC_C",
        "snippet": "  private static final double[] STATIC_C = {\n  };",
        "begin_line": 52,
        "end_line": 53,
        "comment": " Time steps Butcher array. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.EulerIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/EulerIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.EulerIntegrator.STATIC_A",
        "snippet": "  private static final double[][] STATIC_A = {\n  };",
        "begin_line": 56,
        "end_line": 57,
        "comment": " Internal weights Butcher array. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.EulerIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/EulerIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.EulerIntegrator.STATIC_B",
        "snippet": "  private static final double[] STATIC_B = {\n    1.0\n  };",
        "begin_line": 60,
        "end_line": 62,
        "comment": " Propagation weights Butcher array. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.HighamHall54Integrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.METHOD_NAME",
        "snippet": "  private static final String METHOD_NAME = \"Higham-Hall 5(4)\";",
        "begin_line": 38,
        "end_line": 38,
        "comment": " Integrator method name. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.HighamHall54Integrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_C",
        "snippet": "  private static final double[] STATIC_C = {\n    2.0/9.0, 1.0/3.0, 1.0/2.0, 3.0/5.0, 1.0, 1.0\n  };",
        "begin_line": 41,
        "end_line": 43,
        "comment": " Time steps Butcher array. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.HighamHall54Integrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_A",
        "snippet": "  private static final double[][] STATIC_A = {\n    {2.0/9.0},\n    {1.0/12.0, 1.0/4.0},\n    {1.0/8.0, 0.0, 3.0/8.0},\n    {91.0/500.0, -27.0/100.0, 78.0/125.0, 8.0/125.0},\n    {-11.0/20.0, 27.0/20.0, 12.0/5.0, -36.0/5.0, 5.0},\n    {1.0/12.0, 0.0, 27.0/32.0, -4.0/3.0, 125.0/96.0, 5.0/48.0}\n  };",
        "begin_line": 46,
        "end_line": 53,
        "comment": " Internal weights Butcher array. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.HighamHall54Integrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_B",
        "snippet": "  private static final double[] STATIC_B = {\n    1.0/12.0, 0.0, 27.0/32.0, -4.0/3.0, 125.0/96.0, 5.0/48.0, 0.0\n  };",
        "begin_line": 56,
        "end_line": 58,
        "comment": " Propagation weights Butcher array. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.HighamHall54Integrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_E",
        "snippet": "  private static final double[] STATIC_E = {\n    -1.0/20.0, 0.0, 81.0/160.0, -6.0/5.0, 25.0/32.0, 1.0/16.0, -1.0/10.0\n  };",
        "begin_line": 61,
        "end_line": 63,
        "comment": " Error weights Butcher array. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.A70",
        "snippet": "    private static final double A70 =    35.0 /  384.0;",
        "begin_line": 38,
        "end_line": 38,
        "comment": " Last row of the Butcher-array internal weights, element 0. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.A72",
        "snippet": "    private static final double A72 =   500.0 / 1113.0;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " Last row of the Butcher-array internal weights, element 2. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.A73",
        "snippet": "    private static final double A73 =   125.0 /  192.0;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Last row of the Butcher-array internal weights, element 3. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.A74",
        "snippet": "    private static final double A74 = -2187.0 / 6784.0;",
        "begin_line": 49,
        "end_line": 49,
        "comment": " Last row of the Butcher-array internal weights, element 4. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.A75",
        "snippet": "    private static final double A75 =    11.0 /   84.0;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " Last row of the Butcher-array internal weights, element 5. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.D0",
        "snippet": "    private static final double D0 =  -12715105075.0 /  11282082432.0;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " Shampine (1986) Dense output, element 0. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.D2",
        "snippet": "    private static final double D2 =   87487479700.0 /  32700410799.0;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " Shampine (1986) Dense output, element 2. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.D3",
        "snippet": "    private static final double D3 =  -10690763975.0 /   1880347072.0;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " Shampine (1986) Dense output, element 3. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.D4",
        "snippet": "    private static final double D4 =  701980252875.0 / 199316789632.0;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " Shampine (1986) Dense output, element 4. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.D5",
        "snippet": "    private static final double D5 =   -1453857185.0 /    822651844.0;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " Shampine (1986) Dense output, element 5. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.D6",
        "snippet": "    private static final double D6 =      69997945.0 /     29380423.0;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " Shampine (1986) Dense output, element 6. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 4104157279605906956L;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.v1",
        "snippet": "    private double[] v1;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " First vector for interpolation. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.v2",
        "snippet": "    private double[] v2;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " Second vector for interpolation. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.v3",
        "snippet": "    private double[] v3;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " Third vector for interpolation. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.v4",
        "snippet": "    private double[] v4;",
        "begin_line": 87,
        "end_line": 87,
        "comment": " Fourth vector for interpolation. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.vectorsInitialized",
        "snippet": "    private boolean vectorsInitialized;",
        "begin_line": 90,
        "end_line": 90,
        "comment": " Initialization indicator for the interpolation vectors. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.yDotK",
        "snippet": "    protected double[][] yDotK;",
        "begin_line": 41,
        "end_line": 41,
        "comment": " Slopes at the intermediate points "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.integrator",
        "snippet": "    protected AbstractIntegrator integrator;",
        "begin_line": 44,
        "end_line": 44,
        "comment": " Reference to the integrator. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.fsal",
        "snippet": "    private final boolean fsal;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " Indicator for <i>fsal</i> methods. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.c",
        "snippet": "    private final double[] c;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " Time steps from Butcher array (without the first zero). "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.a",
        "snippet": "    private final double[][] a;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " Internal weights from Butcher array (without the first empty row). "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.b",
        "snippet": "    private final double[] b;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " External weights for the high order method from Butcher array. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.prototype",
        "snippet": "    private final RungeKuttaStepInterpolator prototype;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " Prototype of the step interpolator. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.exp",
        "snippet": "    private final double exp;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " Stepsize control exponent. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.safety",
        "snippet": "    private double safety;",
        "begin_line": 87,
        "end_line": 87,
        "comment": " Safety factor for stepsize control. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.minReduction",
        "snippet": "    private double minReduction;",
        "begin_line": 90,
        "end_line": 90,
        "comment": " Minimal reduction factor for stepsize control. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.maxGrowth",
        "snippet": "    private double maxGrowth;",
        "begin_line": 93,
        "end_line": 93,
        "comment": " Maximal growth factor for stepsize control. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 7320613236731409847L;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator.y0Dot",
        "snippet": "    private double[] y0Dot;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " Slope at the beginning of the step. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator.y1",
        "snippet": "    private double[] y1;",
        "begin_line": 87,
        "end_line": 87,
        "comment": " State at the end of the step. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator.y1Dot",
        "snippet": "    private double[] y1Dot;",
        "begin_line": 90,
        "end_line": 90,
        "comment": " Slope at the end of the step. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator.yMidDots",
        "snippet": "    private double[][] yMidDots;",
        "begin_line": 95,
        "end_line": 95,
        "comment": " Derivatives at the middle of the step.\n     * element 0 is state at midpoint, element 1 is first derivative ...\n     "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator.polynoms",
        "snippet": "    private double[][] polynoms;",
        "begin_line": 98,
        "end_line": 98,
        "comment": " Interpolation polynoms. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator.errfac",
        "snippet": "    private double[] errfac;",
        "begin_line": 101,
        "end_line": 101,
        "comment": " Error coefficients for the interpolation. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator.currentDegree",
        "snippet": "    private int currentDegree;",
        "begin_line": 104,
        "end_line": 104,
        "comment": " Degree of the interpolation polynoms. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.EulerStepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.EulerStepInterpolator.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = -7179861704951334960L;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator.c",
        "snippet": "    private final double[] c;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " Time steps from Butcher array (without the first zero). "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator.a",
        "snippet": "    private final double[][] a;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " Internal weights from Butcher array (without the first empty row). "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator.b",
        "snippet": "    private final double[] b;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " External weights for the high order method from Butcher array. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator.prototype",
        "snippet": "    private final RungeKuttaStepInterpolator prototype;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " Prototype of the step interpolator. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator.step",
        "snippet": "    private final double step;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " Integration step. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.AdamsIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.AdamsIntegrator.transformer",
        "snippet": "    private final AdamsNordsieckTransformer transformer;",
        "begin_line": 35,
        "end_line": 35,
        "comment": " Transformer. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_C",
        "snippet": "  private static final double[] STATIC_C = {\n    1.0 / 2.0, 1.0 / 2.0, 1.0\n  };",
        "begin_line": 49,
        "end_line": 51,
        "comment": " Time steps Butcher array. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_A",
        "snippet": "  private static final double[][] STATIC_A = {\n    { 1.0 / 2.0 },\n    { 0.0, 1.0 / 2.0 },\n    { 0.0, 0.0, 1.0 }\n  };",
        "begin_line": 54,
        "end_line": 58,
        "comment": " Internal weights Butcher array. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_B",
        "snippet": "  private static final double[] STATIC_B = {\n    1.0 / 6.0, 1.0 / 3.0, 1.0 / 3.0, 1.0 / 6.0\n  };",
        "begin_line": 61,
        "end_line": 63,
        "comment": " Propagation weights Butcher array. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.GillStepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.GillStepInterpolator.TWO_MINUS_SQRT_2",
        "snippet": "    private static final double TWO_MINUS_SQRT_2 = 2 - Math.sqrt(2.0);",
        "begin_line": 51,
        "end_line": 51,
        "comment": " First Gill coefficient. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.GillStepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.GillStepInterpolator.TWO_PLUS_SQRT_2",
        "snippet": "    private static final double TWO_PLUS_SQRT_2 = 2 + Math.sqrt(2.0);",
        "begin_line": 54,
        "end_line": 54,
        "comment": " Second Gill coefficient. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.GillStepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.GillStepInterpolator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -107804074496313322L;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME",
        "snippet": "  private static final String METHOD_NAME = \"Dormand-Prince 8 (5, 3)\";",
        "begin_line": 58,
        "end_line": 58,
        "comment": " Integrator method name. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_C",
        "snippet": "  private static final double[] STATIC_C = {\n    (12.0 - 2.0 * Math.sqrt(6.0)) / 135.0, (6.0 - Math.sqrt(6.0)) / 45.0, (6.0 - Math.sqrt(6.0)) / 30.0,\n    (6.0 + Math.sqrt(6.0)) / 30.0, 1.0/3.0, 1.0/4.0, 4.0/13.0, 127.0/195.0, 3.0/5.0,\n    6.0/7.0, 1.0, 1.0\n  };",
        "begin_line": 61,
        "end_line": 65,
        "comment": " Time steps Butcher array. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A",
        "snippet": "  private static final double[][] STATIC_A = {\n\n    // k2\n    {(12.0 - 2.0 * Math.sqrt(6.0)) / 135.0},\n\n    // k3\n    {(6.0 - Math.sqrt(6.0)) / 180.0, (6.0 - Math.sqrt(6.0)) / 60.0},\n\n    // k4\n    {(6.0 - Math.sqrt(6.0)) / 120.0, 0.0, (6.0 - Math.sqrt(6.0)) / 40.0},\n\n    // k5\n    {(462.0 + 107.0 * Math.sqrt(6.0)) / 3000.0, 0.0,\n     (-402.0 - 197.0 * Math.sqrt(6.0)) / 1000.0, (168.0 + 73.0 * Math.sqrt(6.0)) / 375.0},\n\n    // k6\n    {1.0 / 27.0, 0.0, 0.0, (16.0 + Math.sqrt(6.0)) / 108.0, (16.0 - Math.sqrt(6.0)) / 108.0},\n\n    // k7\n    {19.0 / 512.0, 0.0, 0.0, (118.0 + 23.0 * Math.sqrt(6.0)) / 1024.0,\n     (118.0 - 23.0 * Math.sqrt(6.0)) / 1024.0, -9.0 / 512.0},\n\n    // k8\n    {13772.0 / 371293.0, 0.0, 0.0, (51544.0 + 4784.0 * Math.sqrt(6.0)) / 371293.0,\n     (51544.0 - 4784.0 * Math.sqrt(6.0)) / 371293.0, -5688.0 / 371293.0, 3072.0 / 371293.0},\n\n    // k9\n    {58656157643.0 / 93983540625.0, 0.0, 0.0,\n     (-1324889724104.0 - 318801444819.0 * Math.sqrt(6.0)) / 626556937500.0,\n     (-1324889724104.0 + 318801444819.0 * Math.sqrt(6.0)) / 626556937500.0,\n     96044563816.0 / 3480871875.0, 5682451879168.0 / 281950621875.0,\n     -165125654.0 / 3796875.0},\n\n    // k10\n    {8909899.0 / 18653125.0, 0.0, 0.0,\n     (-4521408.0 - 1137963.0 * Math.sqrt(6.0)) / 2937500.0,\n     (-4521408.0 + 1137963.0 * Math.sqrt(6.0)) / 2937500.0,\n     96663078.0 / 4553125.0, 2107245056.0 / 137915625.0,\n     -4913652016.0 / 147609375.0, -78894270.0 / 3880452869.0},\n\n    // k11\n    {-20401265806.0 / 21769653311.0, 0.0, 0.0,\n     (354216.0 + 94326.0 * Math.sqrt(6.0)) / 112847.0,\n     (354216.0 - 94326.0 * Math.sqrt(6.0)) / 112847.0,\n     -43306765128.0 / 5313852383.0, -20866708358144.0 / 1126708119789.0,\n     14886003438020.0 / 654632330667.0, 35290686222309375.0 / 14152473387134411.0,\n     -1477884375.0 / 485066827.0},\n\n    // k12\n    {39815761.0 / 17514443.0, 0.0, 0.0,\n     (-3457480.0 - 960905.0 * Math.sqrt(6.0)) / 551636.0,\n     (-3457480.0 + 960905.0 * Math.sqrt(6.0)) / 551636.0,\n     -844554132.0 / 47026969.0, 8444996352.0 / 302158619.0,\n     -2509602342.0 / 877790785.0, -28388795297996250.0 / 3199510091356783.0,\n     226716250.0 / 18341897.0, 1371316744.0 / 2131383595.0},\n\n    // k13 should be for interpolation only, but since it is the same\n    // stage as the first evaluation of the next step, we perform it\n    // here at no cost by specifying this is an fsal method\n    {104257.0/1920240.0, 0.0, 0.0, 0.0, 0.0, 3399327.0/763840.0,\n     66578432.0/35198415.0, -1674902723.0/288716400.0,\n     54980371265625.0/176692375811392.0, -734375.0/4826304.0,\n     171414593.0/851261400.0, 137909.0/3084480.0}\n\n  };",
        "begin_line": 68,
        "end_line": 132,
        "comment": " Internal weights Butcher array. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_B",
        "snippet": "  private static final double[] STATIC_B = {\n      104257.0/1920240.0,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      3399327.0/763840.0,\n      66578432.0/35198415.0,\n      -1674902723.0/288716400.0,\n      54980371265625.0/176692375811392.0,\n      -734375.0/4826304.0,\n      171414593.0/851261400.0,\n      137909.0/3084480.0,\n      0.0\n  };",
        "begin_line": 135,
        "end_line": 149,
        "comment": " Propagation weights Butcher array. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.E1_01",
        "snippet": "  private static final double E1_01 =         116092271.0 / 8848465920.0;",
        "begin_line": 152,
        "end_line": 152,
        "comment": " First error weights array, element 1. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.E1_06",
        "snippet": "  private static final double E1_06 =          -1871647.0 / 1527680.0;",
        "begin_line": 157,
        "end_line": 157,
        "comment": " First error weights array, element 6. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.E1_07",
        "snippet": "  private static final double E1_07 =         -69799717.0 / 140793660.0;",
        "begin_line": 160,
        "end_line": 160,
        "comment": " First error weights array, element 7. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.E1_08",
        "snippet": "  private static final double E1_08 =     1230164450203.0 / 739113984000.0;",
        "begin_line": 163,
        "end_line": 163,
        "comment": " First error weights array, element 8. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.E1_09",
        "snippet": "  private static final double E1_09 = -1980813971228885.0 / 5654156025964544.0;",
        "begin_line": 166,
        "end_line": 166,
        "comment": " First error weights array, element 9. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.E1_10",
        "snippet": "  private static final double E1_10 =         464500805.0 / 1389975552.0;",
        "begin_line": 169,
        "end_line": 169,
        "comment": " First error weights array, element 10. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.E1_11",
        "snippet": "  private static final double E1_11 =     1606764981773.0 / 19613062656000.0;",
        "begin_line": 172,
        "end_line": 172,
        "comment": " First error weights array, element 11. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.E1_12",
        "snippet": "  private static final double E1_12 =           -137909.0 / 6168960.0;",
        "begin_line": 175,
        "end_line": 175,
        "comment": " First error weights array, element 12. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.E2_01",
        "snippet": "  private static final double E2_01 =           -364463.0 / 1920240.0;",
        "begin_line": 179,
        "end_line": 179,
        "comment": " Second error weights array, element 1. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.E2_06",
        "snippet": "  private static final double E2_06 =           3399327.0 / 763840.0;",
        "begin_line": 184,
        "end_line": 184,
        "comment": " Second error weights array, element 6. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.E2_07",
        "snippet": "  private static final double E2_07 =          66578432.0 / 35198415.0;",
        "begin_line": 187,
        "end_line": 187,
        "comment": " Second error weights array, element 7. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.E2_08",
        "snippet": "  private static final double E2_08 =       -1674902723.0 / 288716400.0;",
        "begin_line": 190,
        "end_line": 190,
        "comment": " Second error weights array, element 8. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.E2_09",
        "snippet": "  private static final double E2_09 =   -74684743568175.0 / 176692375811392.0;",
        "begin_line": 193,
        "end_line": 193,
        "comment": " Second error weights array, element 9. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.E2_10",
        "snippet": "  private static final double E2_10 =           -734375.0 / 4826304.0;",
        "begin_line": 196,
        "end_line": 196,
        "comment": " Second error weights array, element 10. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.E2_11",
        "snippet": "  private static final double E2_11 =         171414593.0 / 851261400.0;",
        "begin_line": 199,
        "end_line": 199,
        "comment": " Second error weights array, element 11. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.E2_12",
        "snippet": "  private static final double E2_12 =             69869.0 / 3084480.0;",
        "begin_line": 202,
        "end_line": 202,
        "comment": " Second error weights array, element 12. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -6576285612589783992L;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.Corrector",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.Corrector.previous",
        "snippet": "        private final double[] previous;",
        "begin_line": 382,
        "end_line": 382,
        "comment": " Previous state. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.Corrector",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.Corrector.scaled",
        "snippet": "        private final double[] scaled;",
        "begin_line": 385,
        "end_line": 385,
        "comment": " Current scaled first derivative. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.Corrector",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.Corrector.before",
        "snippet": "        private final double[] before;",
        "begin_line": 388,
        "end_line": 388,
        "comment": " Current state before correction. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.Corrector",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.Corrector.after",
        "snippet": "        private final double[] after;",
        "begin_line": 391,
        "end_line": 391,
        "comment": " Current state after correction. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.METHOD_NAME",
        "snippet": "  private static final String METHOD_NAME = \"Dormand-Prince 5(4)\";",
        "begin_line": 50,
        "end_line": 50,
        "comment": " Integrator method name. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_C",
        "snippet": "  private static final double[] STATIC_C = {\n    1.0/5.0, 3.0/10.0, 4.0/5.0, 8.0/9.0, 1.0, 1.0\n  };",
        "begin_line": 53,
        "end_line": 55,
        "comment": " Time steps Butcher array. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_A",
        "snippet": "  private static final double[][] STATIC_A = {\n    {1.0/5.0},\n    {3.0/40.0, 9.0/40.0},\n    {44.0/45.0, -56.0/15.0, 32.0/9.0},\n    {19372.0/6561.0, -25360.0/2187.0, 64448.0/6561.0,  -212.0/729.0},\n    {9017.0/3168.0, -355.0/33.0, 46732.0/5247.0, 49.0/176.0, -5103.0/18656.0},\n    {35.0/384.0, 0.0, 500.0/1113.0, 125.0/192.0, -2187.0/6784.0, 11.0/84.0}\n  };",
        "begin_line": 58,
        "end_line": 65,
        "comment": " Internal weights Butcher array. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_B",
        "snippet": "  private static final double[] STATIC_B = {\n    35.0/384.0, 0.0, 500.0/1113.0, 125.0/192.0, -2187.0/6784.0, 11.0/84.0, 0.0\n  };",
        "begin_line": 68,
        "end_line": 70,
        "comment": " Propagation weights Butcher array. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.E1",
        "snippet": "  private static final double E1 =     71.0 / 57600.0;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " Error array, element 1. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.E3",
        "snippet": "  private static final double E3 =    -71.0 / 16695.0;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " Error array, element 3. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.E4",
        "snippet": "  private static final double E4 =     71.0 / 1920.0;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " Error array, element 4. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.E5",
        "snippet": "  private static final double E5 = -17253.0 / 339200.0;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " Error array, element 5. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.E6",
        "snippet": "  private static final double E6 =     22.0 / 525.0;",
        "begin_line": 87,
        "end_line": 87,
        "comment": " Error array, element 6. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.E7",
        "snippet": "  private static final double E7 =     -1.0 / 40.0;",
        "begin_line": 90,
        "end_line": 90,
        "comment": " Error array, element 7. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME",
        "snippet": "    private static final String METHOD_NAME = \"Gragg-Bulirsch-Stoer\";",
        "begin_line": 97,
        "end_line": 97,
        "comment": " Integrator method name. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.maxOrder",
        "snippet": "    private int maxOrder;",
        "begin_line": 100,
        "end_line": 100,
        "comment": " maximal order. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.sequence",
        "snippet": "    private int[] sequence;",
        "begin_line": 103,
        "end_line": 103,
        "comment": " step size sequence. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.costPerStep",
        "snippet": "    private int[] costPerStep;",
        "begin_line": 106,
        "end_line": 106,
        "comment": " overall cost of applying step reduction up to iteration k+1, in number of calls. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.costPerTimeUnit",
        "snippet": "    private double[] costPerTimeUnit;",
        "begin_line": 109,
        "end_line": 109,
        "comment": " cost per unit step. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.optimalStep",
        "snippet": "    private double[] optimalStep;",
        "begin_line": 112,
        "end_line": 112,
        "comment": " optimal steps for each order. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.coeff",
        "snippet": "    private double[][] coeff;",
        "begin_line": 115,
        "end_line": 115,
        "comment": " extrapolation coefficients. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.performTest",
        "snippet": "    private boolean performTest;",
        "begin_line": 118,
        "end_line": 118,
        "comment": " stability check enabling parameter. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.maxChecks",
        "snippet": "    private int maxChecks;",
        "begin_line": 121,
        "end_line": 121,
        "comment": " maximal number of checks for each iteration. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.maxIter",
        "snippet": "    private int maxIter;",
        "begin_line": 124,
        "end_line": 124,
        "comment": " maximal number of iterations for which checks are performed. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.stabilityReduction",
        "snippet": "    private double stabilityReduction;",
        "begin_line": 127,
        "end_line": 127,
        "comment": " stepsize reduction factor in case of stability check failure. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.stepControl1",
        "snippet": "    private double stepControl1;",
        "begin_line": 130,
        "end_line": 130,
        "comment": " first stepsize control factor. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.stepControl2",
        "snippet": "    private double stepControl2;",
        "begin_line": 133,
        "end_line": 133,
        "comment": " second stepsize control factor. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.stepControl3",
        "snippet": "    private double stepControl3;",
        "begin_line": 136,
        "end_line": 136,
        "comment": " third stepsize control factor. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.stepControl4",
        "snippet": "    private double stepControl4;",
        "begin_line": 139,
        "end_line": 139,
        "comment": " fourth stepsize control factor. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.orderControl1",
        "snippet": "    private double orderControl1;",
        "begin_line": 142,
        "end_line": 142,
        "comment": " first order control factor. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.orderControl2",
        "snippet": "    private double orderControl2;",
        "begin_line": 145,
        "end_line": 145,
        "comment": " second order control factor. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.denseOutput",
        "snippet": "    private boolean denseOutput;",
        "begin_line": 148,
        "end_line": 148,
        "comment": " dense outpute required. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.useInterpolationError",
        "snippet": "    private boolean useInterpolationError;",
        "begin_line": 151,
        "end_line": 151,
        "comment": " use interpolation error in stepsize control. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.mudif",
        "snippet": "    private int mudif;",
        "begin_line": 154,
        "end_line": 154,
        "comment": " interpolation order control parameter. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.MidpointIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/MidpointIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.MidpointIntegrator.STATIC_C",
        "snippet": "  private static final double[] STATIC_C = {\n    1.0 / 2.0\n  };",
        "begin_line": 46,
        "end_line": 48,
        "comment": " Time steps Butcher array. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.MidpointIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/MidpointIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.MidpointIntegrator.STATIC_A",
        "snippet": "  private static final double[][] STATIC_A = {\n    { 1.0 / 2.0 }\n  };",
        "begin_line": 51,
        "end_line": 53,
        "comment": " Internal weights Butcher array. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.MidpointIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/MidpointIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.MidpointIntegrator.STATIC_B",
        "snippet": "  private static final double[] STATIC_B = {\n    0.0, 1.0\n  };",
        "begin_line": 56,
        "end_line": 58,
        "comment": " Propagation weights Butcher array. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3345024435978721931L;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.STATIC_C",
        "snippet": "  private static final double[] STATIC_C = {\n    1.0 / 3.0, 2.0 / 3.0, 1.0\n  };",
        "begin_line": 48,
        "end_line": 50,
        "comment": " Time steps Butcher array. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.STATIC_A",
        "snippet": "  private static final double[][] STATIC_A = {\n    {  1.0 / 3.0 },\n    { -1.0 / 3.0, 1.0 },\n    {  1.0, -1.0, 1.0 }\n  };",
        "begin_line": 53,
        "end_line": 57,
        "comment": " Internal weights Butcher array. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.STATIC_B",
        "snippet": "  private static final double[] STATIC_B = {\n    1.0 / 8.0, 3.0 / 8.0, 3.0 / 8.0, 1.0 / 8.0\n  };",
        "begin_line": 60,
        "end_line": 62,
        "comment": " Propagation weights Butcher array. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java",
        "signature": "org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE",
        "snippet": "    private static final Map<Integer, AdamsNordsieckTransformer> CACHE =\n        new HashMap<Integer, AdamsNordsieckTransformer>();",
        "begin_line": 136,
        "end_line": 137,
        "comment": " Cache for already computed coefficients. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java",
        "signature": "org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.initialization",
        "snippet": "    private final Array2DRowRealMatrix initialization;",
        "begin_line": 140,
        "end_line": 140,
        "comment": " Initialization matrix for the higher order derivatives wrt y'', y''' ... "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java",
        "signature": "org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.update",
        "snippet": "    private final Array2DRowRealMatrix update;",
        "begin_line": 143,
        "end_line": 143,
        "comment": " Update matrix for the higher order derivatives h<sup>2</sup>/2y'', h<sup>3</sup>/6 y''' ... "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java",
        "signature": "org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.c1",
        "snippet": "    private final double[] c1;",
        "begin_line": 146,
        "end_line": 146,
        "comment": " Update coefficients of the higher order derivatives wrt y'. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.scalAbsoluteTolerance",
        "snippet": "    protected final double scalAbsoluteTolerance;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " Allowed absolute scalar error. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.scalRelativeTolerance",
        "snippet": "    protected final double scalRelativeTolerance;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " Allowed relative scalar error. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.vecAbsoluteTolerance",
        "snippet": "    protected final double[] vecAbsoluteTolerance;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " Allowed absolute vectorial error. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.vecRelativeTolerance",
        "snippet": "    protected final double[] vecRelativeTolerance;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " Allowed relative vectorial error. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.initialStep",
        "snippet": "    private double initialStep;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " User supplied initial step. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.minStep",
        "snippet": "    private final double minStep;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " Minimal step. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.maxStep",
        "snippet": "    private final double maxStep;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " Maximal step. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -865524111506042509L;",
        "begin_line": 48,
        "end_line": 48,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 7152276390558450974L;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.B_01",
        "snippet": "    private static final double B_01 =         104257.0 / 1920240.0;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Propagation weights, element 1. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.B_06",
        "snippet": "    private static final double B_06 =        3399327.0 / 763840.0;",
        "begin_line": 51,
        "end_line": 51,
        "comment": " Propagation weights, element 6. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.B_07",
        "snippet": "    private static final double B_07 =       66578432.0 / 35198415.0;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " Propagation weights, element 7. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.B_08",
        "snippet": "    private static final double B_08 =    -1674902723.0 / 288716400.0;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " Propagation weights, element 8. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.B_09",
        "snippet": "    private static final double B_09 = 54980371265625.0 / 176692375811392.0;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " Propagation weights, element 9. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.B_10",
        "snippet": "    private static final double B_10 =        -734375.0 / 4826304.0;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " Propagation weights, element 10. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.B_11",
        "snippet": "    private static final double B_11 =      171414593.0 / 851261400.0;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " Propagation weights, element 11. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.B_12",
        "snippet": "    private static final double B_12 =         137909.0 / 3084480.0;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " Propagation weights, element 12. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.C14",
        "snippet": "    private static final double C14    = 1.0 / 10.0;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " Time step for stage 14 (interpolation only). "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.K14_01",
        "snippet": "    private static final double K14_01 =       13481885573.0 / 240030000000.0      - B_01;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " Internal weights for stage 14, element 1. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.K14_06",
        "snippet": "    private static final double K14_06 =                 0.0                       - B_06;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " Internal weights for stage 14, element 6. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.K14_07",
        "snippet": "    private static final double K14_07 =      139418837528.0 / 549975234375.0      - B_07;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " Internal weights for stage 14, element 7. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.K14_08",
        "snippet": "    private static final double K14_08 =   -11108320068443.0 / 45111937500000.0    - B_08;",
        "begin_line": 86,
        "end_line": 86,
        "comment": " Internal weights for stage 14, element 8. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.K14_09",
        "snippet": "    private static final double K14_09 = -1769651421925959.0 / 14249385146080000.0 - B_09;",
        "begin_line": 89,
        "end_line": 89,
        "comment": " Internal weights for stage 14, element 9. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.K14_10",
        "snippet": "    private static final double K14_10 =          57799439.0 / 377055000.0         - B_10;",
        "begin_line": 92,
        "end_line": 92,
        "comment": " Internal weights for stage 14, element 10. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.K14_11",
        "snippet": "    private static final double K14_11 =      793322643029.0 / 96734250000000.0    - B_11;",
        "begin_line": 95,
        "end_line": 95,
        "comment": " Internal weights for stage 14, element 11. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.K14_12",
        "snippet": "    private static final double K14_12 =        1458939311.0 / 192780000000.0      - B_12;",
        "begin_line": 98,
        "end_line": 98,
        "comment": " Internal weights for stage 14, element 12. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.K14_13",
        "snippet": "    private static final double K14_13 =             -4149.0 / 500000.0;",
        "begin_line": 101,
        "end_line": 101,
        "comment": " Internal weights for stage 14, element 13. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.C15",
        "snippet": "    private static final double C15    = 1.0 / 5.0;",
        "begin_line": 104,
        "end_line": 104,
        "comment": " Time step for stage 15 (interpolation only). "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.K15_01",
        "snippet": "    private static final double K15_01 =     1595561272731.0 / 50120273500000.0    - B_01;",
        "begin_line": 108,
        "end_line": 108,
        "comment": " Internal weights for stage 15, element 1. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.K15_06",
        "snippet": "    private static final double K15_06 =      975183916491.0 / 34457688031250.0    - B_06;",
        "begin_line": 113,
        "end_line": 113,
        "comment": " Internal weights for stage 15, element 6. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.K15_07",
        "snippet": "    private static final double K15_07 =    38492013932672.0 / 718912673015625.0   - B_07;",
        "begin_line": 116,
        "end_line": 116,
        "comment": " Internal weights for stage 15, element 7. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.K15_08",
        "snippet": "    private static final double K15_08 = -1114881286517557.0 / 20298710767500000.0 - B_08;",
        "begin_line": 119,
        "end_line": 119,
        "comment": " Internal weights for stage 15, element 8. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.K15_09",
        "snippet": "    private static final double K15_09 =                 0.0                       - B_09;",
        "begin_line": 122,
        "end_line": 122,
        "comment": " Internal weights for stage 15, element 9. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.K15_10",
        "snippet": "    private static final double K15_10 =                 0.0                       - B_10;",
        "begin_line": 125,
        "end_line": 125,
        "comment": " Internal weights for stage 15, element 10. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.K15_11",
        "snippet": "    private static final double K15_11 =    -2538710946863.0 / 23431227861250000.0 - B_11;",
        "begin_line": 128,
        "end_line": 128,
        "comment": " Internal weights for stage 15, element 11. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.K15_12",
        "snippet": "    private static final double K15_12 =        8824659001.0 / 23066716781250.0    - B_12;",
        "begin_line": 131,
        "end_line": 131,
        "comment": " Internal weights for stage 15, element 12. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.K15_13",
        "snippet": "    private static final double K15_13 =      -11518334563.0 / 33831184612500.0;",
        "begin_line": 134,
        "end_line": 134,
        "comment": " Internal weights for stage 15, element 13. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.K15_14",
        "snippet": "    private static final double K15_14 =        1912306948.0 / 13532473845.0;",
        "begin_line": 137,
        "end_line": 137,
        "comment": " Internal weights for stage 15, element 14. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.C16",
        "snippet": "    private static final double C16    = 7.0 / 9.0;",
        "begin_line": 140,
        "end_line": 140,
        "comment": " Time step for stage 16 (interpolation only). "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.K16_01",
        "snippet": "    private static final double K16_01 =      -13613986967.0 / 31741908048.0       - B_01;",
        "begin_line": 144,
        "end_line": 144,
        "comment": " Internal weights for stage 16, element 1. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.K16_06",
        "snippet": "    private static final double K16_06 =       -4755612631.0 / 1012344804.0        - B_06;",
        "begin_line": 149,
        "end_line": 149,
        "comment": " Internal weights for stage 16, element 6. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.K16_07",
        "snippet": "    private static final double K16_07 =    42939257944576.0 / 5588559685701.0     - B_07;",
        "begin_line": 152,
        "end_line": 152,
        "comment": " Internal weights for stage 16, element 7. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.K16_08",
        "snippet": "    private static final double K16_08 =    77881972900277.0 / 19140370552944.0    - B_08;",
        "begin_line": 155,
        "end_line": 155,
        "comment": " Internal weights for stage 16, element 8. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.K16_09",
        "snippet": "    private static final double K16_09 =    22719829234375.0 / 63689648654052.0    - B_09;",
        "begin_line": 158,
        "end_line": 158,
        "comment": " Internal weights for stage 16, element 9. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.K16_10",
        "snippet": "    private static final double K16_10 =                 0.0                       - B_10;",
        "begin_line": 161,
        "end_line": 161,
        "comment": " Internal weights for stage 16, element 10. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.K16_11",
        "snippet": "    private static final double K16_11 =                 0.0                       - B_11;",
        "begin_line": 164,
        "end_line": 164,
        "comment": " Internal weights for stage 16, element 11. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.K16_12",
        "snippet": "    private static final double K16_12 =                 0.0                       - B_12;",
        "begin_line": 167,
        "end_line": 167,
        "comment": " Internal weights for stage 16, element 12. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.K16_13",
        "snippet": "    private static final double K16_13 =       -1199007803.0 / 857031517296.0;",
        "begin_line": 170,
        "end_line": 170,
        "comment": " Internal weights for stage 16, element 13. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.K16_14",
        "snippet": "    private static final double K16_14 =      157882067000.0 / 53564469831.0;",
        "begin_line": 173,
        "end_line": 173,
        "comment": " Internal weights for stage 16, element 14. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.K16_15",
        "snippet": "    private static final double K16_15 =     -290468882375.0 / 31741908048.0;",
        "begin_line": 176,
        "end_line": 176,
        "comment": " Internal weights for stage 16, element 15. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D",
        "snippet": "    private static final double[][] D = {\n\n      {        -17751989329.0 / 2106076560.0,               4272954039.0 / 7539864640.0,\n              -118476319744.0 / 38604839385.0,            755123450731.0 / 316657731600.0,\n        3692384461234828125.0 / 1744130441634250432.0,     -4612609375.0 / 5293382976.0,\n              2091772278379.0 / 933644586600.0,             2136624137.0 / 3382989120.0,\n                    -126493.0 / 1421424.0,                    98350000.0 / 5419179.0,\n                  -18878125.0 / 2053168.0,                 -1944542619.0 / 438351368.0},\n\n      {         32941697297.0 / 3159114840.0,             456696183123.0 / 1884966160.0,\n             19132610714624.0 / 115814518155.0,       -177904688592943.0 / 474986597400.0,\n       -4821139941836765625.0 / 218016305204281304.0,      30702015625.0 / 3970037232.0,\n            -85916079474274.0 / 2800933759800.0,           -5919468007.0 / 634310460.0,\n                    2479159.0 / 157936.0,                    -18750000.0 / 602131.0,\n                  -19203125.0 / 2053168.0,                 15700361463.0 / 438351368.0},\n\n      {         12627015655.0 / 631822968.0,              -72955222965.0 / 188496616.0,\n            -13145744952320.0 / 69488710893.0,          30084216194513.0 / 56998391688.0,\n        -296858761006640625.0 / 25648977082856624.0,         569140625.0 / 82709109.0,\n               -18684190637.0 / 18672891732.0,                69644045.0 / 89549712.0,\n                  -11847025.0 / 4264272.0,                  -978650000.0 / 16257537.0,\n                  519371875.0 / 6159504.0,                  5256837225.0 / 438351368.0},\n\n      {          -450944925.0 / 17550638.0,               -14532122925.0 / 94248308.0,\n              -595876966400.0 / 2573655959.0,             188748653015.0 / 527762886.0,\n        2545485458115234375.0 / 27252038150535163.0,       -1376953125.0 / 36759604.0,\n                53995596795.0 / 518691437.0,                 210311225.0 / 7047894.0,\n                   -1718875.0 / 39484.0,                      58000000.0 / 602131.0,\n                   -1546875.0 / 39484.0,                   -1262172375.0 / 8429834.0}\n\n    };",
        "begin_line": 181,
        "end_line": 211,
        "comment": " Interpolation weights.\n     * (beware that only the non-null values are in the table)\n     "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.yDotKLast",
        "snippet": "    private double[][] yDotKLast;",
        "begin_line": 214,
        "end_line": 214,
        "comment": " Last evaluations. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.v",
        "snippet": "    private double[][] v;",
        "begin_line": 217,
        "end_line": 217,
        "comment": " Vectors for interpolation. "
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java",
        "signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.vectorsInitialized",
        "snippet": "    private boolean vectorsInitialized;",
        "begin_line": 220,
        "end_line": 220,
        "comment": " Initialization indicator for the interpolation vectors. "
    },
    {
        "class_name": "org.apache.commons.math.ode.events.EventException",
        "src_path": "src/main/java/org/apache/commons/math/ode/events/EventException.java",
        "signature": "org.apache.commons.math.ode.events.EventException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -898215297400035290L;",
        "begin_line": 31,
        "end_line": 31,
        "comment": " Serialization UID. "
    },
    {
        "class_name": "org.apache.commons.math.ode.events.EventHandler",
        "src_path": "src/main/java/org/apache/commons/math/ode/events/EventHandler.java",
        "signature": "org.apache.commons.math.ode.events.EventHandler.STOP",
        "snippet": "  int STOP = 0;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " Stop indicator.\n   * <p>This value should be used as the return value of the {@link\n   * #eventOccurred eventOccurred} method when the integration should be\n   * stopped after the event ending the current step.</p>\n   "
    },
    {
        "class_name": "org.apache.commons.math.ode.events.EventHandler",
        "src_path": "src/main/java/org/apache/commons/math/ode/events/EventHandler.java",
        "signature": "org.apache.commons.math.ode.events.EventHandler.RESET_STATE",
        "snippet": "  int RESET_STATE = 1;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " Reset state indicator.\n   * <p>This value should be used as the return value of the {@link\n   * #eventOccurred eventOccurred} method when the integration should\n   * go on after the event ending the current step, with a new state\n   * vector (which will be retrieved thanks to the {@link #resetState\n   * resetState} method).</p>\n   "
    },
    {
        "class_name": "org.apache.commons.math.ode.events.EventHandler",
        "src_path": "src/main/java/org/apache/commons/math/ode/events/EventHandler.java",
        "signature": "org.apache.commons.math.ode.events.EventHandler.RESET_DERIVATIVES",
        "snippet": "  int RESET_DERIVATIVES = 2;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " Reset derivatives indicator.\n   * <p>This value should be used as the return value of the {@link\n   * #eventOccurred eventOccurred} method when the integration should\n   * go on after the event ending the current step, with a new derivatives\n   * vector (which will be retrieved thanks to the {@link\n   * org.apache.commons.math.ode.FirstOrderDifferentialEquations#computeDerivatives}\n   * method).</p>\n   "
    },
    {
        "class_name": "org.apache.commons.math.ode.events.EventHandler",
        "src_path": "src/main/java/org/apache/commons/math/ode/events/EventHandler.java",
        "signature": "org.apache.commons.math.ode.events.EventHandler.CONTINUE",
        "snippet": "  int CONTINUE = 3;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " Continue indicator.\n   * <p>This value should be used as the return value of the {@link\n   * #eventOccurred eventOccurred} method when the integration should go\n   * on after the event ending the current step.</p>\n   "
    },
    {
        "class_name": "org.apache.commons.math.ode.events.EventState",
        "src_path": "src/main/java/org/apache/commons/math/ode/events/EventState.java",
        "signature": "org.apache.commons.math.ode.events.EventState.handler",
        "snippet": "    private final EventHandler handler;",
        "begin_line": 45,
        "end_line": 45,
        "comment": " Event handler. "
    },
    {
        "class_name": "org.apache.commons.math.ode.events.EventState",
        "src_path": "src/main/java/org/apache/commons/math/ode/events/EventState.java",
        "signature": "org.apache.commons.math.ode.events.EventState.maxCheckInterval",
        "snippet": "    private final double maxCheckInterval;",
        "begin_line": 48,
        "end_line": 48,
        "comment": " Maximal time interval between events handler checks. "
    },
    {
        "class_name": "org.apache.commons.math.ode.events.EventState",
        "src_path": "src/main/java/org/apache/commons/math/ode/events/EventState.java",
        "signature": "org.apache.commons.math.ode.events.EventState.convergence",
        "snippet": "    private final double convergence;",
        "begin_line": 51,
        "end_line": 51,
        "comment": " Convergence threshold for event localization. "
    },
    {
        "class_name": "org.apache.commons.math.ode.events.EventState",
        "src_path": "src/main/java/org/apache/commons/math/ode/events/EventState.java",
        "signature": "org.apache.commons.math.ode.events.EventState.maxIterationCount",
        "snippet": "    private final int maxIterationCount;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " Upper limit in the iteration count for event localization. "
    },
    {
        "class_name": "org.apache.commons.math.ode.events.EventState",
        "src_path": "src/main/java/org/apache/commons/math/ode/events/EventState.java",
        "signature": "org.apache.commons.math.ode.events.EventState.t0",
        "snippet": "    private double t0;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " Time at the beginning of the step. "
    },
    {
        "class_name": "org.apache.commons.math.ode.events.EventState",
        "src_path": "src/main/java/org/apache/commons/math/ode/events/EventState.java",
        "signature": "org.apache.commons.math.ode.events.EventState.g0",
        "snippet": "    private double g0;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " Value of the events handler at the beginning of the step. "
    },
    {
        "class_name": "org.apache.commons.math.ode.events.EventState",
        "src_path": "src/main/java/org/apache/commons/math/ode/events/EventState.java",
        "signature": "org.apache.commons.math.ode.events.EventState.g0Positive",
        "snippet": "    private boolean g0Positive;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " Simulated sign of g0 (we cheat when crossing events). "
    },
    {
        "class_name": "org.apache.commons.math.ode.events.EventState",
        "src_path": "src/main/java/org/apache/commons/math/ode/events/EventState.java",
        "signature": "org.apache.commons.math.ode.events.EventState.pendingEvent",
        "snippet": "    private boolean pendingEvent;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " Indicator of event expected during the step. "
    },
    {
        "class_name": "org.apache.commons.math.ode.events.EventState",
        "src_path": "src/main/java/org/apache/commons/math/ode/events/EventState.java",
        "signature": "org.apache.commons.math.ode.events.EventState.pendingEventTime",
        "snippet": "    private double pendingEventTime;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " Occurrence time of the pending event. "
    },
    {
        "class_name": "org.apache.commons.math.ode.events.EventState",
        "src_path": "src/main/java/org/apache/commons/math/ode/events/EventState.java",
        "signature": "org.apache.commons.math.ode.events.EventState.previousEventTime",
        "snippet": "    private double previousEventTime;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " Occurrence time of the previous event. "
    },
    {
        "class_name": "org.apache.commons.math.ode.events.EventState",
        "src_path": "src/main/java/org/apache/commons/math/ode/events/EventState.java",
        "signature": "org.apache.commons.math.ode.events.EventState.forward",
        "snippet": "    private boolean forward;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " Integration direction. "
    },
    {
        "class_name": "org.apache.commons.math.ode.events.EventState",
        "src_path": "src/main/java/org/apache/commons/math/ode/events/EventState.java",
        "signature": "org.apache.commons.math.ode.events.EventState.increasing",
        "snippet": "    private boolean increasing;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " Variation direction around pending event.\n     *  (this is considered with respect to the integration direction)\n     "
    },
    {
        "class_name": "org.apache.commons.math.ode.events.EventState",
        "src_path": "src/main/java/org/apache/commons/math/ode/events/EventState.java",
        "signature": "org.apache.commons.math.ode.events.EventState.nextAction",
        "snippet": "    private int nextAction;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " Next action indicator. "
    },
    {
        "class_name": "org.apache.commons.math.ode.events.CombinedEventsManager",
        "src_path": "src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java",
        "signature": "org.apache.commons.math.ode.events.CombinedEventsManager.states",
        "snippet": "    private final List<EventState> states;",
        "begin_line": 41,
        "end_line": 41,
        "comment": " Events states. "
    },
    {
        "class_name": "org.apache.commons.math.ode.events.CombinedEventsManager",
        "src_path": "src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java",
        "signature": "org.apache.commons.math.ode.events.CombinedEventsManager.first",
        "snippet": "    private EventState first;",
        "begin_line": 44,
        "end_line": 44,
        "comment": " First active event. "
    },
    {
        "class_name": "org.apache.commons.math.ode.events.CombinedEventsManager",
        "src_path": "src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java",
        "signature": "org.apache.commons.math.ode.events.CombinedEventsManager.initialized",
        "snippet": "    private boolean initialized;",
        "begin_line": 47,
        "end_line": 47,
        "comment": " Initialization indicator. "
    },
    {
        "class_name": "org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians",
        "src_path": "src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java",
        "signature": "org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians.integrator",
        "snippet": "    private final FirstOrderIntegrator integrator;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " Underlying integrator for compound problem. "
    },
    {
        "class_name": "org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians",
        "src_path": "src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java",
        "signature": "org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians.ode",
        "snippet": "    private final ODEWithJacobians ode;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " Raw equations to integrate. "
    },
    {
        "class_name": "org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians",
        "src_path": "src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java",
        "signature": "org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians.maxEvaluations",
        "snippet": "    private int maxEvaluations;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " Maximal number of evaluations allowed. "
    },
    {
        "class_name": "org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians",
        "src_path": "src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java",
        "signature": "org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians.evaluations",
        "snippet": "    private int evaluations;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " Number of evaluations already performed. "
    },
    {
        "class_name": "org.apache.commons.math.ode.jacobians.MappingWrapper",
        "src_path": "src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java",
        "signature": "org.apache.commons.math.ode.jacobians.MappingWrapper.y",
        "snippet": "        private final double[]   y;",
        "begin_line": 359,
        "end_line": 359,
        "comment": " Current state. "
    },
    {
        "class_name": "org.apache.commons.math.ode.jacobians.MappingWrapper",
        "src_path": "src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java",
        "signature": "org.apache.commons.math.ode.jacobians.MappingWrapper.yDot",
        "snippet": "        private final double[]   yDot;",
        "begin_line": 362,
        "end_line": 362,
        "comment": " Time derivative of the current state. "
    },
    {
        "class_name": "org.apache.commons.math.ode.jacobians.MappingWrapper",
        "src_path": "src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java",
        "signature": "org.apache.commons.math.ode.jacobians.MappingWrapper.dFdY",
        "snippet": "        private final double[][] dFdY;",
        "begin_line": 365,
        "end_line": 365,
        "comment": " Derivatives of yDot with respect to state. "
    },
    {
        "class_name": "org.apache.commons.math.ode.jacobians.MappingWrapper",
        "src_path": "src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java",
        "signature": "org.apache.commons.math.ode.jacobians.MappingWrapper.dFdP",
        "snippet": "        private final double[][] dFdP;",
        "begin_line": 368,
        "end_line": 368,
        "comment": " Derivatives of yDot with respect to parameters. "
    },
    {
        "class_name": "org.apache.commons.math.ode.jacobians.FiniteDifferencesWrapper",
        "src_path": "src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java",
        "signature": "org.apache.commons.math.ode.jacobians.FiniteDifferencesWrapper.ode",
        "snippet": "        private final ParameterizedODE ode;",
        "begin_line": 448,
        "end_line": 448,
        "comment": " Raw ODE without jacobians computation. "
    },
    {
        "class_name": "org.apache.commons.math.ode.jacobians.FiniteDifferencesWrapper",
        "src_path": "src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java",
        "signature": "org.apache.commons.math.ode.jacobians.FiniteDifferencesWrapper.p",
        "snippet": "        private final double[] p;",
        "begin_line": 451,
        "end_line": 451,
        "comment": " Parameters array (may be null if parameters dimension from original problem is zero) "
    },
    {
        "class_name": "org.apache.commons.math.ode.jacobians.FiniteDifferencesWrapper",
        "src_path": "src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java",
        "signature": "org.apache.commons.math.ode.jacobians.FiniteDifferencesWrapper.hY",
        "snippet": "        private final double[] hY;",
        "begin_line": 454,
        "end_line": 454,
        "comment": " Step sizes to use for computing the jacobian df/dy. "
    },
    {
        "class_name": "org.apache.commons.math.ode.jacobians.FiniteDifferencesWrapper",
        "src_path": "src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java",
        "signature": "org.apache.commons.math.ode.jacobians.FiniteDifferencesWrapper.hP",
        "snippet": "        private final double[] hP;",
        "begin_line": 457,
        "end_line": 457,
        "comment": " Step sizes to use for computing the jacobian df/dp. "
    },
    {
        "class_name": "org.apache.commons.math.ode.jacobians.FiniteDifferencesWrapper",
        "src_path": "src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java",
        "signature": "org.apache.commons.math.ode.jacobians.FiniteDifferencesWrapper.tmpDot",
        "snippet": "        private final double[] tmpDot;",
        "begin_line": 460,
        "end_line": 460,
        "comment": " Temporary array for state derivatives used to compute jacobians. "
    },
    {
        "class_name": "org.apache.commons.math.ode.jacobians.StepHandlerWrapper",
        "src_path": "src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java",
        "signature": "org.apache.commons.math.ode.jacobians.StepHandlerWrapper.handler",
        "snippet": "        private final StepHandlerWithJacobians handler;",
        "begin_line": 536,
        "end_line": 536,
        "comment": " Underlying step handler with jacobians. "
    },
    {
        "class_name": "org.apache.commons.math.ode.jacobians.StepHandlerWrapper",
        "src_path": "src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java",
        "signature": "org.apache.commons.math.ode.jacobians.StepHandlerWrapper.n",
        "snippet": "        private final int n;",
        "begin_line": 539,
        "end_line": 539,
        "comment": " Dimension of the original ODE. "
    },
    {
        "class_name": "org.apache.commons.math.ode.jacobians.StepHandlerWrapper",
        "src_path": "src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java",
        "signature": "org.apache.commons.math.ode.jacobians.StepHandlerWrapper.k",
        "snippet": "        private final int k;",
        "begin_line": 542,
        "end_line": 542,
        "comment": " Number of parameters. "
    },
    {
        "class_name": "org.apache.commons.math.ode.jacobians.StepInterpolatorWrapper",
        "src_path": "src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java",
        "signature": "org.apache.commons.math.ode.jacobians.StepInterpolatorWrapper.interpolator",
        "snippet": "        private StepInterpolator interpolator;",
        "begin_line": 586,
        "end_line": 586,
        "comment": " Wrapped interpolator. "
    },
    {
        "class_name": "org.apache.commons.math.ode.jacobians.StepInterpolatorWrapper",
        "src_path": "src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java",
        "signature": "org.apache.commons.math.ode.jacobians.StepInterpolatorWrapper.y",
        "snippet": "        private double[] y;",
        "begin_line": 589,
        "end_line": 589,
        "comment": " State array. "
    },
    {
        "class_name": "org.apache.commons.math.ode.jacobians.StepInterpolatorWrapper",
        "src_path": "src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java",
        "signature": "org.apache.commons.math.ode.jacobians.StepInterpolatorWrapper.dydy0",
        "snippet": "        private double[][] dydy0;",
        "begin_line": 592,
        "end_line": 592,
        "comment": " Jacobian with respect to initial state dy/dy0. "
    },
    {
        "class_name": "org.apache.commons.math.ode.jacobians.StepInterpolatorWrapper",
        "src_path": "src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java",
        "signature": "org.apache.commons.math.ode.jacobians.StepInterpolatorWrapper.dydp",
        "snippet": "        private double[][] dydp;",
        "begin_line": 595,
        "end_line": 595,
        "comment": " Jacobian with respect to parameters dy/dp. "
    },
    {
        "class_name": "org.apache.commons.math.ode.jacobians.StepInterpolatorWrapper",
        "src_path": "src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java",
        "signature": "org.apache.commons.math.ode.jacobians.StepInterpolatorWrapper.yDot",
        "snippet": "        private double[] yDot;",
        "begin_line": 598,
        "end_line": 598,
        "comment": " Time derivative of the state array. "
    },
    {
        "class_name": "org.apache.commons.math.ode.jacobians.StepInterpolatorWrapper",
        "src_path": "src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java",
        "signature": "org.apache.commons.math.ode.jacobians.StepInterpolatorWrapper.dydy0Dot",
        "snippet": "        private double[][] dydy0Dot;",
        "begin_line": 601,
        "end_line": 601,
        "comment": " Time derivative of the sacobian with respect to initial state dy/dy0. "
    },
    {
        "class_name": "org.apache.commons.math.ode.jacobians.StepInterpolatorWrapper",
        "src_path": "src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java",
        "signature": "org.apache.commons.math.ode.jacobians.StepInterpolatorWrapper.dydpDot",
        "snippet": "        private double[][] dydpDot;",
        "begin_line": 604,
        "end_line": 604,
        "comment": " Time derivative of the jacobian with respect to parameters dy/dp. "
    },
    {
        "class_name": "org.apache.commons.math.ode.jacobians.EventHandlerWrapper",
        "src_path": "src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java",
        "signature": "org.apache.commons.math.ode.jacobians.EventHandlerWrapper.handler",
        "snippet": "        private final EventHandlerWithJacobians handler;",
        "begin_line": 837,
        "end_line": 837,
        "comment": " Underlying event handler with jacobians. "
    },
    {
        "class_name": "org.apache.commons.math.ode.jacobians.EventHandlerWrapper",
        "src_path": "src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java",
        "signature": "org.apache.commons.math.ode.jacobians.EventHandlerWrapper.y",
        "snippet": "        private double[] y;",
        "begin_line": 840,
        "end_line": 840,
        "comment": " State array. "
    },
    {
        "class_name": "org.apache.commons.math.ode.jacobians.EventHandlerWrapper",
        "src_path": "src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java",
        "signature": "org.apache.commons.math.ode.jacobians.EventHandlerWrapper.dydy0",
        "snippet": "        private double[][] dydy0;",
        "begin_line": 843,
        "end_line": 843,
        "comment": " Jacobian with respect to initial state dy/dy0. "
    },
    {
        "class_name": "org.apache.commons.math.ode.jacobians.EventHandlerWrapper",
        "src_path": "src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java",
        "signature": "org.apache.commons.math.ode.jacobians.EventHandlerWrapper.dydp",
        "snippet": "        private double[][] dydp;",
        "begin_line": 846,
        "end_line": 846,
        "comment": " Jacobian with respect to parameters dy/dp. "
    },
    {
        "class_name": "org.apache.commons.math.ode.jacobians.EventHandlerWithJacobians",
        "src_path": "src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java",
        "signature": "org.apache.commons.math.ode.jacobians.EventHandlerWithJacobians.STOP",
        "snippet": "    int STOP = 0;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " Stop indicator.\n     * <p>This value should be used as the return value of the {@link\n     * #eventOccurred eventOccurred} method when the integration should be\n     * stopped after the event ending the current step.</p>\n     "
    },
    {
        "class_name": "org.apache.commons.math.ode.jacobians.EventHandlerWithJacobians",
        "src_path": "src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java",
        "signature": "org.apache.commons.math.ode.jacobians.EventHandlerWithJacobians.RESET_STATE",
        "snippet": "    int RESET_STATE = 1;",
        "begin_line": 89,
        "end_line": 89,
        "comment": " Reset state indicator.\n     * <p>This value should be used as the return value of the {@link\n     * #eventOccurred eventOccurred} method when the integration should\n     * go on after the event ending the current step, with a new state\n     * vector (which will be retrieved thanks to the {@link #resetState\n     * resetState} method).</p>\n     "
    },
    {
        "class_name": "org.apache.commons.math.ode.jacobians.EventHandlerWithJacobians",
        "src_path": "src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java",
        "signature": "org.apache.commons.math.ode.jacobians.EventHandlerWithJacobians.RESET_DERIVATIVES",
        "snippet": "    int RESET_DERIVATIVES = 2;",
        "begin_line": 99,
        "end_line": 99,
        "comment": " Reset derivatives indicator.\n     * <p>This value should be used as the return value of the {@link\n     * #eventOccurred eventOccurred} method when the integration should\n     * go on after the event ending the current step, with a new derivatives\n     * vector (which will be retrieved thanks to the {@link\n     * org.apache.commons.math.ode.FirstOrderDifferentialEquations#computeDerivatives}\n     * method).</p>\n     "
    },
    {
        "class_name": "org.apache.commons.math.ode.jacobians.EventHandlerWithJacobians",
        "src_path": "src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java",
        "signature": "org.apache.commons.math.ode.jacobians.EventHandlerWithJacobians.CONTINUE",
        "snippet": "    int CONTINUE = 3;",
        "begin_line": 106,
        "end_line": 106,
        "comment": " Continue indicator.\n     * <p>This value should be used as the return value of the {@link\n     * #eventOccurred eventOccurred} method when the integration should go\n     * on after the event ending the current step.</p>\n     "
    },
    {
        "class_name": "org.apache.commons.math.ode.sampling.AbstractStepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java",
        "signature": "org.apache.commons.math.ode.sampling.AbstractStepInterpolator.previousTime",
        "snippet": "  protected double previousTime;",
        "begin_line": 48,
        "end_line": 48,
        "comment": " previous time "
    },
    {
        "class_name": "org.apache.commons.math.ode.sampling.AbstractStepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java",
        "signature": "org.apache.commons.math.ode.sampling.AbstractStepInterpolator.currentTime",
        "snippet": "  protected double currentTime;",
        "begin_line": 51,
        "end_line": 51,
        "comment": " current time "
    },
    {
        "class_name": "org.apache.commons.math.ode.sampling.AbstractStepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java",
        "signature": "org.apache.commons.math.ode.sampling.AbstractStepInterpolator.h",
        "snippet": "  protected double h;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " current time step "
    },
    {
        "class_name": "org.apache.commons.math.ode.sampling.AbstractStepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java",
        "signature": "org.apache.commons.math.ode.sampling.AbstractStepInterpolator.currentState",
        "snippet": "  protected double[] currentState;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " current state "
    },
    {
        "class_name": "org.apache.commons.math.ode.sampling.AbstractStepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java",
        "signature": "org.apache.commons.math.ode.sampling.AbstractStepInterpolator.interpolatedTime",
        "snippet": "  protected double interpolatedTime;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " interpolated time "
    },
    {
        "class_name": "org.apache.commons.math.ode.sampling.AbstractStepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java",
        "signature": "org.apache.commons.math.ode.sampling.AbstractStepInterpolator.interpolatedState",
        "snippet": "  protected double[] interpolatedState;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " interpolated state "
    },
    {
        "class_name": "org.apache.commons.math.ode.sampling.AbstractStepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java",
        "signature": "org.apache.commons.math.ode.sampling.AbstractStepInterpolator.interpolatedDerivatives",
        "snippet": "  protected double[] interpolatedDerivatives;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " interpolated derivatives "
    },
    {
        "class_name": "org.apache.commons.math.ode.sampling.AbstractStepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java",
        "signature": "org.apache.commons.math.ode.sampling.AbstractStepInterpolator.finalized",
        "snippet": "  private boolean finalized;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " indicate if the step has been finalized or not. "
    },
    {
        "class_name": "org.apache.commons.math.ode.sampling.AbstractStepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java",
        "signature": "org.apache.commons.math.ode.sampling.AbstractStepInterpolator.forward",
        "snippet": "  private boolean forward;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " integration direction. "
    },
    {
        "class_name": "org.apache.commons.math.ode.sampling.AbstractStepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java",
        "signature": "org.apache.commons.math.ode.sampling.AbstractStepInterpolator.dirtyState",
        "snippet": "  private boolean dirtyState;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " indicator for dirty state. "
    },
    {
        "class_name": "org.apache.commons.math.ode.sampling.NordsieckStepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java",
        "signature": "org.apache.commons.math.ode.sampling.NordsieckStepInterpolator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -7179861704951334960L;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.ode.sampling.NordsieckStepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java",
        "signature": "org.apache.commons.math.ode.sampling.NordsieckStepInterpolator.stateVariation",
        "snippet": "    protected double[] stateVariation;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " State variation. "
    },
    {
        "class_name": "org.apache.commons.math.ode.sampling.NordsieckStepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java",
        "signature": "org.apache.commons.math.ode.sampling.NordsieckStepInterpolator.scalingH",
        "snippet": "    private double scalingH;",
        "begin_line": 49,
        "end_line": 49,
        "comment": " Step size used in the first scaled derivative and Nordsieck vector. "
    },
    {
        "class_name": "org.apache.commons.math.ode.sampling.NordsieckStepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java",
        "signature": "org.apache.commons.math.ode.sampling.NordsieckStepInterpolator.referenceTime",
        "snippet": "    private double referenceTime;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " Reference time for all arrays.\n     * <p>Sometimes, the reference time is the same as previousTime,\n     * sometimes it is the same as currentTime, so we use a separate\n     * field to avoid any confusion.\n     * </p>\n     "
    },
    {
        "class_name": "org.apache.commons.math.ode.sampling.NordsieckStepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java",
        "signature": "org.apache.commons.math.ode.sampling.NordsieckStepInterpolator.scaled",
        "snippet": "    private double[] scaled;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " First scaled derivative. "
    },
    {
        "class_name": "org.apache.commons.math.ode.sampling.NordsieckStepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java",
        "signature": "org.apache.commons.math.ode.sampling.NordsieckStepInterpolator.nordsieck",
        "snippet": "    private Array2DRowRealMatrix nordsieck;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " Nordsieck vector. "
    },
    {
        "class_name": "org.apache.commons.math.ode.sampling.DummyStepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java",
        "signature": "org.apache.commons.math.ode.sampling.DummyStepInterpolator.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1708010296707839488L;",
        "begin_line": 44,
        "end_line": 44,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.ode.sampling.DummyStepInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java",
        "signature": "org.apache.commons.math.ode.sampling.DummyStepInterpolator.currentDerivative",
        "snippet": "  private double[] currentDerivative;",
        "begin_line": 47,
        "end_line": 47,
        "comment": " Current derivative. "
    },
    {
        "class_name": "org.apache.commons.math.ode.sampling.StepNormalizer",
        "src_path": "src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java",
        "signature": "org.apache.commons.math.ode.sampling.StepNormalizer.h",
        "snippet": "    private double h;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " Fixed time step. "
    },
    {
        "class_name": "org.apache.commons.math.ode.sampling.StepNormalizer",
        "src_path": "src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java",
        "signature": "org.apache.commons.math.ode.sampling.StepNormalizer.handler",
        "snippet": "    private final FixedStepHandler handler;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " Underlying step handler. "
    },
    {
        "class_name": "org.apache.commons.math.ode.sampling.StepNormalizer",
        "src_path": "src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java",
        "signature": "org.apache.commons.math.ode.sampling.StepNormalizer.lastTime",
        "snippet": "    private double lastTime;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " Last step time. "
    },
    {
        "class_name": "org.apache.commons.math.ode.sampling.StepNormalizer",
        "src_path": "src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java",
        "signature": "org.apache.commons.math.ode.sampling.StepNormalizer.lastState",
        "snippet": "    private double[] lastState;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " Last State vector. "
    },
    {
        "class_name": "org.apache.commons.math.ode.sampling.StepNormalizer",
        "src_path": "src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java",
        "signature": "org.apache.commons.math.ode.sampling.StepNormalizer.lastDerivatives",
        "snippet": "    private double[] lastDerivatives;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " Last Derivatives vector. "
    },
    {
        "class_name": "org.apache.commons.math.ode.sampling.StepNormalizer",
        "src_path": "src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java",
        "signature": "org.apache.commons.math.ode.sampling.StepNormalizer.forward",
        "snippet": "    private boolean forward;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " Integration direction indicator. "
    },
    {
        "class_name": "org.apache.commons.math.ode.sampling.LazyHolder",
        "src_path": "src/main/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java",
        "signature": "org.apache.commons.math.ode.sampling.LazyHolder.INSTANCE",
        "snippet": "        private static final DummyStepHandler INSTANCE = new DummyStepHandler();",
        "begin_line": 89,
        "end_line": 89,
        "comment": " Cached field instance. "
    },
    {
        "class_name": "org.apache.commons.math.util.BigReal",
        "src_path": "src/main/java/org/apache/commons/math/util/BigReal.java",
        "signature": "org.apache.commons.math.util.BigReal.ZERO",
        "snippet": "    public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);",
        "begin_line": 41,
        "end_line": 41,
        "comment": " A big real representing 0. "
    },
    {
        "class_name": "org.apache.commons.math.util.BigReal",
        "src_path": "src/main/java/org/apache/commons/math/util/BigReal.java",
        "signature": "org.apache.commons.math.util.BigReal.ONE",
        "snippet": "    public static final BigReal ONE = new BigReal(BigDecimal.ONE);",
        "begin_line": 44,
        "end_line": 44,
        "comment": " A big real representing 1. "
    },
    {
        "class_name": "org.apache.commons.math.util.BigReal",
        "src_path": "src/main/java/org/apache/commons/math/util/BigReal.java",
        "signature": "org.apache.commons.math.util.BigReal.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 4984534880991310382L;",
        "begin_line": 47,
        "end_line": 47,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.util.BigReal",
        "src_path": "src/main/java/org/apache/commons/math/util/BigReal.java",
        "signature": "org.apache.commons.math.util.BigReal.d",
        "snippet": "    private final BigDecimal d;",
        "begin_line": 50,
        "end_line": 50,
        "comment": " Underlying BigDecimal. "
    },
    {
        "class_name": "org.apache.commons.math.util.BigReal",
        "src_path": "src/main/java/org/apache/commons/math/util/BigReal.java",
        "signature": "org.apache.commons.math.util.BigReal.roundingMode",
        "snippet": "    private RoundingMode roundingMode = RoundingMode.HALF_UP;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " Rounding mode for divisions. *"
    },
    {
        "class_name": "org.apache.commons.math.util.BigReal",
        "src_path": "src/main/java/org/apache/commons/math/util/BigReal.java",
        "signature": "org.apache.commons.math.util.BigReal.scale",
        "snippet": "    private int scale = 64;",
        "begin_line": 56,
        "end_line": 56,
        "comment": "* BigDecimal scale **"
    },
    {
        "class_name": "org.apache.commons.math.util.ResizableDoubleArray",
        "src_path": "src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java",
        "signature": "org.apache.commons.math.util.ResizableDoubleArray.ADDITIVE_MODE",
        "snippet": "    public static final int ADDITIVE_MODE = 1;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " additive expansion mode "
    },
    {
        "class_name": "org.apache.commons.math.util.ResizableDoubleArray",
        "src_path": "src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java",
        "signature": "org.apache.commons.math.util.ResizableDoubleArray.MULTIPLICATIVE_MODE",
        "snippet": "    public static final int MULTIPLICATIVE_MODE = 0;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " multiplicative expansion mode "
    },
    {
        "class_name": "org.apache.commons.math.util.ResizableDoubleArray",
        "src_path": "src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java",
        "signature": "org.apache.commons.math.util.ResizableDoubleArray.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3485529955529426875L;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.util.ResizableDoubleArray",
        "src_path": "src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java",
        "signature": "org.apache.commons.math.util.ResizableDoubleArray.contractionCriteria",
        "snippet": "    protected float contractionCriteria = 2.5f;",
        "begin_line": 90,
        "end_line": 90,
        "comment": "\n     * The contraction criteria determines when the internal array will be\n     * contracted to fit the number of elements contained in the element\n     *  array + 1.\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.ResizableDoubleArray",
        "src_path": "src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java",
        "signature": "org.apache.commons.math.util.ResizableDoubleArray.expansionFactor",
        "snippet": "    protected float expansionFactor = 2.0f;",
        "begin_line": 100,
        "end_line": 100,
        "comment": "\n     * The expansion factor of the array.  When the array needs to be expanded,\n     * the new array size will be\n     * <code>internalArray.length * expansionFactor</code>\n     * if <code>expansionMode</code> is set to MULTIPLICATIVE_MODE, or\n     * <code>internalArray.length + expansionFactor</code> if\n     * <code>expansionMode</code> is set to ADDITIVE_MODE.\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.ResizableDoubleArray",
        "src_path": "src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java",
        "signature": "org.apache.commons.math.util.ResizableDoubleArray.expansionMode",
        "snippet": "    protected int expansionMode = MULTIPLICATIVE_MODE;",
        "begin_line": 106,
        "end_line": 106,
        "comment": "\n     * Determines whether array expansion by <code>expansionFactor</code>\n     * is additive or multiplicative.\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.ResizableDoubleArray",
        "src_path": "src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java",
        "signature": "org.apache.commons.math.util.ResizableDoubleArray.initialCapacity",
        "snippet": "    protected int initialCapacity = 16;",
        "begin_line": 112,
        "end_line": 112,
        "comment": "\n     * The initial capacity of the array.  Initial capacity is not exposed as a\n     * property as it is only meaningful when passed to a constructor.\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.ResizableDoubleArray",
        "src_path": "src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java",
        "signature": "org.apache.commons.math.util.ResizableDoubleArray.internalArray",
        "snippet": "    protected double[] internalArray;",
        "begin_line": 117,
        "end_line": 117,
        "comment": "\n     * The internal storage array.\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.ResizableDoubleArray",
        "src_path": "src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java",
        "signature": "org.apache.commons.math.util.ResizableDoubleArray.numElements",
        "snippet": "    protected int numElements = 0;",
        "begin_line": 123,
        "end_line": 123,
        "comment": "\n     * The number of addressable elements in the array.  Note that this\n     * has nothing to do with the length of the internal storage array.\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.ResizableDoubleArray",
        "src_path": "src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java",
        "signature": "org.apache.commons.math.util.ResizableDoubleArray.startIndex",
        "snippet": "    protected int startIndex = 0;",
        "begin_line": 131,
        "end_line": 131,
        "comment": "\n     * The position of the first addressable element in the internal storage\n     * array.  The addressable elements in the array are <code>\n     * internalArray[startIndex],...,internalArray[startIndex + numElements -1]\n     * </code>\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.DefaultTransformer",
        "src_path": "src/main/java/org/apache/commons/math/util/DefaultTransformer.java",
        "signature": "org.apache.commons.math.util.DefaultTransformer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 4019938025047800455L;",
        "begin_line": 35,
        "end_line": 35,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.EPSILON",
        "snippet": "    public static final double EPSILON = 0x1.0p-53;",
        "begin_line": 33,
        "end_line": 33,
        "comment": " Smallest positive number such that 1 - EPSILON is not numerically equal to 1. "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.SAFE_MIN",
        "snippet": "    public static final double SAFE_MIN = 0x1.0p-1022;",
        "begin_line": 39,
        "end_line": 39,
        "comment": " Safe minimum, such that 1 / SAFE_MIN does not overflow.\n     * <p>In IEEE 754 arithmetic, this is also the smallest normalized\n     * number 2<sup>-1022</sup>.</p>\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.TWO_PI",
        "snippet": "    public static final double TWO_PI = 2 * Math.PI;",
        "begin_line": 45,
        "end_line": 45,
        "comment": "\n     * 2 &pi;.\n     * @since 2.1\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.NB",
        "snippet": "    private static final byte  NB = (byte)-1;",
        "begin_line": 48,
        "end_line": 48,
        "comment": " -1.0 cast as a byte. "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.NS",
        "snippet": "    private static final short NS = (short)-1;",
        "begin_line": 51,
        "end_line": 51,
        "comment": " -1.0 cast as a short. "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.PB",
        "snippet": "    private static final byte  PB = (byte)1;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " 1.0 cast as a byte. "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.PS",
        "snippet": "    private static final short PS = (short)1;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " 1.0 cast as a short. "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.ZB",
        "snippet": "    private static final byte  ZB = (byte)0;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " 0.0 cast as a byte. "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.ZS",
        "snippet": "    private static final short ZS = (short)0;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " 0.0 cast as a short. "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.NAN_GAP",
        "snippet": "    private static final int NAN_GAP = 4 * 1024 * 1024;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " Gap between NaN and regular numbers. "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.SGN_MASK",
        "snippet": "    private static final long SGN_MASK = 0x8000000000000000L;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " Offset to order signed double numbers lexicographically. "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.FACTORIALS",
        "snippet": "    private static final long[] FACTORIALS = new long[] {\n                       1l,                  1l,                   2l,\n                       6l,                 24l,                 120l,\n                     720l,               5040l,               40320l,\n                  362880l,            3628800l,            39916800l,\n               479001600l,         6227020800l,         87178291200l,\n           1307674368000l,     20922789888000l,     355687428096000l,\n        6402373705728000l, 121645100408832000l, 2432902008176640000l };",
        "begin_line": 72,
        "end_line": 79,
        "comment": " All long-representable factorials "
    },
    {
        "class_name": "org.apache.commons.math.util.ContinuedFraction",
        "src_path": "src/main/java/org/apache/commons/math/util/ContinuedFraction.java",
        "signature": "org.apache.commons.math.util.ContinuedFraction.DEFAULT_EPSILON",
        "snippet": "    private static final double DEFAULT_EPSILON = 10e-9;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Maximum allowed numerical error. "
    },
    {
        "class_name": "org.apache.commons.math.util.BigRealField",
        "src_path": "src/main/java/org/apache/commons/math/util/BigRealField.java",
        "signature": "org.apache.commons.math.util.BigRealField.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 4756431066541037559L;",
        "begin_line": 36,
        "end_line": 36,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.util.LazyHolder",
        "src_path": "src/main/java/org/apache/commons/math/util/BigRealField.java",
        "signature": "org.apache.commons.math.util.LazyHolder.INSTANCE",
        "snippet": "        private static final BigRealField INSTANCE = new BigRealField();",
        "begin_line": 66,
        "end_line": 66,
        "comment": " Cached field instance. "
    },
    {
        "class_name": "org.apache.commons.math.util.CompositeFormat",
        "src_path": "src/main/java/org/apache/commons/math/util/CompositeFormat.java",
        "signature": "org.apache.commons.math.util.CompositeFormat.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 5358685519349262494L;",
        "begin_line": 33,
        "end_line": 33,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE",
        "snippet": "    protected static final byte FREE    = 0;",
        "begin_line": 42,
        "end_line": 42,
        "comment": " Status indicator for free table entries. "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL",
        "snippet": "    protected static final byte FULL    = 1;",
        "begin_line": 45,
        "end_line": 45,
        "comment": " Status indicator for full table entries. "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED",
        "snippet": "    protected static final byte REMOVED = 2;",
        "begin_line": 48,
        "end_line": 48,
        "comment": " Status indicator for removed table entries. "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3646337053166149105L;",
        "begin_line": 51,
        "end_line": 51,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.CONCURRENT_MODIFICATION_MESSAGE",
        "snippet": "    private static final String CONCURRENT_MODIFICATION_MESSAGE =\n        \"map has been modified while iterating\";",
        "begin_line": 54,
        "end_line": 55,
        "comment": " Message for map modification during iteration. "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.EXHAUSTED_ITERATOR_MESSAGE",
        "snippet": "    private static final String EXHAUSTED_ITERATOR_MESSAGE =\n        \"iterator exhausted\";",
        "begin_line": 58,
        "end_line": 59,
        "comment": " Message for exhausted iterator. "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.LOAD_FACTOR",
        "snippet": "    private static final float LOAD_FACTOR = 0.5f;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " Load factor for the map. "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE",
        "snippet": "    private static final int DEFAULT_EXPECTED_SIZE = 16;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " Default starting size.\n     * <p>This must be a power of two for bit mask to work properly. </p>\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER",
        "snippet": "    private static final int RESIZE_MULTIPLIER = 2;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " Multiplier for size growth when map fills up.\n     * <p>This must be a power of two for bit mask to work properly. </p>\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT",
        "snippet": "    private static final int PERTURB_SHIFT = 5;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " Number of bits to perturb the index when probing for collision resolution. "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.keys",
        "snippet": "    private int[] keys;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " Keys table. "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.values",
        "snippet": "    private double[] values;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " Values table. "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.states",
        "snippet": "    private byte[] states;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " States table. "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.missingEntries",
        "snippet": "    private final double missingEntries;",
        "begin_line": 87,
        "end_line": 87,
        "comment": " Return value for missing entries. "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.size",
        "snippet": "    private int size;",
        "begin_line": 90,
        "end_line": 90,
        "comment": " Current size of the map. "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.mask",
        "snippet": "    private int mask;",
        "begin_line": 93,
        "end_line": 93,
        "comment": " Bit mask for hash values. "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToDoubleHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap.count",
        "snippet": "    private transient int count;",
        "begin_line": 96,
        "end_line": 96,
        "comment": " Modifications count. "
    },
    {
        "class_name": "org.apache.commons.math.util.Iterator",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "signature": "org.apache.commons.math.util.Iterator.referenceCount",
        "snippet": "        private final int referenceCount;",
        "begin_line": 494,
        "end_line": 494,
        "comment": " Reference modification count. "
    },
    {
        "class_name": "org.apache.commons.math.util.Iterator",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "signature": "org.apache.commons.math.util.Iterator.current",
        "snippet": "        private int current;",
        "begin_line": 497,
        "end_line": 497,
        "comment": " Index of current element. "
    },
    {
        "class_name": "org.apache.commons.math.util.Iterator",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java",
        "signature": "org.apache.commons.math.util.Iterator.next",
        "snippet": "        private int next;",
        "begin_line": 500,
        "end_line": 500,
        "comment": " Index of next element. "
    },
    {
        "class_name": "org.apache.commons.math.util.TransformerMap",
        "src_path": "src/main/java/org/apache/commons/math/util/TransformerMap.java",
        "signature": "org.apache.commons.math.util.TransformerMap.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 4605318041528645258L;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.util.TransformerMap",
        "src_path": "src/main/java/org/apache/commons/math/util/TransformerMap.java",
        "signature": "org.apache.commons.math.util.TransformerMap.defaultTransformer",
        "snippet": "    private NumberTransformer defaultTransformer = null;",
        "begin_line": 42,
        "end_line": 42,
        "comment": "\n     * A default Number Transformer for Numbers and numeric Strings.\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.TransformerMap",
        "src_path": "src/main/java/org/apache/commons/math/util/TransformerMap.java",
        "signature": "org.apache.commons.math.util.TransformerMap.map",
        "snippet": "    private Map<Class<?>, NumberTransformer> map = null;",
        "begin_line": 47,
        "end_line": 47,
        "comment": "\n     * The internal Map.\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToFieldHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToFieldHashMap.FREE",
        "snippet": "    protected static final byte FREE    = 0;",
        "begin_line": 45,
        "end_line": 45,
        "comment": " Status indicator for free table entries. "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToFieldHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToFieldHashMap.FULL",
        "snippet": "    protected static final byte FULL    = 1;",
        "begin_line": 48,
        "end_line": 48,
        "comment": " Status indicator for full table entries. "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToFieldHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToFieldHashMap.REMOVED",
        "snippet": "    protected static final byte REMOVED = 2;",
        "begin_line": 51,
        "end_line": 51,
        "comment": " Status indicator for removed table entries. "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToFieldHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToFieldHashMap.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -9179080286849120720L;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToFieldHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToFieldHashMap.CONCURRENT_MODIFICATION_MESSAGE",
        "snippet": "    private static final String CONCURRENT_MODIFICATION_MESSAGE =\n        \"map has been modified while iterating\";",
        "begin_line": 57,
        "end_line": 58,
        "comment": " Message for map modification during iteration. "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToFieldHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToFieldHashMap.EXHAUSTED_ITERATOR_MESSAGE",
        "snippet": "    private static final String EXHAUSTED_ITERATOR_MESSAGE =\n        \"iterator exhausted\";",
        "begin_line": 61,
        "end_line": 62,
        "comment": " Message for exhausted iterator. "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToFieldHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToFieldHashMap.LOAD_FACTOR",
        "snippet": "    private static final float LOAD_FACTOR = 0.5f;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " Load factor for the map. "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToFieldHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToFieldHashMap.DEFAULT_EXPECTED_SIZE",
        "snippet": "    private static final int DEFAULT_EXPECTED_SIZE = 16;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " Default starting size.\n     * <p>This must be a power of two for bit mask to work properly. </p>\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToFieldHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToFieldHashMap.RESIZE_MULTIPLIER",
        "snippet": "    private static final int RESIZE_MULTIPLIER = 2;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " Multiplier for size growth when map fills up.\n     * <p>This must be a power of two for bit mask to work properly. </p>\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToFieldHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToFieldHashMap.PERTURB_SHIFT",
        "snippet": "    private static final int PERTURB_SHIFT = 5;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " Number of bits to perturb the index when probing for collision resolution. "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToFieldHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToFieldHashMap.field",
        "snippet": "    private final Field<T> field;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " Field to which the elements belong. "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToFieldHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToFieldHashMap.keys",
        "snippet": "    private int[] keys;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " Keys table. "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToFieldHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToFieldHashMap.values",
        "snippet": "    private T[] values;",
        "begin_line": 87,
        "end_line": 87,
        "comment": " Values table. "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToFieldHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToFieldHashMap.states",
        "snippet": "    private byte[] states;",
        "begin_line": 90,
        "end_line": 90,
        "comment": " States table. "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToFieldHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToFieldHashMap.missingEntries",
        "snippet": "    private final T missingEntries;",
        "begin_line": 93,
        "end_line": 93,
        "comment": " Return value for missing entries. "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToFieldHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToFieldHashMap.size",
        "snippet": "    private int size;",
        "begin_line": 96,
        "end_line": 96,
        "comment": " Current size of the map. "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToFieldHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToFieldHashMap.mask",
        "snippet": "    private int mask;",
        "begin_line": 99,
        "end_line": 99,
        "comment": " Bit mask for hash values. "
    },
    {
        "class_name": "org.apache.commons.math.util.OpenIntToFieldHashMap",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java",
        "signature": "org.apache.commons.math.util.OpenIntToFieldHashMap.count",
        "snippet": "    private transient int count;",
        "begin_line": 102,
        "end_line": 102,
        "comment": " Modifications count. "
    },
    {
        "class_name": "org.apache.commons.math.util.Iterator",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java",
        "signature": "org.apache.commons.math.util.Iterator.referenceCount",
        "snippet": "        private final int referenceCount;",
        "begin_line": 506,
        "end_line": 506,
        "comment": " Reference modification count. "
    },
    {
        "class_name": "org.apache.commons.math.util.Iterator",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java",
        "signature": "org.apache.commons.math.util.Iterator.current",
        "snippet": "        private int current;",
        "begin_line": 509,
        "end_line": 509,
        "comment": " Index of current element. "
    },
    {
        "class_name": "org.apache.commons.math.util.Iterator",
        "src_path": "src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java",
        "signature": "org.apache.commons.math.util.Iterator.next",
        "snippet": "        private int next;",
        "begin_line": 512,
        "end_line": 512,
        "comment": " Index of next element. "
    },
    {
        "class_name": "org.apache.commons.math.geometry.RotationOrder",
        "src_path": "src/main/java/org/apache/commons/math/geometry/RotationOrder.java",
        "signature": "org.apache.commons.math.geometry.RotationOrder.XYZ",
        "snippet": "    public static final RotationOrder XYZ =\n      new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);",
        "begin_line": 38,
        "end_line": 39,
        "comment": " Set of Cardan angles.\n     * this ordered set of rotations is around X, then around Y, then\n     * around Z\n     "
    },
    {
        "class_name": "org.apache.commons.math.geometry.RotationOrder",
        "src_path": "src/main/java/org/apache/commons/math/geometry/RotationOrder.java",
        "signature": "org.apache.commons.math.geometry.RotationOrder.XZY",
        "snippet": "    public static final RotationOrder XZY =\n      new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);",
        "begin_line": 45,
        "end_line": 46,
        "comment": " Set of Cardan angles.\n     * this ordered set of rotations is around X, then around Z, then\n     * around Y\n     "
    },
    {
        "class_name": "org.apache.commons.math.geometry.RotationOrder",
        "src_path": "src/main/java/org/apache/commons/math/geometry/RotationOrder.java",
        "signature": "org.apache.commons.math.geometry.RotationOrder.YXZ",
        "snippet": "    public static final RotationOrder YXZ =\n      new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);",
        "begin_line": 52,
        "end_line": 53,
        "comment": " Set of Cardan angles.\n     * this ordered set of rotations is around Y, then around X, then\n     * around Z\n     "
    },
    {
        "class_name": "org.apache.commons.math.geometry.RotationOrder",
        "src_path": "src/main/java/org/apache/commons/math/geometry/RotationOrder.java",
        "signature": "org.apache.commons.math.geometry.RotationOrder.YZX",
        "snippet": "    public static final RotationOrder YZX =\n      new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);",
        "begin_line": 59,
        "end_line": 60,
        "comment": " Set of Cardan angles.\n     * this ordered set of rotations is around Y, then around Z, then\n     * around X\n     "
    },
    {
        "class_name": "org.apache.commons.math.geometry.RotationOrder",
        "src_path": "src/main/java/org/apache/commons/math/geometry/RotationOrder.java",
        "signature": "org.apache.commons.math.geometry.RotationOrder.ZXY",
        "snippet": "    public static final RotationOrder ZXY =\n      new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);",
        "begin_line": 66,
        "end_line": 67,
        "comment": " Set of Cardan angles.\n     * this ordered set of rotations is around Z, then around X, then\n     * around Y\n     "
    },
    {
        "class_name": "org.apache.commons.math.geometry.RotationOrder",
        "src_path": "src/main/java/org/apache/commons/math/geometry/RotationOrder.java",
        "signature": "org.apache.commons.math.geometry.RotationOrder.ZYX",
        "snippet": "    public static final RotationOrder ZYX =\n      new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);",
        "begin_line": 73,
        "end_line": 74,
        "comment": " Set of Cardan angles.\n     * this ordered set of rotations is around Z, then around Y, then\n     * around X\n     "
    },
    {
        "class_name": "org.apache.commons.math.geometry.RotationOrder",
        "src_path": "src/main/java/org/apache/commons/math/geometry/RotationOrder.java",
        "signature": "org.apache.commons.math.geometry.RotationOrder.XYX",
        "snippet": "    public static final RotationOrder XYX =\n      new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);",
        "begin_line": 80,
        "end_line": 81,
        "comment": " Set of Euler angles.\n     * this ordered set of rotations is around X, then around Y, then\n     * around X\n     "
    },
    {
        "class_name": "org.apache.commons.math.geometry.RotationOrder",
        "src_path": "src/main/java/org/apache/commons/math/geometry/RotationOrder.java",
        "signature": "org.apache.commons.math.geometry.RotationOrder.XZX",
        "snippet": "    public static final RotationOrder XZX =\n      new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);",
        "begin_line": 87,
        "end_line": 88,
        "comment": " Set of Euler angles.\n     * this ordered set of rotations is around X, then around Z, then\n     * around X\n     "
    },
    {
        "class_name": "org.apache.commons.math.geometry.RotationOrder",
        "src_path": "src/main/java/org/apache/commons/math/geometry/RotationOrder.java",
        "signature": "org.apache.commons.math.geometry.RotationOrder.YXY",
        "snippet": "    public static final RotationOrder YXY =\n      new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);",
        "begin_line": 94,
        "end_line": 95,
        "comment": " Set of Euler angles.\n     * this ordered set of rotations is around Y, then around X, then\n     * around Y\n     "
    },
    {
        "class_name": "org.apache.commons.math.geometry.RotationOrder",
        "src_path": "src/main/java/org/apache/commons/math/geometry/RotationOrder.java",
        "signature": "org.apache.commons.math.geometry.RotationOrder.YZY",
        "snippet": "    public static final RotationOrder YZY =\n      new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);",
        "begin_line": 101,
        "end_line": 102,
        "comment": " Set of Euler angles.\n     * this ordered set of rotations is around Y, then around Z, then\n     * around Y\n     "
    },
    {
        "class_name": "org.apache.commons.math.geometry.RotationOrder",
        "src_path": "src/main/java/org/apache/commons/math/geometry/RotationOrder.java",
        "signature": "org.apache.commons.math.geometry.RotationOrder.ZXZ",
        "snippet": "    public static final RotationOrder ZXZ =\n      new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);",
        "begin_line": 108,
        "end_line": 109,
        "comment": " Set of Euler angles.\n     * this ordered set of rotations is around Z, then around X, then\n     * around Z\n     "
    },
    {
        "class_name": "org.apache.commons.math.geometry.RotationOrder",
        "src_path": "src/main/java/org/apache/commons/math/geometry/RotationOrder.java",
        "signature": "org.apache.commons.math.geometry.RotationOrder.ZYZ",
        "snippet": "    public static final RotationOrder ZYZ =\n      new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);",
        "begin_line": 115,
        "end_line": 116,
        "comment": " Set of Euler angles.\n     * this ordered set of rotations is around Z, then around Y, then\n     * around Z\n     "
    },
    {
        "class_name": "org.apache.commons.math.geometry.RotationOrder",
        "src_path": "src/main/java/org/apache/commons/math/geometry/RotationOrder.java",
        "signature": "org.apache.commons.math.geometry.RotationOrder.name",
        "snippet": "    private final String name;",
        "begin_line": 119,
        "end_line": 119,
        "comment": " Name of the rotations order. "
    },
    {
        "class_name": "org.apache.commons.math.geometry.RotationOrder",
        "src_path": "src/main/java/org/apache/commons/math/geometry/RotationOrder.java",
        "signature": "org.apache.commons.math.geometry.RotationOrder.a1",
        "snippet": "    private final Vector3D a1;",
        "begin_line": 122,
        "end_line": 122,
        "comment": " Axis of the first rotation. "
    },
    {
        "class_name": "org.apache.commons.math.geometry.RotationOrder",
        "src_path": "src/main/java/org/apache/commons/math/geometry/RotationOrder.java",
        "signature": "org.apache.commons.math.geometry.RotationOrder.a2",
        "snippet": "    private final Vector3D a2;",
        "begin_line": 125,
        "end_line": 125,
        "comment": " Axis of the second rotation. "
    },
    {
        "class_name": "org.apache.commons.math.geometry.RotationOrder",
        "src_path": "src/main/java/org/apache/commons/math/geometry/RotationOrder.java",
        "signature": "org.apache.commons.math.geometry.RotationOrder.a3",
        "snippet": "    private final Vector3D a3;",
        "begin_line": 128,
        "end_line": 128,
        "comment": " Axis of the third rotation. "
    },
    {
        "class_name": "org.apache.commons.math.geometry.NotARotationMatrixException",
        "src_path": "src/main/java/org/apache/commons/math/geometry/NotARotationMatrixException.java",
        "signature": "org.apache.commons.math.geometry.NotARotationMatrixException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 5647178478658937642L;",
        "begin_line": 34,
        "end_line": 34,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3D",
        "src_path": "src/main/java/org/apache/commons/math/geometry/Vector3D.java",
        "signature": "org.apache.commons.math.geometry.Vector3D.ZERO",
        "snippet": "  public static final Vector3D ZERO   = new Vector3D(0, 0, 0);",
        "begin_line": 36,
        "end_line": 36,
        "comment": " Null vector (coordinates: 0, 0, 0). "
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3D",
        "src_path": "src/main/java/org/apache/commons/math/geometry/Vector3D.java",
        "signature": "org.apache.commons.math.geometry.Vector3D.PLUS_I",
        "snippet": "  public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);",
        "begin_line": 39,
        "end_line": 39,
        "comment": " First canonical vector (coordinates: 1, 0, 0). "
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3D",
        "src_path": "src/main/java/org/apache/commons/math/geometry/Vector3D.java",
        "signature": "org.apache.commons.math.geometry.Vector3D.MINUS_I",
        "snippet": "  public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);",
        "begin_line": 42,
        "end_line": 42,
        "comment": " Opposite of the first canonical vector (coordinates: -1, 0, 0). "
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3D",
        "src_path": "src/main/java/org/apache/commons/math/geometry/Vector3D.java",
        "signature": "org.apache.commons.math.geometry.Vector3D.PLUS_J",
        "snippet": "  public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);",
        "begin_line": 45,
        "end_line": 45,
        "comment": " Second canonical vector (coordinates: 0, 1, 0). "
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3D",
        "src_path": "src/main/java/org/apache/commons/math/geometry/Vector3D.java",
        "signature": "org.apache.commons.math.geometry.Vector3D.MINUS_J",
        "snippet": "  public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);",
        "begin_line": 48,
        "end_line": 48,
        "comment": " Opposite of the second canonical vector (coordinates: 0, -1, 0). "
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3D",
        "src_path": "src/main/java/org/apache/commons/math/geometry/Vector3D.java",
        "signature": "org.apache.commons.math.geometry.Vector3D.PLUS_K",
        "snippet": "  public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);",
        "begin_line": 51,
        "end_line": 51,
        "comment": " Third canonical vector (coordinates: 0, 0, 1). "
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3D",
        "src_path": "src/main/java/org/apache/commons/math/geometry/Vector3D.java",
        "signature": "org.apache.commons.math.geometry.Vector3D.MINUS_K",
        "snippet": "  public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);",
        "begin_line": 54,
        "end_line": 54,
        "comment": " Opposite of the third canonical vector (coordinates: 0, 0, -1).  "
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3D",
        "src_path": "src/main/java/org/apache/commons/math/geometry/Vector3D.java",
        "signature": "org.apache.commons.math.geometry.Vector3D.NaN",
        "snippet": "  public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);",
        "begin_line": 58,
        "end_line": 58,
        "comment": " A vector with all coordinates set to NaN. "
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3D",
        "src_path": "src/main/java/org/apache/commons/math/geometry/Vector3D.java",
        "signature": "org.apache.commons.math.geometry.Vector3D.POSITIVE_INFINITY",
        "snippet": "  public static final Vector3D POSITIVE_INFINITY =\n      new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);",
        "begin_line": 62,
        "end_line": 63,
        "comment": " A vector with all coordinates set to positive infinity. "
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3D",
        "src_path": "src/main/java/org/apache/commons/math/geometry/Vector3D.java",
        "signature": "org.apache.commons.math.geometry.Vector3D.NEGATIVE_INFINITY",
        "snippet": "  public static final Vector3D NEGATIVE_INFINITY =\n      new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);",
        "begin_line": 66,
        "end_line": 67,
        "comment": " A vector with all coordinates set to negative infinity. "
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3D",
        "src_path": "src/main/java/org/apache/commons/math/geometry/Vector3D.java",
        "signature": "org.apache.commons.math.geometry.Vector3D.DEFAULT_FORMAT",
        "snippet": "  private static final Vector3DFormat DEFAULT_FORMAT =\n      Vector3DFormat.getInstance();",
        "begin_line": 70,
        "end_line": 71,
        "comment": " Default format. "
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3D",
        "src_path": "src/main/java/org/apache/commons/math/geometry/Vector3D.java",
        "signature": "org.apache.commons.math.geometry.Vector3D.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 5133268763396045979L;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3D",
        "src_path": "src/main/java/org/apache/commons/math/geometry/Vector3D.java",
        "signature": "org.apache.commons.math.geometry.Vector3D.x",
        "snippet": "  private final double x;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " Abscissa. "
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3D",
        "src_path": "src/main/java/org/apache/commons/math/geometry/Vector3D.java",
        "signature": "org.apache.commons.math.geometry.Vector3D.y",
        "snippet": "  private final double y;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " Ordinate. "
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3D",
        "src_path": "src/main/java/org/apache/commons/math/geometry/Vector3D.java",
        "signature": "org.apache.commons.math.geometry.Vector3D.z",
        "snippet": "  private final double z;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " Height. "
    },
    {
        "class_name": "org.apache.commons.math.geometry.CardanEulerSingularityException",
        "src_path": "src/main/java/org/apache/commons/math/geometry/CardanEulerSingularityException.java",
        "signature": "org.apache.commons.math.geometry.CardanEulerSingularityException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -1360952845582206770L;",
        "begin_line": 32,
        "end_line": 32,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.geometry.Rotation",
        "src_path": "src/main/java/org/apache/commons/math/geometry/Rotation.java",
        "signature": "org.apache.commons.math.geometry.Rotation.IDENTITY",
        "snippet": "  public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);",
        "begin_line": 96,
        "end_line": 96,
        "comment": " Identity rotation. "
    },
    {
        "class_name": "org.apache.commons.math.geometry.Rotation",
        "src_path": "src/main/java/org/apache/commons/math/geometry/Rotation.java",
        "signature": "org.apache.commons.math.geometry.Rotation.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = -2153622329907944313L;",
        "begin_line": 99,
        "end_line": 99,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.geometry.Rotation",
        "src_path": "src/main/java/org/apache/commons/math/geometry/Rotation.java",
        "signature": "org.apache.commons.math.geometry.Rotation.q0",
        "snippet": "  private final double q0;",
        "begin_line": 102,
        "end_line": 102,
        "comment": " Scalar coordinate of the quaternion. "
    },
    {
        "class_name": "org.apache.commons.math.geometry.Rotation",
        "src_path": "src/main/java/org/apache/commons/math/geometry/Rotation.java",
        "signature": "org.apache.commons.math.geometry.Rotation.q1",
        "snippet": "  private final double q1;",
        "begin_line": 105,
        "end_line": 105,
        "comment": " First coordinate of the vectorial part of the quaternion. "
    },
    {
        "class_name": "org.apache.commons.math.geometry.Rotation",
        "src_path": "src/main/java/org/apache/commons/math/geometry/Rotation.java",
        "signature": "org.apache.commons.math.geometry.Rotation.q2",
        "snippet": "  private final double q2;",
        "begin_line": 108,
        "end_line": 108,
        "comment": " Second coordinate of the vectorial part of the quaternion. "
    },
    {
        "class_name": "org.apache.commons.math.geometry.Rotation",
        "src_path": "src/main/java/org/apache/commons/math/geometry/Rotation.java",
        "signature": "org.apache.commons.math.geometry.Rotation.q3",
        "snippet": "  private final double q3;",
        "begin_line": 111,
        "end_line": 111,
        "comment": " Third coordinate of the vectorial part of the quaternion. "
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3DFormat",
        "src_path": "src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java",
        "signature": "org.apache.commons.math.geometry.Vector3DFormat.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -5447606608652576301L;",
        "begin_line": 45,
        "end_line": 45,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3DFormat",
        "src_path": "src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java",
        "signature": "org.apache.commons.math.geometry.Vector3DFormat.DEFAULT_PREFIX",
        "snippet": "    private static final String DEFAULT_PREFIX = \"{\";",
        "begin_line": 48,
        "end_line": 48,
        "comment": " The default prefix: \"{\". "
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3DFormat",
        "src_path": "src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java",
        "signature": "org.apache.commons.math.geometry.Vector3DFormat.DEFAULT_SUFFIX",
        "snippet": "    private static final String DEFAULT_SUFFIX = \"}\";",
        "begin_line": 51,
        "end_line": 51,
        "comment": " The default suffix: \"}\". "
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3DFormat",
        "src_path": "src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java",
        "signature": "org.apache.commons.math.geometry.Vector3DFormat.DEFAULT_SEPARATOR",
        "snippet": "    private static final String DEFAULT_SEPARATOR = \"; \";",
        "begin_line": 54,
        "end_line": 54,
        "comment": " The default separator: \", \". "
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3DFormat",
        "src_path": "src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java",
        "signature": "org.apache.commons.math.geometry.Vector3DFormat.prefix",
        "snippet": "    private final String prefix;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " Prefix. "
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3DFormat",
        "src_path": "src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java",
        "signature": "org.apache.commons.math.geometry.Vector3DFormat.suffix",
        "snippet": "    private final String suffix;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " Suffix. "
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3DFormat",
        "src_path": "src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java",
        "signature": "org.apache.commons.math.geometry.Vector3DFormat.separator",
        "snippet": "    private final String separator;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " Separator. "
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3DFormat",
        "src_path": "src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java",
        "signature": "org.apache.commons.math.geometry.Vector3DFormat.trimmedPrefix",
        "snippet": "    private final String trimmedPrefix;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " Trimmed prefix. "
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3DFormat",
        "src_path": "src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java",
        "signature": "org.apache.commons.math.geometry.Vector3DFormat.trimmedSuffix",
        "snippet": "    private final String trimmedSuffix;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " Trimmed suffix. "
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3DFormat",
        "src_path": "src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java",
        "signature": "org.apache.commons.math.geometry.Vector3DFormat.trimmedSeparator",
        "snippet": "    private final String trimmedSeparator;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " Trimmed separator. "
    },
    {
        "class_name": "org.apache.commons.math.geometry.Vector3DFormat",
        "src_path": "src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java",
        "signature": "org.apache.commons.math.geometry.Vector3DFormat.format",
        "snippet": "    private NumberFormat format;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " The format used for components. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.SimpleEstimationProblem",
        "src_path": "src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java",
        "signature": "org.apache.commons.math.estimation.SimpleEstimationProblem.parameters",
        "snippet": "    private final List<EstimatedParameter> parameters;",
        "begin_line": 48,
        "end_line": 48,
        "comment": " Estimated parameters. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.SimpleEstimationProblem",
        "src_path": "src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java",
        "signature": "org.apache.commons.math.estimation.SimpleEstimationProblem.measurements",
        "snippet": "    private final List<WeightedMeasurement> measurements;",
        "begin_line": 51,
        "end_line": 51,
        "comment": " Measurements. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.EstimationException",
        "src_path": "src/main/java/org/apache/commons/math/estimation/EstimationException.java",
        "signature": "org.apache.commons.math.estimation.EstimationException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -573038581493881337L;",
        "begin_line": 36,
        "end_line": 36,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.LevenbergMarquardtEstimator",
        "src_path": "src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java",
        "signature": "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -5705952631533171019L;",
        "begin_line": 107,
        "end_line": 107,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.estimation.LevenbergMarquardtEstimator",
        "src_path": "src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java",
        "signature": "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.solvedCols",
        "snippet": "    private int solvedCols;",
        "begin_line": 110,
        "end_line": 110,
        "comment": " Number of solved variables. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.LevenbergMarquardtEstimator",
        "src_path": "src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java",
        "signature": "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.diagR",
        "snippet": "    private double[] diagR;",
        "begin_line": 113,
        "end_line": 113,
        "comment": " Diagonal elements of the R matrix in the Q.R. decomposition. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.LevenbergMarquardtEstimator",
        "src_path": "src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java",
        "signature": "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.jacNorm",
        "snippet": "    private double[] jacNorm;",
        "begin_line": 116,
        "end_line": 116,
        "comment": " Norms of the columns of the jacobian matrix. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.LevenbergMarquardtEstimator",
        "src_path": "src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java",
        "signature": "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.beta",
        "snippet": "    private double[] beta;",
        "begin_line": 119,
        "end_line": 119,
        "comment": " Coefficients of the Householder transforms vectors. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.LevenbergMarquardtEstimator",
        "src_path": "src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java",
        "signature": "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.permutation",
        "snippet": "    private int[] permutation;",
        "begin_line": 122,
        "end_line": 122,
        "comment": " Columns permutation array. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.LevenbergMarquardtEstimator",
        "src_path": "src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java",
        "signature": "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.rank",
        "snippet": "    private int rank;",
        "begin_line": 125,
        "end_line": 125,
        "comment": " Rank of the jacobian matrix. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.LevenbergMarquardtEstimator",
        "src_path": "src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java",
        "signature": "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.lmPar",
        "snippet": "    private double lmPar;",
        "begin_line": 128,
        "end_line": 128,
        "comment": " Levenberg-Marquardt parameter. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.LevenbergMarquardtEstimator",
        "src_path": "src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java",
        "signature": "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.lmDir",
        "snippet": "    private double[] lmDir;",
        "begin_line": 131,
        "end_line": 131,
        "comment": " Parameters evolution direction associated with lmPar. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.LevenbergMarquardtEstimator",
        "src_path": "src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java",
        "signature": "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.initialStepBoundFactor",
        "snippet": "    private double initialStepBoundFactor;",
        "begin_line": 134,
        "end_line": 134,
        "comment": " Positive input variable used in determining the initial step bound. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.LevenbergMarquardtEstimator",
        "src_path": "src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java",
        "signature": "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.costRelativeTolerance",
        "snippet": "    private double costRelativeTolerance;",
        "begin_line": 137,
        "end_line": 137,
        "comment": " Desired relative error in the sum of squares. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.LevenbergMarquardtEstimator",
        "src_path": "src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java",
        "signature": "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.parRelativeTolerance",
        "snippet": "    private double parRelativeTolerance;",
        "begin_line": 140,
        "end_line": 140,
        "comment": "  Desired relative error in the approximate solution parameters. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.LevenbergMarquardtEstimator",
        "src_path": "src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java",
        "signature": "org.apache.commons.math.estimation.LevenbergMarquardtEstimator.orthoTolerance",
        "snippet": "    private double orthoTolerance;",
        "begin_line": 144,
        "end_line": 144,
        "comment": " Desired max cosine on the orthogonality between the function vector\n     * and the columns of the jacobian. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.AbstractEstimator",
        "src_path": "src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java",
        "signature": "org.apache.commons.math.estimation.AbstractEstimator.DEFAULT_MAX_COST_EVALUATIONS",
        "snippet": "    public static final int DEFAULT_MAX_COST_EVALUATIONS = 100;",
        "begin_line": 41,
        "end_line": 41,
        "comment": " Default maximal number of cost evaluations allowed. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.AbstractEstimator",
        "src_path": "src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java",
        "signature": "org.apache.commons.math.estimation.AbstractEstimator.measurements",
        "snippet": "    protected WeightedMeasurement[] measurements;",
        "begin_line": 44,
        "end_line": 44,
        "comment": " Array of measurements. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.AbstractEstimator",
        "src_path": "src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java",
        "signature": "org.apache.commons.math.estimation.AbstractEstimator.parameters",
        "snippet": "    protected EstimatedParameter[] parameters;",
        "begin_line": 47,
        "end_line": 47,
        "comment": " Array of parameters. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.AbstractEstimator",
        "src_path": "src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java",
        "signature": "org.apache.commons.math.estimation.AbstractEstimator.jacobian",
        "snippet": "    protected double[] jacobian;",
        "begin_line": 56,
        "end_line": 56,
        "comment": "\n     * Jacobian matrix.\n     * <p>This matrix is in canonical form just after the calls to\n     * {@link #updateJacobian()}, but may be modified by the solver\n     * in the derived class (the {@link LevenbergMarquardtEstimator\n     * Levenberg-Marquardt estimator} does this).</p>\n     "
    },
    {
        "class_name": "org.apache.commons.math.estimation.AbstractEstimator",
        "src_path": "src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java",
        "signature": "org.apache.commons.math.estimation.AbstractEstimator.cols",
        "snippet": "    protected int cols;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " Number of columns of the jacobian matrix. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.AbstractEstimator",
        "src_path": "src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java",
        "signature": "org.apache.commons.math.estimation.AbstractEstimator.rows",
        "snippet": "    protected int rows;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " Number of rows of the jacobian matrix. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.AbstractEstimator",
        "src_path": "src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java",
        "signature": "org.apache.commons.math.estimation.AbstractEstimator.residuals",
        "snippet": "    protected double[] residuals;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " Residuals array.\n     * <p>This array is in canonical form just after the calls to\n     * {@link #updateJacobian()}, but may be modified by the solver\n     * in the derived class (the {@link LevenbergMarquardtEstimator\n     * Levenberg-Marquardt estimator} does this).</p>\n     "
    },
    {
        "class_name": "org.apache.commons.math.estimation.AbstractEstimator",
        "src_path": "src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java",
        "signature": "org.apache.commons.math.estimation.AbstractEstimator.cost",
        "snippet": "    protected double cost;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " Cost value (square root of the sum of the residuals). "
    },
    {
        "class_name": "org.apache.commons.math.estimation.AbstractEstimator",
        "src_path": "src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java",
        "signature": "org.apache.commons.math.estimation.AbstractEstimator.maxCostEval",
        "snippet": "    private int maxCostEval;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " Maximal allowed number of cost evaluations. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.AbstractEstimator",
        "src_path": "src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java",
        "signature": "org.apache.commons.math.estimation.AbstractEstimator.costEvaluations",
        "snippet": "    private int costEvaluations;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " Number of cost evaluations. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.AbstractEstimator",
        "src_path": "src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java",
        "signature": "org.apache.commons.math.estimation.AbstractEstimator.jacobianEvaluations",
        "snippet": "    private int jacobianEvaluations;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " Number of jacobian evaluations. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.WeightedMeasurement",
        "src_path": "src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java",
        "signature": "org.apache.commons.math.estimation.WeightedMeasurement.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 4360046376796901941L;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.WeightedMeasurement",
        "src_path": "src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java",
        "signature": "org.apache.commons.math.estimation.WeightedMeasurement.weight",
        "snippet": "    private final double  weight;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " Measurement weight. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.WeightedMeasurement",
        "src_path": "src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java",
        "signature": "org.apache.commons.math.estimation.WeightedMeasurement.measuredValue",
        "snippet": "    private final double  measuredValue;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " Value of the measurements. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.WeightedMeasurement",
        "src_path": "src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java",
        "signature": "org.apache.commons.math.estimation.WeightedMeasurement.ignored",
        "snippet": "    private boolean ignored;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " Ignore measurement indicator. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimator",
        "src_path": "src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 5485001826076289109L;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimator",
        "src_path": "src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimator.DEFAULT_STEADY_STATE_THRESHOLD",
        "snippet": "    private static final double DEFAULT_STEADY_STATE_THRESHOLD = 1.0e-6;",
        "begin_line": 49,
        "end_line": 49,
        "comment": " Default threshold for cost steady state detection. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimator",
        "src_path": "src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimator.DEFAULT_CONVERGENCE",
        "snippet": "    private static final double DEFAULT_CONVERGENCE = 1.0e-6;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " Default threshold for cost convergence. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimator",
        "src_path": "src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimator.steadyStateThreshold",
        "snippet": "    private double steadyStateThreshold;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " Threshold for cost steady state detection. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.GaussNewtonEstimator",
        "src_path": "src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java",
        "signature": "org.apache.commons.math.estimation.GaussNewtonEstimator.convergence",
        "snippet": "    private double convergence;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " Threshold for cost convergence. "
    },
    {
        "class_name": "org.apache.commons.math.estimation.EstimatedParameter",
        "src_path": "src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java",
        "signature": "org.apache.commons.math.estimation.EstimatedParameter.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -555440800213416949L;",
        "begin_line": 41,
        "end_line": 41,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.estimation.EstimatedParameter",
        "src_path": "src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java",
        "signature": "org.apache.commons.math.estimation.EstimatedParameter.estimate",
        "snippet": "    protected double  estimate;",
        "begin_line": 44,
        "end_line": 44,
        "comment": " Current value of the parameter "
    },
    {
        "class_name": "org.apache.commons.math.estimation.EstimatedParameter",
        "src_path": "src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java",
        "signature": "org.apache.commons.math.estimation.EstimatedParameter.name",
        "snippet": "    private final String  name;",
        "begin_line": 47,
        "end_line": 47,
        "comment": " Name of the parameter "
    },
    {
        "class_name": "org.apache.commons.math.estimation.EstimatedParameter",
        "src_path": "src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java",
        "signature": "org.apache.commons.math.estimation.EstimatedParameter.bound",
        "snippet": "    private   boolean bound;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " Indicator for bound parameters\n     * (ie parameters that should not be estimated)\n     "
    },
    {
        "class_name": "org.apache.commons.math.special.Gamma",
        "src_path": "src/main/java/org/apache/commons/math/special/Gamma.java",
        "signature": "org.apache.commons.math.special.Gamma.GAMMA",
        "snippet": "    public static final double GAMMA = 0.577215664901532860606512090082;",
        "begin_line": 35,
        "end_line": 35,
        "comment": "\n     * <a href=\"http://en.wikipedia.org/wiki/Euler-Mascheroni_constant\">Euler-Mascheroni constant</a>\n     * @since 2.0\n     "
    },
    {
        "class_name": "org.apache.commons.math.special.Gamma",
        "src_path": "src/main/java/org/apache/commons/math/special/Gamma.java",
        "signature": "org.apache.commons.math.special.Gamma.DEFAULT_EPSILON",
        "snippet": "    private static final double DEFAULT_EPSILON = 10e-15;",
        "begin_line": 38,
        "end_line": 38,
        "comment": " Maximum allowed numerical error. "
    },
    {
        "class_name": "org.apache.commons.math.special.Gamma",
        "src_path": "src/main/java/org/apache/commons/math/special/Gamma.java",
        "signature": "org.apache.commons.math.special.Gamma.LANCZOS",
        "snippet": "    private static final double[] LANCZOS =\n    {\n        0.99999999999999709182,\n        57.156235665862923517,\n        -59.597960355475491248,\n        14.136097974741747174,\n        -0.49191381609762019978,\n        .33994649984811888699e-4,\n        .46523628927048575665e-4,\n        -.98374475304879564677e-4,\n        .15808870322491248884e-3,\n        -.21026444172410488319e-3,\n        .21743961811521264320e-3,\n        -.16431810653676389022e-3,\n        .84418223983852743293e-4,\n        -.26190838401581408670e-4,\n        .36899182659531622704e-5,\n    };",
        "begin_line": 41,
        "end_line": 58,
        "comment": " Lanczos coefficients "
    },
    {
        "class_name": "org.apache.commons.math.special.Gamma",
        "src_path": "src/main/java/org/apache/commons/math/special/Gamma.java",
        "signature": "org.apache.commons.math.special.Gamma.HALF_LOG_2_PI",
        "snippet": "    private static final double HALF_LOG_2_PI = 0.5 * Math.log(2.0 * Math.PI);",
        "begin_line": 61,
        "end_line": 61,
        "comment": " Avoid repeated computation of log of 2 PI in logGamma "
    },
    {
        "class_name": "org.apache.commons.math.special.Gamma",
        "src_path": "src/main/java/org/apache/commons/math/special/Gamma.java",
        "signature": "org.apache.commons.math.special.Gamma.C_LIMIT",
        "snippet": "    private static final double C_LIMIT = 49;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " C limit. "
    },
    {
        "class_name": "org.apache.commons.math.special.Gamma",
        "src_path": "src/main/java/org/apache/commons/math/special/Gamma.java",
        "signature": "org.apache.commons.math.special.Gamma.S_LIMIT",
        "snippet": "    private static final double S_LIMIT = 1e-5;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " S limit. "
    },
    {
        "class_name": "org.apache.commons.math.special.Beta",
        "src_path": "src/main/java/org/apache/commons/math/special/Beta.java",
        "signature": "org.apache.commons.math.special.Beta.DEFAULT_EPSILON",
        "snippet": "    private static final double DEFAULT_EPSILON = 10e-15;",
        "begin_line": 31,
        "end_line": 31,
        "comment": " Maximum allowed numerical error. "
    },
    {
        "class_name": "org.apache.commons.math.transform.FastFourierTransformer",
        "src_path": "src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java",
        "signature": "org.apache.commons.math.transform.FastFourierTransformer.serialVersionUID",
        "snippet": "    static final long serialVersionUID = 5138259215438106000L;",
        "begin_line": 49,
        "end_line": 49,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.transform.FastFourierTransformer",
        "src_path": "src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java",
        "signature": "org.apache.commons.math.transform.FastFourierTransformer.NOT_POWER_OF_TWO_MESSAGE",
        "snippet": "    private static final String NOT_POWER_OF_TWO_MESSAGE =\n        \"{0} is not a power of 2, consider padding for fix\";",
        "begin_line": 52,
        "end_line": 53,
        "comment": " Message for not power of 2. "
    },
    {
        "class_name": "org.apache.commons.math.transform.FastFourierTransformer",
        "src_path": "src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java",
        "signature": "org.apache.commons.math.transform.FastFourierTransformer.DIMENSION_MISMATCH_MESSAGE",
        "snippet": "    private static final String DIMENSION_MISMATCH_MESSAGE =\n        \"some dimensions don't match: {0} != {1}\";",
        "begin_line": 56,
        "end_line": 57,
        "comment": " Message for dimension mismatch. "
    },
    {
        "class_name": "org.apache.commons.math.transform.FastFourierTransformer",
        "src_path": "src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java",
        "signature": "org.apache.commons.math.transform.FastFourierTransformer.MISSING_ROOTS_OF_UNITY_MESSAGE",
        "snippet": "    private static final String MISSING_ROOTS_OF_UNITY_MESSAGE =\n        \"roots of unity have not been computed yet\";",
        "begin_line": 60,
        "end_line": 61,
        "comment": " Message for not computed roots of unity. "
    },
    {
        "class_name": "org.apache.commons.math.transform.FastFourierTransformer",
        "src_path": "src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java",
        "signature": "org.apache.commons.math.transform.FastFourierTransformer.OUT_OF_RANGE_ROOT_INDEX_MESSAGE",
        "snippet": "    private static final String OUT_OF_RANGE_ROOT_INDEX_MESSAGE =\n        \"out of range root of unity index {0} (must be in [{1};{2}])\";",
        "begin_line": 64,
        "end_line": 65,
        "comment": " Message for out of range root index. "
    },
    {
        "class_name": "org.apache.commons.math.transform.FastFourierTransformer",
        "src_path": "src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java",
        "signature": "org.apache.commons.math.transform.FastFourierTransformer.roots",
        "snippet": "    private RootsOfUnity roots = new RootsOfUnity();",
        "begin_line": 68,
        "end_line": 68,
        "comment": " roots of unity "
    },
    {
        "class_name": "org.apache.commons.math.transform.MultiDimensionalComplexMatrix",
        "src_path": "src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java",
        "signature": "org.apache.commons.math.transform.MultiDimensionalComplexMatrix.dimensionSize",
        "snippet": "        protected int[] dimensionSize;",
        "begin_line": 634,
        "end_line": 634,
        "comment": " Size in all dimensions. "
    },
    {
        "class_name": "org.apache.commons.math.transform.MultiDimensionalComplexMatrix",
        "src_path": "src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java",
        "signature": "org.apache.commons.math.transform.MultiDimensionalComplexMatrix.multiDimensionalComplexArray",
        "snippet": "        protected Object multiDimensionalComplexArray;",
        "begin_line": 637,
        "end_line": 637,
        "comment": " Storage array. "
    },
    {
        "class_name": "org.apache.commons.math.transform.RootsOfUnity",
        "src_path": "src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java",
        "signature": "org.apache.commons.math.transform.RootsOfUnity.serialVersionUID",
        "snippet": "      private static final long serialVersionUID = 6404784357747329667L;",
        "begin_line": 792,
        "end_line": 792,
        "comment": " Serializable version id. "
    },
    {
        "class_name": "org.apache.commons.math.transform.RootsOfUnity",
        "src_path": "src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java",
        "signature": "org.apache.commons.math.transform.RootsOfUnity.omegaCount",
        "snippet": "      private int      omegaCount;",
        "begin_line": 795,
        "end_line": 795,
        "comment": " Number of roots of unity. "
    },
    {
        "class_name": "org.apache.commons.math.transform.RootsOfUnity",
        "src_path": "src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java",
        "signature": "org.apache.commons.math.transform.RootsOfUnity.omegaReal",
        "snippet": "      private double[] omegaReal;",
        "begin_line": 798,
        "end_line": 798,
        "comment": " Real part of the roots. "
    },
    {
        "class_name": "org.apache.commons.math.transform.RootsOfUnity",
        "src_path": "src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java",
        "signature": "org.apache.commons.math.transform.RootsOfUnity.omegaImaginaryForward",
        "snippet": "      private double[] omegaImaginaryForward;",
        "begin_line": 801,
        "end_line": 801,
        "comment": " Imaginary part of the roots for forward transform. "
    },
    {
        "class_name": "org.apache.commons.math.transform.RootsOfUnity",
        "src_path": "src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java",
        "signature": "org.apache.commons.math.transform.RootsOfUnity.omegaImaginaryInverse",
        "snippet": "      private double[] omegaImaginaryInverse;",
        "begin_line": 804,
        "end_line": 804,
        "comment": " Imaginary part of the roots for reverse transform. "
    },
    {
        "class_name": "org.apache.commons.math.transform.RootsOfUnity",
        "src_path": "src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java",
        "signature": "org.apache.commons.math.transform.RootsOfUnity.isForward",
        "snippet": "      private boolean  isForward;",
        "begin_line": 807,
        "end_line": 807,
        "comment": " Forward/reverse indicator. "
    },
    {
        "class_name": "org.apache.commons.math.fraction.FractionConversionException",
        "src_path": "src/main/java/org/apache/commons/math/fraction/FractionConversionException.java",
        "signature": "org.apache.commons.math.fraction.FractionConversionException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -4661812640132576263L;",
        "begin_line": 32,
        "end_line": 32,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFractionField",
        "src_path": "src/main/java/org/apache/commons/math/fraction/BigFractionField.java",
        "signature": "org.apache.commons.math.fraction.BigFractionField.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -1699294557189741703L;",
        "begin_line": 36,
        "end_line": 36,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.fraction.LazyHolder",
        "src_path": "src/main/java/org/apache/commons/math/fraction/BigFractionField.java",
        "signature": "org.apache.commons.math.fraction.LazyHolder.INSTANCE",
        "snippet": "        private static final BigFractionField INSTANCE = new BigFractionField();",
        "begin_line": 66,
        "end_line": 66,
        "comment": " Cached field instance. "
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFractionFormat",
        "src_path": "src/main/java/org/apache/commons/math/fraction/BigFractionFormat.java",
        "signature": "org.apache.commons.math.fraction.BigFractionFormat.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -2932167925527338976L;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.fraction.ProperFractionFormat",
        "src_path": "src/main/java/org/apache/commons/math/fraction/ProperFractionFormat.java",
        "signature": "org.apache.commons.math.fraction.ProperFractionFormat.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 760934726031766749L;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.fraction.ProperFractionFormat",
        "src_path": "src/main/java/org/apache/commons/math/fraction/ProperFractionFormat.java",
        "signature": "org.apache.commons.math.fraction.ProperFractionFormat.wholeFormat",
        "snippet": "    private NumberFormat wholeFormat;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " The format used for the whole number. "
    },
    {
        "class_name": "org.apache.commons.math.fraction.FractionField",
        "src_path": "src/main/java/org/apache/commons/math/fraction/FractionField.java",
        "signature": "org.apache.commons.math.fraction.FractionField.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -1257768487499119313L;",
        "begin_line": 36,
        "end_line": 36,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.fraction.LazyHolder",
        "src_path": "src/main/java/org/apache/commons/math/fraction/FractionField.java",
        "signature": "org.apache.commons.math.fraction.LazyHolder.INSTANCE",
        "snippet": "        private static final FractionField INSTANCE = new FractionField();",
        "begin_line": 66,
        "end_line": 66,
        "comment": " Cached field instance. "
    },
    {
        "class_name": "org.apache.commons.math.fraction.FractionFormat",
        "src_path": "src/main/java/org/apache/commons/math/fraction/FractionFormat.java",
        "signature": "org.apache.commons.math.fraction.FractionFormat.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 3008655719530972611L;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFraction",
        "src_path": "src/main/java/org/apache/commons/math/fraction/BigFraction.java",
        "signature": "org.apache.commons.math.fraction.BigFraction.TWO",
        "snippet": "    public static final BigFraction TWO = new BigFraction(2);",
        "begin_line": 39,
        "end_line": 39,
        "comment": " A fraction representing \"2 / 1\". "
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFraction",
        "src_path": "src/main/java/org/apache/commons/math/fraction/BigFraction.java",
        "signature": "org.apache.commons.math.fraction.BigFraction.ONE",
        "snippet": "    public static final BigFraction ONE = new BigFraction(1);",
        "begin_line": 42,
        "end_line": 42,
        "comment": " A fraction representing \"1\". "
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFraction",
        "src_path": "src/main/java/org/apache/commons/math/fraction/BigFraction.java",
        "signature": "org.apache.commons.math.fraction.BigFraction.ZERO",
        "snippet": "    public static final BigFraction ZERO = new BigFraction(0);",
        "begin_line": 45,
        "end_line": 45,
        "comment": " A fraction representing \"0\". "
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFraction",
        "src_path": "src/main/java/org/apache/commons/math/fraction/BigFraction.java",
        "signature": "org.apache.commons.math.fraction.BigFraction.MINUS_ONE",
        "snippet": "    public static final BigFraction MINUS_ONE = new BigFraction(-1);",
        "begin_line": 48,
        "end_line": 48,
        "comment": " A fraction representing \"-1 / 1\". "
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFraction",
        "src_path": "src/main/java/org/apache/commons/math/fraction/BigFraction.java",
        "signature": "org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS",
        "snippet": "    public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);",
        "begin_line": 51,
        "end_line": 51,
        "comment": " A fraction representing \"4/5\". "
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFraction",
        "src_path": "src/main/java/org/apache/commons/math/fraction/BigFraction.java",
        "signature": "org.apache.commons.math.fraction.BigFraction.ONE_FIFTH",
        "snippet": "    public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);",
        "begin_line": 54,
        "end_line": 54,
        "comment": " A fraction representing \"1/5\". "
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFraction",
        "src_path": "src/main/java/org/apache/commons/math/fraction/BigFraction.java",
        "signature": "org.apache.commons.math.fraction.BigFraction.ONE_HALF",
        "snippet": "    public static final BigFraction ONE_HALF = new BigFraction(1, 2);",
        "begin_line": 57,
        "end_line": 57,
        "comment": " A fraction representing \"1/2\". "
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFraction",
        "src_path": "src/main/java/org/apache/commons/math/fraction/BigFraction.java",
        "signature": "org.apache.commons.math.fraction.BigFraction.ONE_QUARTER",
        "snippet": "    public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);",
        "begin_line": 60,
        "end_line": 60,
        "comment": " A fraction representing \"1/4\". "
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFraction",
        "src_path": "src/main/java/org/apache/commons/math/fraction/BigFraction.java",
        "signature": "org.apache.commons.math.fraction.BigFraction.ONE_THIRD",
        "snippet": "    public static final BigFraction ONE_THIRD = new BigFraction(1, 3);",
        "begin_line": 63,
        "end_line": 63,
        "comment": " A fraction representing \"1/3\". "
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFraction",
        "src_path": "src/main/java/org/apache/commons/math/fraction/BigFraction.java",
        "signature": "org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS",
        "snippet": "    public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);",
        "begin_line": 66,
        "end_line": 66,
        "comment": " A fraction representing \"3/5\". "
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFraction",
        "src_path": "src/main/java/org/apache/commons/math/fraction/BigFraction.java",
        "signature": "org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS",
        "snippet": "    public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);",
        "begin_line": 69,
        "end_line": 69,
        "comment": " A fraction representing \"3/4\". "
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFraction",
        "src_path": "src/main/java/org/apache/commons/math/fraction/BigFraction.java",
        "signature": "org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS",
        "snippet": "    public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);",
        "begin_line": 72,
        "end_line": 72,
        "comment": " A fraction representing \"2/5\". "
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFraction",
        "src_path": "src/main/java/org/apache/commons/math/fraction/BigFraction.java",
        "signature": "org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS",
        "snippet": "    public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);",
        "begin_line": 75,
        "end_line": 75,
        "comment": " A fraction representing \"2/4\". "
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFraction",
        "src_path": "src/main/java/org/apache/commons/math/fraction/BigFraction.java",
        "signature": "org.apache.commons.math.fraction.BigFraction.TWO_THIRDS",
        "snippet": "    public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);",
        "begin_line": 78,
        "end_line": 78,
        "comment": " A fraction representing \"2/3\". "
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFraction",
        "src_path": "src/main/java/org/apache/commons/math/fraction/BigFraction.java",
        "signature": "org.apache.commons.math.fraction.BigFraction.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -5630213147331578515L;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFraction",
        "src_path": "src/main/java/org/apache/commons/math/fraction/BigFraction.java",
        "signature": "org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR",
        "snippet": "    private static final String FORBIDDEN_ZERO_DENOMINATOR =\n        \"denominator must be different from 0\";",
        "begin_line": 84,
        "end_line": 85,
        "comment": " Message for zero denominator. "
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFraction",
        "src_path": "src/main/java/org/apache/commons/math/fraction/BigFraction.java",
        "signature": "org.apache.commons.math.fraction.BigFraction.ONE_HUNDRED_DOUBLE",
        "snippet": "    private static final BigInteger ONE_HUNDRED_DOUBLE = BigInteger.valueOf(100);",
        "begin_line": 88,
        "end_line": 88,
        "comment": " <code>BigInteger</code> representation of 100. "
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFraction",
        "src_path": "src/main/java/org/apache/commons/math/fraction/BigFraction.java",
        "signature": "org.apache.commons.math.fraction.BigFraction.numerator",
        "snippet": "    private final BigInteger numerator;",
        "begin_line": 91,
        "end_line": 91,
        "comment": " The numerator. "
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFraction",
        "src_path": "src/main/java/org/apache/commons/math/fraction/BigFraction.java",
        "signature": "org.apache.commons.math.fraction.BigFraction.denominator",
        "snippet": "    private final BigInteger denominator;",
        "begin_line": 94,
        "end_line": 94,
        "comment": " The denominator. "
    },
    {
        "class_name": "org.apache.commons.math.fraction.Fraction",
        "src_path": "src/main/java/org/apache/commons/math/fraction/Fraction.java",
        "signature": "org.apache.commons.math.fraction.Fraction.TWO",
        "snippet": "    public static final Fraction TWO = new Fraction(2, 1);",
        "begin_line": 39,
        "end_line": 39,
        "comment": " A fraction representing \"2 / 1\". "
    },
    {
        "class_name": "org.apache.commons.math.fraction.Fraction",
        "src_path": "src/main/java/org/apache/commons/math/fraction/Fraction.java",
        "signature": "org.apache.commons.math.fraction.Fraction.ONE",
        "snippet": "    public static final Fraction ONE = new Fraction(1, 1);",
        "begin_line": 42,
        "end_line": 42,
        "comment": " A fraction representing \"1\". "
    },
    {
        "class_name": "org.apache.commons.math.fraction.Fraction",
        "src_path": "src/main/java/org/apache/commons/math/fraction/Fraction.java",
        "signature": "org.apache.commons.math.fraction.Fraction.ZERO",
        "snippet": "    public static final Fraction ZERO = new Fraction(0, 1);",
        "begin_line": 45,
        "end_line": 45,
        "comment": " A fraction representing \"0\". "
    },
    {
        "class_name": "org.apache.commons.math.fraction.Fraction",
        "src_path": "src/main/java/org/apache/commons/math/fraction/Fraction.java",
        "signature": "org.apache.commons.math.fraction.Fraction.FOUR_FIFTHS",
        "snippet": "    public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);",
        "begin_line": 48,
        "end_line": 48,
        "comment": " A fraction representing \"4/5\". "
    },
    {
        "class_name": "org.apache.commons.math.fraction.Fraction",
        "src_path": "src/main/java/org/apache/commons/math/fraction/Fraction.java",
        "signature": "org.apache.commons.math.fraction.Fraction.ONE_FIFTH",
        "snippet": "    public static final Fraction ONE_FIFTH = new Fraction(1, 5);",
        "begin_line": 51,
        "end_line": 51,
        "comment": " A fraction representing \"1/5\". "
    },
    {
        "class_name": "org.apache.commons.math.fraction.Fraction",
        "src_path": "src/main/java/org/apache/commons/math/fraction/Fraction.java",
        "signature": "org.apache.commons.math.fraction.Fraction.ONE_HALF",
        "snippet": "    public static final Fraction ONE_HALF = new Fraction(1, 2);",
        "begin_line": 54,
        "end_line": 54,
        "comment": " A fraction representing \"1/2\". "
    },
    {
        "class_name": "org.apache.commons.math.fraction.Fraction",
        "src_path": "src/main/java/org/apache/commons/math/fraction/Fraction.java",
        "signature": "org.apache.commons.math.fraction.Fraction.ONE_QUARTER",
        "snippet": "    public static final Fraction ONE_QUARTER = new Fraction(1, 4);",
        "begin_line": 57,
        "end_line": 57,
        "comment": " A fraction representing \"1/4\". "
    },
    {
        "class_name": "org.apache.commons.math.fraction.Fraction",
        "src_path": "src/main/java/org/apache/commons/math/fraction/Fraction.java",
        "signature": "org.apache.commons.math.fraction.Fraction.ONE_THIRD",
        "snippet": "    public static final Fraction ONE_THIRD = new Fraction(1, 3);",
        "begin_line": 60,
        "end_line": 60,
        "comment": " A fraction representing \"1/3\". "
    },
    {
        "class_name": "org.apache.commons.math.fraction.Fraction",
        "src_path": "src/main/java/org/apache/commons/math/fraction/Fraction.java",
        "signature": "org.apache.commons.math.fraction.Fraction.THREE_FIFTHS",
        "snippet": "    public static final Fraction THREE_FIFTHS = new Fraction(3, 5);",
        "begin_line": 63,
        "end_line": 63,
        "comment": " A fraction representing \"3/5\". "
    },
    {
        "class_name": "org.apache.commons.math.fraction.Fraction",
        "src_path": "src/main/java/org/apache/commons/math/fraction/Fraction.java",
        "signature": "org.apache.commons.math.fraction.Fraction.THREE_QUARTERS",
        "snippet": "    public static final Fraction THREE_QUARTERS = new Fraction(3, 4);",
        "begin_line": 66,
        "end_line": 66,
        "comment": " A fraction representing \"3/4\". "
    },
    {
        "class_name": "org.apache.commons.math.fraction.Fraction",
        "src_path": "src/main/java/org/apache/commons/math/fraction/Fraction.java",
        "signature": "org.apache.commons.math.fraction.Fraction.TWO_FIFTHS",
        "snippet": "    public static final Fraction TWO_FIFTHS = new Fraction(2, 5);",
        "begin_line": 69,
        "end_line": 69,
        "comment": " A fraction representing \"2/5\". "
    },
    {
        "class_name": "org.apache.commons.math.fraction.Fraction",
        "src_path": "src/main/java/org/apache/commons/math/fraction/Fraction.java",
        "signature": "org.apache.commons.math.fraction.Fraction.TWO_QUARTERS",
        "snippet": "    public static final Fraction TWO_QUARTERS = new Fraction(2, 4);",
        "begin_line": 72,
        "end_line": 72,
        "comment": " A fraction representing \"2/4\". "
    },
    {
        "class_name": "org.apache.commons.math.fraction.Fraction",
        "src_path": "src/main/java/org/apache/commons/math/fraction/Fraction.java",
        "signature": "org.apache.commons.math.fraction.Fraction.TWO_THIRDS",
        "snippet": "    public static final Fraction TWO_THIRDS = new Fraction(2, 3);",
        "begin_line": 75,
        "end_line": 75,
        "comment": " A fraction representing \"2/3\". "
    },
    {
        "class_name": "org.apache.commons.math.fraction.Fraction",
        "src_path": "src/main/java/org/apache/commons/math/fraction/Fraction.java",
        "signature": "org.apache.commons.math.fraction.Fraction.MINUS_ONE",
        "snippet": "    public static final Fraction MINUS_ONE = new Fraction(-1, 1);",
        "begin_line": 78,
        "end_line": 78,
        "comment": " A fraction representing \"-1 / 1\". "
    },
    {
        "class_name": "org.apache.commons.math.fraction.Fraction",
        "src_path": "src/main/java/org/apache/commons/math/fraction/Fraction.java",
        "signature": "org.apache.commons.math.fraction.Fraction.ZERO_DENOMINATOR_MESSAGE",
        "snippet": "    private static final String ZERO_DENOMINATOR_MESSAGE =\n        \"zero denominator in fraction {0}/{1}\";",
        "begin_line": 81,
        "end_line": 82,
        "comment": " Message for zero denominator. "
    },
    {
        "class_name": "org.apache.commons.math.fraction.Fraction",
        "src_path": "src/main/java/org/apache/commons/math/fraction/Fraction.java",
        "signature": "org.apache.commons.math.fraction.Fraction.OVERFLOW_MESSAGE",
        "snippet": "    private static final String OVERFLOW_MESSAGE =\n        \"overflow in fraction {0}/{1}, cannot negate\";",
        "begin_line": 85,
        "end_line": 86,
        "comment": " Message for overflow. "
    },
    {
        "class_name": "org.apache.commons.math.fraction.Fraction",
        "src_path": "src/main/java/org/apache/commons/math/fraction/Fraction.java",
        "signature": "org.apache.commons.math.fraction.Fraction.NULL_FRACTION",
        "snippet": "    private static final String NULL_FRACTION =\n        \"null fraction\";",
        "begin_line": 89,
        "end_line": 90,
        "comment": " Message for null fraction. "
    },
    {
        "class_name": "org.apache.commons.math.fraction.Fraction",
        "src_path": "src/main/java/org/apache/commons/math/fraction/Fraction.java",
        "signature": "org.apache.commons.math.fraction.Fraction.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 3698073679419233275L;",
        "begin_line": 93,
        "end_line": 93,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.fraction.Fraction",
        "src_path": "src/main/java/org/apache/commons/math/fraction/Fraction.java",
        "signature": "org.apache.commons.math.fraction.Fraction.denominator",
        "snippet": "    private final int denominator;",
        "begin_line": 96,
        "end_line": 96,
        "comment": " The denominator. "
    },
    {
        "class_name": "org.apache.commons.math.fraction.Fraction",
        "src_path": "src/main/java/org/apache/commons/math/fraction/Fraction.java",
        "signature": "org.apache.commons.math.fraction.Fraction.numerator",
        "snippet": "    private final int numerator;",
        "begin_line": 99,
        "end_line": 99,
        "comment": " The numerator. "
    },
    {
        "class_name": "org.apache.commons.math.fraction.ProperBigFractionFormat",
        "src_path": "src/main/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java",
        "signature": "org.apache.commons.math.fraction.ProperBigFractionFormat.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -6337346779577272307L;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.fraction.ProperBigFractionFormat",
        "src_path": "src/main/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java",
        "signature": "org.apache.commons.math.fraction.ProperBigFractionFormat.wholeFormat",
        "snippet": "    private NumberFormat wholeFormat;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " The format used for the whole number. "
    },
    {
        "class_name": "org.apache.commons.math.fraction.AbstractFormat",
        "src_path": "src/main/java/org/apache/commons/math/fraction/AbstractFormat.java",
        "signature": "org.apache.commons.math.fraction.AbstractFormat.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -6981118387974191891L;",
        "begin_line": 36,
        "end_line": 36,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.fraction.AbstractFormat",
        "src_path": "src/main/java/org/apache/commons/math/fraction/AbstractFormat.java",
        "signature": "org.apache.commons.math.fraction.AbstractFormat.denominatorFormat",
        "snippet": "    protected NumberFormat denominatorFormat;",
        "begin_line": 39,
        "end_line": 39,
        "comment": " The format used for the denominator. "
    },
    {
        "class_name": "org.apache.commons.math.fraction.AbstractFormat",
        "src_path": "src/main/java/org/apache/commons/math/fraction/AbstractFormat.java",
        "signature": "org.apache.commons.math.fraction.AbstractFormat.numeratorFormat",
        "snippet": "    protected NumberFormat numeratorFormat;",
        "begin_line": 42,
        "end_line": 42,
        "comment": " The format used for the numerator. "
    },
    {
        "class_name": "org.apache.commons.math.linear.DefaultFieldMatrixChangingVisitor",
        "src_path": "src/main/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java",
        "signature": "org.apache.commons.math.linear.DefaultFieldMatrixChangingVisitor.zero",
        "snippet": "    private final T zero;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " Zero element of the field. "
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseFieldVector",
        "src_path": "src/main/java/org/apache/commons/math/linear/SparseFieldVector.java",
        "signature": "org.apache.commons.math.linear.SparseFieldVector.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 7841233292190413362L;",
        "begin_line": 38,
        "end_line": 38,
        "comment": "\n     *  Serial version id\n     "
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseFieldVector",
        "src_path": "src/main/java/org/apache/commons/math/linear/SparseFieldVector.java",
        "signature": "org.apache.commons.math.linear.SparseFieldVector.field",
        "snippet": "    private final Field<T> field;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Field to which the elements belong. "
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseFieldVector",
        "src_path": "src/main/java/org/apache/commons/math/linear/SparseFieldVector.java",
        "signature": "org.apache.commons.math.linear.SparseFieldVector.entries",
        "snippet": "    private final OpenIntToFieldHashMap<T> entries;",
        "begin_line": 42,
        "end_line": 42,
        "comment": " Entries of the vector. "
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseFieldVector",
        "src_path": "src/main/java/org/apache/commons/math/linear/SparseFieldVector.java",
        "signature": "org.apache.commons.math.linear.SparseFieldVector.virtualSize",
        "snippet": "    private final int virtualSize;",
        "begin_line": 44,
        "end_line": 44,
        "comment": " Dimension of the vector. "
    },
    {
        "class_name": "org.apache.commons.math.linear.BiDiagonalTransformer",
        "src_path": "src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java",
        "signature": "org.apache.commons.math.linear.BiDiagonalTransformer.householderVectors",
        "snippet": "    private final double householderVectors[][];",
        "begin_line": 39,
        "end_line": 39,
        "comment": " Householder vectors. "
    },
    {
        "class_name": "org.apache.commons.math.linear.BiDiagonalTransformer",
        "src_path": "src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java",
        "signature": "org.apache.commons.math.linear.BiDiagonalTransformer.main",
        "snippet": "    private final double[] main;",
        "begin_line": 42,
        "end_line": 42,
        "comment": " Main diagonal. "
    },
    {
        "class_name": "org.apache.commons.math.linear.BiDiagonalTransformer",
        "src_path": "src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java",
        "signature": "org.apache.commons.math.linear.BiDiagonalTransformer.secondary",
        "snippet": "    private final double[] secondary;",
        "begin_line": 45,
        "end_line": 45,
        "comment": " Secondary diagonal. "
    },
    {
        "class_name": "org.apache.commons.math.linear.BiDiagonalTransformer",
        "src_path": "src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java",
        "signature": "org.apache.commons.math.linear.BiDiagonalTransformer.cachedU",
        "snippet": "    private RealMatrix cachedU;",
        "begin_line": 48,
        "end_line": 48,
        "comment": " Cached value of U. "
    },
    {
        "class_name": "org.apache.commons.math.linear.BiDiagonalTransformer",
        "src_path": "src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java",
        "signature": "org.apache.commons.math.linear.BiDiagonalTransformer.cachedB",
        "snippet": "    private RealMatrix cachedB;",
        "begin_line": 51,
        "end_line": 51,
        "comment": " Cached value of B. "
    },
    {
        "class_name": "org.apache.commons.math.linear.BiDiagonalTransformer",
        "src_path": "src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java",
        "signature": "org.apache.commons.math.linear.BiDiagonalTransformer.cachedV",
        "snippet": "    private RealMatrix cachedV;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " Cached value of V. "
    },
    {
        "class_name": "org.apache.commons.math.linear.MatrixIndexException",
        "src_path": "src/main/java/org/apache/commons/math/linear/MatrixIndexException.java",
        "signature": "org.apache.commons.math.linear.MatrixIndexException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -2382324504109300625L;",
        "begin_line": 30,
        "end_line": 30,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.linear.AbstractFieldMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java",
        "signature": "org.apache.commons.math.linear.AbstractFieldMatrix.field",
        "snippet": "    private final Field<T> field;",
        "begin_line": 39,
        "end_line": 39,
        "comment": " Field to which the elements belong. "
    },
    {
        "class_name": "org.apache.commons.math.linear.AbstractFieldMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java",
        "signature": "org.apache.commons.math.linear.AbstractFieldMatrix.startRow",
        "snippet": "            private int startRow;",
        "begin_line": 350,
        "end_line": 350,
        "comment": " Initial row index. "
    },
    {
        "class_name": "org.apache.commons.math.linear.AbstractFieldMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java",
        "signature": "org.apache.commons.math.linear.AbstractFieldMatrix.startColumn",
        "snippet": "            private int startColumn;",
        "begin_line": 353,
        "end_line": 353,
        "comment": " Initial column index. "
    },
    {
        "class_name": "org.apache.commons.math.linear.AbstractRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java",
        "signature": "org.apache.commons.math.linear.AbstractRealMatrix.lu",
        "snippet": "    @Deprecated\n    private DecompositionSolver lu;",
        "begin_line": 37,
        "end_line": 38,
        "comment": " Cached LU solver.\n     * @deprecated as of release 2.0, since all methods using this are deprecated\n     "
    },
    {
        "class_name": "org.apache.commons.math.linear.AbstractRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java",
        "signature": "org.apache.commons.math.linear.AbstractRealMatrix.endRow",
        "snippet": "            private double endRow;",
        "begin_line": 198,
        "end_line": 198,
        "comment": " Last row index. "
    },
    {
        "class_name": "org.apache.commons.math.linear.AbstractRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java",
        "signature": "org.apache.commons.math.linear.AbstractRealMatrix.columnSum",
        "snippet": "            private double columnSum;",
        "begin_line": 201,
        "end_line": 201,
        "comment": " Sum of absolute values on one column. "
    },
    {
        "class_name": "org.apache.commons.math.linear.AbstractRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java",
        "signature": "org.apache.commons.math.linear.AbstractRealMatrix.maxColSum",
        "snippet": "            private double maxColSum;",
        "begin_line": 204,
        "end_line": 204,
        "comment": " Maximal sum across all columns. "
    },
    {
        "class_name": "org.apache.commons.math.linear.AbstractRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java",
        "signature": "org.apache.commons.math.linear.AbstractRealMatrix.sum",
        "snippet": "            private double sum;",
        "begin_line": 237,
        "end_line": 237,
        "comment": " Sum of squared entries. "
    },
    {
        "class_name": "org.apache.commons.math.linear.AbstractRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java",
        "signature": "org.apache.commons.math.linear.AbstractRealMatrix.startRow",
        "snippet": "            private int startRow;",
        "begin_line": 323,
        "end_line": 323,
        "comment": " Initial row index. "
    },
    {
        "class_name": "org.apache.commons.math.linear.AbstractRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java",
        "signature": "org.apache.commons.math.linear.AbstractRealMatrix.startColumn",
        "snippet": "            private int startColumn;",
        "begin_line": 326,
        "end_line": 326,
        "comment": " Initial column index. "
    },
    {
        "class_name": "org.apache.commons.math.linear.SingularMatrixException",
        "src_path": "src/main/java/org/apache/commons/math/linear/SingularMatrixException.java",
        "signature": "org.apache.commons.math.linear.SingularMatrixException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -7379143356784298432L;",
        "begin_line": 29,
        "end_line": 29,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.linear.SingularValueDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.SingularValueDecompositionImpl.m",
        "snippet": "    private int m;",
        "begin_line": 39,
        "end_line": 39,
        "comment": " Number of rows of the initial matrix. "
    },
    {
        "class_name": "org.apache.commons.math.linear.SingularValueDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.SingularValueDecompositionImpl.n",
        "snippet": "    private int n;",
        "begin_line": 42,
        "end_line": 42,
        "comment": " Number of columns of the initial matrix. "
    },
    {
        "class_name": "org.apache.commons.math.linear.SingularValueDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.SingularValueDecompositionImpl.eigenDecomposition",
        "snippet": "    private EigenDecomposition eigenDecomposition;",
        "begin_line": 45,
        "end_line": 45,
        "comment": " Eigen decomposition of the tridiagonal matrix. "
    },
    {
        "class_name": "org.apache.commons.math.linear.SingularValueDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.SingularValueDecompositionImpl.singularValues",
        "snippet": "    private double[] singularValues;",
        "begin_line": 48,
        "end_line": 48,
        "comment": " Singular values. "
    },
    {
        "class_name": "org.apache.commons.math.linear.SingularValueDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.SingularValueDecompositionImpl.cachedU",
        "snippet": "    private RealMatrix cachedU;",
        "begin_line": 51,
        "end_line": 51,
        "comment": " Cached value of U. "
    },
    {
        "class_name": "org.apache.commons.math.linear.SingularValueDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.SingularValueDecompositionImpl.cachedUt",
        "snippet": "    private RealMatrix cachedUt;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " Cached value of U<sup>T</sup>. "
    },
    {
        "class_name": "org.apache.commons.math.linear.SingularValueDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.SingularValueDecompositionImpl.cachedS",
        "snippet": "    private RealMatrix cachedS;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " Cached value of S. "
    },
    {
        "class_name": "org.apache.commons.math.linear.SingularValueDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.SingularValueDecompositionImpl.cachedV",
        "snippet": "    private RealMatrix cachedV;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " Cached value of V. "
    },
    {
        "class_name": "org.apache.commons.math.linear.SingularValueDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.SingularValueDecompositionImpl.cachedVt",
        "snippet": "    private RealMatrix cachedVt;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " Cached value of V<sup>T</sup>. "
    },
    {
        "class_name": "org.apache.commons.math.linear.Solver",
        "src_path": "src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.Solver.pseudoInverse",
        "snippet": "        private final RealMatrix pseudoInverse;",
        "begin_line": 275,
        "end_line": 275,
        "comment": " Pseudo-inverse of the initial matrix. "
    },
    {
        "class_name": "org.apache.commons.math.linear.Solver",
        "src_path": "src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.Solver.nonSingular",
        "snippet": "        private boolean nonSingular;",
        "begin_line": 278,
        "end_line": 278,
        "comment": " Singularity indicator. "
    },
    {
        "class_name": "org.apache.commons.math.linear.QRDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.QRDecompositionImpl.qrt",
        "snippet": "    private double[][] qrt;",
        "begin_line": 49,
        "end_line": 49,
        "comment": "\n     * A packed TRANSPOSED representation of the QR decomposition.\n     * <p>The elements BELOW the diagonal are the elements of the UPPER triangular\n     * matrix R, and the rows ABOVE the diagonal are the Householder reflector vectors\n     * from which an explicit form of Q can be recomputed if desired.</p>\n     "
    },
    {
        "class_name": "org.apache.commons.math.linear.QRDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.QRDecompositionImpl.rDiag",
        "snippet": "    private double[] rDiag;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " The diagonal elements of R. "
    },
    {
        "class_name": "org.apache.commons.math.linear.QRDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.QRDecompositionImpl.cachedQ",
        "snippet": "    private RealMatrix cachedQ;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " Cached value of Q. "
    },
    {
        "class_name": "org.apache.commons.math.linear.QRDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.QRDecompositionImpl.cachedQT",
        "snippet": "    private RealMatrix cachedQT;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " Cached value of QT. "
    },
    {
        "class_name": "org.apache.commons.math.linear.QRDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.QRDecompositionImpl.cachedR",
        "snippet": "    private RealMatrix cachedR;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " Cached value of R. "
    },
    {
        "class_name": "org.apache.commons.math.linear.QRDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.QRDecompositionImpl.cachedH",
        "snippet": "    private RealMatrix cachedH;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " Cached value of H. "
    },
    {
        "class_name": "org.apache.commons.math.linear.Solver",
        "src_path": "src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.Solver.qrt",
        "snippet": "        private final double[][] qrt;",
        "begin_line": 258,
        "end_line": 258,
        "comment": "\n         * A packed TRANSPOSED representation of the QR decomposition.\n         * <p>The elements BELOW the diagonal are the elements of the UPPER triangular\n         * matrix R, and the rows ABOVE the diagonal are the Householder reflector vectors\n         * from which an explicit form of Q can be recomputed if desired.</p>\n         "
    },
    {
        "class_name": "org.apache.commons.math.linear.Solver",
        "src_path": "src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.Solver.rDiag",
        "snippet": "        private final double[] rDiag;",
        "begin_line": 261,
        "end_line": 261,
        "comment": " The diagonal elements of R. "
    },
    {
        "class_name": "org.apache.commons.math.linear.CholeskyDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.CholeskyDecompositionImpl.DEFAULT_RELATIVE_SYMMETRY_THRESHOLD",
        "snippet": "    public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;",
        "begin_line": 38,
        "end_line": 38,
        "comment": " Default threshold above which off-diagonal elements are considered too different\n     * and matrix not symmetric. "
    },
    {
        "class_name": "org.apache.commons.math.linear.CholeskyDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.CholeskyDecompositionImpl.DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD",
        "snippet": "    public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;",
        "begin_line": 42,
        "end_line": 42,
        "comment": " Default threshold below which diagonal elements are considered null\n     * and matrix not positive definite. "
    },
    {
        "class_name": "org.apache.commons.math.linear.CholeskyDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.CholeskyDecompositionImpl.lTData",
        "snippet": "    private double[][] lTData;",
        "begin_line": 45,
        "end_line": 45,
        "comment": " Row-oriented storage for L<sup>T</sup> matrix data. "
    },
    {
        "class_name": "org.apache.commons.math.linear.CholeskyDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.CholeskyDecompositionImpl.cachedL",
        "snippet": "    private RealMatrix cachedL;",
        "begin_line": 48,
        "end_line": 48,
        "comment": " Cached value of L. "
    },
    {
        "class_name": "org.apache.commons.math.linear.CholeskyDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.CholeskyDecompositionImpl.cachedLT",
        "snippet": "    private RealMatrix cachedLT;",
        "begin_line": 51,
        "end_line": 51,
        "comment": " Cached value of LT. "
    },
    {
        "class_name": "org.apache.commons.math.linear.Solver",
        "src_path": "src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.Solver.lTData",
        "snippet": "        private final double[][] lTData;",
        "begin_line": 192,
        "end_line": 192,
        "comment": " Row-oriented storage for L<sup>T</sup> matrix data. "
    },
    {
        "class_name": "org.apache.commons.math.linear.TriDiagonalTransformer",
        "src_path": "src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java",
        "signature": "org.apache.commons.math.linear.TriDiagonalTransformer.householderVectors",
        "snippet": "    private final double householderVectors[][];",
        "begin_line": 41,
        "end_line": 41,
        "comment": " Householder vectors. "
    },
    {
        "class_name": "org.apache.commons.math.linear.TriDiagonalTransformer",
        "src_path": "src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java",
        "signature": "org.apache.commons.math.linear.TriDiagonalTransformer.main",
        "snippet": "    private final double[] main;",
        "begin_line": 44,
        "end_line": 44,
        "comment": " Main diagonal. "
    },
    {
        "class_name": "org.apache.commons.math.linear.TriDiagonalTransformer",
        "src_path": "src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java",
        "signature": "org.apache.commons.math.linear.TriDiagonalTransformer.secondary",
        "snippet": "    private final double[] secondary;",
        "begin_line": 47,
        "end_line": 47,
        "comment": " Secondary diagonal. "
    },
    {
        "class_name": "org.apache.commons.math.linear.TriDiagonalTransformer",
        "src_path": "src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java",
        "signature": "org.apache.commons.math.linear.TriDiagonalTransformer.cachedQ",
        "snippet": "    private RealMatrix cachedQ;",
        "begin_line": 50,
        "end_line": 50,
        "comment": " Cached value of Q. "
    },
    {
        "class_name": "org.apache.commons.math.linear.TriDiagonalTransformer",
        "src_path": "src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java",
        "signature": "org.apache.commons.math.linear.TriDiagonalTransformer.cachedQt",
        "snippet": "    private RealMatrix cachedQt;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " Cached value of Qt. "
    },
    {
        "class_name": "org.apache.commons.math.linear.TriDiagonalTransformer",
        "src_path": "src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java",
        "signature": "org.apache.commons.math.linear.TriDiagonalTransformer.cachedT",
        "snippet": "    private RealMatrix cachedT;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " Cached value of T. "
    },
    {
        "class_name": "org.apache.commons.math.linear.Entry",
        "src_path": "src/main/java/org/apache/commons/math/linear/RealVector.java",
        "signature": "org.apache.commons.math.linear.Entry.index",
        "snippet": "        private int index;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " Index of the entry. "
    },
    {
        "class_name": "org.apache.commons.math.linear.Array2DRowFieldMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java",
        "signature": "org.apache.commons.math.linear.Array2DRowFieldMatrix.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 7260756672015356458L;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.linear.Array2DRowFieldMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java",
        "signature": "org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_ROW_MESSAGE",
        "snippet": "    private static final String AT_LEAST_ONE_ROW_MESSAGE =\n        \"matrix must have at least one row\";",
        "begin_line": 43,
        "end_line": 44,
        "comment": " Message for at least one row. "
    },
    {
        "class_name": "org.apache.commons.math.linear.Array2DRowFieldMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java",
        "signature": "org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_COLUMN_MESSAGE",
        "snippet": "    private static final String AT_LEAST_ONE_COLUMN_MESSAGE =\n        \"matrix must have at least one column\";",
        "begin_line": 47,
        "end_line": 48,
        "comment": " Message for at least one column. "
    },
    {
        "class_name": "org.apache.commons.math.linear.Array2DRowFieldMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java",
        "signature": "org.apache.commons.math.linear.Array2DRowFieldMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE",
        "snippet": "    private static final String DIFFERENT_ROWS_LENGTHS_MESSAGE =\n        \"some rows have length {0} while others have length {1}\";",
        "begin_line": 51,
        "end_line": 52,
        "comment": " Message for different rows lengths. "
    },
    {
        "class_name": "org.apache.commons.math.linear.Array2DRowFieldMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java",
        "signature": "org.apache.commons.math.linear.Array2DRowFieldMatrix.NO_ENTRY_MESSAGE",
        "snippet": "    private static final String NO_ENTRY_MESSAGE =\n        \"no entry at indices ({0}, {1}) in a {2}x{3} matrix\";",
        "begin_line": 55,
        "end_line": 56,
        "comment": " Message for no entry at selected indices. "
    },
    {
        "class_name": "org.apache.commons.math.linear.Array2DRowFieldMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java",
        "signature": "org.apache.commons.math.linear.Array2DRowFieldMatrix.VECTOR_LENGTHS_MISMATCH",
        "snippet": "    private static final String VECTOR_LENGTHS_MISMATCH =\n        \"vector length mismatch: got {0} but expected {1}\";",
        "begin_line": 59,
        "end_line": 60,
        "comment": " Message for vector lengths mismatch. "
    },
    {
        "class_name": "org.apache.commons.math.linear.Array2DRowFieldMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java",
        "signature": "org.apache.commons.math.linear.Array2DRowFieldMatrix.data",
        "snippet": "    protected T[][] data;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " Entries of the matrix "
    },
    {
        "class_name": "org.apache.commons.math.linear.FieldLUDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.FieldLUDecompositionImpl.field",
        "snippet": "    private final Field<T> field;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " Field to which the elements belong. "
    },
    {
        "class_name": "org.apache.commons.math.linear.FieldLUDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.FieldLUDecompositionImpl.lu",
        "snippet": "    private T lu[][];",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Entries of LU decomposition. "
    },
    {
        "class_name": "org.apache.commons.math.linear.FieldLUDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.FieldLUDecompositionImpl.pivot",
        "snippet": "    private int[] pivot;",
        "begin_line": 49,
        "end_line": 49,
        "comment": " Pivot permutation associated with LU decomposition "
    },
    {
        "class_name": "org.apache.commons.math.linear.FieldLUDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.FieldLUDecompositionImpl.even",
        "snippet": "    private boolean even;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " Parity of the permutation associated with the LU decomposition "
    },
    {
        "class_name": "org.apache.commons.math.linear.FieldLUDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.FieldLUDecompositionImpl.singular",
        "snippet": "    private boolean singular;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " Singularity indicator. "
    },
    {
        "class_name": "org.apache.commons.math.linear.FieldLUDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.FieldLUDecompositionImpl.cachedL",
        "snippet": "    private FieldMatrix<T> cachedL;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " Cached value of L. "
    },
    {
        "class_name": "org.apache.commons.math.linear.FieldLUDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.FieldLUDecompositionImpl.cachedU",
        "snippet": "    private FieldMatrix<T> cachedU;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " Cached value of U. "
    },
    {
        "class_name": "org.apache.commons.math.linear.FieldLUDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.FieldLUDecompositionImpl.cachedP",
        "snippet": "    private FieldMatrix<T> cachedP;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " Cached value of P. "
    },
    {
        "class_name": "org.apache.commons.math.linear.Solver",
        "src_path": "src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.Solver.serialVersionUID",
        "snippet": "        private static final long serialVersionUID = -6353105415121373022L;",
        "begin_line": 225,
        "end_line": 225,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.linear.Solver",
        "src_path": "src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.Solver.field",
        "snippet": "        private final Field<T> field;",
        "begin_line": 228,
        "end_line": 228,
        "comment": " Field to which the elements belong. "
    },
    {
        "class_name": "org.apache.commons.math.linear.Solver",
        "src_path": "src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.Solver.lu",
        "snippet": "        private final T lu[][];",
        "begin_line": 231,
        "end_line": 231,
        "comment": " Entries of LU decomposition. "
    },
    {
        "class_name": "org.apache.commons.math.linear.Solver",
        "src_path": "src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.Solver.pivot",
        "snippet": "        private final int[] pivot;",
        "begin_line": 234,
        "end_line": 234,
        "comment": " Pivot permutation associated with LU decomposition. "
    },
    {
        "class_name": "org.apache.commons.math.linear.Solver",
        "src_path": "src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.Solver.singular",
        "snippet": "        private final boolean singular;",
        "begin_line": 237,
        "end_line": 237,
        "comment": " Singularity indicator. "
    },
    {
        "class_name": "org.apache.commons.math.linear.FractionMatrixConverter",
        "src_path": "src/main/java/org/apache/commons/math/linear/MatrixUtils.java",
        "signature": "org.apache.commons.math.linear.FractionMatrixConverter.data",
        "snippet": "        private double[][] data;",
        "begin_line": 673,
        "end_line": 673,
        "comment": " Converted array. "
    },
    {
        "class_name": "org.apache.commons.math.linear.BigFractionMatrixConverter",
        "src_path": "src/main/java/org/apache/commons/math/linear/MatrixUtils.java",
        "signature": "org.apache.commons.math.linear.BigFractionMatrixConverter.data",
        "snippet": "        private double[][] data;",
        "begin_line": 717,
        "end_line": 717,
        "comment": " Converted array. "
    },
    {
        "class_name": "org.apache.commons.math.linear.InvalidMatrixException",
        "src_path": "src/main/java/org/apache/commons/math/linear/InvalidMatrixException.java",
        "signature": "org.apache.commons.math.linear.InvalidMatrixException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1135533765052675495L;",
        "begin_line": 31,
        "end_line": 31,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.linear.AbstractRealVector",
        "src_path": "src/main/java/org/apache/commons/math/linear/AbstractRealVector.java",
        "signature": "org.apache.commons.math.linear.AbstractRealVector.i",
        "snippet": "            private int i = 0;",
        "begin_line": 801,
        "end_line": 801,
        "comment": " Current index. "
    },
    {
        "class_name": "org.apache.commons.math.linear.AbstractRealVector",
        "src_path": "src/main/java/org/apache/commons/math/linear/AbstractRealVector.java",
        "signature": "org.apache.commons.math.linear.AbstractRealVector.e",
        "snippet": "            private EntryImpl e = new EntryImpl();",
        "begin_line": 804,
        "end_line": 804,
        "comment": " Current entry. "
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseEntryIterator",
        "src_path": "src/main/java/org/apache/commons/math/linear/AbstractRealVector.java",
        "signature": "org.apache.commons.math.linear.SparseEntryIterator.dim",
        "snippet": "        private final int dim;",
        "begin_line": 876,
        "end_line": 876,
        "comment": " Dimension of the vector. "
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseEntryIterator",
        "src_path": "src/main/java/org/apache/commons/math/linear/AbstractRealVector.java",
        "signature": "org.apache.commons.math.linear.SparseEntryIterator.tmp",
        "snippet": "        private EntryImpl tmp = new EntryImpl();",
        "begin_line": 879,
        "end_line": 879,
        "comment": " Temporary entry (reused on each call to {@link #next()}. "
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseEntryIterator",
        "src_path": "src/main/java/org/apache/commons/math/linear/AbstractRealVector.java",
        "signature": "org.apache.commons.math.linear.SparseEntryIterator.current",
        "snippet": "        private EntryImpl current;",
        "begin_line": 882,
        "end_line": 882,
        "comment": " Current entry. "
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseEntryIterator",
        "src_path": "src/main/java/org/apache/commons/math/linear/AbstractRealVector.java",
        "signature": "org.apache.commons.math.linear.SparseEntryIterator.next",
        "snippet": "        private EntryImpl next;",
        "begin_line": 885,
        "end_line": 885,
        "comment": " Next entry. "
    },
    {
        "class_name": "org.apache.commons.math.linear.NotPositiveDefiniteMatrixException",
        "src_path": "src/main/java/org/apache/commons/math/linear/NotPositiveDefiniteMatrixException.java",
        "signature": "org.apache.commons.math.linear.NotPositiveDefiniteMatrixException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 4122929125438624648L;",
        "begin_line": 33,
        "end_line": 33,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayFieldVector",
        "src_path": "src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java",
        "signature": "org.apache.commons.math.linear.ArrayFieldVector.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 7648186910365927050L;",
        "begin_line": 36,
        "end_line": 36,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayFieldVector",
        "src_path": "src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java",
        "signature": "org.apache.commons.math.linear.ArrayFieldVector.data",
        "snippet": "    protected T[] data;",
        "begin_line": 39,
        "end_line": 39,
        "comment": " Entries of the vector. "
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayFieldVector",
        "src_path": "src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java",
        "signature": "org.apache.commons.math.linear.ArrayFieldVector.field",
        "snippet": "    private final Field<T> field;",
        "begin_line": 42,
        "end_line": 42,
        "comment": " Field to which the elements belong. "
    },
    {
        "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java",
        "signature": "org.apache.commons.math.linear.Array2DRowRealMatrix.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -1067294169172445528L;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java",
        "signature": "org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE",
        "snippet": "    private static final String AT_LEAST_ONE_ROW_MESSAGE =\n        \"matrix must have at least one row\";",
        "begin_line": 58,
        "end_line": 59,
        "comment": " Message for at least one row. "
    },
    {
        "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java",
        "signature": "org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE",
        "snippet": "    private static final String AT_LEAST_ONE_COLUMN_MESSAGE =\n        \"matrix must have at least one column\";",
        "begin_line": 62,
        "end_line": 63,
        "comment": " Message for at least one column. "
    },
    {
        "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java",
        "signature": "org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE",
        "snippet": "    private static final String DIFFERENT_ROWS_LENGTHS_MESSAGE =\n        \"some rows have length {0} while others have length {1}\";",
        "begin_line": 66,
        "end_line": 67,
        "comment": " Message for different rows lengths. "
    },
    {
        "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java",
        "signature": "org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE",
        "snippet": "    private static final String NO_ENTRY_MESSAGE =\n        \"no entry at indices ({0}, {1}) in a {2}x{3} matrix\";",
        "begin_line": 70,
        "end_line": 71,
        "comment": " Message for no entry at selected indices. "
    },
    {
        "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java",
        "signature": "org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH",
        "snippet": "    private static final String VECTOR_LENGTHS_MISMATCH =\n        \"vector length mismatch: got {0} but expected {1}\";",
        "begin_line": 74,
        "end_line": 75,
        "comment": " Message for vector lengths mismatch. "
    },
    {
        "class_name": "org.apache.commons.math.linear.Array2DRowRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java",
        "signature": "org.apache.commons.math.linear.Array2DRowRealMatrix.data",
        "snippet": "    protected double data[][];",
        "begin_line": 78,
        "end_line": 78,
        "comment": " Entries of the matrix "
    },
    {
        "class_name": "org.apache.commons.math.linear.OpenMapRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java",
        "signature": "org.apache.commons.math.linear.OpenMapRealMatrix.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -5962461716457143437L;",
        "begin_line": 33,
        "end_line": 33,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.linear.OpenMapRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java",
        "signature": "org.apache.commons.math.linear.OpenMapRealMatrix.rows",
        "snippet": "    private final int rows;",
        "begin_line": 36,
        "end_line": 36,
        "comment": " Number of rows of the matrix. "
    },
    {
        "class_name": "org.apache.commons.math.linear.OpenMapRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java",
        "signature": "org.apache.commons.math.linear.OpenMapRealMatrix.columns",
        "snippet": "    private final int columns;",
        "begin_line": 39,
        "end_line": 39,
        "comment": " Number of columns of the matrix. "
    },
    {
        "class_name": "org.apache.commons.math.linear.OpenMapRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java",
        "signature": "org.apache.commons.math.linear.OpenMapRealMatrix.entries",
        "snippet": "    private final OpenIntToDoubleHashMap entries;",
        "begin_line": 42,
        "end_line": 42,
        "comment": " Storage for (sparse) matrix elements. "
    },
    {
        "class_name": "org.apache.commons.math.linear.EigenDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.EigenDecompositionImpl.maxIter",
        "snippet": "    private byte maxIter = 30;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " Maximum number of iterations accepted in the implicit QL transformation "
    },
    {
        "class_name": "org.apache.commons.math.linear.EigenDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.EigenDecompositionImpl.main",
        "snippet": "    private double[] main;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " Main diagonal of the tridiagonal matrix. "
    },
    {
        "class_name": "org.apache.commons.math.linear.EigenDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.EigenDecompositionImpl.secondary",
        "snippet": "    private double[] secondary;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " Secondary diagonal of the tridiagonal matrix. "
    },
    {
        "class_name": "org.apache.commons.math.linear.EigenDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.EigenDecompositionImpl.transformer",
        "snippet": "    private TriDiagonalTransformer transformer;",
        "begin_line": 67,
        "end_line": 67,
        "comment": "\n     * Transformer to tridiagonal (may be null if matrix is already\n     * tridiagonal).\n     "
    },
    {
        "class_name": "org.apache.commons.math.linear.EigenDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.EigenDecompositionImpl.realEigenvalues",
        "snippet": "    private double[] realEigenvalues;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " Real part of the realEigenvalues. "
    },
    {
        "class_name": "org.apache.commons.math.linear.EigenDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.EigenDecompositionImpl.imagEigenvalues",
        "snippet": "    private double[] imagEigenvalues;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " Imaginary part of the realEigenvalues. "
    },
    {
        "class_name": "org.apache.commons.math.linear.EigenDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.EigenDecompositionImpl.eigenvectors",
        "snippet": "    private ArrayRealVector[] eigenvectors;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " Eigenvectors. "
    },
    {
        "class_name": "org.apache.commons.math.linear.EigenDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.EigenDecompositionImpl.cachedV",
        "snippet": "    private RealMatrix cachedV;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " Cached value of V. "
    },
    {
        "class_name": "org.apache.commons.math.linear.EigenDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.EigenDecompositionImpl.cachedD",
        "snippet": "    private RealMatrix cachedD;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " Cached value of D. "
    },
    {
        "class_name": "org.apache.commons.math.linear.EigenDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.EigenDecompositionImpl.cachedVt",
        "snippet": "    private RealMatrix cachedVt;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " Cached value of Vt. "
    },
    {
        "class_name": "org.apache.commons.math.linear.Solver",
        "src_path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.Solver.realEigenvalues",
        "snippet": "        private double[] realEigenvalues;",
        "begin_line": 245,
        "end_line": 245,
        "comment": " Real part of the realEigenvalues. "
    },
    {
        "class_name": "org.apache.commons.math.linear.Solver",
        "src_path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.Solver.imagEigenvalues",
        "snippet": "        private double[] imagEigenvalues;",
        "begin_line": 248,
        "end_line": 248,
        "comment": " Imaginary part of the realEigenvalues. "
    },
    {
        "class_name": "org.apache.commons.math.linear.Solver",
        "src_path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.Solver.eigenvectors",
        "snippet": "        private final ArrayRealVector[] eigenvectors;",
        "begin_line": 251,
        "end_line": 251,
        "comment": " Eigenvectors. "
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImpl.ZERO",
        "snippet": "    static final BigDecimal ZERO = new BigDecimal(0);",
        "begin_line": 58,
        "end_line": 58,
        "comment": " BigDecimal 0 "
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImpl.ONE",
        "snippet": "    static final BigDecimal ONE = new BigDecimal(1);",
        "begin_line": 61,
        "end_line": 61,
        "comment": " BigDecimal 1 "
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImpl.TOO_SMALL",
        "snippet": "    private static final BigDecimal TOO_SMALL = new BigDecimal(10E-12);",
        "begin_line": 64,
        "end_line": 64,
        "comment": " Bound to determine effective singularity in LU decomposition "
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImpl.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -1011428905656140431L;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " Serialization id "
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImpl.data",
        "snippet": "    protected BigDecimal data[][] = null;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " Entries of the matrix "
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImpl.lu",
        "snippet": "    protected BigDecimal lu[][] = null;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " Entries of cached LU decomposition.\n     *  All updates to data (other than luDecompose()) *must* set this to null\n     "
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImpl.permutation",
        "snippet": "    protected int[] permutation = null;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " Permutation associated with LU decomposition "
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImpl.parity",
        "snippet": "    protected int parity = 1;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " Parity of the permutation associated with the LU decomposition "
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImpl.roundingMode",
        "snippet": "    private int roundingMode = BigDecimal.ROUND_HALF_UP;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " Rounding mode for divisions *"
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImpl.scale",
        "snippet": "    private int scale = 64;",
        "begin_line": 87,
        "end_line": 87,
        "comment": "* BigDecimal scale **"
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseFieldMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java",
        "signature": "org.apache.commons.math.linear.SparseFieldMatrix.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 9078068119297757342L;",
        "begin_line": 34,
        "end_line": 34,
        "comment": "\n     *  Serial id\n     "
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseFieldMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java",
        "signature": "org.apache.commons.math.linear.SparseFieldMatrix.entries",
        "snippet": "    private final OpenIntToFieldHashMap<T> entries;",
        "begin_line": 36,
        "end_line": 36,
        "comment": " Storage for (sparse) matrix elements. "
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseFieldMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java",
        "signature": "org.apache.commons.math.linear.SparseFieldMatrix.rows",
        "snippet": "    private final int rows;",
        "begin_line": 40,
        "end_line": 40,
        "comment": "\n     * row dimension\n     "
    },
    {
        "class_name": "org.apache.commons.math.linear.SparseFieldMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java",
        "signature": "org.apache.commons.math.linear.SparseFieldMatrix.columns",
        "snippet": "    private final int columns;",
        "begin_line": 44,
        "end_line": 44,
        "comment": "\n     * column dimension\n     "
    },
    {
        "class_name": "org.apache.commons.math.linear.MatrixVisitorException",
        "src_path": "src/main/java/org/apache/commons/math/linear/MatrixVisitorException.java",
        "signature": "org.apache.commons.math.linear.MatrixVisitorException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 3814333035048617048L;",
        "begin_line": 29,
        "end_line": 29,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.linear.NonSquareMatrixException",
        "src_path": "src/main/java/org/apache/commons/math/linear/NonSquareMatrixException.java",
        "signature": "org.apache.commons.math.linear.NonSquareMatrixException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 8996207526636673730L;",
        "begin_line": 29,
        "end_line": 29,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVector",
        "src_path": "src/main/java/org/apache/commons/math/linear/ArrayRealVector.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVector.NON_FITTING_POSITION_AND_SIZE_MESSAGE",
        "snippet": "    private static final String NON_FITTING_POSITION_AND_SIZE_MESSAGE =\n        \"position {0} and size {1} don't fit to the size of the input array {2}\";",
        "begin_line": 34,
        "end_line": 35,
        "comment": " Message for non fitting position and size. "
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVector",
        "src_path": "src/main/java/org/apache/commons/math/linear/ArrayRealVector.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVector.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -1097961340710804027L;",
        "begin_line": 38,
        "end_line": 38,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVector",
        "src_path": "src/main/java/org/apache/commons/math/linear/ArrayRealVector.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT",
        "snippet": "    private static final RealVectorFormat DEFAULT_FORMAT =\n        RealVectorFormat.getInstance();",
        "begin_line": 41,
        "end_line": 42,
        "comment": " Default format. "
    },
    {
        "class_name": "org.apache.commons.math.linear.ArrayRealVector",
        "src_path": "src/main/java/org/apache/commons/math/linear/ArrayRealVector.java",
        "signature": "org.apache.commons.math.linear.ArrayRealVector.data",
        "snippet": "    protected double data[];",
        "begin_line": 45,
        "end_line": 45,
        "comment": " Entries of the vector. "
    },
    {
        "class_name": "org.apache.commons.math.linear.BlockFieldMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java",
        "signature": "org.apache.commons.math.linear.BlockFieldMatrix.BLOCK_SIZE",
        "snippet": "    public static final int BLOCK_SIZE = 36;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " Block size. "
    },
    {
        "class_name": "org.apache.commons.math.linear.BlockFieldMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java",
        "signature": "org.apache.commons.math.linear.BlockFieldMatrix.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -4602336630143123183L;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.linear.BlockFieldMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java",
        "signature": "org.apache.commons.math.linear.BlockFieldMatrix.blocks",
        "snippet": "    private final T blocks[][];",
        "begin_line": 75,
        "end_line": 75,
        "comment": " Blocks of matrix entries. "
    },
    {
        "class_name": "org.apache.commons.math.linear.BlockFieldMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java",
        "signature": "org.apache.commons.math.linear.BlockFieldMatrix.rows",
        "snippet": "    private final int rows;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " Number of rows of the matrix. "
    },
    {
        "class_name": "org.apache.commons.math.linear.BlockFieldMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java",
        "signature": "org.apache.commons.math.linear.BlockFieldMatrix.columns",
        "snippet": "    private final int columns;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " Number of columns of the matrix. "
    },
    {
        "class_name": "org.apache.commons.math.linear.BlockFieldMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java",
        "signature": "org.apache.commons.math.linear.BlockFieldMatrix.blockRows",
        "snippet": "    private final int blockRows;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " Number of block rows of the matrix. "
    },
    {
        "class_name": "org.apache.commons.math.linear.BlockFieldMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java",
        "signature": "org.apache.commons.math.linear.BlockFieldMatrix.blockColumns",
        "snippet": "    private final int blockColumns;",
        "begin_line": 87,
        "end_line": 87,
        "comment": " Number of block columns of the matrix. "
    },
    {
        "class_name": "org.apache.commons.math.linear.NotSymmetricMatrixException",
        "src_path": "src/main/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java",
        "signature": "org.apache.commons.math.linear.NotSymmetricMatrixException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -7012803946709786097L;",
        "begin_line": 33,
        "end_line": 33,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.linear.BlockRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java",
        "signature": "org.apache.commons.math.linear.BlockRealMatrix.BLOCK_SIZE",
        "snippet": "    public static final int BLOCK_SIZE = 52;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " Block size. "
    },
    {
        "class_name": "org.apache.commons.math.linear.BlockRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java",
        "signature": "org.apache.commons.math.linear.BlockRealMatrix.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 4991895511313664478L;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.linear.BlockRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java",
        "signature": "org.apache.commons.math.linear.BlockRealMatrix.blocks",
        "snippet": "    private final double blocks[][];",
        "begin_line": 73,
        "end_line": 73,
        "comment": " Blocks of matrix entries. "
    },
    {
        "class_name": "org.apache.commons.math.linear.BlockRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java",
        "signature": "org.apache.commons.math.linear.BlockRealMatrix.rows",
        "snippet": "    private final int rows;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " Number of rows of the matrix. "
    },
    {
        "class_name": "org.apache.commons.math.linear.BlockRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java",
        "signature": "org.apache.commons.math.linear.BlockRealMatrix.columns",
        "snippet": "    private final int columns;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " Number of columns of the matrix. "
    },
    {
        "class_name": "org.apache.commons.math.linear.BlockRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java",
        "signature": "org.apache.commons.math.linear.BlockRealMatrix.blockRows",
        "snippet": "    private final int blockRows;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " Number of block rows of the matrix. "
    },
    {
        "class_name": "org.apache.commons.math.linear.BlockRealMatrix",
        "src_path": "src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java",
        "signature": "org.apache.commons.math.linear.BlockRealMatrix.blockColumns",
        "snippet": "    private final int blockColumns;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " Number of block columns of the matrix. "
    },
    {
        "class_name": "org.apache.commons.math.linear.OpenMapRealVector",
        "src_path": "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
        "signature": "org.apache.commons.math.linear.OpenMapRealVector.DEFAULT_ZERO_TOLERANCE",
        "snippet": "    public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;",
        "begin_line": 33,
        "end_line": 33,
        "comment": " Default Tolerance for having a value considered zero. "
    },
    {
        "class_name": "org.apache.commons.math.linear.OpenMapRealVector",
        "src_path": "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
        "signature": "org.apache.commons.math.linear.OpenMapRealVector.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 8772222695580707260L;",
        "begin_line": 36,
        "end_line": 36,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.linear.OpenMapRealVector",
        "src_path": "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
        "signature": "org.apache.commons.math.linear.OpenMapRealVector.entries",
        "snippet": "    private final OpenIntToDoubleHashMap entries;",
        "begin_line": 39,
        "end_line": 39,
        "comment": " Entries of the vector. "
    },
    {
        "class_name": "org.apache.commons.math.linear.OpenMapRealVector",
        "src_path": "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
        "signature": "org.apache.commons.math.linear.OpenMapRealVector.virtualSize",
        "snippet": "    private final int virtualSize;",
        "begin_line": 42,
        "end_line": 42,
        "comment": " Dimension of the vector. "
    },
    {
        "class_name": "org.apache.commons.math.linear.OpenMapRealVector",
        "src_path": "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
        "signature": "org.apache.commons.math.linear.OpenMapRealVector.epsilon",
        "snippet": "    private double epsilon;",
        "begin_line": 45,
        "end_line": 45,
        "comment": " Tolerance for having a value considered zero. "
    },
    {
        "class_name": "org.apache.commons.math.linear.OpenMapEntry",
        "src_path": "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
        "signature": "org.apache.commons.math.linear.OpenMapEntry.iter",
        "snippet": "        private final Iterator iter;",
        "begin_line": 837,
        "end_line": 837,
        "comment": " Iterator pointing to the entry. "
    },
    {
        "class_name": "org.apache.commons.math.linear.OpenMapSparseIterator",
        "src_path": "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
        "signature": "org.apache.commons.math.linear.OpenMapSparseIterator.iter",
        "snippet": "        private final Iterator iter;",
        "begin_line": 874,
        "end_line": 874,
        "comment": " Underlying iterator. "
    },
    {
        "class_name": "org.apache.commons.math.linear.OpenMapSparseIterator",
        "src_path": "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
        "signature": "org.apache.commons.math.linear.OpenMapSparseIterator.current",
        "snippet": "        private final Entry current;",
        "begin_line": 877,
        "end_line": 877,
        "comment": " Current entry. "
    },
    {
        "class_name": "org.apache.commons.math.linear.LUDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.LUDecompositionImpl.DEFAULT_TOO_SMALL",
        "snippet": "    private static final double DEFAULT_TOO_SMALL = 10E-12;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " Default bound to determine effective singularity in LU decomposition "
    },
    {
        "class_name": "org.apache.commons.math.linear.LUDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.LUDecompositionImpl.VECTOR_LENGTH_MISMATCH_MESSAGE",
        "snippet": "    private static final String VECTOR_LENGTH_MISMATCH_MESSAGE =\n        \"vector length mismatch: got {0} but expected {1}\";",
        "begin_line": 40,
        "end_line": 41,
        "comment": " Message for vector length mismatch. "
    },
    {
        "class_name": "org.apache.commons.math.linear.LUDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.LUDecompositionImpl.lu",
        "snippet": "    private double lu[][];",
        "begin_line": 44,
        "end_line": 44,
        "comment": " Entries of LU decomposition. "
    },
    {
        "class_name": "org.apache.commons.math.linear.LUDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.LUDecompositionImpl.pivot",
        "snippet": "    private int[] pivot;",
        "begin_line": 47,
        "end_line": 47,
        "comment": " Pivot permutation associated with LU decomposition "
    },
    {
        "class_name": "org.apache.commons.math.linear.LUDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.LUDecompositionImpl.even",
        "snippet": "    private boolean even;",
        "begin_line": 50,
        "end_line": 50,
        "comment": " Parity of the permutation associated with the LU decomposition "
    },
    {
        "class_name": "org.apache.commons.math.linear.LUDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.LUDecompositionImpl.singular",
        "snippet": "    private boolean singular;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " Singularity indicator. "
    },
    {
        "class_name": "org.apache.commons.math.linear.LUDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.LUDecompositionImpl.cachedL",
        "snippet": "    private RealMatrix cachedL;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " Cached value of L. "
    },
    {
        "class_name": "org.apache.commons.math.linear.LUDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.LUDecompositionImpl.cachedU",
        "snippet": "    private RealMatrix cachedU;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " Cached value of U. "
    },
    {
        "class_name": "org.apache.commons.math.linear.LUDecompositionImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.LUDecompositionImpl.cachedP",
        "snippet": "    private RealMatrix cachedP;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " Cached value of P. "
    },
    {
        "class_name": "org.apache.commons.math.linear.Solver",
        "src_path": "src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.Solver.lu",
        "snippet": "        private final double lu[][];",
        "begin_line": 237,
        "end_line": 237,
        "comment": " Entries of LU decomposition. "
    },
    {
        "class_name": "org.apache.commons.math.linear.Solver",
        "src_path": "src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.Solver.pivot",
        "snippet": "        private final int[] pivot;",
        "begin_line": 240,
        "end_line": 240,
        "comment": " Pivot permutation associated with LU decomposition. "
    },
    {
        "class_name": "org.apache.commons.math.linear.Solver",
        "src_path": "src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java",
        "signature": "org.apache.commons.math.linear.Solver.singular",
        "snippet": "        private final boolean singular;",
        "begin_line": 243,
        "end_line": 243,
        "comment": " Singularity indicator. "
    },
    {
        "class_name": "org.apache.commons.math.linear.DefaultFieldMatrixPreservingVisitor",
        "src_path": "src/main/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java",
        "signature": "org.apache.commons.math.linear.DefaultFieldMatrixPreservingVisitor.zero",
        "snippet": "    private final T zero;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " Zero element of the field. "
    },
    {
        "class_name": "org.apache.commons.math.linear.RealVectorFormat",
        "src_path": "src/main/java/org/apache/commons/math/linear/RealVectorFormat.java",
        "signature": "org.apache.commons.math.linear.RealVectorFormat.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -708767813036157690L;",
        "begin_line": 48,
        "end_line": 48,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.linear.RealVectorFormat",
        "src_path": "src/main/java/org/apache/commons/math/linear/RealVectorFormat.java",
        "signature": "org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX",
        "snippet": "    private static final String DEFAULT_PREFIX = \"{\";",
        "begin_line": 51,
        "end_line": 51,
        "comment": " The default prefix: \"{\". "
    },
    {
        "class_name": "org.apache.commons.math.linear.RealVectorFormat",
        "src_path": "src/main/java/org/apache/commons/math/linear/RealVectorFormat.java",
        "signature": "org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX",
        "snippet": "    private static final String DEFAULT_SUFFIX = \"}\";",
        "begin_line": 54,
        "end_line": 54,
        "comment": " The default suffix: \"}\". "
    },
    {
        "class_name": "org.apache.commons.math.linear.RealVectorFormat",
        "src_path": "src/main/java/org/apache/commons/math/linear/RealVectorFormat.java",
        "signature": "org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR",
        "snippet": "    private static final String DEFAULT_SEPARATOR = \"; \";",
        "begin_line": 57,
        "end_line": 57,
        "comment": " The default separator: \", \". "
    },
    {
        "class_name": "org.apache.commons.math.linear.RealVectorFormat",
        "src_path": "src/main/java/org/apache/commons/math/linear/RealVectorFormat.java",
        "signature": "org.apache.commons.math.linear.RealVectorFormat.prefix",
        "snippet": "    private final String prefix;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " Prefix. "
    },
    {
        "class_name": "org.apache.commons.math.linear.RealVectorFormat",
        "src_path": "src/main/java/org/apache/commons/math/linear/RealVectorFormat.java",
        "signature": "org.apache.commons.math.linear.RealVectorFormat.suffix",
        "snippet": "    private final String suffix;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " Suffix. "
    },
    {
        "class_name": "org.apache.commons.math.linear.RealVectorFormat",
        "src_path": "src/main/java/org/apache/commons/math/linear/RealVectorFormat.java",
        "signature": "org.apache.commons.math.linear.RealVectorFormat.separator",
        "snippet": "    private final String separator;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " Separator. "
    },
    {
        "class_name": "org.apache.commons.math.linear.RealVectorFormat",
        "src_path": "src/main/java/org/apache/commons/math/linear/RealVectorFormat.java",
        "signature": "org.apache.commons.math.linear.RealVectorFormat.trimmedPrefix",
        "snippet": "    private final String trimmedPrefix;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " Trimmed prefix. "
    },
    {
        "class_name": "org.apache.commons.math.linear.RealVectorFormat",
        "src_path": "src/main/java/org/apache/commons/math/linear/RealVectorFormat.java",
        "signature": "org.apache.commons.math.linear.RealVectorFormat.trimmedSuffix",
        "snippet": "    private final String trimmedSuffix;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " Trimmed suffix. "
    },
    {
        "class_name": "org.apache.commons.math.linear.RealVectorFormat",
        "src_path": "src/main/java/org/apache/commons/math/linear/RealVectorFormat.java",
        "signature": "org.apache.commons.math.linear.RealVectorFormat.trimmedSeparator",
        "snippet": "    private final String trimmedSeparator;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " Trimmed separator. "
    },
    {
        "class_name": "org.apache.commons.math.linear.RealVectorFormat",
        "src_path": "src/main/java/org/apache/commons/math/linear/RealVectorFormat.java",
        "signature": "org.apache.commons.math.linear.RealVectorFormat.format",
        "snippet": "    private NumberFormat format;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " The format used for components. "
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImpl.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -1067294169172445528L;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImpl",
        "src_path": "src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImpl.data",
        "snippet": "    protected double data[][];",
        "begin_line": 60,
        "end_line": 60,
        "comment": " Entries of the matrix "
    },
    {
        "class_name": "org.apache.commons.math.stat.Frequency",
        "src_path": "src/main/java/org/apache/commons/math/stat/Frequency.java",
        "signature": "org.apache.commons.math.stat.Frequency.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3845586908418844111L;",
        "begin_line": 51,
        "end_line": 51,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.stat.Frequency",
        "src_path": "src/main/java/org/apache/commons/math/stat/Frequency.java",
        "signature": "org.apache.commons.math.stat.Frequency.freqTable",
        "snippet": "    private final TreeMap<Comparable<?>, Long> freqTable;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " underlying collection "
    },
    {
        "class_name": "org.apache.commons.math.stat.NaturalComparator",
        "src_path": "src/main/java/org/apache/commons/math/stat/Frequency.java",
        "signature": "org.apache.commons.math.stat.NaturalComparator.serialVersionUID",
        "snippet": "        private static final long serialVersionUID = -3852193713161395148L;",
        "begin_line": 545,
        "end_line": 545,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.stat.StatUtils",
        "src_path": "src/main/java/org/apache/commons/math/stat/StatUtils.java",
        "signature": "org.apache.commons.math.stat.StatUtils.SUM",
        "snippet": "    private static final UnivariateStatistic SUM = new Sum();",
        "begin_line": 41,
        "end_line": 41,
        "comment": " sum "
    },
    {
        "class_name": "org.apache.commons.math.stat.StatUtils",
        "src_path": "src/main/java/org/apache/commons/math/stat/StatUtils.java",
        "signature": "org.apache.commons.math.stat.StatUtils.SUM_OF_SQUARES",
        "snippet": "    private static final UnivariateStatistic SUM_OF_SQUARES = new SumOfSquares();",
        "begin_line": 44,
        "end_line": 44,
        "comment": " sumSq "
    },
    {
        "class_name": "org.apache.commons.math.stat.StatUtils",
        "src_path": "src/main/java/org/apache/commons/math/stat/StatUtils.java",
        "signature": "org.apache.commons.math.stat.StatUtils.PRODUCT",
        "snippet": "    private static final UnivariateStatistic PRODUCT = new Product();",
        "begin_line": 47,
        "end_line": 47,
        "comment": " prod "
    },
    {
        "class_name": "org.apache.commons.math.stat.StatUtils",
        "src_path": "src/main/java/org/apache/commons/math/stat/StatUtils.java",
        "signature": "org.apache.commons.math.stat.StatUtils.SUM_OF_LOGS",
        "snippet": "    private static final UnivariateStatistic SUM_OF_LOGS = new SumOfLogs();",
        "begin_line": 50,
        "end_line": 50,
        "comment": " sumLog "
    },
    {
        "class_name": "org.apache.commons.math.stat.StatUtils",
        "src_path": "src/main/java/org/apache/commons/math/stat/StatUtils.java",
        "signature": "org.apache.commons.math.stat.StatUtils.MIN",
        "snippet": "    private static final UnivariateStatistic MIN = new Min();",
        "begin_line": 53,
        "end_line": 53,
        "comment": " min "
    },
    {
        "class_name": "org.apache.commons.math.stat.StatUtils",
        "src_path": "src/main/java/org/apache/commons/math/stat/StatUtils.java",
        "signature": "org.apache.commons.math.stat.StatUtils.MAX",
        "snippet": "    private static final UnivariateStatistic MAX = new Max();",
        "begin_line": 56,
        "end_line": 56,
        "comment": " max "
    },
    {
        "class_name": "org.apache.commons.math.stat.StatUtils",
        "src_path": "src/main/java/org/apache/commons/math/stat/StatUtils.java",
        "signature": "org.apache.commons.math.stat.StatUtils.MEAN",
        "snippet": "    private static final UnivariateStatistic MEAN = new Mean();",
        "begin_line": 59,
        "end_line": 59,
        "comment": " mean "
    },
    {
        "class_name": "org.apache.commons.math.stat.StatUtils",
        "src_path": "src/main/java/org/apache/commons/math/stat/StatUtils.java",
        "signature": "org.apache.commons.math.stat.StatUtils.VARIANCE",
        "snippet": "    private static final Variance VARIANCE = new Variance();",
        "begin_line": 62,
        "end_line": 62,
        "comment": " variance "
    },
    {
        "class_name": "org.apache.commons.math.stat.StatUtils",
        "src_path": "src/main/java/org/apache/commons/math/stat/StatUtils.java",
        "signature": "org.apache.commons.math.stat.StatUtils.PERCENTILE",
        "snippet": "    private static final Percentile PERCENTILE = new Percentile();",
        "begin_line": 65,
        "end_line": 65,
        "comment": " percentile "
    },
    {
        "class_name": "org.apache.commons.math.stat.StatUtils",
        "src_path": "src/main/java/org/apache/commons/math/stat/StatUtils.java",
        "signature": "org.apache.commons.math.stat.StatUtils.GEOMETRIC_MEAN",
        "snippet": "    private static final GeometricMean GEOMETRIC_MEAN = new GeometricMean();",
        "begin_line": 68,
        "end_line": 68,
        "comment": " geometric mean "
    },
    {
        "class_name": "org.apache.commons.math.stat.inference.TestUtils",
        "src_path": "src/main/java/org/apache/commons/math/stat/inference/TestUtils.java",
        "signature": "org.apache.commons.math.stat.inference.TestUtils.tTest",
        "snippet": "    private static TTest tTest = new TTestImpl();",
        "begin_line": 33,
        "end_line": 33,
        "comment": " Singleton TTest instance using default implementation. "
    },
    {
        "class_name": "org.apache.commons.math.stat.inference.TestUtils",
        "src_path": "src/main/java/org/apache/commons/math/stat/inference/TestUtils.java",
        "signature": "org.apache.commons.math.stat.inference.TestUtils.chiSquareTest",
        "snippet": "    private static ChiSquareTest chiSquareTest =\n        new ChiSquareTestImpl();",
        "begin_line": 36,
        "end_line": 37,
        "comment": " Singleton ChiSquareTest instance using default implementation. "
    },
    {
        "class_name": "org.apache.commons.math.stat.inference.TestUtils",
        "src_path": "src/main/java/org/apache/commons/math/stat/inference/TestUtils.java",
        "signature": "org.apache.commons.math.stat.inference.TestUtils.unknownDistributionChiSquareTest",
        "snippet": "    private static UnknownDistributionChiSquareTest unknownDistributionChiSquareTest =\n        new ChiSquareTestImpl();",
        "begin_line": 40,
        "end_line": 41,
        "comment": " Singleton ChiSquareTest instance using default implementation. "
    },
    {
        "class_name": "org.apache.commons.math.stat.inference.TestUtils",
        "src_path": "src/main/java/org/apache/commons/math/stat/inference/TestUtils.java",
        "signature": "org.apache.commons.math.stat.inference.TestUtils.oneWayAnova",
        "snippet": "    private static OneWayAnova oneWayAnova =\n        new OneWayAnovaImpl();",
        "begin_line": 44,
        "end_line": 45,
        "comment": " Singleton OneWayAnova instance using default implementation. "
    },
    {
        "class_name": "org.apache.commons.math.stat.inference.ChiSquareTestImpl",
        "src_path": "src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java",
        "signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl.distribution",
        "snippet": "    private ChiSquaredDistribution distribution;",
        "begin_line": 33,
        "end_line": 33,
        "comment": " Distribution used to compute inference statistics. "
    },
    {
        "class_name": "org.apache.commons.math.stat.inference.TTestImpl",
        "src_path": "src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java",
        "signature": "org.apache.commons.math.stat.inference.TTestImpl.INSUFFICIENT_DATA_MESSAGE",
        "snippet": "    private static final String INSUFFICIENT_DATA_MESSAGE =\n        \"insufficient data for t statistic, needs at least 2, got {0}\";",
        "begin_line": 37,
        "end_line": 38,
        "comment": " Message for insufficient data. "
    },
    {
        "class_name": "org.apache.commons.math.stat.inference.TTestImpl",
        "src_path": "src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java",
        "signature": "org.apache.commons.math.stat.inference.TTestImpl.distribution",
        "snippet": "    private TDistribution distribution;",
        "begin_line": 41,
        "end_line": 41,
        "comment": " Distribution used to compute inference statistics. "
    },
    {
        "class_name": "org.apache.commons.math.stat.inference.AnovaStats",
        "src_path": "src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java",
        "signature": "org.apache.commons.math.stat.inference.AnovaStats.dfbg",
        "snippet": "        private int dfbg;",
        "begin_line": 188,
        "end_line": 188,
        "comment": " Degrees of freedom in numerator (between groups). "
    },
    {
        "class_name": "org.apache.commons.math.stat.inference.AnovaStats",
        "src_path": "src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java",
        "signature": "org.apache.commons.math.stat.inference.AnovaStats.dfwg",
        "snippet": "        private int dfwg;",
        "begin_line": 191,
        "end_line": 191,
        "comment": " Degrees of freedom in denominator (within groups). "
    },
    {
        "class_name": "org.apache.commons.math.stat.inference.AnovaStats",
        "src_path": "src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java",
        "signature": "org.apache.commons.math.stat.inference.AnovaStats.F",
        "snippet": "        private double F;",
        "begin_line": 194,
        "end_line": 194,
        "comment": " Statistic. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatistics.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 7099834153347155363L;",
        "begin_line": 38,
        "end_line": 38,
        "comment": " Serialization UID "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.SummaryStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.SummaryStatistics.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -2021321786743555871L;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " Serialization UID "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.SummaryStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.SummaryStatistics.n",
        "snippet": "    protected long n = 0;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " count of values that have been added "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.SummaryStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.SummaryStatistics.secondMoment",
        "snippet": "    protected SecondMoment secondMoment = new SecondMoment();",
        "begin_line": 66,
        "end_line": 66,
        "comment": " SecondMoment is used to compute the mean and variance "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.SummaryStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.SummaryStatistics.sum",
        "snippet": "    protected Sum sum = new Sum();",
        "begin_line": 69,
        "end_line": 69,
        "comment": " sum of values that have been added "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.SummaryStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.SummaryStatistics.sumsq",
        "snippet": "    protected SumOfSquares sumsq = new SumOfSquares();",
        "begin_line": 72,
        "end_line": 72,
        "comment": " sum of the square of each value that has been added "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.SummaryStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.SummaryStatistics.min",
        "snippet": "    protected Min min = new Min();",
        "begin_line": 75,
        "end_line": 75,
        "comment": " min of values that have been added "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.SummaryStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.SummaryStatistics.max",
        "snippet": "    protected Max max = new Max();",
        "begin_line": 78,
        "end_line": 78,
        "comment": " max of values that have been added "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.SummaryStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.SummaryStatistics.sumLog",
        "snippet": "    protected SumOfLogs sumLog = new SumOfLogs();",
        "begin_line": 81,
        "end_line": 81,
        "comment": " sumLog of values that have been added "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.SummaryStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.SummaryStatistics.geoMean",
        "snippet": "    protected GeometricMean geoMean = new GeometricMean(sumLog);",
        "begin_line": 84,
        "end_line": 84,
        "comment": " geoMean of values that have been added "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.SummaryStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.SummaryStatistics.mean",
        "snippet": "    protected Mean mean = new Mean();",
        "begin_line": 87,
        "end_line": 87,
        "comment": " mean of values that have been added "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.SummaryStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.SummaryStatistics.variance",
        "snippet": "    protected Variance variance = new Variance();",
        "begin_line": 90,
        "end_line": 90,
        "comment": " variance of values that have been added "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.SummaryStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.SummaryStatistics.sumImpl",
        "snippet": "    private StorelessUnivariateStatistic sumImpl = sum;",
        "begin_line": 93,
        "end_line": 93,
        "comment": " Sum statistic implementation - can be reset by setter. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.SummaryStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.SummaryStatistics.sumsqImpl",
        "snippet": "    private StorelessUnivariateStatistic sumsqImpl = sumsq;",
        "begin_line": 96,
        "end_line": 96,
        "comment": " Sum of squares statistic implementation - can be reset by setter. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.SummaryStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.SummaryStatistics.minImpl",
        "snippet": "    private StorelessUnivariateStatistic minImpl = min;",
        "begin_line": 99,
        "end_line": 99,
        "comment": " Minimum statistic implementation - can be reset by setter. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.SummaryStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.SummaryStatistics.maxImpl",
        "snippet": "    private StorelessUnivariateStatistic maxImpl = max;",
        "begin_line": 102,
        "end_line": 102,
        "comment": " Maximum statistic implementation - can be reset by setter. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.SummaryStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.SummaryStatistics.sumLogImpl",
        "snippet": "    private StorelessUnivariateStatistic sumLogImpl = sumLog;",
        "begin_line": 105,
        "end_line": 105,
        "comment": " Sum of log statistic implementation - can be reset by setter. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.SummaryStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.SummaryStatistics.geoMeanImpl",
        "snippet": "    private StorelessUnivariateStatistic geoMeanImpl = geoMean;",
        "begin_line": 108,
        "end_line": 108,
        "comment": " Geometric mean statistic implementation - can be reset by setter. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.SummaryStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.SummaryStatistics.meanImpl",
        "snippet": "    private StorelessUnivariateStatistic meanImpl = mean;",
        "begin_line": 111,
        "end_line": 111,
        "comment": " Mean statistic implementation - can be reset by setter. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.SummaryStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.SummaryStatistics.varianceImpl",
        "snippet": "    private StorelessUnivariateStatistic varianceImpl = variance;",
        "begin_line": 114,
        "end_line": 114,
        "comment": " Variance statistic implementation - can be reset by setter. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java",
        "signature": "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -5108854841843722536L;",
        "begin_line": 31,
        "end_line": 31,
        "comment": " Serialization id "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java",
        "signature": "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.mean",
        "snippet": "    private final double mean;",
        "begin_line": 34,
        "end_line": 34,
        "comment": " The sample mean "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java",
        "signature": "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.variance",
        "snippet": "    private final double variance;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " The sample variance "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java",
        "signature": "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.n",
        "snippet": "    private final long n;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " The number of observations in the sample "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java",
        "signature": "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.max",
        "snippet": "    private final double max;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " The maximum value "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java",
        "signature": "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.min",
        "snippet": "    private final double min;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " The minimum value "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java",
        "signature": "org.apache.commons.math.stat.descriptive.StatisticalSummaryValues.sum",
        "snippet": "    private final double sum;",
        "begin_line": 49,
        "end_line": 49,
        "comment": " The sum of the sample values "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatistics.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1909861009042253704L;",
        "begin_line": 35,
        "end_line": 35,
        "comment": " Serialization UID "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.AggregateSummaryStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.AggregateSummaryStatistics.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -8207112444016386906L;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.AggregateSummaryStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.AggregateSummaryStatistics.statisticsPrototype",
        "snippet": "    private final SummaryStatistics statisticsPrototype;",
        "begin_line": 63,
        "end_line": 63,
        "comment": "\n     * A SummaryStatistics serving as a prototype for creating SummaryStatistics\n     * contributing to this aggregate\n     "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.AggregateSummaryStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.AggregateSummaryStatistics.statistics",
        "snippet": "    private final SummaryStatistics statistics;",
        "begin_line": 68,
        "end_line": 68,
        "comment": "\n     * The SummaryStatistics in which aggregate statistics are accumulated.\n     "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.AggregatingSummaryStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.AggregatingSummaryStatistics.serialVersionUID",
        "snippet": "        private static final long serialVersionUID = 1L;",
        "begin_line": 354,
        "end_line": 354,
        "comment": "\n         * The serialization version of this class\n         "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.AggregatingSummaryStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.AggregatingSummaryStatistics.aggregateStatistics",
        "snippet": "        private final SummaryStatistics aggregateStatistics;",
        "begin_line": 360,
        "end_line": 360,
        "comment": "\n         * An additional SummaryStatistics into which values added to these\n         * statistics (and possibly others) are aggregated\n         "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 2271900808994826718L;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " Serialization UID "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics.k",
        "snippet": "    private int k;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " Dimension of the data. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics.n",
        "snippet": "    private long n = 0;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " Count of values that have been added "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics.sumImpl",
        "snippet": "    private StorelessUnivariateStatistic[] sumImpl;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " Sum statistic implementation - can be reset by setter. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics.sumSqImpl",
        "snippet": "    private StorelessUnivariateStatistic[] sumSqImpl;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " Sum of squares statistic implementation - can be reset by setter. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics.minImpl",
        "snippet": "    private StorelessUnivariateStatistic[] minImpl;",
        "begin_line": 87,
        "end_line": 87,
        "comment": " Minimum statistic implementation - can be reset by setter. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics.maxImpl",
        "snippet": "    private StorelessUnivariateStatistic[] maxImpl;",
        "begin_line": 90,
        "end_line": 90,
        "comment": " Maximum statistic implementation - can be reset by setter. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics.sumLogImpl",
        "snippet": "    private StorelessUnivariateStatistic[] sumLogImpl;",
        "begin_line": 93,
        "end_line": 93,
        "comment": " Sum of log statistic implementation - can be reset by setter. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics.geoMeanImpl",
        "snippet": "    private StorelessUnivariateStatistic[] geoMeanImpl;",
        "begin_line": 96,
        "end_line": 96,
        "comment": " Geometric mean statistic implementation - can be reset by setter. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics.meanImpl",
        "snippet": "    private StorelessUnivariateStatistic[] meanImpl;",
        "begin_line": 99,
        "end_line": 99,
        "comment": " Mean statistic implementation - can be reset by setter. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics.covarianceImpl",
        "snippet": "    private VectorialCovariance covarianceImpl;",
        "begin_line": 102,
        "end_line": 102,
        "comment": " Covariance statistic implementation - cannot be reset. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 35,
        "end_line": 35,
        "comment": " Serialization UID "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.INFINITE_WINDOW",
        "snippet": "    public static final int INFINITE_WINDOW = -1;",
        "begin_line": 63,
        "end_line": 63,
        "comment": "\n     * Represents an infinite window size.  When the {@link #getWindowSize()}\n     * returns this value, there is no limit to the number of data values\n     * that can be stored in the dataset.\n     "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 4133067267405273064L;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " Serialization UID "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.SET_QUANTILE_METHOD_NAME",
        "snippet": "    private static final String SET_QUANTILE_METHOD_NAME = \"setQuantile\";",
        "begin_line": 69,
        "end_line": 69,
        "comment": " Name of the setQuantile method. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.UNSUPPORTED_METHOD_MESSAGE",
        "snippet": "    private static final String UNSUPPORTED_METHOD_MESSAGE =\n        \"percentile implementation {0} does not support {1}\";",
        "begin_line": 72,
        "end_line": 73,
        "comment": " Message for unsupported setQuantile. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.ILLEGAL_ACCESS_MESSAGE",
        "snippet": "    private static final String ILLEGAL_ACCESS_MESSAGE =\n        \"cannot access {0} method in percentile implementation {1}\";",
        "begin_line": 76,
        "end_line": 77,
        "comment": " Message for illegal accesson setquantile. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.windowSize",
        "snippet": "    protected int windowSize = INFINITE_WINDOW;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " hold the window size *"
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.eDA",
        "snippet": "    protected ResizableDoubleArray eDA = new ResizableDoubleArray();",
        "begin_line": 85,
        "end_line": 85,
        "comment": "\n     *  Stored data values\n     "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.meanImpl",
        "snippet": "    private UnivariateStatistic meanImpl = new Mean();",
        "begin_line": 88,
        "end_line": 88,
        "comment": " Mean statistic implementation - can be reset by setter. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.geometricMeanImpl",
        "snippet": "    private UnivariateStatistic geometricMeanImpl = new GeometricMean();",
        "begin_line": 91,
        "end_line": 91,
        "comment": " Geometric mean statistic implementation - can be reset by setter. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.kurtosisImpl",
        "snippet": "    private UnivariateStatistic kurtosisImpl = new Kurtosis();",
        "begin_line": 94,
        "end_line": 94,
        "comment": " Kurtosis statistic implementation - can be reset by setter. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.maxImpl",
        "snippet": "    private UnivariateStatistic maxImpl = new Max();",
        "begin_line": 97,
        "end_line": 97,
        "comment": " Maximum statistic implementation - can be reset by setter. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.minImpl",
        "snippet": "    private UnivariateStatistic minImpl = new Min();",
        "begin_line": 100,
        "end_line": 100,
        "comment": " Minimum statistic implementation - can be reset by setter. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.percentileImpl",
        "snippet": "    private UnivariateStatistic percentileImpl = new Percentile();",
        "begin_line": 103,
        "end_line": 103,
        "comment": " Percentile statistic implementation - can be reset by setter. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.skewnessImpl",
        "snippet": "    private UnivariateStatistic skewnessImpl = new Skewness();",
        "begin_line": 106,
        "end_line": 106,
        "comment": " Skewness statistic implementation - can be reset by setter. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.varianceImpl",
        "snippet": "    private UnivariateStatistic varianceImpl = new Variance();",
        "begin_line": 109,
        "end_line": 109,
        "comment": " Variance statistic implementation - can be reset by setter. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.sumsqImpl",
        "snippet": "    private UnivariateStatistic sumsqImpl = new SumOfSquares();",
        "begin_line": 112,
        "end_line": 112,
        "comment": " Sum of squares statistic implementation - can be reset by setter. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java",
        "signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics.sumImpl",
        "snippet": "    private UnivariateStatistic sumImpl = new Sum();",
        "begin_line": 115,
        "end_line": 115,
        "comment": " Sum statistic implementation - can be reset by setter. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 4118372414238930270L;",
        "begin_line": 34,
        "end_line": 34,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.sums",
        "snippet": "    private final double[] sums;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " Sums for each component. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.productsSums",
        "snippet": "    private final double[] productsSums;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Sums of products for each component. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.isBiasCorrected",
        "snippet": "    private final boolean isBiasCorrected;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " Indicator for bias correction. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.VectorialCovariance.n",
        "snippet": "    private long n;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Number of vectors in the sample. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.VectorialMean",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.VectorialMean.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 8223009086481006892L;",
        "begin_line": 32,
        "end_line": 32,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.VectorialMean",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.VectorialMean.means",
        "snippet": "    private final Mean[] means;",
        "begin_line": 35,
        "end_line": 35,
        "comment": " Means for each component. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.Mean",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.Mean.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -1296043746617791564L;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.Mean",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.Mean.moment",
        "snippet": "    protected FirstMoment moment;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " First moment on which this statistic is based. "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.Mean",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.Mean.incMoment",
        "snippet": "    protected boolean incMoment;",
        "begin_line": 74,
        "end_line": 74,
        "comment": "\n     * Determines whether or not this statistic can be incremented or cleared.\n     * <p>\n     * Statistics based on (constructed from) external moments cannot\n     * be incremented or cleared.</p>\n     "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.FourthMoment",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.FourthMoment.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 4763990447117157611L;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.FourthMoment",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.FourthMoment.m4",
        "snippet": "    protected double m4;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " fourth moment of values that have been added "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.StandardDeviation",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 5728716329662425188L;",
        "begin_line": 44,
        "end_line": 44,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.StandardDeviation",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.StandardDeviation.variance",
        "snippet": "    private Variance variance = null;",
        "begin_line": 47,
        "end_line": 47,
        "comment": " Wrapped Variance instance "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.Skewness",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.Skewness.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 7101857578996691352L;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.Skewness",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.Skewness.moment",
        "snippet": "    protected ThirdMoment moment = null;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Third moment on which this statistic is based "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.Skewness",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.Skewness.incMoment",
        "snippet": "    protected boolean incMoment;",
        "begin_line": 54,
        "end_line": 54,
        "comment": "\n     * Determines whether or not this statistic can be incremented or cleared.\n     * <p>\n     * Statistics based on (constructed from) external moments cannot\n     * be incremented or cleared.</p>\n    "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.Kurtosis",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.Kurtosis.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 2784465764798260919L;",
        "begin_line": 48,
        "end_line": 48,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.Kurtosis",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.Kurtosis.moment",
        "snippet": "    protected FourthMoment moment;",
        "begin_line": 51,
        "end_line": 51,
        "comment": "Fourth Moment on which this statistic is based "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.Kurtosis",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.Kurtosis.incMoment",
        "snippet": "    protected boolean incMoment;",
        "begin_line": 59,
        "end_line": 59,
        "comment": "\n     * Determines whether or not this statistic can be incremented or cleared.\n     * <p>\n     * Statistics based on (constructed from) external moments cannot\n     * be incremented or cleared.</p>\n    "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.ThirdMoment",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -7818711964045118679L;",
        "begin_line": 50,
        "end_line": 50,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.ThirdMoment",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.m3",
        "snippet": "    protected double m3;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " third moment of values that have been added "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.ThirdMoment",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.ThirdMoment.nDevSq",
        "snippet": "    protected double nDevSq;",
        "begin_line": 60,
        "end_line": 60,
        "comment": "\n     * Square of deviation of most recently added value from previous first\n     * moment, normalized by previous sample size.  Retained to prevent\n     * repeated computation in higher order moments.  nDevSq = nDev * nDev.\n     "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.SecondMoment",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.SecondMoment.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 3942403127395076445L;",
        "begin_line": 48,
        "end_line": 48,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.SecondMoment",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.SecondMoment.m2",
        "snippet": "    protected double m2;",
        "begin_line": 51,
        "end_line": 51,
        "comment": " second moment of values that have been added "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.SemiVariance",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.SemiVariance.UPSIDE_VARIANCE",
        "snippet": "    public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;",
        "begin_line": 59,
        "end_line": 59,
        "comment": "\n     * The UPSIDE Direction is used to specify that the observations above the\n     * cutoff point will be used to calculate SemiVariance.\n     "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.SemiVariance",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.SemiVariance.DOWNSIDE_VARIANCE",
        "snippet": "    public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;",
        "begin_line": 65,
        "end_line": 65,
        "comment": "\n     * The DOWNSIDE Direction is used to specify that the observations below\n     * the cutoff point will be used to calculate SemiVariance\n     "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.SemiVariance",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.SemiVariance.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -2653430366886024994L;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.SemiVariance",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.SemiVariance.biasCorrected",
        "snippet": "    private boolean biasCorrected = true;",
        "begin_line": 74,
        "end_line": 74,
        "comment": "\n     * Determines whether or not bias correction is applied when computing the\n     * value of the statisic.  True means that bias is corrected.\n     "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.SemiVariance",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.SemiVariance.varianceDirection",
        "snippet": "    private Direction varianceDirection = Direction.DOWNSIDE;",
        "begin_line": 79,
        "end_line": 79,
        "comment": "\n     * Determines whether to calculate downside or upside SemiVariance.\n     "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.SemiVariance",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.SemiVariance.direction",
        "snippet": "        private boolean direction;",
        "begin_line": 357,
        "end_line": 357,
        "comment": "\n         *   boolean value  UPSIDE <-> true\n         "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.Variance",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.Variance.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -9111962718267217978L;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.Variance",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.Variance.moment",
        "snippet": "    protected SecondMoment moment = null;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " SecondMoment is used in incremental calculation of Variance"
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.Variance",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.Variance.incMoment",
        "snippet": "    protected boolean incMoment = true;",
        "begin_line": 80,
        "end_line": 80,
        "comment": "\n     * Boolean test to determine if this Variance should also increment\n     * the second moment, this evaluates to false when this Variance is\n     * constructed with an external SecondMoment as a parameter.\n     "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.Variance",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.Variance.isBiasCorrected",
        "snippet": "    private boolean isBiasCorrected = true;",
        "begin_line": 87,
        "end_line": 87,
        "comment": "\n     * Determines whether or not bias correction is applied when computing the\n     * value of the statisic.  True means that bias is corrected.  See\n     * {@link Variance} for details on the formula.\n     "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.GeometricMean",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.GeometricMean.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -8178734905303459453L;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.GeometricMean",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.GeometricMean.sumOfLogs",
        "snippet": "    private StorelessUnivariateStatistic sumOfLogs;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " Wrapped SumOfLogs instance "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.FirstMoment",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.FirstMoment.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 6112755307178490473L;",
        "begin_line": 51,
        "end_line": 51,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.FirstMoment",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.FirstMoment.n",
        "snippet": "    protected long n;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " Count of values that have been added "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.FirstMoment",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.FirstMoment.m1",
        "snippet": "    protected double m1;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " First moment of values that have been added "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.FirstMoment",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.FirstMoment.dev",
        "snippet": "    protected double dev;",
        "begin_line": 64,
        "end_line": 64,
        "comment": "\n     * Deviation of most recently added value from previous first moment.\n     * Retained to prevent repeated computation in higher order moments.\n     "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.moment.FirstMoment",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java",
        "signature": "org.apache.commons.math.stat.descriptive.moment.FirstMoment.nDev",
        "snippet": "    protected double nDev;",
        "begin_line": 71,
        "end_line": 71,
        "comment": "\n     * Deviation of most recently added value from previous first moment,\n     * normalized by previous sample size.  Retained to prevent repeated\n     * computation in higher order moments\n     "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.rank.Max",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java",
        "signature": "org.apache.commons.math.stat.descriptive.rank.Max.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -5593383832225844641L;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.rank.Max",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java",
        "signature": "org.apache.commons.math.stat.descriptive.rank.Max.n",
        "snippet": "    private long n;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Number of values that have been added "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.rank.Max",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java",
        "signature": "org.apache.commons.math.stat.descriptive.rank.Max.value",
        "snippet": "    private double value;",
        "begin_line": 49,
        "end_line": 49,
        "comment": " Current value of the statistic "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.rank.Median",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/rank/Median.java",
        "signature": "org.apache.commons.math.stat.descriptive.rank.Median.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3961477041290915687L;",
        "begin_line": 36,
        "end_line": 36,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.rank.Percentile",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java",
        "signature": "org.apache.commons.math.stat.descriptive.rank.Percentile.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -8091216485095130416L;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.rank.Percentile",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java",
        "signature": "org.apache.commons.math.stat.descriptive.rank.Percentile.quantile",
        "snippet": "    private double quantile = 0.0;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " Determines what percentile is computed when evaluate() is activated\n     * with no quantile argument "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.rank.Min",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java",
        "signature": "org.apache.commons.math.stat.descriptive.rank.Min.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -2941995784909003131L;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.rank.Min",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java",
        "signature": "org.apache.commons.math.stat.descriptive.rank.Min.n",
        "snippet": "    private long n;",
        "begin_line": 46,
        "end_line": 46,
        "comment": "Number of values that have been added "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.rank.Min",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java",
        "signature": "org.apache.commons.math.stat.descriptive.rank.Min.value",
        "snippet": "    private double value;",
        "begin_line": 49,
        "end_line": 49,
        "comment": "Current value of the statistic "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.summary.Sum",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java",
        "signature": "org.apache.commons.math.stat.descriptive.summary.Sum.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -8231831954703408316L;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.summary.Sum",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java",
        "signature": "org.apache.commons.math.stat.descriptive.summary.Sum.n",
        "snippet": "    private long n;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.summary.Sum",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java",
        "signature": "org.apache.commons.math.stat.descriptive.summary.Sum.value",
        "snippet": "    private double value;",
        "begin_line": 48,
        "end_line": 48,
        "comment": "\n     * The currently running sum.\n     "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.summary.SumOfLogs",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java",
        "signature": "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -370076995648386763L;",
        "begin_line": 47,
        "end_line": 47,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.summary.SumOfLogs",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java",
        "signature": "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.n",
        "snippet": "    private int n;",
        "begin_line": 50,
        "end_line": 50,
        "comment": "Number of values that have been added "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.summary.SumOfLogs",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java",
        "signature": "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.value",
        "snippet": "    private double value;",
        "begin_line": 55,
        "end_line": 55,
        "comment": "\n     * The currently running value\n     "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.summary.Product",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java",
        "signature": "org.apache.commons.math.stat.descriptive.summary.Product.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 2824226005990582538L;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.summary.Product",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java",
        "signature": "org.apache.commons.math.stat.descriptive.summary.Product.n",
        "snippet": "    private long n;",
        "begin_line": 43,
        "end_line": 43,
        "comment": "The number of values that have been added "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.summary.Product",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java",
        "signature": "org.apache.commons.math.stat.descriptive.summary.Product.value",
        "snippet": "    private double value;",
        "begin_line": 48,
        "end_line": 48,
        "comment": "\n     * The current Running Product.\n     "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.summary.SumOfSquares",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java",
        "signature": "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1460986908574398008L;",
        "begin_line": 39,
        "end_line": 39,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.summary.SumOfSquares",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java",
        "signature": "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.n",
        "snippet": "    private long n;",
        "begin_line": 42,
        "end_line": 42,
        "comment": " "
    },
    {
        "class_name": "org.apache.commons.math.stat.descriptive.summary.SumOfSquares",
        "src_path": "src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java",
        "signature": "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.value",
        "snippet": "    private double value;",
        "begin_line": 47,
        "end_line": 47,
        "comment": "\n     * The currently running sumSq\n     "
    },
    {
        "class_name": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer",
        "src_path": "src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java",
        "signature": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer.random",
        "snippet": "    private final Random random;",
        "begin_line": 35,
        "end_line": 35,
        "comment": " Random generator for choosing initial centers. "
    },
    {
        "class_name": "org.apache.commons.math.stat.clustering.Cluster",
        "src_path": "src/main/java/org/apache/commons/math/stat/clustering/Cluster.java",
        "signature": "org.apache.commons.math.stat.clustering.Cluster.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3442297081515880464L;",
        "begin_line": 33,
        "end_line": 33,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.stat.clustering.Cluster",
        "src_path": "src/main/java/org/apache/commons/math/stat/clustering/Cluster.java",
        "signature": "org.apache.commons.math.stat.clustering.Cluster.points",
        "snippet": "    private final List<T> points;",
        "begin_line": 36,
        "end_line": 36,
        "comment": " The points contained in this cluster. "
    },
    {
        "class_name": "org.apache.commons.math.stat.clustering.Cluster",
        "src_path": "src/main/java/org/apache/commons/math/stat/clustering/Cluster.java",
        "signature": "org.apache.commons.math.stat.clustering.Cluster.center",
        "snippet": "    private final T center;",
        "begin_line": 39,
        "end_line": 39,
        "comment": " Center of the cluster. "
    },
    {
        "class_name": "org.apache.commons.math.stat.clustering.EuclideanIntegerPoint",
        "src_path": "src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java",
        "signature": "org.apache.commons.math.stat.clustering.EuclideanIntegerPoint.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 3946024775784901369L;",
        "begin_line": 33,
        "end_line": 33,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.stat.clustering.EuclideanIntegerPoint",
        "src_path": "src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java",
        "signature": "org.apache.commons.math.stat.clustering.EuclideanIntegerPoint.point",
        "snippet": "    private final int[] point;",
        "begin_line": 36,
        "end_line": 36,
        "comment": " Point coordinates. "
    },
    {
        "class_name": "org.apache.commons.math.stat.correlation.Covariance",
        "src_path": "src/main/java/org/apache/commons/math/stat/correlation/Covariance.java",
        "signature": "org.apache.commons.math.stat.correlation.Covariance.covarianceMatrix",
        "snippet": "    private final RealMatrix covarianceMatrix;",
        "begin_line": 48,
        "end_line": 48,
        "comment": " covariance matrix "
    },
    {
        "class_name": "org.apache.commons.math.stat.correlation.Covariance",
        "src_path": "src/main/java/org/apache/commons/math/stat/correlation/Covariance.java",
        "signature": "org.apache.commons.math.stat.correlation.Covariance.n",
        "snippet": "    private final int n;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " Number of observations (length of covariate vectors) "
    },
    {
        "class_name": "org.apache.commons.math.stat.correlation.SpearmansCorrelation",
        "src_path": "src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java",
        "signature": "org.apache.commons.math.stat.correlation.SpearmansCorrelation.data",
        "snippet": "    private final RealMatrix data;",
        "begin_line": 42,
        "end_line": 42,
        "comment": " Input data "
    },
    {
        "class_name": "org.apache.commons.math.stat.correlation.SpearmansCorrelation",
        "src_path": "src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java",
        "signature": "org.apache.commons.math.stat.correlation.SpearmansCorrelation.rankingAlgorithm",
        "snippet": "    private final RankingAlgorithm rankingAlgorithm;",
        "begin_line": 45,
        "end_line": 45,
        "comment": " Ranking algorithm  "
    },
    {
        "class_name": "org.apache.commons.math.stat.correlation.SpearmansCorrelation",
        "src_path": "src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java",
        "signature": "org.apache.commons.math.stat.correlation.SpearmansCorrelation.rankCorrelation",
        "snippet": "    private final PearsonsCorrelation rankCorrelation;",
        "begin_line": 48,
        "end_line": 48,
        "comment": " Rank correlation "
    },
    {
        "class_name": "org.apache.commons.math.stat.correlation.PearsonsCorrelation",
        "src_path": "src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java",
        "signature": "org.apache.commons.math.stat.correlation.PearsonsCorrelation.correlationMatrix",
        "snippet": "    private final RealMatrix correlationMatrix;",
        "begin_line": 45,
        "end_line": 45,
        "comment": " correlation matrix "
    },
    {
        "class_name": "org.apache.commons.math.stat.correlation.PearsonsCorrelation",
        "src_path": "src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java",
        "signature": "org.apache.commons.math.stat.correlation.PearsonsCorrelation.nObs",
        "snippet": "    private final int nObs;",
        "begin_line": 48,
        "end_line": 48,
        "comment": " number of observations "
    },
    {
        "class_name": "org.apache.commons.math.stat.regression.AbstractMultipleLinearRegression",
        "src_path": "src/main/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java",
        "signature": "org.apache.commons.math.stat.regression.AbstractMultipleLinearRegression.X",
        "snippet": "    protected RealMatrix X;",
        "begin_line": 34,
        "end_line": 34,
        "comment": " X sample data. "
    },
    {
        "class_name": "org.apache.commons.math.stat.regression.AbstractMultipleLinearRegression",
        "src_path": "src/main/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java",
        "signature": "org.apache.commons.math.stat.regression.AbstractMultipleLinearRegression.Y",
        "snippet": "    protected RealVector Y;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " Y sample data. "
    },
    {
        "class_name": "org.apache.commons.math.stat.regression.SimpleRegression",
        "src_path": "src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java",
        "signature": "org.apache.commons.math.stat.regression.SimpleRegression.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3004689053607543335L;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.stat.regression.SimpleRegression",
        "src_path": "src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java",
        "signature": "org.apache.commons.math.stat.regression.SimpleRegression.distribution",
        "snippet": "    private TDistribution distribution;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " the distribution used to compute inference statistics. "
    },
    {
        "class_name": "org.apache.commons.math.stat.regression.SimpleRegression",
        "src_path": "src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java",
        "signature": "org.apache.commons.math.stat.regression.SimpleRegression.sumX",
        "snippet": "    private double sumX = 0d;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " sum of x values "
    },
    {
        "class_name": "org.apache.commons.math.stat.regression.SimpleRegression",
        "src_path": "src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java",
        "signature": "org.apache.commons.math.stat.regression.SimpleRegression.sumXX",
        "snippet": "    private double sumXX = 0d;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " total variation in x (sum of squared deviations from xbar) "
    },
    {
        "class_name": "org.apache.commons.math.stat.regression.SimpleRegression",
        "src_path": "src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java",
        "signature": "org.apache.commons.math.stat.regression.SimpleRegression.sumY",
        "snippet": "    private double sumY = 0d;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " sum of y values "
    },
    {
        "class_name": "org.apache.commons.math.stat.regression.SimpleRegression",
        "src_path": "src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java",
        "signature": "org.apache.commons.math.stat.regression.SimpleRegression.sumYY",
        "snippet": "    private double sumYY = 0d;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " total variation in y (sum of squared deviations from ybar) "
    },
    {
        "class_name": "org.apache.commons.math.stat.regression.SimpleRegression",
        "src_path": "src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java",
        "signature": "org.apache.commons.math.stat.regression.SimpleRegression.sumXY",
        "snippet": "    private double sumXY = 0d;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " sum of products "
    },
    {
        "class_name": "org.apache.commons.math.stat.regression.SimpleRegression",
        "src_path": "src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java",
        "signature": "org.apache.commons.math.stat.regression.SimpleRegression.n",
        "snippet": "    private long n = 0;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " number of observations "
    },
    {
        "class_name": "org.apache.commons.math.stat.regression.SimpleRegression",
        "src_path": "src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java",
        "signature": "org.apache.commons.math.stat.regression.SimpleRegression.xbar",
        "snippet": "    private double xbar = 0;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " mean of accumulated x values, used in updating formulas "
    },
    {
        "class_name": "org.apache.commons.math.stat.regression.SimpleRegression",
        "src_path": "src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java",
        "signature": "org.apache.commons.math.stat.regression.SimpleRegression.ybar",
        "snippet": "    private double ybar = 0;",
        "begin_line": 86,
        "end_line": 86,
        "comment": " mean of accumulated y values, used in updating formulas "
    },
    {
        "class_name": "org.apache.commons.math.stat.regression.GLSMultipleLinearRegression",
        "src_path": "src/main/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java",
        "signature": "org.apache.commons.math.stat.regression.GLSMultipleLinearRegression.Omega",
        "snippet": "    private RealMatrix Omega;",
        "begin_line": 47,
        "end_line": 47,
        "comment": " Covariance matrix. "
    },
    {
        "class_name": "org.apache.commons.math.stat.regression.GLSMultipleLinearRegression",
        "src_path": "src/main/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java",
        "signature": "org.apache.commons.math.stat.regression.GLSMultipleLinearRegression.OmegaInverse",
        "snippet": "    private RealMatrix OmegaInverse;",
        "begin_line": 50,
        "end_line": 50,
        "comment": " Inverse of covariance matrix. "
    },
    {
        "class_name": "org.apache.commons.math.stat.regression.OLSMultipleLinearRegression",
        "src_path": "src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java",
        "signature": "org.apache.commons.math.stat.regression.OLSMultipleLinearRegression.qr",
        "snippet": "    private QRDecomposition qr = null;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " Cached QR decomposition of X matrix "
    },
    {
        "class_name": "org.apache.commons.math.stat.ranking.NaturalRanking",
        "src_path": "src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java",
        "signature": "org.apache.commons.math.stat.ranking.NaturalRanking.DEFAULT_NAN_STRATEGY",
        "snippet": "    public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.MAXIMAL;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " default NaN strategy "
    },
    {
        "class_name": "org.apache.commons.math.stat.ranking.NaturalRanking",
        "src_path": "src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java",
        "signature": "org.apache.commons.math.stat.ranking.NaturalRanking.DEFAULT_TIES_STRATEGY",
        "snippet": "    public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " default ties strategy "
    },
    {
        "class_name": "org.apache.commons.math.stat.ranking.NaturalRanking",
        "src_path": "src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java",
        "signature": "org.apache.commons.math.stat.ranking.NaturalRanking.nanStrategy",
        "snippet": "    private final NaNStrategy nanStrategy;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " NaN strategy - defaults to NaNs maximal "
    },
    {
        "class_name": "org.apache.commons.math.stat.ranking.NaturalRanking",
        "src_path": "src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java",
        "signature": "org.apache.commons.math.stat.ranking.NaturalRanking.tiesStrategy",
        "snippet": "    private final TiesStrategy tiesStrategy;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " Ties strategy - defaults to ties averaged "
    },
    {
        "class_name": "org.apache.commons.math.stat.ranking.NaturalRanking",
        "src_path": "src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java",
        "signature": "org.apache.commons.math.stat.ranking.NaturalRanking.randomData",
        "snippet": "    private final RandomData randomData;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " Source of random data - used only when ties strategy is RANDOM "
    },
    {
        "class_name": "org.apache.commons.math.stat.ranking.IntDoublePair",
        "src_path": "src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java",
        "signature": "org.apache.commons.math.stat.ranking.IntDoublePair.value",
        "snippet": "        private final double value;",
        "begin_line": 421,
        "end_line": 421,
        "comment": " Value of the pair "
    },
    {
        "class_name": "org.apache.commons.math.stat.ranking.IntDoublePair",
        "src_path": "src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java",
        "signature": "org.apache.commons.math.stat.ranking.IntDoublePair.position",
        "snippet": "        private final int position;",
        "begin_line": 424,
        "end_line": 424,
        "comment": " Original position of the pair "
    },
    {
        "class_name": "org.apache.commons.math.analysis.ComposableFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/ComposableFunction.java",
        "signature": "org.apache.commons.math.analysis.ComposableFunction.ZERO",
        "snippet": "    public static final ComposableFunction ZERO = new ComposableFunction() {\n        /** {@inheritDoc} */\n        @Override\n        public double value(double d) {\n            return 0;\n        }\n    };",
        "begin_line": 32,
        "end_line": 38,
        "comment": " The constant function always returning 0. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.ComposableFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/ComposableFunction.java",
        "signature": "org.apache.commons.math.analysis.ComposableFunction.ONE",
        "snippet": "    public static final ComposableFunction ONE = new ComposableFunction() {\n        /** {@inheritDoc} */\n        @Override\n        public double value(double d) {\n            return 1;\n        }\n    };",
        "begin_line": 41,
        "end_line": 47,
        "comment": " The constant function always returning 1. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.ComposableFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/ComposableFunction.java",
        "signature": "org.apache.commons.math.analysis.ComposableFunction.IDENTITY",
        "snippet": "    public static final ComposableFunction IDENTITY = new ComposableFunction() {\n        /** {@inheritDoc} */\n        @Override\n        public double value(double d) {\n            return d;\n        }\n    };",
        "begin_line": 50,
        "end_line": 56,
        "comment": " The identity function. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.ComposableFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/ComposableFunction.java",
        "signature": "org.apache.commons.math.analysis.ComposableFunction.ABS",
        "snippet": "    public static final ComposableFunction ABS = new ComposableFunction() {\n        /** {@inheritDoc} */\n        @Override\n        public double value(double d) {\n            return Math.abs(d);\n        }\n    };",
        "begin_line": 59,
        "end_line": 65,
        "comment": " The {@code Math.abs} method wrapped as a {@link ComposableFunction}. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.ComposableFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/ComposableFunction.java",
        "signature": "org.apache.commons.math.analysis.ComposableFunction.NEGATE",
        "snippet": "    public static final ComposableFunction NEGATE = new ComposableFunction() {\n        /** {@inheritDoc} */\n        @Override\n        public double value(double d) {\n            return -d;\n        }\n    };",
        "begin_line": 68,
        "end_line": 74,
        "comment": " The - operator wrapped as a {@link ComposableFunction}. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.ComposableFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/ComposableFunction.java",
        "signature": "org.apache.commons.math.analysis.ComposableFunction.INVERT",
        "snippet": "    public static final ComposableFunction INVERT = new ComposableFunction () {\n        /** {@inheritDoc} */\n        @Override\n        public double value(double d){\n            return 1/d;\n        }\n    };",
        "begin_line": 77,
        "end_line": 83,
        "comment": " The invert operator wrapped as a {@link ComposableFunction}. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.ComposableFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/ComposableFunction.java",
        "signature": "org.apache.commons.math.analysis.ComposableFunction.SIN",
        "snippet": "    public static final ComposableFunction SIN = new ComposableFunction() {\n        /** {@inheritDoc} */\n        @Override\n        public double value(double d) {\n            return Math.sin(d);\n        }\n    };",
        "begin_line": 86,
        "end_line": 92,
        "comment": " The {@code Math.sin} method wrapped as a {@link ComposableFunction}. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.ComposableFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/ComposableFunction.java",
        "signature": "org.apache.commons.math.analysis.ComposableFunction.SQRT",
        "snippet": "    public static final ComposableFunction SQRT = new ComposableFunction() {\n        /** {@inheritDoc} */\n        @Override\n        public double value(double d) {\n            return Math.sqrt(d);\n        }\n    };",
        "begin_line": 95,
        "end_line": 101,
        "comment": " The {@code Math.sqrt} method wrapped as a {@link ComposableFunction}. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.ComposableFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/ComposableFunction.java",
        "signature": "org.apache.commons.math.analysis.ComposableFunction.SINH",
        "snippet": "    public static final ComposableFunction SINH = new ComposableFunction() {\n        /** {@inheritDoc} */\n        @Override\n        public double value(double d) {\n            return Math.sinh(d);\n        }\n    };",
        "begin_line": 104,
        "end_line": 110,
        "comment": " The {@code Math.sinh} method wrapped as a {@link ComposableFunction}. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.ComposableFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/ComposableFunction.java",
        "signature": "org.apache.commons.math.analysis.ComposableFunction.EXP",
        "snippet": "    public static final ComposableFunction EXP = new ComposableFunction() {\n        /** {@inheritDoc} */\n        @Override\n        public double value(double d) {\n            return Math.exp(d);\n        }\n    };",
        "begin_line": 113,
        "end_line": 119,
        "comment": " The {@code Math.exp} method wrapped as a {@link ComposableFunction}. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.ComposableFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/ComposableFunction.java",
        "signature": "org.apache.commons.math.analysis.ComposableFunction.EXPM1",
        "snippet": "    public static final ComposableFunction EXPM1 = new ComposableFunction() {\n        /** {@inheritDoc} */\n        @Override\n        public double value(double d) {\n            return Math.expm1(d);\n        }\n    };",
        "begin_line": 122,
        "end_line": 128,
        "comment": " The {@code Math.expm1} method wrapped as a {@link ComposableFunction}. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.ComposableFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/ComposableFunction.java",
        "signature": "org.apache.commons.math.analysis.ComposableFunction.ASIN",
        "snippet": "    public static final ComposableFunction ASIN = new ComposableFunction() {\n        /** {@inheritDoc} */\n        @Override\n        public double value(double d) {\n            return Math.asin(d);\n        }\n    };",
        "begin_line": 131,
        "end_line": 137,
        "comment": " The {@code Math.asin} method wrapped as a {@link ComposableFunction}. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.ComposableFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/ComposableFunction.java",
        "signature": "org.apache.commons.math.analysis.ComposableFunction.ATAN",
        "snippet": "    public static final ComposableFunction ATAN = new ComposableFunction() {\n        /** {@inheritDoc} */\n        @Override\n        public double value(double d) {\n            return Math.atan(d);\n        }\n    };",
        "begin_line": 140,
        "end_line": 146,
        "comment": " The {@code Math.atan} method wrapped as a {@link ComposableFunction}. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.ComposableFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/ComposableFunction.java",
        "signature": "org.apache.commons.math.analysis.ComposableFunction.TAN",
        "snippet": "    public static final ComposableFunction TAN = new ComposableFunction() {\n        /** {@inheritDoc} */\n        @Override\n        public double value(double d) {\n            return Math.tan(d);\n        }\n    };",
        "begin_line": 149,
        "end_line": 155,
        "comment": " The {@code Math.tan} method wrapped as a {@link ComposableFunction}. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.ComposableFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/ComposableFunction.java",
        "signature": "org.apache.commons.math.analysis.ComposableFunction.TANH",
        "snippet": "    public static final ComposableFunction TANH = new ComposableFunction() {\n        /** {@inheritDoc} */\n        @Override\n        public double value(double d) {\n            return Math.tanh(d);\n        }\n    };",
        "begin_line": 158,
        "end_line": 164,
        "comment": " The {@code Math.tanh} method wrapped as a {@link ComposableFunction}. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.ComposableFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/ComposableFunction.java",
        "signature": "org.apache.commons.math.analysis.ComposableFunction.CBRT",
        "snippet": "    public static final ComposableFunction CBRT = new ComposableFunction() {\n        /** {@inheritDoc} */\n        @Override\n        public double value(double d) {\n            return Math.cbrt(d);\n        }\n    };",
        "begin_line": 167,
        "end_line": 173,
        "comment": " The {@code Math.cbrt} method wrapped as a {@link ComposableFunction}. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.ComposableFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/ComposableFunction.java",
        "signature": "org.apache.commons.math.analysis.ComposableFunction.CEIL",
        "snippet": "    public static final ComposableFunction CEIL = new ComposableFunction() {\n        /** {@inheritDoc} */\n        @Override\n        public double value(double d) {\n            return Math.ceil(d);\n        }\n    };",
        "begin_line": 176,
        "end_line": 182,
        "comment": " The {@code Math.ceil} method wrapped as a {@link ComposableFunction}. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.ComposableFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/ComposableFunction.java",
        "signature": "org.apache.commons.math.analysis.ComposableFunction.FLOOR",
        "snippet": "    public static final ComposableFunction FLOOR = new ComposableFunction() {\n        /** {@inheritDoc} */\n        @Override\n        public double value(double d) {\n            return Math.floor(d);\n        }\n    };",
        "begin_line": 185,
        "end_line": 191,
        "comment": " The {@code Math.floor} method wrapped as a {@link ComposableFunction}. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.ComposableFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/ComposableFunction.java",
        "signature": "org.apache.commons.math.analysis.ComposableFunction.LOG",
        "snippet": "    public static final ComposableFunction LOG = new ComposableFunction() {\n        /** {@inheritDoc} */\n        @Override\n        public double value(double d) {\n            return Math.log(d);\n        }\n    };",
        "begin_line": 194,
        "end_line": 200,
        "comment": " The {@code Math.log} method wrapped as a {@link ComposableFunction}. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.ComposableFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/ComposableFunction.java",
        "signature": "org.apache.commons.math.analysis.ComposableFunction.LOG10",
        "snippet": "    public static final ComposableFunction LOG10 = new ComposableFunction() {\n        /** {@inheritDoc} */\n        @Override\n        public double value(double d) {\n            return Math.log10(d);\n        }\n    };",
        "begin_line": 203,
        "end_line": 209,
        "comment": " The {@code Math.log10} method wrapped as a {@link ComposableFunction}. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.ComposableFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/ComposableFunction.java",
        "signature": "org.apache.commons.math.analysis.ComposableFunction.LOG1P",
        "snippet": "    public static final ComposableFunction LOG1P = new ComposableFunction () {\n        @Override\n        public double value(double d){\n            return Math.log1p(d);\n        }\n    };",
        "begin_line": 212,
        "end_line": 217,
        "comment": " The {@code Math.log1p} method wrapped as a {@link ComposableFunction}. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.ComposableFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/ComposableFunction.java",
        "signature": "org.apache.commons.math.analysis.ComposableFunction.COS",
        "snippet": "    public static final ComposableFunction COS = new ComposableFunction() {\n        /** {@inheritDoc} */\n        @Override\n        public double value(double d) {\n            return Math.cos(d);\n        }\n    };",
        "begin_line": 220,
        "end_line": 226,
        "comment": " The {@code Math.cos} method wrapped as a {@link ComposableFunction}. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.ComposableFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/ComposableFunction.java",
        "signature": "org.apache.commons.math.analysis.ComposableFunction.ACOS",
        "snippet": "    public static final ComposableFunction ACOS = new ComposableFunction() {\n        /** {@inheritDoc} */\n        @Override\n        public double value(double d) {\n            return Math.acos(d);\n        }\n    };",
        "begin_line": 229,
        "end_line": 235,
        "comment": " The {@code Math.abs} method wrapped as a {@link ComposableFunction}. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.ComposableFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/ComposableFunction.java",
        "signature": "org.apache.commons.math.analysis.ComposableFunction.COSH",
        "snippet": "    public static final ComposableFunction COSH = new ComposableFunction() {\n        /** {@inheritDoc} */\n        @Override\n        public double value(double d) {\n            return Math.cosh(d);\n        }\n    };",
        "begin_line": 238,
        "end_line": 244,
        "comment": " The {@code Math.cosh} method wrapped as a {@link ComposableFunction}. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.ComposableFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/ComposableFunction.java",
        "signature": "org.apache.commons.math.analysis.ComposableFunction.RINT",
        "snippet": "    public static final ComposableFunction RINT = new ComposableFunction() {\n        /** {@inheritDoc} */\n        @Override\n        public double value(double d) {\n            return Math.rint(d);\n        }\n    };",
        "begin_line": 247,
        "end_line": 253,
        "comment": " The {@code Math.rint} method wrapped as a {@link ComposableFunction}. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.ComposableFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/ComposableFunction.java",
        "signature": "org.apache.commons.math.analysis.ComposableFunction.SIGNUM",
        "snippet": "    public static final ComposableFunction SIGNUM = new ComposableFunction() {\n        /** {@inheritDoc} */\n        @Override\n        public double value(double d) {\n            return Math.signum(d);\n        }\n    };",
        "begin_line": 256,
        "end_line": 262,
        "comment": " The {@code Math.signum} method wrapped as a {@link ComposableFunction}. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.ComposableFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/ComposableFunction.java",
        "signature": "org.apache.commons.math.analysis.ComposableFunction.ULP",
        "snippet": "    public static final ComposableFunction ULP = new ComposableFunction() {\n        /** {@inheritDoc} */\n        @Override\n        public double value(double d) {\n            return Math.ulp(d);\n        }\n    };",
        "begin_line": 265,
        "end_line": 271,
        "comment": " The {@code Math.ulp} method wrapped as a {@link ComposableFunction}. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.BinaryFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/BinaryFunction.java",
        "signature": "org.apache.commons.math.analysis.BinaryFunction.ADD",
        "snippet": "    public static final BinaryFunction ADD = new BinaryFunction() {\n        /** {@inheritDoc} */\n        @Override\n        public double value(double x, double y) {\n            return x + y;\n        }\n    };",
        "begin_line": 33,
        "end_line": 39,
        "comment": " The + operator method wrapped as a {@link BinaryFunction}. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.BinaryFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/BinaryFunction.java",
        "signature": "org.apache.commons.math.analysis.BinaryFunction.SUBTRACT",
        "snippet": "    public static final BinaryFunction SUBTRACT = new BinaryFunction() {\n        /** {@inheritDoc} */\n        @Override\n        public double value(double x, double y) {\n            return x - y;\n        }\n    };",
        "begin_line": 42,
        "end_line": 48,
        "comment": " The - operator method wrapped as a {@link BinaryFunction}. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.BinaryFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/BinaryFunction.java",
        "signature": "org.apache.commons.math.analysis.BinaryFunction.MULTIPLY",
        "snippet": "    public static final BinaryFunction MULTIPLY = new BinaryFunction() {\n        /** {@inheritDoc} */\n        @Override\n        public double value(double x, double y) {\n            return x * y;\n        }\n    };",
        "begin_line": 51,
        "end_line": 57,
        "comment": " The * operator method wrapped as a {@link BinaryFunction}. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.BinaryFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/BinaryFunction.java",
        "signature": "org.apache.commons.math.analysis.BinaryFunction.DIVIDE",
        "snippet": "    public static final BinaryFunction DIVIDE = new BinaryFunction() {\n        /** {@inheritDoc} */\n        @Override\n        public double value(double x, double y) {\n            return x / y;\n        }\n    };",
        "begin_line": 60,
        "end_line": 66,
        "comment": " The / operator method wrapped as a {@link BinaryFunction}. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.BinaryFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/BinaryFunction.java",
        "signature": "org.apache.commons.math.analysis.BinaryFunction.POW",
        "snippet": "    public static final BinaryFunction POW = new BinaryFunction() {\n        /** {@inheritDoc} */\n        @Override\n        public double value(double x, double y) {\n            return Math.pow(x, y);\n        }\n    };",
        "begin_line": 69,
        "end_line": 75,
        "comment": " The {@code Math.pow} method wrapped as a {@link BinaryFunction}. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.BinaryFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/BinaryFunction.java",
        "signature": "org.apache.commons.math.analysis.BinaryFunction.ATAN2",
        "snippet": "    public static final BinaryFunction ATAN2 = new BinaryFunction() {\n        /** {@inheritDoc} */\n        @Override\n        public double value(double x, double y) {\n            return Math.atan2(x, y);\n        }\n    };",
        "begin_line": 78,
        "end_line": 84,
        "comment": " The {@code Math.atan2} method wrapped as a {@link BinaryFunction}. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl",
        "src_path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java",
        "signature": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.functionValueAccuracy",
        "snippet": "    protected double functionValueAccuracy;",
        "begin_line": 35,
        "end_line": 35,
        "comment": " Maximum error of function. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl",
        "src_path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java",
        "signature": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.defaultFunctionValueAccuracy",
        "snippet": "    protected double defaultFunctionValueAccuracy;",
        "begin_line": 38,
        "end_line": 38,
        "comment": " Default maximum error of function. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl",
        "src_path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java",
        "signature": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.resultComputed",
        "snippet": "    protected boolean resultComputed = false;",
        "begin_line": 41,
        "end_line": 41,
        "comment": " Indicates where a root has been computed. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl",
        "src_path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java",
        "signature": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.result",
        "snippet": "    protected double result;",
        "begin_line": 44,
        "end_line": 44,
        "comment": " The last computed root. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl",
        "src_path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java",
        "signature": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.functionValue",
        "snippet": "    protected double functionValue;",
        "begin_line": 47,
        "end_line": 47,
        "comment": " Value of the function at the last computed result. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl",
        "src_path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java",
        "signature": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.f",
        "snippet": "    @Deprecated\n    protected UnivariateRealFunction f;",
        "begin_line": 54,
        "end_line": 55,
        "comment": " The function to solve.\n     * @deprecated as of 2.0 the function to solve is passed as an argument\n     * to the {@link #solve(UnivariateRealFunction, double, double)} or\n     * {@link UnivariateRealSolverImpl#solve(UnivariateRealFunction, double, double, double)}\n     * method. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils",
        "src_path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java",
        "signature": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.NULL_FUNCTION_MESSAGE",
        "snippet": "    private static final String NULL_FUNCTION_MESSAGE =\n        \"function is null\";",
        "begin_line": 32,
        "end_line": 33,
        "comment": " Message for null function."
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.LazyHolder",
        "src_path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java",
        "signature": "org.apache.commons.math.analysis.solvers.LazyHolder.FACTORY",
        "snippet": "        private static final UnivariateRealSolverFactory FACTORY = UnivariateRealSolverFactory.newInstance();",
        "begin_line": 243,
        "end_line": 243,
        "comment": " Cached solver factory "
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.LaguerreSolver",
        "src_path": "src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java",
        "signature": "org.apache.commons.math.analysis.solvers.LaguerreSolver.NON_POLYNOMIAL_FUNCTION_MESSAGE",
        "snippet": "    private static final String NON_POLYNOMIAL_FUNCTION_MESSAGE =\n        \"function is not polynomial\";",
        "begin_line": 42,
        "end_line": 43,
        "comment": " Message for non-polynomial function. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.LaguerreSolver",
        "src_path": "src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java",
        "signature": "org.apache.commons.math.analysis.solvers.LaguerreSolver.NON_POSITIVE_DEGREE_MESSAGE",
        "snippet": "    private static final String NON_POSITIVE_DEGREE_MESSAGE =\n        \"polynomial degree must be positive: degree={0}\";",
        "begin_line": 46,
        "end_line": 47,
        "comment": " Message for non-positive degree. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.LaguerreSolver",
        "src_path": "src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java",
        "signature": "org.apache.commons.math.analysis.solvers.LaguerreSolver.p",
        "snippet": "    @Deprecated\n    private final PolynomialFunction p;",
        "begin_line": 52,
        "end_line": 53,
        "comment": " polynomial function to solve.\n     * @deprecated as of 2.0 the function is not stored anymore in the instance\n     "
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BrentSolver",
        "src_path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java",
        "signature": "org.apache.commons.math.analysis.solvers.BrentSolver.DEFAULT_ABSOLUTE_ACCURACY",
        "snippet": "    public static final double DEFAULT_ABSOLUTE_ACCURACY = 1E-6;",
        "begin_line": 39,
        "end_line": 39,
        "comment": "\n     * Default absolute accuracy\n     * @since 2.1\n     "
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BrentSolver",
        "src_path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java",
        "signature": "org.apache.commons.math.analysis.solvers.BrentSolver.DEFAULT_MAXIMUM_ITERATIONS",
        "snippet": "    public static final int DEFAULT_MAXIMUM_ITERATIONS = 100;",
        "begin_line": 44,
        "end_line": 44,
        "comment": " Default maximum number of iterations\n     * @since 2.1\n     "
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BrentSolver",
        "src_path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java",
        "signature": "org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE",
        "snippet": "    private static final String NON_BRACKETING_MESSAGE =\n        \"function values at endpoints do not have different signs.  \" +\n        \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\";",
        "begin_line": 47,
        "end_line": 49,
        "comment": " Error message for non-bracketing interval. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BrentSolver",
        "src_path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java",
        "signature": "org.apache.commons.math.analysis.solvers.BrentSolver.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 7694577816772532779L;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.analysis.integration.LegendreGaussIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java",
        "signature": "org.apache.commons.math.analysis.integration.LegendreGaussIntegrator.ABSCISSAS_2",
        "snippet": "    private static final double[] ABSCISSAS_2 = {\n        -1.0 / Math.sqrt(3.0),\n         1.0 / Math.sqrt(3.0)\n    };",
        "begin_line": 55,
        "end_line": 58,
        "comment": " Abscissas for the 2 points method. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.integration.LegendreGaussIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java",
        "signature": "org.apache.commons.math.analysis.integration.LegendreGaussIntegrator.WEIGHTS_2",
        "snippet": "    private static final double[] WEIGHTS_2 = {\n        1.0,\n        1.0\n    };",
        "begin_line": 61,
        "end_line": 64,
        "comment": " Weights for the 2 points method. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.integration.LegendreGaussIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java",
        "signature": "org.apache.commons.math.analysis.integration.LegendreGaussIntegrator.ABSCISSAS_3",
        "snippet": "    private static final double[] ABSCISSAS_3 = {\n        -Math.sqrt(0.6),\n         0.0,\n         Math.sqrt(0.6)\n    };",
        "begin_line": 67,
        "end_line": 71,
        "comment": " Abscissas for the 3 points method. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.integration.LegendreGaussIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java",
        "signature": "org.apache.commons.math.analysis.integration.LegendreGaussIntegrator.WEIGHTS_3",
        "snippet": "    private static final double[] WEIGHTS_3 = {\n        5.0 / 9.0,\n        8.0 / 9.0,\n        5.0 / 9.0\n    };",
        "begin_line": 74,
        "end_line": 78,
        "comment": " Weights for the 3 points method. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.integration.LegendreGaussIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java",
        "signature": "org.apache.commons.math.analysis.integration.LegendreGaussIntegrator.ABSCISSAS_4",
        "snippet": "    private static final double[] ABSCISSAS_4 = {\n        -Math.sqrt((15.0 + 2.0 * Math.sqrt(30.0)) / 35.0),\n        -Math.sqrt((15.0 - 2.0 * Math.sqrt(30.0)) / 35.0),\n         Math.sqrt((15.0 - 2.0 * Math.sqrt(30.0)) / 35.0),\n         Math.sqrt((15.0 + 2.0 * Math.sqrt(30.0)) / 35.0)\n    };",
        "begin_line": 81,
        "end_line": 86,
        "comment": " Abscissas for the 4 points method. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.integration.LegendreGaussIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java",
        "signature": "org.apache.commons.math.analysis.integration.LegendreGaussIntegrator.WEIGHTS_4",
        "snippet": "    private static final double[] WEIGHTS_4 = {\n        (90.0 - 5.0 * Math.sqrt(30.0)) / 180.0,\n        (90.0 + 5.0 * Math.sqrt(30.0)) / 180.0,\n        (90.0 + 5.0 * Math.sqrt(30.0)) / 180.0,\n        (90.0 - 5.0 * Math.sqrt(30.0)) / 180.0\n    };",
        "begin_line": 89,
        "end_line": 94,
        "comment": " Weights for the 4 points method. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.integration.LegendreGaussIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java",
        "signature": "org.apache.commons.math.analysis.integration.LegendreGaussIntegrator.ABSCISSAS_5",
        "snippet": "    private static final double[] ABSCISSAS_5 = {\n        -Math.sqrt((35.0 + 2.0 * Math.sqrt(70.0)) / 63.0),\n        -Math.sqrt((35.0 - 2.0 * Math.sqrt(70.0)) / 63.0),\n         0.0,\n         Math.sqrt((35.0 - 2.0 * Math.sqrt(70.0)) / 63.0),\n         Math.sqrt((35.0 + 2.0 * Math.sqrt(70.0)) / 63.0)\n    };",
        "begin_line": 97,
        "end_line": 103,
        "comment": " Abscissas for the 5 points method. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.integration.LegendreGaussIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java",
        "signature": "org.apache.commons.math.analysis.integration.LegendreGaussIntegrator.WEIGHTS_5",
        "snippet": "    private static final double[] WEIGHTS_5 = {\n        (322.0 - 13.0 * Math.sqrt(70.0)) / 900.0,\n        (322.0 + 13.0 * Math.sqrt(70.0)) / 900.0,\n        128.0 / 225.0,\n        (322.0 + 13.0 * Math.sqrt(70.0)) / 900.0,\n        (322.0 - 13.0 * Math.sqrt(70.0)) / 900.0\n    };",
        "begin_line": 106,
        "end_line": 112,
        "comment": " Weights for the 5 points method. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.integration.LegendreGaussIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java",
        "signature": "org.apache.commons.math.analysis.integration.LegendreGaussIntegrator.abscissas",
        "snippet": "    private final double[] abscissas;",
        "begin_line": 115,
        "end_line": 115,
        "comment": " Abscissas for the current method. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.integration.LegendreGaussIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java",
        "signature": "org.apache.commons.math.analysis.integration.LegendreGaussIntegrator.weights",
        "snippet": "    private final double[] weights;",
        "begin_line": 118,
        "end_line": 118,
        "comment": " Weights for the current method. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.integration.UnivariateRealIntegratorImpl",
        "src_path": "src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java",
        "signature": "org.apache.commons.math.analysis.integration.UnivariateRealIntegratorImpl.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 6248808456637441533L;",
        "begin_line": 33,
        "end_line": 33,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.integration.UnivariateRealIntegratorImpl",
        "src_path": "src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java",
        "signature": "org.apache.commons.math.analysis.integration.UnivariateRealIntegratorImpl.minimalIterationCount",
        "snippet": "    protected int minimalIterationCount;",
        "begin_line": 36,
        "end_line": 36,
        "comment": " minimum number of iterations "
    },
    {
        "class_name": "org.apache.commons.math.analysis.integration.UnivariateRealIntegratorImpl",
        "src_path": "src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java",
        "signature": "org.apache.commons.math.analysis.integration.UnivariateRealIntegratorImpl.defaultMinimalIterationCount",
        "snippet": "    protected int defaultMinimalIterationCount;",
        "begin_line": 39,
        "end_line": 39,
        "comment": " default minimum number of iterations "
    },
    {
        "class_name": "org.apache.commons.math.analysis.integration.UnivariateRealIntegratorImpl",
        "src_path": "src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java",
        "signature": "org.apache.commons.math.analysis.integration.UnivariateRealIntegratorImpl.resultComputed",
        "snippet": "    protected boolean resultComputed = false;",
        "begin_line": 42,
        "end_line": 42,
        "comment": " indicates whether an integral has been computed "
    },
    {
        "class_name": "org.apache.commons.math.analysis.integration.UnivariateRealIntegratorImpl",
        "src_path": "src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java",
        "signature": "org.apache.commons.math.analysis.integration.UnivariateRealIntegratorImpl.result",
        "snippet": "    protected double result;",
        "begin_line": 45,
        "end_line": 45,
        "comment": " the last computed integral "
    },
    {
        "class_name": "org.apache.commons.math.analysis.integration.UnivariateRealIntegratorImpl",
        "src_path": "src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java",
        "signature": "org.apache.commons.math.analysis.integration.UnivariateRealIntegratorImpl.f",
        "snippet": "    @Deprecated\n    protected UnivariateRealFunction f;",
        "begin_line": 50,
        "end_line": 51,
        "comment": " The integrand functione.\n     * @deprecated as of 2.0 the integrand function is passed as an argument\n     * to the {@link #integrate(UnivariateRealFunction, double, double)}method. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.integration.TrapezoidIntegrator",
        "src_path": "src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java",
        "signature": "org.apache.commons.math.analysis.integration.TrapezoidIntegrator.s",
        "snippet": "    private double s;",
        "begin_line": 38,
        "end_line": 38,
        "comment": " Intermediate result. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.interpolation.MicrosphereInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java",
        "signature": "org.apache.commons.math.analysis.interpolation.MicrosphereInterpolator.DEFAULT_MICROSPHERE_ELEMENTS",
        "snippet": "    public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;",
        "begin_line": 38,
        "end_line": 38,
        "comment": "\n     * Default number of surface elements that composes the microsphere.\n     "
    },
    {
        "class_name": "org.apache.commons.math.analysis.interpolation.MicrosphereInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java",
        "signature": "org.apache.commons.math.analysis.interpolation.MicrosphereInterpolator.DEFAULT_BRIGHTNESS_EXPONENT",
        "snippet": "    public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;",
        "begin_line": 43,
        "end_line": 43,
        "comment": "\n     * Default exponent used the weights calculation.\n     "
    },
    {
        "class_name": "org.apache.commons.math.analysis.interpolation.MicrosphereInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java",
        "signature": "org.apache.commons.math.analysis.interpolation.MicrosphereInterpolator.microsphereElements",
        "snippet": "    private int microsphereElements;",
        "begin_line": 48,
        "end_line": 48,
        "comment": "\n     * Number of surface elements of the microsphere.\n     "
    },
    {
        "class_name": "org.apache.commons.math.analysis.interpolation.MicrosphereInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java",
        "signature": "org.apache.commons.math.analysis.interpolation.MicrosphereInterpolator.brightnessExponent",
        "snippet": "    private int brightnessExponent;",
        "begin_line": 54,
        "end_line": 54,
        "comment": "\n     * Exponent used in the power law that computes the weights of the\n     * sample data.\n     "
    },
    {
        "class_name": "org.apache.commons.math.analysis.interpolation.LoessInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java",
        "signature": "org.apache.commons.math.analysis.interpolation.LoessInterpolator.DEFAULT_BANDWIDTH",
        "snippet": "    public static final double DEFAULT_BANDWIDTH = 0.3;",
        "begin_line": 45,
        "end_line": 45,
        "comment": " Default value of the bandwidth parameter. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.interpolation.LoessInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java",
        "signature": "org.apache.commons.math.analysis.interpolation.LoessInterpolator.DEFAULT_ROBUSTNESS_ITERS",
        "snippet": "    public static final int DEFAULT_ROBUSTNESS_ITERS = 2;",
        "begin_line": 48,
        "end_line": 48,
        "comment": " Default value of the number of robustness iterations. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.interpolation.LoessInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java",
        "signature": "org.apache.commons.math.analysis.interpolation.LoessInterpolator.DEFAULT_ACCURACY",
        "snippet": "    public static final double DEFAULT_ACCURACY = 1e-12;",
        "begin_line": 54,
        "end_line": 54,
        "comment": "\n     * Default value for accuracy.\n     * @since 2.1\n     "
    },
    {
        "class_name": "org.apache.commons.math.analysis.interpolation.LoessInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java",
        "signature": "org.apache.commons.math.analysis.interpolation.LoessInterpolator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 5204927143605193821L;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.interpolation.LoessInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java",
        "signature": "org.apache.commons.math.analysis.interpolation.LoessInterpolator.bandwidth",
        "snippet": "    private final double bandwidth;",
        "begin_line": 67,
        "end_line": 67,
        "comment": "\n     * The bandwidth parameter: when computing the loess fit at\n     * a particular point, this fraction of source points closest\n     * to the current point is taken into account for computing\n     * a least-squares regression.\n     * <p/>\n     * A sensible value is usually 0.25 to 0.5.\n     "
    },
    {
        "class_name": "org.apache.commons.math.analysis.interpolation.LoessInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java",
        "signature": "org.apache.commons.math.analysis.interpolation.LoessInterpolator.robustnessIters",
        "snippet": "    private final int robustnessIters;",
        "begin_line": 76,
        "end_line": 76,
        "comment": "\n     * The number of robustness iterations parameter: this many\n     * robustness iterations are done.\n     * <p/>\n     * A sensible value is usually 0 (just the initial fit without any\n     * robustness iterations) to 4.\n     "
    },
    {
        "class_name": "org.apache.commons.math.analysis.interpolation.LoessInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java",
        "signature": "org.apache.commons.math.analysis.interpolation.LoessInterpolator.accuracy",
        "snippet": "    private final double accuracy;",
        "begin_line": 82,
        "end_line": 82,
        "comment": "\n     * If the median residual at a certain robustness iteration\n     * is less than this amount, no more iterations are done.\n     "
    },
    {
        "class_name": "org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java",
        "signature": "org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunction.AINV",
        "snippet": "    private static final double[][] AINV = {\n        { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },\n        { 0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0 },\n        { -3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0 },\n        { 2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0 },\n        { 0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0 },\n        { 0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0 },\n        { 0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0 },\n        { 0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0 },\n        { -3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0 },\n        { 0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0 },\n        { 9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1 },\n        { -6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1 },\n        { 2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0 },\n        { 0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0 },\n        { -6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1 },\n        { 4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1 }\n    };",
        "begin_line": 39,
        "end_line": 56,
        "comment": "\n     * Matrix to compute the spline coefficients from the function values\n     * and function derivatives values\n     "
    },
    {
        "class_name": "org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java",
        "signature": "org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunction.xval",
        "snippet": "    private final double[] xval;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " Samples x-coordinates "
    },
    {
        "class_name": "org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java",
        "signature": "org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunction.yval",
        "snippet": "    private final double[] yval;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " Samples y-coordinates "
    },
    {
        "class_name": "org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java",
        "signature": "org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunction.splines",
        "snippet": "    private final BicubicSplineFunction[][] splines;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " Set of cubic splines patching the whole data grid "
    },
    {
        "class_name": "org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java",
        "signature": "org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunction.partialDerivatives",
        "snippet": "    private BivariateRealFunction[][][] partialDerivatives = null;",
        "begin_line": 73,
        "end_line": 73,
        "comment": "\n     * Partial derivatives\n     * The value of the first index determines the kind of derivatives:\n     * 0 = first partial derivatives wrt x\n     * 1 = first partial derivatives wrt y\n     * 2 = second partial derivatives wrt x\n     * 3 = second partial derivatives wrt y\n     * 4 = cross partial derivatives\n     "
    },
    {
        "class_name": "org.apache.commons.math.analysis.interpolation.BicubicSplineFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java",
        "signature": "org.apache.commons.math.analysis.interpolation.BicubicSplineFunction.N",
        "snippet": "    private static final short N = 4;",
        "begin_line": 350,
        "end_line": 350,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.math.analysis.interpolation.BicubicSplineFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java",
        "signature": "org.apache.commons.math.analysis.interpolation.BicubicSplineFunction.a",
        "snippet": "    private final double[][] a = new double[N][N];",
        "begin_line": 352,
        "end_line": 352,
        "comment": " Coefficients "
    },
    {
        "class_name": "org.apache.commons.math.analysis.interpolation.BicubicSplineFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java",
        "signature": "org.apache.commons.math.analysis.interpolation.BicubicSplineFunction.partialDerivativeX",
        "snippet": "    BivariateRealFunction partialDerivativeX = null;",
        "begin_line": 354,
        "end_line": 354,
        "comment": " Partial derivatives "
    },
    {
        "class_name": "org.apache.commons.math.analysis.interpolation.BicubicSplineFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java",
        "signature": "org.apache.commons.math.analysis.interpolation.BicubicSplineFunction.partialDerivativeY",
        "snippet": "    BivariateRealFunction partialDerivativeY = null;",
        "begin_line": 355,
        "end_line": 355,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.math.analysis.interpolation.BicubicSplineFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java",
        "signature": "org.apache.commons.math.analysis.interpolation.BicubicSplineFunction.partialDerivativeXX",
        "snippet": "    BivariateRealFunction partialDerivativeXX = null;",
        "begin_line": 356,
        "end_line": 356,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.math.analysis.interpolation.BicubicSplineFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java",
        "signature": "org.apache.commons.math.analysis.interpolation.BicubicSplineFunction.partialDerivativeYY",
        "snippet": "    BivariateRealFunction partialDerivativeYY = null;",
        "begin_line": 357,
        "end_line": 357,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.math.analysis.interpolation.BicubicSplineFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java",
        "signature": "org.apache.commons.math.analysis.interpolation.BicubicSplineFunction.partialDerivativeXY",
        "snippet": "    BivariateRealFunction partialDerivativeXY = null;",
        "begin_line": 358,
        "end_line": 358,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatingFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java",
        "signature": "org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatingFunction.dimension",
        "snippet": "    private final int dimension;",
        "begin_line": 42,
        "end_line": 42,
        "comment": "\n     * Space dimension.\n     "
    },
    {
        "class_name": "org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatingFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java",
        "signature": "org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatingFunction.microsphere",
        "snippet": "    private final List<MicrosphereSurfaceElement> microsphere;",
        "begin_line": 48,
        "end_line": 48,
        "comment": "\n     * Internal accounting data for the interpolation algorithm.\n     * Each element of the list corresponds to one surface element of\n     * the microsphere.\n     "
    },
    {
        "class_name": "org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatingFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java",
        "signature": "org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatingFunction.brightnessExponent",
        "snippet": "    private final double brightnessExponent;",
        "begin_line": 53,
        "end_line": 53,
        "comment": "\n     * Exponent used in the power law that computes the weights of the\n     * sample data.\n     "
    },
    {
        "class_name": "org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatingFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java",
        "signature": "org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatingFunction.samples",
        "snippet": "    private final Map<RealVector, Double> samples;",
        "begin_line": 57,
        "end_line": 57,
        "comment": "\n     * Sample data.\n     "
    },
    {
        "class_name": "org.apache.commons.math.analysis.interpolation.MicrosphereSurfaceElement",
        "src_path": "src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java",
        "signature": "org.apache.commons.math.analysis.interpolation.MicrosphereSurfaceElement.normal",
        "snippet": "        private final RealVector normal;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " Normal vector characterizing a surface element. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.interpolation.MicrosphereSurfaceElement",
        "src_path": "src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java",
        "signature": "org.apache.commons.math.analysis.interpolation.MicrosphereSurfaceElement.brightestIllumination",
        "snippet": "        private double brightestIllumination;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " Illumination received from the brightest sample. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.interpolation.MicrosphereSurfaceElement",
        "src_path": "src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java",
        "signature": "org.apache.commons.math.analysis.interpolation.MicrosphereSurfaceElement.brightestSample",
        "snippet": "        private Map.Entry<RealVector, Double> brightestSample;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " Brightest sample. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java",
        "signature": "org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator.xFitter",
        "snippet": "    private final PolynomialFitter xFitter;",
        "begin_line": 39,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java",
        "signature": "org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator.yFitter",
        "snippet": "    private final PolynomialFitter yFitter;",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java",
        "signature": "org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 107049519551235069L;",
        "begin_line": 42,
        "end_line": 42,
        "comment": " serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.analysis.interpolation.NevilleInterpolator",
        "src_path": "src/main/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolator.java",
        "signature": "org.apache.commons.math.analysis.interpolation.NevilleInterpolator.serialVersionUID",
        "snippet": "    static final long serialVersionUID = 3003707660147873733L;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java",
        "signature": "org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunction.AINV",
        "snippet": "    private static final double[][] AINV = {\n        { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },\n        { 0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },\n        { -3,3,0,0,0,0,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },\n        { 2,-2,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },\n        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },\n        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },\n        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },\n        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },\n        { -3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },\n        { 0,0,0,0,0,0,0,0,-3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },\n        { 9,-9,-9,9,0,0,0,0,6,3,-6,-3,0,0,0,0,6,-6,3,-3,0,0,0,0,0,0,0,0,0,0,0,0,4,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },\n        { -6,6,6,-6,0,0,0,0,-3,-3,3,3,0,0,0,0,-4,4,-2,2,0,0,0,0,0,0,0,0,0,0,0,0,-2,-2,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },\n        { 2,0,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },\n        { 0,0,0,0,0,0,0,0,2,0,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },\n        { -6,6,6,-6,0,0,0,0,-4,-2,4,2,0,0,0,0,-3,3,-3,3,0,0,0,0,0,0,0,0,0,0,0,0,-2,-1,-2,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },\n        { 4,-4,-4,4,0,0,0,0,2,2,-2,-2,0,0,0,0,2,-2,2,-2,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },\n        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },\n        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },\n        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },\n        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },\n        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },\n        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0 },\n        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3,3,0,0,0,0,0,0,-2,-1,0,0,0,0,0,0 },\n        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,-2,0,0,0,0,0,0,1,1,0,0,0,0,0,0 },\n        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0 },\n        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,-1,0,0,0,0,0 },\n        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,-9,-9,9,0,0,0,0,0,0,0,0,0,0,0,0,6,3,-6,-3,0,0,0,0,6,-6,3,-3,0,0,0,0,4,2,2,1,0,0,0,0 },\n        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-6,6,6,-6,0,0,0,0,0,0,0,0,0,0,0,0,-3,-3,3,3,0,0,0,0,-4,4,-2,2,0,0,0,0,-2,-2,-1,-1,0,0,0,0 },\n        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0 },\n        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0 },\n        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-6,6,6,-6,0,0,0,0,0,0,0,0,0,0,0,0,-4,-2,4,2,0,0,0,0,-3,3,-3,3,0,0,0,0,-2,-1,-2,-1,0,0,0,0 },\n        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,-4,-4,4,0,0,0,0,0,0,0,0,0,0,0,0,2,2,-2,-2,0,0,0,0,2,-2,2,-2,0,0,0,0,1,1,1,1,0,0,0,0 },\n        {-3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },\n        { 0,0,0,0,0,0,0,0,-3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },\n        { 9,-9,0,0,-9,9,0,0,6,3,0,0,-6,-3,0,0,0,0,0,0,0,0,0,0,6,-6,0,0,3,-3,0,0,0,0,0,0,0,0,0,0,4,2,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },\n        { -6,6,0,0,6,-6,0,0,-3,-3,0,0,3,3,0,0,0,0,0,0,0,0,0,0,-4,4,0,0,-2,2,0,0,0,0,0,0,0,0,0,0,-2,-2,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },\n        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0 },\n        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,0,0,-1,0,0,0 },\n        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,-9,0,0,-9,9,0,0,0,0,0,0,0,0,0,0,6,3,0,0,-6,-3,0,0,0,0,0,0,0,0,0,0,6,-6,0,0,3,-3,0,0,4,2,0,0,2,1,0,0 },\n        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-6,6,0,0,6,-6,0,0,0,0,0,0,0,0,0,0,-3,-3,0,0,3,3,0,0,0,0,0,0,0,0,0,0,-4,4,0,0,-2,2,0,0,-2,-2,0,0,-1,-1,0,0 },\n        { 9,0,-9,0,-9,0,9,0,0,0,0,0,0,0,0,0,6,0,3,0,-6,0,-3,0,6,0,-6,0,3,0,-3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,2,0,2,0,1,0,0,0,0,0,0,0,0,0 },\n        { 0,0,0,0,0,0,0,0,9,0,-9,0,-9,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,3,0,-6,0,-3,0,6,0,-6,0,3,0,-3,0,0,0,0,0,0,0,0,0,4,0,2,0,2,0,1,0 },\n        { -27,27,27,-27,27,-27,-27,27,-18,-9,18,9,18,9,-18,-9,-18,18,-9,9,18,-18,9,-9,-18,18,18,-18,-9,9,9,-9,-12,-6,-6,-3,12,6,6,3,-12,-6,12,6,-6,-3,6,3,-12,12,-6,6,-6,6,-3,3,-8,-4,-4,-2,-4,-2,-2,-1 },\n        { 18,-18,-18,18,-18,18,18,-18,9,9,-9,-9,-9,-9,9,9,12,-12,6,-6,-12,12,-6,6,12,-12,-12,12,6,-6,-6,6,6,6,3,3,-6,-6,-3,-3,6,6,-6,-6,3,3,-3,-3,8,-8,4,-4,4,-4,2,-2,4,4,2,2,2,2,1,1 },\n        { -6,0,6,0,6,0,-6,0,0,0,0,0,0,0,0,0,-3,0,-3,0,3,0,3,0,-4,0,4,0,-2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,-2,0,-1,0,-1,0,0,0,0,0,0,0,0,0 },\n        { 0,0,0,0,0,0,0,0,-6,0,6,0,6,0,-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3,0,-3,0,3,0,3,0,-4,0,4,0,-2,0,2,0,0,0,0,0,0,0,0,0,-2,0,-2,0,-1,0,-1,0 },\n        { 18,-18,-18,18,-18,18,18,-18,12,6,-12,-6,-12,-6,12,6,9,-9,9,-9,-9,9,-9,9,12,-12,-12,12,6,-6,-6,6,6,3,6,3,-6,-3,-6,-3,8,4,-8,-4,4,2,-4,-2,6,-6,6,-6,3,-3,3,-3,4,2,4,2,2,1,2,1 },\n        { -12,12,12,-12,12,-12,-12,12,-6,-6,6,6,6,6,-6,-6,-6,6,-6,6,6,-6,6,-6,-8,8,8,-8,-4,4,4,-4,-3,-3,-3,-3,3,3,3,3,-4,-4,4,4,-2,-2,2,2,-4,4,-4,4,-2,2,-2,2,-2,-2,-2,-2,-1,-1,-1,-1 },\n        { 2,0,0,0,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },\n        { 0,0,0,0,0,0,0,0,2,0,0,0,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },\n        { -6,6,0,0,6,-6,0,0,-4,-2,0,0,4,2,0,0,0,0,0,0,0,0,0,0,-3,3,0,0,-3,3,0,0,0,0,0,0,0,0,0,0,-2,-1,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },\n        { 4,-4,0,0,-4,4,0,0,2,2,0,0,-2,-2,0,0,0,0,0,0,0,0,0,0,2,-2,0,0,2,-2,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },\n        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0 },\n        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0 },\n        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-6,6,0,0,6,-6,0,0,0,0,0,0,0,0,0,0,-4,-2,0,0,4,2,0,0,0,0,0,0,0,0,0,0,-3,3,0,0,-3,3,0,0,-2,-1,0,0,-2,-1,0,0 },\n        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,-4,0,0,-4,4,0,0,0,0,0,0,0,0,0,0,2,2,0,0,-2,-2,0,0,0,0,0,0,0,0,0,0,2,-2,0,0,2,-2,0,0,1,1,0,0,1,1,0,0 },\n        { -6,0,6,0,6,0,-6,0,0,0,0,0,0,0,0,0,-4,0,-2,0,4,0,2,0,-3,0,3,0,-3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,-1,0,-2,0,-1,0,0,0,0,0,0,0,0,0 },\n        { 0,0,0,0,0,0,0,0,-6,0,6,0,6,0,-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-4,0,-2,0,4,0,2,0,-3,0,3,0,-3,0,3,0,0,0,0,0,0,0,0,0,-2,0,-1,0,-2,0,-1,0 },\n        { 18,-18,-18,18,-18,18,18,-18,12,6,-12,-6,-12,-6,12,6,12,-12,6,-6,-12,12,-6,6,9,-9,-9,9,9,-9,-9,9,8,4,4,2,-8,-4,-4,-2,6,3,-6,-3,6,3,-6,-3,6,-6,3,-3,6,-6,3,-3,4,2,2,1,4,2,2,1 },\n        { -12,12,12,-12,12,-12,-12,12,-6,-6,6,6,6,6,-6,-6,-8,8,-4,4,8,-8,4,-4,-6,6,6,-6,-6,6,6,-6,-4,-4,-2,-2,4,4,2,2,-3,-3,3,3,-3,-3,3,3,-4,4,-2,2,-4,4,-2,2,-2,-2,-1,-1,-2,-2,-1,-1 },\n        { 4,0,-4,0,-4,0,4,0,0,0,0,0,0,0,0,0,2,0,2,0,-2,0,-2,0,2,0,-2,0,2,0,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0 },\n        { 0,0,0,0,0,0,0,0,4,0,-4,0,-4,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,-2,0,-2,0,2,0,-2,0,2,0,-2,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0 },\n        { -12,12,12,-12,12,-12,-12,12,-8,-4,8,4,8,4,-8,-4,-6,6,-6,6,6,-6,6,-6,-6,6,6,-6,-6,6,6,-6,-4,-2,-4,-2,4,2,4,2,-4,-2,4,2,-4,-2,4,2,-3,3,-3,3,-3,3,-3,3,-2,-1,-2,-1,-2,-1,-2,-1 },\n        { 8,-8,-8,8,-8,8,8,-8,4,4,-4,-4,-4,-4,4,4,4,-4,4,-4,-4,4,-4,4,4,-4,-4,4,4,-4,-4,4,2,2,2,2,-2,-2,-2,-2,2,2,-2,-2,2,2,-2,-2,2,-2,2,-2,2,-2,2,-2,1,1,1,1,1,1,1,1 }\n    };",
        "begin_line": 43,
        "end_line": 108,
        "comment": "\n     * Matrix to compute the spline coefficients from the function values\n     * and function derivatives values\n     "
    },
    {
        "class_name": "org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java",
        "signature": "org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunction.xval",
        "snippet": "    private final double[] xval;",
        "begin_line": 111,
        "end_line": 111,
        "comment": " Samples x-coordinates "
    },
    {
        "class_name": "org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java",
        "signature": "org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunction.yval",
        "snippet": "    private final double[] yval;",
        "begin_line": 113,
        "end_line": 113,
        "comment": " Samples y-coordinates "
    },
    {
        "class_name": "org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java",
        "signature": "org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunction.zval",
        "snippet": "    private final double[] zval;",
        "begin_line": 115,
        "end_line": 115,
        "comment": " Samples z-coordinates "
    },
    {
        "class_name": "org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java",
        "signature": "org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunction.splines",
        "snippet": "    private final TricubicSplineFunction[][][] splines;",
        "begin_line": 117,
        "end_line": 117,
        "comment": " Set of cubic splines pacthing the whole data grid "
    },
    {
        "class_name": "org.apache.commons.math.analysis.interpolation.TricubicSplineFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java",
        "signature": "org.apache.commons.math.analysis.interpolation.TricubicSplineFunction.N",
        "snippet": "    private static final short N = 4;",
        "begin_line": 426,
        "end_line": 426,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.math.analysis.interpolation.TricubicSplineFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java",
        "signature": "org.apache.commons.math.analysis.interpolation.TricubicSplineFunction.N2",
        "snippet": "    private static final short N2 = N * N;",
        "begin_line": 427,
        "end_line": 427,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.math.analysis.interpolation.TricubicSplineFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java",
        "signature": "org.apache.commons.math.analysis.interpolation.TricubicSplineFunction.a",
        "snippet": "    private final double[][][] a = new double[N][N][N];",
        "begin_line": 429,
        "end_line": 429,
        "comment": " Coefficients "
    },
    {
        "class_name": "org.apache.commons.math.analysis.polynomials.PolynomialFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java",
        "signature": "org.apache.commons.math.analysis.polynomials.PolynomialFunction.EMPTY_ARRAY_MESSAGE",
        "snippet": "    private static final String EMPTY_ARRAY_MESSAGE =\n        \"empty polynomials coefficients array\";",
        "begin_line": 37,
        "end_line": 38,
        "comment": " Message for empty coefficients array. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.polynomials.PolynomialFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java",
        "signature": "org.apache.commons.math.analysis.polynomials.PolynomialFunction.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -7726511984200295583L;",
        "begin_line": 43,
        "end_line": 43,
        "comment": "\n     * Serialization identifier\n     "
    },
    {
        "class_name": "org.apache.commons.math.analysis.polynomials.PolynomialFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java",
        "signature": "org.apache.commons.math.analysis.polynomials.PolynomialFunction.coefficients",
        "snippet": "    private final double coefficients[];",
        "begin_line": 50,
        "end_line": 50,
        "comment": "\n     * The coefficients of the polynomial, ordered by degree -- i.e.,\n     * coefficients[0] is the constant term and coefficients[n] is the\n     * coefficient of x^n where n is the degree of the polynomial.\n     "
    },
    {
        "class_name": "org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java",
        "signature": "org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction.knots",
        "snippet": "    private final double knots[];",
        "begin_line": 64,
        "end_line": 64,
        "comment": " Spline segment interval delimiters (knots).   Size is n+1 for n segments. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java",
        "signature": "org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction.polynomials",
        "snippet": "    private final PolynomialFunction polynomials[];",
        "begin_line": 73,
        "end_line": 73,
        "comment": "\n     * The polynomial functions that make up the spline.  The first element\n     * determines the value of the spline over the first subinterval, the\n     * second over the second, etc.   Spline function values are determined by\n     * evaluating these functions at <code>(x - knot[i])</code> where i is the\n     * knot segment to which x belongs.\n     "
    },
    {
        "class_name": "org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction",
        "src_path": "src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java",
        "signature": "org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction.n",
        "snippet": "    private final int n;",
        "begin_line": 79,
        "end_line": 79,
        "comment": "\n     * Number of spline segments = number of polynomials\n     *  = number of partition points - 1\n     "
    },
    {
        "class_name": "org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm",
        "src_path": "src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java",
        "signature": "org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm.coefficients",
        "snippet": "    private double coefficients[];",
        "begin_line": 43,
        "end_line": 43,
        "comment": "\n     * The coefficients of the polynomial, ordered by degree -- i.e.\n     * coefficients[0] is the constant term and coefficients[n] is the\n     * coefficient of x^n where n is the degree of the polynomial.\n     "
    },
    {
        "class_name": "org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm",
        "src_path": "src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java",
        "signature": "org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm.c",
        "snippet": "    private final double c[];",
        "begin_line": 48,
        "end_line": 48,
        "comment": "\n     * Centers of the Newton polynomial.\n     "
    },
    {
        "class_name": "org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm",
        "src_path": "src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java",
        "signature": "org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm.a",
        "snippet": "    private final double a[];",
        "begin_line": 54,
        "end_line": 54,
        "comment": "\n     * When all c[i] = 0, a[] becomes normal polynomial coefficients,\n     * i.e. a[i] = coefficients[i].\n     "
    },
    {
        "class_name": "org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm",
        "src_path": "src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java",
        "signature": "org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm.coefficientsComputed",
        "snippet": "    private boolean coefficientsComputed;",
        "begin_line": 59,
        "end_line": 59,
        "comment": "\n     * Whether the polynomial coefficients are available.\n     "
    },
    {
        "class_name": "org.apache.commons.math.analysis.polynomials.PolynomialsUtils",
        "src_path": "src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java",
        "signature": "org.apache.commons.math.analysis.polynomials.PolynomialsUtils.CHEBYSHEV_COEFFICIENTS",
        "snippet": "    private static final ArrayList<BigFraction> CHEBYSHEV_COEFFICIENTS;",
        "begin_line": 32,
        "end_line": 32,
        "comment": " Coefficients for Chebyshev polynomials. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.polynomials.PolynomialsUtils",
        "src_path": "src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java",
        "signature": "org.apache.commons.math.analysis.polynomials.PolynomialsUtils.HERMITE_COEFFICIENTS",
        "snippet": "    private static final ArrayList<BigFraction> HERMITE_COEFFICIENTS;",
        "begin_line": 35,
        "end_line": 35,
        "comment": " Coefficients for Hermite polynomials. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.polynomials.PolynomialsUtils",
        "src_path": "src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java",
        "signature": "org.apache.commons.math.analysis.polynomials.PolynomialsUtils.LAGUERRE_COEFFICIENTS",
        "snippet": "    private static final ArrayList<BigFraction> LAGUERRE_COEFFICIENTS;",
        "begin_line": 38,
        "end_line": 38,
        "comment": " Coefficients for Laguerre polynomials. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.polynomials.PolynomialsUtils",
        "src_path": "src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java",
        "signature": "org.apache.commons.math.analysis.polynomials.PolynomialsUtils.LEGENDRE_COEFFICIENTS",
        "snippet": "    private static final ArrayList<BigFraction> LEGENDRE_COEFFICIENTS;",
        "begin_line": 41,
        "end_line": 41,
        "comment": " Coefficients for Legendre polynomials. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.polynomials.PolynomialsUtils",
        "src_path": "src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java",
        "signature": "org.apache.commons.math.analysis.polynomials.PolynomialsUtils.coeffs",
        "snippet": "            private final BigFraction[] coeffs = { BigFraction.ZERO, BigFraction.TWO, BigFraction.ONE };",
        "begin_line": 97,
        "end_line": 97,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm",
        "src_path": "src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java",
        "signature": "org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm.coefficients",
        "snippet": "    private double coefficients[];",
        "begin_line": 43,
        "end_line": 43,
        "comment": "\n     * The coefficients of the polynomial, ordered by degree -- i.e.\n     * coefficients[0] is the constant term and coefficients[n] is the\n     * coefficient of x^n where n is the degree of the polynomial.\n     "
    },
    {
        "class_name": "org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm",
        "src_path": "src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java",
        "signature": "org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm.x",
        "snippet": "    private final double x[];",
        "begin_line": 48,
        "end_line": 48,
        "comment": "\n     * Interpolating points (abscissas).\n     "
    },
    {
        "class_name": "org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm",
        "src_path": "src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java",
        "signature": "org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm.y",
        "snippet": "    private final double y[];",
        "begin_line": 53,
        "end_line": 53,
        "comment": "\n     * Function values at interpolating points.\n     "
    },
    {
        "class_name": "org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm",
        "src_path": "src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java",
        "signature": "org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm.coefficientsComputed",
        "snippet": "    private boolean coefficientsComputed;",
        "begin_line": 58,
        "end_line": 58,
        "comment": "\n     * Whether the polynomial coefficients are available.\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.VectorialPointValuePair",
        "src_path": "src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java",
        "signature": "org.apache.commons.math.optimization.VectorialPointValuePair.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1003888396256744753L;",
        "begin_line": 33,
        "end_line": 33,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.VectorialPointValuePair",
        "src_path": "src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java",
        "signature": "org.apache.commons.math.optimization.VectorialPointValuePair.point",
        "snippet": "    private final double[] point;",
        "begin_line": 36,
        "end_line": 36,
        "comment": " Point coordinates. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.VectorialPointValuePair",
        "src_path": "src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java",
        "signature": "org.apache.commons.math.optimization.VectorialPointValuePair.value",
        "snippet": "    private final double[] value;",
        "begin_line": 39,
        "end_line": 39,
        "comment": " Vectorial value of the objective function at the point. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.OptimizationException",
        "src_path": "src/main/java/org/apache/commons/math/optimization/OptimizationException.java",
        "signature": "org.apache.commons.math.optimization.OptimizationException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -357696069587075016L;",
        "begin_line": 33,
        "end_line": 33,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.SimpleScalarValueChecker",
        "src_path": "src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java",
        "signature": "org.apache.commons.math.optimization.SimpleScalarValueChecker.DEFAULT_RELATIVE_THRESHOLD",
        "snippet": "    private static final double DEFAULT_RELATIVE_THRESHOLD = 100 * MathUtils.EPSILON;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " Default relative threshold. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.SimpleScalarValueChecker",
        "src_path": "src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java",
        "signature": "org.apache.commons.math.optimization.SimpleScalarValueChecker.DEFAULT_ABSOLUTE_THRESHOLD",
        "snippet": "    private static final double DEFAULT_ABSOLUTE_THRESHOLD = 100 * MathUtils.SAFE_MIN;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Default absolute threshold. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.SimpleScalarValueChecker",
        "src_path": "src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java",
        "signature": "org.apache.commons.math.optimization.SimpleScalarValueChecker.relativeThreshold",
        "snippet": "    private final double relativeThreshold;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " Relative tolerance threshold. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.SimpleScalarValueChecker",
        "src_path": "src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java",
        "signature": "org.apache.commons.math.optimization.SimpleScalarValueChecker.absoluteThreshold",
        "snippet": "    private final double absoluteThreshold;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Absolute tolerance threshold. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.LeastSquaresConverter",
        "src_path": "src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java",
        "signature": "org.apache.commons.math.optimization.LeastSquaresConverter.function",
        "snippet": "    private final MultivariateVectorialFunction function;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " Underlying vectorial function. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.LeastSquaresConverter",
        "src_path": "src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java",
        "signature": "org.apache.commons.math.optimization.LeastSquaresConverter.observations",
        "snippet": "    private final double[] observations;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " Observations to be compared to objective function to compute residuals. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.LeastSquaresConverter",
        "src_path": "src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java",
        "signature": "org.apache.commons.math.optimization.LeastSquaresConverter.weights",
        "snippet": "    private final double[] weights;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " Optional weights for the residuals. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.LeastSquaresConverter",
        "src_path": "src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java",
        "signature": "org.apache.commons.math.optimization.LeastSquaresConverter.scale",
        "snippet": "    private final RealMatrix scale;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " Optional scaling matrix (weight and correlations) for the residuals. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.RealPointValuePair",
        "src_path": "src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java",
        "signature": "org.apache.commons.math.optimization.RealPointValuePair.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1003888396256744753L;",
        "begin_line": 34,
        "end_line": 34,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.RealPointValuePair",
        "src_path": "src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java",
        "signature": "org.apache.commons.math.optimization.RealPointValuePair.point",
        "snippet": "    private final double[] point;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " Point coordinates. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.RealPointValuePair",
        "src_path": "src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java",
        "signature": "org.apache.commons.math.optimization.RealPointValuePair.value",
        "snippet": "    private final double value;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Value of the objective function at the point. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.SimpleVectorialPointChecker",
        "src_path": "src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java",
        "signature": "org.apache.commons.math.optimization.SimpleVectorialPointChecker.DEFAULT_RELATIVE_THRESHOLD",
        "snippet": "    private static final double DEFAULT_RELATIVE_THRESHOLD = 100 * MathUtils.EPSILON;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " Default relative threshold. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.SimpleVectorialPointChecker",
        "src_path": "src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java",
        "signature": "org.apache.commons.math.optimization.SimpleVectorialPointChecker.DEFAULT_ABSOLUTE_THRESHOLD",
        "snippet": "    private static final double DEFAULT_ABSOLUTE_THRESHOLD = 100 * MathUtils.SAFE_MIN;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Default absolute threshold. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.SimpleVectorialPointChecker",
        "src_path": "src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java",
        "signature": "org.apache.commons.math.optimization.SimpleVectorialPointChecker.relativeThreshold",
        "snippet": "    private final double relativeThreshold;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " Relative tolerance threshold. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.SimpleVectorialPointChecker",
        "src_path": "src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java",
        "signature": "org.apache.commons.math.optimization.SimpleVectorialPointChecker.absoluteThreshold",
        "snippet": "    private final double absoluteThreshold;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Absolute tolerance threshold. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.SimpleRealPointChecker",
        "src_path": "src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java",
        "signature": "org.apache.commons.math.optimization.SimpleRealPointChecker.DEFAULT_RELATIVE_THRESHOLD",
        "snippet": "    private static final double DEFAULT_RELATIVE_THRESHOLD = 100 * MathUtils.EPSILON;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " Default relative threshold. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.SimpleRealPointChecker",
        "src_path": "src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java",
        "signature": "org.apache.commons.math.optimization.SimpleRealPointChecker.DEFAULT_ABSOLUTE_THRESHOLD",
        "snippet": "    private static final double DEFAULT_ABSOLUTE_THRESHOLD = 100 * MathUtils.SAFE_MIN;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Default absolute threshold. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.SimpleRealPointChecker",
        "src_path": "src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java",
        "signature": "org.apache.commons.math.optimization.SimpleRealPointChecker.relativeThreshold",
        "snippet": "    private final double relativeThreshold;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " Relative tolerance threshold. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.SimpleRealPointChecker",
        "src_path": "src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java",
        "signature": "org.apache.commons.math.optimization.SimpleRealPointChecker.absoluteThreshold",
        "snippet": "    private final double absoluteThreshold;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Absolute tolerance threshold. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizer.optimizer",
        "snippet": "    private final MultivariateRealOptimizer optimizer;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " Underlying classical optimizer. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizer.maxIterations",
        "snippet": "    private int maxIterations;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Maximal number of iterations allowed. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizer.maxEvaluations",
        "snippet": "    private int maxEvaluations;",
        "begin_line": 49,
        "end_line": 49,
        "comment": " Maximal number of evaluations allowed. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizer.totalIterations",
        "snippet": "    private int totalIterations;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " Number of iterations already performed for all starts. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizer.totalEvaluations",
        "snippet": "    private int totalEvaluations;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " Number of evaluations already performed for all starts. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizer.starts",
        "snippet": "    private int starts;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " Number of starts to go. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizer.generator",
        "snippet": "    private RandomVectorGenerator generator;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " Random generator for multi-start. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizer.optima",
        "snippet": "    private RealPointValuePair[] optima;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " Found optima. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizer.optimizer",
        "snippet": "    private final DifferentiableMultivariateRealOptimizer optimizer;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " Underlying classical optimizer. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizer.maxIterations",
        "snippet": "    private int maxIterations;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Maximal number of iterations allowed. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizer.totalIterations",
        "snippet": "    private int totalIterations;",
        "begin_line": 49,
        "end_line": 49,
        "comment": " Number of iterations already performed for all starts. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizer.maxEvaluations",
        "snippet": "    private int maxEvaluations;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " Maximal number of evaluations allowed. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizer.totalEvaluations",
        "snippet": "    private int totalEvaluations;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " Number of evaluations already performed for all starts. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizer.totalGradientEvaluations",
        "snippet": "    private int totalGradientEvaluations;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " Number of gradient evaluations already performed for all starts. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizer.starts",
        "snippet": "    private int starts;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " Number of starts to go. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizer.generator",
        "snippet": "    private RandomVectorGenerator generator;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " Random generator for multi-start. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizer.optima",
        "snippet": "    private RealPointValuePair[] optima;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " Found optima. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.SimpleVectorialValueChecker",
        "src_path": "src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java",
        "signature": "org.apache.commons.math.optimization.SimpleVectorialValueChecker.DEFAULT_RELATIVE_THRESHOLD",
        "snippet": "    private static final double DEFAULT_RELATIVE_THRESHOLD = 100 * MathUtils.EPSILON;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " Default relative threshold. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.SimpleVectorialValueChecker",
        "src_path": "src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java",
        "signature": "org.apache.commons.math.optimization.SimpleVectorialValueChecker.DEFAULT_ABSOLUTE_THRESHOLD",
        "snippet": "    private static final double DEFAULT_ABSOLUTE_THRESHOLD = 100 * MathUtils.SAFE_MIN;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Default absolute threshold. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.SimpleVectorialValueChecker",
        "src_path": "src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java",
        "signature": "org.apache.commons.math.optimization.SimpleVectorialValueChecker.relativeThreshold",
        "snippet": "    private final double relativeThreshold;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " Relative tolerance threshold. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.SimpleVectorialValueChecker",
        "src_path": "src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java",
        "signature": "org.apache.commons.math.optimization.SimpleVectorialValueChecker.absoluteThreshold",
        "snippet": "    private final double absoluteThreshold;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Absolute tolerance threshold. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 9206382258980561530L;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizer.optimizer",
        "snippet": "    private final DifferentiableMultivariateVectorialOptimizer optimizer;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Underlying classical optimizer. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizer.maxIterations",
        "snippet": "    private int maxIterations;",
        "begin_line": 49,
        "end_line": 49,
        "comment": " Maximal number of iterations allowed. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizer.totalIterations",
        "snippet": "    private int totalIterations;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " Number of iterations already performed for all starts. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizer.maxEvaluations",
        "snippet": "    private int maxEvaluations;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " Maximal number of evaluations allowed. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizer.totalEvaluations",
        "snippet": "    private int totalEvaluations;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " Number of evaluations already performed for all starts. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizer.totalJacobianEvaluations",
        "snippet": "    private int totalJacobianEvaluations;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " Number of jacobian evaluations already performed for all starts. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizer.starts",
        "snippet": "    private int starts;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " Number of starts to go. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizer.generator",
        "snippet": "    private RandomVectorGenerator generator;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " Random generator for multi-start. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizer.optima",
        "snippet": "    private VectorialPointValuePair[] optima;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " Found optima. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 5983375963110961019L;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer.optimizer",
        "snippet": "    private final UnivariateRealOptimizer optimizer;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " Underlying classical optimizer. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer.maxIterations",
        "snippet": "    private int maxIterations;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Maximal number of iterations allowed. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer.maxEvaluations",
        "snippet": "    private int maxEvaluations;",
        "begin_line": 49,
        "end_line": 49,
        "comment": " Maximal number of evaluations allowed. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer.totalIterations",
        "snippet": "    private int totalIterations;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " Number of iterations already performed for all starts. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer.totalEvaluations",
        "snippet": "    private int totalEvaluations;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " Number of evaluations already performed for all starts. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer.starts",
        "snippet": "    private int starts;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " Number of starts to go. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer.generator",
        "snippet": "    private RandomGenerator generator;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " Random generator for multi-start. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer.optima",
        "snippet": "    private double[] optima;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " Found optima. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer.optimaValues",
        "snippet": "    private double[] optimaValues;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " Found function values at optima. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.MultiDirectional",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java",
        "signature": "org.apache.commons.math.optimization.direct.MultiDirectional.khi",
        "snippet": "    private final double khi;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " Expansion coefficient. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.MultiDirectional",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java",
        "signature": "org.apache.commons.math.optimization.direct.MultiDirectional.gamma",
        "snippet": "    private final double gamma;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Contraction coefficient. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer.EQUAL_VERTICES_MESSAGE",
        "snippet": "    private static final String EQUAL_VERTICES_MESSAGE =\n        \"equal vertices {0} and {1} in simplex configuration\";",
        "begin_line": 91,
        "end_line": 92,
        "comment": " Message for equal vertices. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer.DIMENSION_MISMATCH_MESSAGE",
        "snippet": "    private static final String DIMENSION_MISMATCH_MESSAGE =\n        \"dimension mismatch {0} != {1}\";",
        "begin_line": 95,
        "end_line": 96,
        "comment": " Message for dimension mismatch. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer.simplex",
        "snippet": "    protected RealPointValuePair[] simplex;",
        "begin_line": 99,
        "end_line": 99,
        "comment": " Simplex. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer.f",
        "snippet": "    private MultivariateRealFunction f;",
        "begin_line": 102,
        "end_line": 102,
        "comment": " Objective function. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer.checker",
        "snippet": "    private RealConvergenceChecker checker;",
        "begin_line": 105,
        "end_line": 105,
        "comment": " Convergence checker. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer.maxIterations",
        "snippet": "    private int maxIterations;",
        "begin_line": 108,
        "end_line": 108,
        "comment": " Maximal number of iterations allowed. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer.iterations",
        "snippet": "    private int iterations;",
        "begin_line": 111,
        "end_line": 111,
        "comment": " Number of iterations already performed. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer.maxEvaluations",
        "snippet": "    private int maxEvaluations;",
        "begin_line": 114,
        "end_line": 114,
        "comment": " Maximal number of evaluations allowed. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer.evaluations",
        "snippet": "    private int evaluations;",
        "begin_line": 117,
        "end_line": 117,
        "comment": " Number of evaluations already performed. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer.startConfiguration",
        "snippet": "    private double[][] startConfiguration;",
        "begin_line": 120,
        "end_line": 120,
        "comment": " Start simplex configuration. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.NelderMead",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java",
        "signature": "org.apache.commons.math.optimization.direct.NelderMead.rho",
        "snippet": "    private final double rho;",
        "begin_line": 36,
        "end_line": 36,
        "comment": " Reflection coefficient. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.NelderMead",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java",
        "signature": "org.apache.commons.math.optimization.direct.NelderMead.khi",
        "snippet": "    private final double khi;",
        "begin_line": 39,
        "end_line": 39,
        "comment": " Expansion coefficient. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.NelderMead",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java",
        "signature": "org.apache.commons.math.optimization.direct.NelderMead.gamma",
        "snippet": "    private final double gamma;",
        "begin_line": 42,
        "end_line": 42,
        "comment": " Contraction coefficient. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.NelderMead",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java",
        "signature": "org.apache.commons.math.optimization.direct.NelderMead.sigma",
        "snippet": "    private final double sigma;",
        "begin_line": 45,
        "end_line": 45,
        "comment": " Shrinkage coefficient. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.univariate.BrentOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java",
        "signature": "org.apache.commons.math.optimization.univariate.BrentOptimizer.GOLDEN_SECTION",
        "snippet": "    private static final double GOLDEN_SECTION = 0.5 * (3 - Math.sqrt(5));",
        "begin_line": 37,
        "end_line": 37,
        "comment": "\n     * Golden section.\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer.resultComputed",
        "snippet": "    protected boolean resultComputed;",
        "begin_line": 38,
        "end_line": 38,
        "comment": " Indicates where a root has been computed. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer.result",
        "snippet": "    protected double result;",
        "begin_line": 41,
        "end_line": 41,
        "comment": " The last computed root. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer.functionValue",
        "snippet": "    protected double functionValue;",
        "begin_line": 44,
        "end_line": 44,
        "comment": " Value of the function at the last computed result. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer.maxEvaluations",
        "snippet": "    private int maxEvaluations;",
        "begin_line": 47,
        "end_line": 47,
        "comment": " Maximal number of evaluations allowed. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java",
        "signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer.evaluations",
        "snippet": "    private int evaluations;",
        "begin_line": 50,
        "end_line": 50,
        "comment": " Number of evaluations already performed. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.fitting.PolynomialFitter",
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java",
        "signature": "org.apache.commons.math.optimization.fitting.PolynomialFitter.fitter",
        "snippet": "    private final CurveFitter fitter;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " Fitter for the coefficients. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.fitting.PolynomialFitter",
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java",
        "signature": "org.apache.commons.math.optimization.fitting.PolynomialFitter.degree",
        "snippet": "    private final int degree;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Polynomial degree. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.fitting.HarmonicCoefficientsGuesser",
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java",
        "signature": "org.apache.commons.math.optimization.fitting.HarmonicCoefficientsGuesser.observations",
        "snippet": "    private final WeightedObservedPoint[] observations;",
        "begin_line": 128,
        "end_line": 128,
        "comment": " Sampled observations. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.fitting.HarmonicCoefficientsGuesser",
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java",
        "signature": "org.apache.commons.math.optimization.fitting.HarmonicCoefficientsGuesser.a",
        "snippet": "    private double a;",
        "begin_line": 131,
        "end_line": 131,
        "comment": " Guessed amplitude. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.fitting.HarmonicCoefficientsGuesser",
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java",
        "signature": "org.apache.commons.math.optimization.fitting.HarmonicCoefficientsGuesser.omega",
        "snippet": "    private double omega;",
        "begin_line": 134,
        "end_line": 134,
        "comment": " Guessed pulsation &omega;. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.fitting.HarmonicCoefficientsGuesser",
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java",
        "signature": "org.apache.commons.math.optimization.fitting.HarmonicCoefficientsGuesser.phi",
        "snippet": "    private double phi;",
        "begin_line": 137,
        "end_line": 137,
        "comment": " Guessed phase &phi;. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.fitting.HarmonicFitter",
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java",
        "signature": "org.apache.commons.math.optimization.fitting.HarmonicFitter.fitter",
        "snippet": "    private final CurveFitter fitter;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " Fitter for the coefficients. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.fitting.HarmonicFitter",
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java",
        "signature": "org.apache.commons.math.optimization.fitting.HarmonicFitter.parameters",
        "snippet": "    private double[] parameters;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Values for amplitude, pulsation &omega; and phase &phi;. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.fitting.WeightedObservedPoint",
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java",
        "signature": "org.apache.commons.math.optimization.fitting.WeightedObservedPoint.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 5306874947404636157L;",
        "begin_line": 31,
        "end_line": 31,
        "comment": " Serializable version id. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.fitting.WeightedObservedPoint",
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java",
        "signature": "org.apache.commons.math.optimization.fitting.WeightedObservedPoint.weight",
        "snippet": "    private final double weight;",
        "begin_line": 34,
        "end_line": 34,
        "comment": " Weight of the measurement in the fitting process. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.fitting.WeightedObservedPoint",
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java",
        "signature": "org.apache.commons.math.optimization.fitting.WeightedObservedPoint.x",
        "snippet": "    private final double x;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " Abscissa of the point. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.fitting.WeightedObservedPoint",
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java",
        "signature": "org.apache.commons.math.optimization.fitting.WeightedObservedPoint.y",
        "snippet": "    private final double y;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Observed value of the function at x. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.fitting.CurveFitter",
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java",
        "signature": "org.apache.commons.math.optimization.fitting.CurveFitter.optimizer",
        "snippet": "    private final DifferentiableMultivariateVectorialOptimizer optimizer;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Optimizer to use for the fitting. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.fitting.CurveFitter",
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java",
        "signature": "org.apache.commons.math.optimization.fitting.CurveFitter.observations",
        "snippet": "    private final List<WeightedObservedPoint> observations;",
        "begin_line": 49,
        "end_line": 49,
        "comment": " Observed points. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.fitting.TheoreticalValuesFunction",
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java",
        "signature": "org.apache.commons.math.optimization.fitting.TheoreticalValuesFunction.f",
        "snippet": "        private final ParametricRealFunction f;",
        "begin_line": 154,
        "end_line": 154,
        "comment": " Function to fit. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.fitting.HarmonicFunction",
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java",
        "signature": "org.apache.commons.math.optimization.fitting.HarmonicFunction.a",
        "snippet": "    private final double a;",
        "begin_line": 29,
        "end_line": 29,
        "comment": " Amplitude a. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.fitting.HarmonicFunction",
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java",
        "signature": "org.apache.commons.math.optimization.fitting.HarmonicFunction.omega",
        "snippet": "    private final double omega;",
        "begin_line": 32,
        "end_line": 32,
        "comment": " Pulsation &omega;. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.fitting.HarmonicFunction",
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java",
        "signature": "org.apache.commons.math.optimization.fitting.HarmonicFunction.phi",
        "snippet": "    private final double phi;",
        "begin_line": 35,
        "end_line": 35,
        "comment": " Phase &phi;. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.AbstractLinearOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java",
        "signature": "org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.DEFAULT_MAX_ITERATIONS",
        "snippet": "    public static final int DEFAULT_MAX_ITERATIONS = 100;",
        "begin_line": 38,
        "end_line": 38,
        "comment": " Default maximal number of iterations allowed. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.AbstractLinearOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java",
        "signature": "org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.function",
        "snippet": "    protected LinearObjectiveFunction function;",
        "begin_line": 44,
        "end_line": 44,
        "comment": "\n     * Linear objective function.\n     * @since 2.1\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.AbstractLinearOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java",
        "signature": "org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.linearConstraints",
        "snippet": "    protected Collection<LinearConstraint> linearConstraints;",
        "begin_line": 50,
        "end_line": 50,
        "comment": "\n     * Linear constraints.\n     * @since 2.1\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.AbstractLinearOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java",
        "signature": "org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.goal",
        "snippet": "    protected GoalType goal;",
        "begin_line": 56,
        "end_line": 56,
        "comment": "\n     * Type of optimization goal: either {@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}.\n     * @since 2.1\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.AbstractLinearOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java",
        "signature": "org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.nonNegative",
        "snippet": "    protected boolean nonNegative;",
        "begin_line": 62,
        "end_line": 62,
        "comment": "\n     * Whether to restrict the variables to non-negative values.\n     * @since 2.1\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.AbstractLinearOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java",
        "signature": "org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.maxIterations",
        "snippet": "    private int maxIterations;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " Maximal number of iterations allowed. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.AbstractLinearOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java",
        "signature": "org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.iterations",
        "snippet": "    private int iterations;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " Number of iterations already performed. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.NoFeasibleSolutionException",
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java",
        "signature": "org.apache.commons.math.optimization.linear.NoFeasibleSolutionException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3044253632189082760L;",
        "begin_line": 31,
        "end_line": 31,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.UnboundedSolutionException",
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java",
        "signature": "org.apache.commons.math.optimization.linear.UnboundedSolutionException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 940539497277290619L;",
        "begin_line": 31,
        "end_line": 31,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.LinearConstraint",
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/LinearConstraint.java",
        "signature": "org.apache.commons.math.optimization.linear.LinearConstraint.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -764632794033034092L;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.LinearConstraint",
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/LinearConstraint.java",
        "signature": "org.apache.commons.math.optimization.linear.LinearConstraint.coefficients",
        "snippet": "    private final transient RealVector coefficients;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " Coefficients of the constraint (left hand side). "
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.LinearConstraint",
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/LinearConstraint.java",
        "signature": "org.apache.commons.math.optimization.linear.LinearConstraint.relationship",
        "snippet": "    private final Relationship relationship;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " Relationship between left and right hand sides (=, &lt;=, >=). "
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.LinearConstraint",
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/LinearConstraint.java",
        "signature": "org.apache.commons.math.optimization.linear.LinearConstraint.value",
        "snippet": "    private final double value;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " Value of the constraint (right hand side). "
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolver",
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON",
        "snippet": "    private static final double DEFAULT_EPSILON = 1.0e-6;",
        "begin_line": 36,
        "end_line": 36,
        "comment": " Default amount of error to accept in floating point comparisons. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexSolver",
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexSolver.epsilon",
        "snippet": "    protected final double epsilon;",
        "begin_line": 39,
        "end_line": 39,
        "comment": " Amount of error to accept in floating point comparisons. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexTableau",
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL",
        "snippet": "    private static final String NEGATIVE_VAR_COLUMN_LABEL = \"x-\";",
        "begin_line": 66,
        "end_line": 66,
        "comment": " Column label for negative vars. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexTableau",
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexTableau.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -1369660067587938365L;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexTableau",
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexTableau.f",
        "snippet": "    private final LinearObjectiveFunction f;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " Linear objective function. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexTableau",
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexTableau.constraints",
        "snippet": "    private final List<LinearConstraint> constraints;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " Linear constraints. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexTableau",
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexTableau.restrictToNonNegative",
        "snippet": "    private final boolean restrictToNonNegative;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " Whether to restrict the variables to non-negative values. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexTableau",
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexTableau.columnLabels",
        "snippet": "    private final List<String> columnLabels = new ArrayList<String>();",
        "begin_line": 81,
        "end_line": 81,
        "comment": " The variables each column represents "
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexTableau",
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexTableau.tableau",
        "snippet": "    private transient RealMatrix tableau;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " Simple tableau. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexTableau",
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexTableau.numDecisionVariables",
        "snippet": "    private final int numDecisionVariables;",
        "begin_line": 87,
        "end_line": 87,
        "comment": " Number of decision variables. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexTableau",
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexTableau.numSlackVariables",
        "snippet": "    private final int numSlackVariables;",
        "begin_line": 90,
        "end_line": 90,
        "comment": " Number of slack variables. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexTableau",
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexTableau.numArtificialVariables",
        "snippet": "    private int numArtificialVariables;",
        "begin_line": 93,
        "end_line": 93,
        "comment": " Number of artificial variables. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.SimplexTableau",
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "signature": "org.apache.commons.math.optimization.linear.SimplexTableau.epsilon",
        "snippet": "    private final double epsilon;",
        "begin_line": 96,
        "end_line": 96,
        "comment": " Amount of error to accept in floating point comparisons. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.LinearObjectiveFunction",
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java",
        "signature": "org.apache.commons.math.optimization.linear.LinearObjectiveFunction.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -4531815507568396090L;",
        "begin_line": 45,
        "end_line": 45,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.LinearObjectiveFunction",
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java",
        "signature": "org.apache.commons.math.optimization.linear.LinearObjectiveFunction.coefficients",
        "snippet": "    private final transient RealVector coefficients;",
        "begin_line": 48,
        "end_line": 48,
        "comment": " Coefficients of the constraint (c<sub>i</sub>). "
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.LinearObjectiveFunction",
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java",
        "signature": "org.apache.commons.math.optimization.linear.LinearObjectiveFunction.constantTerm",
        "snippet": "    private final double constantTerm;",
        "begin_line": 51,
        "end_line": 51,
        "comment": " Constant term of the linear equation. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.linear.Relationship",
        "src_path": "src/main/java/org/apache/commons/math/optimization/linear/Relationship.java",
        "signature": "org.apache.commons.math.optimization.linear.Relationship.stringValue",
        "snippet": "    private String stringValue;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " Display string for the relationship. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.GaussNewtonOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.GaussNewtonOptimizer.useLU",
        "snippet": "    private final boolean useLU;",
        "begin_line": 47,
        "end_line": 47,
        "comment": " Indicator for using LU decomposition. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizer.updateFormula",
        "snippet": "    private final ConjugateGradientFormula updateFormula;",
        "begin_line": 48,
        "end_line": 48,
        "comment": " Update formula for the beta parameter. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizer.preconditioner",
        "snippet": "    private Preconditioner preconditioner;",
        "begin_line": 51,
        "end_line": 51,
        "comment": " Preconditioner (may be null). "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizer.solver",
        "snippet": "    private UnivariateRealSolver solver;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " solver to use in the line search (may be null). "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizer.initialStep",
        "snippet": "    private double initialStep;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " Initial step used to bracket the optimum in line search. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LineSearchFunction",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.LineSearchFunction.searchDirection",
        "snippet": "        private final double[] searchDirection;",
        "begin_line": 260,
        "end_line": 260,
        "comment": " Search direction. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.DEFAULT_MAX_ITERATIONS",
        "snippet": "    public static final int DEFAULT_MAX_ITERATIONS = 100;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Default maximal number of iterations allowed. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.checker",
        "snippet": "    protected VectorialConvergenceChecker checker;",
        "begin_line": 49,
        "end_line": 49,
        "comment": " Convergence checker. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.jacobian",
        "snippet": "    protected double[][] jacobian;",
        "begin_line": 58,
        "end_line": 58,
        "comment": "\n     * Jacobian matrix.\n     * <p>This matrix is in canonical form just after the calls to\n     * {@link #updateJacobian()}, but may be modified by the solver\n     * in the derived class (the {@link LevenbergMarquardtOptimizer\n     * Levenberg-Marquardt optimizer} does this).</p>\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.cols",
        "snippet": "    protected int cols;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " Number of columns of the jacobian matrix. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.rows",
        "snippet": "    protected int rows;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " Number of rows of the jacobian matrix. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.targetValues",
        "snippet": "    protected double[] targetValues;",
        "begin_line": 70,
        "end_line": 70,
        "comment": "\n     * Target value for the objective functions at optimum.\n     * @since 2.1\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.residualsWeights",
        "snippet": "    protected double[] residualsWeights;",
        "begin_line": 76,
        "end_line": 76,
        "comment": "\n     * Weight for the least squares cost computation.\n     * @since 2.1\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.point",
        "snippet": "    protected double[] point;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " Current point. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.objective",
        "snippet": "    protected double[] objective;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " Current objective function value. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.residuals",
        "snippet": "    protected double[] residuals;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " Current residuals. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.cost",
        "snippet": "    protected double cost;",
        "begin_line": 88,
        "end_line": 88,
        "comment": " Cost value (square root of the sum of the residuals). "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.maxIterations",
        "snippet": "    private int maxIterations;",
        "begin_line": 91,
        "end_line": 91,
        "comment": " Maximal number of iterations allowed. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.iterations",
        "snippet": "    private int iterations;",
        "begin_line": 94,
        "end_line": 94,
        "comment": " Number of iterations already performed. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.maxEvaluations",
        "snippet": "    private int maxEvaluations;",
        "begin_line": 97,
        "end_line": 97,
        "comment": " Maximal number of evaluations allowed. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.objectiveEvaluations",
        "snippet": "    private int objectiveEvaluations;",
        "begin_line": 100,
        "end_line": 100,
        "comment": " Number of evaluations already performed. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.jacobianEvaluations",
        "snippet": "    private int jacobianEvaluations;",
        "begin_line": 103,
        "end_line": 103,
        "comment": " Number of jacobian evaluations. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.function",
        "snippet": "    private DifferentiableMultivariateVectorialFunction function;",
        "begin_line": 106,
        "end_line": 106,
        "comment": " Objective function. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.jF",
        "snippet": "    private MultivariateMatrixFunction jF;",
        "begin_line": 109,
        "end_line": 109,
        "comment": " Objective function derivatives. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer.DEFAULT_MAX_ITERATIONS",
        "snippet": "    public static final int DEFAULT_MAX_ITERATIONS = 100;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " Default maximal number of iterations allowed. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer.checker",
        "snippet": "    protected RealConvergenceChecker checker;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Convergence checker. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer.goal",
        "snippet": "    protected GoalType goal;",
        "begin_line": 52,
        "end_line": 52,
        "comment": "\n     * Type of optimization.\n     * @since 2.1\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer.point",
        "snippet": "    protected double[] point;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " Current point set. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer.maxIterations",
        "snippet": "    private int maxIterations;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " Maximal number of iterations allowed. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer.iterations",
        "snippet": "    private int iterations;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " Number of iterations already performed. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer.maxEvaluations",
        "snippet": "    private int maxEvaluations;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " Maximal number of evaluations allowed. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer.evaluations",
        "snippet": "    private int evaluations;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " Number of evaluations already performed. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer.gradientEvaluations",
        "snippet": "    private int gradientEvaluations;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " Number of gradient evaluations. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer.function",
        "snippet": "    private DifferentiableMultivariateRealFunction function;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " Objective function. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer.gradient",
        "snippet": "    private MultivariateVectorialFunction gradient;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " Objective function gradient. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.solvedCols",
        "snippet": "    private int solvedCols;",
        "begin_line": 106,
        "end_line": 106,
        "comment": " Number of solved point. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.diagR",
        "snippet": "    private double[] diagR;",
        "begin_line": 109,
        "end_line": 109,
        "comment": " Diagonal elements of the R matrix in the Q.R. decomposition. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.jacNorm",
        "snippet": "    private double[] jacNorm;",
        "begin_line": 112,
        "end_line": 112,
        "comment": " Norms of the columns of the jacobian matrix. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.beta",
        "snippet": "    private double[] beta;",
        "begin_line": 115,
        "end_line": 115,
        "comment": " Coefficients of the Householder transforms vectors. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.permutation",
        "snippet": "    private int[] permutation;",
        "begin_line": 118,
        "end_line": 118,
        "comment": " Columns permutation array. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.rank",
        "snippet": "    private int rank;",
        "begin_line": 121,
        "end_line": 121,
        "comment": " Rank of the jacobian matrix. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.lmPar",
        "snippet": "    private double lmPar;",
        "begin_line": 124,
        "end_line": 124,
        "comment": " Levenberg-Marquardt parameter. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.lmDir",
        "snippet": "    private double[] lmDir;",
        "begin_line": 127,
        "end_line": 127,
        "comment": " Parameters evolution direction associated with lmPar. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.initialStepBoundFactor",
        "snippet": "    private double initialStepBoundFactor;",
        "begin_line": 130,
        "end_line": 130,
        "comment": " Positive input variable used in determining the initial step bound. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.costRelativeTolerance",
        "snippet": "    private double costRelativeTolerance;",
        "begin_line": 133,
        "end_line": 133,
        "comment": " Desired relative error in the sum of squares. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.parRelativeTolerance",
        "snippet": "    private double parRelativeTolerance;",
        "begin_line": 136,
        "end_line": 136,
        "comment": "  Desired relative error in the approximate solution parameters. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.orthoTolerance",
        "snippet": "    private double orthoTolerance;",
        "begin_line": 140,
        "end_line": 140,
        "comment": " Desired max cosine on the orthogonality between the function vector\n     * and the columns of the jacobian. "
    },
    {
        "class_name": "org.apache.commons.math.complex.Complex",
        "src_path": "src/main/java/org/apache/commons/math/complex/Complex.java",
        "signature": "org.apache.commons.math.complex.Complex.I",
        "snippet": "    public static final Complex I = new Complex(0.0, 1.0);",
        "begin_line": 49,
        "end_line": 49,
        "comment": " The square root of -1. A number representing \"0.0 + 1.0i\" "
    },
    {
        "class_name": "org.apache.commons.math.complex.Complex",
        "src_path": "src/main/java/org/apache/commons/math/complex/Complex.java",
        "signature": "org.apache.commons.math.complex.Complex.NaN",
        "snippet": "    public static final Complex NaN = new Complex(Double.NaN, Double.NaN);",
        "begin_line": 53,
        "end_line": 53,
        "comment": " A complex number representing \"NaN + NaNi\" "
    },
    {
        "class_name": "org.apache.commons.math.complex.Complex",
        "src_path": "src/main/java/org/apache/commons/math/complex/Complex.java",
        "signature": "org.apache.commons.math.complex.Complex.INF",
        "snippet": "    public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);",
        "begin_line": 57,
        "end_line": 57,
        "comment": " A complex number representing \"+INF + INFi\" "
    },
    {
        "class_name": "org.apache.commons.math.complex.Complex",
        "src_path": "src/main/java/org/apache/commons/math/complex/Complex.java",
        "signature": "org.apache.commons.math.complex.Complex.ONE",
        "snippet": "    public static final Complex ONE = new Complex(1.0, 0.0);",
        "begin_line": 60,
        "end_line": 60,
        "comment": " A complex number representing \"1.0 + 0.0i\" "
    },
    {
        "class_name": "org.apache.commons.math.complex.Complex",
        "src_path": "src/main/java/org/apache/commons/math/complex/Complex.java",
        "signature": "org.apache.commons.math.complex.Complex.ZERO",
        "snippet": "    public static final Complex ZERO = new Complex(0.0, 0.0);",
        "begin_line": 63,
        "end_line": 63,
        "comment": " A complex number representing \"0.0 + 0.0i\" "
    },
    {
        "class_name": "org.apache.commons.math.complex.Complex",
        "src_path": "src/main/java/org/apache/commons/math/complex/Complex.java",
        "signature": "org.apache.commons.math.complex.Complex.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -6195664516687396620L;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.complex.Complex",
        "src_path": "src/main/java/org/apache/commons/math/complex/Complex.java",
        "signature": "org.apache.commons.math.complex.Complex.imaginary",
        "snippet": "    private final double imaginary;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " The imaginary part. "
    },
    {
        "class_name": "org.apache.commons.math.complex.Complex",
        "src_path": "src/main/java/org/apache/commons/math/complex/Complex.java",
        "signature": "org.apache.commons.math.complex.Complex.real",
        "snippet": "    private final double real;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " The real part. "
    },
    {
        "class_name": "org.apache.commons.math.complex.Complex",
        "src_path": "src/main/java/org/apache/commons/math/complex/Complex.java",
        "signature": "org.apache.commons.math.complex.Complex.isNaN",
        "snippet": "    private final transient boolean isNaN;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " Record whether this complex number is equal to NaN. "
    },
    {
        "class_name": "org.apache.commons.math.complex.Complex",
        "src_path": "src/main/java/org/apache/commons/math/complex/Complex.java",
        "signature": "org.apache.commons.math.complex.Complex.isInfinite",
        "snippet": "    private final transient boolean isInfinite;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " Record whether this complex number is infinite. "
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexField",
        "src_path": "src/main/java/org/apache/commons/math/complex/ComplexField.java",
        "signature": "org.apache.commons.math.complex.ComplexField.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -6130362688700788798L;",
        "begin_line": 36,
        "end_line": 36,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.complex.LazyHolder",
        "src_path": "src/main/java/org/apache/commons/math/complex/ComplexField.java",
        "signature": "org.apache.commons.math.complex.LazyHolder.INSTANCE",
        "snippet": "        private static final ComplexField INSTANCE = new ComplexField();",
        "begin_line": 66,
        "end_line": 66,
        "comment": " Cached field instance. "
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormat",
        "src_path": "src/main/java/org/apache/commons/math/complex/ComplexFormat.java",
        "signature": "org.apache.commons.math.complex.ComplexFormat.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3343698360149467646L;",
        "begin_line": 39,
        "end_line": 39,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormat",
        "src_path": "src/main/java/org/apache/commons/math/complex/ComplexFormat.java",
        "signature": "org.apache.commons.math.complex.ComplexFormat.DEFAULT_IMAGINARY_CHARACTER",
        "snippet": "    private static final String DEFAULT_IMAGINARY_CHARACTER = \"i\";",
        "begin_line": 42,
        "end_line": 42,
        "comment": " The default imaginary character. "
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormat",
        "src_path": "src/main/java/org/apache/commons/math/complex/ComplexFormat.java",
        "signature": "org.apache.commons.math.complex.ComplexFormat.imaginaryCharacter",
        "snippet": "    private String imaginaryCharacter;",
        "begin_line": 45,
        "end_line": 45,
        "comment": " The notation used to signify the imaginary part of the complex number. "
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormat",
        "src_path": "src/main/java/org/apache/commons/math/complex/ComplexFormat.java",
        "signature": "org.apache.commons.math.complex.ComplexFormat.imaginaryFormat",
        "snippet": "    private NumberFormat imaginaryFormat;",
        "begin_line": 48,
        "end_line": 48,
        "comment": " The format used for the imaginary part. "
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexFormat",
        "src_path": "src/main/java/org/apache/commons/math/complex/ComplexFormat.java",
        "signature": "org.apache.commons.math.complex.ComplexFormat.realFormat",
        "snippet": "    private NumberFormat realFormat;",
        "begin_line": 51,
        "end_line": 51,
        "comment": " The format used for the real part. "
    },
    {
        "class_name": "org.apache.commons.math.distribution.SaddlePointExpansion",
        "src_path": "src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java",
        "signature": "org.apache.commons.math.distribution.SaddlePointExpansion.HALF_LOG_2_PI",
        "snippet": "    private static final double HALF_LOG_2_PI = 0.5 * Math.log(MathUtils.TWO_PI);",
        "begin_line": 48,
        "end_line": 48,
        "comment": " 1/2 * log(2 &#960;). "
    },
    {
        "class_name": "org.apache.commons.math.distribution.SaddlePointExpansion",
        "src_path": "src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java",
        "signature": "org.apache.commons.math.distribution.SaddlePointExpansion.EXACT_STIRLING_ERRORS",
        "snippet": "    private static final double[] EXACT_STIRLING_ERRORS = { 0.0, /* 0.0 */\n    0.1534264097200273452913848, /* 0.5 */\n    0.0810614667953272582196702, /* 1.0 */\n    0.0548141210519176538961390, /* 1.5 */\n    0.0413406959554092940938221, /* 2.0 */\n    0.03316287351993628748511048, /* 2.5 */\n    0.02767792568499833914878929, /* 3.0 */\n    0.02374616365629749597132920, /* 3.5 */\n    0.02079067210376509311152277, /* 4.0 */\n    0.01848845053267318523077934, /* 4.5 */\n    0.01664469118982119216319487, /* 5.0 */\n    0.01513497322191737887351255, /* 5.5 */\n    0.01387612882307074799874573, /* 6.0 */\n    0.01281046524292022692424986, /* 6.5 */\n    0.01189670994589177009505572, /* 7.0 */\n    0.01110455975820691732662991, /* 7.5 */\n    0.010411265261972096497478567, /* 8.0 */\n    0.009799416126158803298389475, /* 8.5 */\n    0.009255462182712732917728637, /* 9.0 */\n    0.008768700134139385462952823, /* 9.5 */\n    0.008330563433362871256469318, /* 10.0 */\n    0.007934114564314020547248100, /* 10.5 */\n    0.007573675487951840794972024, /* 11.0 */\n    0.007244554301320383179543912, /* 11.5 */\n    0.006942840107209529865664152, /* 12.0 */\n    0.006665247032707682442354394, /* 12.5 */\n    0.006408994188004207068439631, /* 13.0 */\n    0.006171712263039457647532867, /* 13.5 */\n    0.005951370112758847735624416, /* 14.0 */\n    0.005746216513010115682023589, /* 14.5 */\n    0.005554733551962801371038690 /* 15.0 */\n    };",
        "begin_line": 51,
        "end_line": 82,
        "comment": " exact Stirling expansion error for certain values. "
    },
    {
        "class_name": "org.apache.commons.math.distribution.ExponentialDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.ExponentialDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
        "snippet": "    public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;",
        "begin_line": 36,
        "end_line": 36,
        "comment": "\n     * Default inverse cumulative probability accuracy\n     * @since 2.1\n     "
    },
    {
        "class_name": "org.apache.commons.math.distribution.ExponentialDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.ExponentialDistributionImpl.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 2401296428283614780L;",
        "begin_line": 39,
        "end_line": 39,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.distribution.ExponentialDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.ExponentialDistributionImpl.mean",
        "snippet": "    private double mean;",
        "begin_line": 42,
        "end_line": 42,
        "comment": " The mean of this distribution. "
    },
    {
        "class_name": "org.apache.commons.math.distribution.ExponentialDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.ExponentialDistributionImpl.solverAbsoluteAccuracy",
        "snippet": "    private final double solverAbsoluteAccuracy;",
        "begin_line": 45,
        "end_line": 45,
        "comment": " Inverse cumulative probability accuracy "
    },
    {
        "class_name": "org.apache.commons.math.distribution.AbstractIntegerDistribution",
        "src_path": "src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java",
        "signature": "org.apache.commons.math.distribution.AbstractIntegerDistribution.WRONG_ORDER_ENDPOINTS_MESSAGE",
        "snippet": "    private static final String WRONG_ORDER_ENDPOINTS_MESSAGE =\n        \"lower endpoint ({0}) must be less than or equal to upper endpoint ({1})\";",
        "begin_line": 37,
        "end_line": 38,
        "comment": " Message for endpoints in wrong order. "
    },
    {
        "class_name": "org.apache.commons.math.distribution.AbstractIntegerDistribution",
        "src_path": "src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java",
        "signature": "org.apache.commons.math.distribution.AbstractIntegerDistribution.OUT_OF_RANGE_POINT",
        "snippet": "    private static final String OUT_OF_RANGE_POINT =\n        \"{0} out of [{1}, {2}] range\";",
        "begin_line": 41,
        "end_line": 42,
        "comment": " Message for out of range point. "
    },
    {
        "class_name": "org.apache.commons.math.distribution.AbstractIntegerDistribution",
        "src_path": "src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java",
        "signature": "org.apache.commons.math.distribution.AbstractIntegerDistribution.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -1146319659338487221L;",
        "begin_line": 45,
        "end_line": 45,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
        "snippet": "    public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;",
        "begin_line": 36,
        "end_line": 36,
        "comment": "\n     * Default inverse cumulative probability accuracy\n     * @since 2.1\n     "
    },
    {
        "class_name": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -8352658048349159782L;",
        "begin_line": 39,
        "end_line": 39,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.gamma",
        "snippet": "    private GammaDistribution gamma;",
        "begin_line": 42,
        "end_line": 42,
        "comment": " Internal Gamma distribution. "
    },
    {
        "class_name": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.solverAbsoluteAccuracy",
        "snippet": "    private final double solverAbsoluteAccuracy;",
        "begin_line": 45,
        "end_line": 45,
        "comment": " Inverse cumulative probability accuracy "
    },
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
        "snippet": "    public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;",
        "begin_line": 40,
        "end_line": 40,
        "comment": "\n     * Default inverse cumulative probability accuracy\n     * @since 2.1\n     "
    },
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionImpl.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 8589540077390120676L;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI",
        "snippet": "    private static final double SQRT2PI = Math.sqrt(2 * Math.PI);",
        "begin_line": 46,
        "end_line": 46,
        "comment": " &sqrt;(2 &pi;) "
    },
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionImpl.mean",
        "snippet": "    private double mean = 0;",
        "begin_line": 49,
        "end_line": 49,
        "comment": " The mean of this distribution. "
    },
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionImpl.standardDeviation",
        "snippet": "    private double standardDeviation = 1;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " The standard deviation of this distribution. "
    },
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionImpl.solverAbsoluteAccuracy",
        "snippet": "    private final double solverAbsoluteAccuracy;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " Inverse cumulative probability accuracy "
    },
    {
        "class_name": "org.apache.commons.math.distribution.CauchyDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.CauchyDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
        "snippet": "    public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;",
        "begin_line": 38,
        "end_line": 38,
        "comment": "\n     * Default inverse cumulative probability accuracy\n     * @since 2.1\n     "
    },
    {
        "class_name": "org.apache.commons.math.distribution.CauchyDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.CauchyDistributionImpl.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 8589540077390120676L;",
        "begin_line": 41,
        "end_line": 41,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.distribution.CauchyDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.CauchyDistributionImpl.median",
        "snippet": "    private double median = 0;",
        "begin_line": 44,
        "end_line": 44,
        "comment": " The median of this distribution. "
    },
    {
        "class_name": "org.apache.commons.math.distribution.CauchyDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.CauchyDistributionImpl.scale",
        "snippet": "    private double scale = 1;",
        "begin_line": 47,
        "end_line": 47,
        "comment": " The scale of this distribution. "
    },
    {
        "class_name": "org.apache.commons.math.distribution.CauchyDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.CauchyDistributionImpl.solverAbsoluteAccuracy",
        "snippet": "    private final double solverAbsoluteAccuracy;",
        "begin_line": 50,
        "end_line": 50,
        "comment": " Inverse cumulative probability accuracy "
    },
    {
        "class_name": "org.apache.commons.math.distribution.PascalDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.PascalDistributionImpl.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 6751309484392813623L;",
        "begin_line": 35,
        "end_line": 35,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.distribution.PascalDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.PascalDistributionImpl.numberOfSuccesses",
        "snippet": "    private int numberOfSuccesses;",
        "begin_line": 38,
        "end_line": 38,
        "comment": " The number of successes "
    },
    {
        "class_name": "org.apache.commons.math.distribution.PascalDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.PascalDistributionImpl.probabilityOfSuccess",
        "snippet": "    private double probabilityOfSuccess;",
        "begin_line": 41,
        "end_line": 41,
        "comment": " The probability of success "
    },
    {
        "class_name": "org.apache.commons.math.distribution.ZipfDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.ZipfDistributionImpl.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -140627372283420404L;",
        "begin_line": 33,
        "end_line": 33,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.distribution.ZipfDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.ZipfDistributionImpl.numberOfElements",
        "snippet": "    private int numberOfElements;",
        "begin_line": 36,
        "end_line": 36,
        "comment": " Number of elements. "
    },
    {
        "class_name": "org.apache.commons.math.distribution.ZipfDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.ZipfDistributionImpl.exponent",
        "snippet": "    private double exponent;",
        "begin_line": 39,
        "end_line": 39,
        "comment": " Exponent parameter of the distribution. "
    },
    {
        "class_name": "org.apache.commons.math.distribution.GammaDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.GammaDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
        "snippet": "    public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;",
        "begin_line": 37,
        "end_line": 37,
        "comment": "\n     * Default inverse cumulative probability accuracy\n     * @since 2.1\n     "
    },
    {
        "class_name": "org.apache.commons.math.distribution.GammaDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.GammaDistributionImpl.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3239549463135430361L;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.distribution.GammaDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.GammaDistributionImpl.alpha",
        "snippet": "    private double alpha;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " The shape parameter. "
    },
    {
        "class_name": "org.apache.commons.math.distribution.GammaDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.GammaDistributionImpl.beta",
        "snippet": "    private double beta;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " The scale parameter. "
    },
    {
        "class_name": "org.apache.commons.math.distribution.GammaDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.GammaDistributionImpl.solverAbsoluteAccuracy",
        "snippet": "    private final double solverAbsoluteAccuracy;",
        "begin_line": 49,
        "end_line": 49,
        "comment": " Inverse cumulative probability accuracy "
    },
    {
        "class_name": "org.apache.commons.math.distribution.BinomialDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.BinomialDistributionImpl.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 6751309484392813623L;",
        "begin_line": 34,
        "end_line": 34,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.distribution.BinomialDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.BinomialDistributionImpl.numberOfTrials",
        "snippet": "    private int numberOfTrials;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " The number of trials. "
    },
    {
        "class_name": "org.apache.commons.math.distribution.BinomialDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.BinomialDistributionImpl.probabilityOfSuccess",
        "snippet": "    private double probabilityOfSuccess;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " The probability of success. "
    },
    {
        "class_name": "org.apache.commons.math.distribution.FDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.FDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
        "snippet": "    public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;",
        "begin_line": 39,
        "end_line": 39,
        "comment": "\n     * Default inverse cumulative probability accuracy\n     * @since 2.1\n     "
    },
    {
        "class_name": "org.apache.commons.math.distribution.FDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.FDistributionImpl.NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE",
        "snippet": "    private static final String NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE =\n        \"degrees of freedom must be positive ({0})\";",
        "begin_line": 42,
        "end_line": 43,
        "comment": " Message for non positive degrees of freddom. "
    },
    {
        "class_name": "org.apache.commons.math.distribution.FDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.FDistributionImpl.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -8516354193418641566L;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.distribution.FDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.FDistributionImpl.numeratorDegreesOfFreedom",
        "snippet": "    private double numeratorDegreesOfFreedom;",
        "begin_line": 49,
        "end_line": 49,
        "comment": " The numerator degrees of freedom"
    },
    {
        "class_name": "org.apache.commons.math.distribution.FDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.FDistributionImpl.denominatorDegreesOfFreedom",
        "snippet": "    private double denominatorDegreesOfFreedom;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " The numerator degrees of freedom"
    },
    {
        "class_name": "org.apache.commons.math.distribution.FDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.FDistributionImpl.solverAbsoluteAccuracy",
        "snippet": "    private final double solverAbsoluteAccuracy;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " Inverse cumulative probability accuracy "
    },
    {
        "class_name": "org.apache.commons.math.distribution.PoissonDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.PoissonDistributionImpl.DEFAULT_MAX_ITERATIONS",
        "snippet": "    public static final int DEFAULT_MAX_ITERATIONS = 10000000;",
        "begin_line": 38,
        "end_line": 38,
        "comment": "\n     * Default maximum number of iterations for cumulative probability calculations.\n     * @since 2.1\n     "
    },
    {
        "class_name": "org.apache.commons.math.distribution.PoissonDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.PoissonDistributionImpl.DEFAULT_EPSILON",
        "snippet": "    public static final double DEFAULT_EPSILON = 1E-12;",
        "begin_line": 44,
        "end_line": 44,
        "comment": "\n     * Default convergence criterion.\n     * @since 2.1\n     "
    },
    {
        "class_name": "org.apache.commons.math.distribution.PoissonDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.PoissonDistributionImpl.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3349935121172596109L;",
        "begin_line": 47,
        "end_line": 47,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.distribution.PoissonDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.PoissonDistributionImpl.normal",
        "snippet": "    private NormalDistribution normal;",
        "begin_line": 50,
        "end_line": 50,
        "comment": " Distribution used to compute normal approximation. "
    },
    {
        "class_name": "org.apache.commons.math.distribution.PoissonDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.PoissonDistributionImpl.mean",
        "snippet": "    private double mean;",
        "begin_line": 55,
        "end_line": 55,
        "comment": "\n     * Holds the Poisson mean for the distribution.\n     "
    },
    {
        "class_name": "org.apache.commons.math.distribution.PoissonDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.PoissonDistributionImpl.maxIterations",
        "snippet": "    private int maxIterations = DEFAULT_MAX_ITERATIONS;",
        "begin_line": 63,
        "end_line": 63,
        "comment": "\n     * Maximum number of iterations for cumulative probability.\n     *\n     * Cumulative probabilities are estimated using either Lanczos series approximation of\n     * Gamma#regularizedGammaP or continued fraction approximation of Gamma#regularizedGammaQ.\n     "
    },
    {
        "class_name": "org.apache.commons.math.distribution.PoissonDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.PoissonDistributionImpl.epsilon",
        "snippet": "    private double epsilon = DEFAULT_EPSILON;",
        "begin_line": 68,
        "end_line": 68,
        "comment": "\n     * Convergence criterion for cumulative probability.\n     "
    },
    {
        "class_name": "org.apache.commons.math.distribution.TDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
        "snippet": "    public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;",
        "begin_line": 40,
        "end_line": 40,
        "comment": "\n     * Default inverse cumulative probability accuracy\n     * @since 2.1\n    "
    },
    {
        "class_name": "org.apache.commons.math.distribution.TDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.TDistributionImpl.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -5852615386664158222L;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.distribution.TDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.TDistributionImpl.degreesOfFreedom",
        "snippet": "    private double degreesOfFreedom;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " The degrees of freedom"
    },
    {
        "class_name": "org.apache.commons.math.distribution.TDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.TDistributionImpl.solverAbsoluteAccuracy",
        "snippet": "    private final double solverAbsoluteAccuracy;",
        "begin_line": 49,
        "end_line": 49,
        "comment": " Inverse cumulative probability accuracy "
    },
    {
        "class_name": "org.apache.commons.math.distribution.AbstractContinuousDistribution",
        "src_path": "src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java",
        "signature": "org.apache.commons.math.distribution.AbstractContinuousDistribution.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -38038050983108802L;",
        "begin_line": 41,
        "end_line": 41,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.distribution.AbstractContinuousDistribution",
        "src_path": "src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java",
        "signature": "org.apache.commons.math.distribution.AbstractContinuousDistribution.solverAbsoluteAccuracy",
        "snippet": "    private double solverAbsoluteAccuracy = BrentSolver.DEFAULT_ABSOLUTE_ACCURACY;",
        "begin_line": 47,
        "end_line": 47,
        "comment": "\n     * Solver absolute accuracy for inverse cum computation\n     * @since 2.1\n     "
    },
    {
        "class_name": "org.apache.commons.math.distribution.HypergeometricDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.HypergeometricDistributionImpl.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -436928820673516179L;",
        "begin_line": 34,
        "end_line": 34,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.distribution.HypergeometricDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.HypergeometricDistributionImpl.numberOfSuccesses",
        "snippet": "    private int numberOfSuccesses;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " The number of successes in the population. "
    },
    {
        "class_name": "org.apache.commons.math.distribution.HypergeometricDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.HypergeometricDistributionImpl.populationSize",
        "snippet": "    private int populationSize;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " The population size. "
    },
    {
        "class_name": "org.apache.commons.math.distribution.HypergeometricDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.HypergeometricDistributionImpl.sampleSize",
        "snippet": "    private int sampleSize;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " The sample size. "
    },
    {
        "class_name": "org.apache.commons.math.distribution.AbstractDistribution",
        "src_path": "src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java",
        "signature": "org.apache.commons.math.distribution.AbstractDistribution.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -38038050983108802L;",
        "begin_line": 33,
        "end_line": 33,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.distribution.WeibullDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.WeibullDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
        "snippet": "    public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;",
        "begin_line": 38,
        "end_line": 38,
        "comment": "\n     * Default inverse cumulative probability accuracy\n     * @since 2.1\n     "
    },
    {
        "class_name": "org.apache.commons.math.distribution.WeibullDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.WeibullDistributionImpl.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 8589540077390120676L;",
        "begin_line": 41,
        "end_line": 41,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.distribution.WeibullDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.WeibullDistributionImpl.shape",
        "snippet": "    private double shape;",
        "begin_line": 44,
        "end_line": 44,
        "comment": " The shape parameter. "
    },
    {
        "class_name": "org.apache.commons.math.distribution.WeibullDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.WeibullDistributionImpl.scale",
        "snippet": "    private double scale;",
        "begin_line": 47,
        "end_line": 47,
        "comment": " The scale parameter. "
    },
    {
        "class_name": "org.apache.commons.math.distribution.WeibullDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.WeibullDistributionImpl.solverAbsoluteAccuracy",
        "snippet": "    private final double solverAbsoluteAccuracy;",
        "begin_line": 50,
        "end_line": 50,
        "comment": " Inverse cumulative probability accuracy "
    },
    {
        "class_name": "org.apache.commons.math.distribution.BetaDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.BetaDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
        "snippet": "    public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;",
        "begin_line": 43,
        "end_line": 43,
        "comment": "\n     * Default inverse cumulative probability accurac\n     * @since 2.1\n     "
    },
    {
        "class_name": "org.apache.commons.math.distribution.BetaDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.BetaDistributionImpl.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -1221965979403477668L;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.distribution.BetaDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.BetaDistributionImpl.alpha",
        "snippet": "    private double alpha;",
        "begin_line": 49,
        "end_line": 49,
        "comment": " First shape parameter. "
    },
    {
        "class_name": "org.apache.commons.math.distribution.BetaDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.BetaDistributionImpl.beta",
        "snippet": "    private double beta;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " Second shape parameter. "
    },
    {
        "class_name": "org.apache.commons.math.distribution.BetaDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.BetaDistributionImpl.z",
        "snippet": "    private double z;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " Normalizing factor used in density computations.\n     * updated whenever alpha or beta are changed.\n     "
    },
    {
        "class_name": "org.apache.commons.math.distribution.BetaDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.BetaDistributionImpl.solverAbsoluteAccuracy",
        "snippet": "    private final double solverAbsoluteAccuracy;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " Inverse cumulative probability accuracy "
    }
]