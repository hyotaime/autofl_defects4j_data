{
  "filepath": "/tmp/Mockito-38b/src/org/mockito/Matchers.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "Matchers",
      "is_interface": false,
      "parent_types": [],
      "begin_line": 101,
      "end_line": 700,
      "comment": "\r\n * Allow flexible verification or stubbing. See also {@link AdditionalMatchers}.\r\n * \u003cp\u003e\r\n * {@link Mockito} extends Matchers so to get access to all matchers just import Mockito class statically.\r\n * \u003cpre\u003e\r\n *  //stubbing using anyInt() argument matcher\r\n *  when(mockedList.get(anyInt())).thenReturn(\"element\");\r\n *  \r\n *  //following prints \"element\"\r\n *  System.out.println(mockedList.get(999));\r\n *  \r\n *  //you can also verify using argument matcher\r\n *  verify(mockedList).get(anyInt());\r\n * \u003c/pre\u003e\r\n * Scroll down to see all methods - full list of matchers.\r\n * \u003cp\u003e\r\n * \u003cb\u003eWarning:\u003c/b\u003e\r\n * \u003cp\u003e\r\n * If you are using argument matchers, \u003cb\u003eall arguments\u003c/b\u003e have to be provided by matchers.\r\n * \u003cp\u003e\r\n * E.g: (example shows verification but the same applies to stubbing):\r\n * \u003cpre\u003e\r\n *   verify(mock).someMethod(anyInt(), anyString(), \u003cb\u003eeq(\"third argument\")\u003c/b\u003e);\r\n *   //above is correct - eq() is also an argument matcher\r\n *   \r\n *   verify(mock).someMethod(anyInt(), anyString(), \u003cb\u003e\"third argument\"\u003c/b\u003e);\r\n *   //above is incorrect - exception will be thrown because third argument is given without argument matcher.\r\n * \u003c/pre\u003e\r\n * \r\n * \u003ch1\u003eCustom Argument Matchers\u003c/h1\u003e\r\n * \r\n * Use {@link Matchers#argThat} method and pass an instance of hamcrest {@link Matcher}.\r\n * \u003cp\u003e\r\n * Before you start implementing your own custom argument matcher, make sure you check out {@link ArgumentCaptor} api.\r\n * \u003cp\u003e\r\n * So, how to implement your own argument matcher?\r\n * First, you might want to subclass {@link ArgumentMatcher} which is an hamcrest matcher with predefined describeTo() method.\r\n * Default description generated by describeTo() uses \u003cb\u003edecamelized class name\u003c/b\u003e - to promote meaningful class names.\r\n * \u003cp\u003e\r\n * Example:\r\n * \r\n * \u003cpre\u003e\r\n *   class IsListOfTwoElements extends ArgumentMatcher\u0026lt;List\u0026gt; {\r\n *      public boolean matches(Object list) {\r\n *          return ((List) list).size() \u003d\u003d 2;\r\n *      }\r\n *   }\r\n *   \r\n *   List mock \u003d mock(List.class);\r\n *   \r\n *   when(mock.addAll(argThat(new IsListOfTwoElements()))).thenReturn(true);\r\n *   \r\n *   mock.addAll(Arrays.asList(\"one\", \"two\"));\r\n *   \r\n *   verify(mock).addAll(argThat(new IsListOfTwoElements()));\r\n * \u003c/pre\u003e\r\n * \r\n * To keep it readable you may want to extract method, e.g:\r\n * \u003cpre\u003e\r\n *   verify(mock).addAll(\u003cb\u003eargThat(new IsListOfTwoElements())\u003c/b\u003e);\r\n *   //becomes\r\n *   verify(mock).addAll(\u003cb\u003elistOfTwoElements()\u003c/b\u003e);\r\n * \u003c/pre\u003e\r\n *\r\n * \u003cb\u003eWarning:\u003c/b\u003e Be reasonable with using complicated argument matching, especially custom argument matchers, as it can make the test less readable. \r\n * Sometimes it\u0027s better to implement equals() for arguments that are passed to mocks \r\n * (Mockito naturally uses equals() for argument matching). \r\n * This can make the test cleaner. \r\n * \u003cp\u003e\r\n * Also, \u003cb\u003esometimes {@link ArgumentCaptor} may be a better fit\u003c/b\u003e than custom matcher. \r\n * For example, if custom argument matcher is not likely to be reused\r\n * or you just need it to assert on argument values to complete verification of behavior.\r\n "
    },
    {
      "type": "field",
      "varNames": [
        "mockingProgress"
      ],
      "begin_line": 104,
      "end_line": 104,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.anyBoolean()",
      "begin_line": 113,
      "end_line": 115,
      "comment": "\r\n     * any boolean, Boolean or null.\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @return \u003ccode\u003efalse\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 114,col 9)-(line 114,col 52)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.anyByte()",
      "begin_line": 124,
      "end_line": 126,
      "comment": "\r\n     * any byte, Byte or null\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @return \u003ccode\u003e0\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 125,col 9)-(line 125,col 51)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.anyChar()",
      "begin_line": 135,
      "end_line": 137,
      "comment": "\r\n     * any char, Character or null.\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @return \u003ccode\u003e0\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 136,col 9)-(line 136,col 51)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.anyInt()",
      "begin_line": 146,
      "end_line": 148,
      "comment": "\r\n     * any int, Integer or null.\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @return \u003ccode\u003e0\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 147,col 9)-(line 147,col 51)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.anyLong()",
      "begin_line": 157,
      "end_line": 159,
      "comment": "\r\n     * any long, Long or null.\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @return \u003ccode\u003e0\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 158,col 9)-(line 158,col 51)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.anyFloat()",
      "begin_line": 168,
      "end_line": 170,
      "comment": "\r\n     * any float, Float or null.\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @return \u003ccode\u003e0\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 169,col 9)-(line 169,col 51)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.anyDouble()",
      "begin_line": 179,
      "end_line": 181,
      "comment": "\r\n     * any double, Double or null.\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @return \u003ccode\u003e0\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 180,col 9)-(line 180,col 51)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.anyShort()",
      "begin_line": 190,
      "end_line": 192,
      "comment": "\r\n     * any short, Short or null.\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @return \u003ccode\u003e0\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 191,col 9)-(line 191,col 51)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.anyObject()",
      "begin_line": 201,
      "end_line": 203,
      "comment": "\r\n     * any Object or null.\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @return \u003ccode\u003enull\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 202,col 9)-(line 202,col 55)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.any(java.lang.Class\u003cT\u003e)",
      "begin_line": 217,
      "end_line": 219,
      "comment": "\r\n     * any object of specified class. \r\n     * \u003cp\u003e\r\n     * Sometimes looks better than anyObject() - especially when explicit casting is required\r\n     * \u003cp\u003e\r\n     * Alias to {@link Matchers#anyObject()}\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @return \u003ccode\u003enull\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 218,col 9)-(line 218,col 31)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.any()",
      "begin_line": 230,
      "end_line": 232,
      "comment": "\r\n     * any object or null \r\n     * \u003cp\u003e\r\n     * Shorter alias to {@link Matchers#anyObject()}\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @return \u003ccode\u003enull\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 231,col 9)-(line 231,col 31)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.anyString()",
      "begin_line": 241,
      "end_line": 243,
      "comment": "\r\n     * any String or null.\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @return empty String (\"\")\r\n     ",
      "child_ranges": [
        "(line 242,col 9)-(line 242,col 53)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.anyList()",
      "begin_line": 252,
      "end_line": 254,
      "comment": "\r\n     * any List or null.\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @return empty List.\r\n     ",
      "child_ranges": [
        "(line 253,col 9)-(line 253,col 51)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.anyListOf(java.lang.Class\u003cT\u003e)",
      "begin_line": 266,
      "end_line": 268,
      "comment": "\r\n     * generic friendly alias to {@link Matchers#anyList()}.\r\n     * It\u0027s an alternative to \u0026#064;SuppressWarnings(\"unchecked\") to keep code clean of compiler warnings.\r\n     * \u003cp\u003e\r\n     * any List or null.\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @return empty List.\r\n     ",
      "child_ranges": [
        "(line 267,col 9)-(line 267,col 58)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.anySet()",
      "begin_line": 277,
      "end_line": 279,
      "comment": "\r\n     * any Set or null\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     *\r\n     * @return empty Set\r\n     ",
      "child_ranges": [
        "(line 278,col 9)-(line 278,col 50)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.anySetOf(java.lang.Class\u003cT\u003e)",
      "begin_line": 291,
      "end_line": 293,
      "comment": "\r\n     * generic friendly alias to {@link Matchers#anySet()}.\r\n     * It\u0027s an alternative to \u0026#064;SuppressWarnings(\"unchecked\") to keep code clean of compiler warnings.\r\n     * \u003cp\u003e\r\n     * any Set or null\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     *\r\n     * @return empty Set\r\n     ",
      "child_ranges": [
        "(line 292,col 9)-(line 292,col 56)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.anyMap()",
      "begin_line": 302,
      "end_line": 304,
      "comment": "\r\n     * any Map or null.\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @return empty Map.\r\n     ",
      "child_ranges": [
        "(line 303,col 9)-(line 303,col 50)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.anyCollection()",
      "begin_line": 313,
      "end_line": 315,
      "comment": "\r\n     * any Collection or null.\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @return empty Collection.\r\n     ",
      "child_ranges": [
        "(line 314,col 9)-(line 314,col 51)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.anyCollectionOf(java.lang.Class\u003cT\u003e)",
      "begin_line": 327,
      "end_line": 329,
      "comment": "\r\n     * generic friendly alias to {@link Matchers#anyCollection()}. \r\n     * It\u0027s an alternative to \u0026#064;SuppressWarnings(\"unchecked\") to keep code clean of compiler warnings.     \r\n     * \u003cp\u003e\r\n     * any Collection or null.\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @return empty Collection.\r\n     ",
      "child_ranges": [
        "(line 328,col 9)-(line 328,col 64)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.isA(java.lang.Class\u003cT\u003e)",
      "begin_line": 342,
      "end_line": 344,
      "comment": "\r\n     * Object argument that implements the given class. \r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param \u003cT\u003e\r\n     *            the accepted type.\r\n     * @param clazz\r\n     *            the class of the accepted type.\r\n     * @return \u003ccode\u003enull\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 343,col 9)-(line 343,col 68)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.eq(boolean)",
      "begin_line": 355,
      "end_line": 357,
      "comment": "\r\n     * boolean argument that is equal to the given value.\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param value\r\n     *            the given value.\r\n     * @return \u003ccode\u003e0\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 356,col 9)-(line 356,col 62)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.eq(byte)",
      "begin_line": 368,
      "end_line": 370,
      "comment": "\r\n     * byte argument that is equal to the given value.\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param value\r\n     *            the given value.\r\n     * @return \u003ccode\u003e0\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 369,col 9)-(line 369,col 61)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.eq(char)",
      "begin_line": 381,
      "end_line": 383,
      "comment": "\r\n     * char argument that is equal to the given value.\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param value\r\n     *            the given value.\r\n     * @return \u003ccode\u003e0\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 382,col 9)-(line 382,col 61)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.eq(double)",
      "begin_line": 394,
      "end_line": 396,
      "comment": "\r\n     * double argument that is equal to the given value.\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param value\r\n     *            the given value.\r\n     * @return \u003ccode\u003e0\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 395,col 9)-(line 395,col 61)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.eq(float)",
      "begin_line": 407,
      "end_line": 409,
      "comment": "\r\n     * float argument that is equal to the given value.\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param value\r\n     *            the given value.\r\n     * @return \u003ccode\u003e0\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 408,col 9)-(line 408,col 61)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.eq(int)",
      "begin_line": 420,
      "end_line": 422,
      "comment": "\r\n     * int argument that is equal to the given value.\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param value\r\n     *            the given value.\r\n     * @return \u003ccode\u003e0\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 421,col 9)-(line 421,col 61)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.eq(long)",
      "begin_line": 433,
      "end_line": 435,
      "comment": "\r\n     * long argument that is equal to the given value.\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param value\r\n     *            the given value.\r\n     * @return \u003ccode\u003e0\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 434,col 9)-(line 434,col 61)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.eq(short)",
      "begin_line": 446,
      "end_line": 448,
      "comment": "\r\n     * short argument that is equal to the given value.\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param value\r\n     *            the given value.\r\n     * @return \u003ccode\u003e0\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 447,col 9)-(line 447,col 61)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.eq(T)",
      "begin_line": 459,
      "end_line": 461,
      "comment": "\r\n     * Object argument that is equal to the given value.\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param value\r\n     *            the given value.\r\n     * @return \u003ccode\u003enull\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 460,col 9)-(line 460,col 64)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.refEq(T, java.lang.String...)",
      "begin_line": 481,
      "end_line": 483,
      "comment": "\r\n     * Object argument that is reflection-equal to the given value with support for excluding\r\n     * selected fields from a class.\r\n     * \u003cp\u003e\r\n     * This matcher can be used when equals() is not implemented on compared objects.\r\n     * Matcher uses java reflection API to compare fields of wanted and actual object.\r\n     * \u003cp\u003e\r\n     * Works similarly to EqualsBuilder.reflectionEquals(this, other, exlucdeFields) from\r\n     * apache commons library.\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param value\r\n     *            the given value.\r\n     * @param excludeFields\r\n     *            fields to exclude, if field does not exist it is ignored.\r\n     * @return \u003ccode\u003enull\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 482,col 9)-(line 482,col 89)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.same(T)",
      "begin_line": 496,
      "end_line": 498,
      "comment": "\r\n     * Object argument that is the same as the given value.\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param \u003cT\u003e\r\n     *            the type of the object, it is passed through to prevent casts.\r\n     * @param value\r\n     *            the given value.\r\n     * @return \u003ccode\u003enull\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 497,col 9)-(line 497,col 62)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.isNull()",
      "begin_line": 507,
      "end_line": 509,
      "comment": "\r\n     * null argument.\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @return \u003ccode\u003enull\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 508,col 9)-(line 508,col 53)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.notNull()",
      "begin_line": 520,
      "end_line": 522,
      "comment": "\r\n     * not null argument.\r\n     * \u003cp\u003e\r\n     * alias to {@link Matchers#isNotNull()}\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @return \u003ccode\u003enull\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 521,col 9)-(line 521,col 60)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.isNotNull()",
      "begin_line": 533,
      "end_line": 535,
      "comment": "\r\n     * not null argument.\r\n     * \u003cp\u003e\r\n     * alias to {@link Matchers#notNull()}\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @return \u003ccode\u003enull\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 534,col 9)-(line 534,col 25)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.contains(java.lang.String)",
      "begin_line": 546,
      "end_line": 548,
      "comment": "\r\n     * String argument that contains the given substring.\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param substring\r\n     *            the substring.\r\n     * @return empty String (\"\").\r\n     ",
      "child_ranges": [
        "(line 547,col 9)-(line 547,col 69)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.matches(java.lang.String)",
      "begin_line": 559,
      "end_line": 561,
      "comment": "\r\n     * String argument that matches the given regular expression.\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param regex\r\n     *            the regular expression.\r\n     * @return empty String (\"\").\r\n     ",
      "child_ranges": [
        "(line 560,col 9)-(line 560,col 64)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.endsWith(java.lang.String)",
      "begin_line": 572,
      "end_line": 574,
      "comment": "\r\n     * String argument that ends with the given suffix.\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param suffix\r\n     *            the suffix.\r\n     * @return empty String (\"\").\r\n     ",
      "child_ranges": [
        "(line 573,col 9)-(line 573,col 66)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.startsWith(java.lang.String)",
      "begin_line": 585,
      "end_line": 587,
      "comment": "\r\n     * String argument that starts with the given prefix.\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param prefix\r\n     *            the prefix.\r\n     * @return empty String (\"\").\r\n     ",
      "child_ranges": [
        "(line 586,col 9)-(line 586,col 68)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.argThat(org.hamcrest.Matcher\u003cT\u003e)",
      "begin_line": 597,
      "end_line": 599,
      "comment": "\r\n     * Allows creating custom argument matchers.\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link ArgumentMatcher} class\r\n     * \r\n     * @param matcher decides whether argument matches\r\n     * @return \u003ccode\u003enull\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 598,col 9)-(line 598,col 54)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.charThat(org.hamcrest.Matcher\u003cjava.lang.Character\u003e)",
      "begin_line": 609,
      "end_line": 611,
      "comment": "\r\n     * Allows creating custom argument matchers.\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param matcher decides whether argument matches\r\n     * @return \u003ccode\u003e0\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 610,col 9)-(line 610,col 51)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.booleanThat(org.hamcrest.Matcher\u003cjava.lang.Boolean\u003e)",
      "begin_line": 621,
      "end_line": 623,
      "comment": "\r\n     * Allows creating custom argument matchers.\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param matcher decides whether argument matches\r\n     * @return \u003ccode\u003efalse\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 622,col 9)-(line 622,col 52)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.byteThat(org.hamcrest.Matcher\u003cjava.lang.Byte\u003e)",
      "begin_line": 633,
      "end_line": 635,
      "comment": "\r\n     * Allows creating custom argument matchers.\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param matcher decides whether argument matches\r\n     * @return \u003ccode\u003e0\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 634,col 9)-(line 634,col 51)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.shortThat(org.hamcrest.Matcher\u003cjava.lang.Short\u003e)",
      "begin_line": 645,
      "end_line": 647,
      "comment": "\r\n     * Allows creating custom argument matchers.\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param matcher decides whether argument matches\r\n     * @return \u003ccode\u003e0\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 646,col 9)-(line 646,col 51)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.intThat(org.hamcrest.Matcher\u003cjava.lang.Integer\u003e)",
      "begin_line": 657,
      "end_line": 659,
      "comment": "\r\n     * Allows creating custom argument matchers.\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param matcher decides whether argument matches\r\n     * @return \u003ccode\u003e0\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 658,col 9)-(line 658,col 51)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.longThat(org.hamcrest.Matcher\u003cjava.lang.Long\u003e)",
      "begin_line": 669,
      "end_line": 671,
      "comment": "\r\n     * Allows creating custom argument matchers.\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param matcher decides whether argument matches\r\n     * @return \u003ccode\u003e0\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 670,col 9)-(line 670,col 51)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.floatThat(org.hamcrest.Matcher\u003cjava.lang.Float\u003e)",
      "begin_line": 681,
      "end_line": 683,
      "comment": "\r\n     * Allows creating custom argument matchers.\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param matcher decides whether argument matches\r\n     * @return \u003ccode\u003e0\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 682,col 9)-(line 682,col 51)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.doubleThat(org.hamcrest.Matcher\u003cjava.lang.Double\u003e)",
      "begin_line": 693,
      "end_line": 695,
      "comment": "\r\n     * Allows creating custom argument matchers.\r\n     * \u003cp\u003e\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param matcher decides whether argument matches\r\n     * @return \u003ccode\u003e0\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 694,col 9)-(line 694,col 51)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.reportMatcher(org.hamcrest.Matcher\u003c?\u003e)",
      "begin_line": 697,
      "end_line": 699,
      "comment": "",
      "child_ranges": [
        "(line 698,col 9)-(line 698,col 82)"
      ]
    }
  ]
}