{
  "filepath": "/tmp/Mockito-38b/test/org/mockitousage/puzzlers/BridgeMethodPuzzleTest.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "BridgeMethodPuzzleTest",
      "is_interface": false,
      "parent_types": [
        "TestBase"
      ],
      "begin_line": 20,
      "end_line": 66,
      "comment": "\n * Bridge method is generated by compiler when erasure in parent class is\n * different. When is different then it means that in runtime we will have\n * overloading rather than overridding Therefore the compiler generates bridge\n * method in Subclass so that erasures are the same, signatures of methods match\n * and overridding is ON.\n "
    },
    {
      "type": "class_interface",
      "name": "Super",
      "is_interface": false,
      "parent_types": [],
      "begin_line": 23,
      "end_line": 27,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.mockitousage.puzzlers.BridgeMethodPuzzleTest.Super.say(T)",
      "begin_line": 24,
      "end_line": 26,
      "comment": "",
      "child_ranges": [
        "(line 25,col 13)-(line 25,col 38)"
      ]
    },
    {
      "type": "class_interface",
      "name": "Sub",
      "is_interface": false,
      "parent_types": [
        "org.mockitousage.puzzlers.BridgeMethodPuzzleTest.Super\u003cjava.lang.String\u003e"
      ],
      "begin_line": 29,
      "end_line": 34,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.mockitousage.puzzlers.BridgeMethodPuzzleTest.Sub.say(java.lang.String)",
      "begin_line": 30,
      "end_line": 33,
      "comment": "",
      "child_ranges": [
        "(line 32,col 13)-(line 32,col 38)"
      ]
    },
    {
      "type": "field",
      "varNames": [
        "mock"
      ],
      "begin_line": 36,
      "end_line": 36,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.mockitousage.puzzlers.BridgeMethodPuzzleTest.setMockWithDownCast(org.mockitousage.puzzlers.BridgeMethodPuzzleTest.Super)",
      "begin_line": 38,
      "end_line": 40,
      "comment": "",
      "child_ranges": [
        "(line 39,col 9)-(line 39,col 25)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockitousage.puzzlers.BridgeMethodPuzzleTest.say(java.lang.String)",
      "begin_line": 42,
      "end_line": 44,
      "comment": "",
      "child_ranges": [
        "(line 43,col 9)-(line 43,col 25)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockitousage.puzzlers.BridgeMethodPuzzleTest.shouldHaveBridgeMethod()",
      "begin_line": 46,
      "end_line": 54,
      "comment": "",
      "child_ranges": [
        "(line 48,col 9)-(line 48,col 28)",
        "(line 50,col 9)-(line 50,col 58)",
        "(line 52,col 9)-(line 52,col 54)",
        "(line 53,col 9)-(line 53,col 46)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockitousage.puzzlers.BridgeMethodPuzzleTest.shouldVerifyCorrectlyWhenBridgeMethodCalled()",
      "begin_line": 56,
      "end_line": 65,
      "comment": "",
      "child_ranges": [
        "(line 60,col 9)-(line 60,col 32)",
        "(line 61,col 9)-(line 61,col 31)",
        "(line 62,col 9)-(line 62,col 21)",
        "(line 64,col 9)-(line 64,col 31)"
      ]
    }
  ]
}