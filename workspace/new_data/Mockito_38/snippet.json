[
    {
        "src_path": "src/org/mockito/MockSettings.java",
        "class_name": "org.mockito.MockSettings",
        "signature": "org.mockito.MockSettings.extraInterfaces(java.lang.Class<?>...)",
        "snippet": "    MockSettings extraInterfaces(Class<?>... interfaces);",
        "begin_line": 56,
        "end_line": 56,
        "comment": "\r\n     * Specifies extra interfaces the mock should implement. Might be useful for legacy code or some corner cases.\r\n     * For background, see issue 51 <a href=\"http://code.google.com/p/mockito/issues/detail?id=51\">here</a>  \r\n     * <p>\r\n     * This mysterious feature should be used very occasionally. \r\n     * The object under test should know exactly its collaborators & dependencies.\r\n     * If you happen to use it often than please make sure you are really producing simple, clean & readable code.\r\n     * <p>   \r\n     * Examples:\r\n     * <pre>\r\n     *   Foo foo = mock(Foo.class, withSettings().extraInterfaces(Bar.class, Baz.class));\r\n     *   \r\n     *   //now, the mock implements extra interfaces, so following casting is possible:\r\n     *   Bar bar = (Bar) foo;\r\n     *   Baz baz = (Baz) foo;\r\n     * </pre>\r\n     * \r\n     * @param interfaces extra interfaces the should implement.\r\n     * @return settings instance so that you can fluently specify other settings\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/MockSettings.java",
        "class_name": "org.mockito.MockSettings",
        "signature": "org.mockito.MockSettings.name(java.lang.String)",
        "snippet": "    MockSettings name(String name);",
        "begin_line": 76,
        "end_line": 76,
        "comment": "\r\n     * Specifies mock name. Naming mocks can be helpful for debugging - the name is used in all verification errors. \r\n     * <p>\r\n     * Beware that naming mocks is not a solution for complex code which uses too many mocks or collaborators. \r\n     * <b>If you have too many mocks then refactor the code</b> so that it's easy to test/debug without necessity of naming mocks.\r\n     * <p>\r\n     * <b>If you use &#064;Mock annotation then you've got naming mocks for free!</b> &#064;Mock uses field name as mock name. {@link Mock Read more.}\r\n     * <p>\r\n     * Examples:\r\n     * <pre>\r\n     *   Foo foo = mock(Foo.class, withSettings().name(\"foo\"));\r\n     *   \r\n     *   //Below does exactly the same:\r\n     *   Foo foo = mock(Foo.class, \"foo\");\r\n     * </pre>\r\n     * @param name the name of the mock, later used in all verification errors\r\n     * @return settings instance so that you can fluently specify other settings\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/MockSettings.java",
        "class_name": "org.mockito.MockSettings",
        "signature": "org.mockito.MockSettings.spiedInstance(java.lang.Object)",
        "snippet": "    MockSettings spiedInstance(Object instance);",
        "begin_line": 103,
        "end_line": 103,
        "comment": "\r\n     * Specifies the instance to spy on. Makes sense only for spies/partial mocks.\r\n     * Sets the real implementation to be called when the method is called on a mock object.\r\n     * <p>\r\n     * As usual you are going to read <b>the partial mock warning</b>:\r\n     * Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.\r\n     * How does partial mock fit into this paradigm? Well, it just doesn't... \r\n     * Partial mock usually means that the complexity has been moved to a different method on the same object.\r\n     * In most cases, this is not the way you want to design your application.\r\n     * <p>\r\n     * However, there are rare cases when partial mocks come handy: \r\n     * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)\r\n     * However, I wouldn't use partial mocks for new, test-driven & well-designed code.\r\n     * <p>\r\n     * Enough warnings about partial mocks, see an example how spiedInstance() works:\r\n     * <pre>\r\n     *   Foo foo = mock(Foo.class, spiedInstance(fooInstance));\r\n     *   \r\n     *   //Below does exactly the same:\r\n     *   Foo foo = spy(fooInstance);\r\n     * </pre>\r\n     * \r\n     * @param instance to spy on\r\n     * @return settings instance so that you can fluently specify other settings\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/MockSettings.java",
        "class_name": "org.mockito.MockSettings",
        "signature": "org.mockito.MockSettings.defaultAnswer(org.mockito.stubbing.Answer)",
        "snippet": "    @SuppressWarnings(\"unchecked\")\n    MockSettings defaultAnswer(Answer defaultAnswer);",
        "begin_line": 123,
        "end_line": 124,
        "comment": "\r\n     * Specifies default answers to interactions. \r\n     * It's quite advanced feature and typically you don't need it to write decent tests.\r\n     * However it can be helpful when working with legacy systems.\r\n     * <p>\r\n     * It is the default answer so it will be used <b>only when you don't</b> stub the method call.\r\n     *\r\n     * <pre>\r\n     *   Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));\r\n     *   Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));\r\n     *   \r\n     *   //Below does exactly the same:\r\n     *   Foo mockTwo = mock(Foo.class, new YourOwnAnswer());\r\n     * </pre>\r\n     * \r\n     * @param defaultAnswer default answer to be used by mock when not stubbed\r\n     * @return settings instance so that you can fluently specify other settings\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/ArgumentCaptor.java",
        "class_name": "org.mockito.ArgumentCaptor",
        "signature": "org.mockito.ArgumentCaptor.capture()",
        "snippet": "    public T capture() {\n        Mockito.argThat(capturingMatcher);\n        return null;\n    }",
        "begin_line": 54,
        "end_line": 57,
        "comment": "\r\n     * Use it to capture the argument. This method <b>must be used inside of verification</b>.\r\n     * <p>\r\n     * Internally, this method registers a special implementation of an {@link ArgumentMatcher}.\r\n     * This argument matcher stores the argument value so that you can use it later to perform assertions.  \r\n     * <p>\r\n     * See examples in javadoc for {@link ArgumentCaptor} class.\r\n     * \r\n     * @return null\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/ArgumentCaptor.java",
        "class_name": "org.mockito.ArgumentCaptor",
        "signature": "org.mockito.ArgumentCaptor.getValue()",
        "snippet": "    public T getValue() {\n        return this.capturingMatcher.getLastValue();\n    }",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\r\n     * Returns the captured value of the argument.\r\n     * <p>\r\n     * If the method was called multiple times then it returns the latest captured value\r\n     * <p>\r\n     * See examples in javadoc for {@link ArgumentCaptor} class.\r\n     * \r\n     * @return captured argument value\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/ArgumentCaptor.java",
        "class_name": "org.mockito.ArgumentCaptor",
        "signature": "org.mockito.ArgumentCaptor.getAllValues()",
        "snippet": "    public List<T> getAllValues() {\n        return this.capturingMatcher.getAllValues();\n    }",
        "begin_line": 88,
        "end_line": 90,
        "comment": "\r\n     * Returns all captured values. Use it in case the verified method was called multiple times.\r\n     * <p>\r\n     * Example: \r\n     * <pre>\r\n     *   ArgumentCaptor&lt;Person&gt; peopleCaptor = new ArgumentCaptor&lt;Person&gt;();\r\n     *   verify(mock, times(2)).doSomething(peopleCaptor.capture());\r\n     *   \r\n     *   List&lt;Person&gt; capturedPeople = peopleCaptor.getAllValues();\r\n     *   assertEquals(\"John\", capturedPeople.get(0).getName());\r\n     *   assertEquals(\"Jane\", capturedPeople.get(1).getName());\r\n     * </pre>\r\n     * See more examples in javadoc for {@link ArgumentCaptor} class.\r\n     * \r\n     * @return captured argument value\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/BDDMockito.java",
        "class_name": "org.mockito.BDDMockito",
        "signature": "org.mockito.BDDMockito.BDDMyOngoingStubbing.willAnswer(org.mockito.stubbing.Answer<?>)",
        "snippet": "        BDDMyOngoingStubbing<T> willAnswer(Answer<?> answer);",
        "begin_line": 55,
        "end_line": 55,
        "comment": "\r\n         * See original {@link OngoingStubbing#thenAnswer(Answer)}\r\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/BDDMockito.java",
        "class_name": "org.mockito.BDDMockito",
        "signature": "org.mockito.BDDMockito.BDDMyOngoingStubbing.willReturn(T)",
        "snippet": "        BDDMyOngoingStubbing<T> willReturn(T value);",
        "begin_line": 60,
        "end_line": 60,
        "comment": "\r\n         * See original {@link OngoingStubbing#thenReturn(Object)}\r\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/BDDMockito.java",
        "class_name": "org.mockito.BDDMockito",
        "signature": "org.mockito.BDDMockito.BDDMyOngoingStubbing.willReturn(T, T...)",
        "snippet": "        BDDMyOngoingStubbing<T> willReturn(T value, T... values);",
        "begin_line": 65,
        "end_line": 65,
        "comment": "\r\n         * See original {@link OngoingStubbing#thenReturn(Object, Object...)}\r\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/BDDMockito.java",
        "class_name": "org.mockito.BDDMockito",
        "signature": "org.mockito.BDDMockito.BDDMyOngoingStubbing.willThrow(java.lang.Throwable...)",
        "snippet": "        BDDMyOngoingStubbing<T> willThrow(Throwable... throwables);",
        "begin_line": 70,
        "end_line": 70,
        "comment": "\r\n         * See original {@link OngoingStubbing#thenThrow(Throwable...)}\r\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/BDDMockito.java",
        "class_name": "org.mockito.BDDMockito",
        "signature": "org.mockito.BDDMockito.BDDMyOngoingStubbing.willCallRealMethod()",
        "snippet": "        BDDMyOngoingStubbing<T> willCallRealMethod();",
        "begin_line": 75,
        "end_line": 75,
        "comment": "\r\n         * See original {@link OngoingStubbing#thenCallRealMethod()}\r\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/BDDMockito.java",
        "class_name": "org.mockito.BDDMockito",
        "signature": "org.mockito.BDDMockito.BDDOngoingStubbingImpl.BDDOngoingStubbingImpl(org.mockito.stubbing.OngoingStubbing<T>)",
        "snippet": "        public BDDOngoingStubbingImpl(OngoingStubbing<T> ongoingStubbing) {\n            this.mockitoOngoingStubbing = ongoingStubbing;\n        }",
        "begin_line": 82,
        "end_line": 84,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/BDDMockito.java",
        "class_name": "org.mockito.BDDMockito",
        "signature": "org.mockito.BDDMockito.BDDOngoingStubbingImpl.willAnswer(org.mockito.stubbing.Answer<?>)",
        "snippet": "        public BDDMyOngoingStubbing<T> willAnswer(Answer<?> answer) {\n            return new BDDOngoingStubbingImpl<T>(mockitoOngoingStubbing.thenAnswer(answer));\n        }",
        "begin_line": 89,
        "end_line": 91,
        "comment": " (non-Javadoc)\r\n         * @see org.mockitousage.customization.BDDMockito.BDDMyOngoingStubbing#willAnswer(org.mockito.stubbing.Answer)\r\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/BDDMockito.java",
        "class_name": "org.mockito.BDDMockito",
        "signature": "org.mockito.BDDMockito.BDDOngoingStubbingImpl.willReturn(T)",
        "snippet": "        public BDDMyOngoingStubbing<T> willReturn(T value) {\n            return new BDDOngoingStubbingImpl<T>(mockitoOngoingStubbing.thenReturn(value));\n        }",
        "begin_line": 96,
        "end_line": 98,
        "comment": " (non-Javadoc)\r\n         * @see org.mockitousage.customization.BDDMockito.BDDMyOngoingStubbing#willReturn(java.lang.Object)\r\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/BDDMockito.java",
        "class_name": "org.mockito.BDDMockito",
        "signature": "org.mockito.BDDMockito.BDDOngoingStubbingImpl.willReturn(T, T...)",
        "snippet": "        public BDDMyOngoingStubbing<T> willReturn(T value, T... values) {\n            return new BDDOngoingStubbingImpl<T>(mockitoOngoingStubbing.thenReturn(value, values));\n        }",
        "begin_line": 103,
        "end_line": 105,
        "comment": " (non-Javadoc)\r\n         * @see org.mockitousage.customization.BDDMockito.BDDMyOngoingStubbing#willReturn(java.lang.Object, T[])\r\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/BDDMockito.java",
        "class_name": "org.mockito.BDDMockito",
        "signature": "org.mockito.BDDMockito.BDDOngoingStubbingImpl.willThrow(java.lang.Throwable...)",
        "snippet": "        public BDDMyOngoingStubbing<T> willThrow(Throwable... throwables) {\n            return new BDDOngoingStubbingImpl<T>(mockitoOngoingStubbing.thenThrow(throwables));\n        }",
        "begin_line": 110,
        "end_line": 112,
        "comment": " (non-Javadoc)\r\n         * @see org.mockitousage.customization.BDDMockito.BDDMyOngoingStubbing#willThrow(java.lang.Throwable[])\r\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/BDDMockito.java",
        "class_name": "org.mockito.BDDMockito",
        "signature": "org.mockito.BDDMockito.BDDOngoingStubbingImpl.willCallRealMethod()",
        "snippet": "        public BDDMyOngoingStubbing<T> willCallRealMethod() {\n            return new BDDOngoingStubbingImpl<T>(mockitoOngoingStubbing.thenCallRealMethod());\n        }",
        "begin_line": 114,
        "end_line": 116,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/BDDMockito.java",
        "class_name": "org.mockito.BDDMockito",
        "signature": "org.mockito.BDDMockito.given(T)",
        "snippet": "    public static <T> BDDMyOngoingStubbing<T> given(T methodCall) {\n        return new BDDOngoingStubbingImpl<T>(Mockito.when(methodCall));\n    }",
        "begin_line": 122,
        "end_line": 124,
        "comment": "\r\n     * see original {@link Mockito#when(Object)}\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/BDDMockito.java",
        "class_name": "org.mockito.BDDMockito",
        "signature": "org.mockito.BDDMockito.BDDStubber.willAnswer(org.mockito.stubbing.Answer)",
        "snippet": "        BDDStubber willAnswer(Answer answer);",
        "begin_line": 133,
        "end_line": 133,
        "comment": "\r\n         * See original {@link Stubber#doAnswer(Answer)}\r\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/BDDMockito.java",
        "class_name": "org.mockito.BDDMockito",
        "signature": "org.mockito.BDDMockito.BDDStubber.willNothing()",
        "snippet": "        BDDStubber willNothing();",
        "begin_line": 138,
        "end_line": 138,
        "comment": "\r\n         * See original {@link Stubber#doNothing()}\r\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/BDDMockito.java",
        "class_name": "org.mockito.BDDMockito",
        "signature": "org.mockito.BDDMockito.BDDStubber.willReturn(java.lang.Object)",
        "snippet": "        BDDStubber willReturn(Object toBeReturned);",
        "begin_line": 143,
        "end_line": 143,
        "comment": "\r\n         * See original {@link Stubber#doReturn(Object)}\r\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/BDDMockito.java",
        "class_name": "org.mockito.BDDMockito",
        "signature": "org.mockito.BDDMockito.BDDStubber.willThrow(java.lang.Throwable)",
        "snippet": "        BDDStubber willThrow(Throwable toBeThrown);",
        "begin_line": 148,
        "end_line": 148,
        "comment": "\r\n         * See original {@link Stubber#doThrow(Throwable)}\r\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/BDDMockito.java",
        "class_name": "org.mockito.BDDMockito",
        "signature": "org.mockito.BDDMockito.BDDStubber.given(T)",
        "snippet": "        <T> T given(T mock);",
        "begin_line": 153,
        "end_line": 153,
        "comment": "\r\n         * See original {@link Stubber#when(Object)}\r\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/BDDMockito.java",
        "class_name": "org.mockito.BDDMockito",
        "signature": "org.mockito.BDDMockito.BDDStubberImpl.BDDStubberImpl(org.mockito.stubbing.Stubber)",
        "snippet": "        public BDDStubberImpl(Stubber mockitoStubber) {\n            this.mockitoStubber = mockitoStubber;\n        }",
        "begin_line": 160,
        "end_line": 162,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/BDDMockito.java",
        "class_name": "org.mockito.BDDMockito",
        "signature": "org.mockito.BDDMockito.BDDStubberImpl.given(T)",
        "snippet": "        public <T> T given(T mock) {\n            return mockitoStubber.when(mock);\n        }",
        "begin_line": 167,
        "end_line": 169,
        "comment": " (non-Javadoc)\r\n         * @see org.mockitousage.customization.BDDMockito.BDDStubber#given(java.lang.Object)\r\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/BDDMockito.java",
        "class_name": "org.mockito.BDDMockito",
        "signature": "org.mockito.BDDMockito.BDDStubberImpl.willAnswer(org.mockito.stubbing.Answer)",
        "snippet": "        public BDDStubber willAnswer(Answer answer) {\n            return new BDDStubberImpl(mockitoStubber.doAnswer(answer));\n        }",
        "begin_line": 174,
        "end_line": 176,
        "comment": " (non-Javadoc)\r\n         * @see org.mockitousage.customization.BDDMockito.BDDStubber#willAnswer(org.mockito.stubbing.Answer)\r\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/BDDMockito.java",
        "class_name": "org.mockito.BDDMockito",
        "signature": "org.mockito.BDDMockito.BDDStubberImpl.willNothing()",
        "snippet": "        public BDDStubber willNothing() {\n            return new BDDStubberImpl(mockitoStubber.doNothing());\n        }",
        "begin_line": 181,
        "end_line": 183,
        "comment": " (non-Javadoc)\r\n         * @see org.mockitousage.customization.BDDMockito.BDDStubber#willNothing()\r\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/BDDMockito.java",
        "class_name": "org.mockito.BDDMockito",
        "signature": "org.mockito.BDDMockito.BDDStubberImpl.willReturn(java.lang.Object)",
        "snippet": "        public BDDStubber willReturn(Object toBeReturned) {\n            return new BDDStubberImpl(mockitoStubber.doReturn(toBeReturned));\n        }",
        "begin_line": 188,
        "end_line": 190,
        "comment": " (non-Javadoc)\r\n         * @see org.mockitousage.customization.BDDMockito.BDDStubber#willReturn(java.lang.Object)\r\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/BDDMockito.java",
        "class_name": "org.mockito.BDDMockito",
        "signature": "org.mockito.BDDMockito.BDDStubberImpl.willThrow(java.lang.Throwable)",
        "snippet": "        public BDDStubber willThrow(Throwable toBeThrown) {\n            return new BDDStubberImpl(mockitoStubber.doThrow(toBeThrown));\n        }",
        "begin_line": 195,
        "end_line": 197,
        "comment": " (non-Javadoc)\r\n         * @see org.mockitousage.customization.BDDMockito.BDDStubber#willThrow(java.lang.Throwable)\r\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/BDDMockito.java",
        "class_name": "org.mockito.BDDMockito",
        "signature": "org.mockito.BDDMockito.willThrow(java.lang.Throwable)",
        "snippet": "    public static BDDStubber willThrow(Throwable toBeThrown) {\n        return new BDDStubberImpl(Mockito.doThrow(toBeThrown));\n    }",
        "begin_line": 203,
        "end_line": 205,
        "comment": "\r\n     * see original {@link Mockito#doThrow(Throwable)}\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/BDDMockito.java",
        "class_name": "org.mockito.BDDMockito",
        "signature": "org.mockito.BDDMockito.willAnswer(org.mockito.stubbing.Answer)",
        "snippet": "    public static BDDStubber willAnswer(Answer answer) {\n        return new BDDStubberImpl(Mockito.doAnswer(answer));\n    }  ",
        "begin_line": 210,
        "end_line": 212,
        "comment": "\r\n     * see original {@link Mockito#doAnswer(Answer)}\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/BDDMockito.java",
        "class_name": "org.mockito.BDDMockito",
        "signature": "org.mockito.BDDMockito.willDoNothing()",
        "snippet": "    public static BDDStubber willDoNothing() {\n        return new BDDStubberImpl(Mockito.doNothing());\n    }    ",
        "begin_line": 217,
        "end_line": 219,
        "comment": "\r\n     * see original {@link Mockito#doNothing()}\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/BDDMockito.java",
        "class_name": "org.mockito.BDDMockito",
        "signature": "org.mockito.BDDMockito.willReturn(java.lang.Object)",
        "snippet": "    public static BDDStubber willReturn(Object toBeReturned) {\n        return new BDDStubberImpl(Mockito.doReturn(toBeReturned));\n    }",
        "begin_line": 224,
        "end_line": 226,
        "comment": "\r\n     * see original {@link Mockito#doReturn(Object)}\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/BDDMockito.java",
        "class_name": "org.mockito.BDDMockito",
        "signature": "org.mockito.BDDMockito.willCallRealMethod()",
        "snippet": "    public static BDDStubber willCallRealMethod() {\n        return new BDDStubberImpl(Mockito.doCallRealMethod());\n    }",
        "begin_line": 231,
        "end_line": 233,
        "comment": "\r\n     * see original {@link Mockito#doCallRealMethod()}\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.geq(java.lang.Comparable<T>)",
        "snippet": "    public static <T extends Comparable<T>> T geq(Comparable<T> value) {\n        return reportMatcher(new GreaterOrEqual<T>(value)).<T>returnNull();\n    }",
        "begin_line": 54,
        "end_line": 56,
        "comment": "\n     * argument greater than or equal the given value.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param value\n     *            the given value.\n     * @return <code>null</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.geq(byte)",
        "snippet": "    public static byte geq(byte value) {\n        return reportMatcher(new GreaterOrEqual<Byte>(value)).returnZero();\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * byte argument greater than or equal to the given value.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param value\n     *            the given value.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.geq(double)",
        "snippet": "    public static double geq(double value) {\n        return reportMatcher(new GreaterOrEqual<Double>(value)).returnZero();\n    }",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\n     * double argument greater than or equal to the given value.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param value\n     *            the given value.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.geq(float)",
        "snippet": "    public static float geq(float value) {\n        return reportMatcher(new GreaterOrEqual<Float>(value)).returnZero();\n    }",
        "begin_line": 93,
        "end_line": 95,
        "comment": "\n     * float argument greater than or equal to the given value.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param value\n     *            the given value.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.geq(int)",
        "snippet": "    public static int geq(int value) {\n        return reportMatcher(new GreaterOrEqual<Integer>(value)).returnZero();\n    }",
        "begin_line": 106,
        "end_line": 108,
        "comment": "\n     * int argument greater than or equal to the given value.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param value\n     *            the given value.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.geq(long)",
        "snippet": "    public static long geq(long value) {\n        return reportMatcher(new GreaterOrEqual<Long>(value)).returnZero();\n    }",
        "begin_line": 119,
        "end_line": 121,
        "comment": "\n     * long argument greater than or equal to the given value.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param value\n     *            the given value.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.geq(short)",
        "snippet": "    public static short geq(short value) {\n        return reportMatcher(new GreaterOrEqual<Short>(value)).returnZero();\n    }",
        "begin_line": 132,
        "end_line": 134,
        "comment": "\n     * short argument greater than or equal to the given value.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param value\n     *            the given value.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.leq(java.lang.Comparable<T>)",
        "snippet": "    public static <T extends Comparable<T>> T leq(Comparable<T> value) {\n        return reportMatcher(new LessOrEqual<T>(value)).<T>returnNull();\n    }",
        "begin_line": 145,
        "end_line": 147,
        "comment": "\n     * comparable argument less than or equal the given value details.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param value\n     *            the given value.\n     * @return <code>null</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.leq(byte)",
        "snippet": "    public static byte leq(byte value) {\n        return reportMatcher(new LessOrEqual<Byte>(value)).returnZero();\n    }",
        "begin_line": 158,
        "end_line": 160,
        "comment": "\n     * byte argument less than or equal to the given value.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param value\n     *            the given value.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.leq(double)",
        "snippet": "    public static double leq(double value) {\n        return reportMatcher(new LessOrEqual<Double>(value)).returnZero();\n    }",
        "begin_line": 171,
        "end_line": 173,
        "comment": "\n     * double argument less than or equal to the given value.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param value\n     *            the given value.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.leq(float)",
        "snippet": "    public static float leq(float value) {\n        return reportMatcher(new LessOrEqual<Float>(value)).returnZero();\n    }",
        "begin_line": 184,
        "end_line": 186,
        "comment": "\n     * float argument less than or equal to the given value.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param value\n     *            the given value.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.leq(int)",
        "snippet": "    public static int leq(int value) {\n        return reportMatcher(new LessOrEqual<Integer>(value)).returnZero();\n    }",
        "begin_line": 197,
        "end_line": 199,
        "comment": "\n     * int argument less than or equal to the given value.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param value\n     *            the given value.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.leq(long)",
        "snippet": "    public static long leq(long value) {\n        return reportMatcher(new LessOrEqual<Long>(value)).returnZero();\n    }",
        "begin_line": 210,
        "end_line": 212,
        "comment": "\n     * long argument less than or equal to the given value.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param value\n     *            the given value.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.leq(short)",
        "snippet": "    public static short leq(short value) {\n        return reportMatcher(new LessOrEqual<Short>(value)).returnZero();\n    }",
        "begin_line": 223,
        "end_line": 225,
        "comment": "\n     * short argument less than or equal to the given value.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class \n     * \n     * @param value\n     *            the given value.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.gt(java.lang.Comparable<T>)",
        "snippet": "    public static <T extends Comparable<T>> T gt(Comparable<T> value) {\n        return reportMatcher(new GreaterThan<T>(value)).<T>returnNull();\n    }",
        "begin_line": 236,
        "end_line": 238,
        "comment": "\n     * comparable argument greater than the given value.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param value\n     *            the given value.\n     * @return <code>null</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.gt(byte)",
        "snippet": "    public static byte gt(byte value) {\n        return reportMatcher(new GreaterThan<Byte>(value)).returnZero();\n    }",
        "begin_line": 249,
        "end_line": 251,
        "comment": "\n     * byte argument greater than the given value.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param value\n     *            the given value.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.gt(double)",
        "snippet": "    public static double gt(double value) {\n        return reportMatcher(new GreaterThan<Double>(value)).returnZero();\n    }",
        "begin_line": 262,
        "end_line": 264,
        "comment": "\n     * double argument greater than the given value.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param value\n     *            the given value.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.gt(float)",
        "snippet": "    public static float gt(float value) {\n        return reportMatcher(new GreaterThan<Float>(value)).returnZero();\n    }",
        "begin_line": 275,
        "end_line": 277,
        "comment": "\n     * float argument greater than the given value.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param value\n     *            the given value.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.gt(int)",
        "snippet": "    public static int gt(int value) {\n        return reportMatcher(new GreaterThan<Integer>(value)).returnZero();\n    }",
        "begin_line": 288,
        "end_line": 290,
        "comment": "\n     * int argument greater than the given value.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param value\n     *            the given value.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.gt(long)",
        "snippet": "    public static long gt(long value) {\n        return reportMatcher(new GreaterThan<Long>(value)).returnZero();\n    }",
        "begin_line": 301,
        "end_line": 303,
        "comment": "\n     * long argument greater than the given value.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param value\n     *            the given value.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.gt(short)",
        "snippet": "    public static short gt(short value) {\n        return reportMatcher(new GreaterThan<Short>(value)).returnZero();\n    }",
        "begin_line": 314,
        "end_line": 316,
        "comment": "\n     * short argument greater than the given value.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param value\n     *            the given value.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.lt(java.lang.Comparable<T>)",
        "snippet": "    public static <T extends Comparable<T>> T lt(Comparable<T> value) {\n        return reportMatcher(new LessThan<T>(value)).<T>returnNull();\n    }",
        "begin_line": 327,
        "end_line": 329,
        "comment": "\n     * comparable argument less than the given value.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param value\n     *            the given value.\n     * @return <code>null</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.lt(byte)",
        "snippet": "    public static byte lt(byte value) {\n        return reportMatcher(new LessThan<Byte>(value)).returnZero();\n    }",
        "begin_line": 340,
        "end_line": 342,
        "comment": "\n     * byte argument less than the given value.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param value\n     *            the given value.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.lt(double)",
        "snippet": "    public static double lt(double value) {\n        return reportMatcher(new LessThan<Double>(value)).returnZero();\n    }",
        "begin_line": 353,
        "end_line": 355,
        "comment": "\n     * double argument less than the given value.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param value\n     *            the given value.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.lt(float)",
        "snippet": "    public static float lt(float value) {\n        return reportMatcher(new LessThan<Float>(value)).returnZero();\n    }",
        "begin_line": 366,
        "end_line": 368,
        "comment": "\n     * float argument less than the given value.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param value\n     *            the given value.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.lt(int)",
        "snippet": "    public static int lt(int value) {\n        return reportMatcher(new LessThan<Integer>(value)).returnZero();\n    }",
        "begin_line": 379,
        "end_line": 381,
        "comment": "\n     * int argument less than the given value.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param value\n     *            the given value.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.lt(long)",
        "snippet": "    public static long lt(long value) {\n        return reportMatcher(new LessThan<Long>(value)).returnZero();\n    }",
        "begin_line": 392,
        "end_line": 394,
        "comment": "\n     * long argument less than the given value.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param value\n     *            the given value.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.lt(short)",
        "snippet": "    public static short lt(short value) {\n        return reportMatcher(new LessThan<Short>(value)).returnZero();\n    }",
        "begin_line": 405,
        "end_line": 407,
        "comment": "\n     * short argument less than the given value.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param value\n     *            the given value.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.cmpEq(java.lang.Comparable<T>)",
        "snippet": "    public static <T extends Comparable<T>> T cmpEq(Comparable<T> value) {\n        return reportMatcher(new CompareEqual<T>(value)).<T>returnNull();\n    }",
        "begin_line": 419,
        "end_line": 421,
        "comment": "\n     * comparable argument equals to the given value according to their\n     * compareTo method.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param value\n     *            the given value.\n     * @return <code>null</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.find(java.lang.String)",
        "snippet": "    public static String find(String regex) {\n        return reportMatcher(new Find(regex)).<String>returnNull();\n    }",
        "begin_line": 431,
        "end_line": 433,
        "comment": "\n     * String argument that contains a substring that matches the given regular\n     * expression.\n     * \n     * @param regex\n     *            the regular expression.\n     * @return <code>null</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.aryEq(T[])",
        "snippet": "    public static <T> T[] aryEq(T[] value) {\n        return reportMatcher(new ArrayEquals(value)).returnNull();\n    }",
        "begin_line": 447,
        "end_line": 449,
        "comment": "\n     * Object array argument that is equal to the given array, i.e. it has to\n     * have the same type, length, and each element has to be equal.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param <T>\n     *            the type of the array, it is passed through to prevent casts.\n     * @param value\n     *            the given array.\n     * @return <code>null</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.aryEq(short[])",
        "snippet": "    public static short[] aryEq(short[] value) {\n        return reportMatcher(new ArrayEquals(value)).returnNull();\n    }",
        "begin_line": 461,
        "end_line": 463,
        "comment": "\n     * short array argument that is equal to the given array, i.e. it has to\n     * have the same length, and each element has to be equal.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param value\n     *            the given array.\n     * @return <code>null</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.aryEq(long[])",
        "snippet": "    public static long[] aryEq(long[] value) {\n        return reportMatcher(new ArrayEquals(value)).returnNull();\n    }",
        "begin_line": 475,
        "end_line": 477,
        "comment": "\n     * long array argument that is equal to the given array, i.e. it has to have\n     * the same length, and each element has to be equal.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param value\n     *            the given array.\n     * @return <code>null</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.aryEq(int[])",
        "snippet": "    public static int[] aryEq(int[] value) {\n        return reportMatcher(new ArrayEquals(value)).returnNull();       \n    }",
        "begin_line": 489,
        "end_line": 491,
        "comment": "\n     * int array argument that is equal to the given array, i.e. it has to have\n     * the same length, and each element has to be equal.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param value\n     *            the given array.\n     * @return <code>null</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.aryEq(float[])",
        "snippet": "    public static float[] aryEq(float[] value) {\n        return reportMatcher(new ArrayEquals(value)).returnNull();\n    }",
        "begin_line": 503,
        "end_line": 505,
        "comment": "\n     * float array argument that is equal to the given array, i.e. it has to\n     * have the same length, and each element has to be equal.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param value\n     *            the given array.\n     * @return <code>null</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.aryEq(double[])",
        "snippet": "    public static double[] aryEq(double[] value) {\n        return reportMatcher(new ArrayEquals(value)).returnNull();\n    }",
        "begin_line": 517,
        "end_line": 519,
        "comment": "\n     * double array argument that is equal to the given array, i.e. it has to\n     * have the same length, and each element has to be equal.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param value\n     *            the given array.\n     * @return <code>null</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.aryEq(char[])",
        "snippet": "    public static char[] aryEq(char[] value) {\n        return reportMatcher(new ArrayEquals(value)).returnNull();\n    }",
        "begin_line": 531,
        "end_line": 533,
        "comment": "\n     * char array argument that is equal to the given array, i.e. it has to have\n     * the same length, and each element has to be equal.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param value\n     *            the given array.\n     * @return <code>null</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.aryEq(byte[])",
        "snippet": "    public static byte[] aryEq(byte[] value) {\n        return reportMatcher(new ArrayEquals(value)).returnNull();\n    }",
        "begin_line": 545,
        "end_line": 547,
        "comment": "\n     * byte array argument that is equal to the given array, i.e. it has to have\n     * the same length, and each element has to be equal.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param value\n     *            the given array.\n     * @return <code>null</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.aryEq(boolean[])",
        "snippet": "    public static boolean[] aryEq(boolean[] value) {\n        return reportMatcher(new ArrayEquals(value)).returnNull();\n    }",
        "begin_line": 559,
        "end_line": 561,
        "comment": "\n     * boolean array argument that is equal to the given array, i.e. it has to\n     * have the same length, and each element has to be equal.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param value\n     *            the given array.\n     * @return <code>null</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.and(boolean, boolean)",
        "snippet": "    public static boolean and(boolean first, boolean second) {\n        return mockingProgress.getArgumentMatcherStorage().reportAnd().returnFalse();\n    }",
        "begin_line": 574,
        "end_line": 576,
        "comment": "\n     * boolean argument that matches both given matchers.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param first\n     *            placeholder for the first argument matcher.\n     * @param second\n     *            placeholder for the second argument matcher.\n     * @return <code>false</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.and(byte, byte)",
        "snippet": "    public static byte and(byte first, byte second) {\n        return mockingProgress.getArgumentMatcherStorage().reportAnd().returnZero();\n    }",
        "begin_line": 589,
        "end_line": 591,
        "comment": "\n     * byte argument that matches both given argument matchers.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param first\n     *            placeholder for the first argument matcher.\n     * @param second\n     *            placeholder for the second argument matcher.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.and(char, char)",
        "snippet": "    public static char and(char first, char second) {\n        return mockingProgress.getArgumentMatcherStorage().reportAnd().returnChar();\n    }",
        "begin_line": 604,
        "end_line": 606,
        "comment": "\n     * char argument that matches both given argument matchers.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param first\n     *            placeholder for the first argument matcher.\n     * @param second\n     *            placeholder for the second argument matcher.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.and(double, double)",
        "snippet": "    public static double and(double first, double second) {\n        return mockingProgress.getArgumentMatcherStorage().reportAnd().returnZero();\n    }",
        "begin_line": 619,
        "end_line": 621,
        "comment": "\n     * double argument that matches both given argument matchers.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param first\n     *            placeholder for the first argument matcher.\n     * @param second\n     *            placeholder for the second argument matcher.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.and(float, float)",
        "snippet": "    public static float and(float first, float second) {\n        return mockingProgress.getArgumentMatcherStorage().reportAnd().returnZero();\n    }",
        "begin_line": 634,
        "end_line": 636,
        "comment": "\n     * float argument that matches both given argument matchers.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param first\n     *            placeholder for the first argument matcher.\n     * @param second\n     *            placeholder for the second argument matcher.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.and(int, int)",
        "snippet": "    public static int and(int first, int second) {\n        return mockingProgress.getArgumentMatcherStorage().reportAnd().returnZero();\n    }",
        "begin_line": 649,
        "end_line": 651,
        "comment": "\n     * int argument that matches both given argument matchers.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param first\n     *            placeholder for the first argument matcher.\n     * @param second\n     *            placeholder for the second argument matcher.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.and(long, long)",
        "snippet": "    public static long and(long first, long second) {\n        return mockingProgress.getArgumentMatcherStorage().reportAnd().returnZero();\n    }",
        "begin_line": 664,
        "end_line": 666,
        "comment": "\n     * long argument that matches both given argument matchers.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param first\n     *            placeholder for the first argument matcher.\n     * @param second\n     *            placeholder for the second argument matcher.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.and(short, short)",
        "snippet": "    public static short and(short first, short second) {\n        return mockingProgress.getArgumentMatcherStorage().reportAnd().returnZero();\n    }",
        "begin_line": 679,
        "end_line": 681,
        "comment": "\n     * short argument that matches both given argument matchers.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param first\n     *            placeholder for the first argument matcher.\n     * @param second\n     *            placeholder for the second argument matcher.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.and(T, T)",
        "snippet": "    public static <T> T and(T first, T second) {\n        return mockingProgress.getArgumentMatcherStorage().reportAnd().<T>returnNull();\n    }",
        "begin_line": 696,
        "end_line": 698,
        "comment": "\n     * Object argument that matches both given argument matchers.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param <T>\n     *            the type of the object, it is passed through to prevent casts.\n     * @param first\n     *            placeholder for the first argument matcher.\n     * @param second\n     *            placeholder for the second argument matcher.\n     * @return <code>null</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.or(boolean, boolean)",
        "snippet": "    public static boolean or(boolean first, boolean second) {\n        return mockingProgress.getArgumentMatcherStorage().reportOr().returnFalse();\n    }",
        "begin_line": 711,
        "end_line": 713,
        "comment": "\n     * boolean argument that matches any of the given argument matchers.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param first\n     *            placeholder for the first argument matcher.\n     * @param second\n     *            placeholder for the second argument matcher.\n     * @return <code>false</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.or(T, T)",
        "snippet": "    public static <T> T or(T first, T second) {\n        return mockingProgress.getArgumentMatcherStorage().reportOr().<T>returnNull();\n    }",
        "begin_line": 728,
        "end_line": 730,
        "comment": "\n     * Object argument that matches any of the given argument matchers.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param <T>\n     *            the type of the object, it is passed through to prevent casts.\n     * @param first\n     *            placeholder for the first argument matcher.\n     * @param second\n     *            placeholder for the second argument matcher.\n     * @return <code>null</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.or(short, short)",
        "snippet": "    public static short or(short first, short second) {\n        return mockingProgress.getArgumentMatcherStorage().reportOr().returnZero();\n    }",
        "begin_line": 743,
        "end_line": 745,
        "comment": "\n     * short argument that matches any of the given argument matchers.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param first\n     *            placeholder for the first argument matcher.\n     * @param second\n     *            placeholder for the second argument matcher.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.or(long, long)",
        "snippet": "    public static long or(long first, long second) {\n        return mockingProgress.getArgumentMatcherStorage().reportOr().returnZero();\n    }",
        "begin_line": 758,
        "end_line": 760,
        "comment": "\n     * long argument that matches any of the given argument matchers.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param first\n     *            placeholder for the first argument matcher.\n     * @param second\n     *            placeholder for the second argument matcher.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.or(int, int)",
        "snippet": "    public static int or(int first, int second) {\n        return mockingProgress.getArgumentMatcherStorage().reportOr().returnZero();\n    }",
        "begin_line": 773,
        "end_line": 775,
        "comment": "\n     * int argument that matches any of the given argument matchers.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param first\n     *            placeholder for the first argument matcher.\n     * @param second\n     *            placeholder for the second argument matcher.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.or(float, float)",
        "snippet": "    public static float or(float first, float second) {\n        return mockingProgress.getArgumentMatcherStorage().reportOr().returnZero();\n    }",
        "begin_line": 788,
        "end_line": 790,
        "comment": "\n     * float argument that matches any of the given argument matchers.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param first\n     *            placeholder for the first argument matcher.\n     * @param second\n     *            placeholder for the second argument matcher.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.or(double, double)",
        "snippet": "    public static double or(double first, double second) {\n        return mockingProgress.getArgumentMatcherStorage().reportOr().returnZero();\n    }",
        "begin_line": 803,
        "end_line": 805,
        "comment": "\n     * double argument that matches any of the given argument matchers.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param first\n     *            placeholder for the first argument matcher.\n     * @param second\n     *            placeholder for the second argument matcher.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.or(char, char)",
        "snippet": "    public static char or(char first, char second) {\n        return mockingProgress.getArgumentMatcherStorage().reportOr().returnChar();\n    }",
        "begin_line": 818,
        "end_line": 820,
        "comment": "\n     * char argument that matches any of the given argument matchers.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param first\n     *            placeholder for the first argument matcher.\n     * @param second\n     *            placeholder for the second argument matcher.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.or(byte, byte)",
        "snippet": "    public static byte or(byte first, byte second) {\n        return mockingProgress.getArgumentMatcherStorage().reportOr().returnZero();\n    }",
        "begin_line": 833,
        "end_line": 835,
        "comment": "\n     * byte argument that matches any of the given argument matchers.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param first\n     *            placeholder for the first argument matcher.\n     * @param second\n     *            placeholder for the second argument matcher.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.not(T)",
        "snippet": "    public static <T> T not(T first) {\n        return mockingProgress.getArgumentMatcherStorage().reportNot().<T>returnNull();\n    }",
        "begin_line": 848,
        "end_line": 850,
        "comment": "\n     * Object argument that does not match the given argument matcher.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param <T>\n     *            the type of the object, it is passed through to prevent casts.\n     * @param first\n     *            placeholder for the argument matcher.\n     * @return <code>null</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.not(short)",
        "snippet": "    public static short not(short first) {\n        return mockingProgress.getArgumentMatcherStorage().reportNot().returnZero();\n    }",
        "begin_line": 861,
        "end_line": 863,
        "comment": "\n     * short argument that does not match the given argument matcher.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param first\n     *            placeholder for the argument matcher.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.not(int)",
        "snippet": "    public static int not(int first) {\n        return mockingProgress.getArgumentMatcherStorage().reportNot().returnZero();\n    }",
        "begin_line": 874,
        "end_line": 876,
        "comment": "\n     * int argument that does not match the given argument matcher.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param first\n     *            placeholder for the argument matcher.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.not(long)",
        "snippet": "    public static long not(long first) {\n        return mockingProgress.getArgumentMatcherStorage().reportNot().returnZero();\n    }",
        "begin_line": 887,
        "end_line": 889,
        "comment": "\n     * long argument that does not match the given argument matcher.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param first\n     *            placeholder for the argument matcher.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.not(float)",
        "snippet": "    public static float not(float first) {\n        return mockingProgress.getArgumentMatcherStorage().reportNot().returnZero();\n    }",
        "begin_line": 900,
        "end_line": 902,
        "comment": "\n     * float argument that does not match the given argument matcher.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param first\n     *            placeholder for the argument matcher.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.not(double)",
        "snippet": "    public static double not(double first) {\n        return mockingProgress.getArgumentMatcherStorage().reportNot().returnZero();\n    }",
        "begin_line": 913,
        "end_line": 915,
        "comment": "\n     * double argument that does not match the given argument matcher.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param first\n     *            placeholder for the argument matcher.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.not(char)",
        "snippet": "    public static char not(char first) {\n        return mockingProgress.getArgumentMatcherStorage().reportNot().returnChar();\n    }",
        "begin_line": 926,
        "end_line": 928,
        "comment": "\n     * char argument that does not match the given argument matcher.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param first\n     *            placeholder for the argument matcher.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.not(boolean)",
        "snippet": "    public static boolean not(boolean first) {\n        return mockingProgress.getArgumentMatcherStorage().reportNot().returnFalse();\n    }",
        "begin_line": 939,
        "end_line": 941,
        "comment": "\n     * boolean argument that does not match the given argument matcher.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param first\n     *            placeholder for the argument matcher.\n     * @return <code>false</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.not(byte)",
        "snippet": "    public static byte not(byte first) {\n        return mockingProgress.getArgumentMatcherStorage().reportNot().returnZero();\n    }",
        "begin_line": 952,
        "end_line": 954,
        "comment": "\n     * byte argument that does not match the given argument matcher.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param first\n     *            placeholder for the argument matcher.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.eq(double, double)",
        "snippet": "    public static double eq(double value, double delta) {\n        return reportMatcher(new EqualsWithDelta(value, delta)).returnZero();\n    }",
        "begin_line": 968,
        "end_line": 970,
        "comment": "\n     * double argument that has an absolute difference to the given value that\n     * is less than the given delta details.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param value\n     *            the given value.\n     * @param delta\n     *            the given delta.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.eq(float, float)",
        "snippet": "    public static float eq(float value, float delta) {\n        return reportMatcher(new EqualsWithDelta(value, delta)).returnZero();\n    }",
        "begin_line": 984,
        "end_line": 986,
        "comment": "\n     * float argument that has an absolute difference to the given value that is\n     * less than the given delta details.\n     * <p>\n     * See examples in javadoc for {@link AdditionalMatchers} class\n     * \n     * @param value\n     *            the given value.\n     * @param delta\n     *            the given delta.\n     * @return <code>0</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/AdditionalMatchers.java",
        "class_name": "org.mockito.AdditionalMatchers",
        "signature": "org.mockito.AdditionalMatchers.reportMatcher(org.mockito.ArgumentMatcher<?>)",
        "snippet": "    private static HandyReturnValues reportMatcher(ArgumentMatcher<?> matcher) {\n        return mockingProgress.getArgumentMatcherStorage().reportMatcher(matcher);\n    }",
        "begin_line": 988,
        "end_line": 990,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/MockitoAnnotations.java",
        "class_name": "org.mockito.MockitoAnnotations",
        "signature": "org.mockito.MockitoAnnotations.initMocks(java.lang.Object)",
        "snippet": "    public static void initMocks(Object testClass) {\n        if (testClass == null) {\n            throw new MockitoException(\"testClass cannot be null. For info how to use @Mock annotations see examples in javadoc for MockitoAnnotations class\");\n        }\n        \n        Class<?> clazz = testClass.getClass();\n        while (clazz != Object.class) {\n            scan(testClass, clazz);\n            clazz = clazz.getSuperclass();\n        }\n    }",
        "begin_line": 80,
        "end_line": 90,
        "comment": "\n     * Initializes objects annotated with &#064;Mock for given testClass.\n     * <p>\n     * See examples in javadoc for {@link MockitoAnnotations} class.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/MockitoAnnotations.java",
        "class_name": "org.mockito.MockitoAnnotations",
        "signature": "org.mockito.MockitoAnnotations.scan(java.lang.Object, java.lang.Class<?>)",
        "snippet": "    private static void scan(Object testClass, Class<?> clazz) {\n        AnnotationEngine annotationEngine = new GlobalConfiguration().getAnnotationEngine();\n        Field[] fields = clazz.getDeclaredFields();\n        for (Field field : fields) {\n            for(Annotation annotation : field.getAnnotations()) {\n                Object mock = annotationEngine.createMockFor(annotation, field);\n                if (mock != null) {\n                    boolean wasAccessible = field.isAccessible();\n                    field.setAccessible(true);\n                    try {\n                        field.set(testClass, mock);\n                    } catch (IllegalAccessException e) {\n                        throw new MockitoException(\"Problems initiating mocks annotated with \" + annotation, e);\n                    } finally {\n                        field.setAccessible(wasAccessible);\n                    }    \n                }\n            }\n        }\n    }",
        "begin_line": 92,
        "end_line": 111,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/ReturnValues.java",
        "class_name": "org.mockito.ReturnValues",
        "signature": "org.mockito.ReturnValues.valueFor(org.mockito.invocation.InvocationOnMock)",
        "snippet": "    Object valueFor(InvocationOnMock invocation) throws Throwable;",
        "begin_line": 35,
        "end_line": 35,
        "comment": "\n     * return value for an unstubbed invocation\n     * \n     * @param invocation placeholder for mock and a method\n     * @return the return value\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Mockito.java",
        "class_name": "org.mockito.Mockito",
        "signature": "org.mockito.Mockito.mock(java.lang.Class<T>)",
        "snippet": "    public static <T> T mock(Class<T> classToMock) {\n        return mock(classToMock, withSettings().defaultAnswer(RETURNS_DEFAULTS));\n    }",
        "begin_line": 670,
        "end_line": 672,
        "comment": "\r\n     * Creates mock object of given class or interface.\r\n     * <p>\r\n     * See examples in javadoc for {@link Mockito} class\r\n     * \r\n     * @param classToMock class or interface to mock\r\n     * @return mock object\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Mockito.java",
        "class_name": "org.mockito.Mockito",
        "signature": "org.mockito.Mockito.mock(java.lang.Class<T>, java.lang.String)",
        "snippet": "    public static <T> T mock(Class<T> classToMock, String name) {\n        return mock(classToMock, withSettings()\n                .name(name)\n                .defaultAnswer(RETURNS_DEFAULTS));\n    }",
        "begin_line": 688,
        "end_line": 692,
        "comment": "\r\n     * Specifies mock name. Naming mocks can be helpful for debugging - the name is used in all verification errors. \r\n     * <p>\r\n     * Beware that naming mocks is not a solution for complex code which uses too many mocks or collaborators. \r\n     * <b>If you have too many mocks then refactor the code</b> so that it's easy to test/debug without necessity of naming mocks.\r\n     * <p>\r\n     * <b>If you use &#064;Mock annotation then you've got naming mocks for free!</b> &#064;Mock uses field name as mock name. {@link Mock Read more.}\r\n     * <p>\r\n     * \r\n     * See examples in javadoc for {@link Mockito} class\r\n     * \r\n     * @param classToMock class or interface to mock\r\n     * @return mock object\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Mockito.java",
        "class_name": "org.mockito.Mockito",
        "signature": "org.mockito.Mockito.mock(java.lang.Class<T>, org.mockito.ReturnValues)",
        "snippet": "    @Deprecated\n    public static <T> T mock(Class<T> classToMock, ReturnValues returnValues) {\n        return mock(classToMock, withSettings().defaultAnswer(new AnswerReturnValuesAdapter(returnValues)));\n    }",
        "begin_line": 723,
        "end_line": 726,
        "comment": "\r\n     * @deprecated\r\n     * <b>Please use mock(Foo.class, defaultAnswer);</b>\r\n     * <p>\r\n     * See {@link Mockito#mock(Class, Answer)}\r\n     * <p>\r\n     * Why it is deprecated? ReturnValues is being replaced by Answer\r\n     * for better consistency & interoperability of the framework. \r\n     * Answer interface has been in Mockito for a while and it has the same responsibility as ReturnValues.\r\n     * There's no point in mainting exactly the same interfaces.\r\n     * <p>\r\n     * Creates mock with a specified strategy for its return values. \r\n     * It's quite advanced feature and typically you don't need it to write decent tests.\r\n     * However it can be helpful when working with legacy systems.\r\n     * <p>\r\n     * Obviously return values are used only when you don't stub the method call.\r\n     *\r\n     * <pre>\r\n     *   Foo mock = mock(Foo.class, Mockito.RETURNS_SMART_NULLS);\r\n     *   Foo mockTwo = mock(Foo.class, new YourOwnReturnValues()); \r\n     * </pre>\r\n     * \r\n     * <p>See examples in javadoc for {@link Mockito} class</p>\r\n     * \r\n     * @param classToMock class or interface to mock\r\n     * @param returnValues default return values for unstubbed methods\r\n     *\r\n     * @return mock object\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Mockito.java",
        "class_name": "org.mockito.Mockito",
        "signature": "org.mockito.Mockito.mock(java.lang.Class<T>, org.mockito.stubbing.Answer)",
        "snippet": "    public static <T> T mock(Class<T> classToMock, Answer defaultAnswer) {\n        return mock(classToMock, withSettings().defaultAnswer(defaultAnswer));\n    }",
        "begin_line": 747,
        "end_line": 749,
        "comment": "\r\n     * Creates mock with a specified strategy for its answers to interactions. \r\n     * It's quite advanced feature and typically you don't need it to write decent tests.\r\n     * However it can be helpful when working with legacy systems.\r\n     * <p>\r\n     * It is the default answer so it will be used <b>only when you don't</b> stub the method call.\r\n     *\r\n     * <pre>\r\n     *   Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);\r\n     *   Foo mockTwo = mock(Foo.class, new YourOwnAnswer()); \r\n     * </pre>\r\n     * \r\n     * <p>See examples in javadoc for {@link Mockito} class</p>\r\n     * \r\n     * @param classToMock class or interface to mock\r\n     * @param defaultAnswer default answer for unstubbed methods\r\n     *\r\n     * @return mock object\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Mockito.java",
        "class_name": "org.mockito.Mockito",
        "signature": "org.mockito.Mockito.mock(java.lang.Class<T>, org.mockito.MockSettings)",
        "snippet": "    public static <T> T mock(Class<T> classToMock, MockSettings mockSettings) {\n        return MOCKITO_CORE.mock(classToMock, mockSettings);\n    }",
        "begin_line": 774,
        "end_line": 776,
        "comment": "\r\n     * Creates a mock with some non-standard settings.\r\n     * <p>\r\n     * The number of configuration points for a mock grows \r\n     * so we need a fluent way to introduce new configuration without adding more and more overloaded Mockito.mock() methods. \r\n     * Hence {@link MockSettings}.\r\n     * <pre>\r\n     *   Listener mock = mock(Listener.class, withSettings()\r\n     *     .name(\"firstListner\").defaultBehavior(RETURNS_SMART_NULLS));\r\n     *   );  \r\n     * </pre>\r\n     * <b>Use it carefully and occasionally</b>. What might be reason your test needs non-standard mocks? \r\n     * Is the code under test so complicated that it requires non-standard mocks? \r\n     * Wouldn't you prefer to refactor the code under test so it is testable in a simple way?\r\n     * <p>\r\n     * See also {@link Mockito#withSettings()}\r\n     * <p>\r\n     * See examples in javadoc for {@link Mockito} class\r\n     * \r\n     * @param classToMock class or interface to mock\r\n     * @param mockSettings additional mock settings\r\n     * @return mock object\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Mockito.java",
        "class_name": "org.mockito.Mockito",
        "signature": "org.mockito.Mockito.spy(T)",
        "snippet": "    public static <T> T spy(T object) {\n        return MOCKITO_CORE.mock((Class<T>) object.getClass(), withSettings()\n                .spiedInstance(object)\n                .defaultAnswer(CALLS_REAL_METHODS));\n    }",
        "begin_line": 844,
        "end_line": 848,
        "comment": "\r\n     * Creates a spy of the real object. The spy calls <b>real</b> methods unless they are stubbed.\r\n     * <p>\r\n     * Real spies should be used <b>carefully and occasionally</b>, for example when dealing with legacy code.\r\n     * <p>\r\n     * As usual you are going to read <b>the partial mock warning</b>:\r\n     * Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.\r\n     * How does partial mock fit into this paradigm? Well, it just doesn't... \r\n     * Partial mock usually means that the complexity has been moved to a different method on the same object.\r\n     * In most cases, this is not the way you want to design your application.\r\n     * <p>\r\n     * However, there are rare cases when partial mocks come handy: \r\n     * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)\r\n     * However, I wouldn't use partial mocks for new, test-driven & well-designed code.\r\n     * <p>\r\n     * Example:\r\n     * \r\n     * <pre>\r\n     *   List list = new LinkedList();\r\n     *   List spy = spy(list);\r\n     * \r\n     *   //optionally, you can stub out some methods:\r\n     *   when(spy.size()).thenReturn(100);\r\n     * \r\n     *   //using the spy calls <b>real</b> methods\r\n     *   spy.add(\"one\");\r\n     *   spy.add(\"two\");\r\n     * \r\n     *   //prints \"one\" - the first element of a list\r\n     *   System.out.println(spy.get(0));\r\n     * \r\n     *   //size() method was stubbed - 100 is printed\r\n     *   System.out.println(spy.size());\r\n     * \r\n     *   //optionally, you can verify\r\n     *   verify(spy).add(\"one\");\r\n     *   verify(spy).add(\"two\");\r\n     * </pre>\r\n     * \r\n     * <h4>Important gotcha on spying real objects!</h4>\r\n     * \r\n     * 1. Sometimes it's impossible to use {@link Mockito#when(Object)} for stubbing spies. Example:\r\n     * \r\n     * <pre>\r\n     *   List list = new LinkedList();\r\n     *   List spy = spy(list);\r\n     *   \r\n     *   //Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty)\r\n     *   when(spy.get(0)).thenReturn(\"foo\");\r\n     *   \r\n     *   //You have to use doReturn() for stubbing\r\n     *   doReturn(\"foo\").when(spy).get(0);\r\n     * </pre>\r\n     * \r\n     * 2. Watch out for final methods. \r\n     * Mockito doesn't mock final methods so the bottom line is: when you spy on real objects + you try to stub a final method = trouble.\r\n     * What will happen is the real method will be called *on mock* but *not on the real instance* you passed to the spy() method.\r\n     * Typically you may get a NullPointerException because mock instances don't have fields initiated.\r\n     * \r\n     * <p>\r\n     * See examples in javadoc for {@link Mockito} class\r\n     * \r\n     * @param object\r\n     *            to spy on\r\n     * @return a spy of the real object\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Mockito.java",
        "class_name": "org.mockito.Mockito",
        "signature": "org.mockito.Mockito.stub(T)",
        "snippet": "    @Deprecated\n    public static <T> DeprecatedOngoingStubbing<T> stub(T methodCall) {\n        return MOCKITO_CORE.stub(methodCall);\n    }",
        "begin_line": 876,
        "end_line": 879,
        "comment": "\r\n     * <pre>\r\n     *   //Instead of:\r\n     *   stub(mock.count()).toReturn(10);\r\n     * \r\n     *   //Please do:\r\n     *   when(mock.count()).thenReturn(10);\r\n     * </pre> \r\n     * \r\n     * Many users found stub() confusing therefore stub() has been deprecated in favor of {@link Mockito#when(Object)} \r\n     * <p>\r\n     * How to fix deprecation warnings? Typically it's just few minutes of search & replace job:\r\n     * <pre>\r\n     *   Mockito.stub;  <i>replace with:</i>  Mockito.when;\r\n     *   stub(          <i>replace with:</i>  when(\r\n     *   .toReturn(     <i>replace with:</i>  .thenReturn(\r\n     *   .toThrow(      <i>replace with:</i>  .thenThrow(\r\n     *   .toAnswer(     <i>replace with:</i>  .thenAnswer(\r\n     * </pre>\r\n     * If you're an existing user then sorry for making your code littered with deprecation warnings. \r\n     * This change was required to make Mockito better.\r\n     * \r\n     * @param methodCall\r\n     *            method call\r\n     * @return DeprecatedOngoingStubbing object to set stubbed value/exception\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Mockito.java",
        "class_name": "org.mockito.Mockito",
        "signature": "org.mockito.Mockito.when(T)",
        "snippet": "    public static <T> OngoingStubbing<T> when(T methodCall) {\n        return MOCKITO_CORE.when(methodCall);\n    }",
        "begin_line": 940,
        "end_line": 942,
        "comment": "\r\n     * Enables stubbing methods. Use it when you want the mock to return particular value when particular method is called. \r\n     * <p>\r\n     * Simply put: \"<b>When</b> the x method is called <b>then</b> return y\".\r\n     * <p>\r\n     * <b>when() is a successor of deprecated {@link Mockito#stub(Object)}</b>\r\n     * <p>\r\n     * Examples:\r\n     * \r\n     * <pre>\r\n     * <b>when</b>(mock.someMethod()).<b>thenReturn</b>(10);\r\n     *\r\n     * //you can use flexible argument matchers, e.g:\r\n     * when(mock.someMethod(<b>anyString()</b>)).thenReturn(10);\r\n     *\r\n     * //setting exception to be thrown:\r\n     * when(mock.someMethod(\"some arg\")).thenThrow(new RuntimeException());\r\n     *\r\n     * //you can set different behavior for consecutive method calls.\r\n     * //Last stubbing (e.g: thenReturn(\"foo\")) determines the behavior of further consecutive calls.\r\n     * when(mock.someMethod(\"some arg\"))\r\n     *  .thenThrow(new RuntimeException())\r\n     *  .thenReturn(\"foo\");\r\n     *  \r\n     * //Alternative, shorter version for consecutive stubbing:\r\n     * when(mock.someMethod(\"some arg\"))\r\n     *  .thenReturn(\"one\", \"two\");\r\n     * //is the same as:\r\n     * when(mock.someMethod(\"some arg\"))\r\n     *  .thenReturn(\"one\")\r\n     *  .thenReturn(\"two\");\r\n     *\r\n     * //shorter version for consecutive method calls throwing exceptions:\r\n     * when(mock.someMethod(\"some arg\"))\r\n     *  .thenThrow(new RuntimeException(), new NullPointerException();\r\n     *   \r\n     * </pre>\r\n     * \r\n     * For stubbing void methods with throwables see: {@link Mockito#doThrow(Throwable)}\r\n     * <p>\r\n     * Stubbing can be overridden: for example common stubbing can go to fixture\r\n     * setup but the test methods can override it.\r\n     * <p>\r\n     * Once stubbed, the method will always return stubbed value regardless\r\n     * of how many times it is called.\r\n     * <p>\r\n     * Last stubbing is more important - when you stubbed the same method with\r\n     * the same arguments many times.\r\n     * <p>\r\n     * Although it is possible to verify a stubbed invocation, usually <b>it's just redundant</b>.\r\n     * Let's say you've stubbed foo.bar(). \r\n     * If your code cares what foo.bar() returns then something else breaks(often before even verify() gets executed).\r\n     * If your code doesn't care what get(0) returns then it should not be stubbed. \r\n     * Not convinced? See <a href=\"http://monkeyisland.pl/2008/04/26/asking-and-telling\">here</a>.\r\n     * \r\n     * <p>\r\n     * See examples in javadoc for {@link Mockito} class\r\n     * @param methodCall method to be stubbed\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Mockito.java",
        "class_name": "org.mockito.Mockito",
        "signature": "org.mockito.Mockito.verify(T)",
        "snippet": "    public static <T> T verify(T mock) {\n        return MOCKITO_CORE.verify(mock, times(1));\n    }",
        "begin_line": 969,
        "end_line": 971,
        "comment": "\r\n     * Verifies certain behavior <b>happened once</b> \r\n     * <p>\r\n     * Alias to <code>verify(mock, times(1))</code> E.g:\r\n     * <pre>\r\n     *   verify(mock).someMethod(\"some arg\");\r\n     * </pre>\r\n     * Above is equivalent to:\r\n     * <pre>\r\n     *   verify(mock, times(1)).someMethod(\"some arg\");\r\n     * </pre>\r\n     * \r\n     * <p>\r\n     * Although it is possible to verify a stubbed invocation, usually <b>it's just redundant</b>.\r\n     * Let's say you've stubbed foo.bar(). \r\n     * If your code cares what foo.bar() returns then something else breaks(often before even verify() gets executed).\r\n     * If your code doesn't care what get(0) returns then it should not be stubbed. \r\n     * Not convinced? See <a href=\"http://monkeyisland.pl/2008/04/26/asking-and-telling\">here</a>.\r\n     * \r\n     * <p>\r\n     * See examples in javadoc for {@link Mockito} class\r\n     * \r\n     * @param mock to be verified\r\n     * @return mock object itself\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Mockito.java",
        "class_name": "org.mockito.Mockito",
        "signature": "org.mockito.Mockito.reset(T...)",
        "snippet": "    public static <T> void reset(T ... mocks) {\n        MOCKITO_CORE.reset(mocks);\n    }",
        "begin_line": 1000,
        "end_line": 1002,
        "comment": "\r\n     * Smart Mockito users hardly use this feature because they know it could be a sign of poor tests.\r\n     * Normally, you don't need to reset your mocks, just create new mocks for each test method. \r\n     * <p>\r\n     * Instead of reset() please consider writing simple, small and focused test methods over lengthy, over-specified tests.\r\n     * <b>First potential code smell is reset() in the middle of the test method.</b> This probably means you're testing too much.\r\n     * Follow the whisper of your test methods: \"Please keep us small & focused on single behavior\". \r\n     * There are several threads about it on mockito mailing list.\r\n     * <p>\r\n     * The only reason we added reset() method is to\r\n     * make it possible to work with container-injected mocks.\r\n     * See issue 55 (<a href=\"http://code.google.com/p/mockito/issues/detail?id=55\">here</a>)\r\n     * or FAQ (<a href=\"http://code.google.com/p/mockito/wiki/FAQ\">here</a>).\r\n     * <p>\r\n     * <b>Don't harm yourself.</b> reset() in the middle of the test method is a code smell (you're probably testing too much). \r\n     * <pre>\r\n     *   List mock = mock(List.class);\r\n     *   when(mock.size()).thenReturn(10);\r\n     *   mock.add(1);\r\n     *   \r\n     *   reset(mock);\r\n     *   //at this point the mock forgot any interactions & stubbing\r\n     * </pre>\r\n     * \r\n     * @param <T>\r\n     * @param mocks\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Mockito.java",
        "class_name": "org.mockito.Mockito",
        "signature": "org.mockito.Mockito.verify(T, org.mockito.internal.verification.api.VerificationMode)",
        "snippet": "    public static <T> T verify(T mock, VerificationMode mode) {\n        return MOCKITO_CORE.verify(mock, mode);\n    }",
        "begin_line": 1024,
        "end_line": 1026,
        "comment": "\r\n     * Verifies certain behavior happened at least once / exact number of times / never. E.g:\r\n     * <pre>\r\n     *   verify(mock, times(5)).someMethod(\"was called five times\");\r\n     *   \r\n     *   verify(mock, atLeast(2)).someMethod(\"was called at least two times\");\r\n     *   \r\n     *   //you can use flexible argument matchers, e.g:\r\n     *   verify(mock, atLeastOnce()).someMethod(<b>anyString()</b>);\r\n     * </pre>\r\n     * \r\n     * <b>times(1) is the default</b> and can be omitted\r\n     * <p>\r\n     * See examples in javadoc for {@link Mockito} class\r\n     * \r\n     * @param mock to be verified\r\n     * @param mode times(x), atLeastOnce() or never()\r\n     * \r\n     * @return mock object itself\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Mockito.java",
        "class_name": "org.mockito.Mockito",
        "signature": "org.mockito.Mockito.verifyNoMoreInteractions(java.lang.Object...)",
        "snippet": "    public static void verifyNoMoreInteractions(Object... mocks) {\n        MOCKITO_CORE.verifyNoMoreInteractions(mocks);\n    }",
        "begin_line": 1069,
        "end_line": 1071,
        "comment": "\r\n     * Checks if any of given mocks has any unverified interaction.\r\n     * <p>\r\n     * You can use this method after you verified your mocks - to make sure that nothing\r\n     * else was invoked on your mocks.\r\n     * <p>\r\n     * See also {@link Mockito#never()} - it is more explicit and communicates the intent well.\r\n     * <p>\r\n     * Stubbed invocations (if called) are also treated as interactions.\r\n     * <p>\r\n     * A word of <b>warning</b>: \r\n     * Some users who did a lot of classic, expect-run-verify mocking tend to use verifyNoMoreInteractions() very often, even in every test method. \r\n     * verifyNoMoreInteractions() is not recommended to use in every test method. \r\n     * verifyNoMoreInteractions() is a handy assertion from the interaction testing toolkit. Use it only when it's relevant.\r\n     * Abusing it leads to overspecified, less maintainable tests. You can find further reading \r\n     * <a href=\"http://monkeyisland.pl/2008/07/12/should-i-worry-about-the-unexpected/\">here</a>.\r\n     * <p>\r\n     * This method will also detect unverified invocations that occurred before the test method,\r\n     * for example: in setUp(), &#064;Before method or in constructor.\r\n     * Consider writing nice code that makes interactions only in test methods.\r\n     * \r\n     * <p>\r\n     * Example:\r\n     * \r\n     * <pre>\r\n     * //interactions\r\n     * mock.doSomething();\r\n     * mock.doSomethingUnexpected();\r\n     * \r\n     * //verification\r\n     * verify(mock).doSomething();\r\n     * \r\n     * //following will fail because 'doSomethingUnexpected()' is unexpected\r\n     * verifyNoMoreInteractions(mock);\r\n     * \r\n     * </pre>\r\n     * \r\n     * See examples in javadoc for {@link Mockito} class\r\n     * \r\n     * @param mocks to be verified\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Mockito.java",
        "class_name": "org.mockito.Mockito",
        "signature": "org.mockito.Mockito.verifyZeroInteractions(java.lang.Object...)",
        "snippet": "    public static void verifyZeroInteractions(Object... mocks) {\n        MOCKITO_CORE.verifyNoMoreInteractions(mocks);\n    }",
        "begin_line": 1088,
        "end_line": 1090,
        "comment": "\r\n     * Verifies that no interactions happened on given mocks.\r\n     * <pre>\r\n     *   verifyZeroInteractions(mockOne, mockTwo);\r\n     * </pre>\r\n     * This method will also detect invocations \r\n     * that occurred before the test method, for example: in setUp(), &#064;Before method or in constructor.\r\n     * Consider writing nice code that makes interactions only in test methods.  \r\n     * <p>\r\n     * See also {@link Mockito#never()} - it is more explicit and communicates the intent well.\r\n     * <p>\r\n     * See examples in javadoc for {@link Mockito} class\r\n     * \r\n     * @param mocks to be verified\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Mockito.java",
        "class_name": "org.mockito.Mockito",
        "signature": "org.mockito.Mockito.stubVoid(T)",
        "snippet": "    public static <T> VoidMethodStubbable<T> stubVoid(T mock) {\n        return MOCKITO_CORE.stubVoid(mock);\n    }",
        "begin_line": 1124,
        "end_line": 1126,
        "comment": "\r\n     * <pre>\r\n     *   //Instead of:\r\n     *   stubVoid(mock).toThrow(e).on().someVoidMethod();\r\n     * \r\n     *   //Please do:\r\n     *   doThrow(e).when(mock).someVoidMethod();\r\n     * </pre> \r\n     * \r\n     * doThrow() replaces stubVoid() because of improved readability and consistency with the family of doAnswer() methods. \r\n     * <p>\r\n     * Originally, stubVoid() was used for stubbing void methods with exceptions. E.g:\r\n     * \r\n     * <pre>\r\n     * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod();\r\n     * \r\n     * //you can stub with different behavior for consecutive calls.\r\n     * //Last stubbing (e.g. toReturn()) determines the behavior for further consecutive calls.   \r\n     * stubVoid(mock)\r\n     *   .toThrow(new RuntimeException())\r\n     *   .toReturn()\r\n     *   .on().someMethod();\r\n     * </pre>\r\n     * \r\n     * See examples in javadoc for {@link Mockito} class\r\n     * \r\n     * @deprecated Use {@link Mockito#doThrow(Throwable)} method for stubbing voids\r\n     * \r\n     * @param mock\r\n     *            to stub\r\n     * @return stubbable object that allows stubbing with throwable\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Mockito.java",
        "class_name": "org.mockito.Mockito",
        "signature": "org.mockito.Mockito.doThrow(java.lang.Throwable)",
        "snippet": "    public static Stubber doThrow(Throwable toBeThrown) {\n        return MOCKITO_CORE.doAnswer(new ThrowsException(toBeThrown));\n    }",
        "begin_line": 1142,
        "end_line": 1144,
        "comment": "\r\n     * Use doThrow() when you want to stub the void method with an exception.\r\n     * <p>\r\n     * Stubbing voids requires different approach from {@link Mockito#when(Object)} because the compiler does not like void methods inside brackets...\r\n     * <p>\r\n     * Example:\r\n     * \r\n     * <pre>\r\n     *   doThrow(new RuntimeException()).when(mock).someVoidMethod();\r\n     * </pre>\r\n     * \r\n     * @param toBeThrown to be thrown when the stubbed method is called\r\n     * @return stubber - to select a method for stubbing\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Mockito.java",
        "class_name": "org.mockito.Mockito",
        "signature": "org.mockito.Mockito.doCallRealMethod()",
        "snippet": "    public static Stubber doCallRealMethod() {\n        return MOCKITO_CORE.doAnswer(new CallsRealMethods());\n    }",
        "begin_line": 1176,
        "end_line": 1178,
        "comment": "\r\n     * Use doCallRealMethod() when you want to call the real implementation of a method.\r\n     * <p>\r\n     * As usual you are going to read <b>the partial mock warning</b>:\r\n     * Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.\r\n     * How does partial mock fit into this paradigm? Well, it just doesn't... \r\n     * Partial mock usually means that the complexity has been moved to a different method on the same object.\r\n     * In most cases, this is not the way you want to design your application.\r\n     * <p>\r\n     * However, there are rare cases when partial mocks come handy: \r\n     * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)\r\n     * However, I wouldn't use partial mocks for new, test-driven & well-designed code.\r\n     * <p>\r\n     * See also javadoc {@link Mockito#spy(Object)} to find out more about partial mocks. \r\n     * <b>Mockito.spy() is a recommended way of creating partial mocks.</b> \r\n     * The reason is it guarantees real methods are called against correctly constructed object because you're responsible for constructing the object passed to spy() method.\r\n     * <p>\r\n     * Example:\r\n     * <pre>\r\n     *   Foo mock = mock(Foo.class);\r\n     *   doCallRealMethod().when(mock).someVoidMethod();\r\n     *\r\n     *   // this will call the real implementation of Foo.someVoidMethod()\r\n     *   mock.someVoidMethod();\r\n     * </pre>\r\n     * <p>\r\n     * See examples in javadoc for {@link Mockito} class\r\n     *\r\n     * @return stubber - to select a method for stubbing\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Mockito.java",
        "class_name": "org.mockito.Mockito",
        "signature": "org.mockito.Mockito.doAnswer(org.mockito.stubbing.Answer)",
        "snippet": "    public static Stubber doAnswer(Answer answer) {\n        return MOCKITO_CORE.doAnswer(answer);\n    }  ",
        "begin_line": 1202,
        "end_line": 1204,
        "comment": "\r\n     * Use doAnswer() when you want to stub a void method with generic {@link Answer}.\r\n     * <p>\r\n     * Stubbing voids requires different approach from {@link Mockito#when(Object)} because the compiler does not like void methods inside brackets...\r\n     * <p>\r\n     * Example:\r\n     * \r\n     * <pre>\r\n     *  doAnswer(new Answer() {\r\n     *      public Object answer(InvocationOnMock invocation) {\r\n     *          Object[] args = invocation.getArguments();\r\n     *          Mock mock = invocation.getMock();\r\n     *          return null;\r\n     *      }})\r\n     *  .when(mock).someMethod();\r\n     * </pre>\r\n     * <p>\r\n     * See examples in javadoc for {@link Mockito} class\r\n     * \r\n     * @param answer to answer when the stubbed method is called\r\n     * @return stubber - to select a method for stubbing\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Mockito.java",
        "class_name": "org.mockito.Mockito",
        "signature": "org.mockito.Mockito.doNothing()",
        "snippet": "    public static Stubber doNothing() {\n        return MOCKITO_CORE.doAnswer(new DoesNothing());\n    }    ",
        "begin_line": 1241,
        "end_line": 1243,
        "comment": "\r\n     * Use doNothing() for setting void methods to do nothing. <b>Beware that void methods on mocks do nothing by default!</b> \r\n     * However, there are rare situations when doNothing() comes handy:  \r\n     * <p>\r\n     * 1. Stubbing consecutive calls on a void method:\r\n     * <pre>\r\n     *   doNothing().\r\n     *   doThrow(new RuntimeException())\r\n     *   .when(mock).someVoidMethod();\r\n     *   \r\n     *   //does nothing the first time:\r\n     *   mock.someVoidMethod();\r\n     *   \r\n     *   //throws RuntimeException the next time:\r\n     *   mock.someVoidMethod();\r\n     * </pre>\r\n     * \r\n     * 2. When you spy real objects and you want the void method to do nothing:\r\n     * <pre>\r\n     *   List list = new LinkedList();\r\n     *   List spy = spy(list);\r\n     *   \r\n     *   //let's make clear() do nothing\r\n     *   doNothing().when(spy).clear();\r\n     *   \r\n     *   spy.add(\"one\");\r\n     *   \r\n     *   //clear() does nothing, so the list still contains \"one\"\r\n     *   spy.clear();\r\n     * </pre>\r\n     * <p>\r\n     * See examples in javadoc for {@link Mockito} class\r\n     *   \r\n     * @return stubber - to select a method for stubbing\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Mockito.java",
        "class_name": "org.mockito.Mockito",
        "signature": "org.mockito.Mockito.doReturn(java.lang.Object)",
        "snippet": "    public static Stubber doReturn(Object toBeReturned) {\n        return MOCKITO_CORE.doAnswer(new Returns(toBeReturned));\n    }",
        "begin_line": 1287,
        "end_line": 1289,
        "comment": "\r\n     * Use doReturn() in those rare occasions when you cannot use {@link Mockito#when(Object)}.\r\n     * <p>\r\n     * <b>Beware that {@link Mockito#when(Object)} is always recommended for stubbing because it is argument type-safe \r\n     * and more readable</b> (especially when stubbing consecutive calls). \r\n     * <p>\r\n     * Here are those rare occasions when doReturn() comes handy:\r\n     * <p>\r\n     * \r\n     * 1. When spying real objects and calling real methods on a spy brings side effects  \r\n     * \r\n     * <pre>\r\n     *   List list = new LinkedList();\r\n     *   List spy = spy(list);\r\n     *   \r\n     *   //Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty)\r\n     *   when(spy.get(0)).thenReturn(\"foo\");\r\n     *   \r\n     *   //You have to use doReturn() for stubbing:\r\n     *   doReturn(\"foo\").when(spy).get(0);\r\n     * </pre>\r\n     * \r\n     * 2. Overriding a previous exception-stubbing:\r\n     * \r\n     * <pre>\r\n     *   when(mock.foo()).thenThrow(new RuntimeException());\r\n     *   \r\n     *   //Impossible: the exception-stubbed foo() method is called so RuntimeException is thrown. \r\n     *   when(mock.foo()).thenReturn(\"bar\");\r\n     *   \r\n     *   //You have to use doReturn() for stubbing:\r\n     *   doReturn(\"bar\").when(mock).foo();\r\n     * </pre>\r\n     * \r\n     * Above scenarios shows a tradeoff of Mockito's ellegant syntax. Note that the scenarios are very rare, though. \r\n     * Spying should be sporadic and overriding exception-stubbing is very rare.  \r\n     * <p>\r\n     * See examples in javadoc for {@link Mockito} class\r\n     * \r\n     * @param toBeReturned to be returned when the stubbed method is called\r\n     * @return stubber - to select a method for stubbing\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Mockito.java",
        "class_name": "org.mockito.Mockito",
        "signature": "org.mockito.Mockito.inOrder(java.lang.Object...)",
        "snippet": "    public static InOrder inOrder(Object... mocks) {\n        return MOCKITO_CORE.inOrder(mocks);\n    }",
        "begin_line": 1312,
        "end_line": 1314,
        "comment": "\r\n     * Creates InOrder object that allows verifying mocks in order.\r\n     * \r\n     * <pre>\r\n     *   InOrder inOrder = inOrder(firstMock, secondMock);\r\n     *   \r\n     *   inOrder.verify(firstMock).add(\"was called first\");\r\n     *   inOrder.verify(secondMock).add(\"was called second\");\r\n     * </pre>\r\n     * \r\n     * Verification in order is flexible - <b>you don't have to verify all interactions</b> one-by-one\r\n     * but only those that you are interested in testing in order.\r\n     * <p>\r\n     * Also, you can create InOrder object passing only mocks that are relevant for in-order verification.  \r\n     * <p>\r\n     * See examples in javadoc for {@link Mockito} class\r\n     * \r\n     * @param mocks to be verified in order\r\n     * \r\n     * @return InOrder object to be used to verify in order\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Mockito.java",
        "class_name": "org.mockito.Mockito",
        "signature": "org.mockito.Mockito.times(int)",
        "snippet": "    public static VerificationMode times(int wantedNumberOfInvocations) {\n        return VerificationModeFactory.times(wantedNumberOfInvocations);\n    }",
        "begin_line": 1328,
        "end_line": 1330,
        "comment": "\r\n     * Allows verifying exact number of invocations. E.g:\r\n     * <pre>\r\n     *   verify(mock, times(2)).someMethod(\"some arg\");\r\n     * </pre>\r\n     * \r\n     * See examples in javadoc for {@link Mockito} class\r\n     * \r\n     * @param wantedNumberOfInvocations wanted number of invocations \r\n     * \r\n     * @return verification mode\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Mockito.java",
        "class_name": "org.mockito.Mockito",
        "signature": "org.mockito.Mockito.never()",
        "snippet": "    public static VerificationMode never() {\n        return times(0);\n    }",
        "begin_line": 1349,
        "end_line": 1351,
        "comment": "\r\n     * Alias to times(0), see {@link Mockito#times(int)}\r\n     * <p>\r\n     * Verifies that interaction did not happen. E.g:\r\n     * <pre>\r\n     *   verify(mock, never()).someMethod();\r\n     * </pre>\r\n     * \r\n     * <p>\r\n     * If you want to verify there were NO interactions with the mock \r\n     * check out {@link Mockito#verifyZeroInteractions(Object...)}\r\n     * or {@link Mockito#verifyNoMoreInteractions(Object...)}\r\n     * <p>\r\n     * See examples in javadoc for {@link Mockito} class\r\n     * \r\n     * @return verification mode\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Mockito.java",
        "class_name": "org.mockito.Mockito",
        "signature": "org.mockito.Mockito.atLeastOnce()",
        "snippet": "    public static VerificationMode atLeastOnce() {\n        return VerificationModeFactory.atLeastOnce();\n    }",
        "begin_line": 1364,
        "end_line": 1366,
        "comment": "\r\n     * Allows at-least-once verification. E.g:\r\n     * <pre>\r\n     *   verify(mock, atLeastOnce()).someMethod(\"some arg\");\r\n     * </pre>\r\n     * Alias to atLeast(1)\r\n     * \r\n     * See examples in javadoc for {@link Mockito} class\r\n     * \r\n     * @return verification mode\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Mockito.java",
        "class_name": "org.mockito.Mockito",
        "signature": "org.mockito.Mockito.atLeast(int)",
        "snippet": "    public static VerificationMode atLeast(int minNumberOfInvocations) {\n        return VerificationModeFactory.atLeast(minNumberOfInvocations);\n    }",
        "begin_line": 1380,
        "end_line": 1382,
        "comment": "\r\n     * Allows at-least-x verification. E.g:\r\n     * <pre>\r\n     *   verify(mock, atLeast(3)).someMethod(\"some arg\");\r\n     * </pre>\r\n     * \r\n     * See examples in javadoc for {@link Mockito} class\r\n     * \r\n     * @param minNumberOfInvocations minimum number of invocations \r\n     * \r\n     * @return verification mode\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Mockito.java",
        "class_name": "org.mockito.Mockito",
        "signature": "org.mockito.Mockito.atMost(int)",
        "snippet": "    public static VerificationMode atMost(int maxNumberOfInvocations) {\n        return VerificationModeFactory.atMost(maxNumberOfInvocations);\n    }",
        "begin_line": 1396,
        "end_line": 1398,
        "comment": "\r\n     * Allows at-most-x verification. E.g:\r\n     * <pre>\r\n     *   verify(mock, atMost(3)).someMethod(\"some arg\");\r\n     * </pre>\r\n     * \r\n     * See examples in javadoc for {@link Mockito} class\r\n     * \r\n     * @param maxNumberOfInvocations max number of invocations \r\n     * \r\n     * @return verification mode\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Mockito.java",
        "class_name": "org.mockito.Mockito",
        "signature": "org.mockito.Mockito.validateMockitoUsage()",
        "snippet": "    public static void validateMockitoUsage() {\n        MOCKITO_CORE.validateMockitoUsage();\n    }",
        "begin_line": 1445,
        "end_line": 1447,
        "comment": "\r\n     * First of all, in case of any trouble, I encourage you to read the Mockito FAQ: <a href=\"http://code.google.com/p/mockito/wiki/FAQ\">http://code.google.com/p/mockito/wiki/FAQ</a>\r\n     * <p>\r\n     * In case of questions you may also post to mockito mailing list: <a href=\"http://groups.google.com/group/mockito\">http://groups.google.com/group/mockito</a> \r\n     * <p>\r\n     * {@link Mockito#validateMockitoUsage()} <b>explicitly validates</b> the framework state to detect invalid use of Mockito.\r\n     * However, this feature is optional <b>because Mockito validates the usage all the time...</b> but there is a gotcha so read on.\r\n     * <p>\r\n     * Examples of incorrect use:\r\n     * <pre>\r\n     * //Oups, someone forgot thenReturn() part:\r\n     * when(mock.get());\r\n     * \r\n     * //Oups, someone put the verified method call inside verify() where it should be outside:\r\n     * verify(mock.execute());\r\n     * \r\n     * //Oups, someone has used EasyMock for too long and forgot to specify the method to verify:\r\n     * verify(mock);\r\n     * </pre>\r\n     * \r\n     * Mockito throws exceptions if you misuse it so that you know if your tests are written correctly. \r\n     * The gotcha is that Mockito does the validation <b>next time</b> you use the framework (e.g. next time you verify, stub, call mock etc.). \r\n     * But even though the exception might be thrown in the next test, \r\n     * the exception <b>message contains a navigable stack trace element</b> with location of the defect. \r\n     * Hence you can click and find the place where Mockito was misused.\r\n     * <p>\r\n     * Sometimes though, you might want to validate the framework usage explicitly. \r\n     * For example, one of the users wanted to put {@link Mockito#validateMockitoUsage()} in his &#064;After method\r\n     * so that he knows immediately when he misused Mockito. \r\n     * Without it, he would have known about it not sooner than <b>next time</b> he used the framework.\r\n     * One more benefit of having validateMockitoUsage() in &#064;After is that jUnit runner will always fail in the test method with defect\r\n     * whereas ordinary 'next-time' validation might fail the <b>next</b> test method. \r\n     * But even though JUnit might report next test as red, don't worry about it \r\n     * and just click at navigable stack trace element in the exception message to instantly locate the place where you misused mockito.   \r\n     * <p>\r\n     * <b>Built-in runner: {@link MockitoJUnitRunner}</b> does validateMockitoUsage() after each test method.\r\n     * <p>\r\n     * Bear in mind that <b>usually you don't have to validateMockitoUsage()</b> \r\n     * and framework validation triggered on next-time basis should be just enough,\r\n     * mainly because of enhanced exception message with clickable location of defect.\r\n     * However, I would recommend validateMockitoUsage() if you already have sufficient test infrastructure\r\n     * (like your own runner or base class for all tests) because adding a special action to &#064;After has zero cost.\r\n     * <p>\r\n     * See examples in javadoc for {@link Mockito} class\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Mockito.java",
        "class_name": "org.mockito.Mockito",
        "signature": "org.mockito.Mockito.withSettings()",
        "snippet": "    public static MockSettings withSettings() {\n        return new MockSettingsImpl().defaultAnswer(RETURNS_DEFAULTS);\n    }",
        "begin_line": 1479,
        "end_line": 1481,
        "comment": "\r\n     * Allows mock creation with additional mock settings. \r\n     * <p>\r\n     * Don't use it too often. \r\n     * Consider writing simple tests that use simple mocks. \r\n     * Repeat after me: simple tests push simple, KISSy, readable & maintainable code.\r\n     * If you cannot write a test in a simple way - refactor the code under test.\r\n     * <p>\r\n     * Examples of mock settings:\r\n     * <pre>\r\n     *   //Creates mock with different default answer & name\r\n     *   Foo mock = mock(Foo.class, withSettings()\r\n     *       .defaultAnswer(RETURNS_SMART_NULLS)\r\n     *       .name(\"cool mockie\"));\r\n     *       \r\n     *   //Creates mock with different default answer, descriptive name and extra interfaces\r\n     *   Foo mock = mock(Foo.class, withSettings()\r\n     *       .defaultAnswer(RETURNS_SMART_NULLS)\r\n     *       .name(\"cool mockie\")\r\n     *       .extraInterfaces(Bar.class));    \r\n     * </pre>\r\n     * {@link MockSettings} has been introduced for two reasons. \r\n     * Firstly, to make it easy to add another mock settings when the demand comes.\r\n     * Secondly, to enable combining different mock settings without introducing zillions of overloaded mock() methods.\r\n     * <p>\r\n     * See javadoc for {@link MockSettings} to learn about possible mock settings.\r\n     * <p>\r\n     * \r\n     * @return mock settings instance with defaults.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/InOrder.java",
        "class_name": "org.mockito.InOrder",
        "signature": "org.mockito.InOrder.verify(T)",
        "snippet": "    <T> T verify(T mock);",
        "begin_line": 41,
        "end_line": 41,
        "comment": "\n     * Verifies interaction <b>happened once</b> in order.\n     * <p>\n     * Alias to <code>inOrder.verify(mock, times(1))</code>\n     * <p>\n     * Example:\n     * <pre>\n     * InOrder inOrder = inOrder(firstMock, secondMock);\n     * \n     * inOrder.verify(firstMock).someMethod(\"was called first\");\n     * inOrder.verify(secondMock).someMethod(\"was called second\");\n     * </pre>\n     * \n     * See examples in javadoc for {@link Mockito} class\n     * \n     * @param mock to be verified\n     * \n     * @return mock object itself\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/InOrder.java",
        "class_name": "org.mockito.InOrder",
        "signature": "org.mockito.InOrder.verify(T, org.mockito.internal.verification.api.VerificationMode)",
        "snippet": "    <T> T verify(T mock, VerificationMode mode);",
        "begin_line": 60,
        "end_line": 60,
        "comment": "\n     * Verifies interaction in order. E.g:\n     * \n     * <pre>\n     * InOrder inOrder = inOrder(firstMock, secondMock);\n     * \n     * inOrder.verify(firstMock, times(2)).someMethod(\"was called first two times\");\n     * inOrder.verify(secondMock, atLeastOnce()).someMethod(\"was called second at least once\");\n     * </pre>\n     * \n     * See examples in javadoc for {@link Mockito} class\n     * \n     * @param mock to be verified\n     * @param mode for example times(x) or atLeastOnce()\n     * \n     * @return mock object itself\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/ArgumentMatcher.java",
        "class_name": "org.mockito.ArgumentMatcher",
        "signature": "org.mockito.ArgumentMatcher.matches(java.lang.Object)",
        "snippet": "    public abstract boolean matches(Object argument);",
        "begin_line": 72,
        "end_line": 72,
        "comment": "\n     * Returns whether this matcher accepts the given argument.\n     * <p>\n     * The method should <b>never</b> assert if the argument doesn't match. It\n     * should only return false.\n     * \n     * @param argument\n     *            the argument\n     * @return whether this matcher accepts the given argument.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/ArgumentMatcher.java",
        "class_name": "org.mockito.ArgumentMatcher",
        "signature": "org.mockito.ArgumentMatcher.describeTo(org.hamcrest.Description)",
        "snippet": "    public void describeTo(Description description) {\n        String className = getClass().getSimpleName();\n        description.appendText(Decamelizer.decamelizeMatcher(className));\n    }",
        "begin_line": 86,
        "end_line": 89,
        "comment": " \n     * By default this method decamlizes matchers name to promote meaningful names for matchers.\n     * <p>\n     * For example <b>StringWithStrongLanguage</b> matcher will generate 'String with strong language' description in case of failure.\n     * <p>\n     * You might want to override this method to\n     * provide more specific description of the matcher (useful when\n     * verification failures are reported).\n     * \n     * @param description the description to which the matcher description is\n     * appended.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.anyBoolean()",
        "snippet": "    public static boolean anyBoolean() {\n        return reportMatcher(Any.ANY).returnFalse();\n    }",
        "begin_line": 113,
        "end_line": 115,
        "comment": "\r\n     * any boolean, Boolean or null.\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @return <code>false</code>.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.anyByte()",
        "snippet": "    public static byte anyByte() {\n        return reportMatcher(Any.ANY).returnZero();\n    }",
        "begin_line": 124,
        "end_line": 126,
        "comment": "\r\n     * any byte, Byte or null\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @return <code>0</code>.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.anyChar()",
        "snippet": "    public static char anyChar() {\n        return reportMatcher(Any.ANY).returnChar();\n    }",
        "begin_line": 135,
        "end_line": 137,
        "comment": "\r\n     * any char, Character or null.\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @return <code>0</code>.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.anyInt()",
        "snippet": "    public static int anyInt() {\n        return reportMatcher(Any.ANY).returnZero();\n    }",
        "begin_line": 146,
        "end_line": 148,
        "comment": "\r\n     * any int, Integer or null.\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @return <code>0</code>.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.anyLong()",
        "snippet": "    public static long anyLong() {\n        return reportMatcher(Any.ANY).returnZero();\n    }",
        "begin_line": 157,
        "end_line": 159,
        "comment": "\r\n     * any long, Long or null.\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @return <code>0</code>.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.anyFloat()",
        "snippet": "    public static float anyFloat() {\n        return reportMatcher(Any.ANY).returnZero();\n    }",
        "begin_line": 168,
        "end_line": 170,
        "comment": "\r\n     * any float, Float or null.\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @return <code>0</code>.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.anyDouble()",
        "snippet": "    public static double anyDouble() {\n        return reportMatcher(Any.ANY).returnZero();\n    }",
        "begin_line": 179,
        "end_line": 181,
        "comment": "\r\n     * any double, Double or null.\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @return <code>0</code>.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.anyShort()",
        "snippet": "    public static short anyShort() {\n        return reportMatcher(Any.ANY).returnZero();\n    }",
        "begin_line": 190,
        "end_line": 192,
        "comment": "\r\n     * any short, Short or null.\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @return <code>0</code>.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.anyObject()",
        "snippet": "    public static <T> T anyObject() {\n        return (T) reportMatcher(Any.ANY).returnNull();\n    }",
        "begin_line": 201,
        "end_line": 203,
        "comment": "\r\n     * any Object or null.\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @return <code>null</code>.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.any(java.lang.Class<T>)",
        "snippet": "    public static <T> T any(Class<T> clazz) {\n        return (T) anyObject();\n    }",
        "begin_line": 217,
        "end_line": 219,
        "comment": "\r\n     * any object of specified class. \r\n     * <p>\r\n     * Sometimes looks better than anyObject() - especially when explicit casting is required\r\n     * <p>\r\n     * Alias to {@link Matchers#anyObject()}\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @return <code>null</code>.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.any()",
        "snippet": "    public static <T> T any() {\n        return (T) anyObject();\n    }",
        "begin_line": 230,
        "end_line": 232,
        "comment": "\r\n     * any object or null \r\n     * <p>\r\n     * Shorter alias to {@link Matchers#anyObject()}\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @return <code>null</code>.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.anyString()",
        "snippet": "    public static String anyString() {\n        return reportMatcher(Any.ANY).returnString();\n    }",
        "begin_line": 241,
        "end_line": 243,
        "comment": "\r\n     * any String or null.\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @return empty String (\"\")\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.anyList()",
        "snippet": "    public static List anyList() {\n        return reportMatcher(Any.ANY).returnList();\n    }    ",
        "begin_line": 252,
        "end_line": 254,
        "comment": "\r\n     * any List or null.\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @return empty List.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.anyListOf(java.lang.Class<T>)",
        "snippet": "    public static <T> List<T> anyListOf(Class<T> clazz) {\n        return (List) reportMatcher(Any.ANY).returnList();\n    }    ",
        "begin_line": 266,
        "end_line": 268,
        "comment": "\r\n     * generic friendly alias to {@link Matchers#anyList()}.\r\n     * It's an alternative to &#064;SuppressWarnings(\"unchecked\") to keep code clean of compiler warnings.\r\n     * <p>\r\n     * any List or null.\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @return empty List.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.anySet()",
        "snippet": "    public static Set anySet() {\n        return reportMatcher(Any.ANY).returnSet();\n    }",
        "begin_line": 277,
        "end_line": 279,
        "comment": "\r\n     * any Set or null\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     *\r\n     * @return empty Set\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.anySetOf(java.lang.Class<T>)",
        "snippet": "    public static <T> Set<T> anySetOf(Class<T> clazz) {\n        return (Set) reportMatcher(Any.ANY).returnSet();\n    }",
        "begin_line": 291,
        "end_line": 293,
        "comment": "\r\n     * generic friendly alias to {@link Matchers#anySet()}.\r\n     * It's an alternative to &#064;SuppressWarnings(\"unchecked\") to keep code clean of compiler warnings.\r\n     * <p>\r\n     * any Set or null\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     *\r\n     * @return empty Set\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.anyMap()",
        "snippet": "    public static Map anyMap() {\n        return reportMatcher(Any.ANY).returnMap();\n    }    ",
        "begin_line": 302,
        "end_line": 304,
        "comment": "\r\n     * any Map or null.\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @return empty Map.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.anyCollection()",
        "snippet": "    public static Collection anyCollection() {\n        return reportMatcher(Any.ANY).returnList();\n    }    ",
        "begin_line": 313,
        "end_line": 315,
        "comment": "\r\n     * any Collection or null.\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @return empty Collection.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.anyCollectionOf(java.lang.Class<T>)",
        "snippet": "    public static <T> Collection<T> anyCollectionOf(Class<T> clazz) {\n        return (Collection) reportMatcher(Any.ANY).returnList();\n    }    ",
        "begin_line": 327,
        "end_line": 329,
        "comment": "\r\n     * generic friendly alias to {@link Matchers#anyCollection()}. \r\n     * It's an alternative to &#064;SuppressWarnings(\"unchecked\") to keep code clean of compiler warnings.     \r\n     * <p>\r\n     * any Collection or null.\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @return empty Collection.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.isA(java.lang.Class<T>)",
        "snippet": "    public static <T> T isA(Class<T> clazz) {\n        return reportMatcher(new InstanceOf(clazz)).<T>returnNull();\n    }",
        "begin_line": 342,
        "end_line": 344,
        "comment": "\r\n     * Object argument that implements the given class. \r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param <T>\r\n     *            the accepted type.\r\n     * @param clazz\r\n     *            the class of the accepted type.\r\n     * @return <code>null</code>.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.eq(boolean)",
        "snippet": "    public static boolean eq(boolean value) {\n        return reportMatcher(new Equals(value)).returnFalse();\n    }",
        "begin_line": 355,
        "end_line": 357,
        "comment": "\r\n     * boolean argument that is equal to the given value.\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param value\r\n     *            the given value.\r\n     * @return <code>0</code>.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.eq(byte)",
        "snippet": "    public static byte eq(byte value) {\n        return reportMatcher(new Equals(value)).returnZero();\n    }",
        "begin_line": 368,
        "end_line": 370,
        "comment": "\r\n     * byte argument that is equal to the given value.\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param value\r\n     *            the given value.\r\n     * @return <code>0</code>.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.eq(char)",
        "snippet": "    public static char eq(char value) {\n        return reportMatcher(new Equals(value)).returnChar();\n    }",
        "begin_line": 381,
        "end_line": 383,
        "comment": "\r\n     * char argument that is equal to the given value.\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param value\r\n     *            the given value.\r\n     * @return <code>0</code>.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.eq(double)",
        "snippet": "    public static double eq(double value) {\n        return reportMatcher(new Equals(value)).returnZero();\n    }",
        "begin_line": 394,
        "end_line": 396,
        "comment": "\r\n     * double argument that is equal to the given value.\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param value\r\n     *            the given value.\r\n     * @return <code>0</code>.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.eq(float)",
        "snippet": "    public static float eq(float value) {\n        return reportMatcher(new Equals(value)).returnZero();\n    }",
        "begin_line": 407,
        "end_line": 409,
        "comment": "\r\n     * float argument that is equal to the given value.\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param value\r\n     *            the given value.\r\n     * @return <code>0</code>.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.eq(int)",
        "snippet": "    public static int eq(int value) {\n        return reportMatcher(new Equals(value)).returnZero();\n    }",
        "begin_line": 420,
        "end_line": 422,
        "comment": "\r\n     * int argument that is equal to the given value.\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param value\r\n     *            the given value.\r\n     * @return <code>0</code>.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.eq(long)",
        "snippet": "    public static long eq(long value) {\n        return reportMatcher(new Equals(value)).returnZero();\n    }",
        "begin_line": 433,
        "end_line": 435,
        "comment": "\r\n     * long argument that is equal to the given value.\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param value\r\n     *            the given value.\r\n     * @return <code>0</code>.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.eq(short)",
        "snippet": "    public static short eq(short value) {\n        return reportMatcher(new Equals(value)).returnZero();\n    }",
        "begin_line": 446,
        "end_line": 448,
        "comment": "\r\n     * short argument that is equal to the given value.\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param value\r\n     *            the given value.\r\n     * @return <code>0</code>.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.eq(T)",
        "snippet": "    public static <T> T eq(T value) {\n        return reportMatcher(new Equals(value)).<T>returnNull();\n    }  ",
        "begin_line": 459,
        "end_line": 461,
        "comment": "\r\n     * Object argument that is equal to the given value.\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param value\r\n     *            the given value.\r\n     * @return <code>null</code>.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.refEq(T, java.lang.String...)",
        "snippet": "    public static <T> T refEq(T value, String... excludeFields) {\n        return reportMatcher(new ReflectionEquals(value, excludeFields)).<T>returnNull();\n    }",
        "begin_line": 481,
        "end_line": 483,
        "comment": "\r\n     * Object argument that is reflection-equal to the given value with support for excluding\r\n     * selected fields from a class.\r\n     * <p>\r\n     * This matcher can be used when equals() is not implemented on compared objects.\r\n     * Matcher uses java reflection API to compare fields of wanted and actual object.\r\n     * <p>\r\n     * Works similarly to EqualsBuilder.reflectionEquals(this, other, exlucdeFields) from\r\n     * apache commons library.\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param value\r\n     *            the given value.\r\n     * @param excludeFields\r\n     *            fields to exclude, if field does not exist it is ignored.\r\n     * @return <code>null</code>.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.same(T)",
        "snippet": "    public static <T> T same(T value) {\n        return reportMatcher(new Same(value)).<T>returnNull();\n    }",
        "begin_line": 496,
        "end_line": 498,
        "comment": "\r\n     * Object argument that is the same as the given value.\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param <T>\r\n     *            the type of the object, it is passed through to prevent casts.\r\n     * @param value\r\n     *            the given value.\r\n     * @return <code>null</code>.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.isNull()",
        "snippet": "    public static Object isNull() {\n        return reportMatcher(Null.NULL).returnNull();\n    }",
        "begin_line": 507,
        "end_line": 509,
        "comment": "\r\n     * null argument.\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @return <code>null</code>.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.notNull()",
        "snippet": "    public static Object notNull() {\n        return reportMatcher(NotNull.NOT_NULL).returnNull();\n    }",
        "begin_line": 520,
        "end_line": 522,
        "comment": "\r\n     * not null argument.\r\n     * <p>\r\n     * alias to {@link Matchers#isNotNull()}\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @return <code>null</code>.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.isNotNull()",
        "snippet": "    public static Object isNotNull() {\n        return notNull();\n    }",
        "begin_line": 533,
        "end_line": 535,
        "comment": "\r\n     * not null argument.\r\n     * <p>\r\n     * alias to {@link Matchers#notNull()}\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @return <code>null</code>.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.contains(java.lang.String)",
        "snippet": "    public static String contains(String substring) {\n        return reportMatcher(new Contains(substring)).returnString();\n    }",
        "begin_line": 546,
        "end_line": 548,
        "comment": "\r\n     * String argument that contains the given substring.\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param substring\r\n     *            the substring.\r\n     * @return empty String (\"\").\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.matches(java.lang.String)",
        "snippet": "    public static String matches(String regex) {\n        return reportMatcher(new Matches(regex)).returnString();\n    }",
        "begin_line": 559,
        "end_line": 561,
        "comment": "\r\n     * String argument that matches the given regular expression.\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param regex\r\n     *            the regular expression.\r\n     * @return empty String (\"\").\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.endsWith(java.lang.String)",
        "snippet": "    public static String endsWith(String suffix) {\n        return reportMatcher(new EndsWith(suffix)).returnString();\n    }",
        "begin_line": 572,
        "end_line": 574,
        "comment": "\r\n     * String argument that ends with the given suffix.\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param suffix\r\n     *            the suffix.\r\n     * @return empty String (\"\").\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.startsWith(java.lang.String)",
        "snippet": "    public static String startsWith(String prefix) {\n        return reportMatcher(new StartsWith(prefix)).returnString();\n    }",
        "begin_line": 585,
        "end_line": 587,
        "comment": "\r\n     * String argument that starts with the given prefix.\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param prefix\r\n     *            the prefix.\r\n     * @return empty String (\"\").\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.argThat(org.hamcrest.Matcher<T>)",
        "snippet": "    public static <T> T argThat(Matcher<T> matcher) {\n        return reportMatcher(matcher).<T>returnNull();\n    }",
        "begin_line": 597,
        "end_line": 599,
        "comment": "\r\n     * Allows creating custom argument matchers.\r\n     * <p>\r\n     * See examples in javadoc for {@link ArgumentMatcher} class\r\n     * \r\n     * @param matcher decides whether argument matches\r\n     * @return <code>null</code>.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.charThat(org.hamcrest.Matcher<java.lang.Character>)",
        "snippet": "    public static char charThat(Matcher<Character> matcher) {\n        return reportMatcher(matcher).returnChar();\n    }",
        "begin_line": 609,
        "end_line": 611,
        "comment": "\r\n     * Allows creating custom argument matchers.\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param matcher decides whether argument matches\r\n     * @return <code>0</code>.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.booleanThat(org.hamcrest.Matcher<java.lang.Boolean>)",
        "snippet": "    public static boolean booleanThat(Matcher<Boolean> matcher) {\n        return reportMatcher(matcher).returnFalse();\n    }",
        "begin_line": 621,
        "end_line": 623,
        "comment": "\r\n     * Allows creating custom argument matchers.\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param matcher decides whether argument matches\r\n     * @return <code>false</code>.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.byteThat(org.hamcrest.Matcher<java.lang.Byte>)",
        "snippet": "    public static byte byteThat(Matcher<Byte> matcher) {\n        return reportMatcher(matcher).returnZero();\n    }",
        "begin_line": 633,
        "end_line": 635,
        "comment": "\r\n     * Allows creating custom argument matchers.\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param matcher decides whether argument matches\r\n     * @return <code>0</code>.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.shortThat(org.hamcrest.Matcher<java.lang.Short>)",
        "snippet": "    public static short shortThat(Matcher<Short> matcher) {\n        return reportMatcher(matcher).returnZero();\n    }",
        "begin_line": 645,
        "end_line": 647,
        "comment": "\r\n     * Allows creating custom argument matchers.\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param matcher decides whether argument matches\r\n     * @return <code>0</code>.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.intThat(org.hamcrest.Matcher<java.lang.Integer>)",
        "snippet": "    public static int intThat(Matcher<Integer> matcher) {\n        return reportMatcher(matcher).returnZero();\n    }",
        "begin_line": 657,
        "end_line": 659,
        "comment": "\r\n     * Allows creating custom argument matchers.\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param matcher decides whether argument matches\r\n     * @return <code>0</code>.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.longThat(org.hamcrest.Matcher<java.lang.Long>)",
        "snippet": "    public static long longThat(Matcher<Long> matcher) {\n        return reportMatcher(matcher).returnZero();\n    }",
        "begin_line": 669,
        "end_line": 671,
        "comment": "\r\n     * Allows creating custom argument matchers.\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param matcher decides whether argument matches\r\n     * @return <code>0</code>.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.floatThat(org.hamcrest.Matcher<java.lang.Float>)",
        "snippet": "    public static float floatThat(Matcher<Float> matcher) {\n        return reportMatcher(matcher).returnZero();\n    }",
        "begin_line": 681,
        "end_line": 683,
        "comment": "\r\n     * Allows creating custom argument matchers.\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param matcher decides whether argument matches\r\n     * @return <code>0</code>.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.doubleThat(org.hamcrest.Matcher<java.lang.Double>)",
        "snippet": "    public static double doubleThat(Matcher<Double> matcher) {\n        return reportMatcher(matcher).returnZero();\n    }",
        "begin_line": 693,
        "end_line": 695,
        "comment": "\r\n     * Allows creating custom argument matchers.\r\n     * <p>\r\n     * See examples in javadoc for {@link Matchers} class\r\n     * \r\n     * @param matcher decides whether argument matches\r\n     * @return <code>0</code>.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/Matchers.java",
        "class_name": "org.mockito.Matchers",
        "signature": "org.mockito.Matchers.reportMatcher(org.hamcrest.Matcher<?>)",
        "snippet": "    private static HandyReturnValues reportMatcher(Matcher<?> matcher) {\n        return mockingProgress.getArgumentMatcherStorage().reportMatcher(matcher);\n    }",
        "begin_line": 697,
        "end_line": 699,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/InOrderImpl.java",
        "class_name": "org.mockito.internal.InOrderImpl",
        "signature": "org.mockito.internal.InOrderImpl.InOrderImpl(java.util.List<java.lang.Object>)",
        "snippet": "    public InOrderImpl(List<Object> mocksToBeVerifiedInOrder) {\n        this.mocksToBeVerifiedInOrder.addAll(mocksToBeVerifiedInOrder);\n    }",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/InOrderImpl.java",
        "class_name": "org.mockito.internal.InOrderImpl",
        "signature": "org.mockito.internal.InOrderImpl.verify(T)",
        "snippet": "    public <T> T verify(T mock) {\n        return this.verify(mock, VerificationModeFactory.times(1));\n    }",
        "begin_line": 31,
        "end_line": 33,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/InOrderImpl.java",
        "class_name": "org.mockito.internal.InOrderImpl",
        "signature": "org.mockito.internal.InOrderImpl.verify(T, org.mockito.internal.verification.api.VerificationMode)",
        "snippet": "    public <T> T verify(T mock, VerificationMode mode) {\n        if (!mocksToBeVerifiedInOrder.contains(mock)) {\n            reporter.inOrderRequiresFamiliarMock();\n        } else if (!(mode instanceof VerificationInOrderMode)) {\n            throw new MockitoException(mode.getClass().getSimpleName() + \" is not implemented to work with InOrder\");\n        }\n        return mockitoCore.verify(mock, new InOrderWrapper((VerificationInOrderMode) mode, mocksToBeVerifiedInOrder));\n    }",
        "begin_line": 35,
        "end_line": 42,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/MockitoCore.java",
        "class_name": "org.mockito.internal.MockitoCore",
        "signature": "org.mockito.internal.MockitoCore.mock(java.lang.Class<T>, org.mockito.MockSettings)",
        "snippet": "    public <T> T mock(Class<T> classToMock, MockSettings mockSettings) {\n        mockingProgress.validateState();\n        mockingProgress.resetOngoingStubbing();\n        return mockUtil.createMock(classToMock, mockingProgress, (MockSettingsImpl) mockSettings);\n    }",
        "begin_line": 36,
        "end_line": 40,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/MockitoCore.java",
        "class_name": "org.mockito.internal.MockitoCore",
        "signature": "org.mockito.internal.MockitoCore.stub()",
        "snippet": "    public IOngoingStubbing stub() {\n        IOngoingStubbing stubbing = mockingProgress.pullOngoingStubbing();\n        if (stubbing == null) {\n            mockingProgress.reset();\n            reporter.missingMethodInvocation();\n        }\n        return stubbing;\n    }",
        "begin_line": 42,
        "end_line": 49,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/MockitoCore.java",
        "class_name": "org.mockito.internal.MockitoCore",
        "signature": "org.mockito.internal.MockitoCore.stub(T)",
        "snippet": "    @Deprecated\n    public <T> DeprecatedOngoingStubbing<T> stub(T methodCall) {\n        mockingProgress.stubbingStarted();\n        return (DeprecatedOngoingStubbing) stub();\n    }",
        "begin_line": 51,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/MockitoCore.java",
        "class_name": "org.mockito.internal.MockitoCore",
        "signature": "org.mockito.internal.MockitoCore.when(T)",
        "snippet": "    public <T> OngoingStubbing<T> when(T methodCall) {\n        mockingProgress.stubbingStarted();\n        return (OngoingStubbing) stub();\n    }",
        "begin_line": 57,
        "end_line": 60,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/MockitoCore.java",
        "class_name": "org.mockito.internal.MockitoCore",
        "signature": "org.mockito.internal.MockitoCore.verify(T, org.mockito.internal.verification.api.VerificationMode)",
        "snippet": "    public <T> T verify(T mock, VerificationMode mode) {\n        if (mock == null) {\n            reporter.nullPassedToVerify();\n        } else if (!mockUtil.isMock(mock)) {\n            reporter.notAMockPassedToVerify();\n        }\n        mockingProgress.verificationStarted(mode);\n        return mock;\n    }",
        "begin_line": 63,
        "end_line": 71,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/MockitoCore.java",
        "class_name": "org.mockito.internal.MockitoCore",
        "signature": "org.mockito.internal.MockitoCore.reset(T...)",
        "snippet": "    public <T> void reset(T ... mocks) {\n        mockingProgress.validateState();\n        mockingProgress.reset();\n        mockingProgress.resetOngoingStubbing();\n        \n        for (T m : mocks) {\n            mockUtil.resetMock(m, mockingProgress);\n        }\n    }",
        "begin_line": 73,
        "end_line": 81,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/MockitoCore.java",
        "class_name": "org.mockito.internal.MockitoCore",
        "signature": "org.mockito.internal.MockitoCore.verifyNoMoreInteractions(java.lang.Object...)",
        "snippet": "    public void verifyNoMoreInteractions(Object... mocks) {\n        assertMocksNotEmpty(mocks);\n        mockingProgress.validateState();\n        for (Object mock : mocks) {\n            try {\n                if (mock == null) {\n                    reporter.nullPassedToVerifyNoMoreInteractions();\n                }\n                mockUtil.getMockHandler(mock).verifyNoMoreInteractions();\n            } catch (NotAMockException e) {\n                reporter.notAMockPassedToVerifyNoMoreInteractions();\n            }\n        }\n    }",
        "begin_line": 83,
        "end_line": 96,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/MockitoCore.java",
        "class_name": "org.mockito.internal.MockitoCore",
        "signature": "org.mockito.internal.MockitoCore.assertMocksNotEmpty(java.lang.Object[])",
        "snippet": "    private void assertMocksNotEmpty(Object[] mocks) {\n        if (mocks == null || mocks.length == 0) {\n            reporter.mocksHaveToBePassedToVerifyNoMoreInteractions();\n        }\n    }",
        "begin_line": 98,
        "end_line": 102,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/MockitoCore.java",
        "class_name": "org.mockito.internal.MockitoCore",
        "signature": "org.mockito.internal.MockitoCore.inOrder(java.lang.Object...)",
        "snippet": "    public InOrder inOrder(Object... mocks) {\n        if (mocks == null || mocks.length == 0) {\n            reporter.mocksHaveToBePassedWhenCreatingInOrder();\n        }\n        for (Object mock : mocks) {\n            if (mock == null) {\n                reporter.nullPassedWhenCreatingInOrder();\n            } else if (!mockUtil.isMock(mock)) {\n                reporter.notAMockPassedWhenCreatingInOrder();\n            }\n        }\n        InOrder inOrder = new InOrderImpl(Arrays.asList(mocks));\n        return inOrder;\n    }",
        "begin_line": 104,
        "end_line": 117,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/MockitoCore.java",
        "class_name": "org.mockito.internal.MockitoCore",
        "signature": "org.mockito.internal.MockitoCore.doAnswer(org.mockito.stubbing.Answer)",
        "snippet": "    public Stubber doAnswer(Answer answer) {\n        mockingProgress.stubbingStarted();\n        mockingProgress.resetOngoingStubbing();\n        return new StubberImpl().doAnswer(answer);\n    }",
        "begin_line": 119,
        "end_line": 123,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/MockitoCore.java",
        "class_name": "org.mockito.internal.MockitoCore",
        "signature": "org.mockito.internal.MockitoCore.stubVoid(T)",
        "snippet": "    public <T> VoidMethodStubbable<T> stubVoid(T mock) {\n        MockHandler<T> handler = mockUtil.getMockHandler(mock);\n        mockingProgress.stubbingStarted();\n        return handler.voidMethodStubbable(mock);\n    }",
        "begin_line": 125,
        "end_line": 129,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/MockitoCore.java",
        "class_name": "org.mockito.internal.MockitoCore",
        "signature": "org.mockito.internal.MockitoCore.validateMockitoUsage()",
        "snippet": "    public void validateMockitoUsage() {\n        mockingProgress.validateState();\n    }",
        "begin_line": 131,
        "end_line": 133,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/MockitoCore.java",
        "class_name": "org.mockito.internal.MockitoCore",
        "signature": "org.mockito.internal.MockitoCore.getLastInvocation()",
        "snippet": "    public Invocation getLastInvocation() {\n        OngoingStubbingImpl ongoingStubbing = ((OngoingStubbingImpl) mockingProgress.pullOngoingStubbing());\n        List<Invocation> allInvocations = ongoingStubbing.getRegisteredInvocations().getAll();\n        return allInvocations.get(allInvocations.size()-1);\n    }",
        "begin_line": 138,
        "end_line": 142,
        "comment": "\r\n     * For testing purposes only. Is not the part of main API.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/MockHandler.java",
        "class_name": "org.mockito.internal.MockHandler",
        "signature": "org.mockito.internal.MockHandler.MockHandler(org.mockito.internal.util.MockName, org.mockito.internal.progress.MockingProgress, org.mockito.internal.invocation.MatchersBinder, org.mockito.internal.creation.MockSettingsImpl)",
        "snippet": "    public MockHandler(MockName mockName, MockingProgress mockingProgress, MatchersBinder matchersBinder, MockSettingsImpl mockSettings) {\n        this.mockName = mockName;\n        this.mockingProgress = mockingProgress;\n        this.matchersBinder = matchersBinder;\n        this.mockSettings = mockSettings;\n        this.mockitoStubber = new MockitoStubber(mockingProgress);\n        this.registeredInvocations = new RegisteredInvocations();\n    }",
        "begin_line": 44,
        "end_line": 51,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/MockHandler.java",
        "class_name": "org.mockito.internal.MockHandler",
        "signature": "org.mockito.internal.MockHandler.MockHandler(org.mockito.internal.MockHandler<T>)",
        "snippet": "    public MockHandler(MockHandler<T> oldMockHandler) {\n        this(oldMockHandler.mockName, oldMockHandler.mockingProgress, oldMockHandler.matchersBinder, oldMockHandler.mockSettings);\n    }",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/MockHandler.java",
        "class_name": "org.mockito.internal.MockHandler",
        "signature": "org.mockito.internal.MockHandler.intercept(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], org.mockito.cglib.proxy.MethodProxy)",
        "snippet": "    public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n        if (mockitoStubber.hasAnswersForStubbing()) {\n            //stubbing voids with stubVoid() or doAnswer() style\n            Invocation invocation = new Invocation(proxy, method, args, SequenceNumber.next(), new FilteredCGLIBProxyRealMethod(methodProxy));\n            InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(), invocation);\n            mockitoStubber.setMethodForStubbing(invocationMatcher);\n            return null;\n        }\n        VerificationMode verificationMode = mockingProgress.pullVerificationMode();\n\n        Invocation invocation = new Invocation(proxy, method, args, SequenceNumber.next(), new FilteredCGLIBProxyRealMethod(methodProxy));\n        InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(), invocation);\n        \n        mockingProgress.validateState();\n\n        if (verificationMode != null) {\n            VerificationDataImpl data = new VerificationDataImpl(registeredInvocations.getAll(), invocationMatcher);\n            verificationMode.verify(data);\n            return null;\n        }\n\n        registeredInvocations.add(invocationMatcher.getInvocation());\n        mockitoStubber.setInvocationForPotentialStubbing(invocationMatcher);\n        OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(mockitoStubber, registeredInvocations);\n        mockingProgress.reportOngoingStubbing(ongoingStubbing);\n\n        Answer<?> stubbedAnswer = mockitoStubber.findAnswerFor(invocation);\n        if (!invocation.isVoid() && stubbedAnswer == null) {\n            //it is a return-value interaction but not stubbed. This *might* be a problem\n            mockingProgress.getDebuggingInfo().addPotentiallyUnstubbed(invocationMatcher);\n        }\n        \n        if (stubbedAnswer != null) {\n            mockingProgress.getDebuggingInfo().reportUsedStub(invocationMatcher);\n            return stubbedAnswer.answer(invocation);\n        } else {\n            Object ret = mockSettings.getDefaultAnswer().answer(invocation);\n            \n            //redo setting invocation for potential stubbing in case of partial mocks / spies.\n            //Without it, the real method inside 'when' might have delegated \n            //to other self method and overwrite the intended stubbed method with a different one.\n            mockitoStubber.setInvocationForPotentialStubbing(invocationMatcher);\n            return ret;\n        }\n    }",
        "begin_line": 57,
        "end_line": 101,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/MockHandler.java",
        "class_name": "org.mockito.internal.MockHandler",
        "signature": "org.mockito.internal.MockHandler.verifyNoMoreInteractions()",
        "snippet": "    public void verifyNoMoreInteractions() {\n        VerificationDataImpl data = new VerificationDataImpl(registeredInvocations.getAll(), null);\n        VerificationModeFactory.noMoreInteractions().verify(data);\n    }",
        "begin_line": 103,
        "end_line": 106,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/MockHandler.java",
        "class_name": "org.mockito.internal.MockHandler",
        "signature": "org.mockito.internal.MockHandler.voidMethodStubbable(T)",
        "snippet": "    public VoidMethodStubbable<T> voidMethodStubbable(T mock) {\n        return new VoidMethodStubbableImpl<T>(mock, mockitoStubber);\n    }",
        "begin_line": 108,
        "end_line": 110,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/MockHandler.java",
        "class_name": "org.mockito.internal.MockHandler",
        "signature": "org.mockito.internal.MockHandler.getRegisteredInvocations()",
        "snippet": "    public List<Invocation> getRegisteredInvocations() {\n        return registeredInvocations.getAll();\n    }",
        "begin_line": 112,
        "end_line": 114,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/MockHandler.java",
        "class_name": "org.mockito.internal.MockHandler",
        "signature": "org.mockito.internal.MockHandler.getMockName()",
        "snippet": "    public MockName getMockName() {\n        return mockName;\n    }",
        "begin_line": 116,
        "end_line": 118,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/MockHandler.java",
        "class_name": "org.mockito.internal.MockHandler",
        "signature": "org.mockito.internal.MockHandler.setAnswersForStubbing(java.util.List<org.mockito.stubbing.Answer>)",
        "snippet": "    @SuppressWarnings(\"unchecked\")\n    public void setAnswersForStubbing(List<Answer> answers) {\n        mockitoStubber.setAnswersForStubbing(answers);\n    }",
        "begin_line": 120,
        "end_line": 123,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/reporting/PrintingFriendlyInvocation.java",
        "class_name": "org.mockito.internal.reporting.PrintingFriendlyInvocation",
        "signature": "org.mockito.internal.reporting.PrintingFriendlyInvocation.toString(org.mockito.internal.reporting.PrintSettings)",
        "snippet": "    String toString(PrintSettings printSettings);",
        "begin_line": 9,
        "end_line": 9,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/reporting/SmartPrinter.java",
        "class_name": "org.mockito.internal.reporting.SmartPrinter",
        "signature": "org.mockito.internal.reporting.SmartPrinter.SmartPrinter(org.mockito.internal.reporting.PrintingFriendlyInvocation, org.mockito.internal.reporting.PrintingFriendlyInvocation, java.lang.Integer...)",
        "snippet": "    public SmartPrinter(PrintingFriendlyInvocation wanted, PrintingFriendlyInvocation actual, Integer ... indexesOfMatchersToBeDescribedWithExtraTypeInfo) {\n        PrintSettings printSettings = new PrintSettings();\n        printSettings.setMultiline(wanted.toString().contains(\"\\n\") || actual.toString().contains(\"\\n\"));\n        printSettings.setMatchersToBeDescribedWithExtraTypeInfo(indexesOfMatchersToBeDescribedWithExtraTypeInfo);\n        \n        this.wanted = wanted.toString(printSettings);\n        this.actual = actual.toString(printSettings);\n    }",
        "begin_line": 19,
        "end_line": 26,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/reporting/SmartPrinter.java",
        "class_name": "org.mockito.internal.reporting.SmartPrinter",
        "signature": "org.mockito.internal.reporting.SmartPrinter.getWanted()",
        "snippet": "    public String getWanted() {\n        return wanted;\n    }",
        "begin_line": 28,
        "end_line": 30,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/reporting/SmartPrinter.java",
        "class_name": "org.mockito.internal.reporting.SmartPrinter",
        "signature": "org.mockito.internal.reporting.SmartPrinter.getActual()",
        "snippet": "    public String getActual() {\n        return actual;\n    }",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/reporting/PrintSettings.java",
        "class_name": "org.mockito.internal.reporting.PrintSettings",
        "signature": "org.mockito.internal.reporting.PrintSettings.setMultiline(boolean)",
        "snippet": "    public void setMultiline(boolean multiline) {\n        this.multiline = multiline;\n    }",
        "begin_line": 17,
        "end_line": 19,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/reporting/PrintSettings.java",
        "class_name": "org.mockito.internal.reporting.PrintSettings",
        "signature": "org.mockito.internal.reporting.PrintSettings.isMultiline()",
        "snippet": "    public boolean isMultiline() {\n        return multiline;\n    }",
        "begin_line": 21,
        "end_line": 23,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/reporting/PrintSettings.java",
        "class_name": "org.mockito.internal.reporting.PrintSettings",
        "signature": "org.mockito.internal.reporting.PrintSettings.verboseMatchers(java.lang.Integer...)",
        "snippet": "    public static PrintSettings verboseMatchers(Integer ... indexesOfMatchers) {\n        PrintSettings settings = new PrintSettings();\n        settings.setMatchersToBeDescribedWithExtraTypeInfo(indexesOfMatchers);\n        return settings;\n    }",
        "begin_line": 25,
        "end_line": 29,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/reporting/PrintSettings.java",
        "class_name": "org.mockito.internal.reporting.PrintSettings",
        "signature": "org.mockito.internal.reporting.PrintSettings.extraTypeInfoFor(int)",
        "snippet": "    public boolean extraTypeInfoFor(int argumentIndex) {\n        return withTypeInfo.contains(argumentIndex);\n    }",
        "begin_line": 31,
        "end_line": 33,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/reporting/PrintSettings.java",
        "class_name": "org.mockito.internal.reporting.PrintSettings",
        "signature": "org.mockito.internal.reporting.PrintSettings.setMatchersToBeDescribedWithExtraTypeInfo(java.lang.Integer[])",
        "snippet": "    public void setMatchersToBeDescribedWithExtraTypeInfo(Integer[] indexesOfMatchers) {\n        this.withTypeInfo = Arrays.asList(indexesOfMatchers);\n    }",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/runners/JUnit45AndHigherRunnerImpl.java",
        "class_name": "org.mockito.internal.runners.JUnit45AndHigherRunnerImpl",
        "signature": "org.mockito.internal.runners.JUnit45AndHigherRunnerImpl.JUnit45AndHigherRunnerImpl(java.lang.Class<?>)",
        "snippet": "    public JUnit45AndHigherRunnerImpl(Class<?> klass) throws InitializationError {\n        runner = new BlockJUnit4ClassRunner(klass) {\n            protected Statement withBefores(FrameworkMethod method, Object target,\n                    Statement statement) {\n                // init annotated mocks before tests\n                MockitoAnnotations.initMocks(target);\n                return super.withBefores(method, target, statement);\n            }\n        };\n    }",
        "begin_line": 21,
        "end_line": 30,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/runners/JUnit45AndHigherRunnerImpl.java",
        "class_name": "org.mockito.internal.runners.JUnit45AndHigherRunnerImpl",
        "signature": "org.mockito.internal.runners.JUnit45AndHigherRunnerImpl.Anonymous-777c449a-741f-4178-b0b2-f0b7a9c38717.withBefores(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)",
        "snippet": "            protected Statement withBefores(FrameworkMethod method, Object target,\n                    Statement statement) {\n                // init annotated mocks before tests\n                MockitoAnnotations.initMocks(target);\n                return super.withBefores(method, target, statement);\n            }",
        "begin_line": 23,
        "end_line": 28,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/runners/JUnit45AndHigherRunnerImpl.java",
        "class_name": "org.mockito.internal.runners.JUnit45AndHigherRunnerImpl",
        "signature": "org.mockito.internal.runners.JUnit45AndHigherRunnerImpl.run(org.junit.runner.notification.RunNotifier)",
        "snippet": "    public void run(final RunNotifier notifier) {\n        // add listener that validates framework usage at the end of each test\n        notifier.addListener(new FrameworkUsageValidator(notifier));\n\n        runner.run(notifier);\n    }",
        "begin_line": 32,
        "end_line": 37,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/runners/JUnit45AndHigherRunnerImpl.java",
        "class_name": "org.mockito.internal.runners.JUnit45AndHigherRunnerImpl",
        "signature": "org.mockito.internal.runners.JUnit45AndHigherRunnerImpl.getDescription()",
        "snippet": "    public Description getDescription() {\n        return runner.getDescription();\n    }",
        "begin_line": 39,
        "end_line": 41,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/runners/JUnit45AndHigherRunnerImpl.java",
        "class_name": "org.mockito.internal.runners.JUnit45AndHigherRunnerImpl",
        "signature": "org.mockito.internal.runners.JUnit45AndHigherRunnerImpl.filter(org.junit.runner.manipulation.Filter)",
        "snippet": "    @Override\n    public void filter(org.junit.runner.manipulation.Filter filter) throws org.junit.runner.manipulation.NoTestsRemainException {\n        // filter is required because without it UnrootedTests show up in Eclipse\n        runner.filter(filter);\n    }",
        "begin_line": 42,
        "end_line": 46,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/runners/RunnerFactory.java",
        "class_name": "org.mockito.internal.runners.RunnerFactory",
        "signature": "org.mockito.internal.runners.RunnerFactory.RunnerFactory(org.mockito.internal.runners.util.RunnerProvider)",
        "snippet": "    RunnerFactory(RunnerProvider runnerProvider) {\n        this.runnerProvider = runnerProvider;\n    }",
        "begin_line": 14,
        "end_line": 16,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/runners/RunnerFactory.java",
        "class_name": "org.mockito.internal.runners.RunnerFactory",
        "signature": "org.mockito.internal.runners.RunnerFactory.RunnerFactory()",
        "snippet": "    public RunnerFactory() {\n        this(new RunnerProvider());\n    }",
        "begin_line": 18,
        "end_line": 20,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/runners/RunnerFactory.java",
        "class_name": "org.mockito.internal.runners.RunnerFactory",
        "signature": "org.mockito.internal.runners.RunnerFactory.create(java.lang.Class<?>)",
        "snippet": "    public RunnerImpl create(Class<?> klass) {\n        try {\n            if (runnerProvider.isJUnit45OrHigherAvailable()) {\n                return runnerProvider.newInstance(\"org.mockito.internal.runners.JUnit45AndHigherRunnerImpl\", klass);\n            } else {\n                return runnerProvider.newInstance(\"org.mockito.internal.runners.JUnit44RunnerImpl\", klass);\n            }\n        } catch (Throwable t) {\n            throw new MockitoException(\n                    \"\\n\" +\n                    \"\\n\" +\n                    \"MockitoRunner can only be used with JUnit 4.4 or higher.\\n\" +\n                    \"You can upgrade your JUnit version or write your own Runner (please consider contributing your runner to the Mockito community).\\n\" +\n                    \"Bear in mind that you can still enjoy all features of the framework without using runners (they are completely optional).\\n\" +\n                    \"If you get this error despite using JUnit 4.4 or higher then please report this error to the mockito mailing list.\\n\"\n                    , t);\n        }\n    }",
        "begin_line": 22,
        "end_line": 39,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/runners/RunnerImpl.java",
        "class_name": "org.mockito.internal.runners.RunnerImpl",
        "signature": "org.mockito.internal.runners.RunnerImpl.run(org.junit.runner.notification.RunNotifier)",
        "snippet": "    void run(RunNotifier notifier);",
        "begin_line": 16,
        "end_line": 16,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/runners/RunnerImpl.java",
        "class_name": "org.mockito.internal.runners.RunnerImpl",
        "signature": "org.mockito.internal.runners.RunnerImpl.getDescription()",
        "snippet": "    Description getDescription();",
        "begin_line": 18,
        "end_line": 18,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/runners/JUnit44RunnerImpl.java",
        "class_name": "org.mockito.internal.runners.JUnit44RunnerImpl",
        "signature": "org.mockito.internal.runners.JUnit44RunnerImpl.JUnit44RunnerImpl(java.lang.Class<?>)",
        "snippet": "    public JUnit44RunnerImpl(Class<?> klass) throws InitializationError {\n        this.runner = new JUnit4ClassRunner(klass) {\n            @Override\n            protected Object createTest() throws Exception {\n                Object test = super.createTest();\n                MockitoAnnotations.initMocks(test);\n                return test;\n            }\n        };\n    }",
        "begin_line": 20,
        "end_line": 29,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/runners/JUnit44RunnerImpl.java",
        "class_name": "org.mockito.internal.runners.JUnit44RunnerImpl",
        "signature": "org.mockito.internal.runners.JUnit44RunnerImpl.Anonymous-1e1164d1-2621-4d29-8bbc-218e3a71844f.createTest()",
        "snippet": "            @Override\n            protected Object createTest() throws Exception {\n                Object test = super.createTest();\n                MockitoAnnotations.initMocks(test);\n                return test;\n            }",
        "begin_line": 22,
        "end_line": 27,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/runners/JUnit44RunnerImpl.java",
        "class_name": "org.mockito.internal.runners.JUnit44RunnerImpl",
        "signature": "org.mockito.internal.runners.JUnit44RunnerImpl.run(org.junit.runner.notification.RunNotifier)",
        "snippet": "    public void run(RunNotifier notifier) {\n        // add listener that validates framework usage at the end of each test\n        notifier.addListener(new FrameworkUsageValidator(notifier));\n\n        runner.run(notifier);\n    }",
        "begin_line": 31,
        "end_line": 36,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/runners/JUnit44RunnerImpl.java",
        "class_name": "org.mockito.internal.runners.JUnit44RunnerImpl",
        "signature": "org.mockito.internal.runners.JUnit44RunnerImpl.getDescription()",
        "snippet": "    public Description getDescription() {\n        return runner.getDescription();\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/runners/JUnit44RunnerImpl.java",
        "class_name": "org.mockito.internal.runners.JUnit44RunnerImpl",
        "signature": "org.mockito.internal.runners.JUnit44RunnerImpl.filter(org.junit.runner.manipulation.Filter)",
        "snippet": "    public void filter(org.junit.runner.manipulation.Filter filter) throws org.junit.runner.manipulation.NoTestsRemainException {\n        // filter is required because without it UnrootedTests show up in Eclipse\n        runner.filter(filter);\n    }",
        "begin_line": 41,
        "end_line": 44,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/runners/util/RunnerProvider.java",
        "class_name": "org.mockito.internal.runners.util.RunnerProvider",
        "signature": "org.mockito.internal.runners.util.RunnerProvider.isJUnit45OrHigherAvailable()",
        "snippet": "    public boolean isJUnit45OrHigherAvailable() {\n        return hasJUnit45OrHigher;\n    }",
        "begin_line": 24,
        "end_line": 26,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/runners/util/RunnerProvider.java",
        "class_name": "org.mockito.internal.runners.util.RunnerProvider",
        "signature": "org.mockito.internal.runners.util.RunnerProvider.newInstance(java.lang.String, java.lang.Class<?>)",
        "snippet": "    public RunnerImpl newInstance(String runnerClassName, Class<?> constructorParam) throws Exception {\n        Class<?> runnerClass = Class.forName(runnerClassName);\n        Constructor<?> constructor = runnerClass.getConstructor(Class.class.getClass());\n        return (RunnerImpl) constructor.newInstance(constructorParam);   \n    }",
        "begin_line": 28,
        "end_line": 32,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/runners/util/FrameworkUsageValidator.java",
        "class_name": "org.mockito.internal.runners.util.FrameworkUsageValidator",
        "signature": "org.mockito.internal.runners.util.FrameworkUsageValidator.FrameworkUsageValidator(org.junit.runner.notification.RunNotifier)",
        "snippet": "    public FrameworkUsageValidator(RunNotifier notifier) {\n        this.notifier = notifier;\n    }",
        "begin_line": 17,
        "end_line": 19,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/runners/util/FrameworkUsageValidator.java",
        "class_name": "org.mockito.internal.runners.util.FrameworkUsageValidator",
        "signature": "org.mockito.internal.runners.util.FrameworkUsageValidator.testFinished(org.junit.runner.Description)",
        "snippet": "    @Override\n    public void testFinished(Description description) throws Exception {\n        super.testFinished(description);\n        try {\n            Mockito.validateMockitoUsage();\n        } catch(Throwable t) {\n            notifier.fireTestFailure(new Failure(description, t));\n        }\n    }",
        "begin_line": 21,
        "end_line": 29,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/debugging/Localized.java",
        "class_name": "org.mockito.internal.debugging.Localized",
        "signature": "org.mockito.internal.debugging.Localized.Localized(T)",
        "snippet": "    public Localized(T object) {\n        this.object = object;\n        location = new Location();\n    }",
        "begin_line": 13,
        "end_line": 16,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/debugging/Localized.java",
        "class_name": "org.mockito.internal.debugging.Localized",
        "signature": "org.mockito.internal.debugging.Localized.getObject()",
        "snippet": "    public T getObject() {\n        return object;\n    }",
        "begin_line": 18,
        "end_line": 20,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/debugging/Localized.java",
        "class_name": "org.mockito.internal.debugging.Localized",
        "signature": "org.mockito.internal.debugging.Localized.getLocation()",
        "snippet": "    public Location getLocation() {\n        return location;\n    }",
        "begin_line": 22,
        "end_line": 24,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/debugging/Location.java",
        "class_name": "org.mockito.internal.debugging.Location",
        "signature": "org.mockito.internal.debugging.Location.Location()",
        "snippet": "    public Location() {\n        StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();\n        StackTraceFilter filter = new StackTraceFilter();\n        this.firstTraceElement = filter.filter(stackTrace, false)[0];\n    }",
        "begin_line": 13,
        "end_line": 17,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/debugging/Location.java",
        "class_name": "org.mockito.internal.debugging.Location",
        "signature": "org.mockito.internal.debugging.Location.toString()",
        "snippet": "    @Override\n    public String toString() {\n        return \"-> at \" + this.firstTraceElement.toString();\n    }",
        "begin_line": 19,
        "end_line": 22,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/debugging/DebuggingInfo.java",
        "class_name": "org.mockito.internal.debugging.DebuggingInfo",
        "signature": "org.mockito.internal.debugging.DebuggingInfo.addStubbedInvocation(org.mockito.internal.invocation.Invocation)",
        "snippet": "    public void addStubbedInvocation(Invocation invocation) {\n        if (!collectingData) {\n            return;\n        }\n        \n        Iterator<InvocationMatcher> unstubbedIterator = unstubbedInvocations.iterator();\n        while(unstubbedIterator.hasNext()) {\n            InvocationMatcher unstubbed = unstubbedIterator.next();\n            if (unstubbed.getInvocation().equals(invocation)) {\n                unstubbedIterator.remove();\n            }\n        }\n        \n        unusedStubs.add(invocation);\n    }",
        "begin_line": 22,
        "end_line": 36,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/debugging/DebuggingInfo.java",
        "class_name": "org.mockito.internal.debugging.DebuggingInfo",
        "signature": "org.mockito.internal.debugging.DebuggingInfo.addPotentiallyUnstubbed(org.mockito.internal.invocation.InvocationMatcher)",
        "snippet": "    public void addPotentiallyUnstubbed(InvocationMatcher invocationMatcher) {\n        if (!collectingData) {\n            return;\n        }\n        unstubbedInvocations.add(invocationMatcher);\n    }",
        "begin_line": 38,
        "end_line": 43,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/debugging/DebuggingInfo.java",
        "class_name": "org.mockito.internal.debugging.DebuggingInfo",
        "signature": "org.mockito.internal.debugging.DebuggingInfo.reportUsedStub(org.mockito.internal.invocation.InvocationMatcher)",
        "snippet": "    public void reportUsedStub(InvocationMatcher invocationMatcher) {\n        Iterator<Invocation> i = unusedStubs.iterator();\n        while(i.hasNext()) {\n            Invocation invocation = i.next();\n            if (invocationMatcher.matches(invocation)) {\n                i.remove();\n            }\n        }\n    }",
        "begin_line": 45,
        "end_line": 53,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/debugging/DebuggingInfo.java",
        "class_name": "org.mockito.internal.debugging.DebuggingInfo",
        "signature": "org.mockito.internal.debugging.DebuggingInfo.collectData()",
        "snippet": "    public void collectData() {\n        collectingData = true;\n    }",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/debugging/DebuggingInfo.java",
        "class_name": "org.mockito.internal.debugging.DebuggingInfo",
        "signature": "org.mockito.internal.debugging.DebuggingInfo.clearData()",
        "snippet": "    public void clearData() {\n        collectingData = false;\n        unstubbedInvocations.clear();\n        unusedStubs.clear();\n    }",
        "begin_line": 59,
        "end_line": 63,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/debugging/DebuggingInfo.java",
        "class_name": "org.mockito.internal.debugging.DebuggingInfo",
        "signature": "org.mockito.internal.debugging.DebuggingInfo.printWarnings(org.mockito.internal.util.MockitoLogger)",
        "snippet": "    public void printWarnings(MockitoLogger logger) {\n        if (hasData()) {\n            WarningsPrinter warningsPrinter = new WarningsPrinter(unusedStubs, unstubbedInvocations);\n            warningsPrinter.print(logger);\n        }\n    }",
        "begin_line": 65,
        "end_line": 70,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/debugging/DebuggingInfo.java",
        "class_name": "org.mockito.internal.debugging.DebuggingInfo",
        "signature": "org.mockito.internal.debugging.DebuggingInfo.hasData()",
        "snippet": "    public boolean hasData() {\n        return !unusedStubs.isEmpty() || !unstubbedInvocations.isEmpty();\n    }",
        "begin_line": 72,
        "end_line": 74,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/debugging/WarningsPrinter.java",
        "class_name": "org.mockito.internal.debugging.WarningsPrinter",
        "signature": "org.mockito.internal.debugging.WarningsPrinter.WarningsPrinter(java.util.List<org.mockito.internal.invocation.Invocation>, java.util.List<org.mockito.internal.invocation.InvocationMatcher>)",
        "snippet": "    public WarningsPrinter(List<Invocation> unusedStubs, List<InvocationMatcher> unstubbedInvocations) {\n        this.unusedStubs = new LinkedList<Invocation>(unusedStubs);\n        this.unstubbedInvocations = new LinkedList<InvocationMatcher>(unstubbedInvocations);\n    }",
        "begin_line": 22,
        "end_line": 25,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/debugging/WarningsPrinter.java",
        "class_name": "org.mockito.internal.debugging.WarningsPrinter",
        "signature": "org.mockito.internal.debugging.WarningsPrinter.print(org.mockito.internal.util.MockitoLogger)",
        "snippet": "    public void print(MockitoLogger logger) {\n        Iterator<Invocation> unusedIterator = unusedStubs.iterator();\n        while(unusedIterator.hasNext()) {\n            Invocation unused = unusedIterator.next();\n            Iterator<InvocationMatcher> unstubbedIterator = unstubbedInvocations.iterator();\n            while(unstubbedIterator.hasNext()) {\n                InvocationMatcher unstubbed = unstubbedIterator.next();\n                if(unstubbed.hasSimilarMethod(unused)) { \n                    logger.log(stubbedMethodCalledWithDifferentArguments(unused, unstubbed));\n                    unusedIterator.remove();\n                    unstubbedIterator.remove();\n                } \n            }\n        }\n        \n        for (Invocation i : unusedStubs) {\n            logger.log(thisStubWasNotUsed(i));\n        }\n\n        for (InvocationMatcher i1 : unstubbedInvocations) {\n            logger.log(thisMethodWasNotStubbed(i1));\n        }\n    }",
        "begin_line": 27,
        "end_line": 49,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/debugging/WarningsPrinter.java",
        "class_name": "org.mockito.internal.debugging.WarningsPrinter",
        "signature": "org.mockito.internal.debugging.WarningsPrinter.thisStubWasNotUsed(org.mockito.internal.invocation.Invocation)",
        "snippet": "    private String thisStubWasNotUsed(Invocation i) {\n        return join(\n            \"[Mockito] Warning - this stub was not used:\",\n            i,\n            i.getLocation(),\n            \"\");\n    }",
        "begin_line": 51,
        "end_line": 57,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/debugging/WarningsPrinter.java",
        "class_name": "org.mockito.internal.debugging.WarningsPrinter",
        "signature": "org.mockito.internal.debugging.WarningsPrinter.thisMethodWasNotStubbed(org.mockito.internal.invocation.InvocationMatcher)",
        "snippet": "    private String thisMethodWasNotStubbed(InvocationMatcher i) {\n        return join(\n            \"[Mockito] Warning - this method was not stubbed:\",\n            i,\n            i.getInvocation().getLocation(),\n            \"\");\n    }",
        "begin_line": 59,
        "end_line": 65,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/debugging/WarningsPrinter.java",
        "class_name": "org.mockito.internal.debugging.WarningsPrinter",
        "signature": "org.mockito.internal.debugging.WarningsPrinter.stubbedMethodCalledWithDifferentArguments(org.mockito.internal.invocation.Invocation, org.mockito.internal.invocation.InvocationMatcher)",
        "snippet": "    private String stubbedMethodCalledWithDifferentArguments(Invocation unused, InvocationMatcher unstubbed) {\n        return join(\n                \"[Mockito] Warning - stubbed method called with different arguments.\",\n                \"Stubbed this way:\",\n                unused,\n                unused.getLocation(),\n                \"\",\n                \"But called with different arguments:\",\n                unstubbed,\n                unstubbed.getInvocation().getLocation(),\n                \"\");\n    }",
        "begin_line": 67,
        "end_line": 78,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/InOrderWrapper.java",
        "class_name": "org.mockito.internal.verification.InOrderWrapper",
        "signature": "org.mockito.internal.verification.InOrderWrapper.InOrderWrapper(org.mockito.internal.verification.api.VerificationInOrderMode, java.util.List<java.lang.Object>)",
        "snippet": "    public InOrderWrapper(VerificationInOrderMode mode, List<Object> mocksToBeVerifiedInOrder) {\n        this.mode = mode;\n        this.mocksToBeVerifiedInOrder = mocksToBeVerifiedInOrder;\n    }",
        "begin_line": 20,
        "end_line": 23,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/InOrderWrapper.java",
        "class_name": "org.mockito.internal.verification.InOrderWrapper",
        "signature": "org.mockito.internal.verification.InOrderWrapper.verify(org.mockito.internal.verification.api.VerificationData)",
        "snippet": "    public void verify(VerificationData data) {\n        List<Invocation> allInvocations = new AllInvocationsFinder().getAllInvocations(mocksToBeVerifiedInOrder);\n        mode.verifyInOrder(new VerificationDataImpl(allInvocations, data.getWanted()));\n    }",
        "begin_line": 25,
        "end_line": 28,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/AtMost.java",
        "class_name": "org.mockito.internal.verification.AtMost",
        "signature": "org.mockito.internal.verification.AtMost.AtMost(int)",
        "snippet": "    public AtMost(int maxNumberOfInvocations) {\n        if (maxNumberOfInvocations < 0) {\n            throw new MockitoException(\"Negative value is not allowed here\");\n        }\n        this.maxNumberOfInvocations = maxNumberOfInvocations;\n    }",
        "begin_line": 21,
        "end_line": 26,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/AtMost.java",
        "class_name": "org.mockito.internal.verification.AtMost",
        "signature": "org.mockito.internal.verification.AtMost.verify(org.mockito.internal.verification.api.VerificationData)",
        "snippet": "    public void verify(VerificationData data) {\n        List<Invocation> invocations = data.getAllInvocations();\n        InvocationMatcher wanted = data.getWanted();\n        \n        InvocationsFinder finder = new InvocationsFinder();\n        List<Invocation> found = finder.findInvocations(invocations, wanted);\n        int foundSize = found.size();\n        if (foundSize > maxNumberOfInvocations) {\n            new Reporter().wantedAtMostX(maxNumberOfInvocations, foundSize);\n        }\n        \n        for (Invocation i : found) {\n            i.markVerified();\n        }\n    }",
        "begin_line": 28,
        "end_line": 42,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/VerificationModeFactory.java",
        "class_name": "org.mockito.internal.verification.VerificationModeFactory",
        "signature": "org.mockito.internal.verification.VerificationModeFactory.atLeastOnce()",
        "snippet": "    public static VerificationMode atLeastOnce() {\n        return atLeast(1);\n    }",
        "begin_line": 11,
        "end_line": 13,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/VerificationModeFactory.java",
        "class_name": "org.mockito.internal.verification.VerificationModeFactory",
        "signature": "org.mockito.internal.verification.VerificationModeFactory.atLeast(int)",
        "snippet": "    public static VerificationMode atLeast(int minNumberOfInvocations) {\n        return new AtLeast(minNumberOfInvocations);\n    }",
        "begin_line": 15,
        "end_line": 17,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/VerificationModeFactory.java",
        "class_name": "org.mockito.internal.verification.VerificationModeFactory",
        "signature": "org.mockito.internal.verification.VerificationModeFactory.times(int)",
        "snippet": "    public static Times times(int wantedNumberOfInvocations) {\n        return new Times(wantedNumberOfInvocations);\n    }",
        "begin_line": 19,
        "end_line": 21,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/VerificationModeFactory.java",
        "class_name": "org.mockito.internal.verification.VerificationModeFactory",
        "signature": "org.mockito.internal.verification.VerificationModeFactory.noMoreInteractions()",
        "snippet": "    public static NoMoreInteractions noMoreInteractions() {\n        return new NoMoreInteractions();\n    }",
        "begin_line": 23,
        "end_line": 25,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/VerificationModeFactory.java",
        "class_name": "org.mockito.internal.verification.VerificationModeFactory",
        "signature": "org.mockito.internal.verification.VerificationModeFactory.atMost(int)",
        "snippet": "    public static VerificationMode atMost(int maxNumberOfInvocations) {\n        return new AtMost(maxNumberOfInvocations);\n    }",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/VerificationDataImpl.java",
        "class_name": "org.mockito.internal.verification.VerificationDataImpl",
        "signature": "org.mockito.internal.verification.VerificationDataImpl.VerificationDataImpl(java.util.List<org.mockito.internal.invocation.Invocation>, org.mockito.internal.invocation.InvocationMatcher)",
        "snippet": "    public VerificationDataImpl(List<Invocation> allInvocations, InvocationMatcher wanted) {\n        this.allInvocations = allInvocations;\n        this.wanted = wanted;\n    }",
        "begin_line": 18,
        "end_line": 21,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/VerificationDataImpl.java",
        "class_name": "org.mockito.internal.verification.VerificationDataImpl",
        "signature": "org.mockito.internal.verification.VerificationDataImpl.getAllInvocations()",
        "snippet": "    public List<Invocation> getAllInvocations() {\n        return allInvocations;\n    }",
        "begin_line": 23,
        "end_line": 25,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/VerificationDataImpl.java",
        "class_name": "org.mockito.internal.verification.VerificationDataImpl",
        "signature": "org.mockito.internal.verification.VerificationDataImpl.getWanted()",
        "snippet": "    public InvocationMatcher getWanted() {\n        return wanted;\n    }",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/RegisteredInvocations.java",
        "class_name": "org.mockito.internal.verification.RegisteredInvocations",
        "signature": "org.mockito.internal.verification.RegisteredInvocations.add(org.mockito.internal.invocation.Invocation)",
        "snippet": "    public void add(Invocation invocation) {\n        invocations.add(invocation);\n    }",
        "begin_line": 20,
        "end_line": 22,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/RegisteredInvocations.java",
        "class_name": "org.mockito.internal.verification.RegisteredInvocations",
        "signature": "org.mockito.internal.verification.RegisteredInvocations.removeLast()",
        "snippet": "    public void removeLast() {\n        invocations.remove(invocations.size()-1);\n    }",
        "begin_line": 24,
        "end_line": 26,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/RegisteredInvocations.java",
        "class_name": "org.mockito.internal.verification.RegisteredInvocations",
        "signature": "org.mockito.internal.verification.RegisteredInvocations.getAll()",
        "snippet": "    public List<Invocation> getAll() {\n        return ListUtil.filter(new LinkedList<Invocation>(invocations), new RemoveToString());\n    }",
        "begin_line": 28,
        "end_line": 30,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/RegisteredInvocations.java",
        "class_name": "org.mockito.internal.verification.RegisteredInvocations",
        "signature": "org.mockito.internal.verification.RegisteredInvocations.RemoveToString.isOut(org.mockito.internal.invocation.Invocation)",
        "snippet": "        public boolean isOut(Invocation invocation) {\n            return Invocation.isToString(invocation);\n        }",
        "begin_line": 33,
        "end_line": 35,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/AtLeast.java",
        "class_name": "org.mockito.internal.verification.AtLeast",
        "signature": "org.mockito.internal.verification.AtLeast.AtLeast(int)",
        "snippet": "    public AtLeast(int wantedNumberOfInvocations) {\n        if (wantedNumberOfInvocations <= 0) {\n            throw new MockitoException(\"Negative value or zero are not allowed here\");\n        }\n        this.wantedCount = wantedNumberOfInvocations;\n    }",
        "begin_line": 24,
        "end_line": 29,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/AtLeast.java",
        "class_name": "org.mockito.internal.verification.AtLeast",
        "signature": "org.mockito.internal.verification.AtLeast.verify(org.mockito.internal.verification.api.VerificationData)",
        "snippet": "    public void verify(VerificationData data) {\n        MissingInvocationChecker missingInvocation = new MissingInvocationChecker();\n        AtLeastXNumberOfInvocationsChecker numberOfInvocations = new AtLeastXNumberOfInvocationsChecker();\n        \n        if (wantedCount == 1) {\n            missingInvocation.check(data.getAllInvocations(), data.getWanted());\n        }\n        numberOfInvocations.check(data.getAllInvocations(), data.getWanted(), wantedCount);\n    }",
        "begin_line": 31,
        "end_line": 39,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/AtLeast.java",
        "class_name": "org.mockito.internal.verification.AtLeast",
        "signature": "org.mockito.internal.verification.AtLeast.verifyInOrder(org.mockito.internal.verification.api.VerificationData)",
        "snippet": "    public void verifyInOrder(VerificationData data) {\n        List<Invocation> allInvocations = data.getAllInvocations();\n        InvocationMatcher wanted = data.getWanted();\n        \n        MissingInvocationInOrderChecker missingInvocation = new MissingInvocationInOrderChecker();\n        AtLeastXNumberOfInvocationsInOrderChecker numberOfCalls = new AtLeastXNumberOfInvocationsInOrderChecker();\n        \n        if (wantedCount == 1) {\n            missingInvocation.check(allInvocations, wanted, this);\n        }\n        \n        numberOfCalls.check(allInvocations, wanted, wantedCount);\n    }",
        "begin_line": 41,
        "end_line": 53,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/AtLeast.java",
        "class_name": "org.mockito.internal.verification.AtLeast",
        "signature": "org.mockito.internal.verification.AtLeast.toString()",
        "snippet": "    @Override\n    public String toString() {\n        return \"Wanted invocations count: at least \" + wantedCount;\n    }",
        "begin_line": 55,
        "end_line": 58,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/NoMoreInteractions.java",
        "class_name": "org.mockito.internal.verification.NoMoreInteractions",
        "signature": "org.mockito.internal.verification.NoMoreInteractions.verify(org.mockito.internal.verification.api.VerificationData)",
        "snippet": "    public void verify(VerificationData data) {\n        Invocation unverified = new InvocationsFinder().findFirstUnverified(data.getAllInvocations());\n        \n        if (unverified != null) {\n            new Reporter().noMoreInteractionsWanted(unverified);\n        }\n    }",
        "begin_line": 15,
        "end_line": 21,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/Times.java",
        "class_name": "org.mockito.internal.verification.Times",
        "signature": "org.mockito.internal.verification.Times.Times(int)",
        "snippet": "    public Times(int wantedNumberOfInvocations) {\n        if (wantedNumberOfInvocations < 0) {\n            throw new MockitoException(\"Negative value is not allowed here\");\n        }\n        this.wantedCount = wantedNumberOfInvocations;\n    }",
        "begin_line": 24,
        "end_line": 29,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/Times.java",
        "class_name": "org.mockito.internal.verification.Times",
        "signature": "org.mockito.internal.verification.Times.verify(org.mockito.internal.verification.api.VerificationData)",
        "snippet": "    public void verify(VerificationData data) {\n        if (wantedCount > 0) {\n            MissingInvocationChecker missingInvocation = new MissingInvocationChecker();\n            missingInvocation.check(data.getAllInvocations(), data.getWanted());\n        }\n        NumberOfInvocationsChecker numberOfInvocations = new NumberOfInvocationsChecker();\n        numberOfInvocations.check(data.getAllInvocations(), data.getWanted(), wantedCount);\n    }",
        "begin_line": 31,
        "end_line": 38,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/Times.java",
        "class_name": "org.mockito.internal.verification.Times",
        "signature": "org.mockito.internal.verification.Times.verifyInOrder(org.mockito.internal.verification.api.VerificationData)",
        "snippet": "    public void verifyInOrder(VerificationData data) {\n        List<Invocation> allInvocations = data.getAllInvocations();\n        InvocationMatcher wanted = data.getWanted();\n        \n        if (wantedCount > 0) {\n            MissingInvocationInOrderChecker missingInvocation = new MissingInvocationInOrderChecker();\n            missingInvocation.check(allInvocations, wanted, this);\n        }\n        NumberOfInvocationsInOrderChecker numberOfCalls = new NumberOfInvocationsInOrderChecker();\n        numberOfCalls.check(allInvocations, wanted, wantedCount);\n    }",
        "begin_line": 40,
        "end_line": 50,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/Times.java",
        "class_name": "org.mockito.internal.verification.Times",
        "signature": "org.mockito.internal.verification.Times.toString()",
        "snippet": "    @Override\n    public String toString() {\n        return \"Wanted invocations count: \" + wantedCount;\n    }",
        "begin_line": 52,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/api/VerificationMode.java",
        "class_name": "org.mockito.internal.verification.api.VerificationMode",
        "signature": "org.mockito.internal.verification.api.VerificationMode.verify(org.mockito.internal.verification.api.VerificationData)",
        "snippet": "    void verify(VerificationData data);",
        "begin_line": 32,
        "end_line": 32,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/api/VerificationInOrderMode.java",
        "class_name": "org.mockito.internal.verification.api.VerificationInOrderMode",
        "signature": "org.mockito.internal.verification.api.VerificationInOrderMode.verifyInOrder(org.mockito.internal.verification.api.VerificationData)",
        "snippet": "    void verifyInOrder(VerificationData data);",
        "begin_line": 9,
        "end_line": 9,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/api/VerificationData.java",
        "class_name": "org.mockito.internal.verification.api.VerificationData",
        "signature": "org.mockito.internal.verification.api.VerificationData.getAllInvocations()",
        "snippet": "    List<Invocation> getAllInvocations();",
        "begin_line": 14,
        "end_line": 14,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/api/VerificationData.java",
        "class_name": "org.mockito.internal.verification.api.VerificationData",
        "signature": "org.mockito.internal.verification.api.VerificationData.getWanted()",
        "snippet": "    InvocationMatcher getWanted();   ",
        "begin_line": 16,
        "end_line": 16,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java",
        "class_name": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingTool",
        "signature": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingTool.getSuspiciouslyNotMatchingArgsIndexes(java.util.List<org.hamcrest.Matcher>, java.lang.Object[])",
        "snippet": "    public Integer[] getSuspiciouslyNotMatchingArgsIndexes(List<Matcher> matchers, Object[] arguments) {\n        if (matchers.size() != arguments.length) {\n            return new Integer[0];\n        }\n        \n        List<Integer> suspicious = new LinkedList<Integer>();\n        int i = 0;\n        for (Matcher m : matchers) {\n            if (m instanceof ContainsExtraTypeInformation \n                    && !safelyMatches(m, arguments[i]) \n                    && toStringEquals(m, arguments[i])\n                    && !((ContainsExtraTypeInformation) m).typeMatches(arguments[i])) {\n                suspicious.add(i);\n            }\n            i++;\n        }\n        return suspicious.toArray(new Integer[0]);\n    }",
        "begin_line": 20,
        "end_line": 37,
        "comment": "\r\n     * Suspiciously not matching arguments are those that don't much, the toString() representation is the same but types are different.\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java",
        "class_name": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingTool",
        "signature": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingTool.safelyMatches(org.hamcrest.Matcher, java.lang.Object)",
        "snippet": "    private boolean safelyMatches(Matcher m, Object arg) {\n        try {\n            return m.matches(arg);\n        } catch (Throwable t) {\n            return false;\n        }\n    }",
        "begin_line": 39,
        "end_line": 45,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java",
        "class_name": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingTool",
        "signature": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingTool.toStringEquals(org.hamcrest.Matcher, java.lang.Object)",
        "snippet": "    private boolean toStringEquals(Matcher m, Object arg) {\n        return StringDescription.toString(m).equals(arg.toString());\n    }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/checkers/MissingInvocationInOrderChecker.java",
        "class_name": "org.mockito.internal.verification.checkers.MissingInvocationInOrderChecker",
        "signature": "org.mockito.internal.verification.checkers.MissingInvocationInOrderChecker.MissingInvocationInOrderChecker()",
        "snippet": "    public MissingInvocationInOrderChecker() {\n        this(new InvocationsFinder(), new Reporter());\n    }",
        "begin_line": 20,
        "end_line": 22,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/checkers/MissingInvocationInOrderChecker.java",
        "class_name": "org.mockito.internal.verification.checkers.MissingInvocationInOrderChecker",
        "signature": "org.mockito.internal.verification.checkers.MissingInvocationInOrderChecker.MissingInvocationInOrderChecker(org.mockito.internal.invocation.InvocationsFinder, org.mockito.exceptions.Reporter)",
        "snippet": "    MissingInvocationInOrderChecker(InvocationsFinder finder, Reporter reporter) {\n        this.finder = finder;\n        this.reporter = reporter;\n    }",
        "begin_line": 24,
        "end_line": 27,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/checkers/MissingInvocationInOrderChecker.java",
        "class_name": "org.mockito.internal.verification.checkers.MissingInvocationInOrderChecker",
        "signature": "org.mockito.internal.verification.checkers.MissingInvocationInOrderChecker.check(java.util.List<org.mockito.internal.invocation.Invocation>, org.mockito.internal.invocation.InvocationMatcher, org.mockito.internal.verification.api.VerificationMode)",
        "snippet": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, VerificationMode mode) {\n        List<Invocation> chunk = finder.findAllMatchingUnverifiedChunks(invocations, wanted);\n        \n        if (!chunk.isEmpty()) {\n            return;\n        }\n        \n        Invocation previousInOrder = finder.findPreviousVerifiedInOrder(invocations);\n        if (previousInOrder == null) {\n            reporter.wantedButNotInvoked(wanted);\n        } else {\n            reporter.wantedButNotInvokedInOrder(wanted, previousInOrder);\n        }\n    }",
        "begin_line": 29,
        "end_line": 42,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/checkers/AtLeastDiscrepancy.java",
        "class_name": "org.mockito.internal.verification.checkers.AtLeastDiscrepancy",
        "signature": "org.mockito.internal.verification.checkers.AtLeastDiscrepancy.AtLeastDiscrepancy(int, int)",
        "snippet": "    public AtLeastDiscrepancy(int wantedCount, int actualCount) {\n        super(wantedCount, actualCount);\n    }",
        "begin_line": 11,
        "end_line": 13,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/checkers/AtLeastDiscrepancy.java",
        "class_name": "org.mockito.internal.verification.checkers.AtLeastDiscrepancy",
        "signature": "org.mockito.internal.verification.checkers.AtLeastDiscrepancy.getPluralizedWantedCount()",
        "snippet": "    @Override\n    public String getPluralizedWantedCount() {\n        return \"*at least* \" + super.getPluralizedWantedCount();\n    }",
        "begin_line": 15,
        "end_line": 18,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsInOrderChecker.java",
        "class_name": "org.mockito.internal.verification.checkers.AtLeastXNumberOfInvocationsInOrderChecker",
        "signature": "org.mockito.internal.verification.checkers.AtLeastXNumberOfInvocationsInOrderChecker.check(java.util.List<org.mockito.internal.invocation.Invocation>, org.mockito.internal.invocation.InvocationMatcher, int)",
        "snippet": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> chunk = finder.findAllMatchingUnverifiedChunks(invocations, wanted);\n        \n        int actualCount = chunk.size();\n        \n        if (wantedCount > actualCount) {\n            Location lastLocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);\n        }\n        \n        for (Invocation i : chunk) {\n            i.markVerifiedInOrder();\n        }\n    }",
        "begin_line": 20,
        "end_line": 33,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsChecker.java",
        "class_name": "org.mockito.internal.verification.checkers.AtLeastXNumberOfInvocationsChecker",
        "signature": "org.mockito.internal.verification.checkers.AtLeastXNumberOfInvocationsChecker.check(java.util.List<org.mockito.internal.invocation.Invocation>, org.mockito.internal.invocation.InvocationMatcher, int)",
        "snippet": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastLocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n        }\n        \n        for (Invocation i : actualInvocations) {\n            i.markVerified();\n        }\n    }",
        "begin_line": 20,
        "end_line": 32,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderChecker.java",
        "class_name": "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderChecker",
        "signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderChecker.NumberOfInvocationsInOrderChecker()",
        "snippet": "    public NumberOfInvocationsInOrderChecker() {\n        this(new InvocationsFinder(), new Reporter());\n    }",
        "begin_line": 21,
        "end_line": 23,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderChecker.java",
        "class_name": "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderChecker",
        "signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderChecker.NumberOfInvocationsInOrderChecker(org.mockito.internal.invocation.InvocationsFinder, org.mockito.exceptions.Reporter)",
        "snippet": "    NumberOfInvocationsInOrderChecker(InvocationsFinder finder, Reporter reporter) {\n        this.finder = finder;\n        this.reporter = reporter;\n    }",
        "begin_line": 25,
        "end_line": 28,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderChecker.java",
        "class_name": "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderChecker",
        "signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderChecker.check(java.util.List<org.mockito.internal.invocation.Invocation>, org.mockito.internal.invocation.InvocationMatcher, int)",
        "snippet": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount);\n        \n        int actualCount = chunk.size();\n        \n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        for (Invocation i : chunk) {\n            i.markVerifiedInOrder();\n        }\n    }",
        "begin_line": 30,
        "end_line": 46,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/checkers/MissingInvocationChecker.java",
        "class_name": "org.mockito.internal.verification.checkers.MissingInvocationChecker",
        "signature": "org.mockito.internal.verification.checkers.MissingInvocationChecker.MissingInvocationChecker()",
        "snippet": "    public MissingInvocationChecker() {\n        this(new InvocationsFinder(), new Reporter());\n    }",
        "begin_line": 22,
        "end_line": 24,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/checkers/MissingInvocationChecker.java",
        "class_name": "org.mockito.internal.verification.checkers.MissingInvocationChecker",
        "signature": "org.mockito.internal.verification.checkers.MissingInvocationChecker.MissingInvocationChecker(org.mockito.internal.invocation.InvocationsFinder, org.mockito.exceptions.Reporter)",
        "snippet": "    MissingInvocationChecker(InvocationsFinder finder, Reporter reporter) {\n        this.finder = finder;\n        this.reporter = reporter;\n    }",
        "begin_line": 26,
        "end_line": 29,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/checkers/MissingInvocationChecker.java",
        "class_name": "org.mockito.internal.verification.checkers.MissingInvocationChecker",
        "signature": "org.mockito.internal.verification.checkers.MissingInvocationChecker.check(java.util.List<org.mockito.internal.invocation.Invocation>, org.mockito.internal.invocation.InvocationMatcher)",
        "snippet": "    public void check(List<Invocation> invocations, InvocationMatcher wanted) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        if (actualInvocations.isEmpty()) {\n            Invocation similar = finder.findSimilarInvocation(invocations, wanted);\n            if (similar != null) {\n                ArgumentMatchingTool argumentMatchingTool = new ArgumentMatchingTool();\n                Integer[] indexesOfSuspiciousArgs = argumentMatchingTool.getSuspiciouslyNotMatchingArgsIndexes(wanted.getMatchers(), similar.getArguments());\n                SmartPrinter smartPrinter = new SmartPrinter(wanted, similar, indexesOfSuspiciousArgs);\n                reporter.argumentsAreDifferent(smartPrinter.getWanted(), smartPrinter.getActual(), similar.getLocation());\n            } else {\n                reporter.wantedButNotInvoked(wanted, invocations);\n            }\n        }\n    }",
        "begin_line": 31,
        "end_line": 45,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/checkers/NumberOfInvocationsChecker.java",
        "class_name": "org.mockito.internal.verification.checkers.NumberOfInvocationsChecker",
        "signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsChecker.NumberOfInvocationsChecker()",
        "snippet": "    public NumberOfInvocationsChecker() {\n        this(new Reporter(), new InvocationsFinder());\n    }",
        "begin_line": 21,
        "end_line": 23,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/checkers/NumberOfInvocationsChecker.java",
        "class_name": "org.mockito.internal.verification.checkers.NumberOfInvocationsChecker",
        "signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsChecker.NumberOfInvocationsChecker(org.mockito.exceptions.Reporter, org.mockito.internal.invocation.InvocationsFinder)",
        "snippet": "    NumberOfInvocationsChecker(Reporter reporter, InvocationsFinder finder) {\n        this.reporter = reporter;\n        this.finder = finder;\n    }",
        "begin_line": 25,
        "end_line": 28,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/verification/checkers/NumberOfInvocationsChecker.java",
        "class_name": "org.mockito.internal.verification.checkers.NumberOfInvocationsChecker",
        "signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsChecker.check(java.util.List<org.mockito.internal.invocation.Invocation>, org.mockito.internal.invocation.InvocationMatcher, int)",
        "snippet": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == 0 && actualCount > 0) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        for (Invocation i : actualInvocations) {\n            i.markVerified();\n        }\n    }",
        "begin_line": 30,
        "end_line": 48,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/exceptions/base/StackTraceFilter.java",
        "class_name": "org.mockito.internal.exceptions.base.StackTraceFilter",
        "signature": "org.mockito.internal.exceptions.base.StackTraceFilter.isBad(java.lang.StackTraceElement)",
        "snippet": "    public boolean isBad(StackTraceElement e) {\n        boolean fromMockObject = e.getClassName().contains(\"$$EnhancerByMockitoWithCGLIB$$\");\n        boolean fromOrgMockito = e.getClassName().startsWith(\"org.mockito.\");\n        boolean isRunner = e.getClassName().startsWith(\"org.mockito.runners.\");\n        boolean isInternalRunner = e.getClassName().startsWith(\"org.mockito.internal.runners.\");\n        return (fromMockObject || fromOrgMockito) && !isRunner && !isInternalRunner;\n    }",
        "begin_line": 14,
        "end_line": 20,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/exceptions/base/StackTraceFilter.java",
        "class_name": "org.mockito.internal.exceptions.base.StackTraceFilter",
        "signature": "org.mockito.internal.exceptions.base.StackTraceFilter.filter(java.lang.StackTraceElement[], boolean)",
        "snippet": "    public StackTraceElement[] filter(StackTraceElement[] target, boolean keepTop) {\n        //TODO: after 1.8 profile\n        List<StackTraceElement> unfilteredStackTrace = Arrays.asList(target);\n        \n        int lastBad = -1;\n        int firstBad = -1;\n        for (int i = 0; i < unfilteredStackTrace.size(); i++) {\n            if (!this.isBad(unfilteredStackTrace.get(i))) {\n                continue;\n            }\n            lastBad = i;\n            if (firstBad == -1) {\n                firstBad = i;\n            }\n        }\n        \n        List<StackTraceElement> top;\n        if (keepTop && firstBad != -1) {\n            top = unfilteredStackTrace.subList(0, firstBad);\n        } else {\n            top = new LinkedList<StackTraceElement>();\n        }\n        \n        List<StackTraceElement> bottom = unfilteredStackTrace.subList(lastBad + 1, unfilteredStackTrace.size());\n        List<StackTraceElement> filtered = new ArrayList<StackTraceElement>(top);\n        filtered.addAll(bottom);\n        return filtered.toArray(new StackTraceElement[]{});\n    }",
        "begin_line": 27,
        "end_line": 54,
        "comment": "\n     * Example how the filter works (+/- means good/bad):\n     * [a+, b+, c-, d+, e+, f-, g+] -> [a+, b+, g+]\n     * Basically removes all bad from the middle. If any good are in the middle of bad those are also removed. \n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/exceptions/base/ConditionalStackTraceFilter.java",
        "class_name": "org.mockito.internal.exceptions.base.ConditionalStackTraceFilter",
        "signature": "org.mockito.internal.exceptions.base.ConditionalStackTraceFilter.filter(java.lang.Throwable)",
        "snippet": "    public void filter(Throwable throwable) {\n        if (!config.cleansStackTrace()) {\n            return;\n        }\n        StackTraceElement[] filtered = filter.filter(throwable.getStackTrace(), true);\n        throwable.setStackTrace(filtered);\n    }",
        "begin_line": 15,
        "end_line": 21,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/util/Decamelizer.java",
        "class_name": "org.mockito.internal.util.Decamelizer",
        "signature": "org.mockito.internal.util.Decamelizer.decamelizeMatcher(java.lang.String)",
        "snippet": "    public static String decamelizeMatcher(String className) {\n        if (className.length() == 0) {\n            return \"<custom argument matcher>\";\n        }\n        \n        String decamelized = decamelizeClassName(className);\n        \n        if (decamelized.length() == 0) {\n            return \"<\" + className + \">\";\n        }\n        \n        return \"<\" + decamelized + \">\";\n    }",
        "begin_line": 14,
        "end_line": 26,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/util/Decamelizer.java",
        "class_name": "org.mockito.internal.util.Decamelizer",
        "signature": "org.mockito.internal.util.Decamelizer.decamelizeClassName(java.lang.String)",
        "snippet": "    private static String decamelizeClassName(String className) {\n        Matcher match = CAPS.matcher(className);\n        StringBuilder deCameled = new StringBuilder();\n        while(match.find()) {\n            if (deCameled.length() == 0) {\n                deCameled.append(match.group());\n            } else {\n                deCameled.append(\" \");\n                deCameled.append(match.group().toLowerCase());\n            }\n        }\n        return deCameled.toString();\n    }",
        "begin_line": 28,
        "end_line": 40,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/util/StringJoiner.java",
        "class_name": "org.mockito.internal.util.StringJoiner",
        "signature": "org.mockito.internal.util.StringJoiner.join(java.lang.Object...)",
        "snippet": "    public static String join(Object ... linesToBreak) {\n        StringBuilder out = new StringBuilder(\"\\n\");\n        for (Object line : linesToBreak) {\n            out.append(line.toString()).append(\"\\n\");\n        }\n        int lastBreak = out.lastIndexOf(\"\\n\");\n        return out.replace(lastBreak, lastBreak+1, \"\").toString();\n    }",
        "begin_line": 9,
        "end_line": 16,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/util/MockName.java",
        "class_name": "org.mockito.internal.util.MockName",
        "signature": "org.mockito.internal.util.MockName.MockName(java.lang.String, java.lang.Class)",
        "snippet": "    @SuppressWarnings(\"unchecked\")\n    public MockName(String mockName, Class classToMock) {\n        if (mockName == null) {\n            this.mockName = toInstanceName(classToMock);\n            this.surrogate = true;\n        } else {\n            this.mockName = mockName;\n        }\n    }",
        "begin_line": 12,
        "end_line": 20,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/util/MockName.java",
        "class_name": "org.mockito.internal.util.MockName",
        "signature": "org.mockito.internal.util.MockName.toInstanceName(java.lang.Class<?>)",
        "snippet": "    private static String toInstanceName(Class<?> clazz) {\n        String className = clazz.getSimpleName();\n        //lower case first letter\n        return className.substring(0, 1).toLowerCase() + className.substring(1);\n    }",
        "begin_line": 22,
        "end_line": 26,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/util/MockName.java",
        "class_name": "org.mockito.internal.util.MockName",
        "signature": "org.mockito.internal.util.MockName.isSurrogate()",
        "snippet": "    public boolean isSurrogate() {\n        return surrogate;\n    }",
        "begin_line": 28,
        "end_line": 30,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/util/MockName.java",
        "class_name": "org.mockito.internal.util.MockName",
        "signature": "org.mockito.internal.util.MockName.toString()",
        "snippet": "    @Override\n    public String toString() {\n        return mockName;\n    }",
        "begin_line": 32,
        "end_line": 35,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/util/Primitives.java",
        "class_name": "org.mockito.internal.util.Primitives",
        "signature": "org.mockito.internal.util.Primitives.isPrimitiveWrapper(java.lang.Class<?>)",
        "snippet": "    public static boolean isPrimitiveWrapper(Class<?> type) {\n        return wrapperReturnValues.containsKey(type);\n    }",
        "begin_line": 12,
        "end_line": 14,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/util/Primitives.java",
        "class_name": "org.mockito.internal.util.Primitives",
        "signature": "org.mockito.internal.util.Primitives.primitiveWrapperOf(java.lang.Class<?>)",
        "snippet": "    public static Object primitiveWrapperOf(Class<?> type) {\n        return wrapperReturnValues.get(type);\n    }",
        "begin_line": 16,
        "end_line": 18,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/util/Primitives.java",
        "class_name": "org.mockito.internal.util.Primitives",
        "signature": "org.mockito.internal.util.Primitives.primitiveTypeOf(java.lang.Class<?>)",
        "snippet": "    public static Class<?> primitiveTypeOf(Class<?> clazz) {\n        return primitiveTypes.get(clazz);\n    }",
        "begin_line": 20,
        "end_line": 22,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/util/MockitoLogger.java",
        "class_name": "org.mockito.internal.util.MockitoLogger",
        "signature": "org.mockito.internal.util.MockitoLogger.log(java.lang.Object)",
        "snippet": "    void log(Object what);",
        "begin_line": 9,
        "end_line": 9,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/util/CreationValidator.java",
        "class_name": "org.mockito.internal.util.CreationValidator",
        "signature": "org.mockito.internal.util.CreationValidator.validateType(java.lang.Class)",
        "snippet": "    public void validateType(Class classToMock) {\n        if (!ClassImposterizer.INSTANCE.canImposterise(classToMock)) {\n            new Reporter().cannotMockFinalClass(classToMock);\n        }\n    }",
        "begin_line": 13,
        "end_line": 17,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/util/CreationValidator.java",
        "class_name": "org.mockito.internal.util.CreationValidator",
        "signature": "org.mockito.internal.util.CreationValidator.validateExtraInterfaces(java.lang.Class, java.lang.Class...)",
        "snippet": "    public void validateExtraInterfaces(Class classToMock, Class ... extraInterfaces) {\n        if (extraInterfaces == null) {\n            return;\n        }\n        \n        for (Class i : extraInterfaces) {\n            if (classToMock == i) {\n                new Reporter().extraInterfacesCannotContainMockedType(classToMock);\n            }\n        }\n    }",
        "begin_line": 19,
        "end_line": 29,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/util/ListUtil.java",
        "class_name": "org.mockito.internal.util.ListUtil",
        "signature": "org.mockito.internal.util.ListUtil.filter(java.util.Collection<T>, org.mockito.internal.util.ListUtil.Filter<T>)",
        "snippet": "    public static <T> LinkedList<T> filter(Collection<T> collection, Filter<T> filter) {\n        LinkedList<T> filtered = new LinkedList<T>();\n        for (T t : collection) {\n            if (!filter.isOut(t)) {\n                filtered.add(t);\n            }\n        }\n        return filtered;\n    }",
        "begin_line": 12,
        "end_line": 20,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/util/ListUtil.java",
        "class_name": "org.mockito.internal.util.ListUtil",
        "signature": "org.mockito.internal.util.ListUtil.Filter.isOut(T)",
        "snippet": "        boolean isOut(T object);",
        "begin_line": 23,
        "end_line": 23,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/util/MockitoLoggerImpl.java",
        "class_name": "org.mockito.internal.util.MockitoLoggerImpl",
        "signature": "org.mockito.internal.util.MockitoLoggerImpl.log(java.lang.Object)",
        "snippet": "    public void log(Object what) {\n        System.out.println(what.toString());\n    }",
        "begin_line": 12,
        "end_line": 14,
        "comment": " (non-Javadoc)\r\n     * @see org.mockito.internal.util.Logger#print(java.lang.Object)\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/util/MockUtil.java",
        "class_name": "org.mockito.internal.util.MockUtil",
        "signature": "org.mockito.internal.util.MockUtil.MockUtil(org.mockito.internal.util.CreationValidator)",
        "snippet": "    public MockUtil(CreationValidator creationValidator) {\n        this.creationValidator = creationValidator;\n    }",
        "begin_line": 23,
        "end_line": 25,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/util/MockUtil.java",
        "class_name": "org.mockito.internal.util.MockUtil",
        "signature": "org.mockito.internal.util.MockUtil.MockUtil()",
        "snippet": "    public MockUtil() {\n        this(new CreationValidator());\n    }",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/util/MockUtil.java",
        "class_name": "org.mockito.internal.util.MockUtil",
        "signature": "org.mockito.internal.util.MockUtil.createMock(java.lang.Class<T>, org.mockito.internal.progress.MockingProgress, org.mockito.internal.creation.MockSettingsImpl)",
        "snippet": "    public <T> T createMock(Class<T> classToMock, MockingProgress progress, MockSettingsImpl settings) {\n        creationValidator.validateType(classToMock);\n        creationValidator.validateExtraInterfaces(classToMock, settings.getExtraInterfaces());\n        \n        MockName mockName = new MockName(settings.getMockName(), classToMock);\n        MockHandler<T> mockHandler = new MockHandler<T>(mockName, progress, new MatchersBinder(), settings);\n        MethodInterceptorFilter<MockHandler<T>> filter = new MethodInterceptorFilter<MockHandler<T>>(classToMock, mockHandler);\n        Class<?>[] interfaces = settings.getExtraInterfaces();\n        Class<?>[] ancillaryTypes = interfaces == null ? new Class<?>[0] : interfaces;\n        Object spiedInstance = settings.getSpiedInstance();\n        \n        T mock = ClassImposterizer.INSTANCE.imposterise(filter, classToMock, ancillaryTypes);\n        \n        if (spiedInstance != null) {\n            new LenientCopyTool().copyToMock(spiedInstance, mock);\n        }\n        \n        return mock;\n    }",
        "begin_line": 31,
        "end_line": 49,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/util/MockUtil.java",
        "class_name": "org.mockito.internal.util.MockUtil",
        "signature": "org.mockito.internal.util.MockUtil.resetMock(T, org.mockito.internal.progress.MockingProgress)",
        "snippet": "    public <T> void resetMock(T mock, MockingProgress progress) {\n        MockHandler<T> oldMockHandler = (MockHandler<T>) getMockHandler(mock);\n        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MethodInterceptorFilter<MockHandler<T>> newFilter = new MethodInterceptorFilter<MockHandler<T>>(Object.class, newMockHandler);\n        ((Factory) mock).setCallback(0, newFilter);\n    }",
        "begin_line": 51,
        "end_line": 56,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/util/MockUtil.java",
        "class_name": "org.mockito.internal.util.MockUtil",
        "signature": "org.mockito.internal.util.MockUtil.getMockHandler(T)",
        "snippet": "    public <T> MockHandler<T> getMockHandler(T mock) {\n        if (mock == null) {\n            throw new NotAMockException(\"Argument should be a mock, but is null!\");\n        }\n\n        if (isMockitoMock(mock)) {\n            return getInterceptor(mock).getDelegate();\n        } else {\n            throw new NotAMockException(\"Argument should be a mock, but is: \" + mock.getClass());\n        }\n    }",
        "begin_line": 58,
        "end_line": 68,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/util/MockUtil.java",
        "class_name": "org.mockito.internal.util.MockUtil",
        "signature": "org.mockito.internal.util.MockUtil.isMockitoMock(T)",
        "snippet": "    private <T> boolean isMockitoMock(T mock) {\n        return Enhancer.isEnhanced(mock.getClass()) && getInterceptor(mock) != null;\n    }",
        "begin_line": 70,
        "end_line": 72,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/util/MockUtil.java",
        "class_name": "org.mockito.internal.util.MockUtil",
        "signature": "org.mockito.internal.util.MockUtil.isMock(java.lang.Object)",
        "snippet": "    public boolean isMock(Object mock) {\n        return mock != null && isMockitoMock(mock);\n    }",
        "begin_line": 74,
        "end_line": 76,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/util/MockUtil.java",
        "class_name": "org.mockito.internal.util.MockUtil",
        "signature": "org.mockito.internal.util.MockUtil.getInterceptor(T)",
        "snippet": "    @SuppressWarnings(\"unchecked\")\n    private <T> MethodInterceptorFilter<MockHandler<T>> getInterceptor(T mock) {\n        Factory factory = (Factory) mock;\n        Callback callback = factory.getCallback(0);\n        if (callback instanceof MethodInterceptorFilter) {\n            return (MethodInterceptorFilter<MockHandler<T>>) callback;\n        }\n        return null;\n    }",
        "begin_line": 78,
        "end_line": 86,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/util/MockUtil.java",
        "class_name": "org.mockito.internal.util.MockUtil",
        "signature": "org.mockito.internal.util.MockUtil.getMockName(java.lang.Object)",
        "snippet": "    public MockName getMockName(Object mock) {\n        return getMockHandler(mock).getMockName();\n    }",
        "begin_line": 88,
        "end_line": 90,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/util/copy/AccessibilityChanger.java",
        "class_name": "org.mockito.internal.util.copy.AccessibilityChanger",
        "signature": "org.mockito.internal.util.copy.AccessibilityChanger.safelyDisableAccess(java.lang.reflect.Field)",
        "snippet": "    public void safelyDisableAccess(Field field) {\n        assert wasAccessible != null;\n        try {\n            field.setAccessible(wasAccessible);\n        } catch (Throwable t) {\n            //ignore\n        }\n    }",
        "begin_line": 16,
        "end_line": 23,
        "comment": "\r\n     * safely disables access\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/util/copy/AccessibilityChanger.java",
        "class_name": "org.mockito.internal.util.copy.AccessibilityChanger",
        "signature": "org.mockito.internal.util.copy.AccessibilityChanger.enableAccess(java.lang.reflect.Field)",
        "snippet": "    public void enableAccess(Field field) {\n        wasAccessible = field.isAccessible();\n        field.setAccessible(true);\n    }",
        "begin_line": 28,
        "end_line": 31,
        "comment": "\r\n     * changes the field accessibility and returns true if accessibility was changed\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/util/copy/LenientCopyTool.java",
        "class_name": "org.mockito.internal.util.copy.LenientCopyTool",
        "signature": "org.mockito.internal.util.copy.LenientCopyTool.copyToMock(T, T)",
        "snippet": "    public <T> void copyToMock(T from, T mock) {\n        Class clazz = from.getClass();\n        Class mockSuperClass = mock.getClass().getSuperclass();\n        assert mockSuperClass == clazz \n            : \"Classes must have the same type: class of the object from: \" + clazz + \", mock super class: \" + mockSuperClass;\n\n        while (clazz != Object.class) {\n            copyValues(from, mock, clazz);\n            clazz = clazz.getSuperclass();\n        }\n    }",
        "begin_line": 15,
        "end_line": 25,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/util/copy/LenientCopyTool.java",
        "class_name": "org.mockito.internal.util.copy.LenientCopyTool",
        "signature": "org.mockito.internal.util.copy.LenientCopyTool.copyValues(T, T, java.lang.Class)",
        "snippet": "    private <T> void copyValues(T from, T mock, Class classFrom) {\n        Field[] fields = classFrom.getDeclaredFields();\n\n        for (int i = 0; i < fields.length; i++) {\n            // ignore static fields\n            Field field = fields[i];\n            if (Modifier.isStatic(field.getModifiers())) {\n                continue;\n            }\n            AccessibilityChanger accessibilityChanger = new AccessibilityChanger();\n            try {\n                accessibilityChanger.enableAccess(field);\n                fieldCopier.copyValue(from, mock, field);\n            } catch (Throwable t) {\n                //Ignore - be lenient - if some field cannot be copied then let's be it\n            } finally {\n                accessibilityChanger.safelyDisableAccess(field);\n            }\n        }\n    }",
        "begin_line": 27,
        "end_line": 46,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/util/copy/FieldCopier.java",
        "class_name": "org.mockito.internal.util.copy.FieldCopier",
        "signature": "org.mockito.internal.util.copy.FieldCopier.copyValue(T, T, java.lang.reflect.Field)",
        "snippet": "    public <T> void copyValue(T from, T to, Field field) throws IllegalAccessException {\n        Object value = field.get(from);\n        field.set(to, value);\n    }",
        "begin_line": 11,
        "end_line": 14,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/MockingProgressImpl.java",
        "class_name": "org.mockito.internal.progress.MockingProgressImpl",
        "signature": "org.mockito.internal.progress.MockingProgressImpl.reportOngoingStubbing(org.mockito.internal.progress.IOngoingStubbing)",
        "snippet": "    public void reportOngoingStubbing(IOngoingStubbing iOngoingStubbing) {\n        this.iOngoingStubbing = iOngoingStubbing;\n    }",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/MockingProgressImpl.java",
        "class_name": "org.mockito.internal.progress.MockingProgressImpl",
        "signature": "org.mockito.internal.progress.MockingProgressImpl.pullOngoingStubbing()",
        "snippet": "    public IOngoingStubbing pullOngoingStubbing() {\n        IOngoingStubbing temp = iOngoingStubbing;\n        iOngoingStubbing = null;\n        return temp;\n    }",
        "begin_line": 31,
        "end_line": 35,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/MockingProgressImpl.java",
        "class_name": "org.mockito.internal.progress.MockingProgressImpl",
        "signature": "org.mockito.internal.progress.MockingProgressImpl.verificationStarted(org.mockito.internal.verification.api.VerificationMode)",
        "snippet": "    public void verificationStarted(VerificationMode verify) {\n        validateState();\n        resetOngoingStubbing();\n        verificationMode = new Localized(verify);\n    }",
        "begin_line": 37,
        "end_line": 41,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/MockingProgressImpl.java",
        "class_name": "org.mockito.internal.progress.MockingProgressImpl",
        "signature": "org.mockito.internal.progress.MockingProgressImpl.resetOngoingStubbing()",
        "snippet": "    public void resetOngoingStubbing() {\n        iOngoingStubbing = null;\n    }",
        "begin_line": 46,
        "end_line": 48,
        "comment": " (non-Javadoc)\n     * @see org.mockito.internal.progress.MockingProgress#resetOngoingStubbing()\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/MockingProgressImpl.java",
        "class_name": "org.mockito.internal.progress.MockingProgressImpl",
        "signature": "org.mockito.internal.progress.MockingProgressImpl.pullVerificationMode()",
        "snippet": "    public VerificationMode pullVerificationMode() {\n        if (verificationMode == null) {\n            return null;\n        }\n        \n        VerificationMode temp = verificationMode.getObject();\n        verificationMode = null;\n        return temp;\n    }",
        "begin_line": 50,
        "end_line": 58,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/MockingProgressImpl.java",
        "class_name": "org.mockito.internal.progress.MockingProgressImpl",
        "signature": "org.mockito.internal.progress.MockingProgressImpl.stubbingStarted()",
        "snippet": "    public void stubbingStarted() {\n        validateState();\n        stubbingInProgress = new Location();\n    }",
        "begin_line": 60,
        "end_line": 63,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/MockingProgressImpl.java",
        "class_name": "org.mockito.internal.progress.MockingProgressImpl",
        "signature": "org.mockito.internal.progress.MockingProgressImpl.validateState()",
        "snippet": "    public void validateState() {\n        //State is cool when GlobalConfiguration is already loaded\n        //this cannot really be tested functionally because I cannot dynamically mess up org.mockito.configuration.MockitoConfiguration class \n        GlobalConfiguration.validate();\n        \n        if (verificationMode != null) {\n            Location location = verificationMode.getLocation();\n            verificationMode = null;\n            reporter.unfinishedVerificationException(location);\n        }\n        \n        if (stubbingInProgress != null) {\n            Location temp = stubbingInProgress;\n            stubbingInProgress = null;\n            reporter.unfinishedStubbing(temp);\n        }\n      \n        getArgumentMatcherStorage().validateState();\n    }",
        "begin_line": 65,
        "end_line": 83,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/MockingProgressImpl.java",
        "class_name": "org.mockito.internal.progress.MockingProgressImpl",
        "signature": "org.mockito.internal.progress.MockingProgressImpl.stubbingCompleted(org.mockito.internal.invocation.Invocation)",
        "snippet": "    public void stubbingCompleted(Invocation invocation) {\n        debuggingInfo.addStubbedInvocation(invocation);        \n        stubbingInProgress = null;\n    }",
        "begin_line": 85,
        "end_line": 88,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/MockingProgressImpl.java",
        "class_name": "org.mockito.internal.progress.MockingProgressImpl",
        "signature": "org.mockito.internal.progress.MockingProgressImpl.toString()",
        "snippet": "    public String toString() {\n        return  \"iOngoingStubbing: \" + iOngoingStubbing + \n        \", verificationMode: \" + verificationMode +\n        \", stubbingInProgress: \" + stubbingInProgress;\n    }",
        "begin_line": 90,
        "end_line": 94,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/MockingProgressImpl.java",
        "class_name": "org.mockito.internal.progress.MockingProgressImpl",
        "signature": "org.mockito.internal.progress.MockingProgressImpl.reset()",
        "snippet": "    public void reset() {\n        stubbingInProgress = null;\n        verificationMode = null;\n        getArgumentMatcherStorage().reset();\n    }",
        "begin_line": 96,
        "end_line": 100,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/MockingProgressImpl.java",
        "class_name": "org.mockito.internal.progress.MockingProgressImpl",
        "signature": "org.mockito.internal.progress.MockingProgressImpl.getArgumentMatcherStorage()",
        "snippet": "    public ArgumentMatcherStorage getArgumentMatcherStorage() {\n        return argumentMatcherStorage;\n    }",
        "begin_line": 102,
        "end_line": 104,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/MockingProgressImpl.java",
        "class_name": "org.mockito.internal.progress.MockingProgressImpl",
        "signature": "org.mockito.internal.progress.MockingProgressImpl.getDebuggingInfo()",
        "snippet": "    public DebuggingInfo getDebuggingInfo() {\n        return debuggingInfo;\n    }",
        "begin_line": 106,
        "end_line": 108,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/ArgumentMatcherStorageImpl.java",
        "class_name": "org.mockito.internal.progress.ArgumentMatcherStorageImpl",
        "signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl.reportMatcher(org.hamcrest.Matcher)",
        "snippet": "    public HandyReturnValues reportMatcher(Matcher matcher) {\n        matcherStack.push(new LocalizedMatcher(matcher));\n        return new HandyReturnValues();\n    }",
        "begin_line": 29,
        "end_line": 32,
        "comment": " (non-Javadoc)\n     * @see org.mockito.internal.progress.ArgumentMatcherStorage#reportMatcher(org.hamcrest.Matcher)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/ArgumentMatcherStorageImpl.java",
        "class_name": "org.mockito.internal.progress.ArgumentMatcherStorageImpl",
        "signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl.pullMatchers()",
        "snippet": "    public List<Matcher> pullMatchers() {\n        if (matcherStack.isEmpty()) {\n            return Collections.emptyList();\n        }\n        \n        List<LocalizedMatcher> matchers = new ArrayList<LocalizedMatcher>(matcherStack);\n        matcherStack.clear();\n        return (List) matchers;\n    }",
        "begin_line": 37,
        "end_line": 45,
        "comment": " (non-Javadoc)\n     * @see org.mockito.internal.progress.ArgumentMatcherStorage#pullMatchers()\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/ArgumentMatcherStorageImpl.java",
        "class_name": "org.mockito.internal.progress.ArgumentMatcherStorageImpl",
        "signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl.reportAnd()",
        "snippet": "    public HandyReturnValues reportAnd() {\n        assertState(!matcherStack.isEmpty(), \"No matchers found for And(?).\");\n        And and = new And(popLastArgumentMatchers(2));\n        matcherStack.push(new LocalizedMatcher(and));\n        return new HandyReturnValues();\n    }",
        "begin_line": 50,
        "end_line": 55,
        "comment": " (non-Javadoc)\n     * @see org.mockito.internal.progress.ArgumentMatcherStorage#reportAnd()\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/ArgumentMatcherStorageImpl.java",
        "class_name": "org.mockito.internal.progress.ArgumentMatcherStorageImpl",
        "signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl.reportNot()",
        "snippet": "    public HandyReturnValues reportNot() {\n        assertState(!matcherStack.isEmpty(), \"No matchers found for Not(?).\");\n        Not not = new Not(popLastArgumentMatchers(1).get(0));\n        matcherStack.push(new LocalizedMatcher(not));\n        return new HandyReturnValues();\n    }",
        "begin_line": 60,
        "end_line": 65,
        "comment": " (non-Javadoc)\n     * @see org.mockito.internal.progress.ArgumentMatcherStorage#reportNot()\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/ArgumentMatcherStorageImpl.java",
        "class_name": "org.mockito.internal.progress.ArgumentMatcherStorageImpl",
        "signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl.popLastArgumentMatchers(int)",
        "snippet": "    private List<Matcher> popLastArgumentMatchers(int count) {\n        assertState(!matcherStack.isEmpty(), \"No matchers found.\");\n        assertState(matcherStack.size() >= count,\n                \"\" + count + \" matchers expected, \" + matcherStack.size() + \" recorded.\");\n        List<Matcher> result = new LinkedList<Matcher>();\n        result.addAll(matcherStack.subList(matcherStack.size() - count, matcherStack.size()));\n        for (int i = 0; i < count; i++) {\n            matcherStack.pop();\n        }\n        return result;\n    }",
        "begin_line": 67,
        "end_line": 77,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/ArgumentMatcherStorageImpl.java",
        "class_name": "org.mockito.internal.progress.ArgumentMatcherStorageImpl",
        "signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl.assertState(boolean, java.lang.String)",
        "snippet": "    private void assertState(boolean toAssert, String message) {\n        if (!toAssert) {\n            matcherStack.clear();\n            throw new InvalidUseOfMatchersException(message);\n        }\n    }",
        "begin_line": 79,
        "end_line": 84,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/ArgumentMatcherStorageImpl.java",
        "class_name": "org.mockito.internal.progress.ArgumentMatcherStorageImpl",
        "signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl.reportOr()",
        "snippet": "    public HandyReturnValues reportOr() {\n        assertState(!matcherStack.isEmpty(), \"No matchers found.\");\n        Or or = new Or(popLastArgumentMatchers(2));\n        matcherStack.push(new LocalizedMatcher(or));\n        return new HandyReturnValues();\n    }",
        "begin_line": 89,
        "end_line": 94,
        "comment": " (non-Javadoc)\n     * @see org.mockito.internal.progress.ArgumentMatcherStorage#reportOr()\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/ArgumentMatcherStorageImpl.java",
        "class_name": "org.mockito.internal.progress.ArgumentMatcherStorageImpl",
        "signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl.validateState()",
        "snippet": "    public void validateState() {\n        if (!matcherStack.isEmpty()) {\n            LocalizedMatcher lastMatcher = matcherStack.lastElement();\n            matcherStack.clear();\n            new Reporter().misplacedArgumentMatcher(lastMatcher.getLocation());\n        }\n    }",
        "begin_line": 99,
        "end_line": 105,
        "comment": " (non-Javadoc)\n     * @see org.mockito.internal.progress.ArgumentMatcherStorage#validateState()\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/ArgumentMatcherStorageImpl.java",
        "class_name": "org.mockito.internal.progress.ArgumentMatcherStorageImpl",
        "signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl.reset()",
        "snippet": "    public void reset() {\n        matcherStack.clear();\n    }",
        "begin_line": 110,
        "end_line": 112,
        "comment": " (non-Javadoc)\n     * @see org.mockito.internal.progress.ArgumentMatcherStorage#reset()\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/SequenceNumber.java",
        "class_name": "org.mockito.internal.progress.SequenceNumber",
        "signature": "org.mockito.internal.progress.SequenceNumber.next()",
        "snippet": "    public static synchronized int next() {\n        return sequenceNumber++;\n    }",
        "begin_line": 11,
        "end_line": 13,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/ThreadSafeMockingProgress.java",
        "class_name": "org.mockito.internal.progress.ThreadSafeMockingProgress",
        "signature": "org.mockito.internal.progress.ThreadSafeMockingProgress.threadSafely()",
        "snippet": "    static MockingProgress threadSafely() {\n        if (mockingProgress.get() == null) {\n            mockingProgress.set(new MockingProgressImpl());\n        }\n        return mockingProgress.get();\n    }",
        "begin_line": 15,
        "end_line": 20,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/ThreadSafeMockingProgress.java",
        "class_name": "org.mockito.internal.progress.ThreadSafeMockingProgress",
        "signature": "org.mockito.internal.progress.ThreadSafeMockingProgress.reportOngoingStubbing(org.mockito.internal.progress.IOngoingStubbing)",
        "snippet": "    public void reportOngoingStubbing(IOngoingStubbing iOngoingStubbing) {\n        threadSafely().reportOngoingStubbing(iOngoingStubbing);\n    }",
        "begin_line": 22,
        "end_line": 24,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/ThreadSafeMockingProgress.java",
        "class_name": "org.mockito.internal.progress.ThreadSafeMockingProgress",
        "signature": "org.mockito.internal.progress.ThreadSafeMockingProgress.pullOngoingStubbing()",
        "snippet": "    public IOngoingStubbing pullOngoingStubbing() {\n        return threadSafely().pullOngoingStubbing();\n    }",
        "begin_line": 26,
        "end_line": 28,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/ThreadSafeMockingProgress.java",
        "class_name": "org.mockito.internal.progress.ThreadSafeMockingProgress",
        "signature": "org.mockito.internal.progress.ThreadSafeMockingProgress.verificationStarted(org.mockito.internal.verification.api.VerificationMode)",
        "snippet": "    public void verificationStarted(VerificationMode verify) {\n        threadSafely().verificationStarted(verify);\n    }",
        "begin_line": 30,
        "end_line": 32,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/ThreadSafeMockingProgress.java",
        "class_name": "org.mockito.internal.progress.ThreadSafeMockingProgress",
        "signature": "org.mockito.internal.progress.ThreadSafeMockingProgress.pullVerificationMode()",
        "snippet": "    public VerificationMode pullVerificationMode() {\n        return threadSafely().pullVerificationMode();\n    }",
        "begin_line": 34,
        "end_line": 36,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/ThreadSafeMockingProgress.java",
        "class_name": "org.mockito.internal.progress.ThreadSafeMockingProgress",
        "signature": "org.mockito.internal.progress.ThreadSafeMockingProgress.stubbingStarted()",
        "snippet": "    public void stubbingStarted() {\n        threadSafely().stubbingStarted();\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/ThreadSafeMockingProgress.java",
        "class_name": "org.mockito.internal.progress.ThreadSafeMockingProgress",
        "signature": "org.mockito.internal.progress.ThreadSafeMockingProgress.validateState()",
        "snippet": "    public void validateState() {\n        threadSafely().validateState();\n    }",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/ThreadSafeMockingProgress.java",
        "class_name": "org.mockito.internal.progress.ThreadSafeMockingProgress",
        "signature": "org.mockito.internal.progress.ThreadSafeMockingProgress.stubbingCompleted(org.mockito.internal.invocation.Invocation)",
        "snippet": "    public void stubbingCompleted(Invocation invocation) {\n        threadSafely().stubbingCompleted(invocation);\n    }",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/ThreadSafeMockingProgress.java",
        "class_name": "org.mockito.internal.progress.ThreadSafeMockingProgress",
        "signature": "org.mockito.internal.progress.ThreadSafeMockingProgress.toString()",
        "snippet": "    public String toString() {\n        return threadSafely().toString();\n    }",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/ThreadSafeMockingProgress.java",
        "class_name": "org.mockito.internal.progress.ThreadSafeMockingProgress",
        "signature": "org.mockito.internal.progress.ThreadSafeMockingProgress.reset()",
        "snippet": "    public void reset() {\n        threadSafely().reset();\n    }",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/ThreadSafeMockingProgress.java",
        "class_name": "org.mockito.internal.progress.ThreadSafeMockingProgress",
        "signature": "org.mockito.internal.progress.ThreadSafeMockingProgress.resetOngoingStubbing()",
        "snippet": "    public void resetOngoingStubbing() {\n        threadSafely().resetOngoingStubbing();\n    }",
        "begin_line": 58,
        "end_line": 60,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/ThreadSafeMockingProgress.java",
        "class_name": "org.mockito.internal.progress.ThreadSafeMockingProgress",
        "signature": "org.mockito.internal.progress.ThreadSafeMockingProgress.getArgumentMatcherStorage()",
        "snippet": "    public ArgumentMatcherStorage getArgumentMatcherStorage() {\n        return threadSafely().getArgumentMatcherStorage();\n    }",
        "begin_line": 62,
        "end_line": 64,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/ThreadSafeMockingProgress.java",
        "class_name": "org.mockito.internal.progress.ThreadSafeMockingProgress",
        "signature": "org.mockito.internal.progress.ThreadSafeMockingProgress.getDebuggingInfo()",
        "snippet": "    public DebuggingInfo getDebuggingInfo() {\n        return threadSafely().getDebuggingInfo();\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/HandyReturnValues.java",
        "class_name": "org.mockito.internal.progress.HandyReturnValues",
        "signature": "org.mockito.internal.progress.HandyReturnValues.returnZero()",
        "snippet": "    public byte returnZero() {\n        return 0;\n    }",
        "begin_line": 17,
        "end_line": 19,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/HandyReturnValues.java",
        "class_name": "org.mockito.internal.progress.HandyReturnValues",
        "signature": "org.mockito.internal.progress.HandyReturnValues.returnChar()",
        "snippet": "    public char returnChar() {\n        return 0;\n    }",
        "begin_line": 21,
        "end_line": 23,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/HandyReturnValues.java",
        "class_name": "org.mockito.internal.progress.HandyReturnValues",
        "signature": "org.mockito.internal.progress.HandyReturnValues.returnNull()",
        "snippet": "    public <T> T returnNull() {\n        return null;\n    }",
        "begin_line": 25,
        "end_line": 27,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/HandyReturnValues.java",
        "class_name": "org.mockito.internal.progress.HandyReturnValues",
        "signature": "org.mockito.internal.progress.HandyReturnValues.returnFalse()",
        "snippet": "    public boolean returnFalse() {\n        return false;\n    }",
        "begin_line": 29,
        "end_line": 31,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/HandyReturnValues.java",
        "class_name": "org.mockito.internal.progress.HandyReturnValues",
        "signature": "org.mockito.internal.progress.HandyReturnValues.returnString()",
        "snippet": "    public String returnString() {\n        return \"\";\n    }",
        "begin_line": 33,
        "end_line": 35,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/HandyReturnValues.java",
        "class_name": "org.mockito.internal.progress.HandyReturnValues",
        "signature": "org.mockito.internal.progress.HandyReturnValues.returnMap()",
        "snippet": "    public Map returnMap() {\n        return new HashMap();\n    }",
        "begin_line": 37,
        "end_line": 39,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/HandyReturnValues.java",
        "class_name": "org.mockito.internal.progress.HandyReturnValues",
        "signature": "org.mockito.internal.progress.HandyReturnValues.returnList()",
        "snippet": "    public List returnList() {\n        return new LinkedList();\n    }",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/HandyReturnValues.java",
        "class_name": "org.mockito.internal.progress.HandyReturnValues",
        "signature": "org.mockito.internal.progress.HandyReturnValues.returnSet()",
        "snippet": "    public Set returnSet() {\n        return new HashSet();\n    }",
        "begin_line": 45,
        "end_line": 47,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/MockingProgress.java",
        "class_name": "org.mockito.internal.progress.MockingProgress",
        "signature": "org.mockito.internal.progress.MockingProgress.reportOngoingStubbing(org.mockito.internal.progress.IOngoingStubbing)",
        "snippet": "    void reportOngoingStubbing(IOngoingStubbing iOngoingStubbing);",
        "begin_line": 13,
        "end_line": 13,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/MockingProgress.java",
        "class_name": "org.mockito.internal.progress.MockingProgress",
        "signature": "org.mockito.internal.progress.MockingProgress.pullOngoingStubbing()",
        "snippet": "    IOngoingStubbing pullOngoingStubbing();",
        "begin_line": 15,
        "end_line": 15,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/MockingProgress.java",
        "class_name": "org.mockito.internal.progress.MockingProgress",
        "signature": "org.mockito.internal.progress.MockingProgress.verificationStarted(org.mockito.internal.verification.api.VerificationMode)",
        "snippet": "    void verificationStarted(VerificationMode verificationMode);",
        "begin_line": 17,
        "end_line": 17,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/MockingProgress.java",
        "class_name": "org.mockito.internal.progress.MockingProgress",
        "signature": "org.mockito.internal.progress.MockingProgress.pullVerificationMode()",
        "snippet": "    VerificationMode pullVerificationMode();",
        "begin_line": 19,
        "end_line": 19,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/MockingProgress.java",
        "class_name": "org.mockito.internal.progress.MockingProgress",
        "signature": "org.mockito.internal.progress.MockingProgress.stubbingStarted()",
        "snippet": "    void stubbingStarted();",
        "begin_line": 21,
        "end_line": 21,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/MockingProgress.java",
        "class_name": "org.mockito.internal.progress.MockingProgress",
        "signature": "org.mockito.internal.progress.MockingProgress.stubbingCompleted(org.mockito.internal.invocation.Invocation)",
        "snippet": "    void stubbingCompleted(Invocation invocation);",
        "begin_line": 23,
        "end_line": 23,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/MockingProgress.java",
        "class_name": "org.mockito.internal.progress.MockingProgress",
        "signature": "org.mockito.internal.progress.MockingProgress.validateState()",
        "snippet": "    void validateState();",
        "begin_line": 25,
        "end_line": 25,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/MockingProgress.java",
        "class_name": "org.mockito.internal.progress.MockingProgress",
        "signature": "org.mockito.internal.progress.MockingProgress.reset()",
        "snippet": "    void reset();",
        "begin_line": 27,
        "end_line": 27,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/MockingProgress.java",
        "class_name": "org.mockito.internal.progress.MockingProgress",
        "signature": "org.mockito.internal.progress.MockingProgress.resetOngoingStubbing()",
        "snippet": "    void resetOngoingStubbing();",
        "begin_line": 33,
        "end_line": 33,
        "comment": "\n     * Removes ongoing stubbing so that in case the framework is misused\n     * state validation errors are more accurate\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/MockingProgress.java",
        "class_name": "org.mockito.internal.progress.MockingProgress",
        "signature": "org.mockito.internal.progress.MockingProgress.getArgumentMatcherStorage()",
        "snippet": "    ArgumentMatcherStorage getArgumentMatcherStorage();",
        "begin_line": 35,
        "end_line": 35,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/MockingProgress.java",
        "class_name": "org.mockito.internal.progress.MockingProgress",
        "signature": "org.mockito.internal.progress.MockingProgress.getDebuggingInfo()",
        "snippet": "    DebuggingInfo getDebuggingInfo();",
        "begin_line": 37,
        "end_line": 37,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/ArgumentMatcherStorage.java",
        "class_name": "org.mockito.internal.progress.ArgumentMatcherStorage",
        "signature": "org.mockito.internal.progress.ArgumentMatcherStorage.reportMatcher(org.hamcrest.Matcher)",
        "snippet": "    HandyReturnValues reportMatcher(Matcher matcher);",
        "begin_line": 14,
        "end_line": 14,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/ArgumentMatcherStorage.java",
        "class_name": "org.mockito.internal.progress.ArgumentMatcherStorage",
        "signature": "org.mockito.internal.progress.ArgumentMatcherStorage.pullMatchers()",
        "snippet": "    List<Matcher> pullMatchers();",
        "begin_line": 16,
        "end_line": 16,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/ArgumentMatcherStorage.java",
        "class_name": "org.mockito.internal.progress.ArgumentMatcherStorage",
        "signature": "org.mockito.internal.progress.ArgumentMatcherStorage.reportAnd()",
        "snippet": "    HandyReturnValues reportAnd();",
        "begin_line": 18,
        "end_line": 18,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/ArgumentMatcherStorage.java",
        "class_name": "org.mockito.internal.progress.ArgumentMatcherStorage",
        "signature": "org.mockito.internal.progress.ArgumentMatcherStorage.reportNot()",
        "snippet": "    HandyReturnValues reportNot();",
        "begin_line": 20,
        "end_line": 20,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/ArgumentMatcherStorage.java",
        "class_name": "org.mockito.internal.progress.ArgumentMatcherStorage",
        "signature": "org.mockito.internal.progress.ArgumentMatcherStorage.reportOr()",
        "snippet": "    HandyReturnValues reportOr();",
        "begin_line": 22,
        "end_line": 22,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/ArgumentMatcherStorage.java",
        "class_name": "org.mockito.internal.progress.ArgumentMatcherStorage",
        "signature": "org.mockito.internal.progress.ArgumentMatcherStorage.validateState()",
        "snippet": "    void validateState();",
        "begin_line": 24,
        "end_line": 24,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/progress/ArgumentMatcherStorage.java",
        "class_name": "org.mockito.internal.progress.ArgumentMatcherStorage",
        "signature": "org.mockito.internal.progress.ArgumentMatcherStorage.reset()",
        "snippet": "    void reset();",
        "begin_line": 26,
        "end_line": 26,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/LessOrEqual.java",
        "class_name": "org.mockito.internal.matchers.LessOrEqual",
        "signature": "org.mockito.internal.matchers.LessOrEqual.LessOrEqual(java.lang.Comparable<T>)",
        "snippet": "    public LessOrEqual(Comparable<T> value) {\n        super(value);\n    }",
        "begin_line": 9,
        "end_line": 11,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/LessOrEqual.java",
        "class_name": "org.mockito.internal.matchers.LessOrEqual",
        "signature": "org.mockito.internal.matchers.LessOrEqual.getName()",
        "snippet": "    @Override\n    protected String getName() {\n        return \"leq\";\n    }",
        "begin_line": 13,
        "end_line": 16,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/LessOrEqual.java",
        "class_name": "org.mockito.internal.matchers.LessOrEqual",
        "signature": "org.mockito.internal.matchers.LessOrEqual.matchResult(int)",
        "snippet": "    @Override\n    protected boolean matchResult(int result) {\n        return result <= 0;\n    }",
        "begin_line": 18,
        "end_line": 21,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/InstanceOf.java",
        "class_name": "org.mockito.internal.matchers.InstanceOf",
        "signature": "org.mockito.internal.matchers.InstanceOf.InstanceOf(java.lang.Class<?>)",
        "snippet": "    public InstanceOf(Class<?> clazz) {\n        this.clazz = clazz;\n    }",
        "begin_line": 15,
        "end_line": 17,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/InstanceOf.java",
        "class_name": "org.mockito.internal.matchers.InstanceOf",
        "signature": "org.mockito.internal.matchers.InstanceOf.matches(java.lang.Object)",
        "snippet": "    public boolean matches(Object actual) {\n        return (actual != null) && clazz.isAssignableFrom(actual.getClass());\n    }",
        "begin_line": 19,
        "end_line": 21,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/InstanceOf.java",
        "class_name": "org.mockito.internal.matchers.InstanceOf",
        "signature": "org.mockito.internal.matchers.InstanceOf.describeTo(org.hamcrest.Description)",
        "snippet": "    public void describeTo(Description description) {\n        description.appendText(\"isA(\" + clazz.getName() + \")\");\n    }",
        "begin_line": 23,
        "end_line": 25,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/Find.java",
        "class_name": "org.mockito.internal.matchers.Find",
        "signature": "org.mockito.internal.matchers.Find.Find(java.lang.String)",
        "snippet": "    public Find(String regex) {\n        this.regex = regex;\n    }",
        "begin_line": 16,
        "end_line": 18,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/Find.java",
        "class_name": "org.mockito.internal.matchers.Find",
        "signature": "org.mockito.internal.matchers.Find.matches(java.lang.Object)",
        "snippet": "    public boolean matches(Object actual) {\n        return actual != null && Pattern.compile(regex).matcher((String) actual).find();\n    }",
        "begin_line": 20,
        "end_line": 22,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/Find.java",
        "class_name": "org.mockito.internal.matchers.Find",
        "signature": "org.mockito.internal.matchers.Find.describeTo(org.hamcrest.Description)",
        "snippet": "    public void describeTo(Description description) {\n        description.appendText(\"find(\\\"\" + regex.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\") + \"\\\")\");\n    }",
        "begin_line": 24,
        "end_line": 26,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/CompareEqual.java",
        "class_name": "org.mockito.internal.matchers.CompareEqual",
        "signature": "org.mockito.internal.matchers.CompareEqual.CompareEqual(java.lang.Comparable<T>)",
        "snippet": "    public CompareEqual(Comparable<T> value) {\n        super(value);\n    }",
        "begin_line": 9,
        "end_line": 11,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/CompareEqual.java",
        "class_name": "org.mockito.internal.matchers.CompareEqual",
        "signature": "org.mockito.internal.matchers.CompareEqual.getName()",
        "snippet": "    @Override\n    protected String getName() {\n        return \"cmpEq\";\n    }",
        "begin_line": 13,
        "end_line": 16,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/CompareEqual.java",
        "class_name": "org.mockito.internal.matchers.CompareEqual",
        "signature": "org.mockito.internal.matchers.CompareEqual.matchResult(int)",
        "snippet": "    @Override\n    protected boolean matchResult(int result) {\n        return result == 0;\n    }",
        "begin_line": 18,
        "end_line": 21,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/Same.java",
        "class_name": "org.mockito.internal.matchers.Same",
        "signature": "org.mockito.internal.matchers.Same.Same(java.lang.Object)",
        "snippet": "    public Same(Object wanted) {\n        this.wanted = wanted;\n    }",
        "begin_line": 15,
        "end_line": 17,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/Same.java",
        "class_name": "org.mockito.internal.matchers.Same",
        "signature": "org.mockito.internal.matchers.Same.matches(java.lang.Object)",
        "snippet": "    public boolean matches(Object actual) {\n        return wanted == actual;\n    }",
        "begin_line": 19,
        "end_line": 21,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/Same.java",
        "class_name": "org.mockito.internal.matchers.Same",
        "signature": "org.mockito.internal.matchers.Same.describeTo(org.hamcrest.Description)",
        "snippet": "    public void describeTo(Description description) {\n        description.appendText(\"same(\");\n        appendQuoting(description);\n        description.appendText(wanted.toString());\n        appendQuoting(description);\n        description.appendText(\")\");\n    }",
        "begin_line": 23,
        "end_line": 29,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/Same.java",
        "class_name": "org.mockito.internal.matchers.Same",
        "signature": "org.mockito.internal.matchers.Same.appendQuoting(org.hamcrest.Description)",
        "snippet": "    private void appendQuoting(Description description) {\n        if (wanted instanceof String) {\n            description.appendText(\"\\\"\");\n        } else if (wanted instanceof Character) {\n            description.appendText(\"'\");\n        }\n    }",
        "begin_line": 31,
        "end_line": 37,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/Matches.java",
        "class_name": "org.mockito.internal.matchers.Matches",
        "signature": "org.mockito.internal.matchers.Matches.Matches(java.lang.String)",
        "snippet": "    public Matches(String regex) {\n        this.regex = regex;\n    }",
        "begin_line": 15,
        "end_line": 17,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/Matches.java",
        "class_name": "org.mockito.internal.matchers.Matches",
        "signature": "org.mockito.internal.matchers.Matches.matches(java.lang.Object)",
        "snippet": "    public boolean matches(Object actual) {\n        return (actual instanceof String) && ((String) actual).matches(regex);\n    }",
        "begin_line": 19,
        "end_line": 21,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/Matches.java",
        "class_name": "org.mockito.internal.matchers.Matches",
        "signature": "org.mockito.internal.matchers.Matches.describeTo(org.hamcrest.Description)",
        "snippet": "    public void describeTo(Description description) {\n        description.appendText(\"matches(\\\"\" + regex.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\")\n                + \"\\\")\");\n    }",
        "begin_line": 23,
        "end_line": 26,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/ArrayEquals.java",
        "class_name": "org.mockito.internal.matchers.ArrayEquals",
        "signature": "org.mockito.internal.matchers.ArrayEquals.ArrayEquals(java.lang.Object)",
        "snippet": "    public ArrayEquals(Object wanted) {\n        super(wanted);\n    }",
        "begin_line": 14,
        "end_line": 16,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/ArrayEquals.java",
        "class_name": "org.mockito.internal.matchers.ArrayEquals",
        "signature": "org.mockito.internal.matchers.ArrayEquals.matches(java.lang.Object)",
        "snippet": "    public boolean matches(Object actual) {\n        Object wanted = getWanted();\n        if (wanted == null || actual == null) {\n            return super.matches(actual);\n        } else if (wanted instanceof boolean[] && actual instanceof boolean[]) {\n            return Arrays.equals((boolean[]) wanted, (boolean[]) actual);\n        } else if (wanted instanceof byte[] && actual instanceof byte[]) {\n            return Arrays.equals((byte[]) wanted, (byte[]) actual);\n        } else if (wanted instanceof char[] && actual instanceof char[]) {\n            return Arrays.equals((char[]) wanted, (char[]) actual);\n        } else if (wanted instanceof double[] && actual instanceof double[]) {\n            return Arrays.equals((double[]) wanted, (double[]) actual);\n        } else if (wanted instanceof float[] && actual instanceof float[]) {\n            return Arrays.equals((float[]) wanted, (float[]) actual);\n        } else if (wanted instanceof int[] && actual instanceof int[]) {\n            return Arrays.equals((int[]) wanted, (int[]) actual);\n        } else if (wanted instanceof long[] && actual instanceof long[]) {\n            return Arrays.equals((long[]) wanted, (long[]) actual);\n        } else if (wanted instanceof short[] && actual instanceof short[]) {\n            return Arrays.equals((short[]) wanted, (short[]) actual);\n        } else if (wanted instanceof Object[] && actual instanceof Object[]) {\n            return Arrays.equals((Object[]) wanted, (Object[]) actual);\n        }\n        return false;\n    }",
        "begin_line": 18,
        "end_line": 42,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/ArrayEquals.java",
        "class_name": "org.mockito.internal.matchers.ArrayEquals",
        "signature": "org.mockito.internal.matchers.ArrayEquals.describeTo(org.hamcrest.Description)",
        "snippet": "    public void describeTo(Description description) {\n        if (getWanted() != null && getWanted().getClass().isArray()) {\n            appendArray(createObjectArray(getWanted()), description);\n        } else {\n            super.describeTo(description);\n        }\n    }",
        "begin_line": 44,
        "end_line": 50,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/ArrayEquals.java",
        "class_name": "org.mockito.internal.matchers.ArrayEquals",
        "signature": "org.mockito.internal.matchers.ArrayEquals.appendArray(java.lang.Object[], org.hamcrest.Description)",
        "snippet": "    private void appendArray(Object[] array, Description description) {\n        description.appendText(\"[\");\n        for (int i = 0; i < array.length; i++) {\n            new Equals(array[i]).describeTo(description);\n            if (i != array.length - 1) {\n                description.appendText(\", \");\n            }\n        }\n        description.appendText(\"]\");\n    }",
        "begin_line": 52,
        "end_line": 61,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/ArrayEquals.java",
        "class_name": "org.mockito.internal.matchers.ArrayEquals",
        "signature": "org.mockito.internal.matchers.ArrayEquals.createObjectArray(java.lang.Object)",
        "snippet": "    public static Object[] createObjectArray(Object array) {\n        if (array instanceof Object[]) {\n            return (Object[]) array;\n        }\n        Object[] result = new Object[Array.getLength(array)];\n        for (int i = 0; i < Array.getLength(array); i++) {\n            result[i] = Array.get(array, i);\n        }\n        return result;\n    }",
        "begin_line": 63,
        "end_line": 72,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/CapturingMatcher.java",
        "class_name": "org.mockito.internal.matchers.CapturingMatcher",
        "signature": "org.mockito.internal.matchers.CapturingMatcher.matches(java.lang.Object)",
        "snippet": "    public boolean matches(Object argument) {\n        this.arguments.add(argument);\n        return true;\n    }    ",
        "begin_line": 22,
        "end_line": 25,
        "comment": " (non-Javadoc)\r\n     * @see org.mockito.ArgumentMatcher#matches(java.lang.Object)\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/CapturingMatcher.java",
        "class_name": "org.mockito.internal.matchers.CapturingMatcher",
        "signature": "org.mockito.internal.matchers.CapturingMatcher.describeTo(org.hamcrest.Description)",
        "snippet": "    public void describeTo(Description description) {\n        description.appendText(\"<Capturing argument>\");\n    }",
        "begin_line": 30,
        "end_line": 32,
        "comment": " (non-Javadoc)\r\n     * @see org.mockito.ArgumentMatcher#describeTo(org.hamcrest.Description)\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/CapturingMatcher.java",
        "class_name": "org.mockito.internal.matchers.CapturingMatcher",
        "signature": "org.mockito.internal.matchers.CapturingMatcher.getLastValue()",
        "snippet": "    public T getLastValue() {\n        if (arguments.isEmpty()) {\n            new Reporter().noArgumentValueWasCaptured();\n        } else {\n            return (T) arguments.getLast();\n        }\n        return (T) arguments;\n    }",
        "begin_line": 34,
        "end_line": 41,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/CapturingMatcher.java",
        "class_name": "org.mockito.internal.matchers.CapturingMatcher",
        "signature": "org.mockito.internal.matchers.CapturingMatcher.getAllValues()",
        "snippet": "    public List<T> getAllValues() {\n        return (List) arguments;\n    }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/GreaterThan.java",
        "class_name": "org.mockito.internal.matchers.GreaterThan",
        "signature": "org.mockito.internal.matchers.GreaterThan.GreaterThan(java.lang.Comparable<T>)",
        "snippet": "    public GreaterThan(Comparable<T> value) {\n        super(value);\n    }",
        "begin_line": 9,
        "end_line": 11,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/GreaterThan.java",
        "class_name": "org.mockito.internal.matchers.GreaterThan",
        "signature": "org.mockito.internal.matchers.GreaterThan.getName()",
        "snippet": "    @Override\n    protected String getName() {\n        return \"gt\";\n    }",
        "begin_line": 13,
        "end_line": 16,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/GreaterThan.java",
        "class_name": "org.mockito.internal.matchers.GreaterThan",
        "signature": "org.mockito.internal.matchers.GreaterThan.matchResult(int)",
        "snippet": "    @Override\n    protected boolean matchResult(int result) {\n        return result > 0;\n    }    ",
        "begin_line": 18,
        "end_line": 21,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/Not.java",
        "class_name": "org.mockito.internal.matchers.Not",
        "signature": "org.mockito.internal.matchers.Not.Not(org.hamcrest.Matcher)",
        "snippet": "    public Not(Matcher first) {\n        this.first = first;\n    }",
        "begin_line": 16,
        "end_line": 18,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/Not.java",
        "class_name": "org.mockito.internal.matchers.Not",
        "signature": "org.mockito.internal.matchers.Not.matches(java.lang.Object)",
        "snippet": "    public boolean matches(Object actual) {\n        return !first.matches(actual);\n    }",
        "begin_line": 20,
        "end_line": 22,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/Not.java",
        "class_name": "org.mockito.internal.matchers.Not",
        "signature": "org.mockito.internal.matchers.Not.describeTo(org.hamcrest.Description)",
        "snippet": "    public void describeTo(Description description) {\n        description.appendText(\"not(\");\n        first.describeTo(description);\n        description.appendText(\")\");\n    }",
        "begin_line": 24,
        "end_line": 28,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/Any.java",
        "class_name": "org.mockito.internal.matchers.Any",
        "signature": "org.mockito.internal.matchers.Any.Any()",
        "snippet": "    private Any() {}",
        "begin_line": 15,
        "end_line": 15,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/Any.java",
        "class_name": "org.mockito.internal.matchers.Any",
        "signature": "org.mockito.internal.matchers.Any.matches(java.lang.Object)",
        "snippet": "    public boolean matches(Object actual) {\n        return true;\n    }",
        "begin_line": 17,
        "end_line": 19,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/Any.java",
        "class_name": "org.mockito.internal.matchers.Any",
        "signature": "org.mockito.internal.matchers.Any.describeTo(org.hamcrest.Description)",
        "snippet": "    public void describeTo(Description description) {\n        description.appendText(\"<any>\");\n    }",
        "begin_line": 21,
        "end_line": 23,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/LocalizedMatcher.java",
        "class_name": "org.mockito.internal.matchers.LocalizedMatcher",
        "signature": "org.mockito.internal.matchers.LocalizedMatcher.LocalizedMatcher(org.hamcrest.Matcher)",
        "snippet": "    public LocalizedMatcher(Matcher actualMatcher) {\n        this.actualMatcher = actualMatcher;\n        this.location = new Location();\n    }",
        "begin_line": 18,
        "end_line": 21,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/LocalizedMatcher.java",
        "class_name": "org.mockito.internal.matchers.LocalizedMatcher",
        "signature": "org.mockito.internal.matchers.LocalizedMatcher._dont_implement_Matcher___instead_extend_BaseMatcher_()",
        "snippet": "    public void _dont_implement_Matcher___instead_extend_BaseMatcher_() {\n        // yeah right...\n    }",
        "begin_line": 23,
        "end_line": 25,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/LocalizedMatcher.java",
        "class_name": "org.mockito.internal.matchers.LocalizedMatcher",
        "signature": "org.mockito.internal.matchers.LocalizedMatcher.matches(java.lang.Object)",
        "snippet": "    public boolean matches(Object item) {\n        return actualMatcher.matches(item);\n    }",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/LocalizedMatcher.java",
        "class_name": "org.mockito.internal.matchers.LocalizedMatcher",
        "signature": "org.mockito.internal.matchers.LocalizedMatcher.describeTo(org.hamcrest.Description)",
        "snippet": "    public void describeTo(Description description) {\n        actualMatcher.describeTo(description);\n    }",
        "begin_line": 31,
        "end_line": 33,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/LocalizedMatcher.java",
        "class_name": "org.mockito.internal.matchers.LocalizedMatcher",
        "signature": "org.mockito.internal.matchers.LocalizedMatcher.getLocation()",
        "snippet": "    public Location getLocation() {\n        return location;\n    }",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/LocalizedMatcher.java",
        "class_name": "org.mockito.internal.matchers.LocalizedMatcher",
        "signature": "org.mockito.internal.matchers.LocalizedMatcher.toString()",
        "snippet": "    @Override\n    public String toString() {\n        return \"Localized: \" + this.actualMatcher;\n    }",
        "begin_line": 39,
        "end_line": 42,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/LocalizedMatcher.java",
        "class_name": "org.mockito.internal.matchers.LocalizedMatcher",
        "signature": "org.mockito.internal.matchers.LocalizedMatcher.withExtraTypeInfo()",
        "snippet": "    public SelfDescribing withExtraTypeInfo() {\n        if (actualMatcher instanceof ContainsExtraTypeInformation) {\n            return ((ContainsExtraTypeInformation) actualMatcher).withExtraTypeInfo();\n        } else {\n            return this;\n        }\n    }",
        "begin_line": 44,
        "end_line": 50,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/LocalizedMatcher.java",
        "class_name": "org.mockito.internal.matchers.LocalizedMatcher",
        "signature": "org.mockito.internal.matchers.LocalizedMatcher.typeMatches(java.lang.Object)",
        "snippet": "    public boolean typeMatches(Object object) {\n        if (actualMatcher instanceof ContainsExtraTypeInformation) {\n            return ((ContainsExtraTypeInformation) actualMatcher).typeMatches(object);\n        } else {\n            return false;\n        }\n    }",
        "begin_line": 52,
        "end_line": 58,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/MatchersPrinter.java",
        "class_name": "org.mockito.internal.matchers.MatchersPrinter",
        "signature": "org.mockito.internal.matchers.MatchersPrinter.getArgumentsLine(java.util.List<org.hamcrest.Matcher>, org.mockito.internal.reporting.PrintSettings)",
        "snippet": "    public String getArgumentsLine(List<Matcher> matchers, PrintSettings printSettings) {\n        Description result = new StringDescription();\n        result.appendList(\"(\", \", \", \");\", applyPrintSettings(matchers, printSettings));\n        return result.toString();\n    }",
        "begin_line": 19,
        "end_line": 23,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/MatchersPrinter.java",
        "class_name": "org.mockito.internal.matchers.MatchersPrinter",
        "signature": "org.mockito.internal.matchers.MatchersPrinter.getArgumentsBlock(java.util.List<org.hamcrest.Matcher>, org.mockito.internal.reporting.PrintSettings)",
        "snippet": "    public String getArgumentsBlock(List<Matcher> matchers, PrintSettings printSettings) {\n        Description result = new StringDescription();\n        result.appendList(\"(\\n    \", \",\\n    \", \"\\n);\", applyPrintSettings(matchers, printSettings));\n        return result.toString();\n    }",
        "begin_line": 25,
        "end_line": 29,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/MatchersPrinter.java",
        "class_name": "org.mockito.internal.matchers.MatchersPrinter",
        "signature": "org.mockito.internal.matchers.MatchersPrinter.applyPrintSettings(java.util.List<org.hamcrest.Matcher>, org.mockito.internal.reporting.PrintSettings)",
        "snippet": "    private List<SelfDescribing> applyPrintSettings(List<Matcher> matchers, PrintSettings printSettings) {\n        List<SelfDescribing> withPrintSettings = new LinkedList<SelfDescribing>();\n        int i = 0;\n        for (final Matcher matcher : matchers) {\n            if (matcher instanceof ContainsExtraTypeInformation && printSettings.extraTypeInfoFor(i)) {\n                withPrintSettings.add(((ContainsExtraTypeInformation) matcher).withExtraTypeInfo());\n            } else {\n                withPrintSettings.add(matcher);\n            }\n            i++;\n        }\n        return withPrintSettings;\n    }",
        "begin_line": 31,
        "end_line": 43,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/Or.java",
        "class_name": "org.mockito.internal.matchers.Or",
        "signature": "org.mockito.internal.matchers.Or.Or(java.util.List<org.hamcrest.Matcher>)",
        "snippet": "    public Or(List<Matcher> matchers) {\n        this.matchers = matchers;\n    }",
        "begin_line": 19,
        "end_line": 21,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/Or.java",
        "class_name": "org.mockito.internal.matchers.Or",
        "signature": "org.mockito.internal.matchers.Or.matches(java.lang.Object)",
        "snippet": "    public boolean matches(Object actual) {\n        for (Matcher matcher : matchers) {\n            if (matcher.matches(actual)) {\n                return true;\n            }\n        }\n        return false;\n    }",
        "begin_line": 23,
        "end_line": 30,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/Or.java",
        "class_name": "org.mockito.internal.matchers.Or",
        "signature": "org.mockito.internal.matchers.Or.describeTo(org.hamcrest.Description)",
        "snippet": "    public void describeTo(Description description) {\n        description.appendText(\"or(\");\n        for (Iterator<Matcher> it = matchers.iterator(); it.hasNext();) {\n            it.next().describeTo(description);\n            if (it.hasNext()) {\n                description.appendText(\", \");\n            }\n        }\n        description.appendText(\")\");\n    }",
        "begin_line": 32,
        "end_line": 41,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/Contains.java",
        "class_name": "org.mockito.internal.matchers.Contains",
        "signature": "org.mockito.internal.matchers.Contains.Contains(java.lang.String)",
        "snippet": "    public Contains(String substring) {\n        this.substring = substring;\n    }",
        "begin_line": 15,
        "end_line": 17,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/Contains.java",
        "class_name": "org.mockito.internal.matchers.Contains",
        "signature": "org.mockito.internal.matchers.Contains.matches(java.lang.Object)",
        "snippet": "    public boolean matches(Object actual) {\n        return actual != null && ((String) actual).contains(substring);\n    }",
        "begin_line": 19,
        "end_line": 21,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/Contains.java",
        "class_name": "org.mockito.internal.matchers.Contains",
        "signature": "org.mockito.internal.matchers.Contains.describeTo(org.hamcrest.Description)",
        "snippet": "    public void describeTo(Description description) {\n        description.appendText(\"contains(\\\"\" + substring + \"\\\")\");\n    }",
        "begin_line": 23,
        "end_line": 25,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/CompareTo.java",
        "class_name": "org.mockito.internal.matchers.CompareTo",
        "signature": "org.mockito.internal.matchers.CompareTo.CompareTo(java.lang.Comparable<T>)",
        "snippet": "    public CompareTo(Comparable<T> value) {\n        this.wanted = value;\n    }",
        "begin_line": 14,
        "end_line": 16,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/CompareTo.java",
        "class_name": "org.mockito.internal.matchers.CompareTo",
        "signature": "org.mockito.internal.matchers.CompareTo.matches(java.lang.Object)",
        "snippet": "    @SuppressWarnings(\"unchecked\")\n    public boolean matches(Object actual) {\n        \n        if(!(actual instanceof Comparable)) {\n            return false;\n        }\n        \n        return matchResult(((Comparable) actual).compareTo(wanted));\n    }",
        "begin_line": 18,
        "end_line": 26,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/CompareTo.java",
        "class_name": "org.mockito.internal.matchers.CompareTo",
        "signature": "org.mockito.internal.matchers.CompareTo.describeTo(org.hamcrest.Description)",
        "snippet": "    public void describeTo(Description description) {\n        description.appendText(getName() + \"(\" + wanted + \")\");\n    }",
        "begin_line": 28,
        "end_line": 30,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/CompareTo.java",
        "class_name": "org.mockito.internal.matchers.CompareTo",
        "signature": "org.mockito.internal.matchers.CompareTo.getName()",
        "snippet": "    protected abstract String getName();",
        "begin_line": 32,
        "end_line": 32,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/CompareTo.java",
        "class_name": "org.mockito.internal.matchers.CompareTo",
        "signature": "org.mockito.internal.matchers.CompareTo.matchResult(int)",
        "snippet": "    protected abstract boolean matchResult(int result);",
        "begin_line": 34,
        "end_line": 34,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/Null.java",
        "class_name": "org.mockito.internal.matchers.Null",
        "signature": "org.mockito.internal.matchers.Null.Null()",
        "snippet": "    private Null() {\n    }",
        "begin_line": 15,
        "end_line": 16,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/Null.java",
        "class_name": "org.mockito.internal.matchers.Null",
        "signature": "org.mockito.internal.matchers.Null.matches(java.lang.Object)",
        "snippet": "    public boolean matches(Object actual) {\n        return actual == null;\n    }",
        "begin_line": 18,
        "end_line": 20,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/Null.java",
        "class_name": "org.mockito.internal.matchers.Null",
        "signature": "org.mockito.internal.matchers.Null.describeTo(org.hamcrest.Description)",
        "snippet": "    public void describeTo(Description description) {\n        description.appendText(\"isNull()\");\n    }",
        "begin_line": 22,
        "end_line": 24,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/StartsWith.java",
        "class_name": "org.mockito.internal.matchers.StartsWith",
        "signature": "org.mockito.internal.matchers.StartsWith.StartsWith(java.lang.String)",
        "snippet": "    public StartsWith(String prefix) {\n        this.prefix = prefix;\n    }",
        "begin_line": 15,
        "end_line": 17,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/StartsWith.java",
        "class_name": "org.mockito.internal.matchers.StartsWith",
        "signature": "org.mockito.internal.matchers.StartsWith.matches(java.lang.Object)",
        "snippet": "    public boolean matches(Object actual) {\n        return actual != null && ((String) actual).startsWith(prefix);\n    }",
        "begin_line": 19,
        "end_line": 21,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/StartsWith.java",
        "class_name": "org.mockito.internal.matchers.StartsWith",
        "signature": "org.mockito.internal.matchers.StartsWith.describeTo(org.hamcrest.Description)",
        "snippet": "    public void describeTo(Description description) {\n        description.appendText(\"startsWith(\\\"\" + prefix + \"\\\")\");\n    }",
        "begin_line": 23,
        "end_line": 25,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/GreaterOrEqual.java",
        "class_name": "org.mockito.internal.matchers.GreaterOrEqual",
        "signature": "org.mockito.internal.matchers.GreaterOrEqual.GreaterOrEqual(java.lang.Comparable<T>)",
        "snippet": "    public GreaterOrEqual(Comparable<T> value) {\n        super(value);\n    }",
        "begin_line": 9,
        "end_line": 11,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/GreaterOrEqual.java",
        "class_name": "org.mockito.internal.matchers.GreaterOrEqual",
        "signature": "org.mockito.internal.matchers.GreaterOrEqual.getName()",
        "snippet": "    @Override\n    protected String getName() {\n        return \"geq\";\n    }",
        "begin_line": 13,
        "end_line": 16,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/GreaterOrEqual.java",
        "class_name": "org.mockito.internal.matchers.GreaterOrEqual",
        "signature": "org.mockito.internal.matchers.GreaterOrEqual.matchResult(int)",
        "snippet": "    @Override\n    protected boolean matchResult(int result) {\n        return result >= 0;\n    }",
        "begin_line": 18,
        "end_line": 21,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/And.java",
        "class_name": "org.mockito.internal.matchers.And",
        "signature": "org.mockito.internal.matchers.And.And(java.util.List<org.hamcrest.Matcher>)",
        "snippet": "    public And(List<Matcher> matchers) {\n        this.matchers = matchers;\n    }",
        "begin_line": 19,
        "end_line": 21,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/And.java",
        "class_name": "org.mockito.internal.matchers.And",
        "signature": "org.mockito.internal.matchers.And.matches(java.lang.Object)",
        "snippet": "    public boolean matches(Object actual) {\n        for (Matcher matcher : matchers) {\n            if (!matcher.matches(actual)) {\n                return false;\n            }\n        }\n        return true;\n    }",
        "begin_line": 23,
        "end_line": 30,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/And.java",
        "class_name": "org.mockito.internal.matchers.And",
        "signature": "org.mockito.internal.matchers.And.describeTo(org.hamcrest.Description)",
        "snippet": "    public void describeTo(Description description) {\n        description.appendText(\"and(\");\n        for (Iterator<Matcher> it = matchers.iterator(); it.hasNext();) {\n            it.next().describeTo(description);\n            if (it.hasNext()) {\n                description.appendText(\", \");\n            }\n        }\n        description.appendText(\")\");\n    }",
        "begin_line": 32,
        "end_line": 41,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/ContainsExtraTypeInformation.java",
        "class_name": "org.mockito.internal.matchers.ContainsExtraTypeInformation",
        "signature": "org.mockito.internal.matchers.ContainsExtraTypeInformation.withExtraTypeInfo()",
        "snippet": "    SelfDescribing withExtraTypeInfo();",
        "begin_line": 10,
        "end_line": 10,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/ContainsExtraTypeInformation.java",
        "class_name": "org.mockito.internal.matchers.ContainsExtraTypeInformation",
        "signature": "org.mockito.internal.matchers.ContainsExtraTypeInformation.typeMatches(java.lang.Object)",
        "snippet": "    boolean typeMatches(Object object);",
        "begin_line": 12,
        "end_line": 12,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/LessThan.java",
        "class_name": "org.mockito.internal.matchers.LessThan",
        "signature": "org.mockito.internal.matchers.LessThan.LessThan(java.lang.Comparable<T>)",
        "snippet": "    public LessThan(Comparable<T> value) {\n        super(value);\n    }",
        "begin_line": 9,
        "end_line": 11,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/LessThan.java",
        "class_name": "org.mockito.internal.matchers.LessThan",
        "signature": "org.mockito.internal.matchers.LessThan.getName()",
        "snippet": "    @Override\n    protected String getName() {\n        return \"lt\";\n    }",
        "begin_line": 13,
        "end_line": 16,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/LessThan.java",
        "class_name": "org.mockito.internal.matchers.LessThan",
        "signature": "org.mockito.internal.matchers.LessThan.matchResult(int)",
        "snippet": "    @Override\n    protected boolean matchResult(int result) {\n        return result < 0;\n    }",
        "begin_line": 18,
        "end_line": 21,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/EqualsWithDelta.java",
        "class_name": "org.mockito.internal.matchers.EqualsWithDelta",
        "signature": "org.mockito.internal.matchers.EqualsWithDelta.EqualsWithDelta(java.lang.Number, java.lang.Number)",
        "snippet": "    public EqualsWithDelta(Number value, Number delta) {\n        this.wanted = value;\n        this.delta = delta;\n    }",
        "begin_line": 16,
        "end_line": 19,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/EqualsWithDelta.java",
        "class_name": "org.mockito.internal.matchers.EqualsWithDelta",
        "signature": "org.mockito.internal.matchers.EqualsWithDelta.matches(java.lang.Object)",
        "snippet": "    public boolean matches(Object actual) {\n        Number actualNumber = (Number) actual;\n        return wanted.doubleValue() - delta.doubleValue() <= actualNumber.doubleValue()\n                && actualNumber.doubleValue() <= wanted.doubleValue()\n                        + delta.doubleValue();\n    }",
        "begin_line": 21,
        "end_line": 26,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/EqualsWithDelta.java",
        "class_name": "org.mockito.internal.matchers.EqualsWithDelta",
        "signature": "org.mockito.internal.matchers.EqualsWithDelta.describeTo(org.hamcrest.Description)",
        "snippet": "    public void describeTo(Description description) {\n        description.appendText(\"eq(\" + wanted + \", \" + delta + \")\");\n    }",
        "begin_line": 28,
        "end_line": 30,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/NotNull.java",
        "class_name": "org.mockito.internal.matchers.NotNull",
        "signature": "org.mockito.internal.matchers.NotNull.NotNull()",
        "snippet": "    private NotNull() {\n        \n    }",
        "begin_line": 15,
        "end_line": 17,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/NotNull.java",
        "class_name": "org.mockito.internal.matchers.NotNull",
        "signature": "org.mockito.internal.matchers.NotNull.matches(java.lang.Object)",
        "snippet": "    public boolean matches(Object actual) {\n        return actual != null;\n    }",
        "begin_line": 19,
        "end_line": 21,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/NotNull.java",
        "class_name": "org.mockito.internal.matchers.NotNull",
        "signature": "org.mockito.internal.matchers.NotNull.describeTo(org.hamcrest.Description)",
        "snippet": "    public void describeTo(Description description) {\n        description.appendText(\"notNull()\");\n    }",
        "begin_line": 23,
        "end_line": 25,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/Equals.java",
        "class_name": "org.mockito.internal.matchers.Equals",
        "signature": "org.mockito.internal.matchers.Equals.Equals(java.lang.Object)",
        "snippet": "    public Equals(Object wanted) {\n        this.wanted = wanted;\n    }",
        "begin_line": 15,
        "end_line": 17,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/Equals.java",
        "class_name": "org.mockito.internal.matchers.Equals",
        "signature": "org.mockito.internal.matchers.Equals.matches(java.lang.Object)",
        "snippet": "    public boolean matches(Object actual) {\n        if (this.wanted == null) {\n            return actual == null;\n        }\n        return wanted.equals(actual);\n    }",
        "begin_line": 19,
        "end_line": 24,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/Equals.java",
        "class_name": "org.mockito.internal.matchers.Equals",
        "signature": "org.mockito.internal.matchers.Equals.describeTo(org.hamcrest.Description)",
        "snippet": "    public void describeTo(Description description) {\n        description.appendText(describe(wanted));\n    }",
        "begin_line": 26,
        "end_line": 28,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/Equals.java",
        "class_name": "org.mockito.internal.matchers.Equals",
        "signature": "org.mockito.internal.matchers.Equals.describe(java.lang.Object)",
        "snippet": "    public String describe(Object object) {\n        String text = quoting();\n        if (object == null) {\n            text+=\"null\";\n        } else {\n            text+=object.toString();\n        }\n        text+= quoting();\n        return text;\n    }",
        "begin_line": 30,
        "end_line": 39,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/Equals.java",
        "class_name": "org.mockito.internal.matchers.Equals",
        "signature": "org.mockito.internal.matchers.Equals.quoting()",
        "snippet": "    private String quoting() {\n        if (wanted instanceof String) {\n            return \"\\\"\";\n        } else if (wanted instanceof Character) {\n            return \"'\";\n        } else {\n            return \"\";\n        }\n    }",
        "begin_line": 41,
        "end_line": 49,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/Equals.java",
        "class_name": "org.mockito.internal.matchers.Equals",
        "signature": "org.mockito.internal.matchers.Equals.getWanted()",
        "snippet": "    protected final Object getWanted() {\n        return wanted;\n    }",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/Equals.java",
        "class_name": "org.mockito.internal.matchers.Equals",
        "signature": "org.mockito.internal.matchers.Equals.equals(java.lang.Object)",
        "snippet": "    @Override\n    public boolean equals(Object o) {\n        if (o == null || !this.getClass().equals(o.getClass())) {\n            return false;\n        }\n        Equals other = (Equals) o;\n        return this.wanted == null && other.wanted == null || this.wanted != null && this.wanted.equals(other.wanted);\n    }",
        "begin_line": 55,
        "end_line": 62,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/Equals.java",
        "class_name": "org.mockito.internal.matchers.Equals",
        "signature": "org.mockito.internal.matchers.Equals.hashCode()",
        "snippet": "    @Override\n    public int hashCode() {\n        throw new UnsupportedOperationException(\"hashCode() is not supported\");\n    }",
        "begin_line": 64,
        "end_line": 67,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/Equals.java",
        "class_name": "org.mockito.internal.matchers.Equals",
        "signature": "org.mockito.internal.matchers.Equals.withExtraTypeInfo()",
        "snippet": "    public SelfDescribing withExtraTypeInfo() {\n        return new SelfDescribing() {\n            public void describeTo(Description description) {\n                description.appendText(describe(\"(\"+ wanted.getClass().getSimpleName() +\") \" + wanted));\n            }};\n    }",
        "begin_line": 69,
        "end_line": 74,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/Equals.java",
        "class_name": "org.mockito.internal.matchers.Equals",
        "signature": "org.mockito.internal.matchers.Equals.Anonymous-ef2aacee-632c-4266-a5bf-82d95cd558a3.describeTo(org.hamcrest.Description)",
        "snippet": "            public void describeTo(Description description) {\n                description.appendText(describe(\"(\"+ wanted.getClass().getSimpleName() +\") \" + wanted));\n            }};",
        "begin_line": 71,
        "end_line": 73,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/Equals.java",
        "class_name": "org.mockito.internal.matchers.Equals",
        "signature": "org.mockito.internal.matchers.Equals.typeMatches(java.lang.Object)",
        "snippet": "    public boolean typeMatches(Object object) {\n        return wanted != null && object != null && object.getClass() == wanted.getClass();\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/EndsWith.java",
        "class_name": "org.mockito.internal.matchers.EndsWith",
        "signature": "org.mockito.internal.matchers.EndsWith.EndsWith(java.lang.String)",
        "snippet": "    public EndsWith(String suffix) {\n        this.suffix = suffix;\n    }",
        "begin_line": 15,
        "end_line": 17,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/EndsWith.java",
        "class_name": "org.mockito.internal.matchers.EndsWith",
        "signature": "org.mockito.internal.matchers.EndsWith.matches(java.lang.Object)",
        "snippet": "    public boolean matches(Object actual) {\n        return actual != null && ((String) actual).endsWith(suffix);\n    }",
        "begin_line": 19,
        "end_line": 21,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/EndsWith.java",
        "class_name": "org.mockito.internal.matchers.EndsWith",
        "signature": "org.mockito.internal.matchers.EndsWith.describeTo(org.hamcrest.Description)",
        "snippet": "    public void describeTo(Description description) {\n        description.appendText(\"endsWith(\\\"\" + suffix + \"\\\")\");\n    }",
        "begin_line": 23,
        "end_line": 25,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/apachecommons/ReflectionEquals.java",
        "class_name": "org.mockito.internal.matchers.apachecommons.ReflectionEquals",
        "signature": "org.mockito.internal.matchers.apachecommons.ReflectionEquals.ReflectionEquals(java.lang.Object, java.lang.String...)",
        "snippet": "    public ReflectionEquals(Object wanted, String... excludeFields) {\n        this.wanted = wanted;\n        this.excludeFields = excludeFields;\n    }",
        "begin_line": 14,
        "end_line": 17,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/apachecommons/ReflectionEquals.java",
        "class_name": "org.mockito.internal.matchers.apachecommons.ReflectionEquals",
        "signature": "org.mockito.internal.matchers.apachecommons.ReflectionEquals.matches(java.lang.Object)",
        "snippet": "    public boolean matches(Object actual) {\n        return EqualsBuilder.reflectionEquals(wanted, actual, excludeFields);\n    }",
        "begin_line": 19,
        "end_line": 21,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/apachecommons/ReflectionEquals.java",
        "class_name": "org.mockito.internal.matchers.apachecommons.ReflectionEquals",
        "signature": "org.mockito.internal.matchers.apachecommons.ReflectionEquals.describeTo(org.hamcrest.Description)",
        "snippet": "    public void describeTo(Description description) {\n        description.appendText(\"refEq(\" + wanted + \")\");\n    }",
        "begin_line": 23,
        "end_line": 25,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/apachecommons/EqualsBuilder.java",
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilder",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilder.EqualsBuilder()",
        "snippet": "    public EqualsBuilder() {\n        // do nothing for now.\n    }",
        "begin_line": 107,
        "end_line": 109,
        "comment": "\n     * <p>Constructor for EqualsBuilder.</p>\n     *\n     * <p>Starts off assuming that equals is <code>true</code>.</p>\n     * @see Object#equals(Object)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/apachecommons/EqualsBuilder.java",
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilder",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object)",
        "snippet": "    public static boolean reflectionEquals(Object lhs, Object rhs) {\n        return reflectionEquals(lhs, rhs, false, null, null);\n    }",
        "begin_line": 131,
        "end_line": 133,
        "comment": "\n     * <p>This method uses reflection to determine if the two <code>Object</code>s\n     * are equal.</p>\n     *\n     * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n     * fields. This means that it will throw a security exception if run under\n     * a security manager, if the permissions are not set up correctly. It is also\n     * not as efficient as testing explicitly.</p>\n     *\n     * <p>Transient members will be not be tested, as they are likely derived\n     * fields, and not part of the value of the Object.</p>\n     *\n     * <p>Static fields will not be tested. Superclass fields will be included.</p>\n     *\n     * @param lhs  <code>this</code> object\n     * @param rhs  the other object\n     * @return <code>true</code> if the two Objects have tested equals.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/apachecommons/EqualsBuilder.java",
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilder",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object, java.lang.String[])",
        "snippet": "    public static boolean reflectionEquals(Object lhs, Object rhs, String[] excludeFields) {\n        return reflectionEquals(lhs, rhs, false, null, excludeFields);\n    }",
        "begin_line": 154,
        "end_line": 156,
        "comment": "\n     * <p>This method uses reflection to determine if the two <code>Object</code>s\n     * are equal.</p>\n     *\n     * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n     * fields. This means that it will throw a security exception if run under\n     * a security manager, if the permissions are not set up correctly. It is also\n     * not as efficient as testing explicitly.</p>\n     *\n     * <p>Transient members will be not be tested, as they are likely derived\n     * fields, and not part of the value of the Object.</p>\n     *\n     * <p>Static fields will not be tested. Superclass fields will be included.</p>\n     *\n     * @param lhs  <code>this</code> object\n     * @param rhs  the other object\n     * @param excludeFields  array of field names to exclude from testing\n     * @return <code>true</code> if the two Objects have tested equals.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/apachecommons/EqualsBuilder.java",
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilder",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object, boolean)",
        "snippet": "    public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients) {\n        return reflectionEquals(lhs, rhs, testTransients, null, null);\n    }",
        "begin_line": 178,
        "end_line": 180,
        "comment": "\n     * <p>This method uses reflection to determine if the two <code>Object</code>s\n     * are equal.</p>\n     *\n     * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n     * fields. This means that it will throw a security exception if run under\n     * a security manager, if the permissions are not set up correctly. It is also\n     * not as efficient as testing explicitly.</p>\n     *\n     * <p>If the TestTransients parameter is set to <code>true</code>, transient\n     * members will be tested, otherwise they are ignored, as they are likely\n     * derived fields, and not part of the value of the <code>Object</code>.</p>\n     *\n     * <p>Static fields will not be tested. Superclass fields will be included.</p>\n     *\n     * @param lhs  <code>this</code> object\n     * @param rhs  the other object\n     * @param testTransients  whether to include transient fields\n     * @return <code>true</code> if the two Objects have tested equals.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/apachecommons/EqualsBuilder.java",
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilder",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object, boolean, java.lang.Class)",
        "snippet": "    public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass) {\n        return reflectionEquals(lhs, rhs, testTransients, reflectUpToClass, null);\n    }",
        "begin_line": 207,
        "end_line": 209,
        "comment": "\n     * <p>This method uses reflection to determine if the two <code>Object</code>s\n     * are equal.</p>\n     *\n     * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n     * fields. This means that it will throw a security exception if run under\n     * a security manager, if the permissions are not set up correctly. It is also\n     * not as efficient as testing explicitly.</p>\n     *\n     * <p>If the testTransients parameter is set to <code>true</code>, transient\n     * members will be tested, otherwise they are ignored, as they are likely\n     * derived fields, and not part of the value of the <code>Object</code>.</p>\n     *\n     * <p>Static fields will not be included. Superclass fields will be appended\n     * up to and including the specified superclass. A null superclass is treated\n     * as java.lang.Object.</p>\n     *\n     * @param lhs  <code>this</code> object\n     * @param rhs  the other object\n     * @param testTransients  whether to include transient fields\n     * @param reflectUpToClass  the superclass to reflect up to (inclusive),\n     *  may be <code>null</code>\n     * @return <code>true</code> if the two Objects have tested equals.\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/apachecommons/EqualsBuilder.java",
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilder",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object, boolean, java.lang.Class, java.lang.String[])",
        "snippet": "    public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass,\n            String[] excludeFields) {\n        if (lhs == rhs) {\n            return true;\n        }\n        if (lhs == null || rhs == null) {\n            return false;\n        }\n        // Find the leaf class since there may be transients in the leaf \n        // class or in classes between the leaf and root.\n        // If we are not testing transients or a subclass has no ivars, \n        // then a subclass can test equals to a superclass.\n        Class lhsClass = lhs.getClass();\n        Class rhsClass = rhs.getClass();\n        Class testClass;\n        if (lhsClass.isInstance(rhs)) {\n            testClass = lhsClass;\n            if (!rhsClass.isInstance(lhs)) {\n                // rhsClass is a subclass of lhsClass\n                testClass = rhsClass;\n            }\n        } else if (rhsClass.isInstance(lhs)) {\n            testClass = rhsClass;\n            if (!lhsClass.isInstance(rhs)) {\n                // lhsClass is a subclass of rhsClass\n                testClass = lhsClass;\n            }\n        } else {\n            // The two classes are not related.\n            return false;\n        }\n        EqualsBuilder equalsBuilder = new EqualsBuilder();\n        try {\n            reflectionAppend(lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields);\n            while (testClass.getSuperclass() != null && testClass != reflectUpToClass) {\n                testClass = testClass.getSuperclass();\n                reflectionAppend(lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields);\n            }\n        } catch (IllegalArgumentException e) {\n            // In this case, we tried to test a subclass vs. a superclass and\n            // the subclass has ivars or the ivars are transient and \n            // we are testing transients.\n            // If a subclass has ivars that we are trying to test them, we get an\n            // exception and we know that the objects are not equal.\n            return false;\n        }\n        return equalsBuilder.isEquals();\n    }",
        "begin_line": 237,
        "end_line": 284,
        "comment": "\n     * <p>This method uses reflection to determine if the two <code>Object</code>s\n     * are equal.</p>\n     *\n     * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n     * fields. This means that it will throw a security exception if run under\n     * a security manager, if the permissions are not set up correctly. It is also\n     * not as efficient as testing explicitly.</p>\n     *\n     * <p>If the testTransients parameter is set to <code>true</code>, transient\n     * members will be tested, otherwise they are ignored, as they are likely\n     * derived fields, and not part of the value of the <code>Object</code>.</p>\n     *\n     * <p>Static fields will not be included. Superclass fields will be appended\n     * up to and including the specified superclass. A null superclass is treated\n     * as java.lang.Object.</p>\n     *\n     * @param lhs  <code>this</code> object\n     * @param rhs  the other object\n     * @param testTransients  whether to include transient fields\n     * @param reflectUpToClass  the superclass to reflect up to (inclusive),\n     *  may be <code>null</code>\n     * @param excludeFields  array of field names to exclude from testing\n     * @return <code>true</code> if the two Objects have tested equals.\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/apachecommons/EqualsBuilder.java",
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilder",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilder.reflectionAppend(java.lang.Object, java.lang.Object, java.lang.Class, org.mockito.internal.matchers.apachecommons.EqualsBuilder, boolean, java.lang.String[])",
        "snippet": "    private static void reflectionAppend(\n        Object lhs,\n        Object rhs,\n        Class clazz,\n        EqualsBuilder builder,\n        boolean useTransients,\n        String[] excludeFields) {\n        Field[] fields = clazz.getDeclaredFields();\n        List excludedFieldList = excludeFields != null ? Arrays.asList(excludeFields) : Collections.EMPTY_LIST;\n        AccessibleObject.setAccessible(fields, true);\n        for (int i = 0; i < fields.length && builder.isEquals; i++) {\n            Field f = fields[i];\n            if (!excludedFieldList.contains(f.getName())\n                && (f.getName().indexOf('$') == -1)\n                && (useTransients || !Modifier.isTransient(f.getModifiers()))\n                && (!Modifier.isStatic(f.getModifiers()))) {\n                try {\n                    builder.append(f.get(lhs), f.get(rhs));\n                } catch (IllegalAccessException e) {\n                    //this can't happen. Would get a Security exception instead\n                    //throw a runtime exception in case the impossible happens.\n                    throw new InternalError(\"Unexpected IllegalAccessException\");\n                }\n            }\n        }\n    }",
        "begin_line": 297,
        "end_line": 322,
        "comment": "\n     * <p>Appends the fields and values defined by the given object of the\n     * given Class.</p>\n     * \n     * @param lhs  the left hand object\n     * @param rhs  the right hand object\n     * @param clazz  the class to append details of\n     * @param builder  the builder to append to\n     * @param useTransients  whether to test transient fields\n     * @param excludeFields  array of field names to exclude from testing\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/apachecommons/EqualsBuilder.java",
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilder",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilder.appendSuper(boolean)",
        "snippet": "    public EqualsBuilder appendSuper(boolean superEquals) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = superEquals;\n        return this;\n    }",
        "begin_line": 333,
        "end_line": 339,
        "comment": "\n     * <p>Adds the result of <code>super.equals()</code> to this builder.</p>\n     *\n     * @param superEquals  the result of calling <code>super.equals()</code>\n     * @return EqualsBuilder - used to chain calls.\n     * @since 2.0\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/apachecommons/EqualsBuilder.java",
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilder",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilder.append(java.lang.Object, java.lang.Object)",
        "snippet": "    public EqualsBuilder append(Object lhs, Object rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        Class lhsClass = lhs.getClass();\n        if (!lhsClass.isArray()) {\n            if (lhs instanceof java.math.BigDecimal && rhs instanceof java.math.BigDecimal) {\n                isEquals = (((java.math.BigDecimal) lhs).compareTo((java.math.BigDecimal) rhs) == 0);\n            } else {\n                // The simple case, not an array, just test the element\n                isEquals = lhs.equals(rhs);\n            }\n        } else if (lhs.getClass() != rhs.getClass()) {\n            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n            this.setEquals(false);\n        \n        // 'Switch' on type of array, to dispatch to the correct handler\n        // This handles multi dimensional arrays of the same depth\n        } else if (lhs instanceof long[]) {\n            append((long[]) lhs, (long[]) rhs);\n        } else if (lhs instanceof int[]) {\n            append((int[]) lhs, (int[]) rhs);\n        } else if (lhs instanceof short[]) {\n            append((short[]) lhs, (short[]) rhs);\n        } else if (lhs instanceof char[]) {\n            append((char[]) lhs, (char[]) rhs);\n        } else if (lhs instanceof byte[]) {\n            append((byte[]) lhs, (byte[]) rhs);\n        } else if (lhs instanceof double[]) {\n            append((double[]) lhs, (double[]) rhs);\n        } else if (lhs instanceof float[]) {\n            append((float[]) lhs, (float[]) rhs);\n        } else if (lhs instanceof boolean[]) {\n            append((boolean[]) lhs, (boolean[]) rhs);\n        } else {\n            // Not an array of primitives\n            append((Object[]) lhs, (Object[]) rhs);\n        }\n        return this;\n    }",
        "begin_line": 351,
        "end_line": 397,
        "comment": "\n     * <p>Test if two <code>Object</code>s are equal using their\n     * <code>equals</code> method.</p>\n     *\n     * @param lhs  the left hand object\n     * @param rhs  the right hand object\n     * @return EqualsBuilder - used to chain calls.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/apachecommons/EqualsBuilder.java",
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilder",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilder.append(long, long)",
        "snippet": "    public EqualsBuilder append(long lhs, long rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = (lhs == rhs);\n        return this;\n    }",
        "begin_line": 410,
        "end_line": 416,
        "comment": "\n     * <p>\n     * Test if two <code>long</code> s are equal.\n     * </p>\n     * \n     * @param lhs\n     *                  the left hand <code>long</code>\n     * @param rhs\n     *                  the right hand <code>long</code>\n     * @return EqualsBuilder - used to chain calls.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/apachecommons/EqualsBuilder.java",
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilder",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilder.append(int, int)",
        "snippet": "    public EqualsBuilder append(int lhs, int rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = (lhs == rhs);\n        return this;\n    }",
        "begin_line": 425,
        "end_line": 431,
        "comment": "\n     * <p>Test if two <code>int</code>s are equal.</p>\n     *\n     * @param lhs  the left hand <code>int</code>\n     * @param rhs  the right hand <code>int</code>\n     * @return EqualsBuilder - used to chain calls.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/apachecommons/EqualsBuilder.java",
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilder",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilder.append(short, short)",
        "snippet": "    public EqualsBuilder append(short lhs, short rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = (lhs == rhs);\n        return this;\n    }",
        "begin_line": 440,
        "end_line": 446,
        "comment": "\n     * <p>Test if two <code>short</code>s are equal.</p>\n     *\n     * @param lhs  the left hand <code>short</code>\n     * @param rhs  the right hand <code>short</code>\n     * @return EqualsBuilder - used to chain calls.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/apachecommons/EqualsBuilder.java",
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilder",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilder.append(char, char)",
        "snippet": "    public EqualsBuilder append(char lhs, char rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = (lhs == rhs);\n        return this;\n    }",
        "begin_line": 455,
        "end_line": 461,
        "comment": "\n     * <p>Test if two <code>char</code>s are equal.</p>\n     *\n     * @param lhs  the left hand <code>char</code>\n     * @param rhs  the right hand <code>char</code>\n     * @return EqualsBuilder - used to chain calls.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/apachecommons/EqualsBuilder.java",
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilder",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilder.append(byte, byte)",
        "snippet": "    public EqualsBuilder append(byte lhs, byte rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = (lhs == rhs);\n        return this;\n    }",
        "begin_line": 470,
        "end_line": 476,
        "comment": "\n     * <p>Test if two <code>byte</code>s are equal.</p>\n     *\n     * @param lhs  the left hand <code>byte</code>\n     * @param rhs  the right hand <code>byte</code>\n     * @return EqualsBuilder - used to chain calls.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/apachecommons/EqualsBuilder.java",
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilder",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilder.append(double, double)",
        "snippet": "    public EqualsBuilder append(double lhs, double rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        return append(Double.doubleToLongBits(lhs), Double.doubleToLongBits(rhs));\n    }",
        "begin_line": 491,
        "end_line": 496,
        "comment": "\n     * <p>Test if two <code>double</code>s are equal by testing that the\n     * pattern of bits returned by <code>doubleToLong</code> are equal.</p>\n     *\n     * <p>This handles NaNs, Infinities, and <code>-0.0</code>.</p>\n     *\n     * <p>It is compatible with the hash code generated by\n     * <code>HashCodeBuilder</code>.</p>\n     *\n     * @param lhs  the left hand <code>double</code>\n     * @param rhs  the right hand <code>double</code>\n     * @return EqualsBuilder - used to chain calls.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/apachecommons/EqualsBuilder.java",
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilder",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilder.append(float, float)",
        "snippet": "    public EqualsBuilder append(float lhs, float rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        return append(Float.floatToIntBits(lhs), Float.floatToIntBits(rhs));\n    }",
        "begin_line": 511,
        "end_line": 516,
        "comment": "\n     * <p>Test if two <code>float</code>s are equal byt testing that the\n     * pattern of bits returned by doubleToLong are equal.</p>\n     *\n     * <p>This handles NaNs, Infinities, and <code>-0.0</code>.</p>\n     *\n     * <p>It is compatible with the hash code generated by\n     * <code>HashCodeBuilder</code>.</p>\n     *\n     * @param lhs  the left hand <code>float</code>\n     * @param rhs  the right hand <code>float</code>\n     * @return EqualsBuilder - used to chain calls.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/apachecommons/EqualsBuilder.java",
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilder",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilder.append(boolean, boolean)",
        "snippet": "    public EqualsBuilder append(boolean lhs, boolean rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = (lhs == rhs);\n        return this;\n    }",
        "begin_line": 525,
        "end_line": 531,
        "comment": "\n     * <p>Test if two <code>booleans</code>s are equal.</p>\n     *\n     * @param lhs  the left hand <code>boolean</code>\n     * @param rhs  the right hand <code>boolean</code>\n     * @return EqualsBuilder - used to chain calls.\n      ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/apachecommons/EqualsBuilder.java",
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilder",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilder.append(java.lang.Object[], java.lang.Object[])",
        "snippet": "    public EqualsBuilder append(Object[] lhs, Object[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return this;\n        }\n        for (int i = 0; i < lhs.length && isEquals; ++i) {\n            append(lhs[i], rhs[i]);\n        }\n        return this;\n    }",
        "begin_line": 543,
        "end_line": 562,
        "comment": "\n     * <p>Performs a deep comparison of two <code>Object</code> arrays.</p>\n     *\n     * <p>This also will be called for the top level of\n     * multi-dimensional, ragged, and multi-typed arrays.</p>\n     *\n     * @param lhs  the left hand <code>Object[]</code>\n     * @param rhs  the right hand <code>Object[]</code>\n     * @return EqualsBuilder - used to chain calls.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/apachecommons/EqualsBuilder.java",
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilder",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilder.append(long[], long[])",
        "snippet": "    public EqualsBuilder append(long[] lhs, long[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return this;\n        }\n        for (int i = 0; i < lhs.length && isEquals; ++i) {\n            append(lhs[i], rhs[i]);\n        }\n        return this;\n    }",
        "begin_line": 574,
        "end_line": 593,
        "comment": "\n     * <p>Deep comparison of array of <code>long</code>. Length and all\n     * values are compared.</p>\n     *\n     * <p>The method {@link #append(long, long)} is used.</p>\n     *\n     * @param lhs  the left hand <code>long[]</code>\n     * @param rhs  the right hand <code>long[]</code>\n     * @return EqualsBuilder - used to chain calls.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/apachecommons/EqualsBuilder.java",
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilder",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilder.append(int[], int[])",
        "snippet": "    public EqualsBuilder append(int[] lhs, int[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return this;\n        }\n        for (int i = 0; i < lhs.length && isEquals; ++i) {\n            append(lhs[i], rhs[i]);\n        }\n        return this;\n    }",
        "begin_line": 605,
        "end_line": 624,
        "comment": "\n     * <p>Deep comparison of array of <code>int</code>. Length and all\n     * values are compared.</p>\n     *\n     * <p>The method {@link #append(int, int)} is used.</p>\n     *\n     * @param lhs  the left hand <code>int[]</code>\n     * @param rhs  the right hand <code>int[]</code>\n     * @return EqualsBuilder - used to chain calls.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/apachecommons/EqualsBuilder.java",
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilder",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilder.append(short[], short[])",
        "snippet": "    public EqualsBuilder append(short[] lhs, short[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return this;\n        }\n        for (int i = 0; i < lhs.length && isEquals; ++i) {\n            append(lhs[i], rhs[i]);\n        }\n        return this;\n    }",
        "begin_line": 636,
        "end_line": 655,
        "comment": "\n     * <p>Deep comparison of array of <code>short</code>. Length and all\n     * values are compared.</p>\n     *\n     * <p>The method {@link #append(short, short)} is used.</p>\n     *\n     * @param lhs  the left hand <code>short[]</code>\n     * @param rhs  the right hand <code>short[]</code>\n     * @return EqualsBuilder - used to chain calls.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/apachecommons/EqualsBuilder.java",
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilder",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilder.append(char[], char[])",
        "snippet": "    public EqualsBuilder append(char[] lhs, char[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return this;\n        }\n        for (int i = 0; i < lhs.length && isEquals; ++i) {\n            append(lhs[i], rhs[i]);\n        }\n        return this;\n    }",
        "begin_line": 667,
        "end_line": 686,
        "comment": "\n     * <p>Deep comparison of array of <code>char</code>. Length and all\n     * values are compared.</p>\n     *\n     * <p>The method {@link #append(char, char)} is used.</p>\n     *\n     * @param lhs  the left hand <code>char[]</code>\n     * @param rhs  the right hand <code>char[]</code>\n     * @return EqualsBuilder - used to chain calls.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/apachecommons/EqualsBuilder.java",
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilder",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilder.append(byte[], byte[])",
        "snippet": "    public EqualsBuilder append(byte[] lhs, byte[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return this;\n        }\n        for (int i = 0; i < lhs.length && isEquals; ++i) {\n            append(lhs[i], rhs[i]);\n        }\n        return this;\n    }",
        "begin_line": 698,
        "end_line": 717,
        "comment": "\n     * <p>Deep comparison of array of <code>byte</code>. Length and all\n     * values are compared.</p>\n     *\n     * <p>The method {@link #append(byte, byte)} is used.</p>\n     *\n     * @param lhs  the left hand <code>byte[]</code>\n     * @param rhs  the right hand <code>byte[]</code>\n     * @return EqualsBuilder - used to chain calls.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/apachecommons/EqualsBuilder.java",
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilder",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilder.append(double[], double[])",
        "snippet": "    public EqualsBuilder append(double[] lhs, double[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return this;\n        }\n        for (int i = 0; i < lhs.length && isEquals; ++i) {\n            append(lhs[i], rhs[i]);\n        }\n        return this;\n    }",
        "begin_line": 729,
        "end_line": 748,
        "comment": "\n     * <p>Deep comparison of array of <code>double</code>. Length and all\n     * values are compared.</p>\n     *\n     * <p>The method {@link #append(double, double)} is used.</p>\n     *\n     * @param lhs  the left hand <code>double[]</code>\n     * @param rhs  the right hand <code>double[]</code>\n     * @return EqualsBuilder - used to chain calls.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/apachecommons/EqualsBuilder.java",
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilder",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilder.append(float[], float[])",
        "snippet": "    public EqualsBuilder append(float[] lhs, float[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return this;\n        }\n        for (int i = 0; i < lhs.length && isEquals; ++i) {\n            append(lhs[i], rhs[i]);\n        }\n        return this;\n    }",
        "begin_line": 760,
        "end_line": 779,
        "comment": "\n     * <p>Deep comparison of array of <code>float</code>. Length and all\n     * values are compared.</p>\n     *\n     * <p>The method {@link #append(float, float)} is used.</p>\n     *\n     * @param lhs  the left hand <code>float[]</code>\n     * @param rhs  the right hand <code>float[]</code>\n     * @return EqualsBuilder - used to chain calls.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/apachecommons/EqualsBuilder.java",
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilder",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilder.append(boolean[], boolean[])",
        "snippet": "    public EqualsBuilder append(boolean[] lhs, boolean[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return this;\n        }\n        for (int i = 0; i < lhs.length && isEquals; ++i) {\n            append(lhs[i], rhs[i]);\n        }\n        return this;\n    }",
        "begin_line": 791,
        "end_line": 810,
        "comment": "\n     * <p>Deep comparison of array of <code>boolean</code>. Length and all\n     * values are compared.</p>\n     *\n     * <p>The method {@link #append(boolean, boolean)} is used.</p>\n     *\n     * @param lhs  the left hand <code>boolean[]</code>\n     * @param rhs  the right hand <code>boolean[]</code>\n     * @return EqualsBuilder - used to chain calls.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/apachecommons/EqualsBuilder.java",
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilder",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilder.isEquals()",
        "snippet": "    public boolean isEquals() {\n        return this.isEquals;\n    }",
        "begin_line": 818,
        "end_line": 820,
        "comment": "\n     * <p>Returns <code>true</code> if the fields that have been checked\n     * are all equal.</p>\n     *\n     * @return boolean\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/matchers/apachecommons/EqualsBuilder.java",
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilder",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilder.setEquals(boolean)",
        "snippet": "    protected void setEquals(boolean isEquals) {\n        this.isEquals = isEquals;\n    }",
        "begin_line": 828,
        "end_line": 830,
        "comment": "\n     * Sets the <code>isEquals</code> value.\n     * \n     * @param isEquals The value to set.\n     * @since 2.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/Invocation.java",
        "class_name": "org.mockito.internal.invocation.Invocation",
        "signature": "org.mockito.internal.invocation.Invocation.Invocation(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], int, org.mockito.internal.invocation.realmethod.RealMethod)",
        "snippet": "    public Invocation(Object mock, Method method, Object[] args, int sequenceNumber, RealMethod realMethod) {\n        this.mock = mock;\n        this.method = method;\n        this.realMethod = realMethod;\n        this.arguments = expandVarArgs(method.isVarArgs(), args);\n        this.rawArguments = args;\n        this.sequenceNumber = sequenceNumber;\n        this.location = new Location();\n    }",
        "begin_line": 48,
        "end_line": 56,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/Invocation.java",
        "class_name": "org.mockito.internal.invocation.Invocation",
        "signature": "org.mockito.internal.invocation.Invocation.expandVarArgs(boolean, java.lang.Object[])",
        "snippet": "    private static Object[] expandVarArgs(final boolean isVarArgs, final Object[] args) {\n        if (!isVarArgs || isVarArgs && args[args.length - 1] != null && !args[args.length - 1].getClass().isArray()) {\n            return args == null ? new Object[0] : args;\n        }\n\n        final int nonVarArgsCount = args.length - 1;\n        Object[] varArgs;\n        if (args[nonVarArgsCount] == null) {\n            // in case someone deliberately passed null varArg array\n            varArgs = new Object[] { null };\n        } else {\n            varArgs = ArrayEquals.createObjectArray(args[nonVarArgsCount]);\n        }\n        final int varArgsCount = varArgs.length;\n        Object[] newArgs = new Object[nonVarArgsCount + varArgsCount];\n        System.arraycopy(args, 0, newArgs, 0, nonVarArgsCount);\n        System.arraycopy(varArgs, 0, newArgs, nonVarArgsCount, varArgsCount);\n        return newArgs;\n    }",
        "begin_line": 60,
        "end_line": 78,
        "comment": " varArgs (1, a, b);",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/Invocation.java",
        "class_name": "org.mockito.internal.invocation.Invocation",
        "signature": "org.mockito.internal.invocation.Invocation.getMock()",
        "snippet": "    public Object getMock() {\n        return mock;\n    }",
        "begin_line": 80,
        "end_line": 82,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/Invocation.java",
        "class_name": "org.mockito.internal.invocation.Invocation",
        "signature": "org.mockito.internal.invocation.Invocation.getMethod()",
        "snippet": "    public Method getMethod() {\n        return method;\n    }",
        "begin_line": 84,
        "end_line": 86,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/Invocation.java",
        "class_name": "org.mockito.internal.invocation.Invocation",
        "signature": "org.mockito.internal.invocation.Invocation.getArguments()",
        "snippet": "    public Object[] getArguments() {\n        return arguments;\n    }",
        "begin_line": 88,
        "end_line": 90,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/Invocation.java",
        "class_name": "org.mockito.internal.invocation.Invocation",
        "signature": "org.mockito.internal.invocation.Invocation.markVerified()",
        "snippet": "    public void markVerified() {\n        verified = true;\n    }",
        "begin_line": 92,
        "end_line": 94,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/Invocation.java",
        "class_name": "org.mockito.internal.invocation.Invocation",
        "signature": "org.mockito.internal.invocation.Invocation.isVerified()",
        "snippet": "    public boolean isVerified() {\n        return verified;\n    }",
        "begin_line": 96,
        "end_line": 98,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/Invocation.java",
        "class_name": "org.mockito.internal.invocation.Invocation",
        "signature": "org.mockito.internal.invocation.Invocation.getSequenceNumber()",
        "snippet": "    public Integer getSequenceNumber() {\n        return sequenceNumber;\n    }",
        "begin_line": 100,
        "end_line": 102,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/Invocation.java",
        "class_name": "org.mockito.internal.invocation.Invocation",
        "signature": "org.mockito.internal.invocation.Invocation.markVerifiedInOrder()",
        "snippet": "    public void markVerifiedInOrder() {\n        this.markVerified();\n        this.verifiedInOrder = true;\n    }",
        "begin_line": 104,
        "end_line": 107,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/Invocation.java",
        "class_name": "org.mockito.internal.invocation.Invocation",
        "signature": "org.mockito.internal.invocation.Invocation.isVerifiedInOrder()",
        "snippet": "    public boolean isVerifiedInOrder() {\n        return verifiedInOrder;\n    }",
        "begin_line": 109,
        "end_line": 111,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/Invocation.java",
        "class_name": "org.mockito.internal.invocation.Invocation",
        "signature": "org.mockito.internal.invocation.Invocation.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object o) {\n        if (o == null || !o.getClass().equals(this.getClass())) {\n            return false;\n        }\n\n        Invocation other = (Invocation) o;\n\n        return this.mock.equals(other.mock) && this.method.equals(other.method) && this.equalArguments(other.arguments);\n    }",
        "begin_line": 113,
        "end_line": 121,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/Invocation.java",
        "class_name": "org.mockito.internal.invocation.Invocation",
        "signature": "org.mockito.internal.invocation.Invocation.equalArguments(java.lang.Object[])",
        "snippet": "    private boolean equalArguments(Object[] arguments) {\n        return Arrays.equals(arguments, this.arguments);\n    }",
        "begin_line": 123,
        "end_line": 125,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/Invocation.java",
        "class_name": "org.mockito.internal.invocation.Invocation",
        "signature": "org.mockito.internal.invocation.Invocation.hashCode()",
        "snippet": "    public int hashCode() {\n        throw new RuntimeException(\"hashCode() is not implemented\");\n    }",
        "begin_line": 127,
        "end_line": 129,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/Invocation.java",
        "class_name": "org.mockito.internal.invocation.Invocation",
        "signature": "org.mockito.internal.invocation.Invocation.toString()",
        "snippet": "    public String toString() {\n        return toString(argumentsToMatchers(), new PrintSettings());\n    }",
        "begin_line": 131,
        "end_line": 133,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/Invocation.java",
        "class_name": "org.mockito.internal.invocation.Invocation",
        "signature": "org.mockito.internal.invocation.Invocation.toString(java.util.List<org.hamcrest.Matcher>, org.mockito.internal.reporting.PrintSettings)",
        "snippet": "    protected String toString(List<Matcher> matchers, PrintSettings printSettings) {\n        MatchersPrinter matchersPrinter = new MatchersPrinter();\n        String method = qualifiedMethodName();\n        String invocation = method + matchersPrinter.getArgumentsLine(matchers, printSettings);\n        if (printSettings.isMultiline() || (!matchers.isEmpty() && invocation.length() > MAX_LINE_LENGTH)) {\n            return method + matchersPrinter.getArgumentsBlock(matchers, printSettings);\n        } else {\n            return invocation;\n        }\n    }",
        "begin_line": 135,
        "end_line": 144,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/Invocation.java",
        "class_name": "org.mockito.internal.invocation.Invocation",
        "signature": "org.mockito.internal.invocation.Invocation.qualifiedMethodName()",
        "snippet": "    private String qualifiedMethodName() {\n        return new MockUtil().getMockName(mock) + \".\" + method.getName();\n    }",
        "begin_line": 146,
        "end_line": 148,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/Invocation.java",
        "class_name": "org.mockito.internal.invocation.Invocation",
        "signature": "org.mockito.internal.invocation.Invocation.argumentsToMatchers()",
        "snippet": "    protected List<Matcher> argumentsToMatchers() {\n        List<Matcher> matchers = new ArrayList<Matcher>(arguments.length);\n        for (Object arg : arguments) {\n            if (arg != null && arg.getClass().isArray()) {\n                matchers.add(new ArrayEquals(arg));\n            } else {\n                matchers.add(new Equals(arg));\n            }\n        }\n        return matchers;\n    }",
        "begin_line": 150,
        "end_line": 160,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/Invocation.java",
        "class_name": "org.mockito.internal.invocation.Invocation",
        "signature": "org.mockito.internal.invocation.Invocation.isToString(org.mockito.invocation.InvocationOnMock)",
        "snippet": "    public static boolean isToString(InvocationOnMock invocation) {\n        return isToString(invocation.getMethod());\n    }",
        "begin_line": 162,
        "end_line": 164,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/Invocation.java",
        "class_name": "org.mockito.internal.invocation.Invocation",
        "signature": "org.mockito.internal.invocation.Invocation.isToString(java.lang.reflect.Method)",
        "snippet": "    public static boolean isToString(Method method) {\n        return method.getReturnType() == String.class && method.getParameterTypes().length == 0\n                && method.getName().equals(\"toString\");\n    }",
        "begin_line": 166,
        "end_line": 169,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/Invocation.java",
        "class_name": "org.mockito.internal.invocation.Invocation",
        "signature": "org.mockito.internal.invocation.Invocation.isValidException(java.lang.Throwable)",
        "snippet": "    public boolean isValidException(Throwable throwable) {\n        Class<?>[] exceptions = this.getMethod().getExceptionTypes();\n        Class<?> throwableClass = throwable.getClass();\n        for (Class<?> exception : exceptions) {\n            if (exception.isAssignableFrom(throwableClass)) {\n                return true;\n            }\n        }\n\n        return false;\n    }",
        "begin_line": 171,
        "end_line": 181,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/Invocation.java",
        "class_name": "org.mockito.internal.invocation.Invocation",
        "signature": "org.mockito.internal.invocation.Invocation.isValidReturnType(java.lang.Class)",
        "snippet": "    public boolean isValidReturnType(Class clazz) {\n        if (method.getReturnType().isPrimitive()) {\n            return Primitives.primitiveTypeOf(clazz) == method.getReturnType();\n        } else {\n            return method.getReturnType().isAssignableFrom(clazz);\n        }\n    }",
        "begin_line": 183,
        "end_line": 189,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/Invocation.java",
        "class_name": "org.mockito.internal.invocation.Invocation",
        "signature": "org.mockito.internal.invocation.Invocation.isVoid()",
        "snippet": "    public boolean isVoid() {\n        return this.method.getReturnType() == Void.TYPE;\n    }",
        "begin_line": 191,
        "end_line": 193,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/Invocation.java",
        "class_name": "org.mockito.internal.invocation.Invocation",
        "signature": "org.mockito.internal.invocation.Invocation.printMethodReturnType()",
        "snippet": "    public String printMethodReturnType() {\n        return method.getReturnType().getSimpleName();\n    }",
        "begin_line": 195,
        "end_line": 197,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/Invocation.java",
        "class_name": "org.mockito.internal.invocation.Invocation",
        "signature": "org.mockito.internal.invocation.Invocation.getMethodName()",
        "snippet": "    public String getMethodName() {\n        return method.getName();\n    }",
        "begin_line": 199,
        "end_line": 201,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/Invocation.java",
        "class_name": "org.mockito.internal.invocation.Invocation",
        "signature": "org.mockito.internal.invocation.Invocation.returnsPrimitive()",
        "snippet": "    public boolean returnsPrimitive() {\n        return method.getReturnType().isPrimitive();\n    }",
        "begin_line": 203,
        "end_line": 205,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/Invocation.java",
        "class_name": "org.mockito.internal.invocation.Invocation",
        "signature": "org.mockito.internal.invocation.Invocation.getLocation()",
        "snippet": "    public Location getLocation() {\n        return location;\n    }",
        "begin_line": 207,
        "end_line": 209,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/Invocation.java",
        "class_name": "org.mockito.internal.invocation.Invocation",
        "signature": "org.mockito.internal.invocation.Invocation.getArgumentsCount()",
        "snippet": "    public int getArgumentsCount() {\n        return arguments.length;\n    }",
        "begin_line": 211,
        "end_line": 213,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/Invocation.java",
        "class_name": "org.mockito.internal.invocation.Invocation",
        "signature": "org.mockito.internal.invocation.Invocation.getRawArguments()",
        "snippet": "    public Object[] getRawArguments() {\n        return this.rawArguments;\n    }",
        "begin_line": 215,
        "end_line": 217,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/Invocation.java",
        "class_name": "org.mockito.internal.invocation.Invocation",
        "signature": "org.mockito.internal.invocation.Invocation.callRealMethod()",
        "snippet": "    public Object callRealMethod() throws Throwable {\n        return realMethod.invoke(mock, arguments);\n    }",
        "begin_line": 219,
        "end_line": 221,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/Invocation.java",
        "class_name": "org.mockito.internal.invocation.Invocation",
        "signature": "org.mockito.internal.invocation.Invocation.toString(org.mockito.internal.reporting.PrintSettings)",
        "snippet": "    public String toString(PrintSettings printSettings) {\n        return toString(argumentsToMatchers(), printSettings);\n    }",
        "begin_line": 223,
        "end_line": 225,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/MatchersBinder.java",
        "class_name": "org.mockito.internal.invocation.MatchersBinder",
        "signature": "org.mockito.internal.invocation.MatchersBinder.bindMatchers(org.mockito.internal.progress.ArgumentMatcherStorage, org.mockito.internal.invocation.Invocation)",
        "snippet": "    public InvocationMatcher bindMatchers(ArgumentMatcherStorage argumentMatcherStorage, Invocation invocation) {\n        List<Matcher> lastMatchers = argumentMatcherStorage.pullMatchers();\n        validateMatchers(invocation, lastMatchers);\n\n        InvocationMatcher invocationWithMatchers = new InvocationMatcher(invocation, lastMatchers);\n        return invocationWithMatchers;\n    }",
        "begin_line": 16,
        "end_line": 22,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/MatchersBinder.java",
        "class_name": "org.mockito.internal.invocation.MatchersBinder",
        "signature": "org.mockito.internal.invocation.MatchersBinder.validateMatchers(org.mockito.internal.invocation.Invocation, java.util.List<org.hamcrest.Matcher>)",
        "snippet": "    private void validateMatchers(Invocation invocation, List<Matcher> matchers) {\n        if (!matchers.isEmpty()) {\n            int recordedMatchersSize = matchers.size();\n            int expectedMatchersSize = invocation.getArgumentsCount();\n            if (expectedMatchersSize != recordedMatchersSize) {\n                new Reporter().invalidUseOfMatchers(expectedMatchersSize, recordedMatchersSize);\n            }\n        }\n    }",
        "begin_line": 24,
        "end_line": 32,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/AllInvocationsFinder.java",
        "class_name": "org.mockito.internal.invocation.AllInvocationsFinder",
        "signature": "org.mockito.internal.invocation.AllInvocationsFinder.getAllInvocations(java.util.List<? extends java.lang.Object>)",
        "snippet": "    public List<Invocation> getAllInvocations(List<? extends Object> mocks) {\n        Set<Invocation> invocationsInOrder = new TreeSet<Invocation>(new SequenceNumberComparator());\n        for (Object mock : mocks) {\n            List<Invocation> fromSingleMock = new MockUtil().getMockHandler(mock).getRegisteredInvocations();\n            invocationsInOrder.addAll(fromSingleMock);\n        }\n        \n        return new LinkedList<Invocation>(invocationsInOrder);\n    }",
        "begin_line": 23,
        "end_line": 31,
        "comment": "\n     * gets all invocations from mocks. Invocations are ordered earlier first. \n     * \n     * @param mocks\n     * @return invocations\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/AllInvocationsFinder.java",
        "class_name": "org.mockito.internal.invocation.AllInvocationsFinder",
        "signature": "org.mockito.internal.invocation.AllInvocationsFinder.SequenceNumberComparator.compare(org.mockito.internal.invocation.Invocation, org.mockito.internal.invocation.Invocation)",
        "snippet": "        public int compare(Invocation o1, Invocation o2) {\n            int comparison = o1.getSequenceNumber().compareTo(o2.getSequenceNumber());\n            assert comparison != 0 : \"sequence number has to be globally unique\";\n            return comparison;\n        }",
        "begin_line": 34,
        "end_line": 38,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/InvocationsFinder.java",
        "class_name": "org.mockito.internal.invocation.InvocationsFinder",
        "signature": "org.mockito.internal.invocation.InvocationsFinder.findInvocations(java.util.List<org.mockito.internal.invocation.Invocation>, org.mockito.internal.invocation.InvocationMatcher)",
        "snippet": "    public List<Invocation> findInvocations(List<Invocation> invocations, InvocationMatcher wanted) {\n        return ListUtil.filter(invocations, new RemoveNotMatching(wanted));\n    }",
        "begin_line": 16,
        "end_line": 18,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/InvocationsFinder.java",
        "class_name": "org.mockito.internal.invocation.InvocationsFinder",
        "signature": "org.mockito.internal.invocation.InvocationsFinder.findAllMatchingUnverifiedChunks(java.util.List<org.mockito.internal.invocation.Invocation>, org.mockito.internal.invocation.InvocationMatcher)",
        "snippet": "    public List<Invocation> findAllMatchingUnverifiedChunks(List<Invocation> invocations, InvocationMatcher wanted) {\n        List<Invocation> unverified = removeVerifiedInOrder(invocations);\n        return ListUtil.filter(unverified, new RemoveNotMatching(wanted));\n    }",
        "begin_line": 20,
        "end_line": 23,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/InvocationsFinder.java",
        "class_name": "org.mockito.internal.invocation.InvocationsFinder",
        "signature": "org.mockito.internal.invocation.InvocationsFinder.findMatchingChunk(java.util.List<org.mockito.internal.invocation.Invocation>, org.mockito.internal.invocation.InvocationMatcher, int)",
        "snippet": "    public List<Invocation> findMatchingChunk(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> unverified = removeVerifiedInOrder(invocations);\n        List<Invocation> firstChunk = getFirstMatchingChunk(wanted, unverified);\n        \n        if (wantedCount != firstChunk.size()) {\n            return this.findAllMatchingUnverifiedChunks(invocations, wanted);\n        } else {\n            return firstChunk;\n        }\n    }",
        "begin_line": 40,
        "end_line": 49,
        "comment": "\n     * some examples how it works:\n     * \n     * Given invocations sequence:\n     * 1,1,2,1\n     * \n     * if wanted is 1 and mode is times(2) then returns\n     * 1,1  \n     * \n     * if wanted is 1 and mode is atLeast() then returns\n     * 1,1,1\n     * \n     * if wanted is 1 and mode is times(x), where x != 2 then returns\n     * 1,1,1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/InvocationsFinder.java",
        "class_name": "org.mockito.internal.invocation.InvocationsFinder",
        "signature": "org.mockito.internal.invocation.InvocationsFinder.getFirstMatchingChunk(org.mockito.internal.invocation.InvocationMatcher, java.util.List<org.mockito.internal.invocation.Invocation>)",
        "snippet": "    private List<Invocation> getFirstMatchingChunk(InvocationMatcher wanted, List<Invocation> unverified) {\n        List<Invocation> firstChunk = new LinkedList<Invocation>();\n        for (Invocation invocation : unverified) {\n            if (wanted.matches(invocation)) {\n                firstChunk.add(invocation);\n            } else if (!firstChunk.isEmpty()) {\n                break;\n            }\n        }\n        return firstChunk;\n    }",
        "begin_line": 51,
        "end_line": 61,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/InvocationsFinder.java",
        "class_name": "org.mockito.internal.invocation.InvocationsFinder",
        "signature": "org.mockito.internal.invocation.InvocationsFinder.findSimilarInvocation(java.util.List<org.mockito.internal.invocation.Invocation>, org.mockito.internal.invocation.InvocationMatcher)",
        "snippet": "    public Invocation findSimilarInvocation(List<Invocation> invocations, InvocationMatcher wanted) {\n        Invocation firstSimilar = null;\n        for (Invocation invocation : invocations) {\n            if (!wanted.hasSimilarMethod(invocation)) {\n                continue;\n            }\n            if (firstSimilar == null) {\n                firstSimilar = invocation;\n            }\n            if (wanted.hasSameMethod(invocation)) {\n                return invocation;\n            }\n        }\n        \n        return firstSimilar;\n    }",
        "begin_line": 63,
        "end_line": 78,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/InvocationsFinder.java",
        "class_name": "org.mockito.internal.invocation.InvocationsFinder",
        "signature": "org.mockito.internal.invocation.InvocationsFinder.findFirstUnverified(java.util.List<org.mockito.internal.invocation.Invocation>)",
        "snippet": "    public Invocation findFirstUnverified(List<Invocation> invocations) {\n        return findFirstUnverified(invocations, null);\n    }",
        "begin_line": 80,
        "end_line": 82,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/InvocationsFinder.java",
        "class_name": "org.mockito.internal.invocation.InvocationsFinder",
        "signature": "org.mockito.internal.invocation.InvocationsFinder.findFirstUnverified(java.util.List<org.mockito.internal.invocation.Invocation>, java.lang.Object)",
        "snippet": "    Invocation findFirstUnverified(List<Invocation> invocations, Object mock) {\n        for (Invocation i : invocations) {\n            boolean mockIsValid = mock == null || mock == i.getMock();\n            if (!i.isVerified() && mockIsValid) {\n                return i;\n            }\n        }\n        return null;\n    }",
        "begin_line": 84,
        "end_line": 92,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/InvocationsFinder.java",
        "class_name": "org.mockito.internal.invocation.InvocationsFinder",
        "signature": "org.mockito.internal.invocation.InvocationsFinder.getLastLocation(java.util.List<org.mockito.internal.invocation.Invocation>)",
        "snippet": "    public Location getLastLocation(List<Invocation> invocations) {\n        if (invocations.isEmpty()) {\n            return null;\n        } else {\n            Invocation last = invocations.get(invocations.size() - 1);\n            return last.getLocation();\n        }\n    }",
        "begin_line": 94,
        "end_line": 101,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/InvocationsFinder.java",
        "class_name": "org.mockito.internal.invocation.InvocationsFinder",
        "signature": "org.mockito.internal.invocation.InvocationsFinder.findPreviousVerifiedInOrder(java.util.List<org.mockito.internal.invocation.Invocation>)",
        "snippet": "    public Invocation findPreviousVerifiedInOrder(List<Invocation> invocations) {\n        LinkedList<Invocation> verifiedOnly = ListUtil.filter(invocations, new RemoveUnverifiedInOrder());\n        \n        if (verifiedOnly.isEmpty()) {\n            return null;\n        } else {\n            return verifiedOnly.getLast();\n        }\n    }",
        "begin_line": 103,
        "end_line": 111,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/InvocationsFinder.java",
        "class_name": "org.mockito.internal.invocation.InvocationsFinder",
        "signature": "org.mockito.internal.invocation.InvocationsFinder.removeVerifiedInOrder(java.util.List<org.mockito.internal.invocation.Invocation>)",
        "snippet": "    private List<Invocation> removeVerifiedInOrder(List<Invocation> invocations) {\n        List<Invocation> unverified = new LinkedList<Invocation>();\n        for (Invocation i : invocations) {\n            if (i.isVerifiedInOrder()) {\n                unverified.clear();\n            } else {\n                unverified.add(i);\n            }\n        }\n        return unverified;\n    }",
        "begin_line": 113,
        "end_line": 123,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/InvocationsFinder.java",
        "class_name": "org.mockito.internal.invocation.InvocationsFinder",
        "signature": "org.mockito.internal.invocation.InvocationsFinder.RemoveNotMatching.RemoveNotMatching(org.mockito.internal.invocation.InvocationMatcher)",
        "snippet": "        private RemoveNotMatching(InvocationMatcher wanted) {\n            this.wanted = wanted;\n        }",
        "begin_line": 128,
        "end_line": 130,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/InvocationsFinder.java",
        "class_name": "org.mockito.internal.invocation.InvocationsFinder",
        "signature": "org.mockito.internal.invocation.InvocationsFinder.RemoveNotMatching.isOut(org.mockito.internal.invocation.Invocation)",
        "snippet": "        public boolean isOut(Invocation invocation) {\n            return !wanted.matches(invocation);\n        }",
        "begin_line": 132,
        "end_line": 134,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/InvocationsFinder.java",
        "class_name": "org.mockito.internal.invocation.InvocationsFinder",
        "signature": "org.mockito.internal.invocation.InvocationsFinder.RemoveUnverifiedInOrder.isOut(org.mockito.internal.invocation.Invocation)",
        "snippet": "        public boolean isOut(Invocation invocation) {\n            return !invocation.isVerifiedInOrder();\n        }",
        "begin_line": 138,
        "end_line": 140,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/InvocationMatcher.java",
        "class_name": "org.mockito.internal.invocation.InvocationMatcher",
        "signature": "org.mockito.internal.invocation.InvocationMatcher.InvocationMatcher(org.mockito.internal.invocation.Invocation, java.util.List<org.hamcrest.Matcher>)",
        "snippet": "    public InvocationMatcher(Invocation invocation, List<Matcher> matchers) {\n        this.invocation = invocation;\n        if (matchers.isEmpty()) {\n            this.matchers = invocation.argumentsToMatchers();\n        } else {\n            this.matchers = matchers;\n        }\n    }",
        "begin_line": 23,
        "end_line": 30,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/InvocationMatcher.java",
        "class_name": "org.mockito.internal.invocation.InvocationMatcher",
        "signature": "org.mockito.internal.invocation.InvocationMatcher.InvocationMatcher(org.mockito.internal.invocation.Invocation)",
        "snippet": "    public InvocationMatcher(Invocation invocation) {\n        this(invocation, Collections.<Matcher>emptyList());\n    }",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/InvocationMatcher.java",
        "class_name": "org.mockito.internal.invocation.InvocationMatcher",
        "signature": "org.mockito.internal.invocation.InvocationMatcher.getMethod()",
        "snippet": "    public Method getMethod() {\n        return invocation.getMethod();\n    }",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/InvocationMatcher.java",
        "class_name": "org.mockito.internal.invocation.InvocationMatcher",
        "signature": "org.mockito.internal.invocation.InvocationMatcher.getInvocation()",
        "snippet": "    public Invocation getInvocation() {\n        return this.invocation;\n    }",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/InvocationMatcher.java",
        "class_name": "org.mockito.internal.invocation.InvocationMatcher",
        "signature": "org.mockito.internal.invocation.InvocationMatcher.getMatchers()",
        "snippet": "    public List<Matcher> getMatchers() {\n        return this.matchers;\n    }",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/InvocationMatcher.java",
        "class_name": "org.mockito.internal.invocation.InvocationMatcher",
        "signature": "org.mockito.internal.invocation.InvocationMatcher.toString()",
        "snippet": "    public String toString() {\n        return invocation.toString(matchers, new PrintSettings());\n    }",
        "begin_line": 48,
        "end_line": 50,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/InvocationMatcher.java",
        "class_name": "org.mockito.internal.invocation.InvocationMatcher",
        "signature": "org.mockito.internal.invocation.InvocationMatcher.matches(org.mockito.internal.invocation.Invocation)",
        "snippet": "    public boolean matches(Invocation actual) {\n        return invocation.getMock().equals(actual.getMock())\n                && hasSameMethod(actual)\n                && (argumentsMatch(actual.getArguments()));\n    }",
        "begin_line": 52,
        "end_line": 56,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/InvocationMatcher.java",
        "class_name": "org.mockito.internal.invocation.InvocationMatcher",
        "signature": "org.mockito.internal.invocation.InvocationMatcher.argumentsMatch(java.lang.Object[])",
        "snippet": "    private boolean argumentsMatch(Object[] actualArgs) {\n        if (actualArgs.length != matchers.size()) {\n            return false;\n        }\n        for (int i = 0; i < actualArgs.length; i++) {\n            if (!matchers.get(i).matches(actualArgs[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
        "begin_line": 58,
        "end_line": 68,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/InvocationMatcher.java",
        "class_name": "org.mockito.internal.invocation.InvocationMatcher",
        "signature": "org.mockito.internal.invocation.InvocationMatcher.safelyArgumentsMatch(java.lang.Object[])",
        "snippet": "    private boolean safelyArgumentsMatch(Object[] actualArgs) {\n        try {\n            return argumentsMatch(actualArgs);\n        } catch (Throwable t) {\n            return false;\n        }\n    }",
        "begin_line": 70,
        "end_line": 76,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/InvocationMatcher.java",
        "class_name": "org.mockito.internal.invocation.InvocationMatcher",
        "signature": "org.mockito.internal.invocation.InvocationMatcher.hasSimilarMethod(org.mockito.internal.invocation.Invocation)",
        "snippet": "    public boolean hasSimilarMethod(Invocation candidate) {\n        String wantedMethodName = getMethod().getName();\n        String currentMethodName = candidate.getMethod().getName();\n        \n        final boolean methodNameEquals = wantedMethodName.equals(currentMethodName);\n        final boolean isUnverified = !candidate.isVerified();\n        final boolean mockIsTheSame = getInvocation().getMock() == candidate.getMock();\n        final boolean methodEquals = hasSameMethod(candidate);\n        final boolean overloadedButSameArgs = !methodEquals && safelyArgumentsMatch(candidate.getArguments());        \n        \n        if (methodNameEquals && isUnverified && mockIsTheSame && !overloadedButSameArgs) {\n            return true;\n        }\n        \n        return false;\n    }",
        "begin_line": 82,
        "end_line": 97,
        "comment": "\n     * similar means the same method name, same mock, unverified \n     * and: if arguments are the same cannot be overloaded\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/InvocationMatcher.java",
        "class_name": "org.mockito.internal.invocation.InvocationMatcher",
        "signature": "org.mockito.internal.invocation.InvocationMatcher.hasSameMethod(org.mockito.internal.invocation.Invocation)",
        "snippet": "    public boolean hasSameMethod(Invocation candidate) {\n        return invocation.getMethod().equals(candidate.getMethod());\n    }",
        "begin_line": 99,
        "end_line": 101,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/InvocationMatcher.java",
        "class_name": "org.mockito.internal.invocation.InvocationMatcher",
        "signature": "org.mockito.internal.invocation.InvocationMatcher.getLocation()",
        "snippet": "    public Location getLocation() {\n        return invocation.getLocation();\n    }",
        "begin_line": 103,
        "end_line": 105,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/InvocationMatcher.java",
        "class_name": "org.mockito.internal.invocation.InvocationMatcher",
        "signature": "org.mockito.internal.invocation.InvocationMatcher.toString(org.mockito.internal.reporting.PrintSettings)",
        "snippet": "    public String toString(PrintSettings printSettings) {\n        return invocation.toString(matchers, printSettings);\n    }",
        "begin_line": 107,
        "end_line": 109,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/realmethod/CGLIBProxyRealMethod.java",
        "class_name": "org.mockito.internal.invocation.realmethod.CGLIBProxyRealMethod",
        "signature": "org.mockito.internal.invocation.realmethod.CGLIBProxyRealMethod.CGLIBProxyRealMethod(org.mockito.cglib.proxy.MethodProxy)",
        "snippet": "    public CGLIBProxyRealMethod(MethodProxy methodProxy) {\n        this.methodProxy = methodProxy;\n    }",
        "begin_line": 14,
        "end_line": 16,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/realmethod/CGLIBProxyRealMethod.java",
        "class_name": "org.mockito.internal.invocation.realmethod.CGLIBProxyRealMethod",
        "signature": "org.mockito.internal.invocation.realmethod.CGLIBProxyRealMethod.invoke(java.lang.Object, java.lang.Object[])",
        "snippet": "    public Object invoke(Object target, Object[] arguments) throws Throwable {\n        return methodProxy.invokeSuper(target, arguments);\n    }",
        "begin_line": 18,
        "end_line": 20,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/realmethod/CGLIBProxyRealMethod.java",
        "class_name": "org.mockito.internal.invocation.realmethod.CGLIBProxyRealMethod",
        "signature": "org.mockito.internal.invocation.realmethod.CGLIBProxyRealMethod.getMethodProxy()",
        "snippet": "    public MethodProxy getMethodProxy() {\n        return methodProxy;\n    }",
        "begin_line": 22,
        "end_line": 24,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/realmethod/HasCGLIBMethodProxy.java",
        "class_name": "org.mockito.internal.invocation.realmethod.HasCGLIBMethodProxy",
        "signature": "org.mockito.internal.invocation.realmethod.HasCGLIBMethodProxy.getMethodProxy()",
        "snippet": "    MethodProxy getMethodProxy();",
        "begin_line": 11,
        "end_line": 11,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/realmethod/FilteredCGLIBProxyRealMethod.java",
        "class_name": "org.mockito.internal.invocation.realmethod.FilteredCGLIBProxyRealMethod",
        "signature": "org.mockito.internal.invocation.realmethod.FilteredCGLIBProxyRealMethod.FilteredCGLIBProxyRealMethod(org.mockito.cglib.proxy.MethodProxy)",
        "snippet": "    public FilteredCGLIBProxyRealMethod(MethodProxy methodProxy) {\n        this(new CGLIBProxyRealMethod(methodProxy));\n    }",
        "begin_line": 14,
        "end_line": 16,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/realmethod/FilteredCGLIBProxyRealMethod.java",
        "class_name": "org.mockito.internal.invocation.realmethod.FilteredCGLIBProxyRealMethod",
        "signature": "org.mockito.internal.invocation.realmethod.FilteredCGLIBProxyRealMethod.FilteredCGLIBProxyRealMethod(org.mockito.internal.invocation.realmethod.RealMethod)",
        "snippet": "    public FilteredCGLIBProxyRealMethod(RealMethod realMethod) {\n        this.realMethod = realMethod;\n    }",
        "begin_line": 18,
        "end_line": 20,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/realmethod/FilteredCGLIBProxyRealMethod.java",
        "class_name": "org.mockito.internal.invocation.realmethod.FilteredCGLIBProxyRealMethod",
        "signature": "org.mockito.internal.invocation.realmethod.FilteredCGLIBProxyRealMethod.invoke(java.lang.Object, java.lang.Object[])",
        "snippet": "    public Object invoke(Object target, Object[] arguments) throws Throwable {\n        try {\n            return realMethod.invoke(target, arguments);\n        } catch (Throwable t) {\n            new ConditionalStackTraceFilter().filter(t);\n            throw t;\n        }\n    }",
        "begin_line": 22,
        "end_line": 29,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/realmethod/FilteredCGLIBProxyRealMethod.java",
        "class_name": "org.mockito.internal.invocation.realmethod.FilteredCGLIBProxyRealMethod",
        "signature": "org.mockito.internal.invocation.realmethod.FilteredCGLIBProxyRealMethod.getMethodProxy()",
        "snippet": "    public MethodProxy getMethodProxy() {\n        return ((HasCGLIBMethodProxy) realMethod).getMethodProxy();\n    }",
        "begin_line": 31,
        "end_line": 33,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/invocation/realmethod/RealMethod.java",
        "class_name": "org.mockito.internal.invocation.realmethod.RealMethod",
        "signature": "org.mockito.internal.invocation.realmethod.RealMethod.invoke(java.lang.Object, java.lang.Object[])",
        "snippet": "    Object invoke(Object target, Object[] arguments) throws Throwable;",
        "begin_line": 9,
        "end_line": 9,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/StubberImpl.java",
        "class_name": "org.mockito.internal.stubbing.StubberImpl",
        "signature": "org.mockito.internal.stubbing.StubberImpl.when(T)",
        "snippet": "    public <T> T when(T mock) {\n        MockUtil mockUtil = new MockUtil();\n        \n        if (mock == null) {\n            reporter.nullPassedToWhenMethod();\n        } else {\n            if (!mockUtil.isMock(mock)) {\n                reporter.notAMockPassedToWhenMethod();\n            }\n        }\n        \n        mockUtil.getMockHandler(mock).setAnswersForStubbing(answers);\n        return mock;\n    }",
        "begin_line": 24,
        "end_line": 37,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/StubberImpl.java",
        "class_name": "org.mockito.internal.stubbing.StubberImpl",
        "signature": "org.mockito.internal.stubbing.StubberImpl.doReturn(java.lang.Object)",
        "snippet": "    public Stubber doReturn(Object toBeReturned) {\n        answers.add(new Returns(toBeReturned));\n        return this;\n    }",
        "begin_line": 39,
        "end_line": 42,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/StubberImpl.java",
        "class_name": "org.mockito.internal.stubbing.StubberImpl",
        "signature": "org.mockito.internal.stubbing.StubberImpl.doThrow(java.lang.Throwable)",
        "snippet": "    public Stubber doThrow(Throwable toBeThrown) {\n        answers.add(new ThrowsException(toBeThrown));\n        return this;\n    }",
        "begin_line": 44,
        "end_line": 47,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/StubberImpl.java",
        "class_name": "org.mockito.internal.stubbing.StubberImpl",
        "signature": "org.mockito.internal.stubbing.StubberImpl.doNothing()",
        "snippet": "    public Stubber doNothing() {\n        answers.add(new DoesNothing());\n        return this;\n    }",
        "begin_line": 49,
        "end_line": 52,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/StubberImpl.java",
        "class_name": "org.mockito.internal.stubbing.StubberImpl",
        "signature": "org.mockito.internal.stubbing.StubberImpl.doAnswer(org.mockito.stubbing.Answer)",
        "snippet": "    public Stubber doAnswer(Answer answer) {\n        answers.add(answer);\n        return this;\n    }",
        "begin_line": 54,
        "end_line": 57,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/MockitoStubber.java",
        "class_name": "org.mockito.internal.stubbing.MockitoStubber",
        "signature": "org.mockito.internal.stubbing.MockitoStubber.MockitoStubber(org.mockito.internal.progress.MockingProgress)",
        "snippet": "    public MockitoStubber(MockingProgress mockingProgress) {\n        this.mockingProgress = mockingProgress;\n    }",
        "begin_line": 26,
        "end_line": 28,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/MockitoStubber.java",
        "class_name": "org.mockito.internal.stubbing.MockitoStubber",
        "signature": "org.mockito.internal.stubbing.MockitoStubber.setInvocationForPotentialStubbing(org.mockito.internal.invocation.InvocationMatcher)",
        "snippet": "    public void setInvocationForPotentialStubbing(InvocationMatcher invocation) {\n        this.invocationForStubbing = invocation;\n    }",
        "begin_line": 30,
        "end_line": 32,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/MockitoStubber.java",
        "class_name": "org.mockito.internal.stubbing.MockitoStubber",
        "signature": "org.mockito.internal.stubbing.MockitoStubber.addAnswer(org.mockito.stubbing.Answer)",
        "snippet": "    public void addAnswer(Answer answer) {\n        addAnswer(answer, false);\n    }",
        "begin_line": 34,
        "end_line": 36,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/MockitoStubber.java",
        "class_name": "org.mockito.internal.stubbing.MockitoStubber",
        "signature": "org.mockito.internal.stubbing.MockitoStubber.addConsecutiveAnswer(org.mockito.stubbing.Answer)",
        "snippet": "    public void addConsecutiveAnswer(Answer answer) {\n        addAnswer(answer, true);\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/MockitoStubber.java",
        "class_name": "org.mockito.internal.stubbing.MockitoStubber",
        "signature": "org.mockito.internal.stubbing.MockitoStubber.addAnswer(org.mockito.stubbing.Answer, boolean)",
        "snippet": "    private void addAnswer(Answer answer, boolean isConsecutive) {\n        Invocation invocation = invocationForStubbing.getInvocation();\n        mockingProgress.stubbingCompleted(invocation);\n        AnswersValidator answersValidator = new AnswersValidator();\n        answersValidator.validate(answer, invocation);\n        \n        if (isConsecutive) {\n            stubbed.getFirst().addAnswer(answer);\n        } else {\n            stubbed.addFirst(new StubbedInvocationMatcher(invocationForStubbing, answer));\n        }\n    } ",
        "begin_line": 42,
        "end_line": 53,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/MockitoStubber.java",
        "class_name": "org.mockito.internal.stubbing.MockitoStubber",
        "signature": "org.mockito.internal.stubbing.MockitoStubber.answerTo(org.mockito.internal.invocation.Invocation)",
        "snippet": "    Object answerTo(Invocation invocation) throws Throwable {\n        return findAnswerFor(invocation).answer(invocation);\n    }",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/MockitoStubber.java",
        "class_name": "org.mockito.internal.stubbing.MockitoStubber",
        "signature": "org.mockito.internal.stubbing.MockitoStubber.findAnswerFor(org.mockito.internal.invocation.Invocation)",
        "snippet": "    public Answer<?> findAnswerFor(Invocation invocation) {\n        for (StubbedInvocationMatcher s : stubbed) {\n            if (s.matches(invocation)) {\n                return s;\n            }\n        }\n        \n        return null;\n    }",
        "begin_line": 59,
        "end_line": 67,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/MockitoStubber.java",
        "class_name": "org.mockito.internal.stubbing.MockitoStubber",
        "signature": "org.mockito.internal.stubbing.MockitoStubber.addAnswerForVoidMethod(org.mockito.stubbing.Answer)",
        "snippet": "    public void addAnswerForVoidMethod(Answer answer) {\n        answersForStubbing.add(answer);\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/MockitoStubber.java",
        "class_name": "org.mockito.internal.stubbing.MockitoStubber",
        "signature": "org.mockito.internal.stubbing.MockitoStubber.setAnswersForStubbing(java.util.List<org.mockito.stubbing.Answer>)",
        "snippet": "    public void setAnswersForStubbing(List<Answer> answers) {\n        answersForStubbing.addAll(answers);\n    }",
        "begin_line": 73,
        "end_line": 75,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/MockitoStubber.java",
        "class_name": "org.mockito.internal.stubbing.MockitoStubber",
        "signature": "org.mockito.internal.stubbing.MockitoStubber.hasAnswersForStubbing()",
        "snippet": "    public boolean hasAnswersForStubbing() {\n        return !answersForStubbing.isEmpty();\n    }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/MockitoStubber.java",
        "class_name": "org.mockito.internal.stubbing.MockitoStubber",
        "signature": "org.mockito.internal.stubbing.MockitoStubber.setMethodForStubbing(org.mockito.internal.invocation.InvocationMatcher)",
        "snippet": "    public void setMethodForStubbing(InvocationMatcher invocation) {\n        invocationForStubbing = invocation;\n        assert hasAnswersForStubbing();\n        for (int i = 0; i < answersForStubbing.size(); i++) {\n            addAnswer(answersForStubbing.get(i), i != 0);\n        }\n        answersForStubbing.clear();\n    }",
        "begin_line": 81,
        "end_line": 88,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/MockitoStubber.java",
        "class_name": "org.mockito.internal.stubbing.MockitoStubber",
        "signature": "org.mockito.internal.stubbing.MockitoStubber.toString()",
        "snippet": "    @Override\n    public String toString() {\n        return \"invocationForStubbing: \" + invocationForStubbing;\n    }",
        "begin_line": 90,
        "end_line": 93,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/BaseStubbing.java",
        "class_name": "org.mockito.internal.stubbing.BaseStubbing",
        "signature": "org.mockito.internal.stubbing.BaseStubbing.thenReturn(T)",
        "snippet": "    public OngoingStubbing<T> thenReturn(T value) {\n        return thenAnswer(new Returns(value));\n    }",
        "begin_line": 14,
        "end_line": 16,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/BaseStubbing.java",
        "class_name": "org.mockito.internal.stubbing.BaseStubbing",
        "signature": "org.mockito.internal.stubbing.BaseStubbing.thenReturn(T, T...)",
        "snippet": "    public OngoingStubbing<T> thenReturn(T value, T... values) {\n        OngoingStubbing<T> stubbing = thenReturn(value);            \n        if (values == null) {\n            return stubbing.thenReturn(null);\n        }\n        for (T v: values) {\n            stubbing = stubbing.thenReturn(v);\n        }\n        return stubbing;\n    }",
        "begin_line": 18,
        "end_line": 27,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/BaseStubbing.java",
        "class_name": "org.mockito.internal.stubbing.BaseStubbing",
        "signature": "org.mockito.internal.stubbing.BaseStubbing.thenThrow(java.lang.Throwable)",
        "snippet": "    private OngoingStubbing<T> thenThrow(Throwable throwable) {\n        return thenAnswer(new ThrowsException(throwable));\n    }",
        "begin_line": 29,
        "end_line": 31,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/BaseStubbing.java",
        "class_name": "org.mockito.internal.stubbing.BaseStubbing",
        "signature": "org.mockito.internal.stubbing.BaseStubbing.thenThrow(java.lang.Throwable...)",
        "snippet": "    public OngoingStubbing<T> thenThrow(Throwable... throwables) {\n        if (throwables == null) {\n            thenThrow((Throwable) null);\n        }\n        OngoingStubbing<T> stubbing = null;\n        for (Throwable t: throwables) {\n            if (stubbing == null) {\n                stubbing = thenThrow(t);                    \n            } else {\n                stubbing = stubbing.thenThrow(t);\n            }\n        }\n        return stubbing;\n    }        ",
        "begin_line": 33,
        "end_line": 46,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/BaseStubbing.java",
        "class_name": "org.mockito.internal.stubbing.BaseStubbing",
        "signature": "org.mockito.internal.stubbing.BaseStubbing.thenCallRealMethod()",
        "snippet": "    public OngoingStubbing<T> thenCallRealMethod() {\n        return thenAnswer(new CallsRealMethods());\n    }",
        "begin_line": 49,
        "end_line": 51,
        "comment": "TODO: after 1.8 fail when someone tries to do it with a mock of an Interface",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/BaseStubbing.java",
        "class_name": "org.mockito.internal.stubbing.BaseStubbing",
        "signature": "org.mockito.internal.stubbing.BaseStubbing.toReturn(T)",
        "snippet": "    public DeprecatedOngoingStubbing<T> toReturn(T value) {\n        return toAnswer(new Returns(value));\n    }",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/BaseStubbing.java",
        "class_name": "org.mockito.internal.stubbing.BaseStubbing",
        "signature": "org.mockito.internal.stubbing.BaseStubbing.toThrow(java.lang.Throwable)",
        "snippet": "    public DeprecatedOngoingStubbing<T> toThrow(Throwable throwable) {\n        return toAnswer(new ThrowsException(throwable));\n    }",
        "begin_line": 57,
        "end_line": 59,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/StubbedInvocationMatcher.java",
        "class_name": "org.mockito.internal.stubbing.StubbedInvocationMatcher",
        "signature": "org.mockito.internal.stubbing.StubbedInvocationMatcher.StubbedInvocationMatcher(org.mockito.internal.invocation.InvocationMatcher, org.mockito.stubbing.Answer)",
        "snippet": "    public StubbedInvocationMatcher(InvocationMatcher invocation, Answer answer) {\n        super(invocation.getInvocation(), invocation.getMatchers());\n        this.answers.add(answer);\n    }",
        "begin_line": 19,
        "end_line": 22,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/StubbedInvocationMatcher.java",
        "class_name": "org.mockito.internal.stubbing.StubbedInvocationMatcher",
        "signature": "org.mockito.internal.stubbing.StubbedInvocationMatcher.answer(org.mockito.invocation.InvocationOnMock)",
        "snippet": "    public Object answer(InvocationOnMock invocation) throws Throwable {\n        //see ThreadsShareGenerouslyStubbedMockTest\n        synchronized(answers) {\n            return answers.size() == 1 ? answers.peek().answer(invocation) : answers.poll().answer(invocation);\n        }\n    }",
        "begin_line": 24,
        "end_line": 29,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/StubbedInvocationMatcher.java",
        "class_name": "org.mockito.internal.stubbing.StubbedInvocationMatcher",
        "signature": "org.mockito.internal.stubbing.StubbedInvocationMatcher.addAnswer(org.mockito.stubbing.Answer)",
        "snippet": "    public void addAnswer(Answer answer) {\n        answers.add(answer);\n    }",
        "begin_line": 31,
        "end_line": 33,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/StubbedInvocationMatcher.java",
        "class_name": "org.mockito.internal.stubbing.StubbedInvocationMatcher",
        "signature": "org.mockito.internal.stubbing.StubbedInvocationMatcher.toString()",
        "snippet": "    @Override\n    public String toString() {\n        return super.toString() + \" stubbed with: \" + answers;\n    }",
        "begin_line": 35,
        "end_line": 38,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/OngoingStubbingImpl.java",
        "class_name": "org.mockito.internal.stubbing.OngoingStubbingImpl",
        "signature": "org.mockito.internal.stubbing.OngoingStubbingImpl.OngoingStubbingImpl(org.mockito.internal.stubbing.MockitoStubber, org.mockito.internal.verification.RegisteredInvocations)",
        "snippet": "    public OngoingStubbingImpl(MockitoStubber mockitoStubber,\n            RegisteredInvocations registeredInvocations) {\n        this.mockitoStubber = mockitoStubber;\n        this.registeredInvocations = registeredInvocations;\n    }",
        "begin_line": 17,
        "end_line": 21,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/OngoingStubbingImpl.java",
        "class_name": "org.mockito.internal.stubbing.OngoingStubbingImpl",
        "signature": "org.mockito.internal.stubbing.OngoingStubbingImpl.thenAnswer(org.mockito.stubbing.Answer<?>)",
        "snippet": "    public OngoingStubbing<T> thenAnswer(Answer<?> answer) {\n        registeredInvocations.removeLast();\n        mockitoStubber.addAnswer(answer);\n        return new ConsecutiveStubbing<T>(mockitoStubber);\n    }",
        "begin_line": 23,
        "end_line": 27,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/OngoingStubbingImpl.java",
        "class_name": "org.mockito.internal.stubbing.OngoingStubbingImpl",
        "signature": "org.mockito.internal.stubbing.OngoingStubbingImpl.toAnswer(org.mockito.stubbing.Answer<?>)",
        "snippet": "    public DeprecatedOngoingStubbing<T> toAnswer(Answer<?> answer) {\n        registeredInvocations.removeLast();\n        mockitoStubber.addAnswer(answer);\n        return new ConsecutiveStubbing<T>(mockitoStubber);\n    }",
        "begin_line": 29,
        "end_line": 33,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/OngoingStubbingImpl.java",
        "class_name": "org.mockito.internal.stubbing.OngoingStubbingImpl",
        "signature": "org.mockito.internal.stubbing.OngoingStubbingImpl.getRegisteredInvocations()",
        "snippet": "    public RegisteredInvocations getRegisteredInvocations() {\n        return registeredInvocations;\n    }",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/ConsecutiveStubbing.java",
        "class_name": "org.mockito.internal.stubbing.ConsecutiveStubbing",
        "signature": "org.mockito.internal.stubbing.ConsecutiveStubbing.ConsecutiveStubbing(org.mockito.internal.stubbing.MockitoStubber)",
        "snippet": "    public ConsecutiveStubbing(MockitoStubber mockitoStubber) {\n        this.mockitoStubber = mockitoStubber;\n    }",
        "begin_line": 14,
        "end_line": 16,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/ConsecutiveStubbing.java",
        "class_name": "org.mockito.internal.stubbing.ConsecutiveStubbing",
        "signature": "org.mockito.internal.stubbing.ConsecutiveStubbing.thenAnswer(org.mockito.stubbing.Answer<?>)",
        "snippet": "    public OngoingStubbing<T> thenAnswer(Answer<?> answer) {\n        mockitoStubber.addConsecutiveAnswer(answer);\n        return this;\n    }",
        "begin_line": 18,
        "end_line": 21,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/ConsecutiveStubbing.java",
        "class_name": "org.mockito.internal.stubbing.ConsecutiveStubbing",
        "signature": "org.mockito.internal.stubbing.ConsecutiveStubbing.toAnswer(org.mockito.stubbing.Answer<?>)",
        "snippet": "    public DeprecatedOngoingStubbing<T> toAnswer(Answer<?> answer) {\n        mockitoStubber.addConsecutiveAnswer(answer);\n        return this;\n    }",
        "begin_line": 23,
        "end_line": 26,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/VoidMethodStubbableImpl.java",
        "class_name": "org.mockito.internal.stubbing.VoidMethodStubbableImpl",
        "signature": "org.mockito.internal.stubbing.VoidMethodStubbableImpl.VoidMethodStubbableImpl(T, org.mockito.internal.stubbing.MockitoStubber)",
        "snippet": "    public VoidMethodStubbableImpl(T mock, MockitoStubber mockitoStubber) {\n        this.mock = mock;\n        this.mockitoStubber = mockitoStubber;\n    }",
        "begin_line": 16,
        "end_line": 19,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/VoidMethodStubbableImpl.java",
        "class_name": "org.mockito.internal.stubbing.VoidMethodStubbableImpl",
        "signature": "org.mockito.internal.stubbing.VoidMethodStubbableImpl.toThrow(java.lang.Throwable)",
        "snippet": "    public VoidMethodStubbable<T> toThrow(Throwable throwable) {\n        mockitoStubber.addAnswerForVoidMethod(new ThrowsException(throwable));\n        return this;\n    }",
        "begin_line": 21,
        "end_line": 24,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/VoidMethodStubbableImpl.java",
        "class_name": "org.mockito.internal.stubbing.VoidMethodStubbableImpl",
        "signature": "org.mockito.internal.stubbing.VoidMethodStubbableImpl.toReturn()",
        "snippet": "    public VoidMethodStubbable<T> toReturn() {\n        mockitoStubber.addAnswerForVoidMethod(new DoesNothing());\n        return this;\n    }",
        "begin_line": 26,
        "end_line": 29,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/VoidMethodStubbableImpl.java",
        "class_name": "org.mockito.internal.stubbing.VoidMethodStubbableImpl",
        "signature": "org.mockito.internal.stubbing.VoidMethodStubbableImpl.toAnswer(org.mockito.stubbing.Answer<?>)",
        "snippet": "    public VoidMethodStubbable<T> toAnswer(Answer<?> answer) {\n        mockitoStubber.addAnswerForVoidMethod(answer);\n        return this;\n    }",
        "begin_line": 31,
        "end_line": 34,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/VoidMethodStubbableImpl.java",
        "class_name": "org.mockito.internal.stubbing.VoidMethodStubbableImpl",
        "signature": "org.mockito.internal.stubbing.VoidMethodStubbableImpl.on()",
        "snippet": "    public T on() {\n        return mock;\n    }",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/defaultanswers/GloballyConfiguredAnswer.java",
        "class_name": "org.mockito.internal.stubbing.defaultanswers.GloballyConfiguredAnswer",
        "signature": "org.mockito.internal.stubbing.defaultanswers.GloballyConfiguredAnswer.answer(org.mockito.invocation.InvocationOnMock)",
        "snippet": "    public Object answer(InvocationOnMock invocation) throws Throwable {\n        return new GlobalConfiguration().getDefaultAnswer().answer(invocation);\n    }",
        "begin_line": 19,
        "end_line": 21,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/defaultanswers/ReturnsMocks.java",
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsMocks",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsMocks.answer(org.mockito.invocation.InvocationOnMock)",
        "snippet": "    public Object answer(InvocationOnMock invocation) throws Throwable {\n        Object ret = delegate.answer(invocation);\n        if (ret != null) {\n            return ret;\n        }\n            \n        return returnValueFor(invocation.getMethod().getReturnType());\n    }",
        "begin_line": 18,
        "end_line": 25,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/defaultanswers/ReturnsMocks.java",
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsMocks",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsMocks.returnValueFor(java.lang.Class<?>)",
        "snippet": "    @SuppressWarnings(\"unchecked\")\n    Object returnValueFor(Class<?> clazz) {\n        if (!ClassImposterizer.INSTANCE.canImposterise(clazz)) {\n            return null;\n        }\n        \n        return mockitoCore.mock((Class) clazz, new MockSettingsImpl().defaultAnswer(this));\n    }",
        "begin_line": 27,
        "end_line": 34,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValues.java",
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValues",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValues.answer(org.mockito.invocation.InvocationOnMock)",
        "snippet": "    public Object answer(InvocationOnMock invocation) throws Throwable {\n        Object ret = delegate.answer(invocation);\n        if (ret != null) {\n            return ret;\n        }\n\n        Class<?> returnType = invocation.getMethod().getReturnType();\n        return returnValueFor(returnType);\n    }",
        "begin_line": 50,
        "end_line": 58,
        "comment": " (non-Javadoc)\n     * @see org.mockito.stubbing.Answer#answer(org.mockito.invocation.InvocationOnMock)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValues.java",
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValues",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValues.returnValueFor(java.lang.Class<?>)",
        "snippet": "    Object returnValueFor(Class<?> type) {\n        if (type == String.class) {\n            return \"\";\n        }  else if (type.isArray()) {\n            Class<?> componenetType = type.getComponentType();\n            return Array.newInstance(componenetType, 0);\n        }\n        return null;\n    }",
        "begin_line": 60,
        "end_line": 68,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java",
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues.answer(org.mockito.invocation.InvocationOnMock)",
        "snippet": "    public Object answer(InvocationOnMock invocation) {\n        if (Invocation.isToString(invocation)) {\n            Object mock = invocation.getMock();\n            MockName name = new MockUtil().getMockName(mock);\n            if (name.isSurrogate()) {\n                return \"Mock for \" + ClassNameFinder.classNameForMock(mock) + \", hashCode: \" + mock.hashCode();\n            } else {\n                return name.toString();\n            }\n        }\n        \n        Class<?> returnType = invocation.getMethod().getReturnType();\n        return returnValueFor(returnType);\n    }",
        "begin_line": 55,
        "end_line": 68,
        "comment": " (non-Javadoc)\n     * @see org.mockito.stubbing.Answer#answer(org.mockito.invocation.InvocationOnMock)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java",
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues.returnValueFor(java.lang.Class<?>)",
        "snippet": "    Object returnValueFor(Class<?> type) {\n        if (type.isPrimitive()) {\n            return primitiveOf(type);\n        } else if (Primitives.isPrimitiveWrapper(type)) {\n            return Primitives.primitiveWrapperOf(type);\n        //new instances are used instead of Collections.emptyList(), etc.\n        //to avoid UnsupportedOperationException if code under test modifies returned collection\n        } else if (type == Collection.class) {\n            return new LinkedList<Object>();\n        } else if (type == Set.class) {\n            return new HashSet<Object>();\n        } else if (type == HashSet.class) {\n            return new HashSet<Object>();\n        } else if (type == SortedSet.class) {\n            return new TreeSet<Object>();\n        } else if (type == TreeSet.class) {\n            return new TreeSet<Object>();\n        } else if (type == LinkedHashSet.class) {\n            return new LinkedHashSet<Object>();\n        } else if (type == List.class) {\n            return new LinkedList<Object>();\n        } else if (type == LinkedList.class) {\n            return new LinkedList<Object>();\n        } else if (type == ArrayList.class) {\n            return new ArrayList<Object>();\n        } else if (type == Map.class) {\n            return new HashMap<Object, Object>();\n        } else if (type == HashMap.class) {\n            return new HashMap<Object, Object>();\n        } else if (type == SortedMap.class) {\n            return new TreeMap<Object, Object>();\n        } else if (type == TreeMap.class) {\n            return new TreeMap<Object, Object>();\n        } else if (type == LinkedHashMap.class) {\n            return new LinkedHashMap<Object, Object>();\n        }       \n        //Let's not care about the rest of collections.\n        return null;\n    }",
        "begin_line": 70,
        "end_line": 108,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java",
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues.primitiveOf(java.lang.Class<?>)",
        "snippet": "    private Object primitiveOf(Class<?> type) {\n        if (type == Boolean.TYPE) {\n            return false;\n        } else if (type == Character.TYPE) {\n            return (char) 0;\n        } else {\n            return 0;\n        } \n    }",
        "begin_line": 110,
        "end_line": 118,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java",
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNulls",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNulls.ThrowingInterceptor.ThrowingInterceptor(org.mockito.invocation.InvocationOnMock)",
        "snippet": "        private ThrowingInterceptor(InvocationOnMock invocation) {\n            this.invocation = invocation;\n        }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java",
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNulls",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNulls.ThrowingInterceptor.intercept(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], org.mockito.cglib.proxy.MethodProxy)",
        "snippet": "        public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n            if (Invocation.isToString(method)) {\n                return \"SmartNull returned by unstubbed \" + invocation.getMethod().getName() + \"() method on mock\";\n            }\n            \n            new Reporter().smartNullPointerException(location);\n            return null;\n        }",
        "begin_line": 47,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java",
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNulls",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNulls.answer(org.mockito.invocation.InvocationOnMock)",
        "snippet": "    public Object answer(final InvocationOnMock invocation) throws Throwable {\n        Object defaultReturnValue = delegate.answer(invocation);\n        if (defaultReturnValue != null) {\n            return defaultReturnValue;\n        }\n        Class<?> type = invocation.getMethod().getReturnType();\n        if (ClassImposterizer.INSTANCE.canImposterise(type)) {\n            return ClassImposterizer.INSTANCE.imposterise(new ThrowingInterceptor(invocation), type);\n        }\n        return null;\n    }",
        "begin_line": 59,
        "end_line": 69,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/answers/AnswerReturnValuesAdapter.java",
        "class_name": "org.mockito.internal.stubbing.answers.AnswerReturnValuesAdapter",
        "signature": "org.mockito.internal.stubbing.answers.AnswerReturnValuesAdapter.AnswerReturnValuesAdapter(org.mockito.ReturnValues)",
        "snippet": "    public AnswerReturnValuesAdapter(ReturnValues returnValues) {\n        this.returnValues = returnValues;\n    }",
        "begin_line": 17,
        "end_line": 19,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/answers/AnswerReturnValuesAdapter.java",
        "class_name": "org.mockito.internal.stubbing.answers.AnswerReturnValuesAdapter",
        "signature": "org.mockito.internal.stubbing.answers.AnswerReturnValuesAdapter.answer(org.mockito.invocation.InvocationOnMock)",
        "snippet": "    public Object answer(InvocationOnMock invocation) throws Throwable {\n        return returnValues.valueFor(invocation);\n    }",
        "begin_line": 21,
        "end_line": 23,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/answers/Returns.java",
        "class_name": "org.mockito.internal.stubbing.answers.Returns",
        "signature": "org.mockito.internal.stubbing.answers.Returns.Returns(java.lang.Object)",
        "snippet": "    public Returns(Object value) {\n        this.value = value;\n    }",
        "begin_line": 14,
        "end_line": 16,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/answers/Returns.java",
        "class_name": "org.mockito.internal.stubbing.answers.Returns",
        "signature": "org.mockito.internal.stubbing.answers.Returns.answer(org.mockito.invocation.InvocationOnMock)",
        "snippet": "    public Object answer(InvocationOnMock invocation) throws Throwable {\n        return value;\n    }",
        "begin_line": 18,
        "end_line": 20,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/answers/Returns.java",
        "class_name": "org.mockito.internal.stubbing.answers.Returns",
        "signature": "org.mockito.internal.stubbing.answers.Returns.printReturnType()",
        "snippet": "    public String printReturnType() {\n        return value.getClass().getSimpleName();\n    }",
        "begin_line": 22,
        "end_line": 24,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/answers/Returns.java",
        "class_name": "org.mockito.internal.stubbing.answers.Returns",
        "signature": "org.mockito.internal.stubbing.answers.Returns.getReturnType()",
        "snippet": "    public Class<?> getReturnType() {\n        return value.getClass();\n    }",
        "begin_line": 26,
        "end_line": 28,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/answers/Returns.java",
        "class_name": "org.mockito.internal.stubbing.answers.Returns",
        "signature": "org.mockito.internal.stubbing.answers.Returns.returnsNull()",
        "snippet": "    public boolean returnsNull() {\n        return value == null;\n    }",
        "begin_line": 30,
        "end_line": 32,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/answers/Returns.java",
        "class_name": "org.mockito.internal.stubbing.answers.Returns",
        "signature": "org.mockito.internal.stubbing.answers.Returns.toString()",
        "snippet": "    @Override\n    public String toString() {\n        return \"Returns: \" + value;\n    }",
        "begin_line": 34,
        "end_line": 37,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/answers/AnswersValidator.java",
        "class_name": "org.mockito.internal.stubbing.answers.AnswersValidator",
        "signature": "org.mockito.internal.stubbing.answers.AnswersValidator.validate(org.mockito.stubbing.Answer<?>, org.mockito.internal.invocation.Invocation)",
        "snippet": "    public void validate(Answer<?> answer, Invocation invocation) {\n        if (answer instanceof ThrowsException) {\n            validateException((ThrowsException) answer, invocation);\n        }\n        \n        if (answer instanceof Returns) {\n            validateReturnValue((Returns) answer, invocation);\n        }\n        \n        if (answer instanceof DoesNothing) {\n            validateDoNothing((DoesNothing) answer, invocation);\n        }\n    }",
        "begin_line": 15,
        "end_line": 27,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/answers/AnswersValidator.java",
        "class_name": "org.mockito.internal.stubbing.answers.AnswersValidator",
        "signature": "org.mockito.internal.stubbing.answers.AnswersValidator.validateDoNothing(org.mockito.internal.stubbing.answers.DoesNothing, org.mockito.internal.invocation.Invocation)",
        "snippet": "    private void validateDoNothing(DoesNothing answer, Invocation invocation) {\n        if (!invocation.isVoid()) {\n            reporter.onlyVoidMethodsCanBeSetToDoNothing();\n        }\n    }",
        "begin_line": 29,
        "end_line": 33,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/answers/AnswersValidator.java",
        "class_name": "org.mockito.internal.stubbing.answers.AnswersValidator",
        "signature": "org.mockito.internal.stubbing.answers.AnswersValidator.validateReturnValue(org.mockito.internal.stubbing.answers.Returns, org.mockito.internal.invocation.Invocation)",
        "snippet": "    private void validateReturnValue(Returns answer, Invocation invocation) {\n        if (invocation.isVoid()) {\n            reporter.cannotStubVoidMethodWithAReturnValue();\n        }\n        \n        if (answer.returnsNull() && invocation.returnsPrimitive()) {\n            reporter.wrongTypeOfReturnValue(invocation.printMethodReturnType(), \"null\", invocation.getMethodName());\n        } \n\n        if (!answer.returnsNull() && !invocation.isValidReturnType(answer.getReturnType())) {\n            reporter.wrongTypeOfReturnValue(invocation.printMethodReturnType(), answer.printReturnType(), invocation.getMethodName());\n        }\n    }",
        "begin_line": 35,
        "end_line": 47,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/answers/AnswersValidator.java",
        "class_name": "org.mockito.internal.stubbing.answers.AnswersValidator",
        "signature": "org.mockito.internal.stubbing.answers.AnswersValidator.validateException(org.mockito.internal.stubbing.answers.ThrowsException, org.mockito.internal.invocation.Invocation)",
        "snippet": "    private void validateException(ThrowsException answer, Invocation invocation) {\n        Throwable throwable = answer.getThrowable();\n        if (throwable == null) {\n            reporter.cannotStubWithNullThrowable();\n        }\n        \n        if (throwable instanceof RuntimeException || throwable instanceof Error) {\n            return;\n        }\n        \n        if (!invocation.isValidException(throwable)) {\n            reporter.checkedExceptionInvalid(throwable);\n        }\n    }",
        "begin_line": 49,
        "end_line": 62,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/answers/ThrowsException.java",
        "class_name": "org.mockito.internal.stubbing.answers.ThrowsException",
        "signature": "org.mockito.internal.stubbing.answers.ThrowsException.ThrowsException(java.lang.Throwable)",
        "snippet": "    public ThrowsException(Throwable throwable) {\n        this.throwable = throwable;\n    }",
        "begin_line": 17,
        "end_line": 19,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/answers/ThrowsException.java",
        "class_name": "org.mockito.internal.stubbing.answers.ThrowsException",
        "signature": "org.mockito.internal.stubbing.answers.ThrowsException.answer(org.mockito.invocation.InvocationOnMock)",
        "snippet": "    public Object answer(InvocationOnMock invocation) throws Throwable {\n        if (new MockUtil().isMock(throwable)) {\n            throw throwable;\n        }\n        Throwable t = throwable.fillInStackTrace();\n        filter.filter(t);\n        throw t;\n    }",
        "begin_line": 21,
        "end_line": 28,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/answers/ThrowsException.java",
        "class_name": "org.mockito.internal.stubbing.answers.ThrowsException",
        "signature": "org.mockito.internal.stubbing.answers.ThrowsException.getThrowable()",
        "snippet": "    public Throwable getThrowable() {\n        return throwable;\n    }",
        "begin_line": 30,
        "end_line": 32,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/answers/DoesNothing.java",
        "class_name": "org.mockito.internal.stubbing.answers.DoesNothing",
        "signature": "org.mockito.internal.stubbing.answers.DoesNothing.answer(org.mockito.invocation.InvocationOnMock)",
        "snippet": "    public Object answer(InvocationOnMock invocation) throws Throwable {\n        return null;\n    }",
        "begin_line": 12,
        "end_line": 14,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/stubbing/answers/CallsRealMethods.java",
        "class_name": "org.mockito.internal.stubbing.answers.CallsRealMethods",
        "signature": "org.mockito.internal.stubbing.answers.CallsRealMethods.answer(org.mockito.invocation.InvocationOnMock)",
        "snippet": "    public Object answer(InvocationOnMock invocation) throws Throwable {\n        return invocation.callRealMethod();\n    }",
        "begin_line": 31,
        "end_line": 33,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/creation/ClassNameFinder.java",
        "class_name": "org.mockito.internal.creation.ClassNameFinder",
        "signature": "org.mockito.internal.creation.ClassNameFinder.classNameForMock(java.lang.Object)",
        "snippet": "    public static String classNameForMock(Object mock) {\n        if (mock.getClass().getInterfaces().length == 2) {\n            return mock.getClass().getInterfaces()[0].getSimpleName();\n        } else {\n            return mock.getClass().getSuperclass().getSimpleName();\n        }\n    }",
        "begin_line": 9,
        "end_line": 15,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/creation/MethodInterceptorFilter.java",
        "class_name": "org.mockito.internal.creation.MethodInterceptorFilter",
        "signature": "org.mockito.internal.creation.MethodInterceptorFilter.MethodInterceptorFilter(java.lang.Class, T)",
        "snippet": "    @SuppressWarnings(\"unchecked\")\n    public MethodInterceptorFilter(Class toMock, T delegate) {\n        try {\n            if (toMock.isInterface()) {\n                toMock = Object.class;\n            }\n            equalsMethod = toMock.getMethod(\"equals\", new Class[] { Object.class });\n            hashCodeMethod = toMock.getMethod(\"hashCode\", (Class[]) null);\n        } catch (NoSuchMethodException e) {\n            throw new RuntimeException(\"\\nSomething went really wrong. Object method could not be found!\" +\n                \"\\n please report it to the mocking mailing list at http://mockito.org\");\n        }\n        this.delegate = delegate;\n    }",
        "begin_line": 21,
        "end_line": 34,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/creation/MethodInterceptorFilter.java",
        "class_name": "org.mockito.internal.creation.MethodInterceptorFilter",
        "signature": "org.mockito.internal.creation.MethodInterceptorFilter.intercept(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], org.mockito.cglib.proxy.MethodProxy)",
        "snippet": "    public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy)\n            throws Throwable {\n        if (equalsMethod.equals(method)) {\n            return Boolean.valueOf(proxy == args[0]);\n        } else if (hashCodeMethod.equals(method)) {\n            return hashCodeForMock(proxy);\n        }\n        \n        new CGLIBHacker().setMockitoNamingPolicy(methodProxy);\n        \n        return delegate.intercept(proxy, method, args, methodProxy);\n    }",
        "begin_line": 36,
        "end_line": 47,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/creation/MethodInterceptorFilter.java",
        "class_name": "org.mockito.internal.creation.MethodInterceptorFilter",
        "signature": "org.mockito.internal.creation.MethodInterceptorFilter.hashCodeForMock(java.lang.Object)",
        "snippet": "    private int hashCodeForMock(Object mock) {\n        return new Integer(System.identityHashCode(mock));\n    }",
        "begin_line": 49,
        "end_line": 51,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/creation/MethodInterceptorFilter.java",
        "class_name": "org.mockito.internal.creation.MethodInterceptorFilter",
        "signature": "org.mockito.internal.creation.MethodInterceptorFilter.getDelegate()",
        "snippet": "    public T getDelegate() {\n        return delegate;\n    }",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/creation/MockSettingsImpl.java",
        "class_name": "org.mockito.internal.creation.MockSettingsImpl",
        "signature": "org.mockito.internal.creation.MockSettingsImpl.extraInterfaces(java.lang.Class<?>...)",
        "snippet": "    public MockSettings extraInterfaces(Class<?>... extraInterfaces) {\n        if (extraInterfaces == null || extraInterfaces.length == 0) {\n            new Reporter().extraInterfacesRequiresAtLeastOneInterface();\n        }\n            \n        for (Class<?> i : extraInterfaces) {\n            if (i == null) {\n                new Reporter().extraInterfacesDoesNotAcceptNullParameters();\n            } else if (!i.isInterface()) {\n                new Reporter().extraInterfacesAcceptsOnlyInterfaces(i);\n            }\n        }\n        this.extraInterfaces = extraInterfaces;\n        return this;\n    }",
        "begin_line": 18,
        "end_line": 32,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/creation/MockSettingsImpl.java",
        "class_name": "org.mockito.internal.creation.MockSettingsImpl",
        "signature": "org.mockito.internal.creation.MockSettingsImpl.getMockName()",
        "snippet": "    public String getMockName() {\n        return name;\n    }",
        "begin_line": 34,
        "end_line": 36,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/creation/MockSettingsImpl.java",
        "class_name": "org.mockito.internal.creation.MockSettingsImpl",
        "signature": "org.mockito.internal.creation.MockSettingsImpl.getExtraInterfaces()",
        "snippet": "    public Class<?>[] getExtraInterfaces() {\n        return extraInterfaces;\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/creation/MockSettingsImpl.java",
        "class_name": "org.mockito.internal.creation.MockSettingsImpl",
        "signature": "org.mockito.internal.creation.MockSettingsImpl.getSpiedInstance()",
        "snippet": "    public Object getSpiedInstance() {\n        return spiedInstance;\n    }",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/creation/MockSettingsImpl.java",
        "class_name": "org.mockito.internal.creation.MockSettingsImpl",
        "signature": "org.mockito.internal.creation.MockSettingsImpl.name(java.lang.String)",
        "snippet": "    public MockSettings name(String name) {\n        this.name = name;\n        return this;\n    }",
        "begin_line": 46,
        "end_line": 49,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/creation/MockSettingsImpl.java",
        "class_name": "org.mockito.internal.creation.MockSettingsImpl",
        "signature": "org.mockito.internal.creation.MockSettingsImpl.spiedInstance(java.lang.Object)",
        "snippet": "    public MockSettings spiedInstance(Object spiedInstance) {\n        this.spiedInstance = spiedInstance;\n        return this;\n    }",
        "begin_line": 51,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/creation/MockSettingsImpl.java",
        "class_name": "org.mockito.internal.creation.MockSettingsImpl",
        "signature": "org.mockito.internal.creation.MockSettingsImpl.defaultAnswer(org.mockito.stubbing.Answer)",
        "snippet": "    @SuppressWarnings(\"unchecked\")\n    public MockSettings defaultAnswer(Answer defaultAnswer) {\n        this.defaultAnswer = defaultAnswer;\n        return this;\n    }",
        "begin_line": 56,
        "end_line": 60,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/creation/MockSettingsImpl.java",
        "class_name": "org.mockito.internal.creation.MockSettingsImpl",
        "signature": "org.mockito.internal.creation.MockSettingsImpl.getDefaultAnswer()",
        "snippet": "    public Answer<Object> getDefaultAnswer() {\n        return defaultAnswer;\n    }",
        "begin_line": 62,
        "end_line": 64,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/creation/cglib/CGLIBHacker.java",
        "class_name": "org.mockito.internal.creation.cglib.CGLIBHacker",
        "signature": "org.mockito.internal.creation.cglib.CGLIBHacker.setMockitoNamingPolicy(org.mockito.cglib.proxy.MethodProxy)",
        "snippet": "    public void setMockitoNamingPolicy(MethodProxy methodProxy) {\n        try {\n            Field createInfoField = reflectOnCreateInfo(methodProxy);\n            createInfoField.setAccessible(true);\n            Object createInfo = createInfoField.get(methodProxy);\n            Field namingPolicyField = createInfo.getClass().getDeclaredField(\"namingPolicy\");\n            namingPolicyField.setAccessible(true);\n            if (namingPolicyField.get(createInfo) == null) {\n                namingPolicyField.set(createInfo, MockitoNamingPolicy.INSTANCE);\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(\"Unable to set MockitoNamingPolicy on cglib generator which creates FastClasses\", e);\n        }\n    }",
        "begin_line": 13,
        "end_line": 26,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/creation/cglib/CGLIBHacker.java",
        "class_name": "org.mockito.internal.creation.cglib.CGLIBHacker",
        "signature": "org.mockito.internal.creation.cglib.CGLIBHacker.reflectOnCreateInfo(org.mockito.cglib.proxy.MethodProxy)",
        "snippet": "    @SuppressWarnings(\"unchecked\")\n    private Field reflectOnCreateInfo(MethodProxy methodProxy) throws NoSuchFieldException {\n        Class cglibMethodProxyClass = methodProxy.getClass();\n        //in case methodProxy was extended by user, let's traverse the object graph to find the cglib methodProxy \n        //with all the fields we would like to change \n        while (cglibMethodProxyClass != MethodProxy.class) {\n            cglibMethodProxyClass = methodProxy.getClass().getSuperclass();\n        }\n        return cglibMethodProxyClass.getDeclaredField(\"createInfo\");\n    }",
        "begin_line": 28,
        "end_line": 37,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/creation/cglib/MockitoNamingPolicy.java",
        "class_name": "org.mockito.internal.creation.cglib.MockitoNamingPolicy",
        "signature": "org.mockito.internal.creation.cglib.MockitoNamingPolicy.getTag()",
        "snippet": "    @Override\n    protected String getTag() {\n        return \"ByMockitoWithCGLIB\";\n    }",
        "begin_line": 13,
        "end_line": 16,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/creation/jmock/ClassImposterizer.java",
        "class_name": "org.mockito.internal.creation.jmock.ClassImposterizer",
        "signature": "org.mockito.internal.creation.jmock.ClassImposterizer.ClassImposterizer()",
        "snippet": "    private ClassImposterizer() {}",
        "begin_line": 32,
        "end_line": 32,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/creation/jmock/ClassImposterizer.java",
        "class_name": "org.mockito.internal.creation.jmock.ClassImposterizer",
        "signature": "org.mockito.internal.creation.jmock.ClassImposterizer.Anonymous-76a35481-b881-4a5f-8136-6e3cddaecc9f.getClassName(java.lang.String, java.lang.String, java.lang.Object, org.mockito.cglib.core.Predicate)",
        "snippet": "        @Override\n        public String getClassName(String prefix, String source, Object key, Predicate names) {\n            return \"codegen.\" + super.getClassName(prefix, source, key, names);\n        }",
        "begin_line": 40,
        "end_line": 43,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/creation/jmock/ClassImposterizer.java",
        "class_name": "org.mockito.internal.creation.jmock.ClassImposterizer",
        "signature": "org.mockito.internal.creation.jmock.ClassImposterizer.Anonymous-43e71fe5-9b4c-4312-b3f4-67ecf8b49fb3.accept(java.lang.reflect.Method)",
        "snippet": "        public int accept(Method method) {\n            return method.isBridge() ? 1 : 0;\n        }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/creation/jmock/ClassImposterizer.java",
        "class_name": "org.mockito.internal.creation.jmock.ClassImposterizer",
        "signature": "org.mockito.internal.creation.jmock.ClassImposterizer.canImposterise(java.lang.Class<?>)",
        "snippet": "    public boolean canImposterise(Class<?> type) {\n        return !type.isPrimitive() && !Modifier.isFinal(type.getModifiers()) && !type.isAnonymousClass();\n    }",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/creation/jmock/ClassImposterizer.java",
        "class_name": "org.mockito.internal.creation.jmock.ClassImposterizer",
        "signature": "org.mockito.internal.creation.jmock.ClassImposterizer.imposterise(org.mockito.cglib.proxy.MethodInterceptor, java.lang.Class<T>, java.lang.Class<?>...)",
        "snippet": "    public <T> T imposterise(final MethodInterceptor interceptor, Class<T> mockedType, Class<?>... ancillaryTypes) {\n        try {\n            setConstructorsAccessible(mockedType, true);\n            Class<?> proxyClass = createProxyClass(mockedType, ancillaryTypes);\n            return mockedType.cast(createProxy(proxyClass, interceptor));\n        } finally {\n            setConstructorsAccessible(mockedType, false);\n        }\n    }",
        "begin_line": 56,
        "end_line": 64,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/creation/jmock/ClassImposterizer.java",
        "class_name": "org.mockito.internal.creation.jmock.ClassImposterizer",
        "signature": "org.mockito.internal.creation.jmock.ClassImposterizer.setConstructorsAccessible(java.lang.Class<?>, boolean)",
        "snippet": "    private void setConstructorsAccessible(Class<?> mockedType, boolean accessible) {\n        for (Constructor<?> constructor : mockedType.getDeclaredConstructors()) {\n            constructor.setAccessible(accessible);\n        }\n    }",
        "begin_line": 66,
        "end_line": 70,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/creation/jmock/ClassImposterizer.java",
        "class_name": "org.mockito.internal.creation.jmock.ClassImposterizer",
        "signature": "org.mockito.internal.creation.jmock.ClassImposterizer.createProxyClass(java.lang.Class<?>, java.lang.Class<?>...)",
        "snippet": "    private <T> Class<?> createProxyClass(Class<?> mockedType, Class<?>...interfaces) {\n        if (mockedType == Object.class) {\n            mockedType = ClassWithSuperclassToWorkAroundCglibBug.class;\n        }\n        \n        Enhancer enhancer = new Enhancer() {\n            @Override\n            @SuppressWarnings(\"unchecked\")\n            protected void filterConstructors(Class sc, List constructors) {\n                // Don't filter\n            }\n        };\n        enhancer.setClassLoader(SearchingClassLoader.combineLoadersOf(mockedType));\n        enhancer.setUseFactory(true);\n        if (mockedType.isInterface()) {\n            enhancer.setSuperclass(Object.class);\n            enhancer.setInterfaces(prepend(mockedType, interfaces));\n        } else {\n            enhancer.setSuperclass(mockedType);\n            enhancer.setInterfaces(interfaces);\n        }\n        enhancer.setCallbackTypes(new Class[]{MethodInterceptor.class, NoOp.class});\n        enhancer.setCallbackFilter(IGNORE_BRIDGE_METHODS);\n        if (mockedType.getSigners() != null) {\n            enhancer.setNamingPolicy(NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES);\n        } else {\n            enhancer.setNamingPolicy(MockitoNamingPolicy.INSTANCE);\n        }\n        \n        try {\n            return enhancer.createClass(); \n        } catch (CodeGenerationException e) {\n            if (Modifier.isPrivate(mockedType.getModifiers())) {\n                throw new MockitoException(\"\\n\"\n                        + \"Mockito cannot mock this class: \" + mockedType \n                        + \".\\n\"\n                        + \"Most likely it is a private class that is not visible by Mockito\");\n            }\n            throw new MockitoException(\"\\n\"\n                    + \"Mockito cannot mock this class: \" + mockedType \n                    + \".\\n\" \n                    + \"Mockito can only mock visible & non-final classes\");\n        }\n    }",
        "begin_line": 72,
        "end_line": 115,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/creation/jmock/ClassImposterizer.java",
        "class_name": "org.mockito.internal.creation.jmock.ClassImposterizer",
        "signature": "org.mockito.internal.creation.jmock.ClassImposterizer.Anonymous-1c1c0d25-9fdf-44d0-bf98-f5d76696109b.filterConstructors(java.lang.Class, java.util.List)",
        "snippet": "            @Override\n            @SuppressWarnings(\"unchecked\")\n            protected void filterConstructors(Class sc, List constructors) {\n                // Don't filter\n            }",
        "begin_line": 78,
        "end_line": 82,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/creation/jmock/ClassImposterizer.java",
        "class_name": "org.mockito.internal.creation.jmock.ClassImposterizer",
        "signature": "org.mockito.internal.creation.jmock.ClassImposterizer.createProxy(java.lang.Class<?>, org.mockito.cglib.proxy.MethodInterceptor)",
        "snippet": "    private Object createProxy(Class<?> proxyClass, final MethodInterceptor interceptor) {\n        Factory proxy = (Factory) objenesis.newInstance(proxyClass);\n        proxy.setCallbacks(new Callback[] {interceptor, NoOp.INSTANCE});\n        return proxy;\n    }",
        "begin_line": 117,
        "end_line": 121,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/creation/jmock/ClassImposterizer.java",
        "class_name": "org.mockito.internal.creation.jmock.ClassImposterizer",
        "signature": "org.mockito.internal.creation.jmock.ClassImposterizer.prepend(java.lang.Class<?>, java.lang.Class<?>...)",
        "snippet": "    private Class<?>[] prepend(Class<?> first, Class<?>... rest) {\n        Class<?>[] all = new Class<?>[rest.length+1];\n        all[0] = first;\n        System.arraycopy(rest, 0, all, 1, rest.length);\n        return all;\n    }",
        "begin_line": 123,
        "end_line": 128,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/creation/jmock/SearchingClassLoader.java",
        "class_name": "org.mockito.internal.creation.jmock.SearchingClassLoader",
        "signature": "org.mockito.internal.creation.jmock.SearchingClassLoader.SearchingClassLoader(java.lang.ClassLoader, java.lang.ClassLoader)",
        "snippet": "    public SearchingClassLoader(ClassLoader parent, ClassLoader nextToSearch) {\n        super(parent);\n        this.nextToSearch = nextToSearch;\n    }",
        "begin_line": 18,
        "end_line": 21,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/creation/jmock/SearchingClassLoader.java",
        "class_name": "org.mockito.internal.creation.jmock.SearchingClassLoader",
        "signature": "org.mockito.internal.creation.jmock.SearchingClassLoader.combineLoadersOf(java.lang.Class<?>...)",
        "snippet": "    public static ClassLoader combineLoadersOf(Class<?>... classes) {\n        return combineLoadersOf(classes[0], classes);\n    }",
        "begin_line": 23,
        "end_line": 25,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/creation/jmock/SearchingClassLoader.java",
        "class_name": "org.mockito.internal.creation.jmock.SearchingClassLoader",
        "signature": "org.mockito.internal.creation.jmock.SearchingClassLoader.combineLoadersOf(java.lang.Class<?>, java.lang.Class<?>...)",
        "snippet": "    private static ClassLoader combineLoadersOf(Class<?> first, Class<?>... others) {\n        List<ClassLoader> loaders = new ArrayList<ClassLoader>();\n        \n        addIfNewElement(loaders, first.getClassLoader());\n        for (Class<?> c : others) {\n            addIfNewElement(loaders, c.getClassLoader());\n        }\n        \n        // To support Eclipse Plug-in tests.\n        // In an Eclipse plug-in, jMock itself will not be on the system class loader\n        // but in the class loader of the plug-in.\n        //\n        // Note: I've been unable to reproduce the error in jMock's test suite.\n        addIfNewElement(loaders, SearchingClassLoader.class.getClassLoader());\n        \n        // To support the Maven Surefire plugin.\n        // Note: I've been unable to reproduce the error in jMock's test suite.\n        addIfNewElement(loaders, currentThread().getContextClassLoader());\n\n        //Had to comment that out because it didn't work with in-container Spring tests\n        //addIfNewElement(loaders, ClassLoader.getSystemClassLoader());\n        \n        return combine(loaders);\n    }",
        "begin_line": 27,
        "end_line": 50,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/creation/jmock/SearchingClassLoader.java",
        "class_name": "org.mockito.internal.creation.jmock.SearchingClassLoader",
        "signature": "org.mockito.internal.creation.jmock.SearchingClassLoader.combine(java.util.List<java.lang.ClassLoader>)",
        "snippet": "    private static ClassLoader combine(List<ClassLoader> parentLoaders) {\n        ClassLoader loader = parentLoaders.get(parentLoaders.size()-1);\n        \n        for (int i = parentLoaders.size()-2; i >= 0; i--) {\n            loader = new SearchingClassLoader(parentLoaders.get(i), loader);\n        }\n        \n        return loader;\n    }",
        "begin_line": 52,
        "end_line": 60,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/creation/jmock/SearchingClassLoader.java",
        "class_name": "org.mockito.internal.creation.jmock.SearchingClassLoader",
        "signature": "org.mockito.internal.creation.jmock.SearchingClassLoader.addIfNewElement(java.util.List<java.lang.ClassLoader>, java.lang.ClassLoader)",
        "snippet": "    private static void addIfNewElement(List<ClassLoader> loaders, ClassLoader c) {\n        if (c != null && !loaders.contains(c)) {\n            loaders.add(c);\n        }\n    }",
        "begin_line": 62,
        "end_line": 66,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/creation/jmock/SearchingClassLoader.java",
        "class_name": "org.mockito.internal.creation.jmock.SearchingClassLoader",
        "signature": "org.mockito.internal.creation.jmock.SearchingClassLoader.findClass(java.lang.String)",
        "snippet": "    @Override\n    protected Class<?> findClass(String name) throws ClassNotFoundException {\n        if (nextToSearch != null) {\n            return nextToSearch.loadClass(name);\n        } else {\n            return super.findClass(name); // will throw ClassNotFoundException\n        }\n    }",
        "begin_line": 68,
        "end_line": 75,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/configuration/ClassPathLoader.java",
        "class_name": "org.mockito.internal.configuration.ClassPathLoader",
        "signature": "org.mockito.internal.configuration.ClassPathLoader.loadConfiguration()",
        "snippet": "    @SuppressWarnings({\"unchecked\"})\n    public IMockitoConfiguration loadConfiguration() {\n        //Trying to get config from classpath\n        Class configClass = null;\n        try {\n            configClass = (Class) Class.forName(\"org.mockito.configuration.MockitoConfiguration\");\n        } catch (ClassNotFoundException e) {\n            //that's ok, it means there is no global config, using default one. \n            return null;\n        }\n        \n        try {\n            return (IMockitoConfiguration) configClass.newInstance();\n        } catch (ClassCastException e) {\n            throw new MockitoConfigurationException(\"\\n\" +\n                    \"MockitoConfiguration class must implement org.mockito.configuration.IMockitoConfiguration interface.\", e);\n        } catch (Exception e) {\n            throw new MockitoConfigurationException(\"\\n\" +\n                    \"Unable to instantianate org.mockito.configuration.MockitoConfiguration class. Does it have a safe, no-arg constructor?\", e);\n        }\n    }",
        "begin_line": 15,
        "end_line": 35,
        "comment": "\r\n     * @return configuration loaded from classpath or null\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/configuration/GlobalConfiguration.java",
        "class_name": "org.mockito.internal.configuration.GlobalConfiguration",
        "signature": "org.mockito.internal.configuration.GlobalConfiguration.getIt()",
        "snippet": "    IMockitoConfiguration getIt() {\n        return globalConfiguration.get();\n    }",
        "begin_line": 22,
        "end_line": 24,
        "comment": "back door for testing",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/configuration/GlobalConfiguration.java",
        "class_name": "org.mockito.internal.configuration.GlobalConfiguration",
        "signature": "org.mockito.internal.configuration.GlobalConfiguration.GlobalConfiguration()",
        "snippet": "    public GlobalConfiguration() {\n        //Configuration should be loaded only once but I cannot really test it\n        if (globalConfiguration.get() == null) {\n            globalConfiguration.set(createConfig());\n        }\n    }",
        "begin_line": 26,
        "end_line": 31,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/configuration/GlobalConfiguration.java",
        "class_name": "org.mockito.internal.configuration.GlobalConfiguration",
        "signature": "org.mockito.internal.configuration.GlobalConfiguration.createConfig()",
        "snippet": "    @SuppressWarnings(\"deprecation\")\n    private IMockitoConfiguration createConfig() {\n        IMockitoConfiguration defaultConfiguration = new DefaultMockitoConfiguration();\n        IMockitoConfiguration config = new ClassPathLoader().loadConfiguration();\n        if (config != null) {\n            return config;\n        } else {\n            return defaultConfiguration;\n        }\n    }",
        "begin_line": 33,
        "end_line": 42,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/configuration/GlobalConfiguration.java",
        "class_name": "org.mockito.internal.configuration.GlobalConfiguration",
        "signature": "org.mockito.internal.configuration.GlobalConfiguration.validate()",
        "snippet": "    public static void validate() {\n        new GlobalConfiguration();\n    }",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/configuration/GlobalConfiguration.java",
        "class_name": "org.mockito.internal.configuration.GlobalConfiguration",
        "signature": "org.mockito.internal.configuration.GlobalConfiguration.getReturnValues()",
        "snippet": "    public ReturnValues getReturnValues() {\n        return globalConfiguration.get().getReturnValues();\n    }",
        "begin_line": 48,
        "end_line": 50,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/configuration/GlobalConfiguration.java",
        "class_name": "org.mockito.internal.configuration.GlobalConfiguration",
        "signature": "org.mockito.internal.configuration.GlobalConfiguration.getAnnotationEngine()",
        "snippet": "    public AnnotationEngine getAnnotationEngine() {\n        return globalConfiguration.get().getAnnotationEngine();\n    }",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/configuration/GlobalConfiguration.java",
        "class_name": "org.mockito.internal.configuration.GlobalConfiguration",
        "signature": "org.mockito.internal.configuration.GlobalConfiguration.cleansStackTrace()",
        "snippet": "    public boolean cleansStackTrace() {\n        return globalConfiguration.get().cleansStackTrace();\n    }",
        "begin_line": 56,
        "end_line": 58,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/configuration/GlobalConfiguration.java",
        "class_name": "org.mockito.internal.configuration.GlobalConfiguration",
        "signature": "org.mockito.internal.configuration.GlobalConfiguration.getDefaultAnswer()",
        "snippet": "    public Answer<Object> getDefaultAnswer() {\n        return globalConfiguration.get().getDefaultAnswer();\n    }",
        "begin_line": 60,
        "end_line": 62,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/internal/configuration/DefaultAnnotationEngine.java",
        "class_name": "org.mockito.internal.configuration.DefaultAnnotationEngine",
        "signature": "org.mockito.internal.configuration.DefaultAnnotationEngine.createMockFor(java.lang.annotation.Annotation, java.lang.reflect.Field)",
        "snippet": "    @SuppressWarnings(\"deprecation\")\n    public Object createMockFor(Annotation annotation, Field field) {\n        if (annotation instanceof Mock || annotation instanceof org.mockito.MockitoAnnotations.Mock) {\n            return Mockito.mock(field.getType(), field.getName());\n        } else {\n            return null;\n        }\n    }",
        "begin_line": 25,
        "end_line": 32,
        "comment": " (non-Javadoc)\r\n     * @see org.mockito.AnnotationEngine#createMockFor(java.lang.annotation.Annotation, java.lang.reflect.Field)\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/runners/MockitoJUnitRunner.java",
        "class_name": "org.mockito.runners.MockitoJUnitRunner",
        "signature": "org.mockito.runners.MockitoJUnitRunner.MockitoJUnitRunner(java.lang.Class<?>)",
        "snippet": "    public MockitoJUnitRunner(Class<?> klass) {\n        runner = new RunnerFactory().create(klass);\n    }",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/runners/MockitoJUnitRunner.java",
        "class_name": "org.mockito.runners.MockitoJUnitRunner",
        "signature": "org.mockito.runners.MockitoJUnitRunner.run(org.junit.runner.notification.RunNotifier)",
        "snippet": "    @Override\n    public void run(final RunNotifier notifier) {           \n        runner.run(notifier);\n    }",
        "begin_line": 55,
        "end_line": 58,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/runners/MockitoJUnitRunner.java",
        "class_name": "org.mockito.runners.MockitoJUnitRunner",
        "signature": "org.mockito.runners.MockitoJUnitRunner.getDescription()",
        "snippet": "    @Override\n    public Description getDescription() {\n        return runner.getDescription();\n    }",
        "begin_line": 60,
        "end_line": 63,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/runners/MockitoJUnitRunner.java",
        "class_name": "org.mockito.runners.MockitoJUnitRunner",
        "signature": "org.mockito.runners.MockitoJUnitRunner.filter(org.junit.runner.manipulation.Filter)",
        "snippet": "    public void filter(org.junit.runner.manipulation.Filter filter) throws org.junit.runner.manipulation.NoTestsRemainException {\n        // filter is required because without it UnrootedTests show up in Eclipse\n        runner.filter(filter);\n    }",
        "begin_line": 64,
        "end_line": 67,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/runners/MockitoJUnit44Runner.java",
        "class_name": "org.mockito.runners.MockitoJUnit44Runner",
        "signature": "org.mockito.runners.MockitoJUnit44Runner.MockitoJUnit44Runner(java.lang.Class<?>)",
        "snippet": "    public MockitoJUnit44Runner(Class<?> klass) {\n        super(klass);\n    }",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/runners/ConsoleSpammingMockitoJUnitRunner.java",
        "class_name": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunner",
        "signature": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunner.ConsoleSpammingMockitoJUnitRunner(java.lang.Class<?>)",
        "snippet": "    public ConsoleSpammingMockitoJUnitRunner(Class<?> klass) {\n        this(klass, new MockitoLoggerImpl(), new RunnerFactory().create(klass));\n    }",
        "begin_line": 94,
        "end_line": 96,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/runners/ConsoleSpammingMockitoJUnitRunner.java",
        "class_name": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunner",
        "signature": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunner.ConsoleSpammingMockitoJUnitRunner(java.lang.Class<?>, org.mockito.internal.util.MockitoLogger, org.mockito.internal.runners.RunnerImpl)",
        "snippet": "    ConsoleSpammingMockitoJUnitRunner(Class<?> klass, MockitoLogger logger, RunnerImpl runnerImpl) {\n        this.runner = runnerImpl;\n        this.logger = logger;\n    }",
        "begin_line": 98,
        "end_line": 101,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/runners/ConsoleSpammingMockitoJUnitRunner.java",
        "class_name": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunner",
        "signature": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunner.run(org.junit.runner.notification.RunNotifier)",
        "snippet": "    @Override\n    public void run(RunNotifier notifier) {\n        MockingProgress progress = new ThreadSafeMockingProgress();\n        DebuggingInfo debuggingInfo = progress.getDebuggingInfo();\n        \n        beforeRun(notifier, debuggingInfo);\n        \n        runner.run(notifier);\n        \n        afterRun(debuggingInfo);\n    }",
        "begin_line": 103,
        "end_line": 113,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/runners/ConsoleSpammingMockitoJUnitRunner.java",
        "class_name": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunner",
        "signature": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunner.afterRun(org.mockito.internal.debugging.DebuggingInfo)",
        "snippet": "    private void afterRun(final DebuggingInfo debuggingInfo) {\n        debuggingInfo.clearData();\n    }",
        "begin_line": 115,
        "end_line": 117,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/runners/ConsoleSpammingMockitoJUnitRunner.java",
        "class_name": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunner",
        "signature": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunner.beforeRun(org.junit.runner.notification.RunNotifier, org.mockito.internal.debugging.DebuggingInfo)",
        "snippet": "    private void beforeRun(RunNotifier notifier, final DebuggingInfo debuggingInfo) {\n        debuggingInfo.collectData();\n\n        RunListener listener = new RunListener() {\n            @Override public void testFailure(Failure failure) throws Exception {\n                debuggingInfo.printWarnings(logger);\n            }\n        };\n        \n        notifier.addListener(listener);\n    }",
        "begin_line": 119,
        "end_line": 129,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/runners/ConsoleSpammingMockitoJUnitRunner.java",
        "class_name": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunner",
        "signature": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunner.Anonymous-d2f87097-a165-4378-8ccf-791ec9956d61.testFailure(org.junit.runner.notification.Failure)",
        "snippet": "            @Override public void testFailure(Failure failure) throws Exception {\n                debuggingInfo.printWarnings(logger);\n            }",
        "begin_line": 123,
        "end_line": 125,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/runners/ConsoleSpammingMockitoJUnitRunner.java",
        "class_name": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunner",
        "signature": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunner.getDescription()",
        "snippet": "    @Override\n    public Description getDescription() {\n        return runner.getDescription();\n    }",
        "begin_line": 131,
        "end_line": 134,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Pluralizer.java",
        "class_name": "org.mockito.exceptions.Pluralizer",
        "signature": "org.mockito.exceptions.Pluralizer.pluralize(int)",
        "snippet": "    public static String pluralize(int number) {\n        return number == 1 ? \"1 time\" : number + \" times\";\n    }",
        "begin_line": 9,
        "end_line": 11,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/PrintableInvocation.java",
        "class_name": "org.mockito.exceptions.PrintableInvocation",
        "signature": "org.mockito.exceptions.PrintableInvocation.toString()",
        "snippet": "    String toString();",
        "begin_line": 11,
        "end_line": 11,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/PrintableInvocation.java",
        "class_name": "org.mockito.exceptions.PrintableInvocation",
        "signature": "org.mockito.exceptions.PrintableInvocation.getLocation()",
        "snippet": "    Location getLocation();",
        "begin_line": 13,
        "end_line": 13,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Reporter.java",
        "class_name": "org.mockito.exceptions.Reporter",
        "signature": "org.mockito.exceptions.Reporter.checkedExceptionInvalid(java.lang.Throwable)",
        "snippet": "    public void checkedExceptionInvalid(Throwable t) {\n        throw new MockitoException(join(\n                \"Checked exception is invalid for this method!\",\n                \"Invalid: \" + t\n                ));\n    }",
        "begin_line": 45,
        "end_line": 50,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Reporter.java",
        "class_name": "org.mockito.exceptions.Reporter",
        "signature": "org.mockito.exceptions.Reporter.cannotStubWithNullThrowable()",
        "snippet": "    public void cannotStubWithNullThrowable() {\n        throw new MockitoException(join(\n                \"Cannot stub with null throwable!\"\n                ));\n\n    }",
        "begin_line": 52,
        "end_line": 57,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Reporter.java",
        "class_name": "org.mockito.exceptions.Reporter",
        "signature": "org.mockito.exceptions.Reporter.unfinishedStubbing(org.mockito.internal.debugging.Location)",
        "snippet": "    public void unfinishedStubbing(Location location) {\n        throw new UnfinishedStubbingException(join(\n                \"Unfinished stubbing detected here:\",\n                location,\n                \"\",\n                \"E.g. thenReturn() may be missing.\",\n                \"Examples of correct stubbing:\",\n                \"    when(mock.isOk()).thenReturn(true);\",\n                \"    when(mock.isOk()).thenThrow(exception);\",\n                \"    doThrow(exception).when(mock).someVoidMethod();\",\n                \"Hints:\",\n                \" 1. missing thenReturn()\",\n                \" 2. although stubbed methods may return mocks, you cannot inline mock creation (mock()) call inside a thenReturn method (see issue 53)\",\n                \"\"\n        ));\n    }",
        "begin_line": 59,
        "end_line": 74,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Reporter.java",
        "class_name": "org.mockito.exceptions.Reporter",
        "signature": "org.mockito.exceptions.Reporter.missingMethodInvocation()",
        "snippet": "    public void missingMethodInvocation() {\n        throw new MissingMethodInvocationException(join(\n                \"when() requires an argument which has to be a method call on a mock.\",\n                \"For example:\",\n                \"    when(mock.getArticles()).thenReturn(articles);\",\n                \"\",\n                \"Also, this error might show up because you stub final/private/equals() or hashCode() method.\",\n                \"Those methods *cannot* be stubbed/verified.\",\n                \"\"\n        ));\n    }",
        "begin_line": 76,
        "end_line": 86,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Reporter.java",
        "class_name": "org.mockito.exceptions.Reporter",
        "signature": "org.mockito.exceptions.Reporter.unfinishedVerificationException(org.mockito.internal.debugging.Location)",
        "snippet": "    public void unfinishedVerificationException(Location location) {\n        UnfinishedVerificationException exception = new UnfinishedVerificationException(join(\n                \"Missing method call for verify(mock) here:\",\n                location,\n                \"\",\n                \"Example of correct verification:\",\n                \"    verify(mock).doSomething()\",\n                \"\",\n                \"Also, this error might show up because you verify final/private/equals() or hashCode() method.\",\n                \"Those methods *cannot* be stubbed/verified.\",\n                \"\"\n        ));\n        \n        throw exception;\n    }",
        "begin_line": 88,
        "end_line": 102,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Reporter.java",
        "class_name": "org.mockito.exceptions.Reporter",
        "signature": "org.mockito.exceptions.Reporter.notAMockPassedToVerify()",
        "snippet": "    public void notAMockPassedToVerify() {\n        throw new NotAMockException(join(\n                \"Argument passed to verify() is not a mock!\",\n                \"Examples of correct verifications:\",\n                \"    verify(mock).someMethod();\",\n                \"    verify(mock, times(10)).someMethod();\",\n                \"    verify(mock, atLeastOnce()).someMethod();\"\n        ));\n    }",
        "begin_line": 104,
        "end_line": 112,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Reporter.java",
        "class_name": "org.mockito.exceptions.Reporter",
        "signature": "org.mockito.exceptions.Reporter.nullPassedToVerify()",
        "snippet": "    public void nullPassedToVerify() {\n        throw new NullInsteadOfMockException(join(\n                \"Argument passed to verify() is null!\",\n                \"Examples of correct verifications:\",\n                \"    verify(mock).someMethod();\",\n                \"    verify(mock, times(10)).someMethod();\",\n                \"    verify(mock, atLeastOnce()).someMethod();\",\n                \"Also, if you use @Mock annotation don't miss initMocks()\"\n        ));\n    }    ",
        "begin_line": 114,
        "end_line": 123,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Reporter.java",
        "class_name": "org.mockito.exceptions.Reporter",
        "signature": "org.mockito.exceptions.Reporter.notAMockPassedToWhenMethod()",
        "snippet": "    public void notAMockPassedToWhenMethod() {\n        throw new NotAMockException(join(\n                \"Argument passed to when() is not a mock!\",\n                \"Example of correct stubbing:\",\n                \"    doThrow(new RuntimeException()).when(mock).someMethod();\"\n        ));\n    }",
        "begin_line": 125,
        "end_line": 131,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Reporter.java",
        "class_name": "org.mockito.exceptions.Reporter",
        "signature": "org.mockito.exceptions.Reporter.nullPassedToWhenMethod()",
        "snippet": "    public void nullPassedToWhenMethod() {\n        throw new NullInsteadOfMockException(join(\n                \"Argument passed to when() is null!\",\n                \"Example of correct stubbing:\",\n                \"    doThrow(new RuntimeException()).when(mock).someMethod();\",                \n                \"Also, if you use @Mock annotation don't miss initMocks()\"\n        ));\n    }",
        "begin_line": 133,
        "end_line": 140,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Reporter.java",
        "class_name": "org.mockito.exceptions.Reporter",
        "signature": "org.mockito.exceptions.Reporter.mocksHaveToBePassedToVerifyNoMoreInteractions()",
        "snippet": "    public void mocksHaveToBePassedToVerifyNoMoreInteractions() {\n        throw new MockitoException(join(\n                \"Method requires argument(s)!\",\n                \"Pass mocks that should be verified, e.g:\",\n                \"    verifyNoMoreInteractions(mockOne, mockTwo);\",\n                \"    verifyZeroInteractions(mockOne, mockTwo);\"\n                ));\n    }",
        "begin_line": 142,
        "end_line": 149,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Reporter.java",
        "class_name": "org.mockito.exceptions.Reporter",
        "signature": "org.mockito.exceptions.Reporter.notAMockPassedToVerifyNoMoreInteractions()",
        "snippet": "    public void notAMockPassedToVerifyNoMoreInteractions() {\n        throw new NotAMockException(join(\n            \"Argument(s) passed is not a mock!\",\n            \"Examples of correct verifications:\",\n            \"    verifyNoMoreInteractions(mockOne, mockTwo);\",\n            \"    verifyZeroInteractions(mockOne, mockTwo);\"\n        ));\n    }",
        "begin_line": 151,
        "end_line": 158,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Reporter.java",
        "class_name": "org.mockito.exceptions.Reporter",
        "signature": "org.mockito.exceptions.Reporter.nullPassedToVerifyNoMoreInteractions()",
        "snippet": "    public void nullPassedToVerifyNoMoreInteractions() {\n        throw new NullInsteadOfMockException(join(\n                \"Argument(s) passed is null!\",\n                \"Examples of correct verifications:\",\n                \"    verifyNoMoreInteractions(mockOne, mockTwo);\",\n                \"    verifyZeroInteractions(mockOne, mockTwo);\"\n        ));\n    }",
        "begin_line": 160,
        "end_line": 167,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Reporter.java",
        "class_name": "org.mockito.exceptions.Reporter",
        "signature": "org.mockito.exceptions.Reporter.notAMockPassedWhenCreatingInOrder()",
        "snippet": "    public void notAMockPassedWhenCreatingInOrder() {\n        throw new NotAMockException(join(\n                \"Argument(s) passed is not a mock!\",\n                \"Pass mocks that require verification in order.\",\n                \"For example:\",\n                \"    InOrder inOrder = inOrder(mockOne, mockTwo);\"\n                ));\n    } ",
        "begin_line": 169,
        "end_line": 176,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Reporter.java",
        "class_name": "org.mockito.exceptions.Reporter",
        "signature": "org.mockito.exceptions.Reporter.nullPassedWhenCreatingInOrder()",
        "snippet": "    public void nullPassedWhenCreatingInOrder() {\n        throw new NullInsteadOfMockException(join(\n                \"Argument(s) passed is null!\",\n                \"Pass mocks that require verification in order.\",\n                \"For example:\",\n                \"    InOrder inOrder = inOrder(mockOne, mockTwo);\"\n                ));\n    }",
        "begin_line": 178,
        "end_line": 185,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Reporter.java",
        "class_name": "org.mockito.exceptions.Reporter",
        "signature": "org.mockito.exceptions.Reporter.mocksHaveToBePassedWhenCreatingInOrder()",
        "snippet": "    public void mocksHaveToBePassedWhenCreatingInOrder() {\n        throw new MockitoException(join(\n                \"Method requires argument(s)!\",\n                \"Pass mocks that require verification in order.\",\n                \"For example:\",\n                \"    InOrder inOrder = inOrder(mockOne, mockTwo);\"\n                ));\n    }",
        "begin_line": 187,
        "end_line": 194,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Reporter.java",
        "class_name": "org.mockito.exceptions.Reporter",
        "signature": "org.mockito.exceptions.Reporter.inOrderRequiresFamiliarMock()",
        "snippet": "    public void inOrderRequiresFamiliarMock() {\n        throw new MockitoException(join(\n                \"InOrder can only verify mocks that were passed in during creation of InOrder.\",\n                \"For example:\",\n                \"    InOrder inOrder = inOrder(mockOne);\",\n                \"    inOrder.verify(mockOne).doStuff();\"\n                ));\n    }",
        "begin_line": 196,
        "end_line": 203,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Reporter.java",
        "class_name": "org.mockito.exceptions.Reporter",
        "signature": "org.mockito.exceptions.Reporter.invalidUseOfMatchers(int, int)",
        "snippet": "    public void invalidUseOfMatchers(int expectedMatchersCount, int recordedMatchersCount) {\n        throw new InvalidUseOfMatchersException(join(\n                \"Invalid use of argument matchers!\",\n                expectedMatchersCount + \" matchers expected, \" + recordedMatchersCount + \" recorded.\",\n                \"This exception may occur if matchers are combined with raw values:\",        \n                \"    //incorrect:\",\n                \"    someMethod(anyObject(), \\\"raw String\\\");\",\n                \"When using matchers, all arguments have to be provided by matchers.\",\n                \"For example:\",\n                \"    //correct:\",\n                \"    someMethod(anyObject(), eq(\\\"String by matcher\\\"));\",\n                \"\",\n                \"For more info see javadoc for Matchers class.\"\n        ));\n    }    ",
        "begin_line": 205,
        "end_line": 219,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Reporter.java",
        "class_name": "org.mockito.exceptions.Reporter",
        "signature": "org.mockito.exceptions.Reporter.argumentsAreDifferent(java.lang.String, java.lang.String, org.mockito.internal.debugging.Location)",
        "snippet": "    public void argumentsAreDifferent(String wanted, String actual, Location actualLocation) {\n        String message = join(\"Argument(s) are different! Wanted:\", \n                wanted,\n                new Location(),\n                \"Actual invocation has different arguments:\",\n                actual,\n                actualLocation,\n                \"\"\n                );\n        \n        if (JUnitTool.hasJUnit()) {\n            throw JUnitTool.createArgumentsAreDifferentException(message, wanted, actual);\n        } else {\n            throw new ArgumentsAreDifferent(message);\n        }\n    }",
        "begin_line": 221,
        "end_line": 236,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Reporter.java",
        "class_name": "org.mockito.exceptions.Reporter",
        "signature": "org.mockito.exceptions.Reporter.wantedButNotInvoked(org.mockito.exceptions.PrintableInvocation)",
        "snippet": "    public void wantedButNotInvoked(PrintableInvocation wanted) {\n        throw new WantedButNotInvoked(createWantedButNotInvokedMessage(wanted));\n    }",
        "begin_line": 238,
        "end_line": 240,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Reporter.java",
        "class_name": "org.mockito.exceptions.Reporter",
        "signature": "org.mockito.exceptions.Reporter.wantedButNotInvoked(org.mockito.exceptions.PrintableInvocation, java.util.List<? extends org.mockito.exceptions.PrintableInvocation>)",
        "snippet": "    public void wantedButNotInvoked(PrintableInvocation wanted, List<? extends PrintableInvocation> invocations) {\n        String allInvocations;\n        if (invocations.isEmpty()) {\n            allInvocations = \"Actually, there were zero interactions with this mock.\\n\";\n        } else {\n            StringBuilder sb = new StringBuilder(\"\\nHowever, there were other interactions with this mock:\\n\");\n            for (PrintableInvocation i : invocations) {\n                 sb.append(i.getLocation());\n                 sb.append(\"\\n\");\n            }\n            allInvocations = sb.toString();\n        }\n        \n        String message = createWantedButNotInvokedMessage(wanted);\n        throw new WantedButNotInvoked(message + allInvocations);\n    }",
        "begin_line": 242,
        "end_line": 257,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Reporter.java",
        "class_name": "org.mockito.exceptions.Reporter",
        "signature": "org.mockito.exceptions.Reporter.createWantedButNotInvokedMessage(org.mockito.exceptions.PrintableInvocation)",
        "snippet": "    private String createWantedButNotInvokedMessage(PrintableInvocation wanted) {\n        return join(\n                \"Wanted but not invoked:\",\n                wanted.toString(),\n                new Location(),\n                \"\"\n        );\n    }",
        "begin_line": 259,
        "end_line": 266,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Reporter.java",
        "class_name": "org.mockito.exceptions.Reporter",
        "signature": "org.mockito.exceptions.Reporter.wantedButNotInvokedInOrder(org.mockito.exceptions.PrintableInvocation, org.mockito.exceptions.PrintableInvocation)",
        "snippet": "    public void wantedButNotInvokedInOrder(PrintableInvocation wanted, PrintableInvocation previous) {\n        throw new VerificationInOrderFailure(join(\n                    \"Verification in order failure\",\n                    \"Wanted but not invoked:\",\n                    wanted.toString(),\n                    new Location(),\n                    \"Wanted anywhere AFTER following interaction:\",\n                    previous.toString(),\n                    previous.getLocation(),\n                    \"\"\n        ));\n    }",
        "begin_line": 268,
        "end_line": 279,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Reporter.java",
        "class_name": "org.mockito.exceptions.Reporter",
        "signature": "org.mockito.exceptions.Reporter.tooManyActualInvocations(int, int, org.mockito.exceptions.PrintableInvocation, org.mockito.internal.debugging.Location)",
        "snippet": "    public void tooManyActualInvocations(int wantedCount, int actualCount, PrintableInvocation wanted, Location firstUndesired) {\n        String message = createTooManyInvocationsMessage(wantedCount, actualCount, wanted, firstUndesired);\n        throw new TooManyActualInvocations(message);\n    }",
        "begin_line": 281,
        "end_line": 284,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Reporter.java",
        "class_name": "org.mockito.exceptions.Reporter",
        "signature": "org.mockito.exceptions.Reporter.createTooManyInvocationsMessage(int, int, org.mockito.exceptions.PrintableInvocation, org.mockito.internal.debugging.Location)",
        "snippet": "    private String createTooManyInvocationsMessage(int wantedCount, int actualCount, PrintableInvocation wanted,\n            Location firstUndesired) {\n        return join(\n                wanted.toString(),\n                \"Wanted \" + Pluralizer.pluralize(wantedCount) + \":\",\n                new Location(),\n                \"But was \" + pluralize(actualCount) + \". Undesired invocation:\",\n                firstUndesired,\n                \"\"\n        );\n    }",
        "begin_line": 286,
        "end_line": 296,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Reporter.java",
        "class_name": "org.mockito.exceptions.Reporter",
        "signature": "org.mockito.exceptions.Reporter.neverWantedButInvoked(org.mockito.exceptions.PrintableInvocation, org.mockito.internal.debugging.Location)",
        "snippet": "    public void neverWantedButInvoked(PrintableInvocation wanted, Location firstUndesired) {\n        throw new NeverWantedButInvoked(join(\n                wanted.toString(),\n                \"Never wanted here:\",\n                new Location(),\n                \"But invoked here:\",\n                firstUndesired,\n                \"\"\n        ));\n    }    ",
        "begin_line": 298,
        "end_line": 307,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Reporter.java",
        "class_name": "org.mockito.exceptions.Reporter",
        "signature": "org.mockito.exceptions.Reporter.tooManyActualInvocationsInOrder(int, int, org.mockito.exceptions.PrintableInvocation, org.mockito.internal.debugging.Location)",
        "snippet": "    public void tooManyActualInvocationsInOrder(int wantedCount, int actualCount, PrintableInvocation wanted, Location firstUndesired) {\n        String message = createTooManyInvocationsMessage(wantedCount, actualCount, wanted, firstUndesired);\n        throw new VerificationInOrderFailure(join(\n                \"Verification in order failure:\" + message\n                ));\n    }",
        "begin_line": 309,
        "end_line": 314,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Reporter.java",
        "class_name": "org.mockito.exceptions.Reporter",
        "signature": "org.mockito.exceptions.Reporter.createTooLittleInvocationsMessage(org.mockito.exceptions.Discrepancy, org.mockito.exceptions.PrintableInvocation, org.mockito.internal.debugging.Location)",
        "snippet": "    private String createTooLittleInvocationsMessage(Discrepancy discrepancy, PrintableInvocation wanted,\n            Location lastActualInvocation) {\n        String ending = \n            (lastActualInvocation != null)? lastActualInvocation + \"\\n\" : \"\\n\";\n            \n            String message = join(\n                    wanted.toString(),\n                    \"Wanted \" + discrepancy.getPluralizedWantedCount() + \":\",\n                    new Location(),\n                    \"But was \" + discrepancy.getPluralizedActualCount() + \":\", \n                    ending\n            );\n            return message;\n    }",
        "begin_line": 316,
        "end_line": 329,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Reporter.java",
        "class_name": "org.mockito.exceptions.Reporter",
        "signature": "org.mockito.exceptions.Reporter.tooLittleActualInvocations(org.mockito.exceptions.Discrepancy, org.mockito.exceptions.PrintableInvocation, org.mockito.internal.debugging.Location)",
        "snippet": "    public void tooLittleActualInvocations(Discrepancy discrepancy, PrintableInvocation wanted, Location lastActualLocation) {\n        String message = createTooLittleInvocationsMessage(discrepancy, wanted, lastActualLocation);\n        \n        throw new TooLittleActualInvocations(message);\n    }",
        "begin_line": 331,
        "end_line": 335,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Reporter.java",
        "class_name": "org.mockito.exceptions.Reporter",
        "signature": "org.mockito.exceptions.Reporter.tooLittleActualInvocationsInOrder(org.mockito.exceptions.Discrepancy, org.mockito.exceptions.PrintableInvocation, org.mockito.internal.debugging.Location)",
        "snippet": "    public void tooLittleActualInvocationsInOrder(Discrepancy discrepancy, PrintableInvocation wanted, Location lastActualLocation) {\n        String message = createTooLittleInvocationsMessage(discrepancy, wanted, lastActualLocation);\n        \n        throw new VerificationInOrderFailure(join(\n                \"Verification in order failure:\" + message\n                ));\n    }",
        "begin_line": 337,
        "end_line": 343,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Reporter.java",
        "class_name": "org.mockito.exceptions.Reporter",
        "signature": "org.mockito.exceptions.Reporter.noMoreInteractionsWanted(org.mockito.exceptions.PrintableInvocation)",
        "snippet": "    public void noMoreInteractionsWanted(PrintableInvocation undesired) {\n        throw new NoInteractionsWanted(join(\n                \"No interactions wanted here:\",\n                new Location(),\n                \"But found this interaction:\",\n                undesired.getLocation(),\n                \"\"\n                ));\n    }",
        "begin_line": 345,
        "end_line": 353,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Reporter.java",
        "class_name": "org.mockito.exceptions.Reporter",
        "signature": "org.mockito.exceptions.Reporter.cannotMockFinalClass(java.lang.Class<?>)",
        "snippet": "    public void cannotMockFinalClass(Class<?> clazz) {\n        throw new MockitoException(join(\n                \"Cannot mock/spy \" + clazz.toString(),\n                \"Mockito cannot mock/spy following:\",\n                \"  - final classes\",\n                \"  - anonymous classes\",\n                \"  - primitive types\"\n        ));\n    }",
        "begin_line": 355,
        "end_line": 363,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Reporter.java",
        "class_name": "org.mockito.exceptions.Reporter",
        "signature": "org.mockito.exceptions.Reporter.cannotStubVoidMethodWithAReturnValue()",
        "snippet": "    public void cannotStubVoidMethodWithAReturnValue() {\n        throw new MockitoException(join(\n                \"Cannot stub a void method with a return value!\",\n                \"Voids are usually stubbed with Throwables:\",\n                \"    doThrow(exception).when(mock).someVoidMethod();\"\n             ));\n    }",
        "begin_line": 365,
        "end_line": 371,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Reporter.java",
        "class_name": "org.mockito.exceptions.Reporter",
        "signature": "org.mockito.exceptions.Reporter.onlyVoidMethodsCanBeSetToDoNothing()",
        "snippet": "    public void onlyVoidMethodsCanBeSetToDoNothing() {\n        throw new MockitoException(join(\n                \"Only void methods can doNothing()!\",\n                \"Example of correct use of doNothing():\",\n                \"    doNothing().\",\n                \"    doThrow(new RuntimeException())\",\n                \"    .when(mock).someVoidMethod();\",\n                \"Above means:\",\n                \"someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called\"\n             ));\n    }",
        "begin_line": 373,
        "end_line": 383,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Reporter.java",
        "class_name": "org.mockito.exceptions.Reporter",
        "signature": "org.mockito.exceptions.Reporter.wrongTypeOfReturnValue(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    public void wrongTypeOfReturnValue(String expectedType, String actualType, String methodName) {\n        throw new WrongTypeOfReturnValue(join(\n                actualType + \" cannot be returned by \" + methodName + \"()\",\n                methodName + \"() should return \" + expectedType\n                ));\n    }",
        "begin_line": 385,
        "end_line": 390,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Reporter.java",
        "class_name": "org.mockito.exceptions.Reporter",
        "signature": "org.mockito.exceptions.Reporter.wantedAtMostX(int, int)",
        "snippet": "    public void wantedAtMostX(int maxNumberOfInvocations, int foundSize) {\n        throw new MockitoAssertionError(join(\"Wanted at most \" + pluralize(maxNumberOfInvocations) + \" but was \" + foundSize));\n    }",
        "begin_line": 392,
        "end_line": 394,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Reporter.java",
        "class_name": "org.mockito.exceptions.Reporter",
        "signature": "org.mockito.exceptions.Reporter.misplacedArgumentMatcher(org.mockito.internal.debugging.Location)",
        "snippet": "    public void misplacedArgumentMatcher(Location location) {\n        throw new InvalidUseOfMatchersException(join(\n                \"Misplaced argument matcher detected here:\",\n                location,\n                \"\",\n                \"You cannot use argument matchers outside of verification or stubbing.\",\n                \"Examples of correct usage of argument matchers:\",\n                \"    when(mock.get(anyInt())).thenReturn(null);\",\n                \"    doThrow(new RuntimeException()).when(mock).someVoidMethod(anyObject());\",\n                \"    verify(mock).someMethod(contains(\\\"foo\\\"))\",\n                \"\",\n                \"Also, this error might show up because you use argument matchers with methods that cannot be mocked.\",\n                \"Following methods *cannot* be stubbed/verified: final/private/equals()/hashCode() methods.\",                \n                \"\"\n                ));\n    }",
        "begin_line": 396,
        "end_line": 411,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Reporter.java",
        "class_name": "org.mockito.exceptions.Reporter",
        "signature": "org.mockito.exceptions.Reporter.smartNullPointerException(org.mockito.internal.debugging.Location)",
        "snippet": "    public void smartNullPointerException(Location location) {\n        throw new SmartNullPointerException(join(\n                \"You have a NullPointerException here:\",\n                new Location(),\n                \"Because this method was *not* stubbed correctly:\",\n                location,\n                \"\"\n                ));\n    }",
        "begin_line": 413,
        "end_line": 421,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Reporter.java",
        "class_name": "org.mockito.exceptions.Reporter",
        "signature": "org.mockito.exceptions.Reporter.noArgumentValueWasCaptured()",
        "snippet": "    public void noArgumentValueWasCaptured() {\n        throw new MockitoException(join(\n                \"No argument value was captured!\",\n                \"You might have forgotten to use argument.capture() in verify()...\",\n                \"...or you used capture() in stubbing but stubbed method was not called.\",\n                \"Be aware that it is recommended to use capture() only with verify()\",\n                \"\",\n                \"Examples of correct argument capturing:\",\n                \"    Argument<Person> argument = new Argument<Person>();\",\n                \"    verify(mock).doSomething(argument.capture());\",\n                \"    assertEquals(\\\"John\\\", argument.getValue().getName());\",\n                \"\"\n                ));\n    }",
        "begin_line": 423,
        "end_line": 436,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Reporter.java",
        "class_name": "org.mockito.exceptions.Reporter",
        "signature": "org.mockito.exceptions.Reporter.extraInterfacesDoesNotAcceptNullParameters()",
        "snippet": "    public void extraInterfacesDoesNotAcceptNullParameters() {\n        throw new MockitoException(join(\n                \"extraInterfaces() does not accept null parameters.\"\n                ));\n    }",
        "begin_line": 438,
        "end_line": 442,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Reporter.java",
        "class_name": "org.mockito.exceptions.Reporter",
        "signature": "org.mockito.exceptions.Reporter.extraInterfacesAcceptsOnlyInterfaces(java.lang.Class<?>)",
        "snippet": "    public void extraInterfacesAcceptsOnlyInterfaces(Class<?> wrongType) {\n        throw new MockitoException(join(\n                \"extraInterfaces() accepts only interfaces.\",\n                \"You passed following type: \" + wrongType.getSimpleName() + \" which is not an interface.\"\n        ));\n    }",
        "begin_line": 444,
        "end_line": 449,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Reporter.java",
        "class_name": "org.mockito.exceptions.Reporter",
        "signature": "org.mockito.exceptions.Reporter.extraInterfacesCannotContainMockedType(java.lang.Class<?>)",
        "snippet": "    public void extraInterfacesCannotContainMockedType(Class<?> wrongType) {\n        throw new MockitoException(join(\n                \"extraInterfaces() does not accept the same type as the mocked type.\",\n                \"You mocked following type: \" + wrongType.getSimpleName(), \n                \"and you passed the same very interface to the extraInterfaces()\"\n        ));\n    }",
        "begin_line": 451,
        "end_line": 457,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Reporter.java",
        "class_name": "org.mockito.exceptions.Reporter",
        "signature": "org.mockito.exceptions.Reporter.extraInterfacesRequiresAtLeastOneInterface()",
        "snippet": "    public void extraInterfacesRequiresAtLeastOneInterface() {\n        throw new MockitoException(join(\n                \"extraInterfaces() requires at least one interface.\"\n        ));\n    }",
        "begin_line": 459,
        "end_line": 463,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Discrepancy.java",
        "class_name": "org.mockito.exceptions.Discrepancy",
        "signature": "org.mockito.exceptions.Discrepancy.Discrepancy(int, int)",
        "snippet": "    public Discrepancy(int wantedCount, int actualCount) {\n        this.wantedCount = wantedCount;\n        this.actualCount = actualCount;\n    }",
        "begin_line": 12,
        "end_line": 15,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Discrepancy.java",
        "class_name": "org.mockito.exceptions.Discrepancy",
        "signature": "org.mockito.exceptions.Discrepancy.getWantedCount()",
        "snippet": "    public int getWantedCount() {\n        return wantedCount;\n    }",
        "begin_line": 17,
        "end_line": 19,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Discrepancy.java",
        "class_name": "org.mockito.exceptions.Discrepancy",
        "signature": "org.mockito.exceptions.Discrepancy.getPluralizedWantedCount()",
        "snippet": "    public String getPluralizedWantedCount() {\n        return Pluralizer.pluralize(wantedCount);\n    }",
        "begin_line": 21,
        "end_line": 23,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Discrepancy.java",
        "class_name": "org.mockito.exceptions.Discrepancy",
        "signature": "org.mockito.exceptions.Discrepancy.getActualCount()",
        "snippet": "    public int getActualCount() {\n        return actualCount;\n    }",
        "begin_line": 25,
        "end_line": 27,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/Discrepancy.java",
        "class_name": "org.mockito.exceptions.Discrepancy",
        "signature": "org.mockito.exceptions.Discrepancy.getPluralizedActualCount()",
        "snippet": "    public String getPluralizedActualCount() {\n        return Pluralizer.pluralize(actualCount);\n    }",
        "begin_line": 29,
        "end_line": 31,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/verification/TooLittleActualInvocations.java",
        "class_name": "org.mockito.exceptions.verification.TooLittleActualInvocations",
        "signature": "org.mockito.exceptions.verification.TooLittleActualInvocations.TooLittleActualInvocations(java.lang.String)",
        "snippet": "    public TooLittleActualInvocations(String message) {\n        super(message);\n    }",
        "begin_line": 13,
        "end_line": 15,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/verification/NeverWantedButInvoked.java",
        "class_name": "org.mockito.exceptions.verification.NeverWantedButInvoked",
        "signature": "org.mockito.exceptions.verification.NeverWantedButInvoked.NeverWantedButInvoked(java.lang.String)",
        "snippet": "    public NeverWantedButInvoked(String message) {\n        super(message);\n    }",
        "begin_line": 13,
        "end_line": 15,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/verification/WantedButNotInvoked.java",
        "class_name": "org.mockito.exceptions.verification.WantedButNotInvoked",
        "signature": "org.mockito.exceptions.verification.WantedButNotInvoked.WantedButNotInvoked(java.lang.String)",
        "snippet": "    public WantedButNotInvoked(String message) {\n        super(message);\n    }",
        "begin_line": 13,
        "end_line": 15,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/verification/VerificationInOrderFailure.java",
        "class_name": "org.mockito.exceptions.verification.VerificationInOrderFailure",
        "signature": "org.mockito.exceptions.verification.VerificationInOrderFailure.VerificationInOrderFailure(java.lang.String)",
        "snippet": "    public VerificationInOrderFailure(String message) {\n        super(message);\n    }",
        "begin_line": 13,
        "end_line": 15,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/verification/ArgumentsAreDifferent.java",
        "class_name": "org.mockito.exceptions.verification.ArgumentsAreDifferent",
        "signature": "org.mockito.exceptions.verification.ArgumentsAreDifferent.ArgumentsAreDifferent(java.lang.String)",
        "snippet": "    public ArgumentsAreDifferent(String message) {\n        super(message);\n    }",
        "begin_line": 13,
        "end_line": 15,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/verification/junit/ArgumentsAreDifferent.java",
        "class_name": "org.mockito.exceptions.verification.junit.ArgumentsAreDifferent",
        "signature": "org.mockito.exceptions.verification.junit.ArgumentsAreDifferent.ArgumentsAreDifferent(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    public ArgumentsAreDifferent(String message, String wanted, String actual) {\n        super(message, wanted, actual);\n        this.message = message;\n        \n        unfilteredStackTrace = getStackTrace();\n        ConditionalStackTraceFilter filter = new ConditionalStackTraceFilter();\n        filter.filter(this);\n    }",
        "begin_line": 18,
        "end_line": 25,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/verification/junit/ArgumentsAreDifferent.java",
        "class_name": "org.mockito.exceptions.verification.junit.ArgumentsAreDifferent",
        "signature": "org.mockito.exceptions.verification.junit.ArgumentsAreDifferent.getMessage()",
        "snippet": "    @Override\n    public String getMessage() {\n        return message;\n    }",
        "begin_line": 27,
        "end_line": 30,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/verification/junit/ArgumentsAreDifferent.java",
        "class_name": "org.mockito.exceptions.verification.junit.ArgumentsAreDifferent",
        "signature": "org.mockito.exceptions.verification.junit.ArgumentsAreDifferent.getUnfilteredStackTrace()",
        "snippet": "    public StackTraceElement[] getUnfilteredStackTrace() {\n        return unfilteredStackTrace;\n    }",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/verification/NoInteractionsWanted.java",
        "class_name": "org.mockito.exceptions.verification.NoInteractionsWanted",
        "signature": "org.mockito.exceptions.verification.NoInteractionsWanted.NoInteractionsWanted(java.lang.String)",
        "snippet": "    public NoInteractionsWanted(String message) {\n        super(message);\n    }",
        "begin_line": 16,
        "end_line": 18,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/verification/SmartNullPointerException.java",
        "class_name": "org.mockito.exceptions.verification.SmartNullPointerException",
        "signature": "org.mockito.exceptions.verification.SmartNullPointerException.SmartNullPointerException(java.lang.String)",
        "snippet": "    public SmartNullPointerException(String message) {\n        super(message);\n    }",
        "begin_line": 13,
        "end_line": 15,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/verification/TooManyActualInvocations.java",
        "class_name": "org.mockito.exceptions.verification.TooManyActualInvocations",
        "signature": "org.mockito.exceptions.verification.TooManyActualInvocations.TooManyActualInvocations(java.lang.String)",
        "snippet": "    public TooManyActualInvocations(String message) {\n        super(message);\n    }",
        "begin_line": 13,
        "end_line": 15,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/verification/junit/JUnitTool.java",
        "class_name": "org.mockito.exceptions.verification.junit.JUnitTool",
        "signature": "org.mockito.exceptions.verification.junit.JUnitTool.hasJUnit()",
        "snippet": "    public static boolean hasJUnit() {\n        return hasJUnit;\n    }",
        "begin_line": 22,
        "end_line": 24,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/verification/junit/JUnitTool.java",
        "class_name": "org.mockito.exceptions.verification.junit.JUnitTool",
        "signature": "org.mockito.exceptions.verification.junit.JUnitTool.createArgumentsAreDifferentException(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    public static AssertionError createArgumentsAreDifferentException(String message, String wanted, String actual)  {\n        try {\n            Class<?> clazz = Class.forName(\"org.mockito.exceptions.verification.junit.ArgumentsAreDifferent\");\n            AssertionError throwable = (AssertionError) clazz.getConstructors()[0].newInstance(message, wanted, actual);\n            return throwable;\n        } catch (Throwable t) {\n//            throw the default exception in case of problems\n            return new ArgumentsAreDifferent(message);\n        }\n    }",
        "begin_line": 26,
        "end_line": 35,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/base/MockitoAssertionError.java",
        "class_name": "org.mockito.exceptions.base.MockitoAssertionError",
        "signature": "org.mockito.exceptions.base.MockitoAssertionError.MockitoAssertionError(java.lang.String)",
        "snippet": "    public MockitoAssertionError(String message) {\n        super(message);\n\n        unfilteredStackTrace = getStackTrace();\n        \n        ConditionalStackTraceFilter filter = new ConditionalStackTraceFilter();\n        filter.filter(this);\n    }",
        "begin_line": 16,
        "end_line": 23,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/base/MockitoAssertionError.java",
        "class_name": "org.mockito.exceptions.base.MockitoAssertionError",
        "signature": "org.mockito.exceptions.base.MockitoAssertionError.getUnfilteredStackTrace()",
        "snippet": "    public StackTraceElement[] getUnfilteredStackTrace() {\n        return unfilteredStackTrace;\n    }",
        "begin_line": 25,
        "end_line": 27,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/base/MockitoException.java",
        "class_name": "org.mockito.exceptions.base.MockitoException",
        "signature": "org.mockito.exceptions.base.MockitoException.MockitoException(java.lang.String, java.lang.Throwable)",
        "snippet": "    public MockitoException(String message, Throwable t) {\n        super(message, t);\n        filterStackTrace();\n    }",
        "begin_line": 16,
        "end_line": 19,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/base/MockitoException.java",
        "class_name": "org.mockito.exceptions.base.MockitoException",
        "signature": "org.mockito.exceptions.base.MockitoException.MockitoException(java.lang.String)",
        "snippet": "    public MockitoException(String message) {\n        super(message);\n        filterStackTrace();\n    }",
        "begin_line": 21,
        "end_line": 24,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/base/MockitoException.java",
        "class_name": "org.mockito.exceptions.base.MockitoException",
        "signature": "org.mockito.exceptions.base.MockitoException.filterStackTrace()",
        "snippet": "    private void filterStackTrace() {\n        unfilteredStackTrace = getStackTrace();\n        \n        ConditionalStackTraceFilter filter = new ConditionalStackTraceFilter();\n        filter.filter(this);\n    }",
        "begin_line": 26,
        "end_line": 31,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/base/MockitoException.java",
        "class_name": "org.mockito.exceptions.base.MockitoException",
        "signature": "org.mockito.exceptions.base.MockitoException.getUnfilteredStackTrace()",
        "snippet": "    public StackTraceElement[] getUnfilteredStackTrace() {\n        return unfilteredStackTrace;\n    }",
        "begin_line": 33,
        "end_line": 35,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/misusing/UnfinishedStubbingException.java",
        "class_name": "org.mockito.exceptions.misusing.UnfinishedStubbingException",
        "signature": "org.mockito.exceptions.misusing.UnfinishedStubbingException.UnfinishedStubbingException(java.lang.String)",
        "snippet": "    public UnfinishedStubbingException(String message) {\n        super(message);\n    }",
        "begin_line": 13,
        "end_line": 15,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/misusing/NotAMockException.java",
        "class_name": "org.mockito.exceptions.misusing.NotAMockException",
        "signature": "org.mockito.exceptions.misusing.NotAMockException.NotAMockException(java.lang.String)",
        "snippet": "    public NotAMockException(String message) {\n        super(message);\n    }",
        "begin_line": 13,
        "end_line": 15,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/misusing/NullInsteadOfMockException.java",
        "class_name": "org.mockito.exceptions.misusing.NullInsteadOfMockException",
        "signature": "org.mockito.exceptions.misusing.NullInsteadOfMockException.NullInsteadOfMockException(java.lang.String)",
        "snippet": "    public NullInsteadOfMockException(String message) {\n        super(message);\n    }",
        "begin_line": 13,
        "end_line": 15,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/misusing/MockitoConfigurationException.java",
        "class_name": "org.mockito.exceptions.misusing.MockitoConfigurationException",
        "signature": "org.mockito.exceptions.misusing.MockitoConfigurationException.MockitoConfigurationException(java.lang.String)",
        "snippet": "    public MockitoConfigurationException(String message) {\n        super(message);\n    }",
        "begin_line": 13,
        "end_line": 15,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/misusing/MockitoConfigurationException.java",
        "class_name": "org.mockito.exceptions.misusing.MockitoConfigurationException",
        "signature": "org.mockito.exceptions.misusing.MockitoConfigurationException.MockitoConfigurationException(java.lang.String, java.lang.Exception)",
        "snippet": "    public MockitoConfigurationException(String message, Exception cause) {\n        super(message, cause);\n    }",
        "begin_line": 17,
        "end_line": 19,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/misusing/UnfinishedVerificationException.java",
        "class_name": "org.mockito.exceptions.misusing.UnfinishedVerificationException",
        "signature": "org.mockito.exceptions.misusing.UnfinishedVerificationException.UnfinishedVerificationException(java.lang.String)",
        "snippet": "    public UnfinishedVerificationException(String message) {\n        super(message);\n    }",
        "begin_line": 13,
        "end_line": 15,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/misusing/MissingMethodInvocationException.java",
        "class_name": "org.mockito.exceptions.misusing.MissingMethodInvocationException",
        "signature": "org.mockito.exceptions.misusing.MissingMethodInvocationException.MissingMethodInvocationException(java.lang.String)",
        "snippet": "    public MissingMethodInvocationException(String message) {\n        super(message);\n    }",
        "begin_line": 13,
        "end_line": 15,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/misusing/WrongTypeOfReturnValue.java",
        "class_name": "org.mockito.exceptions.misusing.WrongTypeOfReturnValue",
        "signature": "org.mockito.exceptions.misusing.WrongTypeOfReturnValue.WrongTypeOfReturnValue(java.lang.String)",
        "snippet": "    public WrongTypeOfReturnValue(String message) {\n        super(message);\n    }",
        "begin_line": 13,
        "end_line": 15,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/exceptions/misusing/InvalidUseOfMatchersException.java",
        "class_name": "org.mockito.exceptions.misusing.InvalidUseOfMatchersException",
        "signature": "org.mockito.exceptions.misusing.InvalidUseOfMatchersException.InvalidUseOfMatchersException(java.lang.String)",
        "snippet": "    public InvalidUseOfMatchersException(String message) {\n        super(message);\n    }",
        "begin_line": 13,
        "end_line": 15,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/invocation/InvocationOnMock.java",
        "class_name": "org.mockito.invocation.InvocationOnMock",
        "signature": "org.mockito.invocation.InvocationOnMock.getMock()",
        "snippet": "    Object getMock();",
        "begin_line": 21,
        "end_line": 21,
        "comment": "\n     * returns the mock object \n     * \n     * @return mock object\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/invocation/InvocationOnMock.java",
        "class_name": "org.mockito.invocation.InvocationOnMock",
        "signature": "org.mockito.invocation.InvocationOnMock.getMethod()",
        "snippet": "    Method getMethod();",
        "begin_line": 28,
        "end_line": 28,
        "comment": "\n     * returns the method\n     * \n     * @return method\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/invocation/InvocationOnMock.java",
        "class_name": "org.mockito.invocation.InvocationOnMock",
        "signature": "org.mockito.invocation.InvocationOnMock.getArguments()",
        "snippet": "    Object[] getArguments();",
        "begin_line": 35,
        "end_line": 35,
        "comment": "\n     * returns arguments passed to the method\n     * \n     * @return arguments\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/invocation/InvocationOnMock.java",
        "class_name": "org.mockito.invocation.InvocationOnMock",
        "signature": "org.mockito.invocation.InvocationOnMock.callRealMethod()",
        "snippet": "    Object callRealMethod() throws Throwable;",
        "begin_line": 45,
        "end_line": 45,
        "comment": "\n     * calls real method\n     * <p>\n     * <b>Warning:</b> depending on the real implementation it might throw exceptions  \n     *\n     * @return whatever the real method returns / throws\n     * @throws Throwable in case real method throws \n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/stubbing/VoidMethodStubbable.java",
        "class_name": "org.mockito.stubbing.VoidMethodStubbable",
        "signature": "org.mockito.stubbing.VoidMethodStubbable.toThrow(java.lang.Throwable)",
        "snippet": "    VoidMethodStubbable<T> toThrow(Throwable throwable);",
        "begin_line": 43,
        "end_line": 43,
        "comment": "\r\n     * Stubs void method with an exception. E.g:\r\n     *\r\n     * <pre>\r\n     * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod();\r\n     * </pre>\r\n     *\r\n     * If throwable is a checked exception then it has to\r\n     * match one of the checked exceptions of method signature.\r\n     *\r\n     * See examples in javadoc for {@link Mockito#stubVoid}\r\n     *\r\n     * @param throwable to be thrown on method invocation\r\n     *\r\n     * @return VoidMethodStubbable - typically to choose void method and finish stubbing\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/stubbing/VoidMethodStubbable.java",
        "class_name": "org.mockito.stubbing.VoidMethodStubbable",
        "signature": "org.mockito.stubbing.VoidMethodStubbable.toReturn()",
        "snippet": "    VoidMethodStubbable<T> toReturn();",
        "begin_line": 67,
        "end_line": 67,
        "comment": "\r\n     * Stubs void method to 'just return' (e.g. to <b>not</b> to throw any exception)\r\n     * <p>\r\n     * <b>Only use this method if you're stubbing consecutive calls.</b>\r\n     * <p>\r\n     * For example:\r\n     * <pre>\r\n     * stubVoid(mock)\r\n     *   .toReturn()\r\n     *   .toThrow(new RuntimeException())\r\n     *   .on().foo(10);\r\n     * </pre>\r\n     * <ul>\r\n     * <li>first time foo(10) is called the mock will 'just return' (e.g. don't throw any exception)</li>\r\n     * <li>second time foo(10) is called the mock will throw RuntimeException</li>\r\n     * <li>every consecutive time foo(10) is called the mock will throw RuntimeException</li>\r\n     * </ul>\r\n     * <p>\r\n     * See examples in javadoc for {@link Mockito#stubVoid}\r\n     *\r\n     * @return VoidMethodStubbable - typically to choose void method and finish stubbing\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/stubbing/VoidMethodStubbable.java",
        "class_name": "org.mockito.stubbing.VoidMethodStubbable",
        "signature": "org.mockito.stubbing.VoidMethodStubbable.toAnswer(org.mockito.stubbing.Answer<?>)",
        "snippet": "    VoidMethodStubbable<T> toAnswer(Answer<?> answer);",
        "begin_line": 90,
        "end_line": 90,
        "comment": "\r\n     * Stubs a void method with generic {@link Answer}\r\n     * <p>\r\n     * For Example:\r\n     * <pre>\r\n     * stubVoid(mock)\r\n     *   .toAnswer(new Answer() {\r\n     *                 public Object answer(InvocationOnMOck invocation) {\r\n     *                     Visitor v = (Visitor) invocation.getArguments()[0];\r\n     *                     v.visitMock(invocation.getMock());\r\n     *\r\n     *                     return null;\r\n     *                 }\r\n     *             })\r\n     *    .on().accept(any());\r\n     * </pre>\r\n     *\r\n     * @param answer the custom answer to execute.\r\n     *\r\n     * @return VoidMethodStubbable - typically to choose void method and finish stubbing\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/stubbing/VoidMethodStubbable.java",
        "class_name": "org.mockito.stubbing.VoidMethodStubbable",
        "signature": "org.mockito.stubbing.VoidMethodStubbable.on()",
        "snippet": "    T on();",
        "begin_line": 103,
        "end_line": 103,
        "comment": "\r\n     * Choose void method for stubbing. E.g:\r\n     *\r\n     * <pre>\r\n     * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod(\"some arg\");\r\n     * </pre>\r\n     *\r\n     * See examples in javadoc for {@link Mockito#stubVoid}\r\n     *\r\n     * @return mock object itself\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/stubbing/Stubber.java",
        "class_name": "org.mockito.stubbing.Stubber",
        "signature": "org.mockito.stubbing.Stubber.when(T)",
        "snippet": "    <T> T when(T mock);",
        "begin_line": 72,
        "end_line": 72,
        "comment": "\r\n     * Allows to choose a method when stubbing in doThrow()|doAnswer()|doNothing()|doReturn() style\r\n     * <p> \r\n     * Example:\r\n     * <pre>\r\n     *   doThrow(new RuntimeException())\r\n     *   .when(mockedList).clear();\r\n     *   \r\n     *   //following throws RuntimeException:\r\n     *   mockedList.clear();\r\n     * </pre>\r\n     * \r\n     * Read more about those methods:\r\n     * <p>\r\n     * {@link Mockito#doThrow(Throwable)}\r\n     * <p>\r\n     * {@link Mockito#doAnswer(Answer)}\r\n     * <p>\r\n     * {@link Mockito#doNothing()}\r\n     * <p>\r\n     * {@link Mockito#doReturn(Object)}\r\n     * <p>\r\n     * \r\n     *  See examples in javadoc for {@link Mockito}\r\n     * \r\n     * @param mock\r\n     * @return select method for stubbing\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/stubbing/Stubber.java",
        "class_name": "org.mockito.stubbing.Stubber",
        "signature": "org.mockito.stubbing.Stubber.doThrow(java.lang.Throwable)",
        "snippet": "    Stubber doThrow(Throwable toBeThrown);",
        "begin_line": 86,
        "end_line": 86,
        "comment": "\r\n     * Use it for stubbing consecutive calls in {@link Mockito#doThrow(Throwable)} style:\r\n     * <pre>\r\n     *   doThrow(new RuntimeException(\"one\")).\r\n     *   doThrow(new RuntimeException(\"two\"))\r\n     *   .when(mock).someVoidMethod();\r\n     * </pre>\r\n     * See javadoc for {@link Mockito#doThrow(Throwable)}\r\n     * \r\n     * @param toBeThrown to be thrown when the stubbed method is called\r\n     * @return stubber - to select a method for stubbing\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/stubbing/Stubber.java",
        "class_name": "org.mockito.stubbing.Stubber",
        "signature": "org.mockito.stubbing.Stubber.doAnswer(org.mockito.stubbing.Answer)",
        "snippet": "    Stubber doAnswer(Answer answer);    ",
        "begin_line": 100,
        "end_line": 100,
        "comment": "\r\n     * Use it for stubbing consecutive calls in {@link Mockito#doAnswer(Answer)} style:\r\n     * <pre>\r\n     *   doAnswer(answerOne).\r\n     *   doAnswer(answerTwo)\r\n     *   .when(mock).someVoidMethod();\r\n     * </pre>\r\n     * See javadoc for {@link Mockito#doAnswer(Answer)}\r\n     * \r\n     * @param answer to answer when the stubbed method is called\r\n     * @return stubber - to select a method for stubbing\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/stubbing/Stubber.java",
        "class_name": "org.mockito.stubbing.Stubber",
        "signature": "org.mockito.stubbing.Stubber.doNothing()",
        "snippet": "    Stubber doNothing();",
        "begin_line": 113,
        "end_line": 113,
        "comment": "\r\n     * Use it for stubbing consecutive calls in {@link Mockito#doNothing()} style:\r\n     * <pre>\r\n     *   doNothing().\r\n     *   doThrow(new RuntimeException(\"two\"))\r\n     *   .when(mock).someVoidMethod();\r\n     * </pre>\r\n     * See javadoc for {@link Mockito#doNothing()}\r\n     * \r\n     * @return stubber - to select a method for stubbing\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/stubbing/Stubber.java",
        "class_name": "org.mockito.stubbing.Stubber",
        "signature": "org.mockito.stubbing.Stubber.doReturn(java.lang.Object)",
        "snippet": "    Stubber doReturn(Object toBeReturned);",
        "begin_line": 123,
        "end_line": 123,
        "comment": "\r\n     * Use it for stubbing consecutive calls in {@link Mockito#doReturn(Object)} style.\r\n     * <p>\r\n     * See javadoc for {@link Mockito#doReturn(Object)}\r\n     * \r\n     * @param toBeReturned to be returned when the stubbed method is called\r\n     * @return stubber - to select a method for stubbing\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/stubbing/Answer.java",
        "class_name": "org.mockito.stubbing.Answer",
        "signature": "org.mockito.stubbing.Answer.answer(org.mockito.invocation.InvocationOnMock)",
        "snippet": "    T answer(InvocationOnMock invocation) throws Throwable;",
        "begin_line": 38,
        "end_line": 38,
        "comment": "\r\n     * @param invocation the invocation on the mock.\r\n     *\r\n     * @return the value to be returned\r\n     *\r\n     * @throws Throwable the throwable to be thrown\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/stubbing/DeprecatedOngoingStubbing.java",
        "class_name": "org.mockito.stubbing.DeprecatedOngoingStubbing",
        "signature": "org.mockito.stubbing.DeprecatedOngoingStubbing.toReturn(T)",
        "snippet": "    DeprecatedOngoingStubbing<T> toReturn(T value);",
        "begin_line": 46,
        "end_line": 46,
        "comment": "\r\n     * Set a return value for the stubbed method. E.g:\r\n     * <pre>\r\n     * stub(mock.someMethod()).toReturn(10);\r\n     * </pre>\r\n     *\r\n     * See examples in javadoc for {@link Mockito#stub}\r\n     *\r\n     * @param value return value\r\n     *\r\n     * @return iOngoingStubbing object that allows stubbing consecutive calls\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/stubbing/DeprecatedOngoingStubbing.java",
        "class_name": "org.mockito.stubbing.DeprecatedOngoingStubbing",
        "signature": "org.mockito.stubbing.DeprecatedOngoingStubbing.toThrow(java.lang.Throwable)",
        "snippet": "    DeprecatedOngoingStubbing<T> toThrow(Throwable throwable);",
        "begin_line": 63,
        "end_line": 63,
        "comment": "\r\n     * Set a Throwable to be thrown when the stubbed method is called. E.g:\r\n     * <pre>\r\n     * stub(mock.someMethod()).toThrow(new RuntimeException());\r\n     * </pre>\r\n     *\r\n     * If throwable is a checked exception then it has to\r\n     * match one of the checked exceptions of method signature.\r\n     *\r\n     * See examples in javadoc for {@link Mockito#stub}\r\n     *\r\n     * @param throwable to be thrown on method invocation\r\n     *\r\n     * @return iOngoingStubbing object that allows stubbing consecutive calls\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/stubbing/DeprecatedOngoingStubbing.java",
        "class_name": "org.mockito.stubbing.DeprecatedOngoingStubbing",
        "signature": "org.mockito.stubbing.DeprecatedOngoingStubbing.toAnswer(org.mockito.stubbing.Answer<?>)",
        "snippet": "    DeprecatedOngoingStubbing<T> toAnswer(Answer<?> answer);",
        "begin_line": 79,
        "end_line": 79,
        "comment": "\r\n     * Set a generic Answer for the stubbed method. E.g:\r\n     * <pre>\r\n     * stub(mock.someMethod(10)).toAnswer(new Answer&lt;Integer&gt;() {\r\n     *     public Integer answer(InvocationOnMock invocation) throws Throwable {\r\n     *         return (Integer) invocation.getArguments()[0];\r\n     *     }\r\n     * }\r\n     * </pre>\r\n     *\r\n     * @param answer the custom answer to execute.\r\n     *\r\n     * @return iOngoingStubbing object that allows stubbing consecutive calls\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/stubbing/OngoingStubbing.java",
        "class_name": "org.mockito.stubbing.OngoingStubbing",
        "signature": "org.mockito.stubbing.OngoingStubbing.thenReturn(T)",
        "snippet": "    OngoingStubbing<T> thenReturn(T value);",
        "begin_line": 49,
        "end_line": 49,
        "comment": "\r\n     * Sets a return value to be returned when the method is called. E.g:\r\n     * <pre>\r\n     * when(mock.someMethod()).thenReturn(10);\r\n     * </pre>\r\n     *\r\n     * See examples in javadoc for {@link Mockito#when}\r\n     *\r\n     * @param value return value\r\n     *\r\n     * @return iOngoingStubbing object that allows stubbing consecutive calls\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/stubbing/OngoingStubbing.java",
        "class_name": "org.mockito.stubbing.OngoingStubbing",
        "signature": "org.mockito.stubbing.OngoingStubbing.thenReturn(T, T...)",
        "snippet": "    OngoingStubbing<T> thenReturn(T value, T... values);",
        "begin_line": 66,
        "end_line": 66,
        "comment": "\r\n     * Sets consecutive return values to be returned when the method is called. E.g:\r\n     * <pre>\r\n     * when(mock.someMethod()).thenReturn(1, 2, 3);\r\n     * </pre>\r\n     *\r\n     * Last return value in the sequence (in example: 3) determines the behavior of further consecutive calls.\r\n     * <p>\r\n     * See examples in javadoc for {@link Mockito#when}\r\n     *\r\n     * @param value first return value\r\n     * @param values next return values\r\n     *\r\n     * @return iOngoingStubbing object that allows stubbing consecutive calls\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/stubbing/OngoingStubbing.java",
        "class_name": "org.mockito.stubbing.OngoingStubbing",
        "signature": "org.mockito.stubbing.OngoingStubbing.thenThrow(java.lang.Throwable...)",
        "snippet": "    OngoingStubbing<T> thenThrow(Throwable... throwables);",
        "begin_line": 88,
        "end_line": 88,
        "comment": "\r\n     * Sets Throwable objects to be thrown when the method is called. E.g:\r\n     * <pre>\r\n     * when(mock.someMethod()).thenThrow(new RuntimeException());\r\n     * </pre>\r\n     *\r\n     * If throwables contain a checked exception then it has to\r\n     * match one of the checked exceptions of method signature.\r\n     * <p>\r\n     * You can specify throwables to be thrown for consecutive calls. \r\n     * In that case the last throwable determines the behavior of further consecutive calls.\r\n     * <p>\r\n     * if throwable is null then exception will be thrown.\r\n     * <p>\r\n     * See examples in javadoc for {@link Mockito#when}\r\n     *\r\n     * @param throwables to be thrown on method invocation\r\n     *\r\n     * @return iOngoingStubbing object that allows stubbing consecutive calls\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/stubbing/OngoingStubbing.java",
        "class_name": "org.mockito.stubbing.OngoingStubbing",
        "signature": "org.mockito.stubbing.OngoingStubbing.thenCallRealMethod()",
        "snippet": "    OngoingStubbing<T> thenCallRealMethod();",
        "begin_line": 119,
        "end_line": 119,
        "comment": "     \r\n     * Sets the real implementation to be called when the method is called on a mock object.\r\n     * <p>\r\n     * As usual you are going to read <b>the partial mock warning</b>:\r\n     * Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.\r\n     * How does partial mock fit into this paradigm? Well, it just doesn't... \r\n     * Partial mock usually means that the complexity has been moved to a different method on the same object.\r\n     * In most cases, this is not the way you want to design your application.\r\n     * <p>\r\n     * However, there are rare cases when partial mocks come handy: \r\n     * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)\r\n     * However, I wouldn't use partial mocks for new, test-driven & well-designed code.\r\n     * <pre>\r\n     *   // someMethod() must be safe (e.g. doesn't throw, doesn't have dependencies to the object state, etc.)\r\n     *   // if it isn't safe then you will have trouble stubbing it using this api. Use Mockito.doCallRealMethod() instead. \r\n     *   when(mock.someMethod()).thenCallRealMethod();\r\n     *   \r\n     *   // calls real method:\r\n     *   mock.someMethod();\r\n     *   \r\n     * </pre>\r\n     * See also javadoc {@link Mockito#spy(Object)} to find out more about partial mocks. \r\n     * <b>Mockito.spy() is a recommended way of creating partial mocks.</b> \r\n     * The reason is it guarantees real methods are called against correctly constructed object because you're responsible for constructing the object passed to spy() method.\r\n     * <p>\r\n     * See examples in javadoc for {@link Mockito#when}\r\n     *\r\n     * @return iOngoingStubbing object that allows stubbing consecutive calls\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/stubbing/OngoingStubbing.java",
        "class_name": "org.mockito.stubbing.OngoingStubbing",
        "signature": "org.mockito.stubbing.OngoingStubbing.thenAnswer(org.mockito.stubbing.Answer<?>)",
        "snippet": "    OngoingStubbing<T> thenAnswer(Answer<?> answer);",
        "begin_line": 135,
        "end_line": 135,
        "comment": "\r\n     * Sets a generic Answer for the method. E.g:\r\n     * <pre>\r\n     * when(mock.someMethod(10)).thenAnswer(new Answer&lt;Integer&gt;() {\r\n     *     public Integer answer(InvocationOnMock invocation) throws Throwable {\r\n     *         return (Integer) invocation.getArguments()[0];\r\n     *     }\r\n     * }\r\n     * </pre>\r\n     *\r\n     * @param answer the custom answer to execute.\r\n     *\r\n     * @return iOngoingStubbing object that allows stubbing consecutive calls\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/configuration/IMockitoConfiguration.java",
        "class_name": "org.mockito.configuration.IMockitoConfiguration",
        "signature": "org.mockito.configuration.IMockitoConfiguration.getReturnValues()",
        "snippet": "    @Deprecated\n    ReturnValues getReturnValues();",
        "begin_line": 51,
        "end_line": 52,
        "comment": "\r\n     * @deprecated\r\n     * <b>Please use {@link IMockitoConfiguration#getDefaultAnswer()}</b>\r\n     * <p>\r\n     * Steps: \r\n     * <p>\r\n     * 1. Leave the implementation of getReturnValues() method empty - it's not going to be used anyway.\r\n     * <p>\r\n     * 2. Implement getDefaultAnswer() instead.\r\n     * <p>\r\n     * In rare cases your code might not compile with recent deprecation & changes.\r\n     * Very sorry for inconvenience but it had to be done in order to keep framework consistent.\r\n     * <p>\r\n     * See javadoc {@link ReturnValues} for info why this method was deprecated\r\n     * <p>\r\n     * Allows configuring the default return values of unstubbed invocations\r\n     * <p>\r\n     * See javadoc for {@link IMockitoConfiguration}\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/configuration/IMockitoConfiguration.java",
        "class_name": "org.mockito.configuration.IMockitoConfiguration",
        "signature": "org.mockito.configuration.IMockitoConfiguration.getDefaultAnswer()",
        "snippet": "    Answer<Object> getDefaultAnswer();",
        "begin_line": 59,
        "end_line": 59,
        "comment": "\r\n     * Allows configuring the default answers of unstubbed invocations\r\n     * <p>\r\n     * See javadoc for {@link IMockitoConfiguration}\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/configuration/IMockitoConfiguration.java",
        "class_name": "org.mockito.configuration.IMockitoConfiguration",
        "signature": "org.mockito.configuration.IMockitoConfiguration.getAnnotationEngine()",
        "snippet": "    AnnotationEngine getAnnotationEngine();",
        "begin_line": 66,
        "end_line": 66,
        "comment": "\r\n     * Configures annotations for mocks\r\n     * <p>\r\n     * See javadoc for {@link IMockitoConfiguration}\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/configuration/IMockitoConfiguration.java",
        "class_name": "org.mockito.configuration.IMockitoConfiguration",
        "signature": "org.mockito.configuration.IMockitoConfiguration.cleansStackTrace()",
        "snippet": "    boolean cleansStackTrace();",
        "begin_line": 77,
        "end_line": 77,
        "comment": "\r\n     * This should be turned on unless you're a Mockito developer and you wish\r\n     * to have verbose (read: messy) stack traces that only few understand (eg:\r\n     * Mockito developers)\r\n     * <p>\r\n     * See javadoc for {@link IMockitoConfiguration}\r\n     * \r\n     * @return if Mockito should clean stack traces\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/configuration/DefaultMockitoConfiguration.java",
        "class_name": "org.mockito.configuration.DefaultMockitoConfiguration",
        "signature": "org.mockito.configuration.DefaultMockitoConfiguration.getReturnValues()",
        "snippet": "    @Deprecated\n    public ReturnValues getReturnValues() {\n        throw new RuntimeException(\"\\n\" + \"This method should not be used by the framework because it was deprecated\"\n                + \"\\n\" + \"Please report the failure to the Mockito mailing list\");\n    }",
        "begin_line": 25,
        "end_line": 29,
        "comment": " (non-Javadoc)\r\n     * @see org.mockito.IMockitoConfiguration#getReturnValues()\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/configuration/DefaultMockitoConfiguration.java",
        "class_name": "org.mockito.configuration.DefaultMockitoConfiguration",
        "signature": "org.mockito.configuration.DefaultMockitoConfiguration.getDefaultAnswer()",
        "snippet": "    public Answer<Object> getDefaultAnswer() {\n        return new ReturnsEmptyValues();\n    }",
        "begin_line": 31,
        "end_line": 33,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/configuration/DefaultMockitoConfiguration.java",
        "class_name": "org.mockito.configuration.DefaultMockitoConfiguration",
        "signature": "org.mockito.configuration.DefaultMockitoConfiguration.getAnnotationEngine()",
        "snippet": "    public AnnotationEngine getAnnotationEngine() {\n        return new DefaultAnnotationEngine();\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": " (non-Javadoc)\r\n     * @see org.mockito.IMockitoConfiguration#getAnnotationEngine()\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/configuration/DefaultMockitoConfiguration.java",
        "class_name": "org.mockito.configuration.DefaultMockitoConfiguration",
        "signature": "org.mockito.configuration.DefaultMockitoConfiguration.cleansStackTrace()",
        "snippet": "    public boolean cleansStackTrace() {\n        return true;\n    }",
        "begin_line": 45,
        "end_line": 47,
        "comment": " (non-Javadoc)\r\n     * @see org.mockito.configuration.IMockitoConfiguration#cleansStackTrace()\r\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/org/mockito/configuration/AnnotationEngine.java",
        "class_name": "org.mockito.configuration.AnnotationEngine",
        "signature": "org.mockito.configuration.AnnotationEngine.createMockFor(java.lang.annotation.Annotation, java.lang.reflect.Field)",
        "snippet": "    Object createMockFor(Annotation annotation, Field field);",
        "begin_line": 32,
        "end_line": 32,
        "comment": "\r\n     * Usually the implementation checks the annotation  \r\n     * and then creates a mock object for specified field.\r\n     * <p>\r\n     * You don't need to set the mock on the field. Mockito does it for you. \r\n     * If in doubts look for implementations of this interface.\r\n     * <p>\r\n     * For annotations that you don't care about just return null - then Mockito will not initialize this field\r\n     * \r\n     * @param annotation annotation on the field, for example &#064;Mock\r\n     * @param field field to create mock object for\r\n     * @return mock created for specified field. Can be null - then Mockito will not initialize the field\r\n     ",
        "resolved_comments": {}
    }
]